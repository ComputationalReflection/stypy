
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: #
2: # Created by: Pearu Peterson, March 2002
3: #
4: ''' Test functions for linalg.matfuncs module
5: 
6: '''
7: from __future__ import division, print_function, absolute_import
8: 
9: import random
10: import functools
11: 
12: import numpy as np
13: from numpy import array, matrix, identity, dot, sqrt, double
14: from numpy.testing import (
15:         assert_array_equal, assert_array_less, assert_equal,
16:         assert_array_almost_equal, assert_array_almost_equal_nulp,
17:         assert_allclose, assert_)
18: import pytest
19: 
20: from scipy._lib._numpy_compat import _assert_warns, suppress_warnings
21: 
22: import scipy.linalg
23: from scipy.linalg import (funm, signm, logm, sqrtm, fractional_matrix_power,
24:         expm, expm_frechet, expm_cond, norm)
25: from scipy.linalg import _matfuncs_inv_ssq
26: import scipy.linalg._expm_frechet
27: 
28: from scipy.optimize import minimize
29: 
30: 
31: def _get_al_mohy_higham_2012_experiment_1():
32:     '''
33:     Return the test matrix from Experiment (1) of [1]_.
34: 
35:     References
36:     ----------
37:     .. [1] Awad H. Al-Mohy and Nicholas J. Higham (2012)
38:            "Improved Inverse Scaling and Squaring Algorithms
39:            for the Matrix Logarithm."
40:            SIAM Journal on Scientific Computing, 34 (4). C152-C169.
41:            ISSN 1095-7197
42: 
43:     '''
44:     A = np.array([
45:         [3.2346e-1, 3e4, 3e4, 3e4],
46:         [0, 3.0089e-1, 3e4, 3e4],
47:         [0, 0, 3.2210e-1, 3e4],
48:         [0, 0, 0, 3.0744e-1]], dtype=float)
49:     return A
50: 
51: 
52: class TestSignM(object):
53: 
54:     def test_nils(self):
55:         a = array([[29.2, -24.2, 69.5, 49.8, 7.],
56:                    [-9.2, 5.2, -18., -16.8, -2.],
57:                    [-10., 6., -20., -18., -2.],
58:                    [-9.6, 9.6, -25.5, -15.4, -2.],
59:                    [9.8, -4.8, 18., 18.2, 2.]])
60:         cr = array([[11.94933333,-2.24533333,15.31733333,21.65333333,-2.24533333],
61:                     [-3.84266667,0.49866667,-4.59066667,-7.18666667,0.49866667],
62:                     [-4.08,0.56,-4.92,-7.6,0.56],
63:                     [-4.03466667,1.04266667,-5.59866667,-7.02666667,1.04266667],
64:                     [4.15733333,-0.50133333,4.90933333,7.81333333,-0.50133333]])
65:         r = signm(a)
66:         assert_array_almost_equal(r,cr)
67: 
68:     def test_defective1(self):
69:         a = array([[0.0,1,0,0],[1,0,1,0],[0,0,0,1],[0,0,1,0]])
70:         r = signm(a, disp=False)
71:         #XXX: what would be the correct result?
72: 
73:     def test_defective2(self):
74:         a = array((
75:             [29.2,-24.2,69.5,49.8,7.0],
76:             [-9.2,5.2,-18.0,-16.8,-2.0],
77:             [-10.0,6.0,-20.0,-18.0,-2.0],
78:             [-9.6,9.6,-25.5,-15.4,-2.0],
79:             [9.8,-4.8,18.0,18.2,2.0]))
80:         r = signm(a, disp=False)
81:         #XXX: what would be the correct result?
82: 
83:     def test_defective3(self):
84:         a = array([[-2., 25., 0., 0., 0., 0., 0.],
85:                    [0., -3., 10., 3., 3., 3., 0.],
86:                    [0., 0., 2., 15., 3., 3., 0.],
87:                    [0., 0., 0., 0., 15., 3., 0.],
88:                    [0., 0., 0., 0., 3., 10., 0.],
89:                    [0., 0., 0., 0., 0., -2., 25.],
90:                    [0., 0., 0., 0., 0., 0., -3.]])
91:         r = signm(a, disp=False)
92:         #XXX: what would be the correct result?
93: 
94: 
95: class TestLogM(object):
96: 
97:     def test_nils(self):
98:         a = array([[-2., 25., 0., 0., 0., 0., 0.],
99:                    [0., -3., 10., 3., 3., 3., 0.],
100:                    [0., 0., 2., 15., 3., 3., 0.],
101:                    [0., 0., 0., 0., 15., 3., 0.],
102:                    [0., 0., 0., 0., 3., 10., 0.],
103:                    [0., 0., 0., 0., 0., -2., 25.],
104:                    [0., 0., 0., 0., 0., 0., -3.]])
105:         m = (identity(7)*3.1+0j)-a
106:         logm(m, disp=False)
107:         #XXX: what would be the correct result?
108: 
109:     def test_al_mohy_higham_2012_experiment_1_logm(self):
110:         # The logm completes the round trip successfully.
111:         # Note that the expm leg of the round trip is badly conditioned.
112:         A = _get_al_mohy_higham_2012_experiment_1()
113:         A_logm, info = logm(A, disp=False)
114:         A_round_trip = expm(A_logm)
115:         assert_allclose(A_round_trip, A, rtol=1e-5, atol=1e-14)
116: 
117:     def test_al_mohy_higham_2012_experiment_1_funm_log(self):
118:         # The raw funm with np.log does not complete the round trip.
119:         # Note that the expm leg of the round trip is badly conditioned.
120:         A = _get_al_mohy_higham_2012_experiment_1()
121:         A_funm_log, info = funm(A, np.log, disp=False)
122:         A_round_trip = expm(A_funm_log)
123:         assert_(not np.allclose(A_round_trip, A, rtol=1e-5, atol=1e-14))
124: 
125:     def test_round_trip_random_float(self):
126:         np.random.seed(1234)
127:         for n in range(1, 6):
128:             M_unscaled = np.random.randn(n, n)
129:             for scale in np.logspace(-4, 4, 9):
130:                 M = M_unscaled * scale
131: 
132:                 # Eigenvalues are related to the branch cut.
133:                 W = np.linalg.eigvals(M)
134:                 err_msg = 'M:{0} eivals:{1}'.format(M, W)
135: 
136:                 # Check sqrtm round trip because it is used within logm.
137:                 M_sqrtm, info = sqrtm(M, disp=False)
138:                 M_sqrtm_round_trip = M_sqrtm.dot(M_sqrtm)
139:                 assert_allclose(M_sqrtm_round_trip, M)
140: 
141:                 # Check logm round trip.
142:                 M_logm, info = logm(M, disp=False)
143:                 M_logm_round_trip = expm(M_logm)
144:                 assert_allclose(M_logm_round_trip, M, err_msg=err_msg)
145: 
146:     def test_round_trip_random_complex(self):
147:         np.random.seed(1234)
148:         for n in range(1, 6):
149:             M_unscaled = np.random.randn(n, n) + 1j * np.random.randn(n, n)
150:             for scale in np.logspace(-4, 4, 9):
151:                 M = M_unscaled * scale
152:                 M_logm, info = logm(M, disp=False)
153:                 M_round_trip = expm(M_logm)
154:                 assert_allclose(M_round_trip, M)
155: 
156:     def test_logm_type_preservation_and_conversion(self):
157:         # The logm matrix function should preserve the type of a matrix
158:         # whose eigenvalues are positive with zero imaginary part.
159:         # Test this preservation for variously structured matrices.
160:         complex_dtype_chars = ('F', 'D', 'G')
161:         for matrix_as_list in (
162:                 [[1, 0], [0, 1]],
163:                 [[1, 0], [1, 1]],
164:                 [[2, 1], [1, 1]],
165:                 [[2, 3], [1, 2]]):
166: 
167:             # check that the spectrum has the expected properties
168:             W = scipy.linalg.eigvals(matrix_as_list)
169:             assert_(not any(w.imag or w.real < 0 for w in W))
170: 
171:             # check float type preservation
172:             A = np.array(matrix_as_list, dtype=float)
173:             A_logm, info = logm(A, disp=False)
174:             assert_(A_logm.dtype.char not in complex_dtype_chars)
175: 
176:             # check complex type preservation
177:             A = np.array(matrix_as_list, dtype=complex)
178:             A_logm, info = logm(A, disp=False)
179:             assert_(A_logm.dtype.char in complex_dtype_chars)
180: 
181:             # check float->complex type conversion for the matrix negation
182:             A = -np.array(matrix_as_list, dtype=float)
183:             A_logm, info = logm(A, disp=False)
184:             assert_(A_logm.dtype.char in complex_dtype_chars)
185: 
186:     def test_complex_spectrum_real_logm(self):
187:         # This matrix has complex eigenvalues and real logm.
188:         # Its output dtype depends on its input dtype.
189:         M = [[1, 1, 2], [2, 1, 1], [1, 2, 1]]
190:         for dt in float, complex:
191:             X = np.array(M, dtype=dt)
192:             w = scipy.linalg.eigvals(X)
193:             assert_(1e-2 < np.absolute(w.imag).sum())
194:             Y, info = logm(X, disp=False)
195:             assert_(np.issubdtype(Y.dtype, np.inexact))
196:             assert_allclose(expm(Y), X)
197: 
198:     def test_real_mixed_sign_spectrum(self):
199:         # These matrices have real eigenvalues with mixed signs.
200:         # The output logm dtype is complex, regardless of input dtype.
201:         for M in (
202:                 [[1, 0], [0, -1]],
203:                 [[0, 1], [1, 0]]):
204:             for dt in float, complex:
205:                 A = np.array(M, dtype=dt)
206:                 A_logm, info = logm(A, disp=False)
207:                 assert_(np.issubdtype(A_logm.dtype, np.complexfloating))
208: 
209:     def test_exactly_singular(self):
210:         A = np.array([[0, 0], [1j, 1j]])
211:         B = np.asarray([[1, 1], [0, 0]])
212:         for M in A, A.T, B, B.T:
213:             expected_warning = _matfuncs_inv_ssq.LogmExactlySingularWarning
214:             L, info = _assert_warns(expected_warning, logm, M, disp=False)
215:             E = expm(L)
216:             assert_allclose(E, M, atol=1e-14)
217: 
218:     def test_nearly_singular(self):
219:         M = np.array([[1e-100]])
220:         expected_warning = _matfuncs_inv_ssq.LogmNearlySingularWarning
221:         L, info = _assert_warns(expected_warning, logm, M, disp=False)
222:         E = expm(L)
223:         assert_allclose(E, M, atol=1e-14)
224: 
225:     def test_opposite_sign_complex_eigenvalues(self):
226:         # See gh-6113
227:         E = [[0, 1], [-1, 0]]
228:         L = [[0, np.pi*0.5], [-np.pi*0.5, 0]]
229:         assert_allclose(expm(L), E, atol=1e-14)
230:         assert_allclose(logm(E), L, atol=1e-14)
231:         E = [[1j, 4], [0, -1j]]
232:         L = [[1j*np.pi*0.5, 2*np.pi], [0, -1j*np.pi*0.5]]
233:         assert_allclose(expm(L), E, atol=1e-14)
234:         assert_allclose(logm(E), L, atol=1e-14)
235:         E = [[1j, 0], [0, -1j]]
236:         L = [[1j*np.pi*0.5, 0], [0, -1j*np.pi*0.5]]
237:         assert_allclose(expm(L), E, atol=1e-14)
238:         assert_allclose(logm(E), L, atol=1e-14)
239: 
240: 
241: class TestSqrtM(object):
242:     def test_round_trip_random_float(self):
243:         np.random.seed(1234)
244:         for n in range(1, 6):
245:             M_unscaled = np.random.randn(n, n)
246:             for scale in np.logspace(-4, 4, 9):
247:                 M = M_unscaled * scale
248:                 M_sqrtm, info = sqrtm(M, disp=False)
249:                 M_sqrtm_round_trip = M_sqrtm.dot(M_sqrtm)
250:                 assert_allclose(M_sqrtm_round_trip, M)
251: 
252:     def test_round_trip_random_complex(self):
253:         np.random.seed(1234)
254:         for n in range(1, 6):
255:             M_unscaled = np.random.randn(n, n) + 1j * np.random.randn(n, n)
256:             for scale in np.logspace(-4, 4, 9):
257:                 M = M_unscaled * scale
258:                 M_sqrtm, info = sqrtm(M, disp=False)
259:                 M_sqrtm_round_trip = M_sqrtm.dot(M_sqrtm)
260:                 assert_allclose(M_sqrtm_round_trip, M)
261: 
262:     def test_bad(self):
263:         # See http://www.maths.man.ac.uk/~nareports/narep336.ps.gz
264:         e = 2**-5
265:         se = sqrt(e)
266:         a = array([[1.0,0,0,1],
267:                    [0,e,0,0],
268:                    [0,0,e,0],
269:                    [0,0,0,1]])
270:         sa = array([[1,0,0,0.5],
271:                     [0,se,0,0],
272:                     [0,0,se,0],
273:                     [0,0,0,1]])
274:         n = a.shape[0]
275:         assert_array_almost_equal(dot(sa,sa),a)
276:         # Check default sqrtm.
277:         esa = sqrtm(a, disp=False, blocksize=n)[0]
278:         assert_array_almost_equal(dot(esa,esa),a)
279:         # Check sqrtm with 2x2 blocks.
280:         esa = sqrtm(a, disp=False, blocksize=2)[0]
281:         assert_array_almost_equal(dot(esa,esa),a)
282: 
283:     def test_sqrtm_type_preservation_and_conversion(self):
284:         # The sqrtm matrix function should preserve the type of a matrix
285:         # whose eigenvalues are nonnegative with zero imaginary part.
286:         # Test this preservation for variously structured matrices.
287:         complex_dtype_chars = ('F', 'D', 'G')
288:         for matrix_as_list in (
289:                 [[1, 0], [0, 1]],
290:                 [[1, 0], [1, 1]],
291:                 [[2, 1], [1, 1]],
292:                 [[2, 3], [1, 2]],
293:                 [[1, 1], [1, 1]]):
294: 
295:             # check that the spectrum has the expected properties
296:             W = scipy.linalg.eigvals(matrix_as_list)
297:             assert_(not any(w.imag or w.real < 0 for w in W))
298: 
299:             # check float type preservation
300:             A = np.array(matrix_as_list, dtype=float)
301:             A_sqrtm, info = sqrtm(A, disp=False)
302:             assert_(A_sqrtm.dtype.char not in complex_dtype_chars)
303: 
304:             # check complex type preservation
305:             A = np.array(matrix_as_list, dtype=complex)
306:             A_sqrtm, info = sqrtm(A, disp=False)
307:             assert_(A_sqrtm.dtype.char in complex_dtype_chars)
308: 
309:             # check float->complex type conversion for the matrix negation
310:             A = -np.array(matrix_as_list, dtype=float)
311:             A_sqrtm, info = sqrtm(A, disp=False)
312:             assert_(A_sqrtm.dtype.char in complex_dtype_chars)
313: 
314:     def test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum(self):
315:         complex_dtype_chars = ('F', 'D', 'G')
316:         for matrix_as_list in (
317:                 [[1, 0], [0, -1]],
318:                 [[0, 1], [1, 0]],
319:                 [[0, 1, 0], [0, 0, 1], [1, 0, 0]]):
320: 
321:             # check that the spectrum has the expected properties
322:             W = scipy.linalg.eigvals(matrix_as_list)
323:             assert_(any(w.imag or w.real < 0 for w in W))
324: 
325:             # check complex->complex
326:             A = np.array(matrix_as_list, dtype=complex)
327:             A_sqrtm, info = sqrtm(A, disp=False)
328:             assert_(A_sqrtm.dtype.char in complex_dtype_chars)
329: 
330:             # check float->complex
331:             A = np.array(matrix_as_list, dtype=float)
332:             A_sqrtm, info = sqrtm(A, disp=False)
333:             assert_(A_sqrtm.dtype.char in complex_dtype_chars)
334: 
335:     def test_blocksizes(self):
336:         # Make sure I do not goof up the blocksizes when they do not divide n.
337:         np.random.seed(1234)
338:         for n in range(1, 8):
339:             A = np.random.rand(n, n) + 1j*np.random.randn(n, n)
340:             A_sqrtm_default, info = sqrtm(A, disp=False, blocksize=n)
341:             assert_allclose(A, np.linalg.matrix_power(A_sqrtm_default, 2))
342:             for blocksize in range(1, 10):
343:                 A_sqrtm_new, info = sqrtm(A, disp=False, blocksize=blocksize)
344:                 assert_allclose(A_sqrtm_default, A_sqrtm_new)
345: 
346:     def test_al_mohy_higham_2012_experiment_1(self):
347:         # Matrix square root of a tricky upper triangular matrix.
348:         A = _get_al_mohy_higham_2012_experiment_1()
349:         A_sqrtm, info = sqrtm(A, disp=False)
350:         A_round_trip = A_sqrtm.dot(A_sqrtm)
351:         assert_allclose(A_round_trip, A, rtol=1e-5)
352:         assert_allclose(np.tril(A_round_trip), np.tril(A))
353: 
354:     def test_strict_upper_triangular(self):
355:         # This matrix has no square root.
356:         for dt in int, float:
357:             A = np.array([
358:                 [0, 3, 0, 0],
359:                 [0, 0, 3, 0],
360:                 [0, 0, 0, 3],
361:                 [0, 0, 0, 0]], dtype=dt)
362:             A_sqrtm, info = sqrtm(A, disp=False)
363:             assert_(np.isnan(A_sqrtm).all())
364: 
365:     def test_weird_matrix(self):
366:         # The square root of matrix B exists.
367:         for dt in int, float:
368:             A = np.array([
369:                 [0, 0, 1],
370:                 [0, 0, 0],
371:                 [0, 1, 0]], dtype=dt)
372:             B = np.array([
373:                 [0, 1, 0],
374:                 [0, 0, 0],
375:                 [0, 0, 0]], dtype=dt)
376:             assert_array_equal(B, A.dot(A))
377: 
378:             # But scipy sqrtm is not clever enough to find it.
379:             B_sqrtm, info = sqrtm(B, disp=False)
380:             assert_(np.isnan(B_sqrtm).all())
381: 
382:     def test_disp(self):
383:         from io import StringIO
384:         np.random.seed(1234)
385: 
386:         A = np.random.rand(3, 3)
387:         B = sqrtm(A, disp=True)
388:         assert_allclose(B.dot(B), A)
389: 
390:     def test_opposite_sign_complex_eigenvalues(self):
391:         M = [[2j, 4], [0, -2j]]
392:         R = [[1+1j, 2], [0, 1-1j]]
393:         assert_allclose(np.dot(R, R), M, atol=1e-14)
394:         assert_allclose(sqrtm(M), R, atol=1e-14)
395: 
396: 
397: class TestFractionalMatrixPower(object):
398:     def test_round_trip_random_complex(self):
399:         np.random.seed(1234)
400:         for p in range(1, 5):
401:             for n in range(1, 5):
402:                 M_unscaled = np.random.randn(n, n) + 1j * np.random.randn(n, n)
403:                 for scale in np.logspace(-4, 4, 9):
404:                     M = M_unscaled * scale
405:                     M_root = fractional_matrix_power(M, 1/p)
406:                     M_round_trip = np.linalg.matrix_power(M_root, p)
407:                     assert_allclose(M_round_trip, M)
408: 
409:     def test_round_trip_random_float(self):
410:         # This test is more annoying because it can hit the branch cut;
411:         # this happens when the matrix has an eigenvalue
412:         # with no imaginary component and with a real negative component,
413:         # and it means that the principal branch does not exist.
414:         np.random.seed(1234)
415:         for p in range(1, 5):
416:             for n in range(1, 5):
417:                 M_unscaled = np.random.randn(n, n)
418:                 for scale in np.logspace(-4, 4, 9):
419:                     M = M_unscaled * scale
420:                     M_root = fractional_matrix_power(M, 1/p)
421:                     M_round_trip = np.linalg.matrix_power(M_root, p)
422:                     assert_allclose(M_round_trip, M)
423: 
424:     def test_larger_abs_fractional_matrix_powers(self):
425:         np.random.seed(1234)
426:         for n in (2, 3, 5):
427:             for i in range(10):
428:                 M = np.random.randn(n, n) + 1j * np.random.randn(n, n)
429:                 M_one_fifth = fractional_matrix_power(M, 0.2)
430:                 # Test the round trip.
431:                 M_round_trip = np.linalg.matrix_power(M_one_fifth, 5)
432:                 assert_allclose(M, M_round_trip)
433:                 # Test a large abs fractional power.
434:                 X = fractional_matrix_power(M, -5.4)
435:                 Y = np.linalg.matrix_power(M_one_fifth, -27)
436:                 assert_allclose(X, Y)
437:                 # Test another large abs fractional power.
438:                 X = fractional_matrix_power(M, 3.8)
439:                 Y = np.linalg.matrix_power(M_one_fifth, 19)
440:                 assert_allclose(X, Y)
441: 
442:     def test_random_matrices_and_powers(self):
443:         # Each independent iteration of this fuzz test picks random parameters.
444:         # It tries to hit some edge cases.
445:         np.random.seed(1234)
446:         nsamples = 20
447:         for i in range(nsamples):
448:             # Sample a matrix size and a random real power.
449:             n = random.randrange(1, 5)
450:             p = np.random.randn()
451: 
452:             # Sample a random real or complex matrix.
453:             matrix_scale = np.exp(random.randrange(-4, 5))
454:             A = np.random.randn(n, n)
455:             if random.choice((True, False)):
456:                 A = A + 1j * np.random.randn(n, n)
457:             A = A * matrix_scale
458: 
459:             # Check a couple of analytically equivalent ways
460:             # to compute the fractional matrix power.
461:             # These can be compared because they both use the principal branch.
462:             A_power = fractional_matrix_power(A, p)
463:             A_logm, info = logm(A, disp=False)
464:             A_power_expm_logm = expm(A_logm * p)
465:             assert_allclose(A_power, A_power_expm_logm)
466: 
467:     def test_al_mohy_higham_2012_experiment_1(self):
468:         # Fractional powers of a tricky upper triangular matrix.
469:         A = _get_al_mohy_higham_2012_experiment_1()
470: 
471:         # Test remainder matrix power.
472:         A_funm_sqrt, info = funm(A, np.sqrt, disp=False)
473:         A_sqrtm, info = sqrtm(A, disp=False)
474:         A_rem_power = _matfuncs_inv_ssq._remainder_matrix_power(A, 0.5)
475:         A_power = fractional_matrix_power(A, 0.5)
476:         assert_array_equal(A_rem_power, A_power)
477:         assert_allclose(A_sqrtm, A_power)
478:         assert_allclose(A_sqrtm, A_funm_sqrt)
479: 
480:         # Test more fractional powers.
481:         for p in (1/2, 5/3):
482:             A_power = fractional_matrix_power(A, p)
483:             A_round_trip = fractional_matrix_power(A_power, 1/p)
484:             assert_allclose(A_round_trip, A, rtol=1e-2)
485:             assert_allclose(np.tril(A_round_trip, 1), np.tril(A, 1))
486: 
487:     def test_briggs_helper_function(self):
488:         np.random.seed(1234)
489:         for a in np.random.randn(10) + 1j * np.random.randn(10):
490:             for k in range(5):
491:                 x_observed = _matfuncs_inv_ssq._briggs_helper_function(a, k)
492:                 x_expected = a ** np.exp2(-k) - 1
493:                 assert_allclose(x_observed, x_expected)
494: 
495:     def test_type_preservation_and_conversion(self):
496:         # The fractional_matrix_power matrix function should preserve
497:         # the type of a matrix whose eigenvalues
498:         # are positive with zero imaginary part.
499:         # Test this preservation for variously structured matrices.
500:         complex_dtype_chars = ('F', 'D', 'G')
501:         for matrix_as_list in (
502:                 [[1, 0], [0, 1]],
503:                 [[1, 0], [1, 1]],
504:                 [[2, 1], [1, 1]],
505:                 [[2, 3], [1, 2]]):
506: 
507:             # check that the spectrum has the expected properties
508:             W = scipy.linalg.eigvals(matrix_as_list)
509:             assert_(not any(w.imag or w.real < 0 for w in W))
510: 
511:             # Check various positive and negative powers
512:             # with absolute values bigger and smaller than 1.
513:             for p in (-2.4, -0.9, 0.2, 3.3):
514: 
515:                 # check float type preservation
516:                 A = np.array(matrix_as_list, dtype=float)
517:                 A_power = fractional_matrix_power(A, p)
518:                 assert_(A_power.dtype.char not in complex_dtype_chars)
519: 
520:                 # check complex type preservation
521:                 A = np.array(matrix_as_list, dtype=complex)
522:                 A_power = fractional_matrix_power(A, p)
523:                 assert_(A_power.dtype.char in complex_dtype_chars)
524: 
525:                 # check float->complex for the matrix negation
526:                 A = -np.array(matrix_as_list, dtype=float)
527:                 A_power = fractional_matrix_power(A, p)
528:                 assert_(A_power.dtype.char in complex_dtype_chars)
529: 
530:     def test_type_conversion_mixed_sign_or_complex_spectrum(self):
531:         complex_dtype_chars = ('F', 'D', 'G')
532:         for matrix_as_list in (
533:                 [[1, 0], [0, -1]],
534:                 [[0, 1], [1, 0]],
535:                 [[0, 1, 0], [0, 0, 1], [1, 0, 0]]):
536: 
537:             # check that the spectrum has the expected properties
538:             W = scipy.linalg.eigvals(matrix_as_list)
539:             assert_(any(w.imag or w.real < 0 for w in W))
540: 
541:             # Check various positive and negative powers
542:             # with absolute values bigger and smaller than 1.
543:             for p in (-2.4, -0.9, 0.2, 3.3):
544: 
545:                 # check complex->complex
546:                 A = np.array(matrix_as_list, dtype=complex)
547:                 A_power = fractional_matrix_power(A, p)
548:                 assert_(A_power.dtype.char in complex_dtype_chars)
549: 
550:                 # check float->complex
551:                 A = np.array(matrix_as_list, dtype=float)
552:                 A_power = fractional_matrix_power(A, p)
553:                 assert_(A_power.dtype.char in complex_dtype_chars)
554: 
555:     @pytest.mark.xfail(reason='Too unstable across LAPACKs.')
556:     def test_singular(self):
557:         # Negative fractional powers do not work with singular matrices.
558:         for matrix_as_list in (
559:                 [[0, 0], [0, 0]],
560:                 [[1, 1], [1, 1]],
561:                 [[1, 2], [3, 6]],
562:                 [[0, 0, 0], [0, 1, 1], [0, -1, 1]]):
563: 
564:             # Check fractional powers both for float and for complex types.
565:             for newtype in (float, complex):
566:                 A = np.array(matrix_as_list, dtype=newtype)
567:                 for p in (-0.7, -0.9, -2.4, -1.3):
568:                     A_power = fractional_matrix_power(A, p)
569:                     assert_(np.isnan(A_power).all())
570:                 for p in (0.2, 1.43):
571:                     A_power = fractional_matrix_power(A, p)
572:                     A_round_trip = fractional_matrix_power(A_power, 1/p)
573:                     assert_allclose(A_round_trip, A)
574: 
575:     def test_opposite_sign_complex_eigenvalues(self):
576:         M = [[2j, 4], [0, -2j]]
577:         R = [[1+1j, 2], [0, 1-1j]]
578:         assert_allclose(np.dot(R, R), M, atol=1e-14)
579:         assert_allclose(fractional_matrix_power(M, 0.5), R, atol=1e-14)
580: 
581: 
582: class TestExpM(object):
583:     def test_zero(self):
584:         a = array([[0.,0],[0,0]])
585:         assert_array_almost_equal(expm(a),[[1,0],[0,1]])
586: 
587:     def test_single_elt(self):
588:         # See gh-5853
589:         from scipy.sparse import csc_matrix
590: 
591:         vOne = -2.02683397006j
592:         vTwo = -2.12817566856j
593: 
594:         mOne = csc_matrix([[vOne]], dtype='complex')
595:         mTwo = csc_matrix([[vTwo]], dtype='complex')
596: 
597:         outOne = expm(mOne)
598:         outTwo = expm(mTwo)
599: 
600:         assert_equal(type(outOne), type(mOne))
601:         assert_equal(type(outTwo), type(mTwo))
602: 
603:         assert_allclose(outOne[0, 0], complex(-0.44039415155949196,
604:                                               -0.8978045395698304))
605:         assert_allclose(outTwo[0, 0], complex(-0.52896401032626006,
606:                                               -0.84864425749518878))
607: 
608: 
609: class TestExpmFrechet(object):
610: 
611:     def test_expm_frechet(self):
612:         # a test of the basic functionality
613:         M = np.array([
614:             [1, 2, 3, 4],
615:             [5, 6, 7, 8],
616:             [0, 0, 1, 2],
617:             [0, 0, 5, 6],
618:             ], dtype=float)
619:         A = np.array([
620:             [1, 2],
621:             [5, 6],
622:             ], dtype=float)
623:         E = np.array([
624:             [3, 4],
625:             [7, 8],
626:             ], dtype=float)
627:         expected_expm = scipy.linalg.expm(A)
628:         expected_frechet = scipy.linalg.expm(M)[:2, 2:]
629:         for kwargs in ({}, {'method':'SPS'}, {'method':'blockEnlarge'}):
630:             observed_expm, observed_frechet = expm_frechet(A, E, **kwargs)
631:             assert_allclose(expected_expm, observed_expm)
632:             assert_allclose(expected_frechet, observed_frechet)
633: 
634:     def test_small_norm_expm_frechet(self):
635:         # methodically test matrices with a range of norms, for better coverage
636:         M_original = np.array([
637:             [1, 2, 3, 4],
638:             [5, 6, 7, 8],
639:             [0, 0, 1, 2],
640:             [0, 0, 5, 6],
641:             ], dtype=float)
642:         A_original = np.array([
643:             [1, 2],
644:             [5, 6],
645:             ], dtype=float)
646:         E_original = np.array([
647:             [3, 4],
648:             [7, 8],
649:             ], dtype=float)
650:         A_original_norm_1 = scipy.linalg.norm(A_original, 1)
651:         selected_m_list = [1, 3, 5, 7, 9, 11, 13, 15]
652:         m_neighbor_pairs = zip(selected_m_list[:-1], selected_m_list[1:])
653:         for ma, mb in m_neighbor_pairs:
654:             ell_a = scipy.linalg._expm_frechet.ell_table_61[ma]
655:             ell_b = scipy.linalg._expm_frechet.ell_table_61[mb]
656:             target_norm_1 = 0.5 * (ell_a + ell_b)
657:             scale = target_norm_1 / A_original_norm_1
658:             M = scale * M_original
659:             A = scale * A_original
660:             E = scale * E_original
661:             expected_expm = scipy.linalg.expm(A)
662:             expected_frechet = scipy.linalg.expm(M)[:2, 2:]
663:             observed_expm, observed_frechet = expm_frechet(A, E)
664:             assert_allclose(expected_expm, observed_expm)
665:             assert_allclose(expected_frechet, observed_frechet)
666: 
667:     def test_fuzz(self):
668:         # try a bunch of crazy inputs
669:         rfuncs = (
670:                 np.random.uniform,
671:                 np.random.normal,
672:                 np.random.standard_cauchy,
673:                 np.random.exponential)
674:         ntests = 100
675:         for i in range(ntests):
676:             rfunc = random.choice(rfuncs)
677:             target_norm_1 = random.expovariate(1.0)
678:             n = random.randrange(2, 16)
679:             A_original = rfunc(size=(n,n))
680:             E_original = rfunc(size=(n,n))
681:             A_original_norm_1 = scipy.linalg.norm(A_original, 1)
682:             scale = target_norm_1 / A_original_norm_1
683:             A = scale * A_original
684:             E = scale * E_original
685:             M = np.vstack([
686:                 np.hstack([A, E]),
687:                 np.hstack([np.zeros_like(A), A])])
688:             expected_expm = scipy.linalg.expm(A)
689:             expected_frechet = scipy.linalg.expm(M)[:n, n:]
690:             observed_expm, observed_frechet = expm_frechet(A, E)
691:             assert_allclose(expected_expm, observed_expm)
692:             assert_allclose(expected_frechet, observed_frechet)
693: 
694:     def test_problematic_matrix(self):
695:         # this test case uncovered a bug which has since been fixed
696:         A = np.array([
697:                 [1.50591997, 1.93537998],
698:                 [0.41203263, 0.23443516],
699:                 ], dtype=float)
700:         E = np.array([
701:                 [1.87864034, 2.07055038],
702:                 [1.34102727, 0.67341123],
703:                 ], dtype=float)
704:         A_norm_1 = scipy.linalg.norm(A, 1)
705:         sps_expm, sps_frechet = expm_frechet(
706:                 A, E, method='SPS')
707:         blockEnlarge_expm, blockEnlarge_frechet = expm_frechet(
708:                 A, E, method='blockEnlarge')
709:         assert_allclose(sps_expm, blockEnlarge_expm)
710:         assert_allclose(sps_frechet, blockEnlarge_frechet)
711: 
712:     @pytest.mark.slow
713:     @pytest.mark.skip(reason='this test is deliberately slow')
714:     def test_medium_matrix(self):
715:         # profile this to see the speed difference
716:         n = 1000
717:         A = np.random.exponential(size=(n, n))
718:         E = np.random.exponential(size=(n, n))
719:         sps_expm, sps_frechet = expm_frechet(
720:                 A, E, method='SPS')
721:         blockEnlarge_expm, blockEnlarge_frechet = expm_frechet(
722:                 A, E, method='blockEnlarge')
723:         assert_allclose(sps_expm, blockEnlarge_expm)
724:         assert_allclose(sps_frechet, blockEnlarge_frechet)
725: 
726: 
727: def _help_expm_cond_search(A, A_norm, X, X_norm, eps, p):
728:     p = np.reshape(p, A.shape)
729:     p_norm = norm(p)
730:     perturbation = eps * p * (A_norm / p_norm)
731:     X_prime = expm(A + perturbation)
732:     scaled_relative_error = norm(X_prime - X) / (X_norm * eps)
733:     return -scaled_relative_error
734: 
735: 
736: def _normalized_like(A, B):
737:     return A * (scipy.linalg.norm(B) / scipy.linalg.norm(A))
738: 
739: 
740: def _relative_error(f, A, perturbation):
741:     X = f(A)
742:     X_prime = f(A + perturbation)
743:     return norm(X_prime - X) / norm(X)
744: 
745: 
746: class TestExpmConditionNumber(object):
747:     def test_expm_cond_smoke(self):
748:         np.random.seed(1234)
749:         for n in range(1, 4):
750:             A = np.random.randn(n, n)
751:             kappa = expm_cond(A)
752:             assert_array_less(0, kappa)
753: 
754:     def test_expm_bad_condition_number(self):
755:         A = np.array([
756:             [-1.128679820, 9.614183771e4, -4.524855739e9, 2.924969411e14],
757:             [0, -1.201010529, 9.634696872e4, -4.681048289e9],
758:             [0, 0, -1.132893222, 9.532491830e4],
759:             [0, 0, 0, -1.179475332],
760:             ])
761:         kappa = expm_cond(A)
762:         assert_array_less(1e36, kappa)
763: 
764:     def test_univariate(self):
765:         np.random.seed(12345)
766:         for x in np.linspace(-5, 5, num=11):
767:             A = np.array([[x]])
768:             assert_allclose(expm_cond(A), abs(x))
769:         for x in np.logspace(-2, 2, num=11):
770:             A = np.array([[x]])
771:             assert_allclose(expm_cond(A), abs(x))
772:         for i in range(10):
773:             A = np.random.randn(1, 1)
774:             assert_allclose(expm_cond(A), np.absolute(A)[0, 0])
775: 
776:     @pytest.mark.slow
777:     def test_expm_cond_fuzz(self):
778:         np.random.seed(12345)
779:         eps = 1e-5
780:         nsamples = 10
781:         for i in range(nsamples):
782:             n = np.random.randint(2, 5)
783:             A = np.random.randn(n, n)
784:             A_norm = scipy.linalg.norm(A)
785:             X = expm(A)
786:             X_norm = scipy.linalg.norm(X)
787:             kappa = expm_cond(A)
788: 
789:             # Look for the small perturbation that gives the greatest
790:             # relative error.
791:             f = functools.partial(_help_expm_cond_search,
792:                     A, A_norm, X, X_norm, eps)
793:             guess = np.ones(n*n)
794:             out = minimize(f, guess, method='L-BFGS-B')
795:             xopt = out.x
796:             yopt = f(xopt)
797:             p_best = eps * _normalized_like(np.reshape(xopt, A.shape), A)
798:             p_best_relerr = _relative_error(expm, A, p_best)
799:             assert_allclose(p_best_relerr, -yopt * eps)
800: 
801:             # Check that the identified perturbation indeed gives greater
802:             # relative error than random perturbations with similar norms.
803:             for j in range(5):
804:                 p_rand = eps * _normalized_like(np.random.randn(*A.shape), A)
805:                 assert_allclose(norm(p_best), norm(p_rand))
806:                 p_rand_relerr = _relative_error(expm, A, p_rand)
807:                 assert_array_less(p_rand_relerr, p_best_relerr)
808: 
809:             # The greatest relative error should not be much greater than
810:             # eps times the condition number kappa.
811:             # In the limit as eps approaches zero it should never be greater.
812:             assert_array_less(p_best_relerr, (1 + 2*eps) * eps * kappa)
813: 
814: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_100601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6, (-1)), 'str', ' Test functions for linalg.matfuncs module\n\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import random' statement (line 9)
import random

import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'random', random, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import functools' statement (line 10)
import functools

import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'functools', functools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import numpy' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/tests/')
import_100602 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy')

if (type(import_100602) is not StypyTypeError):

    if (import_100602 != 'pyd_module'):
        __import__(import_100602)
        sys_modules_100603 = sys.modules[import_100602]
        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'np', sys_modules_100603.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy', import_100602)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/tests/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'from numpy import array, matrix, identity, dot, sqrt, double' statement (line 13)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/tests/')
import_100604 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy')

if (type(import_100604) is not StypyTypeError):

    if (import_100604 != 'pyd_module'):
        __import__(import_100604)
        sys_modules_100605 = sys.modules[import_100604]
        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy', sys_modules_100605.module_type_store, module_type_store, ['array', 'matrix', 'identity', 'dot', 'sqrt', 'double'])
        nest_module(stypy.reporting.localization.Localization(__file__, 13, 0), __file__, sys_modules_100605, sys_modules_100605.module_type_store, module_type_store)
    else:
        from numpy import array, matrix, identity, dot, sqrt, double

        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy', None, module_type_store, ['array', 'matrix', 'identity', 'dot', 'sqrt', 'double'], [array, matrix, identity, dot, sqrt, double])

else:
    # Assigning a type to the variable 'numpy' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy', import_100604)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/tests/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from numpy.testing import assert_array_equal, assert_array_less, assert_equal, assert_array_almost_equal, assert_array_almost_equal_nulp, assert_allclose, assert_' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/tests/')
import_100606 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.testing')

if (type(import_100606) is not StypyTypeError):

    if (import_100606 != 'pyd_module'):
        __import__(import_100606)
        sys_modules_100607 = sys.modules[import_100606]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.testing', sys_modules_100607.module_type_store, module_type_store, ['assert_array_equal', 'assert_array_less', 'assert_equal', 'assert_array_almost_equal', 'assert_array_almost_equal_nulp', 'assert_allclose', 'assert_'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_100607, sys_modules_100607.module_type_store, module_type_store)
    else:
        from numpy.testing import assert_array_equal, assert_array_less, assert_equal, assert_array_almost_equal, assert_array_almost_equal_nulp, assert_allclose, assert_

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.testing', None, module_type_store, ['assert_array_equal', 'assert_array_less', 'assert_equal', 'assert_array_almost_equal', 'assert_array_almost_equal_nulp', 'assert_allclose', 'assert_'], [assert_array_equal, assert_array_less, assert_equal, assert_array_almost_equal, assert_array_almost_equal_nulp, assert_allclose, assert_])

else:
    # Assigning a type to the variable 'numpy.testing' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.testing', import_100606)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/tests/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'import pytest' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/tests/')
import_100608 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'pytest')

if (type(import_100608) is not StypyTypeError):

    if (import_100608 != 'pyd_module'):
        __import__(import_100608)
        sys_modules_100609 = sys.modules[import_100608]
        import_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'pytest', sys_modules_100609.module_type_store, module_type_store)
    else:
        import pytest

        import_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'pytest', pytest, module_type_store)

else:
    # Assigning a type to the variable 'pytest' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'pytest', import_100608)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/tests/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'from scipy._lib._numpy_compat import _assert_warns, suppress_warnings' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/tests/')
import_100610 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy._lib._numpy_compat')

if (type(import_100610) is not StypyTypeError):

    if (import_100610 != 'pyd_module'):
        __import__(import_100610)
        sys_modules_100611 = sys.modules[import_100610]
        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy._lib._numpy_compat', sys_modules_100611.module_type_store, module_type_store, ['_assert_warns', 'suppress_warnings'])
        nest_module(stypy.reporting.localization.Localization(__file__, 20, 0), __file__, sys_modules_100611, sys_modules_100611.module_type_store, module_type_store)
    else:
        from scipy._lib._numpy_compat import _assert_warns, suppress_warnings

        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy._lib._numpy_compat', None, module_type_store, ['_assert_warns', 'suppress_warnings'], [_assert_warns, suppress_warnings])

else:
    # Assigning a type to the variable 'scipy._lib._numpy_compat' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy._lib._numpy_compat', import_100610)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/tests/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'import scipy.linalg' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/tests/')
import_100612 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.linalg')

if (type(import_100612) is not StypyTypeError):

    if (import_100612 != 'pyd_module'):
        __import__(import_100612)
        sys_modules_100613 = sys.modules[import_100612]
        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.linalg', sys_modules_100613.module_type_store, module_type_store)
    else:
        import scipy.linalg

        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.linalg', scipy.linalg, module_type_store)

else:
    # Assigning a type to the variable 'scipy.linalg' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.linalg', import_100612)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/tests/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'from scipy.linalg import funm, signm, logm, sqrtm, fractional_matrix_power, expm, expm_frechet, expm_cond, norm' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/tests/')
import_100614 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'scipy.linalg')

if (type(import_100614) is not StypyTypeError):

    if (import_100614 != 'pyd_module'):
        __import__(import_100614)
        sys_modules_100615 = sys.modules[import_100614]
        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'scipy.linalg', sys_modules_100615.module_type_store, module_type_store, ['funm', 'signm', 'logm', 'sqrtm', 'fractional_matrix_power', 'expm', 'expm_frechet', 'expm_cond', 'norm'])
        nest_module(stypy.reporting.localization.Localization(__file__, 23, 0), __file__, sys_modules_100615, sys_modules_100615.module_type_store, module_type_store)
    else:
        from scipy.linalg import funm, signm, logm, sqrtm, fractional_matrix_power, expm, expm_frechet, expm_cond, norm

        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'scipy.linalg', None, module_type_store, ['funm', 'signm', 'logm', 'sqrtm', 'fractional_matrix_power', 'expm', 'expm_frechet', 'expm_cond', 'norm'], [funm, signm, logm, sqrtm, fractional_matrix_power, expm, expm_frechet, expm_cond, norm])

else:
    # Assigning a type to the variable 'scipy.linalg' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'scipy.linalg', import_100614)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/tests/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'from scipy.linalg import _matfuncs_inv_ssq' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/tests/')
import_100616 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'scipy.linalg')

if (type(import_100616) is not StypyTypeError):

    if (import_100616 != 'pyd_module'):
        __import__(import_100616)
        sys_modules_100617 = sys.modules[import_100616]
        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'scipy.linalg', sys_modules_100617.module_type_store, module_type_store, ['_matfuncs_inv_ssq'])
        nest_module(stypy.reporting.localization.Localization(__file__, 25, 0), __file__, sys_modules_100617, sys_modules_100617.module_type_store, module_type_store)
    else:
        from scipy.linalg import _matfuncs_inv_ssq

        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'scipy.linalg', None, module_type_store, ['_matfuncs_inv_ssq'], [_matfuncs_inv_ssq])

else:
    # Assigning a type to the variable 'scipy.linalg' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'scipy.linalg', import_100616)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/tests/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'import scipy.linalg._expm_frechet' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/tests/')
import_100618 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.linalg._expm_frechet')

if (type(import_100618) is not StypyTypeError):

    if (import_100618 != 'pyd_module'):
        __import__(import_100618)
        sys_modules_100619 = sys.modules[import_100618]
        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.linalg._expm_frechet', sys_modules_100619.module_type_store, module_type_store)
    else:
        import scipy.linalg._expm_frechet

        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.linalg._expm_frechet', scipy.linalg._expm_frechet, module_type_store)

else:
    # Assigning a type to the variable 'scipy.linalg._expm_frechet' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.linalg._expm_frechet', import_100618)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/tests/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'from scipy.optimize import minimize' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/tests/')
import_100620 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.optimize')

if (type(import_100620) is not StypyTypeError):

    if (import_100620 != 'pyd_module'):
        __import__(import_100620)
        sys_modules_100621 = sys.modules[import_100620]
        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.optimize', sys_modules_100621.module_type_store, module_type_store, ['minimize'])
        nest_module(stypy.reporting.localization.Localization(__file__, 28, 0), __file__, sys_modules_100621, sys_modules_100621.module_type_store, module_type_store)
    else:
        from scipy.optimize import minimize

        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.optimize', None, module_type_store, ['minimize'], [minimize])

else:
    # Assigning a type to the variable 'scipy.optimize' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.optimize', import_100620)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/tests/')


@norecursion
def _get_al_mohy_higham_2012_experiment_1(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_al_mohy_higham_2012_experiment_1'
    module_type_store = module_type_store.open_function_context('_get_al_mohy_higham_2012_experiment_1', 31, 0, False)
    
    # Passed parameters checking function
    _get_al_mohy_higham_2012_experiment_1.stypy_localization = localization
    _get_al_mohy_higham_2012_experiment_1.stypy_type_of_self = None
    _get_al_mohy_higham_2012_experiment_1.stypy_type_store = module_type_store
    _get_al_mohy_higham_2012_experiment_1.stypy_function_name = '_get_al_mohy_higham_2012_experiment_1'
    _get_al_mohy_higham_2012_experiment_1.stypy_param_names_list = []
    _get_al_mohy_higham_2012_experiment_1.stypy_varargs_param_name = None
    _get_al_mohy_higham_2012_experiment_1.stypy_kwargs_param_name = None
    _get_al_mohy_higham_2012_experiment_1.stypy_call_defaults = defaults
    _get_al_mohy_higham_2012_experiment_1.stypy_call_varargs = varargs
    _get_al_mohy_higham_2012_experiment_1.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_al_mohy_higham_2012_experiment_1', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_al_mohy_higham_2012_experiment_1', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_al_mohy_higham_2012_experiment_1(...)' code ##################

    str_100622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, (-1)), 'str', '\n    Return the test matrix from Experiment (1) of [1]_.\n\n    References\n    ----------\n    .. [1] Awad H. Al-Mohy and Nicholas J. Higham (2012)\n           "Improved Inverse Scaling and Squaring Algorithms\n           for the Matrix Logarithm."\n           SIAM Journal on Scientific Computing, 34 (4). C152-C169.\n           ISSN 1095-7197\n\n    ')
    
    # Assigning a Call to a Name (line 44):
    
    # Assigning a Call to a Name (line 44):
    
    # Call to array(...): (line 44)
    # Processing the call arguments (line 44)
    
    # Obtaining an instance of the builtin type 'list' (line 44)
    list_100625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 44)
    # Adding element type (line 44)
    
    # Obtaining an instance of the builtin type 'list' (line 45)
    list_100626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 45)
    # Adding element type (line 45)
    float_100627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 9), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 8), list_100626, float_100627)
    # Adding element type (line 45)
    float_100628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 20), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 8), list_100626, float_100628)
    # Adding element type (line 45)
    float_100629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 25), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 8), list_100626, float_100629)
    # Adding element type (line 45)
    float_100630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 30), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 8), list_100626, float_100630)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 17), list_100625, list_100626)
    # Adding element type (line 44)
    
    # Obtaining an instance of the builtin type 'list' (line 46)
    list_100631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 46)
    # Adding element type (line 46)
    int_100632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 9), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 8), list_100631, int_100632)
    # Adding element type (line 46)
    float_100633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 12), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 8), list_100631, float_100633)
    # Adding element type (line 46)
    float_100634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 23), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 8), list_100631, float_100634)
    # Adding element type (line 46)
    float_100635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 28), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 8), list_100631, float_100635)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 17), list_100625, list_100631)
    # Adding element type (line 44)
    
    # Obtaining an instance of the builtin type 'list' (line 47)
    list_100636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 47)
    # Adding element type (line 47)
    int_100637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 9), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 47, 8), list_100636, int_100637)
    # Adding element type (line 47)
    int_100638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 12), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 47, 8), list_100636, int_100638)
    # Adding element type (line 47)
    float_100639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 15), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 47, 8), list_100636, float_100639)
    # Adding element type (line 47)
    float_100640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 26), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 47, 8), list_100636, float_100640)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 17), list_100625, list_100636)
    # Adding element type (line 44)
    
    # Obtaining an instance of the builtin type 'list' (line 48)
    list_100641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 48)
    # Adding element type (line 48)
    int_100642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 9), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 8), list_100641, int_100642)
    # Adding element type (line 48)
    int_100643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 12), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 8), list_100641, int_100643)
    # Adding element type (line 48)
    int_100644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 15), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 8), list_100641, int_100644)
    # Adding element type (line 48)
    float_100645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 18), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 8), list_100641, float_100645)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 17), list_100625, list_100641)
    
    # Processing the call keyword arguments (line 44)
    # Getting the type of 'float' (line 48)
    float_100646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 37), 'float', False)
    keyword_100647 = float_100646
    kwargs_100648 = {'dtype': keyword_100647}
    # Getting the type of 'np' (line 44)
    np_100623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 44, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 44)
    array_100624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 44, 8), np_100623, 'array')
    # Calling array(args, kwargs) (line 44)
    array_call_result_100649 = invoke(stypy.reporting.localization.Localization(__file__, 44, 8), array_100624, *[list_100625], **kwargs_100648)
    
    # Assigning a type to the variable 'A' (line 44)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 4), 'A', array_call_result_100649)
    # Getting the type of 'A' (line 49)
    A_100650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 11), 'A')
    # Assigning a type to the variable 'stypy_return_type' (line 49)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 4), 'stypy_return_type', A_100650)
    
    # ################# End of '_get_al_mohy_higham_2012_experiment_1(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_al_mohy_higham_2012_experiment_1' in the type store
    # Getting the type of 'stypy_return_type' (line 31)
    stypy_return_type_100651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_100651)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_al_mohy_higham_2012_experiment_1'
    return stypy_return_type_100651

# Assigning a type to the variable '_get_al_mohy_higham_2012_experiment_1' (line 31)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), '_get_al_mohy_higham_2012_experiment_1', _get_al_mohy_higham_2012_experiment_1)
# Declaration of the 'TestSignM' class

class TestSignM(object, ):

    @norecursion
    def test_nils(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_nils'
        module_type_store = module_type_store.open_function_context('test_nils', 54, 4, False)
        # Assigning a type to the variable 'self' (line 55)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSignM.test_nils.__dict__.__setitem__('stypy_localization', localization)
        TestSignM.test_nils.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSignM.test_nils.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSignM.test_nils.__dict__.__setitem__('stypy_function_name', 'TestSignM.test_nils')
        TestSignM.test_nils.__dict__.__setitem__('stypy_param_names_list', [])
        TestSignM.test_nils.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSignM.test_nils.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSignM.test_nils.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSignM.test_nils.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSignM.test_nils.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSignM.test_nils.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSignM.test_nils', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_nils', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_nils(...)' code ##################

        
        # Assigning a Call to a Name (line 55):
        
        # Assigning a Call to a Name (line 55):
        
        # Call to array(...): (line 55)
        # Processing the call arguments (line 55)
        
        # Obtaining an instance of the builtin type 'list' (line 55)
        list_100653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 55)
        # Adding element type (line 55)
        
        # Obtaining an instance of the builtin type 'list' (line 55)
        list_100654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 55)
        # Adding element type (line 55)
        float_100655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 55, 19), list_100654, float_100655)
        # Adding element type (line 55)
        float_100656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 26), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 55, 19), list_100654, float_100656)
        # Adding element type (line 55)
        float_100657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 33), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 55, 19), list_100654, float_100657)
        # Adding element type (line 55)
        float_100658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 39), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 55, 19), list_100654, float_100658)
        # Adding element type (line 55)
        float_100659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 55, 19), list_100654, float_100659)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 55, 18), list_100653, list_100654)
        # Adding element type (line 55)
        
        # Obtaining an instance of the builtin type 'list' (line 56)
        list_100660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 56)
        # Adding element type (line 56)
        float_100661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 56, 19), list_100660, float_100661)
        # Adding element type (line 56)
        float_100662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 26), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 56, 19), list_100660, float_100662)
        # Adding element type (line 56)
        float_100663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 31), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 56, 19), list_100660, float_100663)
        # Adding element type (line 56)
        float_100664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 37), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 56, 19), list_100660, float_100664)
        # Adding element type (line 56)
        float_100665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 56, 19), list_100660, float_100665)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 55, 18), list_100653, list_100660)
        # Adding element type (line 55)
        
        # Obtaining an instance of the builtin type 'list' (line 57)
        list_100666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 57)
        # Adding element type (line 57)
        float_100667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 57, 19), list_100666, float_100667)
        # Adding element type (line 57)
        float_100668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 26), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 57, 19), list_100666, float_100668)
        # Adding element type (line 57)
        float_100669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 30), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 57, 19), list_100666, float_100669)
        # Adding element type (line 57)
        float_100670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 57, 19), list_100666, float_100670)
        # Adding element type (line 57)
        float_100671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 42), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 57, 19), list_100666, float_100671)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 55, 18), list_100653, list_100666)
        # Adding element type (line 55)
        
        # Obtaining an instance of the builtin type 'list' (line 58)
        list_100672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 58)
        # Adding element type (line 58)
        float_100673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 58, 19), list_100672, float_100673)
        # Adding element type (line 58)
        float_100674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 26), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 58, 19), list_100672, float_100674)
        # Adding element type (line 58)
        float_100675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 31), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 58, 19), list_100672, float_100675)
        # Adding element type (line 58)
        float_100676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 58, 19), list_100672, float_100676)
        # Adding element type (line 58)
        float_100677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 58, 19), list_100672, float_100677)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 55, 18), list_100653, list_100672)
        # Adding element type (line 55)
        
        # Obtaining an instance of the builtin type 'list' (line 59)
        list_100678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 59)
        # Adding element type (line 59)
        float_100679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 59, 19), list_100678, float_100679)
        # Adding element type (line 59)
        float_100680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 25), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 59, 19), list_100678, float_100680)
        # Adding element type (line 59)
        float_100681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 31), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 59, 19), list_100678, float_100681)
        # Adding element type (line 59)
        float_100682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 59, 19), list_100678, float_100682)
        # Adding element type (line 59)
        float_100683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 42), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 59, 19), list_100678, float_100683)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 55, 18), list_100653, list_100678)
        
        # Processing the call keyword arguments (line 55)
        kwargs_100684 = {}
        # Getting the type of 'array' (line 55)
        array_100652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 12), 'array', False)
        # Calling array(args, kwargs) (line 55)
        array_call_result_100685 = invoke(stypy.reporting.localization.Localization(__file__, 55, 12), array_100652, *[list_100653], **kwargs_100684)
        
        # Assigning a type to the variable 'a' (line 55)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 8), 'a', array_call_result_100685)
        
        # Assigning a Call to a Name (line 60):
        
        # Assigning a Call to a Name (line 60):
        
        # Call to array(...): (line 60)
        # Processing the call arguments (line 60)
        
        # Obtaining an instance of the builtin type 'list' (line 60)
        list_100687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 60)
        # Adding element type (line 60)
        
        # Obtaining an instance of the builtin type 'list' (line 60)
        list_100688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 60)
        # Adding element type (line 60)
        float_100689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 21), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 20), list_100688, float_100689)
        # Adding element type (line 60)
        float_100690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 33), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 20), list_100688, float_100690)
        # Adding element type (line 60)
        float_100691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 20), list_100688, float_100691)
        # Adding element type (line 60)
        float_100692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 57), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 20), list_100688, float_100692)
        # Adding element type (line 60)
        float_100693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 69), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 20), list_100688, float_100693)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 19), list_100687, list_100688)
        # Adding element type (line 60)
        
        # Obtaining an instance of the builtin type 'list' (line 61)
        list_100694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 61)
        # Adding element type (line 61)
        float_100695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 21), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 61, 20), list_100694, float_100695)
        # Adding element type (line 61)
        float_100696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 33), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 61, 20), list_100694, float_100696)
        # Adding element type (line 61)
        float_100697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 61, 20), list_100694, float_100697)
        # Adding element type (line 61)
        float_100698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 56), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 61, 20), list_100694, float_100698)
        # Adding element type (line 61)
        float_100699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 68), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 61, 20), list_100694, float_100699)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 19), list_100687, list_100694)
        # Adding element type (line 60)
        
        # Obtaining an instance of the builtin type 'list' (line 62)
        list_100700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 62)
        # Adding element type (line 62)
        float_100701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 21), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 62, 20), list_100700, float_100701)
        # Adding element type (line 62)
        float_100702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 27), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 62, 20), list_100700, float_100702)
        # Adding element type (line 62)
        float_100703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 62, 20), list_100700, float_100703)
        # Adding element type (line 62)
        float_100704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 62, 20), list_100700, float_100704)
        # Adding element type (line 62)
        float_100705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 43), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 62, 20), list_100700, float_100705)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 19), list_100687, list_100700)
        # Adding element type (line 60)
        
        # Obtaining an instance of the builtin type 'list' (line 63)
        list_100706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 63)
        # Adding element type (line 63)
        float_100707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 21), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 63, 20), list_100706, float_100707)
        # Adding element type (line 63)
        float_100708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 33), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 63, 20), list_100706, float_100708)
        # Adding element type (line 63)
        float_100709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 63, 20), list_100706, float_100709)
        # Adding element type (line 63)
        float_100710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 56), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 63, 20), list_100706, float_100710)
        # Adding element type (line 63)
        float_100711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 68), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 63, 20), list_100706, float_100711)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 19), list_100687, list_100706)
        # Adding element type (line 60)
        
        # Obtaining an instance of the builtin type 'list' (line 64)
        list_100712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 64)
        # Adding element type (line 64)
        float_100713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 21), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 64, 20), list_100712, float_100713)
        # Adding element type (line 64)
        float_100714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 64, 20), list_100712, float_100714)
        # Adding element type (line 64)
        float_100715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 64, 20), list_100712, float_100715)
        # Adding element type (line 64)
        float_100716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 55), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 64, 20), list_100712, float_100716)
        # Adding element type (line 64)
        float_100717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 66), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 64, 20), list_100712, float_100717)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 19), list_100687, list_100712)
        
        # Processing the call keyword arguments (line 60)
        kwargs_100718 = {}
        # Getting the type of 'array' (line 60)
        array_100686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 13), 'array', False)
        # Calling array(args, kwargs) (line 60)
        array_call_result_100719 = invoke(stypy.reporting.localization.Localization(__file__, 60, 13), array_100686, *[list_100687], **kwargs_100718)
        
        # Assigning a type to the variable 'cr' (line 60)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 8), 'cr', array_call_result_100719)
        
        # Assigning a Call to a Name (line 65):
        
        # Assigning a Call to a Name (line 65):
        
        # Call to signm(...): (line 65)
        # Processing the call arguments (line 65)
        # Getting the type of 'a' (line 65)
        a_100721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 18), 'a', False)
        # Processing the call keyword arguments (line 65)
        kwargs_100722 = {}
        # Getting the type of 'signm' (line 65)
        signm_100720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 12), 'signm', False)
        # Calling signm(args, kwargs) (line 65)
        signm_call_result_100723 = invoke(stypy.reporting.localization.Localization(__file__, 65, 12), signm_100720, *[a_100721], **kwargs_100722)
        
        # Assigning a type to the variable 'r' (line 65)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 65, 8), 'r', signm_call_result_100723)
        
        # Call to assert_array_almost_equal(...): (line 66)
        # Processing the call arguments (line 66)
        # Getting the type of 'r' (line 66)
        r_100725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 34), 'r', False)
        # Getting the type of 'cr' (line 66)
        cr_100726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 36), 'cr', False)
        # Processing the call keyword arguments (line 66)
        kwargs_100727 = {}
        # Getting the type of 'assert_array_almost_equal' (line 66)
        assert_array_almost_equal_100724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 8), 'assert_array_almost_equal', False)
        # Calling assert_array_almost_equal(args, kwargs) (line 66)
        assert_array_almost_equal_call_result_100728 = invoke(stypy.reporting.localization.Localization(__file__, 66, 8), assert_array_almost_equal_100724, *[r_100725, cr_100726], **kwargs_100727)
        
        
        # ################# End of 'test_nils(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_nils' in the type store
        # Getting the type of 'stypy_return_type' (line 54)
        stypy_return_type_100729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100729)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_nils'
        return stypy_return_type_100729


    @norecursion
    def test_defective1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_defective1'
        module_type_store = module_type_store.open_function_context('test_defective1', 68, 4, False)
        # Assigning a type to the variable 'self' (line 69)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSignM.test_defective1.__dict__.__setitem__('stypy_localization', localization)
        TestSignM.test_defective1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSignM.test_defective1.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSignM.test_defective1.__dict__.__setitem__('stypy_function_name', 'TestSignM.test_defective1')
        TestSignM.test_defective1.__dict__.__setitem__('stypy_param_names_list', [])
        TestSignM.test_defective1.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSignM.test_defective1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSignM.test_defective1.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSignM.test_defective1.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSignM.test_defective1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSignM.test_defective1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSignM.test_defective1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_defective1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_defective1(...)' code ##################

        
        # Assigning a Call to a Name (line 69):
        
        # Assigning a Call to a Name (line 69):
        
        # Call to array(...): (line 69)
        # Processing the call arguments (line 69)
        
        # Obtaining an instance of the builtin type 'list' (line 69)
        list_100731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 69)
        # Adding element type (line 69)
        
        # Obtaining an instance of the builtin type 'list' (line 69)
        list_100732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 69)
        # Adding element type (line 69)
        float_100733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 19), list_100732, float_100733)
        # Adding element type (line 69)
        int_100734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 19), list_100732, int_100734)
        # Adding element type (line 69)
        int_100735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 19), list_100732, int_100735)
        # Adding element type (line 69)
        int_100736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 19), list_100732, int_100736)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 18), list_100731, list_100732)
        # Adding element type (line 69)
        
        # Obtaining an instance of the builtin type 'list' (line 69)
        list_100737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 69)
        # Adding element type (line 69)
        int_100738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 31), list_100737, int_100738)
        # Adding element type (line 69)
        int_100739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 31), list_100737, int_100739)
        # Adding element type (line 69)
        int_100740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 31), list_100737, int_100740)
        # Adding element type (line 69)
        int_100741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 38), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 31), list_100737, int_100741)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 18), list_100731, list_100737)
        # Adding element type (line 69)
        
        # Obtaining an instance of the builtin type 'list' (line 69)
        list_100742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 69)
        # Adding element type (line 69)
        int_100743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 41), list_100742, int_100743)
        # Adding element type (line 69)
        int_100744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 44), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 41), list_100742, int_100744)
        # Adding element type (line 69)
        int_100745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 41), list_100742, int_100745)
        # Adding element type (line 69)
        int_100746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 48), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 41), list_100742, int_100746)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 18), list_100731, list_100742)
        # Adding element type (line 69)
        
        # Obtaining an instance of the builtin type 'list' (line 69)
        list_100747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 69)
        # Adding element type (line 69)
        int_100748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 51), list_100747, int_100748)
        # Adding element type (line 69)
        int_100749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 54), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 51), list_100747, int_100749)
        # Adding element type (line 69)
        int_100750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 51), list_100747, int_100750)
        # Adding element type (line 69)
        int_100751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 58), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 51), list_100747, int_100751)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 69, 18), list_100731, list_100747)
        
        # Processing the call keyword arguments (line 69)
        kwargs_100752 = {}
        # Getting the type of 'array' (line 69)
        array_100730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 12), 'array', False)
        # Calling array(args, kwargs) (line 69)
        array_call_result_100753 = invoke(stypy.reporting.localization.Localization(__file__, 69, 12), array_100730, *[list_100731], **kwargs_100752)
        
        # Assigning a type to the variable 'a' (line 69)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 8), 'a', array_call_result_100753)
        
        # Assigning a Call to a Name (line 70):
        
        # Assigning a Call to a Name (line 70):
        
        # Call to signm(...): (line 70)
        # Processing the call arguments (line 70)
        # Getting the type of 'a' (line 70)
        a_100755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 18), 'a', False)
        # Processing the call keyword arguments (line 70)
        # Getting the type of 'False' (line 70)
        False_100756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 26), 'False', False)
        keyword_100757 = False_100756
        kwargs_100758 = {'disp': keyword_100757}
        # Getting the type of 'signm' (line 70)
        signm_100754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 12), 'signm', False)
        # Calling signm(args, kwargs) (line 70)
        signm_call_result_100759 = invoke(stypy.reporting.localization.Localization(__file__, 70, 12), signm_100754, *[a_100755], **kwargs_100758)
        
        # Assigning a type to the variable 'r' (line 70)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 8), 'r', signm_call_result_100759)
        
        # ################# End of 'test_defective1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_defective1' in the type store
        # Getting the type of 'stypy_return_type' (line 68)
        stypy_return_type_100760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100760)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_defective1'
        return stypy_return_type_100760


    @norecursion
    def test_defective2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_defective2'
        module_type_store = module_type_store.open_function_context('test_defective2', 73, 4, False)
        # Assigning a type to the variable 'self' (line 74)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSignM.test_defective2.__dict__.__setitem__('stypy_localization', localization)
        TestSignM.test_defective2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSignM.test_defective2.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSignM.test_defective2.__dict__.__setitem__('stypy_function_name', 'TestSignM.test_defective2')
        TestSignM.test_defective2.__dict__.__setitem__('stypy_param_names_list', [])
        TestSignM.test_defective2.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSignM.test_defective2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSignM.test_defective2.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSignM.test_defective2.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSignM.test_defective2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSignM.test_defective2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSignM.test_defective2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_defective2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_defective2(...)' code ##################

        
        # Assigning a Call to a Name (line 74):
        
        # Assigning a Call to a Name (line 74):
        
        # Call to array(...): (line 74)
        # Processing the call arguments (line 74)
        
        # Obtaining an instance of the builtin type 'tuple' (line 75)
        tuple_100762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 12), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 75)
        # Adding element type (line 75)
        
        # Obtaining an instance of the builtin type 'list' (line 75)
        list_100763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 75)
        # Adding element type (line 75)
        float_100764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 13), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 12), list_100763, float_100764)
        # Adding element type (line 75)
        float_100765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 18), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 12), list_100763, float_100765)
        # Adding element type (line 75)
        float_100766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 12), list_100763, float_100766)
        # Adding element type (line 75)
        float_100767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 29), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 12), list_100763, float_100767)
        # Adding element type (line 75)
        float_100768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 34), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 12), list_100763, float_100768)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 12), tuple_100762, list_100763)
        # Adding element type (line 75)
        
        # Obtaining an instance of the builtin type 'list' (line 76)
        list_100769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 76)
        # Adding element type (line 76)
        float_100770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 13), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 76, 12), list_100769, float_100770)
        # Adding element type (line 76)
        float_100771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 18), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 76, 12), list_100769, float_100771)
        # Adding element type (line 76)
        float_100772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 22), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 76, 12), list_100769, float_100772)
        # Adding element type (line 76)
        float_100773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 76, 12), list_100769, float_100773)
        # Adding element type (line 76)
        float_100774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 34), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 76, 12), list_100769, float_100774)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 12), tuple_100762, list_100769)
        # Adding element type (line 75)
        
        # Obtaining an instance of the builtin type 'list' (line 77)
        list_100775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 77)
        # Adding element type (line 77)
        float_100776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 13), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 12), list_100775, float_100776)
        # Adding element type (line 77)
        float_100777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 19), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 12), list_100775, float_100777)
        # Adding element type (line 77)
        float_100778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 23), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 12), list_100775, float_100778)
        # Adding element type (line 77)
        float_100779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 29), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 12), list_100775, float_100779)
        # Adding element type (line 77)
        float_100780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 35), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 12), list_100775, float_100780)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 12), tuple_100762, list_100775)
        # Adding element type (line 75)
        
        # Obtaining an instance of the builtin type 'list' (line 78)
        list_100781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 78)
        # Adding element type (line 78)
        float_100782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 13), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 78, 12), list_100781, float_100782)
        # Adding element type (line 78)
        float_100783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 18), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 78, 12), list_100781, float_100783)
        # Adding element type (line 78)
        float_100784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 22), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 78, 12), list_100781, float_100784)
        # Adding element type (line 78)
        float_100785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 78, 12), list_100781, float_100785)
        # Adding element type (line 78)
        float_100786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 34), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 78, 12), list_100781, float_100786)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 12), tuple_100762, list_100781)
        # Adding element type (line 75)
        
        # Obtaining an instance of the builtin type 'list' (line 79)
        list_100787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 79)
        # Adding element type (line 79)
        float_100788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 13), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 79, 12), list_100787, float_100788)
        # Adding element type (line 79)
        float_100789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 17), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 79, 12), list_100787, float_100789)
        # Adding element type (line 79)
        float_100790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 22), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 79, 12), list_100787, float_100790)
        # Adding element type (line 79)
        float_100791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 27), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 79, 12), list_100787, float_100791)
        # Adding element type (line 79)
        float_100792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 79, 12), list_100787, float_100792)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 12), tuple_100762, list_100787)
        
        # Processing the call keyword arguments (line 74)
        kwargs_100793 = {}
        # Getting the type of 'array' (line 74)
        array_100761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 12), 'array', False)
        # Calling array(args, kwargs) (line 74)
        array_call_result_100794 = invoke(stypy.reporting.localization.Localization(__file__, 74, 12), array_100761, *[tuple_100762], **kwargs_100793)
        
        # Assigning a type to the variable 'a' (line 74)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 8), 'a', array_call_result_100794)
        
        # Assigning a Call to a Name (line 80):
        
        # Assigning a Call to a Name (line 80):
        
        # Call to signm(...): (line 80)
        # Processing the call arguments (line 80)
        # Getting the type of 'a' (line 80)
        a_100796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 18), 'a', False)
        # Processing the call keyword arguments (line 80)
        # Getting the type of 'False' (line 80)
        False_100797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 26), 'False', False)
        keyword_100798 = False_100797
        kwargs_100799 = {'disp': keyword_100798}
        # Getting the type of 'signm' (line 80)
        signm_100795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 12), 'signm', False)
        # Calling signm(args, kwargs) (line 80)
        signm_call_result_100800 = invoke(stypy.reporting.localization.Localization(__file__, 80, 12), signm_100795, *[a_100796], **kwargs_100799)
        
        # Assigning a type to the variable 'r' (line 80)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 8), 'r', signm_call_result_100800)
        
        # ################# End of 'test_defective2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_defective2' in the type store
        # Getting the type of 'stypy_return_type' (line 73)
        stypy_return_type_100801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100801)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_defective2'
        return stypy_return_type_100801


    @norecursion
    def test_defective3(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_defective3'
        module_type_store = module_type_store.open_function_context('test_defective3', 83, 4, False)
        # Assigning a type to the variable 'self' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSignM.test_defective3.__dict__.__setitem__('stypy_localization', localization)
        TestSignM.test_defective3.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSignM.test_defective3.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSignM.test_defective3.__dict__.__setitem__('stypy_function_name', 'TestSignM.test_defective3')
        TestSignM.test_defective3.__dict__.__setitem__('stypy_param_names_list', [])
        TestSignM.test_defective3.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSignM.test_defective3.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSignM.test_defective3.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSignM.test_defective3.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSignM.test_defective3.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSignM.test_defective3.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSignM.test_defective3', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_defective3', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_defective3(...)' code ##################

        
        # Assigning a Call to a Name (line 84):
        
        # Assigning a Call to a Name (line 84):
        
        # Call to array(...): (line 84)
        # Processing the call arguments (line 84)
        
        # Obtaining an instance of the builtin type 'list' (line 84)
        list_100803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 84)
        # Adding element type (line 84)
        
        # Obtaining an instance of the builtin type 'list' (line 84)
        list_100804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 84)
        # Adding element type (line 84)
        float_100805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 19), list_100804, float_100805)
        # Adding element type (line 84)
        float_100806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 25), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 19), list_100804, float_100806)
        # Adding element type (line 84)
        float_100807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 30), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 19), list_100804, float_100807)
        # Adding element type (line 84)
        float_100808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 34), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 19), list_100804, float_100808)
        # Adding element type (line 84)
        float_100809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 19), list_100804, float_100809)
        # Adding element type (line 84)
        float_100810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 42), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 19), list_100804, float_100810)
        # Adding element type (line 84)
        float_100811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 46), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 19), list_100804, float_100811)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 18), list_100803, list_100804)
        # Adding element type (line 84)
        
        # Obtaining an instance of the builtin type 'list' (line 85)
        list_100812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 85)
        # Adding element type (line 85)
        float_100813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 19), list_100812, float_100813)
        # Adding element type (line 85)
        float_100814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 19), list_100812, float_100814)
        # Adding element type (line 85)
        float_100815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 29), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 19), list_100812, float_100815)
        # Adding element type (line 85)
        float_100816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 34), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 19), list_100812, float_100816)
        # Adding element type (line 85)
        float_100817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 19), list_100812, float_100817)
        # Adding element type (line 85)
        float_100818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 42), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 19), list_100812, float_100818)
        # Adding element type (line 85)
        float_100819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 46), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 19), list_100812, float_100819)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 18), list_100803, list_100812)
        # Adding element type (line 84)
        
        # Obtaining an instance of the builtin type 'list' (line 86)
        list_100820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 86)
        # Adding element type (line 86)
        float_100821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 86, 19), list_100820, float_100821)
        # Adding element type (line 86)
        float_100822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 86, 19), list_100820, float_100822)
        # Adding element type (line 86)
        float_100823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 86, 19), list_100820, float_100823)
        # Adding element type (line 86)
        float_100824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 86, 19), list_100820, float_100824)
        # Adding element type (line 86)
        float_100825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 37), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 86, 19), list_100820, float_100825)
        # Adding element type (line 86)
        float_100826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 41), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 86, 19), list_100820, float_100826)
        # Adding element type (line 86)
        float_100827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 86, 19), list_100820, float_100827)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 18), list_100803, list_100820)
        # Adding element type (line 84)
        
        # Obtaining an instance of the builtin type 'list' (line 87)
        list_100828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 87)
        # Adding element type (line 87)
        float_100829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 19), list_100828, float_100829)
        # Adding element type (line 87)
        float_100830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 19), list_100828, float_100830)
        # Adding element type (line 87)
        float_100831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 19), list_100828, float_100831)
        # Adding element type (line 87)
        float_100832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 19), list_100828, float_100832)
        # Adding element type (line 87)
        float_100833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 19), list_100828, float_100833)
        # Adding element type (line 87)
        float_100834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 41), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 19), list_100828, float_100834)
        # Adding element type (line 87)
        float_100835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 19), list_100828, float_100835)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 18), list_100803, list_100828)
        # Adding element type (line 84)
        
        # Obtaining an instance of the builtin type 'list' (line 88)
        list_100836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 88)
        # Adding element type (line 88)
        float_100837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 88, 19), list_100836, float_100837)
        # Adding element type (line 88)
        float_100838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 88, 19), list_100836, float_100838)
        # Adding element type (line 88)
        float_100839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 88, 19), list_100836, float_100839)
        # Adding element type (line 88)
        float_100840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 88, 19), list_100836, float_100840)
        # Adding element type (line 88)
        float_100841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 88, 19), list_100836, float_100841)
        # Adding element type (line 88)
        float_100842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 88, 19), list_100836, float_100842)
        # Adding element type (line 88)
        float_100843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 88, 19), list_100836, float_100843)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 18), list_100803, list_100836)
        # Adding element type (line 84)
        
        # Obtaining an instance of the builtin type 'list' (line 89)
        list_100844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 89)
        # Adding element type (line 89)
        float_100845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 89, 19), list_100844, float_100845)
        # Adding element type (line 89)
        float_100846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 89, 19), list_100844, float_100846)
        # Adding element type (line 89)
        float_100847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 89, 19), list_100844, float_100847)
        # Adding element type (line 89)
        float_100848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 89, 19), list_100844, float_100848)
        # Adding element type (line 89)
        float_100849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 89, 19), list_100844, float_100849)
        # Adding element type (line 89)
        float_100850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 89, 19), list_100844, float_100850)
        # Adding element type (line 89)
        float_100851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 89, 19), list_100844, float_100851)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 18), list_100803, list_100844)
        # Adding element type (line 84)
        
        # Obtaining an instance of the builtin type 'list' (line 90)
        list_100852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 90)
        # Adding element type (line 90)
        float_100853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 19), list_100852, float_100853)
        # Adding element type (line 90)
        float_100854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 19), list_100852, float_100854)
        # Adding element type (line 90)
        float_100855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 19), list_100852, float_100855)
        # Adding element type (line 90)
        float_100856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 19), list_100852, float_100856)
        # Adding element type (line 90)
        float_100857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 19), list_100852, float_100857)
        # Adding element type (line 90)
        float_100858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 19), list_100852, float_100858)
        # Adding element type (line 90)
        float_100859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 19), list_100852, float_100859)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 18), list_100803, list_100852)
        
        # Processing the call keyword arguments (line 84)
        kwargs_100860 = {}
        # Getting the type of 'array' (line 84)
        array_100802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 12), 'array', False)
        # Calling array(args, kwargs) (line 84)
        array_call_result_100861 = invoke(stypy.reporting.localization.Localization(__file__, 84, 12), array_100802, *[list_100803], **kwargs_100860)
        
        # Assigning a type to the variable 'a' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 8), 'a', array_call_result_100861)
        
        # Assigning a Call to a Name (line 91):
        
        # Assigning a Call to a Name (line 91):
        
        # Call to signm(...): (line 91)
        # Processing the call arguments (line 91)
        # Getting the type of 'a' (line 91)
        a_100863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 18), 'a', False)
        # Processing the call keyword arguments (line 91)
        # Getting the type of 'False' (line 91)
        False_100864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 26), 'False', False)
        keyword_100865 = False_100864
        kwargs_100866 = {'disp': keyword_100865}
        # Getting the type of 'signm' (line 91)
        signm_100862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 12), 'signm', False)
        # Calling signm(args, kwargs) (line 91)
        signm_call_result_100867 = invoke(stypy.reporting.localization.Localization(__file__, 91, 12), signm_100862, *[a_100863], **kwargs_100866)
        
        # Assigning a type to the variable 'r' (line 91)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 8), 'r', signm_call_result_100867)
        
        # ################# End of 'test_defective3(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_defective3' in the type store
        # Getting the type of 'stypy_return_type' (line 83)
        stypy_return_type_100868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100868)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_defective3'
        return stypy_return_type_100868


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 52, 0, False)
        # Assigning a type to the variable 'self' (line 53)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSignM.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'TestSignM' (line 52)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), 'TestSignM', TestSignM)
# Declaration of the 'TestLogM' class

class TestLogM(object, ):

    @norecursion
    def test_nils(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_nils'
        module_type_store = module_type_store.open_function_context('test_nils', 97, 4, False)
        # Assigning a type to the variable 'self' (line 98)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestLogM.test_nils.__dict__.__setitem__('stypy_localization', localization)
        TestLogM.test_nils.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestLogM.test_nils.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestLogM.test_nils.__dict__.__setitem__('stypy_function_name', 'TestLogM.test_nils')
        TestLogM.test_nils.__dict__.__setitem__('stypy_param_names_list', [])
        TestLogM.test_nils.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestLogM.test_nils.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestLogM.test_nils.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestLogM.test_nils.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestLogM.test_nils.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestLogM.test_nils.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.test_nils', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_nils', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_nils(...)' code ##################

        
        # Assigning a Call to a Name (line 98):
        
        # Assigning a Call to a Name (line 98):
        
        # Call to array(...): (line 98)
        # Processing the call arguments (line 98)
        
        # Obtaining an instance of the builtin type 'list' (line 98)
        list_100870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 98)
        # Adding element type (line 98)
        
        # Obtaining an instance of the builtin type 'list' (line 98)
        list_100871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 98)
        # Adding element type (line 98)
        float_100872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 19), list_100871, float_100872)
        # Adding element type (line 98)
        float_100873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 25), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 19), list_100871, float_100873)
        # Adding element type (line 98)
        float_100874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 30), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 19), list_100871, float_100874)
        # Adding element type (line 98)
        float_100875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 34), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 19), list_100871, float_100875)
        # Adding element type (line 98)
        float_100876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 19), list_100871, float_100876)
        # Adding element type (line 98)
        float_100877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 42), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 19), list_100871, float_100877)
        # Adding element type (line 98)
        float_100878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 46), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 19), list_100871, float_100878)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 18), list_100870, list_100871)
        # Adding element type (line 98)
        
        # Obtaining an instance of the builtin type 'list' (line 99)
        list_100879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 99)
        # Adding element type (line 99)
        float_100880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 99, 19), list_100879, float_100880)
        # Adding element type (line 99)
        float_100881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 99, 19), list_100879, float_100881)
        # Adding element type (line 99)
        float_100882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 29), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 99, 19), list_100879, float_100882)
        # Adding element type (line 99)
        float_100883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 34), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 99, 19), list_100879, float_100883)
        # Adding element type (line 99)
        float_100884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 99, 19), list_100879, float_100884)
        # Adding element type (line 99)
        float_100885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 42), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 99, 19), list_100879, float_100885)
        # Adding element type (line 99)
        float_100886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 46), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 99, 19), list_100879, float_100886)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 18), list_100870, list_100879)
        # Adding element type (line 98)
        
        # Obtaining an instance of the builtin type 'list' (line 100)
        list_100887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 100)
        # Adding element type (line 100)
        float_100888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 100, 19), list_100887, float_100888)
        # Adding element type (line 100)
        float_100889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 100, 19), list_100887, float_100889)
        # Adding element type (line 100)
        float_100890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 100, 19), list_100887, float_100890)
        # Adding element type (line 100)
        float_100891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 100, 19), list_100887, float_100891)
        # Adding element type (line 100)
        float_100892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 37), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 100, 19), list_100887, float_100892)
        # Adding element type (line 100)
        float_100893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 41), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 100, 19), list_100887, float_100893)
        # Adding element type (line 100)
        float_100894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 100, 19), list_100887, float_100894)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 18), list_100870, list_100887)
        # Adding element type (line 98)
        
        # Obtaining an instance of the builtin type 'list' (line 101)
        list_100895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 101)
        # Adding element type (line 101)
        float_100896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 101, 19), list_100895, float_100896)
        # Adding element type (line 101)
        float_100897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 101, 19), list_100895, float_100897)
        # Adding element type (line 101)
        float_100898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 101, 19), list_100895, float_100898)
        # Adding element type (line 101)
        float_100899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 101, 19), list_100895, float_100899)
        # Adding element type (line 101)
        float_100900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 101, 19), list_100895, float_100900)
        # Adding element type (line 101)
        float_100901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 41), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 101, 19), list_100895, float_100901)
        # Adding element type (line 101)
        float_100902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 101, 19), list_100895, float_100902)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 18), list_100870, list_100895)
        # Adding element type (line 98)
        
        # Obtaining an instance of the builtin type 'list' (line 102)
        list_100903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 102)
        # Adding element type (line 102)
        float_100904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 19), list_100903, float_100904)
        # Adding element type (line 102)
        float_100905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 19), list_100903, float_100905)
        # Adding element type (line 102)
        float_100906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 19), list_100903, float_100906)
        # Adding element type (line 102)
        float_100907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 19), list_100903, float_100907)
        # Adding element type (line 102)
        float_100908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 19), list_100903, float_100908)
        # Adding element type (line 102)
        float_100909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 19), list_100903, float_100909)
        # Adding element type (line 102)
        float_100910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 19), list_100903, float_100910)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 18), list_100870, list_100903)
        # Adding element type (line 98)
        
        # Obtaining an instance of the builtin type 'list' (line 103)
        list_100911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 103)
        # Adding element type (line 103)
        float_100912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 19), list_100911, float_100912)
        # Adding element type (line 103)
        float_100913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 19), list_100911, float_100913)
        # Adding element type (line 103)
        float_100914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 19), list_100911, float_100914)
        # Adding element type (line 103)
        float_100915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 19), list_100911, float_100915)
        # Adding element type (line 103)
        float_100916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 19), list_100911, float_100916)
        # Adding element type (line 103)
        float_100917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 19), list_100911, float_100917)
        # Adding element type (line 103)
        float_100918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 19), list_100911, float_100918)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 18), list_100870, list_100911)
        # Adding element type (line 98)
        
        # Obtaining an instance of the builtin type 'list' (line 104)
        list_100919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 104)
        # Adding element type (line 104)
        float_100920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 19), list_100919, float_100920)
        # Adding element type (line 104)
        float_100921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 19), list_100919, float_100921)
        # Adding element type (line 104)
        float_100922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 19), list_100919, float_100922)
        # Adding element type (line 104)
        float_100923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 19), list_100919, float_100923)
        # Adding element type (line 104)
        float_100924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 19), list_100919, float_100924)
        # Adding element type (line 104)
        float_100925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 40), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 19), list_100919, float_100925)
        # Adding element type (line 104)
        float_100926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 19), list_100919, float_100926)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 18), list_100870, list_100919)
        
        # Processing the call keyword arguments (line 98)
        kwargs_100927 = {}
        # Getting the type of 'array' (line 98)
        array_100869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 12), 'array', False)
        # Calling array(args, kwargs) (line 98)
        array_call_result_100928 = invoke(stypy.reporting.localization.Localization(__file__, 98, 12), array_100869, *[list_100870], **kwargs_100927)
        
        # Assigning a type to the variable 'a' (line 98)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 8), 'a', array_call_result_100928)
        
        # Assigning a BinOp to a Name (line 105):
        
        # Assigning a BinOp to a Name (line 105):
        
        # Call to identity(...): (line 105)
        # Processing the call arguments (line 105)
        int_100930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 22), 'int')
        # Processing the call keyword arguments (line 105)
        kwargs_100931 = {}
        # Getting the type of 'identity' (line 105)
        identity_100929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 13), 'identity', False)
        # Calling identity(args, kwargs) (line 105)
        identity_call_result_100932 = invoke(stypy.reporting.localization.Localization(__file__, 105, 13), identity_100929, *[int_100930], **kwargs_100931)
        
        float_100933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 25), 'float')
        # Applying the binary operator '*' (line 105)
        result_mul_100934 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 13), '*', identity_call_result_100932, float_100933)
        
        complex_100935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 29), 'complex')
        # Applying the binary operator '+' (line 105)
        result_add_100936 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 13), '+', result_mul_100934, complex_100935)
        
        # Getting the type of 'a' (line 105)
        a_100937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 33), 'a')
        # Applying the binary operator '-' (line 105)
        result_sub_100938 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 12), '-', result_add_100936, a_100937)
        
        # Assigning a type to the variable 'm' (line 105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 8), 'm', result_sub_100938)
        
        # Call to logm(...): (line 106)
        # Processing the call arguments (line 106)
        # Getting the type of 'm' (line 106)
        m_100940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 13), 'm', False)
        # Processing the call keyword arguments (line 106)
        # Getting the type of 'False' (line 106)
        False_100941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 21), 'False', False)
        keyword_100942 = False_100941
        kwargs_100943 = {'disp': keyword_100942}
        # Getting the type of 'logm' (line 106)
        logm_100939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 8), 'logm', False)
        # Calling logm(args, kwargs) (line 106)
        logm_call_result_100944 = invoke(stypy.reporting.localization.Localization(__file__, 106, 8), logm_100939, *[m_100940], **kwargs_100943)
        
        
        # ################# End of 'test_nils(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_nils' in the type store
        # Getting the type of 'stypy_return_type' (line 97)
        stypy_return_type_100945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100945)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_nils'
        return stypy_return_type_100945


    @norecursion
    def test_al_mohy_higham_2012_experiment_1_logm(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_al_mohy_higham_2012_experiment_1_logm'
        module_type_store = module_type_store.open_function_context('test_al_mohy_higham_2012_experiment_1_logm', 109, 4, False)
        # Assigning a type to the variable 'self' (line 110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestLogM.test_al_mohy_higham_2012_experiment_1_logm.__dict__.__setitem__('stypy_localization', localization)
        TestLogM.test_al_mohy_higham_2012_experiment_1_logm.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestLogM.test_al_mohy_higham_2012_experiment_1_logm.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestLogM.test_al_mohy_higham_2012_experiment_1_logm.__dict__.__setitem__('stypy_function_name', 'TestLogM.test_al_mohy_higham_2012_experiment_1_logm')
        TestLogM.test_al_mohy_higham_2012_experiment_1_logm.__dict__.__setitem__('stypy_param_names_list', [])
        TestLogM.test_al_mohy_higham_2012_experiment_1_logm.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestLogM.test_al_mohy_higham_2012_experiment_1_logm.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestLogM.test_al_mohy_higham_2012_experiment_1_logm.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestLogM.test_al_mohy_higham_2012_experiment_1_logm.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestLogM.test_al_mohy_higham_2012_experiment_1_logm.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestLogM.test_al_mohy_higham_2012_experiment_1_logm.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.test_al_mohy_higham_2012_experiment_1_logm', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_al_mohy_higham_2012_experiment_1_logm', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_al_mohy_higham_2012_experiment_1_logm(...)' code ##################

        
        # Assigning a Call to a Name (line 112):
        
        # Assigning a Call to a Name (line 112):
        
        # Call to _get_al_mohy_higham_2012_experiment_1(...): (line 112)
        # Processing the call keyword arguments (line 112)
        kwargs_100947 = {}
        # Getting the type of '_get_al_mohy_higham_2012_experiment_1' (line 112)
        _get_al_mohy_higham_2012_experiment_1_100946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 12), '_get_al_mohy_higham_2012_experiment_1', False)
        # Calling _get_al_mohy_higham_2012_experiment_1(args, kwargs) (line 112)
        _get_al_mohy_higham_2012_experiment_1_call_result_100948 = invoke(stypy.reporting.localization.Localization(__file__, 112, 12), _get_al_mohy_higham_2012_experiment_1_100946, *[], **kwargs_100947)
        
        # Assigning a type to the variable 'A' (line 112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 8), 'A', _get_al_mohy_higham_2012_experiment_1_call_result_100948)
        
        # Assigning a Call to a Tuple (line 113):
        
        # Assigning a Subscript to a Name (line 113):
        
        # Obtaining the type of the subscript
        int_100949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 8), 'int')
        
        # Call to logm(...): (line 113)
        # Processing the call arguments (line 113)
        # Getting the type of 'A' (line 113)
        A_100951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 28), 'A', False)
        # Processing the call keyword arguments (line 113)
        # Getting the type of 'False' (line 113)
        False_100952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 36), 'False', False)
        keyword_100953 = False_100952
        kwargs_100954 = {'disp': keyword_100953}
        # Getting the type of 'logm' (line 113)
        logm_100950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 23), 'logm', False)
        # Calling logm(args, kwargs) (line 113)
        logm_call_result_100955 = invoke(stypy.reporting.localization.Localization(__file__, 113, 23), logm_100950, *[A_100951], **kwargs_100954)
        
        # Obtaining the member '__getitem__' of a type (line 113)
        getitem___100956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 8), logm_call_result_100955, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 113)
        subscript_call_result_100957 = invoke(stypy.reporting.localization.Localization(__file__, 113, 8), getitem___100956, int_100949)
        
        # Assigning a type to the variable 'tuple_var_assignment_100533' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'tuple_var_assignment_100533', subscript_call_result_100957)
        
        # Assigning a Subscript to a Name (line 113):
        
        # Obtaining the type of the subscript
        int_100958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 8), 'int')
        
        # Call to logm(...): (line 113)
        # Processing the call arguments (line 113)
        # Getting the type of 'A' (line 113)
        A_100960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 28), 'A', False)
        # Processing the call keyword arguments (line 113)
        # Getting the type of 'False' (line 113)
        False_100961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 36), 'False', False)
        keyword_100962 = False_100961
        kwargs_100963 = {'disp': keyword_100962}
        # Getting the type of 'logm' (line 113)
        logm_100959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 23), 'logm', False)
        # Calling logm(args, kwargs) (line 113)
        logm_call_result_100964 = invoke(stypy.reporting.localization.Localization(__file__, 113, 23), logm_100959, *[A_100960], **kwargs_100963)
        
        # Obtaining the member '__getitem__' of a type (line 113)
        getitem___100965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 8), logm_call_result_100964, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 113)
        subscript_call_result_100966 = invoke(stypy.reporting.localization.Localization(__file__, 113, 8), getitem___100965, int_100958)
        
        # Assigning a type to the variable 'tuple_var_assignment_100534' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'tuple_var_assignment_100534', subscript_call_result_100966)
        
        # Assigning a Name to a Name (line 113):
        # Getting the type of 'tuple_var_assignment_100533' (line 113)
        tuple_var_assignment_100533_100967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'tuple_var_assignment_100533')
        # Assigning a type to the variable 'A_logm' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'A_logm', tuple_var_assignment_100533_100967)
        
        # Assigning a Name to a Name (line 113):
        # Getting the type of 'tuple_var_assignment_100534' (line 113)
        tuple_var_assignment_100534_100968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'tuple_var_assignment_100534')
        # Assigning a type to the variable 'info' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 16), 'info', tuple_var_assignment_100534_100968)
        
        # Assigning a Call to a Name (line 114):
        
        # Assigning a Call to a Name (line 114):
        
        # Call to expm(...): (line 114)
        # Processing the call arguments (line 114)
        # Getting the type of 'A_logm' (line 114)
        A_logm_100970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 28), 'A_logm', False)
        # Processing the call keyword arguments (line 114)
        kwargs_100971 = {}
        # Getting the type of 'expm' (line 114)
        expm_100969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 23), 'expm', False)
        # Calling expm(args, kwargs) (line 114)
        expm_call_result_100972 = invoke(stypy.reporting.localization.Localization(__file__, 114, 23), expm_100969, *[A_logm_100970], **kwargs_100971)
        
        # Assigning a type to the variable 'A_round_trip' (line 114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 8), 'A_round_trip', expm_call_result_100972)
        
        # Call to assert_allclose(...): (line 115)
        # Processing the call arguments (line 115)
        # Getting the type of 'A_round_trip' (line 115)
        A_round_trip_100974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 24), 'A_round_trip', False)
        # Getting the type of 'A' (line 115)
        A_100975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 38), 'A', False)
        # Processing the call keyword arguments (line 115)
        float_100976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 46), 'float')
        keyword_100977 = float_100976
        float_100978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 57), 'float')
        keyword_100979 = float_100978
        kwargs_100980 = {'rtol': keyword_100977, 'atol': keyword_100979}
        # Getting the type of 'assert_allclose' (line 115)
        assert_allclose_100973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 115)
        assert_allclose_call_result_100981 = invoke(stypy.reporting.localization.Localization(__file__, 115, 8), assert_allclose_100973, *[A_round_trip_100974, A_100975], **kwargs_100980)
        
        
        # ################# End of 'test_al_mohy_higham_2012_experiment_1_logm(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_al_mohy_higham_2012_experiment_1_logm' in the type store
        # Getting the type of 'stypy_return_type' (line 109)
        stypy_return_type_100982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_100982)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_al_mohy_higham_2012_experiment_1_logm'
        return stypy_return_type_100982


    @norecursion
    def test_al_mohy_higham_2012_experiment_1_funm_log(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_al_mohy_higham_2012_experiment_1_funm_log'
        module_type_store = module_type_store.open_function_context('test_al_mohy_higham_2012_experiment_1_funm_log', 117, 4, False)
        # Assigning a type to the variable 'self' (line 118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 118, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log.__dict__.__setitem__('stypy_localization', localization)
        TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log.__dict__.__setitem__('stypy_function_name', 'TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log')
        TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log.__dict__.__setitem__('stypy_param_names_list', [])
        TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_al_mohy_higham_2012_experiment_1_funm_log', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_al_mohy_higham_2012_experiment_1_funm_log(...)' code ##################

        
        # Assigning a Call to a Name (line 120):
        
        # Assigning a Call to a Name (line 120):
        
        # Call to _get_al_mohy_higham_2012_experiment_1(...): (line 120)
        # Processing the call keyword arguments (line 120)
        kwargs_100984 = {}
        # Getting the type of '_get_al_mohy_higham_2012_experiment_1' (line 120)
        _get_al_mohy_higham_2012_experiment_1_100983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 12), '_get_al_mohy_higham_2012_experiment_1', False)
        # Calling _get_al_mohy_higham_2012_experiment_1(args, kwargs) (line 120)
        _get_al_mohy_higham_2012_experiment_1_call_result_100985 = invoke(stypy.reporting.localization.Localization(__file__, 120, 12), _get_al_mohy_higham_2012_experiment_1_100983, *[], **kwargs_100984)
        
        # Assigning a type to the variable 'A' (line 120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 8), 'A', _get_al_mohy_higham_2012_experiment_1_call_result_100985)
        
        # Assigning a Call to a Tuple (line 121):
        
        # Assigning a Subscript to a Name (line 121):
        
        # Obtaining the type of the subscript
        int_100986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 8), 'int')
        
        # Call to funm(...): (line 121)
        # Processing the call arguments (line 121)
        # Getting the type of 'A' (line 121)
        A_100988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 32), 'A', False)
        # Getting the type of 'np' (line 121)
        np_100989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 35), 'np', False)
        # Obtaining the member 'log' of a type (line 121)
        log_100990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 35), np_100989, 'log')
        # Processing the call keyword arguments (line 121)
        # Getting the type of 'False' (line 121)
        False_100991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 48), 'False', False)
        keyword_100992 = False_100991
        kwargs_100993 = {'disp': keyword_100992}
        # Getting the type of 'funm' (line 121)
        funm_100987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 27), 'funm', False)
        # Calling funm(args, kwargs) (line 121)
        funm_call_result_100994 = invoke(stypy.reporting.localization.Localization(__file__, 121, 27), funm_100987, *[A_100988, log_100990], **kwargs_100993)
        
        # Obtaining the member '__getitem__' of a type (line 121)
        getitem___100995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 8), funm_call_result_100994, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 121)
        subscript_call_result_100996 = invoke(stypy.reporting.localization.Localization(__file__, 121, 8), getitem___100995, int_100986)
        
        # Assigning a type to the variable 'tuple_var_assignment_100535' (line 121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 8), 'tuple_var_assignment_100535', subscript_call_result_100996)
        
        # Assigning a Subscript to a Name (line 121):
        
        # Obtaining the type of the subscript
        int_100997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 8), 'int')
        
        # Call to funm(...): (line 121)
        # Processing the call arguments (line 121)
        # Getting the type of 'A' (line 121)
        A_100999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 32), 'A', False)
        # Getting the type of 'np' (line 121)
        np_101000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 35), 'np', False)
        # Obtaining the member 'log' of a type (line 121)
        log_101001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 35), np_101000, 'log')
        # Processing the call keyword arguments (line 121)
        # Getting the type of 'False' (line 121)
        False_101002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 48), 'False', False)
        keyword_101003 = False_101002
        kwargs_101004 = {'disp': keyword_101003}
        # Getting the type of 'funm' (line 121)
        funm_100998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 27), 'funm', False)
        # Calling funm(args, kwargs) (line 121)
        funm_call_result_101005 = invoke(stypy.reporting.localization.Localization(__file__, 121, 27), funm_100998, *[A_100999, log_101001], **kwargs_101004)
        
        # Obtaining the member '__getitem__' of a type (line 121)
        getitem___101006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 8), funm_call_result_101005, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 121)
        subscript_call_result_101007 = invoke(stypy.reporting.localization.Localization(__file__, 121, 8), getitem___101006, int_100997)
        
        # Assigning a type to the variable 'tuple_var_assignment_100536' (line 121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 8), 'tuple_var_assignment_100536', subscript_call_result_101007)
        
        # Assigning a Name to a Name (line 121):
        # Getting the type of 'tuple_var_assignment_100535' (line 121)
        tuple_var_assignment_100535_101008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 8), 'tuple_var_assignment_100535')
        # Assigning a type to the variable 'A_funm_log' (line 121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 8), 'A_funm_log', tuple_var_assignment_100535_101008)
        
        # Assigning a Name to a Name (line 121):
        # Getting the type of 'tuple_var_assignment_100536' (line 121)
        tuple_var_assignment_100536_101009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 8), 'tuple_var_assignment_100536')
        # Assigning a type to the variable 'info' (line 121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 20), 'info', tuple_var_assignment_100536_101009)
        
        # Assigning a Call to a Name (line 122):
        
        # Assigning a Call to a Name (line 122):
        
        # Call to expm(...): (line 122)
        # Processing the call arguments (line 122)
        # Getting the type of 'A_funm_log' (line 122)
        A_funm_log_101011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 28), 'A_funm_log', False)
        # Processing the call keyword arguments (line 122)
        kwargs_101012 = {}
        # Getting the type of 'expm' (line 122)
        expm_101010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 23), 'expm', False)
        # Calling expm(args, kwargs) (line 122)
        expm_call_result_101013 = invoke(stypy.reporting.localization.Localization(__file__, 122, 23), expm_101010, *[A_funm_log_101011], **kwargs_101012)
        
        # Assigning a type to the variable 'A_round_trip' (line 122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 8), 'A_round_trip', expm_call_result_101013)
        
        # Call to assert_(...): (line 123)
        # Processing the call arguments (line 123)
        
        
        # Call to allclose(...): (line 123)
        # Processing the call arguments (line 123)
        # Getting the type of 'A_round_trip' (line 123)
        A_round_trip_101017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 32), 'A_round_trip', False)
        # Getting the type of 'A' (line 123)
        A_101018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 46), 'A', False)
        # Processing the call keyword arguments (line 123)
        float_101019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 54), 'float')
        keyword_101020 = float_101019
        float_101021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 65), 'float')
        keyword_101022 = float_101021
        kwargs_101023 = {'rtol': keyword_101020, 'atol': keyword_101022}
        # Getting the type of 'np' (line 123)
        np_101015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 20), 'np', False)
        # Obtaining the member 'allclose' of a type (line 123)
        allclose_101016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 20), np_101015, 'allclose')
        # Calling allclose(args, kwargs) (line 123)
        allclose_call_result_101024 = invoke(stypy.reporting.localization.Localization(__file__, 123, 20), allclose_101016, *[A_round_trip_101017, A_101018], **kwargs_101023)
        
        # Applying the 'not' unary operator (line 123)
        result_not__101025 = python_operator(stypy.reporting.localization.Localization(__file__, 123, 16), 'not', allclose_call_result_101024)
        
        # Processing the call keyword arguments (line 123)
        kwargs_101026 = {}
        # Getting the type of 'assert_' (line 123)
        assert__101014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 8), 'assert_', False)
        # Calling assert_(args, kwargs) (line 123)
        assert__call_result_101027 = invoke(stypy.reporting.localization.Localization(__file__, 123, 8), assert__101014, *[result_not__101025], **kwargs_101026)
        
        
        # ################# End of 'test_al_mohy_higham_2012_experiment_1_funm_log(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_al_mohy_higham_2012_experiment_1_funm_log' in the type store
        # Getting the type of 'stypy_return_type' (line 117)
        stypy_return_type_101028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101028)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_al_mohy_higham_2012_experiment_1_funm_log'
        return stypy_return_type_101028


    @norecursion
    def test_round_trip_random_float(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_round_trip_random_float'
        module_type_store = module_type_store.open_function_context('test_round_trip_random_float', 125, 4, False)
        # Assigning a type to the variable 'self' (line 126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestLogM.test_round_trip_random_float.__dict__.__setitem__('stypy_localization', localization)
        TestLogM.test_round_trip_random_float.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestLogM.test_round_trip_random_float.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestLogM.test_round_trip_random_float.__dict__.__setitem__('stypy_function_name', 'TestLogM.test_round_trip_random_float')
        TestLogM.test_round_trip_random_float.__dict__.__setitem__('stypy_param_names_list', [])
        TestLogM.test_round_trip_random_float.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestLogM.test_round_trip_random_float.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestLogM.test_round_trip_random_float.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestLogM.test_round_trip_random_float.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestLogM.test_round_trip_random_float.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestLogM.test_round_trip_random_float.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.test_round_trip_random_float', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_round_trip_random_float', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_round_trip_random_float(...)' code ##################

        
        # Call to seed(...): (line 126)
        # Processing the call arguments (line 126)
        int_101032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 23), 'int')
        # Processing the call keyword arguments (line 126)
        kwargs_101033 = {}
        # Getting the type of 'np' (line 126)
        np_101029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 126)
        random_101030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 8), np_101029, 'random')
        # Obtaining the member 'seed' of a type (line 126)
        seed_101031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 8), random_101030, 'seed')
        # Calling seed(args, kwargs) (line 126)
        seed_call_result_101034 = invoke(stypy.reporting.localization.Localization(__file__, 126, 8), seed_101031, *[int_101032], **kwargs_101033)
        
        
        
        # Call to range(...): (line 127)
        # Processing the call arguments (line 127)
        int_101036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 23), 'int')
        int_101037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 26), 'int')
        # Processing the call keyword arguments (line 127)
        kwargs_101038 = {}
        # Getting the type of 'range' (line 127)
        range_101035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 17), 'range', False)
        # Calling range(args, kwargs) (line 127)
        range_call_result_101039 = invoke(stypy.reporting.localization.Localization(__file__, 127, 17), range_101035, *[int_101036, int_101037], **kwargs_101038)
        
        # Testing the type of a for loop iterable (line 127)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 127, 8), range_call_result_101039)
        # Getting the type of the for loop variable (line 127)
        for_loop_var_101040 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 127, 8), range_call_result_101039)
        # Assigning a type to the variable 'n' (line 127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 8), 'n', for_loop_var_101040)
        # SSA begins for a for statement (line 127)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 128):
        
        # Assigning a Call to a Name (line 128):
        
        # Call to randn(...): (line 128)
        # Processing the call arguments (line 128)
        # Getting the type of 'n' (line 128)
        n_101044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 41), 'n', False)
        # Getting the type of 'n' (line 128)
        n_101045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 44), 'n', False)
        # Processing the call keyword arguments (line 128)
        kwargs_101046 = {}
        # Getting the type of 'np' (line 128)
        np_101041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 25), 'np', False)
        # Obtaining the member 'random' of a type (line 128)
        random_101042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 25), np_101041, 'random')
        # Obtaining the member 'randn' of a type (line 128)
        randn_101043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 25), random_101042, 'randn')
        # Calling randn(args, kwargs) (line 128)
        randn_call_result_101047 = invoke(stypy.reporting.localization.Localization(__file__, 128, 25), randn_101043, *[n_101044, n_101045], **kwargs_101046)
        
        # Assigning a type to the variable 'M_unscaled' (line 128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 12), 'M_unscaled', randn_call_result_101047)
        
        
        # Call to logspace(...): (line 129)
        # Processing the call arguments (line 129)
        int_101050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 37), 'int')
        int_101051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 41), 'int')
        int_101052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 44), 'int')
        # Processing the call keyword arguments (line 129)
        kwargs_101053 = {}
        # Getting the type of 'np' (line 129)
        np_101048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 25), 'np', False)
        # Obtaining the member 'logspace' of a type (line 129)
        logspace_101049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 129, 25), np_101048, 'logspace')
        # Calling logspace(args, kwargs) (line 129)
        logspace_call_result_101054 = invoke(stypy.reporting.localization.Localization(__file__, 129, 25), logspace_101049, *[int_101050, int_101051, int_101052], **kwargs_101053)
        
        # Testing the type of a for loop iterable (line 129)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 129, 12), logspace_call_result_101054)
        # Getting the type of the for loop variable (line 129)
        for_loop_var_101055 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 129, 12), logspace_call_result_101054)
        # Assigning a type to the variable 'scale' (line 129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 12), 'scale', for_loop_var_101055)
        # SSA begins for a for statement (line 129)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 130):
        
        # Assigning a BinOp to a Name (line 130):
        # Getting the type of 'M_unscaled' (line 130)
        M_unscaled_101056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 20), 'M_unscaled')
        # Getting the type of 'scale' (line 130)
        scale_101057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 33), 'scale')
        # Applying the binary operator '*' (line 130)
        result_mul_101058 = python_operator(stypy.reporting.localization.Localization(__file__, 130, 20), '*', M_unscaled_101056, scale_101057)
        
        # Assigning a type to the variable 'M' (line 130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 16), 'M', result_mul_101058)
        
        # Assigning a Call to a Name (line 133):
        
        # Assigning a Call to a Name (line 133):
        
        # Call to eigvals(...): (line 133)
        # Processing the call arguments (line 133)
        # Getting the type of 'M' (line 133)
        M_101062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 38), 'M', False)
        # Processing the call keyword arguments (line 133)
        kwargs_101063 = {}
        # Getting the type of 'np' (line 133)
        np_101059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 20), 'np', False)
        # Obtaining the member 'linalg' of a type (line 133)
        linalg_101060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 20), np_101059, 'linalg')
        # Obtaining the member 'eigvals' of a type (line 133)
        eigvals_101061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 20), linalg_101060, 'eigvals')
        # Calling eigvals(args, kwargs) (line 133)
        eigvals_call_result_101064 = invoke(stypy.reporting.localization.Localization(__file__, 133, 20), eigvals_101061, *[M_101062], **kwargs_101063)
        
        # Assigning a type to the variable 'W' (line 133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 16), 'W', eigvals_call_result_101064)
        
        # Assigning a Call to a Name (line 134):
        
        # Assigning a Call to a Name (line 134):
        
        # Call to format(...): (line 134)
        # Processing the call arguments (line 134)
        # Getting the type of 'M' (line 134)
        M_101067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 52), 'M', False)
        # Getting the type of 'W' (line 134)
        W_101068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 55), 'W', False)
        # Processing the call keyword arguments (line 134)
        kwargs_101069 = {}
        str_101065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 26), 'str', 'M:{0} eivals:{1}')
        # Obtaining the member 'format' of a type (line 134)
        format_101066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 134, 26), str_101065, 'format')
        # Calling format(args, kwargs) (line 134)
        format_call_result_101070 = invoke(stypy.reporting.localization.Localization(__file__, 134, 26), format_101066, *[M_101067, W_101068], **kwargs_101069)
        
        # Assigning a type to the variable 'err_msg' (line 134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 16), 'err_msg', format_call_result_101070)
        
        # Assigning a Call to a Tuple (line 137):
        
        # Assigning a Subscript to a Name (line 137):
        
        # Obtaining the type of the subscript
        int_101071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 137, 16), 'int')
        
        # Call to sqrtm(...): (line 137)
        # Processing the call arguments (line 137)
        # Getting the type of 'M' (line 137)
        M_101073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 38), 'M', False)
        # Processing the call keyword arguments (line 137)
        # Getting the type of 'False' (line 137)
        False_101074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 46), 'False', False)
        keyword_101075 = False_101074
        kwargs_101076 = {'disp': keyword_101075}
        # Getting the type of 'sqrtm' (line 137)
        sqrtm_101072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 32), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 137)
        sqrtm_call_result_101077 = invoke(stypy.reporting.localization.Localization(__file__, 137, 32), sqrtm_101072, *[M_101073], **kwargs_101076)
        
        # Obtaining the member '__getitem__' of a type (line 137)
        getitem___101078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 16), sqrtm_call_result_101077, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 137)
        subscript_call_result_101079 = invoke(stypy.reporting.localization.Localization(__file__, 137, 16), getitem___101078, int_101071)
        
        # Assigning a type to the variable 'tuple_var_assignment_100537' (line 137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 16), 'tuple_var_assignment_100537', subscript_call_result_101079)
        
        # Assigning a Subscript to a Name (line 137):
        
        # Obtaining the type of the subscript
        int_101080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 137, 16), 'int')
        
        # Call to sqrtm(...): (line 137)
        # Processing the call arguments (line 137)
        # Getting the type of 'M' (line 137)
        M_101082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 38), 'M', False)
        # Processing the call keyword arguments (line 137)
        # Getting the type of 'False' (line 137)
        False_101083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 46), 'False', False)
        keyword_101084 = False_101083
        kwargs_101085 = {'disp': keyword_101084}
        # Getting the type of 'sqrtm' (line 137)
        sqrtm_101081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 32), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 137)
        sqrtm_call_result_101086 = invoke(stypy.reporting.localization.Localization(__file__, 137, 32), sqrtm_101081, *[M_101082], **kwargs_101085)
        
        # Obtaining the member '__getitem__' of a type (line 137)
        getitem___101087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 16), sqrtm_call_result_101086, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 137)
        subscript_call_result_101088 = invoke(stypy.reporting.localization.Localization(__file__, 137, 16), getitem___101087, int_101080)
        
        # Assigning a type to the variable 'tuple_var_assignment_100538' (line 137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 16), 'tuple_var_assignment_100538', subscript_call_result_101088)
        
        # Assigning a Name to a Name (line 137):
        # Getting the type of 'tuple_var_assignment_100537' (line 137)
        tuple_var_assignment_100537_101089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 16), 'tuple_var_assignment_100537')
        # Assigning a type to the variable 'M_sqrtm' (line 137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 16), 'M_sqrtm', tuple_var_assignment_100537_101089)
        
        # Assigning a Name to a Name (line 137):
        # Getting the type of 'tuple_var_assignment_100538' (line 137)
        tuple_var_assignment_100538_101090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 16), 'tuple_var_assignment_100538')
        # Assigning a type to the variable 'info' (line 137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 25), 'info', tuple_var_assignment_100538_101090)
        
        # Assigning a Call to a Name (line 138):
        
        # Assigning a Call to a Name (line 138):
        
        # Call to dot(...): (line 138)
        # Processing the call arguments (line 138)
        # Getting the type of 'M_sqrtm' (line 138)
        M_sqrtm_101093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 49), 'M_sqrtm', False)
        # Processing the call keyword arguments (line 138)
        kwargs_101094 = {}
        # Getting the type of 'M_sqrtm' (line 138)
        M_sqrtm_101091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 37), 'M_sqrtm', False)
        # Obtaining the member 'dot' of a type (line 138)
        dot_101092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 37), M_sqrtm_101091, 'dot')
        # Calling dot(args, kwargs) (line 138)
        dot_call_result_101095 = invoke(stypy.reporting.localization.Localization(__file__, 138, 37), dot_101092, *[M_sqrtm_101093], **kwargs_101094)
        
        # Assigning a type to the variable 'M_sqrtm_round_trip' (line 138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 138, 16), 'M_sqrtm_round_trip', dot_call_result_101095)
        
        # Call to assert_allclose(...): (line 139)
        # Processing the call arguments (line 139)
        # Getting the type of 'M_sqrtm_round_trip' (line 139)
        M_sqrtm_round_trip_101097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 32), 'M_sqrtm_round_trip', False)
        # Getting the type of 'M' (line 139)
        M_101098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 52), 'M', False)
        # Processing the call keyword arguments (line 139)
        kwargs_101099 = {}
        # Getting the type of 'assert_allclose' (line 139)
        assert_allclose_101096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 16), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 139)
        assert_allclose_call_result_101100 = invoke(stypy.reporting.localization.Localization(__file__, 139, 16), assert_allclose_101096, *[M_sqrtm_round_trip_101097, M_101098], **kwargs_101099)
        
        
        # Assigning a Call to a Tuple (line 142):
        
        # Assigning a Subscript to a Name (line 142):
        
        # Obtaining the type of the subscript
        int_101101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 142, 16), 'int')
        
        # Call to logm(...): (line 142)
        # Processing the call arguments (line 142)
        # Getting the type of 'M' (line 142)
        M_101103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 36), 'M', False)
        # Processing the call keyword arguments (line 142)
        # Getting the type of 'False' (line 142)
        False_101104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 44), 'False', False)
        keyword_101105 = False_101104
        kwargs_101106 = {'disp': keyword_101105}
        # Getting the type of 'logm' (line 142)
        logm_101102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 31), 'logm', False)
        # Calling logm(args, kwargs) (line 142)
        logm_call_result_101107 = invoke(stypy.reporting.localization.Localization(__file__, 142, 31), logm_101102, *[M_101103], **kwargs_101106)
        
        # Obtaining the member '__getitem__' of a type (line 142)
        getitem___101108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 142, 16), logm_call_result_101107, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 142)
        subscript_call_result_101109 = invoke(stypy.reporting.localization.Localization(__file__, 142, 16), getitem___101108, int_101101)
        
        # Assigning a type to the variable 'tuple_var_assignment_100539' (line 142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 16), 'tuple_var_assignment_100539', subscript_call_result_101109)
        
        # Assigning a Subscript to a Name (line 142):
        
        # Obtaining the type of the subscript
        int_101110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 142, 16), 'int')
        
        # Call to logm(...): (line 142)
        # Processing the call arguments (line 142)
        # Getting the type of 'M' (line 142)
        M_101112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 36), 'M', False)
        # Processing the call keyword arguments (line 142)
        # Getting the type of 'False' (line 142)
        False_101113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 44), 'False', False)
        keyword_101114 = False_101113
        kwargs_101115 = {'disp': keyword_101114}
        # Getting the type of 'logm' (line 142)
        logm_101111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 31), 'logm', False)
        # Calling logm(args, kwargs) (line 142)
        logm_call_result_101116 = invoke(stypy.reporting.localization.Localization(__file__, 142, 31), logm_101111, *[M_101112], **kwargs_101115)
        
        # Obtaining the member '__getitem__' of a type (line 142)
        getitem___101117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 142, 16), logm_call_result_101116, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 142)
        subscript_call_result_101118 = invoke(stypy.reporting.localization.Localization(__file__, 142, 16), getitem___101117, int_101110)
        
        # Assigning a type to the variable 'tuple_var_assignment_100540' (line 142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 16), 'tuple_var_assignment_100540', subscript_call_result_101118)
        
        # Assigning a Name to a Name (line 142):
        # Getting the type of 'tuple_var_assignment_100539' (line 142)
        tuple_var_assignment_100539_101119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 16), 'tuple_var_assignment_100539')
        # Assigning a type to the variable 'M_logm' (line 142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 16), 'M_logm', tuple_var_assignment_100539_101119)
        
        # Assigning a Name to a Name (line 142):
        # Getting the type of 'tuple_var_assignment_100540' (line 142)
        tuple_var_assignment_100540_101120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 16), 'tuple_var_assignment_100540')
        # Assigning a type to the variable 'info' (line 142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 24), 'info', tuple_var_assignment_100540_101120)
        
        # Assigning a Call to a Name (line 143):
        
        # Assigning a Call to a Name (line 143):
        
        # Call to expm(...): (line 143)
        # Processing the call arguments (line 143)
        # Getting the type of 'M_logm' (line 143)
        M_logm_101122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 41), 'M_logm', False)
        # Processing the call keyword arguments (line 143)
        kwargs_101123 = {}
        # Getting the type of 'expm' (line 143)
        expm_101121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 36), 'expm', False)
        # Calling expm(args, kwargs) (line 143)
        expm_call_result_101124 = invoke(stypy.reporting.localization.Localization(__file__, 143, 36), expm_101121, *[M_logm_101122], **kwargs_101123)
        
        # Assigning a type to the variable 'M_logm_round_trip' (line 143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 16), 'M_logm_round_trip', expm_call_result_101124)
        
        # Call to assert_allclose(...): (line 144)
        # Processing the call arguments (line 144)
        # Getting the type of 'M_logm_round_trip' (line 144)
        M_logm_round_trip_101126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 32), 'M_logm_round_trip', False)
        # Getting the type of 'M' (line 144)
        M_101127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 51), 'M', False)
        # Processing the call keyword arguments (line 144)
        # Getting the type of 'err_msg' (line 144)
        err_msg_101128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 62), 'err_msg', False)
        keyword_101129 = err_msg_101128
        kwargs_101130 = {'err_msg': keyword_101129}
        # Getting the type of 'assert_allclose' (line 144)
        assert_allclose_101125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 16), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 144)
        assert_allclose_call_result_101131 = invoke(stypy.reporting.localization.Localization(__file__, 144, 16), assert_allclose_101125, *[M_logm_round_trip_101126, M_101127], **kwargs_101130)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_round_trip_random_float(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_round_trip_random_float' in the type store
        # Getting the type of 'stypy_return_type' (line 125)
        stypy_return_type_101132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101132)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_round_trip_random_float'
        return stypy_return_type_101132


    @norecursion
    def test_round_trip_random_complex(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_round_trip_random_complex'
        module_type_store = module_type_store.open_function_context('test_round_trip_random_complex', 146, 4, False)
        # Assigning a type to the variable 'self' (line 147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestLogM.test_round_trip_random_complex.__dict__.__setitem__('stypy_localization', localization)
        TestLogM.test_round_trip_random_complex.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestLogM.test_round_trip_random_complex.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestLogM.test_round_trip_random_complex.__dict__.__setitem__('stypy_function_name', 'TestLogM.test_round_trip_random_complex')
        TestLogM.test_round_trip_random_complex.__dict__.__setitem__('stypy_param_names_list', [])
        TestLogM.test_round_trip_random_complex.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestLogM.test_round_trip_random_complex.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestLogM.test_round_trip_random_complex.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestLogM.test_round_trip_random_complex.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestLogM.test_round_trip_random_complex.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestLogM.test_round_trip_random_complex.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.test_round_trip_random_complex', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_round_trip_random_complex', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_round_trip_random_complex(...)' code ##################

        
        # Call to seed(...): (line 147)
        # Processing the call arguments (line 147)
        int_101136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 23), 'int')
        # Processing the call keyword arguments (line 147)
        kwargs_101137 = {}
        # Getting the type of 'np' (line 147)
        np_101133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 147)
        random_101134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 8), np_101133, 'random')
        # Obtaining the member 'seed' of a type (line 147)
        seed_101135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 8), random_101134, 'seed')
        # Calling seed(args, kwargs) (line 147)
        seed_call_result_101138 = invoke(stypy.reporting.localization.Localization(__file__, 147, 8), seed_101135, *[int_101136], **kwargs_101137)
        
        
        
        # Call to range(...): (line 148)
        # Processing the call arguments (line 148)
        int_101140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 23), 'int')
        int_101141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 26), 'int')
        # Processing the call keyword arguments (line 148)
        kwargs_101142 = {}
        # Getting the type of 'range' (line 148)
        range_101139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 17), 'range', False)
        # Calling range(args, kwargs) (line 148)
        range_call_result_101143 = invoke(stypy.reporting.localization.Localization(__file__, 148, 17), range_101139, *[int_101140, int_101141], **kwargs_101142)
        
        # Testing the type of a for loop iterable (line 148)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 148, 8), range_call_result_101143)
        # Getting the type of the for loop variable (line 148)
        for_loop_var_101144 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 148, 8), range_call_result_101143)
        # Assigning a type to the variable 'n' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 8), 'n', for_loop_var_101144)
        # SSA begins for a for statement (line 148)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 149):
        
        # Assigning a BinOp to a Name (line 149):
        
        # Call to randn(...): (line 149)
        # Processing the call arguments (line 149)
        # Getting the type of 'n' (line 149)
        n_101148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 41), 'n', False)
        # Getting the type of 'n' (line 149)
        n_101149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 44), 'n', False)
        # Processing the call keyword arguments (line 149)
        kwargs_101150 = {}
        # Getting the type of 'np' (line 149)
        np_101145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 25), 'np', False)
        # Obtaining the member 'random' of a type (line 149)
        random_101146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 25), np_101145, 'random')
        # Obtaining the member 'randn' of a type (line 149)
        randn_101147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 25), random_101146, 'randn')
        # Calling randn(args, kwargs) (line 149)
        randn_call_result_101151 = invoke(stypy.reporting.localization.Localization(__file__, 149, 25), randn_101147, *[n_101148, n_101149], **kwargs_101150)
        
        complex_101152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, 49), 'complex')
        
        # Call to randn(...): (line 149)
        # Processing the call arguments (line 149)
        # Getting the type of 'n' (line 149)
        n_101156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 70), 'n', False)
        # Getting the type of 'n' (line 149)
        n_101157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 73), 'n', False)
        # Processing the call keyword arguments (line 149)
        kwargs_101158 = {}
        # Getting the type of 'np' (line 149)
        np_101153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 54), 'np', False)
        # Obtaining the member 'random' of a type (line 149)
        random_101154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 54), np_101153, 'random')
        # Obtaining the member 'randn' of a type (line 149)
        randn_101155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 54), random_101154, 'randn')
        # Calling randn(args, kwargs) (line 149)
        randn_call_result_101159 = invoke(stypy.reporting.localization.Localization(__file__, 149, 54), randn_101155, *[n_101156, n_101157], **kwargs_101158)
        
        # Applying the binary operator '*' (line 149)
        result_mul_101160 = python_operator(stypy.reporting.localization.Localization(__file__, 149, 49), '*', complex_101152, randn_call_result_101159)
        
        # Applying the binary operator '+' (line 149)
        result_add_101161 = python_operator(stypy.reporting.localization.Localization(__file__, 149, 25), '+', randn_call_result_101151, result_mul_101160)
        
        # Assigning a type to the variable 'M_unscaled' (line 149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 12), 'M_unscaled', result_add_101161)
        
        
        # Call to logspace(...): (line 150)
        # Processing the call arguments (line 150)
        int_101164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 37), 'int')
        int_101165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 41), 'int')
        int_101166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 44), 'int')
        # Processing the call keyword arguments (line 150)
        kwargs_101167 = {}
        # Getting the type of 'np' (line 150)
        np_101162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 25), 'np', False)
        # Obtaining the member 'logspace' of a type (line 150)
        logspace_101163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 25), np_101162, 'logspace')
        # Calling logspace(args, kwargs) (line 150)
        logspace_call_result_101168 = invoke(stypy.reporting.localization.Localization(__file__, 150, 25), logspace_101163, *[int_101164, int_101165, int_101166], **kwargs_101167)
        
        # Testing the type of a for loop iterable (line 150)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 150, 12), logspace_call_result_101168)
        # Getting the type of the for loop variable (line 150)
        for_loop_var_101169 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 150, 12), logspace_call_result_101168)
        # Assigning a type to the variable 'scale' (line 150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 12), 'scale', for_loop_var_101169)
        # SSA begins for a for statement (line 150)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 151):
        
        # Assigning a BinOp to a Name (line 151):
        # Getting the type of 'M_unscaled' (line 151)
        M_unscaled_101170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 20), 'M_unscaled')
        # Getting the type of 'scale' (line 151)
        scale_101171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 33), 'scale')
        # Applying the binary operator '*' (line 151)
        result_mul_101172 = python_operator(stypy.reporting.localization.Localization(__file__, 151, 20), '*', M_unscaled_101170, scale_101171)
        
        # Assigning a type to the variable 'M' (line 151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 16), 'M', result_mul_101172)
        
        # Assigning a Call to a Tuple (line 152):
        
        # Assigning a Subscript to a Name (line 152):
        
        # Obtaining the type of the subscript
        int_101173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 16), 'int')
        
        # Call to logm(...): (line 152)
        # Processing the call arguments (line 152)
        # Getting the type of 'M' (line 152)
        M_101175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 36), 'M', False)
        # Processing the call keyword arguments (line 152)
        # Getting the type of 'False' (line 152)
        False_101176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 44), 'False', False)
        keyword_101177 = False_101176
        kwargs_101178 = {'disp': keyword_101177}
        # Getting the type of 'logm' (line 152)
        logm_101174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 31), 'logm', False)
        # Calling logm(args, kwargs) (line 152)
        logm_call_result_101179 = invoke(stypy.reporting.localization.Localization(__file__, 152, 31), logm_101174, *[M_101175], **kwargs_101178)
        
        # Obtaining the member '__getitem__' of a type (line 152)
        getitem___101180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 16), logm_call_result_101179, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 152)
        subscript_call_result_101181 = invoke(stypy.reporting.localization.Localization(__file__, 152, 16), getitem___101180, int_101173)
        
        # Assigning a type to the variable 'tuple_var_assignment_100541' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 16), 'tuple_var_assignment_100541', subscript_call_result_101181)
        
        # Assigning a Subscript to a Name (line 152):
        
        # Obtaining the type of the subscript
        int_101182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 16), 'int')
        
        # Call to logm(...): (line 152)
        # Processing the call arguments (line 152)
        # Getting the type of 'M' (line 152)
        M_101184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 36), 'M', False)
        # Processing the call keyword arguments (line 152)
        # Getting the type of 'False' (line 152)
        False_101185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 44), 'False', False)
        keyword_101186 = False_101185
        kwargs_101187 = {'disp': keyword_101186}
        # Getting the type of 'logm' (line 152)
        logm_101183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 31), 'logm', False)
        # Calling logm(args, kwargs) (line 152)
        logm_call_result_101188 = invoke(stypy.reporting.localization.Localization(__file__, 152, 31), logm_101183, *[M_101184], **kwargs_101187)
        
        # Obtaining the member '__getitem__' of a type (line 152)
        getitem___101189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 16), logm_call_result_101188, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 152)
        subscript_call_result_101190 = invoke(stypy.reporting.localization.Localization(__file__, 152, 16), getitem___101189, int_101182)
        
        # Assigning a type to the variable 'tuple_var_assignment_100542' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 16), 'tuple_var_assignment_100542', subscript_call_result_101190)
        
        # Assigning a Name to a Name (line 152):
        # Getting the type of 'tuple_var_assignment_100541' (line 152)
        tuple_var_assignment_100541_101191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 16), 'tuple_var_assignment_100541')
        # Assigning a type to the variable 'M_logm' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 16), 'M_logm', tuple_var_assignment_100541_101191)
        
        # Assigning a Name to a Name (line 152):
        # Getting the type of 'tuple_var_assignment_100542' (line 152)
        tuple_var_assignment_100542_101192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 16), 'tuple_var_assignment_100542')
        # Assigning a type to the variable 'info' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 24), 'info', tuple_var_assignment_100542_101192)
        
        # Assigning a Call to a Name (line 153):
        
        # Assigning a Call to a Name (line 153):
        
        # Call to expm(...): (line 153)
        # Processing the call arguments (line 153)
        # Getting the type of 'M_logm' (line 153)
        M_logm_101194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 36), 'M_logm', False)
        # Processing the call keyword arguments (line 153)
        kwargs_101195 = {}
        # Getting the type of 'expm' (line 153)
        expm_101193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 31), 'expm', False)
        # Calling expm(args, kwargs) (line 153)
        expm_call_result_101196 = invoke(stypy.reporting.localization.Localization(__file__, 153, 31), expm_101193, *[M_logm_101194], **kwargs_101195)
        
        # Assigning a type to the variable 'M_round_trip' (line 153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 16), 'M_round_trip', expm_call_result_101196)
        
        # Call to assert_allclose(...): (line 154)
        # Processing the call arguments (line 154)
        # Getting the type of 'M_round_trip' (line 154)
        M_round_trip_101198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 32), 'M_round_trip', False)
        # Getting the type of 'M' (line 154)
        M_101199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 46), 'M', False)
        # Processing the call keyword arguments (line 154)
        kwargs_101200 = {}
        # Getting the type of 'assert_allclose' (line 154)
        assert_allclose_101197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 16), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 154)
        assert_allclose_call_result_101201 = invoke(stypy.reporting.localization.Localization(__file__, 154, 16), assert_allclose_101197, *[M_round_trip_101198, M_101199], **kwargs_101200)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_round_trip_random_complex(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_round_trip_random_complex' in the type store
        # Getting the type of 'stypy_return_type' (line 146)
        stypy_return_type_101202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101202)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_round_trip_random_complex'
        return stypy_return_type_101202


    @norecursion
    def test_logm_type_preservation_and_conversion(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_logm_type_preservation_and_conversion'
        module_type_store = module_type_store.open_function_context('test_logm_type_preservation_and_conversion', 156, 4, False)
        # Assigning a type to the variable 'self' (line 157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestLogM.test_logm_type_preservation_and_conversion.__dict__.__setitem__('stypy_localization', localization)
        TestLogM.test_logm_type_preservation_and_conversion.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestLogM.test_logm_type_preservation_and_conversion.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestLogM.test_logm_type_preservation_and_conversion.__dict__.__setitem__('stypy_function_name', 'TestLogM.test_logm_type_preservation_and_conversion')
        TestLogM.test_logm_type_preservation_and_conversion.__dict__.__setitem__('stypy_param_names_list', [])
        TestLogM.test_logm_type_preservation_and_conversion.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestLogM.test_logm_type_preservation_and_conversion.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestLogM.test_logm_type_preservation_and_conversion.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestLogM.test_logm_type_preservation_and_conversion.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestLogM.test_logm_type_preservation_and_conversion.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestLogM.test_logm_type_preservation_and_conversion.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.test_logm_type_preservation_and_conversion', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_logm_type_preservation_and_conversion', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_logm_type_preservation_and_conversion(...)' code ##################

        
        # Assigning a Tuple to a Name (line 160):
        
        # Assigning a Tuple to a Name (line 160):
        
        # Obtaining an instance of the builtin type 'tuple' (line 160)
        tuple_101203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 160)
        # Adding element type (line 160)
        str_101204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 31), 'str', 'F')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 31), tuple_101203, str_101204)
        # Adding element type (line 160)
        str_101205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 36), 'str', 'D')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 31), tuple_101203, str_101205)
        # Adding element type (line 160)
        str_101206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 41), 'str', 'G')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 31), tuple_101203, str_101206)
        
        # Assigning a type to the variable 'complex_dtype_chars' (line 160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 'complex_dtype_chars', tuple_101203)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 162)
        tuple_101207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 162)
        # Adding element type (line 162)
        
        # Obtaining an instance of the builtin type 'list' (line 162)
        list_101208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 162)
        # Adding element type (line 162)
        
        # Obtaining an instance of the builtin type 'list' (line 162)
        list_101209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 162)
        # Adding element type (line 162)
        int_101210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 17), list_101209, int_101210)
        # Adding element type (line 162)
        int_101211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 17), list_101209, int_101211)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 16), list_101208, list_101209)
        # Adding element type (line 162)
        
        # Obtaining an instance of the builtin type 'list' (line 162)
        list_101212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 162)
        # Adding element type (line 162)
        int_101213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 25), list_101212, int_101213)
        # Adding element type (line 162)
        int_101214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 25), list_101212, int_101214)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 16), list_101208, list_101212)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 16), tuple_101207, list_101208)
        # Adding element type (line 162)
        
        # Obtaining an instance of the builtin type 'list' (line 163)
        list_101215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 163)
        # Adding element type (line 163)
        
        # Obtaining an instance of the builtin type 'list' (line 163)
        list_101216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 163)
        # Adding element type (line 163)
        int_101217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 17), list_101216, int_101217)
        # Adding element type (line 163)
        int_101218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 17), list_101216, int_101218)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 16), list_101215, list_101216)
        # Adding element type (line 163)
        
        # Obtaining an instance of the builtin type 'list' (line 163)
        list_101219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 163)
        # Adding element type (line 163)
        int_101220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 25), list_101219, int_101220)
        # Adding element type (line 163)
        int_101221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 25), list_101219, int_101221)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 16), list_101215, list_101219)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 16), tuple_101207, list_101215)
        # Adding element type (line 162)
        
        # Obtaining an instance of the builtin type 'list' (line 164)
        list_101222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 164)
        # Adding element type (line 164)
        
        # Obtaining an instance of the builtin type 'list' (line 164)
        list_101223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 164)
        # Adding element type (line 164)
        int_101224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 17), list_101223, int_101224)
        # Adding element type (line 164)
        int_101225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 17), list_101223, int_101225)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 16), list_101222, list_101223)
        # Adding element type (line 164)
        
        # Obtaining an instance of the builtin type 'list' (line 164)
        list_101226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 164)
        # Adding element type (line 164)
        int_101227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 25), list_101226, int_101227)
        # Adding element type (line 164)
        int_101228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 25), list_101226, int_101228)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 16), list_101222, list_101226)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 16), tuple_101207, list_101222)
        # Adding element type (line 162)
        
        # Obtaining an instance of the builtin type 'list' (line 165)
        list_101229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 165)
        # Adding element type (line 165)
        
        # Obtaining an instance of the builtin type 'list' (line 165)
        list_101230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 165)
        # Adding element type (line 165)
        int_101231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 17), list_101230, int_101231)
        # Adding element type (line 165)
        int_101232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 17), list_101230, int_101232)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 16), list_101229, list_101230)
        # Adding element type (line 165)
        
        # Obtaining an instance of the builtin type 'list' (line 165)
        list_101233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 165)
        # Adding element type (line 165)
        int_101234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 25), list_101233, int_101234)
        # Adding element type (line 165)
        int_101235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 25), list_101233, int_101235)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 16), list_101229, list_101233)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 16), tuple_101207, list_101229)
        
        # Testing the type of a for loop iterable (line 161)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 161, 8), tuple_101207)
        # Getting the type of the for loop variable (line 161)
        for_loop_var_101236 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 161, 8), tuple_101207)
        # Assigning a type to the variable 'matrix_as_list' (line 161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'matrix_as_list', for_loop_var_101236)
        # SSA begins for a for statement (line 161)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 168):
        
        # Assigning a Call to a Name (line 168):
        
        # Call to eigvals(...): (line 168)
        # Processing the call arguments (line 168)
        # Getting the type of 'matrix_as_list' (line 168)
        matrix_as_list_101240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 37), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 168)
        kwargs_101241 = {}
        # Getting the type of 'scipy' (line 168)
        scipy_101237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 16), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 168)
        linalg_101238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 16), scipy_101237, 'linalg')
        # Obtaining the member 'eigvals' of a type (line 168)
        eigvals_101239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 16), linalg_101238, 'eigvals')
        # Calling eigvals(args, kwargs) (line 168)
        eigvals_call_result_101242 = invoke(stypy.reporting.localization.Localization(__file__, 168, 16), eigvals_101239, *[matrix_as_list_101240], **kwargs_101241)
        
        # Assigning a type to the variable 'W' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 12), 'W', eigvals_call_result_101242)
        
        # Call to assert_(...): (line 169)
        # Processing the call arguments (line 169)
        
        
        # Call to any(...): (line 169)
        # Processing the call arguments (line 169)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 169, 28, True)
        # Calculating comprehension expression
        # Getting the type of 'W' (line 169)
        W_101252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 58), 'W', False)
        comprehension_101253 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 169, 28), W_101252)
        # Assigning a type to the variable 'w' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 28), 'w', comprehension_101253)
        
        # Evaluating a boolean operation
        # Getting the type of 'w' (line 169)
        w_101245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 28), 'w', False)
        # Obtaining the member 'imag' of a type (line 169)
        imag_101246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 28), w_101245, 'imag')
        
        # Getting the type of 'w' (line 169)
        w_101247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 38), 'w', False)
        # Obtaining the member 'real' of a type (line 169)
        real_101248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 38), w_101247, 'real')
        int_101249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 47), 'int')
        # Applying the binary operator '<' (line 169)
        result_lt_101250 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 38), '<', real_101248, int_101249)
        
        # Applying the binary operator 'or' (line 169)
        result_or_keyword_101251 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 28), 'or', imag_101246, result_lt_101250)
        
        list_101254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 28), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 169, 28), list_101254, result_or_keyword_101251)
        # Processing the call keyword arguments (line 169)
        kwargs_101255 = {}
        # Getting the type of 'any' (line 169)
        any_101244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 24), 'any', False)
        # Calling any(args, kwargs) (line 169)
        any_call_result_101256 = invoke(stypy.reporting.localization.Localization(__file__, 169, 24), any_101244, *[list_101254], **kwargs_101255)
        
        # Applying the 'not' unary operator (line 169)
        result_not__101257 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 20), 'not', any_call_result_101256)
        
        # Processing the call keyword arguments (line 169)
        kwargs_101258 = {}
        # Getting the type of 'assert_' (line 169)
        assert__101243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 169)
        assert__call_result_101259 = invoke(stypy.reporting.localization.Localization(__file__, 169, 12), assert__101243, *[result_not__101257], **kwargs_101258)
        
        
        # Assigning a Call to a Name (line 172):
        
        # Assigning a Call to a Name (line 172):
        
        # Call to array(...): (line 172)
        # Processing the call arguments (line 172)
        # Getting the type of 'matrix_as_list' (line 172)
        matrix_as_list_101262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 25), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 172)
        # Getting the type of 'float' (line 172)
        float_101263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 47), 'float', False)
        keyword_101264 = float_101263
        kwargs_101265 = {'dtype': keyword_101264}
        # Getting the type of 'np' (line 172)
        np_101260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 172)
        array_101261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 16), np_101260, 'array')
        # Calling array(args, kwargs) (line 172)
        array_call_result_101266 = invoke(stypy.reporting.localization.Localization(__file__, 172, 16), array_101261, *[matrix_as_list_101262], **kwargs_101265)
        
        # Assigning a type to the variable 'A' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 12), 'A', array_call_result_101266)
        
        # Assigning a Call to a Tuple (line 173):
        
        # Assigning a Subscript to a Name (line 173):
        
        # Obtaining the type of the subscript
        int_101267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, 12), 'int')
        
        # Call to logm(...): (line 173)
        # Processing the call arguments (line 173)
        # Getting the type of 'A' (line 173)
        A_101269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 32), 'A', False)
        # Processing the call keyword arguments (line 173)
        # Getting the type of 'False' (line 173)
        False_101270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 40), 'False', False)
        keyword_101271 = False_101270
        kwargs_101272 = {'disp': keyword_101271}
        # Getting the type of 'logm' (line 173)
        logm_101268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 27), 'logm', False)
        # Calling logm(args, kwargs) (line 173)
        logm_call_result_101273 = invoke(stypy.reporting.localization.Localization(__file__, 173, 27), logm_101268, *[A_101269], **kwargs_101272)
        
        # Obtaining the member '__getitem__' of a type (line 173)
        getitem___101274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 12), logm_call_result_101273, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 173)
        subscript_call_result_101275 = invoke(stypy.reporting.localization.Localization(__file__, 173, 12), getitem___101274, int_101267)
        
        # Assigning a type to the variable 'tuple_var_assignment_100543' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 12), 'tuple_var_assignment_100543', subscript_call_result_101275)
        
        # Assigning a Subscript to a Name (line 173):
        
        # Obtaining the type of the subscript
        int_101276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, 12), 'int')
        
        # Call to logm(...): (line 173)
        # Processing the call arguments (line 173)
        # Getting the type of 'A' (line 173)
        A_101278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 32), 'A', False)
        # Processing the call keyword arguments (line 173)
        # Getting the type of 'False' (line 173)
        False_101279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 40), 'False', False)
        keyword_101280 = False_101279
        kwargs_101281 = {'disp': keyword_101280}
        # Getting the type of 'logm' (line 173)
        logm_101277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 27), 'logm', False)
        # Calling logm(args, kwargs) (line 173)
        logm_call_result_101282 = invoke(stypy.reporting.localization.Localization(__file__, 173, 27), logm_101277, *[A_101278], **kwargs_101281)
        
        # Obtaining the member '__getitem__' of a type (line 173)
        getitem___101283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 12), logm_call_result_101282, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 173)
        subscript_call_result_101284 = invoke(stypy.reporting.localization.Localization(__file__, 173, 12), getitem___101283, int_101276)
        
        # Assigning a type to the variable 'tuple_var_assignment_100544' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 12), 'tuple_var_assignment_100544', subscript_call_result_101284)
        
        # Assigning a Name to a Name (line 173):
        # Getting the type of 'tuple_var_assignment_100543' (line 173)
        tuple_var_assignment_100543_101285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 12), 'tuple_var_assignment_100543')
        # Assigning a type to the variable 'A_logm' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 12), 'A_logm', tuple_var_assignment_100543_101285)
        
        # Assigning a Name to a Name (line 173):
        # Getting the type of 'tuple_var_assignment_100544' (line 173)
        tuple_var_assignment_100544_101286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 12), 'tuple_var_assignment_100544')
        # Assigning a type to the variable 'info' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 20), 'info', tuple_var_assignment_100544_101286)
        
        # Call to assert_(...): (line 174)
        # Processing the call arguments (line 174)
        
        # Getting the type of 'A_logm' (line 174)
        A_logm_101288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 20), 'A_logm', False)
        # Obtaining the member 'dtype' of a type (line 174)
        dtype_101289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 20), A_logm_101288, 'dtype')
        # Obtaining the member 'char' of a type (line 174)
        char_101290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 20), dtype_101289, 'char')
        # Getting the type of 'complex_dtype_chars' (line 174)
        complex_dtype_chars_101291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 45), 'complex_dtype_chars', False)
        # Applying the binary operator 'notin' (line 174)
        result_contains_101292 = python_operator(stypy.reporting.localization.Localization(__file__, 174, 20), 'notin', char_101290, complex_dtype_chars_101291)
        
        # Processing the call keyword arguments (line 174)
        kwargs_101293 = {}
        # Getting the type of 'assert_' (line 174)
        assert__101287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 174)
        assert__call_result_101294 = invoke(stypy.reporting.localization.Localization(__file__, 174, 12), assert__101287, *[result_contains_101292], **kwargs_101293)
        
        
        # Assigning a Call to a Name (line 177):
        
        # Assigning a Call to a Name (line 177):
        
        # Call to array(...): (line 177)
        # Processing the call arguments (line 177)
        # Getting the type of 'matrix_as_list' (line 177)
        matrix_as_list_101297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 25), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 177)
        # Getting the type of 'complex' (line 177)
        complex_101298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 47), 'complex', False)
        keyword_101299 = complex_101298
        kwargs_101300 = {'dtype': keyword_101299}
        # Getting the type of 'np' (line 177)
        np_101295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 177)
        array_101296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 177, 16), np_101295, 'array')
        # Calling array(args, kwargs) (line 177)
        array_call_result_101301 = invoke(stypy.reporting.localization.Localization(__file__, 177, 16), array_101296, *[matrix_as_list_101297], **kwargs_101300)
        
        # Assigning a type to the variable 'A' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 12), 'A', array_call_result_101301)
        
        # Assigning a Call to a Tuple (line 178):
        
        # Assigning a Subscript to a Name (line 178):
        
        # Obtaining the type of the subscript
        int_101302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 12), 'int')
        
        # Call to logm(...): (line 178)
        # Processing the call arguments (line 178)
        # Getting the type of 'A' (line 178)
        A_101304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 32), 'A', False)
        # Processing the call keyword arguments (line 178)
        # Getting the type of 'False' (line 178)
        False_101305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 40), 'False', False)
        keyword_101306 = False_101305
        kwargs_101307 = {'disp': keyword_101306}
        # Getting the type of 'logm' (line 178)
        logm_101303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 27), 'logm', False)
        # Calling logm(args, kwargs) (line 178)
        logm_call_result_101308 = invoke(stypy.reporting.localization.Localization(__file__, 178, 27), logm_101303, *[A_101304], **kwargs_101307)
        
        # Obtaining the member '__getitem__' of a type (line 178)
        getitem___101309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 12), logm_call_result_101308, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 178)
        subscript_call_result_101310 = invoke(stypy.reporting.localization.Localization(__file__, 178, 12), getitem___101309, int_101302)
        
        # Assigning a type to the variable 'tuple_var_assignment_100545' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 12), 'tuple_var_assignment_100545', subscript_call_result_101310)
        
        # Assigning a Subscript to a Name (line 178):
        
        # Obtaining the type of the subscript
        int_101311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 12), 'int')
        
        # Call to logm(...): (line 178)
        # Processing the call arguments (line 178)
        # Getting the type of 'A' (line 178)
        A_101313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 32), 'A', False)
        # Processing the call keyword arguments (line 178)
        # Getting the type of 'False' (line 178)
        False_101314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 40), 'False', False)
        keyword_101315 = False_101314
        kwargs_101316 = {'disp': keyword_101315}
        # Getting the type of 'logm' (line 178)
        logm_101312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 27), 'logm', False)
        # Calling logm(args, kwargs) (line 178)
        logm_call_result_101317 = invoke(stypy.reporting.localization.Localization(__file__, 178, 27), logm_101312, *[A_101313], **kwargs_101316)
        
        # Obtaining the member '__getitem__' of a type (line 178)
        getitem___101318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 12), logm_call_result_101317, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 178)
        subscript_call_result_101319 = invoke(stypy.reporting.localization.Localization(__file__, 178, 12), getitem___101318, int_101311)
        
        # Assigning a type to the variable 'tuple_var_assignment_100546' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 12), 'tuple_var_assignment_100546', subscript_call_result_101319)
        
        # Assigning a Name to a Name (line 178):
        # Getting the type of 'tuple_var_assignment_100545' (line 178)
        tuple_var_assignment_100545_101320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 12), 'tuple_var_assignment_100545')
        # Assigning a type to the variable 'A_logm' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 12), 'A_logm', tuple_var_assignment_100545_101320)
        
        # Assigning a Name to a Name (line 178):
        # Getting the type of 'tuple_var_assignment_100546' (line 178)
        tuple_var_assignment_100546_101321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 12), 'tuple_var_assignment_100546')
        # Assigning a type to the variable 'info' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 20), 'info', tuple_var_assignment_100546_101321)
        
        # Call to assert_(...): (line 179)
        # Processing the call arguments (line 179)
        
        # Getting the type of 'A_logm' (line 179)
        A_logm_101323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 20), 'A_logm', False)
        # Obtaining the member 'dtype' of a type (line 179)
        dtype_101324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 20), A_logm_101323, 'dtype')
        # Obtaining the member 'char' of a type (line 179)
        char_101325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 20), dtype_101324, 'char')
        # Getting the type of 'complex_dtype_chars' (line 179)
        complex_dtype_chars_101326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 41), 'complex_dtype_chars', False)
        # Applying the binary operator 'in' (line 179)
        result_contains_101327 = python_operator(stypy.reporting.localization.Localization(__file__, 179, 20), 'in', char_101325, complex_dtype_chars_101326)
        
        # Processing the call keyword arguments (line 179)
        kwargs_101328 = {}
        # Getting the type of 'assert_' (line 179)
        assert__101322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 179)
        assert__call_result_101329 = invoke(stypy.reporting.localization.Localization(__file__, 179, 12), assert__101322, *[result_contains_101327], **kwargs_101328)
        
        
        # Assigning a UnaryOp to a Name (line 182):
        
        # Assigning a UnaryOp to a Name (line 182):
        
        
        # Call to array(...): (line 182)
        # Processing the call arguments (line 182)
        # Getting the type of 'matrix_as_list' (line 182)
        matrix_as_list_101332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 26), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 182)
        # Getting the type of 'float' (line 182)
        float_101333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 48), 'float', False)
        keyword_101334 = float_101333
        kwargs_101335 = {'dtype': keyword_101334}
        # Getting the type of 'np' (line 182)
        np_101330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 17), 'np', False)
        # Obtaining the member 'array' of a type (line 182)
        array_101331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 182, 17), np_101330, 'array')
        # Calling array(args, kwargs) (line 182)
        array_call_result_101336 = invoke(stypy.reporting.localization.Localization(__file__, 182, 17), array_101331, *[matrix_as_list_101332], **kwargs_101335)
        
        # Applying the 'usub' unary operator (line 182)
        result___neg___101337 = python_operator(stypy.reporting.localization.Localization(__file__, 182, 16), 'usub', array_call_result_101336)
        
        # Assigning a type to the variable 'A' (line 182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 12), 'A', result___neg___101337)
        
        # Assigning a Call to a Tuple (line 183):
        
        # Assigning a Subscript to a Name (line 183):
        
        # Obtaining the type of the subscript
        int_101338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 12), 'int')
        
        # Call to logm(...): (line 183)
        # Processing the call arguments (line 183)
        # Getting the type of 'A' (line 183)
        A_101340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 32), 'A', False)
        # Processing the call keyword arguments (line 183)
        # Getting the type of 'False' (line 183)
        False_101341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 40), 'False', False)
        keyword_101342 = False_101341
        kwargs_101343 = {'disp': keyword_101342}
        # Getting the type of 'logm' (line 183)
        logm_101339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 27), 'logm', False)
        # Calling logm(args, kwargs) (line 183)
        logm_call_result_101344 = invoke(stypy.reporting.localization.Localization(__file__, 183, 27), logm_101339, *[A_101340], **kwargs_101343)
        
        # Obtaining the member '__getitem__' of a type (line 183)
        getitem___101345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 12), logm_call_result_101344, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 183)
        subscript_call_result_101346 = invoke(stypy.reporting.localization.Localization(__file__, 183, 12), getitem___101345, int_101338)
        
        # Assigning a type to the variable 'tuple_var_assignment_100547' (line 183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 12), 'tuple_var_assignment_100547', subscript_call_result_101346)
        
        # Assigning a Subscript to a Name (line 183):
        
        # Obtaining the type of the subscript
        int_101347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 12), 'int')
        
        # Call to logm(...): (line 183)
        # Processing the call arguments (line 183)
        # Getting the type of 'A' (line 183)
        A_101349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 32), 'A', False)
        # Processing the call keyword arguments (line 183)
        # Getting the type of 'False' (line 183)
        False_101350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 40), 'False', False)
        keyword_101351 = False_101350
        kwargs_101352 = {'disp': keyword_101351}
        # Getting the type of 'logm' (line 183)
        logm_101348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 27), 'logm', False)
        # Calling logm(args, kwargs) (line 183)
        logm_call_result_101353 = invoke(stypy.reporting.localization.Localization(__file__, 183, 27), logm_101348, *[A_101349], **kwargs_101352)
        
        # Obtaining the member '__getitem__' of a type (line 183)
        getitem___101354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 12), logm_call_result_101353, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 183)
        subscript_call_result_101355 = invoke(stypy.reporting.localization.Localization(__file__, 183, 12), getitem___101354, int_101347)
        
        # Assigning a type to the variable 'tuple_var_assignment_100548' (line 183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 12), 'tuple_var_assignment_100548', subscript_call_result_101355)
        
        # Assigning a Name to a Name (line 183):
        # Getting the type of 'tuple_var_assignment_100547' (line 183)
        tuple_var_assignment_100547_101356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 12), 'tuple_var_assignment_100547')
        # Assigning a type to the variable 'A_logm' (line 183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 12), 'A_logm', tuple_var_assignment_100547_101356)
        
        # Assigning a Name to a Name (line 183):
        # Getting the type of 'tuple_var_assignment_100548' (line 183)
        tuple_var_assignment_100548_101357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 12), 'tuple_var_assignment_100548')
        # Assigning a type to the variable 'info' (line 183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 20), 'info', tuple_var_assignment_100548_101357)
        
        # Call to assert_(...): (line 184)
        # Processing the call arguments (line 184)
        
        # Getting the type of 'A_logm' (line 184)
        A_logm_101359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 20), 'A_logm', False)
        # Obtaining the member 'dtype' of a type (line 184)
        dtype_101360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 20), A_logm_101359, 'dtype')
        # Obtaining the member 'char' of a type (line 184)
        char_101361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 20), dtype_101360, 'char')
        # Getting the type of 'complex_dtype_chars' (line 184)
        complex_dtype_chars_101362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 41), 'complex_dtype_chars', False)
        # Applying the binary operator 'in' (line 184)
        result_contains_101363 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 20), 'in', char_101361, complex_dtype_chars_101362)
        
        # Processing the call keyword arguments (line 184)
        kwargs_101364 = {}
        # Getting the type of 'assert_' (line 184)
        assert__101358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 184)
        assert__call_result_101365 = invoke(stypy.reporting.localization.Localization(__file__, 184, 12), assert__101358, *[result_contains_101363], **kwargs_101364)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_logm_type_preservation_and_conversion(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_logm_type_preservation_and_conversion' in the type store
        # Getting the type of 'stypy_return_type' (line 156)
        stypy_return_type_101366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101366)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_logm_type_preservation_and_conversion'
        return stypy_return_type_101366


    @norecursion
    def test_complex_spectrum_real_logm(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_complex_spectrum_real_logm'
        module_type_store = module_type_store.open_function_context('test_complex_spectrum_real_logm', 186, 4, False)
        # Assigning a type to the variable 'self' (line 187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestLogM.test_complex_spectrum_real_logm.__dict__.__setitem__('stypy_localization', localization)
        TestLogM.test_complex_spectrum_real_logm.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestLogM.test_complex_spectrum_real_logm.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestLogM.test_complex_spectrum_real_logm.__dict__.__setitem__('stypy_function_name', 'TestLogM.test_complex_spectrum_real_logm')
        TestLogM.test_complex_spectrum_real_logm.__dict__.__setitem__('stypy_param_names_list', [])
        TestLogM.test_complex_spectrum_real_logm.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestLogM.test_complex_spectrum_real_logm.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestLogM.test_complex_spectrum_real_logm.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestLogM.test_complex_spectrum_real_logm.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestLogM.test_complex_spectrum_real_logm.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestLogM.test_complex_spectrum_real_logm.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.test_complex_spectrum_real_logm', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_complex_spectrum_real_logm', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_complex_spectrum_real_logm(...)' code ##################

        
        # Assigning a List to a Name (line 189):
        
        # Assigning a List to a Name (line 189):
        
        # Obtaining an instance of the builtin type 'list' (line 189)
        list_101367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 189)
        # Adding element type (line 189)
        
        # Obtaining an instance of the builtin type 'list' (line 189)
        list_101368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 189)
        # Adding element type (line 189)
        int_101369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 14), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 13), list_101368, int_101369)
        # Adding element type (line 189)
        int_101370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 13), list_101368, int_101370)
        # Adding element type (line 189)
        int_101371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 13), list_101368, int_101371)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 12), list_101367, list_101368)
        # Adding element type (line 189)
        
        # Obtaining an instance of the builtin type 'list' (line 189)
        list_101372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 189)
        # Adding element type (line 189)
        int_101373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 24), list_101372, int_101373)
        # Adding element type (line 189)
        int_101374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 24), list_101372, int_101374)
        # Adding element type (line 189)
        int_101375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 24), list_101372, int_101375)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 12), list_101367, list_101372)
        # Adding element type (line 189)
        
        # Obtaining an instance of the builtin type 'list' (line 189)
        list_101376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 189)
        # Adding element type (line 189)
        int_101377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 35), list_101376, int_101377)
        # Adding element type (line 189)
        int_101378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 35), list_101376, int_101378)
        # Adding element type (line 189)
        int_101379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 35), list_101376, int_101379)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 12), list_101367, list_101376)
        
        # Assigning a type to the variable 'M' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 8), 'M', list_101367)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 190)
        tuple_101380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 190)
        # Adding element type (line 190)
        # Getting the type of 'float' (line 190)
        float_101381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 18), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 190, 18), tuple_101380, float_101381)
        # Adding element type (line 190)
        # Getting the type of 'complex' (line 190)
        complex_101382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 25), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 190, 18), tuple_101380, complex_101382)
        
        # Testing the type of a for loop iterable (line 190)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 190, 8), tuple_101380)
        # Getting the type of the for loop variable (line 190)
        for_loop_var_101383 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 190, 8), tuple_101380)
        # Assigning a type to the variable 'dt' (line 190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 8), 'dt', for_loop_var_101383)
        # SSA begins for a for statement (line 190)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 191):
        
        # Assigning a Call to a Name (line 191):
        
        # Call to array(...): (line 191)
        # Processing the call arguments (line 191)
        # Getting the type of 'M' (line 191)
        M_101386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 25), 'M', False)
        # Processing the call keyword arguments (line 191)
        # Getting the type of 'dt' (line 191)
        dt_101387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 34), 'dt', False)
        keyword_101388 = dt_101387
        kwargs_101389 = {'dtype': keyword_101388}
        # Getting the type of 'np' (line 191)
        np_101384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 191)
        array_101385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 16), np_101384, 'array')
        # Calling array(args, kwargs) (line 191)
        array_call_result_101390 = invoke(stypy.reporting.localization.Localization(__file__, 191, 16), array_101385, *[M_101386], **kwargs_101389)
        
        # Assigning a type to the variable 'X' (line 191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 12), 'X', array_call_result_101390)
        
        # Assigning a Call to a Name (line 192):
        
        # Assigning a Call to a Name (line 192):
        
        # Call to eigvals(...): (line 192)
        # Processing the call arguments (line 192)
        # Getting the type of 'X' (line 192)
        X_101394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 37), 'X', False)
        # Processing the call keyword arguments (line 192)
        kwargs_101395 = {}
        # Getting the type of 'scipy' (line 192)
        scipy_101391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 16), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 192)
        linalg_101392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 16), scipy_101391, 'linalg')
        # Obtaining the member 'eigvals' of a type (line 192)
        eigvals_101393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 16), linalg_101392, 'eigvals')
        # Calling eigvals(args, kwargs) (line 192)
        eigvals_call_result_101396 = invoke(stypy.reporting.localization.Localization(__file__, 192, 16), eigvals_101393, *[X_101394], **kwargs_101395)
        
        # Assigning a type to the variable 'w' (line 192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 12), 'w', eigvals_call_result_101396)
        
        # Call to assert_(...): (line 193)
        # Processing the call arguments (line 193)
        
        float_101398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 20), 'float')
        
        # Call to sum(...): (line 193)
        # Processing the call keyword arguments (line 193)
        kwargs_101406 = {}
        
        # Call to absolute(...): (line 193)
        # Processing the call arguments (line 193)
        # Getting the type of 'w' (line 193)
        w_101401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 39), 'w', False)
        # Obtaining the member 'imag' of a type (line 193)
        imag_101402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 39), w_101401, 'imag')
        # Processing the call keyword arguments (line 193)
        kwargs_101403 = {}
        # Getting the type of 'np' (line 193)
        np_101399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 27), 'np', False)
        # Obtaining the member 'absolute' of a type (line 193)
        absolute_101400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 27), np_101399, 'absolute')
        # Calling absolute(args, kwargs) (line 193)
        absolute_call_result_101404 = invoke(stypy.reporting.localization.Localization(__file__, 193, 27), absolute_101400, *[imag_101402], **kwargs_101403)
        
        # Obtaining the member 'sum' of a type (line 193)
        sum_101405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 27), absolute_call_result_101404, 'sum')
        # Calling sum(args, kwargs) (line 193)
        sum_call_result_101407 = invoke(stypy.reporting.localization.Localization(__file__, 193, 27), sum_101405, *[], **kwargs_101406)
        
        # Applying the binary operator '<' (line 193)
        result_lt_101408 = python_operator(stypy.reporting.localization.Localization(__file__, 193, 20), '<', float_101398, sum_call_result_101407)
        
        # Processing the call keyword arguments (line 193)
        kwargs_101409 = {}
        # Getting the type of 'assert_' (line 193)
        assert__101397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 193)
        assert__call_result_101410 = invoke(stypy.reporting.localization.Localization(__file__, 193, 12), assert__101397, *[result_lt_101408], **kwargs_101409)
        
        
        # Assigning a Call to a Tuple (line 194):
        
        # Assigning a Subscript to a Name (line 194):
        
        # Obtaining the type of the subscript
        int_101411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 12), 'int')
        
        # Call to logm(...): (line 194)
        # Processing the call arguments (line 194)
        # Getting the type of 'X' (line 194)
        X_101413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 27), 'X', False)
        # Processing the call keyword arguments (line 194)
        # Getting the type of 'False' (line 194)
        False_101414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 35), 'False', False)
        keyword_101415 = False_101414
        kwargs_101416 = {'disp': keyword_101415}
        # Getting the type of 'logm' (line 194)
        logm_101412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 22), 'logm', False)
        # Calling logm(args, kwargs) (line 194)
        logm_call_result_101417 = invoke(stypy.reporting.localization.Localization(__file__, 194, 22), logm_101412, *[X_101413], **kwargs_101416)
        
        # Obtaining the member '__getitem__' of a type (line 194)
        getitem___101418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 12), logm_call_result_101417, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 194)
        subscript_call_result_101419 = invoke(stypy.reporting.localization.Localization(__file__, 194, 12), getitem___101418, int_101411)
        
        # Assigning a type to the variable 'tuple_var_assignment_100549' (line 194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 12), 'tuple_var_assignment_100549', subscript_call_result_101419)
        
        # Assigning a Subscript to a Name (line 194):
        
        # Obtaining the type of the subscript
        int_101420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 12), 'int')
        
        # Call to logm(...): (line 194)
        # Processing the call arguments (line 194)
        # Getting the type of 'X' (line 194)
        X_101422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 27), 'X', False)
        # Processing the call keyword arguments (line 194)
        # Getting the type of 'False' (line 194)
        False_101423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 35), 'False', False)
        keyword_101424 = False_101423
        kwargs_101425 = {'disp': keyword_101424}
        # Getting the type of 'logm' (line 194)
        logm_101421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 22), 'logm', False)
        # Calling logm(args, kwargs) (line 194)
        logm_call_result_101426 = invoke(stypy.reporting.localization.Localization(__file__, 194, 22), logm_101421, *[X_101422], **kwargs_101425)
        
        # Obtaining the member '__getitem__' of a type (line 194)
        getitem___101427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 12), logm_call_result_101426, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 194)
        subscript_call_result_101428 = invoke(stypy.reporting.localization.Localization(__file__, 194, 12), getitem___101427, int_101420)
        
        # Assigning a type to the variable 'tuple_var_assignment_100550' (line 194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 12), 'tuple_var_assignment_100550', subscript_call_result_101428)
        
        # Assigning a Name to a Name (line 194):
        # Getting the type of 'tuple_var_assignment_100549' (line 194)
        tuple_var_assignment_100549_101429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 12), 'tuple_var_assignment_100549')
        # Assigning a type to the variable 'Y' (line 194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 12), 'Y', tuple_var_assignment_100549_101429)
        
        # Assigning a Name to a Name (line 194):
        # Getting the type of 'tuple_var_assignment_100550' (line 194)
        tuple_var_assignment_100550_101430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 12), 'tuple_var_assignment_100550')
        # Assigning a type to the variable 'info' (line 194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 15), 'info', tuple_var_assignment_100550_101430)
        
        # Call to assert_(...): (line 195)
        # Processing the call arguments (line 195)
        
        # Call to issubdtype(...): (line 195)
        # Processing the call arguments (line 195)
        # Getting the type of 'Y' (line 195)
        Y_101434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 34), 'Y', False)
        # Obtaining the member 'dtype' of a type (line 195)
        dtype_101435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 34), Y_101434, 'dtype')
        # Getting the type of 'np' (line 195)
        np_101436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 43), 'np', False)
        # Obtaining the member 'inexact' of a type (line 195)
        inexact_101437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 43), np_101436, 'inexact')
        # Processing the call keyword arguments (line 195)
        kwargs_101438 = {}
        # Getting the type of 'np' (line 195)
        np_101432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 20), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 195)
        issubdtype_101433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 20), np_101432, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 195)
        issubdtype_call_result_101439 = invoke(stypy.reporting.localization.Localization(__file__, 195, 20), issubdtype_101433, *[dtype_101435, inexact_101437], **kwargs_101438)
        
        # Processing the call keyword arguments (line 195)
        kwargs_101440 = {}
        # Getting the type of 'assert_' (line 195)
        assert__101431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 195)
        assert__call_result_101441 = invoke(stypy.reporting.localization.Localization(__file__, 195, 12), assert__101431, *[issubdtype_call_result_101439], **kwargs_101440)
        
        
        # Call to assert_allclose(...): (line 196)
        # Processing the call arguments (line 196)
        
        # Call to expm(...): (line 196)
        # Processing the call arguments (line 196)
        # Getting the type of 'Y' (line 196)
        Y_101444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 33), 'Y', False)
        # Processing the call keyword arguments (line 196)
        kwargs_101445 = {}
        # Getting the type of 'expm' (line 196)
        expm_101443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 28), 'expm', False)
        # Calling expm(args, kwargs) (line 196)
        expm_call_result_101446 = invoke(stypy.reporting.localization.Localization(__file__, 196, 28), expm_101443, *[Y_101444], **kwargs_101445)
        
        # Getting the type of 'X' (line 196)
        X_101447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 37), 'X', False)
        # Processing the call keyword arguments (line 196)
        kwargs_101448 = {}
        # Getting the type of 'assert_allclose' (line 196)
        assert_allclose_101442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 196)
        assert_allclose_call_result_101449 = invoke(stypy.reporting.localization.Localization(__file__, 196, 12), assert_allclose_101442, *[expm_call_result_101446, X_101447], **kwargs_101448)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_complex_spectrum_real_logm(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_complex_spectrum_real_logm' in the type store
        # Getting the type of 'stypy_return_type' (line 186)
        stypy_return_type_101450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101450)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_complex_spectrum_real_logm'
        return stypy_return_type_101450


    @norecursion
    def test_real_mixed_sign_spectrum(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_real_mixed_sign_spectrum'
        module_type_store = module_type_store.open_function_context('test_real_mixed_sign_spectrum', 198, 4, False)
        # Assigning a type to the variable 'self' (line 199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestLogM.test_real_mixed_sign_spectrum.__dict__.__setitem__('stypy_localization', localization)
        TestLogM.test_real_mixed_sign_spectrum.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestLogM.test_real_mixed_sign_spectrum.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestLogM.test_real_mixed_sign_spectrum.__dict__.__setitem__('stypy_function_name', 'TestLogM.test_real_mixed_sign_spectrum')
        TestLogM.test_real_mixed_sign_spectrum.__dict__.__setitem__('stypy_param_names_list', [])
        TestLogM.test_real_mixed_sign_spectrum.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestLogM.test_real_mixed_sign_spectrum.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestLogM.test_real_mixed_sign_spectrum.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestLogM.test_real_mixed_sign_spectrum.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestLogM.test_real_mixed_sign_spectrum.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestLogM.test_real_mixed_sign_spectrum.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.test_real_mixed_sign_spectrum', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_real_mixed_sign_spectrum', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_real_mixed_sign_spectrum(...)' code ##################

        
        
        # Obtaining an instance of the builtin type 'tuple' (line 202)
        tuple_101451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 202)
        # Adding element type (line 202)
        
        # Obtaining an instance of the builtin type 'list' (line 202)
        list_101452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 202)
        # Adding element type (line 202)
        
        # Obtaining an instance of the builtin type 'list' (line 202)
        list_101453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 202)
        # Adding element type (line 202)
        int_101454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 202, 17), list_101453, int_101454)
        # Adding element type (line 202)
        int_101455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 202, 17), list_101453, int_101455)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 202, 16), list_101452, list_101453)
        # Adding element type (line 202)
        
        # Obtaining an instance of the builtin type 'list' (line 202)
        list_101456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 202)
        # Adding element type (line 202)
        int_101457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 202, 25), list_101456, int_101457)
        # Adding element type (line 202)
        int_101458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 202, 25), list_101456, int_101458)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 202, 16), list_101452, list_101456)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 202, 16), tuple_101451, list_101452)
        # Adding element type (line 202)
        
        # Obtaining an instance of the builtin type 'list' (line 203)
        list_101459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 203)
        # Adding element type (line 203)
        
        # Obtaining an instance of the builtin type 'list' (line 203)
        list_101460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 203)
        # Adding element type (line 203)
        int_101461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 203, 17), list_101460, int_101461)
        # Adding element type (line 203)
        int_101462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 203, 17), list_101460, int_101462)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 203, 16), list_101459, list_101460)
        # Adding element type (line 203)
        
        # Obtaining an instance of the builtin type 'list' (line 203)
        list_101463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 203)
        # Adding element type (line 203)
        int_101464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 203, 25), list_101463, int_101464)
        # Adding element type (line 203)
        int_101465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 203, 25), list_101463, int_101465)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 203, 16), list_101459, list_101463)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 202, 16), tuple_101451, list_101459)
        
        # Testing the type of a for loop iterable (line 201)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 201, 8), tuple_101451)
        # Getting the type of the for loop variable (line 201)
        for_loop_var_101466 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 201, 8), tuple_101451)
        # Assigning a type to the variable 'M' (line 201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'M', for_loop_var_101466)
        # SSA begins for a for statement (line 201)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 204)
        tuple_101467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 204)
        # Adding element type (line 204)
        # Getting the type of 'float' (line 204)
        float_101468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 22), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 204, 22), tuple_101467, float_101468)
        # Adding element type (line 204)
        # Getting the type of 'complex' (line 204)
        complex_101469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 29), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 204, 22), tuple_101467, complex_101469)
        
        # Testing the type of a for loop iterable (line 204)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 204, 12), tuple_101467)
        # Getting the type of the for loop variable (line 204)
        for_loop_var_101470 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 204, 12), tuple_101467)
        # Assigning a type to the variable 'dt' (line 204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 12), 'dt', for_loop_var_101470)
        # SSA begins for a for statement (line 204)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 205):
        
        # Assigning a Call to a Name (line 205):
        
        # Call to array(...): (line 205)
        # Processing the call arguments (line 205)
        # Getting the type of 'M' (line 205)
        M_101473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 29), 'M', False)
        # Processing the call keyword arguments (line 205)
        # Getting the type of 'dt' (line 205)
        dt_101474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 38), 'dt', False)
        keyword_101475 = dt_101474
        kwargs_101476 = {'dtype': keyword_101475}
        # Getting the type of 'np' (line 205)
        np_101471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 20), 'np', False)
        # Obtaining the member 'array' of a type (line 205)
        array_101472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 20), np_101471, 'array')
        # Calling array(args, kwargs) (line 205)
        array_call_result_101477 = invoke(stypy.reporting.localization.Localization(__file__, 205, 20), array_101472, *[M_101473], **kwargs_101476)
        
        # Assigning a type to the variable 'A' (line 205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 16), 'A', array_call_result_101477)
        
        # Assigning a Call to a Tuple (line 206):
        
        # Assigning a Subscript to a Name (line 206):
        
        # Obtaining the type of the subscript
        int_101478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 206, 16), 'int')
        
        # Call to logm(...): (line 206)
        # Processing the call arguments (line 206)
        # Getting the type of 'A' (line 206)
        A_101480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 36), 'A', False)
        # Processing the call keyword arguments (line 206)
        # Getting the type of 'False' (line 206)
        False_101481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 44), 'False', False)
        keyword_101482 = False_101481
        kwargs_101483 = {'disp': keyword_101482}
        # Getting the type of 'logm' (line 206)
        logm_101479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 31), 'logm', False)
        # Calling logm(args, kwargs) (line 206)
        logm_call_result_101484 = invoke(stypy.reporting.localization.Localization(__file__, 206, 31), logm_101479, *[A_101480], **kwargs_101483)
        
        # Obtaining the member '__getitem__' of a type (line 206)
        getitem___101485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 16), logm_call_result_101484, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 206)
        subscript_call_result_101486 = invoke(stypy.reporting.localization.Localization(__file__, 206, 16), getitem___101485, int_101478)
        
        # Assigning a type to the variable 'tuple_var_assignment_100551' (line 206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 16), 'tuple_var_assignment_100551', subscript_call_result_101486)
        
        # Assigning a Subscript to a Name (line 206):
        
        # Obtaining the type of the subscript
        int_101487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 206, 16), 'int')
        
        # Call to logm(...): (line 206)
        # Processing the call arguments (line 206)
        # Getting the type of 'A' (line 206)
        A_101489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 36), 'A', False)
        # Processing the call keyword arguments (line 206)
        # Getting the type of 'False' (line 206)
        False_101490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 44), 'False', False)
        keyword_101491 = False_101490
        kwargs_101492 = {'disp': keyword_101491}
        # Getting the type of 'logm' (line 206)
        logm_101488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 31), 'logm', False)
        # Calling logm(args, kwargs) (line 206)
        logm_call_result_101493 = invoke(stypy.reporting.localization.Localization(__file__, 206, 31), logm_101488, *[A_101489], **kwargs_101492)
        
        # Obtaining the member '__getitem__' of a type (line 206)
        getitem___101494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 16), logm_call_result_101493, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 206)
        subscript_call_result_101495 = invoke(stypy.reporting.localization.Localization(__file__, 206, 16), getitem___101494, int_101487)
        
        # Assigning a type to the variable 'tuple_var_assignment_100552' (line 206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 16), 'tuple_var_assignment_100552', subscript_call_result_101495)
        
        # Assigning a Name to a Name (line 206):
        # Getting the type of 'tuple_var_assignment_100551' (line 206)
        tuple_var_assignment_100551_101496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 16), 'tuple_var_assignment_100551')
        # Assigning a type to the variable 'A_logm' (line 206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 16), 'A_logm', tuple_var_assignment_100551_101496)
        
        # Assigning a Name to a Name (line 206):
        # Getting the type of 'tuple_var_assignment_100552' (line 206)
        tuple_var_assignment_100552_101497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 16), 'tuple_var_assignment_100552')
        # Assigning a type to the variable 'info' (line 206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 24), 'info', tuple_var_assignment_100552_101497)
        
        # Call to assert_(...): (line 207)
        # Processing the call arguments (line 207)
        
        # Call to issubdtype(...): (line 207)
        # Processing the call arguments (line 207)
        # Getting the type of 'A_logm' (line 207)
        A_logm_101501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 38), 'A_logm', False)
        # Obtaining the member 'dtype' of a type (line 207)
        dtype_101502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 38), A_logm_101501, 'dtype')
        # Getting the type of 'np' (line 207)
        np_101503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 52), 'np', False)
        # Obtaining the member 'complexfloating' of a type (line 207)
        complexfloating_101504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 52), np_101503, 'complexfloating')
        # Processing the call keyword arguments (line 207)
        kwargs_101505 = {}
        # Getting the type of 'np' (line 207)
        np_101499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 24), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 207)
        issubdtype_101500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 24), np_101499, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 207)
        issubdtype_call_result_101506 = invoke(stypy.reporting.localization.Localization(__file__, 207, 24), issubdtype_101500, *[dtype_101502, complexfloating_101504], **kwargs_101505)
        
        # Processing the call keyword arguments (line 207)
        kwargs_101507 = {}
        # Getting the type of 'assert_' (line 207)
        assert__101498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 16), 'assert_', False)
        # Calling assert_(args, kwargs) (line 207)
        assert__call_result_101508 = invoke(stypy.reporting.localization.Localization(__file__, 207, 16), assert__101498, *[issubdtype_call_result_101506], **kwargs_101507)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_real_mixed_sign_spectrum(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_real_mixed_sign_spectrum' in the type store
        # Getting the type of 'stypy_return_type' (line 198)
        stypy_return_type_101509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101509)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_real_mixed_sign_spectrum'
        return stypy_return_type_101509


    @norecursion
    def test_exactly_singular(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_exactly_singular'
        module_type_store = module_type_store.open_function_context('test_exactly_singular', 209, 4, False)
        # Assigning a type to the variable 'self' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestLogM.test_exactly_singular.__dict__.__setitem__('stypy_localization', localization)
        TestLogM.test_exactly_singular.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestLogM.test_exactly_singular.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestLogM.test_exactly_singular.__dict__.__setitem__('stypy_function_name', 'TestLogM.test_exactly_singular')
        TestLogM.test_exactly_singular.__dict__.__setitem__('stypy_param_names_list', [])
        TestLogM.test_exactly_singular.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestLogM.test_exactly_singular.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestLogM.test_exactly_singular.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestLogM.test_exactly_singular.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestLogM.test_exactly_singular.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestLogM.test_exactly_singular.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.test_exactly_singular', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_exactly_singular', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_exactly_singular(...)' code ##################

        
        # Assigning a Call to a Name (line 210):
        
        # Assigning a Call to a Name (line 210):
        
        # Call to array(...): (line 210)
        # Processing the call arguments (line 210)
        
        # Obtaining an instance of the builtin type 'list' (line 210)
        list_101512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 210)
        # Adding element type (line 210)
        
        # Obtaining an instance of the builtin type 'list' (line 210)
        list_101513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 210)
        # Adding element type (line 210)
        int_101514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 22), list_101513, int_101514)
        # Adding element type (line 210)
        int_101515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 22), list_101513, int_101515)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 21), list_101512, list_101513)
        # Adding element type (line 210)
        
        # Obtaining an instance of the builtin type 'list' (line 210)
        list_101516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 210)
        # Adding element type (line 210)
        complex_101517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 31), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 30), list_101516, complex_101517)
        # Adding element type (line 210)
        complex_101518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 35), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 30), list_101516, complex_101518)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 21), list_101512, list_101516)
        
        # Processing the call keyword arguments (line 210)
        kwargs_101519 = {}
        # Getting the type of 'np' (line 210)
        np_101510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 210)
        array_101511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 12), np_101510, 'array')
        # Calling array(args, kwargs) (line 210)
        array_call_result_101520 = invoke(stypy.reporting.localization.Localization(__file__, 210, 12), array_101511, *[list_101512], **kwargs_101519)
        
        # Assigning a type to the variable 'A' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'A', array_call_result_101520)
        
        # Assigning a Call to a Name (line 211):
        
        # Assigning a Call to a Name (line 211):
        
        # Call to asarray(...): (line 211)
        # Processing the call arguments (line 211)
        
        # Obtaining an instance of the builtin type 'list' (line 211)
        list_101523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 211)
        # Adding element type (line 211)
        
        # Obtaining an instance of the builtin type 'list' (line 211)
        list_101524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 211)
        # Adding element type (line 211)
        int_101525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 211, 24), list_101524, int_101525)
        # Adding element type (line 211)
        int_101526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 211, 24), list_101524, int_101526)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 211, 23), list_101523, list_101524)
        # Adding element type (line 211)
        
        # Obtaining an instance of the builtin type 'list' (line 211)
        list_101527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 211)
        # Adding element type (line 211)
        int_101528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 211, 32), list_101527, int_101528)
        # Adding element type (line 211)
        int_101529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 211, 32), list_101527, int_101529)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 211, 23), list_101523, list_101527)
        
        # Processing the call keyword arguments (line 211)
        kwargs_101530 = {}
        # Getting the type of 'np' (line 211)
        np_101521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 211)
        asarray_101522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 12), np_101521, 'asarray')
        # Calling asarray(args, kwargs) (line 211)
        asarray_call_result_101531 = invoke(stypy.reporting.localization.Localization(__file__, 211, 12), asarray_101522, *[list_101523], **kwargs_101530)
        
        # Assigning a type to the variable 'B' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'B', asarray_call_result_101531)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 212)
        tuple_101532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 212)
        # Adding element type (line 212)
        # Getting the type of 'A' (line 212)
        A_101533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 17), 'A')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 212, 17), tuple_101532, A_101533)
        # Adding element type (line 212)
        # Getting the type of 'A' (line 212)
        A_101534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 20), 'A')
        # Obtaining the member 'T' of a type (line 212)
        T_101535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 20), A_101534, 'T')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 212, 17), tuple_101532, T_101535)
        # Adding element type (line 212)
        # Getting the type of 'B' (line 212)
        B_101536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 25), 'B')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 212, 17), tuple_101532, B_101536)
        # Adding element type (line 212)
        # Getting the type of 'B' (line 212)
        B_101537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 28), 'B')
        # Obtaining the member 'T' of a type (line 212)
        T_101538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 28), B_101537, 'T')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 212, 17), tuple_101532, T_101538)
        
        # Testing the type of a for loop iterable (line 212)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 212, 8), tuple_101532)
        # Getting the type of the for loop variable (line 212)
        for_loop_var_101539 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 212, 8), tuple_101532)
        # Assigning a type to the variable 'M' (line 212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 8), 'M', for_loop_var_101539)
        # SSA begins for a for statement (line 212)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Attribute to a Name (line 213):
        
        # Assigning a Attribute to a Name (line 213):
        # Getting the type of '_matfuncs_inv_ssq' (line 213)
        _matfuncs_inv_ssq_101540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 31), '_matfuncs_inv_ssq')
        # Obtaining the member 'LogmExactlySingularWarning' of a type (line 213)
        LogmExactlySingularWarning_101541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 31), _matfuncs_inv_ssq_101540, 'LogmExactlySingularWarning')
        # Assigning a type to the variable 'expected_warning' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 12), 'expected_warning', LogmExactlySingularWarning_101541)
        
        # Assigning a Call to a Tuple (line 214):
        
        # Assigning a Subscript to a Name (line 214):
        
        # Obtaining the type of the subscript
        int_101542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 12), 'int')
        
        # Call to _assert_warns(...): (line 214)
        # Processing the call arguments (line 214)
        # Getting the type of 'expected_warning' (line 214)
        expected_warning_101544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 36), 'expected_warning', False)
        # Getting the type of 'logm' (line 214)
        logm_101545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 54), 'logm', False)
        # Getting the type of 'M' (line 214)
        M_101546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 60), 'M', False)
        # Processing the call keyword arguments (line 214)
        # Getting the type of 'False' (line 214)
        False_101547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 68), 'False', False)
        keyword_101548 = False_101547
        kwargs_101549 = {'disp': keyword_101548}
        # Getting the type of '_assert_warns' (line 214)
        _assert_warns_101543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 22), '_assert_warns', False)
        # Calling _assert_warns(args, kwargs) (line 214)
        _assert_warns_call_result_101550 = invoke(stypy.reporting.localization.Localization(__file__, 214, 22), _assert_warns_101543, *[expected_warning_101544, logm_101545, M_101546], **kwargs_101549)
        
        # Obtaining the member '__getitem__' of a type (line 214)
        getitem___101551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 12), _assert_warns_call_result_101550, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 214)
        subscript_call_result_101552 = invoke(stypy.reporting.localization.Localization(__file__, 214, 12), getitem___101551, int_101542)
        
        # Assigning a type to the variable 'tuple_var_assignment_100553' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'tuple_var_assignment_100553', subscript_call_result_101552)
        
        # Assigning a Subscript to a Name (line 214):
        
        # Obtaining the type of the subscript
        int_101553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 12), 'int')
        
        # Call to _assert_warns(...): (line 214)
        # Processing the call arguments (line 214)
        # Getting the type of 'expected_warning' (line 214)
        expected_warning_101555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 36), 'expected_warning', False)
        # Getting the type of 'logm' (line 214)
        logm_101556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 54), 'logm', False)
        # Getting the type of 'M' (line 214)
        M_101557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 60), 'M', False)
        # Processing the call keyword arguments (line 214)
        # Getting the type of 'False' (line 214)
        False_101558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 68), 'False', False)
        keyword_101559 = False_101558
        kwargs_101560 = {'disp': keyword_101559}
        # Getting the type of '_assert_warns' (line 214)
        _assert_warns_101554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 22), '_assert_warns', False)
        # Calling _assert_warns(args, kwargs) (line 214)
        _assert_warns_call_result_101561 = invoke(stypy.reporting.localization.Localization(__file__, 214, 22), _assert_warns_101554, *[expected_warning_101555, logm_101556, M_101557], **kwargs_101560)
        
        # Obtaining the member '__getitem__' of a type (line 214)
        getitem___101562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 12), _assert_warns_call_result_101561, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 214)
        subscript_call_result_101563 = invoke(stypy.reporting.localization.Localization(__file__, 214, 12), getitem___101562, int_101553)
        
        # Assigning a type to the variable 'tuple_var_assignment_100554' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'tuple_var_assignment_100554', subscript_call_result_101563)
        
        # Assigning a Name to a Name (line 214):
        # Getting the type of 'tuple_var_assignment_100553' (line 214)
        tuple_var_assignment_100553_101564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'tuple_var_assignment_100553')
        # Assigning a type to the variable 'L' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'L', tuple_var_assignment_100553_101564)
        
        # Assigning a Name to a Name (line 214):
        # Getting the type of 'tuple_var_assignment_100554' (line 214)
        tuple_var_assignment_100554_101565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'tuple_var_assignment_100554')
        # Assigning a type to the variable 'info' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 15), 'info', tuple_var_assignment_100554_101565)
        
        # Assigning a Call to a Name (line 215):
        
        # Assigning a Call to a Name (line 215):
        
        # Call to expm(...): (line 215)
        # Processing the call arguments (line 215)
        # Getting the type of 'L' (line 215)
        L_101567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 21), 'L', False)
        # Processing the call keyword arguments (line 215)
        kwargs_101568 = {}
        # Getting the type of 'expm' (line 215)
        expm_101566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 16), 'expm', False)
        # Calling expm(args, kwargs) (line 215)
        expm_call_result_101569 = invoke(stypy.reporting.localization.Localization(__file__, 215, 16), expm_101566, *[L_101567], **kwargs_101568)
        
        # Assigning a type to the variable 'E' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 12), 'E', expm_call_result_101569)
        
        # Call to assert_allclose(...): (line 216)
        # Processing the call arguments (line 216)
        # Getting the type of 'E' (line 216)
        E_101571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 28), 'E', False)
        # Getting the type of 'M' (line 216)
        M_101572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 31), 'M', False)
        # Processing the call keyword arguments (line 216)
        float_101573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 216, 39), 'float')
        keyword_101574 = float_101573
        kwargs_101575 = {'atol': keyword_101574}
        # Getting the type of 'assert_allclose' (line 216)
        assert_allclose_101570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 216)
        assert_allclose_call_result_101576 = invoke(stypy.reporting.localization.Localization(__file__, 216, 12), assert_allclose_101570, *[E_101571, M_101572], **kwargs_101575)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_exactly_singular(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_exactly_singular' in the type store
        # Getting the type of 'stypy_return_type' (line 209)
        stypy_return_type_101577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101577)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_exactly_singular'
        return stypy_return_type_101577


    @norecursion
    def test_nearly_singular(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_nearly_singular'
        module_type_store = module_type_store.open_function_context('test_nearly_singular', 218, 4, False)
        # Assigning a type to the variable 'self' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestLogM.test_nearly_singular.__dict__.__setitem__('stypy_localization', localization)
        TestLogM.test_nearly_singular.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestLogM.test_nearly_singular.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestLogM.test_nearly_singular.__dict__.__setitem__('stypy_function_name', 'TestLogM.test_nearly_singular')
        TestLogM.test_nearly_singular.__dict__.__setitem__('stypy_param_names_list', [])
        TestLogM.test_nearly_singular.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestLogM.test_nearly_singular.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestLogM.test_nearly_singular.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestLogM.test_nearly_singular.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestLogM.test_nearly_singular.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestLogM.test_nearly_singular.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.test_nearly_singular', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_nearly_singular', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_nearly_singular(...)' code ##################

        
        # Assigning a Call to a Name (line 219):
        
        # Assigning a Call to a Name (line 219):
        
        # Call to array(...): (line 219)
        # Processing the call arguments (line 219)
        
        # Obtaining an instance of the builtin type 'list' (line 219)
        list_101580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 219)
        # Adding element type (line 219)
        
        # Obtaining an instance of the builtin type 'list' (line 219)
        list_101581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 219)
        # Adding element type (line 219)
        float_101582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 23), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 219, 22), list_101581, float_101582)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 219, 21), list_101580, list_101581)
        
        # Processing the call keyword arguments (line 219)
        kwargs_101583 = {}
        # Getting the type of 'np' (line 219)
        np_101578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 219)
        array_101579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 12), np_101578, 'array')
        # Calling array(args, kwargs) (line 219)
        array_call_result_101584 = invoke(stypy.reporting.localization.Localization(__file__, 219, 12), array_101579, *[list_101580], **kwargs_101583)
        
        # Assigning a type to the variable 'M' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 8), 'M', array_call_result_101584)
        
        # Assigning a Attribute to a Name (line 220):
        
        # Assigning a Attribute to a Name (line 220):
        # Getting the type of '_matfuncs_inv_ssq' (line 220)
        _matfuncs_inv_ssq_101585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 27), '_matfuncs_inv_ssq')
        # Obtaining the member 'LogmNearlySingularWarning' of a type (line 220)
        LogmNearlySingularWarning_101586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 27), _matfuncs_inv_ssq_101585, 'LogmNearlySingularWarning')
        # Assigning a type to the variable 'expected_warning' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 8), 'expected_warning', LogmNearlySingularWarning_101586)
        
        # Assigning a Call to a Tuple (line 221):
        
        # Assigning a Subscript to a Name (line 221):
        
        # Obtaining the type of the subscript
        int_101587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 8), 'int')
        
        # Call to _assert_warns(...): (line 221)
        # Processing the call arguments (line 221)
        # Getting the type of 'expected_warning' (line 221)
        expected_warning_101589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 32), 'expected_warning', False)
        # Getting the type of 'logm' (line 221)
        logm_101590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 50), 'logm', False)
        # Getting the type of 'M' (line 221)
        M_101591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 56), 'M', False)
        # Processing the call keyword arguments (line 221)
        # Getting the type of 'False' (line 221)
        False_101592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 64), 'False', False)
        keyword_101593 = False_101592
        kwargs_101594 = {'disp': keyword_101593}
        # Getting the type of '_assert_warns' (line 221)
        _assert_warns_101588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 18), '_assert_warns', False)
        # Calling _assert_warns(args, kwargs) (line 221)
        _assert_warns_call_result_101595 = invoke(stypy.reporting.localization.Localization(__file__, 221, 18), _assert_warns_101588, *[expected_warning_101589, logm_101590, M_101591], **kwargs_101594)
        
        # Obtaining the member '__getitem__' of a type (line 221)
        getitem___101596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 8), _assert_warns_call_result_101595, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 221)
        subscript_call_result_101597 = invoke(stypy.reporting.localization.Localization(__file__, 221, 8), getitem___101596, int_101587)
        
        # Assigning a type to the variable 'tuple_var_assignment_100555' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'tuple_var_assignment_100555', subscript_call_result_101597)
        
        # Assigning a Subscript to a Name (line 221):
        
        # Obtaining the type of the subscript
        int_101598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 8), 'int')
        
        # Call to _assert_warns(...): (line 221)
        # Processing the call arguments (line 221)
        # Getting the type of 'expected_warning' (line 221)
        expected_warning_101600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 32), 'expected_warning', False)
        # Getting the type of 'logm' (line 221)
        logm_101601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 50), 'logm', False)
        # Getting the type of 'M' (line 221)
        M_101602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 56), 'M', False)
        # Processing the call keyword arguments (line 221)
        # Getting the type of 'False' (line 221)
        False_101603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 64), 'False', False)
        keyword_101604 = False_101603
        kwargs_101605 = {'disp': keyword_101604}
        # Getting the type of '_assert_warns' (line 221)
        _assert_warns_101599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 18), '_assert_warns', False)
        # Calling _assert_warns(args, kwargs) (line 221)
        _assert_warns_call_result_101606 = invoke(stypy.reporting.localization.Localization(__file__, 221, 18), _assert_warns_101599, *[expected_warning_101600, logm_101601, M_101602], **kwargs_101605)
        
        # Obtaining the member '__getitem__' of a type (line 221)
        getitem___101607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 8), _assert_warns_call_result_101606, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 221)
        subscript_call_result_101608 = invoke(stypy.reporting.localization.Localization(__file__, 221, 8), getitem___101607, int_101598)
        
        # Assigning a type to the variable 'tuple_var_assignment_100556' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'tuple_var_assignment_100556', subscript_call_result_101608)
        
        # Assigning a Name to a Name (line 221):
        # Getting the type of 'tuple_var_assignment_100555' (line 221)
        tuple_var_assignment_100555_101609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'tuple_var_assignment_100555')
        # Assigning a type to the variable 'L' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'L', tuple_var_assignment_100555_101609)
        
        # Assigning a Name to a Name (line 221):
        # Getting the type of 'tuple_var_assignment_100556' (line 221)
        tuple_var_assignment_100556_101610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'tuple_var_assignment_100556')
        # Assigning a type to the variable 'info' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 11), 'info', tuple_var_assignment_100556_101610)
        
        # Assigning a Call to a Name (line 222):
        
        # Assigning a Call to a Name (line 222):
        
        # Call to expm(...): (line 222)
        # Processing the call arguments (line 222)
        # Getting the type of 'L' (line 222)
        L_101612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 17), 'L', False)
        # Processing the call keyword arguments (line 222)
        kwargs_101613 = {}
        # Getting the type of 'expm' (line 222)
        expm_101611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 12), 'expm', False)
        # Calling expm(args, kwargs) (line 222)
        expm_call_result_101614 = invoke(stypy.reporting.localization.Localization(__file__, 222, 12), expm_101611, *[L_101612], **kwargs_101613)
        
        # Assigning a type to the variable 'E' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 8), 'E', expm_call_result_101614)
        
        # Call to assert_allclose(...): (line 223)
        # Processing the call arguments (line 223)
        # Getting the type of 'E' (line 223)
        E_101616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 24), 'E', False)
        # Getting the type of 'M' (line 223)
        M_101617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 27), 'M', False)
        # Processing the call keyword arguments (line 223)
        float_101618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 35), 'float')
        keyword_101619 = float_101618
        kwargs_101620 = {'atol': keyword_101619}
        # Getting the type of 'assert_allclose' (line 223)
        assert_allclose_101615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 223)
        assert_allclose_call_result_101621 = invoke(stypy.reporting.localization.Localization(__file__, 223, 8), assert_allclose_101615, *[E_101616, M_101617], **kwargs_101620)
        
        
        # ################# End of 'test_nearly_singular(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_nearly_singular' in the type store
        # Getting the type of 'stypy_return_type' (line 218)
        stypy_return_type_101622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101622)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_nearly_singular'
        return stypy_return_type_101622


    @norecursion
    def test_opposite_sign_complex_eigenvalues(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_opposite_sign_complex_eigenvalues'
        module_type_store = module_type_store.open_function_context('test_opposite_sign_complex_eigenvalues', 225, 4, False)
        # Assigning a type to the variable 'self' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestLogM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_localization', localization)
        TestLogM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestLogM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestLogM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_function_name', 'TestLogM.test_opposite_sign_complex_eigenvalues')
        TestLogM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_param_names_list', [])
        TestLogM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestLogM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestLogM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestLogM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestLogM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestLogM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.test_opposite_sign_complex_eigenvalues', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_opposite_sign_complex_eigenvalues', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_opposite_sign_complex_eigenvalues(...)' code ##################

        
        # Assigning a List to a Name (line 227):
        
        # Assigning a List to a Name (line 227):
        
        # Obtaining an instance of the builtin type 'list' (line 227)
        list_101623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 227)
        # Adding element type (line 227)
        
        # Obtaining an instance of the builtin type 'list' (line 227)
        list_101624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 227)
        # Adding element type (line 227)
        int_101625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 14), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 13), list_101624, int_101625)
        # Adding element type (line 227)
        int_101626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 13), list_101624, int_101626)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 12), list_101623, list_101624)
        # Adding element type (line 227)
        
        # Obtaining an instance of the builtin type 'list' (line 227)
        list_101627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 227)
        # Adding element type (line 227)
        int_101628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 21), list_101627, int_101628)
        # Adding element type (line 227)
        int_101629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 21), list_101627, int_101629)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 12), list_101623, list_101627)
        
        # Assigning a type to the variable 'E' (line 227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 8), 'E', list_101623)
        
        # Assigning a List to a Name (line 228):
        
        # Assigning a List to a Name (line 228):
        
        # Obtaining an instance of the builtin type 'list' (line 228)
        list_101630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 228)
        # Adding element type (line 228)
        
        # Obtaining an instance of the builtin type 'list' (line 228)
        list_101631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 228)
        # Adding element type (line 228)
        int_101632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 14), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 228, 13), list_101631, int_101632)
        # Adding element type (line 228)
        # Getting the type of 'np' (line 228)
        np_101633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 17), 'np')
        # Obtaining the member 'pi' of a type (line 228)
        pi_101634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 17), np_101633, 'pi')
        float_101635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 23), 'float')
        # Applying the binary operator '*' (line 228)
        result_mul_101636 = python_operator(stypy.reporting.localization.Localization(__file__, 228, 17), '*', pi_101634, float_101635)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 228, 13), list_101631, result_mul_101636)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 228, 12), list_101630, list_101631)
        # Adding element type (line 228)
        
        # Obtaining an instance of the builtin type 'list' (line 228)
        list_101637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 228)
        # Adding element type (line 228)
        
        # Getting the type of 'np' (line 228)
        np_101638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 31), 'np')
        # Obtaining the member 'pi' of a type (line 228)
        pi_101639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 31), np_101638, 'pi')
        # Applying the 'usub' unary operator (line 228)
        result___neg___101640 = python_operator(stypy.reporting.localization.Localization(__file__, 228, 30), 'usub', pi_101639)
        
        float_101641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 37), 'float')
        # Applying the binary operator '*' (line 228)
        result_mul_101642 = python_operator(stypy.reporting.localization.Localization(__file__, 228, 30), '*', result___neg___101640, float_101641)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 228, 29), list_101637, result_mul_101642)
        # Adding element type (line 228)
        int_101643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 228, 29), list_101637, int_101643)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 228, 12), list_101630, list_101637)
        
        # Assigning a type to the variable 'L' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'L', list_101630)
        
        # Call to assert_allclose(...): (line 229)
        # Processing the call arguments (line 229)
        
        # Call to expm(...): (line 229)
        # Processing the call arguments (line 229)
        # Getting the type of 'L' (line 229)
        L_101646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 29), 'L', False)
        # Processing the call keyword arguments (line 229)
        kwargs_101647 = {}
        # Getting the type of 'expm' (line 229)
        expm_101645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 24), 'expm', False)
        # Calling expm(args, kwargs) (line 229)
        expm_call_result_101648 = invoke(stypy.reporting.localization.Localization(__file__, 229, 24), expm_101645, *[L_101646], **kwargs_101647)
        
        # Getting the type of 'E' (line 229)
        E_101649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 33), 'E', False)
        # Processing the call keyword arguments (line 229)
        float_101650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, 41), 'float')
        keyword_101651 = float_101650
        kwargs_101652 = {'atol': keyword_101651}
        # Getting the type of 'assert_allclose' (line 229)
        assert_allclose_101644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 229)
        assert_allclose_call_result_101653 = invoke(stypy.reporting.localization.Localization(__file__, 229, 8), assert_allclose_101644, *[expm_call_result_101648, E_101649], **kwargs_101652)
        
        
        # Call to assert_allclose(...): (line 230)
        # Processing the call arguments (line 230)
        
        # Call to logm(...): (line 230)
        # Processing the call arguments (line 230)
        # Getting the type of 'E' (line 230)
        E_101656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 29), 'E', False)
        # Processing the call keyword arguments (line 230)
        kwargs_101657 = {}
        # Getting the type of 'logm' (line 230)
        logm_101655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 24), 'logm', False)
        # Calling logm(args, kwargs) (line 230)
        logm_call_result_101658 = invoke(stypy.reporting.localization.Localization(__file__, 230, 24), logm_101655, *[E_101656], **kwargs_101657)
        
        # Getting the type of 'L' (line 230)
        L_101659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 33), 'L', False)
        # Processing the call keyword arguments (line 230)
        float_101660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 230, 41), 'float')
        keyword_101661 = float_101660
        kwargs_101662 = {'atol': keyword_101661}
        # Getting the type of 'assert_allclose' (line 230)
        assert_allclose_101654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 230)
        assert_allclose_call_result_101663 = invoke(stypy.reporting.localization.Localization(__file__, 230, 8), assert_allclose_101654, *[logm_call_result_101658, L_101659], **kwargs_101662)
        
        
        # Assigning a List to a Name (line 231):
        
        # Assigning a List to a Name (line 231):
        
        # Obtaining an instance of the builtin type 'list' (line 231)
        list_101664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 231)
        # Adding element type (line 231)
        
        # Obtaining an instance of the builtin type 'list' (line 231)
        list_101665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 231)
        # Adding element type (line 231)
        complex_101666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 14), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 231, 13), list_101665, complex_101666)
        # Adding element type (line 231)
        int_101667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 231, 13), list_101665, int_101667)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 231, 12), list_101664, list_101665)
        # Adding element type (line 231)
        
        # Obtaining an instance of the builtin type 'list' (line 231)
        list_101668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 231)
        # Adding element type (line 231)
        int_101669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 231, 22), list_101668, int_101669)
        # Adding element type (line 231)
        complex_101670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 26), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 231, 22), list_101668, complex_101670)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 231, 12), list_101664, list_101668)
        
        # Assigning a type to the variable 'E' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'E', list_101664)
        
        # Assigning a List to a Name (line 232):
        
        # Assigning a List to a Name (line 232):
        
        # Obtaining an instance of the builtin type 'list' (line 232)
        list_101671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 232)
        # Adding element type (line 232)
        
        # Obtaining an instance of the builtin type 'list' (line 232)
        list_101672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 232)
        # Adding element type (line 232)
        complex_101673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 14), 'complex')
        # Getting the type of 'np' (line 232)
        np_101674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 17), 'np')
        # Obtaining the member 'pi' of a type (line 232)
        pi_101675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 17), np_101674, 'pi')
        # Applying the binary operator '*' (line 232)
        result_mul_101676 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 14), '*', complex_101673, pi_101675)
        
        float_101677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 23), 'float')
        # Applying the binary operator '*' (line 232)
        result_mul_101678 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 22), '*', result_mul_101676, float_101677)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 13), list_101672, result_mul_101678)
        # Adding element type (line 232)
        int_101679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 28), 'int')
        # Getting the type of 'np' (line 232)
        np_101680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 30), 'np')
        # Obtaining the member 'pi' of a type (line 232)
        pi_101681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 30), np_101680, 'pi')
        # Applying the binary operator '*' (line 232)
        result_mul_101682 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 28), '*', int_101679, pi_101681)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 13), list_101672, result_mul_101682)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 12), list_101671, list_101672)
        # Adding element type (line 232)
        
        # Obtaining an instance of the builtin type 'list' (line 232)
        list_101683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 232)
        # Adding element type (line 232)
        int_101684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 38), list_101683, int_101684)
        # Adding element type (line 232)
        complex_101685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 42), 'complex')
        # Getting the type of 'np' (line 232)
        np_101686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 46), 'np')
        # Obtaining the member 'pi' of a type (line 232)
        pi_101687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 46), np_101686, 'pi')
        # Applying the binary operator '*' (line 232)
        result_mul_101688 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 42), '*', complex_101685, pi_101687)
        
        float_101689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 52), 'float')
        # Applying the binary operator '*' (line 232)
        result_mul_101690 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 51), '*', result_mul_101688, float_101689)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 38), list_101683, result_mul_101690)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 12), list_101671, list_101683)
        
        # Assigning a type to the variable 'L' (line 232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 8), 'L', list_101671)
        
        # Call to assert_allclose(...): (line 233)
        # Processing the call arguments (line 233)
        
        # Call to expm(...): (line 233)
        # Processing the call arguments (line 233)
        # Getting the type of 'L' (line 233)
        L_101693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 29), 'L', False)
        # Processing the call keyword arguments (line 233)
        kwargs_101694 = {}
        # Getting the type of 'expm' (line 233)
        expm_101692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 24), 'expm', False)
        # Calling expm(args, kwargs) (line 233)
        expm_call_result_101695 = invoke(stypy.reporting.localization.Localization(__file__, 233, 24), expm_101692, *[L_101693], **kwargs_101694)
        
        # Getting the type of 'E' (line 233)
        E_101696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 33), 'E', False)
        # Processing the call keyword arguments (line 233)
        float_101697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 233, 41), 'float')
        keyword_101698 = float_101697
        kwargs_101699 = {'atol': keyword_101698}
        # Getting the type of 'assert_allclose' (line 233)
        assert_allclose_101691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 233)
        assert_allclose_call_result_101700 = invoke(stypy.reporting.localization.Localization(__file__, 233, 8), assert_allclose_101691, *[expm_call_result_101695, E_101696], **kwargs_101699)
        
        
        # Call to assert_allclose(...): (line 234)
        # Processing the call arguments (line 234)
        
        # Call to logm(...): (line 234)
        # Processing the call arguments (line 234)
        # Getting the type of 'E' (line 234)
        E_101703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 29), 'E', False)
        # Processing the call keyword arguments (line 234)
        kwargs_101704 = {}
        # Getting the type of 'logm' (line 234)
        logm_101702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 24), 'logm', False)
        # Calling logm(args, kwargs) (line 234)
        logm_call_result_101705 = invoke(stypy.reporting.localization.Localization(__file__, 234, 24), logm_101702, *[E_101703], **kwargs_101704)
        
        # Getting the type of 'L' (line 234)
        L_101706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 33), 'L', False)
        # Processing the call keyword arguments (line 234)
        float_101707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 234, 41), 'float')
        keyword_101708 = float_101707
        kwargs_101709 = {'atol': keyword_101708}
        # Getting the type of 'assert_allclose' (line 234)
        assert_allclose_101701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 234)
        assert_allclose_call_result_101710 = invoke(stypy.reporting.localization.Localization(__file__, 234, 8), assert_allclose_101701, *[logm_call_result_101705, L_101706], **kwargs_101709)
        
        
        # Assigning a List to a Name (line 235):
        
        # Assigning a List to a Name (line 235):
        
        # Obtaining an instance of the builtin type 'list' (line 235)
        list_101711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 235)
        # Adding element type (line 235)
        
        # Obtaining an instance of the builtin type 'list' (line 235)
        list_101712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 235)
        # Adding element type (line 235)
        complex_101713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 14), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 235, 13), list_101712, complex_101713)
        # Adding element type (line 235)
        int_101714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 235, 13), list_101712, int_101714)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 235, 12), list_101711, list_101712)
        # Adding element type (line 235)
        
        # Obtaining an instance of the builtin type 'list' (line 235)
        list_101715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 235)
        # Adding element type (line 235)
        int_101716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 235, 22), list_101715, int_101716)
        # Adding element type (line 235)
        complex_101717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 26), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 235, 22), list_101715, complex_101717)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 235, 12), list_101711, list_101715)
        
        # Assigning a type to the variable 'E' (line 235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 8), 'E', list_101711)
        
        # Assigning a List to a Name (line 236):
        
        # Assigning a List to a Name (line 236):
        
        # Obtaining an instance of the builtin type 'list' (line 236)
        list_101718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 236)
        # Adding element type (line 236)
        
        # Obtaining an instance of the builtin type 'list' (line 236)
        list_101719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 236)
        # Adding element type (line 236)
        complex_101720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 14), 'complex')
        # Getting the type of 'np' (line 236)
        np_101721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 17), 'np')
        # Obtaining the member 'pi' of a type (line 236)
        pi_101722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 17), np_101721, 'pi')
        # Applying the binary operator '*' (line 236)
        result_mul_101723 = python_operator(stypy.reporting.localization.Localization(__file__, 236, 14), '*', complex_101720, pi_101722)
        
        float_101724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 23), 'float')
        # Applying the binary operator '*' (line 236)
        result_mul_101725 = python_operator(stypy.reporting.localization.Localization(__file__, 236, 22), '*', result_mul_101723, float_101724)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 236, 13), list_101719, result_mul_101725)
        # Adding element type (line 236)
        int_101726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 236, 13), list_101719, int_101726)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 236, 12), list_101718, list_101719)
        # Adding element type (line 236)
        
        # Obtaining an instance of the builtin type 'list' (line 236)
        list_101727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 236)
        # Adding element type (line 236)
        int_101728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 236, 32), list_101727, int_101728)
        # Adding element type (line 236)
        complex_101729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 36), 'complex')
        # Getting the type of 'np' (line 236)
        np_101730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 40), 'np')
        # Obtaining the member 'pi' of a type (line 236)
        pi_101731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 40), np_101730, 'pi')
        # Applying the binary operator '*' (line 236)
        result_mul_101732 = python_operator(stypy.reporting.localization.Localization(__file__, 236, 36), '*', complex_101729, pi_101731)
        
        float_101733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 46), 'float')
        # Applying the binary operator '*' (line 236)
        result_mul_101734 = python_operator(stypy.reporting.localization.Localization(__file__, 236, 45), '*', result_mul_101732, float_101733)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 236, 32), list_101727, result_mul_101734)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 236, 12), list_101718, list_101727)
        
        # Assigning a type to the variable 'L' (line 236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 8), 'L', list_101718)
        
        # Call to assert_allclose(...): (line 237)
        # Processing the call arguments (line 237)
        
        # Call to expm(...): (line 237)
        # Processing the call arguments (line 237)
        # Getting the type of 'L' (line 237)
        L_101737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 29), 'L', False)
        # Processing the call keyword arguments (line 237)
        kwargs_101738 = {}
        # Getting the type of 'expm' (line 237)
        expm_101736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 24), 'expm', False)
        # Calling expm(args, kwargs) (line 237)
        expm_call_result_101739 = invoke(stypy.reporting.localization.Localization(__file__, 237, 24), expm_101736, *[L_101737], **kwargs_101738)
        
        # Getting the type of 'E' (line 237)
        E_101740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 33), 'E', False)
        # Processing the call keyword arguments (line 237)
        float_101741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 41), 'float')
        keyword_101742 = float_101741
        kwargs_101743 = {'atol': keyword_101742}
        # Getting the type of 'assert_allclose' (line 237)
        assert_allclose_101735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 237)
        assert_allclose_call_result_101744 = invoke(stypy.reporting.localization.Localization(__file__, 237, 8), assert_allclose_101735, *[expm_call_result_101739, E_101740], **kwargs_101743)
        
        
        # Call to assert_allclose(...): (line 238)
        # Processing the call arguments (line 238)
        
        # Call to logm(...): (line 238)
        # Processing the call arguments (line 238)
        # Getting the type of 'E' (line 238)
        E_101747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 29), 'E', False)
        # Processing the call keyword arguments (line 238)
        kwargs_101748 = {}
        # Getting the type of 'logm' (line 238)
        logm_101746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 24), 'logm', False)
        # Calling logm(args, kwargs) (line 238)
        logm_call_result_101749 = invoke(stypy.reporting.localization.Localization(__file__, 238, 24), logm_101746, *[E_101747], **kwargs_101748)
        
        # Getting the type of 'L' (line 238)
        L_101750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 33), 'L', False)
        # Processing the call keyword arguments (line 238)
        float_101751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 41), 'float')
        keyword_101752 = float_101751
        kwargs_101753 = {'atol': keyword_101752}
        # Getting the type of 'assert_allclose' (line 238)
        assert_allclose_101745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 238)
        assert_allclose_call_result_101754 = invoke(stypy.reporting.localization.Localization(__file__, 238, 8), assert_allclose_101745, *[logm_call_result_101749, L_101750], **kwargs_101753)
        
        
        # ################# End of 'test_opposite_sign_complex_eigenvalues(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_opposite_sign_complex_eigenvalues' in the type store
        # Getting the type of 'stypy_return_type' (line 225)
        stypy_return_type_101755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101755)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_opposite_sign_complex_eigenvalues'
        return stypy_return_type_101755


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 95, 0, False)
        # Assigning a type to the variable 'self' (line 96)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestLogM.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'TestLogM' (line 95)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 0), 'TestLogM', TestLogM)
# Declaration of the 'TestSqrtM' class

class TestSqrtM(object, ):

    @norecursion
    def test_round_trip_random_float(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_round_trip_random_float'
        module_type_store = module_type_store.open_function_context('test_round_trip_random_float', 242, 4, False)
        # Assigning a type to the variable 'self' (line 243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSqrtM.test_round_trip_random_float.__dict__.__setitem__('stypy_localization', localization)
        TestSqrtM.test_round_trip_random_float.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSqrtM.test_round_trip_random_float.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSqrtM.test_round_trip_random_float.__dict__.__setitem__('stypy_function_name', 'TestSqrtM.test_round_trip_random_float')
        TestSqrtM.test_round_trip_random_float.__dict__.__setitem__('stypy_param_names_list', [])
        TestSqrtM.test_round_trip_random_float.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSqrtM.test_round_trip_random_float.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSqrtM.test_round_trip_random_float.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSqrtM.test_round_trip_random_float.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSqrtM.test_round_trip_random_float.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSqrtM.test_round_trip_random_float.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.test_round_trip_random_float', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_round_trip_random_float', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_round_trip_random_float(...)' code ##################

        
        # Call to seed(...): (line 243)
        # Processing the call arguments (line 243)
        int_101759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 243, 23), 'int')
        # Processing the call keyword arguments (line 243)
        kwargs_101760 = {}
        # Getting the type of 'np' (line 243)
        np_101756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 243)
        random_101757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 8), np_101756, 'random')
        # Obtaining the member 'seed' of a type (line 243)
        seed_101758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 8), random_101757, 'seed')
        # Calling seed(args, kwargs) (line 243)
        seed_call_result_101761 = invoke(stypy.reporting.localization.Localization(__file__, 243, 8), seed_101758, *[int_101759], **kwargs_101760)
        
        
        
        # Call to range(...): (line 244)
        # Processing the call arguments (line 244)
        int_101763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 23), 'int')
        int_101764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 26), 'int')
        # Processing the call keyword arguments (line 244)
        kwargs_101765 = {}
        # Getting the type of 'range' (line 244)
        range_101762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 17), 'range', False)
        # Calling range(args, kwargs) (line 244)
        range_call_result_101766 = invoke(stypy.reporting.localization.Localization(__file__, 244, 17), range_101762, *[int_101763, int_101764], **kwargs_101765)
        
        # Testing the type of a for loop iterable (line 244)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 244, 8), range_call_result_101766)
        # Getting the type of the for loop variable (line 244)
        for_loop_var_101767 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 244, 8), range_call_result_101766)
        # Assigning a type to the variable 'n' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'n', for_loop_var_101767)
        # SSA begins for a for statement (line 244)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 245):
        
        # Assigning a Call to a Name (line 245):
        
        # Call to randn(...): (line 245)
        # Processing the call arguments (line 245)
        # Getting the type of 'n' (line 245)
        n_101771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 41), 'n', False)
        # Getting the type of 'n' (line 245)
        n_101772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 44), 'n', False)
        # Processing the call keyword arguments (line 245)
        kwargs_101773 = {}
        # Getting the type of 'np' (line 245)
        np_101768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 25), 'np', False)
        # Obtaining the member 'random' of a type (line 245)
        random_101769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 25), np_101768, 'random')
        # Obtaining the member 'randn' of a type (line 245)
        randn_101770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 25), random_101769, 'randn')
        # Calling randn(args, kwargs) (line 245)
        randn_call_result_101774 = invoke(stypy.reporting.localization.Localization(__file__, 245, 25), randn_101770, *[n_101771, n_101772], **kwargs_101773)
        
        # Assigning a type to the variable 'M_unscaled' (line 245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 12), 'M_unscaled', randn_call_result_101774)
        
        
        # Call to logspace(...): (line 246)
        # Processing the call arguments (line 246)
        int_101777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 37), 'int')
        int_101778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 41), 'int')
        int_101779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 44), 'int')
        # Processing the call keyword arguments (line 246)
        kwargs_101780 = {}
        # Getting the type of 'np' (line 246)
        np_101775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 25), 'np', False)
        # Obtaining the member 'logspace' of a type (line 246)
        logspace_101776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 25), np_101775, 'logspace')
        # Calling logspace(args, kwargs) (line 246)
        logspace_call_result_101781 = invoke(stypy.reporting.localization.Localization(__file__, 246, 25), logspace_101776, *[int_101777, int_101778, int_101779], **kwargs_101780)
        
        # Testing the type of a for loop iterable (line 246)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 246, 12), logspace_call_result_101781)
        # Getting the type of the for loop variable (line 246)
        for_loop_var_101782 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 246, 12), logspace_call_result_101781)
        # Assigning a type to the variable 'scale' (line 246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 246, 12), 'scale', for_loop_var_101782)
        # SSA begins for a for statement (line 246)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 247):
        
        # Assigning a BinOp to a Name (line 247):
        # Getting the type of 'M_unscaled' (line 247)
        M_unscaled_101783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 20), 'M_unscaled')
        # Getting the type of 'scale' (line 247)
        scale_101784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 33), 'scale')
        # Applying the binary operator '*' (line 247)
        result_mul_101785 = python_operator(stypy.reporting.localization.Localization(__file__, 247, 20), '*', M_unscaled_101783, scale_101784)
        
        # Assigning a type to the variable 'M' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 16), 'M', result_mul_101785)
        
        # Assigning a Call to a Tuple (line 248):
        
        # Assigning a Subscript to a Name (line 248):
        
        # Obtaining the type of the subscript
        int_101786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 16), 'int')
        
        # Call to sqrtm(...): (line 248)
        # Processing the call arguments (line 248)
        # Getting the type of 'M' (line 248)
        M_101788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 38), 'M', False)
        # Processing the call keyword arguments (line 248)
        # Getting the type of 'False' (line 248)
        False_101789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 46), 'False', False)
        keyword_101790 = False_101789
        kwargs_101791 = {'disp': keyword_101790}
        # Getting the type of 'sqrtm' (line 248)
        sqrtm_101787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 32), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 248)
        sqrtm_call_result_101792 = invoke(stypy.reporting.localization.Localization(__file__, 248, 32), sqrtm_101787, *[M_101788], **kwargs_101791)
        
        # Obtaining the member '__getitem__' of a type (line 248)
        getitem___101793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 16), sqrtm_call_result_101792, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 248)
        subscript_call_result_101794 = invoke(stypy.reporting.localization.Localization(__file__, 248, 16), getitem___101793, int_101786)
        
        # Assigning a type to the variable 'tuple_var_assignment_100557' (line 248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'tuple_var_assignment_100557', subscript_call_result_101794)
        
        # Assigning a Subscript to a Name (line 248):
        
        # Obtaining the type of the subscript
        int_101795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 16), 'int')
        
        # Call to sqrtm(...): (line 248)
        # Processing the call arguments (line 248)
        # Getting the type of 'M' (line 248)
        M_101797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 38), 'M', False)
        # Processing the call keyword arguments (line 248)
        # Getting the type of 'False' (line 248)
        False_101798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 46), 'False', False)
        keyword_101799 = False_101798
        kwargs_101800 = {'disp': keyword_101799}
        # Getting the type of 'sqrtm' (line 248)
        sqrtm_101796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 32), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 248)
        sqrtm_call_result_101801 = invoke(stypy.reporting.localization.Localization(__file__, 248, 32), sqrtm_101796, *[M_101797], **kwargs_101800)
        
        # Obtaining the member '__getitem__' of a type (line 248)
        getitem___101802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 16), sqrtm_call_result_101801, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 248)
        subscript_call_result_101803 = invoke(stypy.reporting.localization.Localization(__file__, 248, 16), getitem___101802, int_101795)
        
        # Assigning a type to the variable 'tuple_var_assignment_100558' (line 248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'tuple_var_assignment_100558', subscript_call_result_101803)
        
        # Assigning a Name to a Name (line 248):
        # Getting the type of 'tuple_var_assignment_100557' (line 248)
        tuple_var_assignment_100557_101804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'tuple_var_assignment_100557')
        # Assigning a type to the variable 'M_sqrtm' (line 248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'M_sqrtm', tuple_var_assignment_100557_101804)
        
        # Assigning a Name to a Name (line 248):
        # Getting the type of 'tuple_var_assignment_100558' (line 248)
        tuple_var_assignment_100558_101805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'tuple_var_assignment_100558')
        # Assigning a type to the variable 'info' (line 248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 25), 'info', tuple_var_assignment_100558_101805)
        
        # Assigning a Call to a Name (line 249):
        
        # Assigning a Call to a Name (line 249):
        
        # Call to dot(...): (line 249)
        # Processing the call arguments (line 249)
        # Getting the type of 'M_sqrtm' (line 249)
        M_sqrtm_101808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 49), 'M_sqrtm', False)
        # Processing the call keyword arguments (line 249)
        kwargs_101809 = {}
        # Getting the type of 'M_sqrtm' (line 249)
        M_sqrtm_101806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 37), 'M_sqrtm', False)
        # Obtaining the member 'dot' of a type (line 249)
        dot_101807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 37), M_sqrtm_101806, 'dot')
        # Calling dot(args, kwargs) (line 249)
        dot_call_result_101810 = invoke(stypy.reporting.localization.Localization(__file__, 249, 37), dot_101807, *[M_sqrtm_101808], **kwargs_101809)
        
        # Assigning a type to the variable 'M_sqrtm_round_trip' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 16), 'M_sqrtm_round_trip', dot_call_result_101810)
        
        # Call to assert_allclose(...): (line 250)
        # Processing the call arguments (line 250)
        # Getting the type of 'M_sqrtm_round_trip' (line 250)
        M_sqrtm_round_trip_101812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 32), 'M_sqrtm_round_trip', False)
        # Getting the type of 'M' (line 250)
        M_101813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 52), 'M', False)
        # Processing the call keyword arguments (line 250)
        kwargs_101814 = {}
        # Getting the type of 'assert_allclose' (line 250)
        assert_allclose_101811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 16), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 250)
        assert_allclose_call_result_101815 = invoke(stypy.reporting.localization.Localization(__file__, 250, 16), assert_allclose_101811, *[M_sqrtm_round_trip_101812, M_101813], **kwargs_101814)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_round_trip_random_float(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_round_trip_random_float' in the type store
        # Getting the type of 'stypy_return_type' (line 242)
        stypy_return_type_101816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101816)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_round_trip_random_float'
        return stypy_return_type_101816


    @norecursion
    def test_round_trip_random_complex(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_round_trip_random_complex'
        module_type_store = module_type_store.open_function_context('test_round_trip_random_complex', 252, 4, False)
        # Assigning a type to the variable 'self' (line 253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSqrtM.test_round_trip_random_complex.__dict__.__setitem__('stypy_localization', localization)
        TestSqrtM.test_round_trip_random_complex.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSqrtM.test_round_trip_random_complex.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSqrtM.test_round_trip_random_complex.__dict__.__setitem__('stypy_function_name', 'TestSqrtM.test_round_trip_random_complex')
        TestSqrtM.test_round_trip_random_complex.__dict__.__setitem__('stypy_param_names_list', [])
        TestSqrtM.test_round_trip_random_complex.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSqrtM.test_round_trip_random_complex.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSqrtM.test_round_trip_random_complex.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSqrtM.test_round_trip_random_complex.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSqrtM.test_round_trip_random_complex.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSqrtM.test_round_trip_random_complex.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.test_round_trip_random_complex', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_round_trip_random_complex', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_round_trip_random_complex(...)' code ##################

        
        # Call to seed(...): (line 253)
        # Processing the call arguments (line 253)
        int_101820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 23), 'int')
        # Processing the call keyword arguments (line 253)
        kwargs_101821 = {}
        # Getting the type of 'np' (line 253)
        np_101817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 253)
        random_101818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 8), np_101817, 'random')
        # Obtaining the member 'seed' of a type (line 253)
        seed_101819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 8), random_101818, 'seed')
        # Calling seed(args, kwargs) (line 253)
        seed_call_result_101822 = invoke(stypy.reporting.localization.Localization(__file__, 253, 8), seed_101819, *[int_101820], **kwargs_101821)
        
        
        
        # Call to range(...): (line 254)
        # Processing the call arguments (line 254)
        int_101824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 23), 'int')
        int_101825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 26), 'int')
        # Processing the call keyword arguments (line 254)
        kwargs_101826 = {}
        # Getting the type of 'range' (line 254)
        range_101823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 17), 'range', False)
        # Calling range(args, kwargs) (line 254)
        range_call_result_101827 = invoke(stypy.reporting.localization.Localization(__file__, 254, 17), range_101823, *[int_101824, int_101825], **kwargs_101826)
        
        # Testing the type of a for loop iterable (line 254)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 254, 8), range_call_result_101827)
        # Getting the type of the for loop variable (line 254)
        for_loop_var_101828 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 254, 8), range_call_result_101827)
        # Assigning a type to the variable 'n' (line 254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'n', for_loop_var_101828)
        # SSA begins for a for statement (line 254)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 255):
        
        # Assigning a BinOp to a Name (line 255):
        
        # Call to randn(...): (line 255)
        # Processing the call arguments (line 255)
        # Getting the type of 'n' (line 255)
        n_101832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 41), 'n', False)
        # Getting the type of 'n' (line 255)
        n_101833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 44), 'n', False)
        # Processing the call keyword arguments (line 255)
        kwargs_101834 = {}
        # Getting the type of 'np' (line 255)
        np_101829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 25), 'np', False)
        # Obtaining the member 'random' of a type (line 255)
        random_101830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 25), np_101829, 'random')
        # Obtaining the member 'randn' of a type (line 255)
        randn_101831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 25), random_101830, 'randn')
        # Calling randn(args, kwargs) (line 255)
        randn_call_result_101835 = invoke(stypy.reporting.localization.Localization(__file__, 255, 25), randn_101831, *[n_101832, n_101833], **kwargs_101834)
        
        complex_101836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 49), 'complex')
        
        # Call to randn(...): (line 255)
        # Processing the call arguments (line 255)
        # Getting the type of 'n' (line 255)
        n_101840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 70), 'n', False)
        # Getting the type of 'n' (line 255)
        n_101841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 73), 'n', False)
        # Processing the call keyword arguments (line 255)
        kwargs_101842 = {}
        # Getting the type of 'np' (line 255)
        np_101837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 54), 'np', False)
        # Obtaining the member 'random' of a type (line 255)
        random_101838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 54), np_101837, 'random')
        # Obtaining the member 'randn' of a type (line 255)
        randn_101839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 54), random_101838, 'randn')
        # Calling randn(args, kwargs) (line 255)
        randn_call_result_101843 = invoke(stypy.reporting.localization.Localization(__file__, 255, 54), randn_101839, *[n_101840, n_101841], **kwargs_101842)
        
        # Applying the binary operator '*' (line 255)
        result_mul_101844 = python_operator(stypy.reporting.localization.Localization(__file__, 255, 49), '*', complex_101836, randn_call_result_101843)
        
        # Applying the binary operator '+' (line 255)
        result_add_101845 = python_operator(stypy.reporting.localization.Localization(__file__, 255, 25), '+', randn_call_result_101835, result_mul_101844)
        
        # Assigning a type to the variable 'M_unscaled' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 12), 'M_unscaled', result_add_101845)
        
        
        # Call to logspace(...): (line 256)
        # Processing the call arguments (line 256)
        int_101848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 37), 'int')
        int_101849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 41), 'int')
        int_101850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 44), 'int')
        # Processing the call keyword arguments (line 256)
        kwargs_101851 = {}
        # Getting the type of 'np' (line 256)
        np_101846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 25), 'np', False)
        # Obtaining the member 'logspace' of a type (line 256)
        logspace_101847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 25), np_101846, 'logspace')
        # Calling logspace(args, kwargs) (line 256)
        logspace_call_result_101852 = invoke(stypy.reporting.localization.Localization(__file__, 256, 25), logspace_101847, *[int_101848, int_101849, int_101850], **kwargs_101851)
        
        # Testing the type of a for loop iterable (line 256)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 256, 12), logspace_call_result_101852)
        # Getting the type of the for loop variable (line 256)
        for_loop_var_101853 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 256, 12), logspace_call_result_101852)
        # Assigning a type to the variable 'scale' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 12), 'scale', for_loop_var_101853)
        # SSA begins for a for statement (line 256)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 257):
        
        # Assigning a BinOp to a Name (line 257):
        # Getting the type of 'M_unscaled' (line 257)
        M_unscaled_101854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 20), 'M_unscaled')
        # Getting the type of 'scale' (line 257)
        scale_101855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 33), 'scale')
        # Applying the binary operator '*' (line 257)
        result_mul_101856 = python_operator(stypy.reporting.localization.Localization(__file__, 257, 20), '*', M_unscaled_101854, scale_101855)
        
        # Assigning a type to the variable 'M' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 16), 'M', result_mul_101856)
        
        # Assigning a Call to a Tuple (line 258):
        
        # Assigning a Subscript to a Name (line 258):
        
        # Obtaining the type of the subscript
        int_101857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 16), 'int')
        
        # Call to sqrtm(...): (line 258)
        # Processing the call arguments (line 258)
        # Getting the type of 'M' (line 258)
        M_101859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 38), 'M', False)
        # Processing the call keyword arguments (line 258)
        # Getting the type of 'False' (line 258)
        False_101860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 46), 'False', False)
        keyword_101861 = False_101860
        kwargs_101862 = {'disp': keyword_101861}
        # Getting the type of 'sqrtm' (line 258)
        sqrtm_101858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 32), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 258)
        sqrtm_call_result_101863 = invoke(stypy.reporting.localization.Localization(__file__, 258, 32), sqrtm_101858, *[M_101859], **kwargs_101862)
        
        # Obtaining the member '__getitem__' of a type (line 258)
        getitem___101864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 16), sqrtm_call_result_101863, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 258)
        subscript_call_result_101865 = invoke(stypy.reporting.localization.Localization(__file__, 258, 16), getitem___101864, int_101857)
        
        # Assigning a type to the variable 'tuple_var_assignment_100559' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 16), 'tuple_var_assignment_100559', subscript_call_result_101865)
        
        # Assigning a Subscript to a Name (line 258):
        
        # Obtaining the type of the subscript
        int_101866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 16), 'int')
        
        # Call to sqrtm(...): (line 258)
        # Processing the call arguments (line 258)
        # Getting the type of 'M' (line 258)
        M_101868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 38), 'M', False)
        # Processing the call keyword arguments (line 258)
        # Getting the type of 'False' (line 258)
        False_101869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 46), 'False', False)
        keyword_101870 = False_101869
        kwargs_101871 = {'disp': keyword_101870}
        # Getting the type of 'sqrtm' (line 258)
        sqrtm_101867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 32), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 258)
        sqrtm_call_result_101872 = invoke(stypy.reporting.localization.Localization(__file__, 258, 32), sqrtm_101867, *[M_101868], **kwargs_101871)
        
        # Obtaining the member '__getitem__' of a type (line 258)
        getitem___101873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 16), sqrtm_call_result_101872, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 258)
        subscript_call_result_101874 = invoke(stypy.reporting.localization.Localization(__file__, 258, 16), getitem___101873, int_101866)
        
        # Assigning a type to the variable 'tuple_var_assignment_100560' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 16), 'tuple_var_assignment_100560', subscript_call_result_101874)
        
        # Assigning a Name to a Name (line 258):
        # Getting the type of 'tuple_var_assignment_100559' (line 258)
        tuple_var_assignment_100559_101875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 16), 'tuple_var_assignment_100559')
        # Assigning a type to the variable 'M_sqrtm' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 16), 'M_sqrtm', tuple_var_assignment_100559_101875)
        
        # Assigning a Name to a Name (line 258):
        # Getting the type of 'tuple_var_assignment_100560' (line 258)
        tuple_var_assignment_100560_101876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 16), 'tuple_var_assignment_100560')
        # Assigning a type to the variable 'info' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 25), 'info', tuple_var_assignment_100560_101876)
        
        # Assigning a Call to a Name (line 259):
        
        # Assigning a Call to a Name (line 259):
        
        # Call to dot(...): (line 259)
        # Processing the call arguments (line 259)
        # Getting the type of 'M_sqrtm' (line 259)
        M_sqrtm_101879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 49), 'M_sqrtm', False)
        # Processing the call keyword arguments (line 259)
        kwargs_101880 = {}
        # Getting the type of 'M_sqrtm' (line 259)
        M_sqrtm_101877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 37), 'M_sqrtm', False)
        # Obtaining the member 'dot' of a type (line 259)
        dot_101878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 37), M_sqrtm_101877, 'dot')
        # Calling dot(args, kwargs) (line 259)
        dot_call_result_101881 = invoke(stypy.reporting.localization.Localization(__file__, 259, 37), dot_101878, *[M_sqrtm_101879], **kwargs_101880)
        
        # Assigning a type to the variable 'M_sqrtm_round_trip' (line 259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 16), 'M_sqrtm_round_trip', dot_call_result_101881)
        
        # Call to assert_allclose(...): (line 260)
        # Processing the call arguments (line 260)
        # Getting the type of 'M_sqrtm_round_trip' (line 260)
        M_sqrtm_round_trip_101883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 32), 'M_sqrtm_round_trip', False)
        # Getting the type of 'M' (line 260)
        M_101884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 52), 'M', False)
        # Processing the call keyword arguments (line 260)
        kwargs_101885 = {}
        # Getting the type of 'assert_allclose' (line 260)
        assert_allclose_101882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 16), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 260)
        assert_allclose_call_result_101886 = invoke(stypy.reporting.localization.Localization(__file__, 260, 16), assert_allclose_101882, *[M_sqrtm_round_trip_101883, M_101884], **kwargs_101885)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_round_trip_random_complex(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_round_trip_random_complex' in the type store
        # Getting the type of 'stypy_return_type' (line 252)
        stypy_return_type_101887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101887)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_round_trip_random_complex'
        return stypy_return_type_101887


    @norecursion
    def test_bad(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_bad'
        module_type_store = module_type_store.open_function_context('test_bad', 262, 4, False)
        # Assigning a type to the variable 'self' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSqrtM.test_bad.__dict__.__setitem__('stypy_localization', localization)
        TestSqrtM.test_bad.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSqrtM.test_bad.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSqrtM.test_bad.__dict__.__setitem__('stypy_function_name', 'TestSqrtM.test_bad')
        TestSqrtM.test_bad.__dict__.__setitem__('stypy_param_names_list', [])
        TestSqrtM.test_bad.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSqrtM.test_bad.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSqrtM.test_bad.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSqrtM.test_bad.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSqrtM.test_bad.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSqrtM.test_bad.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.test_bad', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_bad', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_bad(...)' code ##################

        
        # Assigning a BinOp to a Name (line 264):
        
        # Assigning a BinOp to a Name (line 264):
        int_101888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 12), 'int')
        int_101889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 15), 'int')
        # Applying the binary operator '**' (line 264)
        result_pow_101890 = python_operator(stypy.reporting.localization.Localization(__file__, 264, 12), '**', int_101888, int_101889)
        
        # Assigning a type to the variable 'e' (line 264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'e', result_pow_101890)
        
        # Assigning a Call to a Name (line 265):
        
        # Assigning a Call to a Name (line 265):
        
        # Call to sqrt(...): (line 265)
        # Processing the call arguments (line 265)
        # Getting the type of 'e' (line 265)
        e_101892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 18), 'e', False)
        # Processing the call keyword arguments (line 265)
        kwargs_101893 = {}
        # Getting the type of 'sqrt' (line 265)
        sqrt_101891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 13), 'sqrt', False)
        # Calling sqrt(args, kwargs) (line 265)
        sqrt_call_result_101894 = invoke(stypy.reporting.localization.Localization(__file__, 265, 13), sqrt_101891, *[e_101892], **kwargs_101893)
        
        # Assigning a type to the variable 'se' (line 265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 8), 'se', sqrt_call_result_101894)
        
        # Assigning a Call to a Name (line 266):
        
        # Assigning a Call to a Name (line 266):
        
        # Call to array(...): (line 266)
        # Processing the call arguments (line 266)
        
        # Obtaining an instance of the builtin type 'list' (line 266)
        list_101896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 266)
        # Adding element type (line 266)
        
        # Obtaining an instance of the builtin type 'list' (line 266)
        list_101897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 266)
        # Adding element type (line 266)
        float_101898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 19), list_101897, float_101898)
        # Adding element type (line 266)
        int_101899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 19), list_101897, int_101899)
        # Adding element type (line 266)
        int_101900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 19), list_101897, int_101900)
        # Adding element type (line 266)
        int_101901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 19), list_101897, int_101901)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 18), list_101896, list_101897)
        # Adding element type (line 266)
        
        # Obtaining an instance of the builtin type 'list' (line 267)
        list_101902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 267)
        # Adding element type (line 267)
        int_101903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 267, 19), list_101902, int_101903)
        # Adding element type (line 267)
        # Getting the type of 'e' (line 267)
        e_101904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 22), 'e', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 267, 19), list_101902, e_101904)
        # Adding element type (line 267)
        int_101905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 267, 19), list_101902, int_101905)
        # Adding element type (line 267)
        int_101906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 267, 19), list_101902, int_101906)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 18), list_101896, list_101902)
        # Adding element type (line 266)
        
        # Obtaining an instance of the builtin type 'list' (line 268)
        list_101907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 268)
        # Adding element type (line 268)
        int_101908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 268, 19), list_101907, int_101908)
        # Adding element type (line 268)
        int_101909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 268, 19), list_101907, int_101909)
        # Adding element type (line 268)
        # Getting the type of 'e' (line 268)
        e_101910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 24), 'e', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 268, 19), list_101907, e_101910)
        # Adding element type (line 268)
        int_101911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 268, 19), list_101907, int_101911)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 18), list_101896, list_101907)
        # Adding element type (line 266)
        
        # Obtaining an instance of the builtin type 'list' (line 269)
        list_101912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 269)
        # Adding element type (line 269)
        int_101913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 19), list_101912, int_101913)
        # Adding element type (line 269)
        int_101914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 19), list_101912, int_101914)
        # Adding element type (line 269)
        int_101915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 19), list_101912, int_101915)
        # Adding element type (line 269)
        int_101916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 19), list_101912, int_101916)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 18), list_101896, list_101912)
        
        # Processing the call keyword arguments (line 266)
        kwargs_101917 = {}
        # Getting the type of 'array' (line 266)
        array_101895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 12), 'array', False)
        # Calling array(args, kwargs) (line 266)
        array_call_result_101918 = invoke(stypy.reporting.localization.Localization(__file__, 266, 12), array_101895, *[list_101896], **kwargs_101917)
        
        # Assigning a type to the variable 'a' (line 266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 8), 'a', array_call_result_101918)
        
        # Assigning a Call to a Name (line 270):
        
        # Assigning a Call to a Name (line 270):
        
        # Call to array(...): (line 270)
        # Processing the call arguments (line 270)
        
        # Obtaining an instance of the builtin type 'list' (line 270)
        list_101920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 270)
        # Adding element type (line 270)
        
        # Obtaining an instance of the builtin type 'list' (line 270)
        list_101921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 270)
        # Adding element type (line 270)
        int_101922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 20), list_101921, int_101922)
        # Adding element type (line 270)
        int_101923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 20), list_101921, int_101923)
        # Adding element type (line 270)
        int_101924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 20), list_101921, int_101924)
        # Adding element type (line 270)
        float_101925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 27), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 20), list_101921, float_101925)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 19), list_101920, list_101921)
        # Adding element type (line 270)
        
        # Obtaining an instance of the builtin type 'list' (line 271)
        list_101926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 271)
        # Adding element type (line 271)
        int_101927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 20), list_101926, int_101927)
        # Adding element type (line 271)
        # Getting the type of 'se' (line 271)
        se_101928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 23), 'se', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 20), list_101926, se_101928)
        # Adding element type (line 271)
        int_101929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 20), list_101926, int_101929)
        # Adding element type (line 271)
        int_101930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 20), list_101926, int_101930)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 19), list_101920, list_101926)
        # Adding element type (line 270)
        
        # Obtaining an instance of the builtin type 'list' (line 272)
        list_101931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 272)
        # Adding element type (line 272)
        int_101932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 272, 20), list_101931, int_101932)
        # Adding element type (line 272)
        int_101933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 272, 20), list_101931, int_101933)
        # Adding element type (line 272)
        # Getting the type of 'se' (line 272)
        se_101934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 25), 'se', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 272, 20), list_101931, se_101934)
        # Adding element type (line 272)
        int_101935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 272, 20), list_101931, int_101935)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 19), list_101920, list_101931)
        # Adding element type (line 270)
        
        # Obtaining an instance of the builtin type 'list' (line 273)
        list_101936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 273)
        # Adding element type (line 273)
        int_101937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 273, 20), list_101936, int_101937)
        # Adding element type (line 273)
        int_101938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 273, 20), list_101936, int_101938)
        # Adding element type (line 273)
        int_101939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 273, 20), list_101936, int_101939)
        # Adding element type (line 273)
        int_101940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 273, 20), list_101936, int_101940)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 270, 19), list_101920, list_101936)
        
        # Processing the call keyword arguments (line 270)
        kwargs_101941 = {}
        # Getting the type of 'array' (line 270)
        array_101919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 13), 'array', False)
        # Calling array(args, kwargs) (line 270)
        array_call_result_101942 = invoke(stypy.reporting.localization.Localization(__file__, 270, 13), array_101919, *[list_101920], **kwargs_101941)
        
        # Assigning a type to the variable 'sa' (line 270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 8), 'sa', array_call_result_101942)
        
        # Assigning a Subscript to a Name (line 274):
        
        # Assigning a Subscript to a Name (line 274):
        
        # Obtaining the type of the subscript
        int_101943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 20), 'int')
        # Getting the type of 'a' (line 274)
        a_101944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 12), 'a')
        # Obtaining the member 'shape' of a type (line 274)
        shape_101945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 12), a_101944, 'shape')
        # Obtaining the member '__getitem__' of a type (line 274)
        getitem___101946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 12), shape_101945, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 274)
        subscript_call_result_101947 = invoke(stypy.reporting.localization.Localization(__file__, 274, 12), getitem___101946, int_101943)
        
        # Assigning a type to the variable 'n' (line 274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 8), 'n', subscript_call_result_101947)
        
        # Call to assert_array_almost_equal(...): (line 275)
        # Processing the call arguments (line 275)
        
        # Call to dot(...): (line 275)
        # Processing the call arguments (line 275)
        # Getting the type of 'sa' (line 275)
        sa_101950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 38), 'sa', False)
        # Getting the type of 'sa' (line 275)
        sa_101951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 41), 'sa', False)
        # Processing the call keyword arguments (line 275)
        kwargs_101952 = {}
        # Getting the type of 'dot' (line 275)
        dot_101949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 34), 'dot', False)
        # Calling dot(args, kwargs) (line 275)
        dot_call_result_101953 = invoke(stypy.reporting.localization.Localization(__file__, 275, 34), dot_101949, *[sa_101950, sa_101951], **kwargs_101952)
        
        # Getting the type of 'a' (line 275)
        a_101954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 45), 'a', False)
        # Processing the call keyword arguments (line 275)
        kwargs_101955 = {}
        # Getting the type of 'assert_array_almost_equal' (line 275)
        assert_array_almost_equal_101948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 8), 'assert_array_almost_equal', False)
        # Calling assert_array_almost_equal(args, kwargs) (line 275)
        assert_array_almost_equal_call_result_101956 = invoke(stypy.reporting.localization.Localization(__file__, 275, 8), assert_array_almost_equal_101948, *[dot_call_result_101953, a_101954], **kwargs_101955)
        
        
        # Assigning a Subscript to a Name (line 277):
        
        # Assigning a Subscript to a Name (line 277):
        
        # Obtaining the type of the subscript
        int_101957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 48), 'int')
        
        # Call to sqrtm(...): (line 277)
        # Processing the call arguments (line 277)
        # Getting the type of 'a' (line 277)
        a_101959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 20), 'a', False)
        # Processing the call keyword arguments (line 277)
        # Getting the type of 'False' (line 277)
        False_101960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 28), 'False', False)
        keyword_101961 = False_101960
        # Getting the type of 'n' (line 277)
        n_101962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 45), 'n', False)
        keyword_101963 = n_101962
        kwargs_101964 = {'disp': keyword_101961, 'blocksize': keyword_101963}
        # Getting the type of 'sqrtm' (line 277)
        sqrtm_101958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 14), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 277)
        sqrtm_call_result_101965 = invoke(stypy.reporting.localization.Localization(__file__, 277, 14), sqrtm_101958, *[a_101959], **kwargs_101964)
        
        # Obtaining the member '__getitem__' of a type (line 277)
        getitem___101966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 14), sqrtm_call_result_101965, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 277)
        subscript_call_result_101967 = invoke(stypy.reporting.localization.Localization(__file__, 277, 14), getitem___101966, int_101957)
        
        # Assigning a type to the variable 'esa' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 8), 'esa', subscript_call_result_101967)
        
        # Call to assert_array_almost_equal(...): (line 278)
        # Processing the call arguments (line 278)
        
        # Call to dot(...): (line 278)
        # Processing the call arguments (line 278)
        # Getting the type of 'esa' (line 278)
        esa_101970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 38), 'esa', False)
        # Getting the type of 'esa' (line 278)
        esa_101971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 42), 'esa', False)
        # Processing the call keyword arguments (line 278)
        kwargs_101972 = {}
        # Getting the type of 'dot' (line 278)
        dot_101969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 34), 'dot', False)
        # Calling dot(args, kwargs) (line 278)
        dot_call_result_101973 = invoke(stypy.reporting.localization.Localization(__file__, 278, 34), dot_101969, *[esa_101970, esa_101971], **kwargs_101972)
        
        # Getting the type of 'a' (line 278)
        a_101974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 47), 'a', False)
        # Processing the call keyword arguments (line 278)
        kwargs_101975 = {}
        # Getting the type of 'assert_array_almost_equal' (line 278)
        assert_array_almost_equal_101968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), 'assert_array_almost_equal', False)
        # Calling assert_array_almost_equal(args, kwargs) (line 278)
        assert_array_almost_equal_call_result_101976 = invoke(stypy.reporting.localization.Localization(__file__, 278, 8), assert_array_almost_equal_101968, *[dot_call_result_101973, a_101974], **kwargs_101975)
        
        
        # Assigning a Subscript to a Name (line 280):
        
        # Assigning a Subscript to a Name (line 280):
        
        # Obtaining the type of the subscript
        int_101977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 48), 'int')
        
        # Call to sqrtm(...): (line 280)
        # Processing the call arguments (line 280)
        # Getting the type of 'a' (line 280)
        a_101979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 20), 'a', False)
        # Processing the call keyword arguments (line 280)
        # Getting the type of 'False' (line 280)
        False_101980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 28), 'False', False)
        keyword_101981 = False_101980
        int_101982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 45), 'int')
        keyword_101983 = int_101982
        kwargs_101984 = {'disp': keyword_101981, 'blocksize': keyword_101983}
        # Getting the type of 'sqrtm' (line 280)
        sqrtm_101978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 14), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 280)
        sqrtm_call_result_101985 = invoke(stypy.reporting.localization.Localization(__file__, 280, 14), sqrtm_101978, *[a_101979], **kwargs_101984)
        
        # Obtaining the member '__getitem__' of a type (line 280)
        getitem___101986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 14), sqrtm_call_result_101985, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 280)
        subscript_call_result_101987 = invoke(stypy.reporting.localization.Localization(__file__, 280, 14), getitem___101986, int_101977)
        
        # Assigning a type to the variable 'esa' (line 280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 8), 'esa', subscript_call_result_101987)
        
        # Call to assert_array_almost_equal(...): (line 281)
        # Processing the call arguments (line 281)
        
        # Call to dot(...): (line 281)
        # Processing the call arguments (line 281)
        # Getting the type of 'esa' (line 281)
        esa_101990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 38), 'esa', False)
        # Getting the type of 'esa' (line 281)
        esa_101991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 42), 'esa', False)
        # Processing the call keyword arguments (line 281)
        kwargs_101992 = {}
        # Getting the type of 'dot' (line 281)
        dot_101989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 34), 'dot', False)
        # Calling dot(args, kwargs) (line 281)
        dot_call_result_101993 = invoke(stypy.reporting.localization.Localization(__file__, 281, 34), dot_101989, *[esa_101990, esa_101991], **kwargs_101992)
        
        # Getting the type of 'a' (line 281)
        a_101994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 47), 'a', False)
        # Processing the call keyword arguments (line 281)
        kwargs_101995 = {}
        # Getting the type of 'assert_array_almost_equal' (line 281)
        assert_array_almost_equal_101988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 8), 'assert_array_almost_equal', False)
        # Calling assert_array_almost_equal(args, kwargs) (line 281)
        assert_array_almost_equal_call_result_101996 = invoke(stypy.reporting.localization.Localization(__file__, 281, 8), assert_array_almost_equal_101988, *[dot_call_result_101993, a_101994], **kwargs_101995)
        
        
        # ################# End of 'test_bad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_bad' in the type store
        # Getting the type of 'stypy_return_type' (line 262)
        stypy_return_type_101997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_101997)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_bad'
        return stypy_return_type_101997


    @norecursion
    def test_sqrtm_type_preservation_and_conversion(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_sqrtm_type_preservation_and_conversion'
        module_type_store = module_type_store.open_function_context('test_sqrtm_type_preservation_and_conversion', 283, 4, False)
        # Assigning a type to the variable 'self' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSqrtM.test_sqrtm_type_preservation_and_conversion.__dict__.__setitem__('stypy_localization', localization)
        TestSqrtM.test_sqrtm_type_preservation_and_conversion.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSqrtM.test_sqrtm_type_preservation_and_conversion.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSqrtM.test_sqrtm_type_preservation_and_conversion.__dict__.__setitem__('stypy_function_name', 'TestSqrtM.test_sqrtm_type_preservation_and_conversion')
        TestSqrtM.test_sqrtm_type_preservation_and_conversion.__dict__.__setitem__('stypy_param_names_list', [])
        TestSqrtM.test_sqrtm_type_preservation_and_conversion.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSqrtM.test_sqrtm_type_preservation_and_conversion.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSqrtM.test_sqrtm_type_preservation_and_conversion.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSqrtM.test_sqrtm_type_preservation_and_conversion.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSqrtM.test_sqrtm_type_preservation_and_conversion.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSqrtM.test_sqrtm_type_preservation_and_conversion.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.test_sqrtm_type_preservation_and_conversion', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_sqrtm_type_preservation_and_conversion', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_sqrtm_type_preservation_and_conversion(...)' code ##################

        
        # Assigning a Tuple to a Name (line 287):
        
        # Assigning a Tuple to a Name (line 287):
        
        # Obtaining an instance of the builtin type 'tuple' (line 287)
        tuple_101998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 287)
        # Adding element type (line 287)
        str_101999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 31), 'str', 'F')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 287, 31), tuple_101998, str_101999)
        # Adding element type (line 287)
        str_102000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 36), 'str', 'D')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 287, 31), tuple_101998, str_102000)
        # Adding element type (line 287)
        str_102001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 41), 'str', 'G')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 287, 31), tuple_101998, str_102001)
        
        # Assigning a type to the variable 'complex_dtype_chars' (line 287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 8), 'complex_dtype_chars', tuple_101998)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 289)
        tuple_102002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 289)
        # Adding element type (line 289)
        
        # Obtaining an instance of the builtin type 'list' (line 289)
        list_102003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 289)
        # Adding element type (line 289)
        
        # Obtaining an instance of the builtin type 'list' (line 289)
        list_102004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 289)
        # Adding element type (line 289)
        int_102005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 17), list_102004, int_102005)
        # Adding element type (line 289)
        int_102006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 17), list_102004, int_102006)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 16), list_102003, list_102004)
        # Adding element type (line 289)
        
        # Obtaining an instance of the builtin type 'list' (line 289)
        list_102007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 289)
        # Adding element type (line 289)
        int_102008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 25), list_102007, int_102008)
        # Adding element type (line 289)
        int_102009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 25), list_102007, int_102009)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 16), list_102003, list_102007)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 16), tuple_102002, list_102003)
        # Adding element type (line 289)
        
        # Obtaining an instance of the builtin type 'list' (line 290)
        list_102010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 290)
        # Adding element type (line 290)
        
        # Obtaining an instance of the builtin type 'list' (line 290)
        list_102011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 290)
        # Adding element type (line 290)
        int_102012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 290, 17), list_102011, int_102012)
        # Adding element type (line 290)
        int_102013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 290, 17), list_102011, int_102013)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 290, 16), list_102010, list_102011)
        # Adding element type (line 290)
        
        # Obtaining an instance of the builtin type 'list' (line 290)
        list_102014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 290)
        # Adding element type (line 290)
        int_102015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 290, 25), list_102014, int_102015)
        # Adding element type (line 290)
        int_102016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 290, 25), list_102014, int_102016)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 290, 16), list_102010, list_102014)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 16), tuple_102002, list_102010)
        # Adding element type (line 289)
        
        # Obtaining an instance of the builtin type 'list' (line 291)
        list_102017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 291)
        # Adding element type (line 291)
        
        # Obtaining an instance of the builtin type 'list' (line 291)
        list_102018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 291)
        # Adding element type (line 291)
        int_102019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 291, 17), list_102018, int_102019)
        # Adding element type (line 291)
        int_102020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 291, 17), list_102018, int_102020)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 291, 16), list_102017, list_102018)
        # Adding element type (line 291)
        
        # Obtaining an instance of the builtin type 'list' (line 291)
        list_102021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 291)
        # Adding element type (line 291)
        int_102022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 291, 25), list_102021, int_102022)
        # Adding element type (line 291)
        int_102023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 291, 25), list_102021, int_102023)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 291, 16), list_102017, list_102021)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 16), tuple_102002, list_102017)
        # Adding element type (line 289)
        
        # Obtaining an instance of the builtin type 'list' (line 292)
        list_102024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 292)
        # Adding element type (line 292)
        
        # Obtaining an instance of the builtin type 'list' (line 292)
        list_102025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 292)
        # Adding element type (line 292)
        int_102026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 17), list_102025, int_102026)
        # Adding element type (line 292)
        int_102027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 17), list_102025, int_102027)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 16), list_102024, list_102025)
        # Adding element type (line 292)
        
        # Obtaining an instance of the builtin type 'list' (line 292)
        list_102028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 292)
        # Adding element type (line 292)
        int_102029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 25), list_102028, int_102029)
        # Adding element type (line 292)
        int_102030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 25), list_102028, int_102030)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 16), list_102024, list_102028)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 16), tuple_102002, list_102024)
        # Adding element type (line 289)
        
        # Obtaining an instance of the builtin type 'list' (line 293)
        list_102031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 293)
        # Adding element type (line 293)
        
        # Obtaining an instance of the builtin type 'list' (line 293)
        list_102032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 293)
        # Adding element type (line 293)
        int_102033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 17), list_102032, int_102033)
        # Adding element type (line 293)
        int_102034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 17), list_102032, int_102034)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 16), list_102031, list_102032)
        # Adding element type (line 293)
        
        # Obtaining an instance of the builtin type 'list' (line 293)
        list_102035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 293)
        # Adding element type (line 293)
        int_102036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 25), list_102035, int_102036)
        # Adding element type (line 293)
        int_102037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 25), list_102035, int_102037)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 16), list_102031, list_102035)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 16), tuple_102002, list_102031)
        
        # Testing the type of a for loop iterable (line 288)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 288, 8), tuple_102002)
        # Getting the type of the for loop variable (line 288)
        for_loop_var_102038 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 288, 8), tuple_102002)
        # Assigning a type to the variable 'matrix_as_list' (line 288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 8), 'matrix_as_list', for_loop_var_102038)
        # SSA begins for a for statement (line 288)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 296):
        
        # Assigning a Call to a Name (line 296):
        
        # Call to eigvals(...): (line 296)
        # Processing the call arguments (line 296)
        # Getting the type of 'matrix_as_list' (line 296)
        matrix_as_list_102042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 37), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 296)
        kwargs_102043 = {}
        # Getting the type of 'scipy' (line 296)
        scipy_102039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 16), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 296)
        linalg_102040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 16), scipy_102039, 'linalg')
        # Obtaining the member 'eigvals' of a type (line 296)
        eigvals_102041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 16), linalg_102040, 'eigvals')
        # Calling eigvals(args, kwargs) (line 296)
        eigvals_call_result_102044 = invoke(stypy.reporting.localization.Localization(__file__, 296, 16), eigvals_102041, *[matrix_as_list_102042], **kwargs_102043)
        
        # Assigning a type to the variable 'W' (line 296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 12), 'W', eigvals_call_result_102044)
        
        # Call to assert_(...): (line 297)
        # Processing the call arguments (line 297)
        
        
        # Call to any(...): (line 297)
        # Processing the call arguments (line 297)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 297, 28, True)
        # Calculating comprehension expression
        # Getting the type of 'W' (line 297)
        W_102054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 58), 'W', False)
        comprehension_102055 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 297, 28), W_102054)
        # Assigning a type to the variable 'w' (line 297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 28), 'w', comprehension_102055)
        
        # Evaluating a boolean operation
        # Getting the type of 'w' (line 297)
        w_102047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 28), 'w', False)
        # Obtaining the member 'imag' of a type (line 297)
        imag_102048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 28), w_102047, 'imag')
        
        # Getting the type of 'w' (line 297)
        w_102049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 38), 'w', False)
        # Obtaining the member 'real' of a type (line 297)
        real_102050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 38), w_102049, 'real')
        int_102051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 47), 'int')
        # Applying the binary operator '<' (line 297)
        result_lt_102052 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 38), '<', real_102050, int_102051)
        
        # Applying the binary operator 'or' (line 297)
        result_or_keyword_102053 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 28), 'or', imag_102048, result_lt_102052)
        
        list_102056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 28), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 297, 28), list_102056, result_or_keyword_102053)
        # Processing the call keyword arguments (line 297)
        kwargs_102057 = {}
        # Getting the type of 'any' (line 297)
        any_102046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 24), 'any', False)
        # Calling any(args, kwargs) (line 297)
        any_call_result_102058 = invoke(stypy.reporting.localization.Localization(__file__, 297, 24), any_102046, *[list_102056], **kwargs_102057)
        
        # Applying the 'not' unary operator (line 297)
        result_not__102059 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 20), 'not', any_call_result_102058)
        
        # Processing the call keyword arguments (line 297)
        kwargs_102060 = {}
        # Getting the type of 'assert_' (line 297)
        assert__102045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 297)
        assert__call_result_102061 = invoke(stypy.reporting.localization.Localization(__file__, 297, 12), assert__102045, *[result_not__102059], **kwargs_102060)
        
        
        # Assigning a Call to a Name (line 300):
        
        # Assigning a Call to a Name (line 300):
        
        # Call to array(...): (line 300)
        # Processing the call arguments (line 300)
        # Getting the type of 'matrix_as_list' (line 300)
        matrix_as_list_102064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 25), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 300)
        # Getting the type of 'float' (line 300)
        float_102065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 47), 'float', False)
        keyword_102066 = float_102065
        kwargs_102067 = {'dtype': keyword_102066}
        # Getting the type of 'np' (line 300)
        np_102062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 300)
        array_102063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 16), np_102062, 'array')
        # Calling array(args, kwargs) (line 300)
        array_call_result_102068 = invoke(stypy.reporting.localization.Localization(__file__, 300, 16), array_102063, *[matrix_as_list_102064], **kwargs_102067)
        
        # Assigning a type to the variable 'A' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'A', array_call_result_102068)
        
        # Assigning a Call to a Tuple (line 301):
        
        # Assigning a Subscript to a Name (line 301):
        
        # Obtaining the type of the subscript
        int_102069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 12), 'int')
        
        # Call to sqrtm(...): (line 301)
        # Processing the call arguments (line 301)
        # Getting the type of 'A' (line 301)
        A_102071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 34), 'A', False)
        # Processing the call keyword arguments (line 301)
        # Getting the type of 'False' (line 301)
        False_102072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 42), 'False', False)
        keyword_102073 = False_102072
        kwargs_102074 = {'disp': keyword_102073}
        # Getting the type of 'sqrtm' (line 301)
        sqrtm_102070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 301)
        sqrtm_call_result_102075 = invoke(stypy.reporting.localization.Localization(__file__, 301, 28), sqrtm_102070, *[A_102071], **kwargs_102074)
        
        # Obtaining the member '__getitem__' of a type (line 301)
        getitem___102076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 12), sqrtm_call_result_102075, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 301)
        subscript_call_result_102077 = invoke(stypy.reporting.localization.Localization(__file__, 301, 12), getitem___102076, int_102069)
        
        # Assigning a type to the variable 'tuple_var_assignment_100561' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 12), 'tuple_var_assignment_100561', subscript_call_result_102077)
        
        # Assigning a Subscript to a Name (line 301):
        
        # Obtaining the type of the subscript
        int_102078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 12), 'int')
        
        # Call to sqrtm(...): (line 301)
        # Processing the call arguments (line 301)
        # Getting the type of 'A' (line 301)
        A_102080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 34), 'A', False)
        # Processing the call keyword arguments (line 301)
        # Getting the type of 'False' (line 301)
        False_102081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 42), 'False', False)
        keyword_102082 = False_102081
        kwargs_102083 = {'disp': keyword_102082}
        # Getting the type of 'sqrtm' (line 301)
        sqrtm_102079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 301)
        sqrtm_call_result_102084 = invoke(stypy.reporting.localization.Localization(__file__, 301, 28), sqrtm_102079, *[A_102080], **kwargs_102083)
        
        # Obtaining the member '__getitem__' of a type (line 301)
        getitem___102085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 12), sqrtm_call_result_102084, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 301)
        subscript_call_result_102086 = invoke(stypy.reporting.localization.Localization(__file__, 301, 12), getitem___102085, int_102078)
        
        # Assigning a type to the variable 'tuple_var_assignment_100562' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 12), 'tuple_var_assignment_100562', subscript_call_result_102086)
        
        # Assigning a Name to a Name (line 301):
        # Getting the type of 'tuple_var_assignment_100561' (line 301)
        tuple_var_assignment_100561_102087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 12), 'tuple_var_assignment_100561')
        # Assigning a type to the variable 'A_sqrtm' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 12), 'A_sqrtm', tuple_var_assignment_100561_102087)
        
        # Assigning a Name to a Name (line 301):
        # Getting the type of 'tuple_var_assignment_100562' (line 301)
        tuple_var_assignment_100562_102088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 12), 'tuple_var_assignment_100562')
        # Assigning a type to the variable 'info' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 21), 'info', tuple_var_assignment_100562_102088)
        
        # Call to assert_(...): (line 302)
        # Processing the call arguments (line 302)
        
        # Getting the type of 'A_sqrtm' (line 302)
        A_sqrtm_102090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 20), 'A_sqrtm', False)
        # Obtaining the member 'dtype' of a type (line 302)
        dtype_102091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 20), A_sqrtm_102090, 'dtype')
        # Obtaining the member 'char' of a type (line 302)
        char_102092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 20), dtype_102091, 'char')
        # Getting the type of 'complex_dtype_chars' (line 302)
        complex_dtype_chars_102093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 46), 'complex_dtype_chars', False)
        # Applying the binary operator 'notin' (line 302)
        result_contains_102094 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 20), 'notin', char_102092, complex_dtype_chars_102093)
        
        # Processing the call keyword arguments (line 302)
        kwargs_102095 = {}
        # Getting the type of 'assert_' (line 302)
        assert__102089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 302)
        assert__call_result_102096 = invoke(stypy.reporting.localization.Localization(__file__, 302, 12), assert__102089, *[result_contains_102094], **kwargs_102095)
        
        
        # Assigning a Call to a Name (line 305):
        
        # Assigning a Call to a Name (line 305):
        
        # Call to array(...): (line 305)
        # Processing the call arguments (line 305)
        # Getting the type of 'matrix_as_list' (line 305)
        matrix_as_list_102099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 25), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 305)
        # Getting the type of 'complex' (line 305)
        complex_102100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 47), 'complex', False)
        keyword_102101 = complex_102100
        kwargs_102102 = {'dtype': keyword_102101}
        # Getting the type of 'np' (line 305)
        np_102097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 305)
        array_102098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 16), np_102097, 'array')
        # Calling array(args, kwargs) (line 305)
        array_call_result_102103 = invoke(stypy.reporting.localization.Localization(__file__, 305, 16), array_102098, *[matrix_as_list_102099], **kwargs_102102)
        
        # Assigning a type to the variable 'A' (line 305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 12), 'A', array_call_result_102103)
        
        # Assigning a Call to a Tuple (line 306):
        
        # Assigning a Subscript to a Name (line 306):
        
        # Obtaining the type of the subscript
        int_102104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 12), 'int')
        
        # Call to sqrtm(...): (line 306)
        # Processing the call arguments (line 306)
        # Getting the type of 'A' (line 306)
        A_102106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 34), 'A', False)
        # Processing the call keyword arguments (line 306)
        # Getting the type of 'False' (line 306)
        False_102107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 42), 'False', False)
        keyword_102108 = False_102107
        kwargs_102109 = {'disp': keyword_102108}
        # Getting the type of 'sqrtm' (line 306)
        sqrtm_102105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 306)
        sqrtm_call_result_102110 = invoke(stypy.reporting.localization.Localization(__file__, 306, 28), sqrtm_102105, *[A_102106], **kwargs_102109)
        
        # Obtaining the member '__getitem__' of a type (line 306)
        getitem___102111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 12), sqrtm_call_result_102110, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 306)
        subscript_call_result_102112 = invoke(stypy.reporting.localization.Localization(__file__, 306, 12), getitem___102111, int_102104)
        
        # Assigning a type to the variable 'tuple_var_assignment_100563' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 12), 'tuple_var_assignment_100563', subscript_call_result_102112)
        
        # Assigning a Subscript to a Name (line 306):
        
        # Obtaining the type of the subscript
        int_102113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 12), 'int')
        
        # Call to sqrtm(...): (line 306)
        # Processing the call arguments (line 306)
        # Getting the type of 'A' (line 306)
        A_102115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 34), 'A', False)
        # Processing the call keyword arguments (line 306)
        # Getting the type of 'False' (line 306)
        False_102116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 42), 'False', False)
        keyword_102117 = False_102116
        kwargs_102118 = {'disp': keyword_102117}
        # Getting the type of 'sqrtm' (line 306)
        sqrtm_102114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 306)
        sqrtm_call_result_102119 = invoke(stypy.reporting.localization.Localization(__file__, 306, 28), sqrtm_102114, *[A_102115], **kwargs_102118)
        
        # Obtaining the member '__getitem__' of a type (line 306)
        getitem___102120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 12), sqrtm_call_result_102119, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 306)
        subscript_call_result_102121 = invoke(stypy.reporting.localization.Localization(__file__, 306, 12), getitem___102120, int_102113)
        
        # Assigning a type to the variable 'tuple_var_assignment_100564' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 12), 'tuple_var_assignment_100564', subscript_call_result_102121)
        
        # Assigning a Name to a Name (line 306):
        # Getting the type of 'tuple_var_assignment_100563' (line 306)
        tuple_var_assignment_100563_102122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 12), 'tuple_var_assignment_100563')
        # Assigning a type to the variable 'A_sqrtm' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 12), 'A_sqrtm', tuple_var_assignment_100563_102122)
        
        # Assigning a Name to a Name (line 306):
        # Getting the type of 'tuple_var_assignment_100564' (line 306)
        tuple_var_assignment_100564_102123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 12), 'tuple_var_assignment_100564')
        # Assigning a type to the variable 'info' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 21), 'info', tuple_var_assignment_100564_102123)
        
        # Call to assert_(...): (line 307)
        # Processing the call arguments (line 307)
        
        # Getting the type of 'A_sqrtm' (line 307)
        A_sqrtm_102125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 20), 'A_sqrtm', False)
        # Obtaining the member 'dtype' of a type (line 307)
        dtype_102126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 20), A_sqrtm_102125, 'dtype')
        # Obtaining the member 'char' of a type (line 307)
        char_102127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 20), dtype_102126, 'char')
        # Getting the type of 'complex_dtype_chars' (line 307)
        complex_dtype_chars_102128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 42), 'complex_dtype_chars', False)
        # Applying the binary operator 'in' (line 307)
        result_contains_102129 = python_operator(stypy.reporting.localization.Localization(__file__, 307, 20), 'in', char_102127, complex_dtype_chars_102128)
        
        # Processing the call keyword arguments (line 307)
        kwargs_102130 = {}
        # Getting the type of 'assert_' (line 307)
        assert__102124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 307)
        assert__call_result_102131 = invoke(stypy.reporting.localization.Localization(__file__, 307, 12), assert__102124, *[result_contains_102129], **kwargs_102130)
        
        
        # Assigning a UnaryOp to a Name (line 310):
        
        # Assigning a UnaryOp to a Name (line 310):
        
        
        # Call to array(...): (line 310)
        # Processing the call arguments (line 310)
        # Getting the type of 'matrix_as_list' (line 310)
        matrix_as_list_102134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 26), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 310)
        # Getting the type of 'float' (line 310)
        float_102135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 48), 'float', False)
        keyword_102136 = float_102135
        kwargs_102137 = {'dtype': keyword_102136}
        # Getting the type of 'np' (line 310)
        np_102132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 17), 'np', False)
        # Obtaining the member 'array' of a type (line 310)
        array_102133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 17), np_102132, 'array')
        # Calling array(args, kwargs) (line 310)
        array_call_result_102138 = invoke(stypy.reporting.localization.Localization(__file__, 310, 17), array_102133, *[matrix_as_list_102134], **kwargs_102137)
        
        # Applying the 'usub' unary operator (line 310)
        result___neg___102139 = python_operator(stypy.reporting.localization.Localization(__file__, 310, 16), 'usub', array_call_result_102138)
        
        # Assigning a type to the variable 'A' (line 310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 12), 'A', result___neg___102139)
        
        # Assigning a Call to a Tuple (line 311):
        
        # Assigning a Subscript to a Name (line 311):
        
        # Obtaining the type of the subscript
        int_102140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 12), 'int')
        
        # Call to sqrtm(...): (line 311)
        # Processing the call arguments (line 311)
        # Getting the type of 'A' (line 311)
        A_102142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 34), 'A', False)
        # Processing the call keyword arguments (line 311)
        # Getting the type of 'False' (line 311)
        False_102143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 42), 'False', False)
        keyword_102144 = False_102143
        kwargs_102145 = {'disp': keyword_102144}
        # Getting the type of 'sqrtm' (line 311)
        sqrtm_102141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 311)
        sqrtm_call_result_102146 = invoke(stypy.reporting.localization.Localization(__file__, 311, 28), sqrtm_102141, *[A_102142], **kwargs_102145)
        
        # Obtaining the member '__getitem__' of a type (line 311)
        getitem___102147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 12), sqrtm_call_result_102146, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 311)
        subscript_call_result_102148 = invoke(stypy.reporting.localization.Localization(__file__, 311, 12), getitem___102147, int_102140)
        
        # Assigning a type to the variable 'tuple_var_assignment_100565' (line 311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 12), 'tuple_var_assignment_100565', subscript_call_result_102148)
        
        # Assigning a Subscript to a Name (line 311):
        
        # Obtaining the type of the subscript
        int_102149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 12), 'int')
        
        # Call to sqrtm(...): (line 311)
        # Processing the call arguments (line 311)
        # Getting the type of 'A' (line 311)
        A_102151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 34), 'A', False)
        # Processing the call keyword arguments (line 311)
        # Getting the type of 'False' (line 311)
        False_102152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 42), 'False', False)
        keyword_102153 = False_102152
        kwargs_102154 = {'disp': keyword_102153}
        # Getting the type of 'sqrtm' (line 311)
        sqrtm_102150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 311)
        sqrtm_call_result_102155 = invoke(stypy.reporting.localization.Localization(__file__, 311, 28), sqrtm_102150, *[A_102151], **kwargs_102154)
        
        # Obtaining the member '__getitem__' of a type (line 311)
        getitem___102156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 12), sqrtm_call_result_102155, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 311)
        subscript_call_result_102157 = invoke(stypy.reporting.localization.Localization(__file__, 311, 12), getitem___102156, int_102149)
        
        # Assigning a type to the variable 'tuple_var_assignment_100566' (line 311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 12), 'tuple_var_assignment_100566', subscript_call_result_102157)
        
        # Assigning a Name to a Name (line 311):
        # Getting the type of 'tuple_var_assignment_100565' (line 311)
        tuple_var_assignment_100565_102158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 12), 'tuple_var_assignment_100565')
        # Assigning a type to the variable 'A_sqrtm' (line 311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 12), 'A_sqrtm', tuple_var_assignment_100565_102158)
        
        # Assigning a Name to a Name (line 311):
        # Getting the type of 'tuple_var_assignment_100566' (line 311)
        tuple_var_assignment_100566_102159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 12), 'tuple_var_assignment_100566')
        # Assigning a type to the variable 'info' (line 311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 21), 'info', tuple_var_assignment_100566_102159)
        
        # Call to assert_(...): (line 312)
        # Processing the call arguments (line 312)
        
        # Getting the type of 'A_sqrtm' (line 312)
        A_sqrtm_102161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 20), 'A_sqrtm', False)
        # Obtaining the member 'dtype' of a type (line 312)
        dtype_102162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 20), A_sqrtm_102161, 'dtype')
        # Obtaining the member 'char' of a type (line 312)
        char_102163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 20), dtype_102162, 'char')
        # Getting the type of 'complex_dtype_chars' (line 312)
        complex_dtype_chars_102164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 42), 'complex_dtype_chars', False)
        # Applying the binary operator 'in' (line 312)
        result_contains_102165 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 20), 'in', char_102163, complex_dtype_chars_102164)
        
        # Processing the call keyword arguments (line 312)
        kwargs_102166 = {}
        # Getting the type of 'assert_' (line 312)
        assert__102160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 312)
        assert__call_result_102167 = invoke(stypy.reporting.localization.Localization(__file__, 312, 12), assert__102160, *[result_contains_102165], **kwargs_102166)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_sqrtm_type_preservation_and_conversion(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_sqrtm_type_preservation_and_conversion' in the type store
        # Getting the type of 'stypy_return_type' (line 283)
        stypy_return_type_102168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102168)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_sqrtm_type_preservation_and_conversion'
        return stypy_return_type_102168


    @norecursion
    def test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum'
        module_type_store = module_type_store.open_function_context('test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum', 314, 4, False)
        # Assigning a type to the variable 'self' (line 315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_localization', localization)
        TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_function_name', 'TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum')
        TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_param_names_list', [])
        TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum(...)' code ##################

        
        # Assigning a Tuple to a Name (line 315):
        
        # Assigning a Tuple to a Name (line 315):
        
        # Obtaining an instance of the builtin type 'tuple' (line 315)
        tuple_102169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 315)
        # Adding element type (line 315)
        str_102170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 31), 'str', 'F')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 315, 31), tuple_102169, str_102170)
        # Adding element type (line 315)
        str_102171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 36), 'str', 'D')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 315, 31), tuple_102169, str_102171)
        # Adding element type (line 315)
        str_102172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 41), 'str', 'G')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 315, 31), tuple_102169, str_102172)
        
        # Assigning a type to the variable 'complex_dtype_chars' (line 315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 8), 'complex_dtype_chars', tuple_102169)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 317)
        tuple_102173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 317)
        # Adding element type (line 317)
        
        # Obtaining an instance of the builtin type 'list' (line 317)
        list_102174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 317)
        # Adding element type (line 317)
        
        # Obtaining an instance of the builtin type 'list' (line 317)
        list_102175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 317)
        # Adding element type (line 317)
        int_102176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 17), list_102175, int_102176)
        # Adding element type (line 317)
        int_102177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 17), list_102175, int_102177)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 16), list_102174, list_102175)
        # Adding element type (line 317)
        
        # Obtaining an instance of the builtin type 'list' (line 317)
        list_102178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 317)
        # Adding element type (line 317)
        int_102179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 25), list_102178, int_102179)
        # Adding element type (line 317)
        int_102180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 25), list_102178, int_102180)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 16), list_102174, list_102178)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 16), tuple_102173, list_102174)
        # Adding element type (line 317)
        
        # Obtaining an instance of the builtin type 'list' (line 318)
        list_102181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 318)
        # Adding element type (line 318)
        
        # Obtaining an instance of the builtin type 'list' (line 318)
        list_102182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 318)
        # Adding element type (line 318)
        int_102183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 17), list_102182, int_102183)
        # Adding element type (line 318)
        int_102184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 17), list_102182, int_102184)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 16), list_102181, list_102182)
        # Adding element type (line 318)
        
        # Obtaining an instance of the builtin type 'list' (line 318)
        list_102185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 318)
        # Adding element type (line 318)
        int_102186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 25), list_102185, int_102186)
        # Adding element type (line 318)
        int_102187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 25), list_102185, int_102187)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 16), list_102181, list_102185)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 16), tuple_102173, list_102181)
        # Adding element type (line 317)
        
        # Obtaining an instance of the builtin type 'list' (line 319)
        list_102188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 319)
        # Adding element type (line 319)
        
        # Obtaining an instance of the builtin type 'list' (line 319)
        list_102189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 319)
        # Adding element type (line 319)
        int_102190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 17), list_102189, int_102190)
        # Adding element type (line 319)
        int_102191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 17), list_102189, int_102191)
        # Adding element type (line 319)
        int_102192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 17), list_102189, int_102192)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 16), list_102188, list_102189)
        # Adding element type (line 319)
        
        # Obtaining an instance of the builtin type 'list' (line 319)
        list_102193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 319)
        # Adding element type (line 319)
        int_102194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 28), list_102193, int_102194)
        # Adding element type (line 319)
        int_102195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 28), list_102193, int_102195)
        # Adding element type (line 319)
        int_102196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 28), list_102193, int_102196)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 16), list_102188, list_102193)
        # Adding element type (line 319)
        
        # Obtaining an instance of the builtin type 'list' (line 319)
        list_102197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 39), 'list')
        # Adding type elements to the builtin type 'list' instance (line 319)
        # Adding element type (line 319)
        int_102198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 39), list_102197, int_102198)
        # Adding element type (line 319)
        int_102199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 39), list_102197, int_102199)
        # Adding element type (line 319)
        int_102200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 39), list_102197, int_102200)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 16), list_102188, list_102197)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 16), tuple_102173, list_102188)
        
        # Testing the type of a for loop iterable (line 316)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 316, 8), tuple_102173)
        # Getting the type of the for loop variable (line 316)
        for_loop_var_102201 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 316, 8), tuple_102173)
        # Assigning a type to the variable 'matrix_as_list' (line 316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'matrix_as_list', for_loop_var_102201)
        # SSA begins for a for statement (line 316)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 322):
        
        # Assigning a Call to a Name (line 322):
        
        # Call to eigvals(...): (line 322)
        # Processing the call arguments (line 322)
        # Getting the type of 'matrix_as_list' (line 322)
        matrix_as_list_102205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 37), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 322)
        kwargs_102206 = {}
        # Getting the type of 'scipy' (line 322)
        scipy_102202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 16), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 322)
        linalg_102203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 16), scipy_102202, 'linalg')
        # Obtaining the member 'eigvals' of a type (line 322)
        eigvals_102204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 16), linalg_102203, 'eigvals')
        # Calling eigvals(args, kwargs) (line 322)
        eigvals_call_result_102207 = invoke(stypy.reporting.localization.Localization(__file__, 322, 16), eigvals_102204, *[matrix_as_list_102205], **kwargs_102206)
        
        # Assigning a type to the variable 'W' (line 322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 12), 'W', eigvals_call_result_102207)
        
        # Call to assert_(...): (line 323)
        # Processing the call arguments (line 323)
        
        # Call to any(...): (line 323)
        # Processing the call arguments (line 323)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 323, 24, True)
        # Calculating comprehension expression
        # Getting the type of 'W' (line 323)
        W_102217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 54), 'W', False)
        comprehension_102218 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 323, 24), W_102217)
        # Assigning a type to the variable 'w' (line 323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 24), 'w', comprehension_102218)
        
        # Evaluating a boolean operation
        # Getting the type of 'w' (line 323)
        w_102210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 24), 'w', False)
        # Obtaining the member 'imag' of a type (line 323)
        imag_102211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 24), w_102210, 'imag')
        
        # Getting the type of 'w' (line 323)
        w_102212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 34), 'w', False)
        # Obtaining the member 'real' of a type (line 323)
        real_102213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 34), w_102212, 'real')
        int_102214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 43), 'int')
        # Applying the binary operator '<' (line 323)
        result_lt_102215 = python_operator(stypy.reporting.localization.Localization(__file__, 323, 34), '<', real_102213, int_102214)
        
        # Applying the binary operator 'or' (line 323)
        result_or_keyword_102216 = python_operator(stypy.reporting.localization.Localization(__file__, 323, 24), 'or', imag_102211, result_lt_102215)
        
        list_102219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 24), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 323, 24), list_102219, result_or_keyword_102216)
        # Processing the call keyword arguments (line 323)
        kwargs_102220 = {}
        # Getting the type of 'any' (line 323)
        any_102209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 20), 'any', False)
        # Calling any(args, kwargs) (line 323)
        any_call_result_102221 = invoke(stypy.reporting.localization.Localization(__file__, 323, 20), any_102209, *[list_102219], **kwargs_102220)
        
        # Processing the call keyword arguments (line 323)
        kwargs_102222 = {}
        # Getting the type of 'assert_' (line 323)
        assert__102208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 323)
        assert__call_result_102223 = invoke(stypy.reporting.localization.Localization(__file__, 323, 12), assert__102208, *[any_call_result_102221], **kwargs_102222)
        
        
        # Assigning a Call to a Name (line 326):
        
        # Assigning a Call to a Name (line 326):
        
        # Call to array(...): (line 326)
        # Processing the call arguments (line 326)
        # Getting the type of 'matrix_as_list' (line 326)
        matrix_as_list_102226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 25), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 326)
        # Getting the type of 'complex' (line 326)
        complex_102227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 47), 'complex', False)
        keyword_102228 = complex_102227
        kwargs_102229 = {'dtype': keyword_102228}
        # Getting the type of 'np' (line 326)
        np_102224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 326)
        array_102225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 16), np_102224, 'array')
        # Calling array(args, kwargs) (line 326)
        array_call_result_102230 = invoke(stypy.reporting.localization.Localization(__file__, 326, 16), array_102225, *[matrix_as_list_102226], **kwargs_102229)
        
        # Assigning a type to the variable 'A' (line 326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 12), 'A', array_call_result_102230)
        
        # Assigning a Call to a Tuple (line 327):
        
        # Assigning a Subscript to a Name (line 327):
        
        # Obtaining the type of the subscript
        int_102231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 12), 'int')
        
        # Call to sqrtm(...): (line 327)
        # Processing the call arguments (line 327)
        # Getting the type of 'A' (line 327)
        A_102233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 34), 'A', False)
        # Processing the call keyword arguments (line 327)
        # Getting the type of 'False' (line 327)
        False_102234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 42), 'False', False)
        keyword_102235 = False_102234
        kwargs_102236 = {'disp': keyword_102235}
        # Getting the type of 'sqrtm' (line 327)
        sqrtm_102232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 327)
        sqrtm_call_result_102237 = invoke(stypy.reporting.localization.Localization(__file__, 327, 28), sqrtm_102232, *[A_102233], **kwargs_102236)
        
        # Obtaining the member '__getitem__' of a type (line 327)
        getitem___102238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 12), sqrtm_call_result_102237, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 327)
        subscript_call_result_102239 = invoke(stypy.reporting.localization.Localization(__file__, 327, 12), getitem___102238, int_102231)
        
        # Assigning a type to the variable 'tuple_var_assignment_100567' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 12), 'tuple_var_assignment_100567', subscript_call_result_102239)
        
        # Assigning a Subscript to a Name (line 327):
        
        # Obtaining the type of the subscript
        int_102240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 12), 'int')
        
        # Call to sqrtm(...): (line 327)
        # Processing the call arguments (line 327)
        # Getting the type of 'A' (line 327)
        A_102242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 34), 'A', False)
        # Processing the call keyword arguments (line 327)
        # Getting the type of 'False' (line 327)
        False_102243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 42), 'False', False)
        keyword_102244 = False_102243
        kwargs_102245 = {'disp': keyword_102244}
        # Getting the type of 'sqrtm' (line 327)
        sqrtm_102241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 327)
        sqrtm_call_result_102246 = invoke(stypy.reporting.localization.Localization(__file__, 327, 28), sqrtm_102241, *[A_102242], **kwargs_102245)
        
        # Obtaining the member '__getitem__' of a type (line 327)
        getitem___102247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 12), sqrtm_call_result_102246, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 327)
        subscript_call_result_102248 = invoke(stypy.reporting.localization.Localization(__file__, 327, 12), getitem___102247, int_102240)
        
        # Assigning a type to the variable 'tuple_var_assignment_100568' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 12), 'tuple_var_assignment_100568', subscript_call_result_102248)
        
        # Assigning a Name to a Name (line 327):
        # Getting the type of 'tuple_var_assignment_100567' (line 327)
        tuple_var_assignment_100567_102249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 12), 'tuple_var_assignment_100567')
        # Assigning a type to the variable 'A_sqrtm' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 12), 'A_sqrtm', tuple_var_assignment_100567_102249)
        
        # Assigning a Name to a Name (line 327):
        # Getting the type of 'tuple_var_assignment_100568' (line 327)
        tuple_var_assignment_100568_102250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 12), 'tuple_var_assignment_100568')
        # Assigning a type to the variable 'info' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 21), 'info', tuple_var_assignment_100568_102250)
        
        # Call to assert_(...): (line 328)
        # Processing the call arguments (line 328)
        
        # Getting the type of 'A_sqrtm' (line 328)
        A_sqrtm_102252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 20), 'A_sqrtm', False)
        # Obtaining the member 'dtype' of a type (line 328)
        dtype_102253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 20), A_sqrtm_102252, 'dtype')
        # Obtaining the member 'char' of a type (line 328)
        char_102254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 20), dtype_102253, 'char')
        # Getting the type of 'complex_dtype_chars' (line 328)
        complex_dtype_chars_102255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 42), 'complex_dtype_chars', False)
        # Applying the binary operator 'in' (line 328)
        result_contains_102256 = python_operator(stypy.reporting.localization.Localization(__file__, 328, 20), 'in', char_102254, complex_dtype_chars_102255)
        
        # Processing the call keyword arguments (line 328)
        kwargs_102257 = {}
        # Getting the type of 'assert_' (line 328)
        assert__102251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 328)
        assert__call_result_102258 = invoke(stypy.reporting.localization.Localization(__file__, 328, 12), assert__102251, *[result_contains_102256], **kwargs_102257)
        
        
        # Assigning a Call to a Name (line 331):
        
        # Assigning a Call to a Name (line 331):
        
        # Call to array(...): (line 331)
        # Processing the call arguments (line 331)
        # Getting the type of 'matrix_as_list' (line 331)
        matrix_as_list_102261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 25), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 331)
        # Getting the type of 'float' (line 331)
        float_102262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 47), 'float', False)
        keyword_102263 = float_102262
        kwargs_102264 = {'dtype': keyword_102263}
        # Getting the type of 'np' (line 331)
        np_102259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 331)
        array_102260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 16), np_102259, 'array')
        # Calling array(args, kwargs) (line 331)
        array_call_result_102265 = invoke(stypy.reporting.localization.Localization(__file__, 331, 16), array_102260, *[matrix_as_list_102261], **kwargs_102264)
        
        # Assigning a type to the variable 'A' (line 331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 12), 'A', array_call_result_102265)
        
        # Assigning a Call to a Tuple (line 332):
        
        # Assigning a Subscript to a Name (line 332):
        
        # Obtaining the type of the subscript
        int_102266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 12), 'int')
        
        # Call to sqrtm(...): (line 332)
        # Processing the call arguments (line 332)
        # Getting the type of 'A' (line 332)
        A_102268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 34), 'A', False)
        # Processing the call keyword arguments (line 332)
        # Getting the type of 'False' (line 332)
        False_102269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 42), 'False', False)
        keyword_102270 = False_102269
        kwargs_102271 = {'disp': keyword_102270}
        # Getting the type of 'sqrtm' (line 332)
        sqrtm_102267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 332)
        sqrtm_call_result_102272 = invoke(stypy.reporting.localization.Localization(__file__, 332, 28), sqrtm_102267, *[A_102268], **kwargs_102271)
        
        # Obtaining the member '__getitem__' of a type (line 332)
        getitem___102273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 12), sqrtm_call_result_102272, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 332)
        subscript_call_result_102274 = invoke(stypy.reporting.localization.Localization(__file__, 332, 12), getitem___102273, int_102266)
        
        # Assigning a type to the variable 'tuple_var_assignment_100569' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 12), 'tuple_var_assignment_100569', subscript_call_result_102274)
        
        # Assigning a Subscript to a Name (line 332):
        
        # Obtaining the type of the subscript
        int_102275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 12), 'int')
        
        # Call to sqrtm(...): (line 332)
        # Processing the call arguments (line 332)
        # Getting the type of 'A' (line 332)
        A_102277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 34), 'A', False)
        # Processing the call keyword arguments (line 332)
        # Getting the type of 'False' (line 332)
        False_102278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 42), 'False', False)
        keyword_102279 = False_102278
        kwargs_102280 = {'disp': keyword_102279}
        # Getting the type of 'sqrtm' (line 332)
        sqrtm_102276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 332)
        sqrtm_call_result_102281 = invoke(stypy.reporting.localization.Localization(__file__, 332, 28), sqrtm_102276, *[A_102277], **kwargs_102280)
        
        # Obtaining the member '__getitem__' of a type (line 332)
        getitem___102282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 12), sqrtm_call_result_102281, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 332)
        subscript_call_result_102283 = invoke(stypy.reporting.localization.Localization(__file__, 332, 12), getitem___102282, int_102275)
        
        # Assigning a type to the variable 'tuple_var_assignment_100570' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 12), 'tuple_var_assignment_100570', subscript_call_result_102283)
        
        # Assigning a Name to a Name (line 332):
        # Getting the type of 'tuple_var_assignment_100569' (line 332)
        tuple_var_assignment_100569_102284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 12), 'tuple_var_assignment_100569')
        # Assigning a type to the variable 'A_sqrtm' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 12), 'A_sqrtm', tuple_var_assignment_100569_102284)
        
        # Assigning a Name to a Name (line 332):
        # Getting the type of 'tuple_var_assignment_100570' (line 332)
        tuple_var_assignment_100570_102285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 12), 'tuple_var_assignment_100570')
        # Assigning a type to the variable 'info' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 21), 'info', tuple_var_assignment_100570_102285)
        
        # Call to assert_(...): (line 333)
        # Processing the call arguments (line 333)
        
        # Getting the type of 'A_sqrtm' (line 333)
        A_sqrtm_102287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 20), 'A_sqrtm', False)
        # Obtaining the member 'dtype' of a type (line 333)
        dtype_102288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 20), A_sqrtm_102287, 'dtype')
        # Obtaining the member 'char' of a type (line 333)
        char_102289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 20), dtype_102288, 'char')
        # Getting the type of 'complex_dtype_chars' (line 333)
        complex_dtype_chars_102290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 42), 'complex_dtype_chars', False)
        # Applying the binary operator 'in' (line 333)
        result_contains_102291 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 20), 'in', char_102289, complex_dtype_chars_102290)
        
        # Processing the call keyword arguments (line 333)
        kwargs_102292 = {}
        # Getting the type of 'assert_' (line 333)
        assert__102286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 333)
        assert__call_result_102293 = invoke(stypy.reporting.localization.Localization(__file__, 333, 12), assert__102286, *[result_contains_102291], **kwargs_102292)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum' in the type store
        # Getting the type of 'stypy_return_type' (line 314)
        stypy_return_type_102294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102294)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum'
        return stypy_return_type_102294


    @norecursion
    def test_blocksizes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_blocksizes'
        module_type_store = module_type_store.open_function_context('test_blocksizes', 335, 4, False)
        # Assigning a type to the variable 'self' (line 336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSqrtM.test_blocksizes.__dict__.__setitem__('stypy_localization', localization)
        TestSqrtM.test_blocksizes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSqrtM.test_blocksizes.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSqrtM.test_blocksizes.__dict__.__setitem__('stypy_function_name', 'TestSqrtM.test_blocksizes')
        TestSqrtM.test_blocksizes.__dict__.__setitem__('stypy_param_names_list', [])
        TestSqrtM.test_blocksizes.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSqrtM.test_blocksizes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSqrtM.test_blocksizes.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSqrtM.test_blocksizes.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSqrtM.test_blocksizes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSqrtM.test_blocksizes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.test_blocksizes', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_blocksizes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_blocksizes(...)' code ##################

        
        # Call to seed(...): (line 337)
        # Processing the call arguments (line 337)
        int_102298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 337, 23), 'int')
        # Processing the call keyword arguments (line 337)
        kwargs_102299 = {}
        # Getting the type of 'np' (line 337)
        np_102295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 337)
        random_102296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 8), np_102295, 'random')
        # Obtaining the member 'seed' of a type (line 337)
        seed_102297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 8), random_102296, 'seed')
        # Calling seed(args, kwargs) (line 337)
        seed_call_result_102300 = invoke(stypy.reporting.localization.Localization(__file__, 337, 8), seed_102297, *[int_102298], **kwargs_102299)
        
        
        
        # Call to range(...): (line 338)
        # Processing the call arguments (line 338)
        int_102302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 338, 23), 'int')
        int_102303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 338, 26), 'int')
        # Processing the call keyword arguments (line 338)
        kwargs_102304 = {}
        # Getting the type of 'range' (line 338)
        range_102301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 17), 'range', False)
        # Calling range(args, kwargs) (line 338)
        range_call_result_102305 = invoke(stypy.reporting.localization.Localization(__file__, 338, 17), range_102301, *[int_102302, int_102303], **kwargs_102304)
        
        # Testing the type of a for loop iterable (line 338)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 338, 8), range_call_result_102305)
        # Getting the type of the for loop variable (line 338)
        for_loop_var_102306 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 338, 8), range_call_result_102305)
        # Assigning a type to the variable 'n' (line 338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 8), 'n', for_loop_var_102306)
        # SSA begins for a for statement (line 338)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 339):
        
        # Assigning a BinOp to a Name (line 339):
        
        # Call to rand(...): (line 339)
        # Processing the call arguments (line 339)
        # Getting the type of 'n' (line 339)
        n_102310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 31), 'n', False)
        # Getting the type of 'n' (line 339)
        n_102311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 34), 'n', False)
        # Processing the call keyword arguments (line 339)
        kwargs_102312 = {}
        # Getting the type of 'np' (line 339)
        np_102307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 16), 'np', False)
        # Obtaining the member 'random' of a type (line 339)
        random_102308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 16), np_102307, 'random')
        # Obtaining the member 'rand' of a type (line 339)
        rand_102309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 16), random_102308, 'rand')
        # Calling rand(args, kwargs) (line 339)
        rand_call_result_102313 = invoke(stypy.reporting.localization.Localization(__file__, 339, 16), rand_102309, *[n_102310, n_102311], **kwargs_102312)
        
        complex_102314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, 39), 'complex')
        
        # Call to randn(...): (line 339)
        # Processing the call arguments (line 339)
        # Getting the type of 'n' (line 339)
        n_102318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 58), 'n', False)
        # Getting the type of 'n' (line 339)
        n_102319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 61), 'n', False)
        # Processing the call keyword arguments (line 339)
        kwargs_102320 = {}
        # Getting the type of 'np' (line 339)
        np_102315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 42), 'np', False)
        # Obtaining the member 'random' of a type (line 339)
        random_102316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 42), np_102315, 'random')
        # Obtaining the member 'randn' of a type (line 339)
        randn_102317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 42), random_102316, 'randn')
        # Calling randn(args, kwargs) (line 339)
        randn_call_result_102321 = invoke(stypy.reporting.localization.Localization(__file__, 339, 42), randn_102317, *[n_102318, n_102319], **kwargs_102320)
        
        # Applying the binary operator '*' (line 339)
        result_mul_102322 = python_operator(stypy.reporting.localization.Localization(__file__, 339, 39), '*', complex_102314, randn_call_result_102321)
        
        # Applying the binary operator '+' (line 339)
        result_add_102323 = python_operator(stypy.reporting.localization.Localization(__file__, 339, 16), '+', rand_call_result_102313, result_mul_102322)
        
        # Assigning a type to the variable 'A' (line 339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 12), 'A', result_add_102323)
        
        # Assigning a Call to a Tuple (line 340):
        
        # Assigning a Subscript to a Name (line 340):
        
        # Obtaining the type of the subscript
        int_102324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, 12), 'int')
        
        # Call to sqrtm(...): (line 340)
        # Processing the call arguments (line 340)
        # Getting the type of 'A' (line 340)
        A_102326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 42), 'A', False)
        # Processing the call keyword arguments (line 340)
        # Getting the type of 'False' (line 340)
        False_102327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 50), 'False', False)
        keyword_102328 = False_102327
        # Getting the type of 'n' (line 340)
        n_102329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 67), 'n', False)
        keyword_102330 = n_102329
        kwargs_102331 = {'disp': keyword_102328, 'blocksize': keyword_102330}
        # Getting the type of 'sqrtm' (line 340)
        sqrtm_102325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 36), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 340)
        sqrtm_call_result_102332 = invoke(stypy.reporting.localization.Localization(__file__, 340, 36), sqrtm_102325, *[A_102326], **kwargs_102331)
        
        # Obtaining the member '__getitem__' of a type (line 340)
        getitem___102333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 12), sqrtm_call_result_102332, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 340)
        subscript_call_result_102334 = invoke(stypy.reporting.localization.Localization(__file__, 340, 12), getitem___102333, int_102324)
        
        # Assigning a type to the variable 'tuple_var_assignment_100571' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 12), 'tuple_var_assignment_100571', subscript_call_result_102334)
        
        # Assigning a Subscript to a Name (line 340):
        
        # Obtaining the type of the subscript
        int_102335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, 12), 'int')
        
        # Call to sqrtm(...): (line 340)
        # Processing the call arguments (line 340)
        # Getting the type of 'A' (line 340)
        A_102337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 42), 'A', False)
        # Processing the call keyword arguments (line 340)
        # Getting the type of 'False' (line 340)
        False_102338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 50), 'False', False)
        keyword_102339 = False_102338
        # Getting the type of 'n' (line 340)
        n_102340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 67), 'n', False)
        keyword_102341 = n_102340
        kwargs_102342 = {'disp': keyword_102339, 'blocksize': keyword_102341}
        # Getting the type of 'sqrtm' (line 340)
        sqrtm_102336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 36), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 340)
        sqrtm_call_result_102343 = invoke(stypy.reporting.localization.Localization(__file__, 340, 36), sqrtm_102336, *[A_102337], **kwargs_102342)
        
        # Obtaining the member '__getitem__' of a type (line 340)
        getitem___102344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 12), sqrtm_call_result_102343, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 340)
        subscript_call_result_102345 = invoke(stypy.reporting.localization.Localization(__file__, 340, 12), getitem___102344, int_102335)
        
        # Assigning a type to the variable 'tuple_var_assignment_100572' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 12), 'tuple_var_assignment_100572', subscript_call_result_102345)
        
        # Assigning a Name to a Name (line 340):
        # Getting the type of 'tuple_var_assignment_100571' (line 340)
        tuple_var_assignment_100571_102346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 12), 'tuple_var_assignment_100571')
        # Assigning a type to the variable 'A_sqrtm_default' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 12), 'A_sqrtm_default', tuple_var_assignment_100571_102346)
        
        # Assigning a Name to a Name (line 340):
        # Getting the type of 'tuple_var_assignment_100572' (line 340)
        tuple_var_assignment_100572_102347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 12), 'tuple_var_assignment_100572')
        # Assigning a type to the variable 'info' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 29), 'info', tuple_var_assignment_100572_102347)
        
        # Call to assert_allclose(...): (line 341)
        # Processing the call arguments (line 341)
        # Getting the type of 'A' (line 341)
        A_102349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 28), 'A', False)
        
        # Call to matrix_power(...): (line 341)
        # Processing the call arguments (line 341)
        # Getting the type of 'A_sqrtm_default' (line 341)
        A_sqrtm_default_102353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 54), 'A_sqrtm_default', False)
        int_102354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 71), 'int')
        # Processing the call keyword arguments (line 341)
        kwargs_102355 = {}
        # Getting the type of 'np' (line 341)
        np_102350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 31), 'np', False)
        # Obtaining the member 'linalg' of a type (line 341)
        linalg_102351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 31), np_102350, 'linalg')
        # Obtaining the member 'matrix_power' of a type (line 341)
        matrix_power_102352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 31), linalg_102351, 'matrix_power')
        # Calling matrix_power(args, kwargs) (line 341)
        matrix_power_call_result_102356 = invoke(stypy.reporting.localization.Localization(__file__, 341, 31), matrix_power_102352, *[A_sqrtm_default_102353, int_102354], **kwargs_102355)
        
        # Processing the call keyword arguments (line 341)
        kwargs_102357 = {}
        # Getting the type of 'assert_allclose' (line 341)
        assert_allclose_102348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 341)
        assert_allclose_call_result_102358 = invoke(stypy.reporting.localization.Localization(__file__, 341, 12), assert_allclose_102348, *[A_102349, matrix_power_call_result_102356], **kwargs_102357)
        
        
        
        # Call to range(...): (line 342)
        # Processing the call arguments (line 342)
        int_102360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 35), 'int')
        int_102361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 38), 'int')
        # Processing the call keyword arguments (line 342)
        kwargs_102362 = {}
        # Getting the type of 'range' (line 342)
        range_102359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 29), 'range', False)
        # Calling range(args, kwargs) (line 342)
        range_call_result_102363 = invoke(stypy.reporting.localization.Localization(__file__, 342, 29), range_102359, *[int_102360, int_102361], **kwargs_102362)
        
        # Testing the type of a for loop iterable (line 342)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 342, 12), range_call_result_102363)
        # Getting the type of the for loop variable (line 342)
        for_loop_var_102364 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 342, 12), range_call_result_102363)
        # Assigning a type to the variable 'blocksize' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 12), 'blocksize', for_loop_var_102364)
        # SSA begins for a for statement (line 342)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Tuple (line 343):
        
        # Assigning a Subscript to a Name (line 343):
        
        # Obtaining the type of the subscript
        int_102365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 16), 'int')
        
        # Call to sqrtm(...): (line 343)
        # Processing the call arguments (line 343)
        # Getting the type of 'A' (line 343)
        A_102367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 42), 'A', False)
        # Processing the call keyword arguments (line 343)
        # Getting the type of 'False' (line 343)
        False_102368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 50), 'False', False)
        keyword_102369 = False_102368
        # Getting the type of 'blocksize' (line 343)
        blocksize_102370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 67), 'blocksize', False)
        keyword_102371 = blocksize_102370
        kwargs_102372 = {'disp': keyword_102369, 'blocksize': keyword_102371}
        # Getting the type of 'sqrtm' (line 343)
        sqrtm_102366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 36), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 343)
        sqrtm_call_result_102373 = invoke(stypy.reporting.localization.Localization(__file__, 343, 36), sqrtm_102366, *[A_102367], **kwargs_102372)
        
        # Obtaining the member '__getitem__' of a type (line 343)
        getitem___102374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 16), sqrtm_call_result_102373, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 343)
        subscript_call_result_102375 = invoke(stypy.reporting.localization.Localization(__file__, 343, 16), getitem___102374, int_102365)
        
        # Assigning a type to the variable 'tuple_var_assignment_100573' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 16), 'tuple_var_assignment_100573', subscript_call_result_102375)
        
        # Assigning a Subscript to a Name (line 343):
        
        # Obtaining the type of the subscript
        int_102376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 16), 'int')
        
        # Call to sqrtm(...): (line 343)
        # Processing the call arguments (line 343)
        # Getting the type of 'A' (line 343)
        A_102378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 42), 'A', False)
        # Processing the call keyword arguments (line 343)
        # Getting the type of 'False' (line 343)
        False_102379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 50), 'False', False)
        keyword_102380 = False_102379
        # Getting the type of 'blocksize' (line 343)
        blocksize_102381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 67), 'blocksize', False)
        keyword_102382 = blocksize_102381
        kwargs_102383 = {'disp': keyword_102380, 'blocksize': keyword_102382}
        # Getting the type of 'sqrtm' (line 343)
        sqrtm_102377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 36), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 343)
        sqrtm_call_result_102384 = invoke(stypy.reporting.localization.Localization(__file__, 343, 36), sqrtm_102377, *[A_102378], **kwargs_102383)
        
        # Obtaining the member '__getitem__' of a type (line 343)
        getitem___102385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 16), sqrtm_call_result_102384, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 343)
        subscript_call_result_102386 = invoke(stypy.reporting.localization.Localization(__file__, 343, 16), getitem___102385, int_102376)
        
        # Assigning a type to the variable 'tuple_var_assignment_100574' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 16), 'tuple_var_assignment_100574', subscript_call_result_102386)
        
        # Assigning a Name to a Name (line 343):
        # Getting the type of 'tuple_var_assignment_100573' (line 343)
        tuple_var_assignment_100573_102387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 16), 'tuple_var_assignment_100573')
        # Assigning a type to the variable 'A_sqrtm_new' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 16), 'A_sqrtm_new', tuple_var_assignment_100573_102387)
        
        # Assigning a Name to a Name (line 343):
        # Getting the type of 'tuple_var_assignment_100574' (line 343)
        tuple_var_assignment_100574_102388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 16), 'tuple_var_assignment_100574')
        # Assigning a type to the variable 'info' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 29), 'info', tuple_var_assignment_100574_102388)
        
        # Call to assert_allclose(...): (line 344)
        # Processing the call arguments (line 344)
        # Getting the type of 'A_sqrtm_default' (line 344)
        A_sqrtm_default_102390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 32), 'A_sqrtm_default', False)
        # Getting the type of 'A_sqrtm_new' (line 344)
        A_sqrtm_new_102391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 49), 'A_sqrtm_new', False)
        # Processing the call keyword arguments (line 344)
        kwargs_102392 = {}
        # Getting the type of 'assert_allclose' (line 344)
        assert_allclose_102389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 16), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 344)
        assert_allclose_call_result_102393 = invoke(stypy.reporting.localization.Localization(__file__, 344, 16), assert_allclose_102389, *[A_sqrtm_default_102390, A_sqrtm_new_102391], **kwargs_102392)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_blocksizes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_blocksizes' in the type store
        # Getting the type of 'stypy_return_type' (line 335)
        stypy_return_type_102394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102394)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_blocksizes'
        return stypy_return_type_102394


    @norecursion
    def test_al_mohy_higham_2012_experiment_1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_al_mohy_higham_2012_experiment_1'
        module_type_store = module_type_store.open_function_context('test_al_mohy_higham_2012_experiment_1', 346, 4, False)
        # Assigning a type to the variable 'self' (line 347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 347, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSqrtM.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_localization', localization)
        TestSqrtM.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSqrtM.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSqrtM.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_function_name', 'TestSqrtM.test_al_mohy_higham_2012_experiment_1')
        TestSqrtM.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_param_names_list', [])
        TestSqrtM.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSqrtM.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSqrtM.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSqrtM.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSqrtM.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSqrtM.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.test_al_mohy_higham_2012_experiment_1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_al_mohy_higham_2012_experiment_1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_al_mohy_higham_2012_experiment_1(...)' code ##################

        
        # Assigning a Call to a Name (line 348):
        
        # Assigning a Call to a Name (line 348):
        
        # Call to _get_al_mohy_higham_2012_experiment_1(...): (line 348)
        # Processing the call keyword arguments (line 348)
        kwargs_102396 = {}
        # Getting the type of '_get_al_mohy_higham_2012_experiment_1' (line 348)
        _get_al_mohy_higham_2012_experiment_1_102395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 12), '_get_al_mohy_higham_2012_experiment_1', False)
        # Calling _get_al_mohy_higham_2012_experiment_1(args, kwargs) (line 348)
        _get_al_mohy_higham_2012_experiment_1_call_result_102397 = invoke(stypy.reporting.localization.Localization(__file__, 348, 12), _get_al_mohy_higham_2012_experiment_1_102395, *[], **kwargs_102396)
        
        # Assigning a type to the variable 'A' (line 348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 8), 'A', _get_al_mohy_higham_2012_experiment_1_call_result_102397)
        
        # Assigning a Call to a Tuple (line 349):
        
        # Assigning a Subscript to a Name (line 349):
        
        # Obtaining the type of the subscript
        int_102398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 8), 'int')
        
        # Call to sqrtm(...): (line 349)
        # Processing the call arguments (line 349)
        # Getting the type of 'A' (line 349)
        A_102400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 30), 'A', False)
        # Processing the call keyword arguments (line 349)
        # Getting the type of 'False' (line 349)
        False_102401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 38), 'False', False)
        keyword_102402 = False_102401
        kwargs_102403 = {'disp': keyword_102402}
        # Getting the type of 'sqrtm' (line 349)
        sqrtm_102399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 24), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 349)
        sqrtm_call_result_102404 = invoke(stypy.reporting.localization.Localization(__file__, 349, 24), sqrtm_102399, *[A_102400], **kwargs_102403)
        
        # Obtaining the member '__getitem__' of a type (line 349)
        getitem___102405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 8), sqrtm_call_result_102404, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 349)
        subscript_call_result_102406 = invoke(stypy.reporting.localization.Localization(__file__, 349, 8), getitem___102405, int_102398)
        
        # Assigning a type to the variable 'tuple_var_assignment_100575' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'tuple_var_assignment_100575', subscript_call_result_102406)
        
        # Assigning a Subscript to a Name (line 349):
        
        # Obtaining the type of the subscript
        int_102407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 8), 'int')
        
        # Call to sqrtm(...): (line 349)
        # Processing the call arguments (line 349)
        # Getting the type of 'A' (line 349)
        A_102409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 30), 'A', False)
        # Processing the call keyword arguments (line 349)
        # Getting the type of 'False' (line 349)
        False_102410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 38), 'False', False)
        keyword_102411 = False_102410
        kwargs_102412 = {'disp': keyword_102411}
        # Getting the type of 'sqrtm' (line 349)
        sqrtm_102408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 24), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 349)
        sqrtm_call_result_102413 = invoke(stypy.reporting.localization.Localization(__file__, 349, 24), sqrtm_102408, *[A_102409], **kwargs_102412)
        
        # Obtaining the member '__getitem__' of a type (line 349)
        getitem___102414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 8), sqrtm_call_result_102413, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 349)
        subscript_call_result_102415 = invoke(stypy.reporting.localization.Localization(__file__, 349, 8), getitem___102414, int_102407)
        
        # Assigning a type to the variable 'tuple_var_assignment_100576' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'tuple_var_assignment_100576', subscript_call_result_102415)
        
        # Assigning a Name to a Name (line 349):
        # Getting the type of 'tuple_var_assignment_100575' (line 349)
        tuple_var_assignment_100575_102416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'tuple_var_assignment_100575')
        # Assigning a type to the variable 'A_sqrtm' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'A_sqrtm', tuple_var_assignment_100575_102416)
        
        # Assigning a Name to a Name (line 349):
        # Getting the type of 'tuple_var_assignment_100576' (line 349)
        tuple_var_assignment_100576_102417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'tuple_var_assignment_100576')
        # Assigning a type to the variable 'info' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 17), 'info', tuple_var_assignment_100576_102417)
        
        # Assigning a Call to a Name (line 350):
        
        # Assigning a Call to a Name (line 350):
        
        # Call to dot(...): (line 350)
        # Processing the call arguments (line 350)
        # Getting the type of 'A_sqrtm' (line 350)
        A_sqrtm_102420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 35), 'A_sqrtm', False)
        # Processing the call keyword arguments (line 350)
        kwargs_102421 = {}
        # Getting the type of 'A_sqrtm' (line 350)
        A_sqrtm_102418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 23), 'A_sqrtm', False)
        # Obtaining the member 'dot' of a type (line 350)
        dot_102419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 23), A_sqrtm_102418, 'dot')
        # Calling dot(args, kwargs) (line 350)
        dot_call_result_102422 = invoke(stypy.reporting.localization.Localization(__file__, 350, 23), dot_102419, *[A_sqrtm_102420], **kwargs_102421)
        
        # Assigning a type to the variable 'A_round_trip' (line 350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'A_round_trip', dot_call_result_102422)
        
        # Call to assert_allclose(...): (line 351)
        # Processing the call arguments (line 351)
        # Getting the type of 'A_round_trip' (line 351)
        A_round_trip_102424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 24), 'A_round_trip', False)
        # Getting the type of 'A' (line 351)
        A_102425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 38), 'A', False)
        # Processing the call keyword arguments (line 351)
        float_102426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 46), 'float')
        keyword_102427 = float_102426
        kwargs_102428 = {'rtol': keyword_102427}
        # Getting the type of 'assert_allclose' (line 351)
        assert_allclose_102423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 351)
        assert_allclose_call_result_102429 = invoke(stypy.reporting.localization.Localization(__file__, 351, 8), assert_allclose_102423, *[A_round_trip_102424, A_102425], **kwargs_102428)
        
        
        # Call to assert_allclose(...): (line 352)
        # Processing the call arguments (line 352)
        
        # Call to tril(...): (line 352)
        # Processing the call arguments (line 352)
        # Getting the type of 'A_round_trip' (line 352)
        A_round_trip_102433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 32), 'A_round_trip', False)
        # Processing the call keyword arguments (line 352)
        kwargs_102434 = {}
        # Getting the type of 'np' (line 352)
        np_102431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 24), 'np', False)
        # Obtaining the member 'tril' of a type (line 352)
        tril_102432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 24), np_102431, 'tril')
        # Calling tril(args, kwargs) (line 352)
        tril_call_result_102435 = invoke(stypy.reporting.localization.Localization(__file__, 352, 24), tril_102432, *[A_round_trip_102433], **kwargs_102434)
        
        
        # Call to tril(...): (line 352)
        # Processing the call arguments (line 352)
        # Getting the type of 'A' (line 352)
        A_102438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 55), 'A', False)
        # Processing the call keyword arguments (line 352)
        kwargs_102439 = {}
        # Getting the type of 'np' (line 352)
        np_102436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 47), 'np', False)
        # Obtaining the member 'tril' of a type (line 352)
        tril_102437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 47), np_102436, 'tril')
        # Calling tril(args, kwargs) (line 352)
        tril_call_result_102440 = invoke(stypy.reporting.localization.Localization(__file__, 352, 47), tril_102437, *[A_102438], **kwargs_102439)
        
        # Processing the call keyword arguments (line 352)
        kwargs_102441 = {}
        # Getting the type of 'assert_allclose' (line 352)
        assert_allclose_102430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 352)
        assert_allclose_call_result_102442 = invoke(stypy.reporting.localization.Localization(__file__, 352, 8), assert_allclose_102430, *[tril_call_result_102435, tril_call_result_102440], **kwargs_102441)
        
        
        # ################# End of 'test_al_mohy_higham_2012_experiment_1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_al_mohy_higham_2012_experiment_1' in the type store
        # Getting the type of 'stypy_return_type' (line 346)
        stypy_return_type_102443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102443)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_al_mohy_higham_2012_experiment_1'
        return stypy_return_type_102443


    @norecursion
    def test_strict_upper_triangular(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_strict_upper_triangular'
        module_type_store = module_type_store.open_function_context('test_strict_upper_triangular', 354, 4, False)
        # Assigning a type to the variable 'self' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSqrtM.test_strict_upper_triangular.__dict__.__setitem__('stypy_localization', localization)
        TestSqrtM.test_strict_upper_triangular.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSqrtM.test_strict_upper_triangular.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSqrtM.test_strict_upper_triangular.__dict__.__setitem__('stypy_function_name', 'TestSqrtM.test_strict_upper_triangular')
        TestSqrtM.test_strict_upper_triangular.__dict__.__setitem__('stypy_param_names_list', [])
        TestSqrtM.test_strict_upper_triangular.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSqrtM.test_strict_upper_triangular.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSqrtM.test_strict_upper_triangular.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSqrtM.test_strict_upper_triangular.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSqrtM.test_strict_upper_triangular.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSqrtM.test_strict_upper_triangular.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.test_strict_upper_triangular', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_strict_upper_triangular', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_strict_upper_triangular(...)' code ##################

        
        
        # Obtaining an instance of the builtin type 'tuple' (line 356)
        tuple_102444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 356)
        # Adding element type (line 356)
        # Getting the type of 'int' (line 356)
        int_102445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 356, 18), tuple_102444, int_102445)
        # Adding element type (line 356)
        # Getting the type of 'float' (line 356)
        float_102446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 23), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 356, 18), tuple_102444, float_102446)
        
        # Testing the type of a for loop iterable (line 356)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 356, 8), tuple_102444)
        # Getting the type of the for loop variable (line 356)
        for_loop_var_102447 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 356, 8), tuple_102444)
        # Assigning a type to the variable 'dt' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 8), 'dt', for_loop_var_102447)
        # SSA begins for a for statement (line 356)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 357):
        
        # Assigning a Call to a Name (line 357):
        
        # Call to array(...): (line 357)
        # Processing the call arguments (line 357)
        
        # Obtaining an instance of the builtin type 'list' (line 357)
        list_102450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 357)
        # Adding element type (line 357)
        
        # Obtaining an instance of the builtin type 'list' (line 358)
        list_102451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 358)
        # Adding element type (line 358)
        int_102452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 358, 16), list_102451, int_102452)
        # Adding element type (line 358)
        int_102453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 358, 16), list_102451, int_102453)
        # Adding element type (line 358)
        int_102454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 358, 16), list_102451, int_102454)
        # Adding element type (line 358)
        int_102455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 358, 16), list_102451, int_102455)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 357, 25), list_102450, list_102451)
        # Adding element type (line 357)
        
        # Obtaining an instance of the builtin type 'list' (line 359)
        list_102456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 359)
        # Adding element type (line 359)
        int_102457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 16), list_102456, int_102457)
        # Adding element type (line 359)
        int_102458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 16), list_102456, int_102458)
        # Adding element type (line 359)
        int_102459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 16), list_102456, int_102459)
        # Adding element type (line 359)
        int_102460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 16), list_102456, int_102460)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 357, 25), list_102450, list_102456)
        # Adding element type (line 357)
        
        # Obtaining an instance of the builtin type 'list' (line 360)
        list_102461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 360)
        # Adding element type (line 360)
        int_102462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 360, 16), list_102461, int_102462)
        # Adding element type (line 360)
        int_102463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 360, 16), list_102461, int_102463)
        # Adding element type (line 360)
        int_102464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 360, 16), list_102461, int_102464)
        # Adding element type (line 360)
        int_102465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 360, 16), list_102461, int_102465)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 357, 25), list_102450, list_102461)
        # Adding element type (line 357)
        
        # Obtaining an instance of the builtin type 'list' (line 361)
        list_102466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 361)
        # Adding element type (line 361)
        int_102467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 361, 16), list_102466, int_102467)
        # Adding element type (line 361)
        int_102468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 361, 16), list_102466, int_102468)
        # Adding element type (line 361)
        int_102469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 361, 16), list_102466, int_102469)
        # Adding element type (line 361)
        int_102470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 361, 16), list_102466, int_102470)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 357, 25), list_102450, list_102466)
        
        # Processing the call keyword arguments (line 357)
        # Getting the type of 'dt' (line 361)
        dt_102471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 37), 'dt', False)
        keyword_102472 = dt_102471
        kwargs_102473 = {'dtype': keyword_102472}
        # Getting the type of 'np' (line 357)
        np_102448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 357)
        array_102449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 357, 16), np_102448, 'array')
        # Calling array(args, kwargs) (line 357)
        array_call_result_102474 = invoke(stypy.reporting.localization.Localization(__file__, 357, 16), array_102449, *[list_102450], **kwargs_102473)
        
        # Assigning a type to the variable 'A' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 12), 'A', array_call_result_102474)
        
        # Assigning a Call to a Tuple (line 362):
        
        # Assigning a Subscript to a Name (line 362):
        
        # Obtaining the type of the subscript
        int_102475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 12), 'int')
        
        # Call to sqrtm(...): (line 362)
        # Processing the call arguments (line 362)
        # Getting the type of 'A' (line 362)
        A_102477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 34), 'A', False)
        # Processing the call keyword arguments (line 362)
        # Getting the type of 'False' (line 362)
        False_102478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 42), 'False', False)
        keyword_102479 = False_102478
        kwargs_102480 = {'disp': keyword_102479}
        # Getting the type of 'sqrtm' (line 362)
        sqrtm_102476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 362)
        sqrtm_call_result_102481 = invoke(stypy.reporting.localization.Localization(__file__, 362, 28), sqrtm_102476, *[A_102477], **kwargs_102480)
        
        # Obtaining the member '__getitem__' of a type (line 362)
        getitem___102482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 12), sqrtm_call_result_102481, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 362)
        subscript_call_result_102483 = invoke(stypy.reporting.localization.Localization(__file__, 362, 12), getitem___102482, int_102475)
        
        # Assigning a type to the variable 'tuple_var_assignment_100577' (line 362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 12), 'tuple_var_assignment_100577', subscript_call_result_102483)
        
        # Assigning a Subscript to a Name (line 362):
        
        # Obtaining the type of the subscript
        int_102484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 12), 'int')
        
        # Call to sqrtm(...): (line 362)
        # Processing the call arguments (line 362)
        # Getting the type of 'A' (line 362)
        A_102486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 34), 'A', False)
        # Processing the call keyword arguments (line 362)
        # Getting the type of 'False' (line 362)
        False_102487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 42), 'False', False)
        keyword_102488 = False_102487
        kwargs_102489 = {'disp': keyword_102488}
        # Getting the type of 'sqrtm' (line 362)
        sqrtm_102485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 362)
        sqrtm_call_result_102490 = invoke(stypy.reporting.localization.Localization(__file__, 362, 28), sqrtm_102485, *[A_102486], **kwargs_102489)
        
        # Obtaining the member '__getitem__' of a type (line 362)
        getitem___102491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 12), sqrtm_call_result_102490, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 362)
        subscript_call_result_102492 = invoke(stypy.reporting.localization.Localization(__file__, 362, 12), getitem___102491, int_102484)
        
        # Assigning a type to the variable 'tuple_var_assignment_100578' (line 362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 12), 'tuple_var_assignment_100578', subscript_call_result_102492)
        
        # Assigning a Name to a Name (line 362):
        # Getting the type of 'tuple_var_assignment_100577' (line 362)
        tuple_var_assignment_100577_102493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 12), 'tuple_var_assignment_100577')
        # Assigning a type to the variable 'A_sqrtm' (line 362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 12), 'A_sqrtm', tuple_var_assignment_100577_102493)
        
        # Assigning a Name to a Name (line 362):
        # Getting the type of 'tuple_var_assignment_100578' (line 362)
        tuple_var_assignment_100578_102494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 12), 'tuple_var_assignment_100578')
        # Assigning a type to the variable 'info' (line 362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 21), 'info', tuple_var_assignment_100578_102494)
        
        # Call to assert_(...): (line 363)
        # Processing the call arguments (line 363)
        
        # Call to all(...): (line 363)
        # Processing the call keyword arguments (line 363)
        kwargs_102502 = {}
        
        # Call to isnan(...): (line 363)
        # Processing the call arguments (line 363)
        # Getting the type of 'A_sqrtm' (line 363)
        A_sqrtm_102498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 29), 'A_sqrtm', False)
        # Processing the call keyword arguments (line 363)
        kwargs_102499 = {}
        # Getting the type of 'np' (line 363)
        np_102496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 20), 'np', False)
        # Obtaining the member 'isnan' of a type (line 363)
        isnan_102497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 20), np_102496, 'isnan')
        # Calling isnan(args, kwargs) (line 363)
        isnan_call_result_102500 = invoke(stypy.reporting.localization.Localization(__file__, 363, 20), isnan_102497, *[A_sqrtm_102498], **kwargs_102499)
        
        # Obtaining the member 'all' of a type (line 363)
        all_102501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 20), isnan_call_result_102500, 'all')
        # Calling all(args, kwargs) (line 363)
        all_call_result_102503 = invoke(stypy.reporting.localization.Localization(__file__, 363, 20), all_102501, *[], **kwargs_102502)
        
        # Processing the call keyword arguments (line 363)
        kwargs_102504 = {}
        # Getting the type of 'assert_' (line 363)
        assert__102495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 363)
        assert__call_result_102505 = invoke(stypy.reporting.localization.Localization(__file__, 363, 12), assert__102495, *[all_call_result_102503], **kwargs_102504)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_strict_upper_triangular(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_strict_upper_triangular' in the type store
        # Getting the type of 'stypy_return_type' (line 354)
        stypy_return_type_102506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102506)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_strict_upper_triangular'
        return stypy_return_type_102506


    @norecursion
    def test_weird_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_weird_matrix'
        module_type_store = module_type_store.open_function_context('test_weird_matrix', 365, 4, False)
        # Assigning a type to the variable 'self' (line 366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSqrtM.test_weird_matrix.__dict__.__setitem__('stypy_localization', localization)
        TestSqrtM.test_weird_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSqrtM.test_weird_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSqrtM.test_weird_matrix.__dict__.__setitem__('stypy_function_name', 'TestSqrtM.test_weird_matrix')
        TestSqrtM.test_weird_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        TestSqrtM.test_weird_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSqrtM.test_weird_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSqrtM.test_weird_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSqrtM.test_weird_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSqrtM.test_weird_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSqrtM.test_weird_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.test_weird_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_weird_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_weird_matrix(...)' code ##################

        
        
        # Obtaining an instance of the builtin type 'tuple' (line 367)
        tuple_102507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 367)
        # Adding element type (line 367)
        # Getting the type of 'int' (line 367)
        int_102508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 367, 18), tuple_102507, int_102508)
        # Adding element type (line 367)
        # Getting the type of 'float' (line 367)
        float_102509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 23), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 367, 18), tuple_102507, float_102509)
        
        # Testing the type of a for loop iterable (line 367)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 367, 8), tuple_102507)
        # Getting the type of the for loop variable (line 367)
        for_loop_var_102510 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 367, 8), tuple_102507)
        # Assigning a type to the variable 'dt' (line 367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 8), 'dt', for_loop_var_102510)
        # SSA begins for a for statement (line 367)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 368):
        
        # Assigning a Call to a Name (line 368):
        
        # Call to array(...): (line 368)
        # Processing the call arguments (line 368)
        
        # Obtaining an instance of the builtin type 'list' (line 368)
        list_102513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 368, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 368)
        # Adding element type (line 368)
        
        # Obtaining an instance of the builtin type 'list' (line 369)
        list_102514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 369)
        # Adding element type (line 369)
        int_102515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 369, 16), list_102514, int_102515)
        # Adding element type (line 369)
        int_102516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 369, 16), list_102514, int_102516)
        # Adding element type (line 369)
        int_102517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 369, 16), list_102514, int_102517)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 368, 25), list_102513, list_102514)
        # Adding element type (line 368)
        
        # Obtaining an instance of the builtin type 'list' (line 370)
        list_102518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 370)
        # Adding element type (line 370)
        int_102519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 370, 16), list_102518, int_102519)
        # Adding element type (line 370)
        int_102520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 370, 16), list_102518, int_102520)
        # Adding element type (line 370)
        int_102521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 370, 16), list_102518, int_102521)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 368, 25), list_102513, list_102518)
        # Adding element type (line 368)
        
        # Obtaining an instance of the builtin type 'list' (line 371)
        list_102522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 371)
        # Adding element type (line 371)
        int_102523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 371, 16), list_102522, int_102523)
        # Adding element type (line 371)
        int_102524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 371, 16), list_102522, int_102524)
        # Adding element type (line 371)
        int_102525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 371, 16), list_102522, int_102525)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 368, 25), list_102513, list_102522)
        
        # Processing the call keyword arguments (line 368)
        # Getting the type of 'dt' (line 371)
        dt_102526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 34), 'dt', False)
        keyword_102527 = dt_102526
        kwargs_102528 = {'dtype': keyword_102527}
        # Getting the type of 'np' (line 368)
        np_102511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 368)
        array_102512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 16), np_102511, 'array')
        # Calling array(args, kwargs) (line 368)
        array_call_result_102529 = invoke(stypy.reporting.localization.Localization(__file__, 368, 16), array_102512, *[list_102513], **kwargs_102528)
        
        # Assigning a type to the variable 'A' (line 368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 12), 'A', array_call_result_102529)
        
        # Assigning a Call to a Name (line 372):
        
        # Assigning a Call to a Name (line 372):
        
        # Call to array(...): (line 372)
        # Processing the call arguments (line 372)
        
        # Obtaining an instance of the builtin type 'list' (line 372)
        list_102532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 372, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 372)
        # Adding element type (line 372)
        
        # Obtaining an instance of the builtin type 'list' (line 373)
        list_102533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 373)
        # Adding element type (line 373)
        int_102534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 373, 16), list_102533, int_102534)
        # Adding element type (line 373)
        int_102535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 373, 16), list_102533, int_102535)
        # Adding element type (line 373)
        int_102536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 373, 16), list_102533, int_102536)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 372, 25), list_102532, list_102533)
        # Adding element type (line 372)
        
        # Obtaining an instance of the builtin type 'list' (line 374)
        list_102537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 374)
        # Adding element type (line 374)
        int_102538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 374, 16), list_102537, int_102538)
        # Adding element type (line 374)
        int_102539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 374, 16), list_102537, int_102539)
        # Adding element type (line 374)
        int_102540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 374, 16), list_102537, int_102540)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 372, 25), list_102532, list_102537)
        # Adding element type (line 372)
        
        # Obtaining an instance of the builtin type 'list' (line 375)
        list_102541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 375)
        # Adding element type (line 375)
        int_102542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 375, 16), list_102541, int_102542)
        # Adding element type (line 375)
        int_102543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 375, 16), list_102541, int_102543)
        # Adding element type (line 375)
        int_102544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 375, 16), list_102541, int_102544)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 372, 25), list_102532, list_102541)
        
        # Processing the call keyword arguments (line 372)
        # Getting the type of 'dt' (line 375)
        dt_102545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 34), 'dt', False)
        keyword_102546 = dt_102545
        kwargs_102547 = {'dtype': keyword_102546}
        # Getting the type of 'np' (line 372)
        np_102530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 372)
        array_102531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 16), np_102530, 'array')
        # Calling array(args, kwargs) (line 372)
        array_call_result_102548 = invoke(stypy.reporting.localization.Localization(__file__, 372, 16), array_102531, *[list_102532], **kwargs_102547)
        
        # Assigning a type to the variable 'B' (line 372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 12), 'B', array_call_result_102548)
        
        # Call to assert_array_equal(...): (line 376)
        # Processing the call arguments (line 376)
        # Getting the type of 'B' (line 376)
        B_102550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 31), 'B', False)
        
        # Call to dot(...): (line 376)
        # Processing the call arguments (line 376)
        # Getting the type of 'A' (line 376)
        A_102553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 40), 'A', False)
        # Processing the call keyword arguments (line 376)
        kwargs_102554 = {}
        # Getting the type of 'A' (line 376)
        A_102551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 34), 'A', False)
        # Obtaining the member 'dot' of a type (line 376)
        dot_102552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 34), A_102551, 'dot')
        # Calling dot(args, kwargs) (line 376)
        dot_call_result_102555 = invoke(stypy.reporting.localization.Localization(__file__, 376, 34), dot_102552, *[A_102553], **kwargs_102554)
        
        # Processing the call keyword arguments (line 376)
        kwargs_102556 = {}
        # Getting the type of 'assert_array_equal' (line 376)
        assert_array_equal_102549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 12), 'assert_array_equal', False)
        # Calling assert_array_equal(args, kwargs) (line 376)
        assert_array_equal_call_result_102557 = invoke(stypy.reporting.localization.Localization(__file__, 376, 12), assert_array_equal_102549, *[B_102550, dot_call_result_102555], **kwargs_102556)
        
        
        # Assigning a Call to a Tuple (line 379):
        
        # Assigning a Subscript to a Name (line 379):
        
        # Obtaining the type of the subscript
        int_102558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 12), 'int')
        
        # Call to sqrtm(...): (line 379)
        # Processing the call arguments (line 379)
        # Getting the type of 'B' (line 379)
        B_102560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 34), 'B', False)
        # Processing the call keyword arguments (line 379)
        # Getting the type of 'False' (line 379)
        False_102561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 42), 'False', False)
        keyword_102562 = False_102561
        kwargs_102563 = {'disp': keyword_102562}
        # Getting the type of 'sqrtm' (line 379)
        sqrtm_102559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 379)
        sqrtm_call_result_102564 = invoke(stypy.reporting.localization.Localization(__file__, 379, 28), sqrtm_102559, *[B_102560], **kwargs_102563)
        
        # Obtaining the member '__getitem__' of a type (line 379)
        getitem___102565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 12), sqrtm_call_result_102564, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 379)
        subscript_call_result_102566 = invoke(stypy.reporting.localization.Localization(__file__, 379, 12), getitem___102565, int_102558)
        
        # Assigning a type to the variable 'tuple_var_assignment_100579' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'tuple_var_assignment_100579', subscript_call_result_102566)
        
        # Assigning a Subscript to a Name (line 379):
        
        # Obtaining the type of the subscript
        int_102567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 12), 'int')
        
        # Call to sqrtm(...): (line 379)
        # Processing the call arguments (line 379)
        # Getting the type of 'B' (line 379)
        B_102569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 34), 'B', False)
        # Processing the call keyword arguments (line 379)
        # Getting the type of 'False' (line 379)
        False_102570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 42), 'False', False)
        keyword_102571 = False_102570
        kwargs_102572 = {'disp': keyword_102571}
        # Getting the type of 'sqrtm' (line 379)
        sqrtm_102568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 28), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 379)
        sqrtm_call_result_102573 = invoke(stypy.reporting.localization.Localization(__file__, 379, 28), sqrtm_102568, *[B_102569], **kwargs_102572)
        
        # Obtaining the member '__getitem__' of a type (line 379)
        getitem___102574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 12), sqrtm_call_result_102573, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 379)
        subscript_call_result_102575 = invoke(stypy.reporting.localization.Localization(__file__, 379, 12), getitem___102574, int_102567)
        
        # Assigning a type to the variable 'tuple_var_assignment_100580' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'tuple_var_assignment_100580', subscript_call_result_102575)
        
        # Assigning a Name to a Name (line 379):
        # Getting the type of 'tuple_var_assignment_100579' (line 379)
        tuple_var_assignment_100579_102576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'tuple_var_assignment_100579')
        # Assigning a type to the variable 'B_sqrtm' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'B_sqrtm', tuple_var_assignment_100579_102576)
        
        # Assigning a Name to a Name (line 379):
        # Getting the type of 'tuple_var_assignment_100580' (line 379)
        tuple_var_assignment_100580_102577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'tuple_var_assignment_100580')
        # Assigning a type to the variable 'info' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 21), 'info', tuple_var_assignment_100580_102577)
        
        # Call to assert_(...): (line 380)
        # Processing the call arguments (line 380)
        
        # Call to all(...): (line 380)
        # Processing the call keyword arguments (line 380)
        kwargs_102585 = {}
        
        # Call to isnan(...): (line 380)
        # Processing the call arguments (line 380)
        # Getting the type of 'B_sqrtm' (line 380)
        B_sqrtm_102581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 29), 'B_sqrtm', False)
        # Processing the call keyword arguments (line 380)
        kwargs_102582 = {}
        # Getting the type of 'np' (line 380)
        np_102579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 20), 'np', False)
        # Obtaining the member 'isnan' of a type (line 380)
        isnan_102580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 20), np_102579, 'isnan')
        # Calling isnan(args, kwargs) (line 380)
        isnan_call_result_102583 = invoke(stypy.reporting.localization.Localization(__file__, 380, 20), isnan_102580, *[B_sqrtm_102581], **kwargs_102582)
        
        # Obtaining the member 'all' of a type (line 380)
        all_102584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 20), isnan_call_result_102583, 'all')
        # Calling all(args, kwargs) (line 380)
        all_call_result_102586 = invoke(stypy.reporting.localization.Localization(__file__, 380, 20), all_102584, *[], **kwargs_102585)
        
        # Processing the call keyword arguments (line 380)
        kwargs_102587 = {}
        # Getting the type of 'assert_' (line 380)
        assert__102578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 380)
        assert__call_result_102588 = invoke(stypy.reporting.localization.Localization(__file__, 380, 12), assert__102578, *[all_call_result_102586], **kwargs_102587)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_weird_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_weird_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 365)
        stypy_return_type_102589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102589)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_weird_matrix'
        return stypy_return_type_102589


    @norecursion
    def test_disp(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_disp'
        module_type_store = module_type_store.open_function_context('test_disp', 382, 4, False)
        # Assigning a type to the variable 'self' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSqrtM.test_disp.__dict__.__setitem__('stypy_localization', localization)
        TestSqrtM.test_disp.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSqrtM.test_disp.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSqrtM.test_disp.__dict__.__setitem__('stypy_function_name', 'TestSqrtM.test_disp')
        TestSqrtM.test_disp.__dict__.__setitem__('stypy_param_names_list', [])
        TestSqrtM.test_disp.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSqrtM.test_disp.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSqrtM.test_disp.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSqrtM.test_disp.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSqrtM.test_disp.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSqrtM.test_disp.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.test_disp', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_disp', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_disp(...)' code ##################

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 383, 8))
        
        # 'from io import StringIO' statement (line 383)
        try:
            from io import StringIO

        except:
            StringIO = UndefinedType
        import_from_module(stypy.reporting.localization.Localization(__file__, 383, 8), 'io', None, module_type_store, ['StringIO'], [StringIO])
        
        
        # Call to seed(...): (line 384)
        # Processing the call arguments (line 384)
        int_102593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 23), 'int')
        # Processing the call keyword arguments (line 384)
        kwargs_102594 = {}
        # Getting the type of 'np' (line 384)
        np_102590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 384)
        random_102591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 8), np_102590, 'random')
        # Obtaining the member 'seed' of a type (line 384)
        seed_102592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 8), random_102591, 'seed')
        # Calling seed(args, kwargs) (line 384)
        seed_call_result_102595 = invoke(stypy.reporting.localization.Localization(__file__, 384, 8), seed_102592, *[int_102593], **kwargs_102594)
        
        
        # Assigning a Call to a Name (line 386):
        
        # Assigning a Call to a Name (line 386):
        
        # Call to rand(...): (line 386)
        # Processing the call arguments (line 386)
        int_102599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 27), 'int')
        int_102600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 30), 'int')
        # Processing the call keyword arguments (line 386)
        kwargs_102601 = {}
        # Getting the type of 'np' (line 386)
        np_102596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'np', False)
        # Obtaining the member 'random' of a type (line 386)
        random_102597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 12), np_102596, 'random')
        # Obtaining the member 'rand' of a type (line 386)
        rand_102598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 12), random_102597, 'rand')
        # Calling rand(args, kwargs) (line 386)
        rand_call_result_102602 = invoke(stypy.reporting.localization.Localization(__file__, 386, 12), rand_102598, *[int_102599, int_102600], **kwargs_102601)
        
        # Assigning a type to the variable 'A' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 8), 'A', rand_call_result_102602)
        
        # Assigning a Call to a Name (line 387):
        
        # Assigning a Call to a Name (line 387):
        
        # Call to sqrtm(...): (line 387)
        # Processing the call arguments (line 387)
        # Getting the type of 'A' (line 387)
        A_102604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 18), 'A', False)
        # Processing the call keyword arguments (line 387)
        # Getting the type of 'True' (line 387)
        True_102605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 26), 'True', False)
        keyword_102606 = True_102605
        kwargs_102607 = {'disp': keyword_102606}
        # Getting the type of 'sqrtm' (line 387)
        sqrtm_102603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 12), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 387)
        sqrtm_call_result_102608 = invoke(stypy.reporting.localization.Localization(__file__, 387, 12), sqrtm_102603, *[A_102604], **kwargs_102607)
        
        # Assigning a type to the variable 'B' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 8), 'B', sqrtm_call_result_102608)
        
        # Call to assert_allclose(...): (line 388)
        # Processing the call arguments (line 388)
        
        # Call to dot(...): (line 388)
        # Processing the call arguments (line 388)
        # Getting the type of 'B' (line 388)
        B_102612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 30), 'B', False)
        # Processing the call keyword arguments (line 388)
        kwargs_102613 = {}
        # Getting the type of 'B' (line 388)
        B_102610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 24), 'B', False)
        # Obtaining the member 'dot' of a type (line 388)
        dot_102611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 24), B_102610, 'dot')
        # Calling dot(args, kwargs) (line 388)
        dot_call_result_102614 = invoke(stypy.reporting.localization.Localization(__file__, 388, 24), dot_102611, *[B_102612], **kwargs_102613)
        
        # Getting the type of 'A' (line 388)
        A_102615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 34), 'A', False)
        # Processing the call keyword arguments (line 388)
        kwargs_102616 = {}
        # Getting the type of 'assert_allclose' (line 388)
        assert_allclose_102609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 388)
        assert_allclose_call_result_102617 = invoke(stypy.reporting.localization.Localization(__file__, 388, 8), assert_allclose_102609, *[dot_call_result_102614, A_102615], **kwargs_102616)
        
        
        # ################# End of 'test_disp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_disp' in the type store
        # Getting the type of 'stypy_return_type' (line 382)
        stypy_return_type_102618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102618)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_disp'
        return stypy_return_type_102618


    @norecursion
    def test_opposite_sign_complex_eigenvalues(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_opposite_sign_complex_eigenvalues'
        module_type_store = module_type_store.open_function_context('test_opposite_sign_complex_eigenvalues', 390, 4, False)
        # Assigning a type to the variable 'self' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestSqrtM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_localization', localization)
        TestSqrtM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestSqrtM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestSqrtM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_function_name', 'TestSqrtM.test_opposite_sign_complex_eigenvalues')
        TestSqrtM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_param_names_list', [])
        TestSqrtM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestSqrtM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestSqrtM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestSqrtM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestSqrtM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestSqrtM.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.test_opposite_sign_complex_eigenvalues', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_opposite_sign_complex_eigenvalues', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_opposite_sign_complex_eigenvalues(...)' code ##################

        
        # Assigning a List to a Name (line 391):
        
        # Assigning a List to a Name (line 391):
        
        # Obtaining an instance of the builtin type 'list' (line 391)
        list_102619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 391)
        # Adding element type (line 391)
        
        # Obtaining an instance of the builtin type 'list' (line 391)
        list_102620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 391)
        # Adding element type (line 391)
        complex_102621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 14), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 391, 13), list_102620, complex_102621)
        # Adding element type (line 391)
        int_102622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 391, 13), list_102620, int_102622)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 391, 12), list_102619, list_102620)
        # Adding element type (line 391)
        
        # Obtaining an instance of the builtin type 'list' (line 391)
        list_102623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 391)
        # Adding element type (line 391)
        int_102624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 391, 22), list_102623, int_102624)
        # Adding element type (line 391)
        complex_102625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 26), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 391, 22), list_102623, complex_102625)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 391, 12), list_102619, list_102623)
        
        # Assigning a type to the variable 'M' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'M', list_102619)
        
        # Assigning a List to a Name (line 392):
        
        # Assigning a List to a Name (line 392):
        
        # Obtaining an instance of the builtin type 'list' (line 392)
        list_102626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 392)
        # Adding element type (line 392)
        
        # Obtaining an instance of the builtin type 'list' (line 392)
        list_102627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 392)
        # Adding element type (line 392)
        int_102628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 14), 'int')
        complex_102629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 16), 'complex')
        # Applying the binary operator '+' (line 392)
        result_add_102630 = python_operator(stypy.reporting.localization.Localization(__file__, 392, 14), '+', int_102628, complex_102629)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 392, 13), list_102627, result_add_102630)
        # Adding element type (line 392)
        int_102631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 392, 13), list_102627, int_102631)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 392, 12), list_102626, list_102627)
        # Adding element type (line 392)
        
        # Obtaining an instance of the builtin type 'list' (line 392)
        list_102632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 392)
        # Adding element type (line 392)
        int_102633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 392, 24), list_102632, int_102633)
        # Adding element type (line 392)
        int_102634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 28), 'int')
        complex_102635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 30), 'complex')
        # Applying the binary operator '-' (line 392)
        result_sub_102636 = python_operator(stypy.reporting.localization.Localization(__file__, 392, 28), '-', int_102634, complex_102635)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 392, 24), list_102632, result_sub_102636)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 392, 12), list_102626, list_102632)
        
        # Assigning a type to the variable 'R' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 8), 'R', list_102626)
        
        # Call to assert_allclose(...): (line 393)
        # Processing the call arguments (line 393)
        
        # Call to dot(...): (line 393)
        # Processing the call arguments (line 393)
        # Getting the type of 'R' (line 393)
        R_102640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 31), 'R', False)
        # Getting the type of 'R' (line 393)
        R_102641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 34), 'R', False)
        # Processing the call keyword arguments (line 393)
        kwargs_102642 = {}
        # Getting the type of 'np' (line 393)
        np_102638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 24), 'np', False)
        # Obtaining the member 'dot' of a type (line 393)
        dot_102639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 24), np_102638, 'dot')
        # Calling dot(args, kwargs) (line 393)
        dot_call_result_102643 = invoke(stypy.reporting.localization.Localization(__file__, 393, 24), dot_102639, *[R_102640, R_102641], **kwargs_102642)
        
        # Getting the type of 'M' (line 393)
        M_102644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 38), 'M', False)
        # Processing the call keyword arguments (line 393)
        float_102645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 46), 'float')
        keyword_102646 = float_102645
        kwargs_102647 = {'atol': keyword_102646}
        # Getting the type of 'assert_allclose' (line 393)
        assert_allclose_102637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 393)
        assert_allclose_call_result_102648 = invoke(stypy.reporting.localization.Localization(__file__, 393, 8), assert_allclose_102637, *[dot_call_result_102643, M_102644], **kwargs_102647)
        
        
        # Call to assert_allclose(...): (line 394)
        # Processing the call arguments (line 394)
        
        # Call to sqrtm(...): (line 394)
        # Processing the call arguments (line 394)
        # Getting the type of 'M' (line 394)
        M_102651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 30), 'M', False)
        # Processing the call keyword arguments (line 394)
        kwargs_102652 = {}
        # Getting the type of 'sqrtm' (line 394)
        sqrtm_102650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 24), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 394)
        sqrtm_call_result_102653 = invoke(stypy.reporting.localization.Localization(__file__, 394, 24), sqrtm_102650, *[M_102651], **kwargs_102652)
        
        # Getting the type of 'R' (line 394)
        R_102654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 34), 'R', False)
        # Processing the call keyword arguments (line 394)
        float_102655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 42), 'float')
        keyword_102656 = float_102655
        kwargs_102657 = {'atol': keyword_102656}
        # Getting the type of 'assert_allclose' (line 394)
        assert_allclose_102649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 394)
        assert_allclose_call_result_102658 = invoke(stypy.reporting.localization.Localization(__file__, 394, 8), assert_allclose_102649, *[sqrtm_call_result_102653, R_102654], **kwargs_102657)
        
        
        # ################# End of 'test_opposite_sign_complex_eigenvalues(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_opposite_sign_complex_eigenvalues' in the type store
        # Getting the type of 'stypy_return_type' (line 390)
        stypy_return_type_102659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102659)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_opposite_sign_complex_eigenvalues'
        return stypy_return_type_102659


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 241, 0, False)
        # Assigning a type to the variable 'self' (line 242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestSqrtM.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'TestSqrtM' (line 241)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 0), 'TestSqrtM', TestSqrtM)
# Declaration of the 'TestFractionalMatrixPower' class

class TestFractionalMatrixPower(object, ):

    @norecursion
    def test_round_trip_random_complex(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_round_trip_random_complex'
        module_type_store = module_type_store.open_function_context('test_round_trip_random_complex', 398, 4, False)
        # Assigning a type to the variable 'self' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestFractionalMatrixPower.test_round_trip_random_complex.__dict__.__setitem__('stypy_localization', localization)
        TestFractionalMatrixPower.test_round_trip_random_complex.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestFractionalMatrixPower.test_round_trip_random_complex.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestFractionalMatrixPower.test_round_trip_random_complex.__dict__.__setitem__('stypy_function_name', 'TestFractionalMatrixPower.test_round_trip_random_complex')
        TestFractionalMatrixPower.test_round_trip_random_complex.__dict__.__setitem__('stypy_param_names_list', [])
        TestFractionalMatrixPower.test_round_trip_random_complex.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestFractionalMatrixPower.test_round_trip_random_complex.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestFractionalMatrixPower.test_round_trip_random_complex.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestFractionalMatrixPower.test_round_trip_random_complex.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestFractionalMatrixPower.test_round_trip_random_complex.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestFractionalMatrixPower.test_round_trip_random_complex.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestFractionalMatrixPower.test_round_trip_random_complex', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_round_trip_random_complex', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_round_trip_random_complex(...)' code ##################

        
        # Call to seed(...): (line 399)
        # Processing the call arguments (line 399)
        int_102663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 23), 'int')
        # Processing the call keyword arguments (line 399)
        kwargs_102664 = {}
        # Getting the type of 'np' (line 399)
        np_102660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 399)
        random_102661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 8), np_102660, 'random')
        # Obtaining the member 'seed' of a type (line 399)
        seed_102662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 8), random_102661, 'seed')
        # Calling seed(args, kwargs) (line 399)
        seed_call_result_102665 = invoke(stypy.reporting.localization.Localization(__file__, 399, 8), seed_102662, *[int_102663], **kwargs_102664)
        
        
        
        # Call to range(...): (line 400)
        # Processing the call arguments (line 400)
        int_102667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 23), 'int')
        int_102668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 26), 'int')
        # Processing the call keyword arguments (line 400)
        kwargs_102669 = {}
        # Getting the type of 'range' (line 400)
        range_102666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 17), 'range', False)
        # Calling range(args, kwargs) (line 400)
        range_call_result_102670 = invoke(stypy.reporting.localization.Localization(__file__, 400, 17), range_102666, *[int_102667, int_102668], **kwargs_102669)
        
        # Testing the type of a for loop iterable (line 400)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 400, 8), range_call_result_102670)
        # Getting the type of the for loop variable (line 400)
        for_loop_var_102671 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 400, 8), range_call_result_102670)
        # Assigning a type to the variable 'p' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 8), 'p', for_loop_var_102671)
        # SSA begins for a for statement (line 400)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to range(...): (line 401)
        # Processing the call arguments (line 401)
        int_102673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 27), 'int')
        int_102674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 30), 'int')
        # Processing the call keyword arguments (line 401)
        kwargs_102675 = {}
        # Getting the type of 'range' (line 401)
        range_102672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 21), 'range', False)
        # Calling range(args, kwargs) (line 401)
        range_call_result_102676 = invoke(stypy.reporting.localization.Localization(__file__, 401, 21), range_102672, *[int_102673, int_102674], **kwargs_102675)
        
        # Testing the type of a for loop iterable (line 401)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 401, 12), range_call_result_102676)
        # Getting the type of the for loop variable (line 401)
        for_loop_var_102677 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 401, 12), range_call_result_102676)
        # Assigning a type to the variable 'n' (line 401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 12), 'n', for_loop_var_102677)
        # SSA begins for a for statement (line 401)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 402):
        
        # Assigning a BinOp to a Name (line 402):
        
        # Call to randn(...): (line 402)
        # Processing the call arguments (line 402)
        # Getting the type of 'n' (line 402)
        n_102681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 45), 'n', False)
        # Getting the type of 'n' (line 402)
        n_102682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 48), 'n', False)
        # Processing the call keyword arguments (line 402)
        kwargs_102683 = {}
        # Getting the type of 'np' (line 402)
        np_102678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 29), 'np', False)
        # Obtaining the member 'random' of a type (line 402)
        random_102679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 29), np_102678, 'random')
        # Obtaining the member 'randn' of a type (line 402)
        randn_102680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 29), random_102679, 'randn')
        # Calling randn(args, kwargs) (line 402)
        randn_call_result_102684 = invoke(stypy.reporting.localization.Localization(__file__, 402, 29), randn_102680, *[n_102681, n_102682], **kwargs_102683)
        
        complex_102685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 53), 'complex')
        
        # Call to randn(...): (line 402)
        # Processing the call arguments (line 402)
        # Getting the type of 'n' (line 402)
        n_102689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 74), 'n', False)
        # Getting the type of 'n' (line 402)
        n_102690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 77), 'n', False)
        # Processing the call keyword arguments (line 402)
        kwargs_102691 = {}
        # Getting the type of 'np' (line 402)
        np_102686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 58), 'np', False)
        # Obtaining the member 'random' of a type (line 402)
        random_102687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 58), np_102686, 'random')
        # Obtaining the member 'randn' of a type (line 402)
        randn_102688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 58), random_102687, 'randn')
        # Calling randn(args, kwargs) (line 402)
        randn_call_result_102692 = invoke(stypy.reporting.localization.Localization(__file__, 402, 58), randn_102688, *[n_102689, n_102690], **kwargs_102691)
        
        # Applying the binary operator '*' (line 402)
        result_mul_102693 = python_operator(stypy.reporting.localization.Localization(__file__, 402, 53), '*', complex_102685, randn_call_result_102692)
        
        # Applying the binary operator '+' (line 402)
        result_add_102694 = python_operator(stypy.reporting.localization.Localization(__file__, 402, 29), '+', randn_call_result_102684, result_mul_102693)
        
        # Assigning a type to the variable 'M_unscaled' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 16), 'M_unscaled', result_add_102694)
        
        
        # Call to logspace(...): (line 403)
        # Processing the call arguments (line 403)
        int_102697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 41), 'int')
        int_102698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 45), 'int')
        int_102699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 48), 'int')
        # Processing the call keyword arguments (line 403)
        kwargs_102700 = {}
        # Getting the type of 'np' (line 403)
        np_102695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 29), 'np', False)
        # Obtaining the member 'logspace' of a type (line 403)
        logspace_102696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 29), np_102695, 'logspace')
        # Calling logspace(args, kwargs) (line 403)
        logspace_call_result_102701 = invoke(stypy.reporting.localization.Localization(__file__, 403, 29), logspace_102696, *[int_102697, int_102698, int_102699], **kwargs_102700)
        
        # Testing the type of a for loop iterable (line 403)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 403, 16), logspace_call_result_102701)
        # Getting the type of the for loop variable (line 403)
        for_loop_var_102702 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 403, 16), logspace_call_result_102701)
        # Assigning a type to the variable 'scale' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 16), 'scale', for_loop_var_102702)
        # SSA begins for a for statement (line 403)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 404):
        
        # Assigning a BinOp to a Name (line 404):
        # Getting the type of 'M_unscaled' (line 404)
        M_unscaled_102703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 24), 'M_unscaled')
        # Getting the type of 'scale' (line 404)
        scale_102704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 37), 'scale')
        # Applying the binary operator '*' (line 404)
        result_mul_102705 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 24), '*', M_unscaled_102703, scale_102704)
        
        # Assigning a type to the variable 'M' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 20), 'M', result_mul_102705)
        
        # Assigning a Call to a Name (line 405):
        
        # Assigning a Call to a Name (line 405):
        
        # Call to fractional_matrix_power(...): (line 405)
        # Processing the call arguments (line 405)
        # Getting the type of 'M' (line 405)
        M_102707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 53), 'M', False)
        int_102708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 56), 'int')
        # Getting the type of 'p' (line 405)
        p_102709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 58), 'p', False)
        # Applying the binary operator 'div' (line 405)
        result_div_102710 = python_operator(stypy.reporting.localization.Localization(__file__, 405, 56), 'div', int_102708, p_102709)
        
        # Processing the call keyword arguments (line 405)
        kwargs_102711 = {}
        # Getting the type of 'fractional_matrix_power' (line 405)
        fractional_matrix_power_102706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 29), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 405)
        fractional_matrix_power_call_result_102712 = invoke(stypy.reporting.localization.Localization(__file__, 405, 29), fractional_matrix_power_102706, *[M_102707, result_div_102710], **kwargs_102711)
        
        # Assigning a type to the variable 'M_root' (line 405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 20), 'M_root', fractional_matrix_power_call_result_102712)
        
        # Assigning a Call to a Name (line 406):
        
        # Assigning a Call to a Name (line 406):
        
        # Call to matrix_power(...): (line 406)
        # Processing the call arguments (line 406)
        # Getting the type of 'M_root' (line 406)
        M_root_102716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 58), 'M_root', False)
        # Getting the type of 'p' (line 406)
        p_102717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 66), 'p', False)
        # Processing the call keyword arguments (line 406)
        kwargs_102718 = {}
        # Getting the type of 'np' (line 406)
        np_102713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 35), 'np', False)
        # Obtaining the member 'linalg' of a type (line 406)
        linalg_102714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 35), np_102713, 'linalg')
        # Obtaining the member 'matrix_power' of a type (line 406)
        matrix_power_102715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 35), linalg_102714, 'matrix_power')
        # Calling matrix_power(args, kwargs) (line 406)
        matrix_power_call_result_102719 = invoke(stypy.reporting.localization.Localization(__file__, 406, 35), matrix_power_102715, *[M_root_102716, p_102717], **kwargs_102718)
        
        # Assigning a type to the variable 'M_round_trip' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 20), 'M_round_trip', matrix_power_call_result_102719)
        
        # Call to assert_allclose(...): (line 407)
        # Processing the call arguments (line 407)
        # Getting the type of 'M_round_trip' (line 407)
        M_round_trip_102721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 36), 'M_round_trip', False)
        # Getting the type of 'M' (line 407)
        M_102722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 50), 'M', False)
        # Processing the call keyword arguments (line 407)
        kwargs_102723 = {}
        # Getting the type of 'assert_allclose' (line 407)
        assert_allclose_102720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 20), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 407)
        assert_allclose_call_result_102724 = invoke(stypy.reporting.localization.Localization(__file__, 407, 20), assert_allclose_102720, *[M_round_trip_102721, M_102722], **kwargs_102723)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_round_trip_random_complex(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_round_trip_random_complex' in the type store
        # Getting the type of 'stypy_return_type' (line 398)
        stypy_return_type_102725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102725)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_round_trip_random_complex'
        return stypy_return_type_102725


    @norecursion
    def test_round_trip_random_float(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_round_trip_random_float'
        module_type_store = module_type_store.open_function_context('test_round_trip_random_float', 409, 4, False)
        # Assigning a type to the variable 'self' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestFractionalMatrixPower.test_round_trip_random_float.__dict__.__setitem__('stypy_localization', localization)
        TestFractionalMatrixPower.test_round_trip_random_float.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestFractionalMatrixPower.test_round_trip_random_float.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestFractionalMatrixPower.test_round_trip_random_float.__dict__.__setitem__('stypy_function_name', 'TestFractionalMatrixPower.test_round_trip_random_float')
        TestFractionalMatrixPower.test_round_trip_random_float.__dict__.__setitem__('stypy_param_names_list', [])
        TestFractionalMatrixPower.test_round_trip_random_float.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestFractionalMatrixPower.test_round_trip_random_float.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestFractionalMatrixPower.test_round_trip_random_float.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestFractionalMatrixPower.test_round_trip_random_float.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestFractionalMatrixPower.test_round_trip_random_float.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestFractionalMatrixPower.test_round_trip_random_float.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestFractionalMatrixPower.test_round_trip_random_float', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_round_trip_random_float', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_round_trip_random_float(...)' code ##################

        
        # Call to seed(...): (line 414)
        # Processing the call arguments (line 414)
        int_102729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, 23), 'int')
        # Processing the call keyword arguments (line 414)
        kwargs_102730 = {}
        # Getting the type of 'np' (line 414)
        np_102726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 414)
        random_102727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 8), np_102726, 'random')
        # Obtaining the member 'seed' of a type (line 414)
        seed_102728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 8), random_102727, 'seed')
        # Calling seed(args, kwargs) (line 414)
        seed_call_result_102731 = invoke(stypy.reporting.localization.Localization(__file__, 414, 8), seed_102728, *[int_102729], **kwargs_102730)
        
        
        
        # Call to range(...): (line 415)
        # Processing the call arguments (line 415)
        int_102733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 23), 'int')
        int_102734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 26), 'int')
        # Processing the call keyword arguments (line 415)
        kwargs_102735 = {}
        # Getting the type of 'range' (line 415)
        range_102732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 17), 'range', False)
        # Calling range(args, kwargs) (line 415)
        range_call_result_102736 = invoke(stypy.reporting.localization.Localization(__file__, 415, 17), range_102732, *[int_102733, int_102734], **kwargs_102735)
        
        # Testing the type of a for loop iterable (line 415)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 415, 8), range_call_result_102736)
        # Getting the type of the for loop variable (line 415)
        for_loop_var_102737 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 415, 8), range_call_result_102736)
        # Assigning a type to the variable 'p' (line 415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 8), 'p', for_loop_var_102737)
        # SSA begins for a for statement (line 415)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to range(...): (line 416)
        # Processing the call arguments (line 416)
        int_102739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 27), 'int')
        int_102740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 30), 'int')
        # Processing the call keyword arguments (line 416)
        kwargs_102741 = {}
        # Getting the type of 'range' (line 416)
        range_102738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 21), 'range', False)
        # Calling range(args, kwargs) (line 416)
        range_call_result_102742 = invoke(stypy.reporting.localization.Localization(__file__, 416, 21), range_102738, *[int_102739, int_102740], **kwargs_102741)
        
        # Testing the type of a for loop iterable (line 416)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 416, 12), range_call_result_102742)
        # Getting the type of the for loop variable (line 416)
        for_loop_var_102743 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 416, 12), range_call_result_102742)
        # Assigning a type to the variable 'n' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 12), 'n', for_loop_var_102743)
        # SSA begins for a for statement (line 416)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 417):
        
        # Assigning a Call to a Name (line 417):
        
        # Call to randn(...): (line 417)
        # Processing the call arguments (line 417)
        # Getting the type of 'n' (line 417)
        n_102747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 45), 'n', False)
        # Getting the type of 'n' (line 417)
        n_102748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 48), 'n', False)
        # Processing the call keyword arguments (line 417)
        kwargs_102749 = {}
        # Getting the type of 'np' (line 417)
        np_102744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 29), 'np', False)
        # Obtaining the member 'random' of a type (line 417)
        random_102745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 29), np_102744, 'random')
        # Obtaining the member 'randn' of a type (line 417)
        randn_102746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 29), random_102745, 'randn')
        # Calling randn(args, kwargs) (line 417)
        randn_call_result_102750 = invoke(stypy.reporting.localization.Localization(__file__, 417, 29), randn_102746, *[n_102747, n_102748], **kwargs_102749)
        
        # Assigning a type to the variable 'M_unscaled' (line 417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 16), 'M_unscaled', randn_call_result_102750)
        
        
        # Call to logspace(...): (line 418)
        # Processing the call arguments (line 418)
        int_102753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 41), 'int')
        int_102754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 45), 'int')
        int_102755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 48), 'int')
        # Processing the call keyword arguments (line 418)
        kwargs_102756 = {}
        # Getting the type of 'np' (line 418)
        np_102751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 29), 'np', False)
        # Obtaining the member 'logspace' of a type (line 418)
        logspace_102752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 29), np_102751, 'logspace')
        # Calling logspace(args, kwargs) (line 418)
        logspace_call_result_102757 = invoke(stypy.reporting.localization.Localization(__file__, 418, 29), logspace_102752, *[int_102753, int_102754, int_102755], **kwargs_102756)
        
        # Testing the type of a for loop iterable (line 418)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 418, 16), logspace_call_result_102757)
        # Getting the type of the for loop variable (line 418)
        for_loop_var_102758 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 418, 16), logspace_call_result_102757)
        # Assigning a type to the variable 'scale' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 16), 'scale', for_loop_var_102758)
        # SSA begins for a for statement (line 418)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 419):
        
        # Assigning a BinOp to a Name (line 419):
        # Getting the type of 'M_unscaled' (line 419)
        M_unscaled_102759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 24), 'M_unscaled')
        # Getting the type of 'scale' (line 419)
        scale_102760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 37), 'scale')
        # Applying the binary operator '*' (line 419)
        result_mul_102761 = python_operator(stypy.reporting.localization.Localization(__file__, 419, 24), '*', M_unscaled_102759, scale_102760)
        
        # Assigning a type to the variable 'M' (line 419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 20), 'M', result_mul_102761)
        
        # Assigning a Call to a Name (line 420):
        
        # Assigning a Call to a Name (line 420):
        
        # Call to fractional_matrix_power(...): (line 420)
        # Processing the call arguments (line 420)
        # Getting the type of 'M' (line 420)
        M_102763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 53), 'M', False)
        int_102764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 56), 'int')
        # Getting the type of 'p' (line 420)
        p_102765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 58), 'p', False)
        # Applying the binary operator 'div' (line 420)
        result_div_102766 = python_operator(stypy.reporting.localization.Localization(__file__, 420, 56), 'div', int_102764, p_102765)
        
        # Processing the call keyword arguments (line 420)
        kwargs_102767 = {}
        # Getting the type of 'fractional_matrix_power' (line 420)
        fractional_matrix_power_102762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 29), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 420)
        fractional_matrix_power_call_result_102768 = invoke(stypy.reporting.localization.Localization(__file__, 420, 29), fractional_matrix_power_102762, *[M_102763, result_div_102766], **kwargs_102767)
        
        # Assigning a type to the variable 'M_root' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 20), 'M_root', fractional_matrix_power_call_result_102768)
        
        # Assigning a Call to a Name (line 421):
        
        # Assigning a Call to a Name (line 421):
        
        # Call to matrix_power(...): (line 421)
        # Processing the call arguments (line 421)
        # Getting the type of 'M_root' (line 421)
        M_root_102772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 58), 'M_root', False)
        # Getting the type of 'p' (line 421)
        p_102773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 66), 'p', False)
        # Processing the call keyword arguments (line 421)
        kwargs_102774 = {}
        # Getting the type of 'np' (line 421)
        np_102769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 35), 'np', False)
        # Obtaining the member 'linalg' of a type (line 421)
        linalg_102770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 35), np_102769, 'linalg')
        # Obtaining the member 'matrix_power' of a type (line 421)
        matrix_power_102771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 35), linalg_102770, 'matrix_power')
        # Calling matrix_power(args, kwargs) (line 421)
        matrix_power_call_result_102775 = invoke(stypy.reporting.localization.Localization(__file__, 421, 35), matrix_power_102771, *[M_root_102772, p_102773], **kwargs_102774)
        
        # Assigning a type to the variable 'M_round_trip' (line 421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 20), 'M_round_trip', matrix_power_call_result_102775)
        
        # Call to assert_allclose(...): (line 422)
        # Processing the call arguments (line 422)
        # Getting the type of 'M_round_trip' (line 422)
        M_round_trip_102777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 36), 'M_round_trip', False)
        # Getting the type of 'M' (line 422)
        M_102778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 50), 'M', False)
        # Processing the call keyword arguments (line 422)
        kwargs_102779 = {}
        # Getting the type of 'assert_allclose' (line 422)
        assert_allclose_102776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 20), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 422)
        assert_allclose_call_result_102780 = invoke(stypy.reporting.localization.Localization(__file__, 422, 20), assert_allclose_102776, *[M_round_trip_102777, M_102778], **kwargs_102779)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_round_trip_random_float(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_round_trip_random_float' in the type store
        # Getting the type of 'stypy_return_type' (line 409)
        stypy_return_type_102781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102781)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_round_trip_random_float'
        return stypy_return_type_102781


    @norecursion
    def test_larger_abs_fractional_matrix_powers(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_larger_abs_fractional_matrix_powers'
        module_type_store = module_type_store.open_function_context('test_larger_abs_fractional_matrix_powers', 424, 4, False)
        # Assigning a type to the variable 'self' (line 425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers.__dict__.__setitem__('stypy_localization', localization)
        TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers.__dict__.__setitem__('stypy_function_name', 'TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers')
        TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers.__dict__.__setitem__('stypy_param_names_list', [])
        TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_larger_abs_fractional_matrix_powers', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_larger_abs_fractional_matrix_powers(...)' code ##################

        
        # Call to seed(...): (line 425)
        # Processing the call arguments (line 425)
        int_102785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 425, 23), 'int')
        # Processing the call keyword arguments (line 425)
        kwargs_102786 = {}
        # Getting the type of 'np' (line 425)
        np_102782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 425)
        random_102783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 8), np_102782, 'random')
        # Obtaining the member 'seed' of a type (line 425)
        seed_102784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 8), random_102783, 'seed')
        # Calling seed(args, kwargs) (line 425)
        seed_call_result_102787 = invoke(stypy.reporting.localization.Localization(__file__, 425, 8), seed_102784, *[int_102785], **kwargs_102786)
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 426)
        tuple_102788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 426)
        # Adding element type (line 426)
        int_102789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 426, 18), tuple_102788, int_102789)
        # Adding element type (line 426)
        int_102790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 426, 18), tuple_102788, int_102790)
        # Adding element type (line 426)
        int_102791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 426, 18), tuple_102788, int_102791)
        
        # Testing the type of a for loop iterable (line 426)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 426, 8), tuple_102788)
        # Getting the type of the for loop variable (line 426)
        for_loop_var_102792 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 426, 8), tuple_102788)
        # Assigning a type to the variable 'n' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'n', for_loop_var_102792)
        # SSA begins for a for statement (line 426)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to range(...): (line 427)
        # Processing the call arguments (line 427)
        int_102794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 27), 'int')
        # Processing the call keyword arguments (line 427)
        kwargs_102795 = {}
        # Getting the type of 'range' (line 427)
        range_102793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 21), 'range', False)
        # Calling range(args, kwargs) (line 427)
        range_call_result_102796 = invoke(stypy.reporting.localization.Localization(__file__, 427, 21), range_102793, *[int_102794], **kwargs_102795)
        
        # Testing the type of a for loop iterable (line 427)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 427, 12), range_call_result_102796)
        # Getting the type of the for loop variable (line 427)
        for_loop_var_102797 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 427, 12), range_call_result_102796)
        # Assigning a type to the variable 'i' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 12), 'i', for_loop_var_102797)
        # SSA begins for a for statement (line 427)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 428):
        
        # Assigning a BinOp to a Name (line 428):
        
        # Call to randn(...): (line 428)
        # Processing the call arguments (line 428)
        # Getting the type of 'n' (line 428)
        n_102801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 36), 'n', False)
        # Getting the type of 'n' (line 428)
        n_102802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 39), 'n', False)
        # Processing the call keyword arguments (line 428)
        kwargs_102803 = {}
        # Getting the type of 'np' (line 428)
        np_102798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 20), 'np', False)
        # Obtaining the member 'random' of a type (line 428)
        random_102799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 20), np_102798, 'random')
        # Obtaining the member 'randn' of a type (line 428)
        randn_102800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 20), random_102799, 'randn')
        # Calling randn(args, kwargs) (line 428)
        randn_call_result_102804 = invoke(stypy.reporting.localization.Localization(__file__, 428, 20), randn_102800, *[n_102801, n_102802], **kwargs_102803)
        
        complex_102805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 44), 'complex')
        
        # Call to randn(...): (line 428)
        # Processing the call arguments (line 428)
        # Getting the type of 'n' (line 428)
        n_102809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 65), 'n', False)
        # Getting the type of 'n' (line 428)
        n_102810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 68), 'n', False)
        # Processing the call keyword arguments (line 428)
        kwargs_102811 = {}
        # Getting the type of 'np' (line 428)
        np_102806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 49), 'np', False)
        # Obtaining the member 'random' of a type (line 428)
        random_102807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 49), np_102806, 'random')
        # Obtaining the member 'randn' of a type (line 428)
        randn_102808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 49), random_102807, 'randn')
        # Calling randn(args, kwargs) (line 428)
        randn_call_result_102812 = invoke(stypy.reporting.localization.Localization(__file__, 428, 49), randn_102808, *[n_102809, n_102810], **kwargs_102811)
        
        # Applying the binary operator '*' (line 428)
        result_mul_102813 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 44), '*', complex_102805, randn_call_result_102812)
        
        # Applying the binary operator '+' (line 428)
        result_add_102814 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 20), '+', randn_call_result_102804, result_mul_102813)
        
        # Assigning a type to the variable 'M' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 16), 'M', result_add_102814)
        
        # Assigning a Call to a Name (line 429):
        
        # Assigning a Call to a Name (line 429):
        
        # Call to fractional_matrix_power(...): (line 429)
        # Processing the call arguments (line 429)
        # Getting the type of 'M' (line 429)
        M_102816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 54), 'M', False)
        float_102817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 57), 'float')
        # Processing the call keyword arguments (line 429)
        kwargs_102818 = {}
        # Getting the type of 'fractional_matrix_power' (line 429)
        fractional_matrix_power_102815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 30), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 429)
        fractional_matrix_power_call_result_102819 = invoke(stypy.reporting.localization.Localization(__file__, 429, 30), fractional_matrix_power_102815, *[M_102816, float_102817], **kwargs_102818)
        
        # Assigning a type to the variable 'M_one_fifth' (line 429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 16), 'M_one_fifth', fractional_matrix_power_call_result_102819)
        
        # Assigning a Call to a Name (line 431):
        
        # Assigning a Call to a Name (line 431):
        
        # Call to matrix_power(...): (line 431)
        # Processing the call arguments (line 431)
        # Getting the type of 'M_one_fifth' (line 431)
        M_one_fifth_102823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 54), 'M_one_fifth', False)
        int_102824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 67), 'int')
        # Processing the call keyword arguments (line 431)
        kwargs_102825 = {}
        # Getting the type of 'np' (line 431)
        np_102820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 31), 'np', False)
        # Obtaining the member 'linalg' of a type (line 431)
        linalg_102821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 31), np_102820, 'linalg')
        # Obtaining the member 'matrix_power' of a type (line 431)
        matrix_power_102822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 31), linalg_102821, 'matrix_power')
        # Calling matrix_power(args, kwargs) (line 431)
        matrix_power_call_result_102826 = invoke(stypy.reporting.localization.Localization(__file__, 431, 31), matrix_power_102822, *[M_one_fifth_102823, int_102824], **kwargs_102825)
        
        # Assigning a type to the variable 'M_round_trip' (line 431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 16), 'M_round_trip', matrix_power_call_result_102826)
        
        # Call to assert_allclose(...): (line 432)
        # Processing the call arguments (line 432)
        # Getting the type of 'M' (line 432)
        M_102828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 32), 'M', False)
        # Getting the type of 'M_round_trip' (line 432)
        M_round_trip_102829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 35), 'M_round_trip', False)
        # Processing the call keyword arguments (line 432)
        kwargs_102830 = {}
        # Getting the type of 'assert_allclose' (line 432)
        assert_allclose_102827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 16), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 432)
        assert_allclose_call_result_102831 = invoke(stypy.reporting.localization.Localization(__file__, 432, 16), assert_allclose_102827, *[M_102828, M_round_trip_102829], **kwargs_102830)
        
        
        # Assigning a Call to a Name (line 434):
        
        # Assigning a Call to a Name (line 434):
        
        # Call to fractional_matrix_power(...): (line 434)
        # Processing the call arguments (line 434)
        # Getting the type of 'M' (line 434)
        M_102833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 44), 'M', False)
        float_102834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 47), 'float')
        # Processing the call keyword arguments (line 434)
        kwargs_102835 = {}
        # Getting the type of 'fractional_matrix_power' (line 434)
        fractional_matrix_power_102832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 20), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 434)
        fractional_matrix_power_call_result_102836 = invoke(stypy.reporting.localization.Localization(__file__, 434, 20), fractional_matrix_power_102832, *[M_102833, float_102834], **kwargs_102835)
        
        # Assigning a type to the variable 'X' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 16), 'X', fractional_matrix_power_call_result_102836)
        
        # Assigning a Call to a Name (line 435):
        
        # Assigning a Call to a Name (line 435):
        
        # Call to matrix_power(...): (line 435)
        # Processing the call arguments (line 435)
        # Getting the type of 'M_one_fifth' (line 435)
        M_one_fifth_102840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 43), 'M_one_fifth', False)
        int_102841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 56), 'int')
        # Processing the call keyword arguments (line 435)
        kwargs_102842 = {}
        # Getting the type of 'np' (line 435)
        np_102837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 20), 'np', False)
        # Obtaining the member 'linalg' of a type (line 435)
        linalg_102838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 20), np_102837, 'linalg')
        # Obtaining the member 'matrix_power' of a type (line 435)
        matrix_power_102839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 20), linalg_102838, 'matrix_power')
        # Calling matrix_power(args, kwargs) (line 435)
        matrix_power_call_result_102843 = invoke(stypy.reporting.localization.Localization(__file__, 435, 20), matrix_power_102839, *[M_one_fifth_102840, int_102841], **kwargs_102842)
        
        # Assigning a type to the variable 'Y' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 16), 'Y', matrix_power_call_result_102843)
        
        # Call to assert_allclose(...): (line 436)
        # Processing the call arguments (line 436)
        # Getting the type of 'X' (line 436)
        X_102845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 32), 'X', False)
        # Getting the type of 'Y' (line 436)
        Y_102846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 35), 'Y', False)
        # Processing the call keyword arguments (line 436)
        kwargs_102847 = {}
        # Getting the type of 'assert_allclose' (line 436)
        assert_allclose_102844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 16), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 436)
        assert_allclose_call_result_102848 = invoke(stypy.reporting.localization.Localization(__file__, 436, 16), assert_allclose_102844, *[X_102845, Y_102846], **kwargs_102847)
        
        
        # Assigning a Call to a Name (line 438):
        
        # Assigning a Call to a Name (line 438):
        
        # Call to fractional_matrix_power(...): (line 438)
        # Processing the call arguments (line 438)
        # Getting the type of 'M' (line 438)
        M_102850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 44), 'M', False)
        float_102851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 47), 'float')
        # Processing the call keyword arguments (line 438)
        kwargs_102852 = {}
        # Getting the type of 'fractional_matrix_power' (line 438)
        fractional_matrix_power_102849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 20), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 438)
        fractional_matrix_power_call_result_102853 = invoke(stypy.reporting.localization.Localization(__file__, 438, 20), fractional_matrix_power_102849, *[M_102850, float_102851], **kwargs_102852)
        
        # Assigning a type to the variable 'X' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 16), 'X', fractional_matrix_power_call_result_102853)
        
        # Assigning a Call to a Name (line 439):
        
        # Assigning a Call to a Name (line 439):
        
        # Call to matrix_power(...): (line 439)
        # Processing the call arguments (line 439)
        # Getting the type of 'M_one_fifth' (line 439)
        M_one_fifth_102857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 43), 'M_one_fifth', False)
        int_102858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, 56), 'int')
        # Processing the call keyword arguments (line 439)
        kwargs_102859 = {}
        # Getting the type of 'np' (line 439)
        np_102854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 20), 'np', False)
        # Obtaining the member 'linalg' of a type (line 439)
        linalg_102855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 20), np_102854, 'linalg')
        # Obtaining the member 'matrix_power' of a type (line 439)
        matrix_power_102856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 20), linalg_102855, 'matrix_power')
        # Calling matrix_power(args, kwargs) (line 439)
        matrix_power_call_result_102860 = invoke(stypy.reporting.localization.Localization(__file__, 439, 20), matrix_power_102856, *[M_one_fifth_102857, int_102858], **kwargs_102859)
        
        # Assigning a type to the variable 'Y' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 16), 'Y', matrix_power_call_result_102860)
        
        # Call to assert_allclose(...): (line 440)
        # Processing the call arguments (line 440)
        # Getting the type of 'X' (line 440)
        X_102862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 32), 'X', False)
        # Getting the type of 'Y' (line 440)
        Y_102863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 35), 'Y', False)
        # Processing the call keyword arguments (line 440)
        kwargs_102864 = {}
        # Getting the type of 'assert_allclose' (line 440)
        assert_allclose_102861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 16), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 440)
        assert_allclose_call_result_102865 = invoke(stypy.reporting.localization.Localization(__file__, 440, 16), assert_allclose_102861, *[X_102862, Y_102863], **kwargs_102864)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_larger_abs_fractional_matrix_powers(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_larger_abs_fractional_matrix_powers' in the type store
        # Getting the type of 'stypy_return_type' (line 424)
        stypy_return_type_102866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102866)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_larger_abs_fractional_matrix_powers'
        return stypy_return_type_102866


    @norecursion
    def test_random_matrices_and_powers(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_random_matrices_and_powers'
        module_type_store = module_type_store.open_function_context('test_random_matrices_and_powers', 442, 4, False)
        # Assigning a type to the variable 'self' (line 443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestFractionalMatrixPower.test_random_matrices_and_powers.__dict__.__setitem__('stypy_localization', localization)
        TestFractionalMatrixPower.test_random_matrices_and_powers.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestFractionalMatrixPower.test_random_matrices_and_powers.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestFractionalMatrixPower.test_random_matrices_and_powers.__dict__.__setitem__('stypy_function_name', 'TestFractionalMatrixPower.test_random_matrices_and_powers')
        TestFractionalMatrixPower.test_random_matrices_and_powers.__dict__.__setitem__('stypy_param_names_list', [])
        TestFractionalMatrixPower.test_random_matrices_and_powers.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestFractionalMatrixPower.test_random_matrices_and_powers.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestFractionalMatrixPower.test_random_matrices_and_powers.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestFractionalMatrixPower.test_random_matrices_and_powers.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestFractionalMatrixPower.test_random_matrices_and_powers.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestFractionalMatrixPower.test_random_matrices_and_powers.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestFractionalMatrixPower.test_random_matrices_and_powers', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_random_matrices_and_powers', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_random_matrices_and_powers(...)' code ##################

        
        # Call to seed(...): (line 445)
        # Processing the call arguments (line 445)
        int_102870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 23), 'int')
        # Processing the call keyword arguments (line 445)
        kwargs_102871 = {}
        # Getting the type of 'np' (line 445)
        np_102867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 445)
        random_102868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 8), np_102867, 'random')
        # Obtaining the member 'seed' of a type (line 445)
        seed_102869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 8), random_102868, 'seed')
        # Calling seed(args, kwargs) (line 445)
        seed_call_result_102872 = invoke(stypy.reporting.localization.Localization(__file__, 445, 8), seed_102869, *[int_102870], **kwargs_102871)
        
        
        # Assigning a Num to a Name (line 446):
        
        # Assigning a Num to a Name (line 446):
        int_102873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 19), 'int')
        # Assigning a type to the variable 'nsamples' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'nsamples', int_102873)
        
        
        # Call to range(...): (line 447)
        # Processing the call arguments (line 447)
        # Getting the type of 'nsamples' (line 447)
        nsamples_102875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 23), 'nsamples', False)
        # Processing the call keyword arguments (line 447)
        kwargs_102876 = {}
        # Getting the type of 'range' (line 447)
        range_102874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 17), 'range', False)
        # Calling range(args, kwargs) (line 447)
        range_call_result_102877 = invoke(stypy.reporting.localization.Localization(__file__, 447, 17), range_102874, *[nsamples_102875], **kwargs_102876)
        
        # Testing the type of a for loop iterable (line 447)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 447, 8), range_call_result_102877)
        # Getting the type of the for loop variable (line 447)
        for_loop_var_102878 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 447, 8), range_call_result_102877)
        # Assigning a type to the variable 'i' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'i', for_loop_var_102878)
        # SSA begins for a for statement (line 447)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 449):
        
        # Assigning a Call to a Name (line 449):
        
        # Call to randrange(...): (line 449)
        # Processing the call arguments (line 449)
        int_102881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 449, 33), 'int')
        int_102882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 449, 36), 'int')
        # Processing the call keyword arguments (line 449)
        kwargs_102883 = {}
        # Getting the type of 'random' (line 449)
        random_102879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 16), 'random', False)
        # Obtaining the member 'randrange' of a type (line 449)
        randrange_102880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 16), random_102879, 'randrange')
        # Calling randrange(args, kwargs) (line 449)
        randrange_call_result_102884 = invoke(stypy.reporting.localization.Localization(__file__, 449, 16), randrange_102880, *[int_102881, int_102882], **kwargs_102883)
        
        # Assigning a type to the variable 'n' (line 449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 12), 'n', randrange_call_result_102884)
        
        # Assigning a Call to a Name (line 450):
        
        # Assigning a Call to a Name (line 450):
        
        # Call to randn(...): (line 450)
        # Processing the call keyword arguments (line 450)
        kwargs_102888 = {}
        # Getting the type of 'np' (line 450)
        np_102885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 16), 'np', False)
        # Obtaining the member 'random' of a type (line 450)
        random_102886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 16), np_102885, 'random')
        # Obtaining the member 'randn' of a type (line 450)
        randn_102887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 16), random_102886, 'randn')
        # Calling randn(args, kwargs) (line 450)
        randn_call_result_102889 = invoke(stypy.reporting.localization.Localization(__file__, 450, 16), randn_102887, *[], **kwargs_102888)
        
        # Assigning a type to the variable 'p' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 12), 'p', randn_call_result_102889)
        
        # Assigning a Call to a Name (line 453):
        
        # Assigning a Call to a Name (line 453):
        
        # Call to exp(...): (line 453)
        # Processing the call arguments (line 453)
        
        # Call to randrange(...): (line 453)
        # Processing the call arguments (line 453)
        int_102894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 453, 51), 'int')
        int_102895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 453, 55), 'int')
        # Processing the call keyword arguments (line 453)
        kwargs_102896 = {}
        # Getting the type of 'random' (line 453)
        random_102892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 34), 'random', False)
        # Obtaining the member 'randrange' of a type (line 453)
        randrange_102893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 34), random_102892, 'randrange')
        # Calling randrange(args, kwargs) (line 453)
        randrange_call_result_102897 = invoke(stypy.reporting.localization.Localization(__file__, 453, 34), randrange_102893, *[int_102894, int_102895], **kwargs_102896)
        
        # Processing the call keyword arguments (line 453)
        kwargs_102898 = {}
        # Getting the type of 'np' (line 453)
        np_102890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 27), 'np', False)
        # Obtaining the member 'exp' of a type (line 453)
        exp_102891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 27), np_102890, 'exp')
        # Calling exp(args, kwargs) (line 453)
        exp_call_result_102899 = invoke(stypy.reporting.localization.Localization(__file__, 453, 27), exp_102891, *[randrange_call_result_102897], **kwargs_102898)
        
        # Assigning a type to the variable 'matrix_scale' (line 453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 12), 'matrix_scale', exp_call_result_102899)
        
        # Assigning a Call to a Name (line 454):
        
        # Assigning a Call to a Name (line 454):
        
        # Call to randn(...): (line 454)
        # Processing the call arguments (line 454)
        # Getting the type of 'n' (line 454)
        n_102903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 32), 'n', False)
        # Getting the type of 'n' (line 454)
        n_102904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 35), 'n', False)
        # Processing the call keyword arguments (line 454)
        kwargs_102905 = {}
        # Getting the type of 'np' (line 454)
        np_102900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 16), 'np', False)
        # Obtaining the member 'random' of a type (line 454)
        random_102901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 454, 16), np_102900, 'random')
        # Obtaining the member 'randn' of a type (line 454)
        randn_102902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 454, 16), random_102901, 'randn')
        # Calling randn(args, kwargs) (line 454)
        randn_call_result_102906 = invoke(stypy.reporting.localization.Localization(__file__, 454, 16), randn_102902, *[n_102903, n_102904], **kwargs_102905)
        
        # Assigning a type to the variable 'A' (line 454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 12), 'A', randn_call_result_102906)
        
        
        # Call to choice(...): (line 455)
        # Processing the call arguments (line 455)
        
        # Obtaining an instance of the builtin type 'tuple' (line 455)
        tuple_102909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 455)
        # Adding element type (line 455)
        # Getting the type of 'True' (line 455)
        True_102910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 30), 'True', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 30), tuple_102909, True_102910)
        # Adding element type (line 455)
        # Getting the type of 'False' (line 455)
        False_102911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 36), 'False', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 30), tuple_102909, False_102911)
        
        # Processing the call keyword arguments (line 455)
        kwargs_102912 = {}
        # Getting the type of 'random' (line 455)
        random_102907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 15), 'random', False)
        # Obtaining the member 'choice' of a type (line 455)
        choice_102908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 15), random_102907, 'choice')
        # Calling choice(args, kwargs) (line 455)
        choice_call_result_102913 = invoke(stypy.reporting.localization.Localization(__file__, 455, 15), choice_102908, *[tuple_102909], **kwargs_102912)
        
        # Testing the type of an if condition (line 455)
        if_condition_102914 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 455, 12), choice_call_result_102913)
        # Assigning a type to the variable 'if_condition_102914' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 12), 'if_condition_102914', if_condition_102914)
        # SSA begins for if statement (line 455)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 456):
        
        # Assigning a BinOp to a Name (line 456):
        # Getting the type of 'A' (line 456)
        A_102915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 20), 'A')
        complex_102916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 456, 24), 'complex')
        
        # Call to randn(...): (line 456)
        # Processing the call arguments (line 456)
        # Getting the type of 'n' (line 456)
        n_102920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 45), 'n', False)
        # Getting the type of 'n' (line 456)
        n_102921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 48), 'n', False)
        # Processing the call keyword arguments (line 456)
        kwargs_102922 = {}
        # Getting the type of 'np' (line 456)
        np_102917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 29), 'np', False)
        # Obtaining the member 'random' of a type (line 456)
        random_102918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 29), np_102917, 'random')
        # Obtaining the member 'randn' of a type (line 456)
        randn_102919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 29), random_102918, 'randn')
        # Calling randn(args, kwargs) (line 456)
        randn_call_result_102923 = invoke(stypy.reporting.localization.Localization(__file__, 456, 29), randn_102919, *[n_102920, n_102921], **kwargs_102922)
        
        # Applying the binary operator '*' (line 456)
        result_mul_102924 = python_operator(stypy.reporting.localization.Localization(__file__, 456, 24), '*', complex_102916, randn_call_result_102923)
        
        # Applying the binary operator '+' (line 456)
        result_add_102925 = python_operator(stypy.reporting.localization.Localization(__file__, 456, 20), '+', A_102915, result_mul_102924)
        
        # Assigning a type to the variable 'A' (line 456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 16), 'A', result_add_102925)
        # SSA join for if statement (line 455)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 457):
        
        # Assigning a BinOp to a Name (line 457):
        # Getting the type of 'A' (line 457)
        A_102926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 16), 'A')
        # Getting the type of 'matrix_scale' (line 457)
        matrix_scale_102927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 20), 'matrix_scale')
        # Applying the binary operator '*' (line 457)
        result_mul_102928 = python_operator(stypy.reporting.localization.Localization(__file__, 457, 16), '*', A_102926, matrix_scale_102927)
        
        # Assigning a type to the variable 'A' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 12), 'A', result_mul_102928)
        
        # Assigning a Call to a Name (line 462):
        
        # Assigning a Call to a Name (line 462):
        
        # Call to fractional_matrix_power(...): (line 462)
        # Processing the call arguments (line 462)
        # Getting the type of 'A' (line 462)
        A_102930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 46), 'A', False)
        # Getting the type of 'p' (line 462)
        p_102931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 49), 'p', False)
        # Processing the call keyword arguments (line 462)
        kwargs_102932 = {}
        # Getting the type of 'fractional_matrix_power' (line 462)
        fractional_matrix_power_102929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 22), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 462)
        fractional_matrix_power_call_result_102933 = invoke(stypy.reporting.localization.Localization(__file__, 462, 22), fractional_matrix_power_102929, *[A_102930, p_102931], **kwargs_102932)
        
        # Assigning a type to the variable 'A_power' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 12), 'A_power', fractional_matrix_power_call_result_102933)
        
        # Assigning a Call to a Tuple (line 463):
        
        # Assigning a Subscript to a Name (line 463):
        
        # Obtaining the type of the subscript
        int_102934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, 12), 'int')
        
        # Call to logm(...): (line 463)
        # Processing the call arguments (line 463)
        # Getting the type of 'A' (line 463)
        A_102936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 32), 'A', False)
        # Processing the call keyword arguments (line 463)
        # Getting the type of 'False' (line 463)
        False_102937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 40), 'False', False)
        keyword_102938 = False_102937
        kwargs_102939 = {'disp': keyword_102938}
        # Getting the type of 'logm' (line 463)
        logm_102935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 27), 'logm', False)
        # Calling logm(args, kwargs) (line 463)
        logm_call_result_102940 = invoke(stypy.reporting.localization.Localization(__file__, 463, 27), logm_102935, *[A_102936], **kwargs_102939)
        
        # Obtaining the member '__getitem__' of a type (line 463)
        getitem___102941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 12), logm_call_result_102940, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 463)
        subscript_call_result_102942 = invoke(stypy.reporting.localization.Localization(__file__, 463, 12), getitem___102941, int_102934)
        
        # Assigning a type to the variable 'tuple_var_assignment_100581' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 12), 'tuple_var_assignment_100581', subscript_call_result_102942)
        
        # Assigning a Subscript to a Name (line 463):
        
        # Obtaining the type of the subscript
        int_102943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, 12), 'int')
        
        # Call to logm(...): (line 463)
        # Processing the call arguments (line 463)
        # Getting the type of 'A' (line 463)
        A_102945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 32), 'A', False)
        # Processing the call keyword arguments (line 463)
        # Getting the type of 'False' (line 463)
        False_102946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 40), 'False', False)
        keyword_102947 = False_102946
        kwargs_102948 = {'disp': keyword_102947}
        # Getting the type of 'logm' (line 463)
        logm_102944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 27), 'logm', False)
        # Calling logm(args, kwargs) (line 463)
        logm_call_result_102949 = invoke(stypy.reporting.localization.Localization(__file__, 463, 27), logm_102944, *[A_102945], **kwargs_102948)
        
        # Obtaining the member '__getitem__' of a type (line 463)
        getitem___102950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 12), logm_call_result_102949, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 463)
        subscript_call_result_102951 = invoke(stypy.reporting.localization.Localization(__file__, 463, 12), getitem___102950, int_102943)
        
        # Assigning a type to the variable 'tuple_var_assignment_100582' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 12), 'tuple_var_assignment_100582', subscript_call_result_102951)
        
        # Assigning a Name to a Name (line 463):
        # Getting the type of 'tuple_var_assignment_100581' (line 463)
        tuple_var_assignment_100581_102952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 12), 'tuple_var_assignment_100581')
        # Assigning a type to the variable 'A_logm' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 12), 'A_logm', tuple_var_assignment_100581_102952)
        
        # Assigning a Name to a Name (line 463):
        # Getting the type of 'tuple_var_assignment_100582' (line 463)
        tuple_var_assignment_100582_102953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 12), 'tuple_var_assignment_100582')
        # Assigning a type to the variable 'info' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 20), 'info', tuple_var_assignment_100582_102953)
        
        # Assigning a Call to a Name (line 464):
        
        # Assigning a Call to a Name (line 464):
        
        # Call to expm(...): (line 464)
        # Processing the call arguments (line 464)
        # Getting the type of 'A_logm' (line 464)
        A_logm_102955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 37), 'A_logm', False)
        # Getting the type of 'p' (line 464)
        p_102956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 46), 'p', False)
        # Applying the binary operator '*' (line 464)
        result_mul_102957 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 37), '*', A_logm_102955, p_102956)
        
        # Processing the call keyword arguments (line 464)
        kwargs_102958 = {}
        # Getting the type of 'expm' (line 464)
        expm_102954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 32), 'expm', False)
        # Calling expm(args, kwargs) (line 464)
        expm_call_result_102959 = invoke(stypy.reporting.localization.Localization(__file__, 464, 32), expm_102954, *[result_mul_102957], **kwargs_102958)
        
        # Assigning a type to the variable 'A_power_expm_logm' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 12), 'A_power_expm_logm', expm_call_result_102959)
        
        # Call to assert_allclose(...): (line 465)
        # Processing the call arguments (line 465)
        # Getting the type of 'A_power' (line 465)
        A_power_102961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 28), 'A_power', False)
        # Getting the type of 'A_power_expm_logm' (line 465)
        A_power_expm_logm_102962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 37), 'A_power_expm_logm', False)
        # Processing the call keyword arguments (line 465)
        kwargs_102963 = {}
        # Getting the type of 'assert_allclose' (line 465)
        assert_allclose_102960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 465)
        assert_allclose_call_result_102964 = invoke(stypy.reporting.localization.Localization(__file__, 465, 12), assert_allclose_102960, *[A_power_102961, A_power_expm_logm_102962], **kwargs_102963)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_random_matrices_and_powers(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_random_matrices_and_powers' in the type store
        # Getting the type of 'stypy_return_type' (line 442)
        stypy_return_type_102965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_102965)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_random_matrices_and_powers'
        return stypy_return_type_102965


    @norecursion
    def test_al_mohy_higham_2012_experiment_1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_al_mohy_higham_2012_experiment_1'
        module_type_store = module_type_store.open_function_context('test_al_mohy_higham_2012_experiment_1', 467, 4, False)
        # Assigning a type to the variable 'self' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_localization', localization)
        TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_function_name', 'TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1')
        TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_param_names_list', [])
        TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_al_mohy_higham_2012_experiment_1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_al_mohy_higham_2012_experiment_1(...)' code ##################

        
        # Assigning a Call to a Name (line 469):
        
        # Assigning a Call to a Name (line 469):
        
        # Call to _get_al_mohy_higham_2012_experiment_1(...): (line 469)
        # Processing the call keyword arguments (line 469)
        kwargs_102967 = {}
        # Getting the type of '_get_al_mohy_higham_2012_experiment_1' (line 469)
        _get_al_mohy_higham_2012_experiment_1_102966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 12), '_get_al_mohy_higham_2012_experiment_1', False)
        # Calling _get_al_mohy_higham_2012_experiment_1(args, kwargs) (line 469)
        _get_al_mohy_higham_2012_experiment_1_call_result_102968 = invoke(stypy.reporting.localization.Localization(__file__, 469, 12), _get_al_mohy_higham_2012_experiment_1_102966, *[], **kwargs_102967)
        
        # Assigning a type to the variable 'A' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'A', _get_al_mohy_higham_2012_experiment_1_call_result_102968)
        
        # Assigning a Call to a Tuple (line 472):
        
        # Assigning a Subscript to a Name (line 472):
        
        # Obtaining the type of the subscript
        int_102969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, 8), 'int')
        
        # Call to funm(...): (line 472)
        # Processing the call arguments (line 472)
        # Getting the type of 'A' (line 472)
        A_102971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 33), 'A', False)
        # Getting the type of 'np' (line 472)
        np_102972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 36), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 472)
        sqrt_102973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 36), np_102972, 'sqrt')
        # Processing the call keyword arguments (line 472)
        # Getting the type of 'False' (line 472)
        False_102974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 50), 'False', False)
        keyword_102975 = False_102974
        kwargs_102976 = {'disp': keyword_102975}
        # Getting the type of 'funm' (line 472)
        funm_102970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 28), 'funm', False)
        # Calling funm(args, kwargs) (line 472)
        funm_call_result_102977 = invoke(stypy.reporting.localization.Localization(__file__, 472, 28), funm_102970, *[A_102971, sqrt_102973], **kwargs_102976)
        
        # Obtaining the member '__getitem__' of a type (line 472)
        getitem___102978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 8), funm_call_result_102977, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 472)
        subscript_call_result_102979 = invoke(stypy.reporting.localization.Localization(__file__, 472, 8), getitem___102978, int_102969)
        
        # Assigning a type to the variable 'tuple_var_assignment_100583' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'tuple_var_assignment_100583', subscript_call_result_102979)
        
        # Assigning a Subscript to a Name (line 472):
        
        # Obtaining the type of the subscript
        int_102980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, 8), 'int')
        
        # Call to funm(...): (line 472)
        # Processing the call arguments (line 472)
        # Getting the type of 'A' (line 472)
        A_102982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 33), 'A', False)
        # Getting the type of 'np' (line 472)
        np_102983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 36), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 472)
        sqrt_102984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 36), np_102983, 'sqrt')
        # Processing the call keyword arguments (line 472)
        # Getting the type of 'False' (line 472)
        False_102985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 50), 'False', False)
        keyword_102986 = False_102985
        kwargs_102987 = {'disp': keyword_102986}
        # Getting the type of 'funm' (line 472)
        funm_102981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 28), 'funm', False)
        # Calling funm(args, kwargs) (line 472)
        funm_call_result_102988 = invoke(stypy.reporting.localization.Localization(__file__, 472, 28), funm_102981, *[A_102982, sqrt_102984], **kwargs_102987)
        
        # Obtaining the member '__getitem__' of a type (line 472)
        getitem___102989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 8), funm_call_result_102988, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 472)
        subscript_call_result_102990 = invoke(stypy.reporting.localization.Localization(__file__, 472, 8), getitem___102989, int_102980)
        
        # Assigning a type to the variable 'tuple_var_assignment_100584' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'tuple_var_assignment_100584', subscript_call_result_102990)
        
        # Assigning a Name to a Name (line 472):
        # Getting the type of 'tuple_var_assignment_100583' (line 472)
        tuple_var_assignment_100583_102991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'tuple_var_assignment_100583')
        # Assigning a type to the variable 'A_funm_sqrt' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'A_funm_sqrt', tuple_var_assignment_100583_102991)
        
        # Assigning a Name to a Name (line 472):
        # Getting the type of 'tuple_var_assignment_100584' (line 472)
        tuple_var_assignment_100584_102992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'tuple_var_assignment_100584')
        # Assigning a type to the variable 'info' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 21), 'info', tuple_var_assignment_100584_102992)
        
        # Assigning a Call to a Tuple (line 473):
        
        # Assigning a Subscript to a Name (line 473):
        
        # Obtaining the type of the subscript
        int_102993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 8), 'int')
        
        # Call to sqrtm(...): (line 473)
        # Processing the call arguments (line 473)
        # Getting the type of 'A' (line 473)
        A_102995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 30), 'A', False)
        # Processing the call keyword arguments (line 473)
        # Getting the type of 'False' (line 473)
        False_102996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 38), 'False', False)
        keyword_102997 = False_102996
        kwargs_102998 = {'disp': keyword_102997}
        # Getting the type of 'sqrtm' (line 473)
        sqrtm_102994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 24), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 473)
        sqrtm_call_result_102999 = invoke(stypy.reporting.localization.Localization(__file__, 473, 24), sqrtm_102994, *[A_102995], **kwargs_102998)
        
        # Obtaining the member '__getitem__' of a type (line 473)
        getitem___103000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 8), sqrtm_call_result_102999, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 473)
        subscript_call_result_103001 = invoke(stypy.reporting.localization.Localization(__file__, 473, 8), getitem___103000, int_102993)
        
        # Assigning a type to the variable 'tuple_var_assignment_100585' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_100585', subscript_call_result_103001)
        
        # Assigning a Subscript to a Name (line 473):
        
        # Obtaining the type of the subscript
        int_103002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 8), 'int')
        
        # Call to sqrtm(...): (line 473)
        # Processing the call arguments (line 473)
        # Getting the type of 'A' (line 473)
        A_103004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 30), 'A', False)
        # Processing the call keyword arguments (line 473)
        # Getting the type of 'False' (line 473)
        False_103005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 38), 'False', False)
        keyword_103006 = False_103005
        kwargs_103007 = {'disp': keyword_103006}
        # Getting the type of 'sqrtm' (line 473)
        sqrtm_103003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 24), 'sqrtm', False)
        # Calling sqrtm(args, kwargs) (line 473)
        sqrtm_call_result_103008 = invoke(stypy.reporting.localization.Localization(__file__, 473, 24), sqrtm_103003, *[A_103004], **kwargs_103007)
        
        # Obtaining the member '__getitem__' of a type (line 473)
        getitem___103009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 8), sqrtm_call_result_103008, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 473)
        subscript_call_result_103010 = invoke(stypy.reporting.localization.Localization(__file__, 473, 8), getitem___103009, int_103002)
        
        # Assigning a type to the variable 'tuple_var_assignment_100586' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_100586', subscript_call_result_103010)
        
        # Assigning a Name to a Name (line 473):
        # Getting the type of 'tuple_var_assignment_100585' (line 473)
        tuple_var_assignment_100585_103011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_100585')
        # Assigning a type to the variable 'A_sqrtm' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'A_sqrtm', tuple_var_assignment_100585_103011)
        
        # Assigning a Name to a Name (line 473):
        # Getting the type of 'tuple_var_assignment_100586' (line 473)
        tuple_var_assignment_100586_103012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'tuple_var_assignment_100586')
        # Assigning a type to the variable 'info' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 17), 'info', tuple_var_assignment_100586_103012)
        
        # Assigning a Call to a Name (line 474):
        
        # Assigning a Call to a Name (line 474):
        
        # Call to _remainder_matrix_power(...): (line 474)
        # Processing the call arguments (line 474)
        # Getting the type of 'A' (line 474)
        A_103015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 64), 'A', False)
        float_103016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 67), 'float')
        # Processing the call keyword arguments (line 474)
        kwargs_103017 = {}
        # Getting the type of '_matfuncs_inv_ssq' (line 474)
        _matfuncs_inv_ssq_103013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 22), '_matfuncs_inv_ssq', False)
        # Obtaining the member '_remainder_matrix_power' of a type (line 474)
        _remainder_matrix_power_103014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 22), _matfuncs_inv_ssq_103013, '_remainder_matrix_power')
        # Calling _remainder_matrix_power(args, kwargs) (line 474)
        _remainder_matrix_power_call_result_103018 = invoke(stypy.reporting.localization.Localization(__file__, 474, 22), _remainder_matrix_power_103014, *[A_103015, float_103016], **kwargs_103017)
        
        # Assigning a type to the variable 'A_rem_power' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'A_rem_power', _remainder_matrix_power_call_result_103018)
        
        # Assigning a Call to a Name (line 475):
        
        # Assigning a Call to a Name (line 475):
        
        # Call to fractional_matrix_power(...): (line 475)
        # Processing the call arguments (line 475)
        # Getting the type of 'A' (line 475)
        A_103020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 42), 'A', False)
        float_103021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 45), 'float')
        # Processing the call keyword arguments (line 475)
        kwargs_103022 = {}
        # Getting the type of 'fractional_matrix_power' (line 475)
        fractional_matrix_power_103019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 18), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 475)
        fractional_matrix_power_call_result_103023 = invoke(stypy.reporting.localization.Localization(__file__, 475, 18), fractional_matrix_power_103019, *[A_103020, float_103021], **kwargs_103022)
        
        # Assigning a type to the variable 'A_power' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'A_power', fractional_matrix_power_call_result_103023)
        
        # Call to assert_array_equal(...): (line 476)
        # Processing the call arguments (line 476)
        # Getting the type of 'A_rem_power' (line 476)
        A_rem_power_103025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 27), 'A_rem_power', False)
        # Getting the type of 'A_power' (line 476)
        A_power_103026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 40), 'A_power', False)
        # Processing the call keyword arguments (line 476)
        kwargs_103027 = {}
        # Getting the type of 'assert_array_equal' (line 476)
        assert_array_equal_103024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 8), 'assert_array_equal', False)
        # Calling assert_array_equal(args, kwargs) (line 476)
        assert_array_equal_call_result_103028 = invoke(stypy.reporting.localization.Localization(__file__, 476, 8), assert_array_equal_103024, *[A_rem_power_103025, A_power_103026], **kwargs_103027)
        
        
        # Call to assert_allclose(...): (line 477)
        # Processing the call arguments (line 477)
        # Getting the type of 'A_sqrtm' (line 477)
        A_sqrtm_103030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 24), 'A_sqrtm', False)
        # Getting the type of 'A_power' (line 477)
        A_power_103031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 33), 'A_power', False)
        # Processing the call keyword arguments (line 477)
        kwargs_103032 = {}
        # Getting the type of 'assert_allclose' (line 477)
        assert_allclose_103029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 477)
        assert_allclose_call_result_103033 = invoke(stypy.reporting.localization.Localization(__file__, 477, 8), assert_allclose_103029, *[A_sqrtm_103030, A_power_103031], **kwargs_103032)
        
        
        # Call to assert_allclose(...): (line 478)
        # Processing the call arguments (line 478)
        # Getting the type of 'A_sqrtm' (line 478)
        A_sqrtm_103035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 24), 'A_sqrtm', False)
        # Getting the type of 'A_funm_sqrt' (line 478)
        A_funm_sqrt_103036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 33), 'A_funm_sqrt', False)
        # Processing the call keyword arguments (line 478)
        kwargs_103037 = {}
        # Getting the type of 'assert_allclose' (line 478)
        assert_allclose_103034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 478)
        assert_allclose_call_result_103038 = invoke(stypy.reporting.localization.Localization(__file__, 478, 8), assert_allclose_103034, *[A_sqrtm_103035, A_funm_sqrt_103036], **kwargs_103037)
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 481)
        tuple_103039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 481)
        # Adding element type (line 481)
        int_103040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 18), 'int')
        int_103041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 20), 'int')
        # Applying the binary operator 'div' (line 481)
        result_div_103042 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 18), 'div', int_103040, int_103041)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 481, 18), tuple_103039, result_div_103042)
        # Adding element type (line 481)
        int_103043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 23), 'int')
        int_103044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 25), 'int')
        # Applying the binary operator 'div' (line 481)
        result_div_103045 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 23), 'div', int_103043, int_103044)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 481, 18), tuple_103039, result_div_103045)
        
        # Testing the type of a for loop iterable (line 481)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 481, 8), tuple_103039)
        # Getting the type of the for loop variable (line 481)
        for_loop_var_103046 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 481, 8), tuple_103039)
        # Assigning a type to the variable 'p' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 8), 'p', for_loop_var_103046)
        # SSA begins for a for statement (line 481)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 482):
        
        # Assigning a Call to a Name (line 482):
        
        # Call to fractional_matrix_power(...): (line 482)
        # Processing the call arguments (line 482)
        # Getting the type of 'A' (line 482)
        A_103048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 46), 'A', False)
        # Getting the type of 'p' (line 482)
        p_103049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 49), 'p', False)
        # Processing the call keyword arguments (line 482)
        kwargs_103050 = {}
        # Getting the type of 'fractional_matrix_power' (line 482)
        fractional_matrix_power_103047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 22), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 482)
        fractional_matrix_power_call_result_103051 = invoke(stypy.reporting.localization.Localization(__file__, 482, 22), fractional_matrix_power_103047, *[A_103048, p_103049], **kwargs_103050)
        
        # Assigning a type to the variable 'A_power' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'A_power', fractional_matrix_power_call_result_103051)
        
        # Assigning a Call to a Name (line 483):
        
        # Assigning a Call to a Name (line 483):
        
        # Call to fractional_matrix_power(...): (line 483)
        # Processing the call arguments (line 483)
        # Getting the type of 'A_power' (line 483)
        A_power_103053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 51), 'A_power', False)
        int_103054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 60), 'int')
        # Getting the type of 'p' (line 483)
        p_103055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 62), 'p', False)
        # Applying the binary operator 'div' (line 483)
        result_div_103056 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 60), 'div', int_103054, p_103055)
        
        # Processing the call keyword arguments (line 483)
        kwargs_103057 = {}
        # Getting the type of 'fractional_matrix_power' (line 483)
        fractional_matrix_power_103052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 27), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 483)
        fractional_matrix_power_call_result_103058 = invoke(stypy.reporting.localization.Localization(__file__, 483, 27), fractional_matrix_power_103052, *[A_power_103053, result_div_103056], **kwargs_103057)
        
        # Assigning a type to the variable 'A_round_trip' (line 483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 12), 'A_round_trip', fractional_matrix_power_call_result_103058)
        
        # Call to assert_allclose(...): (line 484)
        # Processing the call arguments (line 484)
        # Getting the type of 'A_round_trip' (line 484)
        A_round_trip_103060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 28), 'A_round_trip', False)
        # Getting the type of 'A' (line 484)
        A_103061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 42), 'A', False)
        # Processing the call keyword arguments (line 484)
        float_103062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 50), 'float')
        keyword_103063 = float_103062
        kwargs_103064 = {'rtol': keyword_103063}
        # Getting the type of 'assert_allclose' (line 484)
        assert_allclose_103059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 484)
        assert_allclose_call_result_103065 = invoke(stypy.reporting.localization.Localization(__file__, 484, 12), assert_allclose_103059, *[A_round_trip_103060, A_103061], **kwargs_103064)
        
        
        # Call to assert_allclose(...): (line 485)
        # Processing the call arguments (line 485)
        
        # Call to tril(...): (line 485)
        # Processing the call arguments (line 485)
        # Getting the type of 'A_round_trip' (line 485)
        A_round_trip_103069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 36), 'A_round_trip', False)
        int_103070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 50), 'int')
        # Processing the call keyword arguments (line 485)
        kwargs_103071 = {}
        # Getting the type of 'np' (line 485)
        np_103067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 28), 'np', False)
        # Obtaining the member 'tril' of a type (line 485)
        tril_103068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 28), np_103067, 'tril')
        # Calling tril(args, kwargs) (line 485)
        tril_call_result_103072 = invoke(stypy.reporting.localization.Localization(__file__, 485, 28), tril_103068, *[A_round_trip_103069, int_103070], **kwargs_103071)
        
        
        # Call to tril(...): (line 485)
        # Processing the call arguments (line 485)
        # Getting the type of 'A' (line 485)
        A_103075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 62), 'A', False)
        int_103076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 65), 'int')
        # Processing the call keyword arguments (line 485)
        kwargs_103077 = {}
        # Getting the type of 'np' (line 485)
        np_103073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 54), 'np', False)
        # Obtaining the member 'tril' of a type (line 485)
        tril_103074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 54), np_103073, 'tril')
        # Calling tril(args, kwargs) (line 485)
        tril_call_result_103078 = invoke(stypy.reporting.localization.Localization(__file__, 485, 54), tril_103074, *[A_103075, int_103076], **kwargs_103077)
        
        # Processing the call keyword arguments (line 485)
        kwargs_103079 = {}
        # Getting the type of 'assert_allclose' (line 485)
        assert_allclose_103066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 485)
        assert_allclose_call_result_103080 = invoke(stypy.reporting.localization.Localization(__file__, 485, 12), assert_allclose_103066, *[tril_call_result_103072, tril_call_result_103078], **kwargs_103079)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_al_mohy_higham_2012_experiment_1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_al_mohy_higham_2012_experiment_1' in the type store
        # Getting the type of 'stypy_return_type' (line 467)
        stypy_return_type_103081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103081)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_al_mohy_higham_2012_experiment_1'
        return stypy_return_type_103081


    @norecursion
    def test_briggs_helper_function(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_briggs_helper_function'
        module_type_store = module_type_store.open_function_context('test_briggs_helper_function', 487, 4, False)
        # Assigning a type to the variable 'self' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestFractionalMatrixPower.test_briggs_helper_function.__dict__.__setitem__('stypy_localization', localization)
        TestFractionalMatrixPower.test_briggs_helper_function.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestFractionalMatrixPower.test_briggs_helper_function.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestFractionalMatrixPower.test_briggs_helper_function.__dict__.__setitem__('stypy_function_name', 'TestFractionalMatrixPower.test_briggs_helper_function')
        TestFractionalMatrixPower.test_briggs_helper_function.__dict__.__setitem__('stypy_param_names_list', [])
        TestFractionalMatrixPower.test_briggs_helper_function.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestFractionalMatrixPower.test_briggs_helper_function.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestFractionalMatrixPower.test_briggs_helper_function.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestFractionalMatrixPower.test_briggs_helper_function.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestFractionalMatrixPower.test_briggs_helper_function.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestFractionalMatrixPower.test_briggs_helper_function.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestFractionalMatrixPower.test_briggs_helper_function', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_briggs_helper_function', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_briggs_helper_function(...)' code ##################

        
        # Call to seed(...): (line 488)
        # Processing the call arguments (line 488)
        int_103085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 23), 'int')
        # Processing the call keyword arguments (line 488)
        kwargs_103086 = {}
        # Getting the type of 'np' (line 488)
        np_103082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 488)
        random_103083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 8), np_103082, 'random')
        # Obtaining the member 'seed' of a type (line 488)
        seed_103084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 8), random_103083, 'seed')
        # Calling seed(args, kwargs) (line 488)
        seed_call_result_103087 = invoke(stypy.reporting.localization.Localization(__file__, 488, 8), seed_103084, *[int_103085], **kwargs_103086)
        
        
        
        # Call to randn(...): (line 489)
        # Processing the call arguments (line 489)
        int_103091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 33), 'int')
        # Processing the call keyword arguments (line 489)
        kwargs_103092 = {}
        # Getting the type of 'np' (line 489)
        np_103088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 17), 'np', False)
        # Obtaining the member 'random' of a type (line 489)
        random_103089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 17), np_103088, 'random')
        # Obtaining the member 'randn' of a type (line 489)
        randn_103090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 17), random_103089, 'randn')
        # Calling randn(args, kwargs) (line 489)
        randn_call_result_103093 = invoke(stypy.reporting.localization.Localization(__file__, 489, 17), randn_103090, *[int_103091], **kwargs_103092)
        
        complex_103094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 39), 'complex')
        
        # Call to randn(...): (line 489)
        # Processing the call arguments (line 489)
        int_103098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 60), 'int')
        # Processing the call keyword arguments (line 489)
        kwargs_103099 = {}
        # Getting the type of 'np' (line 489)
        np_103095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 44), 'np', False)
        # Obtaining the member 'random' of a type (line 489)
        random_103096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 44), np_103095, 'random')
        # Obtaining the member 'randn' of a type (line 489)
        randn_103097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 44), random_103096, 'randn')
        # Calling randn(args, kwargs) (line 489)
        randn_call_result_103100 = invoke(stypy.reporting.localization.Localization(__file__, 489, 44), randn_103097, *[int_103098], **kwargs_103099)
        
        # Applying the binary operator '*' (line 489)
        result_mul_103101 = python_operator(stypy.reporting.localization.Localization(__file__, 489, 39), '*', complex_103094, randn_call_result_103100)
        
        # Applying the binary operator '+' (line 489)
        result_add_103102 = python_operator(stypy.reporting.localization.Localization(__file__, 489, 17), '+', randn_call_result_103093, result_mul_103101)
        
        # Testing the type of a for loop iterable (line 489)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 489, 8), result_add_103102)
        # Getting the type of the for loop variable (line 489)
        for_loop_var_103103 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 489, 8), result_add_103102)
        # Assigning a type to the variable 'a' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'a', for_loop_var_103103)
        # SSA begins for a for statement (line 489)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to range(...): (line 490)
        # Processing the call arguments (line 490)
        int_103105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 27), 'int')
        # Processing the call keyword arguments (line 490)
        kwargs_103106 = {}
        # Getting the type of 'range' (line 490)
        range_103104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 21), 'range', False)
        # Calling range(args, kwargs) (line 490)
        range_call_result_103107 = invoke(stypy.reporting.localization.Localization(__file__, 490, 21), range_103104, *[int_103105], **kwargs_103106)
        
        # Testing the type of a for loop iterable (line 490)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 490, 12), range_call_result_103107)
        # Getting the type of the for loop variable (line 490)
        for_loop_var_103108 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 490, 12), range_call_result_103107)
        # Assigning a type to the variable 'k' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 12), 'k', for_loop_var_103108)
        # SSA begins for a for statement (line 490)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 491):
        
        # Assigning a Call to a Name (line 491):
        
        # Call to _briggs_helper_function(...): (line 491)
        # Processing the call arguments (line 491)
        # Getting the type of 'a' (line 491)
        a_103111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 71), 'a', False)
        # Getting the type of 'k' (line 491)
        k_103112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 74), 'k', False)
        # Processing the call keyword arguments (line 491)
        kwargs_103113 = {}
        # Getting the type of '_matfuncs_inv_ssq' (line 491)
        _matfuncs_inv_ssq_103109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 29), '_matfuncs_inv_ssq', False)
        # Obtaining the member '_briggs_helper_function' of a type (line 491)
        _briggs_helper_function_103110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 29), _matfuncs_inv_ssq_103109, '_briggs_helper_function')
        # Calling _briggs_helper_function(args, kwargs) (line 491)
        _briggs_helper_function_call_result_103114 = invoke(stypy.reporting.localization.Localization(__file__, 491, 29), _briggs_helper_function_103110, *[a_103111, k_103112], **kwargs_103113)
        
        # Assigning a type to the variable 'x_observed' (line 491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 16), 'x_observed', _briggs_helper_function_call_result_103114)
        
        # Assigning a BinOp to a Name (line 492):
        
        # Assigning a BinOp to a Name (line 492):
        # Getting the type of 'a' (line 492)
        a_103115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 29), 'a')
        
        # Call to exp2(...): (line 492)
        # Processing the call arguments (line 492)
        
        # Getting the type of 'k' (line 492)
        k_103118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 43), 'k', False)
        # Applying the 'usub' unary operator (line 492)
        result___neg___103119 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 42), 'usub', k_103118)
        
        # Processing the call keyword arguments (line 492)
        kwargs_103120 = {}
        # Getting the type of 'np' (line 492)
        np_103116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 34), 'np', False)
        # Obtaining the member 'exp2' of a type (line 492)
        exp2_103117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 34), np_103116, 'exp2')
        # Calling exp2(args, kwargs) (line 492)
        exp2_call_result_103121 = invoke(stypy.reporting.localization.Localization(__file__, 492, 34), exp2_103117, *[result___neg___103119], **kwargs_103120)
        
        # Applying the binary operator '**' (line 492)
        result_pow_103122 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 29), '**', a_103115, exp2_call_result_103121)
        
        int_103123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 48), 'int')
        # Applying the binary operator '-' (line 492)
        result_sub_103124 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 29), '-', result_pow_103122, int_103123)
        
        # Assigning a type to the variable 'x_expected' (line 492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 16), 'x_expected', result_sub_103124)
        
        # Call to assert_allclose(...): (line 493)
        # Processing the call arguments (line 493)
        # Getting the type of 'x_observed' (line 493)
        x_observed_103126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 32), 'x_observed', False)
        # Getting the type of 'x_expected' (line 493)
        x_expected_103127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 44), 'x_expected', False)
        # Processing the call keyword arguments (line 493)
        kwargs_103128 = {}
        # Getting the type of 'assert_allclose' (line 493)
        assert_allclose_103125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 16), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 493)
        assert_allclose_call_result_103129 = invoke(stypy.reporting.localization.Localization(__file__, 493, 16), assert_allclose_103125, *[x_observed_103126, x_expected_103127], **kwargs_103128)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_briggs_helper_function(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_briggs_helper_function' in the type store
        # Getting the type of 'stypy_return_type' (line 487)
        stypy_return_type_103130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103130)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_briggs_helper_function'
        return stypy_return_type_103130


    @norecursion
    def test_type_preservation_and_conversion(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_type_preservation_and_conversion'
        module_type_store = module_type_store.open_function_context('test_type_preservation_and_conversion', 495, 4, False)
        # Assigning a type to the variable 'self' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestFractionalMatrixPower.test_type_preservation_and_conversion.__dict__.__setitem__('stypy_localization', localization)
        TestFractionalMatrixPower.test_type_preservation_and_conversion.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestFractionalMatrixPower.test_type_preservation_and_conversion.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestFractionalMatrixPower.test_type_preservation_and_conversion.__dict__.__setitem__('stypy_function_name', 'TestFractionalMatrixPower.test_type_preservation_and_conversion')
        TestFractionalMatrixPower.test_type_preservation_and_conversion.__dict__.__setitem__('stypy_param_names_list', [])
        TestFractionalMatrixPower.test_type_preservation_and_conversion.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestFractionalMatrixPower.test_type_preservation_and_conversion.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestFractionalMatrixPower.test_type_preservation_and_conversion.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestFractionalMatrixPower.test_type_preservation_and_conversion.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestFractionalMatrixPower.test_type_preservation_and_conversion.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestFractionalMatrixPower.test_type_preservation_and_conversion.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestFractionalMatrixPower.test_type_preservation_and_conversion', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_type_preservation_and_conversion', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_type_preservation_and_conversion(...)' code ##################

        
        # Assigning a Tuple to a Name (line 500):
        
        # Assigning a Tuple to a Name (line 500):
        
        # Obtaining an instance of the builtin type 'tuple' (line 500)
        tuple_103131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 500)
        # Adding element type (line 500)
        str_103132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 31), 'str', 'F')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 500, 31), tuple_103131, str_103132)
        # Adding element type (line 500)
        str_103133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 36), 'str', 'D')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 500, 31), tuple_103131, str_103133)
        # Adding element type (line 500)
        str_103134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 41), 'str', 'G')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 500, 31), tuple_103131, str_103134)
        
        # Assigning a type to the variable 'complex_dtype_chars' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 8), 'complex_dtype_chars', tuple_103131)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 502)
        tuple_103135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 502)
        # Adding element type (line 502)
        
        # Obtaining an instance of the builtin type 'list' (line 502)
        list_103136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 502)
        # Adding element type (line 502)
        
        # Obtaining an instance of the builtin type 'list' (line 502)
        list_103137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 502)
        # Adding element type (line 502)
        int_103138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 17), list_103137, int_103138)
        # Adding element type (line 502)
        int_103139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 17), list_103137, int_103139)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 16), list_103136, list_103137)
        # Adding element type (line 502)
        
        # Obtaining an instance of the builtin type 'list' (line 502)
        list_103140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 502)
        # Adding element type (line 502)
        int_103141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 25), list_103140, int_103141)
        # Adding element type (line 502)
        int_103142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 25), list_103140, int_103142)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 16), list_103136, list_103140)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 16), tuple_103135, list_103136)
        # Adding element type (line 502)
        
        # Obtaining an instance of the builtin type 'list' (line 503)
        list_103143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 503)
        # Adding element type (line 503)
        
        # Obtaining an instance of the builtin type 'list' (line 503)
        list_103144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 503)
        # Adding element type (line 503)
        int_103145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 503, 17), list_103144, int_103145)
        # Adding element type (line 503)
        int_103146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 503, 17), list_103144, int_103146)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 503, 16), list_103143, list_103144)
        # Adding element type (line 503)
        
        # Obtaining an instance of the builtin type 'list' (line 503)
        list_103147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 503)
        # Adding element type (line 503)
        int_103148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 503, 25), list_103147, int_103148)
        # Adding element type (line 503)
        int_103149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 503, 25), list_103147, int_103149)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 503, 16), list_103143, list_103147)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 16), tuple_103135, list_103143)
        # Adding element type (line 502)
        
        # Obtaining an instance of the builtin type 'list' (line 504)
        list_103150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 504)
        # Adding element type (line 504)
        
        # Obtaining an instance of the builtin type 'list' (line 504)
        list_103151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 504)
        # Adding element type (line 504)
        int_103152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 504, 17), list_103151, int_103152)
        # Adding element type (line 504)
        int_103153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 504, 17), list_103151, int_103153)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 504, 16), list_103150, list_103151)
        # Adding element type (line 504)
        
        # Obtaining an instance of the builtin type 'list' (line 504)
        list_103154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 504)
        # Adding element type (line 504)
        int_103155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 504, 25), list_103154, int_103155)
        # Adding element type (line 504)
        int_103156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 504, 25), list_103154, int_103156)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 504, 16), list_103150, list_103154)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 16), tuple_103135, list_103150)
        # Adding element type (line 502)
        
        # Obtaining an instance of the builtin type 'list' (line 505)
        list_103157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 505)
        # Adding element type (line 505)
        
        # Obtaining an instance of the builtin type 'list' (line 505)
        list_103158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 505)
        # Adding element type (line 505)
        int_103159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 505, 17), list_103158, int_103159)
        # Adding element type (line 505)
        int_103160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 505, 17), list_103158, int_103160)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 505, 16), list_103157, list_103158)
        # Adding element type (line 505)
        
        # Obtaining an instance of the builtin type 'list' (line 505)
        list_103161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 505)
        # Adding element type (line 505)
        int_103162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 505, 25), list_103161, int_103162)
        # Adding element type (line 505)
        int_103163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 505, 25), list_103161, int_103163)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 505, 16), list_103157, list_103161)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 16), tuple_103135, list_103157)
        
        # Testing the type of a for loop iterable (line 501)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 501, 8), tuple_103135)
        # Getting the type of the for loop variable (line 501)
        for_loop_var_103164 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 501, 8), tuple_103135)
        # Assigning a type to the variable 'matrix_as_list' (line 501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 8), 'matrix_as_list', for_loop_var_103164)
        # SSA begins for a for statement (line 501)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 508):
        
        # Assigning a Call to a Name (line 508):
        
        # Call to eigvals(...): (line 508)
        # Processing the call arguments (line 508)
        # Getting the type of 'matrix_as_list' (line 508)
        matrix_as_list_103168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 37), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 508)
        kwargs_103169 = {}
        # Getting the type of 'scipy' (line 508)
        scipy_103165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 16), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 508)
        linalg_103166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 16), scipy_103165, 'linalg')
        # Obtaining the member 'eigvals' of a type (line 508)
        eigvals_103167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 16), linalg_103166, 'eigvals')
        # Calling eigvals(args, kwargs) (line 508)
        eigvals_call_result_103170 = invoke(stypy.reporting.localization.Localization(__file__, 508, 16), eigvals_103167, *[matrix_as_list_103168], **kwargs_103169)
        
        # Assigning a type to the variable 'W' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 12), 'W', eigvals_call_result_103170)
        
        # Call to assert_(...): (line 509)
        # Processing the call arguments (line 509)
        
        
        # Call to any(...): (line 509)
        # Processing the call arguments (line 509)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 509, 28, True)
        # Calculating comprehension expression
        # Getting the type of 'W' (line 509)
        W_103180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 58), 'W', False)
        comprehension_103181 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 509, 28), W_103180)
        # Assigning a type to the variable 'w' (line 509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 28), 'w', comprehension_103181)
        
        # Evaluating a boolean operation
        # Getting the type of 'w' (line 509)
        w_103173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 28), 'w', False)
        # Obtaining the member 'imag' of a type (line 509)
        imag_103174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 28), w_103173, 'imag')
        
        # Getting the type of 'w' (line 509)
        w_103175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 38), 'w', False)
        # Obtaining the member 'real' of a type (line 509)
        real_103176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 38), w_103175, 'real')
        int_103177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 47), 'int')
        # Applying the binary operator '<' (line 509)
        result_lt_103178 = python_operator(stypy.reporting.localization.Localization(__file__, 509, 38), '<', real_103176, int_103177)
        
        # Applying the binary operator 'or' (line 509)
        result_or_keyword_103179 = python_operator(stypy.reporting.localization.Localization(__file__, 509, 28), 'or', imag_103174, result_lt_103178)
        
        list_103182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 28), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 509, 28), list_103182, result_or_keyword_103179)
        # Processing the call keyword arguments (line 509)
        kwargs_103183 = {}
        # Getting the type of 'any' (line 509)
        any_103172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 24), 'any', False)
        # Calling any(args, kwargs) (line 509)
        any_call_result_103184 = invoke(stypy.reporting.localization.Localization(__file__, 509, 24), any_103172, *[list_103182], **kwargs_103183)
        
        # Applying the 'not' unary operator (line 509)
        result_not__103185 = python_operator(stypy.reporting.localization.Localization(__file__, 509, 20), 'not', any_call_result_103184)
        
        # Processing the call keyword arguments (line 509)
        kwargs_103186 = {}
        # Getting the type of 'assert_' (line 509)
        assert__103171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 509)
        assert__call_result_103187 = invoke(stypy.reporting.localization.Localization(__file__, 509, 12), assert__103171, *[result_not__103185], **kwargs_103186)
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 513)
        tuple_103188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 513)
        # Adding element type (line 513)
        float_103189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 22), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 513, 22), tuple_103188, float_103189)
        # Adding element type (line 513)
        float_103190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 513, 22), tuple_103188, float_103190)
        # Adding element type (line 513)
        float_103191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 34), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 513, 22), tuple_103188, float_103191)
        # Adding element type (line 513)
        float_103192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 39), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 513, 22), tuple_103188, float_103192)
        
        # Testing the type of a for loop iterable (line 513)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 513, 12), tuple_103188)
        # Getting the type of the for loop variable (line 513)
        for_loop_var_103193 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 513, 12), tuple_103188)
        # Assigning a type to the variable 'p' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 12), 'p', for_loop_var_103193)
        # SSA begins for a for statement (line 513)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 516):
        
        # Assigning a Call to a Name (line 516):
        
        # Call to array(...): (line 516)
        # Processing the call arguments (line 516)
        # Getting the type of 'matrix_as_list' (line 516)
        matrix_as_list_103196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 29), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 516)
        # Getting the type of 'float' (line 516)
        float_103197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 51), 'float', False)
        keyword_103198 = float_103197
        kwargs_103199 = {'dtype': keyword_103198}
        # Getting the type of 'np' (line 516)
        np_103194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 20), 'np', False)
        # Obtaining the member 'array' of a type (line 516)
        array_103195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 20), np_103194, 'array')
        # Calling array(args, kwargs) (line 516)
        array_call_result_103200 = invoke(stypy.reporting.localization.Localization(__file__, 516, 20), array_103195, *[matrix_as_list_103196], **kwargs_103199)
        
        # Assigning a type to the variable 'A' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 16), 'A', array_call_result_103200)
        
        # Assigning a Call to a Name (line 517):
        
        # Assigning a Call to a Name (line 517):
        
        # Call to fractional_matrix_power(...): (line 517)
        # Processing the call arguments (line 517)
        # Getting the type of 'A' (line 517)
        A_103202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 50), 'A', False)
        # Getting the type of 'p' (line 517)
        p_103203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 53), 'p', False)
        # Processing the call keyword arguments (line 517)
        kwargs_103204 = {}
        # Getting the type of 'fractional_matrix_power' (line 517)
        fractional_matrix_power_103201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 26), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 517)
        fractional_matrix_power_call_result_103205 = invoke(stypy.reporting.localization.Localization(__file__, 517, 26), fractional_matrix_power_103201, *[A_103202, p_103203], **kwargs_103204)
        
        # Assigning a type to the variable 'A_power' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 16), 'A_power', fractional_matrix_power_call_result_103205)
        
        # Call to assert_(...): (line 518)
        # Processing the call arguments (line 518)
        
        # Getting the type of 'A_power' (line 518)
        A_power_103207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 24), 'A_power', False)
        # Obtaining the member 'dtype' of a type (line 518)
        dtype_103208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 24), A_power_103207, 'dtype')
        # Obtaining the member 'char' of a type (line 518)
        char_103209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 24), dtype_103208, 'char')
        # Getting the type of 'complex_dtype_chars' (line 518)
        complex_dtype_chars_103210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 50), 'complex_dtype_chars', False)
        # Applying the binary operator 'notin' (line 518)
        result_contains_103211 = python_operator(stypy.reporting.localization.Localization(__file__, 518, 24), 'notin', char_103209, complex_dtype_chars_103210)
        
        # Processing the call keyword arguments (line 518)
        kwargs_103212 = {}
        # Getting the type of 'assert_' (line 518)
        assert__103206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 16), 'assert_', False)
        # Calling assert_(args, kwargs) (line 518)
        assert__call_result_103213 = invoke(stypy.reporting.localization.Localization(__file__, 518, 16), assert__103206, *[result_contains_103211], **kwargs_103212)
        
        
        # Assigning a Call to a Name (line 521):
        
        # Assigning a Call to a Name (line 521):
        
        # Call to array(...): (line 521)
        # Processing the call arguments (line 521)
        # Getting the type of 'matrix_as_list' (line 521)
        matrix_as_list_103216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 29), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 521)
        # Getting the type of 'complex' (line 521)
        complex_103217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 51), 'complex', False)
        keyword_103218 = complex_103217
        kwargs_103219 = {'dtype': keyword_103218}
        # Getting the type of 'np' (line 521)
        np_103214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 20), 'np', False)
        # Obtaining the member 'array' of a type (line 521)
        array_103215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 20), np_103214, 'array')
        # Calling array(args, kwargs) (line 521)
        array_call_result_103220 = invoke(stypy.reporting.localization.Localization(__file__, 521, 20), array_103215, *[matrix_as_list_103216], **kwargs_103219)
        
        # Assigning a type to the variable 'A' (line 521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 16), 'A', array_call_result_103220)
        
        # Assigning a Call to a Name (line 522):
        
        # Assigning a Call to a Name (line 522):
        
        # Call to fractional_matrix_power(...): (line 522)
        # Processing the call arguments (line 522)
        # Getting the type of 'A' (line 522)
        A_103222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 50), 'A', False)
        # Getting the type of 'p' (line 522)
        p_103223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 53), 'p', False)
        # Processing the call keyword arguments (line 522)
        kwargs_103224 = {}
        # Getting the type of 'fractional_matrix_power' (line 522)
        fractional_matrix_power_103221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 26), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 522)
        fractional_matrix_power_call_result_103225 = invoke(stypy.reporting.localization.Localization(__file__, 522, 26), fractional_matrix_power_103221, *[A_103222, p_103223], **kwargs_103224)
        
        # Assigning a type to the variable 'A_power' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 16), 'A_power', fractional_matrix_power_call_result_103225)
        
        # Call to assert_(...): (line 523)
        # Processing the call arguments (line 523)
        
        # Getting the type of 'A_power' (line 523)
        A_power_103227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 24), 'A_power', False)
        # Obtaining the member 'dtype' of a type (line 523)
        dtype_103228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 24), A_power_103227, 'dtype')
        # Obtaining the member 'char' of a type (line 523)
        char_103229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 24), dtype_103228, 'char')
        # Getting the type of 'complex_dtype_chars' (line 523)
        complex_dtype_chars_103230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 46), 'complex_dtype_chars', False)
        # Applying the binary operator 'in' (line 523)
        result_contains_103231 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 24), 'in', char_103229, complex_dtype_chars_103230)
        
        # Processing the call keyword arguments (line 523)
        kwargs_103232 = {}
        # Getting the type of 'assert_' (line 523)
        assert__103226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 16), 'assert_', False)
        # Calling assert_(args, kwargs) (line 523)
        assert__call_result_103233 = invoke(stypy.reporting.localization.Localization(__file__, 523, 16), assert__103226, *[result_contains_103231], **kwargs_103232)
        
        
        # Assigning a UnaryOp to a Name (line 526):
        
        # Assigning a UnaryOp to a Name (line 526):
        
        
        # Call to array(...): (line 526)
        # Processing the call arguments (line 526)
        # Getting the type of 'matrix_as_list' (line 526)
        matrix_as_list_103236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 30), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 526)
        # Getting the type of 'float' (line 526)
        float_103237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 52), 'float', False)
        keyword_103238 = float_103237
        kwargs_103239 = {'dtype': keyword_103238}
        # Getting the type of 'np' (line 526)
        np_103234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 21), 'np', False)
        # Obtaining the member 'array' of a type (line 526)
        array_103235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 21), np_103234, 'array')
        # Calling array(args, kwargs) (line 526)
        array_call_result_103240 = invoke(stypy.reporting.localization.Localization(__file__, 526, 21), array_103235, *[matrix_as_list_103236], **kwargs_103239)
        
        # Applying the 'usub' unary operator (line 526)
        result___neg___103241 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 20), 'usub', array_call_result_103240)
        
        # Assigning a type to the variable 'A' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 16), 'A', result___neg___103241)
        
        # Assigning a Call to a Name (line 527):
        
        # Assigning a Call to a Name (line 527):
        
        # Call to fractional_matrix_power(...): (line 527)
        # Processing the call arguments (line 527)
        # Getting the type of 'A' (line 527)
        A_103243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 50), 'A', False)
        # Getting the type of 'p' (line 527)
        p_103244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 53), 'p', False)
        # Processing the call keyword arguments (line 527)
        kwargs_103245 = {}
        # Getting the type of 'fractional_matrix_power' (line 527)
        fractional_matrix_power_103242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 26), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 527)
        fractional_matrix_power_call_result_103246 = invoke(stypy.reporting.localization.Localization(__file__, 527, 26), fractional_matrix_power_103242, *[A_103243, p_103244], **kwargs_103245)
        
        # Assigning a type to the variable 'A_power' (line 527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 16), 'A_power', fractional_matrix_power_call_result_103246)
        
        # Call to assert_(...): (line 528)
        # Processing the call arguments (line 528)
        
        # Getting the type of 'A_power' (line 528)
        A_power_103248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 24), 'A_power', False)
        # Obtaining the member 'dtype' of a type (line 528)
        dtype_103249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 24), A_power_103248, 'dtype')
        # Obtaining the member 'char' of a type (line 528)
        char_103250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 24), dtype_103249, 'char')
        # Getting the type of 'complex_dtype_chars' (line 528)
        complex_dtype_chars_103251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 46), 'complex_dtype_chars', False)
        # Applying the binary operator 'in' (line 528)
        result_contains_103252 = python_operator(stypy.reporting.localization.Localization(__file__, 528, 24), 'in', char_103250, complex_dtype_chars_103251)
        
        # Processing the call keyword arguments (line 528)
        kwargs_103253 = {}
        # Getting the type of 'assert_' (line 528)
        assert__103247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 16), 'assert_', False)
        # Calling assert_(args, kwargs) (line 528)
        assert__call_result_103254 = invoke(stypy.reporting.localization.Localization(__file__, 528, 16), assert__103247, *[result_contains_103252], **kwargs_103253)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_type_preservation_and_conversion(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_type_preservation_and_conversion' in the type store
        # Getting the type of 'stypy_return_type' (line 495)
        stypy_return_type_103255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103255)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_type_preservation_and_conversion'
        return stypy_return_type_103255


    @norecursion
    def test_type_conversion_mixed_sign_or_complex_spectrum(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_type_conversion_mixed_sign_or_complex_spectrum'
        module_type_store = module_type_store.open_function_context('test_type_conversion_mixed_sign_or_complex_spectrum', 530, 4, False)
        # Assigning a type to the variable 'self' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_localization', localization)
        TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_function_name', 'TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum')
        TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_param_names_list', [])
        TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_type_conversion_mixed_sign_or_complex_spectrum', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_type_conversion_mixed_sign_or_complex_spectrum(...)' code ##################

        
        # Assigning a Tuple to a Name (line 531):
        
        # Assigning a Tuple to a Name (line 531):
        
        # Obtaining an instance of the builtin type 'tuple' (line 531)
        tuple_103256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 531)
        # Adding element type (line 531)
        str_103257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 31), 'str', 'F')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 531, 31), tuple_103256, str_103257)
        # Adding element type (line 531)
        str_103258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 36), 'str', 'D')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 531, 31), tuple_103256, str_103258)
        # Adding element type (line 531)
        str_103259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 41), 'str', 'G')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 531, 31), tuple_103256, str_103259)
        
        # Assigning a type to the variable 'complex_dtype_chars' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'complex_dtype_chars', tuple_103256)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 533)
        tuple_103260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 533)
        # Adding element type (line 533)
        
        # Obtaining an instance of the builtin type 'list' (line 533)
        list_103261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 533)
        # Adding element type (line 533)
        
        # Obtaining an instance of the builtin type 'list' (line 533)
        list_103262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 533)
        # Adding element type (line 533)
        int_103263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 533, 17), list_103262, int_103263)
        # Adding element type (line 533)
        int_103264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 533, 17), list_103262, int_103264)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 533, 16), list_103261, list_103262)
        # Adding element type (line 533)
        
        # Obtaining an instance of the builtin type 'list' (line 533)
        list_103265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 533)
        # Adding element type (line 533)
        int_103266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 533, 25), list_103265, int_103266)
        # Adding element type (line 533)
        int_103267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 533, 25), list_103265, int_103267)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 533, 16), list_103261, list_103265)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 533, 16), tuple_103260, list_103261)
        # Adding element type (line 533)
        
        # Obtaining an instance of the builtin type 'list' (line 534)
        list_103268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 534)
        # Adding element type (line 534)
        
        # Obtaining an instance of the builtin type 'list' (line 534)
        list_103269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 534)
        # Adding element type (line 534)
        int_103270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 534, 17), list_103269, int_103270)
        # Adding element type (line 534)
        int_103271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 534, 17), list_103269, int_103271)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 534, 16), list_103268, list_103269)
        # Adding element type (line 534)
        
        # Obtaining an instance of the builtin type 'list' (line 534)
        list_103272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 534)
        # Adding element type (line 534)
        int_103273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 534, 25), list_103272, int_103273)
        # Adding element type (line 534)
        int_103274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 534, 25), list_103272, int_103274)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 534, 16), list_103268, list_103272)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 533, 16), tuple_103260, list_103268)
        # Adding element type (line 533)
        
        # Obtaining an instance of the builtin type 'list' (line 535)
        list_103275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 535)
        # Adding element type (line 535)
        
        # Obtaining an instance of the builtin type 'list' (line 535)
        list_103276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 535)
        # Adding element type (line 535)
        int_103277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 17), list_103276, int_103277)
        # Adding element type (line 535)
        int_103278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 17), list_103276, int_103278)
        # Adding element type (line 535)
        int_103279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 17), list_103276, int_103279)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 16), list_103275, list_103276)
        # Adding element type (line 535)
        
        # Obtaining an instance of the builtin type 'list' (line 535)
        list_103280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 535)
        # Adding element type (line 535)
        int_103281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 28), list_103280, int_103281)
        # Adding element type (line 535)
        int_103282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 28), list_103280, int_103282)
        # Adding element type (line 535)
        int_103283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 28), list_103280, int_103283)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 16), list_103275, list_103280)
        # Adding element type (line 535)
        
        # Obtaining an instance of the builtin type 'list' (line 535)
        list_103284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 39), 'list')
        # Adding type elements to the builtin type 'list' instance (line 535)
        # Adding element type (line 535)
        int_103285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 39), list_103284, int_103285)
        # Adding element type (line 535)
        int_103286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 39), list_103284, int_103286)
        # Adding element type (line 535)
        int_103287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 39), list_103284, int_103287)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 16), list_103275, list_103284)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 533, 16), tuple_103260, list_103275)
        
        # Testing the type of a for loop iterable (line 532)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 532, 8), tuple_103260)
        # Getting the type of the for loop variable (line 532)
        for_loop_var_103288 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 532, 8), tuple_103260)
        # Assigning a type to the variable 'matrix_as_list' (line 532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 'matrix_as_list', for_loop_var_103288)
        # SSA begins for a for statement (line 532)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 538):
        
        # Assigning a Call to a Name (line 538):
        
        # Call to eigvals(...): (line 538)
        # Processing the call arguments (line 538)
        # Getting the type of 'matrix_as_list' (line 538)
        matrix_as_list_103292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 37), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 538)
        kwargs_103293 = {}
        # Getting the type of 'scipy' (line 538)
        scipy_103289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 16), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 538)
        linalg_103290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 16), scipy_103289, 'linalg')
        # Obtaining the member 'eigvals' of a type (line 538)
        eigvals_103291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 16), linalg_103290, 'eigvals')
        # Calling eigvals(args, kwargs) (line 538)
        eigvals_call_result_103294 = invoke(stypy.reporting.localization.Localization(__file__, 538, 16), eigvals_103291, *[matrix_as_list_103292], **kwargs_103293)
        
        # Assigning a type to the variable 'W' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 12), 'W', eigvals_call_result_103294)
        
        # Call to assert_(...): (line 539)
        # Processing the call arguments (line 539)
        
        # Call to any(...): (line 539)
        # Processing the call arguments (line 539)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 539, 24, True)
        # Calculating comprehension expression
        # Getting the type of 'W' (line 539)
        W_103304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 54), 'W', False)
        comprehension_103305 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 24), W_103304)
        # Assigning a type to the variable 'w' (line 539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 539, 24), 'w', comprehension_103305)
        
        # Evaluating a boolean operation
        # Getting the type of 'w' (line 539)
        w_103297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 24), 'w', False)
        # Obtaining the member 'imag' of a type (line 539)
        imag_103298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 24), w_103297, 'imag')
        
        # Getting the type of 'w' (line 539)
        w_103299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 34), 'w', False)
        # Obtaining the member 'real' of a type (line 539)
        real_103300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 34), w_103299, 'real')
        int_103301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 43), 'int')
        # Applying the binary operator '<' (line 539)
        result_lt_103302 = python_operator(stypy.reporting.localization.Localization(__file__, 539, 34), '<', real_103300, int_103301)
        
        # Applying the binary operator 'or' (line 539)
        result_or_keyword_103303 = python_operator(stypy.reporting.localization.Localization(__file__, 539, 24), 'or', imag_103298, result_lt_103302)
        
        list_103306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 24), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 24), list_103306, result_or_keyword_103303)
        # Processing the call keyword arguments (line 539)
        kwargs_103307 = {}
        # Getting the type of 'any' (line 539)
        any_103296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 20), 'any', False)
        # Calling any(args, kwargs) (line 539)
        any_call_result_103308 = invoke(stypy.reporting.localization.Localization(__file__, 539, 20), any_103296, *[list_103306], **kwargs_103307)
        
        # Processing the call keyword arguments (line 539)
        kwargs_103309 = {}
        # Getting the type of 'assert_' (line 539)
        assert__103295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 12), 'assert_', False)
        # Calling assert_(args, kwargs) (line 539)
        assert__call_result_103310 = invoke(stypy.reporting.localization.Localization(__file__, 539, 12), assert__103295, *[any_call_result_103308], **kwargs_103309)
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 543)
        tuple_103311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 543)
        # Adding element type (line 543)
        float_103312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 22), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 22), tuple_103311, float_103312)
        # Adding element type (line 543)
        float_103313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 22), tuple_103311, float_103313)
        # Adding element type (line 543)
        float_103314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 34), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 22), tuple_103311, float_103314)
        # Adding element type (line 543)
        float_103315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 39), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 22), tuple_103311, float_103315)
        
        # Testing the type of a for loop iterable (line 543)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 543, 12), tuple_103311)
        # Getting the type of the for loop variable (line 543)
        for_loop_var_103316 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 543, 12), tuple_103311)
        # Assigning a type to the variable 'p' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 12), 'p', for_loop_var_103316)
        # SSA begins for a for statement (line 543)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 546):
        
        # Assigning a Call to a Name (line 546):
        
        # Call to array(...): (line 546)
        # Processing the call arguments (line 546)
        # Getting the type of 'matrix_as_list' (line 546)
        matrix_as_list_103319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 29), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 546)
        # Getting the type of 'complex' (line 546)
        complex_103320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 51), 'complex', False)
        keyword_103321 = complex_103320
        kwargs_103322 = {'dtype': keyword_103321}
        # Getting the type of 'np' (line 546)
        np_103317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 20), 'np', False)
        # Obtaining the member 'array' of a type (line 546)
        array_103318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 20), np_103317, 'array')
        # Calling array(args, kwargs) (line 546)
        array_call_result_103323 = invoke(stypy.reporting.localization.Localization(__file__, 546, 20), array_103318, *[matrix_as_list_103319], **kwargs_103322)
        
        # Assigning a type to the variable 'A' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 16), 'A', array_call_result_103323)
        
        # Assigning a Call to a Name (line 547):
        
        # Assigning a Call to a Name (line 547):
        
        # Call to fractional_matrix_power(...): (line 547)
        # Processing the call arguments (line 547)
        # Getting the type of 'A' (line 547)
        A_103325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 50), 'A', False)
        # Getting the type of 'p' (line 547)
        p_103326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 53), 'p', False)
        # Processing the call keyword arguments (line 547)
        kwargs_103327 = {}
        # Getting the type of 'fractional_matrix_power' (line 547)
        fractional_matrix_power_103324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 26), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 547)
        fractional_matrix_power_call_result_103328 = invoke(stypy.reporting.localization.Localization(__file__, 547, 26), fractional_matrix_power_103324, *[A_103325, p_103326], **kwargs_103327)
        
        # Assigning a type to the variable 'A_power' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 16), 'A_power', fractional_matrix_power_call_result_103328)
        
        # Call to assert_(...): (line 548)
        # Processing the call arguments (line 548)
        
        # Getting the type of 'A_power' (line 548)
        A_power_103330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 24), 'A_power', False)
        # Obtaining the member 'dtype' of a type (line 548)
        dtype_103331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 24), A_power_103330, 'dtype')
        # Obtaining the member 'char' of a type (line 548)
        char_103332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 24), dtype_103331, 'char')
        # Getting the type of 'complex_dtype_chars' (line 548)
        complex_dtype_chars_103333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 46), 'complex_dtype_chars', False)
        # Applying the binary operator 'in' (line 548)
        result_contains_103334 = python_operator(stypy.reporting.localization.Localization(__file__, 548, 24), 'in', char_103332, complex_dtype_chars_103333)
        
        # Processing the call keyword arguments (line 548)
        kwargs_103335 = {}
        # Getting the type of 'assert_' (line 548)
        assert__103329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 16), 'assert_', False)
        # Calling assert_(args, kwargs) (line 548)
        assert__call_result_103336 = invoke(stypy.reporting.localization.Localization(__file__, 548, 16), assert__103329, *[result_contains_103334], **kwargs_103335)
        
        
        # Assigning a Call to a Name (line 551):
        
        # Assigning a Call to a Name (line 551):
        
        # Call to array(...): (line 551)
        # Processing the call arguments (line 551)
        # Getting the type of 'matrix_as_list' (line 551)
        matrix_as_list_103339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 29), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 551)
        # Getting the type of 'float' (line 551)
        float_103340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 51), 'float', False)
        keyword_103341 = float_103340
        kwargs_103342 = {'dtype': keyword_103341}
        # Getting the type of 'np' (line 551)
        np_103337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 20), 'np', False)
        # Obtaining the member 'array' of a type (line 551)
        array_103338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 20), np_103337, 'array')
        # Calling array(args, kwargs) (line 551)
        array_call_result_103343 = invoke(stypy.reporting.localization.Localization(__file__, 551, 20), array_103338, *[matrix_as_list_103339], **kwargs_103342)
        
        # Assigning a type to the variable 'A' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 16), 'A', array_call_result_103343)
        
        # Assigning a Call to a Name (line 552):
        
        # Assigning a Call to a Name (line 552):
        
        # Call to fractional_matrix_power(...): (line 552)
        # Processing the call arguments (line 552)
        # Getting the type of 'A' (line 552)
        A_103345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 50), 'A', False)
        # Getting the type of 'p' (line 552)
        p_103346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 53), 'p', False)
        # Processing the call keyword arguments (line 552)
        kwargs_103347 = {}
        # Getting the type of 'fractional_matrix_power' (line 552)
        fractional_matrix_power_103344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 26), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 552)
        fractional_matrix_power_call_result_103348 = invoke(stypy.reporting.localization.Localization(__file__, 552, 26), fractional_matrix_power_103344, *[A_103345, p_103346], **kwargs_103347)
        
        # Assigning a type to the variable 'A_power' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 16), 'A_power', fractional_matrix_power_call_result_103348)
        
        # Call to assert_(...): (line 553)
        # Processing the call arguments (line 553)
        
        # Getting the type of 'A_power' (line 553)
        A_power_103350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 24), 'A_power', False)
        # Obtaining the member 'dtype' of a type (line 553)
        dtype_103351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 24), A_power_103350, 'dtype')
        # Obtaining the member 'char' of a type (line 553)
        char_103352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 24), dtype_103351, 'char')
        # Getting the type of 'complex_dtype_chars' (line 553)
        complex_dtype_chars_103353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 46), 'complex_dtype_chars', False)
        # Applying the binary operator 'in' (line 553)
        result_contains_103354 = python_operator(stypy.reporting.localization.Localization(__file__, 553, 24), 'in', char_103352, complex_dtype_chars_103353)
        
        # Processing the call keyword arguments (line 553)
        kwargs_103355 = {}
        # Getting the type of 'assert_' (line 553)
        assert__103349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 16), 'assert_', False)
        # Calling assert_(args, kwargs) (line 553)
        assert__call_result_103356 = invoke(stypy.reporting.localization.Localization(__file__, 553, 16), assert__103349, *[result_contains_103354], **kwargs_103355)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_type_conversion_mixed_sign_or_complex_spectrum(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_type_conversion_mixed_sign_or_complex_spectrum' in the type store
        # Getting the type of 'stypy_return_type' (line 530)
        stypy_return_type_103357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103357)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_type_conversion_mixed_sign_or_complex_spectrum'
        return stypy_return_type_103357


    @norecursion
    def test_singular(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_singular'
        module_type_store = module_type_store.open_function_context('test_singular', 555, 4, False)
        # Assigning a type to the variable 'self' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestFractionalMatrixPower.test_singular.__dict__.__setitem__('stypy_localization', localization)
        TestFractionalMatrixPower.test_singular.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestFractionalMatrixPower.test_singular.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestFractionalMatrixPower.test_singular.__dict__.__setitem__('stypy_function_name', 'TestFractionalMatrixPower.test_singular')
        TestFractionalMatrixPower.test_singular.__dict__.__setitem__('stypy_param_names_list', [])
        TestFractionalMatrixPower.test_singular.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestFractionalMatrixPower.test_singular.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestFractionalMatrixPower.test_singular.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestFractionalMatrixPower.test_singular.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestFractionalMatrixPower.test_singular.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestFractionalMatrixPower.test_singular.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestFractionalMatrixPower.test_singular', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_singular', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_singular(...)' code ##################

        
        
        # Obtaining an instance of the builtin type 'tuple' (line 559)
        tuple_103358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 559)
        # Adding element type (line 559)
        
        # Obtaining an instance of the builtin type 'list' (line 559)
        list_103359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 559)
        # Adding element type (line 559)
        
        # Obtaining an instance of the builtin type 'list' (line 559)
        list_103360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 559)
        # Adding element type (line 559)
        int_103361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 17), list_103360, int_103361)
        # Adding element type (line 559)
        int_103362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 17), list_103360, int_103362)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 16), list_103359, list_103360)
        # Adding element type (line 559)
        
        # Obtaining an instance of the builtin type 'list' (line 559)
        list_103363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 559)
        # Adding element type (line 559)
        int_103364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 25), list_103363, int_103364)
        # Adding element type (line 559)
        int_103365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 25), list_103363, int_103365)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 16), list_103359, list_103363)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 16), tuple_103358, list_103359)
        # Adding element type (line 559)
        
        # Obtaining an instance of the builtin type 'list' (line 560)
        list_103366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 560)
        # Adding element type (line 560)
        
        # Obtaining an instance of the builtin type 'list' (line 560)
        list_103367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 560)
        # Adding element type (line 560)
        int_103368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 560, 17), list_103367, int_103368)
        # Adding element type (line 560)
        int_103369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 560, 17), list_103367, int_103369)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 560, 16), list_103366, list_103367)
        # Adding element type (line 560)
        
        # Obtaining an instance of the builtin type 'list' (line 560)
        list_103370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 560)
        # Adding element type (line 560)
        int_103371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 560, 25), list_103370, int_103371)
        # Adding element type (line 560)
        int_103372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 560, 25), list_103370, int_103372)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 560, 16), list_103366, list_103370)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 16), tuple_103358, list_103366)
        # Adding element type (line 559)
        
        # Obtaining an instance of the builtin type 'list' (line 561)
        list_103373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 561)
        # Adding element type (line 561)
        
        # Obtaining an instance of the builtin type 'list' (line 561)
        list_103374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 561)
        # Adding element type (line 561)
        int_103375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 561, 17), list_103374, int_103375)
        # Adding element type (line 561)
        int_103376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 561, 17), list_103374, int_103376)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 561, 16), list_103373, list_103374)
        # Adding element type (line 561)
        
        # Obtaining an instance of the builtin type 'list' (line 561)
        list_103377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 561)
        # Adding element type (line 561)
        int_103378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 561, 25), list_103377, int_103378)
        # Adding element type (line 561)
        int_103379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 561, 25), list_103377, int_103379)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 561, 16), list_103373, list_103377)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 16), tuple_103358, list_103373)
        # Adding element type (line 559)
        
        # Obtaining an instance of the builtin type 'list' (line 562)
        list_103380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 562)
        # Adding element type (line 562)
        
        # Obtaining an instance of the builtin type 'list' (line 562)
        list_103381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 562)
        # Adding element type (line 562)
        int_103382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 17), list_103381, int_103382)
        # Adding element type (line 562)
        int_103383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 17), list_103381, int_103383)
        # Adding element type (line 562)
        int_103384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 17), list_103381, int_103384)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 16), list_103380, list_103381)
        # Adding element type (line 562)
        
        # Obtaining an instance of the builtin type 'list' (line 562)
        list_103385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 562)
        # Adding element type (line 562)
        int_103386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 28), list_103385, int_103386)
        # Adding element type (line 562)
        int_103387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 28), list_103385, int_103387)
        # Adding element type (line 562)
        int_103388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 28), list_103385, int_103388)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 16), list_103380, list_103385)
        # Adding element type (line 562)
        
        # Obtaining an instance of the builtin type 'list' (line 562)
        list_103389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 39), 'list')
        # Adding type elements to the builtin type 'list' instance (line 562)
        # Adding element type (line 562)
        int_103390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 39), list_103389, int_103390)
        # Adding element type (line 562)
        int_103391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 39), list_103389, int_103391)
        # Adding element type (line 562)
        int_103392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 39), list_103389, int_103392)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 16), list_103380, list_103389)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 16), tuple_103358, list_103380)
        
        # Testing the type of a for loop iterable (line 558)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 558, 8), tuple_103358)
        # Getting the type of the for loop variable (line 558)
        for_loop_var_103393 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 558, 8), tuple_103358)
        # Assigning a type to the variable 'matrix_as_list' (line 558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 558, 8), 'matrix_as_list', for_loop_var_103393)
        # SSA begins for a for statement (line 558)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 565)
        tuple_103394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 565)
        # Adding element type (line 565)
        # Getting the type of 'float' (line 565)
        float_103395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 28), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 28), tuple_103394, float_103395)
        # Adding element type (line 565)
        # Getting the type of 'complex' (line 565)
        complex_103396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 35), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 28), tuple_103394, complex_103396)
        
        # Testing the type of a for loop iterable (line 565)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 565, 12), tuple_103394)
        # Getting the type of the for loop variable (line 565)
        for_loop_var_103397 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 565, 12), tuple_103394)
        # Assigning a type to the variable 'newtype' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 12), 'newtype', for_loop_var_103397)
        # SSA begins for a for statement (line 565)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 566):
        
        # Assigning a Call to a Name (line 566):
        
        # Call to array(...): (line 566)
        # Processing the call arguments (line 566)
        # Getting the type of 'matrix_as_list' (line 566)
        matrix_as_list_103400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 29), 'matrix_as_list', False)
        # Processing the call keyword arguments (line 566)
        # Getting the type of 'newtype' (line 566)
        newtype_103401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 51), 'newtype', False)
        keyword_103402 = newtype_103401
        kwargs_103403 = {'dtype': keyword_103402}
        # Getting the type of 'np' (line 566)
        np_103398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 20), 'np', False)
        # Obtaining the member 'array' of a type (line 566)
        array_103399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 20), np_103398, 'array')
        # Calling array(args, kwargs) (line 566)
        array_call_result_103404 = invoke(stypy.reporting.localization.Localization(__file__, 566, 20), array_103399, *[matrix_as_list_103400], **kwargs_103403)
        
        # Assigning a type to the variable 'A' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 16), 'A', array_call_result_103404)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 567)
        tuple_103405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 567)
        # Adding element type (line 567)
        float_103406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 26), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 567, 26), tuple_103405, float_103406)
        # Adding element type (line 567)
        float_103407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 567, 26), tuple_103405, float_103407)
        # Adding element type (line 567)
        float_103408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 567, 26), tuple_103405, float_103408)
        # Adding element type (line 567)
        float_103409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 567, 26), tuple_103405, float_103409)
        
        # Testing the type of a for loop iterable (line 567)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 567, 16), tuple_103405)
        # Getting the type of the for loop variable (line 567)
        for_loop_var_103410 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 567, 16), tuple_103405)
        # Assigning a type to the variable 'p' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 16), 'p', for_loop_var_103410)
        # SSA begins for a for statement (line 567)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 568):
        
        # Assigning a Call to a Name (line 568):
        
        # Call to fractional_matrix_power(...): (line 568)
        # Processing the call arguments (line 568)
        # Getting the type of 'A' (line 568)
        A_103412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 54), 'A', False)
        # Getting the type of 'p' (line 568)
        p_103413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 57), 'p', False)
        # Processing the call keyword arguments (line 568)
        kwargs_103414 = {}
        # Getting the type of 'fractional_matrix_power' (line 568)
        fractional_matrix_power_103411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 30), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 568)
        fractional_matrix_power_call_result_103415 = invoke(stypy.reporting.localization.Localization(__file__, 568, 30), fractional_matrix_power_103411, *[A_103412, p_103413], **kwargs_103414)
        
        # Assigning a type to the variable 'A_power' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 20), 'A_power', fractional_matrix_power_call_result_103415)
        
        # Call to assert_(...): (line 569)
        # Processing the call arguments (line 569)
        
        # Call to all(...): (line 569)
        # Processing the call keyword arguments (line 569)
        kwargs_103423 = {}
        
        # Call to isnan(...): (line 569)
        # Processing the call arguments (line 569)
        # Getting the type of 'A_power' (line 569)
        A_power_103419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 37), 'A_power', False)
        # Processing the call keyword arguments (line 569)
        kwargs_103420 = {}
        # Getting the type of 'np' (line 569)
        np_103417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 28), 'np', False)
        # Obtaining the member 'isnan' of a type (line 569)
        isnan_103418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 28), np_103417, 'isnan')
        # Calling isnan(args, kwargs) (line 569)
        isnan_call_result_103421 = invoke(stypy.reporting.localization.Localization(__file__, 569, 28), isnan_103418, *[A_power_103419], **kwargs_103420)
        
        # Obtaining the member 'all' of a type (line 569)
        all_103422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 28), isnan_call_result_103421, 'all')
        # Calling all(args, kwargs) (line 569)
        all_call_result_103424 = invoke(stypy.reporting.localization.Localization(__file__, 569, 28), all_103422, *[], **kwargs_103423)
        
        # Processing the call keyword arguments (line 569)
        kwargs_103425 = {}
        # Getting the type of 'assert_' (line 569)
        assert__103416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 20), 'assert_', False)
        # Calling assert_(args, kwargs) (line 569)
        assert__call_result_103426 = invoke(stypy.reporting.localization.Localization(__file__, 569, 20), assert__103416, *[all_call_result_103424], **kwargs_103425)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 570)
        tuple_103427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 570)
        # Adding element type (line 570)
        float_103428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 26), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 570, 26), tuple_103427, float_103428)
        # Adding element type (line 570)
        float_103429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 31), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 570, 26), tuple_103427, float_103429)
        
        # Testing the type of a for loop iterable (line 570)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 570, 16), tuple_103427)
        # Getting the type of the for loop variable (line 570)
        for_loop_var_103430 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 570, 16), tuple_103427)
        # Assigning a type to the variable 'p' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 16), 'p', for_loop_var_103430)
        # SSA begins for a for statement (line 570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 571):
        
        # Assigning a Call to a Name (line 571):
        
        # Call to fractional_matrix_power(...): (line 571)
        # Processing the call arguments (line 571)
        # Getting the type of 'A' (line 571)
        A_103432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 54), 'A', False)
        # Getting the type of 'p' (line 571)
        p_103433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 57), 'p', False)
        # Processing the call keyword arguments (line 571)
        kwargs_103434 = {}
        # Getting the type of 'fractional_matrix_power' (line 571)
        fractional_matrix_power_103431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 30), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 571)
        fractional_matrix_power_call_result_103435 = invoke(stypy.reporting.localization.Localization(__file__, 571, 30), fractional_matrix_power_103431, *[A_103432, p_103433], **kwargs_103434)
        
        # Assigning a type to the variable 'A_power' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 20), 'A_power', fractional_matrix_power_call_result_103435)
        
        # Assigning a Call to a Name (line 572):
        
        # Assigning a Call to a Name (line 572):
        
        # Call to fractional_matrix_power(...): (line 572)
        # Processing the call arguments (line 572)
        # Getting the type of 'A_power' (line 572)
        A_power_103437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 59), 'A_power', False)
        int_103438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 68), 'int')
        # Getting the type of 'p' (line 572)
        p_103439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 70), 'p', False)
        # Applying the binary operator 'div' (line 572)
        result_div_103440 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 68), 'div', int_103438, p_103439)
        
        # Processing the call keyword arguments (line 572)
        kwargs_103441 = {}
        # Getting the type of 'fractional_matrix_power' (line 572)
        fractional_matrix_power_103436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 35), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 572)
        fractional_matrix_power_call_result_103442 = invoke(stypy.reporting.localization.Localization(__file__, 572, 35), fractional_matrix_power_103436, *[A_power_103437, result_div_103440], **kwargs_103441)
        
        # Assigning a type to the variable 'A_round_trip' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 20), 'A_round_trip', fractional_matrix_power_call_result_103442)
        
        # Call to assert_allclose(...): (line 573)
        # Processing the call arguments (line 573)
        # Getting the type of 'A_round_trip' (line 573)
        A_round_trip_103444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 36), 'A_round_trip', False)
        # Getting the type of 'A' (line 573)
        A_103445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 50), 'A', False)
        # Processing the call keyword arguments (line 573)
        kwargs_103446 = {}
        # Getting the type of 'assert_allclose' (line 573)
        assert_allclose_103443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 20), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 573)
        assert_allclose_call_result_103447 = invoke(stypy.reporting.localization.Localization(__file__, 573, 20), assert_allclose_103443, *[A_round_trip_103444, A_103445], **kwargs_103446)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_singular(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_singular' in the type store
        # Getting the type of 'stypy_return_type' (line 555)
        stypy_return_type_103448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103448)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_singular'
        return stypy_return_type_103448


    @norecursion
    def test_opposite_sign_complex_eigenvalues(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_opposite_sign_complex_eigenvalues'
        module_type_store = module_type_store.open_function_context('test_opposite_sign_complex_eigenvalues', 575, 4, False)
        # Assigning a type to the variable 'self' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_localization', localization)
        TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_function_name', 'TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues')
        TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_param_names_list', [])
        TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_opposite_sign_complex_eigenvalues', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_opposite_sign_complex_eigenvalues(...)' code ##################

        
        # Assigning a List to a Name (line 576):
        
        # Assigning a List to a Name (line 576):
        
        # Obtaining an instance of the builtin type 'list' (line 576)
        list_103449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 576)
        # Adding element type (line 576)
        
        # Obtaining an instance of the builtin type 'list' (line 576)
        list_103450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 576)
        # Adding element type (line 576)
        complex_103451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 14), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 13), list_103450, complex_103451)
        # Adding element type (line 576)
        int_103452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 13), list_103450, int_103452)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 12), list_103449, list_103450)
        # Adding element type (line 576)
        
        # Obtaining an instance of the builtin type 'list' (line 576)
        list_103453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 576)
        # Adding element type (line 576)
        int_103454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 22), list_103453, int_103454)
        # Adding element type (line 576)
        complex_103455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 26), 'complex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 22), list_103453, complex_103455)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 12), list_103449, list_103453)
        
        # Assigning a type to the variable 'M' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 8), 'M', list_103449)
        
        # Assigning a List to a Name (line 577):
        
        # Assigning a List to a Name (line 577):
        
        # Obtaining an instance of the builtin type 'list' (line 577)
        list_103456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 577)
        # Adding element type (line 577)
        
        # Obtaining an instance of the builtin type 'list' (line 577)
        list_103457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 577)
        # Adding element type (line 577)
        int_103458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 14), 'int')
        complex_103459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 16), 'complex')
        # Applying the binary operator '+' (line 577)
        result_add_103460 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 14), '+', int_103458, complex_103459)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 577, 13), list_103457, result_add_103460)
        # Adding element type (line 577)
        int_103461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 577, 13), list_103457, int_103461)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 577, 12), list_103456, list_103457)
        # Adding element type (line 577)
        
        # Obtaining an instance of the builtin type 'list' (line 577)
        list_103462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 577)
        # Adding element type (line 577)
        int_103463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 577, 24), list_103462, int_103463)
        # Adding element type (line 577)
        int_103464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 28), 'int')
        complex_103465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 30), 'complex')
        # Applying the binary operator '-' (line 577)
        result_sub_103466 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 28), '-', int_103464, complex_103465)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 577, 24), list_103462, result_sub_103466)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 577, 12), list_103456, list_103462)
        
        # Assigning a type to the variable 'R' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'R', list_103456)
        
        # Call to assert_allclose(...): (line 578)
        # Processing the call arguments (line 578)
        
        # Call to dot(...): (line 578)
        # Processing the call arguments (line 578)
        # Getting the type of 'R' (line 578)
        R_103470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 31), 'R', False)
        # Getting the type of 'R' (line 578)
        R_103471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 34), 'R', False)
        # Processing the call keyword arguments (line 578)
        kwargs_103472 = {}
        # Getting the type of 'np' (line 578)
        np_103468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 24), 'np', False)
        # Obtaining the member 'dot' of a type (line 578)
        dot_103469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 24), np_103468, 'dot')
        # Calling dot(args, kwargs) (line 578)
        dot_call_result_103473 = invoke(stypy.reporting.localization.Localization(__file__, 578, 24), dot_103469, *[R_103470, R_103471], **kwargs_103472)
        
        # Getting the type of 'M' (line 578)
        M_103474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 38), 'M', False)
        # Processing the call keyword arguments (line 578)
        float_103475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 46), 'float')
        keyword_103476 = float_103475
        kwargs_103477 = {'atol': keyword_103476}
        # Getting the type of 'assert_allclose' (line 578)
        assert_allclose_103467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 578)
        assert_allclose_call_result_103478 = invoke(stypy.reporting.localization.Localization(__file__, 578, 8), assert_allclose_103467, *[dot_call_result_103473, M_103474], **kwargs_103477)
        
        
        # Call to assert_allclose(...): (line 579)
        # Processing the call arguments (line 579)
        
        # Call to fractional_matrix_power(...): (line 579)
        # Processing the call arguments (line 579)
        # Getting the type of 'M' (line 579)
        M_103481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 48), 'M', False)
        float_103482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 51), 'float')
        # Processing the call keyword arguments (line 579)
        kwargs_103483 = {}
        # Getting the type of 'fractional_matrix_power' (line 579)
        fractional_matrix_power_103480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 24), 'fractional_matrix_power', False)
        # Calling fractional_matrix_power(args, kwargs) (line 579)
        fractional_matrix_power_call_result_103484 = invoke(stypy.reporting.localization.Localization(__file__, 579, 24), fractional_matrix_power_103480, *[M_103481, float_103482], **kwargs_103483)
        
        # Getting the type of 'R' (line 579)
        R_103485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 57), 'R', False)
        # Processing the call keyword arguments (line 579)
        float_103486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 65), 'float')
        keyword_103487 = float_103486
        kwargs_103488 = {'atol': keyword_103487}
        # Getting the type of 'assert_allclose' (line 579)
        assert_allclose_103479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 579)
        assert_allclose_call_result_103489 = invoke(stypy.reporting.localization.Localization(__file__, 579, 8), assert_allclose_103479, *[fractional_matrix_power_call_result_103484, R_103485], **kwargs_103488)
        
        
        # ################# End of 'test_opposite_sign_complex_eigenvalues(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_opposite_sign_complex_eigenvalues' in the type store
        # Getting the type of 'stypy_return_type' (line 575)
        stypy_return_type_103490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103490)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_opposite_sign_complex_eigenvalues'
        return stypy_return_type_103490


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 397, 0, False)
        # Assigning a type to the variable 'self' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestFractionalMatrixPower.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'TestFractionalMatrixPower' (line 397)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 0), 'TestFractionalMatrixPower', TestFractionalMatrixPower)
# Declaration of the 'TestExpM' class

class TestExpM(object, ):

    @norecursion
    def test_zero(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_zero'
        module_type_store = module_type_store.open_function_context('test_zero', 583, 4, False)
        # Assigning a type to the variable 'self' (line 584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestExpM.test_zero.__dict__.__setitem__('stypy_localization', localization)
        TestExpM.test_zero.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestExpM.test_zero.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestExpM.test_zero.__dict__.__setitem__('stypy_function_name', 'TestExpM.test_zero')
        TestExpM.test_zero.__dict__.__setitem__('stypy_param_names_list', [])
        TestExpM.test_zero.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestExpM.test_zero.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestExpM.test_zero.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestExpM.test_zero.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestExpM.test_zero.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestExpM.test_zero.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpM.test_zero', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_zero', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_zero(...)' code ##################

        
        # Assigning a Call to a Name (line 584):
        
        # Assigning a Call to a Name (line 584):
        
        # Call to array(...): (line 584)
        # Processing the call arguments (line 584)
        
        # Obtaining an instance of the builtin type 'list' (line 584)
        list_103492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 584)
        # Adding element type (line 584)
        
        # Obtaining an instance of the builtin type 'list' (line 584)
        list_103493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 584)
        # Adding element type (line 584)
        float_103494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 20), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 584, 19), list_103493, float_103494)
        # Adding element type (line 584)
        int_103495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 584, 19), list_103493, int_103495)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 584, 18), list_103492, list_103493)
        # Adding element type (line 584)
        
        # Obtaining an instance of the builtin type 'list' (line 584)
        list_103496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 584)
        # Adding element type (line 584)
        int_103497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 584, 26), list_103496, int_103497)
        # Adding element type (line 584)
        int_103498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 584, 26), list_103496, int_103498)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 584, 18), list_103492, list_103496)
        
        # Processing the call keyword arguments (line 584)
        kwargs_103499 = {}
        # Getting the type of 'array' (line 584)
        array_103491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 12), 'array', False)
        # Calling array(args, kwargs) (line 584)
        array_call_result_103500 = invoke(stypy.reporting.localization.Localization(__file__, 584, 12), array_103491, *[list_103492], **kwargs_103499)
        
        # Assigning a type to the variable 'a' (line 584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 8), 'a', array_call_result_103500)
        
        # Call to assert_array_almost_equal(...): (line 585)
        # Processing the call arguments (line 585)
        
        # Call to expm(...): (line 585)
        # Processing the call arguments (line 585)
        # Getting the type of 'a' (line 585)
        a_103503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 39), 'a', False)
        # Processing the call keyword arguments (line 585)
        kwargs_103504 = {}
        # Getting the type of 'expm' (line 585)
        expm_103502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 34), 'expm', False)
        # Calling expm(args, kwargs) (line 585)
        expm_call_result_103505 = invoke(stypy.reporting.localization.Localization(__file__, 585, 34), expm_103502, *[a_103503], **kwargs_103504)
        
        
        # Obtaining an instance of the builtin type 'list' (line 585)
        list_103506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 585)
        # Adding element type (line 585)
        
        # Obtaining an instance of the builtin type 'list' (line 585)
        list_103507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 43), 'list')
        # Adding type elements to the builtin type 'list' instance (line 585)
        # Adding element type (line 585)
        int_103508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 44), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 585, 43), list_103507, int_103508)
        # Adding element type (line 585)
        int_103509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 585, 43), list_103507, int_103509)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 585, 42), list_103506, list_103507)
        # Adding element type (line 585)
        
        # Obtaining an instance of the builtin type 'list' (line 585)
        list_103510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 49), 'list')
        # Adding type elements to the builtin type 'list' instance (line 585)
        # Adding element type (line 585)
        int_103511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 50), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 585, 49), list_103510, int_103511)
        # Adding element type (line 585)
        int_103512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 585, 49), list_103510, int_103512)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 585, 42), list_103506, list_103510)
        
        # Processing the call keyword arguments (line 585)
        kwargs_103513 = {}
        # Getting the type of 'assert_array_almost_equal' (line 585)
        assert_array_almost_equal_103501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 8), 'assert_array_almost_equal', False)
        # Calling assert_array_almost_equal(args, kwargs) (line 585)
        assert_array_almost_equal_call_result_103514 = invoke(stypy.reporting.localization.Localization(__file__, 585, 8), assert_array_almost_equal_103501, *[expm_call_result_103505, list_103506], **kwargs_103513)
        
        
        # ################# End of 'test_zero(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_zero' in the type store
        # Getting the type of 'stypy_return_type' (line 583)
        stypy_return_type_103515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103515)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_zero'
        return stypy_return_type_103515


    @norecursion
    def test_single_elt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_single_elt'
        module_type_store = module_type_store.open_function_context('test_single_elt', 587, 4, False)
        # Assigning a type to the variable 'self' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestExpM.test_single_elt.__dict__.__setitem__('stypy_localization', localization)
        TestExpM.test_single_elt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestExpM.test_single_elt.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestExpM.test_single_elt.__dict__.__setitem__('stypy_function_name', 'TestExpM.test_single_elt')
        TestExpM.test_single_elt.__dict__.__setitem__('stypy_param_names_list', [])
        TestExpM.test_single_elt.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestExpM.test_single_elt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestExpM.test_single_elt.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestExpM.test_single_elt.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestExpM.test_single_elt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestExpM.test_single_elt.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpM.test_single_elt', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_single_elt', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_single_elt(...)' code ##################

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 589, 8))
        
        # 'from scipy.sparse import csc_matrix' statement (line 589)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/tests/')
        import_103516 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 589, 8), 'scipy.sparse')

        if (type(import_103516) is not StypyTypeError):

            if (import_103516 != 'pyd_module'):
                __import__(import_103516)
                sys_modules_103517 = sys.modules[import_103516]
                import_from_module(stypy.reporting.localization.Localization(__file__, 589, 8), 'scipy.sparse', sys_modules_103517.module_type_store, module_type_store, ['csc_matrix'])
                nest_module(stypy.reporting.localization.Localization(__file__, 589, 8), __file__, sys_modules_103517, sys_modules_103517.module_type_store, module_type_store)
            else:
                from scipy.sparse import csc_matrix

                import_from_module(stypy.reporting.localization.Localization(__file__, 589, 8), 'scipy.sparse', None, module_type_store, ['csc_matrix'], [csc_matrix])

        else:
            # Assigning a type to the variable 'scipy.sparse' (line 589)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'scipy.sparse', import_103516)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/tests/')
        
        
        # Assigning a Num to a Name (line 591):
        
        # Assigning a Num to a Name (line 591):
        complex_103518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 15), 'complex')
        # Assigning a type to the variable 'vOne' (line 591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 8), 'vOne', complex_103518)
        
        # Assigning a Num to a Name (line 592):
        
        # Assigning a Num to a Name (line 592):
        complex_103519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 15), 'complex')
        # Assigning a type to the variable 'vTwo' (line 592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 8), 'vTwo', complex_103519)
        
        # Assigning a Call to a Name (line 594):
        
        # Assigning a Call to a Name (line 594):
        
        # Call to csc_matrix(...): (line 594)
        # Processing the call arguments (line 594)
        
        # Obtaining an instance of the builtin type 'list' (line 594)
        list_103521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 594)
        # Adding element type (line 594)
        
        # Obtaining an instance of the builtin type 'list' (line 594)
        list_103522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 594)
        # Adding element type (line 594)
        # Getting the type of 'vOne' (line 594)
        vOne_103523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 28), 'vOne', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 594, 27), list_103522, vOne_103523)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 594, 26), list_103521, list_103522)
        
        # Processing the call keyword arguments (line 594)
        str_103524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 42), 'str', 'complex')
        keyword_103525 = str_103524
        kwargs_103526 = {'dtype': keyword_103525}
        # Getting the type of 'csc_matrix' (line 594)
        csc_matrix_103520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 15), 'csc_matrix', False)
        # Calling csc_matrix(args, kwargs) (line 594)
        csc_matrix_call_result_103527 = invoke(stypy.reporting.localization.Localization(__file__, 594, 15), csc_matrix_103520, *[list_103521], **kwargs_103526)
        
        # Assigning a type to the variable 'mOne' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 8), 'mOne', csc_matrix_call_result_103527)
        
        # Assigning a Call to a Name (line 595):
        
        # Assigning a Call to a Name (line 595):
        
        # Call to csc_matrix(...): (line 595)
        # Processing the call arguments (line 595)
        
        # Obtaining an instance of the builtin type 'list' (line 595)
        list_103529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 595)
        # Adding element type (line 595)
        
        # Obtaining an instance of the builtin type 'list' (line 595)
        list_103530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 595)
        # Adding element type (line 595)
        # Getting the type of 'vTwo' (line 595)
        vTwo_103531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 28), 'vTwo', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 595, 27), list_103530, vTwo_103531)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 595, 26), list_103529, list_103530)
        
        # Processing the call keyword arguments (line 595)
        str_103532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 42), 'str', 'complex')
        keyword_103533 = str_103532
        kwargs_103534 = {'dtype': keyword_103533}
        # Getting the type of 'csc_matrix' (line 595)
        csc_matrix_103528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 15), 'csc_matrix', False)
        # Calling csc_matrix(args, kwargs) (line 595)
        csc_matrix_call_result_103535 = invoke(stypy.reporting.localization.Localization(__file__, 595, 15), csc_matrix_103528, *[list_103529], **kwargs_103534)
        
        # Assigning a type to the variable 'mTwo' (line 595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 8), 'mTwo', csc_matrix_call_result_103535)
        
        # Assigning a Call to a Name (line 597):
        
        # Assigning a Call to a Name (line 597):
        
        # Call to expm(...): (line 597)
        # Processing the call arguments (line 597)
        # Getting the type of 'mOne' (line 597)
        mOne_103537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 22), 'mOne', False)
        # Processing the call keyword arguments (line 597)
        kwargs_103538 = {}
        # Getting the type of 'expm' (line 597)
        expm_103536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 17), 'expm', False)
        # Calling expm(args, kwargs) (line 597)
        expm_call_result_103539 = invoke(stypy.reporting.localization.Localization(__file__, 597, 17), expm_103536, *[mOne_103537], **kwargs_103538)
        
        # Assigning a type to the variable 'outOne' (line 597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'outOne', expm_call_result_103539)
        
        # Assigning a Call to a Name (line 598):
        
        # Assigning a Call to a Name (line 598):
        
        # Call to expm(...): (line 598)
        # Processing the call arguments (line 598)
        # Getting the type of 'mTwo' (line 598)
        mTwo_103541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 22), 'mTwo', False)
        # Processing the call keyword arguments (line 598)
        kwargs_103542 = {}
        # Getting the type of 'expm' (line 598)
        expm_103540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 17), 'expm', False)
        # Calling expm(args, kwargs) (line 598)
        expm_call_result_103543 = invoke(stypy.reporting.localization.Localization(__file__, 598, 17), expm_103540, *[mTwo_103541], **kwargs_103542)
        
        # Assigning a type to the variable 'outTwo' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'outTwo', expm_call_result_103543)
        
        # Call to assert_equal(...): (line 600)
        # Processing the call arguments (line 600)
        
        # Call to type(...): (line 600)
        # Processing the call arguments (line 600)
        # Getting the type of 'outOne' (line 600)
        outOne_103546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 26), 'outOne', False)
        # Processing the call keyword arguments (line 600)
        kwargs_103547 = {}
        # Getting the type of 'type' (line 600)
        type_103545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 21), 'type', False)
        # Calling type(args, kwargs) (line 600)
        type_call_result_103548 = invoke(stypy.reporting.localization.Localization(__file__, 600, 21), type_103545, *[outOne_103546], **kwargs_103547)
        
        
        # Call to type(...): (line 600)
        # Processing the call arguments (line 600)
        # Getting the type of 'mOne' (line 600)
        mOne_103550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 40), 'mOne', False)
        # Processing the call keyword arguments (line 600)
        kwargs_103551 = {}
        # Getting the type of 'type' (line 600)
        type_103549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 35), 'type', False)
        # Calling type(args, kwargs) (line 600)
        type_call_result_103552 = invoke(stypy.reporting.localization.Localization(__file__, 600, 35), type_103549, *[mOne_103550], **kwargs_103551)
        
        # Processing the call keyword arguments (line 600)
        kwargs_103553 = {}
        # Getting the type of 'assert_equal' (line 600)
        assert_equal_103544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'assert_equal', False)
        # Calling assert_equal(args, kwargs) (line 600)
        assert_equal_call_result_103554 = invoke(stypy.reporting.localization.Localization(__file__, 600, 8), assert_equal_103544, *[type_call_result_103548, type_call_result_103552], **kwargs_103553)
        
        
        # Call to assert_equal(...): (line 601)
        # Processing the call arguments (line 601)
        
        # Call to type(...): (line 601)
        # Processing the call arguments (line 601)
        # Getting the type of 'outTwo' (line 601)
        outTwo_103557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 26), 'outTwo', False)
        # Processing the call keyword arguments (line 601)
        kwargs_103558 = {}
        # Getting the type of 'type' (line 601)
        type_103556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 21), 'type', False)
        # Calling type(args, kwargs) (line 601)
        type_call_result_103559 = invoke(stypy.reporting.localization.Localization(__file__, 601, 21), type_103556, *[outTwo_103557], **kwargs_103558)
        
        
        # Call to type(...): (line 601)
        # Processing the call arguments (line 601)
        # Getting the type of 'mTwo' (line 601)
        mTwo_103561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 40), 'mTwo', False)
        # Processing the call keyword arguments (line 601)
        kwargs_103562 = {}
        # Getting the type of 'type' (line 601)
        type_103560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 35), 'type', False)
        # Calling type(args, kwargs) (line 601)
        type_call_result_103563 = invoke(stypy.reporting.localization.Localization(__file__, 601, 35), type_103560, *[mTwo_103561], **kwargs_103562)
        
        # Processing the call keyword arguments (line 601)
        kwargs_103564 = {}
        # Getting the type of 'assert_equal' (line 601)
        assert_equal_103555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 8), 'assert_equal', False)
        # Calling assert_equal(args, kwargs) (line 601)
        assert_equal_call_result_103565 = invoke(stypy.reporting.localization.Localization(__file__, 601, 8), assert_equal_103555, *[type_call_result_103559, type_call_result_103563], **kwargs_103564)
        
        
        # Call to assert_allclose(...): (line 603)
        # Processing the call arguments (line 603)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 603)
        tuple_103567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 603)
        # Adding element type (line 603)
        int_103568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 31), tuple_103567, int_103568)
        # Adding element type (line 603)
        int_103569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 31), tuple_103567, int_103569)
        
        # Getting the type of 'outOne' (line 603)
        outOne_103570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 24), 'outOne', False)
        # Obtaining the member '__getitem__' of a type (line 603)
        getitem___103571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 24), outOne_103570, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 603)
        subscript_call_result_103572 = invoke(stypy.reporting.localization.Localization(__file__, 603, 24), getitem___103571, tuple_103567)
        
        
        # Call to complex(...): (line 603)
        # Processing the call arguments (line 603)
        float_103574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 46), 'float')
        float_103575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 46), 'float')
        # Processing the call keyword arguments (line 603)
        kwargs_103576 = {}
        # Getting the type of 'complex' (line 603)
        complex_103573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 38), 'complex', False)
        # Calling complex(args, kwargs) (line 603)
        complex_call_result_103577 = invoke(stypy.reporting.localization.Localization(__file__, 603, 38), complex_103573, *[float_103574, float_103575], **kwargs_103576)
        
        # Processing the call keyword arguments (line 603)
        kwargs_103578 = {}
        # Getting the type of 'assert_allclose' (line 603)
        assert_allclose_103566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 603)
        assert_allclose_call_result_103579 = invoke(stypy.reporting.localization.Localization(__file__, 603, 8), assert_allclose_103566, *[subscript_call_result_103572, complex_call_result_103577], **kwargs_103578)
        
        
        # Call to assert_allclose(...): (line 605)
        # Processing the call arguments (line 605)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 605)
        tuple_103581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 605)
        # Adding element type (line 605)
        int_103582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 31), tuple_103581, int_103582)
        # Adding element type (line 605)
        int_103583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 31), tuple_103581, int_103583)
        
        # Getting the type of 'outTwo' (line 605)
        outTwo_103584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 24), 'outTwo', False)
        # Obtaining the member '__getitem__' of a type (line 605)
        getitem___103585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 24), outTwo_103584, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 605)
        subscript_call_result_103586 = invoke(stypy.reporting.localization.Localization(__file__, 605, 24), getitem___103585, tuple_103581)
        
        
        # Call to complex(...): (line 605)
        # Processing the call arguments (line 605)
        float_103588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 46), 'float')
        float_103589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 46), 'float')
        # Processing the call keyword arguments (line 605)
        kwargs_103590 = {}
        # Getting the type of 'complex' (line 605)
        complex_103587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 38), 'complex', False)
        # Calling complex(args, kwargs) (line 605)
        complex_call_result_103591 = invoke(stypy.reporting.localization.Localization(__file__, 605, 38), complex_103587, *[float_103588, float_103589], **kwargs_103590)
        
        # Processing the call keyword arguments (line 605)
        kwargs_103592 = {}
        # Getting the type of 'assert_allclose' (line 605)
        assert_allclose_103580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 605)
        assert_allclose_call_result_103593 = invoke(stypy.reporting.localization.Localization(__file__, 605, 8), assert_allclose_103580, *[subscript_call_result_103586, complex_call_result_103591], **kwargs_103592)
        
        
        # ################# End of 'test_single_elt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_single_elt' in the type store
        # Getting the type of 'stypy_return_type' (line 587)
        stypy_return_type_103594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103594)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_single_elt'
        return stypy_return_type_103594


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 582, 0, False)
        # Assigning a type to the variable 'self' (line 583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpM.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'TestExpM' (line 582)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 0), 'TestExpM', TestExpM)
# Declaration of the 'TestExpmFrechet' class

class TestExpmFrechet(object, ):

    @norecursion
    def test_expm_frechet(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_expm_frechet'
        module_type_store = module_type_store.open_function_context('test_expm_frechet', 611, 4, False)
        # Assigning a type to the variable 'self' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestExpmFrechet.test_expm_frechet.__dict__.__setitem__('stypy_localization', localization)
        TestExpmFrechet.test_expm_frechet.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestExpmFrechet.test_expm_frechet.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestExpmFrechet.test_expm_frechet.__dict__.__setitem__('stypy_function_name', 'TestExpmFrechet.test_expm_frechet')
        TestExpmFrechet.test_expm_frechet.__dict__.__setitem__('stypy_param_names_list', [])
        TestExpmFrechet.test_expm_frechet.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestExpmFrechet.test_expm_frechet.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestExpmFrechet.test_expm_frechet.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestExpmFrechet.test_expm_frechet.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestExpmFrechet.test_expm_frechet.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestExpmFrechet.test_expm_frechet.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpmFrechet.test_expm_frechet', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_expm_frechet', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_expm_frechet(...)' code ##################

        
        # Assigning a Call to a Name (line 613):
        
        # Assigning a Call to a Name (line 613):
        
        # Call to array(...): (line 613)
        # Processing the call arguments (line 613)
        
        # Obtaining an instance of the builtin type 'list' (line 613)
        list_103597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 613)
        # Adding element type (line 613)
        
        # Obtaining an instance of the builtin type 'list' (line 614)
        list_103598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 614)
        # Adding element type (line 614)
        int_103599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 614, 12), list_103598, int_103599)
        # Adding element type (line 614)
        int_103600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 614, 12), list_103598, int_103600)
        # Adding element type (line 614)
        int_103601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 614, 12), list_103598, int_103601)
        # Adding element type (line 614)
        int_103602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 614, 12), list_103598, int_103602)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 613, 21), list_103597, list_103598)
        # Adding element type (line 613)
        
        # Obtaining an instance of the builtin type 'list' (line 615)
        list_103603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 615)
        # Adding element type (line 615)
        int_103604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 12), list_103603, int_103604)
        # Adding element type (line 615)
        int_103605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 12), list_103603, int_103605)
        # Adding element type (line 615)
        int_103606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 12), list_103603, int_103606)
        # Adding element type (line 615)
        int_103607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 12), list_103603, int_103607)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 613, 21), list_103597, list_103603)
        # Adding element type (line 613)
        
        # Obtaining an instance of the builtin type 'list' (line 616)
        list_103608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 616)
        # Adding element type (line 616)
        int_103609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 616, 12), list_103608, int_103609)
        # Adding element type (line 616)
        int_103610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 616, 12), list_103608, int_103610)
        # Adding element type (line 616)
        int_103611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 616, 12), list_103608, int_103611)
        # Adding element type (line 616)
        int_103612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 616, 12), list_103608, int_103612)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 613, 21), list_103597, list_103608)
        # Adding element type (line 613)
        
        # Obtaining an instance of the builtin type 'list' (line 617)
        list_103613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 617)
        # Adding element type (line 617)
        int_103614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 617, 12), list_103613, int_103614)
        # Adding element type (line 617)
        int_103615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 617, 12), list_103613, int_103615)
        # Adding element type (line 617)
        int_103616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 617, 12), list_103613, int_103616)
        # Adding element type (line 617)
        int_103617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 617, 12), list_103613, int_103617)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 613, 21), list_103597, list_103613)
        
        # Processing the call keyword arguments (line 613)
        # Getting the type of 'float' (line 618)
        float_103618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 21), 'float', False)
        keyword_103619 = float_103618
        kwargs_103620 = {'dtype': keyword_103619}
        # Getting the type of 'np' (line 613)
        np_103595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 613)
        array_103596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 12), np_103595, 'array')
        # Calling array(args, kwargs) (line 613)
        array_call_result_103621 = invoke(stypy.reporting.localization.Localization(__file__, 613, 12), array_103596, *[list_103597], **kwargs_103620)
        
        # Assigning a type to the variable 'M' (line 613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 8), 'M', array_call_result_103621)
        
        # Assigning a Call to a Name (line 619):
        
        # Assigning a Call to a Name (line 619):
        
        # Call to array(...): (line 619)
        # Processing the call arguments (line 619)
        
        # Obtaining an instance of the builtin type 'list' (line 619)
        list_103624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 619)
        # Adding element type (line 619)
        
        # Obtaining an instance of the builtin type 'list' (line 620)
        list_103625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 620)
        # Adding element type (line 620)
        int_103626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 620, 12), list_103625, int_103626)
        # Adding element type (line 620)
        int_103627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 620, 12), list_103625, int_103627)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 619, 21), list_103624, list_103625)
        # Adding element type (line 619)
        
        # Obtaining an instance of the builtin type 'list' (line 621)
        list_103628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 621)
        # Adding element type (line 621)
        int_103629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 621, 12), list_103628, int_103629)
        # Adding element type (line 621)
        int_103630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 621, 12), list_103628, int_103630)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 619, 21), list_103624, list_103628)
        
        # Processing the call keyword arguments (line 619)
        # Getting the type of 'float' (line 622)
        float_103631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 21), 'float', False)
        keyword_103632 = float_103631
        kwargs_103633 = {'dtype': keyword_103632}
        # Getting the type of 'np' (line 619)
        np_103622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 619)
        array_103623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 12), np_103622, 'array')
        # Calling array(args, kwargs) (line 619)
        array_call_result_103634 = invoke(stypy.reporting.localization.Localization(__file__, 619, 12), array_103623, *[list_103624], **kwargs_103633)
        
        # Assigning a type to the variable 'A' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 8), 'A', array_call_result_103634)
        
        # Assigning a Call to a Name (line 623):
        
        # Assigning a Call to a Name (line 623):
        
        # Call to array(...): (line 623)
        # Processing the call arguments (line 623)
        
        # Obtaining an instance of the builtin type 'list' (line 623)
        list_103637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 623)
        # Adding element type (line 623)
        
        # Obtaining an instance of the builtin type 'list' (line 624)
        list_103638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 624)
        # Adding element type (line 624)
        int_103639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 624, 12), list_103638, int_103639)
        # Adding element type (line 624)
        int_103640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 624, 12), list_103638, int_103640)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 623, 21), list_103637, list_103638)
        # Adding element type (line 623)
        
        # Obtaining an instance of the builtin type 'list' (line 625)
        list_103641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 625)
        # Adding element type (line 625)
        int_103642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 625, 12), list_103641, int_103642)
        # Adding element type (line 625)
        int_103643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 625, 12), list_103641, int_103643)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 623, 21), list_103637, list_103641)
        
        # Processing the call keyword arguments (line 623)
        # Getting the type of 'float' (line 626)
        float_103644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 21), 'float', False)
        keyword_103645 = float_103644
        kwargs_103646 = {'dtype': keyword_103645}
        # Getting the type of 'np' (line 623)
        np_103635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 623)
        array_103636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 12), np_103635, 'array')
        # Calling array(args, kwargs) (line 623)
        array_call_result_103647 = invoke(stypy.reporting.localization.Localization(__file__, 623, 12), array_103636, *[list_103637], **kwargs_103646)
        
        # Assigning a type to the variable 'E' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 8), 'E', array_call_result_103647)
        
        # Assigning a Call to a Name (line 627):
        
        # Assigning a Call to a Name (line 627):
        
        # Call to expm(...): (line 627)
        # Processing the call arguments (line 627)
        # Getting the type of 'A' (line 627)
        A_103651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 42), 'A', False)
        # Processing the call keyword arguments (line 627)
        kwargs_103652 = {}
        # Getting the type of 'scipy' (line 627)
        scipy_103648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 24), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 627)
        linalg_103649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 24), scipy_103648, 'linalg')
        # Obtaining the member 'expm' of a type (line 627)
        expm_103650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 24), linalg_103649, 'expm')
        # Calling expm(args, kwargs) (line 627)
        expm_call_result_103653 = invoke(stypy.reporting.localization.Localization(__file__, 627, 24), expm_103650, *[A_103651], **kwargs_103652)
        
        # Assigning a type to the variable 'expected_expm' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 8), 'expected_expm', expm_call_result_103653)
        
        # Assigning a Subscript to a Name (line 628):
        
        # Assigning a Subscript to a Name (line 628):
        
        # Obtaining the type of the subscript
        int_103654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 49), 'int')
        slice_103655 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 628, 27), None, int_103654, None)
        int_103656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 52), 'int')
        slice_103657 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 628, 27), int_103656, None, None)
        
        # Call to expm(...): (line 628)
        # Processing the call arguments (line 628)
        # Getting the type of 'M' (line 628)
        M_103661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 45), 'M', False)
        # Processing the call keyword arguments (line 628)
        kwargs_103662 = {}
        # Getting the type of 'scipy' (line 628)
        scipy_103658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 27), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 628)
        linalg_103659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 27), scipy_103658, 'linalg')
        # Obtaining the member 'expm' of a type (line 628)
        expm_103660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 27), linalg_103659, 'expm')
        # Calling expm(args, kwargs) (line 628)
        expm_call_result_103663 = invoke(stypy.reporting.localization.Localization(__file__, 628, 27), expm_103660, *[M_103661], **kwargs_103662)
        
        # Obtaining the member '__getitem__' of a type (line 628)
        getitem___103664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 27), expm_call_result_103663, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 628)
        subscript_call_result_103665 = invoke(stypy.reporting.localization.Localization(__file__, 628, 27), getitem___103664, (slice_103655, slice_103657))
        
        # Assigning a type to the variable 'expected_frechet' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'expected_frechet', subscript_call_result_103665)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 629)
        tuple_103666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 629)
        # Adding element type (line 629)
        
        # Obtaining an instance of the builtin type 'dict' (line 629)
        dict_103667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 23), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 629)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 23), tuple_103666, dict_103667)
        # Adding element type (line 629)
        
        # Obtaining an instance of the builtin type 'dict' (line 629)
        dict_103668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 27), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 629)
        # Adding element type (key, value) (line 629)
        str_103669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 28), 'str', 'method')
        str_103670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 37), 'str', 'SPS')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 27), dict_103668, (str_103669, str_103670))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 23), tuple_103666, dict_103668)
        # Adding element type (line 629)
        
        # Obtaining an instance of the builtin type 'dict' (line 629)
        dict_103671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 45), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 629)
        # Adding element type (key, value) (line 629)
        str_103672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 46), 'str', 'method')
        str_103673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 55), 'str', 'blockEnlarge')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 45), dict_103671, (str_103672, str_103673))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 23), tuple_103666, dict_103671)
        
        # Testing the type of a for loop iterable (line 629)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 629, 8), tuple_103666)
        # Getting the type of the for loop variable (line 629)
        for_loop_var_103674 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 629, 8), tuple_103666)
        # Assigning a type to the variable 'kwargs' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'kwargs', for_loop_var_103674)
        # SSA begins for a for statement (line 629)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Tuple (line 630):
        
        # Assigning a Subscript to a Name (line 630):
        
        # Obtaining the type of the subscript
        int_103675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 12), 'int')
        
        # Call to expm_frechet(...): (line 630)
        # Processing the call arguments (line 630)
        # Getting the type of 'A' (line 630)
        A_103677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 59), 'A', False)
        # Getting the type of 'E' (line 630)
        E_103678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 62), 'E', False)
        # Processing the call keyword arguments (line 630)
        # Getting the type of 'kwargs' (line 630)
        kwargs_103679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 67), 'kwargs', False)
        kwargs_103680 = {'kwargs_103679': kwargs_103679}
        # Getting the type of 'expm_frechet' (line 630)
        expm_frechet_103676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 46), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 630)
        expm_frechet_call_result_103681 = invoke(stypy.reporting.localization.Localization(__file__, 630, 46), expm_frechet_103676, *[A_103677, E_103678], **kwargs_103680)
        
        # Obtaining the member '__getitem__' of a type (line 630)
        getitem___103682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 12), expm_frechet_call_result_103681, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 630)
        subscript_call_result_103683 = invoke(stypy.reporting.localization.Localization(__file__, 630, 12), getitem___103682, int_103675)
        
        # Assigning a type to the variable 'tuple_var_assignment_100587' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 12), 'tuple_var_assignment_100587', subscript_call_result_103683)
        
        # Assigning a Subscript to a Name (line 630):
        
        # Obtaining the type of the subscript
        int_103684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 12), 'int')
        
        # Call to expm_frechet(...): (line 630)
        # Processing the call arguments (line 630)
        # Getting the type of 'A' (line 630)
        A_103686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 59), 'A', False)
        # Getting the type of 'E' (line 630)
        E_103687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 62), 'E', False)
        # Processing the call keyword arguments (line 630)
        # Getting the type of 'kwargs' (line 630)
        kwargs_103688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 67), 'kwargs', False)
        kwargs_103689 = {'kwargs_103688': kwargs_103688}
        # Getting the type of 'expm_frechet' (line 630)
        expm_frechet_103685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 46), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 630)
        expm_frechet_call_result_103690 = invoke(stypy.reporting.localization.Localization(__file__, 630, 46), expm_frechet_103685, *[A_103686, E_103687], **kwargs_103689)
        
        # Obtaining the member '__getitem__' of a type (line 630)
        getitem___103691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 12), expm_frechet_call_result_103690, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 630)
        subscript_call_result_103692 = invoke(stypy.reporting.localization.Localization(__file__, 630, 12), getitem___103691, int_103684)
        
        # Assigning a type to the variable 'tuple_var_assignment_100588' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 12), 'tuple_var_assignment_100588', subscript_call_result_103692)
        
        # Assigning a Name to a Name (line 630):
        # Getting the type of 'tuple_var_assignment_100587' (line 630)
        tuple_var_assignment_100587_103693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 12), 'tuple_var_assignment_100587')
        # Assigning a type to the variable 'observed_expm' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 12), 'observed_expm', tuple_var_assignment_100587_103693)
        
        # Assigning a Name to a Name (line 630):
        # Getting the type of 'tuple_var_assignment_100588' (line 630)
        tuple_var_assignment_100588_103694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 12), 'tuple_var_assignment_100588')
        # Assigning a type to the variable 'observed_frechet' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 27), 'observed_frechet', tuple_var_assignment_100588_103694)
        
        # Call to assert_allclose(...): (line 631)
        # Processing the call arguments (line 631)
        # Getting the type of 'expected_expm' (line 631)
        expected_expm_103696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 28), 'expected_expm', False)
        # Getting the type of 'observed_expm' (line 631)
        observed_expm_103697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 43), 'observed_expm', False)
        # Processing the call keyword arguments (line 631)
        kwargs_103698 = {}
        # Getting the type of 'assert_allclose' (line 631)
        assert_allclose_103695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 631)
        assert_allclose_call_result_103699 = invoke(stypy.reporting.localization.Localization(__file__, 631, 12), assert_allclose_103695, *[expected_expm_103696, observed_expm_103697], **kwargs_103698)
        
        
        # Call to assert_allclose(...): (line 632)
        # Processing the call arguments (line 632)
        # Getting the type of 'expected_frechet' (line 632)
        expected_frechet_103701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 28), 'expected_frechet', False)
        # Getting the type of 'observed_frechet' (line 632)
        observed_frechet_103702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 46), 'observed_frechet', False)
        # Processing the call keyword arguments (line 632)
        kwargs_103703 = {}
        # Getting the type of 'assert_allclose' (line 632)
        assert_allclose_103700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 632)
        assert_allclose_call_result_103704 = invoke(stypy.reporting.localization.Localization(__file__, 632, 12), assert_allclose_103700, *[expected_frechet_103701, observed_frechet_103702], **kwargs_103703)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_expm_frechet(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_expm_frechet' in the type store
        # Getting the type of 'stypy_return_type' (line 611)
        stypy_return_type_103705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103705)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_expm_frechet'
        return stypy_return_type_103705


    @norecursion
    def test_small_norm_expm_frechet(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_small_norm_expm_frechet'
        module_type_store = module_type_store.open_function_context('test_small_norm_expm_frechet', 634, 4, False)
        # Assigning a type to the variable 'self' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestExpmFrechet.test_small_norm_expm_frechet.__dict__.__setitem__('stypy_localization', localization)
        TestExpmFrechet.test_small_norm_expm_frechet.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestExpmFrechet.test_small_norm_expm_frechet.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestExpmFrechet.test_small_norm_expm_frechet.__dict__.__setitem__('stypy_function_name', 'TestExpmFrechet.test_small_norm_expm_frechet')
        TestExpmFrechet.test_small_norm_expm_frechet.__dict__.__setitem__('stypy_param_names_list', [])
        TestExpmFrechet.test_small_norm_expm_frechet.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestExpmFrechet.test_small_norm_expm_frechet.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestExpmFrechet.test_small_norm_expm_frechet.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestExpmFrechet.test_small_norm_expm_frechet.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestExpmFrechet.test_small_norm_expm_frechet.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestExpmFrechet.test_small_norm_expm_frechet.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpmFrechet.test_small_norm_expm_frechet', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_small_norm_expm_frechet', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_small_norm_expm_frechet(...)' code ##################

        
        # Assigning a Call to a Name (line 636):
        
        # Assigning a Call to a Name (line 636):
        
        # Call to array(...): (line 636)
        # Processing the call arguments (line 636)
        
        # Obtaining an instance of the builtin type 'list' (line 636)
        list_103708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 636)
        # Adding element type (line 636)
        
        # Obtaining an instance of the builtin type 'list' (line 637)
        list_103709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 637)
        # Adding element type (line 637)
        int_103710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 637, 12), list_103709, int_103710)
        # Adding element type (line 637)
        int_103711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 637, 12), list_103709, int_103711)
        # Adding element type (line 637)
        int_103712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 637, 12), list_103709, int_103712)
        # Adding element type (line 637)
        int_103713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 637, 12), list_103709, int_103713)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 30), list_103708, list_103709)
        # Adding element type (line 636)
        
        # Obtaining an instance of the builtin type 'list' (line 638)
        list_103714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 638)
        # Adding element type (line 638)
        int_103715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 638, 12), list_103714, int_103715)
        # Adding element type (line 638)
        int_103716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 638, 12), list_103714, int_103716)
        # Adding element type (line 638)
        int_103717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 638, 12), list_103714, int_103717)
        # Adding element type (line 638)
        int_103718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 638, 12), list_103714, int_103718)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 30), list_103708, list_103714)
        # Adding element type (line 636)
        
        # Obtaining an instance of the builtin type 'list' (line 639)
        list_103719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 639)
        # Adding element type (line 639)
        int_103720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), list_103719, int_103720)
        # Adding element type (line 639)
        int_103721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), list_103719, int_103721)
        # Adding element type (line 639)
        int_103722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), list_103719, int_103722)
        # Adding element type (line 639)
        int_103723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), list_103719, int_103723)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 30), list_103708, list_103719)
        # Adding element type (line 636)
        
        # Obtaining an instance of the builtin type 'list' (line 640)
        list_103724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 640)
        # Adding element type (line 640)
        int_103725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 640, 12), list_103724, int_103725)
        # Adding element type (line 640)
        int_103726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 640, 12), list_103724, int_103726)
        # Adding element type (line 640)
        int_103727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 640, 12), list_103724, int_103727)
        # Adding element type (line 640)
        int_103728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 640, 12), list_103724, int_103728)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 30), list_103708, list_103724)
        
        # Processing the call keyword arguments (line 636)
        # Getting the type of 'float' (line 641)
        float_103729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 21), 'float', False)
        keyword_103730 = float_103729
        kwargs_103731 = {'dtype': keyword_103730}
        # Getting the type of 'np' (line 636)
        np_103706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 21), 'np', False)
        # Obtaining the member 'array' of a type (line 636)
        array_103707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 21), np_103706, 'array')
        # Calling array(args, kwargs) (line 636)
        array_call_result_103732 = invoke(stypy.reporting.localization.Localization(__file__, 636, 21), array_103707, *[list_103708], **kwargs_103731)
        
        # Assigning a type to the variable 'M_original' (line 636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 8), 'M_original', array_call_result_103732)
        
        # Assigning a Call to a Name (line 642):
        
        # Assigning a Call to a Name (line 642):
        
        # Call to array(...): (line 642)
        # Processing the call arguments (line 642)
        
        # Obtaining an instance of the builtin type 'list' (line 642)
        list_103735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 642)
        # Adding element type (line 642)
        
        # Obtaining an instance of the builtin type 'list' (line 643)
        list_103736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 643, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 643)
        # Adding element type (line 643)
        int_103737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 643, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 643, 12), list_103736, int_103737)
        # Adding element type (line 643)
        int_103738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 643, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 643, 12), list_103736, int_103738)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 30), list_103735, list_103736)
        # Adding element type (line 642)
        
        # Obtaining an instance of the builtin type 'list' (line 644)
        list_103739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 644)
        # Adding element type (line 644)
        int_103740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 12), list_103739, int_103740)
        # Adding element type (line 644)
        int_103741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 12), list_103739, int_103741)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 30), list_103735, list_103739)
        
        # Processing the call keyword arguments (line 642)
        # Getting the type of 'float' (line 645)
        float_103742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 21), 'float', False)
        keyword_103743 = float_103742
        kwargs_103744 = {'dtype': keyword_103743}
        # Getting the type of 'np' (line 642)
        np_103733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 21), 'np', False)
        # Obtaining the member 'array' of a type (line 642)
        array_103734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 21), np_103733, 'array')
        # Calling array(args, kwargs) (line 642)
        array_call_result_103745 = invoke(stypy.reporting.localization.Localization(__file__, 642, 21), array_103734, *[list_103735], **kwargs_103744)
        
        # Assigning a type to the variable 'A_original' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 8), 'A_original', array_call_result_103745)
        
        # Assigning a Call to a Name (line 646):
        
        # Assigning a Call to a Name (line 646):
        
        # Call to array(...): (line 646)
        # Processing the call arguments (line 646)
        
        # Obtaining an instance of the builtin type 'list' (line 646)
        list_103748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 646, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 646)
        # Adding element type (line 646)
        
        # Obtaining an instance of the builtin type 'list' (line 647)
        list_103749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 647)
        # Adding element type (line 647)
        int_103750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 647, 12), list_103749, int_103750)
        # Adding element type (line 647)
        int_103751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 647, 12), list_103749, int_103751)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 646, 30), list_103748, list_103749)
        # Adding element type (line 646)
        
        # Obtaining an instance of the builtin type 'list' (line 648)
        list_103752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 648)
        # Adding element type (line 648)
        int_103753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 648, 12), list_103752, int_103753)
        # Adding element type (line 648)
        int_103754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 648, 12), list_103752, int_103754)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 646, 30), list_103748, list_103752)
        
        # Processing the call keyword arguments (line 646)
        # Getting the type of 'float' (line 649)
        float_103755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 21), 'float', False)
        keyword_103756 = float_103755
        kwargs_103757 = {'dtype': keyword_103756}
        # Getting the type of 'np' (line 646)
        np_103746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 21), 'np', False)
        # Obtaining the member 'array' of a type (line 646)
        array_103747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 21), np_103746, 'array')
        # Calling array(args, kwargs) (line 646)
        array_call_result_103758 = invoke(stypy.reporting.localization.Localization(__file__, 646, 21), array_103747, *[list_103748], **kwargs_103757)
        
        # Assigning a type to the variable 'E_original' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 8), 'E_original', array_call_result_103758)
        
        # Assigning a Call to a Name (line 650):
        
        # Assigning a Call to a Name (line 650):
        
        # Call to norm(...): (line 650)
        # Processing the call arguments (line 650)
        # Getting the type of 'A_original' (line 650)
        A_original_103762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 46), 'A_original', False)
        int_103763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 58), 'int')
        # Processing the call keyword arguments (line 650)
        kwargs_103764 = {}
        # Getting the type of 'scipy' (line 650)
        scipy_103759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 28), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 650)
        linalg_103760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 28), scipy_103759, 'linalg')
        # Obtaining the member 'norm' of a type (line 650)
        norm_103761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 28), linalg_103760, 'norm')
        # Calling norm(args, kwargs) (line 650)
        norm_call_result_103765 = invoke(stypy.reporting.localization.Localization(__file__, 650, 28), norm_103761, *[A_original_103762, int_103763], **kwargs_103764)
        
        # Assigning a type to the variable 'A_original_norm_1' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'A_original_norm_1', norm_call_result_103765)
        
        # Assigning a List to a Name (line 651):
        
        # Assigning a List to a Name (line 651):
        
        # Obtaining an instance of the builtin type 'list' (line 651)
        list_103766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 651)
        # Adding element type (line 651)
        int_103767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 26), list_103766, int_103767)
        # Adding element type (line 651)
        int_103768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 30), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 26), list_103766, int_103768)
        # Adding element type (line 651)
        int_103769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 26), list_103766, int_103769)
        # Adding element type (line 651)
        int_103770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 26), list_103766, int_103770)
        # Adding element type (line 651)
        int_103771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 39), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 26), list_103766, int_103771)
        # Adding element type (line 651)
        int_103772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 26), list_103766, int_103772)
        # Adding element type (line 651)
        int_103773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 26), list_103766, int_103773)
        # Adding element type (line 651)
        int_103774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 50), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 26), list_103766, int_103774)
        
        # Assigning a type to the variable 'selected_m_list' (line 651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 8), 'selected_m_list', list_103766)
        
        # Assigning a Call to a Name (line 652):
        
        # Assigning a Call to a Name (line 652):
        
        # Call to zip(...): (line 652)
        # Processing the call arguments (line 652)
        
        # Obtaining the type of the subscript
        int_103776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, 48), 'int')
        slice_103777 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 652, 31), None, int_103776, None)
        # Getting the type of 'selected_m_list' (line 652)
        selected_m_list_103778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 31), 'selected_m_list', False)
        # Obtaining the member '__getitem__' of a type (line 652)
        getitem___103779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 31), selected_m_list_103778, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 652)
        subscript_call_result_103780 = invoke(stypy.reporting.localization.Localization(__file__, 652, 31), getitem___103779, slice_103777)
        
        
        # Obtaining the type of the subscript
        int_103781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, 69), 'int')
        slice_103782 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 652, 53), int_103781, None, None)
        # Getting the type of 'selected_m_list' (line 652)
        selected_m_list_103783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 53), 'selected_m_list', False)
        # Obtaining the member '__getitem__' of a type (line 652)
        getitem___103784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 53), selected_m_list_103783, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 652)
        subscript_call_result_103785 = invoke(stypy.reporting.localization.Localization(__file__, 652, 53), getitem___103784, slice_103782)
        
        # Processing the call keyword arguments (line 652)
        kwargs_103786 = {}
        # Getting the type of 'zip' (line 652)
        zip_103775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 27), 'zip', False)
        # Calling zip(args, kwargs) (line 652)
        zip_call_result_103787 = invoke(stypy.reporting.localization.Localization(__file__, 652, 27), zip_103775, *[subscript_call_result_103780, subscript_call_result_103785], **kwargs_103786)
        
        # Assigning a type to the variable 'm_neighbor_pairs' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'm_neighbor_pairs', zip_call_result_103787)
        
        # Getting the type of 'm_neighbor_pairs' (line 653)
        m_neighbor_pairs_103788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 22), 'm_neighbor_pairs')
        # Testing the type of a for loop iterable (line 653)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 653, 8), m_neighbor_pairs_103788)
        # Getting the type of the for loop variable (line 653)
        for_loop_var_103789 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 653, 8), m_neighbor_pairs_103788)
        # Assigning a type to the variable 'ma' (line 653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 653, 8), 'ma', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 653, 8), for_loop_var_103789))
        # Assigning a type to the variable 'mb' (line 653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 653, 8), 'mb', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 653, 8), for_loop_var_103789))
        # SSA begins for a for statement (line 653)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 654):
        
        # Assigning a Subscript to a Name (line 654):
        
        # Obtaining the type of the subscript
        # Getting the type of 'ma' (line 654)
        ma_103790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 60), 'ma')
        # Getting the type of 'scipy' (line 654)
        scipy_103791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'scipy')
        # Obtaining the member 'linalg' of a type (line 654)
        linalg_103792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 20), scipy_103791, 'linalg')
        # Obtaining the member '_expm_frechet' of a type (line 654)
        _expm_frechet_103793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 20), linalg_103792, '_expm_frechet')
        # Obtaining the member 'ell_table_61' of a type (line 654)
        ell_table_61_103794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 20), _expm_frechet_103793, 'ell_table_61')
        # Obtaining the member '__getitem__' of a type (line 654)
        getitem___103795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 20), ell_table_61_103794, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 654)
        subscript_call_result_103796 = invoke(stypy.reporting.localization.Localization(__file__, 654, 20), getitem___103795, ma_103790)
        
        # Assigning a type to the variable 'ell_a' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 12), 'ell_a', subscript_call_result_103796)
        
        # Assigning a Subscript to a Name (line 655):
        
        # Assigning a Subscript to a Name (line 655):
        
        # Obtaining the type of the subscript
        # Getting the type of 'mb' (line 655)
        mb_103797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 60), 'mb')
        # Getting the type of 'scipy' (line 655)
        scipy_103798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 20), 'scipy')
        # Obtaining the member 'linalg' of a type (line 655)
        linalg_103799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 20), scipy_103798, 'linalg')
        # Obtaining the member '_expm_frechet' of a type (line 655)
        _expm_frechet_103800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 20), linalg_103799, '_expm_frechet')
        # Obtaining the member 'ell_table_61' of a type (line 655)
        ell_table_61_103801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 20), _expm_frechet_103800, 'ell_table_61')
        # Obtaining the member '__getitem__' of a type (line 655)
        getitem___103802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 20), ell_table_61_103801, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 655)
        subscript_call_result_103803 = invoke(stypy.reporting.localization.Localization(__file__, 655, 20), getitem___103802, mb_103797)
        
        # Assigning a type to the variable 'ell_b' (line 655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 12), 'ell_b', subscript_call_result_103803)
        
        # Assigning a BinOp to a Name (line 656):
        
        # Assigning a BinOp to a Name (line 656):
        float_103804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 28), 'float')
        # Getting the type of 'ell_a' (line 656)
        ell_a_103805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 35), 'ell_a')
        # Getting the type of 'ell_b' (line 656)
        ell_b_103806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 43), 'ell_b')
        # Applying the binary operator '+' (line 656)
        result_add_103807 = python_operator(stypy.reporting.localization.Localization(__file__, 656, 35), '+', ell_a_103805, ell_b_103806)
        
        # Applying the binary operator '*' (line 656)
        result_mul_103808 = python_operator(stypy.reporting.localization.Localization(__file__, 656, 28), '*', float_103804, result_add_103807)
        
        # Assigning a type to the variable 'target_norm_1' (line 656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 12), 'target_norm_1', result_mul_103808)
        
        # Assigning a BinOp to a Name (line 657):
        
        # Assigning a BinOp to a Name (line 657):
        # Getting the type of 'target_norm_1' (line 657)
        target_norm_1_103809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 20), 'target_norm_1')
        # Getting the type of 'A_original_norm_1' (line 657)
        A_original_norm_1_103810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 36), 'A_original_norm_1')
        # Applying the binary operator 'div' (line 657)
        result_div_103811 = python_operator(stypy.reporting.localization.Localization(__file__, 657, 20), 'div', target_norm_1_103809, A_original_norm_1_103810)
        
        # Assigning a type to the variable 'scale' (line 657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 12), 'scale', result_div_103811)
        
        # Assigning a BinOp to a Name (line 658):
        
        # Assigning a BinOp to a Name (line 658):
        # Getting the type of 'scale' (line 658)
        scale_103812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 16), 'scale')
        # Getting the type of 'M_original' (line 658)
        M_original_103813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 24), 'M_original')
        # Applying the binary operator '*' (line 658)
        result_mul_103814 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 16), '*', scale_103812, M_original_103813)
        
        # Assigning a type to the variable 'M' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 12), 'M', result_mul_103814)
        
        # Assigning a BinOp to a Name (line 659):
        
        # Assigning a BinOp to a Name (line 659):
        # Getting the type of 'scale' (line 659)
        scale_103815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 16), 'scale')
        # Getting the type of 'A_original' (line 659)
        A_original_103816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 24), 'A_original')
        # Applying the binary operator '*' (line 659)
        result_mul_103817 = python_operator(stypy.reporting.localization.Localization(__file__, 659, 16), '*', scale_103815, A_original_103816)
        
        # Assigning a type to the variable 'A' (line 659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 12), 'A', result_mul_103817)
        
        # Assigning a BinOp to a Name (line 660):
        
        # Assigning a BinOp to a Name (line 660):
        # Getting the type of 'scale' (line 660)
        scale_103818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 16), 'scale')
        # Getting the type of 'E_original' (line 660)
        E_original_103819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 24), 'E_original')
        # Applying the binary operator '*' (line 660)
        result_mul_103820 = python_operator(stypy.reporting.localization.Localization(__file__, 660, 16), '*', scale_103818, E_original_103819)
        
        # Assigning a type to the variable 'E' (line 660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 12), 'E', result_mul_103820)
        
        # Assigning a Call to a Name (line 661):
        
        # Assigning a Call to a Name (line 661):
        
        # Call to expm(...): (line 661)
        # Processing the call arguments (line 661)
        # Getting the type of 'A' (line 661)
        A_103824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 46), 'A', False)
        # Processing the call keyword arguments (line 661)
        kwargs_103825 = {}
        # Getting the type of 'scipy' (line 661)
        scipy_103821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 28), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 661)
        linalg_103822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 28), scipy_103821, 'linalg')
        # Obtaining the member 'expm' of a type (line 661)
        expm_103823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 28), linalg_103822, 'expm')
        # Calling expm(args, kwargs) (line 661)
        expm_call_result_103826 = invoke(stypy.reporting.localization.Localization(__file__, 661, 28), expm_103823, *[A_103824], **kwargs_103825)
        
        # Assigning a type to the variable 'expected_expm' (line 661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 12), 'expected_expm', expm_call_result_103826)
        
        # Assigning a Subscript to a Name (line 662):
        
        # Assigning a Subscript to a Name (line 662):
        
        # Obtaining the type of the subscript
        int_103827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 53), 'int')
        slice_103828 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 662, 31), None, int_103827, None)
        int_103829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 56), 'int')
        slice_103830 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 662, 31), int_103829, None, None)
        
        # Call to expm(...): (line 662)
        # Processing the call arguments (line 662)
        # Getting the type of 'M' (line 662)
        M_103834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 49), 'M', False)
        # Processing the call keyword arguments (line 662)
        kwargs_103835 = {}
        # Getting the type of 'scipy' (line 662)
        scipy_103831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 31), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 662)
        linalg_103832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 31), scipy_103831, 'linalg')
        # Obtaining the member 'expm' of a type (line 662)
        expm_103833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 31), linalg_103832, 'expm')
        # Calling expm(args, kwargs) (line 662)
        expm_call_result_103836 = invoke(stypy.reporting.localization.Localization(__file__, 662, 31), expm_103833, *[M_103834], **kwargs_103835)
        
        # Obtaining the member '__getitem__' of a type (line 662)
        getitem___103837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 31), expm_call_result_103836, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 662)
        subscript_call_result_103838 = invoke(stypy.reporting.localization.Localization(__file__, 662, 31), getitem___103837, (slice_103828, slice_103830))
        
        # Assigning a type to the variable 'expected_frechet' (line 662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 12), 'expected_frechet', subscript_call_result_103838)
        
        # Assigning a Call to a Tuple (line 663):
        
        # Assigning a Subscript to a Name (line 663):
        
        # Obtaining the type of the subscript
        int_103839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 12), 'int')
        
        # Call to expm_frechet(...): (line 663)
        # Processing the call arguments (line 663)
        # Getting the type of 'A' (line 663)
        A_103841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 59), 'A', False)
        # Getting the type of 'E' (line 663)
        E_103842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 62), 'E', False)
        # Processing the call keyword arguments (line 663)
        kwargs_103843 = {}
        # Getting the type of 'expm_frechet' (line 663)
        expm_frechet_103840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 46), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 663)
        expm_frechet_call_result_103844 = invoke(stypy.reporting.localization.Localization(__file__, 663, 46), expm_frechet_103840, *[A_103841, E_103842], **kwargs_103843)
        
        # Obtaining the member '__getitem__' of a type (line 663)
        getitem___103845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 12), expm_frechet_call_result_103844, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 663)
        subscript_call_result_103846 = invoke(stypy.reporting.localization.Localization(__file__, 663, 12), getitem___103845, int_103839)
        
        # Assigning a type to the variable 'tuple_var_assignment_100589' (line 663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 12), 'tuple_var_assignment_100589', subscript_call_result_103846)
        
        # Assigning a Subscript to a Name (line 663):
        
        # Obtaining the type of the subscript
        int_103847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 12), 'int')
        
        # Call to expm_frechet(...): (line 663)
        # Processing the call arguments (line 663)
        # Getting the type of 'A' (line 663)
        A_103849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 59), 'A', False)
        # Getting the type of 'E' (line 663)
        E_103850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 62), 'E', False)
        # Processing the call keyword arguments (line 663)
        kwargs_103851 = {}
        # Getting the type of 'expm_frechet' (line 663)
        expm_frechet_103848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 46), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 663)
        expm_frechet_call_result_103852 = invoke(stypy.reporting.localization.Localization(__file__, 663, 46), expm_frechet_103848, *[A_103849, E_103850], **kwargs_103851)
        
        # Obtaining the member '__getitem__' of a type (line 663)
        getitem___103853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 12), expm_frechet_call_result_103852, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 663)
        subscript_call_result_103854 = invoke(stypy.reporting.localization.Localization(__file__, 663, 12), getitem___103853, int_103847)
        
        # Assigning a type to the variable 'tuple_var_assignment_100590' (line 663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 12), 'tuple_var_assignment_100590', subscript_call_result_103854)
        
        # Assigning a Name to a Name (line 663):
        # Getting the type of 'tuple_var_assignment_100589' (line 663)
        tuple_var_assignment_100589_103855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 12), 'tuple_var_assignment_100589')
        # Assigning a type to the variable 'observed_expm' (line 663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 12), 'observed_expm', tuple_var_assignment_100589_103855)
        
        # Assigning a Name to a Name (line 663):
        # Getting the type of 'tuple_var_assignment_100590' (line 663)
        tuple_var_assignment_100590_103856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 12), 'tuple_var_assignment_100590')
        # Assigning a type to the variable 'observed_frechet' (line 663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 27), 'observed_frechet', tuple_var_assignment_100590_103856)
        
        # Call to assert_allclose(...): (line 664)
        # Processing the call arguments (line 664)
        # Getting the type of 'expected_expm' (line 664)
        expected_expm_103858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 28), 'expected_expm', False)
        # Getting the type of 'observed_expm' (line 664)
        observed_expm_103859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 43), 'observed_expm', False)
        # Processing the call keyword arguments (line 664)
        kwargs_103860 = {}
        # Getting the type of 'assert_allclose' (line 664)
        assert_allclose_103857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 664)
        assert_allclose_call_result_103861 = invoke(stypy.reporting.localization.Localization(__file__, 664, 12), assert_allclose_103857, *[expected_expm_103858, observed_expm_103859], **kwargs_103860)
        
        
        # Call to assert_allclose(...): (line 665)
        # Processing the call arguments (line 665)
        # Getting the type of 'expected_frechet' (line 665)
        expected_frechet_103863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 28), 'expected_frechet', False)
        # Getting the type of 'observed_frechet' (line 665)
        observed_frechet_103864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 46), 'observed_frechet', False)
        # Processing the call keyword arguments (line 665)
        kwargs_103865 = {}
        # Getting the type of 'assert_allclose' (line 665)
        assert_allclose_103862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 665)
        assert_allclose_call_result_103866 = invoke(stypy.reporting.localization.Localization(__file__, 665, 12), assert_allclose_103862, *[expected_frechet_103863, observed_frechet_103864], **kwargs_103865)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_small_norm_expm_frechet(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_small_norm_expm_frechet' in the type store
        # Getting the type of 'stypy_return_type' (line 634)
        stypy_return_type_103867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_103867)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_small_norm_expm_frechet'
        return stypy_return_type_103867


    @norecursion
    def test_fuzz(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_fuzz'
        module_type_store = module_type_store.open_function_context('test_fuzz', 667, 4, False)
        # Assigning a type to the variable 'self' (line 668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestExpmFrechet.test_fuzz.__dict__.__setitem__('stypy_localization', localization)
        TestExpmFrechet.test_fuzz.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestExpmFrechet.test_fuzz.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestExpmFrechet.test_fuzz.__dict__.__setitem__('stypy_function_name', 'TestExpmFrechet.test_fuzz')
        TestExpmFrechet.test_fuzz.__dict__.__setitem__('stypy_param_names_list', [])
        TestExpmFrechet.test_fuzz.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestExpmFrechet.test_fuzz.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestExpmFrechet.test_fuzz.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestExpmFrechet.test_fuzz.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestExpmFrechet.test_fuzz.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestExpmFrechet.test_fuzz.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpmFrechet.test_fuzz', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_fuzz', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_fuzz(...)' code ##################

        
        # Assigning a Tuple to a Name (line 669):
        
        # Assigning a Tuple to a Name (line 669):
        
        # Obtaining an instance of the builtin type 'tuple' (line 670)
        tuple_103868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 670)
        # Adding element type (line 670)
        # Getting the type of 'np' (line 670)
        np_103869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 16), 'np')
        # Obtaining the member 'random' of a type (line 670)
        random_103870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 16), np_103869, 'random')
        # Obtaining the member 'uniform' of a type (line 670)
        uniform_103871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 16), random_103870, 'uniform')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 670, 16), tuple_103868, uniform_103871)
        # Adding element type (line 670)
        # Getting the type of 'np' (line 671)
        np_103872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 16), 'np')
        # Obtaining the member 'random' of a type (line 671)
        random_103873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 16), np_103872, 'random')
        # Obtaining the member 'normal' of a type (line 671)
        normal_103874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 16), random_103873, 'normal')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 670, 16), tuple_103868, normal_103874)
        # Adding element type (line 670)
        # Getting the type of 'np' (line 672)
        np_103875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 16), 'np')
        # Obtaining the member 'random' of a type (line 672)
        random_103876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 16), np_103875, 'random')
        # Obtaining the member 'standard_cauchy' of a type (line 672)
        standard_cauchy_103877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 16), random_103876, 'standard_cauchy')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 670, 16), tuple_103868, standard_cauchy_103877)
        # Adding element type (line 670)
        # Getting the type of 'np' (line 673)
        np_103878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 16), 'np')
        # Obtaining the member 'random' of a type (line 673)
        random_103879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 16), np_103878, 'random')
        # Obtaining the member 'exponential' of a type (line 673)
        exponential_103880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 16), random_103879, 'exponential')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 670, 16), tuple_103868, exponential_103880)
        
        # Assigning a type to the variable 'rfuncs' (line 669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 8), 'rfuncs', tuple_103868)
        
        # Assigning a Num to a Name (line 674):
        
        # Assigning a Num to a Name (line 674):
        int_103881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 17), 'int')
        # Assigning a type to the variable 'ntests' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'ntests', int_103881)
        
        
        # Call to range(...): (line 675)
        # Processing the call arguments (line 675)
        # Getting the type of 'ntests' (line 675)
        ntests_103883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 23), 'ntests', False)
        # Processing the call keyword arguments (line 675)
        kwargs_103884 = {}
        # Getting the type of 'range' (line 675)
        range_103882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 17), 'range', False)
        # Calling range(args, kwargs) (line 675)
        range_call_result_103885 = invoke(stypy.reporting.localization.Localization(__file__, 675, 17), range_103882, *[ntests_103883], **kwargs_103884)
        
        # Testing the type of a for loop iterable (line 675)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 675, 8), range_call_result_103885)
        # Getting the type of the for loop variable (line 675)
        for_loop_var_103886 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 675, 8), range_call_result_103885)
        # Assigning a type to the variable 'i' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'i', for_loop_var_103886)
        # SSA begins for a for statement (line 675)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 676):
        
        # Assigning a Call to a Name (line 676):
        
        # Call to choice(...): (line 676)
        # Processing the call arguments (line 676)
        # Getting the type of 'rfuncs' (line 676)
        rfuncs_103889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 34), 'rfuncs', False)
        # Processing the call keyword arguments (line 676)
        kwargs_103890 = {}
        # Getting the type of 'random' (line 676)
        random_103887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 20), 'random', False)
        # Obtaining the member 'choice' of a type (line 676)
        choice_103888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 20), random_103887, 'choice')
        # Calling choice(args, kwargs) (line 676)
        choice_call_result_103891 = invoke(stypy.reporting.localization.Localization(__file__, 676, 20), choice_103888, *[rfuncs_103889], **kwargs_103890)
        
        # Assigning a type to the variable 'rfunc' (line 676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 12), 'rfunc', choice_call_result_103891)
        
        # Assigning a Call to a Name (line 677):
        
        # Assigning a Call to a Name (line 677):
        
        # Call to expovariate(...): (line 677)
        # Processing the call arguments (line 677)
        float_103894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 677, 47), 'float')
        # Processing the call keyword arguments (line 677)
        kwargs_103895 = {}
        # Getting the type of 'random' (line 677)
        random_103892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 28), 'random', False)
        # Obtaining the member 'expovariate' of a type (line 677)
        expovariate_103893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 677, 28), random_103892, 'expovariate')
        # Calling expovariate(args, kwargs) (line 677)
        expovariate_call_result_103896 = invoke(stypy.reporting.localization.Localization(__file__, 677, 28), expovariate_103893, *[float_103894], **kwargs_103895)
        
        # Assigning a type to the variable 'target_norm_1' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 12), 'target_norm_1', expovariate_call_result_103896)
        
        # Assigning a Call to a Name (line 678):
        
        # Assigning a Call to a Name (line 678):
        
        # Call to randrange(...): (line 678)
        # Processing the call arguments (line 678)
        int_103899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 33), 'int')
        int_103900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 36), 'int')
        # Processing the call keyword arguments (line 678)
        kwargs_103901 = {}
        # Getting the type of 'random' (line 678)
        random_103897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 16), 'random', False)
        # Obtaining the member 'randrange' of a type (line 678)
        randrange_103898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 16), random_103897, 'randrange')
        # Calling randrange(args, kwargs) (line 678)
        randrange_call_result_103902 = invoke(stypy.reporting.localization.Localization(__file__, 678, 16), randrange_103898, *[int_103899, int_103900], **kwargs_103901)
        
        # Assigning a type to the variable 'n' (line 678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 12), 'n', randrange_call_result_103902)
        
        # Assigning a Call to a Name (line 679):
        
        # Assigning a Call to a Name (line 679):
        
        # Call to rfunc(...): (line 679)
        # Processing the call keyword arguments (line 679)
        
        # Obtaining an instance of the builtin type 'tuple' (line 679)
        tuple_103904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 679)
        # Adding element type (line 679)
        # Getting the type of 'n' (line 679)
        n_103905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 37), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 679, 37), tuple_103904, n_103905)
        # Adding element type (line 679)
        # Getting the type of 'n' (line 679)
        n_103906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 39), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 679, 37), tuple_103904, n_103906)
        
        keyword_103907 = tuple_103904
        kwargs_103908 = {'size': keyword_103907}
        # Getting the type of 'rfunc' (line 679)
        rfunc_103903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 25), 'rfunc', False)
        # Calling rfunc(args, kwargs) (line 679)
        rfunc_call_result_103909 = invoke(stypy.reporting.localization.Localization(__file__, 679, 25), rfunc_103903, *[], **kwargs_103908)
        
        # Assigning a type to the variable 'A_original' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 12), 'A_original', rfunc_call_result_103909)
        
        # Assigning a Call to a Name (line 680):
        
        # Assigning a Call to a Name (line 680):
        
        # Call to rfunc(...): (line 680)
        # Processing the call keyword arguments (line 680)
        
        # Obtaining an instance of the builtin type 'tuple' (line 680)
        tuple_103911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 680, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 680)
        # Adding element type (line 680)
        # Getting the type of 'n' (line 680)
        n_103912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 37), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 680, 37), tuple_103911, n_103912)
        # Adding element type (line 680)
        # Getting the type of 'n' (line 680)
        n_103913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 39), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 680, 37), tuple_103911, n_103913)
        
        keyword_103914 = tuple_103911
        kwargs_103915 = {'size': keyword_103914}
        # Getting the type of 'rfunc' (line 680)
        rfunc_103910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 25), 'rfunc', False)
        # Calling rfunc(args, kwargs) (line 680)
        rfunc_call_result_103916 = invoke(stypy.reporting.localization.Localization(__file__, 680, 25), rfunc_103910, *[], **kwargs_103915)
        
        # Assigning a type to the variable 'E_original' (line 680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 12), 'E_original', rfunc_call_result_103916)
        
        # Assigning a Call to a Name (line 681):
        
        # Assigning a Call to a Name (line 681):
        
        # Call to norm(...): (line 681)
        # Processing the call arguments (line 681)
        # Getting the type of 'A_original' (line 681)
        A_original_103920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 50), 'A_original', False)
        int_103921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, 62), 'int')
        # Processing the call keyword arguments (line 681)
        kwargs_103922 = {}
        # Getting the type of 'scipy' (line 681)
        scipy_103917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 32), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 681)
        linalg_103918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 32), scipy_103917, 'linalg')
        # Obtaining the member 'norm' of a type (line 681)
        norm_103919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 32), linalg_103918, 'norm')
        # Calling norm(args, kwargs) (line 681)
        norm_call_result_103923 = invoke(stypy.reporting.localization.Localization(__file__, 681, 32), norm_103919, *[A_original_103920, int_103921], **kwargs_103922)
        
        # Assigning a type to the variable 'A_original_norm_1' (line 681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 12), 'A_original_norm_1', norm_call_result_103923)
        
        # Assigning a BinOp to a Name (line 682):
        
        # Assigning a BinOp to a Name (line 682):
        # Getting the type of 'target_norm_1' (line 682)
        target_norm_1_103924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 20), 'target_norm_1')
        # Getting the type of 'A_original_norm_1' (line 682)
        A_original_norm_1_103925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 36), 'A_original_norm_1')
        # Applying the binary operator 'div' (line 682)
        result_div_103926 = python_operator(stypy.reporting.localization.Localization(__file__, 682, 20), 'div', target_norm_1_103924, A_original_norm_1_103925)
        
        # Assigning a type to the variable 'scale' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 12), 'scale', result_div_103926)
        
        # Assigning a BinOp to a Name (line 683):
        
        # Assigning a BinOp to a Name (line 683):
        # Getting the type of 'scale' (line 683)
        scale_103927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 16), 'scale')
        # Getting the type of 'A_original' (line 683)
        A_original_103928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 24), 'A_original')
        # Applying the binary operator '*' (line 683)
        result_mul_103929 = python_operator(stypy.reporting.localization.Localization(__file__, 683, 16), '*', scale_103927, A_original_103928)
        
        # Assigning a type to the variable 'A' (line 683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 683, 12), 'A', result_mul_103929)
        
        # Assigning a BinOp to a Name (line 684):
        
        # Assigning a BinOp to a Name (line 684):
        # Getting the type of 'scale' (line 684)
        scale_103930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 16), 'scale')
        # Getting the type of 'E_original' (line 684)
        E_original_103931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 24), 'E_original')
        # Applying the binary operator '*' (line 684)
        result_mul_103932 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 16), '*', scale_103930, E_original_103931)
        
        # Assigning a type to the variable 'E' (line 684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 12), 'E', result_mul_103932)
        
        # Assigning a Call to a Name (line 685):
        
        # Assigning a Call to a Name (line 685):
        
        # Call to vstack(...): (line 685)
        # Processing the call arguments (line 685)
        
        # Obtaining an instance of the builtin type 'list' (line 685)
        list_103935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 685)
        # Adding element type (line 685)
        
        # Call to hstack(...): (line 686)
        # Processing the call arguments (line 686)
        
        # Obtaining an instance of the builtin type 'list' (line 686)
        list_103938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 686)
        # Adding element type (line 686)
        # Getting the type of 'A' (line 686)
        A_103939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 27), 'A', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 686, 26), list_103938, A_103939)
        # Adding element type (line 686)
        # Getting the type of 'E' (line 686)
        E_103940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 30), 'E', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 686, 26), list_103938, E_103940)
        
        # Processing the call keyword arguments (line 686)
        kwargs_103941 = {}
        # Getting the type of 'np' (line 686)
        np_103936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 16), 'np', False)
        # Obtaining the member 'hstack' of a type (line 686)
        hstack_103937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 16), np_103936, 'hstack')
        # Calling hstack(args, kwargs) (line 686)
        hstack_call_result_103942 = invoke(stypy.reporting.localization.Localization(__file__, 686, 16), hstack_103937, *[list_103938], **kwargs_103941)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 685, 26), list_103935, hstack_call_result_103942)
        # Adding element type (line 685)
        
        # Call to hstack(...): (line 687)
        # Processing the call arguments (line 687)
        
        # Obtaining an instance of the builtin type 'list' (line 687)
        list_103945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 687)
        # Adding element type (line 687)
        
        # Call to zeros_like(...): (line 687)
        # Processing the call arguments (line 687)
        # Getting the type of 'A' (line 687)
        A_103948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 41), 'A', False)
        # Processing the call keyword arguments (line 687)
        kwargs_103949 = {}
        # Getting the type of 'np' (line 687)
        np_103946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 27), 'np', False)
        # Obtaining the member 'zeros_like' of a type (line 687)
        zeros_like_103947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 27), np_103946, 'zeros_like')
        # Calling zeros_like(args, kwargs) (line 687)
        zeros_like_call_result_103950 = invoke(stypy.reporting.localization.Localization(__file__, 687, 27), zeros_like_103947, *[A_103948], **kwargs_103949)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 26), list_103945, zeros_like_call_result_103950)
        # Adding element type (line 687)
        # Getting the type of 'A' (line 687)
        A_103951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 45), 'A', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 26), list_103945, A_103951)
        
        # Processing the call keyword arguments (line 687)
        kwargs_103952 = {}
        # Getting the type of 'np' (line 687)
        np_103943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 16), 'np', False)
        # Obtaining the member 'hstack' of a type (line 687)
        hstack_103944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 16), np_103943, 'hstack')
        # Calling hstack(args, kwargs) (line 687)
        hstack_call_result_103953 = invoke(stypy.reporting.localization.Localization(__file__, 687, 16), hstack_103944, *[list_103945], **kwargs_103952)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 685, 26), list_103935, hstack_call_result_103953)
        
        # Processing the call keyword arguments (line 685)
        kwargs_103954 = {}
        # Getting the type of 'np' (line 685)
        np_103933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 16), 'np', False)
        # Obtaining the member 'vstack' of a type (line 685)
        vstack_103934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 16), np_103933, 'vstack')
        # Calling vstack(args, kwargs) (line 685)
        vstack_call_result_103955 = invoke(stypy.reporting.localization.Localization(__file__, 685, 16), vstack_103934, *[list_103935], **kwargs_103954)
        
        # Assigning a type to the variable 'M' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 12), 'M', vstack_call_result_103955)
        
        # Assigning a Call to a Name (line 688):
        
        # Assigning a Call to a Name (line 688):
        
        # Call to expm(...): (line 688)
        # Processing the call arguments (line 688)
        # Getting the type of 'A' (line 688)
        A_103959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 46), 'A', False)
        # Processing the call keyword arguments (line 688)
        kwargs_103960 = {}
        # Getting the type of 'scipy' (line 688)
        scipy_103956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 28), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 688)
        linalg_103957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 28), scipy_103956, 'linalg')
        # Obtaining the member 'expm' of a type (line 688)
        expm_103958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 28), linalg_103957, 'expm')
        # Calling expm(args, kwargs) (line 688)
        expm_call_result_103961 = invoke(stypy.reporting.localization.Localization(__file__, 688, 28), expm_103958, *[A_103959], **kwargs_103960)
        
        # Assigning a type to the variable 'expected_expm' (line 688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 12), 'expected_expm', expm_call_result_103961)
        
        # Assigning a Subscript to a Name (line 689):
        
        # Assigning a Subscript to a Name (line 689):
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 689)
        n_103962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 53), 'n')
        slice_103963 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 689, 31), None, n_103962, None)
        # Getting the type of 'n' (line 689)
        n_103964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 56), 'n')
        slice_103965 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 689, 31), n_103964, None, None)
        
        # Call to expm(...): (line 689)
        # Processing the call arguments (line 689)
        # Getting the type of 'M' (line 689)
        M_103969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 49), 'M', False)
        # Processing the call keyword arguments (line 689)
        kwargs_103970 = {}
        # Getting the type of 'scipy' (line 689)
        scipy_103966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 31), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 689)
        linalg_103967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 31), scipy_103966, 'linalg')
        # Obtaining the member 'expm' of a type (line 689)
        expm_103968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 31), linalg_103967, 'expm')
        # Calling expm(args, kwargs) (line 689)
        expm_call_result_103971 = invoke(stypy.reporting.localization.Localization(__file__, 689, 31), expm_103968, *[M_103969], **kwargs_103970)
        
        # Obtaining the member '__getitem__' of a type (line 689)
        getitem___103972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 31), expm_call_result_103971, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 689)
        subscript_call_result_103973 = invoke(stypy.reporting.localization.Localization(__file__, 689, 31), getitem___103972, (slice_103963, slice_103965))
        
        # Assigning a type to the variable 'expected_frechet' (line 689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 689, 12), 'expected_frechet', subscript_call_result_103973)
        
        # Assigning a Call to a Tuple (line 690):
        
        # Assigning a Subscript to a Name (line 690):
        
        # Obtaining the type of the subscript
        int_103974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, 12), 'int')
        
        # Call to expm_frechet(...): (line 690)
        # Processing the call arguments (line 690)
        # Getting the type of 'A' (line 690)
        A_103976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 59), 'A', False)
        # Getting the type of 'E' (line 690)
        E_103977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 62), 'E', False)
        # Processing the call keyword arguments (line 690)
        kwargs_103978 = {}
        # Getting the type of 'expm_frechet' (line 690)
        expm_frechet_103975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 46), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 690)
        expm_frechet_call_result_103979 = invoke(stypy.reporting.localization.Localization(__file__, 690, 46), expm_frechet_103975, *[A_103976, E_103977], **kwargs_103978)
        
        # Obtaining the member '__getitem__' of a type (line 690)
        getitem___103980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 12), expm_frechet_call_result_103979, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 690)
        subscript_call_result_103981 = invoke(stypy.reporting.localization.Localization(__file__, 690, 12), getitem___103980, int_103974)
        
        # Assigning a type to the variable 'tuple_var_assignment_100591' (line 690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'tuple_var_assignment_100591', subscript_call_result_103981)
        
        # Assigning a Subscript to a Name (line 690):
        
        # Obtaining the type of the subscript
        int_103982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, 12), 'int')
        
        # Call to expm_frechet(...): (line 690)
        # Processing the call arguments (line 690)
        # Getting the type of 'A' (line 690)
        A_103984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 59), 'A', False)
        # Getting the type of 'E' (line 690)
        E_103985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 62), 'E', False)
        # Processing the call keyword arguments (line 690)
        kwargs_103986 = {}
        # Getting the type of 'expm_frechet' (line 690)
        expm_frechet_103983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 46), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 690)
        expm_frechet_call_result_103987 = invoke(stypy.reporting.localization.Localization(__file__, 690, 46), expm_frechet_103983, *[A_103984, E_103985], **kwargs_103986)
        
        # Obtaining the member '__getitem__' of a type (line 690)
        getitem___103988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 12), expm_frechet_call_result_103987, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 690)
        subscript_call_result_103989 = invoke(stypy.reporting.localization.Localization(__file__, 690, 12), getitem___103988, int_103982)
        
        # Assigning a type to the variable 'tuple_var_assignment_100592' (line 690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'tuple_var_assignment_100592', subscript_call_result_103989)
        
        # Assigning a Name to a Name (line 690):
        # Getting the type of 'tuple_var_assignment_100591' (line 690)
        tuple_var_assignment_100591_103990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'tuple_var_assignment_100591')
        # Assigning a type to the variable 'observed_expm' (line 690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'observed_expm', tuple_var_assignment_100591_103990)
        
        # Assigning a Name to a Name (line 690):
        # Getting the type of 'tuple_var_assignment_100592' (line 690)
        tuple_var_assignment_100592_103991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'tuple_var_assignment_100592')
        # Assigning a type to the variable 'observed_frechet' (line 690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 27), 'observed_frechet', tuple_var_assignment_100592_103991)
        
        # Call to assert_allclose(...): (line 691)
        # Processing the call arguments (line 691)
        # Getting the type of 'expected_expm' (line 691)
        expected_expm_103993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 28), 'expected_expm', False)
        # Getting the type of 'observed_expm' (line 691)
        observed_expm_103994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 43), 'observed_expm', False)
        # Processing the call keyword arguments (line 691)
        kwargs_103995 = {}
        # Getting the type of 'assert_allclose' (line 691)
        assert_allclose_103992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 691)
        assert_allclose_call_result_103996 = invoke(stypy.reporting.localization.Localization(__file__, 691, 12), assert_allclose_103992, *[expected_expm_103993, observed_expm_103994], **kwargs_103995)
        
        
        # Call to assert_allclose(...): (line 692)
        # Processing the call arguments (line 692)
        # Getting the type of 'expected_frechet' (line 692)
        expected_frechet_103998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 28), 'expected_frechet', False)
        # Getting the type of 'observed_frechet' (line 692)
        observed_frechet_103999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 46), 'observed_frechet', False)
        # Processing the call keyword arguments (line 692)
        kwargs_104000 = {}
        # Getting the type of 'assert_allclose' (line 692)
        assert_allclose_103997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 692)
        assert_allclose_call_result_104001 = invoke(stypy.reporting.localization.Localization(__file__, 692, 12), assert_allclose_103997, *[expected_frechet_103998, observed_frechet_103999], **kwargs_104000)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_fuzz(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_fuzz' in the type store
        # Getting the type of 'stypy_return_type' (line 667)
        stypy_return_type_104002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104002)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_fuzz'
        return stypy_return_type_104002


    @norecursion
    def test_problematic_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_problematic_matrix'
        module_type_store = module_type_store.open_function_context('test_problematic_matrix', 694, 4, False)
        # Assigning a type to the variable 'self' (line 695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 695, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestExpmFrechet.test_problematic_matrix.__dict__.__setitem__('stypy_localization', localization)
        TestExpmFrechet.test_problematic_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestExpmFrechet.test_problematic_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestExpmFrechet.test_problematic_matrix.__dict__.__setitem__('stypy_function_name', 'TestExpmFrechet.test_problematic_matrix')
        TestExpmFrechet.test_problematic_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        TestExpmFrechet.test_problematic_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestExpmFrechet.test_problematic_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestExpmFrechet.test_problematic_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestExpmFrechet.test_problematic_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestExpmFrechet.test_problematic_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestExpmFrechet.test_problematic_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpmFrechet.test_problematic_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_problematic_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_problematic_matrix(...)' code ##################

        
        # Assigning a Call to a Name (line 696):
        
        # Assigning a Call to a Name (line 696):
        
        # Call to array(...): (line 696)
        # Processing the call arguments (line 696)
        
        # Obtaining an instance of the builtin type 'list' (line 696)
        list_104005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 696)
        # Adding element type (line 696)
        
        # Obtaining an instance of the builtin type 'list' (line 697)
        list_104006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 697)
        # Adding element type (line 697)
        float_104007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 17), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 697, 16), list_104006, float_104007)
        # Adding element type (line 697)
        float_104008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 29), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 697, 16), list_104006, float_104008)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 696, 21), list_104005, list_104006)
        # Adding element type (line 696)
        
        # Obtaining an instance of the builtin type 'list' (line 698)
        list_104009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 698)
        # Adding element type (line 698)
        float_104010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 17), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 16), list_104009, float_104010)
        # Adding element type (line 698)
        float_104011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 29), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 16), list_104009, float_104011)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 696, 21), list_104005, list_104009)
        
        # Processing the call keyword arguments (line 696)
        # Getting the type of 'float' (line 699)
        float_104012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 25), 'float', False)
        keyword_104013 = float_104012
        kwargs_104014 = {'dtype': keyword_104013}
        # Getting the type of 'np' (line 696)
        np_104003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 696)
        array_104004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 12), np_104003, 'array')
        # Calling array(args, kwargs) (line 696)
        array_call_result_104015 = invoke(stypy.reporting.localization.Localization(__file__, 696, 12), array_104004, *[list_104005], **kwargs_104014)
        
        # Assigning a type to the variable 'A' (line 696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 8), 'A', array_call_result_104015)
        
        # Assigning a Call to a Name (line 700):
        
        # Assigning a Call to a Name (line 700):
        
        # Call to array(...): (line 700)
        # Processing the call arguments (line 700)
        
        # Obtaining an instance of the builtin type 'list' (line 700)
        list_104018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 700)
        # Adding element type (line 700)
        
        # Obtaining an instance of the builtin type 'list' (line 701)
        list_104019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 701)
        # Adding element type (line 701)
        float_104020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 17), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 16), list_104019, float_104020)
        # Adding element type (line 701)
        float_104021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 29), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 16), list_104019, float_104021)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 700, 21), list_104018, list_104019)
        # Adding element type (line 700)
        
        # Obtaining an instance of the builtin type 'list' (line 702)
        list_104022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 702)
        # Adding element type (line 702)
        float_104023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 17), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 702, 16), list_104022, float_104023)
        # Adding element type (line 702)
        float_104024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 29), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 702, 16), list_104022, float_104024)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 700, 21), list_104018, list_104022)
        
        # Processing the call keyword arguments (line 700)
        # Getting the type of 'float' (line 703)
        float_104025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 25), 'float', False)
        keyword_104026 = float_104025
        kwargs_104027 = {'dtype': keyword_104026}
        # Getting the type of 'np' (line 700)
        np_104016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 700)
        array_104017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 12), np_104016, 'array')
        # Calling array(args, kwargs) (line 700)
        array_call_result_104028 = invoke(stypy.reporting.localization.Localization(__file__, 700, 12), array_104017, *[list_104018], **kwargs_104027)
        
        # Assigning a type to the variable 'E' (line 700)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 8), 'E', array_call_result_104028)
        
        # Assigning a Call to a Name (line 704):
        
        # Assigning a Call to a Name (line 704):
        
        # Call to norm(...): (line 704)
        # Processing the call arguments (line 704)
        # Getting the type of 'A' (line 704)
        A_104032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 37), 'A', False)
        int_104033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 40), 'int')
        # Processing the call keyword arguments (line 704)
        kwargs_104034 = {}
        # Getting the type of 'scipy' (line 704)
        scipy_104029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 19), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 704)
        linalg_104030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 19), scipy_104029, 'linalg')
        # Obtaining the member 'norm' of a type (line 704)
        norm_104031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 19), linalg_104030, 'norm')
        # Calling norm(args, kwargs) (line 704)
        norm_call_result_104035 = invoke(stypy.reporting.localization.Localization(__file__, 704, 19), norm_104031, *[A_104032, int_104033], **kwargs_104034)
        
        # Assigning a type to the variable 'A_norm_1' (line 704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 8), 'A_norm_1', norm_call_result_104035)
        
        # Assigning a Call to a Tuple (line 705):
        
        # Assigning a Subscript to a Name (line 705):
        
        # Obtaining the type of the subscript
        int_104036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 8), 'int')
        
        # Call to expm_frechet(...): (line 705)
        # Processing the call arguments (line 705)
        # Getting the type of 'A' (line 706)
        A_104038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 16), 'A', False)
        # Getting the type of 'E' (line 706)
        E_104039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 19), 'E', False)
        # Processing the call keyword arguments (line 705)
        str_104040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 29), 'str', 'SPS')
        keyword_104041 = str_104040
        kwargs_104042 = {'method': keyword_104041}
        # Getting the type of 'expm_frechet' (line 705)
        expm_frechet_104037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 32), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 705)
        expm_frechet_call_result_104043 = invoke(stypy.reporting.localization.Localization(__file__, 705, 32), expm_frechet_104037, *[A_104038, E_104039], **kwargs_104042)
        
        # Obtaining the member '__getitem__' of a type (line 705)
        getitem___104044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 8), expm_frechet_call_result_104043, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 705)
        subscript_call_result_104045 = invoke(stypy.reporting.localization.Localization(__file__, 705, 8), getitem___104044, int_104036)
        
        # Assigning a type to the variable 'tuple_var_assignment_100593' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'tuple_var_assignment_100593', subscript_call_result_104045)
        
        # Assigning a Subscript to a Name (line 705):
        
        # Obtaining the type of the subscript
        int_104046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 8), 'int')
        
        # Call to expm_frechet(...): (line 705)
        # Processing the call arguments (line 705)
        # Getting the type of 'A' (line 706)
        A_104048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 16), 'A', False)
        # Getting the type of 'E' (line 706)
        E_104049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 19), 'E', False)
        # Processing the call keyword arguments (line 705)
        str_104050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 29), 'str', 'SPS')
        keyword_104051 = str_104050
        kwargs_104052 = {'method': keyword_104051}
        # Getting the type of 'expm_frechet' (line 705)
        expm_frechet_104047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 32), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 705)
        expm_frechet_call_result_104053 = invoke(stypy.reporting.localization.Localization(__file__, 705, 32), expm_frechet_104047, *[A_104048, E_104049], **kwargs_104052)
        
        # Obtaining the member '__getitem__' of a type (line 705)
        getitem___104054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 8), expm_frechet_call_result_104053, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 705)
        subscript_call_result_104055 = invoke(stypy.reporting.localization.Localization(__file__, 705, 8), getitem___104054, int_104046)
        
        # Assigning a type to the variable 'tuple_var_assignment_100594' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'tuple_var_assignment_100594', subscript_call_result_104055)
        
        # Assigning a Name to a Name (line 705):
        # Getting the type of 'tuple_var_assignment_100593' (line 705)
        tuple_var_assignment_100593_104056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'tuple_var_assignment_100593')
        # Assigning a type to the variable 'sps_expm' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'sps_expm', tuple_var_assignment_100593_104056)
        
        # Assigning a Name to a Name (line 705):
        # Getting the type of 'tuple_var_assignment_100594' (line 705)
        tuple_var_assignment_100594_104057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'tuple_var_assignment_100594')
        # Assigning a type to the variable 'sps_frechet' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 18), 'sps_frechet', tuple_var_assignment_100594_104057)
        
        # Assigning a Call to a Tuple (line 707):
        
        # Assigning a Subscript to a Name (line 707):
        
        # Obtaining the type of the subscript
        int_104058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 8), 'int')
        
        # Call to expm_frechet(...): (line 707)
        # Processing the call arguments (line 707)
        # Getting the type of 'A' (line 708)
        A_104060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 16), 'A', False)
        # Getting the type of 'E' (line 708)
        E_104061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 19), 'E', False)
        # Processing the call keyword arguments (line 707)
        str_104062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 29), 'str', 'blockEnlarge')
        keyword_104063 = str_104062
        kwargs_104064 = {'method': keyword_104063}
        # Getting the type of 'expm_frechet' (line 707)
        expm_frechet_104059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 50), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 707)
        expm_frechet_call_result_104065 = invoke(stypy.reporting.localization.Localization(__file__, 707, 50), expm_frechet_104059, *[A_104060, E_104061], **kwargs_104064)
        
        # Obtaining the member '__getitem__' of a type (line 707)
        getitem___104066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 8), expm_frechet_call_result_104065, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 707)
        subscript_call_result_104067 = invoke(stypy.reporting.localization.Localization(__file__, 707, 8), getitem___104066, int_104058)
        
        # Assigning a type to the variable 'tuple_var_assignment_100595' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'tuple_var_assignment_100595', subscript_call_result_104067)
        
        # Assigning a Subscript to a Name (line 707):
        
        # Obtaining the type of the subscript
        int_104068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 8), 'int')
        
        # Call to expm_frechet(...): (line 707)
        # Processing the call arguments (line 707)
        # Getting the type of 'A' (line 708)
        A_104070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 16), 'A', False)
        # Getting the type of 'E' (line 708)
        E_104071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 19), 'E', False)
        # Processing the call keyword arguments (line 707)
        str_104072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 29), 'str', 'blockEnlarge')
        keyword_104073 = str_104072
        kwargs_104074 = {'method': keyword_104073}
        # Getting the type of 'expm_frechet' (line 707)
        expm_frechet_104069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 50), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 707)
        expm_frechet_call_result_104075 = invoke(stypy.reporting.localization.Localization(__file__, 707, 50), expm_frechet_104069, *[A_104070, E_104071], **kwargs_104074)
        
        # Obtaining the member '__getitem__' of a type (line 707)
        getitem___104076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 8), expm_frechet_call_result_104075, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 707)
        subscript_call_result_104077 = invoke(stypy.reporting.localization.Localization(__file__, 707, 8), getitem___104076, int_104068)
        
        # Assigning a type to the variable 'tuple_var_assignment_100596' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'tuple_var_assignment_100596', subscript_call_result_104077)
        
        # Assigning a Name to a Name (line 707):
        # Getting the type of 'tuple_var_assignment_100595' (line 707)
        tuple_var_assignment_100595_104078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'tuple_var_assignment_100595')
        # Assigning a type to the variable 'blockEnlarge_expm' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'blockEnlarge_expm', tuple_var_assignment_100595_104078)
        
        # Assigning a Name to a Name (line 707):
        # Getting the type of 'tuple_var_assignment_100596' (line 707)
        tuple_var_assignment_100596_104079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'tuple_var_assignment_100596')
        # Assigning a type to the variable 'blockEnlarge_frechet' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 27), 'blockEnlarge_frechet', tuple_var_assignment_100596_104079)
        
        # Call to assert_allclose(...): (line 709)
        # Processing the call arguments (line 709)
        # Getting the type of 'sps_expm' (line 709)
        sps_expm_104081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 24), 'sps_expm', False)
        # Getting the type of 'blockEnlarge_expm' (line 709)
        blockEnlarge_expm_104082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 34), 'blockEnlarge_expm', False)
        # Processing the call keyword arguments (line 709)
        kwargs_104083 = {}
        # Getting the type of 'assert_allclose' (line 709)
        assert_allclose_104080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 709)
        assert_allclose_call_result_104084 = invoke(stypy.reporting.localization.Localization(__file__, 709, 8), assert_allclose_104080, *[sps_expm_104081, blockEnlarge_expm_104082], **kwargs_104083)
        
        
        # Call to assert_allclose(...): (line 710)
        # Processing the call arguments (line 710)
        # Getting the type of 'sps_frechet' (line 710)
        sps_frechet_104086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 24), 'sps_frechet', False)
        # Getting the type of 'blockEnlarge_frechet' (line 710)
        blockEnlarge_frechet_104087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 37), 'blockEnlarge_frechet', False)
        # Processing the call keyword arguments (line 710)
        kwargs_104088 = {}
        # Getting the type of 'assert_allclose' (line 710)
        assert_allclose_104085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 710)
        assert_allclose_call_result_104089 = invoke(stypy.reporting.localization.Localization(__file__, 710, 8), assert_allclose_104085, *[sps_frechet_104086, blockEnlarge_frechet_104087], **kwargs_104088)
        
        
        # ################# End of 'test_problematic_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_problematic_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 694)
        stypy_return_type_104090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104090)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_problematic_matrix'
        return stypy_return_type_104090


    @norecursion
    def test_medium_matrix(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_medium_matrix'
        module_type_store = module_type_store.open_function_context('test_medium_matrix', 712, 4, False)
        # Assigning a type to the variable 'self' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestExpmFrechet.test_medium_matrix.__dict__.__setitem__('stypy_localization', localization)
        TestExpmFrechet.test_medium_matrix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestExpmFrechet.test_medium_matrix.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestExpmFrechet.test_medium_matrix.__dict__.__setitem__('stypy_function_name', 'TestExpmFrechet.test_medium_matrix')
        TestExpmFrechet.test_medium_matrix.__dict__.__setitem__('stypy_param_names_list', [])
        TestExpmFrechet.test_medium_matrix.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestExpmFrechet.test_medium_matrix.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestExpmFrechet.test_medium_matrix.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestExpmFrechet.test_medium_matrix.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestExpmFrechet.test_medium_matrix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestExpmFrechet.test_medium_matrix.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpmFrechet.test_medium_matrix', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_medium_matrix', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_medium_matrix(...)' code ##################

        
        # Assigning a Num to a Name (line 716):
        
        # Assigning a Num to a Name (line 716):
        int_104091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 716, 12), 'int')
        # Assigning a type to the variable 'n' (line 716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 'n', int_104091)
        
        # Assigning a Call to a Name (line 717):
        
        # Assigning a Call to a Name (line 717):
        
        # Call to exponential(...): (line 717)
        # Processing the call keyword arguments (line 717)
        
        # Obtaining an instance of the builtin type 'tuple' (line 717)
        tuple_104095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 717)
        # Adding element type (line 717)
        # Getting the type of 'n' (line 717)
        n_104096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 40), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 717, 40), tuple_104095, n_104096)
        # Adding element type (line 717)
        # Getting the type of 'n' (line 717)
        n_104097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 43), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 717, 40), tuple_104095, n_104097)
        
        keyword_104098 = tuple_104095
        kwargs_104099 = {'size': keyword_104098}
        # Getting the type of 'np' (line 717)
        np_104092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 12), 'np', False)
        # Obtaining the member 'random' of a type (line 717)
        random_104093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 12), np_104092, 'random')
        # Obtaining the member 'exponential' of a type (line 717)
        exponential_104094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 12), random_104093, 'exponential')
        # Calling exponential(args, kwargs) (line 717)
        exponential_call_result_104100 = invoke(stypy.reporting.localization.Localization(__file__, 717, 12), exponential_104094, *[], **kwargs_104099)
        
        # Assigning a type to the variable 'A' (line 717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'A', exponential_call_result_104100)
        
        # Assigning a Call to a Name (line 718):
        
        # Assigning a Call to a Name (line 718):
        
        # Call to exponential(...): (line 718)
        # Processing the call keyword arguments (line 718)
        
        # Obtaining an instance of the builtin type 'tuple' (line 718)
        tuple_104104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 718)
        # Adding element type (line 718)
        # Getting the type of 'n' (line 718)
        n_104105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 40), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 40), tuple_104104, n_104105)
        # Adding element type (line 718)
        # Getting the type of 'n' (line 718)
        n_104106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 43), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 40), tuple_104104, n_104106)
        
        keyword_104107 = tuple_104104
        kwargs_104108 = {'size': keyword_104107}
        # Getting the type of 'np' (line 718)
        np_104101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 12), 'np', False)
        # Obtaining the member 'random' of a type (line 718)
        random_104102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 12), np_104101, 'random')
        # Obtaining the member 'exponential' of a type (line 718)
        exponential_104103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 12), random_104102, 'exponential')
        # Calling exponential(args, kwargs) (line 718)
        exponential_call_result_104109 = invoke(stypy.reporting.localization.Localization(__file__, 718, 12), exponential_104103, *[], **kwargs_104108)
        
        # Assigning a type to the variable 'E' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'E', exponential_call_result_104109)
        
        # Assigning a Call to a Tuple (line 719):
        
        # Assigning a Subscript to a Name (line 719):
        
        # Obtaining the type of the subscript
        int_104110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 8), 'int')
        
        # Call to expm_frechet(...): (line 719)
        # Processing the call arguments (line 719)
        # Getting the type of 'A' (line 720)
        A_104112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 16), 'A', False)
        # Getting the type of 'E' (line 720)
        E_104113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 19), 'E', False)
        # Processing the call keyword arguments (line 719)
        str_104114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 29), 'str', 'SPS')
        keyword_104115 = str_104114
        kwargs_104116 = {'method': keyword_104115}
        # Getting the type of 'expm_frechet' (line 719)
        expm_frechet_104111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 32), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 719)
        expm_frechet_call_result_104117 = invoke(stypy.reporting.localization.Localization(__file__, 719, 32), expm_frechet_104111, *[A_104112, E_104113], **kwargs_104116)
        
        # Obtaining the member '__getitem__' of a type (line 719)
        getitem___104118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 8), expm_frechet_call_result_104117, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 719)
        subscript_call_result_104119 = invoke(stypy.reporting.localization.Localization(__file__, 719, 8), getitem___104118, int_104110)
        
        # Assigning a type to the variable 'tuple_var_assignment_100597' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'tuple_var_assignment_100597', subscript_call_result_104119)
        
        # Assigning a Subscript to a Name (line 719):
        
        # Obtaining the type of the subscript
        int_104120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 8), 'int')
        
        # Call to expm_frechet(...): (line 719)
        # Processing the call arguments (line 719)
        # Getting the type of 'A' (line 720)
        A_104122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 16), 'A', False)
        # Getting the type of 'E' (line 720)
        E_104123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 19), 'E', False)
        # Processing the call keyword arguments (line 719)
        str_104124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 29), 'str', 'SPS')
        keyword_104125 = str_104124
        kwargs_104126 = {'method': keyword_104125}
        # Getting the type of 'expm_frechet' (line 719)
        expm_frechet_104121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 32), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 719)
        expm_frechet_call_result_104127 = invoke(stypy.reporting.localization.Localization(__file__, 719, 32), expm_frechet_104121, *[A_104122, E_104123], **kwargs_104126)
        
        # Obtaining the member '__getitem__' of a type (line 719)
        getitem___104128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 8), expm_frechet_call_result_104127, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 719)
        subscript_call_result_104129 = invoke(stypy.reporting.localization.Localization(__file__, 719, 8), getitem___104128, int_104120)
        
        # Assigning a type to the variable 'tuple_var_assignment_100598' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'tuple_var_assignment_100598', subscript_call_result_104129)
        
        # Assigning a Name to a Name (line 719):
        # Getting the type of 'tuple_var_assignment_100597' (line 719)
        tuple_var_assignment_100597_104130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'tuple_var_assignment_100597')
        # Assigning a type to the variable 'sps_expm' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'sps_expm', tuple_var_assignment_100597_104130)
        
        # Assigning a Name to a Name (line 719):
        # Getting the type of 'tuple_var_assignment_100598' (line 719)
        tuple_var_assignment_100598_104131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'tuple_var_assignment_100598')
        # Assigning a type to the variable 'sps_frechet' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 18), 'sps_frechet', tuple_var_assignment_100598_104131)
        
        # Assigning a Call to a Tuple (line 721):
        
        # Assigning a Subscript to a Name (line 721):
        
        # Obtaining the type of the subscript
        int_104132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 8), 'int')
        
        # Call to expm_frechet(...): (line 721)
        # Processing the call arguments (line 721)
        # Getting the type of 'A' (line 722)
        A_104134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 16), 'A', False)
        # Getting the type of 'E' (line 722)
        E_104135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 19), 'E', False)
        # Processing the call keyword arguments (line 721)
        str_104136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 29), 'str', 'blockEnlarge')
        keyword_104137 = str_104136
        kwargs_104138 = {'method': keyword_104137}
        # Getting the type of 'expm_frechet' (line 721)
        expm_frechet_104133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 50), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 721)
        expm_frechet_call_result_104139 = invoke(stypy.reporting.localization.Localization(__file__, 721, 50), expm_frechet_104133, *[A_104134, E_104135], **kwargs_104138)
        
        # Obtaining the member '__getitem__' of a type (line 721)
        getitem___104140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 721, 8), expm_frechet_call_result_104139, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 721)
        subscript_call_result_104141 = invoke(stypy.reporting.localization.Localization(__file__, 721, 8), getitem___104140, int_104132)
        
        # Assigning a type to the variable 'tuple_var_assignment_100599' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'tuple_var_assignment_100599', subscript_call_result_104141)
        
        # Assigning a Subscript to a Name (line 721):
        
        # Obtaining the type of the subscript
        int_104142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 8), 'int')
        
        # Call to expm_frechet(...): (line 721)
        # Processing the call arguments (line 721)
        # Getting the type of 'A' (line 722)
        A_104144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 16), 'A', False)
        # Getting the type of 'E' (line 722)
        E_104145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 19), 'E', False)
        # Processing the call keyword arguments (line 721)
        str_104146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 29), 'str', 'blockEnlarge')
        keyword_104147 = str_104146
        kwargs_104148 = {'method': keyword_104147}
        # Getting the type of 'expm_frechet' (line 721)
        expm_frechet_104143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 50), 'expm_frechet', False)
        # Calling expm_frechet(args, kwargs) (line 721)
        expm_frechet_call_result_104149 = invoke(stypy.reporting.localization.Localization(__file__, 721, 50), expm_frechet_104143, *[A_104144, E_104145], **kwargs_104148)
        
        # Obtaining the member '__getitem__' of a type (line 721)
        getitem___104150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 721, 8), expm_frechet_call_result_104149, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 721)
        subscript_call_result_104151 = invoke(stypy.reporting.localization.Localization(__file__, 721, 8), getitem___104150, int_104142)
        
        # Assigning a type to the variable 'tuple_var_assignment_100600' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'tuple_var_assignment_100600', subscript_call_result_104151)
        
        # Assigning a Name to a Name (line 721):
        # Getting the type of 'tuple_var_assignment_100599' (line 721)
        tuple_var_assignment_100599_104152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'tuple_var_assignment_100599')
        # Assigning a type to the variable 'blockEnlarge_expm' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'blockEnlarge_expm', tuple_var_assignment_100599_104152)
        
        # Assigning a Name to a Name (line 721):
        # Getting the type of 'tuple_var_assignment_100600' (line 721)
        tuple_var_assignment_100600_104153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'tuple_var_assignment_100600')
        # Assigning a type to the variable 'blockEnlarge_frechet' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 27), 'blockEnlarge_frechet', tuple_var_assignment_100600_104153)
        
        # Call to assert_allclose(...): (line 723)
        # Processing the call arguments (line 723)
        # Getting the type of 'sps_expm' (line 723)
        sps_expm_104155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 24), 'sps_expm', False)
        # Getting the type of 'blockEnlarge_expm' (line 723)
        blockEnlarge_expm_104156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 34), 'blockEnlarge_expm', False)
        # Processing the call keyword arguments (line 723)
        kwargs_104157 = {}
        # Getting the type of 'assert_allclose' (line 723)
        assert_allclose_104154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 723)
        assert_allclose_call_result_104158 = invoke(stypy.reporting.localization.Localization(__file__, 723, 8), assert_allclose_104154, *[sps_expm_104155, blockEnlarge_expm_104156], **kwargs_104157)
        
        
        # Call to assert_allclose(...): (line 724)
        # Processing the call arguments (line 724)
        # Getting the type of 'sps_frechet' (line 724)
        sps_frechet_104160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 24), 'sps_frechet', False)
        # Getting the type of 'blockEnlarge_frechet' (line 724)
        blockEnlarge_frechet_104161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 37), 'blockEnlarge_frechet', False)
        # Processing the call keyword arguments (line 724)
        kwargs_104162 = {}
        # Getting the type of 'assert_allclose' (line 724)
        assert_allclose_104159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 8), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 724)
        assert_allclose_call_result_104163 = invoke(stypy.reporting.localization.Localization(__file__, 724, 8), assert_allclose_104159, *[sps_frechet_104160, blockEnlarge_frechet_104161], **kwargs_104162)
        
        
        # ################# End of 'test_medium_matrix(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_medium_matrix' in the type store
        # Getting the type of 'stypy_return_type' (line 712)
        stypy_return_type_104164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104164)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_medium_matrix'
        return stypy_return_type_104164


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 609, 0, False)
        # Assigning a type to the variable 'self' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpmFrechet.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'TestExpmFrechet' (line 609)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 0), 'TestExpmFrechet', TestExpmFrechet)

@norecursion
def _help_expm_cond_search(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_help_expm_cond_search'
    module_type_store = module_type_store.open_function_context('_help_expm_cond_search', 727, 0, False)
    
    # Passed parameters checking function
    _help_expm_cond_search.stypy_localization = localization
    _help_expm_cond_search.stypy_type_of_self = None
    _help_expm_cond_search.stypy_type_store = module_type_store
    _help_expm_cond_search.stypy_function_name = '_help_expm_cond_search'
    _help_expm_cond_search.stypy_param_names_list = ['A', 'A_norm', 'X', 'X_norm', 'eps', 'p']
    _help_expm_cond_search.stypy_varargs_param_name = None
    _help_expm_cond_search.stypy_kwargs_param_name = None
    _help_expm_cond_search.stypy_call_defaults = defaults
    _help_expm_cond_search.stypy_call_varargs = varargs
    _help_expm_cond_search.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_help_expm_cond_search', ['A', 'A_norm', 'X', 'X_norm', 'eps', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_help_expm_cond_search', localization, ['A', 'A_norm', 'X', 'X_norm', 'eps', 'p'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_help_expm_cond_search(...)' code ##################

    
    # Assigning a Call to a Name (line 728):
    
    # Assigning a Call to a Name (line 728):
    
    # Call to reshape(...): (line 728)
    # Processing the call arguments (line 728)
    # Getting the type of 'p' (line 728)
    p_104167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 19), 'p', False)
    # Getting the type of 'A' (line 728)
    A_104168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 22), 'A', False)
    # Obtaining the member 'shape' of a type (line 728)
    shape_104169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 22), A_104168, 'shape')
    # Processing the call keyword arguments (line 728)
    kwargs_104170 = {}
    # Getting the type of 'np' (line 728)
    np_104165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 8), 'np', False)
    # Obtaining the member 'reshape' of a type (line 728)
    reshape_104166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 8), np_104165, 'reshape')
    # Calling reshape(args, kwargs) (line 728)
    reshape_call_result_104171 = invoke(stypy.reporting.localization.Localization(__file__, 728, 8), reshape_104166, *[p_104167, shape_104169], **kwargs_104170)
    
    # Assigning a type to the variable 'p' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 4), 'p', reshape_call_result_104171)
    
    # Assigning a Call to a Name (line 729):
    
    # Assigning a Call to a Name (line 729):
    
    # Call to norm(...): (line 729)
    # Processing the call arguments (line 729)
    # Getting the type of 'p' (line 729)
    p_104173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 18), 'p', False)
    # Processing the call keyword arguments (line 729)
    kwargs_104174 = {}
    # Getting the type of 'norm' (line 729)
    norm_104172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 13), 'norm', False)
    # Calling norm(args, kwargs) (line 729)
    norm_call_result_104175 = invoke(stypy.reporting.localization.Localization(__file__, 729, 13), norm_104172, *[p_104173], **kwargs_104174)
    
    # Assigning a type to the variable 'p_norm' (line 729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 4), 'p_norm', norm_call_result_104175)
    
    # Assigning a BinOp to a Name (line 730):
    
    # Assigning a BinOp to a Name (line 730):
    # Getting the type of 'eps' (line 730)
    eps_104176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 19), 'eps')
    # Getting the type of 'p' (line 730)
    p_104177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 25), 'p')
    # Applying the binary operator '*' (line 730)
    result_mul_104178 = python_operator(stypy.reporting.localization.Localization(__file__, 730, 19), '*', eps_104176, p_104177)
    
    # Getting the type of 'A_norm' (line 730)
    A_norm_104179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 30), 'A_norm')
    # Getting the type of 'p_norm' (line 730)
    p_norm_104180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 39), 'p_norm')
    # Applying the binary operator 'div' (line 730)
    result_div_104181 = python_operator(stypy.reporting.localization.Localization(__file__, 730, 30), 'div', A_norm_104179, p_norm_104180)
    
    # Applying the binary operator '*' (line 730)
    result_mul_104182 = python_operator(stypy.reporting.localization.Localization(__file__, 730, 27), '*', result_mul_104178, result_div_104181)
    
    # Assigning a type to the variable 'perturbation' (line 730)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 4), 'perturbation', result_mul_104182)
    
    # Assigning a Call to a Name (line 731):
    
    # Assigning a Call to a Name (line 731):
    
    # Call to expm(...): (line 731)
    # Processing the call arguments (line 731)
    # Getting the type of 'A' (line 731)
    A_104184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 19), 'A', False)
    # Getting the type of 'perturbation' (line 731)
    perturbation_104185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 23), 'perturbation', False)
    # Applying the binary operator '+' (line 731)
    result_add_104186 = python_operator(stypy.reporting.localization.Localization(__file__, 731, 19), '+', A_104184, perturbation_104185)
    
    # Processing the call keyword arguments (line 731)
    kwargs_104187 = {}
    # Getting the type of 'expm' (line 731)
    expm_104183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 14), 'expm', False)
    # Calling expm(args, kwargs) (line 731)
    expm_call_result_104188 = invoke(stypy.reporting.localization.Localization(__file__, 731, 14), expm_104183, *[result_add_104186], **kwargs_104187)
    
    # Assigning a type to the variable 'X_prime' (line 731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 4), 'X_prime', expm_call_result_104188)
    
    # Assigning a BinOp to a Name (line 732):
    
    # Assigning a BinOp to a Name (line 732):
    
    # Call to norm(...): (line 732)
    # Processing the call arguments (line 732)
    # Getting the type of 'X_prime' (line 732)
    X_prime_104190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 33), 'X_prime', False)
    # Getting the type of 'X' (line 732)
    X_104191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 43), 'X', False)
    # Applying the binary operator '-' (line 732)
    result_sub_104192 = python_operator(stypy.reporting.localization.Localization(__file__, 732, 33), '-', X_prime_104190, X_104191)
    
    # Processing the call keyword arguments (line 732)
    kwargs_104193 = {}
    # Getting the type of 'norm' (line 732)
    norm_104189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 28), 'norm', False)
    # Calling norm(args, kwargs) (line 732)
    norm_call_result_104194 = invoke(stypy.reporting.localization.Localization(__file__, 732, 28), norm_104189, *[result_sub_104192], **kwargs_104193)
    
    # Getting the type of 'X_norm' (line 732)
    X_norm_104195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 49), 'X_norm')
    # Getting the type of 'eps' (line 732)
    eps_104196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 58), 'eps')
    # Applying the binary operator '*' (line 732)
    result_mul_104197 = python_operator(stypy.reporting.localization.Localization(__file__, 732, 49), '*', X_norm_104195, eps_104196)
    
    # Applying the binary operator 'div' (line 732)
    result_div_104198 = python_operator(stypy.reporting.localization.Localization(__file__, 732, 28), 'div', norm_call_result_104194, result_mul_104197)
    
    # Assigning a type to the variable 'scaled_relative_error' (line 732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 4), 'scaled_relative_error', result_div_104198)
    
    # Getting the type of 'scaled_relative_error' (line 733)
    scaled_relative_error_104199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 12), 'scaled_relative_error')
    # Applying the 'usub' unary operator (line 733)
    result___neg___104200 = python_operator(stypy.reporting.localization.Localization(__file__, 733, 11), 'usub', scaled_relative_error_104199)
    
    # Assigning a type to the variable 'stypy_return_type' (line 733)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 4), 'stypy_return_type', result___neg___104200)
    
    # ################# End of '_help_expm_cond_search(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_help_expm_cond_search' in the type store
    # Getting the type of 'stypy_return_type' (line 727)
    stypy_return_type_104201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_104201)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_help_expm_cond_search'
    return stypy_return_type_104201

# Assigning a type to the variable '_help_expm_cond_search' (line 727)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 0), '_help_expm_cond_search', _help_expm_cond_search)

@norecursion
def _normalized_like(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_normalized_like'
    module_type_store = module_type_store.open_function_context('_normalized_like', 736, 0, False)
    
    # Passed parameters checking function
    _normalized_like.stypy_localization = localization
    _normalized_like.stypy_type_of_self = None
    _normalized_like.stypy_type_store = module_type_store
    _normalized_like.stypy_function_name = '_normalized_like'
    _normalized_like.stypy_param_names_list = ['A', 'B']
    _normalized_like.stypy_varargs_param_name = None
    _normalized_like.stypy_kwargs_param_name = None
    _normalized_like.stypy_call_defaults = defaults
    _normalized_like.stypy_call_varargs = varargs
    _normalized_like.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_normalized_like', ['A', 'B'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_normalized_like', localization, ['A', 'B'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_normalized_like(...)' code ##################

    # Getting the type of 'A' (line 737)
    A_104202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 11), 'A')
    
    # Call to norm(...): (line 737)
    # Processing the call arguments (line 737)
    # Getting the type of 'B' (line 737)
    B_104206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 34), 'B', False)
    # Processing the call keyword arguments (line 737)
    kwargs_104207 = {}
    # Getting the type of 'scipy' (line 737)
    scipy_104203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 16), 'scipy', False)
    # Obtaining the member 'linalg' of a type (line 737)
    linalg_104204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 16), scipy_104203, 'linalg')
    # Obtaining the member 'norm' of a type (line 737)
    norm_104205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 16), linalg_104204, 'norm')
    # Calling norm(args, kwargs) (line 737)
    norm_call_result_104208 = invoke(stypy.reporting.localization.Localization(__file__, 737, 16), norm_104205, *[B_104206], **kwargs_104207)
    
    
    # Call to norm(...): (line 737)
    # Processing the call arguments (line 737)
    # Getting the type of 'A' (line 737)
    A_104212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 57), 'A', False)
    # Processing the call keyword arguments (line 737)
    kwargs_104213 = {}
    # Getting the type of 'scipy' (line 737)
    scipy_104209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 39), 'scipy', False)
    # Obtaining the member 'linalg' of a type (line 737)
    linalg_104210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 39), scipy_104209, 'linalg')
    # Obtaining the member 'norm' of a type (line 737)
    norm_104211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 39), linalg_104210, 'norm')
    # Calling norm(args, kwargs) (line 737)
    norm_call_result_104214 = invoke(stypy.reporting.localization.Localization(__file__, 737, 39), norm_104211, *[A_104212], **kwargs_104213)
    
    # Applying the binary operator 'div' (line 737)
    result_div_104215 = python_operator(stypy.reporting.localization.Localization(__file__, 737, 16), 'div', norm_call_result_104208, norm_call_result_104214)
    
    # Applying the binary operator '*' (line 737)
    result_mul_104216 = python_operator(stypy.reporting.localization.Localization(__file__, 737, 11), '*', A_104202, result_div_104215)
    
    # Assigning a type to the variable 'stypy_return_type' (line 737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 4), 'stypy_return_type', result_mul_104216)
    
    # ################# End of '_normalized_like(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_normalized_like' in the type store
    # Getting the type of 'stypy_return_type' (line 736)
    stypy_return_type_104217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_104217)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_normalized_like'
    return stypy_return_type_104217

# Assigning a type to the variable '_normalized_like' (line 736)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 0), '_normalized_like', _normalized_like)

@norecursion
def _relative_error(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_relative_error'
    module_type_store = module_type_store.open_function_context('_relative_error', 740, 0, False)
    
    # Passed parameters checking function
    _relative_error.stypy_localization = localization
    _relative_error.stypy_type_of_self = None
    _relative_error.stypy_type_store = module_type_store
    _relative_error.stypy_function_name = '_relative_error'
    _relative_error.stypy_param_names_list = ['f', 'A', 'perturbation']
    _relative_error.stypy_varargs_param_name = None
    _relative_error.stypy_kwargs_param_name = None
    _relative_error.stypy_call_defaults = defaults
    _relative_error.stypy_call_varargs = varargs
    _relative_error.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_relative_error', ['f', 'A', 'perturbation'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_relative_error', localization, ['f', 'A', 'perturbation'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_relative_error(...)' code ##################

    
    # Assigning a Call to a Name (line 741):
    
    # Assigning a Call to a Name (line 741):
    
    # Call to f(...): (line 741)
    # Processing the call arguments (line 741)
    # Getting the type of 'A' (line 741)
    A_104219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 10), 'A', False)
    # Processing the call keyword arguments (line 741)
    kwargs_104220 = {}
    # Getting the type of 'f' (line 741)
    f_104218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'f', False)
    # Calling f(args, kwargs) (line 741)
    f_call_result_104221 = invoke(stypy.reporting.localization.Localization(__file__, 741, 8), f_104218, *[A_104219], **kwargs_104220)
    
    # Assigning a type to the variable 'X' (line 741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 4), 'X', f_call_result_104221)
    
    # Assigning a Call to a Name (line 742):
    
    # Assigning a Call to a Name (line 742):
    
    # Call to f(...): (line 742)
    # Processing the call arguments (line 742)
    # Getting the type of 'A' (line 742)
    A_104223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 16), 'A', False)
    # Getting the type of 'perturbation' (line 742)
    perturbation_104224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 20), 'perturbation', False)
    # Applying the binary operator '+' (line 742)
    result_add_104225 = python_operator(stypy.reporting.localization.Localization(__file__, 742, 16), '+', A_104223, perturbation_104224)
    
    # Processing the call keyword arguments (line 742)
    kwargs_104226 = {}
    # Getting the type of 'f' (line 742)
    f_104222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 14), 'f', False)
    # Calling f(args, kwargs) (line 742)
    f_call_result_104227 = invoke(stypy.reporting.localization.Localization(__file__, 742, 14), f_104222, *[result_add_104225], **kwargs_104226)
    
    # Assigning a type to the variable 'X_prime' (line 742)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 4), 'X_prime', f_call_result_104227)
    
    # Call to norm(...): (line 743)
    # Processing the call arguments (line 743)
    # Getting the type of 'X_prime' (line 743)
    X_prime_104229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 16), 'X_prime', False)
    # Getting the type of 'X' (line 743)
    X_104230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 26), 'X', False)
    # Applying the binary operator '-' (line 743)
    result_sub_104231 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 16), '-', X_prime_104229, X_104230)
    
    # Processing the call keyword arguments (line 743)
    kwargs_104232 = {}
    # Getting the type of 'norm' (line 743)
    norm_104228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 11), 'norm', False)
    # Calling norm(args, kwargs) (line 743)
    norm_call_result_104233 = invoke(stypy.reporting.localization.Localization(__file__, 743, 11), norm_104228, *[result_sub_104231], **kwargs_104232)
    
    
    # Call to norm(...): (line 743)
    # Processing the call arguments (line 743)
    # Getting the type of 'X' (line 743)
    X_104235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 36), 'X', False)
    # Processing the call keyword arguments (line 743)
    kwargs_104236 = {}
    # Getting the type of 'norm' (line 743)
    norm_104234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 31), 'norm', False)
    # Calling norm(args, kwargs) (line 743)
    norm_call_result_104237 = invoke(stypy.reporting.localization.Localization(__file__, 743, 31), norm_104234, *[X_104235], **kwargs_104236)
    
    # Applying the binary operator 'div' (line 743)
    result_div_104238 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 11), 'div', norm_call_result_104233, norm_call_result_104237)
    
    # Assigning a type to the variable 'stypy_return_type' (line 743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 4), 'stypy_return_type', result_div_104238)
    
    # ################# End of '_relative_error(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_relative_error' in the type store
    # Getting the type of 'stypy_return_type' (line 740)
    stypy_return_type_104239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_104239)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_relative_error'
    return stypy_return_type_104239

# Assigning a type to the variable '_relative_error' (line 740)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 0), '_relative_error', _relative_error)
# Declaration of the 'TestExpmConditionNumber' class

class TestExpmConditionNumber(object, ):

    @norecursion
    def test_expm_cond_smoke(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_expm_cond_smoke'
        module_type_store = module_type_store.open_function_context('test_expm_cond_smoke', 747, 4, False)
        # Assigning a type to the variable 'self' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestExpmConditionNumber.test_expm_cond_smoke.__dict__.__setitem__('stypy_localization', localization)
        TestExpmConditionNumber.test_expm_cond_smoke.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestExpmConditionNumber.test_expm_cond_smoke.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestExpmConditionNumber.test_expm_cond_smoke.__dict__.__setitem__('stypy_function_name', 'TestExpmConditionNumber.test_expm_cond_smoke')
        TestExpmConditionNumber.test_expm_cond_smoke.__dict__.__setitem__('stypy_param_names_list', [])
        TestExpmConditionNumber.test_expm_cond_smoke.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestExpmConditionNumber.test_expm_cond_smoke.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestExpmConditionNumber.test_expm_cond_smoke.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestExpmConditionNumber.test_expm_cond_smoke.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestExpmConditionNumber.test_expm_cond_smoke.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestExpmConditionNumber.test_expm_cond_smoke.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpmConditionNumber.test_expm_cond_smoke', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_expm_cond_smoke', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_expm_cond_smoke(...)' code ##################

        
        # Call to seed(...): (line 748)
        # Processing the call arguments (line 748)
        int_104243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 23), 'int')
        # Processing the call keyword arguments (line 748)
        kwargs_104244 = {}
        # Getting the type of 'np' (line 748)
        np_104240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 748)
        random_104241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 8), np_104240, 'random')
        # Obtaining the member 'seed' of a type (line 748)
        seed_104242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 8), random_104241, 'seed')
        # Calling seed(args, kwargs) (line 748)
        seed_call_result_104245 = invoke(stypy.reporting.localization.Localization(__file__, 748, 8), seed_104242, *[int_104243], **kwargs_104244)
        
        
        
        # Call to range(...): (line 749)
        # Processing the call arguments (line 749)
        int_104247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, 23), 'int')
        int_104248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, 26), 'int')
        # Processing the call keyword arguments (line 749)
        kwargs_104249 = {}
        # Getting the type of 'range' (line 749)
        range_104246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 17), 'range', False)
        # Calling range(args, kwargs) (line 749)
        range_call_result_104250 = invoke(stypy.reporting.localization.Localization(__file__, 749, 17), range_104246, *[int_104247, int_104248], **kwargs_104249)
        
        # Testing the type of a for loop iterable (line 749)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 749, 8), range_call_result_104250)
        # Getting the type of the for loop variable (line 749)
        for_loop_var_104251 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 749, 8), range_call_result_104250)
        # Assigning a type to the variable 'n' (line 749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 8), 'n', for_loop_var_104251)
        # SSA begins for a for statement (line 749)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 750):
        
        # Assigning a Call to a Name (line 750):
        
        # Call to randn(...): (line 750)
        # Processing the call arguments (line 750)
        # Getting the type of 'n' (line 750)
        n_104255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 32), 'n', False)
        # Getting the type of 'n' (line 750)
        n_104256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 35), 'n', False)
        # Processing the call keyword arguments (line 750)
        kwargs_104257 = {}
        # Getting the type of 'np' (line 750)
        np_104252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 16), 'np', False)
        # Obtaining the member 'random' of a type (line 750)
        random_104253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 16), np_104252, 'random')
        # Obtaining the member 'randn' of a type (line 750)
        randn_104254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 16), random_104253, 'randn')
        # Calling randn(args, kwargs) (line 750)
        randn_call_result_104258 = invoke(stypy.reporting.localization.Localization(__file__, 750, 16), randn_104254, *[n_104255, n_104256], **kwargs_104257)
        
        # Assigning a type to the variable 'A' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 12), 'A', randn_call_result_104258)
        
        # Assigning a Call to a Name (line 751):
        
        # Assigning a Call to a Name (line 751):
        
        # Call to expm_cond(...): (line 751)
        # Processing the call arguments (line 751)
        # Getting the type of 'A' (line 751)
        A_104260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 30), 'A', False)
        # Processing the call keyword arguments (line 751)
        kwargs_104261 = {}
        # Getting the type of 'expm_cond' (line 751)
        expm_cond_104259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 20), 'expm_cond', False)
        # Calling expm_cond(args, kwargs) (line 751)
        expm_cond_call_result_104262 = invoke(stypy.reporting.localization.Localization(__file__, 751, 20), expm_cond_104259, *[A_104260], **kwargs_104261)
        
        # Assigning a type to the variable 'kappa' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 12), 'kappa', expm_cond_call_result_104262)
        
        # Call to assert_array_less(...): (line 752)
        # Processing the call arguments (line 752)
        int_104264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 30), 'int')
        # Getting the type of 'kappa' (line 752)
        kappa_104265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 33), 'kappa', False)
        # Processing the call keyword arguments (line 752)
        kwargs_104266 = {}
        # Getting the type of 'assert_array_less' (line 752)
        assert_array_less_104263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 12), 'assert_array_less', False)
        # Calling assert_array_less(args, kwargs) (line 752)
        assert_array_less_call_result_104267 = invoke(stypy.reporting.localization.Localization(__file__, 752, 12), assert_array_less_104263, *[int_104264, kappa_104265], **kwargs_104266)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_expm_cond_smoke(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_expm_cond_smoke' in the type store
        # Getting the type of 'stypy_return_type' (line 747)
        stypy_return_type_104268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104268)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_expm_cond_smoke'
        return stypy_return_type_104268


    @norecursion
    def test_expm_bad_condition_number(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_expm_bad_condition_number'
        module_type_store = module_type_store.open_function_context('test_expm_bad_condition_number', 754, 4, False)
        # Assigning a type to the variable 'self' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestExpmConditionNumber.test_expm_bad_condition_number.__dict__.__setitem__('stypy_localization', localization)
        TestExpmConditionNumber.test_expm_bad_condition_number.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestExpmConditionNumber.test_expm_bad_condition_number.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestExpmConditionNumber.test_expm_bad_condition_number.__dict__.__setitem__('stypy_function_name', 'TestExpmConditionNumber.test_expm_bad_condition_number')
        TestExpmConditionNumber.test_expm_bad_condition_number.__dict__.__setitem__('stypy_param_names_list', [])
        TestExpmConditionNumber.test_expm_bad_condition_number.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestExpmConditionNumber.test_expm_bad_condition_number.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestExpmConditionNumber.test_expm_bad_condition_number.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestExpmConditionNumber.test_expm_bad_condition_number.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestExpmConditionNumber.test_expm_bad_condition_number.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestExpmConditionNumber.test_expm_bad_condition_number.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpmConditionNumber.test_expm_bad_condition_number', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_expm_bad_condition_number', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_expm_bad_condition_number(...)' code ##################

        
        # Assigning a Call to a Name (line 755):
        
        # Assigning a Call to a Name (line 755):
        
        # Call to array(...): (line 755)
        # Processing the call arguments (line 755)
        
        # Obtaining an instance of the builtin type 'list' (line 755)
        list_104271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 755)
        # Adding element type (line 755)
        
        # Obtaining an instance of the builtin type 'list' (line 756)
        list_104272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 756)
        # Adding element type (line 756)
        float_104273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 13), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 756, 12), list_104272, float_104273)
        # Adding element type (line 756)
        float_104274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 27), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 756, 12), list_104272, float_104274)
        # Adding element type (line 756)
        float_104275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 42), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 756, 12), list_104272, float_104275)
        # Adding element type (line 756)
        float_104276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 58), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 756, 12), list_104272, float_104276)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 21), list_104271, list_104272)
        # Adding element type (line 755)
        
        # Obtaining an instance of the builtin type 'list' (line 757)
        list_104277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 757)
        # Adding element type (line 757)
        int_104278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 757, 12), list_104277, int_104278)
        # Adding element type (line 757)
        float_104279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 16), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 757, 12), list_104277, float_104279)
        # Adding element type (line 757)
        float_104280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 30), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 757, 12), list_104277, float_104280)
        # Adding element type (line 757)
        float_104281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 45), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 757, 12), list_104277, float_104281)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 21), list_104271, list_104277)
        # Adding element type (line 755)
        
        # Obtaining an instance of the builtin type 'list' (line 758)
        list_104282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 758)
        # Adding element type (line 758)
        int_104283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 12), list_104282, int_104283)
        # Adding element type (line 758)
        int_104284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 12), list_104282, int_104284)
        # Adding element type (line 758)
        float_104285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 19), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 12), list_104282, float_104285)
        # Adding element type (line 758)
        float_104286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 33), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 12), list_104282, float_104286)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 21), list_104271, list_104282)
        # Adding element type (line 755)
        
        # Obtaining an instance of the builtin type 'list' (line 759)
        list_104287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 759)
        # Adding element type (line 759)
        int_104288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 13), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 12), list_104287, int_104288)
        # Adding element type (line 759)
        int_104289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 12), list_104287, int_104289)
        # Adding element type (line 759)
        int_104290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 12), list_104287, int_104290)
        # Adding element type (line 759)
        float_104291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 22), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 12), list_104287, float_104291)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 21), list_104271, list_104287)
        
        # Processing the call keyword arguments (line 755)
        kwargs_104292 = {}
        # Getting the type of 'np' (line 755)
        np_104269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 755)
        array_104270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 12), np_104269, 'array')
        # Calling array(args, kwargs) (line 755)
        array_call_result_104293 = invoke(stypy.reporting.localization.Localization(__file__, 755, 12), array_104270, *[list_104271], **kwargs_104292)
        
        # Assigning a type to the variable 'A' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 8), 'A', array_call_result_104293)
        
        # Assigning a Call to a Name (line 761):
        
        # Assigning a Call to a Name (line 761):
        
        # Call to expm_cond(...): (line 761)
        # Processing the call arguments (line 761)
        # Getting the type of 'A' (line 761)
        A_104295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 26), 'A', False)
        # Processing the call keyword arguments (line 761)
        kwargs_104296 = {}
        # Getting the type of 'expm_cond' (line 761)
        expm_cond_104294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 16), 'expm_cond', False)
        # Calling expm_cond(args, kwargs) (line 761)
        expm_cond_call_result_104297 = invoke(stypy.reporting.localization.Localization(__file__, 761, 16), expm_cond_104294, *[A_104295], **kwargs_104296)
        
        # Assigning a type to the variable 'kappa' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'kappa', expm_cond_call_result_104297)
        
        # Call to assert_array_less(...): (line 762)
        # Processing the call arguments (line 762)
        float_104299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, 26), 'float')
        # Getting the type of 'kappa' (line 762)
        kappa_104300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 32), 'kappa', False)
        # Processing the call keyword arguments (line 762)
        kwargs_104301 = {}
        # Getting the type of 'assert_array_less' (line 762)
        assert_array_less_104298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 8), 'assert_array_less', False)
        # Calling assert_array_less(args, kwargs) (line 762)
        assert_array_less_call_result_104302 = invoke(stypy.reporting.localization.Localization(__file__, 762, 8), assert_array_less_104298, *[float_104299, kappa_104300], **kwargs_104301)
        
        
        # ################# End of 'test_expm_bad_condition_number(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_expm_bad_condition_number' in the type store
        # Getting the type of 'stypy_return_type' (line 754)
        stypy_return_type_104303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104303)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_expm_bad_condition_number'
        return stypy_return_type_104303


    @norecursion
    def test_univariate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_univariate'
        module_type_store = module_type_store.open_function_context('test_univariate', 764, 4, False)
        # Assigning a type to the variable 'self' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestExpmConditionNumber.test_univariate.__dict__.__setitem__('stypy_localization', localization)
        TestExpmConditionNumber.test_univariate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestExpmConditionNumber.test_univariate.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestExpmConditionNumber.test_univariate.__dict__.__setitem__('stypy_function_name', 'TestExpmConditionNumber.test_univariate')
        TestExpmConditionNumber.test_univariate.__dict__.__setitem__('stypy_param_names_list', [])
        TestExpmConditionNumber.test_univariate.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestExpmConditionNumber.test_univariate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestExpmConditionNumber.test_univariate.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestExpmConditionNumber.test_univariate.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestExpmConditionNumber.test_univariate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestExpmConditionNumber.test_univariate.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpmConditionNumber.test_univariate', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_univariate', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_univariate(...)' code ##################

        
        # Call to seed(...): (line 765)
        # Processing the call arguments (line 765)
        int_104307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 23), 'int')
        # Processing the call keyword arguments (line 765)
        kwargs_104308 = {}
        # Getting the type of 'np' (line 765)
        np_104304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 765)
        random_104305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 8), np_104304, 'random')
        # Obtaining the member 'seed' of a type (line 765)
        seed_104306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 8), random_104305, 'seed')
        # Calling seed(args, kwargs) (line 765)
        seed_call_result_104309 = invoke(stypy.reporting.localization.Localization(__file__, 765, 8), seed_104306, *[int_104307], **kwargs_104308)
        
        
        
        # Call to linspace(...): (line 766)
        # Processing the call arguments (line 766)
        int_104312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 29), 'int')
        int_104313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 33), 'int')
        # Processing the call keyword arguments (line 766)
        int_104314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 40), 'int')
        keyword_104315 = int_104314
        kwargs_104316 = {'num': keyword_104315}
        # Getting the type of 'np' (line 766)
        np_104310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 17), 'np', False)
        # Obtaining the member 'linspace' of a type (line 766)
        linspace_104311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 17), np_104310, 'linspace')
        # Calling linspace(args, kwargs) (line 766)
        linspace_call_result_104317 = invoke(stypy.reporting.localization.Localization(__file__, 766, 17), linspace_104311, *[int_104312, int_104313], **kwargs_104316)
        
        # Testing the type of a for loop iterable (line 766)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 766, 8), linspace_call_result_104317)
        # Getting the type of the for loop variable (line 766)
        for_loop_var_104318 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 766, 8), linspace_call_result_104317)
        # Assigning a type to the variable 'x' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 8), 'x', for_loop_var_104318)
        # SSA begins for a for statement (line 766)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 767):
        
        # Assigning a Call to a Name (line 767):
        
        # Call to array(...): (line 767)
        # Processing the call arguments (line 767)
        
        # Obtaining an instance of the builtin type 'list' (line 767)
        list_104321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 767)
        # Adding element type (line 767)
        
        # Obtaining an instance of the builtin type 'list' (line 767)
        list_104322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 767)
        # Adding element type (line 767)
        # Getting the type of 'x' (line 767)
        x_104323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 27), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 767, 26), list_104322, x_104323)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 767, 25), list_104321, list_104322)
        
        # Processing the call keyword arguments (line 767)
        kwargs_104324 = {}
        # Getting the type of 'np' (line 767)
        np_104319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 767)
        array_104320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 16), np_104319, 'array')
        # Calling array(args, kwargs) (line 767)
        array_call_result_104325 = invoke(stypy.reporting.localization.Localization(__file__, 767, 16), array_104320, *[list_104321], **kwargs_104324)
        
        # Assigning a type to the variable 'A' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 12), 'A', array_call_result_104325)
        
        # Call to assert_allclose(...): (line 768)
        # Processing the call arguments (line 768)
        
        # Call to expm_cond(...): (line 768)
        # Processing the call arguments (line 768)
        # Getting the type of 'A' (line 768)
        A_104328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 38), 'A', False)
        # Processing the call keyword arguments (line 768)
        kwargs_104329 = {}
        # Getting the type of 'expm_cond' (line 768)
        expm_cond_104327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 28), 'expm_cond', False)
        # Calling expm_cond(args, kwargs) (line 768)
        expm_cond_call_result_104330 = invoke(stypy.reporting.localization.Localization(__file__, 768, 28), expm_cond_104327, *[A_104328], **kwargs_104329)
        
        
        # Call to abs(...): (line 768)
        # Processing the call arguments (line 768)
        # Getting the type of 'x' (line 768)
        x_104332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 46), 'x', False)
        # Processing the call keyword arguments (line 768)
        kwargs_104333 = {}
        # Getting the type of 'abs' (line 768)
        abs_104331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 42), 'abs', False)
        # Calling abs(args, kwargs) (line 768)
        abs_call_result_104334 = invoke(stypy.reporting.localization.Localization(__file__, 768, 42), abs_104331, *[x_104332], **kwargs_104333)
        
        # Processing the call keyword arguments (line 768)
        kwargs_104335 = {}
        # Getting the type of 'assert_allclose' (line 768)
        assert_allclose_104326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 768)
        assert_allclose_call_result_104336 = invoke(stypy.reporting.localization.Localization(__file__, 768, 12), assert_allclose_104326, *[expm_cond_call_result_104330, abs_call_result_104334], **kwargs_104335)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to logspace(...): (line 769)
        # Processing the call arguments (line 769)
        int_104339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 29), 'int')
        int_104340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 33), 'int')
        # Processing the call keyword arguments (line 769)
        int_104341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 40), 'int')
        keyword_104342 = int_104341
        kwargs_104343 = {'num': keyword_104342}
        # Getting the type of 'np' (line 769)
        np_104337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 17), 'np', False)
        # Obtaining the member 'logspace' of a type (line 769)
        logspace_104338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 17), np_104337, 'logspace')
        # Calling logspace(args, kwargs) (line 769)
        logspace_call_result_104344 = invoke(stypy.reporting.localization.Localization(__file__, 769, 17), logspace_104338, *[int_104339, int_104340], **kwargs_104343)
        
        # Testing the type of a for loop iterable (line 769)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 769, 8), logspace_call_result_104344)
        # Getting the type of the for loop variable (line 769)
        for_loop_var_104345 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 769, 8), logspace_call_result_104344)
        # Assigning a type to the variable 'x' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'x', for_loop_var_104345)
        # SSA begins for a for statement (line 769)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 770):
        
        # Assigning a Call to a Name (line 770):
        
        # Call to array(...): (line 770)
        # Processing the call arguments (line 770)
        
        # Obtaining an instance of the builtin type 'list' (line 770)
        list_104348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 770)
        # Adding element type (line 770)
        
        # Obtaining an instance of the builtin type 'list' (line 770)
        list_104349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 770)
        # Adding element type (line 770)
        # Getting the type of 'x' (line 770)
        x_104350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 27), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 770, 26), list_104349, x_104350)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 770, 25), list_104348, list_104349)
        
        # Processing the call keyword arguments (line 770)
        kwargs_104351 = {}
        # Getting the type of 'np' (line 770)
        np_104346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 770)
        array_104347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 16), np_104346, 'array')
        # Calling array(args, kwargs) (line 770)
        array_call_result_104352 = invoke(stypy.reporting.localization.Localization(__file__, 770, 16), array_104347, *[list_104348], **kwargs_104351)
        
        # Assigning a type to the variable 'A' (line 770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 12), 'A', array_call_result_104352)
        
        # Call to assert_allclose(...): (line 771)
        # Processing the call arguments (line 771)
        
        # Call to expm_cond(...): (line 771)
        # Processing the call arguments (line 771)
        # Getting the type of 'A' (line 771)
        A_104355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 38), 'A', False)
        # Processing the call keyword arguments (line 771)
        kwargs_104356 = {}
        # Getting the type of 'expm_cond' (line 771)
        expm_cond_104354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 28), 'expm_cond', False)
        # Calling expm_cond(args, kwargs) (line 771)
        expm_cond_call_result_104357 = invoke(stypy.reporting.localization.Localization(__file__, 771, 28), expm_cond_104354, *[A_104355], **kwargs_104356)
        
        
        # Call to abs(...): (line 771)
        # Processing the call arguments (line 771)
        # Getting the type of 'x' (line 771)
        x_104359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 46), 'x', False)
        # Processing the call keyword arguments (line 771)
        kwargs_104360 = {}
        # Getting the type of 'abs' (line 771)
        abs_104358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 42), 'abs', False)
        # Calling abs(args, kwargs) (line 771)
        abs_call_result_104361 = invoke(stypy.reporting.localization.Localization(__file__, 771, 42), abs_104358, *[x_104359], **kwargs_104360)
        
        # Processing the call keyword arguments (line 771)
        kwargs_104362 = {}
        # Getting the type of 'assert_allclose' (line 771)
        assert_allclose_104353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 771)
        assert_allclose_call_result_104363 = invoke(stypy.reporting.localization.Localization(__file__, 771, 12), assert_allclose_104353, *[expm_cond_call_result_104357, abs_call_result_104361], **kwargs_104362)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to range(...): (line 772)
        # Processing the call arguments (line 772)
        int_104365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 772, 23), 'int')
        # Processing the call keyword arguments (line 772)
        kwargs_104366 = {}
        # Getting the type of 'range' (line 772)
        range_104364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 17), 'range', False)
        # Calling range(args, kwargs) (line 772)
        range_call_result_104367 = invoke(stypy.reporting.localization.Localization(__file__, 772, 17), range_104364, *[int_104365], **kwargs_104366)
        
        # Testing the type of a for loop iterable (line 772)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 772, 8), range_call_result_104367)
        # Getting the type of the for loop variable (line 772)
        for_loop_var_104368 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 772, 8), range_call_result_104367)
        # Assigning a type to the variable 'i' (line 772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 8), 'i', for_loop_var_104368)
        # SSA begins for a for statement (line 772)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 773):
        
        # Assigning a Call to a Name (line 773):
        
        # Call to randn(...): (line 773)
        # Processing the call arguments (line 773)
        int_104372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, 32), 'int')
        int_104373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, 35), 'int')
        # Processing the call keyword arguments (line 773)
        kwargs_104374 = {}
        # Getting the type of 'np' (line 773)
        np_104369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 16), 'np', False)
        # Obtaining the member 'random' of a type (line 773)
        random_104370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 16), np_104369, 'random')
        # Obtaining the member 'randn' of a type (line 773)
        randn_104371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 16), random_104370, 'randn')
        # Calling randn(args, kwargs) (line 773)
        randn_call_result_104375 = invoke(stypy.reporting.localization.Localization(__file__, 773, 16), randn_104371, *[int_104372, int_104373], **kwargs_104374)
        
        # Assigning a type to the variable 'A' (line 773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 12), 'A', randn_call_result_104375)
        
        # Call to assert_allclose(...): (line 774)
        # Processing the call arguments (line 774)
        
        # Call to expm_cond(...): (line 774)
        # Processing the call arguments (line 774)
        # Getting the type of 'A' (line 774)
        A_104378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 38), 'A', False)
        # Processing the call keyword arguments (line 774)
        kwargs_104379 = {}
        # Getting the type of 'expm_cond' (line 774)
        expm_cond_104377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 28), 'expm_cond', False)
        # Calling expm_cond(args, kwargs) (line 774)
        expm_cond_call_result_104380 = invoke(stypy.reporting.localization.Localization(__file__, 774, 28), expm_cond_104377, *[A_104378], **kwargs_104379)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 774)
        tuple_104381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 57), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 774)
        # Adding element type (line 774)
        int_104382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 57), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 57), tuple_104381, int_104382)
        # Adding element type (line 774)
        int_104383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 60), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 57), tuple_104381, int_104383)
        
        
        # Call to absolute(...): (line 774)
        # Processing the call arguments (line 774)
        # Getting the type of 'A' (line 774)
        A_104386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 54), 'A', False)
        # Processing the call keyword arguments (line 774)
        kwargs_104387 = {}
        # Getting the type of 'np' (line 774)
        np_104384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 42), 'np', False)
        # Obtaining the member 'absolute' of a type (line 774)
        absolute_104385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 42), np_104384, 'absolute')
        # Calling absolute(args, kwargs) (line 774)
        absolute_call_result_104388 = invoke(stypy.reporting.localization.Localization(__file__, 774, 42), absolute_104385, *[A_104386], **kwargs_104387)
        
        # Obtaining the member '__getitem__' of a type (line 774)
        getitem___104389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 42), absolute_call_result_104388, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 774)
        subscript_call_result_104390 = invoke(stypy.reporting.localization.Localization(__file__, 774, 42), getitem___104389, tuple_104381)
        
        # Processing the call keyword arguments (line 774)
        kwargs_104391 = {}
        # Getting the type of 'assert_allclose' (line 774)
        assert_allclose_104376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 774)
        assert_allclose_call_result_104392 = invoke(stypy.reporting.localization.Localization(__file__, 774, 12), assert_allclose_104376, *[expm_cond_call_result_104380, subscript_call_result_104390], **kwargs_104391)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_univariate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_univariate' in the type store
        # Getting the type of 'stypy_return_type' (line 764)
        stypy_return_type_104393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104393)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_univariate'
        return stypy_return_type_104393


    @norecursion
    def test_expm_cond_fuzz(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_expm_cond_fuzz'
        module_type_store = module_type_store.open_function_context('test_expm_cond_fuzz', 776, 4, False)
        # Assigning a type to the variable 'self' (line 777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TestExpmConditionNumber.test_expm_cond_fuzz.__dict__.__setitem__('stypy_localization', localization)
        TestExpmConditionNumber.test_expm_cond_fuzz.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TestExpmConditionNumber.test_expm_cond_fuzz.__dict__.__setitem__('stypy_type_store', module_type_store)
        TestExpmConditionNumber.test_expm_cond_fuzz.__dict__.__setitem__('stypy_function_name', 'TestExpmConditionNumber.test_expm_cond_fuzz')
        TestExpmConditionNumber.test_expm_cond_fuzz.__dict__.__setitem__('stypy_param_names_list', [])
        TestExpmConditionNumber.test_expm_cond_fuzz.__dict__.__setitem__('stypy_varargs_param_name', None)
        TestExpmConditionNumber.test_expm_cond_fuzz.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TestExpmConditionNumber.test_expm_cond_fuzz.__dict__.__setitem__('stypy_call_defaults', defaults)
        TestExpmConditionNumber.test_expm_cond_fuzz.__dict__.__setitem__('stypy_call_varargs', varargs)
        TestExpmConditionNumber.test_expm_cond_fuzz.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TestExpmConditionNumber.test_expm_cond_fuzz.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpmConditionNumber.test_expm_cond_fuzz', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_expm_cond_fuzz', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_expm_cond_fuzz(...)' code ##################

        
        # Call to seed(...): (line 778)
        # Processing the call arguments (line 778)
        int_104397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 23), 'int')
        # Processing the call keyword arguments (line 778)
        kwargs_104398 = {}
        # Getting the type of 'np' (line 778)
        np_104394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 8), 'np', False)
        # Obtaining the member 'random' of a type (line 778)
        random_104395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 8), np_104394, 'random')
        # Obtaining the member 'seed' of a type (line 778)
        seed_104396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 8), random_104395, 'seed')
        # Calling seed(args, kwargs) (line 778)
        seed_call_result_104399 = invoke(stypy.reporting.localization.Localization(__file__, 778, 8), seed_104396, *[int_104397], **kwargs_104398)
        
        
        # Assigning a Num to a Name (line 779):
        
        # Assigning a Num to a Name (line 779):
        float_104400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, 14), 'float')
        # Assigning a type to the variable 'eps' (line 779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 8), 'eps', float_104400)
        
        # Assigning a Num to a Name (line 780):
        
        # Assigning a Num to a Name (line 780):
        int_104401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 780, 19), 'int')
        # Assigning a type to the variable 'nsamples' (line 780)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 780, 8), 'nsamples', int_104401)
        
        
        # Call to range(...): (line 781)
        # Processing the call arguments (line 781)
        # Getting the type of 'nsamples' (line 781)
        nsamples_104403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 23), 'nsamples', False)
        # Processing the call keyword arguments (line 781)
        kwargs_104404 = {}
        # Getting the type of 'range' (line 781)
        range_104402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 17), 'range', False)
        # Calling range(args, kwargs) (line 781)
        range_call_result_104405 = invoke(stypy.reporting.localization.Localization(__file__, 781, 17), range_104402, *[nsamples_104403], **kwargs_104404)
        
        # Testing the type of a for loop iterable (line 781)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 781, 8), range_call_result_104405)
        # Getting the type of the for loop variable (line 781)
        for_loop_var_104406 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 781, 8), range_call_result_104405)
        # Assigning a type to the variable 'i' (line 781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 8), 'i', for_loop_var_104406)
        # SSA begins for a for statement (line 781)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 782):
        
        # Assigning a Call to a Name (line 782):
        
        # Call to randint(...): (line 782)
        # Processing the call arguments (line 782)
        int_104410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 782, 34), 'int')
        int_104411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 782, 37), 'int')
        # Processing the call keyword arguments (line 782)
        kwargs_104412 = {}
        # Getting the type of 'np' (line 782)
        np_104407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 16), 'np', False)
        # Obtaining the member 'random' of a type (line 782)
        random_104408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 16), np_104407, 'random')
        # Obtaining the member 'randint' of a type (line 782)
        randint_104409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 16), random_104408, 'randint')
        # Calling randint(args, kwargs) (line 782)
        randint_call_result_104413 = invoke(stypy.reporting.localization.Localization(__file__, 782, 16), randint_104409, *[int_104410, int_104411], **kwargs_104412)
        
        # Assigning a type to the variable 'n' (line 782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 12), 'n', randint_call_result_104413)
        
        # Assigning a Call to a Name (line 783):
        
        # Assigning a Call to a Name (line 783):
        
        # Call to randn(...): (line 783)
        # Processing the call arguments (line 783)
        # Getting the type of 'n' (line 783)
        n_104417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 32), 'n', False)
        # Getting the type of 'n' (line 783)
        n_104418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 35), 'n', False)
        # Processing the call keyword arguments (line 783)
        kwargs_104419 = {}
        # Getting the type of 'np' (line 783)
        np_104414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 16), 'np', False)
        # Obtaining the member 'random' of a type (line 783)
        random_104415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 16), np_104414, 'random')
        # Obtaining the member 'randn' of a type (line 783)
        randn_104416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 16), random_104415, 'randn')
        # Calling randn(args, kwargs) (line 783)
        randn_call_result_104420 = invoke(stypy.reporting.localization.Localization(__file__, 783, 16), randn_104416, *[n_104417, n_104418], **kwargs_104419)
        
        # Assigning a type to the variable 'A' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 12), 'A', randn_call_result_104420)
        
        # Assigning a Call to a Name (line 784):
        
        # Assigning a Call to a Name (line 784):
        
        # Call to norm(...): (line 784)
        # Processing the call arguments (line 784)
        # Getting the type of 'A' (line 784)
        A_104424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 39), 'A', False)
        # Processing the call keyword arguments (line 784)
        kwargs_104425 = {}
        # Getting the type of 'scipy' (line 784)
        scipy_104421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 21), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 784)
        linalg_104422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 21), scipy_104421, 'linalg')
        # Obtaining the member 'norm' of a type (line 784)
        norm_104423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 21), linalg_104422, 'norm')
        # Calling norm(args, kwargs) (line 784)
        norm_call_result_104426 = invoke(stypy.reporting.localization.Localization(__file__, 784, 21), norm_104423, *[A_104424], **kwargs_104425)
        
        # Assigning a type to the variable 'A_norm' (line 784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 12), 'A_norm', norm_call_result_104426)
        
        # Assigning a Call to a Name (line 785):
        
        # Assigning a Call to a Name (line 785):
        
        # Call to expm(...): (line 785)
        # Processing the call arguments (line 785)
        # Getting the type of 'A' (line 785)
        A_104428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 21), 'A', False)
        # Processing the call keyword arguments (line 785)
        kwargs_104429 = {}
        # Getting the type of 'expm' (line 785)
        expm_104427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 16), 'expm', False)
        # Calling expm(args, kwargs) (line 785)
        expm_call_result_104430 = invoke(stypy.reporting.localization.Localization(__file__, 785, 16), expm_104427, *[A_104428], **kwargs_104429)
        
        # Assigning a type to the variable 'X' (line 785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 12), 'X', expm_call_result_104430)
        
        # Assigning a Call to a Name (line 786):
        
        # Assigning a Call to a Name (line 786):
        
        # Call to norm(...): (line 786)
        # Processing the call arguments (line 786)
        # Getting the type of 'X' (line 786)
        X_104434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 39), 'X', False)
        # Processing the call keyword arguments (line 786)
        kwargs_104435 = {}
        # Getting the type of 'scipy' (line 786)
        scipy_104431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 21), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 786)
        linalg_104432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 21), scipy_104431, 'linalg')
        # Obtaining the member 'norm' of a type (line 786)
        norm_104433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 21), linalg_104432, 'norm')
        # Calling norm(args, kwargs) (line 786)
        norm_call_result_104436 = invoke(stypy.reporting.localization.Localization(__file__, 786, 21), norm_104433, *[X_104434], **kwargs_104435)
        
        # Assigning a type to the variable 'X_norm' (line 786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 12), 'X_norm', norm_call_result_104436)
        
        # Assigning a Call to a Name (line 787):
        
        # Assigning a Call to a Name (line 787):
        
        # Call to expm_cond(...): (line 787)
        # Processing the call arguments (line 787)
        # Getting the type of 'A' (line 787)
        A_104438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 30), 'A', False)
        # Processing the call keyword arguments (line 787)
        kwargs_104439 = {}
        # Getting the type of 'expm_cond' (line 787)
        expm_cond_104437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 20), 'expm_cond', False)
        # Calling expm_cond(args, kwargs) (line 787)
        expm_cond_call_result_104440 = invoke(stypy.reporting.localization.Localization(__file__, 787, 20), expm_cond_104437, *[A_104438], **kwargs_104439)
        
        # Assigning a type to the variable 'kappa' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 12), 'kappa', expm_cond_call_result_104440)
        
        # Assigning a Call to a Name (line 791):
        
        # Assigning a Call to a Name (line 791):
        
        # Call to partial(...): (line 791)
        # Processing the call arguments (line 791)
        # Getting the type of '_help_expm_cond_search' (line 791)
        _help_expm_cond_search_104443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 34), '_help_expm_cond_search', False)
        # Getting the type of 'A' (line 792)
        A_104444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 20), 'A', False)
        # Getting the type of 'A_norm' (line 792)
        A_norm_104445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 23), 'A_norm', False)
        # Getting the type of 'X' (line 792)
        X_104446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 31), 'X', False)
        # Getting the type of 'X_norm' (line 792)
        X_norm_104447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 34), 'X_norm', False)
        # Getting the type of 'eps' (line 792)
        eps_104448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 42), 'eps', False)
        # Processing the call keyword arguments (line 791)
        kwargs_104449 = {}
        # Getting the type of 'functools' (line 791)
        functools_104441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 16), 'functools', False)
        # Obtaining the member 'partial' of a type (line 791)
        partial_104442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 16), functools_104441, 'partial')
        # Calling partial(args, kwargs) (line 791)
        partial_call_result_104450 = invoke(stypy.reporting.localization.Localization(__file__, 791, 16), partial_104442, *[_help_expm_cond_search_104443, A_104444, A_norm_104445, X_104446, X_norm_104447, eps_104448], **kwargs_104449)
        
        # Assigning a type to the variable 'f' (line 791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 12), 'f', partial_call_result_104450)
        
        # Assigning a Call to a Name (line 793):
        
        # Assigning a Call to a Name (line 793):
        
        # Call to ones(...): (line 793)
        # Processing the call arguments (line 793)
        # Getting the type of 'n' (line 793)
        n_104453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 28), 'n', False)
        # Getting the type of 'n' (line 793)
        n_104454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 30), 'n', False)
        # Applying the binary operator '*' (line 793)
        result_mul_104455 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 28), '*', n_104453, n_104454)
        
        # Processing the call keyword arguments (line 793)
        kwargs_104456 = {}
        # Getting the type of 'np' (line 793)
        np_104451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 20), 'np', False)
        # Obtaining the member 'ones' of a type (line 793)
        ones_104452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 20), np_104451, 'ones')
        # Calling ones(args, kwargs) (line 793)
        ones_call_result_104457 = invoke(stypy.reporting.localization.Localization(__file__, 793, 20), ones_104452, *[result_mul_104455], **kwargs_104456)
        
        # Assigning a type to the variable 'guess' (line 793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 12), 'guess', ones_call_result_104457)
        
        # Assigning a Call to a Name (line 794):
        
        # Assigning a Call to a Name (line 794):
        
        # Call to minimize(...): (line 794)
        # Processing the call arguments (line 794)
        # Getting the type of 'f' (line 794)
        f_104459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 27), 'f', False)
        # Getting the type of 'guess' (line 794)
        guess_104460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 30), 'guess', False)
        # Processing the call keyword arguments (line 794)
        str_104461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 44), 'str', 'L-BFGS-B')
        keyword_104462 = str_104461
        kwargs_104463 = {'method': keyword_104462}
        # Getting the type of 'minimize' (line 794)
        minimize_104458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 18), 'minimize', False)
        # Calling minimize(args, kwargs) (line 794)
        minimize_call_result_104464 = invoke(stypy.reporting.localization.Localization(__file__, 794, 18), minimize_104458, *[f_104459, guess_104460], **kwargs_104463)
        
        # Assigning a type to the variable 'out' (line 794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 12), 'out', minimize_call_result_104464)
        
        # Assigning a Attribute to a Name (line 795):
        
        # Assigning a Attribute to a Name (line 795):
        # Getting the type of 'out' (line 795)
        out_104465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 19), 'out')
        # Obtaining the member 'x' of a type (line 795)
        x_104466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 19), out_104465, 'x')
        # Assigning a type to the variable 'xopt' (line 795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 12), 'xopt', x_104466)
        
        # Assigning a Call to a Name (line 796):
        
        # Assigning a Call to a Name (line 796):
        
        # Call to f(...): (line 796)
        # Processing the call arguments (line 796)
        # Getting the type of 'xopt' (line 796)
        xopt_104468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 21), 'xopt', False)
        # Processing the call keyword arguments (line 796)
        kwargs_104469 = {}
        # Getting the type of 'f' (line 796)
        f_104467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 19), 'f', False)
        # Calling f(args, kwargs) (line 796)
        f_call_result_104470 = invoke(stypy.reporting.localization.Localization(__file__, 796, 19), f_104467, *[xopt_104468], **kwargs_104469)
        
        # Assigning a type to the variable 'yopt' (line 796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 12), 'yopt', f_call_result_104470)
        
        # Assigning a BinOp to a Name (line 797):
        
        # Assigning a BinOp to a Name (line 797):
        # Getting the type of 'eps' (line 797)
        eps_104471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 21), 'eps')
        
        # Call to _normalized_like(...): (line 797)
        # Processing the call arguments (line 797)
        
        # Call to reshape(...): (line 797)
        # Processing the call arguments (line 797)
        # Getting the type of 'xopt' (line 797)
        xopt_104475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 55), 'xopt', False)
        # Getting the type of 'A' (line 797)
        A_104476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 61), 'A', False)
        # Obtaining the member 'shape' of a type (line 797)
        shape_104477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 61), A_104476, 'shape')
        # Processing the call keyword arguments (line 797)
        kwargs_104478 = {}
        # Getting the type of 'np' (line 797)
        np_104473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 44), 'np', False)
        # Obtaining the member 'reshape' of a type (line 797)
        reshape_104474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 44), np_104473, 'reshape')
        # Calling reshape(args, kwargs) (line 797)
        reshape_call_result_104479 = invoke(stypy.reporting.localization.Localization(__file__, 797, 44), reshape_104474, *[xopt_104475, shape_104477], **kwargs_104478)
        
        # Getting the type of 'A' (line 797)
        A_104480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 71), 'A', False)
        # Processing the call keyword arguments (line 797)
        kwargs_104481 = {}
        # Getting the type of '_normalized_like' (line 797)
        _normalized_like_104472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 27), '_normalized_like', False)
        # Calling _normalized_like(args, kwargs) (line 797)
        _normalized_like_call_result_104482 = invoke(stypy.reporting.localization.Localization(__file__, 797, 27), _normalized_like_104472, *[reshape_call_result_104479, A_104480], **kwargs_104481)
        
        # Applying the binary operator '*' (line 797)
        result_mul_104483 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 21), '*', eps_104471, _normalized_like_call_result_104482)
        
        # Assigning a type to the variable 'p_best' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'p_best', result_mul_104483)
        
        # Assigning a Call to a Name (line 798):
        
        # Assigning a Call to a Name (line 798):
        
        # Call to _relative_error(...): (line 798)
        # Processing the call arguments (line 798)
        # Getting the type of 'expm' (line 798)
        expm_104485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 44), 'expm', False)
        # Getting the type of 'A' (line 798)
        A_104486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 50), 'A', False)
        # Getting the type of 'p_best' (line 798)
        p_best_104487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 53), 'p_best', False)
        # Processing the call keyword arguments (line 798)
        kwargs_104488 = {}
        # Getting the type of '_relative_error' (line 798)
        _relative_error_104484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 28), '_relative_error', False)
        # Calling _relative_error(args, kwargs) (line 798)
        _relative_error_call_result_104489 = invoke(stypy.reporting.localization.Localization(__file__, 798, 28), _relative_error_104484, *[expm_104485, A_104486, p_best_104487], **kwargs_104488)
        
        # Assigning a type to the variable 'p_best_relerr' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 12), 'p_best_relerr', _relative_error_call_result_104489)
        
        # Call to assert_allclose(...): (line 799)
        # Processing the call arguments (line 799)
        # Getting the type of 'p_best_relerr' (line 799)
        p_best_relerr_104491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 28), 'p_best_relerr', False)
        
        # Getting the type of 'yopt' (line 799)
        yopt_104492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 44), 'yopt', False)
        # Applying the 'usub' unary operator (line 799)
        result___neg___104493 = python_operator(stypy.reporting.localization.Localization(__file__, 799, 43), 'usub', yopt_104492)
        
        # Getting the type of 'eps' (line 799)
        eps_104494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 51), 'eps', False)
        # Applying the binary operator '*' (line 799)
        result_mul_104495 = python_operator(stypy.reporting.localization.Localization(__file__, 799, 43), '*', result___neg___104493, eps_104494)
        
        # Processing the call keyword arguments (line 799)
        kwargs_104496 = {}
        # Getting the type of 'assert_allclose' (line 799)
        assert_allclose_104490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 799)
        assert_allclose_call_result_104497 = invoke(stypy.reporting.localization.Localization(__file__, 799, 12), assert_allclose_104490, *[p_best_relerr_104491, result_mul_104495], **kwargs_104496)
        
        
        
        # Call to range(...): (line 803)
        # Processing the call arguments (line 803)
        int_104499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 27), 'int')
        # Processing the call keyword arguments (line 803)
        kwargs_104500 = {}
        # Getting the type of 'range' (line 803)
        range_104498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 21), 'range', False)
        # Calling range(args, kwargs) (line 803)
        range_call_result_104501 = invoke(stypy.reporting.localization.Localization(__file__, 803, 21), range_104498, *[int_104499], **kwargs_104500)
        
        # Testing the type of a for loop iterable (line 803)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 803, 12), range_call_result_104501)
        # Getting the type of the for loop variable (line 803)
        for_loop_var_104502 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 803, 12), range_call_result_104501)
        # Assigning a type to the variable 'j' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 12), 'j', for_loop_var_104502)
        # SSA begins for a for statement (line 803)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 804):
        
        # Assigning a BinOp to a Name (line 804):
        # Getting the type of 'eps' (line 804)
        eps_104503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 25), 'eps')
        
        # Call to _normalized_like(...): (line 804)
        # Processing the call arguments (line 804)
        
        # Call to randn(...): (line 804)
        # Getting the type of 'A' (line 804)
        A_104508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 65), 'A', False)
        # Obtaining the member 'shape' of a type (line 804)
        shape_104509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 65), A_104508, 'shape')
        # Processing the call keyword arguments (line 804)
        kwargs_104510 = {}
        # Getting the type of 'np' (line 804)
        np_104505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 48), 'np', False)
        # Obtaining the member 'random' of a type (line 804)
        random_104506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 48), np_104505, 'random')
        # Obtaining the member 'randn' of a type (line 804)
        randn_104507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 48), random_104506, 'randn')
        # Calling randn(args, kwargs) (line 804)
        randn_call_result_104511 = invoke(stypy.reporting.localization.Localization(__file__, 804, 48), randn_104507, *[shape_104509], **kwargs_104510)
        
        # Getting the type of 'A' (line 804)
        A_104512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 75), 'A', False)
        # Processing the call keyword arguments (line 804)
        kwargs_104513 = {}
        # Getting the type of '_normalized_like' (line 804)
        _normalized_like_104504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 31), '_normalized_like', False)
        # Calling _normalized_like(args, kwargs) (line 804)
        _normalized_like_call_result_104514 = invoke(stypy.reporting.localization.Localization(__file__, 804, 31), _normalized_like_104504, *[randn_call_result_104511, A_104512], **kwargs_104513)
        
        # Applying the binary operator '*' (line 804)
        result_mul_104515 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 25), '*', eps_104503, _normalized_like_call_result_104514)
        
        # Assigning a type to the variable 'p_rand' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 16), 'p_rand', result_mul_104515)
        
        # Call to assert_allclose(...): (line 805)
        # Processing the call arguments (line 805)
        
        # Call to norm(...): (line 805)
        # Processing the call arguments (line 805)
        # Getting the type of 'p_best' (line 805)
        p_best_104518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 37), 'p_best', False)
        # Processing the call keyword arguments (line 805)
        kwargs_104519 = {}
        # Getting the type of 'norm' (line 805)
        norm_104517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 32), 'norm', False)
        # Calling norm(args, kwargs) (line 805)
        norm_call_result_104520 = invoke(stypy.reporting.localization.Localization(__file__, 805, 32), norm_104517, *[p_best_104518], **kwargs_104519)
        
        
        # Call to norm(...): (line 805)
        # Processing the call arguments (line 805)
        # Getting the type of 'p_rand' (line 805)
        p_rand_104522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 51), 'p_rand', False)
        # Processing the call keyword arguments (line 805)
        kwargs_104523 = {}
        # Getting the type of 'norm' (line 805)
        norm_104521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 46), 'norm', False)
        # Calling norm(args, kwargs) (line 805)
        norm_call_result_104524 = invoke(stypy.reporting.localization.Localization(__file__, 805, 46), norm_104521, *[p_rand_104522], **kwargs_104523)
        
        # Processing the call keyword arguments (line 805)
        kwargs_104525 = {}
        # Getting the type of 'assert_allclose' (line 805)
        assert_allclose_104516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 16), 'assert_allclose', False)
        # Calling assert_allclose(args, kwargs) (line 805)
        assert_allclose_call_result_104526 = invoke(stypy.reporting.localization.Localization(__file__, 805, 16), assert_allclose_104516, *[norm_call_result_104520, norm_call_result_104524], **kwargs_104525)
        
        
        # Assigning a Call to a Name (line 806):
        
        # Assigning a Call to a Name (line 806):
        
        # Call to _relative_error(...): (line 806)
        # Processing the call arguments (line 806)
        # Getting the type of 'expm' (line 806)
        expm_104528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 48), 'expm', False)
        # Getting the type of 'A' (line 806)
        A_104529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 54), 'A', False)
        # Getting the type of 'p_rand' (line 806)
        p_rand_104530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 57), 'p_rand', False)
        # Processing the call keyword arguments (line 806)
        kwargs_104531 = {}
        # Getting the type of '_relative_error' (line 806)
        _relative_error_104527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 32), '_relative_error', False)
        # Calling _relative_error(args, kwargs) (line 806)
        _relative_error_call_result_104532 = invoke(stypy.reporting.localization.Localization(__file__, 806, 32), _relative_error_104527, *[expm_104528, A_104529, p_rand_104530], **kwargs_104531)
        
        # Assigning a type to the variable 'p_rand_relerr' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 16), 'p_rand_relerr', _relative_error_call_result_104532)
        
        # Call to assert_array_less(...): (line 807)
        # Processing the call arguments (line 807)
        # Getting the type of 'p_rand_relerr' (line 807)
        p_rand_relerr_104534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 34), 'p_rand_relerr', False)
        # Getting the type of 'p_best_relerr' (line 807)
        p_best_relerr_104535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 49), 'p_best_relerr', False)
        # Processing the call keyword arguments (line 807)
        kwargs_104536 = {}
        # Getting the type of 'assert_array_less' (line 807)
        assert_array_less_104533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 16), 'assert_array_less', False)
        # Calling assert_array_less(args, kwargs) (line 807)
        assert_array_less_call_result_104537 = invoke(stypy.reporting.localization.Localization(__file__, 807, 16), assert_array_less_104533, *[p_rand_relerr_104534, p_best_relerr_104535], **kwargs_104536)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to assert_array_less(...): (line 812)
        # Processing the call arguments (line 812)
        # Getting the type of 'p_best_relerr' (line 812)
        p_best_relerr_104539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 30), 'p_best_relerr', False)
        int_104540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 46), 'int')
        int_104541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 50), 'int')
        # Getting the type of 'eps' (line 812)
        eps_104542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 52), 'eps', False)
        # Applying the binary operator '*' (line 812)
        result_mul_104543 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 50), '*', int_104541, eps_104542)
        
        # Applying the binary operator '+' (line 812)
        result_add_104544 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 46), '+', int_104540, result_mul_104543)
        
        # Getting the type of 'eps' (line 812)
        eps_104545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 59), 'eps', False)
        # Applying the binary operator '*' (line 812)
        result_mul_104546 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 45), '*', result_add_104544, eps_104545)
        
        # Getting the type of 'kappa' (line 812)
        kappa_104547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 65), 'kappa', False)
        # Applying the binary operator '*' (line 812)
        result_mul_104548 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 63), '*', result_mul_104546, kappa_104547)
        
        # Processing the call keyword arguments (line 812)
        kwargs_104549 = {}
        # Getting the type of 'assert_array_less' (line 812)
        assert_array_less_104538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 12), 'assert_array_less', False)
        # Calling assert_array_less(args, kwargs) (line 812)
        assert_array_less_call_result_104550 = invoke(stypy.reporting.localization.Localization(__file__, 812, 12), assert_array_less_104538, *[p_best_relerr_104539, result_mul_104548], **kwargs_104549)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_expm_cond_fuzz(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_expm_cond_fuzz' in the type store
        # Getting the type of 'stypy_return_type' (line 776)
        stypy_return_type_104551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_104551)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_expm_cond_fuzz'
        return stypy_return_type_104551


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 746, 0, False)
        # Assigning a type to the variable 'self' (line 747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestExpmConditionNumber.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'TestExpmConditionNumber' (line 746)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 0), 'TestExpmConditionNumber', TestExpmConditionNumber)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
