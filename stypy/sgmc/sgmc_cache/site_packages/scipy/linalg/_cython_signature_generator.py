
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: A script that uses f2py to generate the signature files used to make
3: the Cython BLAS and LAPACK wrappers from the fortran source code for
4: LAPACK and the reference BLAS.
5: 
6: To generate the BLAS wrapper signatures call:
7: python _cython_signature_generator.py blas <blas_directory> <out_file>
8: 
9: To generate the LAPACK wrapper signatures call:
10: python _cython_signature_generator.py lapack <lapack_src_directory> <out_file>
11: '''
12: 
13: import glob
14: from numpy.f2py import crackfortran
15: 
16: sig_types = {'integer': 'int',
17:              'complex': 'c',
18:              'double precision': 'd',
19:              'real': 's',
20:              'complex*16': 'z',
21:              'double complex': 'z',
22:              'character': 'char',
23:              'logical': 'bint'}
24: 
25: 
26: def get_type(info, arg):
27:     argtype = sig_types[info['vars'][arg]['typespec']]
28:     if argtype == 'c' and info['vars'][arg].get('kindselector') is not None:
29:         argtype = 'z'
30:     return argtype
31: 
32: 
33: def make_signature(filename):
34:     info = crackfortran.crackfortran(filename)[0]
35:     name = info['name']
36:     if info['block'] == 'subroutine':
37:         return_type = 'void'
38:     else:
39:         return_type = get_type(info, name)
40:     arglist = [' *'.join([get_type(info, arg), arg]) for arg in info['args']]
41:     args = ', '.join(arglist)
42:     # Eliminate strange variable naming that replaces rank with rank_bn.
43:     args = args.replace('rank_bn', 'rank')
44:     return '{0} {1}({2})\n'.format(return_type, name, args)
45: 
46: 
47: def get_sig_name(line):
48:     return line.split('(')[0].split(' ')[-1]
49: 
50: 
51: def sigs_from_dir(directory, outfile, manual_wrappers=None, exclusions=None):
52:     if directory[-1] in ['/', '\\']:
53:         directory = directory[:-1]
54:     files = glob.glob(directory + '/*.f*')
55:     if exclusions is None:
56:         exclusions = []
57:     if manual_wrappers is not None:
58:         exclusions += [get_sig_name(l) for l in manual_wrappers.split('\n')]
59:     signatures = []
60:     for filename in files:
61:         name = filename.split('\\')[-1][:-2]
62:         if name in exclusions:
63:             continue
64:         signatures.append(make_signature(filename))
65:     if manual_wrappers is not None:
66:         signatures += [l + '\n' for l in manual_wrappers.split('\n')]
67:     signatures.sort(key=get_sig_name)
68:     comment = ["# This file was generated by _cython_signature_generator.py.\n",
69:                "# Do not edit this file directly.\n\n"]
70:     with open(outfile, 'w') as f:
71:         f.writelines(comment)
72:         f.writelines(signatures)
73: 
74: # The signature that is used for zcgesv in lapack 3.1.0 and 3.1.1 changed
75: # in version 3.2.0. The version included in the clapack on OSX has the
76: # more recent signature though.
77: # slamch and dlamch are not in the lapack src directory, but,since they
78: # already have Python wrappers, we'll wrap them as well.
79: # The other manual signatures are used because the signature generating
80: # functions don't work when function pointer arguments are used.
81: 
82: lapack_manual_wrappers = '''void cgees(char *jobvs, char *sort, cselect1 *select, int *n, c *a, int *lda, int *sdim, c *w, c *vs, int *ldvs, c *work, int *lwork, s *rwork, bint *bwork, int *info)
83: void cgeesx(char *jobvs, char *sort, cselect1 *select, char *sense, int *n, c *a, int *lda, int *sdim, c *w, c *vs, int *ldvs, s *rconde, s *rcondv, c *work, int *lwork, s *rwork, bint *bwork, int *info)
84: void cgges(char *jobvsl, char *jobvsr, char *sort, cselect2 *selctg, int *n, c *a, int *lda, c *b, int *ldb, int *sdim, c *alpha, c *beta, c *vsl, int *ldvsl, c *vsr, int *ldvsr, c *work, int *lwork, s *rwork, bint *bwork, int *info)
85: void cggesx(char *jobvsl, char *jobvsr, char *sort, cselect2 *selctg, char *sense, int *n, c *a, int *lda, c *b, int *ldb, int *sdim, c *alpha, c *beta, c *vsl, int *ldvsl, c *vsr, int *ldvsr, s *rconde, s *rcondv, c *work, int *lwork, s *rwork, int *iwork, int *liwork, bint *bwork, int *info)
86: void dgees(char *jobvs, char *sort, dselect2 *select, int *n, d *a, int *lda, int *sdim, d *wr, d *wi, d *vs, int *ldvs, d *work, int *lwork, bint *bwork, int *info)
87: void dgeesx(char *jobvs, char *sort, dselect2 *select, char *sense, int *n, d *a, int *lda, int *sdim, d *wr, d *wi, d *vs, int *ldvs, d *rconde, d *rcondv, d *work, int *lwork, int *iwork, int *liwork, bint *bwork, int *info)
88: void dgges(char *jobvsl, char *jobvsr, char *sort, dselect3 *selctg, int *n, d *a, int *lda, d *b, int *ldb, int *sdim, d *alphar, d *alphai, d *beta, d *vsl, int *ldvsl, d *vsr, int *ldvsr, d *work, int *lwork, bint *bwork, int *info)
89: void dggesx(char *jobvsl, char *jobvsr, char *sort, dselect3 *selctg, char *sense, int *n, d *a, int *lda, d *b, int *ldb, int *sdim, d *alphar, d *alphai, d *beta, d *vsl, int *ldvsl, d *vsr, int *ldvsr, d *rconde, d *rcondv, d *work, int *lwork, int *iwork, int *liwork, bint *bwork, int *info)
90: d dlamch(char *cmach)
91: void ilaver(int *vers_major, int *vers_minor, int *vers_patch)
92: void sgees(char *jobvs, char *sort, sselect2 *select, int *n, s *a, int *lda, int *sdim, s *wr, s *wi, s *vs, int *ldvs, s *work, int *lwork, bint *bwork, int *info)
93: void sgeesx(char *jobvs, char *sort, sselect2 *select, char *sense, int *n, s *a, int *lda, int *sdim, s *wr, s *wi, s *vs, int *ldvs, s *rconde, s *rcondv, s *work, int *lwork, int *iwork, int *liwork, bint *bwork, int *info)
94: void sgges(char *jobvsl, char *jobvsr, char *sort, sselect3 *selctg, int *n, s *a, int *lda, s *b, int *ldb, int *sdim, s *alphar, s *alphai, s *beta, s *vsl, int *ldvsl, s *vsr, int *ldvsr, s *work, int *lwork, bint *bwork, int *info)
95: void sggesx(char *jobvsl, char *jobvsr, char *sort, sselect3 *selctg, char *sense, int *n, s *a, int *lda, s *b, int *ldb, int *sdim, s *alphar, s *alphai, s *beta, s *vsl, int *ldvsl, s *vsr, int *ldvsr, s *rconde, s *rcondv, s *work, int *lwork, int *iwork, int *liwork, bint *bwork, int *info)
96: s slamch(char *cmach)
97: void zgees(char *jobvs, char *sort, zselect1 *select, int *n, z *a, int *lda, int *sdim, z *w, z *vs, int *ldvs, z *work, int *lwork, d *rwork, bint *bwork, int *info)
98: void zgeesx(char *jobvs, char *sort, zselect1 *select, char *sense, int *n, z *a, int *lda, int *sdim, z *w, z *vs, int *ldvs, d *rconde, d *rcondv, z *work, int *lwork, d *rwork, bint *bwork, int *info)
99: void zgges(char *jobvsl, char *jobvsr, char *sort, zselect2 *selctg, int *n, z *a, int *lda, z *b, int *ldb, int *sdim, z *alpha, z *beta, z *vsl, int *ldvsl, z *vsr, int *ldvsr, z *work, int *lwork, d *rwork, bint *bwork, int *info)
100: void zggesx(char *jobvsl, char *jobvsr, char *sort, zselect2 *selctg, char *sense, int *n, z *a, int *lda, z *b, int *ldb, int *sdim, z *alpha, z *beta, z *vsl, int *ldvsl, z *vsr, int *ldvsr, d *rconde, d *rcondv, z *work, int *lwork, d *rwork, int *iwork, int *liwork, bint *bwork, int *info)'''
101: 
102: if __name__ == '__main__':
103:     from sys import argv
104:     libname, src_dir, outfile = argv[1:]
105:     # Exclude scabs and sisnan since they aren't currently included
106:     # in the scipy-specific ABI wrappers.
107:     if libname.lower() == 'blas':
108:         sigs_from_dir(src_dir, outfile, exclusions=['scabs1', 'xerbla'])
109:     elif libname.lower() == 'lapack':
110:         # Exclude all routines that do not have consistent interfaces from
111:         # LAPACK 3.1.0 through 3.6.0.
112:         # Also exclude routines with string arguments to avoid
113:         # compatibility woes with different standards for string arguments.
114:         # Exclude sisnan and slaneg since they aren't currently included in
115:         # The ABI compatibility wrappers.
116:         exclusions = ['sisnan', 'csrot', 'zdrot', 'ilaenv', 'iparmq', 'lsamen',
117:                       'xerbla', 'zcgesv', 'dlaisnan', 'slaisnan', 'dlazq3',
118:                       'dlazq4', 'slazq3', 'slazq4', 'dlasq3', 'dlasq4',
119:                       'slasq3', 'slasq4', 'dlasq5', 'slasq5', 'slaneg',
120:                       # Routines deprecated in LAPACK 3.6.0
121:                       'cgegs', 'cgegv', 'cgelsx', 'cgeqpf', 'cggsvd', 'cggsvp',
122:                       'clahrd', 'clatzm', 'ctzrqf', 'dgegs', 'dgegv', 'dgelsx',
123:                       'dgeqpf', 'dggsvd', 'dggsvp', 'dlahrd', 'dlatzm', 'dtzrqf',
124:                       'sgegs', 'sgegv', 'sgelsx', 'sgeqpf', 'sggsvd', 'sggsvp',
125:                       'slahrd', 'slatzm', 'stzrqf', 'zgegs', 'zgegv', 'zgelsx',
126:                       'zgeqpf', 'zggsvd', 'zggsvp', 'zlahrd', 'zlatzm', 'ztzrqf']
127:         sigs_from_dir(src_dir, outfile, manual_wrappers=lapack_manual_wrappers,
128:                       exclusions=exclusions)
129: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_25343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 11, (-1)), 'str', '\nA script that uses f2py to generate the signature files used to make\nthe Cython BLAS and LAPACK wrappers from the fortran source code for\nLAPACK and the reference BLAS.\n\nTo generate the BLAS wrapper signatures call:\npython _cython_signature_generator.py blas <blas_directory> <out_file>\n\nTo generate the LAPACK wrapper signatures call:\npython _cython_signature_generator.py lapack <lapack_src_directory> <out_file>\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'import glob' statement (line 13)
import glob

import_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'glob', glob, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from numpy.f2py import crackfortran' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/linalg/')
import_25344 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.f2py')

if (type(import_25344) is not StypyTypeError):

    if (import_25344 != 'pyd_module'):
        __import__(import_25344)
        sys_modules_25345 = sys.modules[import_25344]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.f2py', sys_modules_25345.module_type_store, module_type_store, ['crackfortran'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_25345, sys_modules_25345.module_type_store, module_type_store)
    else:
        from numpy.f2py import crackfortran

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.f2py', None, module_type_store, ['crackfortran'], [crackfortran])

else:
    # Assigning a type to the variable 'numpy.f2py' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.f2py', import_25344)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/linalg/')


# Assigning a Dict to a Name (line 16):

# Assigning a Dict to a Name (line 16):

# Obtaining an instance of the builtin type 'dict' (line 16)
dict_25346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 12), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 16)
# Adding element type (key, value) (line 16)
str_25347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 13), 'str', 'integer')
str_25348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 24), 'str', 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 16, 12), dict_25346, (str_25347, str_25348))
# Adding element type (key, value) (line 16)
str_25349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 13), 'str', 'complex')
str_25350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 24), 'str', 'c')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 16, 12), dict_25346, (str_25349, str_25350))
# Adding element type (key, value) (line 16)
str_25351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 18, 13), 'str', 'double precision')
str_25352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 18, 33), 'str', 'd')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 16, 12), dict_25346, (str_25351, str_25352))
# Adding element type (key, value) (line 16)
str_25353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 13), 'str', 'real')
str_25354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 21), 'str', 's')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 16, 12), dict_25346, (str_25353, str_25354))
# Adding element type (key, value) (line 16)
str_25355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 20, 13), 'str', 'complex*16')
str_25356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 20, 27), 'str', 'z')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 16, 12), dict_25346, (str_25355, str_25356))
# Adding element type (key, value) (line 16)
str_25357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 13), 'str', 'double complex')
str_25358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 31), 'str', 'z')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 16, 12), dict_25346, (str_25357, str_25358))
# Adding element type (key, value) (line 16)
str_25359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 13), 'str', 'character')
str_25360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 26), 'str', 'char')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 16, 12), dict_25346, (str_25359, str_25360))
# Adding element type (key, value) (line 16)
str_25361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 13), 'str', 'logical')
str_25362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 24), 'str', 'bint')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 16, 12), dict_25346, (str_25361, str_25362))

# Assigning a type to the variable 'sig_types' (line 16)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'sig_types', dict_25346)

@norecursion
def get_type(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_type'
    module_type_store = module_type_store.open_function_context('get_type', 26, 0, False)
    
    # Passed parameters checking function
    get_type.stypy_localization = localization
    get_type.stypy_type_of_self = None
    get_type.stypy_type_store = module_type_store
    get_type.stypy_function_name = 'get_type'
    get_type.stypy_param_names_list = ['info', 'arg']
    get_type.stypy_varargs_param_name = None
    get_type.stypy_kwargs_param_name = None
    get_type.stypy_call_defaults = defaults
    get_type.stypy_call_varargs = varargs
    get_type.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_type', ['info', 'arg'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_type', localization, ['info', 'arg'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_type(...)' code ##################

    
    # Assigning a Subscript to a Name (line 27):
    
    # Assigning a Subscript to a Name (line 27):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    str_25363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 42), 'str', 'typespec')
    
    # Obtaining the type of the subscript
    # Getting the type of 'arg' (line 27)
    arg_25364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 27, 37), 'arg')
    
    # Obtaining the type of the subscript
    str_25365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 29), 'str', 'vars')
    # Getting the type of 'info' (line 27)
    info_25366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 27, 24), 'info')
    # Obtaining the member '__getitem__' of a type (line 27)
    getitem___25367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 27, 24), info_25366, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 27)
    subscript_call_result_25368 = invoke(stypy.reporting.localization.Localization(__file__, 27, 24), getitem___25367, str_25365)
    
    # Obtaining the member '__getitem__' of a type (line 27)
    getitem___25369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 27, 24), subscript_call_result_25368, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 27)
    subscript_call_result_25370 = invoke(stypy.reporting.localization.Localization(__file__, 27, 24), getitem___25369, arg_25364)
    
    # Obtaining the member '__getitem__' of a type (line 27)
    getitem___25371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 27, 24), subscript_call_result_25370, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 27)
    subscript_call_result_25372 = invoke(stypy.reporting.localization.Localization(__file__, 27, 24), getitem___25371, str_25363)
    
    # Getting the type of 'sig_types' (line 27)
    sig_types_25373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 27, 14), 'sig_types')
    # Obtaining the member '__getitem__' of a type (line 27)
    getitem___25374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 27, 14), sig_types_25373, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 27)
    subscript_call_result_25375 = invoke(stypy.reporting.localization.Localization(__file__, 27, 14), getitem___25374, subscript_call_result_25372)
    
    # Assigning a type to the variable 'argtype' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 4), 'argtype', subscript_call_result_25375)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'argtype' (line 28)
    argtype_25376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 7), 'argtype')
    str_25377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 18), 'str', 'c')
    # Applying the binary operator '==' (line 28)
    result_eq_25378 = python_operator(stypy.reporting.localization.Localization(__file__, 28, 7), '==', argtype_25376, str_25377)
    
    
    
    # Call to get(...): (line 28)
    # Processing the call arguments (line 28)
    str_25387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 48), 'str', 'kindselector')
    # Processing the call keyword arguments (line 28)
    kwargs_25388 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'arg' (line 28)
    arg_25379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 39), 'arg', False)
    
    # Obtaining the type of the subscript
    str_25380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 31), 'str', 'vars')
    # Getting the type of 'info' (line 28)
    info_25381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 26), 'info', False)
    # Obtaining the member '__getitem__' of a type (line 28)
    getitem___25382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 26), info_25381, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 28)
    subscript_call_result_25383 = invoke(stypy.reporting.localization.Localization(__file__, 28, 26), getitem___25382, str_25380)
    
    # Obtaining the member '__getitem__' of a type (line 28)
    getitem___25384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 26), subscript_call_result_25383, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 28)
    subscript_call_result_25385 = invoke(stypy.reporting.localization.Localization(__file__, 28, 26), getitem___25384, arg_25379)
    
    # Obtaining the member 'get' of a type (line 28)
    get_25386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 26), subscript_call_result_25385, 'get')
    # Calling get(args, kwargs) (line 28)
    get_call_result_25389 = invoke(stypy.reporting.localization.Localization(__file__, 28, 26), get_25386, *[str_25387], **kwargs_25388)
    
    # Getting the type of 'None' (line 28)
    None_25390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 71), 'None')
    # Applying the binary operator 'isnot' (line 28)
    result_is_not_25391 = python_operator(stypy.reporting.localization.Localization(__file__, 28, 26), 'isnot', get_call_result_25389, None_25390)
    
    # Applying the binary operator 'and' (line 28)
    result_and_keyword_25392 = python_operator(stypy.reporting.localization.Localization(__file__, 28, 7), 'and', result_eq_25378, result_is_not_25391)
    
    # Testing the type of an if condition (line 28)
    if_condition_25393 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 28, 4), result_and_keyword_25392)
    # Assigning a type to the variable 'if_condition_25393' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 4), 'if_condition_25393', if_condition_25393)
    # SSA begins for if statement (line 28)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 29):
    
    # Assigning a Str to a Name (line 29):
    str_25394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 18), 'str', 'z')
    # Assigning a type to the variable 'argtype' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 8), 'argtype', str_25394)
    # SSA join for if statement (line 28)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'argtype' (line 30)
    argtype_25395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 30, 11), 'argtype')
    # Assigning a type to the variable 'stypy_return_type' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 4), 'stypy_return_type', argtype_25395)
    
    # ################# End of 'get_type(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_type' in the type store
    # Getting the type of 'stypy_return_type' (line 26)
    stypy_return_type_25396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_25396)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_type'
    return stypy_return_type_25396

# Assigning a type to the variable 'get_type' (line 26)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'get_type', get_type)

@norecursion
def make_signature(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'make_signature'
    module_type_store = module_type_store.open_function_context('make_signature', 33, 0, False)
    
    # Passed parameters checking function
    make_signature.stypy_localization = localization
    make_signature.stypy_type_of_self = None
    make_signature.stypy_type_store = module_type_store
    make_signature.stypy_function_name = 'make_signature'
    make_signature.stypy_param_names_list = ['filename']
    make_signature.stypy_varargs_param_name = None
    make_signature.stypy_kwargs_param_name = None
    make_signature.stypy_call_defaults = defaults
    make_signature.stypy_call_varargs = varargs
    make_signature.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'make_signature', ['filename'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'make_signature', localization, ['filename'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'make_signature(...)' code ##################

    
    # Assigning a Subscript to a Name (line 34):
    
    # Assigning a Subscript to a Name (line 34):
    
    # Obtaining the type of the subscript
    int_25397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 47), 'int')
    
    # Call to crackfortran(...): (line 34)
    # Processing the call arguments (line 34)
    # Getting the type of 'filename' (line 34)
    filename_25400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 37), 'filename', False)
    # Processing the call keyword arguments (line 34)
    kwargs_25401 = {}
    # Getting the type of 'crackfortran' (line 34)
    crackfortran_25398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 11), 'crackfortran', False)
    # Obtaining the member 'crackfortran' of a type (line 34)
    crackfortran_25399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 34, 11), crackfortran_25398, 'crackfortran')
    # Calling crackfortran(args, kwargs) (line 34)
    crackfortran_call_result_25402 = invoke(stypy.reporting.localization.Localization(__file__, 34, 11), crackfortran_25399, *[filename_25400], **kwargs_25401)
    
    # Obtaining the member '__getitem__' of a type (line 34)
    getitem___25403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 34, 11), crackfortran_call_result_25402, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 34)
    subscript_call_result_25404 = invoke(stypy.reporting.localization.Localization(__file__, 34, 11), getitem___25403, int_25397)
    
    # Assigning a type to the variable 'info' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 4), 'info', subscript_call_result_25404)
    
    # Assigning a Subscript to a Name (line 35):
    
    # Assigning a Subscript to a Name (line 35):
    
    # Obtaining the type of the subscript
    str_25405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 16), 'str', 'name')
    # Getting the type of 'info' (line 35)
    info_25406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 35, 11), 'info')
    # Obtaining the member '__getitem__' of a type (line 35)
    getitem___25407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 35, 11), info_25406, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 35)
    subscript_call_result_25408 = invoke(stypy.reporting.localization.Localization(__file__, 35, 11), getitem___25407, str_25405)
    
    # Assigning a type to the variable 'name' (line 35)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 4), 'name', subscript_call_result_25408)
    
    
    
    # Obtaining the type of the subscript
    str_25409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 12), 'str', 'block')
    # Getting the type of 'info' (line 36)
    info_25410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 7), 'info')
    # Obtaining the member '__getitem__' of a type (line 36)
    getitem___25411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 36, 7), info_25410, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 36)
    subscript_call_result_25412 = invoke(stypy.reporting.localization.Localization(__file__, 36, 7), getitem___25411, str_25409)
    
    str_25413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 24), 'str', 'subroutine')
    # Applying the binary operator '==' (line 36)
    result_eq_25414 = python_operator(stypy.reporting.localization.Localization(__file__, 36, 7), '==', subscript_call_result_25412, str_25413)
    
    # Testing the type of an if condition (line 36)
    if_condition_25415 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 36, 4), result_eq_25414)
    # Assigning a type to the variable 'if_condition_25415' (line 36)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 4), 'if_condition_25415', if_condition_25415)
    # SSA begins for if statement (line 36)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 37):
    
    # Assigning a Str to a Name (line 37):
    str_25416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 22), 'str', 'void')
    # Assigning a type to the variable 'return_type' (line 37)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 8), 'return_type', str_25416)
    # SSA branch for the else part of an if statement (line 36)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 39):
    
    # Assigning a Call to a Name (line 39):
    
    # Call to get_type(...): (line 39)
    # Processing the call arguments (line 39)
    # Getting the type of 'info' (line 39)
    info_25418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 31), 'info', False)
    # Getting the type of 'name' (line 39)
    name_25419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 37), 'name', False)
    # Processing the call keyword arguments (line 39)
    kwargs_25420 = {}
    # Getting the type of 'get_type' (line 39)
    get_type_25417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 22), 'get_type', False)
    # Calling get_type(args, kwargs) (line 39)
    get_type_call_result_25421 = invoke(stypy.reporting.localization.Localization(__file__, 39, 22), get_type_25417, *[info_25418, name_25419], **kwargs_25420)
    
    # Assigning a type to the variable 'return_type' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 8), 'return_type', get_type_call_result_25421)
    # SSA join for if statement (line 36)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 40):
    
    # Assigning a ListComp to a Name (line 40):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Obtaining the type of the subscript
    str_25433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 69), 'str', 'args')
    # Getting the type of 'info' (line 40)
    info_25434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 64), 'info')
    # Obtaining the member '__getitem__' of a type (line 40)
    getitem___25435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 40, 64), info_25434, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 40)
    subscript_call_result_25436 = invoke(stypy.reporting.localization.Localization(__file__, 40, 64), getitem___25435, str_25433)
    
    comprehension_25437 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 40, 15), subscript_call_result_25436)
    # Assigning a type to the variable 'arg' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 15), 'arg', comprehension_25437)
    
    # Call to join(...): (line 40)
    # Processing the call arguments (line 40)
    
    # Obtaining an instance of the builtin type 'list' (line 40)
    list_25424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 25), 'list')
    # Adding type elements to the builtin type 'list' instance (line 40)
    # Adding element type (line 40)
    
    # Call to get_type(...): (line 40)
    # Processing the call arguments (line 40)
    # Getting the type of 'info' (line 40)
    info_25426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 35), 'info', False)
    # Getting the type of 'arg' (line 40)
    arg_25427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 41), 'arg', False)
    # Processing the call keyword arguments (line 40)
    kwargs_25428 = {}
    # Getting the type of 'get_type' (line 40)
    get_type_25425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 26), 'get_type', False)
    # Calling get_type(args, kwargs) (line 40)
    get_type_call_result_25429 = invoke(stypy.reporting.localization.Localization(__file__, 40, 26), get_type_25425, *[info_25426, arg_25427], **kwargs_25428)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 40, 25), list_25424, get_type_call_result_25429)
    # Adding element type (line 40)
    # Getting the type of 'arg' (line 40)
    arg_25430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 47), 'arg', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 40, 25), list_25424, arg_25430)
    
    # Processing the call keyword arguments (line 40)
    kwargs_25431 = {}
    str_25422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 15), 'str', ' *')
    # Obtaining the member 'join' of a type (line 40)
    join_25423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 40, 15), str_25422, 'join')
    # Calling join(args, kwargs) (line 40)
    join_call_result_25432 = invoke(stypy.reporting.localization.Localization(__file__, 40, 15), join_25423, *[list_25424], **kwargs_25431)
    
    list_25438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 15), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 40, 15), list_25438, join_call_result_25432)
    # Assigning a type to the variable 'arglist' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 4), 'arglist', list_25438)
    
    # Assigning a Call to a Name (line 41):
    
    # Assigning a Call to a Name (line 41):
    
    # Call to join(...): (line 41)
    # Processing the call arguments (line 41)
    # Getting the type of 'arglist' (line 41)
    arglist_25441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 21), 'arglist', False)
    # Processing the call keyword arguments (line 41)
    kwargs_25442 = {}
    str_25439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 11), 'str', ', ')
    # Obtaining the member 'join' of a type (line 41)
    join_25440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 41, 11), str_25439, 'join')
    # Calling join(args, kwargs) (line 41)
    join_call_result_25443 = invoke(stypy.reporting.localization.Localization(__file__, 41, 11), join_25440, *[arglist_25441], **kwargs_25442)
    
    # Assigning a type to the variable 'args' (line 41)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 4), 'args', join_call_result_25443)
    
    # Assigning a Call to a Name (line 43):
    
    # Assigning a Call to a Name (line 43):
    
    # Call to replace(...): (line 43)
    # Processing the call arguments (line 43)
    str_25446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 24), 'str', 'rank_bn')
    str_25447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 35), 'str', 'rank')
    # Processing the call keyword arguments (line 43)
    kwargs_25448 = {}
    # Getting the type of 'args' (line 43)
    args_25444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 11), 'args', False)
    # Obtaining the member 'replace' of a type (line 43)
    replace_25445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 43, 11), args_25444, 'replace')
    # Calling replace(args, kwargs) (line 43)
    replace_call_result_25449 = invoke(stypy.reporting.localization.Localization(__file__, 43, 11), replace_25445, *[str_25446, str_25447], **kwargs_25448)
    
    # Assigning a type to the variable 'args' (line 43)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 4), 'args', replace_call_result_25449)
    
    # Call to format(...): (line 44)
    # Processing the call arguments (line 44)
    # Getting the type of 'return_type' (line 44)
    return_type_25452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 44, 35), 'return_type', False)
    # Getting the type of 'name' (line 44)
    name_25453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 44, 48), 'name', False)
    # Getting the type of 'args' (line 44)
    args_25454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 44, 54), 'args', False)
    # Processing the call keyword arguments (line 44)
    kwargs_25455 = {}
    str_25450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 11), 'str', '{0} {1}({2})\n')
    # Obtaining the member 'format' of a type (line 44)
    format_25451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 44, 11), str_25450, 'format')
    # Calling format(args, kwargs) (line 44)
    format_call_result_25456 = invoke(stypy.reporting.localization.Localization(__file__, 44, 11), format_25451, *[return_type_25452, name_25453, args_25454], **kwargs_25455)
    
    # Assigning a type to the variable 'stypy_return_type' (line 44)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 4), 'stypy_return_type', format_call_result_25456)
    
    # ################# End of 'make_signature(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'make_signature' in the type store
    # Getting the type of 'stypy_return_type' (line 33)
    stypy_return_type_25457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_25457)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'make_signature'
    return stypy_return_type_25457

# Assigning a type to the variable 'make_signature' (line 33)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'make_signature', make_signature)

@norecursion
def get_sig_name(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_sig_name'
    module_type_store = module_type_store.open_function_context('get_sig_name', 47, 0, False)
    
    # Passed parameters checking function
    get_sig_name.stypy_localization = localization
    get_sig_name.stypy_type_of_self = None
    get_sig_name.stypy_type_store = module_type_store
    get_sig_name.stypy_function_name = 'get_sig_name'
    get_sig_name.stypy_param_names_list = ['line']
    get_sig_name.stypy_varargs_param_name = None
    get_sig_name.stypy_kwargs_param_name = None
    get_sig_name.stypy_call_defaults = defaults
    get_sig_name.stypy_call_varargs = varargs
    get_sig_name.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_sig_name', ['line'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_sig_name', localization, ['line'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_sig_name(...)' code ##################

    
    # Obtaining the type of the subscript
    int_25458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 41), 'int')
    
    # Call to split(...): (line 48)
    # Processing the call arguments (line 48)
    str_25468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 36), 'str', ' ')
    # Processing the call keyword arguments (line 48)
    kwargs_25469 = {}
    
    # Obtaining the type of the subscript
    int_25459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 27), 'int')
    
    # Call to split(...): (line 48)
    # Processing the call arguments (line 48)
    str_25462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 22), 'str', '(')
    # Processing the call keyword arguments (line 48)
    kwargs_25463 = {}
    # Getting the type of 'line' (line 48)
    line_25460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 11), 'line', False)
    # Obtaining the member 'split' of a type (line 48)
    split_25461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 48, 11), line_25460, 'split')
    # Calling split(args, kwargs) (line 48)
    split_call_result_25464 = invoke(stypy.reporting.localization.Localization(__file__, 48, 11), split_25461, *[str_25462], **kwargs_25463)
    
    # Obtaining the member '__getitem__' of a type (line 48)
    getitem___25465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 48, 11), split_call_result_25464, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 48)
    subscript_call_result_25466 = invoke(stypy.reporting.localization.Localization(__file__, 48, 11), getitem___25465, int_25459)
    
    # Obtaining the member 'split' of a type (line 48)
    split_25467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 48, 11), subscript_call_result_25466, 'split')
    # Calling split(args, kwargs) (line 48)
    split_call_result_25470 = invoke(stypy.reporting.localization.Localization(__file__, 48, 11), split_25467, *[str_25468], **kwargs_25469)
    
    # Obtaining the member '__getitem__' of a type (line 48)
    getitem___25471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 48, 11), split_call_result_25470, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 48)
    subscript_call_result_25472 = invoke(stypy.reporting.localization.Localization(__file__, 48, 11), getitem___25471, int_25458)
    
    # Assigning a type to the variable 'stypy_return_type' (line 48)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 4), 'stypy_return_type', subscript_call_result_25472)
    
    # ################# End of 'get_sig_name(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_sig_name' in the type store
    # Getting the type of 'stypy_return_type' (line 47)
    stypy_return_type_25473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_25473)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_sig_name'
    return stypy_return_type_25473

# Assigning a type to the variable 'get_sig_name' (line 47)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 0), 'get_sig_name', get_sig_name)

@norecursion
def sigs_from_dir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 51)
    None_25474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 54), 'None')
    # Getting the type of 'None' (line 51)
    None_25475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 71), 'None')
    defaults = [None_25474, None_25475]
    # Create a new context for function 'sigs_from_dir'
    module_type_store = module_type_store.open_function_context('sigs_from_dir', 51, 0, False)
    
    # Passed parameters checking function
    sigs_from_dir.stypy_localization = localization
    sigs_from_dir.stypy_type_of_self = None
    sigs_from_dir.stypy_type_store = module_type_store
    sigs_from_dir.stypy_function_name = 'sigs_from_dir'
    sigs_from_dir.stypy_param_names_list = ['directory', 'outfile', 'manual_wrappers', 'exclusions']
    sigs_from_dir.stypy_varargs_param_name = None
    sigs_from_dir.stypy_kwargs_param_name = None
    sigs_from_dir.stypy_call_defaults = defaults
    sigs_from_dir.stypy_call_varargs = varargs
    sigs_from_dir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sigs_from_dir', ['directory', 'outfile', 'manual_wrappers', 'exclusions'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sigs_from_dir', localization, ['directory', 'outfile', 'manual_wrappers', 'exclusions'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sigs_from_dir(...)' code ##################

    
    
    
    # Obtaining the type of the subscript
    int_25476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 17), 'int')
    # Getting the type of 'directory' (line 52)
    directory_25477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 7), 'directory')
    # Obtaining the member '__getitem__' of a type (line 52)
    getitem___25478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 7), directory_25477, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 52)
    subscript_call_result_25479 = invoke(stypy.reporting.localization.Localization(__file__, 52, 7), getitem___25478, int_25476)
    
    
    # Obtaining an instance of the builtin type 'list' (line 52)
    list_25480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 52)
    # Adding element type (line 52)
    str_25481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 25), 'str', '/')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 52, 24), list_25480, str_25481)
    # Adding element type (line 52)
    str_25482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 30), 'str', '\\')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 52, 24), list_25480, str_25482)
    
    # Applying the binary operator 'in' (line 52)
    result_contains_25483 = python_operator(stypy.reporting.localization.Localization(__file__, 52, 7), 'in', subscript_call_result_25479, list_25480)
    
    # Testing the type of an if condition (line 52)
    if_condition_25484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 52, 4), result_contains_25483)
    # Assigning a type to the variable 'if_condition_25484' (line 52)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 4), 'if_condition_25484', if_condition_25484)
    # SSA begins for if statement (line 52)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 53):
    
    # Assigning a Subscript to a Name (line 53):
    
    # Obtaining the type of the subscript
    int_25485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 31), 'int')
    slice_25486 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 53, 20), None, int_25485, None)
    # Getting the type of 'directory' (line 53)
    directory_25487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 20), 'directory')
    # Obtaining the member '__getitem__' of a type (line 53)
    getitem___25488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 20), directory_25487, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 53)
    subscript_call_result_25489 = invoke(stypy.reporting.localization.Localization(__file__, 53, 20), getitem___25488, slice_25486)
    
    # Assigning a type to the variable 'directory' (line 53)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 8), 'directory', subscript_call_result_25489)
    # SSA join for if statement (line 52)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 54):
    
    # Assigning a Call to a Name (line 54):
    
    # Call to glob(...): (line 54)
    # Processing the call arguments (line 54)
    # Getting the type of 'directory' (line 54)
    directory_25492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 22), 'directory', False)
    str_25493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 34), 'str', '/*.f*')
    # Applying the binary operator '+' (line 54)
    result_add_25494 = python_operator(stypy.reporting.localization.Localization(__file__, 54, 22), '+', directory_25492, str_25493)
    
    # Processing the call keyword arguments (line 54)
    kwargs_25495 = {}
    # Getting the type of 'glob' (line 54)
    glob_25490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 12), 'glob', False)
    # Obtaining the member 'glob' of a type (line 54)
    glob_25491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 54, 12), glob_25490, 'glob')
    # Calling glob(args, kwargs) (line 54)
    glob_call_result_25496 = invoke(stypy.reporting.localization.Localization(__file__, 54, 12), glob_25491, *[result_add_25494], **kwargs_25495)
    
    # Assigning a type to the variable 'files' (line 54)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 4), 'files', glob_call_result_25496)
    
    # Type idiom detected: calculating its left and rigth part (line 55)
    # Getting the type of 'exclusions' (line 55)
    exclusions_25497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 7), 'exclusions')
    # Getting the type of 'None' (line 55)
    None_25498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 21), 'None')
    
    (may_be_25499, more_types_in_union_25500) = may_be_none(exclusions_25497, None_25498)

    if may_be_25499:

        if more_types_in_union_25500:
            # Runtime conditional SSA (line 55)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a List to a Name (line 56):
        
        # Assigning a List to a Name (line 56):
        
        # Obtaining an instance of the builtin type 'list' (line 56)
        list_25501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 56)
        
        # Assigning a type to the variable 'exclusions' (line 56)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 8), 'exclusions', list_25501)

        if more_types_in_union_25500:
            # SSA join for if statement (line 55)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 57)
    # Getting the type of 'manual_wrappers' (line 57)
    manual_wrappers_25502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 4), 'manual_wrappers')
    # Getting the type of 'None' (line 57)
    None_25503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 30), 'None')
    
    (may_be_25504, more_types_in_union_25505) = may_not_be_none(manual_wrappers_25502, None_25503)

    if may_be_25504:

        if more_types_in_union_25505:
            # Runtime conditional SSA (line 57)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'exclusions' (line 58)
        exclusions_25506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 8), 'exclusions')
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 58)
        # Processing the call arguments (line 58)
        str_25513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 70), 'str', '\n')
        # Processing the call keyword arguments (line 58)
        kwargs_25514 = {}
        # Getting the type of 'manual_wrappers' (line 58)
        manual_wrappers_25511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 48), 'manual_wrappers', False)
        # Obtaining the member 'split' of a type (line 58)
        split_25512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 58, 48), manual_wrappers_25511, 'split')
        # Calling split(args, kwargs) (line 58)
        split_call_result_25515 = invoke(stypy.reporting.localization.Localization(__file__, 58, 48), split_25512, *[str_25513], **kwargs_25514)
        
        comprehension_25516 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 58, 23), split_call_result_25515)
        # Assigning a type to the variable 'l' (line 58)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 23), 'l', comprehension_25516)
        
        # Call to get_sig_name(...): (line 58)
        # Processing the call arguments (line 58)
        # Getting the type of 'l' (line 58)
        l_25508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 36), 'l', False)
        # Processing the call keyword arguments (line 58)
        kwargs_25509 = {}
        # Getting the type of 'get_sig_name' (line 58)
        get_sig_name_25507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 23), 'get_sig_name', False)
        # Calling get_sig_name(args, kwargs) (line 58)
        get_sig_name_call_result_25510 = invoke(stypy.reporting.localization.Localization(__file__, 58, 23), get_sig_name_25507, *[l_25508], **kwargs_25509)
        
        list_25517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 58, 23), list_25517, get_sig_name_call_result_25510)
        # Applying the binary operator '+=' (line 58)
        result_iadd_25518 = python_operator(stypy.reporting.localization.Localization(__file__, 58, 8), '+=', exclusions_25506, list_25517)
        # Assigning a type to the variable 'exclusions' (line 58)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 8), 'exclusions', result_iadd_25518)
        

        if more_types_in_union_25505:
            # SSA join for if statement (line 57)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a List to a Name (line 59):
    
    # Assigning a List to a Name (line 59):
    
    # Obtaining an instance of the builtin type 'list' (line 59)
    list_25519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 59)
    
    # Assigning a type to the variable 'signatures' (line 59)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 4), 'signatures', list_25519)
    
    # Getting the type of 'files' (line 60)
    files_25520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 20), 'files')
    # Testing the type of a for loop iterable (line 60)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 60, 4), files_25520)
    # Getting the type of the for loop variable (line 60)
    for_loop_var_25521 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 60, 4), files_25520)
    # Assigning a type to the variable 'filename' (line 60)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 4), 'filename', for_loop_var_25521)
    # SSA begins for a for statement (line 60)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 61):
    
    # Assigning a Subscript to a Name (line 61):
    
    # Obtaining the type of the subscript
    int_25522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 41), 'int')
    slice_25523 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 61, 15), None, int_25522, None)
    
    # Obtaining the type of the subscript
    int_25524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 36), 'int')
    
    # Call to split(...): (line 61)
    # Processing the call arguments (line 61)
    str_25527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 30), 'str', '\\')
    # Processing the call keyword arguments (line 61)
    kwargs_25528 = {}
    # Getting the type of 'filename' (line 61)
    filename_25525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 61, 15), 'filename', False)
    # Obtaining the member 'split' of a type (line 61)
    split_25526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 61, 15), filename_25525, 'split')
    # Calling split(args, kwargs) (line 61)
    split_call_result_25529 = invoke(stypy.reporting.localization.Localization(__file__, 61, 15), split_25526, *[str_25527], **kwargs_25528)
    
    # Obtaining the member '__getitem__' of a type (line 61)
    getitem___25530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 61, 15), split_call_result_25529, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 61)
    subscript_call_result_25531 = invoke(stypy.reporting.localization.Localization(__file__, 61, 15), getitem___25530, int_25524)
    
    # Obtaining the member '__getitem__' of a type (line 61)
    getitem___25532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 61, 15), subscript_call_result_25531, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 61)
    subscript_call_result_25533 = invoke(stypy.reporting.localization.Localization(__file__, 61, 15), getitem___25532, slice_25523)
    
    # Assigning a type to the variable 'name' (line 61)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 61, 8), 'name', subscript_call_result_25533)
    
    
    # Getting the type of 'name' (line 62)
    name_25534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 11), 'name')
    # Getting the type of 'exclusions' (line 62)
    exclusions_25535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 19), 'exclusions')
    # Applying the binary operator 'in' (line 62)
    result_contains_25536 = python_operator(stypy.reporting.localization.Localization(__file__, 62, 11), 'in', name_25534, exclusions_25535)
    
    # Testing the type of an if condition (line 62)
    if_condition_25537 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 62, 8), result_contains_25536)
    # Assigning a type to the variable 'if_condition_25537' (line 62)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 62, 8), 'if_condition_25537', if_condition_25537)
    # SSA begins for if statement (line 62)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 62)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 64)
    # Processing the call arguments (line 64)
    
    # Call to make_signature(...): (line 64)
    # Processing the call arguments (line 64)
    # Getting the type of 'filename' (line 64)
    filename_25541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 41), 'filename', False)
    # Processing the call keyword arguments (line 64)
    kwargs_25542 = {}
    # Getting the type of 'make_signature' (line 64)
    make_signature_25540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 26), 'make_signature', False)
    # Calling make_signature(args, kwargs) (line 64)
    make_signature_call_result_25543 = invoke(stypy.reporting.localization.Localization(__file__, 64, 26), make_signature_25540, *[filename_25541], **kwargs_25542)
    
    # Processing the call keyword arguments (line 64)
    kwargs_25544 = {}
    # Getting the type of 'signatures' (line 64)
    signatures_25538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 8), 'signatures', False)
    # Obtaining the member 'append' of a type (line 64)
    append_25539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 64, 8), signatures_25538, 'append')
    # Calling append(args, kwargs) (line 64)
    append_call_result_25545 = invoke(stypy.reporting.localization.Localization(__file__, 64, 8), append_25539, *[make_signature_call_result_25543], **kwargs_25544)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 65)
    # Getting the type of 'manual_wrappers' (line 65)
    manual_wrappers_25546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 4), 'manual_wrappers')
    # Getting the type of 'None' (line 65)
    None_25547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 30), 'None')
    
    (may_be_25548, more_types_in_union_25549) = may_not_be_none(manual_wrappers_25546, None_25547)

    if may_be_25548:

        if more_types_in_union_25549:
            # Runtime conditional SSA (line 65)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'signatures' (line 66)
        signatures_25550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 8), 'signatures')
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 66)
        # Processing the call arguments (line 66)
        str_25556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, 63), 'str', '\n')
        # Processing the call keyword arguments (line 66)
        kwargs_25557 = {}
        # Getting the type of 'manual_wrappers' (line 66)
        manual_wrappers_25554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 41), 'manual_wrappers', False)
        # Obtaining the member 'split' of a type (line 66)
        split_25555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 66, 41), manual_wrappers_25554, 'split')
        # Calling split(args, kwargs) (line 66)
        split_call_result_25558 = invoke(stypy.reporting.localization.Localization(__file__, 66, 41), split_25555, *[str_25556], **kwargs_25557)
        
        comprehension_25559 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 66, 23), split_call_result_25558)
        # Assigning a type to the variable 'l' (line 66)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 66, 23), 'l', comprehension_25559)
        # Getting the type of 'l' (line 66)
        l_25551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 23), 'l')
        str_25552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, 27), 'str', '\n')
        # Applying the binary operator '+' (line 66)
        result_add_25553 = python_operator(stypy.reporting.localization.Localization(__file__, 66, 23), '+', l_25551, str_25552)
        
        list_25560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 66, 23), list_25560, result_add_25553)
        # Applying the binary operator '+=' (line 66)
        result_iadd_25561 = python_operator(stypy.reporting.localization.Localization(__file__, 66, 8), '+=', signatures_25550, list_25560)
        # Assigning a type to the variable 'signatures' (line 66)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 66, 8), 'signatures', result_iadd_25561)
        

        if more_types_in_union_25549:
            # SSA join for if statement (line 65)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to sort(...): (line 67)
    # Processing the call keyword arguments (line 67)
    # Getting the type of 'get_sig_name' (line 67)
    get_sig_name_25564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 24), 'get_sig_name', False)
    keyword_25565 = get_sig_name_25564
    kwargs_25566 = {'key': keyword_25565}
    # Getting the type of 'signatures' (line 67)
    signatures_25562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 4), 'signatures', False)
    # Obtaining the member 'sort' of a type (line 67)
    sort_25563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 67, 4), signatures_25562, 'sort')
    # Calling sort(args, kwargs) (line 67)
    sort_call_result_25567 = invoke(stypy.reporting.localization.Localization(__file__, 67, 4), sort_25563, *[], **kwargs_25566)
    
    
    # Assigning a List to a Name (line 68):
    
    # Assigning a List to a Name (line 68):
    
    # Obtaining an instance of the builtin type 'list' (line 68)
    list_25568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 68)
    # Adding element type (line 68)
    str_25569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 15), 'str', '# This file was generated by _cython_signature_generator.py.\n')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 68, 14), list_25568, str_25569)
    # Adding element type (line 68)
    str_25570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 15), 'str', '# Do not edit this file directly.\n\n')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 68, 14), list_25568, str_25570)
    
    # Assigning a type to the variable 'comment' (line 68)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 4), 'comment', list_25568)
    
    # Call to open(...): (line 70)
    # Processing the call arguments (line 70)
    # Getting the type of 'outfile' (line 70)
    outfile_25572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 14), 'outfile', False)
    str_25573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 23), 'str', 'w')
    # Processing the call keyword arguments (line 70)
    kwargs_25574 = {}
    # Getting the type of 'open' (line 70)
    open_25571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 9), 'open', False)
    # Calling open(args, kwargs) (line 70)
    open_call_result_25575 = invoke(stypy.reporting.localization.Localization(__file__, 70, 9), open_25571, *[outfile_25572, str_25573], **kwargs_25574)
    
    with_25576 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 70, 9), open_call_result_25575, 'with parameter', '__enter__', '__exit__')

    if with_25576:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 70)
        enter___25577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 70, 9), open_call_result_25575, '__enter__')
        with_enter_25578 = invoke(stypy.reporting.localization.Localization(__file__, 70, 9), enter___25577)
        # Assigning a type to the variable 'f' (line 70)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 9), 'f', with_enter_25578)
        
        # Call to writelines(...): (line 71)
        # Processing the call arguments (line 71)
        # Getting the type of 'comment' (line 71)
        comment_25581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 21), 'comment', False)
        # Processing the call keyword arguments (line 71)
        kwargs_25582 = {}
        # Getting the type of 'f' (line 71)
        f_25579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 8), 'f', False)
        # Obtaining the member 'writelines' of a type (line 71)
        writelines_25580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 8), f_25579, 'writelines')
        # Calling writelines(args, kwargs) (line 71)
        writelines_call_result_25583 = invoke(stypy.reporting.localization.Localization(__file__, 71, 8), writelines_25580, *[comment_25581], **kwargs_25582)
        
        
        # Call to writelines(...): (line 72)
        # Processing the call arguments (line 72)
        # Getting the type of 'signatures' (line 72)
        signatures_25586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 21), 'signatures', False)
        # Processing the call keyword arguments (line 72)
        kwargs_25587 = {}
        # Getting the type of 'f' (line 72)
        f_25584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 8), 'f', False)
        # Obtaining the member 'writelines' of a type (line 72)
        writelines_25585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 72, 8), f_25584, 'writelines')
        # Calling writelines(args, kwargs) (line 72)
        writelines_call_result_25588 = invoke(stypy.reporting.localization.Localization(__file__, 72, 8), writelines_25585, *[signatures_25586], **kwargs_25587)
        
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 70)
        exit___25589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 70, 9), open_call_result_25575, '__exit__')
        with_exit_25590 = invoke(stypy.reporting.localization.Localization(__file__, 70, 9), exit___25589, None, None, None)

    
    # ################# End of 'sigs_from_dir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sigs_from_dir' in the type store
    # Getting the type of 'stypy_return_type' (line 51)
    stypy_return_type_25591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_25591)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sigs_from_dir'
    return stypy_return_type_25591

# Assigning a type to the variable 'sigs_from_dir' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'sigs_from_dir', sigs_from_dir)

# Assigning a Str to a Name (line 82):

# Assigning a Str to a Name (line 82):
str_25592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, (-1)), 'str', 'void cgees(char *jobvs, char *sort, cselect1 *select, int *n, c *a, int *lda, int *sdim, c *w, c *vs, int *ldvs, c *work, int *lwork, s *rwork, bint *bwork, int *info)\nvoid cgeesx(char *jobvs, char *sort, cselect1 *select, char *sense, int *n, c *a, int *lda, int *sdim, c *w, c *vs, int *ldvs, s *rconde, s *rcondv, c *work, int *lwork, s *rwork, bint *bwork, int *info)\nvoid cgges(char *jobvsl, char *jobvsr, char *sort, cselect2 *selctg, int *n, c *a, int *lda, c *b, int *ldb, int *sdim, c *alpha, c *beta, c *vsl, int *ldvsl, c *vsr, int *ldvsr, c *work, int *lwork, s *rwork, bint *bwork, int *info)\nvoid cggesx(char *jobvsl, char *jobvsr, char *sort, cselect2 *selctg, char *sense, int *n, c *a, int *lda, c *b, int *ldb, int *sdim, c *alpha, c *beta, c *vsl, int *ldvsl, c *vsr, int *ldvsr, s *rconde, s *rcondv, c *work, int *lwork, s *rwork, int *iwork, int *liwork, bint *bwork, int *info)\nvoid dgees(char *jobvs, char *sort, dselect2 *select, int *n, d *a, int *lda, int *sdim, d *wr, d *wi, d *vs, int *ldvs, d *work, int *lwork, bint *bwork, int *info)\nvoid dgeesx(char *jobvs, char *sort, dselect2 *select, char *sense, int *n, d *a, int *lda, int *sdim, d *wr, d *wi, d *vs, int *ldvs, d *rconde, d *rcondv, d *work, int *lwork, int *iwork, int *liwork, bint *bwork, int *info)\nvoid dgges(char *jobvsl, char *jobvsr, char *sort, dselect3 *selctg, int *n, d *a, int *lda, d *b, int *ldb, int *sdim, d *alphar, d *alphai, d *beta, d *vsl, int *ldvsl, d *vsr, int *ldvsr, d *work, int *lwork, bint *bwork, int *info)\nvoid dggesx(char *jobvsl, char *jobvsr, char *sort, dselect3 *selctg, char *sense, int *n, d *a, int *lda, d *b, int *ldb, int *sdim, d *alphar, d *alphai, d *beta, d *vsl, int *ldvsl, d *vsr, int *ldvsr, d *rconde, d *rcondv, d *work, int *lwork, int *iwork, int *liwork, bint *bwork, int *info)\nd dlamch(char *cmach)\nvoid ilaver(int *vers_major, int *vers_minor, int *vers_patch)\nvoid sgees(char *jobvs, char *sort, sselect2 *select, int *n, s *a, int *lda, int *sdim, s *wr, s *wi, s *vs, int *ldvs, s *work, int *lwork, bint *bwork, int *info)\nvoid sgeesx(char *jobvs, char *sort, sselect2 *select, char *sense, int *n, s *a, int *lda, int *sdim, s *wr, s *wi, s *vs, int *ldvs, s *rconde, s *rcondv, s *work, int *lwork, int *iwork, int *liwork, bint *bwork, int *info)\nvoid sgges(char *jobvsl, char *jobvsr, char *sort, sselect3 *selctg, int *n, s *a, int *lda, s *b, int *ldb, int *sdim, s *alphar, s *alphai, s *beta, s *vsl, int *ldvsl, s *vsr, int *ldvsr, s *work, int *lwork, bint *bwork, int *info)\nvoid sggesx(char *jobvsl, char *jobvsr, char *sort, sselect3 *selctg, char *sense, int *n, s *a, int *lda, s *b, int *ldb, int *sdim, s *alphar, s *alphai, s *beta, s *vsl, int *ldvsl, s *vsr, int *ldvsr, s *rconde, s *rcondv, s *work, int *lwork, int *iwork, int *liwork, bint *bwork, int *info)\ns slamch(char *cmach)\nvoid zgees(char *jobvs, char *sort, zselect1 *select, int *n, z *a, int *lda, int *sdim, z *w, z *vs, int *ldvs, z *work, int *lwork, d *rwork, bint *bwork, int *info)\nvoid zgeesx(char *jobvs, char *sort, zselect1 *select, char *sense, int *n, z *a, int *lda, int *sdim, z *w, z *vs, int *ldvs, d *rconde, d *rcondv, z *work, int *lwork, d *rwork, bint *bwork, int *info)\nvoid zgges(char *jobvsl, char *jobvsr, char *sort, zselect2 *selctg, int *n, z *a, int *lda, z *b, int *ldb, int *sdim, z *alpha, z *beta, z *vsl, int *ldvsl, z *vsr, int *ldvsr, z *work, int *lwork, d *rwork, bint *bwork, int *info)\nvoid zggesx(char *jobvsl, char *jobvsr, char *sort, zselect2 *selctg, char *sense, int *n, z *a, int *lda, z *b, int *ldb, int *sdim, z *alpha, z *beta, z *vsl, int *ldvsl, z *vsr, int *ldvsr, d *rconde, d *rcondv, z *work, int *lwork, d *rwork, int *iwork, int *liwork, bint *bwork, int *info)')
# Assigning a type to the variable 'lapack_manual_wrappers' (line 82)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 0), 'lapack_manual_wrappers', str_25592)

if (__name__ == '__main__'):
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 103, 4))
    
    # 'from sys import argv' statement (line 103)
    try:
        from sys import argv

    except:
        argv = UndefinedType
    import_from_module(stypy.reporting.localization.Localization(__file__, 103, 4), 'sys', None, module_type_store, ['argv'], [argv])
    
    
    # Assigning a Subscript to a Tuple (line 104):
    
    # Assigning a Subscript to a Name (line 104):
    
    # Obtaining the type of the subscript
    int_25593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 4), 'int')
    
    # Obtaining the type of the subscript
    int_25594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 37), 'int')
    slice_25595 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 104, 32), int_25594, None, None)
    # Getting the type of 'argv' (line 104)
    argv_25596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 32), 'argv')
    # Obtaining the member '__getitem__' of a type (line 104)
    getitem___25597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 32), argv_25596, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 104)
    subscript_call_result_25598 = invoke(stypy.reporting.localization.Localization(__file__, 104, 32), getitem___25597, slice_25595)
    
    # Obtaining the member '__getitem__' of a type (line 104)
    getitem___25599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 4), subscript_call_result_25598, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 104)
    subscript_call_result_25600 = invoke(stypy.reporting.localization.Localization(__file__, 104, 4), getitem___25599, int_25593)
    
    # Assigning a type to the variable 'tuple_var_assignment_25340' (line 104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'tuple_var_assignment_25340', subscript_call_result_25600)
    
    # Assigning a Subscript to a Name (line 104):
    
    # Obtaining the type of the subscript
    int_25601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 4), 'int')
    
    # Obtaining the type of the subscript
    int_25602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 37), 'int')
    slice_25603 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 104, 32), int_25602, None, None)
    # Getting the type of 'argv' (line 104)
    argv_25604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 32), 'argv')
    # Obtaining the member '__getitem__' of a type (line 104)
    getitem___25605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 32), argv_25604, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 104)
    subscript_call_result_25606 = invoke(stypy.reporting.localization.Localization(__file__, 104, 32), getitem___25605, slice_25603)
    
    # Obtaining the member '__getitem__' of a type (line 104)
    getitem___25607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 4), subscript_call_result_25606, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 104)
    subscript_call_result_25608 = invoke(stypy.reporting.localization.Localization(__file__, 104, 4), getitem___25607, int_25601)
    
    # Assigning a type to the variable 'tuple_var_assignment_25341' (line 104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'tuple_var_assignment_25341', subscript_call_result_25608)
    
    # Assigning a Subscript to a Name (line 104):
    
    # Obtaining the type of the subscript
    int_25609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 4), 'int')
    
    # Obtaining the type of the subscript
    int_25610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 37), 'int')
    slice_25611 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 104, 32), int_25610, None, None)
    # Getting the type of 'argv' (line 104)
    argv_25612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 32), 'argv')
    # Obtaining the member '__getitem__' of a type (line 104)
    getitem___25613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 32), argv_25612, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 104)
    subscript_call_result_25614 = invoke(stypy.reporting.localization.Localization(__file__, 104, 32), getitem___25613, slice_25611)
    
    # Obtaining the member '__getitem__' of a type (line 104)
    getitem___25615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 4), subscript_call_result_25614, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 104)
    subscript_call_result_25616 = invoke(stypy.reporting.localization.Localization(__file__, 104, 4), getitem___25615, int_25609)
    
    # Assigning a type to the variable 'tuple_var_assignment_25342' (line 104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'tuple_var_assignment_25342', subscript_call_result_25616)
    
    # Assigning a Name to a Name (line 104):
    # Getting the type of 'tuple_var_assignment_25340' (line 104)
    tuple_var_assignment_25340_25617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'tuple_var_assignment_25340')
    # Assigning a type to the variable 'libname' (line 104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'libname', tuple_var_assignment_25340_25617)
    
    # Assigning a Name to a Name (line 104):
    # Getting the type of 'tuple_var_assignment_25341' (line 104)
    tuple_var_assignment_25341_25618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'tuple_var_assignment_25341')
    # Assigning a type to the variable 'src_dir' (line 104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 13), 'src_dir', tuple_var_assignment_25341_25618)
    
    # Assigning a Name to a Name (line 104):
    # Getting the type of 'tuple_var_assignment_25342' (line 104)
    tuple_var_assignment_25342_25619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'tuple_var_assignment_25342')
    # Assigning a type to the variable 'outfile' (line 104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 22), 'outfile', tuple_var_assignment_25342_25619)
    
    
    
    # Call to lower(...): (line 107)
    # Processing the call keyword arguments (line 107)
    kwargs_25622 = {}
    # Getting the type of 'libname' (line 107)
    libname_25620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 7), 'libname', False)
    # Obtaining the member 'lower' of a type (line 107)
    lower_25621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 7), libname_25620, 'lower')
    # Calling lower(args, kwargs) (line 107)
    lower_call_result_25623 = invoke(stypy.reporting.localization.Localization(__file__, 107, 7), lower_25621, *[], **kwargs_25622)
    
    str_25624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 26), 'str', 'blas')
    # Applying the binary operator '==' (line 107)
    result_eq_25625 = python_operator(stypy.reporting.localization.Localization(__file__, 107, 7), '==', lower_call_result_25623, str_25624)
    
    # Testing the type of an if condition (line 107)
    if_condition_25626 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 107, 4), result_eq_25625)
    # Assigning a type to the variable 'if_condition_25626' (line 107)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 4), 'if_condition_25626', if_condition_25626)
    # SSA begins for if statement (line 107)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sigs_from_dir(...): (line 108)
    # Processing the call arguments (line 108)
    # Getting the type of 'src_dir' (line 108)
    src_dir_25628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 22), 'src_dir', False)
    # Getting the type of 'outfile' (line 108)
    outfile_25629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 31), 'outfile', False)
    # Processing the call keyword arguments (line 108)
    
    # Obtaining an instance of the builtin type 'list' (line 108)
    list_25630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 51), 'list')
    # Adding type elements to the builtin type 'list' instance (line 108)
    # Adding element type (line 108)
    str_25631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 52), 'str', 'scabs1')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 51), list_25630, str_25631)
    # Adding element type (line 108)
    str_25632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 62), 'str', 'xerbla')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 51), list_25630, str_25632)
    
    keyword_25633 = list_25630
    kwargs_25634 = {'exclusions': keyword_25633}
    # Getting the type of 'sigs_from_dir' (line 108)
    sigs_from_dir_25627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 8), 'sigs_from_dir', False)
    # Calling sigs_from_dir(args, kwargs) (line 108)
    sigs_from_dir_call_result_25635 = invoke(stypy.reporting.localization.Localization(__file__, 108, 8), sigs_from_dir_25627, *[src_dir_25628, outfile_25629], **kwargs_25634)
    
    # SSA branch for the else part of an if statement (line 107)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to lower(...): (line 109)
    # Processing the call keyword arguments (line 109)
    kwargs_25638 = {}
    # Getting the type of 'libname' (line 109)
    libname_25636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 9), 'libname', False)
    # Obtaining the member 'lower' of a type (line 109)
    lower_25637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 9), libname_25636, 'lower')
    # Calling lower(args, kwargs) (line 109)
    lower_call_result_25639 = invoke(stypy.reporting.localization.Localization(__file__, 109, 9), lower_25637, *[], **kwargs_25638)
    
    str_25640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 28), 'str', 'lapack')
    # Applying the binary operator '==' (line 109)
    result_eq_25641 = python_operator(stypy.reporting.localization.Localization(__file__, 109, 9), '==', lower_call_result_25639, str_25640)
    
    # Testing the type of an if condition (line 109)
    if_condition_25642 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 109, 9), result_eq_25641)
    # Assigning a type to the variable 'if_condition_25642' (line 109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 9), 'if_condition_25642', if_condition_25642)
    # SSA begins for if statement (line 109)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 116):
    
    # Assigning a List to a Name (line 116):
    
    # Obtaining an instance of the builtin type 'list' (line 116)
    list_25643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 116)
    # Adding element type (line 116)
    str_25644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 22), 'str', 'sisnan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25644)
    # Adding element type (line 116)
    str_25645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 32), 'str', 'csrot')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25645)
    # Adding element type (line 116)
    str_25646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 41), 'str', 'zdrot')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25646)
    # Adding element type (line 116)
    str_25647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 50), 'str', 'ilaenv')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25647)
    # Adding element type (line 116)
    str_25648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 60), 'str', 'iparmq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25648)
    # Adding element type (line 116)
    str_25649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 70), 'str', 'lsamen')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25649)
    # Adding element type (line 116)
    str_25650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 22), 'str', 'xerbla')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25650)
    # Adding element type (line 116)
    str_25651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 32), 'str', 'zcgesv')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25651)
    # Adding element type (line 116)
    str_25652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 42), 'str', 'dlaisnan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25652)
    # Adding element type (line 116)
    str_25653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 54), 'str', 'slaisnan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25653)
    # Adding element type (line 116)
    str_25654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 66), 'str', 'dlazq3')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25654)
    # Adding element type (line 116)
    str_25655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, 22), 'str', 'dlazq4')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25655)
    # Adding element type (line 116)
    str_25656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, 32), 'str', 'slazq3')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25656)
    # Adding element type (line 116)
    str_25657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, 42), 'str', 'slazq4')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25657)
    # Adding element type (line 116)
    str_25658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, 52), 'str', 'dlasq3')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25658)
    # Adding element type (line 116)
    str_25659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, 62), 'str', 'dlasq4')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25659)
    # Adding element type (line 116)
    str_25660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 22), 'str', 'slasq3')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25660)
    # Adding element type (line 116)
    str_25661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 32), 'str', 'slasq4')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25661)
    # Adding element type (line 116)
    str_25662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 42), 'str', 'dlasq5')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25662)
    # Adding element type (line 116)
    str_25663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 52), 'str', 'slasq5')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25663)
    # Adding element type (line 116)
    str_25664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 62), 'str', 'slaneg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25664)
    # Adding element type (line 116)
    str_25665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 22), 'str', 'cgegs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25665)
    # Adding element type (line 116)
    str_25666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 31), 'str', 'cgegv')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25666)
    # Adding element type (line 116)
    str_25667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 40), 'str', 'cgelsx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25667)
    # Adding element type (line 116)
    str_25668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 50), 'str', 'cgeqpf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25668)
    # Adding element type (line 116)
    str_25669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 60), 'str', 'cggsvd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25669)
    # Adding element type (line 116)
    str_25670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 70), 'str', 'cggsvp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25670)
    # Adding element type (line 116)
    str_25671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 22), 'str', 'clahrd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25671)
    # Adding element type (line 116)
    str_25672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 32), 'str', 'clatzm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25672)
    # Adding element type (line 116)
    str_25673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 42), 'str', 'ctzrqf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25673)
    # Adding element type (line 116)
    str_25674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 52), 'str', 'dgegs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25674)
    # Adding element type (line 116)
    str_25675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 61), 'str', 'dgegv')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25675)
    # Adding element type (line 116)
    str_25676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 70), 'str', 'dgelsx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25676)
    # Adding element type (line 116)
    str_25677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 22), 'str', 'dgeqpf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25677)
    # Adding element type (line 116)
    str_25678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 32), 'str', 'dggsvd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25678)
    # Adding element type (line 116)
    str_25679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 42), 'str', 'dggsvp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25679)
    # Adding element type (line 116)
    str_25680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 52), 'str', 'dlahrd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25680)
    # Adding element type (line 116)
    str_25681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 62), 'str', 'dlatzm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25681)
    # Adding element type (line 116)
    str_25682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 72), 'str', 'dtzrqf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25682)
    # Adding element type (line 116)
    str_25683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 22), 'str', 'sgegs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25683)
    # Adding element type (line 116)
    str_25684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 31), 'str', 'sgegv')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25684)
    # Adding element type (line 116)
    str_25685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 40), 'str', 'sgelsx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25685)
    # Adding element type (line 116)
    str_25686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 50), 'str', 'sgeqpf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25686)
    # Adding element type (line 116)
    str_25687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 60), 'str', 'sggsvd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25687)
    # Adding element type (line 116)
    str_25688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 70), 'str', 'sggsvp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25688)
    # Adding element type (line 116)
    str_25689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 22), 'str', 'slahrd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25689)
    # Adding element type (line 116)
    str_25690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 32), 'str', 'slatzm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25690)
    # Adding element type (line 116)
    str_25691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 42), 'str', 'stzrqf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25691)
    # Adding element type (line 116)
    str_25692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 52), 'str', 'zgegs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25692)
    # Adding element type (line 116)
    str_25693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 61), 'str', 'zgegv')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25693)
    # Adding element type (line 116)
    str_25694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 70), 'str', 'zgelsx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25694)
    # Adding element type (line 116)
    str_25695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 22), 'str', 'zgeqpf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25695)
    # Adding element type (line 116)
    str_25696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 32), 'str', 'zggsvd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25696)
    # Adding element type (line 116)
    str_25697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 42), 'str', 'zggsvp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25697)
    # Adding element type (line 116)
    str_25698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 52), 'str', 'zlahrd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25698)
    # Adding element type (line 116)
    str_25699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 62), 'str', 'zlatzm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25699)
    # Adding element type (line 116)
    str_25700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 72), 'str', 'ztzrqf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 21), list_25643, str_25700)
    
    # Assigning a type to the variable 'exclusions' (line 116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 8), 'exclusions', list_25643)
    
    # Call to sigs_from_dir(...): (line 127)
    # Processing the call arguments (line 127)
    # Getting the type of 'src_dir' (line 127)
    src_dir_25702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 22), 'src_dir', False)
    # Getting the type of 'outfile' (line 127)
    outfile_25703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 31), 'outfile', False)
    # Processing the call keyword arguments (line 127)
    # Getting the type of 'lapack_manual_wrappers' (line 127)
    lapack_manual_wrappers_25704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 56), 'lapack_manual_wrappers', False)
    keyword_25705 = lapack_manual_wrappers_25704
    # Getting the type of 'exclusions' (line 128)
    exclusions_25706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 33), 'exclusions', False)
    keyword_25707 = exclusions_25706
    kwargs_25708 = {'exclusions': keyword_25707, 'manual_wrappers': keyword_25705}
    # Getting the type of 'sigs_from_dir' (line 127)
    sigs_from_dir_25701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 8), 'sigs_from_dir', False)
    # Calling sigs_from_dir(args, kwargs) (line 127)
    sigs_from_dir_call_result_25709 = invoke(stypy.reporting.localization.Localization(__file__, 127, 8), sigs_from_dir_25701, *[src_dir_25702, outfile_25703], **kwargs_25708)
    
    # SSA join for if statement (line 109)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 107)
    module_type_store = module_type_store.join_ssa_context()
    


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
