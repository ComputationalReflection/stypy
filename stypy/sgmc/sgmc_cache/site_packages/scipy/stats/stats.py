
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: # Copyright 2002 Gary Strangman.  All rights reserved
2: # Copyright 2002-2016 The SciPy Developers
3: #
4: # The original code from Gary Strangman was heavily adapted for
5: # use in SciPy by Travis Oliphant.  The original code came with the
6: # following disclaimer:
7: #
8: # This software is provided "as-is".  There are no expressed or implied
9: # warranties of any kind, including, but not limited to, the warranties
10: # of merchantability and fitness for a given application.  In no event
11: # shall Gary Strangman be liable for any direct, indirect, incidental,
12: # special, exemplary or consequential damages (including, but not limited
13: # to, loss of use, data or profits, or business interruption) however
14: # caused and on any theory of liability, whether in contract, strict
15: # liability or tort (including negligence or otherwise) arising in any way
16: # out of the use of this software, even if advised of the possibility of
17: # such damage.
18: 
19: '''
20: A collection of basic statistical functions for Python.  The function
21: names appear below.
22: 
23:  Some scalar functions defined here are also available in the scipy.special
24:  package where they work on arbitrary sized arrays.
25: 
26: Disclaimers:  The function list is obviously incomplete and, worse, the
27: functions are not optimized.  All functions have been tested (some more
28: so than others), but they are far from bulletproof.  Thus, as with any
29: free software, no warranty or guarantee is expressed or implied. :-)  A
30: few extra functions that don't appear in the list below can be found by
31: interested treasure-hunters.  These functions don't necessarily have
32: both list and array versions but were deemed useful.
33: 
34: Central Tendency
35: ----------------
36: .. autosummary::
37:    :toctree: generated/
38: 
39:     gmean
40:     hmean
41:     mode
42: 
43: Moments
44: -------
45: .. autosummary::
46:    :toctree: generated/
47: 
48:     moment
49:     variation
50:     skew
51:     kurtosis
52:     normaltest
53: 
54: Altered Versions
55: ----------------
56: .. autosummary::
57:    :toctree: generated/
58: 
59:     tmean
60:     tvar
61:     tstd
62:     tsem
63:     describe
64: 
65: Frequency Stats
66: ---------------
67: .. autosummary::
68:    :toctree: generated/
69: 
70:     itemfreq
71:     scoreatpercentile
72:     percentileofscore
73:     cumfreq
74:     relfreq
75: 
76: Variability
77: -----------
78: .. autosummary::
79:    :toctree: generated/
80: 
81:     obrientransform
82:     sem
83:     zmap
84:     zscore
85:     iqr
86: 
87: Trimming Functions
88: ------------------
89: .. autosummary::
90:    :toctree: generated/
91: 
92:    trimboth
93:    trim1
94: 
95: Correlation Functions
96: ---------------------
97: .. autosummary::
98:    :toctree: generated/
99: 
100:    pearsonr
101:    fisher_exact
102:    spearmanr
103:    pointbiserialr
104:    kendalltau
105:    weightedtau
106:    linregress
107:    theilslopes
108: 
109: Inferential Stats
110: -----------------
111: .. autosummary::
112:    :toctree: generated/
113: 
114:    ttest_1samp
115:    ttest_ind
116:    ttest_ind_from_stats
117:    ttest_rel
118:    chisquare
119:    power_divergence
120:    ks_2samp
121:    mannwhitneyu
122:    ranksums
123:    wilcoxon
124:    kruskal
125:    friedmanchisquare
126:    combine_pvalues
127: 
128: Statistical Distances
129: ---------------------
130: .. autosummary::
131:    :toctree: generated/
132: 
133:    wasserstein_distance
134:    energy_distance
135: 
136: ANOVA Functions
137: ---------------
138: .. autosummary::
139:    :toctree: generated/
140: 
141:    f_oneway
142: 
143: Support Functions
144: -----------------
145: .. autosummary::
146:    :toctree: generated/
147: 
148:    rankdata
149: 
150: References
151: ----------
152: .. [CRCProbStat2000] Zwillinger, D. and Kokoska, S. (2000). CRC Standard
153:    Probability and Statistics Tables and Formulae. Chapman & Hall: New
154:    York. 2000.
155: 
156: '''
157: 
158: from __future__ import division, print_function, absolute_import
159: 
160: import warnings
161: import math
162: from collections import namedtuple
163: 
164: import numpy as np
165: from numpy import array, asarray, ma, zeros
166: 
167: from scipy._lib.six import callable, string_types
168: from scipy._lib._version import NumpyVersion
169: import scipy.special as special
170: import scipy.linalg as linalg
171: from . import distributions
172: from . import mstats_basic
173: from ._distn_infrastructure import _lazywhere
174: from ._stats_mstats_common import _find_repeats, linregress, theilslopes
175: from ._stats import _kendall_dis, _toint64, _weightedrankedtau
176: 
177: 
178: __all__ = ['find_repeats', 'gmean', 'hmean', 'mode', 'tmean', 'tvar',
179:            'tmin', 'tmax', 'tstd', 'tsem', 'moment', 'variation',
180:            'skew', 'kurtosis', 'describe', 'skewtest', 'kurtosistest',
181:            'normaltest', 'jarque_bera', 'itemfreq',
182:            'scoreatpercentile', 'percentileofscore',
183:            'cumfreq', 'relfreq', 'obrientransform',
184:            'sem', 'zmap', 'zscore', 'iqr',
185:            'sigmaclip', 'trimboth', 'trim1', 'trim_mean', 'f_oneway',
186:            'pearsonr', 'fisher_exact', 'spearmanr', 'pointbiserialr',
187:            'kendalltau', 'weightedtau',
188:            'linregress', 'theilslopes', 'ttest_1samp',
189:            'ttest_ind', 'ttest_ind_from_stats', 'ttest_rel', 'kstest',
190:            'chisquare', 'power_divergence', 'ks_2samp', 'mannwhitneyu',
191:            'tiecorrect', 'ranksums', 'kruskal', 'friedmanchisquare',
192:            'rankdata',
193:            'combine_pvalues', 'wasserstein_distance', 'energy_distance']
194: 
195: 
196: def _chk_asarray(a, axis):
197:     if axis is None:
198:         a = np.ravel(a)
199:         outaxis = 0
200:     else:
201:         a = np.asarray(a)
202:         outaxis = axis
203: 
204:     if a.ndim == 0:
205:         a = np.atleast_1d(a)
206: 
207:     return a, outaxis
208: 
209: 
210: def _chk2_asarray(a, b, axis):
211:     if axis is None:
212:         a = np.ravel(a)
213:         b = np.ravel(b)
214:         outaxis = 0
215:     else:
216:         a = np.asarray(a)
217:         b = np.asarray(b)
218:         outaxis = axis
219: 
220:     if a.ndim == 0:
221:         a = np.atleast_1d(a)
222:     if b.ndim == 0:
223:         b = np.atleast_1d(b)
224: 
225:     return a, b, outaxis
226: 
227: 
228: def _contains_nan(a, nan_policy='propagate'):
229:     policies = ['propagate', 'raise', 'omit']
230:     if nan_policy not in policies:
231:         raise ValueError("nan_policy must be one of {%s}" %
232:                          ', '.join("'%s'" % s for s in policies))
233:     try:
234:         # Calling np.sum to avoid creating a huge array into memory
235:         # e.g. np.isnan(a).any()
236:         with np.errstate(invalid='ignore'):
237:             contains_nan = np.isnan(np.sum(a))
238:     except TypeError:
239:         # If the check cannot be properly performed we fallback to omiting
240:         # nan values and raising a warning. This can happen when attempting to
241:         # sum things that are not numbers (e.g. as in the function `mode`).
242:         contains_nan = False
243:         nan_policy = 'omit'
244:         warnings.warn("The input array could not be properly checked for nan "
245:                       "values. nan values will be ignored.", RuntimeWarning)
246: 
247:     if contains_nan and nan_policy == 'raise':
248:         raise ValueError("The input contains nan values")
249: 
250:     return (contains_nan, nan_policy)
251: 
252: 
253: def gmean(a, axis=0, dtype=None):
254:     '''
255:     Compute the geometric mean along the specified axis.
256: 
257:     Return the geometric average of the array elements.
258:     That is:  n-th root of (x1 * x2 * ... * xn)
259: 
260:     Parameters
261:     ----------
262:     a : array_like
263:         Input array or object that can be converted to an array.
264:     axis : int or None, optional
265:         Axis along which the geometric mean is computed. Default is 0.
266:         If None, compute over the whole array `a`.
267:     dtype : dtype, optional
268:         Type of the returned array and of the accumulator in which the
269:         elements are summed. If dtype is not specified, it defaults to the
270:         dtype of a, unless a has an integer dtype with a precision less than
271:         that of the default platform integer. In that case, the default
272:         platform integer is used.
273: 
274:     Returns
275:     -------
276:     gmean : ndarray
277:         see dtype parameter above
278: 
279:     See Also
280:     --------
281:     numpy.mean : Arithmetic average
282:     numpy.average : Weighted average
283:     hmean : Harmonic mean
284: 
285:     Notes
286:     -----
287:     The geometric average is computed over a single dimension of the input
288:     array, axis=0 by default, or all values in the array if axis=None.
289:     float64 intermediate and return values are used for integer inputs.
290: 
291:     Use masked arrays to ignore any non-finite values in the input or that
292:     arise in the calculations such as Not a Number and infinity because masked
293:     arrays automatically mask any non-finite values.
294: 
295:     Examples
296:     --------
297:     >>> from scipy.stats import gmean
298:     >>> gmean([1, 4])
299:     2.0
300:     >>> gmean([1, 2, 3, 4, 5, 6, 7])
301:     3.3800151591412964
302:     '''
303:     if not isinstance(a, np.ndarray):
304:         # if not an ndarray object attempt to convert it
305:         log_a = np.log(np.array(a, dtype=dtype))
306:     elif dtype:
307:         # Must change the default dtype allowing array type
308:         if isinstance(a, np.ma.MaskedArray):
309:             log_a = np.log(np.ma.asarray(a, dtype=dtype))
310:         else:
311:             log_a = np.log(np.asarray(a, dtype=dtype))
312:     else:
313:         log_a = np.log(a)
314:     return np.exp(log_a.mean(axis=axis))
315: 
316: 
317: def hmean(a, axis=0, dtype=None):
318:     '''
319:     Calculate the harmonic mean along the specified axis.
320: 
321:     That is:  n / (1/x1 + 1/x2 + ... + 1/xn)
322: 
323:     Parameters
324:     ----------
325:     a : array_like
326:         Input array, masked array or object that can be converted to an array.
327:     axis : int or None, optional
328:         Axis along which the harmonic mean is computed. Default is 0.
329:         If None, compute over the whole array `a`.
330:     dtype : dtype, optional
331:         Type of the returned array and of the accumulator in which the
332:         elements are summed. If `dtype` is not specified, it defaults to the
333:         dtype of `a`, unless `a` has an integer `dtype` with a precision less
334:         than that of the default platform integer. In that case, the default
335:         platform integer is used.
336: 
337:     Returns
338:     -------
339:     hmean : ndarray
340:         see `dtype` parameter above
341: 
342:     See Also
343:     --------
344:     numpy.mean : Arithmetic average
345:     numpy.average : Weighted average
346:     gmean : Geometric mean
347: 
348:     Notes
349:     -----
350:     The harmonic mean is computed over a single dimension of the input
351:     array, axis=0 by default, or all values in the array if axis=None.
352:     float64 intermediate and return values are used for integer inputs.
353: 
354:     Use masked arrays to ignore any non-finite values in the input or that
355:     arise in the calculations such as Not a Number and infinity.
356: 
357:     Examples
358:     --------
359:     >>> from scipy.stats import hmean
360:     >>> hmean([1, 4])
361:     1.6000000000000001
362:     >>> hmean([1, 2, 3, 4, 5, 6, 7])
363:     2.6997245179063363
364:     '''
365:     if not isinstance(a, np.ndarray):
366:         a = np.array(a, dtype=dtype)
367:     if np.all(a > 0):
368:         # Harmonic mean only defined if greater than zero
369:         if isinstance(a, np.ma.MaskedArray):
370:             size = a.count(axis)
371:         else:
372:             if axis is None:
373:                 a = a.ravel()
374:                 size = a.shape[0]
375:             else:
376:                 size = a.shape[axis]
377:         return size / np.sum(1.0 / a, axis=axis, dtype=dtype)
378:     else:
379:         raise ValueError("Harmonic mean only defined if all elements greater "
380:                          "than zero")
381: 
382: ModeResult = namedtuple('ModeResult', ('mode', 'count'))
383: 
384: 
385: def mode(a, axis=0, nan_policy='propagate'):
386:     '''
387:     Return an array of the modal (most common) value in the passed array.
388: 
389:     If there is more than one such value, only the smallest is returned.
390:     The bin-count for the modal bins is also returned.
391: 
392:     Parameters
393:     ----------
394:     a : array_like
395:         n-dimensional array of which to find mode(s).
396:     axis : int or None, optional
397:         Axis along which to operate. Default is 0. If None, compute over
398:         the whole array `a`.
399:     nan_policy : {'propagate', 'raise', 'omit'}, optional
400:         Defines how to handle when input contains nan. 'propagate' returns nan,
401:         'raise' throws an error, 'omit' performs the calculations ignoring nan
402:         values. Default is 'propagate'.
403: 
404:     Returns
405:     -------
406:     mode : ndarray
407:         Array of modal values.
408:     count : ndarray
409:         Array of counts for each mode.
410: 
411:     Examples
412:     --------
413:     >>> a = np.array([[6, 8, 3, 0],
414:     ...               [3, 2, 1, 7],
415:     ...               [8, 1, 8, 4],
416:     ...               [5, 3, 0, 5],
417:     ...               [4, 7, 5, 9]])
418:     >>> from scipy import stats
419:     >>> stats.mode(a)
420:     (array([[3, 1, 0, 0]]), array([[1, 1, 1, 1]]))
421: 
422:     To get mode of whole array, specify ``axis=None``:
423: 
424:     >>> stats.mode(a, axis=None)
425:     (array([3]), array([3]))
426: 
427:     '''
428:     a, axis = _chk_asarray(a, axis)
429:     if a.size == 0:
430:         return ModeResult(np.array([]), np.array([]))
431: 
432:     contains_nan, nan_policy = _contains_nan(a, nan_policy)
433: 
434:     if contains_nan and nan_policy == 'omit':
435:         a = ma.masked_invalid(a)
436:         return mstats_basic.mode(a, axis)
437: 
438:     scores = np.unique(np.ravel(a))       # get ALL unique values
439:     testshape = list(a.shape)
440:     testshape[axis] = 1
441:     oldmostfreq = np.zeros(testshape, dtype=a.dtype)
442:     oldcounts = np.zeros(testshape, dtype=int)
443:     for score in scores:
444:         template = (a == score)
445:         counts = np.expand_dims(np.sum(template, axis), axis)
446:         mostfrequent = np.where(counts > oldcounts, score, oldmostfreq)
447:         oldcounts = np.maximum(counts, oldcounts)
448:         oldmostfreq = mostfrequent
449: 
450:     return ModeResult(mostfrequent, oldcounts)
451: 
452: 
453: def _mask_to_limits(a, limits, inclusive):
454:     '''Mask an array for values outside of given limits.
455: 
456:     This is primarily a utility function.
457: 
458:     Parameters
459:     ----------
460:     a : array
461:     limits : (float or None, float or None)
462:         A tuple consisting of the (lower limit, upper limit).  Values in the
463:         input array less than the lower limit or greater than the upper limit
464:         will be masked out. None implies no limit.
465:     inclusive : (bool, bool)
466:         A tuple consisting of the (lower flag, upper flag).  These flags
467:         determine whether values exactly equal to lower or upper are allowed.
468: 
469:     Returns
470:     -------
471:     A MaskedArray.
472: 
473:     Raises
474:     ------
475:     A ValueError if there are no values within the given limits.
476:     '''
477:     lower_limit, upper_limit = limits
478:     lower_include, upper_include = inclusive
479:     am = ma.MaskedArray(a)
480:     if lower_limit is not None:
481:         if lower_include:
482:             am = ma.masked_less(am, lower_limit)
483:         else:
484:             am = ma.masked_less_equal(am, lower_limit)
485: 
486:     if upper_limit is not None:
487:         if upper_include:
488:             am = ma.masked_greater(am, upper_limit)
489:         else:
490:             am = ma.masked_greater_equal(am, upper_limit)
491: 
492:     if am.count() == 0:
493:         raise ValueError("No array values within given limits")
494: 
495:     return am
496: 
497: 
498: def tmean(a, limits=None, inclusive=(True, True), axis=None):
499:     '''
500:     Compute the trimmed mean.
501: 
502:     This function finds the arithmetic mean of given values, ignoring values
503:     outside the given `limits`.
504: 
505:     Parameters
506:     ----------
507:     a : array_like
508:         Array of values.
509:     limits : None or (lower limit, upper limit), optional
510:         Values in the input array less than the lower limit or greater than the
511:         upper limit will be ignored.  When limits is None (default), then all
512:         values are used.  Either of the limit values in the tuple can also be
513:         None representing a half-open interval.
514:     inclusive : (bool, bool), optional
515:         A tuple consisting of the (lower flag, upper flag).  These flags
516:         determine whether values exactly equal to the lower or upper limits
517:         are included.  The default value is (True, True).
518:     axis : int or None, optional
519:         Axis along which to compute test. Default is None.
520: 
521:     Returns
522:     -------
523:     tmean : float
524: 
525:     See also
526:     --------
527:     trim_mean : returns mean after trimming a proportion from both tails.
528: 
529:     Examples
530:     --------
531:     >>> from scipy import stats
532:     >>> x = np.arange(20)
533:     >>> stats.tmean(x)
534:     9.5
535:     >>> stats.tmean(x, (3,17))
536:     10.0
537: 
538:     '''
539:     a = asarray(a)
540:     if limits is None:
541:         return np.mean(a, None)
542: 
543:     am = _mask_to_limits(a.ravel(), limits, inclusive)
544:     return am.mean(axis=axis)
545: 
546: 
547: def tvar(a, limits=None, inclusive=(True, True), axis=0, ddof=1):
548:     '''
549:     Compute the trimmed variance.
550: 
551:     This function computes the sample variance of an array of values,
552:     while ignoring values which are outside of given `limits`.
553: 
554:     Parameters
555:     ----------
556:     a : array_like
557:         Array of values.
558:     limits : None or (lower limit, upper limit), optional
559:         Values in the input array less than the lower limit or greater than the
560:         upper limit will be ignored. When limits is None, then all values are
561:         used. Either of the limit values in the tuple can also be None
562:         representing a half-open interval.  The default value is None.
563:     inclusive : (bool, bool), optional
564:         A tuple consisting of the (lower flag, upper flag).  These flags
565:         determine whether values exactly equal to the lower or upper limits
566:         are included.  The default value is (True, True).
567:     axis : int or None, optional
568:         Axis along which to operate. Default is 0. If None, compute over the
569:         whole array `a`.
570:     ddof : int, optional
571:         Delta degrees of freedom.  Default is 1.
572: 
573:     Returns
574:     -------
575:     tvar : float
576:         Trimmed variance.
577: 
578:     Notes
579:     -----
580:     `tvar` computes the unbiased sample variance, i.e. it uses a correction
581:     factor ``n / (n - 1)``.
582: 
583:     Examples
584:     --------
585:     >>> from scipy import stats
586:     >>> x = np.arange(20)
587:     >>> stats.tvar(x)
588:     35.0
589:     >>> stats.tvar(x, (3,17))
590:     20.0
591: 
592:     '''
593:     a = asarray(a)
594:     a = a.astype(float).ravel()
595:     if limits is None:
596:         n = len(a)
597:         return a.var() * n / (n - 1.)
598:     am = _mask_to_limits(a, limits, inclusive)
599:     return np.ma.var(am, ddof=ddof, axis=axis)
600: 
601: 
602: def tmin(a, lowerlimit=None, axis=0, inclusive=True, nan_policy='propagate'):
603:     '''
604:     Compute the trimmed minimum.
605: 
606:     This function finds the miminum value of an array `a` along the
607:     specified axis, but only considering values greater than a specified
608:     lower limit.
609: 
610:     Parameters
611:     ----------
612:     a : array_like
613:         array of values
614:     lowerlimit : None or float, optional
615:         Values in the input array less than the given limit will be ignored.
616:         When lowerlimit is None, then all values are used. The default value
617:         is None.
618:     axis : int or None, optional
619:         Axis along which to operate. Default is 0. If None, compute over the
620:         whole array `a`.
621:     inclusive : {True, False}, optional
622:         This flag determines whether values exactly equal to the lower limit
623:         are included.  The default value is True.
624:     nan_policy : {'propagate', 'raise', 'omit'}, optional
625:         Defines how to handle when input contains nan. 'propagate' returns nan,
626:         'raise' throws an error, 'omit' performs the calculations ignoring nan
627:         values. Default is 'propagate'.
628: 
629:     Returns
630:     -------
631:     tmin : float, int or ndarray
632: 
633:     Examples
634:     --------
635:     >>> from scipy import stats
636:     >>> x = np.arange(20)
637:     >>> stats.tmin(x)
638:     0
639: 
640:     >>> stats.tmin(x, 13)
641:     13
642: 
643:     >>> stats.tmin(x, 13, inclusive=False)
644:     14
645: 
646:     '''
647:     a, axis = _chk_asarray(a, axis)
648:     am = _mask_to_limits(a, (lowerlimit, None), (inclusive, False))
649: 
650:     contains_nan, nan_policy = _contains_nan(am, nan_policy)
651: 
652:     if contains_nan and nan_policy == 'omit':
653:         am = ma.masked_invalid(am)
654: 
655:     res = ma.minimum.reduce(am, axis).data
656:     if res.ndim == 0:
657:         return res[()]
658:     return res
659: 
660: 
661: def tmax(a, upperlimit=None, axis=0, inclusive=True, nan_policy='propagate'):
662:     '''
663:     Compute the trimmed maximum.
664: 
665:     This function computes the maximum value of an array along a given axis,
666:     while ignoring values larger than a specified upper limit.
667: 
668:     Parameters
669:     ----------
670:     a : array_like
671:         array of values
672:     upperlimit : None or float, optional
673:         Values in the input array greater than the given limit will be ignored.
674:         When upperlimit is None, then all values are used. The default value
675:         is None.
676:     axis : int or None, optional
677:         Axis along which to operate. Default is 0. If None, compute over the
678:         whole array `a`.
679:     inclusive : {True, False}, optional
680:         This flag determines whether values exactly equal to the upper limit
681:         are included.  The default value is True.
682:     nan_policy : {'propagate', 'raise', 'omit'}, optional
683:         Defines how to handle when input contains nan. 'propagate' returns nan,
684:         'raise' throws an error, 'omit' performs the calculations ignoring nan
685:         values. Default is 'propagate'.
686: 
687:     Returns
688:     -------
689:     tmax : float, int or ndarray
690: 
691:     Examples
692:     --------
693:     >>> from scipy import stats
694:     >>> x = np.arange(20)
695:     >>> stats.tmax(x)
696:     19
697: 
698:     >>> stats.tmax(x, 13)
699:     13
700: 
701:     >>> stats.tmax(x, 13, inclusive=False)
702:     12
703: 
704:     '''
705:     a, axis = _chk_asarray(a, axis)
706:     am = _mask_to_limits(a, (None, upperlimit), (False, inclusive))
707: 
708:     contains_nan, nan_policy = _contains_nan(am, nan_policy)
709: 
710:     if contains_nan and nan_policy == 'omit':
711:         am = ma.masked_invalid(am)
712: 
713:     res = ma.maximum.reduce(am, axis).data
714:     if res.ndim == 0:
715:         return res[()]
716:     return res
717: 
718: 
719: def tstd(a, limits=None, inclusive=(True, True), axis=0, ddof=1):
720:     '''
721:     Compute the trimmed sample standard deviation.
722: 
723:     This function finds the sample standard deviation of given values,
724:     ignoring values outside the given `limits`.
725: 
726:     Parameters
727:     ----------
728:     a : array_like
729:         array of values
730:     limits : None or (lower limit, upper limit), optional
731:         Values in the input array less than the lower limit or greater than the
732:         upper limit will be ignored. When limits is None, then all values are
733:         used. Either of the limit values in the tuple can also be None
734:         representing a half-open interval.  The default value is None.
735:     inclusive : (bool, bool), optional
736:         A tuple consisting of the (lower flag, upper flag).  These flags
737:         determine whether values exactly equal to the lower or upper limits
738:         are included.  The default value is (True, True).
739:     axis : int or None, optional
740:         Axis along which to operate. Default is 0. If None, compute over the
741:         whole array `a`.
742:     ddof : int, optional
743:         Delta degrees of freedom.  Default is 1.
744: 
745:     Returns
746:     -------
747:     tstd : float
748: 
749:     Notes
750:     -----
751:     `tstd` computes the unbiased sample standard deviation, i.e. it uses a
752:     correction factor ``n / (n - 1)``.
753: 
754:     Examples
755:     --------
756:     >>> from scipy import stats
757:     >>> x = np.arange(20)
758:     >>> stats.tstd(x)
759:     5.9160797830996161
760:     >>> stats.tstd(x, (3,17))
761:     4.4721359549995796
762: 
763:     '''
764:     return np.sqrt(tvar(a, limits, inclusive, axis, ddof))
765: 
766: 
767: def tsem(a, limits=None, inclusive=(True, True), axis=0, ddof=1):
768:     '''
769:     Compute the trimmed standard error of the mean.
770: 
771:     This function finds the standard error of the mean for given
772:     values, ignoring values outside the given `limits`.
773: 
774:     Parameters
775:     ----------
776:     a : array_like
777:         array of values
778:     limits : None or (lower limit, upper limit), optional
779:         Values in the input array less than the lower limit or greater than the
780:         upper limit will be ignored. When limits is None, then all values are
781:         used. Either of the limit values in the tuple can also be None
782:         representing a half-open interval.  The default value is None.
783:     inclusive : (bool, bool), optional
784:         A tuple consisting of the (lower flag, upper flag).  These flags
785:         determine whether values exactly equal to the lower or upper limits
786:         are included.  The default value is (True, True).
787:     axis : int or None, optional
788:         Axis along which to operate. Default is 0. If None, compute over the
789:         whole array `a`.
790:     ddof : int, optional
791:         Delta degrees of freedom.  Default is 1.
792: 
793:     Returns
794:     -------
795:     tsem : float
796: 
797:     Notes
798:     -----
799:     `tsem` uses unbiased sample standard deviation, i.e. it uses a
800:     correction factor ``n / (n - 1)``.
801: 
802:     Examples
803:     --------
804:     >>> from scipy import stats
805:     >>> x = np.arange(20)
806:     >>> stats.tsem(x)
807:     1.3228756555322954
808:     >>> stats.tsem(x, (3,17))
809:     1.1547005383792515
810: 
811:     '''
812:     a = np.asarray(a).ravel()
813:     if limits is None:
814:         return a.std(ddof=ddof) / np.sqrt(a.size)
815: 
816:     am = _mask_to_limits(a, limits, inclusive)
817:     sd = np.sqrt(np.ma.var(am, ddof=ddof, axis=axis))
818:     return sd / np.sqrt(am.count())
819: 
820: 
821: #####################################
822: #              MOMENTS              #
823: #####################################
824: 
825: def moment(a, moment=1, axis=0, nan_policy='propagate'):
826:     r'''
827:     Calculate the nth moment about the mean for a sample.
828: 
829:     A moment is a specific quantitative measure of the shape of a set of
830:     points. It is often used to calculate coefficients of skewness and kurtosis
831:     due to its close relationship with them.
832: 
833: 
834:     Parameters
835:     ----------
836:     a : array_like
837:        data
838:     moment : int or array_like of ints, optional
839:        order of central moment that is returned. Default is 1.
840:     axis : int or None, optional
841:        Axis along which the central moment is computed. Default is 0.
842:        If None, compute over the whole array `a`.
843:     nan_policy : {'propagate', 'raise', 'omit'}, optional
844:         Defines how to handle when input contains nan. 'propagate' returns nan,
845:         'raise' throws an error, 'omit' performs the calculations ignoring nan
846:         values. Default is 'propagate'.
847: 
848:     Returns
849:     -------
850:     n-th central moment : ndarray or float
851:        The appropriate moment along the given axis or over all values if axis
852:        is None. The denominator for the moment calculation is the number of
853:        observations, no degrees of freedom correction is done.
854: 
855:     See also
856:     --------
857:     kurtosis, skew, describe
858: 
859:     Notes
860:     -----
861:     The k-th central moment of a data sample is:
862: 
863:     .. math::
864: 
865:         m_k = \frac{1}{n} \sum_{i = 1}^n (x_i - \bar{x})^k
866: 
867:     Where n is the number of samples and x-bar is the mean. This function uses
868:     exponentiation by squares [1]_ for efficiency.
869: 
870:     References
871:     ----------
872:     .. [1] http://eli.thegreenplace.net/2009/03/21/efficient-integer-exponentiation-algorithms
873: 
874:     Examples
875:     --------
876:     >>> from scipy.stats import moment
877:     >>> moment([1, 2, 3, 4, 5], moment=1)
878:     0.0
879:     >>> moment([1, 2, 3, 4, 5], moment=2)
880:     2.0
881:     '''
882:     a, axis = _chk_asarray(a, axis)
883: 
884:     contains_nan, nan_policy = _contains_nan(a, nan_policy)
885: 
886:     if contains_nan and nan_policy == 'omit':
887:         a = ma.masked_invalid(a)
888:         return mstats_basic.moment(a, moment, axis)
889: 
890:     if a.size == 0:
891:         # empty array, return nan(s) with shape matching `moment`
892:         if np.isscalar(moment):
893:             return np.nan
894:         else:
895:             return np.ones(np.asarray(moment).shape, dtype=np.float64) * np.nan
896: 
897:     # for array_like moment input, return a value for each.
898:     if not np.isscalar(moment):
899:         mmnt = [_moment(a, i, axis) for i in moment]
900:         return np.array(mmnt)
901:     else:
902:         return _moment(a, moment, axis)
903: 
904: 
905: def _moment(a, moment, axis):
906:     if np.abs(moment - np.round(moment)) > 0:
907:         raise ValueError("All moment parameters must be integers")
908: 
909:     if moment == 0:
910:         # When moment equals 0, the result is 1, by definition.
911:         shape = list(a.shape)
912:         del shape[axis]
913:         if shape:
914:             # return an actual array of the appropriate shape
915:             return np.ones(shape, dtype=float)
916:         else:
917:             # the input was 1D, so return a scalar instead of a rank-0 array
918:             return 1.0
919: 
920:     elif moment == 1:
921:         # By definition the first moment about the mean is 0.
922:         shape = list(a.shape)
923:         del shape[axis]
924:         if shape:
925:             # return an actual array of the appropriate shape
926:             return np.zeros(shape, dtype=float)
927:         else:
928:             # the input was 1D, so return a scalar instead of a rank-0 array
929:             return np.float64(0.0)
930:     else:
931:         # Exponentiation by squares: form exponent sequence
932:         n_list = [moment]
933:         current_n = moment
934:         while current_n > 2:
935:             if current_n % 2:
936:                 current_n = (current_n - 1) / 2
937:             else:
938:                 current_n /= 2
939:             n_list.append(current_n)
940: 
941:         # Starting point for exponentiation by squares
942:         a_zero_mean = a - np.expand_dims(np.mean(a, axis), axis)
943:         if n_list[-1] == 1:
944:             s = a_zero_mean.copy()
945:         else:
946:             s = a_zero_mean**2
947: 
948:         # Perform multiplications
949:         for n in n_list[-2::-1]:
950:             s = s**2
951:             if n % 2:
952:                 s *= a_zero_mean
953:         return np.mean(s, axis)
954: 
955: 
956: def variation(a, axis=0, nan_policy='propagate'):
957:     '''
958:     Compute the coefficient of variation, the ratio of the biased standard
959:     deviation to the mean.
960: 
961:     Parameters
962:     ----------
963:     a : array_like
964:         Input array.
965:     axis : int or None, optional
966:         Axis along which to calculate the coefficient of variation. Default
967:         is 0. If None, compute over the whole array `a`.
968:     nan_policy : {'propagate', 'raise', 'omit'}, optional
969:         Defines how to handle when input contains nan. 'propagate' returns nan,
970:         'raise' throws an error, 'omit' performs the calculations ignoring nan
971:         values. Default is 'propagate'.
972: 
973:     Returns
974:     -------
975:     variation : ndarray
976:         The calculated variation along the requested axis.
977: 
978:     References
979:     ----------
980:     .. [1] Zwillinger, D. and Kokoska, S. (2000). CRC Standard
981:        Probability and Statistics Tables and Formulae. Chapman & Hall: New
982:        York. 2000.
983: 
984:     Examples
985:     --------
986:     >>> from scipy.stats import variation
987:     >>> variation([1, 2, 3, 4, 5])
988:     0.47140452079103173
989:     '''
990:     a, axis = _chk_asarray(a, axis)
991: 
992:     contains_nan, nan_policy = _contains_nan(a, nan_policy)
993: 
994:     if contains_nan and nan_policy == 'omit':
995:         a = ma.masked_invalid(a)
996:         return mstats_basic.variation(a, axis)
997: 
998:     return a.std(axis) / a.mean(axis)
999: 
1000: 
1001: def skew(a, axis=0, bias=True, nan_policy='propagate'):
1002:     '''
1003:     Compute the skewness of a data set.
1004: 
1005:     For normally distributed data, the skewness should be about 0. For
1006:     unimodal continuous distributions, a skewness value > 0 means that
1007:     there is more weight in the right tail of the distribution. The
1008:     function `skewtest` can be used to determine if the skewness value
1009:     is close enough to 0, statistically speaking.
1010: 
1011:     Parameters
1012:     ----------
1013:     a : ndarray
1014:         data
1015:     axis : int or None, optional
1016:         Axis along which skewness is calculated. Default is 0.
1017:         If None, compute over the whole array `a`.
1018:     bias : bool, optional
1019:         If False, then the calculations are corrected for statistical bias.
1020:     nan_policy : {'propagate', 'raise', 'omit'}, optional
1021:         Defines how to handle when input contains nan. 'propagate' returns nan,
1022:         'raise' throws an error, 'omit' performs the calculations ignoring nan
1023:         values. Default is 'propagate'.
1024: 
1025:     Returns
1026:     -------
1027:     skewness : ndarray
1028:         The skewness of values along an axis, returning 0 where all values are
1029:         equal.
1030: 
1031:     References
1032:     ----------
1033: 
1034:     .. [1] Zwillinger, D. and Kokoska, S. (2000). CRC Standard
1035:        Probability and Statistics Tables and Formulae. Chapman & Hall: New
1036:        York. 2000.
1037:        Section 2.2.24.1
1038: 
1039:     Examples
1040:     --------
1041:     >>> from scipy.stats import skew
1042:     >>> skew([1, 2, 3, 4, 5])
1043:     0.0
1044:     >>> skew([2, 8, 0, 4, 1, 9, 9, 0])
1045:     0.2650554122698573
1046:     '''
1047:     a, axis = _chk_asarray(a, axis)
1048:     n = a.shape[axis]
1049: 
1050:     contains_nan, nan_policy = _contains_nan(a, nan_policy)
1051: 
1052:     if contains_nan and nan_policy == 'omit':
1053:         a = ma.masked_invalid(a)
1054:         return mstats_basic.skew(a, axis, bias)
1055: 
1056:     m2 = moment(a, 2, axis)
1057:     m3 = moment(a, 3, axis)
1058:     zero = (m2 == 0)
1059:     vals = _lazywhere(~zero, (m2, m3),
1060:                       lambda m2, m3: m3 / m2**1.5,
1061:                       0.)
1062:     if not bias:
1063:         can_correct = (n > 2) & (m2 > 0)
1064:         if can_correct.any():
1065:             m2 = np.extract(can_correct, m2)
1066:             m3 = np.extract(can_correct, m3)
1067:             nval = np.sqrt((n - 1.0) * n) / (n - 2.0) * m3 / m2**1.5
1068:             np.place(vals, can_correct, nval)
1069: 
1070:     if vals.ndim == 0:
1071:         return vals.item()
1072: 
1073:     return vals
1074: 
1075: 
1076: def kurtosis(a, axis=0, fisher=True, bias=True, nan_policy='propagate'):
1077:     '''
1078:     Compute the kurtosis (Fisher or Pearson) of a dataset.
1079: 
1080:     Kurtosis is the fourth central moment divided by the square of the
1081:     variance. If Fisher's definition is used, then 3.0 is subtracted from
1082:     the result to give 0.0 for a normal distribution.
1083: 
1084:     If bias is False then the kurtosis is calculated using k statistics to
1085:     eliminate bias coming from biased moment estimators
1086: 
1087:     Use `kurtosistest` to see if result is close enough to normal.
1088: 
1089:     Parameters
1090:     ----------
1091:     a : array
1092:         data for which the kurtosis is calculated
1093:     axis : int or None, optional
1094:         Axis along which the kurtosis is calculated. Default is 0.
1095:         If None, compute over the whole array `a`.
1096:     fisher : bool, optional
1097:         If True, Fisher's definition is used (normal ==> 0.0). If False,
1098:         Pearson's definition is used (normal ==> 3.0).
1099:     bias : bool, optional
1100:         If False, then the calculations are corrected for statistical bias.
1101:     nan_policy : {'propagate', 'raise', 'omit'}, optional
1102:         Defines how to handle when input contains nan. 'propagate' returns nan,
1103:         'raise' throws an error, 'omit' performs the calculations ignoring nan
1104:         values. Default is 'propagate'.
1105: 
1106:     Returns
1107:     -------
1108:     kurtosis : array
1109:         The kurtosis of values along an axis. If all values are equal,
1110:         return -3 for Fisher's definition and 0 for Pearson's definition.
1111: 
1112:     References
1113:     ----------
1114:     .. [1] Zwillinger, D. and Kokoska, S. (2000). CRC Standard
1115:        Probability and Statistics Tables and Formulae. Chapman & Hall: New
1116:        York. 2000.
1117: 
1118:     Examples
1119:     --------
1120:     >>> from scipy.stats import kurtosis
1121:     >>> kurtosis([1, 2, 3, 4, 5])
1122:     -1.3
1123:     '''
1124:     a, axis = _chk_asarray(a, axis)
1125: 
1126:     contains_nan, nan_policy = _contains_nan(a, nan_policy)
1127: 
1128:     if contains_nan and nan_policy == 'omit':
1129:         a = ma.masked_invalid(a)
1130:         return mstats_basic.kurtosis(a, axis, fisher, bias)
1131: 
1132:     n = a.shape[axis]
1133:     m2 = moment(a, 2, axis)
1134:     m4 = moment(a, 4, axis)
1135:     zero = (m2 == 0)
1136:     olderr = np.seterr(all='ignore')
1137:     try:
1138:         vals = np.where(zero, 0, m4 / m2**2.0)
1139:     finally:
1140:         np.seterr(**olderr)
1141: 
1142:     if not bias:
1143:         can_correct = (n > 3) & (m2 > 0)
1144:         if can_correct.any():
1145:             m2 = np.extract(can_correct, m2)
1146:             m4 = np.extract(can_correct, m4)
1147:             nval = 1.0/(n-2)/(n-3) * ((n**2-1.0)*m4/m2**2.0 - 3*(n-1)**2.0)
1148:             np.place(vals, can_correct, nval + 3.0)
1149: 
1150:     if vals.ndim == 0:
1151:         vals = vals.item()  # array scalar
1152: 
1153:     if fisher:
1154:         return vals - 3
1155:     else:
1156:         return vals
1157: 
1158: DescribeResult = namedtuple('DescribeResult',
1159:                             ('nobs', 'minmax', 'mean', 'variance', 'skewness',
1160:                              'kurtosis'))
1161: 
1162: 
1163: def describe(a, axis=0, ddof=1, bias=True, nan_policy='propagate'):
1164:     '''
1165:     Compute several descriptive statistics of the passed array.
1166: 
1167:     Parameters
1168:     ----------
1169:     a : array_like
1170:        Input data.
1171:     axis : int or None, optional
1172:        Axis along which statistics are calculated. Default is 0.
1173:        If None, compute over the whole array `a`.
1174:     ddof : int, optional
1175:         Delta degrees of freedom (only for variance).  Default is 1.
1176:     bias : bool, optional
1177:         If False, then the skewness and kurtosis calculations are corrected for
1178:         statistical bias.
1179:     nan_policy : {'propagate', 'raise', 'omit'}, optional
1180:         Defines how to handle when input contains nan. 'propagate' returns nan,
1181:         'raise' throws an error, 'omit' performs the calculations ignoring nan
1182:         values. Default is 'propagate'.
1183: 
1184:     Returns
1185:     -------
1186:     nobs : int or ndarray of ints
1187:        Number of observations (length of data along `axis`).
1188:        When 'omit' is chosen as nan_policy, each column is counted separately.
1189:     minmax: tuple of ndarrays or floats
1190:        Minimum and maximum value of data array.
1191:     mean : ndarray or float
1192:        Arithmetic mean of data along axis.
1193:     variance : ndarray or float
1194:        Unbiased variance of the data along axis, denominator is number of
1195:        observations minus one.
1196:     skewness : ndarray or float
1197:        Skewness, based on moment calculations with denominator equal to
1198:        the number of observations, i.e. no degrees of freedom correction.
1199:     kurtosis : ndarray or float
1200:        Kurtosis (Fisher).  The kurtosis is normalized so that it is
1201:        zero for the normal distribution.  No degrees of freedom are used.
1202: 
1203:     See Also
1204:     --------
1205:     skew, kurtosis
1206: 
1207:     Examples
1208:     --------
1209:     >>> from scipy import stats
1210:     >>> a = np.arange(10)
1211:     >>> stats.describe(a)
1212:     DescribeResult(nobs=10, minmax=(0, 9), mean=4.5, variance=9.1666666666666661,
1213:                    skewness=0.0, kurtosis=-1.2242424242424244)
1214:     >>> b = [[1, 2], [3, 4]]
1215:     >>> stats.describe(b)
1216:     DescribeResult(nobs=2, minmax=(array([1, 2]), array([3, 4])),
1217:                    mean=array([ 2., 3.]), variance=array([ 2., 2.]),
1218:                    skewness=array([ 0., 0.]), kurtosis=array([-2., -2.]))
1219: 
1220:     '''
1221:     a, axis = _chk_asarray(a, axis)
1222: 
1223:     contains_nan, nan_policy = _contains_nan(a, nan_policy)
1224: 
1225:     if contains_nan and nan_policy == 'omit':
1226:         a = ma.masked_invalid(a)
1227:         return mstats_basic.describe(a, axis, ddof, bias)
1228: 
1229:     if a.size == 0:
1230:         raise ValueError("The input must not be empty.")
1231:     n = a.shape[axis]
1232:     mm = (np.min(a, axis=axis), np.max(a, axis=axis))
1233:     m = np.mean(a, axis=axis)
1234:     v = np.var(a, axis=axis, ddof=ddof)
1235:     sk = skew(a, axis, bias=bias)
1236:     kurt = kurtosis(a, axis, bias=bias)
1237: 
1238:     return DescribeResult(n, mm, m, v, sk, kurt)
1239: 
1240: #####################################
1241: #         NORMALITY TESTS           #
1242: #####################################
1243: 
1244: SkewtestResult = namedtuple('SkewtestResult', ('statistic', 'pvalue'))
1245: 
1246: 
1247: def skewtest(a, axis=0, nan_policy='propagate'):
1248:     '''
1249:     Test whether the skew is different from the normal distribution.
1250: 
1251:     This function tests the null hypothesis that the skewness of
1252:     the population that the sample was drawn from is the same
1253:     as that of a corresponding normal distribution.
1254: 
1255:     Parameters
1256:     ----------
1257:     a : array
1258:         The data to be tested
1259:     axis : int or None, optional
1260:        Axis along which statistics are calculated. Default is 0.
1261:        If None, compute over the whole array `a`.
1262:     nan_policy : {'propagate', 'raise', 'omit'}, optional
1263:         Defines how to handle when input contains nan. 'propagate' returns nan,
1264:         'raise' throws an error, 'omit' performs the calculations ignoring nan
1265:         values. Default is 'propagate'.
1266: 
1267:     Returns
1268:     -------
1269:     statistic : float
1270:         The computed z-score for this test.
1271:     pvalue : float
1272:         a 2-sided p-value for the hypothesis test
1273: 
1274:     Notes
1275:     -----
1276:     The sample size must be at least 8.
1277: 
1278:     References
1279:     ----------
1280:     .. [1] R. B. D'Agostino, A. J. Belanger and R. B. D'Agostino Jr.,
1281:             "A suggestion for using powerful and informative tests of
1282:             normality", American Statistician 44, pp. 316-321, 1990.
1283: 
1284:     Examples
1285:     --------
1286:     >>> from scipy.stats import skewtest
1287:     >>> skewtest([1, 2, 3, 4, 5, 6, 7, 8])
1288:     SkewtestResult(statistic=1.0108048609177787, pvalue=0.31210983614218968)
1289:     >>> skewtest([2, 8, 0, 4, 1, 9, 9, 0])
1290:     SkewtestResult(statistic=0.44626385374196975, pvalue=0.65540666312754592)
1291:     >>> skewtest([1, 2, 3, 4, 5, 6, 7, 8000])
1292:     SkewtestResult(statistic=3.5717735103604071, pvalue=0.00035457199058231331)
1293:     >>> skewtest([100, 100, 100, 100, 100, 100, 100, 101])
1294:     SkewtestResult(statistic=3.5717766638478072, pvalue=0.000354567720281634)
1295:     '''
1296:     a, axis = _chk_asarray(a, axis)
1297: 
1298:     contains_nan, nan_policy = _contains_nan(a, nan_policy)
1299: 
1300:     if contains_nan and nan_policy == 'omit':
1301:         a = ma.masked_invalid(a)
1302:         return mstats_basic.skewtest(a, axis)
1303: 
1304:     if axis is None:
1305:         a = np.ravel(a)
1306:         axis = 0
1307:     b2 = skew(a, axis)
1308:     n = float(a.shape[axis])
1309:     if n < 8:
1310:         raise ValueError(
1311:             "skewtest is not valid with less than 8 samples; %i samples"
1312:             " were given." % int(n))
1313:     y = b2 * math.sqrt(((n + 1) * (n + 3)) / (6.0 * (n - 2)))
1314:     beta2 = (3.0 * (n**2 + 27*n - 70) * (n+1) * (n+3) /
1315:              ((n-2.0) * (n+5) * (n+7) * (n+9)))
1316:     W2 = -1 + math.sqrt(2 * (beta2 - 1))
1317:     delta = 1 / math.sqrt(0.5 * math.log(W2))
1318:     alpha = math.sqrt(2.0 / (W2 - 1))
1319:     y = np.where(y == 0, 1, y)
1320:     Z = delta * np.log(y / alpha + np.sqrt((y / alpha)**2 + 1))
1321: 
1322:     return SkewtestResult(Z, 2 * distributions.norm.sf(np.abs(Z)))
1323: 
1324: KurtosistestResult = namedtuple('KurtosistestResult', ('statistic', 'pvalue'))
1325: 
1326: 
1327: def kurtosistest(a, axis=0, nan_policy='propagate'):
1328:     '''
1329:     Test whether a dataset has normal kurtosis.
1330: 
1331:     This function tests the null hypothesis that the kurtosis
1332:     of the population from which the sample was drawn is that
1333:     of the normal distribution: ``kurtosis = 3(n-1)/(n+1)``.
1334: 
1335:     Parameters
1336:     ----------
1337:     a : array
1338:         array of the sample data
1339:     axis : int or None, optional
1340:        Axis along which to compute test. Default is 0. If None,
1341:        compute over the whole array `a`.
1342:     nan_policy : {'propagate', 'raise', 'omit'}, optional
1343:         Defines how to handle when input contains nan. 'propagate' returns nan,
1344:         'raise' throws an error, 'omit' performs the calculations ignoring nan
1345:         values. Default is 'propagate'.
1346: 
1347:     Returns
1348:     -------
1349:     statistic : float
1350:         The computed z-score for this test.
1351:     pvalue : float
1352:         The 2-sided p-value for the hypothesis test
1353: 
1354:     Notes
1355:     -----
1356:     Valid only for n>20.  The Z-score is set to 0 for bad entries.
1357:     This function uses the method described in [1]_.
1358: 
1359:     References
1360:     ----------
1361:     .. [1] see e.g. F. J. Anscombe, W. J. Glynn, "Distribution of the kurtosis
1362:        statistic b2 for normal samples", Biometrika, vol. 70, pp. 227-234, 1983.
1363: 
1364:     Examples
1365:     --------
1366:     >>> from scipy.stats import kurtosistest
1367:     >>> kurtosistest(list(range(20)))
1368:     KurtosistestResult(statistic=-1.7058104152122062, pvalue=0.088043383325283484)
1369: 
1370:     >>> np.random.seed(28041990)
1371:     >>> s = np.random.normal(0, 1, 1000)
1372:     >>> kurtosistest(s)
1373:     KurtosistestResult(statistic=1.2317590987707365, pvalue=0.21803908613450895)
1374:     '''
1375:     a, axis = _chk_asarray(a, axis)
1376: 
1377:     contains_nan, nan_policy = _contains_nan(a, nan_policy)
1378: 
1379:     if contains_nan and nan_policy == 'omit':
1380:         a = ma.masked_invalid(a)
1381:         return mstats_basic.kurtosistest(a, axis)
1382: 
1383:     n = float(a.shape[axis])
1384:     if n < 5:
1385:         raise ValueError(
1386:             "kurtosistest requires at least 5 observations; %i observations"
1387:             " were given." % int(n))
1388:     if n < 20:
1389:         warnings.warn("kurtosistest only valid for n>=20 ... continuing "
1390:                       "anyway, n=%i" % int(n))
1391:     b2 = kurtosis(a, axis, fisher=False)
1392: 
1393:     E = 3.0*(n-1) / (n+1)
1394:     varb2 = 24.0*n*(n-2)*(n-3) / ((n+1)*(n+1.)*(n+3)*(n+5))  # [1]_ Eq. 1
1395:     x = (b2-E) / np.sqrt(varb2)  # [1]_ Eq. 4
1396:     # [1]_ Eq. 2:
1397:     sqrtbeta1 = 6.0*(n*n-5*n+2)/((n+7)*(n+9)) * np.sqrt((6.0*(n+3)*(n+5)) /
1398:                                                         (n*(n-2)*(n-3)))
1399:     # [1]_ Eq. 3:
1400:     A = 6.0 + 8.0/sqrtbeta1 * (2.0/sqrtbeta1 + np.sqrt(1+4.0/(sqrtbeta1**2)))
1401:     term1 = 1 - 2/(9.0*A)
1402:     denom = 1 + x*np.sqrt(2/(A-4.0))
1403:     denom = np.where(denom < 0, 99, denom)
1404:     term2 = np.where(denom < 0, term1, np.power((1-2.0/A)/denom, 1/3.0))
1405:     Z = (term1 - term2) / np.sqrt(2/(9.0*A))  # [1]_ Eq. 5
1406:     Z = np.where(denom == 99, 0, Z)
1407:     if Z.ndim == 0:
1408:         Z = Z[()]
1409: 
1410:     # zprob uses upper tail, so Z needs to be positive
1411:     return KurtosistestResult(Z, 2 * distributions.norm.sf(np.abs(Z)))
1412: 
1413: NormaltestResult = namedtuple('NormaltestResult', ('statistic', 'pvalue'))
1414: 
1415: def normaltest(a, axis=0, nan_policy='propagate'):
1416:     '''
1417:     Test whether a sample differs from a normal distribution.
1418: 
1419:     This function tests the null hypothesis that a sample comes
1420:     from a normal distribution.  It is based on D'Agostino and
1421:     Pearson's [1]_, [2]_ test that combines skew and kurtosis to
1422:     produce an omnibus test of normality.
1423: 
1424: 
1425:     Parameters
1426:     ----------
1427:     a : array_like
1428:         The array containing the sample to be tested.
1429:     axis : int or None, optional
1430:         Axis along which to compute test. Default is 0. If None,
1431:         compute over the whole array `a`.
1432:     nan_policy : {'propagate', 'raise', 'omit'}, optional
1433:         Defines how to handle when input contains nan. 'propagate' returns nan,
1434:         'raise' throws an error, 'omit' performs the calculations ignoring nan
1435:         values. Default is 'propagate'.
1436: 
1437:     Returns
1438:     -------
1439:     statistic : float or array
1440:         ``s^2 + k^2``, where ``s`` is the z-score returned by `skewtest` and
1441:         ``k`` is the z-score returned by `kurtosistest`.
1442:     pvalue : float or array
1443:        A 2-sided chi squared probability for the hypothesis test.
1444: 
1445:     References
1446:     ----------
1447:     .. [1] D'Agostino, R. B. (1971), "An omnibus test of normality for
1448:            moderate and large sample size", Biometrika, 58, 341-348
1449: 
1450:     .. [2] D'Agostino, R. and Pearson, E. S. (1973), "Tests for departure from
1451:            normality", Biometrika, 60, 613-622
1452: 
1453:     Examples
1454:     --------
1455:     >>> from scipy import stats
1456:     >>> pts = 1000
1457:     >>> np.random.seed(28041990)
1458:     >>> a = np.random.normal(0, 1, size=pts)
1459:     >>> b = np.random.normal(2, 1, size=pts)
1460:     >>> x = np.concatenate((a, b))
1461:     >>> k2, p = stats.normaltest(x)
1462:     >>> alpha = 1e-3
1463:     >>> print("p = {:g}".format(p))
1464:     p = 3.27207e-11
1465:     >>> if p < alpha:  # null hypothesis: x comes from a normal distribution
1466:     ...     print("The null hypothesis can be rejected")
1467:     ... else:
1468:     ...     print("The null hypothesis cannot be rejected")
1469:     The null hypothesis can be rejected
1470:     '''
1471:     a, axis = _chk_asarray(a, axis)
1472: 
1473:     contains_nan, nan_policy = _contains_nan(a, nan_policy)
1474: 
1475:     if contains_nan and nan_policy == 'omit':
1476:         a = ma.masked_invalid(a)
1477:         return mstats_basic.normaltest(a, axis)
1478: 
1479:     s, _ = skewtest(a, axis)
1480:     k, _ = kurtosistest(a, axis)
1481:     k2 = s*s + k*k
1482: 
1483:     return NormaltestResult(k2, distributions.chi2.sf(k2, 2))
1484: 
1485: 
1486: def jarque_bera(x):
1487:     '''
1488:     Perform the Jarque-Bera goodness of fit test on sample data.
1489: 
1490:     The Jarque-Bera test tests whether the sample data has the skewness and
1491:     kurtosis matching a normal distribution.
1492: 
1493:     Note that this test only works for a large enough number of data samples
1494:     (>2000) as the test statistic asymptotically has a Chi-squared distribution
1495:     with 2 degrees of freedom.
1496: 
1497:     Parameters
1498:     ----------
1499:     x : array_like
1500:         Observations of a random variable.
1501: 
1502:     Returns
1503:     -------
1504:     jb_value : float
1505:         The test statistic.
1506:     p : float
1507:         The p-value for the hypothesis test.
1508: 
1509:     References
1510:     ----------
1511:     .. [1] Jarque, C. and Bera, A. (1980) "Efficient tests for normality,
1512:            homoscedasticity and serial independence of regression residuals",
1513:            6 Econometric Letters 255-259.
1514: 
1515:     Examples
1516:     --------
1517:     >>> from scipy import stats
1518:     >>> np.random.seed(987654321)
1519:     >>> x = np.random.normal(0, 1, 100000)
1520:     >>> y = np.random.rayleigh(1, 100000)
1521:     >>> stats.jarque_bera(x)
1522:     (4.7165707989581342, 0.09458225503041906)
1523:     >>> stats.jarque_bera(y)
1524:     (6713.7098548143422, 0.0)
1525: 
1526:     '''
1527:     x = np.asarray(x)
1528:     n = float(x.size)
1529:     if n == 0:
1530:         raise ValueError('At least one observation is required.')
1531: 
1532:     mu = x.mean()
1533:     diffx = x - mu
1534:     skewness = (1 / n * np.sum(diffx**3)) / (1 / n * np.sum(diffx**2))**(3 / 2.)
1535:     kurtosis = (1 / n * np.sum(diffx**4)) / (1 / n * np.sum(diffx**2))**2
1536:     jb_value = n / 6 * (skewness**2 + (kurtosis - 3)**2 / 4)
1537:     p = 1 - distributions.chi2.cdf(jb_value, 2)
1538: 
1539:     return jb_value, p
1540: 
1541: 
1542: #####################################
1543: #        FREQUENCY FUNCTIONS        #
1544: #####################################
1545: 
1546: def itemfreq(a):
1547:     '''
1548:     Return a 2-D array of item frequencies.
1549: 
1550:     Parameters
1551:     ----------
1552:     a : (N,) array_like
1553:         Input array.
1554: 
1555:     Returns
1556:     -------
1557:     itemfreq : (K, 2) ndarray
1558:         A 2-D frequency table.  Column 1 contains sorted, unique values from
1559:         `a`, column 2 contains their respective counts.
1560: 
1561:     Examples
1562:     --------
1563:     >>> from scipy import stats
1564:     >>> a = np.array([1, 1, 5, 0, 1, 2, 2, 0, 1, 4])
1565:     >>> stats.itemfreq(a)
1566:     array([[ 0.,  2.],
1567:            [ 1.,  4.],
1568:            [ 2.,  2.],
1569:            [ 4.,  1.],
1570:            [ 5.,  1.]])
1571:     >>> np.bincount(a)
1572:     array([2, 4, 2, 0, 1, 1])
1573: 
1574:     >>> stats.itemfreq(a/10.)
1575:     array([[ 0. ,  2. ],
1576:            [ 0.1,  4. ],
1577:            [ 0.2,  2. ],
1578:            [ 0.4,  1. ],
1579:            [ 0.5,  1. ]])
1580: 
1581:     '''
1582:     items, inv = np.unique(a, return_inverse=True)
1583:     freq = np.bincount(inv)
1584:     return np.array([items, freq]).T
1585: 
1586: 
1587: def scoreatpercentile(a, per, limit=(), interpolation_method='fraction',
1588:                       axis=None):
1589:     '''
1590:     Calculate the score at a given percentile of the input sequence.
1591: 
1592:     For example, the score at `per=50` is the median. If the desired quantile
1593:     lies between two data points, we interpolate between them, according to
1594:     the value of `interpolation`. If the parameter `limit` is provided, it
1595:     should be a tuple (lower, upper) of two values.
1596: 
1597:     Parameters
1598:     ----------
1599:     a : array_like
1600:         A 1-D array of values from which to extract score.
1601:     per : array_like
1602:         Percentile(s) at which to extract score.  Values should be in range
1603:         [0,100].
1604:     limit : tuple, optional
1605:         Tuple of two scalars, the lower and upper limits within which to
1606:         compute the percentile. Values of `a` outside
1607:         this (closed) interval will be ignored.
1608:     interpolation_method : {'fraction', 'lower', 'higher'}, optional
1609:         This optional parameter specifies the interpolation method to use,
1610:         when the desired quantile lies between two data points `i` and `j`
1611: 
1612:           - fraction: ``i + (j - i) * fraction`` where ``fraction`` is the
1613:             fractional part of the index surrounded by ``i`` and ``j``.
1614:           - lower: ``i``.
1615:           - higher: ``j``.
1616: 
1617:     axis : int, optional
1618:         Axis along which the percentiles are computed. Default is None. If
1619:         None, compute over the whole array `a`.
1620: 
1621:     Returns
1622:     -------
1623:     score : float or ndarray
1624:         Score at percentile(s).
1625: 
1626:     See Also
1627:     --------
1628:     percentileofscore, numpy.percentile
1629: 
1630:     Notes
1631:     -----
1632:     This function will become obsolete in the future.
1633:     For Numpy 1.9 and higher, `numpy.percentile` provides all the functionality
1634:     that `scoreatpercentile` provides.  And it's significantly faster.
1635:     Therefore it's recommended to use `numpy.percentile` for users that have
1636:     numpy >= 1.9.
1637: 
1638:     Examples
1639:     --------
1640:     >>> from scipy import stats
1641:     >>> a = np.arange(100)
1642:     >>> stats.scoreatpercentile(a, 50)
1643:     49.5
1644: 
1645:     '''
1646:     # adapted from NumPy's percentile function.  When we require numpy >= 1.8,
1647:     # the implementation of this function can be replaced by np.percentile.
1648:     a = np.asarray(a)
1649:     if a.size == 0:
1650:         # empty array, return nan(s) with shape matching `per`
1651:         if np.isscalar(per):
1652:             return np.nan
1653:         else:
1654:             return np.ones(np.asarray(per).shape, dtype=np.float64) * np.nan
1655: 
1656:     if limit:
1657:         a = a[(limit[0] <= a) & (a <= limit[1])]
1658: 
1659:     sorted = np.sort(a, axis=axis)
1660:     if axis is None:
1661:         axis = 0
1662: 
1663:     return _compute_qth_percentile(sorted, per, interpolation_method, axis)
1664: 
1665: 
1666: # handle sequence of per's without calling sort multiple times
1667: def _compute_qth_percentile(sorted, per, interpolation_method, axis):
1668:     if not np.isscalar(per):
1669:         score = [_compute_qth_percentile(sorted, i, interpolation_method, axis)
1670:                  for i in per]
1671:         return np.array(score)
1672: 
1673:     if (per < 0) or (per > 100):
1674:         raise ValueError("percentile must be in the range [0, 100]")
1675: 
1676:     indexer = [slice(None)] * sorted.ndim
1677:     idx = per / 100. * (sorted.shape[axis] - 1)
1678: 
1679:     if int(idx) != idx:
1680:         # round fractional indices according to interpolation method
1681:         if interpolation_method == 'lower':
1682:             idx = int(np.floor(idx))
1683:         elif interpolation_method == 'higher':
1684:             idx = int(np.ceil(idx))
1685:         elif interpolation_method == 'fraction':
1686:             pass  # keep idx as fraction and interpolate
1687:         else:
1688:             raise ValueError("interpolation_method can only be 'fraction', "
1689:                              "'lower' or 'higher'")
1690: 
1691:     i = int(idx)
1692:     if i == idx:
1693:         indexer[axis] = slice(i, i + 1)
1694:         weights = array(1)
1695:         sumval = 1.0
1696:     else:
1697:         indexer[axis] = slice(i, i + 2)
1698:         j = i + 1
1699:         weights = array([(j - idx), (idx - i)], float)
1700:         wshape = [1] * sorted.ndim
1701:         wshape[axis] = 2
1702:         weights.shape = wshape
1703:         sumval = weights.sum()
1704: 
1705:     # Use np.add.reduce (== np.sum but a little faster) to coerce data type
1706:     return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval
1707: 
1708: 
1709: def percentileofscore(a, score, kind='rank'):
1710:     '''
1711:     The percentile rank of a score relative to a list of scores.
1712: 
1713:     A `percentileofscore` of, for example, 80% means that 80% of the
1714:     scores in `a` are below the given score. In the case of gaps or
1715:     ties, the exact definition depends on the optional keyword, `kind`.
1716: 
1717:     Parameters
1718:     ----------
1719:     a : array_like
1720:         Array of scores to which `score` is compared.
1721:     score : int or float
1722:         Score that is compared to the elements in `a`.
1723:     kind : {'rank', 'weak', 'strict', 'mean'}, optional
1724:         This optional parameter specifies the interpretation of the
1725:         resulting score:
1726: 
1727:         - "rank": Average percentage ranking of score.  In case of
1728:                   multiple matches, average the percentage rankings of
1729:                   all matching scores.
1730:         - "weak": This kind corresponds to the definition of a cumulative
1731:                   distribution function.  A percentileofscore of 80%
1732:                   means that 80% of values are less than or equal
1733:                   to the provided score.
1734:         - "strict": Similar to "weak", except that only values that are
1735:                     strictly less than the given score are counted.
1736:         - "mean": The average of the "weak" and "strict" scores, often used in
1737:                   testing.  See
1738: 
1739:                   http://en.wikipedia.org/wiki/Percentile_rank
1740: 
1741:     Returns
1742:     -------
1743:     pcos : float
1744:         Percentile-position of score (0-100) relative to `a`.
1745: 
1746:     See Also
1747:     --------
1748:     numpy.percentile
1749: 
1750:     Examples
1751:     --------
1752:     Three-quarters of the given values lie below a given score:
1753: 
1754:     >>> from scipy import stats
1755:     >>> stats.percentileofscore([1, 2, 3, 4], 3)
1756:     75.0
1757: 
1758:     With multiple matches, note how the scores of the two matches, 0.6
1759:     and 0.8 respectively, are averaged:
1760: 
1761:     >>> stats.percentileofscore([1, 2, 3, 3, 4], 3)
1762:     70.0
1763: 
1764:     Only 2/5 values are strictly less than 3:
1765: 
1766:     >>> stats.percentileofscore([1, 2, 3, 3, 4], 3, kind='strict')
1767:     40.0
1768: 
1769:     But 4/5 values are less than or equal to 3:
1770: 
1771:     >>> stats.percentileofscore([1, 2, 3, 3, 4], 3, kind='weak')
1772:     80.0
1773: 
1774:     The average between the weak and the strict scores is
1775: 
1776:     >>> stats.percentileofscore([1, 2, 3, 3, 4], 3, kind='mean')
1777:     60.0
1778: 
1779:     '''
1780:     a = np.array(a)
1781:     n = len(a)
1782: 
1783:     if kind == 'rank':
1784:         if not np.any(a == score):
1785:             a = np.append(a, score)
1786:             a_len = np.array(list(range(len(a))))
1787:         else:
1788:             a_len = np.array(list(range(len(a)))) + 1.0
1789: 
1790:         a = np.sort(a)
1791:         idx = [a == score]
1792:         pct = (np.mean(a_len[idx]) / n) * 100.0
1793:         return pct
1794: 
1795:     elif kind == 'strict':
1796:         return np.sum(a < score) / float(n) * 100
1797:     elif kind == 'weak':
1798:         return np.sum(a <= score) / float(n) * 100
1799:     elif kind == 'mean':
1800:         return (np.sum(a < score) + np.sum(a <= score)) * 50 / float(n)
1801:     else:
1802:         raise ValueError("kind can only be 'rank', 'strict', 'weak' or 'mean'")
1803: 
1804: 
1805: HistogramResult = namedtuple('HistogramResult',
1806:                              ('count', 'lowerlimit', 'binsize', 'extrapoints'))
1807: 
1808: 
1809: def _histogram(a, numbins=10, defaultlimits=None, weights=None, printextras=False):
1810:     '''
1811:     Separate the range into several bins and return the number of instances
1812:     in each bin.
1813: 
1814:     Parameters
1815:     ----------
1816:     a : array_like
1817:         Array of scores which will be put into bins.
1818:     numbins : int, optional
1819:         The number of bins to use for the histogram. Default is 10.
1820:     defaultlimits : tuple (lower, upper), optional
1821:         The lower and upper values for the range of the histogram.
1822:         If no value is given, a range slightly larger than the range of the
1823:         values in a is used. Specifically ``(a.min() - s, a.max() + s)``,
1824:         where ``s = (1/2)(a.max() - a.min()) / (numbins - 1)``.
1825:     weights : array_like, optional
1826:         The weights for each value in `a`. Default is None, which gives each
1827:         value a weight of 1.0
1828:     printextras : bool, optional
1829:         If True, if there are extra points (i.e. the points that fall outside
1830:         the bin limits) a warning is raised saying how many of those points
1831:         there are.  Default is False.
1832: 
1833:     Returns
1834:     -------
1835:     count : ndarray
1836:         Number of points (or sum of weights) in each bin.
1837:     lowerlimit : float
1838:         Lowest value of histogram, the lower limit of the first bin.
1839:     binsize : float
1840:         The size of the bins (all bins have the same size).
1841:     extrapoints : int
1842:         The number of points outside the range of the histogram.
1843: 
1844:     See Also
1845:     --------
1846:     numpy.histogram
1847: 
1848:     Notes
1849:     -----
1850:     This histogram is based on numpy's histogram but has a larger range by
1851:     default if default limits is not set.
1852: 
1853:     '''
1854:     a = np.ravel(a)
1855:     if defaultlimits is None:
1856:         if a.size == 0:
1857:             # handle empty arrays. Undetermined range, so use 0-1.
1858:             defaultlimits = (0, 1)
1859:         else:
1860:             # no range given, so use values in `a`
1861:             data_min = a.min()
1862:             data_max = a.max()
1863:             # Have bins extend past min and max values slightly
1864:             s = (data_max - data_min) / (2. * (numbins - 1.))
1865:             defaultlimits = (data_min - s, data_max + s)
1866: 
1867:     # use numpy's histogram method to compute bins
1868:     hist, bin_edges = np.histogram(a, bins=numbins, range=defaultlimits,
1869:                                    weights=weights)
1870:     # hist are not always floats, convert to keep with old output
1871:     hist = np.array(hist, dtype=float)
1872:     # fixed width for bins is assumed, as numpy's histogram gives
1873:     # fixed width bins for int values for 'bins'
1874:     binsize = bin_edges[1] - bin_edges[0]
1875:     # calculate number of extra points
1876:     extrapoints = len([v for v in a
1877:                        if defaultlimits[0] > v or v > defaultlimits[1]])
1878:     if extrapoints > 0 and printextras:
1879:         warnings.warn("Points outside given histogram range = %s"
1880:                       % extrapoints)
1881: 
1882:     return HistogramResult(hist, defaultlimits[0], binsize, extrapoints)
1883: 
1884: 
1885: CumfreqResult = namedtuple('CumfreqResult',
1886:                            ('cumcount', 'lowerlimit', 'binsize',
1887:                             'extrapoints'))
1888: 
1889: 
1890: def cumfreq(a, numbins=10, defaultreallimits=None, weights=None):
1891:     '''
1892:     Return a cumulative frequency histogram, using the histogram function.
1893: 
1894:     A cumulative histogram is a mapping that counts the cumulative number of
1895:     observations in all of the bins up to the specified bin.
1896: 
1897:     Parameters
1898:     ----------
1899:     a : array_like
1900:         Input array.
1901:     numbins : int, optional
1902:         The number of bins to use for the histogram. Default is 10.
1903:     defaultreallimits : tuple (lower, upper), optional
1904:         The lower and upper values for the range of the histogram.
1905:         If no value is given, a range slightly larger than the range of the
1906:         values in `a` is used. Specifically ``(a.min() - s, a.max() + s)``,
1907:         where ``s = (1/2)(a.max() - a.min()) / (numbins - 1)``.
1908:     weights : array_like, optional
1909:         The weights for each value in `a`. Default is None, which gives each
1910:         value a weight of 1.0
1911: 
1912:     Returns
1913:     -------
1914:     cumcount : ndarray
1915:         Binned values of cumulative frequency.
1916:     lowerlimit : float
1917:         Lower real limit
1918:     binsize : float
1919:         Width of each bin.
1920:     extrapoints : int
1921:         Extra points.
1922: 
1923:     Examples
1924:     --------
1925:     >>> import matplotlib.pyplot as plt
1926:     >>> from scipy import stats
1927:     >>> x = [1, 4, 2, 1, 3, 1]
1928:     >>> res = stats.cumfreq(x, numbins=4, defaultreallimits=(1.5, 5))
1929:     >>> res.cumcount
1930:     array([ 1.,  2.,  3.,  3.])
1931:     >>> res.extrapoints
1932:     3
1933: 
1934:     Create a normal distribution with 1000 random values
1935: 
1936:     >>> rng = np.random.RandomState(seed=12345)
1937:     >>> samples = stats.norm.rvs(size=1000, random_state=rng)
1938: 
1939:     Calculate cumulative frequencies
1940: 
1941:     >>> res = stats.cumfreq(samples, numbins=25)
1942: 
1943:     Calculate space of values for x
1944: 
1945:     >>> x = res.lowerlimit + np.linspace(0, res.binsize*res.cumcount.size,
1946:     ...                                  res.cumcount.size)
1947: 
1948:     Plot histogram and cumulative histogram
1949: 
1950:     >>> fig = plt.figure(figsize=(10, 4))
1951:     >>> ax1 = fig.add_subplot(1, 2, 1)
1952:     >>> ax2 = fig.add_subplot(1, 2, 2)
1953:     >>> ax1.hist(samples, bins=25)
1954:     >>> ax1.set_title('Histogram')
1955:     >>> ax2.bar(x, res.cumcount, width=res.binsize)
1956:     >>> ax2.set_title('Cumulative histogram')
1957:     >>> ax2.set_xlim([x.min(), x.max()])
1958: 
1959:     >>> plt.show()
1960: 
1961:     '''
1962:     h, l, b, e = _histogram(a, numbins, defaultreallimits, weights=weights)
1963:     cumhist = np.cumsum(h * 1, axis=0)
1964:     return CumfreqResult(cumhist, l, b, e)
1965: 
1966: 
1967: RelfreqResult = namedtuple('RelfreqResult',
1968:                            ('frequency', 'lowerlimit', 'binsize',
1969:                             'extrapoints'))
1970: 
1971: 
1972: def relfreq(a, numbins=10, defaultreallimits=None, weights=None):
1973:     '''
1974:     Return a relative frequency histogram, using the histogram function.
1975: 
1976:     A relative frequency  histogram is a mapping of the number of
1977:     observations in each of the bins relative to the total of observations.
1978: 
1979:     Parameters
1980:     ----------
1981:     a : array_like
1982:         Input array.
1983:     numbins : int, optional
1984:         The number of bins to use for the histogram. Default is 10.
1985:     defaultreallimits : tuple (lower, upper), optional
1986:         The lower and upper values for the range of the histogram.
1987:         If no value is given, a range slightly larger than the range of the
1988:         values in a is used. Specifically ``(a.min() - s, a.max() + s)``,
1989:         where ``s = (1/2)(a.max() - a.min()) / (numbins - 1)``.
1990:     weights : array_like, optional
1991:         The weights for each value in `a`. Default is None, which gives each
1992:         value a weight of 1.0
1993: 
1994:     Returns
1995:     -------
1996:     frequency : ndarray
1997:         Binned values of relative frequency.
1998:     lowerlimit : float
1999:         Lower real limit
2000:     binsize : float
2001:         Width of each bin.
2002:     extrapoints : int
2003:         Extra points.
2004: 
2005:     Examples
2006:     --------
2007:     >>> import matplotlib.pyplot as plt
2008:     >>> from scipy import stats
2009:     >>> a = np.array([2, 4, 1, 2, 3, 2])
2010:     >>> res = stats.relfreq(a, numbins=4)
2011:     >>> res.frequency
2012:     array([ 0.16666667, 0.5       , 0.16666667,  0.16666667])
2013:     >>> np.sum(res.frequency)  # relative frequencies should add up to 1
2014:     1.0
2015: 
2016:     Create a normal distribution with 1000 random values
2017: 
2018:     >>> rng = np.random.RandomState(seed=12345)
2019:     >>> samples = stats.norm.rvs(size=1000, random_state=rng)
2020: 
2021:     Calculate relative frequencies
2022: 
2023:     >>> res = stats.relfreq(samples, numbins=25)
2024: 
2025:     Calculate space of values for x
2026: 
2027:     >>> x = res.lowerlimit + np.linspace(0, res.binsize*res.frequency.size,
2028:     ...                                  res.frequency.size)
2029: 
2030:     Plot relative frequency histogram
2031: 
2032:     >>> fig = plt.figure(figsize=(5, 4))
2033:     >>> ax = fig.add_subplot(1, 1, 1)
2034:     >>> ax.bar(x, res.frequency, width=res.binsize)
2035:     >>> ax.set_title('Relative frequency histogram')
2036:     >>> ax.set_xlim([x.min(), x.max()])
2037: 
2038:     >>> plt.show()
2039: 
2040:     '''
2041:     a = np.asanyarray(a)
2042:     h, l, b, e = _histogram(a, numbins, defaultreallimits, weights=weights)
2043:     h = h / float(a.shape[0])
2044: 
2045:     return RelfreqResult(h, l, b, e)
2046: 
2047: 
2048: #####################################
2049: #        VARIABILITY FUNCTIONS      #
2050: #####################################
2051: 
2052: def obrientransform(*args):
2053:     '''
2054:     Compute the O'Brien transform on input data (any number of arrays).
2055: 
2056:     Used to test for homogeneity of variance prior to running one-way stats.
2057:     Each array in ``*args`` is one level of a factor.
2058:     If `f_oneway` is run on the transformed data and found significant,
2059:     the variances are unequal.  From Maxwell and Delaney [1]_, p.112.
2060: 
2061:     Parameters
2062:     ----------
2063:     args : tuple of array_like
2064:         Any number of arrays.
2065: 
2066:     Returns
2067:     -------
2068:     obrientransform : ndarray
2069:         Transformed data for use in an ANOVA.  The first dimension
2070:         of the result corresponds to the sequence of transformed
2071:         arrays.  If the arrays given are all 1-D of the same length,
2072:         the return value is a 2-D array; otherwise it is a 1-D array
2073:         of type object, with each element being an ndarray.
2074: 
2075:     References
2076:     ----------
2077:     .. [1] S. E. Maxwell and H. D. Delaney, "Designing Experiments and
2078:            Analyzing Data: A Model Comparison Perspective", Wadsworth, 1990.
2079: 
2080:     Examples
2081:     --------
2082:     We'll test the following data sets for differences in their variance.
2083: 
2084:     >>> x = [10, 11, 13, 9, 7, 12, 12, 9, 10]
2085:     >>> y = [13, 21, 5, 10, 8, 14, 10, 12, 7, 15]
2086: 
2087:     Apply the O'Brien transform to the data.
2088: 
2089:     >>> from scipy.stats import obrientransform
2090:     >>> tx, ty = obrientransform(x, y)
2091: 
2092:     Use `scipy.stats.f_oneway` to apply a one-way ANOVA test to the
2093:     transformed data.
2094: 
2095:     >>> from scipy.stats import f_oneway
2096:     >>> F, p = f_oneway(tx, ty)
2097:     >>> p
2098:     0.1314139477040335
2099: 
2100:     If we require that ``p < 0.05`` for significance, we cannot conclude
2101:     that the variances are different.
2102:     '''
2103:     TINY = np.sqrt(np.finfo(float).eps)
2104: 
2105:     # `arrays` will hold the transformed arguments.
2106:     arrays = []
2107: 
2108:     for arg in args:
2109:         a = np.asarray(arg)
2110:         n = len(a)
2111:         mu = np.mean(a)
2112:         sq = (a - mu)**2
2113:         sumsq = sq.sum()
2114: 
2115:         # The O'Brien transform.
2116:         t = ((n - 1.5) * n * sq - 0.5 * sumsq) / ((n - 1) * (n - 2))
2117: 
2118:         # Check that the mean of the transformed data is equal to the
2119:         # original variance.
2120:         var = sumsq / (n - 1)
2121:         if abs(var - np.mean(t)) > TINY:
2122:             raise ValueError('Lack of convergence in obrientransform.')
2123: 
2124:         arrays.append(t)
2125: 
2126:     return np.array(arrays)
2127: 
2128: 
2129: def sem(a, axis=0, ddof=1, nan_policy='propagate'):
2130:     '''
2131:     Calculate the standard error of the mean (or standard error of
2132:     measurement) of the values in the input array.
2133: 
2134:     Parameters
2135:     ----------
2136:     a : array_like
2137:         An array containing the values for which the standard error is
2138:         returned.
2139:     axis : int or None, optional
2140:         Axis along which to operate. Default is 0. If None, compute over
2141:         the whole array `a`.
2142:     ddof : int, optional
2143:         Delta degrees-of-freedom. How many degrees of freedom to adjust
2144:         for bias in limited samples relative to the population estimate
2145:         of variance. Defaults to 1.
2146:     nan_policy : {'propagate', 'raise', 'omit'}, optional
2147:         Defines how to handle when input contains nan. 'propagate' returns nan,
2148:         'raise' throws an error, 'omit' performs the calculations ignoring nan
2149:         values. Default is 'propagate'.
2150: 
2151:     Returns
2152:     -------
2153:     s : ndarray or float
2154:         The standard error of the mean in the sample(s), along the input axis.
2155: 
2156:     Notes
2157:     -----
2158:     The default value for `ddof` is different to the default (0) used by other
2159:     ddof containing routines, such as np.std and np.nanstd.
2160: 
2161:     Examples
2162:     --------
2163:     Find standard error along the first axis:
2164: 
2165:     >>> from scipy import stats
2166:     >>> a = np.arange(20).reshape(5,4)
2167:     >>> stats.sem(a)
2168:     array([ 2.8284,  2.8284,  2.8284,  2.8284])
2169: 
2170:     Find standard error across the whole array, using n degrees of freedom:
2171: 
2172:     >>> stats.sem(a, axis=None, ddof=0)
2173:     1.2893796958227628
2174: 
2175:     '''
2176:     a, axis = _chk_asarray(a, axis)
2177: 
2178:     contains_nan, nan_policy = _contains_nan(a, nan_policy)
2179: 
2180:     if contains_nan and nan_policy == 'omit':
2181:         a = ma.masked_invalid(a)
2182:         return mstats_basic.sem(a, axis, ddof)
2183: 
2184:     n = a.shape[axis]
2185:     s = np.std(a, axis=axis, ddof=ddof) / np.sqrt(n)
2186:     return s
2187: 
2188: 
2189: def zscore(a, axis=0, ddof=0):
2190:     '''
2191:     Calculate the z score of each value in the sample, relative to the
2192:     sample mean and standard deviation.
2193: 
2194:     Parameters
2195:     ----------
2196:     a : array_like
2197:         An array like object containing the sample data.
2198:     axis : int or None, optional
2199:         Axis along which to operate. Default is 0. If None, compute over
2200:         the whole array `a`.
2201:     ddof : int, optional
2202:         Degrees of freedom correction in the calculation of the
2203:         standard deviation. Default is 0.
2204: 
2205:     Returns
2206:     -------
2207:     zscore : array_like
2208:         The z-scores, standardized by mean and standard deviation of
2209:         input array `a`.
2210: 
2211:     Notes
2212:     -----
2213:     This function preserves ndarray subclasses, and works also with
2214:     matrices and masked arrays (it uses `asanyarray` instead of
2215:     `asarray` for parameters).
2216: 
2217:     Examples
2218:     --------
2219:     >>> a = np.array([ 0.7972,  0.0767,  0.4383,  0.7866,  0.8091,
2220:     ...                0.1954,  0.6307,  0.6599,  0.1065,  0.0508])
2221:     >>> from scipy import stats
2222:     >>> stats.zscore(a)
2223:     array([ 1.1273, -1.247 , -0.0552,  1.0923,  1.1664, -0.8559,  0.5786,
2224:             0.6748, -1.1488, -1.3324])
2225: 
2226:     Computing along a specified axis, using n-1 degrees of freedom
2227:     (``ddof=1``) to calculate the standard deviation:
2228: 
2229:     >>> b = np.array([[ 0.3148,  0.0478,  0.6243,  0.4608],
2230:     ...               [ 0.7149,  0.0775,  0.6072,  0.9656],
2231:     ...               [ 0.6341,  0.1403,  0.9759,  0.4064],
2232:     ...               [ 0.5918,  0.6948,  0.904 ,  0.3721],
2233:     ...               [ 0.0921,  0.2481,  0.1188,  0.1366]])
2234:     >>> stats.zscore(b, axis=1, ddof=1)
2235:     array([[-0.19264823, -1.28415119,  1.07259584,  0.40420358],
2236:            [ 0.33048416, -1.37380874,  0.04251374,  1.00081084],
2237:            [ 0.26796377, -1.12598418,  1.23283094, -0.37481053],
2238:            [-0.22095197,  0.24468594,  1.19042819, -1.21416216],
2239:            [-0.82780366,  1.4457416 , -0.43867764, -0.1792603 ]])
2240:     '''
2241:     a = np.asanyarray(a)
2242:     mns = a.mean(axis=axis)
2243:     sstd = a.std(axis=axis, ddof=ddof)
2244:     if axis and mns.ndim < a.ndim:
2245:         return ((a - np.expand_dims(mns, axis=axis)) /
2246:                 np.expand_dims(sstd, axis=axis))
2247:     else:
2248:         return (a - mns) / sstd
2249: 
2250: 
2251: def zmap(scores, compare, axis=0, ddof=0):
2252:     '''
2253:     Calculate the relative z-scores.
2254: 
2255:     Return an array of z-scores, i.e., scores that are standardized to
2256:     zero mean and unit variance, where mean and variance are calculated
2257:     from the comparison array.
2258: 
2259:     Parameters
2260:     ----------
2261:     scores : array_like
2262:         The input for which z-scores are calculated.
2263:     compare : array_like
2264:         The input from which the mean and standard deviation of the
2265:         normalization are taken; assumed to have the same dimension as
2266:         `scores`.
2267:     axis : int or None, optional
2268:         Axis over which mean and variance of `compare` are calculated.
2269:         Default is 0. If None, compute over the whole array `scores`.
2270:     ddof : int, optional
2271:         Degrees of freedom correction in the calculation of the
2272:         standard deviation. Default is 0.
2273: 
2274:     Returns
2275:     -------
2276:     zscore : array_like
2277:         Z-scores, in the same shape as `scores`.
2278: 
2279:     Notes
2280:     -----
2281:     This function preserves ndarray subclasses, and works also with
2282:     matrices and masked arrays (it uses `asanyarray` instead of
2283:     `asarray` for parameters).
2284: 
2285:     Examples
2286:     --------
2287:     >>> from scipy.stats import zmap
2288:     >>> a = [0.5, 2.0, 2.5, 3]
2289:     >>> b = [0, 1, 2, 3, 4]
2290:     >>> zmap(a, b)
2291:     array([-1.06066017,  0.        ,  0.35355339,  0.70710678])
2292:     '''
2293:     scores, compare = map(np.asanyarray, [scores, compare])
2294:     mns = compare.mean(axis=axis)
2295:     sstd = compare.std(axis=axis, ddof=ddof)
2296:     if axis and mns.ndim < compare.ndim:
2297:         return ((scores - np.expand_dims(mns, axis=axis)) /
2298:                 np.expand_dims(sstd, axis=axis))
2299:     else:
2300:         return (scores - mns) / sstd
2301: 
2302: 
2303: # Private dictionary initialized only once at module level
2304: # See https://en.wikipedia.org/wiki/Robust_measures_of_scale
2305: _scale_conversions = {'raw': 1.0,
2306:                       'normal': special.erfinv(0.5) * 2.0 * math.sqrt(2.0)}
2307: 
2308: 
2309: def iqr(x, axis=None, rng=(25, 75), scale='raw', nan_policy='propagate',
2310:         interpolation='linear', keepdims=False):
2311:     '''
2312:     Compute the interquartile range of the data along the specified axis.
2313: 
2314:     The interquartile range (IQR) is the difference between the 75th and
2315:     25th percentile of the data. It is a measure of the dispersion
2316:     similar to standard deviation or variance, but is much more robust
2317:     against outliers [2]_.
2318: 
2319:     The ``rng`` parameter allows this function to compute other
2320:     percentile ranges than the actual IQR. For example, setting
2321:     ``rng=(0, 100)`` is equivalent to `numpy.ptp`.
2322: 
2323:     The IQR of an empty array is `np.nan`.
2324: 
2325:     .. versionadded:: 0.18.0
2326: 
2327:     Parameters
2328:     ----------
2329:     x : array_like
2330:         Input array or object that can be converted to an array.
2331:     axis : int or sequence of int, optional
2332:         Axis along which the range is computed. The default is to
2333:         compute the IQR for the entire array.
2334:     rng : Two-element sequence containing floats in range of [0,100] optional
2335:         Percentiles over which to compute the range. Each must be
2336:         between 0 and 100, inclusive. The default is the true IQR:
2337:         `(25, 75)`. The order of the elements is not important.
2338:     scale : scalar or str, optional
2339:         The numerical value of scale will be divided out of the final
2340:         result. The following string values are recognized:
2341: 
2342:           'raw' : No scaling, just return the raw IQR.
2343:           'normal' : Scale by :math:`2 \\sqrt{2} erf^{-1}(\\frac{1}{2}) \\approx 1.349`.
2344: 
2345:         The default is 'raw'. Array-like scale is also allowed, as long
2346:         as it broadcasts correctly to the output such that
2347:         ``out / scale`` is a valid operation. The output dimensions
2348:         depend on the input array, `x`, the `axis` argument, and the
2349:         `keepdims` flag.
2350:     nan_policy : {'propagate', 'raise', 'omit'}, optional
2351:         Defines how to handle when input contains nan. 'propagate'
2352:         returns nan, 'raise' throws an error, 'omit' performs the
2353:         calculations ignoring nan values. Default is 'propagate'.
2354:     interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}, optional
2355:         Specifies the interpolation method to use when the percentile
2356:         boundaries lie between two data points `i` and `j`:
2357: 
2358:           * 'linear' : `i + (j - i) * fraction`, where `fraction` is the
2359:               fractional part of the index surrounded by `i` and `j`.
2360:           * 'lower' : `i`.
2361:           * 'higher' : `j`.
2362:           * 'nearest' : `i` or `j` whichever is nearest.
2363:           * 'midpoint' : `(i + j) / 2`.
2364: 
2365:         Default is 'linear'.
2366:     keepdims : bool, optional
2367:         If this is set to `True`, the reduced axes are left in the
2368:         result as dimensions with size one. With this option, the result
2369:         will broadcast correctly against the original array `x`.
2370: 
2371:     Returns
2372:     -------
2373:     iqr : scalar or ndarray
2374:         If ``axis=None``, a scalar is returned. If the input contains
2375:         integers or floats of smaller precision than ``np.float64``, then the
2376:         output data-type is ``np.float64``. Otherwise, the output data-type is
2377:         the same as that of the input.
2378: 
2379:     See Also
2380:     --------
2381:     numpy.std, numpy.var
2382: 
2383:     Examples
2384:     --------
2385:     >>> from scipy.stats import iqr
2386:     >>> x = np.array([[10, 7, 4], [3, 2, 1]])
2387:     >>> x
2388:     array([[10,  7,  4],
2389:            [ 3,  2,  1]])
2390:     >>> iqr(x)
2391:     4.0
2392:     >>> iqr(x, axis=0)
2393:     array([ 3.5,  2.5,  1.5])
2394:     >>> iqr(x, axis=1)
2395:     array([ 3.,  1.])
2396:     >>> iqr(x, axis=1, keepdims=True)
2397:     array([[ 3.],
2398:            [ 1.]])
2399: 
2400:     Notes
2401:     -----
2402:     This function is heavily dependent on the version of `numpy` that is
2403:     installed. Versions greater than 1.11.0b3 are highly recommended, as they
2404:     include a number of enhancements and fixes to `numpy.percentile` and
2405:     `numpy.nanpercentile` that affect the operation of this function. The
2406:     following modifications apply:
2407: 
2408:     Below 1.10.0 : `nan_policy` is poorly defined.
2409:         The default behavior of `numpy.percentile` is used for 'propagate'. This
2410:         is a hybrid of 'omit' and 'propagate' that mostly yields a skewed
2411:         version of 'omit' since NaNs are sorted to the end of the data. A
2412:         warning is raised if there are NaNs in the data.
2413:     Below 1.9.0: `numpy.nanpercentile` does not exist.
2414:         This means that `numpy.percentile` is used regardless of `nan_policy`
2415:         and a warning is issued. See previous item for a description of the
2416:         behavior.
2417:     Below 1.9.0: `keepdims` and `interpolation` are not supported.
2418:         The keywords get ignored with a warning if supplied with non-default
2419:         values. However, multiple axes are still supported.
2420: 
2421:     References
2422:     ----------
2423:     .. [1] "Interquartile range" https://en.wikipedia.org/wiki/Interquartile_range
2424:     .. [2] "Robust measures of scale" https://en.wikipedia.org/wiki/Robust_measures_of_scale
2425:     .. [3] "Quantile" https://en.wikipedia.org/wiki/Quantile
2426:     '''
2427:     x = asarray(x)
2428: 
2429:     # This check prevents percentile from raising an error later. Also, it is
2430:     # consistent with `np.var` and `np.std`.
2431:     if not x.size:
2432:         return np.nan
2433: 
2434:     # An error may be raised here, so fail-fast, before doing lengthy
2435:     # computations, even though `scale` is not used until later
2436:     if isinstance(scale, string_types):
2437:         scale_key = scale.lower()
2438:         if scale_key not in _scale_conversions:
2439:             raise ValueError("{0} not a valid scale for `iqr`".format(scale))
2440:         scale = _scale_conversions[scale_key]
2441: 
2442:     # Select the percentile function to use based on nans and policy
2443:     contains_nan, nan_policy = _contains_nan(x, nan_policy)
2444: 
2445:     if contains_nan and nan_policy == 'omit':
2446:         percentile_func = _iqr_nanpercentile
2447:     else:
2448:         percentile_func = _iqr_percentile
2449: 
2450:     if len(rng) != 2:
2451:         raise TypeError("quantile range must be two element sequence")
2452: 
2453:     rng = sorted(rng)
2454:     pct = percentile_func(x, rng, axis=axis, interpolation=interpolation,
2455:                           keepdims=keepdims, contains_nan=contains_nan)
2456:     out = np.subtract(pct[1], pct[0])
2457: 
2458:     if scale != 1.0:
2459:         out /= scale
2460: 
2461:     return out
2462: 
2463: 
2464: def _iqr_percentile(x, q, axis=None, interpolation='linear', keepdims=False, contains_nan=False):
2465:     '''
2466:     Private wrapper that works around older versions of `numpy`.
2467: 
2468:     While this function is pretty much necessary for the moment, it
2469:     should be removed as soon as the minimum supported numpy version
2470:     allows.
2471:     '''
2472:     if contains_nan and NumpyVersion(np.__version__) < '1.10.0a':
2473:         # I see no way to avoid the version check to ensure that the corrected
2474:         # NaN behavior has been implemented except to call `percentile` on a
2475:         # small array.
2476:         msg = "Keyword nan_policy='propagate' not correctly supported for " \
2477:               "numpy versions < 1.10.x. The default behavior of " \
2478:               "`numpy.percentile` will be used."
2479:         warnings.warn(msg, RuntimeWarning)
2480: 
2481:     try:
2482:         # For older versions of numpy, there are two things that can cause a
2483:         # problem here: missing keywords and non-scalar axis. The former can be
2484:         # partially handled with a warning, the latter can be handled fully by
2485:         # hacking in an implementation similar to numpy's function for
2486:         # providing multi-axis functionality
2487:         # (`numpy.lib.function_base._ureduce` for the curious).
2488:         result = np.percentile(x, q, axis=axis, keepdims=keepdims,
2489:                                interpolation=interpolation)
2490:     except TypeError:
2491:         if interpolation != 'linear' or keepdims:
2492:             # At time or writing, this means np.__version__ < 1.9.0
2493:             warnings.warn("Keywords interpolation and keepdims not supported "
2494:                           "for your version of numpy", RuntimeWarning)
2495:         try:
2496:             # Special processing if axis is an iterable
2497:             original_size = len(axis)
2498:         except TypeError:
2499:             # Axis is a scalar at this point
2500:             pass
2501:         else:
2502:             axis = np.unique(np.asarray(axis) % x.ndim)
2503:             if original_size > axis.size:
2504:                 # mimic numpy if axes are duplicated
2505:                 raise ValueError("duplicate value in axis")
2506:             if axis.size == x.ndim:
2507:                 # axis includes all axes: revert to None
2508:                 axis = None
2509:             elif axis.size == 1:
2510:                 # no rolling necessary
2511:                 axis = axis[0]
2512:             else:
2513:                 # roll multiple axes to the end and flatten that part out
2514:                 for ax in axis[::-1]:
2515:                     x = np.rollaxis(x, ax, x.ndim)
2516:                 x = x.reshape(x.shape[:-axis.size] +
2517:                               (np.prod(x.shape[-axis.size:]),))
2518:                 axis = -1
2519:         result = np.percentile(x, q, axis=axis)
2520: 
2521:     return result
2522: 
2523: 
2524: def _iqr_nanpercentile(x, q, axis=None, interpolation='linear', keepdims=False,
2525:                        contains_nan=False):
2526:     '''
2527:     Private wrapper that works around the following:
2528: 
2529:       1. A bug in `np.nanpercentile` that was around until numpy version
2530:          1.11.0.
2531:       2. A bug in `np.percentile` NaN handling that was fixed in numpy
2532:          version 1.10.0.
2533:       3. The non-existence of `np.nanpercentile` before numpy version
2534:          1.9.0.
2535: 
2536:     While this function is pretty much necessary for the moment, it
2537:     should be removed as soon as the minimum supported numpy version
2538:     allows.
2539:     '''
2540:     if hasattr(np, 'nanpercentile'):
2541:         # At time or writing, this means np.__version__ < 1.9.0
2542:         result = np.nanpercentile(x, q, axis=axis,
2543:                                   interpolation=interpolation,
2544:                                   keepdims=keepdims)
2545:         # If non-scalar result and nanpercentile does not do proper axis roll.
2546:         # I see no way of avoiding the version test since dimensions may just
2547:         # happen to match in the data.
2548:         if result.ndim > 1 and NumpyVersion(np.__version__) < '1.11.0a':
2549:             axis = np.asarray(axis)
2550:             if axis.size == 1:
2551:                 # If only one axis specified, reduction happens along that dimension
2552:                 if axis.ndim == 0:
2553:                     axis = axis[None]
2554:                 result = np.rollaxis(result, axis[0])
2555:             else:
2556:                 # If multiple axes, reduced dimeision is last
2557:                 result = np.rollaxis(result, -1)
2558:     else:
2559:         msg = "Keyword nan_policy='omit' not correctly supported for numpy " \
2560:               "versions < 1.9.x. The default behavior of  numpy.percentile " \
2561:               "will be used."
2562:         warnings.warn(msg, RuntimeWarning)
2563:         result = _iqr_percentile(x, q, axis=axis)
2564: 
2565:     return result
2566: 
2567: 
2568: #####################################
2569: #         TRIMMING FUNCTIONS        #
2570: #####################################
2571: 
2572: SigmaclipResult = namedtuple('SigmaclipResult', ('clipped', 'lower', 'upper'))
2573: 
2574: 
2575: def sigmaclip(a, low=4., high=4.):
2576:     '''
2577:     Iterative sigma-clipping of array elements.
2578: 
2579:     The output array contains only those elements of the input array `c`
2580:     that satisfy the conditions ::
2581: 
2582:         mean(c) - std(c)*low < c < mean(c) + std(c)*high
2583: 
2584:     Starting from the full sample, all elements outside the critical range are
2585:     removed. The iteration continues with a new critical range until no
2586:     elements are outside the range.
2587: 
2588:     Parameters
2589:     ----------
2590:     a : array_like
2591:         Data array, will be raveled if not 1-D.
2592:     low : float, optional
2593:         Lower bound factor of sigma clipping. Default is 4.
2594:     high : float, optional
2595:         Upper bound factor of sigma clipping. Default is 4.
2596: 
2597:     Returns
2598:     -------
2599:     clipped : ndarray
2600:         Input array with clipped elements removed.
2601:     lower : float
2602:         Lower threshold value use for clipping.
2603:     upper : float
2604:         Upper threshold value use for clipping.
2605: 
2606:     Examples
2607:     --------
2608:     >>> from scipy.stats import sigmaclip
2609:     >>> a = np.concatenate((np.linspace(9.5, 10.5, 31),
2610:     ...                     np.linspace(0, 20, 5)))
2611:     >>> fact = 1.5
2612:     >>> c, low, upp = sigmaclip(a, fact, fact)
2613:     >>> c
2614:     array([  9.96666667,  10.        ,  10.03333333,  10.        ])
2615:     >>> c.var(), c.std()
2616:     (0.00055555555555555165, 0.023570226039551501)
2617:     >>> low, c.mean() - fact*c.std(), c.min()
2618:     (9.9646446609406727, 9.9646446609406727, 9.9666666666666668)
2619:     >>> upp, c.mean() + fact*c.std(), c.max()
2620:     (10.035355339059327, 10.035355339059327, 10.033333333333333)
2621: 
2622:     >>> a = np.concatenate((np.linspace(9.5, 10.5, 11),
2623:     ...                     np.linspace(-100, -50, 3)))
2624:     >>> c, low, upp = sigmaclip(a, 1.8, 1.8)
2625:     >>> (c == np.linspace(9.5, 10.5, 11)).all()
2626:     True
2627: 
2628:     '''
2629:     c = np.asarray(a).ravel()
2630:     delta = 1
2631:     while delta:
2632:         c_std = c.std()
2633:         c_mean = c.mean()
2634:         size = c.size
2635:         critlower = c_mean - c_std * low
2636:         critupper = c_mean + c_std * high
2637:         c = c[(c > critlower) & (c < critupper)]
2638:         delta = size - c.size
2639: 
2640:     return SigmaclipResult(c, critlower, critupper)
2641: 
2642: 
2643: def trimboth(a, proportiontocut, axis=0):
2644:     '''
2645:     Slices off a proportion of items from both ends of an array.
2646: 
2647:     Slices off the passed proportion of items from both ends of the passed
2648:     array (i.e., with `proportiontocut` = 0.1, slices leftmost 10% **and**
2649:     rightmost 10% of scores). The trimmed values are the lowest and
2650:     highest ones.
2651:     Slices off less if proportion results in a non-integer slice index (i.e.,
2652:     conservatively slices off`proportiontocut`).
2653: 
2654:     Parameters
2655:     ----------
2656:     a : array_like
2657:         Data to trim.
2658:     proportiontocut : float
2659:         Proportion (in range 0-1) of total data set to trim of each end.
2660:     axis : int or None, optional
2661:         Axis along which to trim data. Default is 0. If None, compute over
2662:         the whole array `a`.
2663: 
2664:     Returns
2665:     -------
2666:     out : ndarray
2667:         Trimmed version of array `a`. The order of the trimmed content
2668:         is undefined.
2669: 
2670:     See Also
2671:     --------
2672:     trim_mean
2673: 
2674:     Examples
2675:     --------
2676:     >>> from scipy import stats
2677:     >>> a = np.arange(20)
2678:     >>> b = stats.trimboth(a, 0.1)
2679:     >>> b.shape
2680:     (16,)
2681: 
2682:     '''
2683:     a = np.asarray(a)
2684: 
2685:     if a.size == 0:
2686:         return a
2687: 
2688:     if axis is None:
2689:         a = a.ravel()
2690:         axis = 0
2691: 
2692:     nobs = a.shape[axis]
2693:     lowercut = int(proportiontocut * nobs)
2694:     uppercut = nobs - lowercut
2695:     if (lowercut >= uppercut):
2696:         raise ValueError("Proportion too big.")
2697: 
2698:     atmp = np.partition(a, (lowercut, uppercut - 1), axis)
2699: 
2700:     sl = [slice(None)] * atmp.ndim
2701:     sl[axis] = slice(lowercut, uppercut)
2702:     return atmp[sl]
2703: 
2704: 
2705: def trim1(a, proportiontocut, tail='right', axis=0):
2706:     '''
2707:     Slices off a proportion from ONE end of the passed array distribution.
2708: 
2709:     If `proportiontocut` = 0.1, slices off 'leftmost' or 'rightmost'
2710:     10% of scores. The lowest or highest values are trimmed (depending on
2711:     the tail).
2712:     Slices off less if proportion results in a non-integer slice index
2713:     (i.e., conservatively slices off `proportiontocut` ).
2714: 
2715:     Parameters
2716:     ----------
2717:     a : array_like
2718:         Input array
2719:     proportiontocut : float
2720:         Fraction to cut off of 'left' or 'right' of distribution
2721:     tail : {'left', 'right'}, optional
2722:         Defaults to 'right'.
2723:     axis : int or None, optional
2724:         Axis along which to trim data. Default is 0. If None, compute over
2725:         the whole array `a`.
2726: 
2727:     Returns
2728:     -------
2729:     trim1 : ndarray
2730:         Trimmed version of array `a`. The order of the trimmed content is
2731:         undefined.
2732: 
2733:     '''
2734:     a = np.asarray(a)
2735:     if axis is None:
2736:         a = a.ravel()
2737:         axis = 0
2738: 
2739:     nobs = a.shape[axis]
2740: 
2741:     # avoid possible corner case
2742:     if proportiontocut >= 1:
2743:         return []
2744: 
2745:     if tail.lower() == 'right':
2746:         lowercut = 0
2747:         uppercut = nobs - int(proportiontocut * nobs)
2748: 
2749:     elif tail.lower() == 'left':
2750:         lowercut = int(proportiontocut * nobs)
2751:         uppercut = nobs
2752: 
2753:     atmp = np.partition(a, (lowercut, uppercut - 1), axis)
2754: 
2755:     return atmp[lowercut:uppercut]
2756: 
2757: 
2758: def trim_mean(a, proportiontocut, axis=0):
2759:     '''
2760:     Return mean of array after trimming distribution from both tails.
2761: 
2762:     If `proportiontocut` = 0.1, slices off 'leftmost' and 'rightmost' 10% of
2763:     scores. The input is sorted before slicing. Slices off less if proportion
2764:     results in a non-integer slice index (i.e., conservatively slices off
2765:     `proportiontocut` ).
2766: 
2767:     Parameters
2768:     ----------
2769:     a : array_like
2770:         Input array
2771:     proportiontocut : float
2772:         Fraction to cut off of both tails of the distribution
2773:     axis : int or None, optional
2774:         Axis along which the trimmed means are computed. Default is 0.
2775:         If None, compute over the whole array `a`.
2776: 
2777:     Returns
2778:     -------
2779:     trim_mean : ndarray
2780:         Mean of trimmed array.
2781: 
2782:     See Also
2783:     --------
2784:     trimboth
2785:     tmean : compute the trimmed mean ignoring values outside given `limits`.
2786: 
2787:     Examples
2788:     --------
2789:     >>> from scipy import stats
2790:     >>> x = np.arange(20)
2791:     >>> stats.trim_mean(x, 0.1)
2792:     9.5
2793:     >>> x2 = x.reshape(5, 4)
2794:     >>> x2
2795:     array([[ 0,  1,  2,  3],
2796:            [ 4,  5,  6,  7],
2797:            [ 8,  9, 10, 11],
2798:            [12, 13, 14, 15],
2799:            [16, 17, 18, 19]])
2800:     >>> stats.trim_mean(x2, 0.25)
2801:     array([  8.,   9.,  10.,  11.])
2802:     >>> stats.trim_mean(x2, 0.25, axis=1)
2803:     array([  1.5,   5.5,   9.5,  13.5,  17.5])
2804: 
2805:     '''
2806:     a = np.asarray(a)
2807: 
2808:     if a.size == 0:
2809:         return np.nan
2810: 
2811:     if axis is None:
2812:         a = a.ravel()
2813:         axis = 0
2814: 
2815:     nobs = a.shape[axis]
2816:     lowercut = int(proportiontocut * nobs)
2817:     uppercut = nobs - lowercut
2818:     if (lowercut > uppercut):
2819:         raise ValueError("Proportion too big.")
2820: 
2821:     atmp = np.partition(a, (lowercut, uppercut - 1), axis)
2822: 
2823:     sl = [slice(None)] * atmp.ndim
2824:     sl[axis] = slice(lowercut, uppercut)
2825:     return np.mean(atmp[sl], axis=axis)
2826: 
2827: F_onewayResult = namedtuple('F_onewayResult', ('statistic', 'pvalue'))
2828: 
2829: 
2830: def f_oneway(*args):
2831:     '''
2832:     Performs a 1-way ANOVA.
2833: 
2834:     The one-way ANOVA tests the null hypothesis that two or more groups have
2835:     the same population mean.  The test is applied to samples from two or
2836:     more groups, possibly with differing sizes.
2837: 
2838:     Parameters
2839:     ----------
2840:     sample1, sample2, ... : array_like
2841:         The sample measurements for each group.
2842: 
2843:     Returns
2844:     -------
2845:     statistic : float
2846:         The computed F-value of the test.
2847:     pvalue : float
2848:         The associated p-value from the F-distribution.
2849: 
2850:     Notes
2851:     -----
2852:     The ANOVA test has important assumptions that must be satisfied in order
2853:     for the associated p-value to be valid.
2854: 
2855:     1. The samples are independent.
2856:     2. Each sample is from a normally distributed population.
2857:     3. The population standard deviations of the groups are all equal.  This
2858:        property is known as homoscedasticity.
2859: 
2860:     If these assumptions are not true for a given set of data, it may still be
2861:     possible to use the Kruskal-Wallis H-test (`scipy.stats.kruskal`) although
2862:     with some loss of power.
2863: 
2864:     The algorithm is from Heiman[2], pp.394-7.
2865: 
2866: 
2867:     References
2868:     ----------
2869:     .. [1] Lowry, Richard.  "Concepts and Applications of Inferential
2870:            Statistics". Chapter 14.
2871:            http://faculty.vassar.edu/lowry/ch14pt1.html
2872: 
2873:     .. [2] Heiman, G.W.  Research Methods in Statistics. 2002.
2874: 
2875:     .. [3] McDonald, G. H. "Handbook of Biological Statistics", One-way ANOVA.
2876:            http://www.biostathandbook.com/onewayanova.html
2877: 
2878:     Examples
2879:     --------
2880:     >>> import scipy.stats as stats
2881: 
2882:     [3]_ Here are some data on a shell measurement (the length of the anterior
2883:     adductor muscle scar, standardized by dividing by length) in the mussel
2884:     Mytilus trossulus from five locations: Tillamook, Oregon; Newport, Oregon;
2885:     Petersburg, Alaska; Magadan, Russia; and Tvarminne, Finland, taken from a
2886:     much larger data set used in McDonald et al. (1991).
2887: 
2888:     >>> tillamook = [0.0571, 0.0813, 0.0831, 0.0976, 0.0817, 0.0859, 0.0735,
2889:     ...              0.0659, 0.0923, 0.0836]
2890:     >>> newport = [0.0873, 0.0662, 0.0672, 0.0819, 0.0749, 0.0649, 0.0835,
2891:     ...            0.0725]
2892:     >>> petersburg = [0.0974, 0.1352, 0.0817, 0.1016, 0.0968, 0.1064, 0.105]
2893:     >>> magadan = [0.1033, 0.0915, 0.0781, 0.0685, 0.0677, 0.0697, 0.0764,
2894:     ...            0.0689]
2895:     >>> tvarminne = [0.0703, 0.1026, 0.0956, 0.0973, 0.1039, 0.1045]
2896:     >>> stats.f_oneway(tillamook, newport, petersburg, magadan, tvarminne)
2897:     (7.1210194716424473, 0.00028122423145345439)
2898: 
2899:     '''
2900:     args = [np.asarray(arg, dtype=float) for arg in args]
2901:     # ANOVA on N groups, each in its own array
2902:     num_groups = len(args)
2903:     alldata = np.concatenate(args)
2904:     bign = len(alldata)
2905: 
2906:     # Determine the mean of the data, and subtract that from all inputs to a
2907:     # variance (via sum_of_sq / sq_of_sum) calculation.  Variance is invariance
2908:     # to a shift in location, and centering all data around zero vastly
2909:     # improves numerical stability.
2910:     offset = alldata.mean()
2911:     alldata -= offset
2912: 
2913:     sstot = _sum_of_squares(alldata) - (_square_of_sums(alldata) / float(bign))
2914:     ssbn = 0
2915:     for a in args:
2916:         ssbn += _square_of_sums(a - offset) / float(len(a))
2917: 
2918:     # Naming: variables ending in bn/b are for "between treatments", wn/w are
2919:     # for "within treatments"
2920:     ssbn -= (_square_of_sums(alldata) / float(bign))
2921:     sswn = sstot - ssbn
2922:     dfbn = num_groups - 1
2923:     dfwn = bign - num_groups
2924:     msb = ssbn / float(dfbn)
2925:     msw = sswn / float(dfwn)
2926:     f = msb / msw
2927: 
2928:     prob = special.fdtrc(dfbn, dfwn, f)   # equivalent to stats.f.sf
2929: 
2930:     return F_onewayResult(f, prob)
2931: 
2932: 
2933: def pearsonr(x, y):
2934:     r'''
2935:     Calculate a Pearson correlation coefficient and the p-value for testing
2936:     non-correlation.
2937: 
2938:     The Pearson correlation coefficient measures the linear relationship
2939:     between two datasets. Strictly speaking, Pearson's correlation requires
2940:     that each dataset be normally distributed, and not necessarily zero-mean.
2941:     Like other correlation coefficients, this one varies between -1 and +1
2942:     with 0 implying no correlation. Correlations of -1 or +1 imply an exact
2943:     linear relationship. Positive correlations imply that as x increases, so
2944:     does y. Negative correlations imply that as x increases, y decreases.
2945: 
2946:     The p-value roughly indicates the probability of an uncorrelated system
2947:     producing datasets that have a Pearson correlation at least as extreme
2948:     as the one computed from these datasets. The p-values are not entirely
2949:     reliable but are probably reasonable for datasets larger than 500 or so.
2950: 
2951:     Parameters
2952:     ----------
2953:     x : (N,) array_like
2954:         Input
2955:     y : (N,) array_like
2956:         Input
2957: 
2958:     Returns
2959:     -------
2960:     r : float
2961:         Pearson's correlation coefficient
2962:     p-value : float
2963:         2-tailed p-value
2964: 
2965:     Notes
2966:     -----
2967: 
2968:     The correlation coefficient is calculated as follows:
2969: 
2970:     .. math::
2971: 
2972:         r_{pb} = \frac{\sum (x - m_x) (y - m_y)
2973:                        }{\sqrt{\sum (x - m_x)^2 (y - m_y)^2}}
2974: 
2975:     where :math:`m_x` is the mean of the vector :math:`x` and :math:`m_y` is
2976:     the mean of the vector :math:`y`.
2977: 
2978: 
2979:     References
2980:     ----------
2981:     http://www.statsoft.com/textbook/glosp.html#Pearson%20Correlation
2982: 
2983:     Examples
2984:     --------
2985:     >>> from scipy import stats
2986:     >>> a = np.array([0, 0, 0, 1, 1, 1, 1])
2987:     >>> b = np.arange(7)
2988:     >>> stats.pearsonr(a, b)
2989:     (0.8660254037844386, 0.011724811003954654)
2990: 
2991:     >>> stats.pearsonr([1,2,3,4,5], [5,6,7,8,7])
2992:     (0.83205029433784372, 0.080509573298498519)
2993:     '''
2994:     # x and y should have same length.
2995:     x = np.asarray(x)
2996:     y = np.asarray(y)
2997:     n = len(x)
2998:     mx = x.mean()
2999:     my = y.mean()
3000:     xm, ym = x - mx, y - my
3001:     r_num = np.add.reduce(xm * ym)
3002:     r_den = np.sqrt(_sum_of_squares(xm) * _sum_of_squares(ym))
3003:     r = r_num / r_den
3004: 
3005:     # Presumably, if abs(r) > 1, then it is only some small artifact of
3006:     # floating point arithmetic.
3007:     r = max(min(r, 1.0), -1.0)
3008:     df = n - 2
3009:     if abs(r) == 1.0:
3010:         prob = 0.0
3011:     else:
3012:         t_squared = r**2 * (df / ((1.0 - r) * (1.0 + r)))
3013:         prob = _betai(0.5*df, 0.5, df/(df+t_squared))
3014: 
3015:     return r, prob
3016: 
3017: 
3018: def fisher_exact(table, alternative='two-sided'):
3019:     '''Performs a Fisher exact test on a 2x2 contingency table.
3020: 
3021:     Parameters
3022:     ----------
3023:     table : array_like of ints
3024:         A 2x2 contingency table.  Elements should be non-negative integers.
3025:     alternative : {'two-sided', 'less', 'greater'}, optional
3026:         Which alternative hypothesis to the null hypothesis the test uses.
3027:         Default is 'two-sided'.
3028: 
3029:     Returns
3030:     -------
3031:     oddsratio : float
3032:         This is prior odds ratio and not a posterior estimate.
3033:     p_value : float
3034:         P-value, the probability of obtaining a distribution at least as
3035:         extreme as the one that was actually observed, assuming that the
3036:         null hypothesis is true.
3037: 
3038:     See Also
3039:     --------
3040:     chi2_contingency : Chi-square test of independence of variables in a
3041:         contingency table.
3042: 
3043:     Notes
3044:     -----
3045:     The calculated odds ratio is different from the one R uses. This scipy
3046:     implementation returns the (more common) "unconditional Maximum
3047:     Likelihood Estimate", while R uses the "conditional Maximum Likelihood
3048:     Estimate".
3049: 
3050:     For tables with large numbers, the (inexact) chi-square test implemented
3051:     in the function `chi2_contingency` can also be used.
3052: 
3053:     Examples
3054:     --------
3055:     Say we spend a few days counting whales and sharks in the Atlantic and
3056:     Indian oceans. In the Atlantic ocean we find 8 whales and 1 shark, in the
3057:     Indian ocean 2 whales and 5 sharks. Then our contingency table is::
3058: 
3059:                 Atlantic  Indian
3060:         whales     8        2
3061:         sharks     1        5
3062: 
3063:     We use this table to find the p-value:
3064: 
3065:     >>> import scipy.stats as stats
3066:     >>> oddsratio, pvalue = stats.fisher_exact([[8, 2], [1, 5]])
3067:     >>> pvalue
3068:     0.0349...
3069: 
3070:     The probability that we would observe this or an even more imbalanced ratio
3071:     by chance is about 3.5%.  A commonly used significance level is 5%--if we
3072:     adopt that, we can therefore conclude that our observed imbalance is
3073:     statistically significant; whales prefer the Atlantic while sharks prefer
3074:     the Indian ocean.
3075: 
3076:     '''
3077:     hypergeom = distributions.hypergeom
3078:     c = np.asarray(table, dtype=np.int64)  # int32 is not enough for the algorithm
3079:     if not c.shape == (2, 2):
3080:         raise ValueError("The input `table` must be of shape (2, 2).")
3081: 
3082:     if np.any(c < 0):
3083:         raise ValueError("All values in `table` must be nonnegative.")
3084: 
3085:     if 0 in c.sum(axis=0) or 0 in c.sum(axis=1):
3086:         # If both values in a row or column are zero, the p-value is 1 and
3087:         # the odds ratio is NaN.
3088:         return np.nan, 1.0
3089: 
3090:     if c[1, 0] > 0 and c[0, 1] > 0:
3091:         oddsratio = c[0, 0] * c[1, 1] / float(c[1, 0] * c[0, 1])
3092:     else:
3093:         oddsratio = np.inf
3094: 
3095:     n1 = c[0, 0] + c[0, 1]
3096:     n2 = c[1, 0] + c[1, 1]
3097:     n = c[0, 0] + c[1, 0]
3098: 
3099:     def binary_search(n, n1, n2, side):
3100:         '''Binary search for where to begin lower/upper halves in two-sided
3101:         test.
3102:         '''
3103:         if side == "upper":
3104:             minval = mode
3105:             maxval = n
3106:         else:
3107:             minval = 0
3108:             maxval = mode
3109:         guess = -1
3110:         while maxval - minval > 1:
3111:             if maxval == minval + 1 and guess == minval:
3112:                 guess = maxval
3113:             else:
3114:                 guess = (maxval + minval) // 2
3115:             pguess = hypergeom.pmf(guess, n1 + n2, n1, n)
3116:             if side == "upper":
3117:                 ng = guess - 1
3118:             else:
3119:                 ng = guess + 1
3120:             if pguess <= pexact < hypergeom.pmf(ng, n1 + n2, n1, n):
3121:                 break
3122:             elif pguess < pexact:
3123:                 maxval = guess
3124:             else:
3125:                 minval = guess
3126:         if guess == -1:
3127:             guess = minval
3128:         if side == "upper":
3129:             while guess > 0 and hypergeom.pmf(guess, n1 + n2, n1, n) < pexact * epsilon:
3130:                 guess -= 1
3131:             while hypergeom.pmf(guess, n1 + n2, n1, n) > pexact / epsilon:
3132:                 guess += 1
3133:         else:
3134:             while hypergeom.pmf(guess, n1 + n2, n1, n) < pexact * epsilon:
3135:                 guess += 1
3136:             while guess > 0 and hypergeom.pmf(guess, n1 + n2, n1, n) > pexact / epsilon:
3137:                 guess -= 1
3138:         return guess
3139: 
3140:     if alternative == 'less':
3141:         pvalue = hypergeom.cdf(c[0, 0], n1 + n2, n1, n)
3142:     elif alternative == 'greater':
3143:         # Same formula as the 'less' case, but with the second column.
3144:         pvalue = hypergeom.cdf(c[0, 1], n1 + n2, n1, c[0, 1] + c[1, 1])
3145:     elif alternative == 'two-sided':
3146:         mode = int(float((n + 1) * (n1 + 1)) / (n1 + n2 + 2))
3147:         pexact = hypergeom.pmf(c[0, 0], n1 + n2, n1, n)
3148:         pmode = hypergeom.pmf(mode, n1 + n2, n1, n)
3149: 
3150:         epsilon = 1 - 1e-4
3151:         if np.abs(pexact - pmode) / np.maximum(pexact, pmode) <= 1 - epsilon:
3152:             return oddsratio, 1.
3153: 
3154:         elif c[0, 0] < mode:
3155:             plower = hypergeom.cdf(c[0, 0], n1 + n2, n1, n)
3156:             if hypergeom.pmf(n, n1 + n2, n1, n) > pexact / epsilon:
3157:                 return oddsratio, plower
3158: 
3159:             guess = binary_search(n, n1, n2, "upper")
3160:             pvalue = plower + hypergeom.sf(guess - 1, n1 + n2, n1, n)
3161:         else:
3162:             pupper = hypergeom.sf(c[0, 0] - 1, n1 + n2, n1, n)
3163:             if hypergeom.pmf(0, n1 + n2, n1, n) > pexact / epsilon:
3164:                 return oddsratio, pupper
3165: 
3166:             guess = binary_search(n, n1, n2, "lower")
3167:             pvalue = pupper + hypergeom.cdf(guess, n1 + n2, n1, n)
3168:     else:
3169:         msg = "`alternative` should be one of {'two-sided', 'less', 'greater'}"
3170:         raise ValueError(msg)
3171: 
3172:     if pvalue > 1.0:
3173:         pvalue = 1.0
3174: 
3175:     return oddsratio, pvalue
3176: 
3177: SpearmanrResult = namedtuple('SpearmanrResult', ('correlation', 'pvalue'))
3178: 
3179: 
3180: def spearmanr(a, b=None, axis=0, nan_policy='propagate'):
3181:     '''
3182:     Calculate a Spearman rank-order correlation coefficient and the p-value
3183:     to test for non-correlation.
3184: 
3185:     The Spearman correlation is a nonparametric measure of the monotonicity
3186:     of the relationship between two datasets. Unlike the Pearson correlation,
3187:     the Spearman correlation does not assume that both datasets are normally
3188:     distributed. Like other correlation coefficients, this one varies
3189:     between -1 and +1 with 0 implying no correlation. Correlations of -1 or
3190:     +1 imply an exact monotonic relationship. Positive correlations imply that
3191:     as x increases, so does y. Negative correlations imply that as x
3192:     increases, y decreases.
3193: 
3194:     The p-value roughly indicates the probability of an uncorrelated system
3195:     producing datasets that have a Spearman correlation at least as extreme
3196:     as the one computed from these datasets. The p-values are not entirely
3197:     reliable but are probably reasonable for datasets larger than 500 or so.
3198: 
3199:     Parameters
3200:     ----------
3201:     a, b : 1D or 2D array_like, b is optional
3202:         One or two 1-D or 2-D arrays containing multiple variables and
3203:         observations. When these are 1-D, each represents a vector of
3204:         observations of a single variable. For the behavior in the 2-D case,
3205:         see under ``axis``, below.
3206:         Both arrays need to have the same length in the ``axis`` dimension.
3207:     axis : int or None, optional
3208:         If axis=0 (default), then each column represents a variable, with
3209:         observations in the rows. If axis=1, the relationship is transposed:
3210:         each row represents a variable, while the columns contain observations.
3211:         If axis=None, then both arrays will be raveled.
3212:     nan_policy : {'propagate', 'raise', 'omit'}, optional
3213:         Defines how to handle when input contains nan. 'propagate' returns nan,
3214:         'raise' throws an error, 'omit' performs the calculations ignoring nan
3215:         values. Default is 'propagate'.
3216: 
3217:     Returns
3218:     -------
3219:     correlation : float or ndarray (2-D square)
3220:         Spearman correlation matrix or correlation coefficient (if only 2
3221:         variables are given as parameters. Correlation matrix is square with
3222:         length equal to total number of variables (columns or rows) in a and b
3223:         combined.
3224:     pvalue : float
3225:         The two-sided p-value for a hypothesis test whose null hypothesis is
3226:         that two sets of data are uncorrelated, has same dimension as rho.
3227: 
3228:     Notes
3229:     -----
3230:     Changes in scipy 0.8.0: rewrite to add tie-handling, and axis.
3231: 
3232:     References
3233:     ----------
3234: 
3235:     .. [1] Zwillinger, D. and Kokoska, S. (2000). CRC Standard
3236:        Probability and Statistics Tables and Formulae. Chapman & Hall: New
3237:        York. 2000.
3238:        Section  14.7
3239: 
3240:     Examples
3241:     --------
3242:     >>> from scipy import stats
3243:     >>> stats.spearmanr([1,2,3,4,5], [5,6,7,8,7])
3244:     (0.82078268166812329, 0.088587005313543798)
3245:     >>> np.random.seed(1234321)
3246:     >>> x2n = np.random.randn(100, 2)
3247:     >>> y2n = np.random.randn(100, 2)
3248:     >>> stats.spearmanr(x2n)
3249:     (0.059969996999699973, 0.55338590803773591)
3250:     >>> stats.spearmanr(x2n[:,0], x2n[:,1])
3251:     (0.059969996999699973, 0.55338590803773591)
3252:     >>> rho, pval = stats.spearmanr(x2n, y2n)
3253:     >>> rho
3254:     array([[ 1.        ,  0.05997   ,  0.18569457,  0.06258626],
3255:            [ 0.05997   ,  1.        ,  0.110003  ,  0.02534653],
3256:            [ 0.18569457,  0.110003  ,  1.        ,  0.03488749],
3257:            [ 0.06258626,  0.02534653,  0.03488749,  1.        ]])
3258:     >>> pval
3259:     array([[ 0.        ,  0.55338591,  0.06435364,  0.53617935],
3260:            [ 0.55338591,  0.        ,  0.27592895,  0.80234077],
3261:            [ 0.06435364,  0.27592895,  0.        ,  0.73039992],
3262:            [ 0.53617935,  0.80234077,  0.73039992,  0.        ]])
3263:     >>> rho, pval = stats.spearmanr(x2n.T, y2n.T, axis=1)
3264:     >>> rho
3265:     array([[ 1.        ,  0.05997   ,  0.18569457,  0.06258626],
3266:            [ 0.05997   ,  1.        ,  0.110003  ,  0.02534653],
3267:            [ 0.18569457,  0.110003  ,  1.        ,  0.03488749],
3268:            [ 0.06258626,  0.02534653,  0.03488749,  1.        ]])
3269:     >>> stats.spearmanr(x2n, y2n, axis=None)
3270:     (0.10816770419260482, 0.1273562188027364)
3271:     >>> stats.spearmanr(x2n.ravel(), y2n.ravel())
3272:     (0.10816770419260482, 0.1273562188027364)
3273: 
3274:     >>> xint = np.random.randint(10, size=(100, 2))
3275:     >>> stats.spearmanr(xint)
3276:     (0.052760927029710199, 0.60213045837062351)
3277: 
3278:     '''
3279:     a, axisout = _chk_asarray(a, axis)
3280: 
3281:     a_contains_nan, nan_policy = _contains_nan(a, nan_policy)
3282: 
3283:     if a_contains_nan:
3284:         a = ma.masked_invalid(a)
3285: 
3286:     if a.size <= 1:
3287:         return SpearmanrResult(np.nan, np.nan)
3288: 
3289:     ar = np.apply_along_axis(rankdata, axisout, a)
3290: 
3291:     br = None
3292:     if b is not None:
3293:         b, axisout = _chk_asarray(b, axis)
3294: 
3295:         b_contains_nan, nan_policy = _contains_nan(b, nan_policy)
3296: 
3297:         if a_contains_nan or b_contains_nan:
3298:             b = ma.masked_invalid(b)
3299: 
3300:             if nan_policy == 'propagate':
3301:                 rho, pval = mstats_basic.spearmanr(a, b, axis)
3302:                 return SpearmanrResult(rho * np.nan, pval * np.nan)
3303: 
3304:             if nan_policy == 'omit':
3305:                 return mstats_basic.spearmanr(a, b, axis)
3306: 
3307:         br = np.apply_along_axis(rankdata, axisout, b)
3308:     n = a.shape[axisout]
3309:     rs = np.corrcoef(ar, br, rowvar=axisout)
3310: 
3311:     olderr = np.seterr(divide='ignore')  # rs can have elements equal to 1
3312:     try:
3313:         # clip the small negative values possibly caused by rounding
3314:         # errors before taking the square root
3315:         t = rs * np.sqrt(((n-2)/((rs+1.0)*(1.0-rs))).clip(0))
3316:     finally:
3317:         np.seterr(**olderr)
3318: 
3319:     prob = 2 * distributions.t.sf(np.abs(t), n-2)
3320: 
3321:     if rs.shape == (2, 2):
3322:         return SpearmanrResult(rs[1, 0], prob[1, 0])
3323:     else:
3324:         return SpearmanrResult(rs, prob)
3325: 
3326: PointbiserialrResult = namedtuple('PointbiserialrResult',
3327:                                   ('correlation', 'pvalue'))
3328: 
3329: 
3330: def pointbiserialr(x, y):
3331:     r'''
3332:     Calculate a point biserial correlation coefficient and its p-value.
3333: 
3334:     The point biserial correlation is used to measure the relationship
3335:     between a binary variable, x, and a continuous variable, y. Like other
3336:     correlation coefficients, this one varies between -1 and +1 with 0
3337:     implying no correlation. Correlations of -1 or +1 imply a determinative
3338:     relationship.
3339: 
3340:     This function uses a shortcut formula but produces the same result as
3341:     `pearsonr`.
3342: 
3343:     Parameters
3344:     ----------
3345:     x : array_like of bools
3346:         Input array.
3347:     y : array_like
3348:         Input array.
3349: 
3350:     Returns
3351:     -------
3352:     correlation : float
3353:         R value
3354:     pvalue : float
3355:         2-tailed p-value
3356: 
3357:     Notes
3358:     -----
3359:     `pointbiserialr` uses a t-test with ``n-1`` degrees of freedom.
3360:     It is equivalent to `pearsonr.`
3361: 
3362:     The value of the point-biserial correlation can be calculated from:
3363: 
3364:     .. math::
3365: 
3366:         r_{pb} = \frac{\overline{Y_{1}} -
3367:                  \overline{Y_{0}}}{s_{y}}\sqrt{\frac{N_{1} N_{2}}{N (N - 1))}}
3368: 
3369:     Where :math:`Y_{0}` and :math:`Y_{1}` are means of the metric
3370:     observations coded 0 and 1 respectively; :math:`N_{0}` and :math:`N_{1}`
3371:     are number of observations coded 0 and 1 respectively; :math:`N` is the
3372:     total number of observations and :math:`s_{y}` is the standard
3373:     deviation of all the metric observations.
3374: 
3375:     A value of :math:`r_{pb}` that is significantly different from zero is
3376:     completely equivalent to a significant difference in means between the two
3377:     groups. Thus, an independent groups t Test with :math:`N-2` degrees of
3378:     freedom may be used to test whether :math:`r_{pb}` is nonzero. The
3379:     relation between the t-statistic for comparing two independent groups and
3380:     :math:`r_{pb}` is given by:
3381: 
3382:     .. math::
3383: 
3384:         t = \sqrt{N - 2}\frac{r_{pb}}{\sqrt{1 - r^{2}_{pb}}}
3385: 
3386:     References
3387:     ----------
3388:     .. [1] J. Lev, "The Point Biserial Coefficient of Correlation", Ann. Math.
3389:            Statist., Vol. 20, no.1, pp. 125-126, 1949.
3390: 
3391:     .. [2] R.F. Tate, "Correlation Between a Discrete and a Continuous
3392:            Variable. Point-Biserial Correlation.", Ann. Math. Statist., Vol. 25,
3393:            np. 3, pp. 603-607, 1954.
3394: 
3395:     .. [3] http://onlinelibrary.wiley.com/doi/10.1002/9781118445112.stat06227/full
3396: 
3397:     Examples
3398:     --------
3399:     >>> from scipy import stats
3400:     >>> a = np.array([0, 0, 0, 1, 1, 1, 1])
3401:     >>> b = np.arange(7)
3402:     >>> stats.pointbiserialr(a, b)
3403:     (0.8660254037844386, 0.011724811003954652)
3404:     >>> stats.pearsonr(a, b)
3405:     (0.86602540378443871, 0.011724811003954626)
3406:     >>> np.corrcoef(a, b)
3407:     array([[ 1.       ,  0.8660254],
3408:            [ 0.8660254,  1.       ]])
3409: 
3410:     '''
3411:     rpb, prob = pearsonr(x, y)
3412:     return PointbiserialrResult(rpb, prob)
3413: 
3414: 
3415: KendalltauResult = namedtuple('KendalltauResult', ('correlation', 'pvalue'))
3416: 
3417: 
3418: def kendalltau(x, y, initial_lexsort=None, nan_policy='propagate'):
3419:     '''
3420:     Calculate Kendall's tau, a correlation measure for ordinal data.
3421: 
3422:     Kendall's tau is a measure of the correspondence between two rankings.
3423:     Values close to 1 indicate strong agreement, values close to -1 indicate
3424:     strong disagreement.  This is the 1945 "tau-b" version of Kendall's
3425:     tau [2]_, which can account for ties and which reduces to the 1938 "tau-a"
3426:     version [1]_ in absence of ties.
3427: 
3428:     Parameters
3429:     ----------
3430:     x, y : array_like
3431:         Arrays of rankings, of the same shape. If arrays are not 1-D, they will
3432:         be flattened to 1-D.
3433:     initial_lexsort : bool, optional
3434:         Unused (deprecated).
3435:     nan_policy : {'propagate', 'raise', 'omit'}, optional
3436:         Defines how to handle when input contains nan. 'propagate' returns nan,
3437:         'raise' throws an error, 'omit' performs the calculations ignoring nan
3438:         values. Default is 'propagate'. Note that if the input contains nan
3439:         'omit' delegates to mstats_basic.kendalltau(), which has a different
3440:         implementation.
3441: 
3442:     Returns
3443:     -------
3444:     correlation : float
3445:        The tau statistic.
3446:     pvalue : float
3447:        The two-sided p-value for a hypothesis test whose null hypothesis is
3448:        an absence of association, tau = 0.
3449: 
3450:     See also
3451:     --------
3452:     spearmanr : Calculates a Spearman rank-order correlation coefficient.
3453:     theilslopes : Computes the Theil-Sen estimator for a set of points (x, y).
3454:     weightedtau : Computes a weighted version of Kendall's tau.
3455: 
3456:     Notes
3457:     -----
3458:     The definition of Kendall's tau that is used is [2]_::
3459: 
3460:       tau = (P - Q) / sqrt((P + Q + T) * (P + Q + U))
3461: 
3462:     where P is the number of concordant pairs, Q the number of discordant
3463:     pairs, T the number of ties only in `x`, and U the number of ties only in
3464:     `y`.  If a tie occurs for the same pair in both `x` and `y`, it is not
3465:     added to either T or U.
3466: 
3467:     References
3468:     ----------
3469:     .. [1] Maurice G. Kendall, "A New Measure of Rank Correlation", Biometrika
3470:            Vol. 30, No. 1/2, pp. 81-93, 1938.
3471:     .. [2] Maurice G. Kendall, "The treatment of ties in ranking problems",
3472:            Biometrika Vol. 33, No. 3, pp. 239-251. 1945.
3473:     .. [3] Gottfried E. Noether, "Elements of Nonparametric Statistics", John
3474:            Wiley & Sons, 1967.
3475:     .. [4] Peter M. Fenwick, "A new data structure for cumulative frequency
3476:            tables", Software: Practice and Experience, Vol. 24, No. 3,
3477:            pp. 327-336, 1994.
3478: 
3479:     Examples
3480:     --------
3481:     >>> from scipy import stats
3482:     >>> x1 = [12, 2, 1, 12, 2]
3483:     >>> x2 = [1, 4, 7, 1, 0]
3484:     >>> tau, p_value = stats.kendalltau(x1, x2)
3485:     >>> tau
3486:     -0.47140452079103173
3487:     >>> p_value
3488:     0.2827454599327748
3489: 
3490:     '''
3491:     x = np.asarray(x).ravel()
3492:     y = np.asarray(y).ravel()
3493: 
3494:     if x.size != y.size:
3495:         raise ValueError("All inputs to `kendalltau` must be of the same size, "
3496:                          "found x-size %s and y-size %s" % (x.size, y.size))
3497:     elif not x.size or not y.size:
3498:         return KendalltauResult(np.nan, np.nan)  # Return NaN if arrays are empty
3499: 
3500:     # check both x and y
3501:     cnx, npx = _contains_nan(x, nan_policy)
3502:     cny, npy = _contains_nan(y, nan_policy)
3503:     contains_nan = cnx or cny
3504:     if npx == 'omit' or npy == 'omit':
3505:         nan_policy = 'omit'
3506: 
3507:     if contains_nan and nan_policy == 'propagate':
3508:         return KendalltauResult(np.nan, np.nan)
3509: 
3510:     elif contains_nan and nan_policy == 'omit':
3511:         x = ma.masked_invalid(x)
3512:         y = ma.masked_invalid(y)
3513:         return mstats_basic.kendalltau(x, y)
3514: 
3515:     if initial_lexsort is not None:  # deprecate to drop!
3516:         warnings.warn('"initial_lexsort" is gone!')
3517: 
3518:     def count_rank_tie(ranks):
3519:         cnt = np.bincount(ranks).astype('int64', copy=False)
3520:         cnt = cnt[cnt > 1]
3521:         return ((cnt * (cnt - 1) // 2).sum(),
3522:             (cnt * (cnt - 1.) * (cnt - 2)).sum(),
3523:             (cnt * (cnt - 1.) * (2*cnt + 5)).sum())
3524: 
3525:     size = x.size
3526:     perm = np.argsort(y)  # sort on y and convert y to dense ranks
3527:     x, y = x[perm], y[perm]
3528:     y = np.r_[True, y[1:] != y[:-1]].cumsum(dtype=np.intp)
3529: 
3530:     # stable sort on x and convert x to dense ranks
3531:     perm = np.argsort(x, kind='mergesort')
3532:     x, y = x[perm], y[perm]
3533:     x = np.r_[True, x[1:] != x[:-1]].cumsum(dtype=np.intp)
3534: 
3535:     dis = _kendall_dis(x, y)  # discordant pairs
3536: 
3537:     obs = np.r_[True, (x[1:] != x[:-1]) | (y[1:] != y[:-1]), True]
3538:     cnt = np.diff(np.where(obs)[0]).astype('int64', copy=False)
3539: 
3540:     ntie = (cnt * (cnt - 1) // 2).sum()  # joint ties
3541:     xtie, x0, x1 = count_rank_tie(x)     # ties in x, stats
3542:     ytie, y0, y1 = count_rank_tie(y)     # ties in y, stats
3543: 
3544:     tot = (size * (size - 1)) // 2
3545: 
3546:     if xtie == tot or ytie == tot:
3547:         return KendalltauResult(np.nan, np.nan)
3548: 
3549:     # Note that tot = con + dis + (xtie - ntie) + (ytie - ntie) + ntie
3550:     #               = con + dis + xtie + ytie - ntie
3551:     con_minus_dis = tot - xtie - ytie + ntie - 2 * dis
3552:     tau = con_minus_dis / np.sqrt(tot - xtie) / np.sqrt(tot - ytie)
3553:     # Limit range to fix computational errors
3554:     tau = min(1., max(-1., tau))
3555: 
3556:     # con_minus_dis is approx normally distributed with this variance [3]_
3557:     var = (size * (size - 1) * (2.*size + 5) - x1 - y1) / 18. + (
3558:         2. * xtie * ytie) / (size * (size - 1)) + x0 * y0 / (9. *
3559:         size * (size - 1) * (size - 2))
3560:     pvalue = special.erfc(np.abs(con_minus_dis) / np.sqrt(var) / np.sqrt(2))
3561: 
3562:     # Limit range to fix computational errors
3563:     return KendalltauResult(min(1., max(-1., tau)), pvalue)
3564: 
3565: 
3566: WeightedTauResult = namedtuple('WeightedTauResult', ('correlation', 'pvalue'))
3567: 
3568: 
3569: def weightedtau(x, y, rank=True, weigher=None, additive=True):
3570:     r'''
3571:     Compute a weighted version of Kendall's :math:`\tau`.
3572: 
3573:     The weighted :math:`\tau` is a weighted version of Kendall's
3574:     :math:`\tau` in which exchanges of high weight are more influential than
3575:     exchanges of low weight. The default parameters compute the additive
3576:     hyperbolic version of the index, :math:`\tau_\mathrm h`, which has
3577:     been shown to provide the best balance between important and
3578:     unimportant elements [1]_.
3579: 
3580:     The weighting is defined by means of a rank array, which assigns a
3581:     nonnegative rank to each element, and a weigher function, which
3582:     assigns a weight based from the rank to each element. The weight of an
3583:     exchange is then the sum or the product of the weights of the ranks of
3584:     the exchanged elements. The default parameters compute
3585:     :math:`\tau_\mathrm h`: an exchange between elements with rank
3586:     :math:`r` and :math:`s` (starting from zero) has weight
3587:     :math:`1/(r+1) + 1/(s+1)`.
3588: 
3589:     Specifying a rank array is meaningful only if you have in mind an
3590:     external criterion of importance. If, as it usually happens, you do
3591:     not have in mind a specific rank, the weighted :math:`\tau` is
3592:     defined by averaging the values obtained using the decreasing
3593:     lexicographical rank by (`x`, `y`) and by (`y`, `x`). This is the
3594:     behavior with default parameters.
3595: 
3596:     Note that if you are computing the weighted :math:`\tau` on arrays of
3597:     ranks, rather than of scores (i.e., a larger value implies a lower
3598:     rank) you must negate the ranks, so that elements of higher rank are
3599:     associated with a larger value.
3600: 
3601:     Parameters
3602:     ----------
3603:     x, y : array_like
3604:         Arrays of scores, of the same shape. If arrays are not 1-D, they will
3605:         be flattened to 1-D.
3606:     rank: array_like of ints or bool, optional
3607:         A nonnegative rank assigned to each element. If it is None, the
3608:         decreasing lexicographical rank by (`x`, `y`) will be used: elements of
3609:         higher rank will be those with larger `x`-values, using `y`-values to
3610:         break ties (in particular, swapping `x` and `y` will give a different
3611:         result). If it is False, the element indices will be used
3612:         directly as ranks. The default is True, in which case this
3613:         function returns the average of the values obtained using the
3614:         decreasing lexicographical rank by (`x`, `y`) and by (`y`, `x`).
3615:     weigher : callable, optional
3616:         The weigher function. Must map nonnegative integers (zero
3617:         representing the most important element) to a nonnegative weight.
3618:         The default, None, provides hyperbolic weighing, that is,
3619:         rank :math:`r` is mapped to weight :math:`1/(r+1)`.
3620:     additive : bool, optional
3621:         If True, the weight of an exchange is computed by adding the
3622:         weights of the ranks of the exchanged elements; otherwise, the weights
3623:         are multiplied. The default is True.
3624: 
3625:     Returns
3626:     -------
3627:     correlation : float
3628:        The weighted :math:`\tau` correlation index.
3629:     pvalue : float
3630:        Presently ``np.nan``, as the null statistics is unknown (even in the
3631:        additive hyperbolic case).
3632: 
3633:     See also
3634:     --------
3635:     kendalltau : Calculates Kendall's tau.
3636:     spearmanr : Calculates a Spearman rank-order correlation coefficient.
3637:     theilslopes : Computes the Theil-Sen estimator for a set of points (x, y).
3638: 
3639:     Notes
3640:     -----
3641:     This function uses an :math:`O(n \log n)`, mergesort-based algorithm
3642:     [1]_ that is a weighted extension of Knight's algorithm for Kendall's
3643:     :math:`\tau` [2]_. It can compute Shieh's weighted :math:`\tau` [3]_
3644:     between rankings without ties (i.e., permutations) by setting
3645:     `additive` and `rank` to False, as the definition given in [1]_ is a
3646:     generalization of Shieh's.
3647: 
3648:     NaNs are considered the smallest possible score.
3649: 
3650:     .. versionadded:: 0.19.0
3651: 
3652:     References
3653:     ----------
3654:     .. [1] Sebastiano Vigna, "A weighted correlation index for rankings with
3655:            ties", Proceedings of the 24th international conference on World
3656:            Wide Web, pp. 1166-1176, ACM, 2015.
3657:     .. [2] W.R. Knight, "A Computer Method for Calculating Kendall's Tau with
3658:            Ungrouped Data", Journal of the American Statistical Association,
3659:            Vol. 61, No. 314, Part 1, pp. 436-439, 1966.
3660:     .. [3] Grace S. Shieh. "A weighted Kendall's tau statistic", Statistics &
3661:            Probability Letters, Vol. 39, No. 1, pp. 17-24, 1998.
3662: 
3663:     Examples
3664:     --------
3665:     >>> from scipy import stats
3666:     >>> x = [12, 2, 1, 12, 2]
3667:     >>> y = [1, 4, 7, 1, 0]
3668:     >>> tau, p_value = stats.weightedtau(x, y)
3669:     >>> tau
3670:     -0.56694968153682723
3671:     >>> p_value
3672:     nan
3673:     >>> tau, p_value = stats.weightedtau(x, y, additive=False)
3674:     >>> tau
3675:     -0.62205716951801038
3676: 
3677:     NaNs are considered the smallest possible score:
3678: 
3679:     >>> x = [12, 2, 1, 12, 2]
3680:     >>> y = [1, 4, 7, 1, np.nan]
3681:     >>> tau, _ = stats.weightedtau(x, y)
3682:     >>> tau
3683:     -0.56694968153682723
3684: 
3685:     This is exactly Kendall's tau:
3686: 
3687:     >>> x = [12, 2, 1, 12, 2]
3688:     >>> y = [1, 4, 7, 1, 0]
3689:     >>> tau, _ = stats.weightedtau(x, y, weigher=lambda x: 1)
3690:     >>> tau
3691:     -0.47140452079103173
3692: 
3693:     >>> x = [12, 2, 1, 12, 2]
3694:     >>> y = [1, 4, 7, 1, 0]
3695:     >>> stats.weightedtau(x, y, rank=None)
3696:     WeightedTauResult(correlation=-0.4157652301037516, pvalue=nan)
3697:     >>> stats.weightedtau(y, x, rank=None)
3698:     WeightedTauResult(correlation=-0.71813413296990281, pvalue=nan)
3699: 
3700:     '''
3701:     x = np.asarray(x).ravel()
3702:     y = np.asarray(y).ravel()
3703: 
3704:     if x.size != y.size:
3705:         raise ValueError("All inputs to `weightedtau` must be of the same size, "
3706:                          "found x-size %s and y-size %s" % (x.size, y.size))
3707:     if not x.size:
3708:         return WeightedTauResult(np.nan, np.nan)  # Return NaN if arrays are empty
3709: 
3710:     # If there are NaNs we apply _toint64()
3711:     if np.isnan(np.min(x)):
3712:             x = _toint64(x)
3713:     if np.isnan(np.min(y)):
3714:             y = _toint64(y)
3715: 
3716:     # Reduce to ranks unsupported types
3717:     if x.dtype != y.dtype:
3718:         if x.dtype != np.int64:
3719:             x = _toint64(x)
3720:         if y.dtype != np.int64:
3721:             y = _toint64(y)
3722:     else:
3723:         if x.dtype not in (np.int32, np.int64, np.float32, np.float64):
3724:             x = _toint64(x)
3725:             y = _toint64(y)
3726: 
3727:     if rank is True:
3728:         return WeightedTauResult((
3729:             _weightedrankedtau(x, y, None, weigher, additive) +
3730:             _weightedrankedtau(y, x, None, weigher, additive)
3731:             ) / 2, np.nan)
3732: 
3733:     if rank is False:
3734:         rank = np.arange(x.size, dtype=np.intp)
3735:     elif rank is not None:
3736:         rank = np.asarray(rank).ravel()
3737:         if rank.size != x.size:
3738:             raise ValueError("All inputs to `weightedtau` must be of the same size, "
3739:                          "found x-size %s and rank-size %s" % (x.size, rank.size))
3740: 
3741:     return WeightedTauResult(_weightedrankedtau(x, y, rank, weigher, additive), np.nan)
3742: 
3743: 
3744: #####################################
3745: #       INFERENTIAL STATISTICS      #
3746: #####################################
3747: 
3748: Ttest_1sampResult = namedtuple('Ttest_1sampResult', ('statistic', 'pvalue'))
3749: 
3750: 
3751: def ttest_1samp(a, popmean, axis=0, nan_policy='propagate'):
3752:     '''
3753:     Calculate the T-test for the mean of ONE group of scores.
3754: 
3755:     This is a two-sided test for the null hypothesis that the expected value
3756:     (mean) of a sample of independent observations `a` is equal to the given
3757:     population mean, `popmean`.
3758: 
3759:     Parameters
3760:     ----------
3761:     a : array_like
3762:         sample observation
3763:     popmean : float or array_like
3764:         expected value in null hypothesis, if array_like than it must have the
3765:         same shape as `a` excluding the axis dimension
3766:     axis : int or None, optional
3767:         Axis along which to compute test. If None, compute over the whole
3768:         array `a`.
3769:     nan_policy : {'propagate', 'raise', 'omit'}, optional
3770:         Defines how to handle when input contains nan. 'propagate' returns nan,
3771:         'raise' throws an error, 'omit' performs the calculations ignoring nan
3772:         values. Default is 'propagate'.
3773: 
3774:     Returns
3775:     -------
3776:     statistic : float or array
3777:         t-statistic
3778:     pvalue : float or array
3779:         two-tailed p-value
3780: 
3781:     Examples
3782:     --------
3783:     >>> from scipy import stats
3784: 
3785:     >>> np.random.seed(7654567)  # fix seed to get the same result
3786:     >>> rvs = stats.norm.rvs(loc=5, scale=10, size=(50,2))
3787: 
3788:     Test if mean of random sample is equal to true mean, and different mean.
3789:     We reject the null hypothesis in the second case and don't reject it in
3790:     the first case.
3791: 
3792:     >>> stats.ttest_1samp(rvs,5.0)
3793:     (array([-0.68014479, -0.04323899]), array([ 0.49961383,  0.96568674]))
3794:     >>> stats.ttest_1samp(rvs,0.0)
3795:     (array([ 2.77025808,  4.11038784]), array([ 0.00789095,  0.00014999]))
3796: 
3797:     Examples using axis and non-scalar dimension for population mean.
3798: 
3799:     >>> stats.ttest_1samp(rvs,[5.0,0.0])
3800:     (array([-0.68014479,  4.11038784]), array([  4.99613833e-01,   1.49986458e-04]))
3801:     >>> stats.ttest_1samp(rvs.T,[5.0,0.0],axis=1)
3802:     (array([-0.68014479,  4.11038784]), array([  4.99613833e-01,   1.49986458e-04]))
3803:     >>> stats.ttest_1samp(rvs,[[5.0],[0.0]])
3804:     (array([[-0.68014479, -0.04323899],
3805:            [ 2.77025808,  4.11038784]]), array([[  4.99613833e-01,   9.65686743e-01],
3806:            [  7.89094663e-03,   1.49986458e-04]]))
3807: 
3808:     '''
3809:     a, axis = _chk_asarray(a, axis)
3810: 
3811:     contains_nan, nan_policy = _contains_nan(a, nan_policy)
3812: 
3813:     if contains_nan and nan_policy == 'omit':
3814:         a = ma.masked_invalid(a)
3815:         return mstats_basic.ttest_1samp(a, popmean, axis)
3816: 
3817:     n = a.shape[axis]
3818:     df = n - 1
3819: 
3820:     d = np.mean(a, axis) - popmean
3821:     v = np.var(a, axis, ddof=1)
3822:     denom = np.sqrt(v / float(n))
3823: 
3824:     with np.errstate(divide='ignore', invalid='ignore'):
3825:         t = np.divide(d, denom)
3826:     t, prob = _ttest_finish(df, t)
3827: 
3828:     return Ttest_1sampResult(t, prob)
3829: 
3830: 
3831: def _ttest_finish(df, t):
3832:     '''Common code between all 3 t-test functions.'''
3833:     prob = distributions.t.sf(np.abs(t), df) * 2  # use np.abs to get upper tail
3834:     if t.ndim == 0:
3835:         t = t[()]
3836: 
3837:     return t, prob
3838: 
3839: 
3840: def _ttest_ind_from_stats(mean1, mean2, denom, df):
3841: 
3842:     d = mean1 - mean2
3843:     with np.errstate(divide='ignore', invalid='ignore'):
3844:         t = np.divide(d, denom)
3845:     t, prob = _ttest_finish(df, t)
3846: 
3847:     return (t, prob)
3848: 
3849: 
3850: def _unequal_var_ttest_denom(v1, n1, v2, n2):
3851:     vn1 = v1 / n1
3852:     vn2 = v2 / n2
3853:     with np.errstate(divide='ignore', invalid='ignore'):
3854:         df = (vn1 + vn2)**2 / (vn1**2 / (n1 - 1) + vn2**2 / (n2 - 1))
3855: 
3856:     # If df is undefined, variances are zero (assumes n1 > 0 & n2 > 0).
3857:     # Hence it doesn't matter what df is as long as it's not NaN.
3858:     df = np.where(np.isnan(df), 1, df)
3859:     denom = np.sqrt(vn1 + vn2)
3860:     return df, denom
3861: 
3862: 
3863: def _equal_var_ttest_denom(v1, n1, v2, n2):
3864:     df = n1 + n2 - 2.0
3865:     svar = ((n1 - 1) * v1 + (n2 - 1) * v2) / df
3866:     denom = np.sqrt(svar * (1.0 / n1 + 1.0 / n2))
3867:     return df, denom
3868: 
3869: Ttest_indResult = namedtuple('Ttest_indResult', ('statistic', 'pvalue'))
3870: 
3871: 
3872: def ttest_ind_from_stats(mean1, std1, nobs1, mean2, std2, nobs2,
3873:                          equal_var=True):
3874:     '''
3875:     T-test for means of two independent samples from descriptive statistics.
3876: 
3877:     This is a two-sided test for the null hypothesis that two independent
3878:     samples have identical average (expected) values.
3879: 
3880:     Parameters
3881:     ----------
3882:     mean1 : array_like
3883:         The mean(s) of sample 1.
3884:     std1 : array_like
3885:         The standard deviation(s) of sample 1.
3886:     nobs1 : array_like
3887:         The number(s) of observations of sample 1.
3888:     mean2 : array_like
3889:         The mean(s) of sample 2
3890:     std2 : array_like
3891:         The standard deviations(s) of sample 2.
3892:     nobs2 : array_like
3893:         The number(s) of observations of sample 2.
3894:     equal_var : bool, optional
3895:         If True (default), perform a standard independent 2 sample test
3896:         that assumes equal population variances [1]_.
3897:         If False, perform Welch's t-test, which does not assume equal
3898:         population variance [2]_.
3899: 
3900:     Returns
3901:     -------
3902:     statistic : float or array
3903:         The calculated t-statistics
3904:     pvalue : float or array
3905:         The two-tailed p-value.
3906: 
3907:     See Also
3908:     --------
3909:     scipy.stats.ttest_ind
3910: 
3911:     Notes
3912:     -----
3913: 
3914:     .. versionadded:: 0.16.0
3915: 
3916:     References
3917:     ----------
3918:     .. [1] http://en.wikipedia.org/wiki/T-test#Independent_two-sample_t-test
3919: 
3920:     .. [2] http://en.wikipedia.org/wiki/Welch%27s_t_test
3921: 
3922:     Examples
3923:     --------
3924:     Suppose we have the summary data for two samples, as follows::
3925: 
3926:                          Sample   Sample
3927:                    Size   Mean   Variance
3928:         Sample 1    13    15.0     87.5
3929:         Sample 2    11    12.0     39.0
3930: 
3931:     Apply the t-test to this data (with the assumption that the population
3932:     variances are equal):
3933: 
3934:     >>> from scipy.stats import ttest_ind_from_stats
3935:     >>> ttest_ind_from_stats(mean1=15.0, std1=np.sqrt(87.5), nobs1=13,
3936:     ...                      mean2=12.0, std2=np.sqrt(39.0), nobs2=11)
3937:     Ttest_indResult(statistic=0.90513580933102689, pvalue=0.37519967975814872)
3938: 
3939:     For comparison, here is the data from which those summary statistics
3940:     were taken.  With this data, we can compute the same result using
3941:     `scipy.stats.ttest_ind`:
3942: 
3943:     >>> a = np.array([1, 3, 4, 6, 11, 13, 15, 19, 22, 24, 25, 26, 26])
3944:     >>> b = np.array([2, 4, 6, 9, 11, 13, 14, 15, 18, 19, 21])
3945:     >>> from scipy.stats import ttest_ind
3946:     >>> ttest_ind(a, b)
3947:     Ttest_indResult(statistic=0.905135809331027, pvalue=0.37519967975814861)
3948: 
3949:     '''
3950:     if equal_var:
3951:         df, denom = _equal_var_ttest_denom(std1**2, nobs1, std2**2, nobs2)
3952:     else:
3953:         df, denom = _unequal_var_ttest_denom(std1**2, nobs1,
3954:                                              std2**2, nobs2)
3955: 
3956:     res = _ttest_ind_from_stats(mean1, mean2, denom, df)
3957:     return Ttest_indResult(*res)
3958: 
3959: 
3960: def ttest_ind(a, b, axis=0, equal_var=True, nan_policy='propagate'):
3961:     '''
3962:     Calculate the T-test for the means of *two independent* samples of scores.
3963: 
3964:     This is a two-sided test for the null hypothesis that 2 independent samples
3965:     have identical average (expected) values. This test assumes that the
3966:     populations have identical variances by default.
3967: 
3968:     Parameters
3969:     ----------
3970:     a, b : array_like
3971:         The arrays must have the same shape, except in the dimension
3972:         corresponding to `axis` (the first, by default).
3973:     axis : int or None, optional
3974:         Axis along which to compute test. If None, compute over the whole
3975:         arrays, `a`, and `b`.
3976:     equal_var : bool, optional
3977:         If True (default), perform a standard independent 2 sample test
3978:         that assumes equal population variances [1]_.
3979:         If False, perform Welch's t-test, which does not assume equal
3980:         population variance [2]_.
3981: 
3982:         .. versionadded:: 0.11.0
3983:     nan_policy : {'propagate', 'raise', 'omit'}, optional
3984:         Defines how to handle when input contains nan. 'propagate' returns nan,
3985:         'raise' throws an error, 'omit' performs the calculations ignoring nan
3986:         values. Default is 'propagate'.
3987: 
3988: 
3989:     Returns
3990:     -------
3991:     statistic : float or array
3992:         The calculated t-statistic.
3993:     pvalue : float or array
3994:         The two-tailed p-value.
3995: 
3996:     Notes
3997:     -----
3998:     We can use this test, if we observe two independent samples from
3999:     the same or different population, e.g. exam scores of boys and
4000:     girls or of two ethnic groups. The test measures whether the
4001:     average (expected) value differs significantly across samples. If
4002:     we observe a large p-value, for example larger than 0.05 or 0.1,
4003:     then we cannot reject the null hypothesis of identical average scores.
4004:     If the p-value is smaller than the threshold, e.g. 1%, 5% or 10%,
4005:     then we reject the null hypothesis of equal averages.
4006: 
4007:     References
4008:     ----------
4009:     .. [1] http://en.wikipedia.org/wiki/T-test#Independent_two-sample_t-test
4010: 
4011:     .. [2] http://en.wikipedia.org/wiki/Welch%27s_t_test
4012: 
4013:     Examples
4014:     --------
4015:     >>> from scipy import stats
4016:     >>> np.random.seed(12345678)
4017: 
4018:     Test with sample with identical means:
4019: 
4020:     >>> rvs1 = stats.norm.rvs(loc=5,scale=10,size=500)
4021:     >>> rvs2 = stats.norm.rvs(loc=5,scale=10,size=500)
4022:     >>> stats.ttest_ind(rvs1,rvs2)
4023:     (0.26833823296239279, 0.78849443369564776)
4024:     >>> stats.ttest_ind(rvs1,rvs2, equal_var = False)
4025:     (0.26833823296239279, 0.78849452749500748)
4026: 
4027:     `ttest_ind` underestimates p for unequal variances:
4028: 
4029:     >>> rvs3 = stats.norm.rvs(loc=5, scale=20, size=500)
4030:     >>> stats.ttest_ind(rvs1, rvs3)
4031:     (-0.46580283298287162, 0.64145827413436174)
4032:     >>> stats.ttest_ind(rvs1, rvs3, equal_var = False)
4033:     (-0.46580283298287162, 0.64149646246569292)
4034: 
4035:     When n1 != n2, the equal variance t-statistic is no longer equal to the
4036:     unequal variance t-statistic:
4037: 
4038:     >>> rvs4 = stats.norm.rvs(loc=5, scale=20, size=100)
4039:     >>> stats.ttest_ind(rvs1, rvs4)
4040:     (-0.99882539442782481, 0.3182832709103896)
4041:     >>> stats.ttest_ind(rvs1, rvs4, equal_var = False)
4042:     (-0.69712570584654099, 0.48716927725402048)
4043: 
4044:     T-test with different means, variance, and n:
4045: 
4046:     >>> rvs5 = stats.norm.rvs(loc=8, scale=20, size=100)
4047:     >>> stats.ttest_ind(rvs1, rvs5)
4048:     (-1.4679669854490653, 0.14263895620529152)
4049:     >>> stats.ttest_ind(rvs1, rvs5, equal_var = False)
4050:     (-0.94365973617132992, 0.34744170334794122)
4051: 
4052:     '''
4053:     a, b, axis = _chk2_asarray(a, b, axis)
4054: 
4055:     # check both a and b
4056:     cna, npa = _contains_nan(a, nan_policy)
4057:     cnb, npb = _contains_nan(b, nan_policy)
4058:     contains_nan = cna or cnb
4059:     if npa == 'omit' or npb == 'omit':
4060:         nan_policy = 'omit'
4061: 
4062:     if contains_nan and nan_policy == 'omit':
4063:         a = ma.masked_invalid(a)
4064:         b = ma.masked_invalid(b)
4065:         return mstats_basic.ttest_ind(a, b, axis, equal_var)
4066: 
4067:     if a.size == 0 or b.size == 0:
4068:         return Ttest_indResult(np.nan, np.nan)
4069: 
4070:     v1 = np.var(a, axis, ddof=1)
4071:     v2 = np.var(b, axis, ddof=1)
4072:     n1 = a.shape[axis]
4073:     n2 = b.shape[axis]
4074: 
4075:     if equal_var:
4076:         df, denom = _equal_var_ttest_denom(v1, n1, v2, n2)
4077:     else:
4078:         df, denom = _unequal_var_ttest_denom(v1, n1, v2, n2)
4079: 
4080:     res = _ttest_ind_from_stats(np.mean(a, axis), np.mean(b, axis), denom, df)
4081: 
4082:     return Ttest_indResult(*res)
4083: 
4084: Ttest_relResult = namedtuple('Ttest_relResult', ('statistic', 'pvalue'))
4085: 
4086: 
4087: def ttest_rel(a, b, axis=0, nan_policy='propagate'):
4088:     '''
4089:     Calculate the T-test on TWO RELATED samples of scores, a and b.
4090: 
4091:     This is a two-sided test for the null hypothesis that 2 related or
4092:     repeated samples have identical average (expected) values.
4093: 
4094:     Parameters
4095:     ----------
4096:     a, b : array_like
4097:         The arrays must have the same shape.
4098:     axis : int or None, optional
4099:         Axis along which to compute test. If None, compute over the whole
4100:         arrays, `a`, and `b`.
4101:     nan_policy : {'propagate', 'raise', 'omit'}, optional
4102:         Defines how to handle when input contains nan. 'propagate' returns nan,
4103:         'raise' throws an error, 'omit' performs the calculations ignoring nan
4104:         values. Default is 'propagate'.
4105: 
4106:     Returns
4107:     -------
4108:     statistic : float or array
4109:         t-statistic
4110:     pvalue : float or array
4111:         two-tailed p-value
4112: 
4113:     Notes
4114:     -----
4115:     Examples for the use are scores of the same set of student in
4116:     different exams, or repeated sampling from the same units. The
4117:     test measures whether the average score differs significantly
4118:     across samples (e.g. exams). If we observe a large p-value, for
4119:     example greater than 0.05 or 0.1 then we cannot reject the null
4120:     hypothesis of identical average scores. If the p-value is smaller
4121:     than the threshold, e.g. 1%, 5% or 10%, then we reject the null
4122:     hypothesis of equal averages. Small p-values are associated with
4123:     large t-statistics.
4124: 
4125:     References
4126:     ----------
4127:     https://en.wikipedia.org/wiki/T-test#Dependent_t-test_for_paired_samples
4128: 
4129:     Examples
4130:     --------
4131:     >>> from scipy import stats
4132:     >>> np.random.seed(12345678) # fix random seed to get same numbers
4133: 
4134:     >>> rvs1 = stats.norm.rvs(loc=5,scale=10,size=500)
4135:     >>> rvs2 = (stats.norm.rvs(loc=5,scale=10,size=500) +
4136:     ...         stats.norm.rvs(scale=0.2,size=500))
4137:     >>> stats.ttest_rel(rvs1,rvs2)
4138:     (0.24101764965300962, 0.80964043445811562)
4139:     >>> rvs3 = (stats.norm.rvs(loc=8,scale=10,size=500) +
4140:     ...         stats.norm.rvs(scale=0.2,size=500))
4141:     >>> stats.ttest_rel(rvs1,rvs3)
4142:     (-3.9995108708727933, 7.3082402191726459e-005)
4143: 
4144:     '''
4145:     a, b, axis = _chk2_asarray(a, b, axis)
4146: 
4147:     cna, npa = _contains_nan(a, nan_policy)
4148:     cnb, npb = _contains_nan(b, nan_policy)
4149:     contains_nan = cna or cnb
4150:     if npa == 'omit' or npb == 'omit':
4151:         nan_policy = 'omit'
4152: 
4153:     if contains_nan and nan_policy == 'omit':
4154:         a = ma.masked_invalid(a)
4155:         b = ma.masked_invalid(b)
4156:         m = ma.mask_or(ma.getmask(a), ma.getmask(b))
4157:         aa = ma.array(a, mask=m, copy=True)
4158:         bb = ma.array(b, mask=m, copy=True)
4159:         return mstats_basic.ttest_rel(aa, bb, axis)
4160: 
4161:     if a.shape[axis] != b.shape[axis]:
4162:         raise ValueError('unequal length arrays')
4163: 
4164:     if a.size == 0 or b.size == 0:
4165:         return np.nan, np.nan
4166: 
4167:     n = a.shape[axis]
4168:     df = float(n - 1)
4169: 
4170:     d = (a - b).astype(np.float64)
4171:     v = np.var(d, axis, ddof=1)
4172:     dm = np.mean(d, axis)
4173:     denom = np.sqrt(v / float(n))
4174: 
4175:     with np.errstate(divide='ignore', invalid='ignore'):
4176:         t = np.divide(dm, denom)
4177:     t, prob = _ttest_finish(df, t)
4178: 
4179:     return Ttest_relResult(t, prob)
4180: 
4181: KstestResult = namedtuple('KstestResult', ('statistic', 'pvalue'))
4182: 
4183: 
4184: def kstest(rvs, cdf, args=(), N=20, alternative='two-sided', mode='approx'):
4185:     '''
4186:     Perform the Kolmogorov-Smirnov test for goodness of fit.
4187: 
4188:     This performs a test of the distribution G(x) of an observed
4189:     random variable against a given distribution F(x). Under the null
4190:     hypothesis the two distributions are identical, G(x)=F(x). The
4191:     alternative hypothesis can be either 'two-sided' (default), 'less'
4192:     or 'greater'. The KS test is only valid for continuous distributions.
4193: 
4194:     Parameters
4195:     ----------
4196:     rvs : str, array or callable
4197:         If a string, it should be the name of a distribution in `scipy.stats`.
4198:         If an array, it should be a 1-D array of observations of random
4199:         variables.
4200:         If a callable, it should be a function to generate random variables;
4201:         it is required to have a keyword argument `size`.
4202:     cdf : str or callable
4203:         If a string, it should be the name of a distribution in `scipy.stats`.
4204:         If `rvs` is a string then `cdf` can be False or the same as `rvs`.
4205:         If a callable, that callable is used to calculate the cdf.
4206:     args : tuple, sequence, optional
4207:         Distribution parameters, used if `rvs` or `cdf` are strings.
4208:     N : int, optional
4209:         Sample size if `rvs` is string or callable.  Default is 20.
4210:     alternative : {'two-sided', 'less','greater'}, optional
4211:         Defines the alternative hypothesis (see explanation above).
4212:         Default is 'two-sided'.
4213:     mode : 'approx' (default) or 'asymp', optional
4214:         Defines the distribution used for calculating the p-value.
4215: 
4216:           - 'approx' : use approximation to exact distribution of test statistic
4217:           - 'asymp' : use asymptotic distribution of test statistic
4218: 
4219:     Returns
4220:     -------
4221:     statistic : float
4222:         KS test statistic, either D, D+ or D-.
4223:     pvalue :  float
4224:         One-tailed or two-tailed p-value.
4225: 
4226:     Notes
4227:     -----
4228:     In the one-sided test, the alternative is that the empirical
4229:     cumulative distribution function of the random variable is "less"
4230:     or "greater" than the cumulative distribution function F(x) of the
4231:     hypothesis, ``G(x)<=F(x)``, resp. ``G(x)>=F(x)``.
4232: 
4233:     Examples
4234:     --------
4235:     >>> from scipy import stats
4236: 
4237:     >>> x = np.linspace(-15, 15, 9)
4238:     >>> stats.kstest(x, 'norm')
4239:     (0.44435602715924361, 0.038850142705171065)
4240: 
4241:     >>> np.random.seed(987654321) # set random seed to get the same result
4242:     >>> stats.kstest('norm', False, N=100)
4243:     (0.058352892479417884, 0.88531190944151261)
4244: 
4245:     The above lines are equivalent to:
4246: 
4247:     >>> np.random.seed(987654321)
4248:     >>> stats.kstest(stats.norm.rvs(size=100), 'norm')
4249:     (0.058352892479417884, 0.88531190944151261)
4250: 
4251:     *Test against one-sided alternative hypothesis*
4252: 
4253:     Shift distribution to larger values, so that ``cdf_dgp(x) < norm.cdf(x)``:
4254: 
4255:     >>> np.random.seed(987654321)
4256:     >>> x = stats.norm.rvs(loc=0.2, size=100)
4257:     >>> stats.kstest(x,'norm', alternative = 'less')
4258:     (0.12464329735846891, 0.040989164077641749)
4259: 
4260:     Reject equal distribution against alternative hypothesis: less
4261: 
4262:     >>> stats.kstest(x,'norm', alternative = 'greater')
4263:     (0.0072115233216311081, 0.98531158590396395)
4264: 
4265:     Don't reject equal distribution against alternative hypothesis: greater
4266: 
4267:     >>> stats.kstest(x,'norm', mode='asymp')
4268:     (0.12464329735846891, 0.08944488871182088)
4269: 
4270:     *Testing t distributed random variables against normal distribution*
4271: 
4272:     With 100 degrees of freedom the t distribution looks close to the normal
4273:     distribution, and the K-S test does not reject the hypothesis that the
4274:     sample came from the normal distribution:
4275: 
4276:     >>> np.random.seed(987654321)
4277:     >>> stats.kstest(stats.t.rvs(100,size=100),'norm')
4278:     (0.072018929165471257, 0.67630062862479168)
4279: 
4280:     With 3 degrees of freedom the t distribution looks sufficiently different
4281:     from the normal distribution, that we can reject the hypothesis that the
4282:     sample came from the normal distribution at the 10% level:
4283: 
4284:     >>> np.random.seed(987654321)
4285:     >>> stats.kstest(stats.t.rvs(3,size=100),'norm')
4286:     (0.131016895759829, 0.058826222555312224)
4287: 
4288:     '''
4289:     if isinstance(rvs, string_types):
4290:         if (not cdf) or (cdf == rvs):
4291:             cdf = getattr(distributions, rvs).cdf
4292:             rvs = getattr(distributions, rvs).rvs
4293:         else:
4294:             raise AttributeError("if rvs is string, cdf has to be the "
4295:                                  "same distribution")
4296: 
4297:     if isinstance(cdf, string_types):
4298:         cdf = getattr(distributions, cdf).cdf
4299:     if callable(rvs):
4300:         kwds = {'size': N}
4301:         vals = np.sort(rvs(*args, **kwds))
4302:     else:
4303:         vals = np.sort(rvs)
4304:         N = len(vals)
4305:     cdfvals = cdf(vals, *args)
4306: 
4307:     # to not break compatibility with existing code
4308:     if alternative == 'two_sided':
4309:         alternative = 'two-sided'
4310: 
4311:     if alternative in ['two-sided', 'greater']:
4312:         Dplus = (np.arange(1.0, N + 1)/N - cdfvals).max()
4313:         if alternative == 'greater':
4314:             return KstestResult(Dplus, distributions.ksone.sf(Dplus, N))
4315: 
4316:     if alternative in ['two-sided', 'less']:
4317:         Dmin = (cdfvals - np.arange(0.0, N)/N).max()
4318:         if alternative == 'less':
4319:             return KstestResult(Dmin, distributions.ksone.sf(Dmin, N))
4320: 
4321:     if alternative == 'two-sided':
4322:         D = np.max([Dplus, Dmin])
4323:         if mode == 'asymp':
4324:             return KstestResult(D, distributions.kstwobign.sf(D * np.sqrt(N)))
4325:         if mode == 'approx':
4326:             pval_two = distributions.kstwobign.sf(D * np.sqrt(N))
4327:             if N > 2666 or pval_two > 0.80 - N*0.3/1000:
4328:                 return KstestResult(D, pval_two)
4329:             else:
4330:                 return KstestResult(D, 2 * distributions.ksone.sf(D, N))
4331: 
4332: 
4333: # Map from names to lambda_ values used in power_divergence().
4334: _power_div_lambda_names = {
4335:     "pearson": 1,
4336:     "log-likelihood": 0,
4337:     "freeman-tukey": -0.5,
4338:     "mod-log-likelihood": -1,
4339:     "neyman": -2,
4340:     "cressie-read": 2/3,
4341: }
4342: 
4343: 
4344: def _count(a, axis=None):
4345:     '''
4346:     Count the number of non-masked elements of an array.
4347: 
4348:     This function behaves like np.ma.count(), but is much faster
4349:     for ndarrays.
4350:     '''
4351:     if hasattr(a, 'count'):
4352:         num = a.count(axis=axis)
4353:         if isinstance(num, np.ndarray) and num.ndim == 0:
4354:             # In some cases, the `count` method returns a scalar array (e.g.
4355:             # np.array(3)), but we want a plain integer.
4356:             num = int(num)
4357:     else:
4358:         if axis is None:
4359:             num = a.size
4360:         else:
4361:             num = a.shape[axis]
4362:     return num
4363: 
4364: Power_divergenceResult = namedtuple('Power_divergenceResult',
4365:                                     ('statistic', 'pvalue'))
4366: 
4367: def power_divergence(f_obs, f_exp=None, ddof=0, axis=0, lambda_=None):
4368:     '''
4369:     Cressie-Read power divergence statistic and goodness of fit test.
4370: 
4371:     This function tests the null hypothesis that the categorical data
4372:     has the given frequencies, using the Cressie-Read power divergence
4373:     statistic.
4374: 
4375:     Parameters
4376:     ----------
4377:     f_obs : array_like
4378:         Observed frequencies in each category.
4379:     f_exp : array_like, optional
4380:         Expected frequencies in each category.  By default the categories are
4381:         assumed to be equally likely.
4382:     ddof : int, optional
4383:         "Delta degrees of freedom": adjustment to the degrees of freedom
4384:         for the p-value.  The p-value is computed using a chi-squared
4385:         distribution with ``k - 1 - ddof`` degrees of freedom, where `k`
4386:         is the number of observed frequencies.  The default value of `ddof`
4387:         is 0.
4388:     axis : int or None, optional
4389:         The axis of the broadcast result of `f_obs` and `f_exp` along which to
4390:         apply the test.  If axis is None, all values in `f_obs` are treated
4391:         as a single data set.  Default is 0.
4392:     lambda_ : float or str, optional
4393:         `lambda_` gives the power in the Cressie-Read power divergence
4394:         statistic.  The default is 1.  For convenience, `lambda_` may be
4395:         assigned one of the following strings, in which case the
4396:         corresponding numerical value is used::
4397: 
4398:             String              Value   Description
4399:             "pearson"             1     Pearson's chi-squared statistic.
4400:                                         In this case, the function is
4401:                                         equivalent to `stats.chisquare`.
4402:             "log-likelihood"      0     Log-likelihood ratio. Also known as
4403:                                         the G-test [3]_.
4404:             "freeman-tukey"      -1/2   Freeman-Tukey statistic.
4405:             "mod-log-likelihood" -1     Modified log-likelihood ratio.
4406:             "neyman"             -2     Neyman's statistic.
4407:             "cressie-read"        2/3   The power recommended in [5]_.
4408: 
4409:     Returns
4410:     -------
4411:     statistic : float or ndarray
4412:         The Cressie-Read power divergence test statistic.  The value is
4413:         a float if `axis` is None or if` `f_obs` and `f_exp` are 1-D.
4414:     pvalue : float or ndarray
4415:         The p-value of the test.  The value is a float if `ddof` and the
4416:         return value `stat` are scalars.
4417: 
4418:     See Also
4419:     --------
4420:     chisquare
4421: 
4422:     Notes
4423:     -----
4424:     This test is invalid when the observed or expected frequencies in each
4425:     category are too small.  A typical rule is that all of the observed
4426:     and expected frequencies should be at least 5.
4427: 
4428:     When `lambda_` is less than zero, the formula for the statistic involves
4429:     dividing by `f_obs`, so a warning or error may be generated if any value
4430:     in `f_obs` is 0.
4431: 
4432:     Similarly, a warning or error may be generated if any value in `f_exp` is
4433:     zero when `lambda_` >= 0.
4434: 
4435:     The default degrees of freedom, k-1, are for the case when no parameters
4436:     of the distribution are estimated. If p parameters are estimated by
4437:     efficient maximum likelihood then the correct degrees of freedom are
4438:     k-1-p. If the parameters are estimated in a different way, then the
4439:     dof can be between k-1-p and k-1. However, it is also possible that
4440:     the asymptotic distribution is not a chisquare, in which case this
4441:     test is not appropriate.
4442: 
4443:     This function handles masked arrays.  If an element of `f_obs` or `f_exp`
4444:     is masked, then data at that position is ignored, and does not count
4445:     towards the size of the data set.
4446: 
4447:     .. versionadded:: 0.13.0
4448: 
4449:     References
4450:     ----------
4451:     .. [1] Lowry, Richard.  "Concepts and Applications of Inferential
4452:            Statistics". Chapter 8. http://faculty.vassar.edu/lowry/ch8pt1.html
4453:     .. [2] "Chi-squared test", http://en.wikipedia.org/wiki/Chi-squared_test
4454:     .. [3] "G-test", http://en.wikipedia.org/wiki/G-test
4455:     .. [4] Sokal, R. R. and Rohlf, F. J. "Biometry: the principles and
4456:            practice of statistics in biological research", New York: Freeman
4457:            (1981)
4458:     .. [5] Cressie, N. and Read, T. R. C., "Multinomial Goodness-of-Fit
4459:            Tests", J. Royal Stat. Soc. Series B, Vol. 46, No. 3 (1984),
4460:            pp. 440-464.
4461: 
4462:     Examples
4463:     --------
4464: 
4465:     (See `chisquare` for more examples.)
4466: 
4467:     When just `f_obs` is given, it is assumed that the expected frequencies
4468:     are uniform and given by the mean of the observed frequencies.  Here we
4469:     perform a G-test (i.e. use the log-likelihood ratio statistic):
4470: 
4471:     >>> from scipy.stats import power_divergence
4472:     >>> power_divergence([16, 18, 16, 14, 12, 12], lambda_='log-likelihood')
4473:     (2.006573162632538, 0.84823476779463769)
4474: 
4475:     The expected frequencies can be given with the `f_exp` argument:
4476: 
4477:     >>> power_divergence([16, 18, 16, 14, 12, 12],
4478:     ...                  f_exp=[16, 16, 16, 16, 16, 8],
4479:     ...                  lambda_='log-likelihood')
4480:     (3.3281031458963746, 0.6495419288047497)
4481: 
4482:     When `f_obs` is 2-D, by default the test is applied to each column.
4483: 
4484:     >>> obs = np.array([[16, 18, 16, 14, 12, 12], [32, 24, 16, 28, 20, 24]]).T
4485:     >>> obs.shape
4486:     (6, 2)
4487:     >>> power_divergence(obs, lambda_="log-likelihood")
4488:     (array([ 2.00657316,  6.77634498]), array([ 0.84823477,  0.23781225]))
4489: 
4490:     By setting ``axis=None``, the test is applied to all data in the array,
4491:     which is equivalent to applying the test to the flattened array.
4492: 
4493:     >>> power_divergence(obs, axis=None)
4494:     (23.31034482758621, 0.015975692534127565)
4495:     >>> power_divergence(obs.ravel())
4496:     (23.31034482758621, 0.015975692534127565)
4497: 
4498:     `ddof` is the change to make to the default degrees of freedom.
4499: 
4500:     >>> power_divergence([16, 18, 16, 14, 12, 12], ddof=1)
4501:     (2.0, 0.73575888234288467)
4502: 
4503:     The calculation of the p-values is done by broadcasting the
4504:     test statistic with `ddof`.
4505: 
4506:     >>> power_divergence([16, 18, 16, 14, 12, 12], ddof=[0,1,2])
4507:     (2.0, array([ 0.84914504,  0.73575888,  0.5724067 ]))
4508: 
4509:     `f_obs` and `f_exp` are also broadcast.  In the following, `f_obs` has
4510:     shape (6,) and `f_exp` has shape (2, 6), so the result of broadcasting
4511:     `f_obs` and `f_exp` has shape (2, 6).  To compute the desired chi-squared
4512:     statistics, we must use ``axis=1``:
4513: 
4514:     >>> power_divergence([16, 18, 16, 14, 12, 12],
4515:     ...                  f_exp=[[16, 16, 16, 16, 16, 8],
4516:     ...                         [8, 20, 20, 16, 12, 12]],
4517:     ...                  axis=1)
4518:     (array([ 3.5 ,  9.25]), array([ 0.62338763,  0.09949846]))
4519: 
4520:     '''
4521:     # Convert the input argument `lambda_` to a numerical value.
4522:     if isinstance(lambda_, string_types):
4523:         if lambda_ not in _power_div_lambda_names:
4524:             names = repr(list(_power_div_lambda_names.keys()))[1:-1]
4525:             raise ValueError("invalid string for lambda_: {0!r}.  Valid strings "
4526:                              "are {1}".format(lambda_, names))
4527:         lambda_ = _power_div_lambda_names[lambda_]
4528:     elif lambda_ is None:
4529:         lambda_ = 1
4530: 
4531:     f_obs = np.asanyarray(f_obs)
4532: 
4533:     if f_exp is not None:
4534:         f_exp = np.atleast_1d(np.asanyarray(f_exp))
4535:     else:
4536:         # Compute the equivalent of
4537:         #   f_exp = f_obs.mean(axis=axis, keepdims=True)
4538:         # Older versions of numpy do not have the 'keepdims' argument, so
4539:         # we have to do a little work to achieve the same result.
4540:         # Ignore 'invalid' errors so the edge case of a data set with length 0
4541:         # is handled without spurious warnings.
4542:         with np.errstate(invalid='ignore'):
4543:             f_exp = np.atleast_1d(f_obs.mean(axis=axis))
4544:         if axis is not None:
4545:             reduced_shape = list(f_obs.shape)
4546:             reduced_shape[axis] = 1
4547:             f_exp.shape = reduced_shape
4548: 
4549:     # `terms` is the array of terms that are summed along `axis` to create
4550:     # the test statistic.  We use some specialized code for a few special
4551:     # cases of lambda_.
4552:     if lambda_ == 1:
4553:         # Pearson's chi-squared statistic
4554:         terms = (f_obs - f_exp)**2 / f_exp
4555:     elif lambda_ == 0:
4556:         # Log-likelihood ratio (i.e. G-test)
4557:         terms = 2.0 * special.xlogy(f_obs, f_obs / f_exp)
4558:     elif lambda_ == -1:
4559:         # Modified log-likelihood ratio
4560:         terms = 2.0 * special.xlogy(f_exp, f_exp / f_obs)
4561:     else:
4562:         # General Cressie-Read power divergence.
4563:         terms = f_obs * ((f_obs / f_exp)**lambda_ - 1)
4564:         terms /= 0.5 * lambda_ * (lambda_ + 1)
4565: 
4566:     stat = terms.sum(axis=axis)
4567: 
4568:     num_obs = _count(terms, axis=axis)
4569:     ddof = asarray(ddof)
4570:     p = distributions.chi2.sf(stat, num_obs - 1 - ddof)
4571: 
4572:     return Power_divergenceResult(stat, p)
4573: 
4574: 
4575: def chisquare(f_obs, f_exp=None, ddof=0, axis=0):
4576:     '''
4577:     Calculate a one-way chi square test.
4578: 
4579:     The chi square test tests the null hypothesis that the categorical data
4580:     has the given frequencies.
4581: 
4582:     Parameters
4583:     ----------
4584:     f_obs : array_like
4585:         Observed frequencies in each category.
4586:     f_exp : array_like, optional
4587:         Expected frequencies in each category.  By default the categories are
4588:         assumed to be equally likely.
4589:     ddof : int, optional
4590:         "Delta degrees of freedom": adjustment to the degrees of freedom
4591:         for the p-value.  The p-value is computed using a chi-squared
4592:         distribution with ``k - 1 - ddof`` degrees of freedom, where `k`
4593:         is the number of observed frequencies.  The default value of `ddof`
4594:         is 0.
4595:     axis : int or None, optional
4596:         The axis of the broadcast result of `f_obs` and `f_exp` along which to
4597:         apply the test.  If axis is None, all values in `f_obs` are treated
4598:         as a single data set.  Default is 0.
4599: 
4600:     Returns
4601:     -------
4602:     chisq : float or ndarray
4603:         The chi-squared test statistic.  The value is a float if `axis` is
4604:         None or `f_obs` and `f_exp` are 1-D.
4605:     p : float or ndarray
4606:         The p-value of the test.  The value is a float if `ddof` and the
4607:         return value `chisq` are scalars.
4608: 
4609:     See Also
4610:     --------
4611:     power_divergence
4612:     mstats.chisquare
4613: 
4614:     Notes
4615:     -----
4616:     This test is invalid when the observed or expected frequencies in each
4617:     category are too small.  A typical rule is that all of the observed
4618:     and expected frequencies should be at least 5.
4619: 
4620:     The default degrees of freedom, k-1, are for the case when no parameters
4621:     of the distribution are estimated. If p parameters are estimated by
4622:     efficient maximum likelihood then the correct degrees of freedom are
4623:     k-1-p. If the parameters are estimated in a different way, then the
4624:     dof can be between k-1-p and k-1. However, it is also possible that
4625:     the asymptotic distribution is not a chisquare, in which case this
4626:     test is not appropriate.
4627: 
4628:     References
4629:     ----------
4630:     .. [1] Lowry, Richard.  "Concepts and Applications of Inferential
4631:            Statistics". Chapter 8. http://faculty.vassar.edu/lowry/ch8pt1.html
4632:     .. [2] "Chi-squared test", http://en.wikipedia.org/wiki/Chi-squared_test
4633: 
4634:     Examples
4635:     --------
4636:     When just `f_obs` is given, it is assumed that the expected frequencies
4637:     are uniform and given by the mean of the observed frequencies.
4638: 
4639:     >>> from scipy.stats import chisquare
4640:     >>> chisquare([16, 18, 16, 14, 12, 12])
4641:     (2.0, 0.84914503608460956)
4642: 
4643:     With `f_exp` the expected frequencies can be given.
4644: 
4645:     >>> chisquare([16, 18, 16, 14, 12, 12], f_exp=[16, 16, 16, 16, 16, 8])
4646:     (3.5, 0.62338762774958223)
4647: 
4648:     When `f_obs` is 2-D, by default the test is applied to each column.
4649: 
4650:     >>> obs = np.array([[16, 18, 16, 14, 12, 12], [32, 24, 16, 28, 20, 24]]).T
4651:     >>> obs.shape
4652:     (6, 2)
4653:     >>> chisquare(obs)
4654:     (array([ 2.        ,  6.66666667]), array([ 0.84914504,  0.24663415]))
4655: 
4656:     By setting ``axis=None``, the test is applied to all data in the array,
4657:     which is equivalent to applying the test to the flattened array.
4658: 
4659:     >>> chisquare(obs, axis=None)
4660:     (23.31034482758621, 0.015975692534127565)
4661:     >>> chisquare(obs.ravel())
4662:     (23.31034482758621, 0.015975692534127565)
4663: 
4664:     `ddof` is the change to make to the default degrees of freedom.
4665: 
4666:     >>> chisquare([16, 18, 16, 14, 12, 12], ddof=1)
4667:     (2.0, 0.73575888234288467)
4668: 
4669:     The calculation of the p-values is done by broadcasting the
4670:     chi-squared statistic with `ddof`.
4671: 
4672:     >>> chisquare([16, 18, 16, 14, 12, 12], ddof=[0,1,2])
4673:     (2.0, array([ 0.84914504,  0.73575888,  0.5724067 ]))
4674: 
4675:     `f_obs` and `f_exp` are also broadcast.  In the following, `f_obs` has
4676:     shape (6,) and `f_exp` has shape (2, 6), so the result of broadcasting
4677:     `f_obs` and `f_exp` has shape (2, 6).  To compute the desired chi-squared
4678:     statistics, we use ``axis=1``:
4679: 
4680:     >>> chisquare([16, 18, 16, 14, 12, 12],
4681:     ...           f_exp=[[16, 16, 16, 16, 16, 8], [8, 20, 20, 16, 12, 12]],
4682:     ...           axis=1)
4683:     (array([ 3.5 ,  9.25]), array([ 0.62338763,  0.09949846]))
4684: 
4685:     '''
4686:     return power_divergence(f_obs, f_exp=f_exp, ddof=ddof, axis=axis,
4687:                             lambda_="pearson")
4688: 
4689: Ks_2sampResult = namedtuple('Ks_2sampResult', ('statistic', 'pvalue'))
4690: 
4691: 
4692: def ks_2samp(data1, data2):
4693:     '''
4694:     Compute the Kolmogorov-Smirnov statistic on 2 samples.
4695: 
4696:     This is a two-sided test for the null hypothesis that 2 independent samples
4697:     are drawn from the same continuous distribution.
4698: 
4699:     Parameters
4700:     ----------
4701:     data1, data2 : sequence of 1-D ndarrays
4702:         two arrays of sample observations assumed to be drawn from a continuous
4703:         distribution, sample sizes can be different
4704: 
4705:     Returns
4706:     -------
4707:     statistic : float
4708:         KS statistic
4709:     pvalue : float
4710:         two-tailed p-value
4711: 
4712:     Notes
4713:     -----
4714:     This tests whether 2 samples are drawn from the same distribution. Note
4715:     that, like in the case of the one-sample K-S test, the distribution is
4716:     assumed to be continuous.
4717: 
4718:     This is the two-sided test, one-sided tests are not implemented.
4719:     The test uses the two-sided asymptotic Kolmogorov-Smirnov distribution.
4720: 
4721:     If the K-S statistic is small or the p-value is high, then we cannot
4722:     reject the hypothesis that the distributions of the two samples
4723:     are the same.
4724: 
4725:     Examples
4726:     --------
4727:     >>> from scipy import stats
4728:     >>> np.random.seed(12345678)  #fix random seed to get the same result
4729:     >>> n1 = 200  # size of first sample
4730:     >>> n2 = 300  # size of second sample
4731: 
4732:     For a different distribution, we can reject the null hypothesis since the
4733:     pvalue is below 1%:
4734: 
4735:     >>> rvs1 = stats.norm.rvs(size=n1, loc=0., scale=1)
4736:     >>> rvs2 = stats.norm.rvs(size=n2, loc=0.5, scale=1.5)
4737:     >>> stats.ks_2samp(rvs1, rvs2)
4738:     (0.20833333333333337, 4.6674975515806989e-005)
4739: 
4740:     For a slightly different distribution, we cannot reject the null hypothesis
4741:     at a 10% or lower alpha since the p-value at 0.144 is higher than 10%
4742: 
4743:     >>> rvs3 = stats.norm.rvs(size=n2, loc=0.01, scale=1.0)
4744:     >>> stats.ks_2samp(rvs1, rvs3)
4745:     (0.10333333333333333, 0.14498781825751686)
4746: 
4747:     For an identical distribution, we cannot reject the null hypothesis since
4748:     the p-value is high, 41%:
4749: 
4750:     >>> rvs4 = stats.norm.rvs(size=n2, loc=0.0, scale=1.0)
4751:     >>> stats.ks_2samp(rvs1, rvs4)
4752:     (0.07999999999999996, 0.41126949729859719)
4753: 
4754:     '''
4755:     data1 = np.sort(data1)
4756:     data2 = np.sort(data2)
4757:     n1 = data1.shape[0]
4758:     n2 = data2.shape[0]
4759:     data_all = np.concatenate([data1, data2])
4760:     cdf1 = np.searchsorted(data1, data_all, side='right') / (1.0*n1)
4761:     cdf2 = np.searchsorted(data2, data_all, side='right') / (1.0*n2)
4762:     d = np.max(np.absolute(cdf1 - cdf2))
4763:     # Note: d absolute not signed distance
4764:     en = np.sqrt(n1 * n2 / float(n1 + n2))
4765:     try:
4766:         prob = distributions.kstwobign.sf((en + 0.12 + 0.11 / en) * d)
4767:     except:
4768:         prob = 1.0
4769: 
4770:     return Ks_2sampResult(d, prob)
4771: 
4772: 
4773: def tiecorrect(rankvals):
4774:     '''
4775:     Tie correction factor for ties in the Mann-Whitney U and
4776:     Kruskal-Wallis H tests.
4777: 
4778:     Parameters
4779:     ----------
4780:     rankvals : array_like
4781:         A 1-D sequence of ranks.  Typically this will be the array
4782:         returned by `stats.rankdata`.
4783: 
4784:     Returns
4785:     -------
4786:     factor : float
4787:         Correction factor for U or H.
4788: 
4789:     See Also
4790:     --------
4791:     rankdata : Assign ranks to the data
4792:     mannwhitneyu : Mann-Whitney rank test
4793:     kruskal : Kruskal-Wallis H test
4794: 
4795:     References
4796:     ----------
4797:     .. [1] Siegel, S. (1956) Nonparametric Statistics for the Behavioral
4798:            Sciences.  New York: McGraw-Hill.
4799: 
4800:     Examples
4801:     --------
4802:     >>> from scipy.stats import tiecorrect, rankdata
4803:     >>> tiecorrect([1, 2.5, 2.5, 4])
4804:     0.9
4805:     >>> ranks = rankdata([1, 3, 2, 4, 5, 7, 2, 8, 4])
4806:     >>> ranks
4807:     array([ 1. ,  4. ,  2.5,  5.5,  7. ,  8. ,  2.5,  9. ,  5.5])
4808:     >>> tiecorrect(ranks)
4809:     0.9833333333333333
4810: 
4811:     '''
4812:     arr = np.sort(rankvals)
4813:     idx = np.nonzero(np.r_[True, arr[1:] != arr[:-1], True])[0]
4814:     cnt = np.diff(idx).astype(np.float64)
4815: 
4816:     size = np.float64(arr.size)
4817:     return 1.0 if size < 2 else 1.0 - (cnt**3 - cnt).sum() / (size**3 - size)
4818: 
4819: 
4820: MannwhitneyuResult = namedtuple('MannwhitneyuResult', ('statistic', 'pvalue'))
4821: 
4822: def mannwhitneyu(x, y, use_continuity=True, alternative=None):
4823:     '''
4824:     Compute the Mann-Whitney rank test on samples x and y.
4825: 
4826:     Parameters
4827:     ----------
4828:     x, y : array_like
4829:         Array of samples, should be one-dimensional.
4830:     use_continuity : bool, optional
4831:             Whether a continuity correction (1/2.) should be taken into
4832:             account. Default is True.
4833:     alternative : None (deprecated), 'less', 'two-sided', or 'greater'
4834:             Whether to get the p-value for the one-sided hypothesis ('less'
4835:             or 'greater') or for the two-sided hypothesis ('two-sided').
4836:             Defaults to None, which results in a p-value half the size of
4837:             the 'two-sided' p-value and a different U statistic. The
4838:             default behavior is not the same as using 'less' or 'greater':
4839:             it only exists for backward compatibility and is deprecated.
4840: 
4841:     Returns
4842:     -------
4843:     statistic : float
4844:         The Mann-Whitney U statistic, equal to min(U for x, U for y) if
4845:         `alternative` is equal to None (deprecated; exists for backward
4846:         compatibility), and U for y otherwise.
4847:     pvalue : float
4848:         p-value assuming an asymptotic normal distribution. One-sided or
4849:         two-sided, depending on the choice of `alternative`.
4850: 
4851:     Notes
4852:     -----
4853:     Use only when the number of observation in each sample is > 20 and
4854:     you have 2 independent samples of ranks. Mann-Whitney U is
4855:     significant if the u-obtained is LESS THAN or equal to the critical
4856:     value of U.
4857: 
4858:     This test corrects for ties and by default uses a continuity correction.
4859: 
4860:     References
4861:     ----------
4862:     .. [1] https://en.wikipedia.org/wiki/Mann-Whitney_U_test
4863: 
4864:     .. [2] H.B. Mann and D.R. Whitney, "On a Test of Whether one of Two Random
4865:            Variables is Stochastically Larger than the Other," The Annals of
4866:            Mathematical Statistics, vol. 18, no. 1, pp. 50-60, 1947.
4867: 
4868:     '''
4869:     if alternative is None:
4870:         warnings.warn("Calling `mannwhitneyu` without specifying "
4871:                       "`alternative` is deprecated.", DeprecationWarning)
4872: 
4873:     x = np.asarray(x)
4874:     y = np.asarray(y)
4875:     n1 = len(x)
4876:     n2 = len(y)
4877:     ranked = rankdata(np.concatenate((x, y)))
4878:     rankx = ranked[0:n1]  # get the x-ranks
4879:     u1 = n1*n2 + (n1*(n1+1))/2.0 - np.sum(rankx, axis=0)  # calc U for x
4880:     u2 = n1*n2 - u1  # remainder is U for y
4881:     T = tiecorrect(ranked)
4882:     if T == 0:
4883:         raise ValueError('All numbers are identical in mannwhitneyu')
4884:     sd = np.sqrt(T * n1 * n2 * (n1+n2+1) / 12.0)
4885: 
4886:     meanrank = n1*n2/2.0 + 0.5 * use_continuity
4887:     if alternative is None or alternative == 'two-sided':
4888:         bigu = max(u1, u2)
4889:     elif alternative == 'less':
4890:         bigu = u1
4891:     elif alternative == 'greater':
4892:         bigu = u2
4893:     else:
4894:         raise ValueError("alternative should be None, 'less', 'greater' "
4895:                          "or 'two-sided'")
4896: 
4897:     z = (bigu - meanrank) / sd
4898:     if alternative is None:
4899:         # This behavior, equal to half the size of the two-sided
4900:         # p-value, is deprecated.
4901:         p = distributions.norm.sf(abs(z))
4902:     elif alternative == 'two-sided':
4903:         p = 2 * distributions.norm.sf(abs(z))
4904:     else:
4905:         p = distributions.norm.sf(z)
4906: 
4907:     u = u2
4908:     # This behavior is deprecated.
4909:     if alternative is None:
4910:         u = min(u1, u2)
4911:     return MannwhitneyuResult(u, p)
4912: 
4913: RanksumsResult = namedtuple('RanksumsResult', ('statistic', 'pvalue'))
4914: 
4915: 
4916: def ranksums(x, y):
4917:     '''
4918:     Compute the Wilcoxon rank-sum statistic for two samples.
4919: 
4920:     The Wilcoxon rank-sum test tests the null hypothesis that two sets
4921:     of measurements are drawn from the same distribution.  The alternative
4922:     hypothesis is that values in one sample are more likely to be
4923:     larger than the values in the other sample.
4924: 
4925:     This test should be used to compare two samples from continuous
4926:     distributions.  It does not handle ties between measurements
4927:     in x and y.  For tie-handling and an optional continuity correction
4928:     see `scipy.stats.mannwhitneyu`.
4929: 
4930:     Parameters
4931:     ----------
4932:     x,y : array_like
4933:         The data from the two samples
4934: 
4935:     Returns
4936:     -------
4937:     statistic : float
4938:         The test statistic under the large-sample approximation that the
4939:         rank sum statistic is normally distributed
4940:     pvalue : float
4941:         The two-sided p-value of the test
4942: 
4943:     References
4944:     ----------
4945:     .. [1] http://en.wikipedia.org/wiki/Wilcoxon_rank-sum_test
4946: 
4947:     '''
4948:     x, y = map(np.asarray, (x, y))
4949:     n1 = len(x)
4950:     n2 = len(y)
4951:     alldata = np.concatenate((x, y))
4952:     ranked = rankdata(alldata)
4953:     x = ranked[:n1]
4954:     s = np.sum(x, axis=0)
4955:     expected = n1 * (n1+n2+1) / 2.0
4956:     z = (s - expected) / np.sqrt(n1*n2*(n1+n2+1)/12.0)
4957:     prob = 2 * distributions.norm.sf(abs(z))
4958: 
4959:     return RanksumsResult(z, prob)
4960: 
4961: KruskalResult = namedtuple('KruskalResult', ('statistic', 'pvalue'))
4962: 
4963: 
4964: def kruskal(*args, **kwargs):
4965:     '''
4966:     Compute the Kruskal-Wallis H-test for independent samples
4967: 
4968:     The Kruskal-Wallis H-test tests the null hypothesis that the population
4969:     median of all of the groups are equal.  It is a non-parametric version of
4970:     ANOVA.  The test works on 2 or more independent samples, which may have
4971:     different sizes.  Note that rejecting the null hypothesis does not
4972:     indicate which of the groups differs.  Post-hoc comparisons between
4973:     groups are required to determine which groups are different.
4974: 
4975:     Parameters
4976:     ----------
4977:     sample1, sample2, ... : array_like
4978:        Two or more arrays with the sample measurements can be given as
4979:        arguments.
4980:     nan_policy : {'propagate', 'raise', 'omit'}, optional
4981:         Defines how to handle when input contains nan. 'propagate' returns nan,
4982:         'raise' throws an error, 'omit' performs the calculations ignoring nan
4983:         values. Default is 'propagate'.
4984: 
4985:     Returns
4986:     -------
4987:     statistic : float
4988:        The Kruskal-Wallis H statistic, corrected for ties
4989:     pvalue : float
4990:        The p-value for the test using the assumption that H has a chi
4991:        square distribution
4992: 
4993:     See Also
4994:     --------
4995:     f_oneway : 1-way ANOVA
4996:     mannwhitneyu : Mann-Whitney rank test on two samples.
4997:     friedmanchisquare : Friedman test for repeated measurements
4998: 
4999:     Notes
5000:     -----
5001:     Due to the assumption that H has a chi square distribution, the number
5002:     of samples in each group must not be too small.  A typical rule is
5003:     that each sample must have at least 5 measurements.
5004: 
5005:     References
5006:     ----------
5007:     .. [1] W. H. Kruskal & W. W. Wallis, "Use of Ranks in
5008:        One-Criterion Variance Analysis", Journal of the American Statistical
5009:        Association, Vol. 47, Issue 260, pp. 583-621, 1952.
5010:     .. [2] http://en.wikipedia.org/wiki/Kruskal-Wallis_one-way_analysis_of_variance
5011: 
5012:     Examples
5013:     --------
5014:     >>> from scipy import stats
5015:     >>> x = [1, 3, 5, 7, 9]
5016:     >>> y = [2, 4, 6, 8, 10]
5017:     >>> stats.kruskal(x, y)
5018:     KruskalResult(statistic=0.27272727272727337, pvalue=0.60150813444058948)
5019: 
5020:     >>> x = [1, 1, 1]
5021:     >>> y = [2, 2, 2]
5022:     >>> z = [2, 2]
5023:     >>> stats.kruskal(x, y, z)
5024:     KruskalResult(statistic=7.0, pvalue=0.030197383422318501)
5025: 
5026:     '''
5027:     args = list(map(np.asarray, args))
5028:     num_groups = len(args)
5029:     if num_groups < 2:
5030:         raise ValueError("Need at least two groups in stats.kruskal()")
5031: 
5032:     for arg in args:
5033:         if arg.size == 0:
5034:             return KruskalResult(np.nan, np.nan)
5035:     n = np.asarray(list(map(len, args)))
5036: 
5037:     if 'nan_policy' in kwargs.keys():
5038:         if kwargs['nan_policy'] not in ('propagate', 'raise', 'omit'):
5039:             raise ValueError("nan_policy must be 'propagate', "
5040:                              "'raise' or'omit'")
5041:         else:
5042:             nan_policy = kwargs['nan_policy']
5043:     else:
5044:         nan_policy = 'propagate'
5045: 
5046:     contains_nan = False
5047:     for arg in args:
5048:         cn = _contains_nan(arg, nan_policy)
5049:         if cn[0]:
5050:             contains_nan = True
5051:             break
5052: 
5053:     if contains_nan and nan_policy == 'omit':
5054:         for a in args:
5055:             a = ma.masked_invalid(a)
5056:         return mstats_basic.kruskal(*args)
5057: 
5058:     if contains_nan and nan_policy == 'propagate':
5059:         return KruskalResult(np.nan, np.nan)
5060: 
5061:     alldata = np.concatenate(args)
5062:     ranked = rankdata(alldata)
5063:     ties = tiecorrect(ranked)
5064:     if ties == 0:
5065:         raise ValueError('All numbers are identical in kruskal')
5066: 
5067:     # Compute sum^2/n for each group and sum
5068:     j = np.insert(np.cumsum(n), 0, 0)
5069:     ssbn = 0
5070:     for i in range(num_groups):
5071:         ssbn += _square_of_sums(ranked[j[i]:j[i+1]]) / float(n[i])
5072: 
5073:     totaln = np.sum(n)
5074:     h = 12.0 / (totaln * (totaln + 1)) * ssbn - 3 * (totaln + 1)
5075:     df = num_groups - 1
5076:     h /= ties
5077: 
5078:     return KruskalResult(h, distributions.chi2.sf(h, df))
5079: 
5080: 
5081: FriedmanchisquareResult = namedtuple('FriedmanchisquareResult',
5082:                                      ('statistic', 'pvalue'))
5083: 
5084: 
5085: def friedmanchisquare(*args):
5086:     '''
5087:     Compute the Friedman test for repeated measurements
5088: 
5089:     The Friedman test tests the null hypothesis that repeated measurements of
5090:     the same individuals have the same distribution.  It is often used
5091:     to test for consistency among measurements obtained in different ways.
5092:     For example, if two measurement techniques are used on the same set of
5093:     individuals, the Friedman test can be used to determine if the two
5094:     measurement techniques are consistent.
5095: 
5096:     Parameters
5097:     ----------
5098:     measurements1, measurements2, measurements3... : array_like
5099:         Arrays of measurements.  All of the arrays must have the same number
5100:         of elements.  At least 3 sets of measurements must be given.
5101: 
5102:     Returns
5103:     -------
5104:     statistic : float
5105:         the test statistic, correcting for ties
5106:     pvalue : float
5107:         the associated p-value assuming that the test statistic has a chi
5108:         squared distribution
5109: 
5110:     Notes
5111:     -----
5112:     Due to the assumption that the test statistic has a chi squared
5113:     distribution, the p-value is only reliable for n > 10 and more than
5114:     6 repeated measurements.
5115: 
5116:     References
5117:     ----------
5118:     .. [1] http://en.wikipedia.org/wiki/Friedman_test
5119: 
5120:     '''
5121:     k = len(args)
5122:     if k < 3:
5123:         raise ValueError('Less than 3 levels.  Friedman test not appropriate.')
5124: 
5125:     n = len(args[0])
5126:     for i in range(1, k):
5127:         if len(args[i]) != n:
5128:             raise ValueError('Unequal N in friedmanchisquare.  Aborting.')
5129: 
5130:     # Rank data
5131:     data = np.vstack(args).T
5132:     data = data.astype(float)
5133:     for i in range(len(data)):
5134:         data[i] = rankdata(data[i])
5135: 
5136:     # Handle ties
5137:     ties = 0
5138:     for i in range(len(data)):
5139:         replist, repnum = find_repeats(array(data[i]))
5140:         for t in repnum:
5141:             ties += t * (t*t - 1)
5142:     c = 1 - ties / float(k*(k*k - 1)*n)
5143: 
5144:     ssbn = np.sum(data.sum(axis=0)**2)
5145:     chisq = (12.0 / (k*n*(k+1)) * ssbn - 3*n*(k+1)) / c
5146: 
5147:     return FriedmanchisquareResult(chisq, distributions.chi2.sf(chisq, k - 1))
5148: 
5149: 
5150: def combine_pvalues(pvalues, method='fisher', weights=None):
5151:     '''
5152:     Methods for combining the p-values of independent tests bearing upon the
5153:     same hypothesis.
5154: 
5155:     Parameters
5156:     ----------
5157:     pvalues : array_like, 1-D
5158:         Array of p-values assumed to come from independent tests.
5159:     method : {'fisher', 'stouffer'}, optional
5160:         Name of method to use to combine p-values. The following methods are
5161:         available:
5162: 
5163:         - "fisher": Fisher's method (Fisher's combined probability test),
5164:           the default.
5165:         - "stouffer": Stouffer's Z-score method.
5166:     weights : array_like, 1-D, optional
5167:         Optional array of weights used only for Stouffer's Z-score method.
5168: 
5169:     Returns
5170:     -------
5171:     statistic: float
5172:         The statistic calculated by the specified method:
5173:         - "fisher": The chi-squared statistic
5174:         - "stouffer": The Z-score
5175:     pval: float
5176:         The combined p-value.
5177: 
5178:     Notes
5179:     -----
5180:     Fisher's method (also known as Fisher's combined probability test) [1]_ uses
5181:     a chi-squared statistic to compute a combined p-value. The closely related
5182:     Stouffer's Z-score method [2]_ uses Z-scores rather than p-values. The
5183:     advantage of Stouffer's method is that it is straightforward to introduce
5184:     weights, which can make Stouffer's method more powerful than Fisher's
5185:     method when the p-values are from studies of different size [3]_ [4]_.
5186: 
5187:     Fisher's method may be extended to combine p-values from dependent tests
5188:     [5]_. Extensions such as Brown's method and Kost's method are not currently
5189:     implemented.
5190: 
5191:     .. versionadded:: 0.15.0
5192: 
5193:     References
5194:     ----------
5195:     .. [1] https://en.wikipedia.org/wiki/Fisher%27s_method
5196:     .. [2] http://en.wikipedia.org/wiki/Fisher's_method#Relation_to_Stouffer.27s_Z-score_method
5197:     .. [3] Whitlock, M. C. "Combining probability from independent tests: the
5198:            weighted Z-method is superior to Fisher's approach." Journal of
5199:            Evolutionary Biology 18, no. 5 (2005): 1368-1373.
5200:     .. [4] Zaykin, Dmitri V. "Optimally weighted Z-test is a powerful method
5201:            for combining probabilities in meta-analysis." Journal of
5202:            Evolutionary Biology 24, no. 8 (2011): 1836-1841.
5203:     .. [5] https://en.wikipedia.org/wiki/Extensions_of_Fisher%27s_method
5204: 
5205:     '''
5206:     pvalues = np.asarray(pvalues)
5207:     if pvalues.ndim != 1:
5208:         raise ValueError("pvalues is not 1-D")
5209: 
5210:     if method == 'fisher':
5211:         Xsq = -2 * np.sum(np.log(pvalues))
5212:         pval = distributions.chi2.sf(Xsq, 2 * len(pvalues))
5213:         return (Xsq, pval)
5214:     elif method == 'stouffer':
5215:         if weights is None:
5216:             weights = np.ones_like(pvalues)
5217:         elif len(weights) != len(pvalues):
5218:             raise ValueError("pvalues and weights must be of the same size.")
5219: 
5220:         weights = np.asarray(weights)
5221:         if weights.ndim != 1:
5222:             raise ValueError("weights is not 1-D")
5223: 
5224:         Zi = distributions.norm.isf(pvalues)
5225:         Z = np.dot(weights, Zi) / np.linalg.norm(weights)
5226:         pval = distributions.norm.sf(Z)
5227: 
5228:         return (Z, pval)
5229:     else:
5230:         raise ValueError(
5231:             "Invalid method '%s'. Options are 'fisher' or 'stouffer'", method)
5232: 
5233: #####################################
5234: #      PROBABILITY CALCULATIONS     #
5235: #####################################
5236: 
5237: 
5238: def _betai(a, b, x):
5239:     x = np.asarray(x)
5240:     x = np.where(x < 1.0, x, 1.0)  # if x > 1 then return 1.0
5241:     return special.betainc(a, b, x)
5242: 
5243: 
5244: #####################################
5245: #       STATISTICAL DISTANCES       #
5246: #####################################
5247: 
5248: def wasserstein_distance(u_values, v_values, u_weights=None, v_weights=None):
5249:     r'''
5250:     Compute the first Wasserstein distance between two 1D distributions.
5251: 
5252:     This distance is also known as the earth mover's distance, since it can be
5253:     seen as the minimum amount of "work" required to transform :math:`u` into
5254:     :math:`v`, where "work" is measured as the amount of distribution weight
5255:     that must be moved, multiplied by the distance it has to be moved.
5256: 
5257:     .. versionadded:: 1.0.0
5258: 
5259:     Parameters
5260:     ----------
5261:     u_values, v_values : array_like
5262:         Values observed in the (empirical) distribution.
5263:     u_weights, v_weights : array_like, optional
5264:         Weight for each value. If unspecified, each value is assigned the same
5265:         weight.
5266:         `u_weights` (resp. `v_weights`) must have the same length as
5267:         `u_values` (resp. `v_values`). If the weight sum differs from 1, it
5268:         must still be positive and finite so that the weights can be normalized
5269:         to sum to 1.
5270: 
5271:     Returns
5272:     -------
5273:     distance : float
5274:         The computed distance between the distributions.
5275: 
5276:     Notes
5277:     -----
5278:     The first Wasserstein distance between the distributions :math:`u` and
5279:     :math:`v` is:
5280: 
5281:     .. math::
5282: 
5283:         l_1 (u, v) = \inf_{\pi \in \Gamma (u, v)} \int_{\mathbb{R} \times
5284:         \mathbb{R}} |x-y| \mathrm{d} \pi (x, y)
5285: 
5286:     where :math:`\Gamma (u, v)` is the set of (probability) distributions on
5287:     :math:`\mathbb{R} \times \mathbb{R}` whose marginals are :math:`u` and
5288:     :math:`v` on the first and second factors respectively.
5289: 
5290:     If :math:`U` and :math:`V` are the respective CDFs of :math:`u` and
5291:     :math:`v`, this distance also equals to:
5292: 
5293:     .. math::
5294: 
5295:         l_1(u, v) = \int_{-\infty}^{+\infty} |U-V|
5296: 
5297:     See [2]_ for a proof of the equivalence of both definitions.
5298: 
5299:     The input distributions can be empirical, therefore coming from samples
5300:     whose values are effectively inputs of the function, or they can be seen as
5301:     generalized functions, in which case they are weighted sums of Dirac delta
5302:     functions located at the specified values.
5303: 
5304:     References
5305:     ----------
5306:     .. [1] "Wasserstein metric", http://en.wikipedia.org/wiki/Wasserstein_metric
5307:     .. [2] Ramdas, Garcia, Cuturi "On Wasserstein Two Sample Testing and Related
5308:            Families of Nonparametric Tests" (2015). :arXiv:`1509.02237`.
5309: 
5310:     Examples
5311:     --------
5312:     >>> from scipy.stats import wasserstein_distance
5313:     >>> wasserstein_distance([0, 1, 3], [5, 6, 8])
5314:     5.0
5315:     >>> wasserstein_distance([0, 1], [0, 1], [3, 1], [2, 2])
5316:     0.25
5317:     >>> wasserstein_distance([3.4, 3.9, 7.5, 7.8], [4.5, 1.4],
5318:     ...                      [1.4, 0.9, 3.1, 7.2], [3.2, 3.5])
5319:     4.0781331438047861
5320:     '''
5321:     return _cdf_distance(1, u_values, v_values, u_weights, v_weights)
5322: 
5323: 
5324: def energy_distance(u_values, v_values, u_weights=None, v_weights=None):
5325:     r'''
5326:     Compute the energy distance between two 1D distributions.
5327: 
5328:     .. versionadded:: 1.0.0
5329: 
5330:     Parameters
5331:     ----------
5332:     u_values, v_values : array_like
5333:         Values observed in the (empirical) distribution.
5334:     u_weights, v_weights : array_like, optional
5335:         Weight for each value. If unspecified, each value is assigned the same
5336:         weight.
5337:         `u_weights` (resp. `v_weights`) must have the same length as
5338:         `u_values` (resp. `v_values`). If the weight sum differs from 1, it
5339:         must still be positive and finite so that the weights can be normalized
5340:         to sum to 1.
5341: 
5342:     Returns
5343:     -------
5344:     distance : float
5345:         The computed distance between the distributions.
5346: 
5347:     Notes
5348:     -----
5349:     The energy distance between two distributions :math:`u` and :math:`v`, whose
5350:     respective CDFs are :math:`U` and :math:`V`, equals to:
5351: 
5352:     .. math::
5353: 
5354:         D(u, v) = \left( 2\mathbb E|X - Y| - \mathbb E|X - X'| -
5355:         \mathbb E|Y - Y'| \right)^{1/2}
5356: 
5357:     where :math:`X` and :math:`X'` (resp. :math:`Y` and :math:`Y'`) are
5358:     independent random variables whose probability distribution is :math:`u`
5359:     (resp. :math:`v`).
5360: 
5361:     As shown in [2]_, for one-dimensional real-valued variables, the energy
5362:     distance is linked to the non-distribution-free version of the Cramer-von
5363:     Mises distance:
5364: 
5365:     .. math::
5366: 
5367:         D(u, v) = \sqrt{2} l_2(u, v) = \left( 2 \int_{-\infty}^{+\infty} (U-V)^2
5368:         \right)^{1/2}
5369: 
5370:     Note that the common Cramer-von Mises criterion uses the distribution-free
5371:     version of the distance. See [2]_ (section 2), for more details about both
5372:     versions of the distance.
5373: 
5374:     The input distributions can be empirical, therefore coming from samples
5375:     whose values are effectively inputs of the function, or they can be seen as
5376:     generalized functions, in which case they are weighted sums of Dirac delta
5377:     functions located at the specified values.
5378: 
5379:     References
5380:     ----------
5381:     .. [1] "Energy distance", https://en.wikipedia.org/wiki/Energy_distance
5382:     .. [2] Szekely "E-statistics: The energy of statistical samples." Bowling
5383:            Green State University, Department of Mathematics and Statistics,
5384:            Technical Report 02-16 (2002).
5385:     .. [3] Rizzo, Szekely "Energy distance." Wiley Interdisciplinary Reviews:
5386:            Computational Statistics, 8(1):27-38 (2015).
5387:     .. [4] Bellemare, Danihelka, Dabney, Mohamed, Lakshminarayanan, Hoyer,
5388:            Munos "The Cramer Distance as a Solution to Biased Wasserstein
5389:            Gradients" (2017). :arXiv:`1705.10743`.
5390: 
5391:     Examples
5392:     --------
5393:     >>> from scipy.stats import energy_distance
5394:     >>> energy_distance([0], [2])
5395:     2.0000000000000004
5396:     >>> energy_distance([0, 8], [0, 8], [3, 1], [2, 2])
5397:     1.0000000000000002
5398:     >>> energy_distance([0.7, 7.4, 2.4, 6.8], [1.4, 8. ],
5399:     ...                 [2.1, 4.2, 7.4, 8. ], [7.6, 8.8])
5400:     0.88003340976158217
5401:     '''
5402:     return np.sqrt(2) * _cdf_distance(2, u_values, v_values,
5403:                                       u_weights, v_weights)
5404: 
5405: 
5406: def _cdf_distance(p, u_values, v_values, u_weights=None, v_weights=None):
5407:     r'''
5408:     Compute, between two one-dimensional distributions :math:`u` and
5409:     :math:`v`, whose respective CDFs are :math:`U` and :math:`V`, the
5410:     statistical distance that is defined as:
5411: 
5412:     .. math::
5413: 
5414:         l_p(u, v) = \left( \int_{-\infty}^{+\infty} |U-V|^p \right)^{1/p}
5415: 
5416:     p is a positive parameter; p = 1 gives the Wasserstein distance, p = 2
5417:     gives the energy distance.
5418: 
5419:     Parameters
5420:     ----------
5421:     u_values, v_values : array_like
5422:         Values observed in the (empirical) distribution.
5423:     u_weights, v_weights : array_like, optional
5424:         Weight for each value. If unspecified, each value is assigned the same
5425:         weight.
5426:         `u_weights` (resp. `v_weights`) must have the same length as
5427:         `u_values` (resp. `v_values`). If the weight sum differs from 1, it
5428:         must still be positive and finite so that the weights can be normalized
5429:         to sum to 1.
5430: 
5431:     Returns
5432:     -------
5433:     distance : float
5434:         The computed distance between the distributions.
5435: 
5436:     Notes
5437:     -----
5438:     The input distributions can be empirical, therefore coming from samples
5439:     whose values are effectively inputs of the function, or they can be seen as
5440:     generalized functions, in which case they are weighted sums of Dirac delta
5441:     functions located at the specified values.
5442: 
5443:     References
5444:     ----------
5445:     .. [1] Bellemare, Danihelka, Dabney, Mohamed, Lakshminarayanan, Hoyer,
5446:            Munos "The Cramer Distance as a Solution to Biased Wasserstein
5447:            Gradients" (2017). :arXiv:`1705.10743`.
5448:     '''
5449:     u_values, u_weights = _validate_distribution(u_values, u_weights)
5450:     v_values, v_weights = _validate_distribution(v_values, v_weights)
5451: 
5452:     u_sorter = np.argsort(u_values)
5453:     v_sorter = np.argsort(v_values)
5454: 
5455:     all_values = np.concatenate((u_values, v_values))
5456:     all_values.sort(kind='mergesort')
5457: 
5458:     # Compute the differences between pairs of successive values of u and v.
5459:     deltas = np.diff(all_values)
5460: 
5461:     # Get the repective positions of the values of u and v among the values of
5462:     # both distributions.
5463:     u_cdf_indices = u_values[u_sorter].searchsorted(all_values[:-1], 'right')
5464:     v_cdf_indices = v_values[v_sorter].searchsorted(all_values[:-1], 'right')
5465: 
5466:     # Calculate the CDFs of u and v using their weights, if specified.
5467:     if u_weights is None:
5468:         u_cdf = u_cdf_indices / u_values.size
5469:     else:
5470:         u_sorted_cumweights = np.concatenate(([0],
5471:                                               np.cumsum(u_weights[u_sorter])))
5472:         u_cdf = u_sorted_cumweights[u_cdf_indices] / u_sorted_cumweights[-1]
5473: 
5474:     if v_weights is None:
5475:         v_cdf = v_cdf_indices / v_values.size
5476:     else:
5477:         v_sorted_cumweights = np.concatenate(([0],
5478:                                               np.cumsum(v_weights[v_sorter])))
5479:         v_cdf = v_sorted_cumweights[v_cdf_indices] / v_sorted_cumweights[-1]
5480: 
5481:     # Compute the value of the integral based on the CDFs.
5482:     # If p = 1 or p = 2, we avoid using np.power, which introduces an overhead
5483:     # of about 15%.
5484:     if p == 1:
5485:         return np.sum(np.multiply(np.abs(u_cdf - v_cdf), deltas))
5486:     if p == 2:
5487:         return np.sqrt(np.sum(np.multiply(np.square(u_cdf - v_cdf), deltas)))
5488:     return np.power(np.sum(np.multiply(np.power(np.abs(u_cdf - v_cdf), p),
5489:                                        deltas)), 1/p)
5490: 
5491: 
5492: def _validate_distribution(values, weights):
5493:     '''
5494:     Validate the values and weights from a distribution input of `cdf_distance`
5495:     and return them as ndarray objects.
5496: 
5497:     Parameters
5498:     ----------
5499:     values : array_like
5500:         Values observed in the (empirical) distribution.
5501:     weights : array_like
5502:         Weight for each value.
5503: 
5504:     Returns
5505:     -------
5506:     values : ndarray
5507:         Values as ndarray.
5508:     weights : ndarray
5509:         Weights as ndarray.
5510:     '''
5511:     # Validate the value array.
5512:     values = np.asarray(values, dtype=float)
5513:     if len(values) == 0:
5514:         raise ValueError("Distribution can't be empty.")
5515: 
5516:     # Validate the weight array, if specified.
5517:     if weights is not None:
5518:         weights = np.asarray(weights, dtype=float)
5519:         if len(weights) != len(values):
5520:             raise ValueError('Value and weight array-likes for the same '
5521:                              'empirical distribution must be of the same size.')
5522:         if np.any(weights < 0):
5523:             raise ValueError('All weights must be non-negative.')
5524:         if not 0 < np.sum(weights) < np.inf:
5525:             raise ValueError('Weight array-like sum must be positive and '
5526:                              'finite. Set as None for an equal distribution of '
5527:                              'weight.')
5528: 
5529:         return values, weights
5530: 
5531:     return values, None
5532: 
5533: 
5534: #####################################
5535: #         SUPPORT FUNCTIONS         #
5536: #####################################
5537: 
5538: RepeatedResults = namedtuple('RepeatedResults', ('values', 'counts'))
5539: 
5540: 
5541: def find_repeats(arr):
5542:     '''
5543:     Find repeats and repeat counts.
5544: 
5545:     Parameters
5546:     ----------
5547:     arr : array_like
5548:         Input array. This is cast to float64.
5549: 
5550:     Returns
5551:     -------
5552:     values : ndarray
5553:         The unique values from the (flattened) input that are repeated.
5554: 
5555:     counts : ndarray
5556:         Number of times the corresponding 'value' is repeated.
5557: 
5558:     Notes
5559:     -----
5560:     In numpy >= 1.9 `numpy.unique` provides similar functionality. The main
5561:     difference is that `find_repeats` only returns repeated values.
5562: 
5563:     Examples
5564:     --------
5565:     >>> from scipy import stats
5566:     >>> stats.find_repeats([2, 1, 2, 3, 2, 2, 5])
5567:     RepeatedResults(values=array([ 2.]), counts=array([4]))
5568: 
5569:     >>> stats.find_repeats([[10, 20, 1, 2], [5, 5, 4, 4]])
5570:     RepeatedResults(values=array([ 4.,  5.]), counts=array([2, 2]))
5571: 
5572:     '''
5573:     # Note: always copies.
5574:     return RepeatedResults(*_find_repeats(np.array(arr, dtype=np.float64)))
5575: 
5576: 
5577: def _sum_of_squares(a, axis=0):
5578:     '''
5579:     Square each element of the input array, and return the sum(s) of that.
5580: 
5581:     Parameters
5582:     ----------
5583:     a : array_like
5584:         Input array.
5585:     axis : int or None, optional
5586:         Axis along which to calculate. Default is 0. If None, compute over
5587:         the whole array `a`.
5588: 
5589:     Returns
5590:     -------
5591:     sum_of_squares : ndarray
5592:         The sum along the given axis for (a**2).
5593: 
5594:     See also
5595:     --------
5596:     _square_of_sums : The square(s) of the sum(s) (the opposite of
5597:     `_sum_of_squares`).
5598:     '''
5599:     a, axis = _chk_asarray(a, axis)
5600:     return np.sum(a*a, axis)
5601: 
5602: 
5603: def _square_of_sums(a, axis=0):
5604:     '''
5605:     Sum elements of the input array, and return the square(s) of that sum.
5606: 
5607:     Parameters
5608:     ----------
5609:     a : array_like
5610:         Input array.
5611:     axis : int or None, optional
5612:         Axis along which to calculate. Default is 0. If None, compute over
5613:         the whole array `a`.
5614: 
5615:     Returns
5616:     -------
5617:     square_of_sums : float or ndarray
5618:         The square of the sum over `axis`.
5619: 
5620:     See also
5621:     --------
5622:     _sum_of_squares : The sum of squares (the opposite of `square_of_sums`).
5623:     '''
5624:     a, axis = _chk_asarray(a, axis)
5625:     s = np.sum(a, axis)
5626:     if not np.isscalar(s):
5627:         return s.astype(float) * s
5628:     else:
5629:         return float(s) * s
5630: 
5631: 
5632: def rankdata(a, method='average'):
5633:     '''
5634:     Assign ranks to data, dealing with ties appropriately.
5635: 
5636:     Ranks begin at 1.  The `method` argument controls how ranks are assigned
5637:     to equal values.  See [1]_ for further discussion of ranking methods.
5638: 
5639:     Parameters
5640:     ----------
5641:     a : array_like
5642:         The array of values to be ranked.  The array is first flattened.
5643:     method : str, optional
5644:         The method used to assign ranks to tied elements.
5645:         The options are 'average', 'min', 'max', 'dense' and 'ordinal'.
5646: 
5647:         'average':
5648:             The average of the ranks that would have been assigned to
5649:             all the tied values is assigned to each value.
5650:         'min':
5651:             The minimum of the ranks that would have been assigned to all
5652:             the tied values is assigned to each value.  (This is also
5653:             referred to as "competition" ranking.)
5654:         'max':
5655:             The maximum of the ranks that would have been assigned to all
5656:             the tied values is assigned to each value.
5657:         'dense':
5658:             Like 'min', but the rank of the next highest element is assigned
5659:             the rank immediately after those assigned to the tied elements.
5660:         'ordinal':
5661:             All values are given a distinct rank, corresponding to the order
5662:             that the values occur in `a`.
5663: 
5664:         The default is 'average'.
5665: 
5666:     Returns
5667:     -------
5668:     ranks : ndarray
5669:          An array of length equal to the size of `a`, containing rank
5670:          scores.
5671: 
5672:     References
5673:     ----------
5674:     .. [1] "Ranking", http://en.wikipedia.org/wiki/Ranking
5675: 
5676:     Examples
5677:     --------
5678:     >>> from scipy.stats import rankdata
5679:     >>> rankdata([0, 2, 3, 2])
5680:     array([ 1. ,  2.5,  4. ,  2.5])
5681:     >>> rankdata([0, 2, 3, 2], method='min')
5682:     array([ 1,  2,  4,  2])
5683:     >>> rankdata([0, 2, 3, 2], method='max')
5684:     array([ 1,  3,  4,  3])
5685:     >>> rankdata([0, 2, 3, 2], method='dense')
5686:     array([ 1,  2,  3,  2])
5687:     >>> rankdata([0, 2, 3, 2], method='ordinal')
5688:     array([ 1,  2,  4,  3])
5689:     '''
5690:     if method not in ('average', 'min', 'max', 'dense', 'ordinal'):
5691:         raise ValueError('unknown method "{0}"'.format(method))
5692: 
5693:     arr = np.ravel(np.asarray(a))
5694:     algo = 'mergesort' if method == 'ordinal' else 'quicksort'
5695:     sorter = np.argsort(arr, kind=algo)
5696: 
5697:     inv = np.empty(sorter.size, dtype=np.intp)
5698:     inv[sorter] = np.arange(sorter.size, dtype=np.intp)
5699: 
5700:     if method == 'ordinal':
5701:         return inv + 1
5702: 
5703:     arr = arr[sorter]
5704:     obs = np.r_[True, arr[1:] != arr[:-1]]
5705:     dense = obs.cumsum()[inv]
5706: 
5707:     if method == 'dense':
5708:         return dense
5709: 
5710:     # cumulative counts of each unique value
5711:     count = np.r_[np.nonzero(obs)[0], len(obs)]
5712: 
5713:     if method == 'max':
5714:         return count[dense]
5715: 
5716:     if method == 'min':
5717:         return count[dense - 1] + 1
5718: 
5719:     # average method
5720:     return .5 * (count[dense] + count[dense - 1] + 1)
5721: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_579989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, (-1)), 'str', "\nA collection of basic statistical functions for Python.  The function\nnames appear below.\n\n Some scalar functions defined here are also available in the scipy.special\n package where they work on arbitrary sized arrays.\n\nDisclaimers:  The function list is obviously incomplete and, worse, the\nfunctions are not optimized.  All functions have been tested (some more\nso than others), but they are far from bulletproof.  Thus, as with any\nfree software, no warranty or guarantee is expressed or implied. :-)  A\nfew extra functions that don't appear in the list below can be found by\ninterested treasure-hunters.  These functions don't necessarily have\nboth list and array versions but were deemed useful.\n\nCentral Tendency\n----------------\n.. autosummary::\n   :toctree: generated/\n\n    gmean\n    hmean\n    mode\n\nMoments\n-------\n.. autosummary::\n   :toctree: generated/\n\n    moment\n    variation\n    skew\n    kurtosis\n    normaltest\n\nAltered Versions\n----------------\n.. autosummary::\n   :toctree: generated/\n\n    tmean\n    tvar\n    tstd\n    tsem\n    describe\n\nFrequency Stats\n---------------\n.. autosummary::\n   :toctree: generated/\n\n    itemfreq\n    scoreatpercentile\n    percentileofscore\n    cumfreq\n    relfreq\n\nVariability\n-----------\n.. autosummary::\n   :toctree: generated/\n\n    obrientransform\n    sem\n    zmap\n    zscore\n    iqr\n\nTrimming Functions\n------------------\n.. autosummary::\n   :toctree: generated/\n\n   trimboth\n   trim1\n\nCorrelation Functions\n---------------------\n.. autosummary::\n   :toctree: generated/\n\n   pearsonr\n   fisher_exact\n   spearmanr\n   pointbiserialr\n   kendalltau\n   weightedtau\n   linregress\n   theilslopes\n\nInferential Stats\n-----------------\n.. autosummary::\n   :toctree: generated/\n\n   ttest_1samp\n   ttest_ind\n   ttest_ind_from_stats\n   ttest_rel\n   chisquare\n   power_divergence\n   ks_2samp\n   mannwhitneyu\n   ranksums\n   wilcoxon\n   kruskal\n   friedmanchisquare\n   combine_pvalues\n\nStatistical Distances\n---------------------\n.. autosummary::\n   :toctree: generated/\n\n   wasserstein_distance\n   energy_distance\n\nANOVA Functions\n---------------\n.. autosummary::\n   :toctree: generated/\n\n   f_oneway\n\nSupport Functions\n-----------------\n.. autosummary::\n   :toctree: generated/\n\n   rankdata\n\nReferences\n----------\n.. [CRCProbStat2000] Zwillinger, D. and Kokoska, S. (2000). CRC Standard\n   Probability and Statistics Tables and Formulae. Chapman & Hall: New\n   York. 2000.\n\n")
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 160, 0))

# 'import warnings' statement (line 160)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 160, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 161, 0))

# 'import math' statement (line 161)
import math

import_module(stypy.reporting.localization.Localization(__file__, 161, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 162, 0))

# 'from collections import namedtuple' statement (line 162)
try:
    from collections import namedtuple

except:
    namedtuple = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 162, 0), 'collections', None, module_type_store, ['namedtuple'], [namedtuple])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 164, 0))

# 'import numpy' statement (line 164)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_579990 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 164, 0), 'numpy')

if (type(import_579990) is not StypyTypeError):

    if (import_579990 != 'pyd_module'):
        __import__(import_579990)
        sys_modules_579991 = sys.modules[import_579990]
        import_module(stypy.reporting.localization.Localization(__file__, 164, 0), 'np', sys_modules_579991.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 164, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 164)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 0), 'numpy', import_579990)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 165, 0))

# 'from numpy import array, asarray, ma, zeros' statement (line 165)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_579992 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 165, 0), 'numpy')

if (type(import_579992) is not StypyTypeError):

    if (import_579992 != 'pyd_module'):
        __import__(import_579992)
        sys_modules_579993 = sys.modules[import_579992]
        import_from_module(stypy.reporting.localization.Localization(__file__, 165, 0), 'numpy', sys_modules_579993.module_type_store, module_type_store, ['array', 'asarray', 'ma', 'zeros'])
        nest_module(stypy.reporting.localization.Localization(__file__, 165, 0), __file__, sys_modules_579993, sys_modules_579993.module_type_store, module_type_store)
    else:
        from numpy import array, asarray, ma, zeros

        import_from_module(stypy.reporting.localization.Localization(__file__, 165, 0), 'numpy', None, module_type_store, ['array', 'asarray', 'ma', 'zeros'], [array, asarray, ma, zeros])

else:
    # Assigning a type to the variable 'numpy' (line 165)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 0), 'numpy', import_579992)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 167, 0))

# 'from scipy._lib.six import callable, string_types' statement (line 167)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_579994 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 167, 0), 'scipy._lib.six')

if (type(import_579994) is not StypyTypeError):

    if (import_579994 != 'pyd_module'):
        __import__(import_579994)
        sys_modules_579995 = sys.modules[import_579994]
        import_from_module(stypy.reporting.localization.Localization(__file__, 167, 0), 'scipy._lib.six', sys_modules_579995.module_type_store, module_type_store, ['callable', 'string_types'])
        nest_module(stypy.reporting.localization.Localization(__file__, 167, 0), __file__, sys_modules_579995, sys_modules_579995.module_type_store, module_type_store)
    else:
        from scipy._lib.six import callable, string_types

        import_from_module(stypy.reporting.localization.Localization(__file__, 167, 0), 'scipy._lib.six', None, module_type_store, ['callable', 'string_types'], [callable, string_types])

else:
    # Assigning a type to the variable 'scipy._lib.six' (line 167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 0), 'scipy._lib.six', import_579994)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 168, 0))

# 'from scipy._lib._version import NumpyVersion' statement (line 168)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_579996 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 168, 0), 'scipy._lib._version')

if (type(import_579996) is not StypyTypeError):

    if (import_579996 != 'pyd_module'):
        __import__(import_579996)
        sys_modules_579997 = sys.modules[import_579996]
        import_from_module(stypy.reporting.localization.Localization(__file__, 168, 0), 'scipy._lib._version', sys_modules_579997.module_type_store, module_type_store, ['NumpyVersion'])
        nest_module(stypy.reporting.localization.Localization(__file__, 168, 0), __file__, sys_modules_579997, sys_modules_579997.module_type_store, module_type_store)
    else:
        from scipy._lib._version import NumpyVersion

        import_from_module(stypy.reporting.localization.Localization(__file__, 168, 0), 'scipy._lib._version', None, module_type_store, ['NumpyVersion'], [NumpyVersion])

else:
    # Assigning a type to the variable 'scipy._lib._version' (line 168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 0), 'scipy._lib._version', import_579996)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 169, 0))

# 'import scipy.special' statement (line 169)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_579998 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 169, 0), 'scipy.special')

if (type(import_579998) is not StypyTypeError):

    if (import_579998 != 'pyd_module'):
        __import__(import_579998)
        sys_modules_579999 = sys.modules[import_579998]
        import_module(stypy.reporting.localization.Localization(__file__, 169, 0), 'special', sys_modules_579999.module_type_store, module_type_store)
    else:
        import scipy.special as special

        import_module(stypy.reporting.localization.Localization(__file__, 169, 0), 'special', scipy.special, module_type_store)

else:
    # Assigning a type to the variable 'scipy.special' (line 169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 0), 'scipy.special', import_579998)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 170, 0))

# 'import scipy.linalg' statement (line 170)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_580000 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 170, 0), 'scipy.linalg')

if (type(import_580000) is not StypyTypeError):

    if (import_580000 != 'pyd_module'):
        __import__(import_580000)
        sys_modules_580001 = sys.modules[import_580000]
        import_module(stypy.reporting.localization.Localization(__file__, 170, 0), 'linalg', sys_modules_580001.module_type_store, module_type_store)
    else:
        import scipy.linalg as linalg

        import_module(stypy.reporting.localization.Localization(__file__, 170, 0), 'linalg', scipy.linalg, module_type_store)

else:
    # Assigning a type to the variable 'scipy.linalg' (line 170)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 0), 'scipy.linalg', import_580000)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 171, 0))

# 'from scipy.stats import distributions' statement (line 171)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_580002 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 171, 0), 'scipy.stats')

if (type(import_580002) is not StypyTypeError):

    if (import_580002 != 'pyd_module'):
        __import__(import_580002)
        sys_modules_580003 = sys.modules[import_580002]
        import_from_module(stypy.reporting.localization.Localization(__file__, 171, 0), 'scipy.stats', sys_modules_580003.module_type_store, module_type_store, ['distributions'])
        nest_module(stypy.reporting.localization.Localization(__file__, 171, 0), __file__, sys_modules_580003, sys_modules_580003.module_type_store, module_type_store)
    else:
        from scipy.stats import distributions

        import_from_module(stypy.reporting.localization.Localization(__file__, 171, 0), 'scipy.stats', None, module_type_store, ['distributions'], [distributions])

else:
    # Assigning a type to the variable 'scipy.stats' (line 171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 0), 'scipy.stats', import_580002)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 172, 0))

# 'from scipy.stats import mstats_basic' statement (line 172)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_580004 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 172, 0), 'scipy.stats')

if (type(import_580004) is not StypyTypeError):

    if (import_580004 != 'pyd_module'):
        __import__(import_580004)
        sys_modules_580005 = sys.modules[import_580004]
        import_from_module(stypy.reporting.localization.Localization(__file__, 172, 0), 'scipy.stats', sys_modules_580005.module_type_store, module_type_store, ['mstats_basic'])
        nest_module(stypy.reporting.localization.Localization(__file__, 172, 0), __file__, sys_modules_580005, sys_modules_580005.module_type_store, module_type_store)
    else:
        from scipy.stats import mstats_basic

        import_from_module(stypy.reporting.localization.Localization(__file__, 172, 0), 'scipy.stats', None, module_type_store, ['mstats_basic'], [mstats_basic])

else:
    # Assigning a type to the variable 'scipy.stats' (line 172)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 0), 'scipy.stats', import_580004)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 173, 0))

# 'from scipy.stats._distn_infrastructure import _lazywhere' statement (line 173)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_580006 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 173, 0), 'scipy.stats._distn_infrastructure')

if (type(import_580006) is not StypyTypeError):

    if (import_580006 != 'pyd_module'):
        __import__(import_580006)
        sys_modules_580007 = sys.modules[import_580006]
        import_from_module(stypy.reporting.localization.Localization(__file__, 173, 0), 'scipy.stats._distn_infrastructure', sys_modules_580007.module_type_store, module_type_store, ['_lazywhere'])
        nest_module(stypy.reporting.localization.Localization(__file__, 173, 0), __file__, sys_modules_580007, sys_modules_580007.module_type_store, module_type_store)
    else:
        from scipy.stats._distn_infrastructure import _lazywhere

        import_from_module(stypy.reporting.localization.Localization(__file__, 173, 0), 'scipy.stats._distn_infrastructure', None, module_type_store, ['_lazywhere'], [_lazywhere])

else:
    # Assigning a type to the variable 'scipy.stats._distn_infrastructure' (line 173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 0), 'scipy.stats._distn_infrastructure', import_580006)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 174, 0))

# 'from scipy.stats._stats_mstats_common import _find_repeats, linregress, theilslopes' statement (line 174)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_580008 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 174, 0), 'scipy.stats._stats_mstats_common')

if (type(import_580008) is not StypyTypeError):

    if (import_580008 != 'pyd_module'):
        __import__(import_580008)
        sys_modules_580009 = sys.modules[import_580008]
        import_from_module(stypy.reporting.localization.Localization(__file__, 174, 0), 'scipy.stats._stats_mstats_common', sys_modules_580009.module_type_store, module_type_store, ['_find_repeats', 'linregress', 'theilslopes'])
        nest_module(stypy.reporting.localization.Localization(__file__, 174, 0), __file__, sys_modules_580009, sys_modules_580009.module_type_store, module_type_store)
    else:
        from scipy.stats._stats_mstats_common import _find_repeats, linregress, theilslopes

        import_from_module(stypy.reporting.localization.Localization(__file__, 174, 0), 'scipy.stats._stats_mstats_common', None, module_type_store, ['_find_repeats', 'linregress', 'theilslopes'], [_find_repeats, linregress, theilslopes])

else:
    # Assigning a type to the variable 'scipy.stats._stats_mstats_common' (line 174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 174, 0), 'scipy.stats._stats_mstats_common', import_580008)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 175, 0))

# 'from scipy.stats._stats import _kendall_dis, _toint64, _weightedrankedtau' statement (line 175)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_580010 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 175, 0), 'scipy.stats._stats')

if (type(import_580010) is not StypyTypeError):

    if (import_580010 != 'pyd_module'):
        __import__(import_580010)
        sys_modules_580011 = sys.modules[import_580010]
        import_from_module(stypy.reporting.localization.Localization(__file__, 175, 0), 'scipy.stats._stats', sys_modules_580011.module_type_store, module_type_store, ['_kendall_dis', '_toint64', '_weightedrankedtau'])
        nest_module(stypy.reporting.localization.Localization(__file__, 175, 0), __file__, sys_modules_580011, sys_modules_580011.module_type_store, module_type_store)
    else:
        from scipy.stats._stats import _kendall_dis, _toint64, _weightedrankedtau

        import_from_module(stypy.reporting.localization.Localization(__file__, 175, 0), 'scipy.stats._stats', None, module_type_store, ['_kendall_dis', '_toint64', '_weightedrankedtau'], [_kendall_dis, _toint64, _weightedrankedtau])

else:
    # Assigning a type to the variable 'scipy.stats._stats' (line 175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 0), 'scipy.stats._stats', import_580010)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')


# Assigning a List to a Name (line 178):

# Assigning a List to a Name (line 178):
__all__ = ['find_repeats', 'gmean', 'hmean', 'mode', 'tmean', 'tvar', 'tmin', 'tmax', 'tstd', 'tsem', 'moment', 'variation', 'skew', 'kurtosis', 'describe', 'skewtest', 'kurtosistest', 'normaltest', 'jarque_bera', 'itemfreq', 'scoreatpercentile', 'percentileofscore', 'cumfreq', 'relfreq', 'obrientransform', 'sem', 'zmap', 'zscore', 'iqr', 'sigmaclip', 'trimboth', 'trim1', 'trim_mean', 'f_oneway', 'pearsonr', 'fisher_exact', 'spearmanr', 'pointbiserialr', 'kendalltau', 'weightedtau', 'linregress', 'theilslopes', 'ttest_1samp', 'ttest_ind', 'ttest_ind_from_stats', 'ttest_rel', 'kstest', 'chisquare', 'power_divergence', 'ks_2samp', 'mannwhitneyu', 'tiecorrect', 'ranksums', 'kruskal', 'friedmanchisquare', 'rankdata', 'combine_pvalues', 'wasserstein_distance', 'energy_distance']
module_type_store.set_exportable_members(['find_repeats', 'gmean', 'hmean', 'mode', 'tmean', 'tvar', 'tmin', 'tmax', 'tstd', 'tsem', 'moment', 'variation', 'skew', 'kurtosis', 'describe', 'skewtest', 'kurtosistest', 'normaltest', 'jarque_bera', 'itemfreq', 'scoreatpercentile', 'percentileofscore', 'cumfreq', 'relfreq', 'obrientransform', 'sem', 'zmap', 'zscore', 'iqr', 'sigmaclip', 'trimboth', 'trim1', 'trim_mean', 'f_oneway', 'pearsonr', 'fisher_exact', 'spearmanr', 'pointbiserialr', 'kendalltau', 'weightedtau', 'linregress', 'theilslopes', 'ttest_1samp', 'ttest_ind', 'ttest_ind_from_stats', 'ttest_rel', 'kstest', 'chisquare', 'power_divergence', 'ks_2samp', 'mannwhitneyu', 'tiecorrect', 'ranksums', 'kruskal', 'friedmanchisquare', 'rankdata', 'combine_pvalues', 'wasserstein_distance', 'energy_distance'])

# Obtaining an instance of the builtin type 'list' (line 178)
list_580012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 178)
# Adding element type (line 178)
str_580013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 11), 'str', 'find_repeats')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580013)
# Adding element type (line 178)
str_580014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 27), 'str', 'gmean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580014)
# Adding element type (line 178)
str_580015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 36), 'str', 'hmean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580015)
# Adding element type (line 178)
str_580016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 45), 'str', 'mode')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580016)
# Adding element type (line 178)
str_580017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 53), 'str', 'tmean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580017)
# Adding element type (line 178)
str_580018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 62), 'str', 'tvar')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580018)
# Adding element type (line 178)
str_580019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 11), 'str', 'tmin')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580019)
# Adding element type (line 178)
str_580020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 19), 'str', 'tmax')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580020)
# Adding element type (line 178)
str_580021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 27), 'str', 'tstd')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580021)
# Adding element type (line 178)
str_580022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 35), 'str', 'tsem')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580022)
# Adding element type (line 178)
str_580023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 43), 'str', 'moment')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580023)
# Adding element type (line 178)
str_580024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 53), 'str', 'variation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580024)
# Adding element type (line 178)
str_580025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 11), 'str', 'skew')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580025)
# Adding element type (line 178)
str_580026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 19), 'str', 'kurtosis')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580026)
# Adding element type (line 178)
str_580027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 31), 'str', 'describe')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580027)
# Adding element type (line 178)
str_580028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 43), 'str', 'skewtest')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580028)
# Adding element type (line 178)
str_580029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 55), 'str', 'kurtosistest')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580029)
# Adding element type (line 178)
str_580030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 11), 'str', 'normaltest')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580030)
# Adding element type (line 178)
str_580031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 25), 'str', 'jarque_bera')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580031)
# Adding element type (line 178)
str_580032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 40), 'str', 'itemfreq')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580032)
# Adding element type (line 178)
str_580033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 11), 'str', 'scoreatpercentile')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580033)
# Adding element type (line 178)
str_580034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 32), 'str', 'percentileofscore')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580034)
# Adding element type (line 178)
str_580035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 11), 'str', 'cumfreq')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580035)
# Adding element type (line 178)
str_580036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 22), 'str', 'relfreq')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580036)
# Adding element type (line 178)
str_580037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 33), 'str', 'obrientransform')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580037)
# Adding element type (line 178)
str_580038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 11), 'str', 'sem')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580038)
# Adding element type (line 178)
str_580039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 18), 'str', 'zmap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580039)
# Adding element type (line 178)
str_580040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 26), 'str', 'zscore')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580040)
# Adding element type (line 178)
str_580041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 36), 'str', 'iqr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580041)
# Adding element type (line 178)
str_580042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 11), 'str', 'sigmaclip')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580042)
# Adding element type (line 178)
str_580043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 24), 'str', 'trimboth')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580043)
# Adding element type (line 178)
str_580044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 36), 'str', 'trim1')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580044)
# Adding element type (line 178)
str_580045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 45), 'str', 'trim_mean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580045)
# Adding element type (line 178)
str_580046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 58), 'str', 'f_oneway')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580046)
# Adding element type (line 178)
str_580047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 11), 'str', 'pearsonr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580047)
# Adding element type (line 178)
str_580048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 23), 'str', 'fisher_exact')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580048)
# Adding element type (line 178)
str_580049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 39), 'str', 'spearmanr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580049)
# Adding element type (line 178)
str_580050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 52), 'str', 'pointbiserialr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580050)
# Adding element type (line 178)
str_580051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 11), 'str', 'kendalltau')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580051)
# Adding element type (line 178)
str_580052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 25), 'str', 'weightedtau')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580052)
# Adding element type (line 178)
str_580053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 11), 'str', 'linregress')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580053)
# Adding element type (line 178)
str_580054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 25), 'str', 'theilslopes')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580054)
# Adding element type (line 178)
str_580055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 40), 'str', 'ttest_1samp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580055)
# Adding element type (line 178)
str_580056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 11), 'str', 'ttest_ind')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580056)
# Adding element type (line 178)
str_580057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 24), 'str', 'ttest_ind_from_stats')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580057)
# Adding element type (line 178)
str_580058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 48), 'str', 'ttest_rel')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580058)
# Adding element type (line 178)
str_580059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 61), 'str', 'kstest')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580059)
# Adding element type (line 178)
str_580060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 11), 'str', 'chisquare')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580060)
# Adding element type (line 178)
str_580061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 24), 'str', 'power_divergence')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580061)
# Adding element type (line 178)
str_580062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 44), 'str', 'ks_2samp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580062)
# Adding element type (line 178)
str_580063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 56), 'str', 'mannwhitneyu')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580063)
# Adding element type (line 178)
str_580064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 11), 'str', 'tiecorrect')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580064)
# Adding element type (line 178)
str_580065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 25), 'str', 'ranksums')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580065)
# Adding element type (line 178)
str_580066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 37), 'str', 'kruskal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580066)
# Adding element type (line 178)
str_580067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 48), 'str', 'friedmanchisquare')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580067)
# Adding element type (line 178)
str_580068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 11), 'str', 'rankdata')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580068)
# Adding element type (line 178)
str_580069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 11), 'str', 'combine_pvalues')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580069)
# Adding element type (line 178)
str_580070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 30), 'str', 'wasserstein_distance')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580070)
# Adding element type (line 178)
str_580071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 54), 'str', 'energy_distance')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 178, 10), list_580012, str_580071)

# Assigning a type to the variable '__all__' (line 178)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 0), '__all__', list_580012)

@norecursion
def _chk_asarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_chk_asarray'
    module_type_store = module_type_store.open_function_context('_chk_asarray', 196, 0, False)
    
    # Passed parameters checking function
    _chk_asarray.stypy_localization = localization
    _chk_asarray.stypy_type_of_self = None
    _chk_asarray.stypy_type_store = module_type_store
    _chk_asarray.stypy_function_name = '_chk_asarray'
    _chk_asarray.stypy_param_names_list = ['a', 'axis']
    _chk_asarray.stypy_varargs_param_name = None
    _chk_asarray.stypy_kwargs_param_name = None
    _chk_asarray.stypy_call_defaults = defaults
    _chk_asarray.stypy_call_varargs = varargs
    _chk_asarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_chk_asarray', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_chk_asarray', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_chk_asarray(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 197)
    # Getting the type of 'axis' (line 197)
    axis_580072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 7), 'axis')
    # Getting the type of 'None' (line 197)
    None_580073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 15), 'None')
    
    (may_be_580074, more_types_in_union_580075) = may_be_none(axis_580072, None_580073)

    if may_be_580074:

        if more_types_in_union_580075:
            # Runtime conditional SSA (line 197)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 198):
        
        # Assigning a Call to a Name (line 198):
        
        # Call to ravel(...): (line 198)
        # Processing the call arguments (line 198)
        # Getting the type of 'a' (line 198)
        a_580078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 21), 'a', False)
        # Processing the call keyword arguments (line 198)
        kwargs_580079 = {}
        # Getting the type of 'np' (line 198)
        np_580076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 12), 'np', False)
        # Obtaining the member 'ravel' of a type (line 198)
        ravel_580077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 12), np_580076, 'ravel')
        # Calling ravel(args, kwargs) (line 198)
        ravel_call_result_580080 = invoke(stypy.reporting.localization.Localization(__file__, 198, 12), ravel_580077, *[a_580078], **kwargs_580079)
        
        # Assigning a type to the variable 'a' (line 198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 8), 'a', ravel_call_result_580080)
        
        # Assigning a Num to a Name (line 199):
        
        # Assigning a Num to a Name (line 199):
        int_580081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 199, 18), 'int')
        # Assigning a type to the variable 'outaxis' (line 199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 8), 'outaxis', int_580081)

        if more_types_in_union_580075:
            # Runtime conditional SSA for else branch (line 197)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_580074) or more_types_in_union_580075):
        
        # Assigning a Call to a Name (line 201):
        
        # Assigning a Call to a Name (line 201):
        
        # Call to asarray(...): (line 201)
        # Processing the call arguments (line 201)
        # Getting the type of 'a' (line 201)
        a_580084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 23), 'a', False)
        # Processing the call keyword arguments (line 201)
        kwargs_580085 = {}
        # Getting the type of 'np' (line 201)
        np_580082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 201)
        asarray_580083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 12), np_580082, 'asarray')
        # Calling asarray(args, kwargs) (line 201)
        asarray_call_result_580086 = invoke(stypy.reporting.localization.Localization(__file__, 201, 12), asarray_580083, *[a_580084], **kwargs_580085)
        
        # Assigning a type to the variable 'a' (line 201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'a', asarray_call_result_580086)
        
        # Assigning a Name to a Name (line 202):
        
        # Assigning a Name to a Name (line 202):
        # Getting the type of 'axis' (line 202)
        axis_580087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 18), 'axis')
        # Assigning a type to the variable 'outaxis' (line 202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'outaxis', axis_580087)

        if (may_be_580074 and more_types_in_union_580075):
            # SSA join for if statement (line 197)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'a' (line 204)
    a_580088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 7), 'a')
    # Obtaining the member 'ndim' of a type (line 204)
    ndim_580089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 7), a_580088, 'ndim')
    int_580090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 17), 'int')
    # Applying the binary operator '==' (line 204)
    result_eq_580091 = python_operator(stypy.reporting.localization.Localization(__file__, 204, 7), '==', ndim_580089, int_580090)
    
    # Testing the type of an if condition (line 204)
    if_condition_580092 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 204, 4), result_eq_580091)
    # Assigning a type to the variable 'if_condition_580092' (line 204)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 4), 'if_condition_580092', if_condition_580092)
    # SSA begins for if statement (line 204)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 205):
    
    # Assigning a Call to a Name (line 205):
    
    # Call to atleast_1d(...): (line 205)
    # Processing the call arguments (line 205)
    # Getting the type of 'a' (line 205)
    a_580095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 26), 'a', False)
    # Processing the call keyword arguments (line 205)
    kwargs_580096 = {}
    # Getting the type of 'np' (line 205)
    np_580093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 12), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 205)
    atleast_1d_580094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 12), np_580093, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 205)
    atleast_1d_call_result_580097 = invoke(stypy.reporting.localization.Localization(__file__, 205, 12), atleast_1d_580094, *[a_580095], **kwargs_580096)
    
    # Assigning a type to the variable 'a' (line 205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 8), 'a', atleast_1d_call_result_580097)
    # SSA join for if statement (line 204)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 207)
    tuple_580098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 207)
    # Adding element type (line 207)
    # Getting the type of 'a' (line 207)
    a_580099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 11), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 11), tuple_580098, a_580099)
    # Adding element type (line 207)
    # Getting the type of 'outaxis' (line 207)
    outaxis_580100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 14), 'outaxis')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 11), tuple_580098, outaxis_580100)
    
    # Assigning a type to the variable 'stypy_return_type' (line 207)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 4), 'stypy_return_type', tuple_580098)
    
    # ################# End of '_chk_asarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_chk_asarray' in the type store
    # Getting the type of 'stypy_return_type' (line 196)
    stypy_return_type_580101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580101)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_chk_asarray'
    return stypy_return_type_580101

# Assigning a type to the variable '_chk_asarray' (line 196)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 0), '_chk_asarray', _chk_asarray)

@norecursion
def _chk2_asarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_chk2_asarray'
    module_type_store = module_type_store.open_function_context('_chk2_asarray', 210, 0, False)
    
    # Passed parameters checking function
    _chk2_asarray.stypy_localization = localization
    _chk2_asarray.stypy_type_of_self = None
    _chk2_asarray.stypy_type_store = module_type_store
    _chk2_asarray.stypy_function_name = '_chk2_asarray'
    _chk2_asarray.stypy_param_names_list = ['a', 'b', 'axis']
    _chk2_asarray.stypy_varargs_param_name = None
    _chk2_asarray.stypy_kwargs_param_name = None
    _chk2_asarray.stypy_call_defaults = defaults
    _chk2_asarray.stypy_call_varargs = varargs
    _chk2_asarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_chk2_asarray', ['a', 'b', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_chk2_asarray', localization, ['a', 'b', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_chk2_asarray(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 211)
    # Getting the type of 'axis' (line 211)
    axis_580102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 7), 'axis')
    # Getting the type of 'None' (line 211)
    None_580103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 15), 'None')
    
    (may_be_580104, more_types_in_union_580105) = may_be_none(axis_580102, None_580103)

    if may_be_580104:

        if more_types_in_union_580105:
            # Runtime conditional SSA (line 211)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 212):
        
        # Assigning a Call to a Name (line 212):
        
        # Call to ravel(...): (line 212)
        # Processing the call arguments (line 212)
        # Getting the type of 'a' (line 212)
        a_580108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 21), 'a', False)
        # Processing the call keyword arguments (line 212)
        kwargs_580109 = {}
        # Getting the type of 'np' (line 212)
        np_580106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 12), 'np', False)
        # Obtaining the member 'ravel' of a type (line 212)
        ravel_580107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 12), np_580106, 'ravel')
        # Calling ravel(args, kwargs) (line 212)
        ravel_call_result_580110 = invoke(stypy.reporting.localization.Localization(__file__, 212, 12), ravel_580107, *[a_580108], **kwargs_580109)
        
        # Assigning a type to the variable 'a' (line 212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 8), 'a', ravel_call_result_580110)
        
        # Assigning a Call to a Name (line 213):
        
        # Assigning a Call to a Name (line 213):
        
        # Call to ravel(...): (line 213)
        # Processing the call arguments (line 213)
        # Getting the type of 'b' (line 213)
        b_580113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 21), 'b', False)
        # Processing the call keyword arguments (line 213)
        kwargs_580114 = {}
        # Getting the type of 'np' (line 213)
        np_580111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 12), 'np', False)
        # Obtaining the member 'ravel' of a type (line 213)
        ravel_580112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 12), np_580111, 'ravel')
        # Calling ravel(args, kwargs) (line 213)
        ravel_call_result_580115 = invoke(stypy.reporting.localization.Localization(__file__, 213, 12), ravel_580112, *[b_580113], **kwargs_580114)
        
        # Assigning a type to the variable 'b' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 8), 'b', ravel_call_result_580115)
        
        # Assigning a Num to a Name (line 214):
        
        # Assigning a Num to a Name (line 214):
        int_580116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 18), 'int')
        # Assigning a type to the variable 'outaxis' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 8), 'outaxis', int_580116)

        if more_types_in_union_580105:
            # Runtime conditional SSA for else branch (line 211)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_580104) or more_types_in_union_580105):
        
        # Assigning a Call to a Name (line 216):
        
        # Assigning a Call to a Name (line 216):
        
        # Call to asarray(...): (line 216)
        # Processing the call arguments (line 216)
        # Getting the type of 'a' (line 216)
        a_580119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 23), 'a', False)
        # Processing the call keyword arguments (line 216)
        kwargs_580120 = {}
        # Getting the type of 'np' (line 216)
        np_580117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 216)
        asarray_580118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 12), np_580117, 'asarray')
        # Calling asarray(args, kwargs) (line 216)
        asarray_call_result_580121 = invoke(stypy.reporting.localization.Localization(__file__, 216, 12), asarray_580118, *[a_580119], **kwargs_580120)
        
        # Assigning a type to the variable 'a' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 8), 'a', asarray_call_result_580121)
        
        # Assigning a Call to a Name (line 217):
        
        # Assigning a Call to a Name (line 217):
        
        # Call to asarray(...): (line 217)
        # Processing the call arguments (line 217)
        # Getting the type of 'b' (line 217)
        b_580124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 23), 'b', False)
        # Processing the call keyword arguments (line 217)
        kwargs_580125 = {}
        # Getting the type of 'np' (line 217)
        np_580122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 217)
        asarray_580123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 12), np_580122, 'asarray')
        # Calling asarray(args, kwargs) (line 217)
        asarray_call_result_580126 = invoke(stypy.reporting.localization.Localization(__file__, 217, 12), asarray_580123, *[b_580124], **kwargs_580125)
        
        # Assigning a type to the variable 'b' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'b', asarray_call_result_580126)
        
        # Assigning a Name to a Name (line 218):
        
        # Assigning a Name to a Name (line 218):
        # Getting the type of 'axis' (line 218)
        axis_580127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 18), 'axis')
        # Assigning a type to the variable 'outaxis' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 8), 'outaxis', axis_580127)

        if (may_be_580104 and more_types_in_union_580105):
            # SSA join for if statement (line 211)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'a' (line 220)
    a_580128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 7), 'a')
    # Obtaining the member 'ndim' of a type (line 220)
    ndim_580129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 7), a_580128, 'ndim')
    int_580130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 17), 'int')
    # Applying the binary operator '==' (line 220)
    result_eq_580131 = python_operator(stypy.reporting.localization.Localization(__file__, 220, 7), '==', ndim_580129, int_580130)
    
    # Testing the type of an if condition (line 220)
    if_condition_580132 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 220, 4), result_eq_580131)
    # Assigning a type to the variable 'if_condition_580132' (line 220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 4), 'if_condition_580132', if_condition_580132)
    # SSA begins for if statement (line 220)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 221):
    
    # Assigning a Call to a Name (line 221):
    
    # Call to atleast_1d(...): (line 221)
    # Processing the call arguments (line 221)
    # Getting the type of 'a' (line 221)
    a_580135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 26), 'a', False)
    # Processing the call keyword arguments (line 221)
    kwargs_580136 = {}
    # Getting the type of 'np' (line 221)
    np_580133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 12), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 221)
    atleast_1d_580134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 12), np_580133, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 221)
    atleast_1d_call_result_580137 = invoke(stypy.reporting.localization.Localization(__file__, 221, 12), atleast_1d_580134, *[a_580135], **kwargs_580136)
    
    # Assigning a type to the variable 'a' (line 221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'a', atleast_1d_call_result_580137)
    # SSA join for if statement (line 220)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'b' (line 222)
    b_580138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 7), 'b')
    # Obtaining the member 'ndim' of a type (line 222)
    ndim_580139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 7), b_580138, 'ndim')
    int_580140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 17), 'int')
    # Applying the binary operator '==' (line 222)
    result_eq_580141 = python_operator(stypy.reporting.localization.Localization(__file__, 222, 7), '==', ndim_580139, int_580140)
    
    # Testing the type of an if condition (line 222)
    if_condition_580142 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 222, 4), result_eq_580141)
    # Assigning a type to the variable 'if_condition_580142' (line 222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 4), 'if_condition_580142', if_condition_580142)
    # SSA begins for if statement (line 222)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 223):
    
    # Assigning a Call to a Name (line 223):
    
    # Call to atleast_1d(...): (line 223)
    # Processing the call arguments (line 223)
    # Getting the type of 'b' (line 223)
    b_580145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 26), 'b', False)
    # Processing the call keyword arguments (line 223)
    kwargs_580146 = {}
    # Getting the type of 'np' (line 223)
    np_580143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 12), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 223)
    atleast_1d_580144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 12), np_580143, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 223)
    atleast_1d_call_result_580147 = invoke(stypy.reporting.localization.Localization(__file__, 223, 12), atleast_1d_580144, *[b_580145], **kwargs_580146)
    
    # Assigning a type to the variable 'b' (line 223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 8), 'b', atleast_1d_call_result_580147)
    # SSA join for if statement (line 222)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 225)
    tuple_580148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 225)
    # Adding element type (line 225)
    # Getting the type of 'a' (line 225)
    a_580149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 11), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 11), tuple_580148, a_580149)
    # Adding element type (line 225)
    # Getting the type of 'b' (line 225)
    b_580150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 14), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 11), tuple_580148, b_580150)
    # Adding element type (line 225)
    # Getting the type of 'outaxis' (line 225)
    outaxis_580151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 17), 'outaxis')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 11), tuple_580148, outaxis_580151)
    
    # Assigning a type to the variable 'stypy_return_type' (line 225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 4), 'stypy_return_type', tuple_580148)
    
    # ################# End of '_chk2_asarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_chk2_asarray' in the type store
    # Getting the type of 'stypy_return_type' (line 210)
    stypy_return_type_580152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580152)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_chk2_asarray'
    return stypy_return_type_580152

# Assigning a type to the variable '_chk2_asarray' (line 210)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 0), '_chk2_asarray', _chk2_asarray)

@norecursion
def _contains_nan(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_580153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 32), 'str', 'propagate')
    defaults = [str_580153]
    # Create a new context for function '_contains_nan'
    module_type_store = module_type_store.open_function_context('_contains_nan', 228, 0, False)
    
    # Passed parameters checking function
    _contains_nan.stypy_localization = localization
    _contains_nan.stypy_type_of_self = None
    _contains_nan.stypy_type_store = module_type_store
    _contains_nan.stypy_function_name = '_contains_nan'
    _contains_nan.stypy_param_names_list = ['a', 'nan_policy']
    _contains_nan.stypy_varargs_param_name = None
    _contains_nan.stypy_kwargs_param_name = None
    _contains_nan.stypy_call_defaults = defaults
    _contains_nan.stypy_call_varargs = varargs
    _contains_nan.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_contains_nan', ['a', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_contains_nan', localization, ['a', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_contains_nan(...)' code ##################

    
    # Assigning a List to a Name (line 229):
    
    # Assigning a List to a Name (line 229):
    
    # Obtaining an instance of the builtin type 'list' (line 229)
    list_580154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 229)
    # Adding element type (line 229)
    str_580155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, 16), 'str', 'propagate')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 229, 15), list_580154, str_580155)
    # Adding element type (line 229)
    str_580156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, 29), 'str', 'raise')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 229, 15), list_580154, str_580156)
    # Adding element type (line 229)
    str_580157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, 38), 'str', 'omit')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 229, 15), list_580154, str_580157)
    
    # Assigning a type to the variable 'policies' (line 229)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 4), 'policies', list_580154)
    
    
    # Getting the type of 'nan_policy' (line 230)
    nan_policy_580158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 7), 'nan_policy')
    # Getting the type of 'policies' (line 230)
    policies_580159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 25), 'policies')
    # Applying the binary operator 'notin' (line 230)
    result_contains_580160 = python_operator(stypy.reporting.localization.Localization(__file__, 230, 7), 'notin', nan_policy_580158, policies_580159)
    
    # Testing the type of an if condition (line 230)
    if_condition_580161 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 230, 4), result_contains_580160)
    # Assigning a type to the variable 'if_condition_580161' (line 230)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'if_condition_580161', if_condition_580161)
    # SSA begins for if statement (line 230)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 231)
    # Processing the call arguments (line 231)
    str_580163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 25), 'str', 'nan_policy must be one of {%s}')
    
    # Call to join(...): (line 232)
    # Processing the call arguments (line 232)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 232, 35, True)
    # Calculating comprehension expression
    # Getting the type of 'policies' (line 232)
    policies_580169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 55), 'policies', False)
    comprehension_580170 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 35), policies_580169)
    # Assigning a type to the variable 's' (line 232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 35), 's', comprehension_580170)
    str_580166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 35), 'str', "'%s'")
    # Getting the type of 's' (line 232)
    s_580167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 44), 's', False)
    # Applying the binary operator '%' (line 232)
    result_mod_580168 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 35), '%', str_580166, s_580167)
    
    list_580171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 35), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 35), list_580171, result_mod_580168)
    # Processing the call keyword arguments (line 232)
    kwargs_580172 = {}
    str_580164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 25), 'str', ', ')
    # Obtaining the member 'join' of a type (line 232)
    join_580165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 25), str_580164, 'join')
    # Calling join(args, kwargs) (line 232)
    join_call_result_580173 = invoke(stypy.reporting.localization.Localization(__file__, 232, 25), join_580165, *[list_580171], **kwargs_580172)
    
    # Applying the binary operator '%' (line 231)
    result_mod_580174 = python_operator(stypy.reporting.localization.Localization(__file__, 231, 25), '%', str_580163, join_call_result_580173)
    
    # Processing the call keyword arguments (line 231)
    kwargs_580175 = {}
    # Getting the type of 'ValueError' (line 231)
    ValueError_580162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 231)
    ValueError_call_result_580176 = invoke(stypy.reporting.localization.Localization(__file__, 231, 14), ValueError_580162, *[result_mod_580174], **kwargs_580175)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 231, 8), ValueError_call_result_580176, 'raise parameter', BaseException)
    # SSA join for if statement (line 230)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 233)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to errstate(...): (line 236)
    # Processing the call keyword arguments (line 236)
    str_580179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 33), 'str', 'ignore')
    keyword_580180 = str_580179
    kwargs_580181 = {'invalid': keyword_580180}
    # Getting the type of 'np' (line 236)
    np_580177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 13), 'np', False)
    # Obtaining the member 'errstate' of a type (line 236)
    errstate_580178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 13), np_580177, 'errstate')
    # Calling errstate(args, kwargs) (line 236)
    errstate_call_result_580182 = invoke(stypy.reporting.localization.Localization(__file__, 236, 13), errstate_580178, *[], **kwargs_580181)
    
    with_580183 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 236, 13), errstate_call_result_580182, 'with parameter', '__enter__', '__exit__')

    if with_580183:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 236)
        enter___580184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 13), errstate_call_result_580182, '__enter__')
        with_enter_580185 = invoke(stypy.reporting.localization.Localization(__file__, 236, 13), enter___580184)
        
        # Assigning a Call to a Name (line 237):
        
        # Assigning a Call to a Name (line 237):
        
        # Call to isnan(...): (line 237)
        # Processing the call arguments (line 237)
        
        # Call to sum(...): (line 237)
        # Processing the call arguments (line 237)
        # Getting the type of 'a' (line 237)
        a_580190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 43), 'a', False)
        # Processing the call keyword arguments (line 237)
        kwargs_580191 = {}
        # Getting the type of 'np' (line 237)
        np_580188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 36), 'np', False)
        # Obtaining the member 'sum' of a type (line 237)
        sum_580189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 36), np_580188, 'sum')
        # Calling sum(args, kwargs) (line 237)
        sum_call_result_580192 = invoke(stypy.reporting.localization.Localization(__file__, 237, 36), sum_580189, *[a_580190], **kwargs_580191)
        
        # Processing the call keyword arguments (line 237)
        kwargs_580193 = {}
        # Getting the type of 'np' (line 237)
        np_580186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 27), 'np', False)
        # Obtaining the member 'isnan' of a type (line 237)
        isnan_580187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 27), np_580186, 'isnan')
        # Calling isnan(args, kwargs) (line 237)
        isnan_call_result_580194 = invoke(stypy.reporting.localization.Localization(__file__, 237, 27), isnan_580187, *[sum_call_result_580192], **kwargs_580193)
        
        # Assigning a type to the variable 'contains_nan' (line 237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 12), 'contains_nan', isnan_call_result_580194)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 236)
        exit___580195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 13), errstate_call_result_580182, '__exit__')
        with_exit_580196 = invoke(stypy.reporting.localization.Localization(__file__, 236, 13), exit___580195, None, None, None)

    # SSA branch for the except part of a try statement (line 233)
    # SSA branch for the except 'TypeError' branch of a try statement (line 233)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Name to a Name (line 242):
    
    # Assigning a Name to a Name (line 242):
    # Getting the type of 'False' (line 242)
    False_580197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 23), 'False')
    # Assigning a type to the variable 'contains_nan' (line 242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'contains_nan', False_580197)
    
    # Assigning a Str to a Name (line 243):
    
    # Assigning a Str to a Name (line 243):
    str_580198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 243, 21), 'str', 'omit')
    # Assigning a type to the variable 'nan_policy' (line 243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 8), 'nan_policy', str_580198)
    
    # Call to warn(...): (line 244)
    # Processing the call arguments (line 244)
    str_580201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 22), 'str', 'The input array could not be properly checked for nan values. nan values will be ignored.')
    # Getting the type of 'RuntimeWarning' (line 245)
    RuntimeWarning_580202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 61), 'RuntimeWarning', False)
    # Processing the call keyword arguments (line 244)
    kwargs_580203 = {}
    # Getting the type of 'warnings' (line 244)
    warnings_580199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 244)
    warn_580200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 8), warnings_580199, 'warn')
    # Calling warn(args, kwargs) (line 244)
    warn_call_result_580204 = invoke(stypy.reporting.localization.Localization(__file__, 244, 8), warn_580200, *[str_580201, RuntimeWarning_580202], **kwargs_580203)
    
    # SSA join for try-except statement (line 233)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 247)
    contains_nan_580205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 247)
    nan_policy_580206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 24), 'nan_policy')
    str_580207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 38), 'str', 'raise')
    # Applying the binary operator '==' (line 247)
    result_eq_580208 = python_operator(stypy.reporting.localization.Localization(__file__, 247, 24), '==', nan_policy_580206, str_580207)
    
    # Applying the binary operator 'and' (line 247)
    result_and_keyword_580209 = python_operator(stypy.reporting.localization.Localization(__file__, 247, 7), 'and', contains_nan_580205, result_eq_580208)
    
    # Testing the type of an if condition (line 247)
    if_condition_580210 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 247, 4), result_and_keyword_580209)
    # Assigning a type to the variable 'if_condition_580210' (line 247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 4), 'if_condition_580210', if_condition_580210)
    # SSA begins for if statement (line 247)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 248)
    # Processing the call arguments (line 248)
    str_580212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 25), 'str', 'The input contains nan values')
    # Processing the call keyword arguments (line 248)
    kwargs_580213 = {}
    # Getting the type of 'ValueError' (line 248)
    ValueError_580211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 248)
    ValueError_call_result_580214 = invoke(stypy.reporting.localization.Localization(__file__, 248, 14), ValueError_580211, *[str_580212], **kwargs_580213)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 248, 8), ValueError_call_result_580214, 'raise parameter', BaseException)
    # SSA join for if statement (line 247)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 250)
    tuple_580215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 250)
    # Adding element type (line 250)
    # Getting the type of 'contains_nan' (line 250)
    contains_nan_580216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 12), 'contains_nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 250, 12), tuple_580215, contains_nan_580216)
    # Adding element type (line 250)
    # Getting the type of 'nan_policy' (line 250)
    nan_policy_580217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 26), 'nan_policy')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 250, 12), tuple_580215, nan_policy_580217)
    
    # Assigning a type to the variable 'stypy_return_type' (line 250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 4), 'stypy_return_type', tuple_580215)
    
    # ################# End of '_contains_nan(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_contains_nan' in the type store
    # Getting the type of 'stypy_return_type' (line 228)
    stypy_return_type_580218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580218)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_contains_nan'
    return stypy_return_type_580218

# Assigning a type to the variable '_contains_nan' (line 228)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 0), '_contains_nan', _contains_nan)

@norecursion
def gmean(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_580219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 18), 'int')
    # Getting the type of 'None' (line 253)
    None_580220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 27), 'None')
    defaults = [int_580219, None_580220]
    # Create a new context for function 'gmean'
    module_type_store = module_type_store.open_function_context('gmean', 253, 0, False)
    
    # Passed parameters checking function
    gmean.stypy_localization = localization
    gmean.stypy_type_of_self = None
    gmean.stypy_type_store = module_type_store
    gmean.stypy_function_name = 'gmean'
    gmean.stypy_param_names_list = ['a', 'axis', 'dtype']
    gmean.stypy_varargs_param_name = None
    gmean.stypy_kwargs_param_name = None
    gmean.stypy_call_defaults = defaults
    gmean.stypy_call_varargs = varargs
    gmean.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gmean', ['a', 'axis', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gmean', localization, ['a', 'axis', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gmean(...)' code ##################

    str_580221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, (-1)), 'str', '\n    Compute the geometric mean along the specified axis.\n\n    Return the geometric average of the array elements.\n    That is:  n-th root of (x1 * x2 * ... * xn)\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    axis : int or None, optional\n        Axis along which the geometric mean is computed. Default is 0.\n        If None, compute over the whole array `a`.\n    dtype : dtype, optional\n        Type of the returned array and of the accumulator in which the\n        elements are summed. If dtype is not specified, it defaults to the\n        dtype of a, unless a has an integer dtype with a precision less than\n        that of the default platform integer. In that case, the default\n        platform integer is used.\n\n    Returns\n    -------\n    gmean : ndarray\n        see dtype parameter above\n\n    See Also\n    --------\n    numpy.mean : Arithmetic average\n    numpy.average : Weighted average\n    hmean : Harmonic mean\n\n    Notes\n    -----\n    The geometric average is computed over a single dimension of the input\n    array, axis=0 by default, or all values in the array if axis=None.\n    float64 intermediate and return values are used for integer inputs.\n\n    Use masked arrays to ignore any non-finite values in the input or that\n    arise in the calculations such as Not a Number and infinity because masked\n    arrays automatically mask any non-finite values.\n\n    Examples\n    --------\n    >>> from scipy.stats import gmean\n    >>> gmean([1, 4])\n    2.0\n    >>> gmean([1, 2, 3, 4, 5, 6, 7])\n    3.3800151591412964\n    ')
    
    
    
    # Call to isinstance(...): (line 303)
    # Processing the call arguments (line 303)
    # Getting the type of 'a' (line 303)
    a_580223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 22), 'a', False)
    # Getting the type of 'np' (line 303)
    np_580224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 25), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 303)
    ndarray_580225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 25), np_580224, 'ndarray')
    # Processing the call keyword arguments (line 303)
    kwargs_580226 = {}
    # Getting the type of 'isinstance' (line 303)
    isinstance_580222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 303)
    isinstance_call_result_580227 = invoke(stypy.reporting.localization.Localization(__file__, 303, 11), isinstance_580222, *[a_580223, ndarray_580225], **kwargs_580226)
    
    # Applying the 'not' unary operator (line 303)
    result_not__580228 = python_operator(stypy.reporting.localization.Localization(__file__, 303, 7), 'not', isinstance_call_result_580227)
    
    # Testing the type of an if condition (line 303)
    if_condition_580229 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 303, 4), result_not__580228)
    # Assigning a type to the variable 'if_condition_580229' (line 303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 4), 'if_condition_580229', if_condition_580229)
    # SSA begins for if statement (line 303)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 305):
    
    # Assigning a Call to a Name (line 305):
    
    # Call to log(...): (line 305)
    # Processing the call arguments (line 305)
    
    # Call to array(...): (line 305)
    # Processing the call arguments (line 305)
    # Getting the type of 'a' (line 305)
    a_580234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 32), 'a', False)
    # Processing the call keyword arguments (line 305)
    # Getting the type of 'dtype' (line 305)
    dtype_580235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 41), 'dtype', False)
    keyword_580236 = dtype_580235
    kwargs_580237 = {'dtype': keyword_580236}
    # Getting the type of 'np' (line 305)
    np_580232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 23), 'np', False)
    # Obtaining the member 'array' of a type (line 305)
    array_580233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 23), np_580232, 'array')
    # Calling array(args, kwargs) (line 305)
    array_call_result_580238 = invoke(stypy.reporting.localization.Localization(__file__, 305, 23), array_580233, *[a_580234], **kwargs_580237)
    
    # Processing the call keyword arguments (line 305)
    kwargs_580239 = {}
    # Getting the type of 'np' (line 305)
    np_580230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 16), 'np', False)
    # Obtaining the member 'log' of a type (line 305)
    log_580231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 16), np_580230, 'log')
    # Calling log(args, kwargs) (line 305)
    log_call_result_580240 = invoke(stypy.reporting.localization.Localization(__file__, 305, 16), log_580231, *[array_call_result_580238], **kwargs_580239)
    
    # Assigning a type to the variable 'log_a' (line 305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'log_a', log_call_result_580240)
    # SSA branch for the else part of an if statement (line 303)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'dtype' (line 306)
    dtype_580241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 9), 'dtype')
    # Testing the type of an if condition (line 306)
    if_condition_580242 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 306, 9), dtype_580241)
    # Assigning a type to the variable 'if_condition_580242' (line 306)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 9), 'if_condition_580242', if_condition_580242)
    # SSA begins for if statement (line 306)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isinstance(...): (line 308)
    # Processing the call arguments (line 308)
    # Getting the type of 'a' (line 308)
    a_580244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 22), 'a', False)
    # Getting the type of 'np' (line 308)
    np_580245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 25), 'np', False)
    # Obtaining the member 'ma' of a type (line 308)
    ma_580246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 25), np_580245, 'ma')
    # Obtaining the member 'MaskedArray' of a type (line 308)
    MaskedArray_580247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 25), ma_580246, 'MaskedArray')
    # Processing the call keyword arguments (line 308)
    kwargs_580248 = {}
    # Getting the type of 'isinstance' (line 308)
    isinstance_580243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 308)
    isinstance_call_result_580249 = invoke(stypy.reporting.localization.Localization(__file__, 308, 11), isinstance_580243, *[a_580244, MaskedArray_580247], **kwargs_580248)
    
    # Testing the type of an if condition (line 308)
    if_condition_580250 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 308, 8), isinstance_call_result_580249)
    # Assigning a type to the variable 'if_condition_580250' (line 308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'if_condition_580250', if_condition_580250)
    # SSA begins for if statement (line 308)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 309):
    
    # Assigning a Call to a Name (line 309):
    
    # Call to log(...): (line 309)
    # Processing the call arguments (line 309)
    
    # Call to asarray(...): (line 309)
    # Processing the call arguments (line 309)
    # Getting the type of 'a' (line 309)
    a_580256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 41), 'a', False)
    # Processing the call keyword arguments (line 309)
    # Getting the type of 'dtype' (line 309)
    dtype_580257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 50), 'dtype', False)
    keyword_580258 = dtype_580257
    kwargs_580259 = {'dtype': keyword_580258}
    # Getting the type of 'np' (line 309)
    np_580253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 27), 'np', False)
    # Obtaining the member 'ma' of a type (line 309)
    ma_580254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 27), np_580253, 'ma')
    # Obtaining the member 'asarray' of a type (line 309)
    asarray_580255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 27), ma_580254, 'asarray')
    # Calling asarray(args, kwargs) (line 309)
    asarray_call_result_580260 = invoke(stypy.reporting.localization.Localization(__file__, 309, 27), asarray_580255, *[a_580256], **kwargs_580259)
    
    # Processing the call keyword arguments (line 309)
    kwargs_580261 = {}
    # Getting the type of 'np' (line 309)
    np_580251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 20), 'np', False)
    # Obtaining the member 'log' of a type (line 309)
    log_580252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 20), np_580251, 'log')
    # Calling log(args, kwargs) (line 309)
    log_call_result_580262 = invoke(stypy.reporting.localization.Localization(__file__, 309, 20), log_580252, *[asarray_call_result_580260], **kwargs_580261)
    
    # Assigning a type to the variable 'log_a' (line 309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 12), 'log_a', log_call_result_580262)
    # SSA branch for the else part of an if statement (line 308)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 311):
    
    # Assigning a Call to a Name (line 311):
    
    # Call to log(...): (line 311)
    # Processing the call arguments (line 311)
    
    # Call to asarray(...): (line 311)
    # Processing the call arguments (line 311)
    # Getting the type of 'a' (line 311)
    a_580267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 38), 'a', False)
    # Processing the call keyword arguments (line 311)
    # Getting the type of 'dtype' (line 311)
    dtype_580268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 47), 'dtype', False)
    keyword_580269 = dtype_580268
    kwargs_580270 = {'dtype': keyword_580269}
    # Getting the type of 'np' (line 311)
    np_580265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 27), 'np', False)
    # Obtaining the member 'asarray' of a type (line 311)
    asarray_580266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 27), np_580265, 'asarray')
    # Calling asarray(args, kwargs) (line 311)
    asarray_call_result_580271 = invoke(stypy.reporting.localization.Localization(__file__, 311, 27), asarray_580266, *[a_580267], **kwargs_580270)
    
    # Processing the call keyword arguments (line 311)
    kwargs_580272 = {}
    # Getting the type of 'np' (line 311)
    np_580263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 20), 'np', False)
    # Obtaining the member 'log' of a type (line 311)
    log_580264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 20), np_580263, 'log')
    # Calling log(args, kwargs) (line 311)
    log_call_result_580273 = invoke(stypy.reporting.localization.Localization(__file__, 311, 20), log_580264, *[asarray_call_result_580271], **kwargs_580272)
    
    # Assigning a type to the variable 'log_a' (line 311)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 12), 'log_a', log_call_result_580273)
    # SSA join for if statement (line 308)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 306)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 313):
    
    # Assigning a Call to a Name (line 313):
    
    # Call to log(...): (line 313)
    # Processing the call arguments (line 313)
    # Getting the type of 'a' (line 313)
    a_580276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 23), 'a', False)
    # Processing the call keyword arguments (line 313)
    kwargs_580277 = {}
    # Getting the type of 'np' (line 313)
    np_580274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 16), 'np', False)
    # Obtaining the member 'log' of a type (line 313)
    log_580275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 16), np_580274, 'log')
    # Calling log(args, kwargs) (line 313)
    log_call_result_580278 = invoke(stypy.reporting.localization.Localization(__file__, 313, 16), log_580275, *[a_580276], **kwargs_580277)
    
    # Assigning a type to the variable 'log_a' (line 313)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 8), 'log_a', log_call_result_580278)
    # SSA join for if statement (line 306)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 303)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to exp(...): (line 314)
    # Processing the call arguments (line 314)
    
    # Call to mean(...): (line 314)
    # Processing the call keyword arguments (line 314)
    # Getting the type of 'axis' (line 314)
    axis_580283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 34), 'axis', False)
    keyword_580284 = axis_580283
    kwargs_580285 = {'axis': keyword_580284}
    # Getting the type of 'log_a' (line 314)
    log_a_580281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 18), 'log_a', False)
    # Obtaining the member 'mean' of a type (line 314)
    mean_580282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 18), log_a_580281, 'mean')
    # Calling mean(args, kwargs) (line 314)
    mean_call_result_580286 = invoke(stypy.reporting.localization.Localization(__file__, 314, 18), mean_580282, *[], **kwargs_580285)
    
    # Processing the call keyword arguments (line 314)
    kwargs_580287 = {}
    # Getting the type of 'np' (line 314)
    np_580279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 11), 'np', False)
    # Obtaining the member 'exp' of a type (line 314)
    exp_580280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 11), np_580279, 'exp')
    # Calling exp(args, kwargs) (line 314)
    exp_call_result_580288 = invoke(stypy.reporting.localization.Localization(__file__, 314, 11), exp_580280, *[mean_call_result_580286], **kwargs_580287)
    
    # Assigning a type to the variable 'stypy_return_type' (line 314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 4), 'stypy_return_type', exp_call_result_580288)
    
    # ################# End of 'gmean(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gmean' in the type store
    # Getting the type of 'stypy_return_type' (line 253)
    stypy_return_type_580289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580289)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gmean'
    return stypy_return_type_580289

# Assigning a type to the variable 'gmean' (line 253)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 0), 'gmean', gmean)

@norecursion
def hmean(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_580290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 18), 'int')
    # Getting the type of 'None' (line 317)
    None_580291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 27), 'None')
    defaults = [int_580290, None_580291]
    # Create a new context for function 'hmean'
    module_type_store = module_type_store.open_function_context('hmean', 317, 0, False)
    
    # Passed parameters checking function
    hmean.stypy_localization = localization
    hmean.stypy_type_of_self = None
    hmean.stypy_type_store = module_type_store
    hmean.stypy_function_name = 'hmean'
    hmean.stypy_param_names_list = ['a', 'axis', 'dtype']
    hmean.stypy_varargs_param_name = None
    hmean.stypy_kwargs_param_name = None
    hmean.stypy_call_defaults = defaults
    hmean.stypy_call_varargs = varargs
    hmean.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hmean', ['a', 'axis', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hmean', localization, ['a', 'axis', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hmean(...)' code ##################

    str_580292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, (-1)), 'str', '\n    Calculate the harmonic mean along the specified axis.\n\n    That is:  n / (1/x1 + 1/x2 + ... + 1/xn)\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, masked array or object that can be converted to an array.\n    axis : int or None, optional\n        Axis along which the harmonic mean is computed. Default is 0.\n        If None, compute over the whole array `a`.\n    dtype : dtype, optional\n        Type of the returned array and of the accumulator in which the\n        elements are summed. If `dtype` is not specified, it defaults to the\n        dtype of `a`, unless `a` has an integer `dtype` with a precision less\n        than that of the default platform integer. In that case, the default\n        platform integer is used.\n\n    Returns\n    -------\n    hmean : ndarray\n        see `dtype` parameter above\n\n    See Also\n    --------\n    numpy.mean : Arithmetic average\n    numpy.average : Weighted average\n    gmean : Geometric mean\n\n    Notes\n    -----\n    The harmonic mean is computed over a single dimension of the input\n    array, axis=0 by default, or all values in the array if axis=None.\n    float64 intermediate and return values are used for integer inputs.\n\n    Use masked arrays to ignore any non-finite values in the input or that\n    arise in the calculations such as Not a Number and infinity.\n\n    Examples\n    --------\n    >>> from scipy.stats import hmean\n    >>> hmean([1, 4])\n    1.6000000000000001\n    >>> hmean([1, 2, 3, 4, 5, 6, 7])\n    2.6997245179063363\n    ')
    
    
    
    # Call to isinstance(...): (line 365)
    # Processing the call arguments (line 365)
    # Getting the type of 'a' (line 365)
    a_580294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 22), 'a', False)
    # Getting the type of 'np' (line 365)
    np_580295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 25), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 365)
    ndarray_580296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 25), np_580295, 'ndarray')
    # Processing the call keyword arguments (line 365)
    kwargs_580297 = {}
    # Getting the type of 'isinstance' (line 365)
    isinstance_580293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 365)
    isinstance_call_result_580298 = invoke(stypy.reporting.localization.Localization(__file__, 365, 11), isinstance_580293, *[a_580294, ndarray_580296], **kwargs_580297)
    
    # Applying the 'not' unary operator (line 365)
    result_not__580299 = python_operator(stypy.reporting.localization.Localization(__file__, 365, 7), 'not', isinstance_call_result_580298)
    
    # Testing the type of an if condition (line 365)
    if_condition_580300 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 365, 4), result_not__580299)
    # Assigning a type to the variable 'if_condition_580300' (line 365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 4), 'if_condition_580300', if_condition_580300)
    # SSA begins for if statement (line 365)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 366):
    
    # Assigning a Call to a Name (line 366):
    
    # Call to array(...): (line 366)
    # Processing the call arguments (line 366)
    # Getting the type of 'a' (line 366)
    a_580303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 21), 'a', False)
    # Processing the call keyword arguments (line 366)
    # Getting the type of 'dtype' (line 366)
    dtype_580304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 30), 'dtype', False)
    keyword_580305 = dtype_580304
    kwargs_580306 = {'dtype': keyword_580305}
    # Getting the type of 'np' (line 366)
    np_580301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 366)
    array_580302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 12), np_580301, 'array')
    # Calling array(args, kwargs) (line 366)
    array_call_result_580307 = invoke(stypy.reporting.localization.Localization(__file__, 366, 12), array_580302, *[a_580303], **kwargs_580306)
    
    # Assigning a type to the variable 'a' (line 366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 8), 'a', array_call_result_580307)
    # SSA join for if statement (line 365)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to all(...): (line 367)
    # Processing the call arguments (line 367)
    
    # Getting the type of 'a' (line 367)
    a_580310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 14), 'a', False)
    int_580311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 18), 'int')
    # Applying the binary operator '>' (line 367)
    result_gt_580312 = python_operator(stypy.reporting.localization.Localization(__file__, 367, 14), '>', a_580310, int_580311)
    
    # Processing the call keyword arguments (line 367)
    kwargs_580313 = {}
    # Getting the type of 'np' (line 367)
    np_580308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 7), 'np', False)
    # Obtaining the member 'all' of a type (line 367)
    all_580309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 7), np_580308, 'all')
    # Calling all(args, kwargs) (line 367)
    all_call_result_580314 = invoke(stypy.reporting.localization.Localization(__file__, 367, 7), all_580309, *[result_gt_580312], **kwargs_580313)
    
    # Testing the type of an if condition (line 367)
    if_condition_580315 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 367, 4), all_call_result_580314)
    # Assigning a type to the variable 'if_condition_580315' (line 367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 4), 'if_condition_580315', if_condition_580315)
    # SSA begins for if statement (line 367)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isinstance(...): (line 369)
    # Processing the call arguments (line 369)
    # Getting the type of 'a' (line 369)
    a_580317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 22), 'a', False)
    # Getting the type of 'np' (line 369)
    np_580318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 25), 'np', False)
    # Obtaining the member 'ma' of a type (line 369)
    ma_580319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 25), np_580318, 'ma')
    # Obtaining the member 'MaskedArray' of a type (line 369)
    MaskedArray_580320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 25), ma_580319, 'MaskedArray')
    # Processing the call keyword arguments (line 369)
    kwargs_580321 = {}
    # Getting the type of 'isinstance' (line 369)
    isinstance_580316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 369)
    isinstance_call_result_580322 = invoke(stypy.reporting.localization.Localization(__file__, 369, 11), isinstance_580316, *[a_580317, MaskedArray_580320], **kwargs_580321)
    
    # Testing the type of an if condition (line 369)
    if_condition_580323 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 369, 8), isinstance_call_result_580322)
    # Assigning a type to the variable 'if_condition_580323' (line 369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 8), 'if_condition_580323', if_condition_580323)
    # SSA begins for if statement (line 369)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 370):
    
    # Assigning a Call to a Name (line 370):
    
    # Call to count(...): (line 370)
    # Processing the call arguments (line 370)
    # Getting the type of 'axis' (line 370)
    axis_580326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 27), 'axis', False)
    # Processing the call keyword arguments (line 370)
    kwargs_580327 = {}
    # Getting the type of 'a' (line 370)
    a_580324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 19), 'a', False)
    # Obtaining the member 'count' of a type (line 370)
    count_580325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 19), a_580324, 'count')
    # Calling count(args, kwargs) (line 370)
    count_call_result_580328 = invoke(stypy.reporting.localization.Localization(__file__, 370, 19), count_580325, *[axis_580326], **kwargs_580327)
    
    # Assigning a type to the variable 'size' (line 370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 12), 'size', count_call_result_580328)
    # SSA branch for the else part of an if statement (line 369)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 372)
    # Getting the type of 'axis' (line 372)
    axis_580329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 15), 'axis')
    # Getting the type of 'None' (line 372)
    None_580330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 23), 'None')
    
    (may_be_580331, more_types_in_union_580332) = may_be_none(axis_580329, None_580330)

    if may_be_580331:

        if more_types_in_union_580332:
            # Runtime conditional SSA (line 372)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 373):
        
        # Assigning a Call to a Name (line 373):
        
        # Call to ravel(...): (line 373)
        # Processing the call keyword arguments (line 373)
        kwargs_580335 = {}
        # Getting the type of 'a' (line 373)
        a_580333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 20), 'a', False)
        # Obtaining the member 'ravel' of a type (line 373)
        ravel_580334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 20), a_580333, 'ravel')
        # Calling ravel(args, kwargs) (line 373)
        ravel_call_result_580336 = invoke(stypy.reporting.localization.Localization(__file__, 373, 20), ravel_580334, *[], **kwargs_580335)
        
        # Assigning a type to the variable 'a' (line 373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 16), 'a', ravel_call_result_580336)
        
        # Assigning a Subscript to a Name (line 374):
        
        # Assigning a Subscript to a Name (line 374):
        
        # Obtaining the type of the subscript
        int_580337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 31), 'int')
        # Getting the type of 'a' (line 374)
        a_580338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 23), 'a')
        # Obtaining the member 'shape' of a type (line 374)
        shape_580339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 23), a_580338, 'shape')
        # Obtaining the member '__getitem__' of a type (line 374)
        getitem___580340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 23), shape_580339, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 374)
        subscript_call_result_580341 = invoke(stypy.reporting.localization.Localization(__file__, 374, 23), getitem___580340, int_580337)
        
        # Assigning a type to the variable 'size' (line 374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 16), 'size', subscript_call_result_580341)

        if more_types_in_union_580332:
            # Runtime conditional SSA for else branch (line 372)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_580331) or more_types_in_union_580332):
        
        # Assigning a Subscript to a Name (line 376):
        
        # Assigning a Subscript to a Name (line 376):
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 376)
        axis_580342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 31), 'axis')
        # Getting the type of 'a' (line 376)
        a_580343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 23), 'a')
        # Obtaining the member 'shape' of a type (line 376)
        shape_580344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 23), a_580343, 'shape')
        # Obtaining the member '__getitem__' of a type (line 376)
        getitem___580345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 23), shape_580344, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 376)
        subscript_call_result_580346 = invoke(stypy.reporting.localization.Localization(__file__, 376, 23), getitem___580345, axis_580342)
        
        # Assigning a type to the variable 'size' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 16), 'size', subscript_call_result_580346)

        if (may_be_580331 and more_types_in_union_580332):
            # SSA join for if statement (line 372)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 369)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'size' (line 377)
    size_580347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 15), 'size')
    
    # Call to sum(...): (line 377)
    # Processing the call arguments (line 377)
    float_580350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 29), 'float')
    # Getting the type of 'a' (line 377)
    a_580351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 35), 'a', False)
    # Applying the binary operator 'div' (line 377)
    result_div_580352 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 29), 'div', float_580350, a_580351)
    
    # Processing the call keyword arguments (line 377)
    # Getting the type of 'axis' (line 377)
    axis_580353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 43), 'axis', False)
    keyword_580354 = axis_580353
    # Getting the type of 'dtype' (line 377)
    dtype_580355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 55), 'dtype', False)
    keyword_580356 = dtype_580355
    kwargs_580357 = {'dtype': keyword_580356, 'axis': keyword_580354}
    # Getting the type of 'np' (line 377)
    np_580348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 22), 'np', False)
    # Obtaining the member 'sum' of a type (line 377)
    sum_580349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 22), np_580348, 'sum')
    # Calling sum(args, kwargs) (line 377)
    sum_call_result_580358 = invoke(stypy.reporting.localization.Localization(__file__, 377, 22), sum_580349, *[result_div_580352], **kwargs_580357)
    
    # Applying the binary operator 'div' (line 377)
    result_div_580359 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 15), 'div', size_580347, sum_call_result_580358)
    
    # Assigning a type to the variable 'stypy_return_type' (line 377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'stypy_return_type', result_div_580359)
    # SSA branch for the else part of an if statement (line 367)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 379)
    # Processing the call arguments (line 379)
    str_580361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 25), 'str', 'Harmonic mean only defined if all elements greater than zero')
    # Processing the call keyword arguments (line 379)
    kwargs_580362 = {}
    # Getting the type of 'ValueError' (line 379)
    ValueError_580360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 379)
    ValueError_call_result_580363 = invoke(stypy.reporting.localization.Localization(__file__, 379, 14), ValueError_580360, *[str_580361], **kwargs_580362)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 379, 8), ValueError_call_result_580363, 'raise parameter', BaseException)
    # SSA join for if statement (line 367)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'hmean(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hmean' in the type store
    # Getting the type of 'stypy_return_type' (line 317)
    stypy_return_type_580364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580364)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hmean'
    return stypy_return_type_580364

# Assigning a type to the variable 'hmean' (line 317)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 0), 'hmean', hmean)

# Assigning a Call to a Name (line 382):

# Assigning a Call to a Name (line 382):

# Call to namedtuple(...): (line 382)
# Processing the call arguments (line 382)
str_580366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 24), 'str', 'ModeResult')

# Obtaining an instance of the builtin type 'tuple' (line 382)
tuple_580367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 39), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 382)
# Adding element type (line 382)
str_580368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 39), 'str', 'mode')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 382, 39), tuple_580367, str_580368)
# Adding element type (line 382)
str_580369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 47), 'str', 'count')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 382, 39), tuple_580367, str_580369)

# Processing the call keyword arguments (line 382)
kwargs_580370 = {}
# Getting the type of 'namedtuple' (line 382)
namedtuple_580365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 13), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 382)
namedtuple_call_result_580371 = invoke(stypy.reporting.localization.Localization(__file__, 382, 13), namedtuple_580365, *[str_580366, tuple_580367], **kwargs_580370)

# Assigning a type to the variable 'ModeResult' (line 382)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 0), 'ModeResult', namedtuple_call_result_580371)

@norecursion
def mode(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_580372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 17), 'int')
    str_580373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 31), 'str', 'propagate')
    defaults = [int_580372, str_580373]
    # Create a new context for function 'mode'
    module_type_store = module_type_store.open_function_context('mode', 385, 0, False)
    
    # Passed parameters checking function
    mode.stypy_localization = localization
    mode.stypy_type_of_self = None
    mode.stypy_type_store = module_type_store
    mode.stypy_function_name = 'mode'
    mode.stypy_param_names_list = ['a', 'axis', 'nan_policy']
    mode.stypy_varargs_param_name = None
    mode.stypy_kwargs_param_name = None
    mode.stypy_call_defaults = defaults
    mode.stypy_call_varargs = varargs
    mode.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mode', ['a', 'axis', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mode', localization, ['a', 'axis', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mode(...)' code ##################

    str_580374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, (-1)), 'str', "\n    Return an array of the modal (most common) value in the passed array.\n\n    If there is more than one such value, only the smallest is returned.\n    The bin-count for the modal bins is also returned.\n\n    Parameters\n    ----------\n    a : array_like\n        n-dimensional array of which to find mode(s).\n    axis : int or None, optional\n        Axis along which to operate. Default is 0. If None, compute over\n        the whole array `a`.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    mode : ndarray\n        Array of modal values.\n    count : ndarray\n        Array of counts for each mode.\n\n    Examples\n    --------\n    >>> a = np.array([[6, 8, 3, 0],\n    ...               [3, 2, 1, 7],\n    ...               [8, 1, 8, 4],\n    ...               [5, 3, 0, 5],\n    ...               [4, 7, 5, 9]])\n    >>> from scipy import stats\n    >>> stats.mode(a)\n    (array([[3, 1, 0, 0]]), array([[1, 1, 1, 1]]))\n\n    To get mode of whole array, specify ``axis=None``:\n\n    >>> stats.mode(a, axis=None)\n    (array([3]), array([3]))\n\n    ")
    
    # Assigning a Call to a Tuple (line 428):
    
    # Assigning a Subscript to a Name (line 428):
    
    # Obtaining the type of the subscript
    int_580375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 4), 'int')
    
    # Call to _chk_asarray(...): (line 428)
    # Processing the call arguments (line 428)
    # Getting the type of 'a' (line 428)
    a_580377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 27), 'a', False)
    # Getting the type of 'axis' (line 428)
    axis_580378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 30), 'axis', False)
    # Processing the call keyword arguments (line 428)
    kwargs_580379 = {}
    # Getting the type of '_chk_asarray' (line 428)
    _chk_asarray_580376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 428)
    _chk_asarray_call_result_580380 = invoke(stypy.reporting.localization.Localization(__file__, 428, 14), _chk_asarray_580376, *[a_580377, axis_580378], **kwargs_580379)
    
    # Obtaining the member '__getitem__' of a type (line 428)
    getitem___580381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 4), _chk_asarray_call_result_580380, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 428)
    subscript_call_result_580382 = invoke(stypy.reporting.localization.Localization(__file__, 428, 4), getitem___580381, int_580375)
    
    # Assigning a type to the variable 'tuple_var_assignment_579845' (line 428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'tuple_var_assignment_579845', subscript_call_result_580382)
    
    # Assigning a Subscript to a Name (line 428):
    
    # Obtaining the type of the subscript
    int_580383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 4), 'int')
    
    # Call to _chk_asarray(...): (line 428)
    # Processing the call arguments (line 428)
    # Getting the type of 'a' (line 428)
    a_580385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 27), 'a', False)
    # Getting the type of 'axis' (line 428)
    axis_580386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 30), 'axis', False)
    # Processing the call keyword arguments (line 428)
    kwargs_580387 = {}
    # Getting the type of '_chk_asarray' (line 428)
    _chk_asarray_580384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 428)
    _chk_asarray_call_result_580388 = invoke(stypy.reporting.localization.Localization(__file__, 428, 14), _chk_asarray_580384, *[a_580385, axis_580386], **kwargs_580387)
    
    # Obtaining the member '__getitem__' of a type (line 428)
    getitem___580389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 4), _chk_asarray_call_result_580388, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 428)
    subscript_call_result_580390 = invoke(stypy.reporting.localization.Localization(__file__, 428, 4), getitem___580389, int_580383)
    
    # Assigning a type to the variable 'tuple_var_assignment_579846' (line 428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'tuple_var_assignment_579846', subscript_call_result_580390)
    
    # Assigning a Name to a Name (line 428):
    # Getting the type of 'tuple_var_assignment_579845' (line 428)
    tuple_var_assignment_579845_580391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'tuple_var_assignment_579845')
    # Assigning a type to the variable 'a' (line 428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'a', tuple_var_assignment_579845_580391)
    
    # Assigning a Name to a Name (line 428):
    # Getting the type of 'tuple_var_assignment_579846' (line 428)
    tuple_var_assignment_579846_580392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'tuple_var_assignment_579846')
    # Assigning a type to the variable 'axis' (line 428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 7), 'axis', tuple_var_assignment_579846_580392)
    
    
    # Getting the type of 'a' (line 429)
    a_580393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 7), 'a')
    # Obtaining the member 'size' of a type (line 429)
    size_580394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 7), a_580393, 'size')
    int_580395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 17), 'int')
    # Applying the binary operator '==' (line 429)
    result_eq_580396 = python_operator(stypy.reporting.localization.Localization(__file__, 429, 7), '==', size_580394, int_580395)
    
    # Testing the type of an if condition (line 429)
    if_condition_580397 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 429, 4), result_eq_580396)
    # Assigning a type to the variable 'if_condition_580397' (line 429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 4), 'if_condition_580397', if_condition_580397)
    # SSA begins for if statement (line 429)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ModeResult(...): (line 430)
    # Processing the call arguments (line 430)
    
    # Call to array(...): (line 430)
    # Processing the call arguments (line 430)
    
    # Obtaining an instance of the builtin type 'list' (line 430)
    list_580401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 35), 'list')
    # Adding type elements to the builtin type 'list' instance (line 430)
    
    # Processing the call keyword arguments (line 430)
    kwargs_580402 = {}
    # Getting the type of 'np' (line 430)
    np_580399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 26), 'np', False)
    # Obtaining the member 'array' of a type (line 430)
    array_580400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 26), np_580399, 'array')
    # Calling array(args, kwargs) (line 430)
    array_call_result_580403 = invoke(stypy.reporting.localization.Localization(__file__, 430, 26), array_580400, *[list_580401], **kwargs_580402)
    
    
    # Call to array(...): (line 430)
    # Processing the call arguments (line 430)
    
    # Obtaining an instance of the builtin type 'list' (line 430)
    list_580406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 49), 'list')
    # Adding type elements to the builtin type 'list' instance (line 430)
    
    # Processing the call keyword arguments (line 430)
    kwargs_580407 = {}
    # Getting the type of 'np' (line 430)
    np_580404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 40), 'np', False)
    # Obtaining the member 'array' of a type (line 430)
    array_580405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 40), np_580404, 'array')
    # Calling array(args, kwargs) (line 430)
    array_call_result_580408 = invoke(stypy.reporting.localization.Localization(__file__, 430, 40), array_580405, *[list_580406], **kwargs_580407)
    
    # Processing the call keyword arguments (line 430)
    kwargs_580409 = {}
    # Getting the type of 'ModeResult' (line 430)
    ModeResult_580398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 15), 'ModeResult', False)
    # Calling ModeResult(args, kwargs) (line 430)
    ModeResult_call_result_580410 = invoke(stypy.reporting.localization.Localization(__file__, 430, 15), ModeResult_580398, *[array_call_result_580403, array_call_result_580408], **kwargs_580409)
    
    # Assigning a type to the variable 'stypy_return_type' (line 430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 8), 'stypy_return_type', ModeResult_call_result_580410)
    # SSA join for if statement (line 429)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 432):
    
    # Assigning a Subscript to a Name (line 432):
    
    # Obtaining the type of the subscript
    int_580411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, 4), 'int')
    
    # Call to _contains_nan(...): (line 432)
    # Processing the call arguments (line 432)
    # Getting the type of 'a' (line 432)
    a_580413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 432)
    nan_policy_580414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 432)
    kwargs_580415 = {}
    # Getting the type of '_contains_nan' (line 432)
    _contains_nan_580412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 432)
    _contains_nan_call_result_580416 = invoke(stypy.reporting.localization.Localization(__file__, 432, 31), _contains_nan_580412, *[a_580413, nan_policy_580414], **kwargs_580415)
    
    # Obtaining the member '__getitem__' of a type (line 432)
    getitem___580417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 4), _contains_nan_call_result_580416, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 432)
    subscript_call_result_580418 = invoke(stypy.reporting.localization.Localization(__file__, 432, 4), getitem___580417, int_580411)
    
    # Assigning a type to the variable 'tuple_var_assignment_579847' (line 432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 4), 'tuple_var_assignment_579847', subscript_call_result_580418)
    
    # Assigning a Subscript to a Name (line 432):
    
    # Obtaining the type of the subscript
    int_580419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, 4), 'int')
    
    # Call to _contains_nan(...): (line 432)
    # Processing the call arguments (line 432)
    # Getting the type of 'a' (line 432)
    a_580421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 432)
    nan_policy_580422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 432)
    kwargs_580423 = {}
    # Getting the type of '_contains_nan' (line 432)
    _contains_nan_580420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 432)
    _contains_nan_call_result_580424 = invoke(stypy.reporting.localization.Localization(__file__, 432, 31), _contains_nan_580420, *[a_580421, nan_policy_580422], **kwargs_580423)
    
    # Obtaining the member '__getitem__' of a type (line 432)
    getitem___580425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 4), _contains_nan_call_result_580424, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 432)
    subscript_call_result_580426 = invoke(stypy.reporting.localization.Localization(__file__, 432, 4), getitem___580425, int_580419)
    
    # Assigning a type to the variable 'tuple_var_assignment_579848' (line 432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 4), 'tuple_var_assignment_579848', subscript_call_result_580426)
    
    # Assigning a Name to a Name (line 432):
    # Getting the type of 'tuple_var_assignment_579847' (line 432)
    tuple_var_assignment_579847_580427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 4), 'tuple_var_assignment_579847')
    # Assigning a type to the variable 'contains_nan' (line 432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 4), 'contains_nan', tuple_var_assignment_579847_580427)
    
    # Assigning a Name to a Name (line 432):
    # Getting the type of 'tuple_var_assignment_579848' (line 432)
    tuple_var_assignment_579848_580428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 4), 'tuple_var_assignment_579848')
    # Assigning a type to the variable 'nan_policy' (line 432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 18), 'nan_policy', tuple_var_assignment_579848_580428)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 434)
    contains_nan_580429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 434)
    nan_policy_580430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 24), 'nan_policy')
    str_580431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 434)
    result_eq_580432 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 24), '==', nan_policy_580430, str_580431)
    
    # Applying the binary operator 'and' (line 434)
    result_and_keyword_580433 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 7), 'and', contains_nan_580429, result_eq_580432)
    
    # Testing the type of an if condition (line 434)
    if_condition_580434 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 434, 4), result_and_keyword_580433)
    # Assigning a type to the variable 'if_condition_580434' (line 434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'if_condition_580434', if_condition_580434)
    # SSA begins for if statement (line 434)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 435):
    
    # Assigning a Call to a Name (line 435):
    
    # Call to masked_invalid(...): (line 435)
    # Processing the call arguments (line 435)
    # Getting the type of 'a' (line 435)
    a_580437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 30), 'a', False)
    # Processing the call keyword arguments (line 435)
    kwargs_580438 = {}
    # Getting the type of 'ma' (line 435)
    ma_580435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 435)
    masked_invalid_580436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 12), ma_580435, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 435)
    masked_invalid_call_result_580439 = invoke(stypy.reporting.localization.Localization(__file__, 435, 12), masked_invalid_580436, *[a_580437], **kwargs_580438)
    
    # Assigning a type to the variable 'a' (line 435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'a', masked_invalid_call_result_580439)
    
    # Call to mode(...): (line 436)
    # Processing the call arguments (line 436)
    # Getting the type of 'a' (line 436)
    a_580442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 33), 'a', False)
    # Getting the type of 'axis' (line 436)
    axis_580443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 36), 'axis', False)
    # Processing the call keyword arguments (line 436)
    kwargs_580444 = {}
    # Getting the type of 'mstats_basic' (line 436)
    mstats_basic_580440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 15), 'mstats_basic', False)
    # Obtaining the member 'mode' of a type (line 436)
    mode_580441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 15), mstats_basic_580440, 'mode')
    # Calling mode(args, kwargs) (line 436)
    mode_call_result_580445 = invoke(stypy.reporting.localization.Localization(__file__, 436, 15), mode_580441, *[a_580442, axis_580443], **kwargs_580444)
    
    # Assigning a type to the variable 'stypy_return_type' (line 436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'stypy_return_type', mode_call_result_580445)
    # SSA join for if statement (line 434)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 438):
    
    # Assigning a Call to a Name (line 438):
    
    # Call to unique(...): (line 438)
    # Processing the call arguments (line 438)
    
    # Call to ravel(...): (line 438)
    # Processing the call arguments (line 438)
    # Getting the type of 'a' (line 438)
    a_580450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 32), 'a', False)
    # Processing the call keyword arguments (line 438)
    kwargs_580451 = {}
    # Getting the type of 'np' (line 438)
    np_580448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 23), 'np', False)
    # Obtaining the member 'ravel' of a type (line 438)
    ravel_580449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 23), np_580448, 'ravel')
    # Calling ravel(args, kwargs) (line 438)
    ravel_call_result_580452 = invoke(stypy.reporting.localization.Localization(__file__, 438, 23), ravel_580449, *[a_580450], **kwargs_580451)
    
    # Processing the call keyword arguments (line 438)
    kwargs_580453 = {}
    # Getting the type of 'np' (line 438)
    np_580446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 13), 'np', False)
    # Obtaining the member 'unique' of a type (line 438)
    unique_580447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 13), np_580446, 'unique')
    # Calling unique(args, kwargs) (line 438)
    unique_call_result_580454 = invoke(stypy.reporting.localization.Localization(__file__, 438, 13), unique_580447, *[ravel_call_result_580452], **kwargs_580453)
    
    # Assigning a type to the variable 'scores' (line 438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 4), 'scores', unique_call_result_580454)
    
    # Assigning a Call to a Name (line 439):
    
    # Assigning a Call to a Name (line 439):
    
    # Call to list(...): (line 439)
    # Processing the call arguments (line 439)
    # Getting the type of 'a' (line 439)
    a_580456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 21), 'a', False)
    # Obtaining the member 'shape' of a type (line 439)
    shape_580457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 21), a_580456, 'shape')
    # Processing the call keyword arguments (line 439)
    kwargs_580458 = {}
    # Getting the type of 'list' (line 439)
    list_580455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 16), 'list', False)
    # Calling list(args, kwargs) (line 439)
    list_call_result_580459 = invoke(stypy.reporting.localization.Localization(__file__, 439, 16), list_580455, *[shape_580457], **kwargs_580458)
    
    # Assigning a type to the variable 'testshape' (line 439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 4), 'testshape', list_call_result_580459)
    
    # Assigning a Num to a Subscript (line 440):
    
    # Assigning a Num to a Subscript (line 440):
    int_580460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 440, 22), 'int')
    # Getting the type of 'testshape' (line 440)
    testshape_580461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 4), 'testshape')
    # Getting the type of 'axis' (line 440)
    axis_580462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 14), 'axis')
    # Storing an element on a container (line 440)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 440, 4), testshape_580461, (axis_580462, int_580460))
    
    # Assigning a Call to a Name (line 441):
    
    # Assigning a Call to a Name (line 441):
    
    # Call to zeros(...): (line 441)
    # Processing the call arguments (line 441)
    # Getting the type of 'testshape' (line 441)
    testshape_580465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 27), 'testshape', False)
    # Processing the call keyword arguments (line 441)
    # Getting the type of 'a' (line 441)
    a_580466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 44), 'a', False)
    # Obtaining the member 'dtype' of a type (line 441)
    dtype_580467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 44), a_580466, 'dtype')
    keyword_580468 = dtype_580467
    kwargs_580469 = {'dtype': keyword_580468}
    # Getting the type of 'np' (line 441)
    np_580463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 18), 'np', False)
    # Obtaining the member 'zeros' of a type (line 441)
    zeros_580464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 18), np_580463, 'zeros')
    # Calling zeros(args, kwargs) (line 441)
    zeros_call_result_580470 = invoke(stypy.reporting.localization.Localization(__file__, 441, 18), zeros_580464, *[testshape_580465], **kwargs_580469)
    
    # Assigning a type to the variable 'oldmostfreq' (line 441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 4), 'oldmostfreq', zeros_call_result_580470)
    
    # Assigning a Call to a Name (line 442):
    
    # Assigning a Call to a Name (line 442):
    
    # Call to zeros(...): (line 442)
    # Processing the call arguments (line 442)
    # Getting the type of 'testshape' (line 442)
    testshape_580473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 25), 'testshape', False)
    # Processing the call keyword arguments (line 442)
    # Getting the type of 'int' (line 442)
    int_580474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 42), 'int', False)
    keyword_580475 = int_580474
    kwargs_580476 = {'dtype': keyword_580475}
    # Getting the type of 'np' (line 442)
    np_580471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 16), 'np', False)
    # Obtaining the member 'zeros' of a type (line 442)
    zeros_580472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 16), np_580471, 'zeros')
    # Calling zeros(args, kwargs) (line 442)
    zeros_call_result_580477 = invoke(stypy.reporting.localization.Localization(__file__, 442, 16), zeros_580472, *[testshape_580473], **kwargs_580476)
    
    # Assigning a type to the variable 'oldcounts' (line 442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 4), 'oldcounts', zeros_call_result_580477)
    
    # Getting the type of 'scores' (line 443)
    scores_580478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 17), 'scores')
    # Testing the type of a for loop iterable (line 443)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 443, 4), scores_580478)
    # Getting the type of the for loop variable (line 443)
    for_loop_var_580479 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 443, 4), scores_580478)
    # Assigning a type to the variable 'score' (line 443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 4), 'score', for_loop_var_580479)
    # SSA begins for a for statement (line 443)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Compare to a Name (line 444):
    
    # Assigning a Compare to a Name (line 444):
    
    # Getting the type of 'a' (line 444)
    a_580480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 20), 'a')
    # Getting the type of 'score' (line 444)
    score_580481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 25), 'score')
    # Applying the binary operator '==' (line 444)
    result_eq_580482 = python_operator(stypy.reporting.localization.Localization(__file__, 444, 20), '==', a_580480, score_580481)
    
    # Assigning a type to the variable 'template' (line 444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'template', result_eq_580482)
    
    # Assigning a Call to a Name (line 445):
    
    # Assigning a Call to a Name (line 445):
    
    # Call to expand_dims(...): (line 445)
    # Processing the call arguments (line 445)
    
    # Call to sum(...): (line 445)
    # Processing the call arguments (line 445)
    # Getting the type of 'template' (line 445)
    template_580487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 39), 'template', False)
    # Getting the type of 'axis' (line 445)
    axis_580488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 49), 'axis', False)
    # Processing the call keyword arguments (line 445)
    kwargs_580489 = {}
    # Getting the type of 'np' (line 445)
    np_580485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 32), 'np', False)
    # Obtaining the member 'sum' of a type (line 445)
    sum_580486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 32), np_580485, 'sum')
    # Calling sum(args, kwargs) (line 445)
    sum_call_result_580490 = invoke(stypy.reporting.localization.Localization(__file__, 445, 32), sum_580486, *[template_580487, axis_580488], **kwargs_580489)
    
    # Getting the type of 'axis' (line 445)
    axis_580491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 56), 'axis', False)
    # Processing the call keyword arguments (line 445)
    kwargs_580492 = {}
    # Getting the type of 'np' (line 445)
    np_580483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 17), 'np', False)
    # Obtaining the member 'expand_dims' of a type (line 445)
    expand_dims_580484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 17), np_580483, 'expand_dims')
    # Calling expand_dims(args, kwargs) (line 445)
    expand_dims_call_result_580493 = invoke(stypy.reporting.localization.Localization(__file__, 445, 17), expand_dims_580484, *[sum_call_result_580490, axis_580491], **kwargs_580492)
    
    # Assigning a type to the variable 'counts' (line 445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 8), 'counts', expand_dims_call_result_580493)
    
    # Assigning a Call to a Name (line 446):
    
    # Assigning a Call to a Name (line 446):
    
    # Call to where(...): (line 446)
    # Processing the call arguments (line 446)
    
    # Getting the type of 'counts' (line 446)
    counts_580496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 32), 'counts', False)
    # Getting the type of 'oldcounts' (line 446)
    oldcounts_580497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 41), 'oldcounts', False)
    # Applying the binary operator '>' (line 446)
    result_gt_580498 = python_operator(stypy.reporting.localization.Localization(__file__, 446, 32), '>', counts_580496, oldcounts_580497)
    
    # Getting the type of 'score' (line 446)
    score_580499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 52), 'score', False)
    # Getting the type of 'oldmostfreq' (line 446)
    oldmostfreq_580500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 59), 'oldmostfreq', False)
    # Processing the call keyword arguments (line 446)
    kwargs_580501 = {}
    # Getting the type of 'np' (line 446)
    np_580494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 23), 'np', False)
    # Obtaining the member 'where' of a type (line 446)
    where_580495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 23), np_580494, 'where')
    # Calling where(args, kwargs) (line 446)
    where_call_result_580502 = invoke(stypy.reporting.localization.Localization(__file__, 446, 23), where_580495, *[result_gt_580498, score_580499, oldmostfreq_580500], **kwargs_580501)
    
    # Assigning a type to the variable 'mostfrequent' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'mostfrequent', where_call_result_580502)
    
    # Assigning a Call to a Name (line 447):
    
    # Assigning a Call to a Name (line 447):
    
    # Call to maximum(...): (line 447)
    # Processing the call arguments (line 447)
    # Getting the type of 'counts' (line 447)
    counts_580505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 31), 'counts', False)
    # Getting the type of 'oldcounts' (line 447)
    oldcounts_580506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 39), 'oldcounts', False)
    # Processing the call keyword arguments (line 447)
    kwargs_580507 = {}
    # Getting the type of 'np' (line 447)
    np_580503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 20), 'np', False)
    # Obtaining the member 'maximum' of a type (line 447)
    maximum_580504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 20), np_580503, 'maximum')
    # Calling maximum(args, kwargs) (line 447)
    maximum_call_result_580508 = invoke(stypy.reporting.localization.Localization(__file__, 447, 20), maximum_580504, *[counts_580505, oldcounts_580506], **kwargs_580507)
    
    # Assigning a type to the variable 'oldcounts' (line 447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'oldcounts', maximum_call_result_580508)
    
    # Assigning a Name to a Name (line 448):
    
    # Assigning a Name to a Name (line 448):
    # Getting the type of 'mostfrequent' (line 448)
    mostfrequent_580509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 22), 'mostfrequent')
    # Assigning a type to the variable 'oldmostfreq' (line 448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 8), 'oldmostfreq', mostfrequent_580509)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to ModeResult(...): (line 450)
    # Processing the call arguments (line 450)
    # Getting the type of 'mostfrequent' (line 450)
    mostfrequent_580511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 22), 'mostfrequent', False)
    # Getting the type of 'oldcounts' (line 450)
    oldcounts_580512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 36), 'oldcounts', False)
    # Processing the call keyword arguments (line 450)
    kwargs_580513 = {}
    # Getting the type of 'ModeResult' (line 450)
    ModeResult_580510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 11), 'ModeResult', False)
    # Calling ModeResult(args, kwargs) (line 450)
    ModeResult_call_result_580514 = invoke(stypy.reporting.localization.Localization(__file__, 450, 11), ModeResult_580510, *[mostfrequent_580511, oldcounts_580512], **kwargs_580513)
    
    # Assigning a type to the variable 'stypy_return_type' (line 450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 4), 'stypy_return_type', ModeResult_call_result_580514)
    
    # ################# End of 'mode(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mode' in the type store
    # Getting the type of 'stypy_return_type' (line 385)
    stypy_return_type_580515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580515)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mode'
    return stypy_return_type_580515

# Assigning a type to the variable 'mode' (line 385)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 0), 'mode', mode)

@norecursion
def _mask_to_limits(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_mask_to_limits'
    module_type_store = module_type_store.open_function_context('_mask_to_limits', 453, 0, False)
    
    # Passed parameters checking function
    _mask_to_limits.stypy_localization = localization
    _mask_to_limits.stypy_type_of_self = None
    _mask_to_limits.stypy_type_store = module_type_store
    _mask_to_limits.stypy_function_name = '_mask_to_limits'
    _mask_to_limits.stypy_param_names_list = ['a', 'limits', 'inclusive']
    _mask_to_limits.stypy_varargs_param_name = None
    _mask_to_limits.stypy_kwargs_param_name = None
    _mask_to_limits.stypy_call_defaults = defaults
    _mask_to_limits.stypy_call_varargs = varargs
    _mask_to_limits.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_mask_to_limits', ['a', 'limits', 'inclusive'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_mask_to_limits', localization, ['a', 'limits', 'inclusive'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_mask_to_limits(...)' code ##################

    str_580516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, (-1)), 'str', 'Mask an array for values outside of given limits.\n\n    This is primarily a utility function.\n\n    Parameters\n    ----------\n    a : array\n    limits : (float or None, float or None)\n        A tuple consisting of the (lower limit, upper limit).  Values in the\n        input array less than the lower limit or greater than the upper limit\n        will be masked out. None implies no limit.\n    inclusive : (bool, bool)\n        A tuple consisting of the (lower flag, upper flag).  These flags\n        determine whether values exactly equal to lower or upper are allowed.\n\n    Returns\n    -------\n    A MaskedArray.\n\n    Raises\n    ------\n    A ValueError if there are no values within the given limits.\n    ')
    
    # Assigning a Name to a Tuple (line 477):
    
    # Assigning a Subscript to a Name (line 477):
    
    # Obtaining the type of the subscript
    int_580517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 4), 'int')
    # Getting the type of 'limits' (line 477)
    limits_580518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 31), 'limits')
    # Obtaining the member '__getitem__' of a type (line 477)
    getitem___580519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 4), limits_580518, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 477)
    subscript_call_result_580520 = invoke(stypy.reporting.localization.Localization(__file__, 477, 4), getitem___580519, int_580517)
    
    # Assigning a type to the variable 'tuple_var_assignment_579849' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'tuple_var_assignment_579849', subscript_call_result_580520)
    
    # Assigning a Subscript to a Name (line 477):
    
    # Obtaining the type of the subscript
    int_580521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 4), 'int')
    # Getting the type of 'limits' (line 477)
    limits_580522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 31), 'limits')
    # Obtaining the member '__getitem__' of a type (line 477)
    getitem___580523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 4), limits_580522, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 477)
    subscript_call_result_580524 = invoke(stypy.reporting.localization.Localization(__file__, 477, 4), getitem___580523, int_580521)
    
    # Assigning a type to the variable 'tuple_var_assignment_579850' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'tuple_var_assignment_579850', subscript_call_result_580524)
    
    # Assigning a Name to a Name (line 477):
    # Getting the type of 'tuple_var_assignment_579849' (line 477)
    tuple_var_assignment_579849_580525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'tuple_var_assignment_579849')
    # Assigning a type to the variable 'lower_limit' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'lower_limit', tuple_var_assignment_579849_580525)
    
    # Assigning a Name to a Name (line 477):
    # Getting the type of 'tuple_var_assignment_579850' (line 477)
    tuple_var_assignment_579850_580526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'tuple_var_assignment_579850')
    # Assigning a type to the variable 'upper_limit' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 17), 'upper_limit', tuple_var_assignment_579850_580526)
    
    # Assigning a Name to a Tuple (line 478):
    
    # Assigning a Subscript to a Name (line 478):
    
    # Obtaining the type of the subscript
    int_580527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 4), 'int')
    # Getting the type of 'inclusive' (line 478)
    inclusive_580528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 35), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 478)
    getitem___580529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 4), inclusive_580528, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 478)
    subscript_call_result_580530 = invoke(stypy.reporting.localization.Localization(__file__, 478, 4), getitem___580529, int_580527)
    
    # Assigning a type to the variable 'tuple_var_assignment_579851' (line 478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 4), 'tuple_var_assignment_579851', subscript_call_result_580530)
    
    # Assigning a Subscript to a Name (line 478):
    
    # Obtaining the type of the subscript
    int_580531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 4), 'int')
    # Getting the type of 'inclusive' (line 478)
    inclusive_580532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 35), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 478)
    getitem___580533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 4), inclusive_580532, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 478)
    subscript_call_result_580534 = invoke(stypy.reporting.localization.Localization(__file__, 478, 4), getitem___580533, int_580531)
    
    # Assigning a type to the variable 'tuple_var_assignment_579852' (line 478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 4), 'tuple_var_assignment_579852', subscript_call_result_580534)
    
    # Assigning a Name to a Name (line 478):
    # Getting the type of 'tuple_var_assignment_579851' (line 478)
    tuple_var_assignment_579851_580535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 4), 'tuple_var_assignment_579851')
    # Assigning a type to the variable 'lower_include' (line 478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 4), 'lower_include', tuple_var_assignment_579851_580535)
    
    # Assigning a Name to a Name (line 478):
    # Getting the type of 'tuple_var_assignment_579852' (line 478)
    tuple_var_assignment_579852_580536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 4), 'tuple_var_assignment_579852')
    # Assigning a type to the variable 'upper_include' (line 478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 19), 'upper_include', tuple_var_assignment_579852_580536)
    
    # Assigning a Call to a Name (line 479):
    
    # Assigning a Call to a Name (line 479):
    
    # Call to MaskedArray(...): (line 479)
    # Processing the call arguments (line 479)
    # Getting the type of 'a' (line 479)
    a_580539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 24), 'a', False)
    # Processing the call keyword arguments (line 479)
    kwargs_580540 = {}
    # Getting the type of 'ma' (line 479)
    ma_580537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 9), 'ma', False)
    # Obtaining the member 'MaskedArray' of a type (line 479)
    MaskedArray_580538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 479, 9), ma_580537, 'MaskedArray')
    # Calling MaskedArray(args, kwargs) (line 479)
    MaskedArray_call_result_580541 = invoke(stypy.reporting.localization.Localization(__file__, 479, 9), MaskedArray_580538, *[a_580539], **kwargs_580540)
    
    # Assigning a type to the variable 'am' (line 479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 4), 'am', MaskedArray_call_result_580541)
    
    # Type idiom detected: calculating its left and rigth part (line 480)
    # Getting the type of 'lower_limit' (line 480)
    lower_limit_580542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 4), 'lower_limit')
    # Getting the type of 'None' (line 480)
    None_580543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 26), 'None')
    
    (may_be_580544, more_types_in_union_580545) = may_not_be_none(lower_limit_580542, None_580543)

    if may_be_580544:

        if more_types_in_union_580545:
            # Runtime conditional SSA (line 480)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'lower_include' (line 481)
        lower_include_580546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 11), 'lower_include')
        # Testing the type of an if condition (line 481)
        if_condition_580547 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 481, 8), lower_include_580546)
        # Assigning a type to the variable 'if_condition_580547' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 8), 'if_condition_580547', if_condition_580547)
        # SSA begins for if statement (line 481)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 482):
        
        # Assigning a Call to a Name (line 482):
        
        # Call to masked_less(...): (line 482)
        # Processing the call arguments (line 482)
        # Getting the type of 'am' (line 482)
        am_580550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 32), 'am', False)
        # Getting the type of 'lower_limit' (line 482)
        lower_limit_580551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 36), 'lower_limit', False)
        # Processing the call keyword arguments (line 482)
        kwargs_580552 = {}
        # Getting the type of 'ma' (line 482)
        ma_580548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 17), 'ma', False)
        # Obtaining the member 'masked_less' of a type (line 482)
        masked_less_580549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 17), ma_580548, 'masked_less')
        # Calling masked_less(args, kwargs) (line 482)
        masked_less_call_result_580553 = invoke(stypy.reporting.localization.Localization(__file__, 482, 17), masked_less_580549, *[am_580550, lower_limit_580551], **kwargs_580552)
        
        # Assigning a type to the variable 'am' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'am', masked_less_call_result_580553)
        # SSA branch for the else part of an if statement (line 481)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 484):
        
        # Assigning a Call to a Name (line 484):
        
        # Call to masked_less_equal(...): (line 484)
        # Processing the call arguments (line 484)
        # Getting the type of 'am' (line 484)
        am_580556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 38), 'am', False)
        # Getting the type of 'lower_limit' (line 484)
        lower_limit_580557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 42), 'lower_limit', False)
        # Processing the call keyword arguments (line 484)
        kwargs_580558 = {}
        # Getting the type of 'ma' (line 484)
        ma_580554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 17), 'ma', False)
        # Obtaining the member 'masked_less_equal' of a type (line 484)
        masked_less_equal_580555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 17), ma_580554, 'masked_less_equal')
        # Calling masked_less_equal(args, kwargs) (line 484)
        masked_less_equal_call_result_580559 = invoke(stypy.reporting.localization.Localization(__file__, 484, 17), masked_less_equal_580555, *[am_580556, lower_limit_580557], **kwargs_580558)
        
        # Assigning a type to the variable 'am' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 12), 'am', masked_less_equal_call_result_580559)
        # SSA join for if statement (line 481)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_580545:
            # SSA join for if statement (line 480)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 486)
    # Getting the type of 'upper_limit' (line 486)
    upper_limit_580560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 4), 'upper_limit')
    # Getting the type of 'None' (line 486)
    None_580561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 26), 'None')
    
    (may_be_580562, more_types_in_union_580563) = may_not_be_none(upper_limit_580560, None_580561)

    if may_be_580562:

        if more_types_in_union_580563:
            # Runtime conditional SSA (line 486)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'upper_include' (line 487)
        upper_include_580564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 11), 'upper_include')
        # Testing the type of an if condition (line 487)
        if_condition_580565 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 487, 8), upper_include_580564)
        # Assigning a type to the variable 'if_condition_580565' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 8), 'if_condition_580565', if_condition_580565)
        # SSA begins for if statement (line 487)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 488):
        
        # Assigning a Call to a Name (line 488):
        
        # Call to masked_greater(...): (line 488)
        # Processing the call arguments (line 488)
        # Getting the type of 'am' (line 488)
        am_580568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 35), 'am', False)
        # Getting the type of 'upper_limit' (line 488)
        upper_limit_580569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 39), 'upper_limit', False)
        # Processing the call keyword arguments (line 488)
        kwargs_580570 = {}
        # Getting the type of 'ma' (line 488)
        ma_580566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 17), 'ma', False)
        # Obtaining the member 'masked_greater' of a type (line 488)
        masked_greater_580567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 17), ma_580566, 'masked_greater')
        # Calling masked_greater(args, kwargs) (line 488)
        masked_greater_call_result_580571 = invoke(stypy.reporting.localization.Localization(__file__, 488, 17), masked_greater_580567, *[am_580568, upper_limit_580569], **kwargs_580570)
        
        # Assigning a type to the variable 'am' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 12), 'am', masked_greater_call_result_580571)
        # SSA branch for the else part of an if statement (line 487)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 490):
        
        # Assigning a Call to a Name (line 490):
        
        # Call to masked_greater_equal(...): (line 490)
        # Processing the call arguments (line 490)
        # Getting the type of 'am' (line 490)
        am_580574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 41), 'am', False)
        # Getting the type of 'upper_limit' (line 490)
        upper_limit_580575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 45), 'upper_limit', False)
        # Processing the call keyword arguments (line 490)
        kwargs_580576 = {}
        # Getting the type of 'ma' (line 490)
        ma_580572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 17), 'ma', False)
        # Obtaining the member 'masked_greater_equal' of a type (line 490)
        masked_greater_equal_580573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 17), ma_580572, 'masked_greater_equal')
        # Calling masked_greater_equal(args, kwargs) (line 490)
        masked_greater_equal_call_result_580577 = invoke(stypy.reporting.localization.Localization(__file__, 490, 17), masked_greater_equal_580573, *[am_580574, upper_limit_580575], **kwargs_580576)
        
        # Assigning a type to the variable 'am' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 12), 'am', masked_greater_equal_call_result_580577)
        # SSA join for if statement (line 487)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_580563:
            # SSA join for if statement (line 486)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    
    # Call to count(...): (line 492)
    # Processing the call keyword arguments (line 492)
    kwargs_580580 = {}
    # Getting the type of 'am' (line 492)
    am_580578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 7), 'am', False)
    # Obtaining the member 'count' of a type (line 492)
    count_580579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 7), am_580578, 'count')
    # Calling count(args, kwargs) (line 492)
    count_call_result_580581 = invoke(stypy.reporting.localization.Localization(__file__, 492, 7), count_580579, *[], **kwargs_580580)
    
    int_580582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 21), 'int')
    # Applying the binary operator '==' (line 492)
    result_eq_580583 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 7), '==', count_call_result_580581, int_580582)
    
    # Testing the type of an if condition (line 492)
    if_condition_580584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 492, 4), result_eq_580583)
    # Assigning a type to the variable 'if_condition_580584' (line 492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 4), 'if_condition_580584', if_condition_580584)
    # SSA begins for if statement (line 492)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 493)
    # Processing the call arguments (line 493)
    str_580586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 25), 'str', 'No array values within given limits')
    # Processing the call keyword arguments (line 493)
    kwargs_580587 = {}
    # Getting the type of 'ValueError' (line 493)
    ValueError_580585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 493)
    ValueError_call_result_580588 = invoke(stypy.reporting.localization.Localization(__file__, 493, 14), ValueError_580585, *[str_580586], **kwargs_580587)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 493, 8), ValueError_call_result_580588, 'raise parameter', BaseException)
    # SSA join for if statement (line 492)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'am' (line 495)
    am_580589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 11), 'am')
    # Assigning a type to the variable 'stypy_return_type' (line 495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 4), 'stypy_return_type', am_580589)
    
    # ################# End of '_mask_to_limits(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_mask_to_limits' in the type store
    # Getting the type of 'stypy_return_type' (line 453)
    stypy_return_type_580590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580590)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_mask_to_limits'
    return stypy_return_type_580590

# Assigning a type to the variable '_mask_to_limits' (line 453)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 0), '_mask_to_limits', _mask_to_limits)

@norecursion
def tmean(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 498)
    None_580591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 20), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 498)
    tuple_580592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 498)
    # Adding element type (line 498)
    # Getting the type of 'True' (line 498)
    True_580593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 37), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 498, 37), tuple_580592, True_580593)
    # Adding element type (line 498)
    # Getting the type of 'True' (line 498)
    True_580594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 43), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 498, 37), tuple_580592, True_580594)
    
    # Getting the type of 'None' (line 498)
    None_580595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 55), 'None')
    defaults = [None_580591, tuple_580592, None_580595]
    # Create a new context for function 'tmean'
    module_type_store = module_type_store.open_function_context('tmean', 498, 0, False)
    
    # Passed parameters checking function
    tmean.stypy_localization = localization
    tmean.stypy_type_of_self = None
    tmean.stypy_type_store = module_type_store
    tmean.stypy_function_name = 'tmean'
    tmean.stypy_param_names_list = ['a', 'limits', 'inclusive', 'axis']
    tmean.stypy_varargs_param_name = None
    tmean.stypy_kwargs_param_name = None
    tmean.stypy_call_defaults = defaults
    tmean.stypy_call_varargs = varargs
    tmean.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tmean', ['a', 'limits', 'inclusive', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tmean', localization, ['a', 'limits', 'inclusive', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tmean(...)' code ##################

    str_580596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, (-1)), 'str', '\n    Compute the trimmed mean.\n\n    This function finds the arithmetic mean of given values, ignoring values\n    outside the given `limits`.\n\n    Parameters\n    ----------\n    a : array_like\n        Array of values.\n    limits : None or (lower limit, upper limit), optional\n        Values in the input array less than the lower limit or greater than the\n        upper limit will be ignored.  When limits is None (default), then all\n        values are used.  Either of the limit values in the tuple can also be\n        None representing a half-open interval.\n    inclusive : (bool, bool), optional\n        A tuple consisting of the (lower flag, upper flag).  These flags\n        determine whether values exactly equal to the lower or upper limits\n        are included.  The default value is (True, True).\n    axis : int or None, optional\n        Axis along which to compute test. Default is None.\n\n    Returns\n    -------\n    tmean : float\n\n    See also\n    --------\n    trim_mean : returns mean after trimming a proportion from both tails.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> x = np.arange(20)\n    >>> stats.tmean(x)\n    9.5\n    >>> stats.tmean(x, (3,17))\n    10.0\n\n    ')
    
    # Assigning a Call to a Name (line 539):
    
    # Assigning a Call to a Name (line 539):
    
    # Call to asarray(...): (line 539)
    # Processing the call arguments (line 539)
    # Getting the type of 'a' (line 539)
    a_580598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 16), 'a', False)
    # Processing the call keyword arguments (line 539)
    kwargs_580599 = {}
    # Getting the type of 'asarray' (line 539)
    asarray_580597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 539)
    asarray_call_result_580600 = invoke(stypy.reporting.localization.Localization(__file__, 539, 8), asarray_580597, *[a_580598], **kwargs_580599)
    
    # Assigning a type to the variable 'a' (line 539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 539, 4), 'a', asarray_call_result_580600)
    
    # Type idiom detected: calculating its left and rigth part (line 540)
    # Getting the type of 'limits' (line 540)
    limits_580601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 7), 'limits')
    # Getting the type of 'None' (line 540)
    None_580602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 17), 'None')
    
    (may_be_580603, more_types_in_union_580604) = may_be_none(limits_580601, None_580602)

    if may_be_580603:

        if more_types_in_union_580604:
            # Runtime conditional SSA (line 540)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to mean(...): (line 541)
        # Processing the call arguments (line 541)
        # Getting the type of 'a' (line 541)
        a_580607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 23), 'a', False)
        # Getting the type of 'None' (line 541)
        None_580608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 26), 'None', False)
        # Processing the call keyword arguments (line 541)
        kwargs_580609 = {}
        # Getting the type of 'np' (line 541)
        np_580605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 15), 'np', False)
        # Obtaining the member 'mean' of a type (line 541)
        mean_580606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 15), np_580605, 'mean')
        # Calling mean(args, kwargs) (line 541)
        mean_call_result_580610 = invoke(stypy.reporting.localization.Localization(__file__, 541, 15), mean_580606, *[a_580607, None_580608], **kwargs_580609)
        
        # Assigning a type to the variable 'stypy_return_type' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'stypy_return_type', mean_call_result_580610)

        if more_types_in_union_580604:
            # SSA join for if statement (line 540)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 543):
    
    # Assigning a Call to a Name (line 543):
    
    # Call to _mask_to_limits(...): (line 543)
    # Processing the call arguments (line 543)
    
    # Call to ravel(...): (line 543)
    # Processing the call keyword arguments (line 543)
    kwargs_580614 = {}
    # Getting the type of 'a' (line 543)
    a_580612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 25), 'a', False)
    # Obtaining the member 'ravel' of a type (line 543)
    ravel_580613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 25), a_580612, 'ravel')
    # Calling ravel(args, kwargs) (line 543)
    ravel_call_result_580615 = invoke(stypy.reporting.localization.Localization(__file__, 543, 25), ravel_580613, *[], **kwargs_580614)
    
    # Getting the type of 'limits' (line 543)
    limits_580616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 36), 'limits', False)
    # Getting the type of 'inclusive' (line 543)
    inclusive_580617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 44), 'inclusive', False)
    # Processing the call keyword arguments (line 543)
    kwargs_580618 = {}
    # Getting the type of '_mask_to_limits' (line 543)
    _mask_to_limits_580611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 9), '_mask_to_limits', False)
    # Calling _mask_to_limits(args, kwargs) (line 543)
    _mask_to_limits_call_result_580619 = invoke(stypy.reporting.localization.Localization(__file__, 543, 9), _mask_to_limits_580611, *[ravel_call_result_580615, limits_580616, inclusive_580617], **kwargs_580618)
    
    # Assigning a type to the variable 'am' (line 543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 4), 'am', _mask_to_limits_call_result_580619)
    
    # Call to mean(...): (line 544)
    # Processing the call keyword arguments (line 544)
    # Getting the type of 'axis' (line 544)
    axis_580622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 24), 'axis', False)
    keyword_580623 = axis_580622
    kwargs_580624 = {'axis': keyword_580623}
    # Getting the type of 'am' (line 544)
    am_580620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 11), 'am', False)
    # Obtaining the member 'mean' of a type (line 544)
    mean_580621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 11), am_580620, 'mean')
    # Calling mean(args, kwargs) (line 544)
    mean_call_result_580625 = invoke(stypy.reporting.localization.Localization(__file__, 544, 11), mean_580621, *[], **kwargs_580624)
    
    # Assigning a type to the variable 'stypy_return_type' (line 544)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 4), 'stypy_return_type', mean_call_result_580625)
    
    # ################# End of 'tmean(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tmean' in the type store
    # Getting the type of 'stypy_return_type' (line 498)
    stypy_return_type_580626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580626)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tmean'
    return stypy_return_type_580626

# Assigning a type to the variable 'tmean' (line 498)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 0), 'tmean', tmean)

@norecursion
def tvar(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 547)
    None_580627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 19), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 547)
    tuple_580628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 547)
    # Adding element type (line 547)
    # Getting the type of 'True' (line 547)
    True_580629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 36), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 547, 36), tuple_580628, True_580629)
    # Adding element type (line 547)
    # Getting the type of 'True' (line 547)
    True_580630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 42), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 547, 36), tuple_580628, True_580630)
    
    int_580631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 54), 'int')
    int_580632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 62), 'int')
    defaults = [None_580627, tuple_580628, int_580631, int_580632]
    # Create a new context for function 'tvar'
    module_type_store = module_type_store.open_function_context('tvar', 547, 0, False)
    
    # Passed parameters checking function
    tvar.stypy_localization = localization
    tvar.stypy_type_of_self = None
    tvar.stypy_type_store = module_type_store
    tvar.stypy_function_name = 'tvar'
    tvar.stypy_param_names_list = ['a', 'limits', 'inclusive', 'axis', 'ddof']
    tvar.stypy_varargs_param_name = None
    tvar.stypy_kwargs_param_name = None
    tvar.stypy_call_defaults = defaults
    tvar.stypy_call_varargs = varargs
    tvar.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tvar', ['a', 'limits', 'inclusive', 'axis', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tvar', localization, ['a', 'limits', 'inclusive', 'axis', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tvar(...)' code ##################

    str_580633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, (-1)), 'str', '\n    Compute the trimmed variance.\n\n    This function computes the sample variance of an array of values,\n    while ignoring values which are outside of given `limits`.\n\n    Parameters\n    ----------\n    a : array_like\n        Array of values.\n    limits : None or (lower limit, upper limit), optional\n        Values in the input array less than the lower limit or greater than the\n        upper limit will be ignored. When limits is None, then all values are\n        used. Either of the limit values in the tuple can also be None\n        representing a half-open interval.  The default value is None.\n    inclusive : (bool, bool), optional\n        A tuple consisting of the (lower flag, upper flag).  These flags\n        determine whether values exactly equal to the lower or upper limits\n        are included.  The default value is (True, True).\n    axis : int or None, optional\n        Axis along which to operate. Default is 0. If None, compute over the\n        whole array `a`.\n    ddof : int, optional\n        Delta degrees of freedom.  Default is 1.\n\n    Returns\n    -------\n    tvar : float\n        Trimmed variance.\n\n    Notes\n    -----\n    `tvar` computes the unbiased sample variance, i.e. it uses a correction\n    factor ``n / (n - 1)``.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> x = np.arange(20)\n    >>> stats.tvar(x)\n    35.0\n    >>> stats.tvar(x, (3,17))\n    20.0\n\n    ')
    
    # Assigning a Call to a Name (line 593):
    
    # Assigning a Call to a Name (line 593):
    
    # Call to asarray(...): (line 593)
    # Processing the call arguments (line 593)
    # Getting the type of 'a' (line 593)
    a_580635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 16), 'a', False)
    # Processing the call keyword arguments (line 593)
    kwargs_580636 = {}
    # Getting the type of 'asarray' (line 593)
    asarray_580634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 593)
    asarray_call_result_580637 = invoke(stypy.reporting.localization.Localization(__file__, 593, 8), asarray_580634, *[a_580635], **kwargs_580636)
    
    # Assigning a type to the variable 'a' (line 593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 4), 'a', asarray_call_result_580637)
    
    # Assigning a Call to a Name (line 594):
    
    # Assigning a Call to a Name (line 594):
    
    # Call to ravel(...): (line 594)
    # Processing the call keyword arguments (line 594)
    kwargs_580644 = {}
    
    # Call to astype(...): (line 594)
    # Processing the call arguments (line 594)
    # Getting the type of 'float' (line 594)
    float_580640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 17), 'float', False)
    # Processing the call keyword arguments (line 594)
    kwargs_580641 = {}
    # Getting the type of 'a' (line 594)
    a_580638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 8), 'a', False)
    # Obtaining the member 'astype' of a type (line 594)
    astype_580639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 8), a_580638, 'astype')
    # Calling astype(args, kwargs) (line 594)
    astype_call_result_580642 = invoke(stypy.reporting.localization.Localization(__file__, 594, 8), astype_580639, *[float_580640], **kwargs_580641)
    
    # Obtaining the member 'ravel' of a type (line 594)
    ravel_580643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 8), astype_call_result_580642, 'ravel')
    # Calling ravel(args, kwargs) (line 594)
    ravel_call_result_580645 = invoke(stypy.reporting.localization.Localization(__file__, 594, 8), ravel_580643, *[], **kwargs_580644)
    
    # Assigning a type to the variable 'a' (line 594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 4), 'a', ravel_call_result_580645)
    
    # Type idiom detected: calculating its left and rigth part (line 595)
    # Getting the type of 'limits' (line 595)
    limits_580646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 7), 'limits')
    # Getting the type of 'None' (line 595)
    None_580647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 17), 'None')
    
    (may_be_580648, more_types_in_union_580649) = may_be_none(limits_580646, None_580647)

    if may_be_580648:

        if more_types_in_union_580649:
            # Runtime conditional SSA (line 595)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 596):
        
        # Assigning a Call to a Name (line 596):
        
        # Call to len(...): (line 596)
        # Processing the call arguments (line 596)
        # Getting the type of 'a' (line 596)
        a_580651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 16), 'a', False)
        # Processing the call keyword arguments (line 596)
        kwargs_580652 = {}
        # Getting the type of 'len' (line 596)
        len_580650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 12), 'len', False)
        # Calling len(args, kwargs) (line 596)
        len_call_result_580653 = invoke(stypy.reporting.localization.Localization(__file__, 596, 12), len_580650, *[a_580651], **kwargs_580652)
        
        # Assigning a type to the variable 'n' (line 596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 8), 'n', len_call_result_580653)
        
        # Call to var(...): (line 597)
        # Processing the call keyword arguments (line 597)
        kwargs_580656 = {}
        # Getting the type of 'a' (line 597)
        a_580654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 15), 'a', False)
        # Obtaining the member 'var' of a type (line 597)
        var_580655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 15), a_580654, 'var')
        # Calling var(args, kwargs) (line 597)
        var_call_result_580657 = invoke(stypy.reporting.localization.Localization(__file__, 597, 15), var_580655, *[], **kwargs_580656)
        
        # Getting the type of 'n' (line 597)
        n_580658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 25), 'n')
        # Applying the binary operator '*' (line 597)
        result_mul_580659 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 15), '*', var_call_result_580657, n_580658)
        
        # Getting the type of 'n' (line 597)
        n_580660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 30), 'n')
        float_580661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 34), 'float')
        # Applying the binary operator '-' (line 597)
        result_sub_580662 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 30), '-', n_580660, float_580661)
        
        # Applying the binary operator 'div' (line 597)
        result_div_580663 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 27), 'div', result_mul_580659, result_sub_580662)
        
        # Assigning a type to the variable 'stypy_return_type' (line 597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'stypy_return_type', result_div_580663)

        if more_types_in_union_580649:
            # SSA join for if statement (line 595)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 598):
    
    # Assigning a Call to a Name (line 598):
    
    # Call to _mask_to_limits(...): (line 598)
    # Processing the call arguments (line 598)
    # Getting the type of 'a' (line 598)
    a_580665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 25), 'a', False)
    # Getting the type of 'limits' (line 598)
    limits_580666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 28), 'limits', False)
    # Getting the type of 'inclusive' (line 598)
    inclusive_580667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 36), 'inclusive', False)
    # Processing the call keyword arguments (line 598)
    kwargs_580668 = {}
    # Getting the type of '_mask_to_limits' (line 598)
    _mask_to_limits_580664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 9), '_mask_to_limits', False)
    # Calling _mask_to_limits(args, kwargs) (line 598)
    _mask_to_limits_call_result_580669 = invoke(stypy.reporting.localization.Localization(__file__, 598, 9), _mask_to_limits_580664, *[a_580665, limits_580666, inclusive_580667], **kwargs_580668)
    
    # Assigning a type to the variable 'am' (line 598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 4), 'am', _mask_to_limits_call_result_580669)
    
    # Call to var(...): (line 599)
    # Processing the call arguments (line 599)
    # Getting the type of 'am' (line 599)
    am_580673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 21), 'am', False)
    # Processing the call keyword arguments (line 599)
    # Getting the type of 'ddof' (line 599)
    ddof_580674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 30), 'ddof', False)
    keyword_580675 = ddof_580674
    # Getting the type of 'axis' (line 599)
    axis_580676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 41), 'axis', False)
    keyword_580677 = axis_580676
    kwargs_580678 = {'axis': keyword_580677, 'ddof': keyword_580675}
    # Getting the type of 'np' (line 599)
    np_580670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 11), 'np', False)
    # Obtaining the member 'ma' of a type (line 599)
    ma_580671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 11), np_580670, 'ma')
    # Obtaining the member 'var' of a type (line 599)
    var_580672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 11), ma_580671, 'var')
    # Calling var(args, kwargs) (line 599)
    var_call_result_580679 = invoke(stypy.reporting.localization.Localization(__file__, 599, 11), var_580672, *[am_580673], **kwargs_580678)
    
    # Assigning a type to the variable 'stypy_return_type' (line 599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 4), 'stypy_return_type', var_call_result_580679)
    
    # ################# End of 'tvar(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tvar' in the type store
    # Getting the type of 'stypy_return_type' (line 547)
    stypy_return_type_580680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580680)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tvar'
    return stypy_return_type_580680

# Assigning a type to the variable 'tvar' (line 547)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 0), 'tvar', tvar)

@norecursion
def tmin(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 602)
    None_580681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 23), 'None')
    int_580682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 34), 'int')
    # Getting the type of 'True' (line 602)
    True_580683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 47), 'True')
    str_580684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 64), 'str', 'propagate')
    defaults = [None_580681, int_580682, True_580683, str_580684]
    # Create a new context for function 'tmin'
    module_type_store = module_type_store.open_function_context('tmin', 602, 0, False)
    
    # Passed parameters checking function
    tmin.stypy_localization = localization
    tmin.stypy_type_of_self = None
    tmin.stypy_type_store = module_type_store
    tmin.stypy_function_name = 'tmin'
    tmin.stypy_param_names_list = ['a', 'lowerlimit', 'axis', 'inclusive', 'nan_policy']
    tmin.stypy_varargs_param_name = None
    tmin.stypy_kwargs_param_name = None
    tmin.stypy_call_defaults = defaults
    tmin.stypy_call_varargs = varargs
    tmin.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tmin', ['a', 'lowerlimit', 'axis', 'inclusive', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tmin', localization, ['a', 'lowerlimit', 'axis', 'inclusive', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tmin(...)' code ##################

    str_580685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 646, (-1)), 'str', "\n    Compute the trimmed minimum.\n\n    This function finds the miminum value of an array `a` along the\n    specified axis, but only considering values greater than a specified\n    lower limit.\n\n    Parameters\n    ----------\n    a : array_like\n        array of values\n    lowerlimit : None or float, optional\n        Values in the input array less than the given limit will be ignored.\n        When lowerlimit is None, then all values are used. The default value\n        is None.\n    axis : int or None, optional\n        Axis along which to operate. Default is 0. If None, compute over the\n        whole array `a`.\n    inclusive : {True, False}, optional\n        This flag determines whether values exactly equal to the lower limit\n        are included.  The default value is True.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    tmin : float, int or ndarray\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> x = np.arange(20)\n    >>> stats.tmin(x)\n    0\n\n    >>> stats.tmin(x, 13)\n    13\n\n    >>> stats.tmin(x, 13, inclusive=False)\n    14\n\n    ")
    
    # Assigning a Call to a Tuple (line 647):
    
    # Assigning a Subscript to a Name (line 647):
    
    # Obtaining the type of the subscript
    int_580686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 4), 'int')
    
    # Call to _chk_asarray(...): (line 647)
    # Processing the call arguments (line 647)
    # Getting the type of 'a' (line 647)
    a_580688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 27), 'a', False)
    # Getting the type of 'axis' (line 647)
    axis_580689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 30), 'axis', False)
    # Processing the call keyword arguments (line 647)
    kwargs_580690 = {}
    # Getting the type of '_chk_asarray' (line 647)
    _chk_asarray_580687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 647)
    _chk_asarray_call_result_580691 = invoke(stypy.reporting.localization.Localization(__file__, 647, 14), _chk_asarray_580687, *[a_580688, axis_580689], **kwargs_580690)
    
    # Obtaining the member '__getitem__' of a type (line 647)
    getitem___580692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 4), _chk_asarray_call_result_580691, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 647)
    subscript_call_result_580693 = invoke(stypy.reporting.localization.Localization(__file__, 647, 4), getitem___580692, int_580686)
    
    # Assigning a type to the variable 'tuple_var_assignment_579853' (line 647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 4), 'tuple_var_assignment_579853', subscript_call_result_580693)
    
    # Assigning a Subscript to a Name (line 647):
    
    # Obtaining the type of the subscript
    int_580694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 4), 'int')
    
    # Call to _chk_asarray(...): (line 647)
    # Processing the call arguments (line 647)
    # Getting the type of 'a' (line 647)
    a_580696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 27), 'a', False)
    # Getting the type of 'axis' (line 647)
    axis_580697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 30), 'axis', False)
    # Processing the call keyword arguments (line 647)
    kwargs_580698 = {}
    # Getting the type of '_chk_asarray' (line 647)
    _chk_asarray_580695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 647)
    _chk_asarray_call_result_580699 = invoke(stypy.reporting.localization.Localization(__file__, 647, 14), _chk_asarray_580695, *[a_580696, axis_580697], **kwargs_580698)
    
    # Obtaining the member '__getitem__' of a type (line 647)
    getitem___580700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 4), _chk_asarray_call_result_580699, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 647)
    subscript_call_result_580701 = invoke(stypy.reporting.localization.Localization(__file__, 647, 4), getitem___580700, int_580694)
    
    # Assigning a type to the variable 'tuple_var_assignment_579854' (line 647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 4), 'tuple_var_assignment_579854', subscript_call_result_580701)
    
    # Assigning a Name to a Name (line 647):
    # Getting the type of 'tuple_var_assignment_579853' (line 647)
    tuple_var_assignment_579853_580702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 4), 'tuple_var_assignment_579853')
    # Assigning a type to the variable 'a' (line 647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 4), 'a', tuple_var_assignment_579853_580702)
    
    # Assigning a Name to a Name (line 647):
    # Getting the type of 'tuple_var_assignment_579854' (line 647)
    tuple_var_assignment_579854_580703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 4), 'tuple_var_assignment_579854')
    # Assigning a type to the variable 'axis' (line 647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 7), 'axis', tuple_var_assignment_579854_580703)
    
    # Assigning a Call to a Name (line 648):
    
    # Assigning a Call to a Name (line 648):
    
    # Call to _mask_to_limits(...): (line 648)
    # Processing the call arguments (line 648)
    # Getting the type of 'a' (line 648)
    a_580705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 25), 'a', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 648)
    tuple_580706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 648)
    # Adding element type (line 648)
    # Getting the type of 'lowerlimit' (line 648)
    lowerlimit_580707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 29), 'lowerlimit', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 648, 29), tuple_580706, lowerlimit_580707)
    # Adding element type (line 648)
    # Getting the type of 'None' (line 648)
    None_580708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 41), 'None', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 648, 29), tuple_580706, None_580708)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 648)
    tuple_580709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 49), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 648)
    # Adding element type (line 648)
    # Getting the type of 'inclusive' (line 648)
    inclusive_580710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 49), 'inclusive', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 648, 49), tuple_580709, inclusive_580710)
    # Adding element type (line 648)
    # Getting the type of 'False' (line 648)
    False_580711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 60), 'False', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 648, 49), tuple_580709, False_580711)
    
    # Processing the call keyword arguments (line 648)
    kwargs_580712 = {}
    # Getting the type of '_mask_to_limits' (line 648)
    _mask_to_limits_580704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 9), '_mask_to_limits', False)
    # Calling _mask_to_limits(args, kwargs) (line 648)
    _mask_to_limits_call_result_580713 = invoke(stypy.reporting.localization.Localization(__file__, 648, 9), _mask_to_limits_580704, *[a_580705, tuple_580706, tuple_580709], **kwargs_580712)
    
    # Assigning a type to the variable 'am' (line 648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 4), 'am', _mask_to_limits_call_result_580713)
    
    # Assigning a Call to a Tuple (line 650):
    
    # Assigning a Subscript to a Name (line 650):
    
    # Obtaining the type of the subscript
    int_580714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 4), 'int')
    
    # Call to _contains_nan(...): (line 650)
    # Processing the call arguments (line 650)
    # Getting the type of 'am' (line 650)
    am_580716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 45), 'am', False)
    # Getting the type of 'nan_policy' (line 650)
    nan_policy_580717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 49), 'nan_policy', False)
    # Processing the call keyword arguments (line 650)
    kwargs_580718 = {}
    # Getting the type of '_contains_nan' (line 650)
    _contains_nan_580715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 650)
    _contains_nan_call_result_580719 = invoke(stypy.reporting.localization.Localization(__file__, 650, 31), _contains_nan_580715, *[am_580716, nan_policy_580717], **kwargs_580718)
    
    # Obtaining the member '__getitem__' of a type (line 650)
    getitem___580720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 4), _contains_nan_call_result_580719, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 650)
    subscript_call_result_580721 = invoke(stypy.reporting.localization.Localization(__file__, 650, 4), getitem___580720, int_580714)
    
    # Assigning a type to the variable 'tuple_var_assignment_579855' (line 650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 4), 'tuple_var_assignment_579855', subscript_call_result_580721)
    
    # Assigning a Subscript to a Name (line 650):
    
    # Obtaining the type of the subscript
    int_580722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 4), 'int')
    
    # Call to _contains_nan(...): (line 650)
    # Processing the call arguments (line 650)
    # Getting the type of 'am' (line 650)
    am_580724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 45), 'am', False)
    # Getting the type of 'nan_policy' (line 650)
    nan_policy_580725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 49), 'nan_policy', False)
    # Processing the call keyword arguments (line 650)
    kwargs_580726 = {}
    # Getting the type of '_contains_nan' (line 650)
    _contains_nan_580723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 650)
    _contains_nan_call_result_580727 = invoke(stypy.reporting.localization.Localization(__file__, 650, 31), _contains_nan_580723, *[am_580724, nan_policy_580725], **kwargs_580726)
    
    # Obtaining the member '__getitem__' of a type (line 650)
    getitem___580728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 4), _contains_nan_call_result_580727, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 650)
    subscript_call_result_580729 = invoke(stypy.reporting.localization.Localization(__file__, 650, 4), getitem___580728, int_580722)
    
    # Assigning a type to the variable 'tuple_var_assignment_579856' (line 650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 4), 'tuple_var_assignment_579856', subscript_call_result_580729)
    
    # Assigning a Name to a Name (line 650):
    # Getting the type of 'tuple_var_assignment_579855' (line 650)
    tuple_var_assignment_579855_580730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 4), 'tuple_var_assignment_579855')
    # Assigning a type to the variable 'contains_nan' (line 650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 4), 'contains_nan', tuple_var_assignment_579855_580730)
    
    # Assigning a Name to a Name (line 650):
    # Getting the type of 'tuple_var_assignment_579856' (line 650)
    tuple_var_assignment_579856_580731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 4), 'tuple_var_assignment_579856')
    # Assigning a type to the variable 'nan_policy' (line 650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 18), 'nan_policy', tuple_var_assignment_579856_580731)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 652)
    contains_nan_580732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 652)
    nan_policy_580733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 24), 'nan_policy')
    str_580734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 652)
    result_eq_580735 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 24), '==', nan_policy_580733, str_580734)
    
    # Applying the binary operator 'and' (line 652)
    result_and_keyword_580736 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 7), 'and', contains_nan_580732, result_eq_580735)
    
    # Testing the type of an if condition (line 652)
    if_condition_580737 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 652, 4), result_and_keyword_580736)
    # Assigning a type to the variable 'if_condition_580737' (line 652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 4), 'if_condition_580737', if_condition_580737)
    # SSA begins for if statement (line 652)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 653):
    
    # Assigning a Call to a Name (line 653):
    
    # Call to masked_invalid(...): (line 653)
    # Processing the call arguments (line 653)
    # Getting the type of 'am' (line 653)
    am_580740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 31), 'am', False)
    # Processing the call keyword arguments (line 653)
    kwargs_580741 = {}
    # Getting the type of 'ma' (line 653)
    ma_580738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 13), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 653)
    masked_invalid_580739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 13), ma_580738, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 653)
    masked_invalid_call_result_580742 = invoke(stypy.reporting.localization.Localization(__file__, 653, 13), masked_invalid_580739, *[am_580740], **kwargs_580741)
    
    # Assigning a type to the variable 'am' (line 653)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 653, 8), 'am', masked_invalid_call_result_580742)
    # SSA join for if statement (line 652)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 655):
    
    # Assigning a Attribute to a Name (line 655):
    
    # Call to reduce(...): (line 655)
    # Processing the call arguments (line 655)
    # Getting the type of 'am' (line 655)
    am_580746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 28), 'am', False)
    # Getting the type of 'axis' (line 655)
    axis_580747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 32), 'axis', False)
    # Processing the call keyword arguments (line 655)
    kwargs_580748 = {}
    # Getting the type of 'ma' (line 655)
    ma_580743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 10), 'ma', False)
    # Obtaining the member 'minimum' of a type (line 655)
    minimum_580744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 10), ma_580743, 'minimum')
    # Obtaining the member 'reduce' of a type (line 655)
    reduce_580745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 10), minimum_580744, 'reduce')
    # Calling reduce(args, kwargs) (line 655)
    reduce_call_result_580749 = invoke(stypy.reporting.localization.Localization(__file__, 655, 10), reduce_580745, *[am_580746, axis_580747], **kwargs_580748)
    
    # Obtaining the member 'data' of a type (line 655)
    data_580750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 10), reduce_call_result_580749, 'data')
    # Assigning a type to the variable 'res' (line 655)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 4), 'res', data_580750)
    
    
    # Getting the type of 'res' (line 656)
    res_580751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 7), 'res')
    # Obtaining the member 'ndim' of a type (line 656)
    ndim_580752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 7), res_580751, 'ndim')
    int_580753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 19), 'int')
    # Applying the binary operator '==' (line 656)
    result_eq_580754 = python_operator(stypy.reporting.localization.Localization(__file__, 656, 7), '==', ndim_580752, int_580753)
    
    # Testing the type of an if condition (line 656)
    if_condition_580755 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 656, 4), result_eq_580754)
    # Assigning a type to the variable 'if_condition_580755' (line 656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 4), 'if_condition_580755', if_condition_580755)
    # SSA begins for if statement (line 656)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 657)
    tuple_580756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 657)
    
    # Getting the type of 'res' (line 657)
    res_580757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 15), 'res')
    # Obtaining the member '__getitem__' of a type (line 657)
    getitem___580758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 15), res_580757, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 657)
    subscript_call_result_580759 = invoke(stypy.reporting.localization.Localization(__file__, 657, 15), getitem___580758, tuple_580756)
    
    # Assigning a type to the variable 'stypy_return_type' (line 657)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 8), 'stypy_return_type', subscript_call_result_580759)
    # SSA join for if statement (line 656)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'res' (line 658)
    res_580760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 658)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 4), 'stypy_return_type', res_580760)
    
    # ################# End of 'tmin(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tmin' in the type store
    # Getting the type of 'stypy_return_type' (line 602)
    stypy_return_type_580761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580761)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tmin'
    return stypy_return_type_580761

# Assigning a type to the variable 'tmin' (line 602)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 0), 'tmin', tmin)

@norecursion
def tmax(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 661)
    None_580762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 23), 'None')
    int_580763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, 34), 'int')
    # Getting the type of 'True' (line 661)
    True_580764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 47), 'True')
    str_580765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, 64), 'str', 'propagate')
    defaults = [None_580762, int_580763, True_580764, str_580765]
    # Create a new context for function 'tmax'
    module_type_store = module_type_store.open_function_context('tmax', 661, 0, False)
    
    # Passed parameters checking function
    tmax.stypy_localization = localization
    tmax.stypy_type_of_self = None
    tmax.stypy_type_store = module_type_store
    tmax.stypy_function_name = 'tmax'
    tmax.stypy_param_names_list = ['a', 'upperlimit', 'axis', 'inclusive', 'nan_policy']
    tmax.stypy_varargs_param_name = None
    tmax.stypy_kwargs_param_name = None
    tmax.stypy_call_defaults = defaults
    tmax.stypy_call_varargs = varargs
    tmax.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tmax', ['a', 'upperlimit', 'axis', 'inclusive', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tmax', localization, ['a', 'upperlimit', 'axis', 'inclusive', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tmax(...)' code ##################

    str_580766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, (-1)), 'str', "\n    Compute the trimmed maximum.\n\n    This function computes the maximum value of an array along a given axis,\n    while ignoring values larger than a specified upper limit.\n\n    Parameters\n    ----------\n    a : array_like\n        array of values\n    upperlimit : None or float, optional\n        Values in the input array greater than the given limit will be ignored.\n        When upperlimit is None, then all values are used. The default value\n        is None.\n    axis : int or None, optional\n        Axis along which to operate. Default is 0. If None, compute over the\n        whole array `a`.\n    inclusive : {True, False}, optional\n        This flag determines whether values exactly equal to the upper limit\n        are included.  The default value is True.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    tmax : float, int or ndarray\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> x = np.arange(20)\n    >>> stats.tmax(x)\n    19\n\n    >>> stats.tmax(x, 13)\n    13\n\n    >>> stats.tmax(x, 13, inclusive=False)\n    12\n\n    ")
    
    # Assigning a Call to a Tuple (line 705):
    
    # Assigning a Subscript to a Name (line 705):
    
    # Obtaining the type of the subscript
    int_580767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 4), 'int')
    
    # Call to _chk_asarray(...): (line 705)
    # Processing the call arguments (line 705)
    # Getting the type of 'a' (line 705)
    a_580769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 27), 'a', False)
    # Getting the type of 'axis' (line 705)
    axis_580770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 30), 'axis', False)
    # Processing the call keyword arguments (line 705)
    kwargs_580771 = {}
    # Getting the type of '_chk_asarray' (line 705)
    _chk_asarray_580768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 705)
    _chk_asarray_call_result_580772 = invoke(stypy.reporting.localization.Localization(__file__, 705, 14), _chk_asarray_580768, *[a_580769, axis_580770], **kwargs_580771)
    
    # Obtaining the member '__getitem__' of a type (line 705)
    getitem___580773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 4), _chk_asarray_call_result_580772, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 705)
    subscript_call_result_580774 = invoke(stypy.reporting.localization.Localization(__file__, 705, 4), getitem___580773, int_580767)
    
    # Assigning a type to the variable 'tuple_var_assignment_579857' (line 705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'tuple_var_assignment_579857', subscript_call_result_580774)
    
    # Assigning a Subscript to a Name (line 705):
    
    # Obtaining the type of the subscript
    int_580775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 4), 'int')
    
    # Call to _chk_asarray(...): (line 705)
    # Processing the call arguments (line 705)
    # Getting the type of 'a' (line 705)
    a_580777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 27), 'a', False)
    # Getting the type of 'axis' (line 705)
    axis_580778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 30), 'axis', False)
    # Processing the call keyword arguments (line 705)
    kwargs_580779 = {}
    # Getting the type of '_chk_asarray' (line 705)
    _chk_asarray_580776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 705)
    _chk_asarray_call_result_580780 = invoke(stypy.reporting.localization.Localization(__file__, 705, 14), _chk_asarray_580776, *[a_580777, axis_580778], **kwargs_580779)
    
    # Obtaining the member '__getitem__' of a type (line 705)
    getitem___580781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 4), _chk_asarray_call_result_580780, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 705)
    subscript_call_result_580782 = invoke(stypy.reporting.localization.Localization(__file__, 705, 4), getitem___580781, int_580775)
    
    # Assigning a type to the variable 'tuple_var_assignment_579858' (line 705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'tuple_var_assignment_579858', subscript_call_result_580782)
    
    # Assigning a Name to a Name (line 705):
    # Getting the type of 'tuple_var_assignment_579857' (line 705)
    tuple_var_assignment_579857_580783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'tuple_var_assignment_579857')
    # Assigning a type to the variable 'a' (line 705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'a', tuple_var_assignment_579857_580783)
    
    # Assigning a Name to a Name (line 705):
    # Getting the type of 'tuple_var_assignment_579858' (line 705)
    tuple_var_assignment_579858_580784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'tuple_var_assignment_579858')
    # Assigning a type to the variable 'axis' (line 705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 7), 'axis', tuple_var_assignment_579858_580784)
    
    # Assigning a Call to a Name (line 706):
    
    # Assigning a Call to a Name (line 706):
    
    # Call to _mask_to_limits(...): (line 706)
    # Processing the call arguments (line 706)
    # Getting the type of 'a' (line 706)
    a_580786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 25), 'a', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 706)
    tuple_580787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 706)
    # Adding element type (line 706)
    # Getting the type of 'None' (line 706)
    None_580788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 29), 'None', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 706, 29), tuple_580787, None_580788)
    # Adding element type (line 706)
    # Getting the type of 'upperlimit' (line 706)
    upperlimit_580789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 35), 'upperlimit', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 706, 29), tuple_580787, upperlimit_580789)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 706)
    tuple_580790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 49), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 706)
    # Adding element type (line 706)
    # Getting the type of 'False' (line 706)
    False_580791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 49), 'False', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 706, 49), tuple_580790, False_580791)
    # Adding element type (line 706)
    # Getting the type of 'inclusive' (line 706)
    inclusive_580792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 56), 'inclusive', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 706, 49), tuple_580790, inclusive_580792)
    
    # Processing the call keyword arguments (line 706)
    kwargs_580793 = {}
    # Getting the type of '_mask_to_limits' (line 706)
    _mask_to_limits_580785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 9), '_mask_to_limits', False)
    # Calling _mask_to_limits(args, kwargs) (line 706)
    _mask_to_limits_call_result_580794 = invoke(stypy.reporting.localization.Localization(__file__, 706, 9), _mask_to_limits_580785, *[a_580786, tuple_580787, tuple_580790], **kwargs_580793)
    
    # Assigning a type to the variable 'am' (line 706)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 4), 'am', _mask_to_limits_call_result_580794)
    
    # Assigning a Call to a Tuple (line 708):
    
    # Assigning a Subscript to a Name (line 708):
    
    # Obtaining the type of the subscript
    int_580795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 4), 'int')
    
    # Call to _contains_nan(...): (line 708)
    # Processing the call arguments (line 708)
    # Getting the type of 'am' (line 708)
    am_580797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 45), 'am', False)
    # Getting the type of 'nan_policy' (line 708)
    nan_policy_580798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 49), 'nan_policy', False)
    # Processing the call keyword arguments (line 708)
    kwargs_580799 = {}
    # Getting the type of '_contains_nan' (line 708)
    _contains_nan_580796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 708)
    _contains_nan_call_result_580800 = invoke(stypy.reporting.localization.Localization(__file__, 708, 31), _contains_nan_580796, *[am_580797, nan_policy_580798], **kwargs_580799)
    
    # Obtaining the member '__getitem__' of a type (line 708)
    getitem___580801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 4), _contains_nan_call_result_580800, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 708)
    subscript_call_result_580802 = invoke(stypy.reporting.localization.Localization(__file__, 708, 4), getitem___580801, int_580795)
    
    # Assigning a type to the variable 'tuple_var_assignment_579859' (line 708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 4), 'tuple_var_assignment_579859', subscript_call_result_580802)
    
    # Assigning a Subscript to a Name (line 708):
    
    # Obtaining the type of the subscript
    int_580803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 4), 'int')
    
    # Call to _contains_nan(...): (line 708)
    # Processing the call arguments (line 708)
    # Getting the type of 'am' (line 708)
    am_580805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 45), 'am', False)
    # Getting the type of 'nan_policy' (line 708)
    nan_policy_580806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 49), 'nan_policy', False)
    # Processing the call keyword arguments (line 708)
    kwargs_580807 = {}
    # Getting the type of '_contains_nan' (line 708)
    _contains_nan_580804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 708)
    _contains_nan_call_result_580808 = invoke(stypy.reporting.localization.Localization(__file__, 708, 31), _contains_nan_580804, *[am_580805, nan_policy_580806], **kwargs_580807)
    
    # Obtaining the member '__getitem__' of a type (line 708)
    getitem___580809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 4), _contains_nan_call_result_580808, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 708)
    subscript_call_result_580810 = invoke(stypy.reporting.localization.Localization(__file__, 708, 4), getitem___580809, int_580803)
    
    # Assigning a type to the variable 'tuple_var_assignment_579860' (line 708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 4), 'tuple_var_assignment_579860', subscript_call_result_580810)
    
    # Assigning a Name to a Name (line 708):
    # Getting the type of 'tuple_var_assignment_579859' (line 708)
    tuple_var_assignment_579859_580811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 4), 'tuple_var_assignment_579859')
    # Assigning a type to the variable 'contains_nan' (line 708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 4), 'contains_nan', tuple_var_assignment_579859_580811)
    
    # Assigning a Name to a Name (line 708):
    # Getting the type of 'tuple_var_assignment_579860' (line 708)
    tuple_var_assignment_579860_580812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 4), 'tuple_var_assignment_579860')
    # Assigning a type to the variable 'nan_policy' (line 708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 18), 'nan_policy', tuple_var_assignment_579860_580812)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 710)
    contains_nan_580813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 710)
    nan_policy_580814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 24), 'nan_policy')
    str_580815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 710)
    result_eq_580816 = python_operator(stypy.reporting.localization.Localization(__file__, 710, 24), '==', nan_policy_580814, str_580815)
    
    # Applying the binary operator 'and' (line 710)
    result_and_keyword_580817 = python_operator(stypy.reporting.localization.Localization(__file__, 710, 7), 'and', contains_nan_580813, result_eq_580816)
    
    # Testing the type of an if condition (line 710)
    if_condition_580818 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 710, 4), result_and_keyword_580817)
    # Assigning a type to the variable 'if_condition_580818' (line 710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 4), 'if_condition_580818', if_condition_580818)
    # SSA begins for if statement (line 710)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 711):
    
    # Assigning a Call to a Name (line 711):
    
    # Call to masked_invalid(...): (line 711)
    # Processing the call arguments (line 711)
    # Getting the type of 'am' (line 711)
    am_580821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 31), 'am', False)
    # Processing the call keyword arguments (line 711)
    kwargs_580822 = {}
    # Getting the type of 'ma' (line 711)
    ma_580819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 13), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 711)
    masked_invalid_580820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 13), ma_580819, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 711)
    masked_invalid_call_result_580823 = invoke(stypy.reporting.localization.Localization(__file__, 711, 13), masked_invalid_580820, *[am_580821], **kwargs_580822)
    
    # Assigning a type to the variable 'am' (line 711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'am', masked_invalid_call_result_580823)
    # SSA join for if statement (line 710)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 713):
    
    # Assigning a Attribute to a Name (line 713):
    
    # Call to reduce(...): (line 713)
    # Processing the call arguments (line 713)
    # Getting the type of 'am' (line 713)
    am_580827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 28), 'am', False)
    # Getting the type of 'axis' (line 713)
    axis_580828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 32), 'axis', False)
    # Processing the call keyword arguments (line 713)
    kwargs_580829 = {}
    # Getting the type of 'ma' (line 713)
    ma_580824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 10), 'ma', False)
    # Obtaining the member 'maximum' of a type (line 713)
    maximum_580825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 10), ma_580824, 'maximum')
    # Obtaining the member 'reduce' of a type (line 713)
    reduce_580826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 10), maximum_580825, 'reduce')
    # Calling reduce(args, kwargs) (line 713)
    reduce_call_result_580830 = invoke(stypy.reporting.localization.Localization(__file__, 713, 10), reduce_580826, *[am_580827, axis_580828], **kwargs_580829)
    
    # Obtaining the member 'data' of a type (line 713)
    data_580831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 10), reduce_call_result_580830, 'data')
    # Assigning a type to the variable 'res' (line 713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 4), 'res', data_580831)
    
    
    # Getting the type of 'res' (line 714)
    res_580832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 7), 'res')
    # Obtaining the member 'ndim' of a type (line 714)
    ndim_580833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 7), res_580832, 'ndim')
    int_580834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 19), 'int')
    # Applying the binary operator '==' (line 714)
    result_eq_580835 = python_operator(stypy.reporting.localization.Localization(__file__, 714, 7), '==', ndim_580833, int_580834)
    
    # Testing the type of an if condition (line 714)
    if_condition_580836 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 714, 4), result_eq_580835)
    # Assigning a type to the variable 'if_condition_580836' (line 714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 4), 'if_condition_580836', if_condition_580836)
    # SSA begins for if statement (line 714)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 715)
    tuple_580837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 715)
    
    # Getting the type of 'res' (line 715)
    res_580838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 15), 'res')
    # Obtaining the member '__getitem__' of a type (line 715)
    getitem___580839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 15), res_580838, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 715)
    subscript_call_result_580840 = invoke(stypy.reporting.localization.Localization(__file__, 715, 15), getitem___580839, tuple_580837)
    
    # Assigning a type to the variable 'stypy_return_type' (line 715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 8), 'stypy_return_type', subscript_call_result_580840)
    # SSA join for if statement (line 714)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'res' (line 716)
    res_580841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 4), 'stypy_return_type', res_580841)
    
    # ################# End of 'tmax(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tmax' in the type store
    # Getting the type of 'stypy_return_type' (line 661)
    stypy_return_type_580842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580842)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tmax'
    return stypy_return_type_580842

# Assigning a type to the variable 'tmax' (line 661)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 0), 'tmax', tmax)

@norecursion
def tstd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 719)
    None_580843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 19), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 719)
    tuple_580844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 719)
    # Adding element type (line 719)
    # Getting the type of 'True' (line 719)
    True_580845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 36), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 719, 36), tuple_580844, True_580845)
    # Adding element type (line 719)
    # Getting the type of 'True' (line 719)
    True_580846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 42), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 719, 36), tuple_580844, True_580846)
    
    int_580847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 54), 'int')
    int_580848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 62), 'int')
    defaults = [None_580843, tuple_580844, int_580847, int_580848]
    # Create a new context for function 'tstd'
    module_type_store = module_type_store.open_function_context('tstd', 719, 0, False)
    
    # Passed parameters checking function
    tstd.stypy_localization = localization
    tstd.stypy_type_of_self = None
    tstd.stypy_type_store = module_type_store
    tstd.stypy_function_name = 'tstd'
    tstd.stypy_param_names_list = ['a', 'limits', 'inclusive', 'axis', 'ddof']
    tstd.stypy_varargs_param_name = None
    tstd.stypy_kwargs_param_name = None
    tstd.stypy_call_defaults = defaults
    tstd.stypy_call_varargs = varargs
    tstd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tstd', ['a', 'limits', 'inclusive', 'axis', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tstd', localization, ['a', 'limits', 'inclusive', 'axis', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tstd(...)' code ##################

    str_580849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, (-1)), 'str', '\n    Compute the trimmed sample standard deviation.\n\n    This function finds the sample standard deviation of given values,\n    ignoring values outside the given `limits`.\n\n    Parameters\n    ----------\n    a : array_like\n        array of values\n    limits : None or (lower limit, upper limit), optional\n        Values in the input array less than the lower limit or greater than the\n        upper limit will be ignored. When limits is None, then all values are\n        used. Either of the limit values in the tuple can also be None\n        representing a half-open interval.  The default value is None.\n    inclusive : (bool, bool), optional\n        A tuple consisting of the (lower flag, upper flag).  These flags\n        determine whether values exactly equal to the lower or upper limits\n        are included.  The default value is (True, True).\n    axis : int or None, optional\n        Axis along which to operate. Default is 0. If None, compute over the\n        whole array `a`.\n    ddof : int, optional\n        Delta degrees of freedom.  Default is 1.\n\n    Returns\n    -------\n    tstd : float\n\n    Notes\n    -----\n    `tstd` computes the unbiased sample standard deviation, i.e. it uses a\n    correction factor ``n / (n - 1)``.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> x = np.arange(20)\n    >>> stats.tstd(x)\n    5.9160797830996161\n    >>> stats.tstd(x, (3,17))\n    4.4721359549995796\n\n    ')
    
    # Call to sqrt(...): (line 764)
    # Processing the call arguments (line 764)
    
    # Call to tvar(...): (line 764)
    # Processing the call arguments (line 764)
    # Getting the type of 'a' (line 764)
    a_580853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 24), 'a', False)
    # Getting the type of 'limits' (line 764)
    limits_580854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 27), 'limits', False)
    # Getting the type of 'inclusive' (line 764)
    inclusive_580855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 35), 'inclusive', False)
    # Getting the type of 'axis' (line 764)
    axis_580856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 46), 'axis', False)
    # Getting the type of 'ddof' (line 764)
    ddof_580857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 52), 'ddof', False)
    # Processing the call keyword arguments (line 764)
    kwargs_580858 = {}
    # Getting the type of 'tvar' (line 764)
    tvar_580852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 19), 'tvar', False)
    # Calling tvar(args, kwargs) (line 764)
    tvar_call_result_580859 = invoke(stypy.reporting.localization.Localization(__file__, 764, 19), tvar_580852, *[a_580853, limits_580854, inclusive_580855, axis_580856, ddof_580857], **kwargs_580858)
    
    # Processing the call keyword arguments (line 764)
    kwargs_580860 = {}
    # Getting the type of 'np' (line 764)
    np_580850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 11), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 764)
    sqrt_580851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 11), np_580850, 'sqrt')
    # Calling sqrt(args, kwargs) (line 764)
    sqrt_call_result_580861 = invoke(stypy.reporting.localization.Localization(__file__, 764, 11), sqrt_580851, *[tvar_call_result_580859], **kwargs_580860)
    
    # Assigning a type to the variable 'stypy_return_type' (line 764)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 4), 'stypy_return_type', sqrt_call_result_580861)
    
    # ################# End of 'tstd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tstd' in the type store
    # Getting the type of 'stypy_return_type' (line 719)
    stypy_return_type_580862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580862)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tstd'
    return stypy_return_type_580862

# Assigning a type to the variable 'tstd' (line 719)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 0), 'tstd', tstd)

@norecursion
def tsem(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 767)
    None_580863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 19), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 767)
    tuple_580864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 767)
    # Adding element type (line 767)
    # Getting the type of 'True' (line 767)
    True_580865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 36), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 767, 36), tuple_580864, True_580865)
    # Adding element type (line 767)
    # Getting the type of 'True' (line 767)
    True_580866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 42), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 767, 36), tuple_580864, True_580866)
    
    int_580867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 54), 'int')
    int_580868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 62), 'int')
    defaults = [None_580863, tuple_580864, int_580867, int_580868]
    # Create a new context for function 'tsem'
    module_type_store = module_type_store.open_function_context('tsem', 767, 0, False)
    
    # Passed parameters checking function
    tsem.stypy_localization = localization
    tsem.stypy_type_of_self = None
    tsem.stypy_type_store = module_type_store
    tsem.stypy_function_name = 'tsem'
    tsem.stypy_param_names_list = ['a', 'limits', 'inclusive', 'axis', 'ddof']
    tsem.stypy_varargs_param_name = None
    tsem.stypy_kwargs_param_name = None
    tsem.stypy_call_defaults = defaults
    tsem.stypy_call_varargs = varargs
    tsem.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tsem', ['a', 'limits', 'inclusive', 'axis', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tsem', localization, ['a', 'limits', 'inclusive', 'axis', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tsem(...)' code ##################

    str_580869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, (-1)), 'str', '\n    Compute the trimmed standard error of the mean.\n\n    This function finds the standard error of the mean for given\n    values, ignoring values outside the given `limits`.\n\n    Parameters\n    ----------\n    a : array_like\n        array of values\n    limits : None or (lower limit, upper limit), optional\n        Values in the input array less than the lower limit or greater than the\n        upper limit will be ignored. When limits is None, then all values are\n        used. Either of the limit values in the tuple can also be None\n        representing a half-open interval.  The default value is None.\n    inclusive : (bool, bool), optional\n        A tuple consisting of the (lower flag, upper flag).  These flags\n        determine whether values exactly equal to the lower or upper limits\n        are included.  The default value is (True, True).\n    axis : int or None, optional\n        Axis along which to operate. Default is 0. If None, compute over the\n        whole array `a`.\n    ddof : int, optional\n        Delta degrees of freedom.  Default is 1.\n\n    Returns\n    -------\n    tsem : float\n\n    Notes\n    -----\n    `tsem` uses unbiased sample standard deviation, i.e. it uses a\n    correction factor ``n / (n - 1)``.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> x = np.arange(20)\n    >>> stats.tsem(x)\n    1.3228756555322954\n    >>> stats.tsem(x, (3,17))\n    1.1547005383792515\n\n    ')
    
    # Assigning a Call to a Name (line 812):
    
    # Assigning a Call to a Name (line 812):
    
    # Call to ravel(...): (line 812)
    # Processing the call keyword arguments (line 812)
    kwargs_580876 = {}
    
    # Call to asarray(...): (line 812)
    # Processing the call arguments (line 812)
    # Getting the type of 'a' (line 812)
    a_580872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 19), 'a', False)
    # Processing the call keyword arguments (line 812)
    kwargs_580873 = {}
    # Getting the type of 'np' (line 812)
    np_580870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 812)
    asarray_580871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 8), np_580870, 'asarray')
    # Calling asarray(args, kwargs) (line 812)
    asarray_call_result_580874 = invoke(stypy.reporting.localization.Localization(__file__, 812, 8), asarray_580871, *[a_580872], **kwargs_580873)
    
    # Obtaining the member 'ravel' of a type (line 812)
    ravel_580875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 8), asarray_call_result_580874, 'ravel')
    # Calling ravel(args, kwargs) (line 812)
    ravel_call_result_580877 = invoke(stypy.reporting.localization.Localization(__file__, 812, 8), ravel_580875, *[], **kwargs_580876)
    
    # Assigning a type to the variable 'a' (line 812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 4), 'a', ravel_call_result_580877)
    
    # Type idiom detected: calculating its left and rigth part (line 813)
    # Getting the type of 'limits' (line 813)
    limits_580878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 7), 'limits')
    # Getting the type of 'None' (line 813)
    None_580879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 17), 'None')
    
    (may_be_580880, more_types_in_union_580881) = may_be_none(limits_580878, None_580879)

    if may_be_580880:

        if more_types_in_union_580881:
            # Runtime conditional SSA (line 813)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to std(...): (line 814)
        # Processing the call keyword arguments (line 814)
        # Getting the type of 'ddof' (line 814)
        ddof_580884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 26), 'ddof', False)
        keyword_580885 = ddof_580884
        kwargs_580886 = {'ddof': keyword_580885}
        # Getting the type of 'a' (line 814)
        a_580882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 15), 'a', False)
        # Obtaining the member 'std' of a type (line 814)
        std_580883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 15), a_580882, 'std')
        # Calling std(args, kwargs) (line 814)
        std_call_result_580887 = invoke(stypy.reporting.localization.Localization(__file__, 814, 15), std_580883, *[], **kwargs_580886)
        
        
        # Call to sqrt(...): (line 814)
        # Processing the call arguments (line 814)
        # Getting the type of 'a' (line 814)
        a_580890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 42), 'a', False)
        # Obtaining the member 'size' of a type (line 814)
        size_580891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 42), a_580890, 'size')
        # Processing the call keyword arguments (line 814)
        kwargs_580892 = {}
        # Getting the type of 'np' (line 814)
        np_580888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 34), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 814)
        sqrt_580889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 34), np_580888, 'sqrt')
        # Calling sqrt(args, kwargs) (line 814)
        sqrt_call_result_580893 = invoke(stypy.reporting.localization.Localization(__file__, 814, 34), sqrt_580889, *[size_580891], **kwargs_580892)
        
        # Applying the binary operator 'div' (line 814)
        result_div_580894 = python_operator(stypy.reporting.localization.Localization(__file__, 814, 15), 'div', std_call_result_580887, sqrt_call_result_580893)
        
        # Assigning a type to the variable 'stypy_return_type' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 8), 'stypy_return_type', result_div_580894)

        if more_types_in_union_580881:
            # SSA join for if statement (line 813)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 816):
    
    # Assigning a Call to a Name (line 816):
    
    # Call to _mask_to_limits(...): (line 816)
    # Processing the call arguments (line 816)
    # Getting the type of 'a' (line 816)
    a_580896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 25), 'a', False)
    # Getting the type of 'limits' (line 816)
    limits_580897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 28), 'limits', False)
    # Getting the type of 'inclusive' (line 816)
    inclusive_580898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 36), 'inclusive', False)
    # Processing the call keyword arguments (line 816)
    kwargs_580899 = {}
    # Getting the type of '_mask_to_limits' (line 816)
    _mask_to_limits_580895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 9), '_mask_to_limits', False)
    # Calling _mask_to_limits(args, kwargs) (line 816)
    _mask_to_limits_call_result_580900 = invoke(stypy.reporting.localization.Localization(__file__, 816, 9), _mask_to_limits_580895, *[a_580896, limits_580897, inclusive_580898], **kwargs_580899)
    
    # Assigning a type to the variable 'am' (line 816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 4), 'am', _mask_to_limits_call_result_580900)
    
    # Assigning a Call to a Name (line 817):
    
    # Assigning a Call to a Name (line 817):
    
    # Call to sqrt(...): (line 817)
    # Processing the call arguments (line 817)
    
    # Call to var(...): (line 817)
    # Processing the call arguments (line 817)
    # Getting the type of 'am' (line 817)
    am_580906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 27), 'am', False)
    # Processing the call keyword arguments (line 817)
    # Getting the type of 'ddof' (line 817)
    ddof_580907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 36), 'ddof', False)
    keyword_580908 = ddof_580907
    # Getting the type of 'axis' (line 817)
    axis_580909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 47), 'axis', False)
    keyword_580910 = axis_580909
    kwargs_580911 = {'axis': keyword_580910, 'ddof': keyword_580908}
    # Getting the type of 'np' (line 817)
    np_580903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 17), 'np', False)
    # Obtaining the member 'ma' of a type (line 817)
    ma_580904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 17), np_580903, 'ma')
    # Obtaining the member 'var' of a type (line 817)
    var_580905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 17), ma_580904, 'var')
    # Calling var(args, kwargs) (line 817)
    var_call_result_580912 = invoke(stypy.reporting.localization.Localization(__file__, 817, 17), var_580905, *[am_580906], **kwargs_580911)
    
    # Processing the call keyword arguments (line 817)
    kwargs_580913 = {}
    # Getting the type of 'np' (line 817)
    np_580901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 9), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 817)
    sqrt_580902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 9), np_580901, 'sqrt')
    # Calling sqrt(args, kwargs) (line 817)
    sqrt_call_result_580914 = invoke(stypy.reporting.localization.Localization(__file__, 817, 9), sqrt_580902, *[var_call_result_580912], **kwargs_580913)
    
    # Assigning a type to the variable 'sd' (line 817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 4), 'sd', sqrt_call_result_580914)
    # Getting the type of 'sd' (line 818)
    sd_580915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 11), 'sd')
    
    # Call to sqrt(...): (line 818)
    # Processing the call arguments (line 818)
    
    # Call to count(...): (line 818)
    # Processing the call keyword arguments (line 818)
    kwargs_580920 = {}
    # Getting the type of 'am' (line 818)
    am_580918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 24), 'am', False)
    # Obtaining the member 'count' of a type (line 818)
    count_580919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 24), am_580918, 'count')
    # Calling count(args, kwargs) (line 818)
    count_call_result_580921 = invoke(stypy.reporting.localization.Localization(__file__, 818, 24), count_580919, *[], **kwargs_580920)
    
    # Processing the call keyword arguments (line 818)
    kwargs_580922 = {}
    # Getting the type of 'np' (line 818)
    np_580916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 16), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 818)
    sqrt_580917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 16), np_580916, 'sqrt')
    # Calling sqrt(args, kwargs) (line 818)
    sqrt_call_result_580923 = invoke(stypy.reporting.localization.Localization(__file__, 818, 16), sqrt_580917, *[count_call_result_580921], **kwargs_580922)
    
    # Applying the binary operator 'div' (line 818)
    result_div_580924 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 11), 'div', sd_580915, sqrt_call_result_580923)
    
    # Assigning a type to the variable 'stypy_return_type' (line 818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 4), 'stypy_return_type', result_div_580924)
    
    # ################# End of 'tsem(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tsem' in the type store
    # Getting the type of 'stypy_return_type' (line 767)
    stypy_return_type_580925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_580925)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tsem'
    return stypy_return_type_580925

# Assigning a type to the variable 'tsem' (line 767)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 0), 'tsem', tsem)

@norecursion
def moment(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_580926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 21), 'int')
    int_580927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 29), 'int')
    str_580928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 43), 'str', 'propagate')
    defaults = [int_580926, int_580927, str_580928]
    # Create a new context for function 'moment'
    module_type_store = module_type_store.open_function_context('moment', 825, 0, False)
    
    # Passed parameters checking function
    moment.stypy_localization = localization
    moment.stypy_type_of_self = None
    moment.stypy_type_store = module_type_store
    moment.stypy_function_name = 'moment'
    moment.stypy_param_names_list = ['a', 'moment', 'axis', 'nan_policy']
    moment.stypy_varargs_param_name = None
    moment.stypy_kwargs_param_name = None
    moment.stypy_call_defaults = defaults
    moment.stypy_call_varargs = varargs
    moment.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'moment', ['a', 'moment', 'axis', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'moment', localization, ['a', 'moment', 'axis', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'moment(...)' code ##################

    str_580929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, (-1)), 'str', "\n    Calculate the nth moment about the mean for a sample.\n\n    A moment is a specific quantitative measure of the shape of a set of\n    points. It is often used to calculate coefficients of skewness and kurtosis\n    due to its close relationship with them.\n\n\n    Parameters\n    ----------\n    a : array_like\n       data\n    moment : int or array_like of ints, optional\n       order of central moment that is returned. Default is 1.\n    axis : int or None, optional\n       Axis along which the central moment is computed. Default is 0.\n       If None, compute over the whole array `a`.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    n-th central moment : ndarray or float\n       The appropriate moment along the given axis or over all values if axis\n       is None. The denominator for the moment calculation is the number of\n       observations, no degrees of freedom correction is done.\n\n    See also\n    --------\n    kurtosis, skew, describe\n\n    Notes\n    -----\n    The k-th central moment of a data sample is:\n\n    .. math::\n\n        m_k = \\frac{1}{n} \\sum_{i = 1}^n (x_i - \\bar{x})^k\n\n    Where n is the number of samples and x-bar is the mean. This function uses\n    exponentiation by squares [1]_ for efficiency.\n\n    References\n    ----------\n    .. [1] http://eli.thegreenplace.net/2009/03/21/efficient-integer-exponentiation-algorithms\n\n    Examples\n    --------\n    >>> from scipy.stats import moment\n    >>> moment([1, 2, 3, 4, 5], moment=1)\n    0.0\n    >>> moment([1, 2, 3, 4, 5], moment=2)\n    2.0\n    ")
    
    # Assigning a Call to a Tuple (line 882):
    
    # Assigning a Subscript to a Name (line 882):
    
    # Obtaining the type of the subscript
    int_580930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 4), 'int')
    
    # Call to _chk_asarray(...): (line 882)
    # Processing the call arguments (line 882)
    # Getting the type of 'a' (line 882)
    a_580932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 27), 'a', False)
    # Getting the type of 'axis' (line 882)
    axis_580933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 30), 'axis', False)
    # Processing the call keyword arguments (line 882)
    kwargs_580934 = {}
    # Getting the type of '_chk_asarray' (line 882)
    _chk_asarray_580931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 882)
    _chk_asarray_call_result_580935 = invoke(stypy.reporting.localization.Localization(__file__, 882, 14), _chk_asarray_580931, *[a_580932, axis_580933], **kwargs_580934)
    
    # Obtaining the member '__getitem__' of a type (line 882)
    getitem___580936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 4), _chk_asarray_call_result_580935, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 882)
    subscript_call_result_580937 = invoke(stypy.reporting.localization.Localization(__file__, 882, 4), getitem___580936, int_580930)
    
    # Assigning a type to the variable 'tuple_var_assignment_579861' (line 882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'tuple_var_assignment_579861', subscript_call_result_580937)
    
    # Assigning a Subscript to a Name (line 882):
    
    # Obtaining the type of the subscript
    int_580938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 4), 'int')
    
    # Call to _chk_asarray(...): (line 882)
    # Processing the call arguments (line 882)
    # Getting the type of 'a' (line 882)
    a_580940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 27), 'a', False)
    # Getting the type of 'axis' (line 882)
    axis_580941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 30), 'axis', False)
    # Processing the call keyword arguments (line 882)
    kwargs_580942 = {}
    # Getting the type of '_chk_asarray' (line 882)
    _chk_asarray_580939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 882)
    _chk_asarray_call_result_580943 = invoke(stypy.reporting.localization.Localization(__file__, 882, 14), _chk_asarray_580939, *[a_580940, axis_580941], **kwargs_580942)
    
    # Obtaining the member '__getitem__' of a type (line 882)
    getitem___580944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 4), _chk_asarray_call_result_580943, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 882)
    subscript_call_result_580945 = invoke(stypy.reporting.localization.Localization(__file__, 882, 4), getitem___580944, int_580938)
    
    # Assigning a type to the variable 'tuple_var_assignment_579862' (line 882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'tuple_var_assignment_579862', subscript_call_result_580945)
    
    # Assigning a Name to a Name (line 882):
    # Getting the type of 'tuple_var_assignment_579861' (line 882)
    tuple_var_assignment_579861_580946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'tuple_var_assignment_579861')
    # Assigning a type to the variable 'a' (line 882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'a', tuple_var_assignment_579861_580946)
    
    # Assigning a Name to a Name (line 882):
    # Getting the type of 'tuple_var_assignment_579862' (line 882)
    tuple_var_assignment_579862_580947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'tuple_var_assignment_579862')
    # Assigning a type to the variable 'axis' (line 882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 7), 'axis', tuple_var_assignment_579862_580947)
    
    # Assigning a Call to a Tuple (line 884):
    
    # Assigning a Subscript to a Name (line 884):
    
    # Obtaining the type of the subscript
    int_580948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 4), 'int')
    
    # Call to _contains_nan(...): (line 884)
    # Processing the call arguments (line 884)
    # Getting the type of 'a' (line 884)
    a_580950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 884)
    nan_policy_580951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 884)
    kwargs_580952 = {}
    # Getting the type of '_contains_nan' (line 884)
    _contains_nan_580949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 884)
    _contains_nan_call_result_580953 = invoke(stypy.reporting.localization.Localization(__file__, 884, 31), _contains_nan_580949, *[a_580950, nan_policy_580951], **kwargs_580952)
    
    # Obtaining the member '__getitem__' of a type (line 884)
    getitem___580954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 4), _contains_nan_call_result_580953, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 884)
    subscript_call_result_580955 = invoke(stypy.reporting.localization.Localization(__file__, 884, 4), getitem___580954, int_580948)
    
    # Assigning a type to the variable 'tuple_var_assignment_579863' (line 884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 4), 'tuple_var_assignment_579863', subscript_call_result_580955)
    
    # Assigning a Subscript to a Name (line 884):
    
    # Obtaining the type of the subscript
    int_580956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 4), 'int')
    
    # Call to _contains_nan(...): (line 884)
    # Processing the call arguments (line 884)
    # Getting the type of 'a' (line 884)
    a_580958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 884)
    nan_policy_580959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 884)
    kwargs_580960 = {}
    # Getting the type of '_contains_nan' (line 884)
    _contains_nan_580957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 884)
    _contains_nan_call_result_580961 = invoke(stypy.reporting.localization.Localization(__file__, 884, 31), _contains_nan_580957, *[a_580958, nan_policy_580959], **kwargs_580960)
    
    # Obtaining the member '__getitem__' of a type (line 884)
    getitem___580962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 4), _contains_nan_call_result_580961, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 884)
    subscript_call_result_580963 = invoke(stypy.reporting.localization.Localization(__file__, 884, 4), getitem___580962, int_580956)
    
    # Assigning a type to the variable 'tuple_var_assignment_579864' (line 884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 4), 'tuple_var_assignment_579864', subscript_call_result_580963)
    
    # Assigning a Name to a Name (line 884):
    # Getting the type of 'tuple_var_assignment_579863' (line 884)
    tuple_var_assignment_579863_580964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 4), 'tuple_var_assignment_579863')
    # Assigning a type to the variable 'contains_nan' (line 884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 4), 'contains_nan', tuple_var_assignment_579863_580964)
    
    # Assigning a Name to a Name (line 884):
    # Getting the type of 'tuple_var_assignment_579864' (line 884)
    tuple_var_assignment_579864_580965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 4), 'tuple_var_assignment_579864')
    # Assigning a type to the variable 'nan_policy' (line 884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 18), 'nan_policy', tuple_var_assignment_579864_580965)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 886)
    contains_nan_580966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 886)
    nan_policy_580967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 24), 'nan_policy')
    str_580968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 886)
    result_eq_580969 = python_operator(stypy.reporting.localization.Localization(__file__, 886, 24), '==', nan_policy_580967, str_580968)
    
    # Applying the binary operator 'and' (line 886)
    result_and_keyword_580970 = python_operator(stypy.reporting.localization.Localization(__file__, 886, 7), 'and', contains_nan_580966, result_eq_580969)
    
    # Testing the type of an if condition (line 886)
    if_condition_580971 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 886, 4), result_and_keyword_580970)
    # Assigning a type to the variable 'if_condition_580971' (line 886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 4), 'if_condition_580971', if_condition_580971)
    # SSA begins for if statement (line 886)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 887):
    
    # Assigning a Call to a Name (line 887):
    
    # Call to masked_invalid(...): (line 887)
    # Processing the call arguments (line 887)
    # Getting the type of 'a' (line 887)
    a_580974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 30), 'a', False)
    # Processing the call keyword arguments (line 887)
    kwargs_580975 = {}
    # Getting the type of 'ma' (line 887)
    ma_580972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 887)
    masked_invalid_580973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 12), ma_580972, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 887)
    masked_invalid_call_result_580976 = invoke(stypy.reporting.localization.Localization(__file__, 887, 12), masked_invalid_580973, *[a_580974], **kwargs_580975)
    
    # Assigning a type to the variable 'a' (line 887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 8), 'a', masked_invalid_call_result_580976)
    
    # Call to moment(...): (line 888)
    # Processing the call arguments (line 888)
    # Getting the type of 'a' (line 888)
    a_580979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 35), 'a', False)
    # Getting the type of 'moment' (line 888)
    moment_580980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 38), 'moment', False)
    # Getting the type of 'axis' (line 888)
    axis_580981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 46), 'axis', False)
    # Processing the call keyword arguments (line 888)
    kwargs_580982 = {}
    # Getting the type of 'mstats_basic' (line 888)
    mstats_basic_580977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 15), 'mstats_basic', False)
    # Obtaining the member 'moment' of a type (line 888)
    moment_580978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 15), mstats_basic_580977, 'moment')
    # Calling moment(args, kwargs) (line 888)
    moment_call_result_580983 = invoke(stypy.reporting.localization.Localization(__file__, 888, 15), moment_580978, *[a_580979, moment_580980, axis_580981], **kwargs_580982)
    
    # Assigning a type to the variable 'stypy_return_type' (line 888)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 888, 8), 'stypy_return_type', moment_call_result_580983)
    # SSA join for if statement (line 886)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'a' (line 890)
    a_580984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 7), 'a')
    # Obtaining the member 'size' of a type (line 890)
    size_580985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 890, 7), a_580984, 'size')
    int_580986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 890, 17), 'int')
    # Applying the binary operator '==' (line 890)
    result_eq_580987 = python_operator(stypy.reporting.localization.Localization(__file__, 890, 7), '==', size_580985, int_580986)
    
    # Testing the type of an if condition (line 890)
    if_condition_580988 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 890, 4), result_eq_580987)
    # Assigning a type to the variable 'if_condition_580988' (line 890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 4), 'if_condition_580988', if_condition_580988)
    # SSA begins for if statement (line 890)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isscalar(...): (line 892)
    # Processing the call arguments (line 892)
    # Getting the type of 'moment' (line 892)
    moment_580991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 23), 'moment', False)
    # Processing the call keyword arguments (line 892)
    kwargs_580992 = {}
    # Getting the type of 'np' (line 892)
    np_580989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 11), 'np', False)
    # Obtaining the member 'isscalar' of a type (line 892)
    isscalar_580990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 11), np_580989, 'isscalar')
    # Calling isscalar(args, kwargs) (line 892)
    isscalar_call_result_580993 = invoke(stypy.reporting.localization.Localization(__file__, 892, 11), isscalar_580990, *[moment_580991], **kwargs_580992)
    
    # Testing the type of an if condition (line 892)
    if_condition_580994 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 892, 8), isscalar_call_result_580993)
    # Assigning a type to the variable 'if_condition_580994' (line 892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'if_condition_580994', if_condition_580994)
    # SSA begins for if statement (line 892)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'np' (line 893)
    np_580995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 19), 'np')
    # Obtaining the member 'nan' of a type (line 893)
    nan_580996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 19), np_580995, 'nan')
    # Assigning a type to the variable 'stypy_return_type' (line 893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 12), 'stypy_return_type', nan_580996)
    # SSA branch for the else part of an if statement (line 892)
    module_type_store.open_ssa_branch('else')
    
    # Call to ones(...): (line 895)
    # Processing the call arguments (line 895)
    
    # Call to asarray(...): (line 895)
    # Processing the call arguments (line 895)
    # Getting the type of 'moment' (line 895)
    moment_581001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 38), 'moment', False)
    # Processing the call keyword arguments (line 895)
    kwargs_581002 = {}
    # Getting the type of 'np' (line 895)
    np_580999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 27), 'np', False)
    # Obtaining the member 'asarray' of a type (line 895)
    asarray_581000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 27), np_580999, 'asarray')
    # Calling asarray(args, kwargs) (line 895)
    asarray_call_result_581003 = invoke(stypy.reporting.localization.Localization(__file__, 895, 27), asarray_581000, *[moment_581001], **kwargs_581002)
    
    # Obtaining the member 'shape' of a type (line 895)
    shape_581004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 27), asarray_call_result_581003, 'shape')
    # Processing the call keyword arguments (line 895)
    # Getting the type of 'np' (line 895)
    np_581005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 59), 'np', False)
    # Obtaining the member 'float64' of a type (line 895)
    float64_581006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 59), np_581005, 'float64')
    keyword_581007 = float64_581006
    kwargs_581008 = {'dtype': keyword_581007}
    # Getting the type of 'np' (line 895)
    np_580997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 19), 'np', False)
    # Obtaining the member 'ones' of a type (line 895)
    ones_580998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 19), np_580997, 'ones')
    # Calling ones(args, kwargs) (line 895)
    ones_call_result_581009 = invoke(stypy.reporting.localization.Localization(__file__, 895, 19), ones_580998, *[shape_581004], **kwargs_581008)
    
    # Getting the type of 'np' (line 895)
    np_581010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 73), 'np')
    # Obtaining the member 'nan' of a type (line 895)
    nan_581011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 73), np_581010, 'nan')
    # Applying the binary operator '*' (line 895)
    result_mul_581012 = python_operator(stypy.reporting.localization.Localization(__file__, 895, 19), '*', ones_call_result_581009, nan_581011)
    
    # Assigning a type to the variable 'stypy_return_type' (line 895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 12), 'stypy_return_type', result_mul_581012)
    # SSA join for if statement (line 892)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 890)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to isscalar(...): (line 898)
    # Processing the call arguments (line 898)
    # Getting the type of 'moment' (line 898)
    moment_581015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 23), 'moment', False)
    # Processing the call keyword arguments (line 898)
    kwargs_581016 = {}
    # Getting the type of 'np' (line 898)
    np_581013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 11), 'np', False)
    # Obtaining the member 'isscalar' of a type (line 898)
    isscalar_581014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 11), np_581013, 'isscalar')
    # Calling isscalar(args, kwargs) (line 898)
    isscalar_call_result_581017 = invoke(stypy.reporting.localization.Localization(__file__, 898, 11), isscalar_581014, *[moment_581015], **kwargs_581016)
    
    # Applying the 'not' unary operator (line 898)
    result_not__581018 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 7), 'not', isscalar_call_result_581017)
    
    # Testing the type of an if condition (line 898)
    if_condition_581019 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 898, 4), result_not__581018)
    # Assigning a type to the variable 'if_condition_581019' (line 898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 4), 'if_condition_581019', if_condition_581019)
    # SSA begins for if statement (line 898)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 899):
    
    # Assigning a ListComp to a Name (line 899):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'moment' (line 899)
    moment_581026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 45), 'moment')
    comprehension_581027 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 899, 16), moment_581026)
    # Assigning a type to the variable 'i' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 16), 'i', comprehension_581027)
    
    # Call to _moment(...): (line 899)
    # Processing the call arguments (line 899)
    # Getting the type of 'a' (line 899)
    a_581021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 24), 'a', False)
    # Getting the type of 'i' (line 899)
    i_581022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 27), 'i', False)
    # Getting the type of 'axis' (line 899)
    axis_581023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 30), 'axis', False)
    # Processing the call keyword arguments (line 899)
    kwargs_581024 = {}
    # Getting the type of '_moment' (line 899)
    _moment_581020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 16), '_moment', False)
    # Calling _moment(args, kwargs) (line 899)
    _moment_call_result_581025 = invoke(stypy.reporting.localization.Localization(__file__, 899, 16), _moment_581020, *[a_581021, i_581022, axis_581023], **kwargs_581024)
    
    list_581028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 16), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 899, 16), list_581028, _moment_call_result_581025)
    # Assigning a type to the variable 'mmnt' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 8), 'mmnt', list_581028)
    
    # Call to array(...): (line 900)
    # Processing the call arguments (line 900)
    # Getting the type of 'mmnt' (line 900)
    mmnt_581031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 24), 'mmnt', False)
    # Processing the call keyword arguments (line 900)
    kwargs_581032 = {}
    # Getting the type of 'np' (line 900)
    np_581029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 900)
    array_581030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 15), np_581029, 'array')
    # Calling array(args, kwargs) (line 900)
    array_call_result_581033 = invoke(stypy.reporting.localization.Localization(__file__, 900, 15), array_581030, *[mmnt_581031], **kwargs_581032)
    
    # Assigning a type to the variable 'stypy_return_type' (line 900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 8), 'stypy_return_type', array_call_result_581033)
    # SSA branch for the else part of an if statement (line 898)
    module_type_store.open_ssa_branch('else')
    
    # Call to _moment(...): (line 902)
    # Processing the call arguments (line 902)
    # Getting the type of 'a' (line 902)
    a_581035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 23), 'a', False)
    # Getting the type of 'moment' (line 902)
    moment_581036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 26), 'moment', False)
    # Getting the type of 'axis' (line 902)
    axis_581037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 34), 'axis', False)
    # Processing the call keyword arguments (line 902)
    kwargs_581038 = {}
    # Getting the type of '_moment' (line 902)
    _moment_581034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 15), '_moment', False)
    # Calling _moment(args, kwargs) (line 902)
    _moment_call_result_581039 = invoke(stypy.reporting.localization.Localization(__file__, 902, 15), _moment_581034, *[a_581035, moment_581036, axis_581037], **kwargs_581038)
    
    # Assigning a type to the variable 'stypy_return_type' (line 902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 8), 'stypy_return_type', _moment_call_result_581039)
    # SSA join for if statement (line 898)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'moment(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'moment' in the type store
    # Getting the type of 'stypy_return_type' (line 825)
    stypy_return_type_581040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_581040)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'moment'
    return stypy_return_type_581040

# Assigning a type to the variable 'moment' (line 825)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 0), 'moment', moment)

@norecursion
def _moment(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_moment'
    module_type_store = module_type_store.open_function_context('_moment', 905, 0, False)
    
    # Passed parameters checking function
    _moment.stypy_localization = localization
    _moment.stypy_type_of_self = None
    _moment.stypy_type_store = module_type_store
    _moment.stypy_function_name = '_moment'
    _moment.stypy_param_names_list = ['a', 'moment', 'axis']
    _moment.stypy_varargs_param_name = None
    _moment.stypy_kwargs_param_name = None
    _moment.stypy_call_defaults = defaults
    _moment.stypy_call_varargs = varargs
    _moment.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_moment', ['a', 'moment', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_moment', localization, ['a', 'moment', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_moment(...)' code ##################

    
    
    
    # Call to abs(...): (line 906)
    # Processing the call arguments (line 906)
    # Getting the type of 'moment' (line 906)
    moment_581043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 14), 'moment', False)
    
    # Call to round(...): (line 906)
    # Processing the call arguments (line 906)
    # Getting the type of 'moment' (line 906)
    moment_581046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 32), 'moment', False)
    # Processing the call keyword arguments (line 906)
    kwargs_581047 = {}
    # Getting the type of 'np' (line 906)
    np_581044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 23), 'np', False)
    # Obtaining the member 'round' of a type (line 906)
    round_581045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 906, 23), np_581044, 'round')
    # Calling round(args, kwargs) (line 906)
    round_call_result_581048 = invoke(stypy.reporting.localization.Localization(__file__, 906, 23), round_581045, *[moment_581046], **kwargs_581047)
    
    # Applying the binary operator '-' (line 906)
    result_sub_581049 = python_operator(stypy.reporting.localization.Localization(__file__, 906, 14), '-', moment_581043, round_call_result_581048)
    
    # Processing the call keyword arguments (line 906)
    kwargs_581050 = {}
    # Getting the type of 'np' (line 906)
    np_581041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 7), 'np', False)
    # Obtaining the member 'abs' of a type (line 906)
    abs_581042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 906, 7), np_581041, 'abs')
    # Calling abs(args, kwargs) (line 906)
    abs_call_result_581051 = invoke(stypy.reporting.localization.Localization(__file__, 906, 7), abs_581042, *[result_sub_581049], **kwargs_581050)
    
    int_581052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, 43), 'int')
    # Applying the binary operator '>' (line 906)
    result_gt_581053 = python_operator(stypy.reporting.localization.Localization(__file__, 906, 7), '>', abs_call_result_581051, int_581052)
    
    # Testing the type of an if condition (line 906)
    if_condition_581054 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 906, 4), result_gt_581053)
    # Assigning a type to the variable 'if_condition_581054' (line 906)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 4), 'if_condition_581054', if_condition_581054)
    # SSA begins for if statement (line 906)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 907)
    # Processing the call arguments (line 907)
    str_581056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 25), 'str', 'All moment parameters must be integers')
    # Processing the call keyword arguments (line 907)
    kwargs_581057 = {}
    # Getting the type of 'ValueError' (line 907)
    ValueError_581055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 907)
    ValueError_call_result_581058 = invoke(stypy.reporting.localization.Localization(__file__, 907, 14), ValueError_581055, *[str_581056], **kwargs_581057)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 907, 8), ValueError_call_result_581058, 'raise parameter', BaseException)
    # SSA join for if statement (line 906)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'moment' (line 909)
    moment_581059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 7), 'moment')
    int_581060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 909, 17), 'int')
    # Applying the binary operator '==' (line 909)
    result_eq_581061 = python_operator(stypy.reporting.localization.Localization(__file__, 909, 7), '==', moment_581059, int_581060)
    
    # Testing the type of an if condition (line 909)
    if_condition_581062 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 909, 4), result_eq_581061)
    # Assigning a type to the variable 'if_condition_581062' (line 909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 4), 'if_condition_581062', if_condition_581062)
    # SSA begins for if statement (line 909)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 911):
    
    # Assigning a Call to a Name (line 911):
    
    # Call to list(...): (line 911)
    # Processing the call arguments (line 911)
    # Getting the type of 'a' (line 911)
    a_581064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 21), 'a', False)
    # Obtaining the member 'shape' of a type (line 911)
    shape_581065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 21), a_581064, 'shape')
    # Processing the call keyword arguments (line 911)
    kwargs_581066 = {}
    # Getting the type of 'list' (line 911)
    list_581063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 16), 'list', False)
    # Calling list(args, kwargs) (line 911)
    list_call_result_581067 = invoke(stypy.reporting.localization.Localization(__file__, 911, 16), list_581063, *[shape_581065], **kwargs_581066)
    
    # Assigning a type to the variable 'shape' (line 911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 8), 'shape', list_call_result_581067)
    # Deleting a member
    # Getting the type of 'shape' (line 912)
    shape_581068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'shape')
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 912)
    axis_581069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 18), 'axis')
    # Getting the type of 'shape' (line 912)
    shape_581070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'shape')
    # Obtaining the member '__getitem__' of a type (line 912)
    getitem___581071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 12), shape_581070, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 912)
    subscript_call_result_581072 = invoke(stypy.reporting.localization.Localization(__file__, 912, 12), getitem___581071, axis_581069)
    
    del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 912, 8), shape_581068, subscript_call_result_581072)
    
    # Getting the type of 'shape' (line 913)
    shape_581073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 11), 'shape')
    # Testing the type of an if condition (line 913)
    if_condition_581074 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 913, 8), shape_581073)
    # Assigning a type to the variable 'if_condition_581074' (line 913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 8), 'if_condition_581074', if_condition_581074)
    # SSA begins for if statement (line 913)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ones(...): (line 915)
    # Processing the call arguments (line 915)
    # Getting the type of 'shape' (line 915)
    shape_581077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 27), 'shape', False)
    # Processing the call keyword arguments (line 915)
    # Getting the type of 'float' (line 915)
    float_581078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 40), 'float', False)
    keyword_581079 = float_581078
    kwargs_581080 = {'dtype': keyword_581079}
    # Getting the type of 'np' (line 915)
    np_581075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 19), 'np', False)
    # Obtaining the member 'ones' of a type (line 915)
    ones_581076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 19), np_581075, 'ones')
    # Calling ones(args, kwargs) (line 915)
    ones_call_result_581081 = invoke(stypy.reporting.localization.Localization(__file__, 915, 19), ones_581076, *[shape_581077], **kwargs_581080)
    
    # Assigning a type to the variable 'stypy_return_type' (line 915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 12), 'stypy_return_type', ones_call_result_581081)
    # SSA branch for the else part of an if statement (line 913)
    module_type_store.open_ssa_branch('else')
    float_581082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 19), 'float')
    # Assigning a type to the variable 'stypy_return_type' (line 918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 12), 'stypy_return_type', float_581082)
    # SSA join for if statement (line 913)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 909)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'moment' (line 920)
    moment_581083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 9), 'moment')
    int_581084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 19), 'int')
    # Applying the binary operator '==' (line 920)
    result_eq_581085 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 9), '==', moment_581083, int_581084)
    
    # Testing the type of an if condition (line 920)
    if_condition_581086 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 920, 9), result_eq_581085)
    # Assigning a type to the variable 'if_condition_581086' (line 920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 9), 'if_condition_581086', if_condition_581086)
    # SSA begins for if statement (line 920)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 922):
    
    # Assigning a Call to a Name (line 922):
    
    # Call to list(...): (line 922)
    # Processing the call arguments (line 922)
    # Getting the type of 'a' (line 922)
    a_581088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 21), 'a', False)
    # Obtaining the member 'shape' of a type (line 922)
    shape_581089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 21), a_581088, 'shape')
    # Processing the call keyword arguments (line 922)
    kwargs_581090 = {}
    # Getting the type of 'list' (line 922)
    list_581087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 16), 'list', False)
    # Calling list(args, kwargs) (line 922)
    list_call_result_581091 = invoke(stypy.reporting.localization.Localization(__file__, 922, 16), list_581087, *[shape_581089], **kwargs_581090)
    
    # Assigning a type to the variable 'shape' (line 922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 8), 'shape', list_call_result_581091)
    # Deleting a member
    # Getting the type of 'shape' (line 923)
    shape_581092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 12), 'shape')
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 923)
    axis_581093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 18), 'axis')
    # Getting the type of 'shape' (line 923)
    shape_581094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 12), 'shape')
    # Obtaining the member '__getitem__' of a type (line 923)
    getitem___581095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 12), shape_581094, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 923)
    subscript_call_result_581096 = invoke(stypy.reporting.localization.Localization(__file__, 923, 12), getitem___581095, axis_581093)
    
    del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 923, 8), shape_581092, subscript_call_result_581096)
    
    # Getting the type of 'shape' (line 924)
    shape_581097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 11), 'shape')
    # Testing the type of an if condition (line 924)
    if_condition_581098 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 924, 8), shape_581097)
    # Assigning a type to the variable 'if_condition_581098' (line 924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'if_condition_581098', if_condition_581098)
    # SSA begins for if statement (line 924)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to zeros(...): (line 926)
    # Processing the call arguments (line 926)
    # Getting the type of 'shape' (line 926)
    shape_581101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 28), 'shape', False)
    # Processing the call keyword arguments (line 926)
    # Getting the type of 'float' (line 926)
    float_581102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 41), 'float', False)
    keyword_581103 = float_581102
    kwargs_581104 = {'dtype': keyword_581103}
    # Getting the type of 'np' (line 926)
    np_581099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 19), 'np', False)
    # Obtaining the member 'zeros' of a type (line 926)
    zeros_581100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 19), np_581099, 'zeros')
    # Calling zeros(args, kwargs) (line 926)
    zeros_call_result_581105 = invoke(stypy.reporting.localization.Localization(__file__, 926, 19), zeros_581100, *[shape_581101], **kwargs_581104)
    
    # Assigning a type to the variable 'stypy_return_type' (line 926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 12), 'stypy_return_type', zeros_call_result_581105)
    # SSA branch for the else part of an if statement (line 924)
    module_type_store.open_ssa_branch('else')
    
    # Call to float64(...): (line 929)
    # Processing the call arguments (line 929)
    float_581108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 30), 'float')
    # Processing the call keyword arguments (line 929)
    kwargs_581109 = {}
    # Getting the type of 'np' (line 929)
    np_581106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 19), 'np', False)
    # Obtaining the member 'float64' of a type (line 929)
    float64_581107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 19), np_581106, 'float64')
    # Calling float64(args, kwargs) (line 929)
    float64_call_result_581110 = invoke(stypy.reporting.localization.Localization(__file__, 929, 19), float64_581107, *[float_581108], **kwargs_581109)
    
    # Assigning a type to the variable 'stypy_return_type' (line 929)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 12), 'stypy_return_type', float64_call_result_581110)
    # SSA join for if statement (line 924)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 920)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a List to a Name (line 932):
    
    # Assigning a List to a Name (line 932):
    
    # Obtaining an instance of the builtin type 'list' (line 932)
    list_581111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 932, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 932)
    # Adding element type (line 932)
    # Getting the type of 'moment' (line 932)
    moment_581112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 18), 'moment')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 932, 17), list_581111, moment_581112)
    
    # Assigning a type to the variable 'n_list' (line 932)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 8), 'n_list', list_581111)
    
    # Assigning a Name to a Name (line 933):
    
    # Assigning a Name to a Name (line 933):
    # Getting the type of 'moment' (line 933)
    moment_581113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 20), 'moment')
    # Assigning a type to the variable 'current_n' (line 933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'current_n', moment_581113)
    
    
    # Getting the type of 'current_n' (line 934)
    current_n_581114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 14), 'current_n')
    int_581115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 26), 'int')
    # Applying the binary operator '>' (line 934)
    result_gt_581116 = python_operator(stypy.reporting.localization.Localization(__file__, 934, 14), '>', current_n_581114, int_581115)
    
    # Testing the type of an if condition (line 934)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 934, 8), result_gt_581116)
    # SSA begins for while statement (line 934)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Getting the type of 'current_n' (line 935)
    current_n_581117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 15), 'current_n')
    int_581118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 935, 27), 'int')
    # Applying the binary operator '%' (line 935)
    result_mod_581119 = python_operator(stypy.reporting.localization.Localization(__file__, 935, 15), '%', current_n_581117, int_581118)
    
    # Testing the type of an if condition (line 935)
    if_condition_581120 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 935, 12), result_mod_581119)
    # Assigning a type to the variable 'if_condition_581120' (line 935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 12), 'if_condition_581120', if_condition_581120)
    # SSA begins for if statement (line 935)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 936):
    
    # Assigning a BinOp to a Name (line 936):
    # Getting the type of 'current_n' (line 936)
    current_n_581121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 29), 'current_n')
    int_581122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 41), 'int')
    # Applying the binary operator '-' (line 936)
    result_sub_581123 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 29), '-', current_n_581121, int_581122)
    
    int_581124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 46), 'int')
    # Applying the binary operator 'div' (line 936)
    result_div_581125 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 28), 'div', result_sub_581123, int_581124)
    
    # Assigning a type to the variable 'current_n' (line 936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 16), 'current_n', result_div_581125)
    # SSA branch for the else part of an if statement (line 935)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'current_n' (line 938)
    current_n_581126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 16), 'current_n')
    int_581127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 29), 'int')
    # Applying the binary operator 'div=' (line 938)
    result_div_581128 = python_operator(stypy.reporting.localization.Localization(__file__, 938, 16), 'div=', current_n_581126, int_581127)
    # Assigning a type to the variable 'current_n' (line 938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 16), 'current_n', result_div_581128)
    
    # SSA join for if statement (line 935)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 939)
    # Processing the call arguments (line 939)
    # Getting the type of 'current_n' (line 939)
    current_n_581131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 26), 'current_n', False)
    # Processing the call keyword arguments (line 939)
    kwargs_581132 = {}
    # Getting the type of 'n_list' (line 939)
    n_list_581129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 12), 'n_list', False)
    # Obtaining the member 'append' of a type (line 939)
    append_581130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 12), n_list_581129, 'append')
    # Calling append(args, kwargs) (line 939)
    append_call_result_581133 = invoke(stypy.reporting.localization.Localization(__file__, 939, 12), append_581130, *[current_n_581131], **kwargs_581132)
    
    # SSA join for while statement (line 934)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 942):
    
    # Assigning a BinOp to a Name (line 942):
    # Getting the type of 'a' (line 942)
    a_581134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 22), 'a')
    
    # Call to expand_dims(...): (line 942)
    # Processing the call arguments (line 942)
    
    # Call to mean(...): (line 942)
    # Processing the call arguments (line 942)
    # Getting the type of 'a' (line 942)
    a_581139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 49), 'a', False)
    # Getting the type of 'axis' (line 942)
    axis_581140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 52), 'axis', False)
    # Processing the call keyword arguments (line 942)
    kwargs_581141 = {}
    # Getting the type of 'np' (line 942)
    np_581137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 41), 'np', False)
    # Obtaining the member 'mean' of a type (line 942)
    mean_581138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 41), np_581137, 'mean')
    # Calling mean(args, kwargs) (line 942)
    mean_call_result_581142 = invoke(stypy.reporting.localization.Localization(__file__, 942, 41), mean_581138, *[a_581139, axis_581140], **kwargs_581141)
    
    # Getting the type of 'axis' (line 942)
    axis_581143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 59), 'axis', False)
    # Processing the call keyword arguments (line 942)
    kwargs_581144 = {}
    # Getting the type of 'np' (line 942)
    np_581135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 26), 'np', False)
    # Obtaining the member 'expand_dims' of a type (line 942)
    expand_dims_581136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 26), np_581135, 'expand_dims')
    # Calling expand_dims(args, kwargs) (line 942)
    expand_dims_call_result_581145 = invoke(stypy.reporting.localization.Localization(__file__, 942, 26), expand_dims_581136, *[mean_call_result_581142, axis_581143], **kwargs_581144)
    
    # Applying the binary operator '-' (line 942)
    result_sub_581146 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 22), '-', a_581134, expand_dims_call_result_581145)
    
    # Assigning a type to the variable 'a_zero_mean' (line 942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'a_zero_mean', result_sub_581146)
    
    
    
    # Obtaining the type of the subscript
    int_581147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 18), 'int')
    # Getting the type of 'n_list' (line 943)
    n_list_581148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 11), 'n_list')
    # Obtaining the member '__getitem__' of a type (line 943)
    getitem___581149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 11), n_list_581148, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 943)
    subscript_call_result_581150 = invoke(stypy.reporting.localization.Localization(__file__, 943, 11), getitem___581149, int_581147)
    
    int_581151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 25), 'int')
    # Applying the binary operator '==' (line 943)
    result_eq_581152 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 11), '==', subscript_call_result_581150, int_581151)
    
    # Testing the type of an if condition (line 943)
    if_condition_581153 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 943, 8), result_eq_581152)
    # Assigning a type to the variable 'if_condition_581153' (line 943)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'if_condition_581153', if_condition_581153)
    # SSA begins for if statement (line 943)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 944):
    
    # Assigning a Call to a Name (line 944):
    
    # Call to copy(...): (line 944)
    # Processing the call keyword arguments (line 944)
    kwargs_581156 = {}
    # Getting the type of 'a_zero_mean' (line 944)
    a_zero_mean_581154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 16), 'a_zero_mean', False)
    # Obtaining the member 'copy' of a type (line 944)
    copy_581155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 16), a_zero_mean_581154, 'copy')
    # Calling copy(args, kwargs) (line 944)
    copy_call_result_581157 = invoke(stypy.reporting.localization.Localization(__file__, 944, 16), copy_581155, *[], **kwargs_581156)
    
    # Assigning a type to the variable 's' (line 944)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 12), 's', copy_call_result_581157)
    # SSA branch for the else part of an if statement (line 943)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 946):
    
    # Assigning a BinOp to a Name (line 946):
    # Getting the type of 'a_zero_mean' (line 946)
    a_zero_mean_581158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 16), 'a_zero_mean')
    int_581159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 29), 'int')
    # Applying the binary operator '**' (line 946)
    result_pow_581160 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 16), '**', a_zero_mean_581158, int_581159)
    
    # Assigning a type to the variable 's' (line 946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 12), 's', result_pow_581160)
    # SSA join for if statement (line 943)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Obtaining the type of the subscript
    int_581161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 24), 'int')
    int_581162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 28), 'int')
    slice_581163 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 949, 17), int_581161, None, int_581162)
    # Getting the type of 'n_list' (line 949)
    n_list_581164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 17), 'n_list')
    # Obtaining the member '__getitem__' of a type (line 949)
    getitem___581165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 17), n_list_581164, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 949)
    subscript_call_result_581166 = invoke(stypy.reporting.localization.Localization(__file__, 949, 17), getitem___581165, slice_581163)
    
    # Testing the type of a for loop iterable (line 949)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 949, 8), subscript_call_result_581166)
    # Getting the type of the for loop variable (line 949)
    for_loop_var_581167 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 949, 8), subscript_call_result_581166)
    # Assigning a type to the variable 'n' (line 949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 8), 'n', for_loop_var_581167)
    # SSA begins for a for statement (line 949)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 950):
    
    # Assigning a BinOp to a Name (line 950):
    # Getting the type of 's' (line 950)
    s_581168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 16), 's')
    int_581169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 19), 'int')
    # Applying the binary operator '**' (line 950)
    result_pow_581170 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 16), '**', s_581168, int_581169)
    
    # Assigning a type to the variable 's' (line 950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 12), 's', result_pow_581170)
    
    # Getting the type of 'n' (line 951)
    n_581171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 15), 'n')
    int_581172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 19), 'int')
    # Applying the binary operator '%' (line 951)
    result_mod_581173 = python_operator(stypy.reporting.localization.Localization(__file__, 951, 15), '%', n_581171, int_581172)
    
    # Testing the type of an if condition (line 951)
    if_condition_581174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 951, 12), result_mod_581173)
    # Assigning a type to the variable 'if_condition_581174' (line 951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 12), 'if_condition_581174', if_condition_581174)
    # SSA begins for if statement (line 951)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 's' (line 952)
    s_581175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 16), 's')
    # Getting the type of 'a_zero_mean' (line 952)
    a_zero_mean_581176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 21), 'a_zero_mean')
    # Applying the binary operator '*=' (line 952)
    result_imul_581177 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 16), '*=', s_581175, a_zero_mean_581176)
    # Assigning a type to the variable 's' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 16), 's', result_imul_581177)
    
    # SSA join for if statement (line 951)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to mean(...): (line 953)
    # Processing the call arguments (line 953)
    # Getting the type of 's' (line 953)
    s_581180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 23), 's', False)
    # Getting the type of 'axis' (line 953)
    axis_581181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 26), 'axis', False)
    # Processing the call keyword arguments (line 953)
    kwargs_581182 = {}
    # Getting the type of 'np' (line 953)
    np_581178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 15), 'np', False)
    # Obtaining the member 'mean' of a type (line 953)
    mean_581179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 15), np_581178, 'mean')
    # Calling mean(args, kwargs) (line 953)
    mean_call_result_581183 = invoke(stypy.reporting.localization.Localization(__file__, 953, 15), mean_581179, *[s_581180, axis_581181], **kwargs_581182)
    
    # Assigning a type to the variable 'stypy_return_type' (line 953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'stypy_return_type', mean_call_result_581183)
    # SSA join for if statement (line 920)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 909)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_moment(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_moment' in the type store
    # Getting the type of 'stypy_return_type' (line 905)
    stypy_return_type_581184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_581184)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_moment'
    return stypy_return_type_581184

# Assigning a type to the variable '_moment' (line 905)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 0), '_moment', _moment)

@norecursion
def variation(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_581185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 22), 'int')
    str_581186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 36), 'str', 'propagate')
    defaults = [int_581185, str_581186]
    # Create a new context for function 'variation'
    module_type_store = module_type_store.open_function_context('variation', 956, 0, False)
    
    # Passed parameters checking function
    variation.stypy_localization = localization
    variation.stypy_type_of_self = None
    variation.stypy_type_store = module_type_store
    variation.stypy_function_name = 'variation'
    variation.stypy_param_names_list = ['a', 'axis', 'nan_policy']
    variation.stypy_varargs_param_name = None
    variation.stypy_kwargs_param_name = None
    variation.stypy_call_defaults = defaults
    variation.stypy_call_varargs = varargs
    variation.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'variation', ['a', 'axis', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'variation', localization, ['a', 'axis', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'variation(...)' code ##################

    str_581187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, (-1)), 'str', "\n    Compute the coefficient of variation, the ratio of the biased standard\n    deviation to the mean.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis : int or None, optional\n        Axis along which to calculate the coefficient of variation. Default\n        is 0. If None, compute over the whole array `a`.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    variation : ndarray\n        The calculated variation along the requested axis.\n\n    References\n    ----------\n    .. [1] Zwillinger, D. and Kokoska, S. (2000). CRC Standard\n       Probability and Statistics Tables and Formulae. Chapman & Hall: New\n       York. 2000.\n\n    Examples\n    --------\n    >>> from scipy.stats import variation\n    >>> variation([1, 2, 3, 4, 5])\n    0.47140452079103173\n    ")
    
    # Assigning a Call to a Tuple (line 990):
    
    # Assigning a Subscript to a Name (line 990):
    
    # Obtaining the type of the subscript
    int_581188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, 4), 'int')
    
    # Call to _chk_asarray(...): (line 990)
    # Processing the call arguments (line 990)
    # Getting the type of 'a' (line 990)
    a_581190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 27), 'a', False)
    # Getting the type of 'axis' (line 990)
    axis_581191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 30), 'axis', False)
    # Processing the call keyword arguments (line 990)
    kwargs_581192 = {}
    # Getting the type of '_chk_asarray' (line 990)
    _chk_asarray_581189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 990)
    _chk_asarray_call_result_581193 = invoke(stypy.reporting.localization.Localization(__file__, 990, 14), _chk_asarray_581189, *[a_581190, axis_581191], **kwargs_581192)
    
    # Obtaining the member '__getitem__' of a type (line 990)
    getitem___581194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 4), _chk_asarray_call_result_581193, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 990)
    subscript_call_result_581195 = invoke(stypy.reporting.localization.Localization(__file__, 990, 4), getitem___581194, int_581188)
    
    # Assigning a type to the variable 'tuple_var_assignment_579865' (line 990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 4), 'tuple_var_assignment_579865', subscript_call_result_581195)
    
    # Assigning a Subscript to a Name (line 990):
    
    # Obtaining the type of the subscript
    int_581196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, 4), 'int')
    
    # Call to _chk_asarray(...): (line 990)
    # Processing the call arguments (line 990)
    # Getting the type of 'a' (line 990)
    a_581198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 27), 'a', False)
    # Getting the type of 'axis' (line 990)
    axis_581199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 30), 'axis', False)
    # Processing the call keyword arguments (line 990)
    kwargs_581200 = {}
    # Getting the type of '_chk_asarray' (line 990)
    _chk_asarray_581197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 990)
    _chk_asarray_call_result_581201 = invoke(stypy.reporting.localization.Localization(__file__, 990, 14), _chk_asarray_581197, *[a_581198, axis_581199], **kwargs_581200)
    
    # Obtaining the member '__getitem__' of a type (line 990)
    getitem___581202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 4), _chk_asarray_call_result_581201, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 990)
    subscript_call_result_581203 = invoke(stypy.reporting.localization.Localization(__file__, 990, 4), getitem___581202, int_581196)
    
    # Assigning a type to the variable 'tuple_var_assignment_579866' (line 990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 4), 'tuple_var_assignment_579866', subscript_call_result_581203)
    
    # Assigning a Name to a Name (line 990):
    # Getting the type of 'tuple_var_assignment_579865' (line 990)
    tuple_var_assignment_579865_581204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 4), 'tuple_var_assignment_579865')
    # Assigning a type to the variable 'a' (line 990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 4), 'a', tuple_var_assignment_579865_581204)
    
    # Assigning a Name to a Name (line 990):
    # Getting the type of 'tuple_var_assignment_579866' (line 990)
    tuple_var_assignment_579866_581205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 4), 'tuple_var_assignment_579866')
    # Assigning a type to the variable 'axis' (line 990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 7), 'axis', tuple_var_assignment_579866_581205)
    
    # Assigning a Call to a Tuple (line 992):
    
    # Assigning a Subscript to a Name (line 992):
    
    # Obtaining the type of the subscript
    int_581206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 4), 'int')
    
    # Call to _contains_nan(...): (line 992)
    # Processing the call arguments (line 992)
    # Getting the type of 'a' (line 992)
    a_581208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 992)
    nan_policy_581209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 992)
    kwargs_581210 = {}
    # Getting the type of '_contains_nan' (line 992)
    _contains_nan_581207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 992)
    _contains_nan_call_result_581211 = invoke(stypy.reporting.localization.Localization(__file__, 992, 31), _contains_nan_581207, *[a_581208, nan_policy_581209], **kwargs_581210)
    
    # Obtaining the member '__getitem__' of a type (line 992)
    getitem___581212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 4), _contains_nan_call_result_581211, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 992)
    subscript_call_result_581213 = invoke(stypy.reporting.localization.Localization(__file__, 992, 4), getitem___581212, int_581206)
    
    # Assigning a type to the variable 'tuple_var_assignment_579867' (line 992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'tuple_var_assignment_579867', subscript_call_result_581213)
    
    # Assigning a Subscript to a Name (line 992):
    
    # Obtaining the type of the subscript
    int_581214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 4), 'int')
    
    # Call to _contains_nan(...): (line 992)
    # Processing the call arguments (line 992)
    # Getting the type of 'a' (line 992)
    a_581216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 992)
    nan_policy_581217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 992)
    kwargs_581218 = {}
    # Getting the type of '_contains_nan' (line 992)
    _contains_nan_581215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 992)
    _contains_nan_call_result_581219 = invoke(stypy.reporting.localization.Localization(__file__, 992, 31), _contains_nan_581215, *[a_581216, nan_policy_581217], **kwargs_581218)
    
    # Obtaining the member '__getitem__' of a type (line 992)
    getitem___581220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 4), _contains_nan_call_result_581219, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 992)
    subscript_call_result_581221 = invoke(stypy.reporting.localization.Localization(__file__, 992, 4), getitem___581220, int_581214)
    
    # Assigning a type to the variable 'tuple_var_assignment_579868' (line 992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'tuple_var_assignment_579868', subscript_call_result_581221)
    
    # Assigning a Name to a Name (line 992):
    # Getting the type of 'tuple_var_assignment_579867' (line 992)
    tuple_var_assignment_579867_581222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'tuple_var_assignment_579867')
    # Assigning a type to the variable 'contains_nan' (line 992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'contains_nan', tuple_var_assignment_579867_581222)
    
    # Assigning a Name to a Name (line 992):
    # Getting the type of 'tuple_var_assignment_579868' (line 992)
    tuple_var_assignment_579868_581223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'tuple_var_assignment_579868')
    # Assigning a type to the variable 'nan_policy' (line 992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 18), 'nan_policy', tuple_var_assignment_579868_581223)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 994)
    contains_nan_581224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 994)
    nan_policy_581225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 24), 'nan_policy')
    str_581226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 994)
    result_eq_581227 = python_operator(stypy.reporting.localization.Localization(__file__, 994, 24), '==', nan_policy_581225, str_581226)
    
    # Applying the binary operator 'and' (line 994)
    result_and_keyword_581228 = python_operator(stypy.reporting.localization.Localization(__file__, 994, 7), 'and', contains_nan_581224, result_eq_581227)
    
    # Testing the type of an if condition (line 994)
    if_condition_581229 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 994, 4), result_and_keyword_581228)
    # Assigning a type to the variable 'if_condition_581229' (line 994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'if_condition_581229', if_condition_581229)
    # SSA begins for if statement (line 994)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 995):
    
    # Assigning a Call to a Name (line 995):
    
    # Call to masked_invalid(...): (line 995)
    # Processing the call arguments (line 995)
    # Getting the type of 'a' (line 995)
    a_581232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 30), 'a', False)
    # Processing the call keyword arguments (line 995)
    kwargs_581233 = {}
    # Getting the type of 'ma' (line 995)
    ma_581230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 995)
    masked_invalid_581231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 12), ma_581230, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 995)
    masked_invalid_call_result_581234 = invoke(stypy.reporting.localization.Localization(__file__, 995, 12), masked_invalid_581231, *[a_581232], **kwargs_581233)
    
    # Assigning a type to the variable 'a' (line 995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 8), 'a', masked_invalid_call_result_581234)
    
    # Call to variation(...): (line 996)
    # Processing the call arguments (line 996)
    # Getting the type of 'a' (line 996)
    a_581237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 38), 'a', False)
    # Getting the type of 'axis' (line 996)
    axis_581238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 41), 'axis', False)
    # Processing the call keyword arguments (line 996)
    kwargs_581239 = {}
    # Getting the type of 'mstats_basic' (line 996)
    mstats_basic_581235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 15), 'mstats_basic', False)
    # Obtaining the member 'variation' of a type (line 996)
    variation_581236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 15), mstats_basic_581235, 'variation')
    # Calling variation(args, kwargs) (line 996)
    variation_call_result_581240 = invoke(stypy.reporting.localization.Localization(__file__, 996, 15), variation_581236, *[a_581237, axis_581238], **kwargs_581239)
    
    # Assigning a type to the variable 'stypy_return_type' (line 996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 8), 'stypy_return_type', variation_call_result_581240)
    # SSA join for if statement (line 994)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to std(...): (line 998)
    # Processing the call arguments (line 998)
    # Getting the type of 'axis' (line 998)
    axis_581243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 17), 'axis', False)
    # Processing the call keyword arguments (line 998)
    kwargs_581244 = {}
    # Getting the type of 'a' (line 998)
    a_581241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 11), 'a', False)
    # Obtaining the member 'std' of a type (line 998)
    std_581242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 11), a_581241, 'std')
    # Calling std(args, kwargs) (line 998)
    std_call_result_581245 = invoke(stypy.reporting.localization.Localization(__file__, 998, 11), std_581242, *[axis_581243], **kwargs_581244)
    
    
    # Call to mean(...): (line 998)
    # Processing the call arguments (line 998)
    # Getting the type of 'axis' (line 998)
    axis_581248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 32), 'axis', False)
    # Processing the call keyword arguments (line 998)
    kwargs_581249 = {}
    # Getting the type of 'a' (line 998)
    a_581246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 25), 'a', False)
    # Obtaining the member 'mean' of a type (line 998)
    mean_581247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 25), a_581246, 'mean')
    # Calling mean(args, kwargs) (line 998)
    mean_call_result_581250 = invoke(stypy.reporting.localization.Localization(__file__, 998, 25), mean_581247, *[axis_581248], **kwargs_581249)
    
    # Applying the binary operator 'div' (line 998)
    result_div_581251 = python_operator(stypy.reporting.localization.Localization(__file__, 998, 11), 'div', std_call_result_581245, mean_call_result_581250)
    
    # Assigning a type to the variable 'stypy_return_type' (line 998)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 4), 'stypy_return_type', result_div_581251)
    
    # ################# End of 'variation(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'variation' in the type store
    # Getting the type of 'stypy_return_type' (line 956)
    stypy_return_type_581252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_581252)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'variation'
    return stypy_return_type_581252

# Assigning a type to the variable 'variation' (line 956)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 0), 'variation', variation)

@norecursion
def skew(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_581253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 17), 'int')
    # Getting the type of 'True' (line 1001)
    True_581254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 25), 'True')
    str_581255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 42), 'str', 'propagate')
    defaults = [int_581253, True_581254, str_581255]
    # Create a new context for function 'skew'
    module_type_store = module_type_store.open_function_context('skew', 1001, 0, False)
    
    # Passed parameters checking function
    skew.stypy_localization = localization
    skew.stypy_type_of_self = None
    skew.stypy_type_store = module_type_store
    skew.stypy_function_name = 'skew'
    skew.stypy_param_names_list = ['a', 'axis', 'bias', 'nan_policy']
    skew.stypy_varargs_param_name = None
    skew.stypy_kwargs_param_name = None
    skew.stypy_call_defaults = defaults
    skew.stypy_call_varargs = varargs
    skew.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'skew', ['a', 'axis', 'bias', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'skew', localization, ['a', 'axis', 'bias', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'skew(...)' code ##################

    str_581256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, (-1)), 'str', "\n    Compute the skewness of a data set.\n\n    For normally distributed data, the skewness should be about 0. For\n    unimodal continuous distributions, a skewness value > 0 means that\n    there is more weight in the right tail of the distribution. The\n    function `skewtest` can be used to determine if the skewness value\n    is close enough to 0, statistically speaking.\n\n    Parameters\n    ----------\n    a : ndarray\n        data\n    axis : int or None, optional\n        Axis along which skewness is calculated. Default is 0.\n        If None, compute over the whole array `a`.\n    bias : bool, optional\n        If False, then the calculations are corrected for statistical bias.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    skewness : ndarray\n        The skewness of values along an axis, returning 0 where all values are\n        equal.\n\n    References\n    ----------\n\n    .. [1] Zwillinger, D. and Kokoska, S. (2000). CRC Standard\n       Probability and Statistics Tables and Formulae. Chapman & Hall: New\n       York. 2000.\n       Section 2.2.24.1\n\n    Examples\n    --------\n    >>> from scipy.stats import skew\n    >>> skew([1, 2, 3, 4, 5])\n    0.0\n    >>> skew([2, 8, 0, 4, 1, 9, 9, 0])\n    0.2650554122698573\n    ")
    
    # Assigning a Call to a Tuple (line 1047):
    
    # Assigning a Subscript to a Name (line 1047):
    
    # Obtaining the type of the subscript
    int_581257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1047)
    # Processing the call arguments (line 1047)
    # Getting the type of 'a' (line 1047)
    a_581259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 27), 'a', False)
    # Getting the type of 'axis' (line 1047)
    axis_581260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 30), 'axis', False)
    # Processing the call keyword arguments (line 1047)
    kwargs_581261 = {}
    # Getting the type of '_chk_asarray' (line 1047)
    _chk_asarray_581258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1047)
    _chk_asarray_call_result_581262 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 14), _chk_asarray_581258, *[a_581259, axis_581260], **kwargs_581261)
    
    # Obtaining the member '__getitem__' of a type (line 1047)
    getitem___581263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 4), _chk_asarray_call_result_581262, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1047)
    subscript_call_result_581264 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 4), getitem___581263, int_581257)
    
    # Assigning a type to the variable 'tuple_var_assignment_579869' (line 1047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'tuple_var_assignment_579869', subscript_call_result_581264)
    
    # Assigning a Subscript to a Name (line 1047):
    
    # Obtaining the type of the subscript
    int_581265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1047)
    # Processing the call arguments (line 1047)
    # Getting the type of 'a' (line 1047)
    a_581267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 27), 'a', False)
    # Getting the type of 'axis' (line 1047)
    axis_581268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 30), 'axis', False)
    # Processing the call keyword arguments (line 1047)
    kwargs_581269 = {}
    # Getting the type of '_chk_asarray' (line 1047)
    _chk_asarray_581266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1047)
    _chk_asarray_call_result_581270 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 14), _chk_asarray_581266, *[a_581267, axis_581268], **kwargs_581269)
    
    # Obtaining the member '__getitem__' of a type (line 1047)
    getitem___581271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 4), _chk_asarray_call_result_581270, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1047)
    subscript_call_result_581272 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 4), getitem___581271, int_581265)
    
    # Assigning a type to the variable 'tuple_var_assignment_579870' (line 1047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'tuple_var_assignment_579870', subscript_call_result_581272)
    
    # Assigning a Name to a Name (line 1047):
    # Getting the type of 'tuple_var_assignment_579869' (line 1047)
    tuple_var_assignment_579869_581273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'tuple_var_assignment_579869')
    # Assigning a type to the variable 'a' (line 1047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'a', tuple_var_assignment_579869_581273)
    
    # Assigning a Name to a Name (line 1047):
    # Getting the type of 'tuple_var_assignment_579870' (line 1047)
    tuple_var_assignment_579870_581274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'tuple_var_assignment_579870')
    # Assigning a type to the variable 'axis' (line 1047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 7), 'axis', tuple_var_assignment_579870_581274)
    
    # Assigning a Subscript to a Name (line 1048):
    
    # Assigning a Subscript to a Name (line 1048):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1048)
    axis_581275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 16), 'axis')
    # Getting the type of 'a' (line 1048)
    a_581276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 8), 'a')
    # Obtaining the member 'shape' of a type (line 1048)
    shape_581277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 8), a_581276, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1048)
    getitem___581278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 8), shape_581277, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1048)
    subscript_call_result_581279 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 8), getitem___581278, axis_581275)
    
    # Assigning a type to the variable 'n' (line 1048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 4), 'n', subscript_call_result_581279)
    
    # Assigning a Call to a Tuple (line 1050):
    
    # Assigning a Subscript to a Name (line 1050):
    
    # Obtaining the type of the subscript
    int_581280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 4), 'int')
    
    # Call to _contains_nan(...): (line 1050)
    # Processing the call arguments (line 1050)
    # Getting the type of 'a' (line 1050)
    a_581282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1050)
    nan_policy_581283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1050)
    kwargs_581284 = {}
    # Getting the type of '_contains_nan' (line 1050)
    _contains_nan_581281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1050)
    _contains_nan_call_result_581285 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 31), _contains_nan_581281, *[a_581282, nan_policy_581283], **kwargs_581284)
    
    # Obtaining the member '__getitem__' of a type (line 1050)
    getitem___581286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 4), _contains_nan_call_result_581285, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1050)
    subscript_call_result_581287 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 4), getitem___581286, int_581280)
    
    # Assigning a type to the variable 'tuple_var_assignment_579871' (line 1050)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 4), 'tuple_var_assignment_579871', subscript_call_result_581287)
    
    # Assigning a Subscript to a Name (line 1050):
    
    # Obtaining the type of the subscript
    int_581288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 4), 'int')
    
    # Call to _contains_nan(...): (line 1050)
    # Processing the call arguments (line 1050)
    # Getting the type of 'a' (line 1050)
    a_581290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1050)
    nan_policy_581291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1050)
    kwargs_581292 = {}
    # Getting the type of '_contains_nan' (line 1050)
    _contains_nan_581289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1050)
    _contains_nan_call_result_581293 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 31), _contains_nan_581289, *[a_581290, nan_policy_581291], **kwargs_581292)
    
    # Obtaining the member '__getitem__' of a type (line 1050)
    getitem___581294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 4), _contains_nan_call_result_581293, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1050)
    subscript_call_result_581295 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 4), getitem___581294, int_581288)
    
    # Assigning a type to the variable 'tuple_var_assignment_579872' (line 1050)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 4), 'tuple_var_assignment_579872', subscript_call_result_581295)
    
    # Assigning a Name to a Name (line 1050):
    # Getting the type of 'tuple_var_assignment_579871' (line 1050)
    tuple_var_assignment_579871_581296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 4), 'tuple_var_assignment_579871')
    # Assigning a type to the variable 'contains_nan' (line 1050)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 4), 'contains_nan', tuple_var_assignment_579871_581296)
    
    # Assigning a Name to a Name (line 1050):
    # Getting the type of 'tuple_var_assignment_579872' (line 1050)
    tuple_var_assignment_579872_581297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 4), 'tuple_var_assignment_579872')
    # Assigning a type to the variable 'nan_policy' (line 1050)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 18), 'nan_policy', tuple_var_assignment_579872_581297)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 1052)
    contains_nan_581298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 1052)
    nan_policy_581299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 24), 'nan_policy')
    str_581300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 1052)
    result_eq_581301 = python_operator(stypy.reporting.localization.Localization(__file__, 1052, 24), '==', nan_policy_581299, str_581300)
    
    # Applying the binary operator 'and' (line 1052)
    result_and_keyword_581302 = python_operator(stypy.reporting.localization.Localization(__file__, 1052, 7), 'and', contains_nan_581298, result_eq_581301)
    
    # Testing the type of an if condition (line 1052)
    if_condition_581303 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1052, 4), result_and_keyword_581302)
    # Assigning a type to the variable 'if_condition_581303' (line 1052)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 4), 'if_condition_581303', if_condition_581303)
    # SSA begins for if statement (line 1052)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1053):
    
    # Assigning a Call to a Name (line 1053):
    
    # Call to masked_invalid(...): (line 1053)
    # Processing the call arguments (line 1053)
    # Getting the type of 'a' (line 1053)
    a_581306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 30), 'a', False)
    # Processing the call keyword arguments (line 1053)
    kwargs_581307 = {}
    # Getting the type of 'ma' (line 1053)
    ma_581304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 1053)
    masked_invalid_581305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 12), ma_581304, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 1053)
    masked_invalid_call_result_581308 = invoke(stypy.reporting.localization.Localization(__file__, 1053, 12), masked_invalid_581305, *[a_581306], **kwargs_581307)
    
    # Assigning a type to the variable 'a' (line 1053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 8), 'a', masked_invalid_call_result_581308)
    
    # Call to skew(...): (line 1054)
    # Processing the call arguments (line 1054)
    # Getting the type of 'a' (line 1054)
    a_581311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 33), 'a', False)
    # Getting the type of 'axis' (line 1054)
    axis_581312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 36), 'axis', False)
    # Getting the type of 'bias' (line 1054)
    bias_581313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 42), 'bias', False)
    # Processing the call keyword arguments (line 1054)
    kwargs_581314 = {}
    # Getting the type of 'mstats_basic' (line 1054)
    mstats_basic_581309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 15), 'mstats_basic', False)
    # Obtaining the member 'skew' of a type (line 1054)
    skew_581310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 15), mstats_basic_581309, 'skew')
    # Calling skew(args, kwargs) (line 1054)
    skew_call_result_581315 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 15), skew_581310, *[a_581311, axis_581312, bias_581313], **kwargs_581314)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1054)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1054, 8), 'stypy_return_type', skew_call_result_581315)
    # SSA join for if statement (line 1052)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1056):
    
    # Assigning a Call to a Name (line 1056):
    
    # Call to moment(...): (line 1056)
    # Processing the call arguments (line 1056)
    # Getting the type of 'a' (line 1056)
    a_581317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 16), 'a', False)
    int_581318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1056, 19), 'int')
    # Getting the type of 'axis' (line 1056)
    axis_581319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 22), 'axis', False)
    # Processing the call keyword arguments (line 1056)
    kwargs_581320 = {}
    # Getting the type of 'moment' (line 1056)
    moment_581316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 9), 'moment', False)
    # Calling moment(args, kwargs) (line 1056)
    moment_call_result_581321 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 9), moment_581316, *[a_581317, int_581318, axis_581319], **kwargs_581320)
    
    # Assigning a type to the variable 'm2' (line 1056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 4), 'm2', moment_call_result_581321)
    
    # Assigning a Call to a Name (line 1057):
    
    # Assigning a Call to a Name (line 1057):
    
    # Call to moment(...): (line 1057)
    # Processing the call arguments (line 1057)
    # Getting the type of 'a' (line 1057)
    a_581323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 16), 'a', False)
    int_581324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 19), 'int')
    # Getting the type of 'axis' (line 1057)
    axis_581325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 22), 'axis', False)
    # Processing the call keyword arguments (line 1057)
    kwargs_581326 = {}
    # Getting the type of 'moment' (line 1057)
    moment_581322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 9), 'moment', False)
    # Calling moment(args, kwargs) (line 1057)
    moment_call_result_581327 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 9), moment_581322, *[a_581323, int_581324, axis_581325], **kwargs_581326)
    
    # Assigning a type to the variable 'm3' (line 1057)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 4), 'm3', moment_call_result_581327)
    
    # Assigning a Compare to a Name (line 1058):
    
    # Assigning a Compare to a Name (line 1058):
    
    # Getting the type of 'm2' (line 1058)
    m2_581328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 12), 'm2')
    int_581329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1058, 18), 'int')
    # Applying the binary operator '==' (line 1058)
    result_eq_581330 = python_operator(stypy.reporting.localization.Localization(__file__, 1058, 12), '==', m2_581328, int_581329)
    
    # Assigning a type to the variable 'zero' (line 1058)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 4), 'zero', result_eq_581330)
    
    # Assigning a Call to a Name (line 1059):
    
    # Assigning a Call to a Name (line 1059):
    
    # Call to _lazywhere(...): (line 1059)
    # Processing the call arguments (line 1059)
    
    # Getting the type of 'zero' (line 1059)
    zero_581332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 23), 'zero', False)
    # Applying the '~' unary operator (line 1059)
    result_inv_581333 = python_operator(stypy.reporting.localization.Localization(__file__, 1059, 22), '~', zero_581332)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1059)
    tuple_581334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1059, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1059)
    # Adding element type (line 1059)
    # Getting the type of 'm2' (line 1059)
    m2_581335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 30), 'm2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1059, 30), tuple_581334, m2_581335)
    # Adding element type (line 1059)
    # Getting the type of 'm3' (line 1059)
    m3_581336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 34), 'm3', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1059, 30), tuple_581334, m3_581336)
    

    @norecursion
    def _stypy_temp_lambda_495(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_495'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_495', 1060, 22, True)
        # Passed parameters checking function
        _stypy_temp_lambda_495.stypy_localization = localization
        _stypy_temp_lambda_495.stypy_type_of_self = None
        _stypy_temp_lambda_495.stypy_type_store = module_type_store
        _stypy_temp_lambda_495.stypy_function_name = '_stypy_temp_lambda_495'
        _stypy_temp_lambda_495.stypy_param_names_list = ['m2', 'm3']
        _stypy_temp_lambda_495.stypy_varargs_param_name = None
        _stypy_temp_lambda_495.stypy_kwargs_param_name = None
        _stypy_temp_lambda_495.stypy_call_defaults = defaults
        _stypy_temp_lambda_495.stypy_call_varargs = varargs
        _stypy_temp_lambda_495.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_495', ['m2', 'm3'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_495', ['m2', 'm3'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        # Getting the type of 'm3' (line 1060)
        m3_581337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 37), 'm3', False)
        # Getting the type of 'm2' (line 1060)
        m2_581338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 42), 'm2', False)
        float_581339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 46), 'float')
        # Applying the binary operator '**' (line 1060)
        result_pow_581340 = python_operator(stypy.reporting.localization.Localization(__file__, 1060, 42), '**', m2_581338, float_581339)
        
        # Applying the binary operator 'div' (line 1060)
        result_div_581341 = python_operator(stypy.reporting.localization.Localization(__file__, 1060, 37), 'div', m3_581337, result_pow_581340)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 22), 'stypy_return_type', result_div_581341)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_495' in the type store
        # Getting the type of 'stypy_return_type' (line 1060)
        stypy_return_type_581342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 22), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_581342)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_495'
        return stypy_return_type_581342

    # Assigning a type to the variable '_stypy_temp_lambda_495' (line 1060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 22), '_stypy_temp_lambda_495', _stypy_temp_lambda_495)
    # Getting the type of '_stypy_temp_lambda_495' (line 1060)
    _stypy_temp_lambda_495_581343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 22), '_stypy_temp_lambda_495')
    float_581344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 22), 'float')
    # Processing the call keyword arguments (line 1059)
    kwargs_581345 = {}
    # Getting the type of '_lazywhere' (line 1059)
    _lazywhere_581331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 11), '_lazywhere', False)
    # Calling _lazywhere(args, kwargs) (line 1059)
    _lazywhere_call_result_581346 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 11), _lazywhere_581331, *[result_inv_581333, tuple_581334, _stypy_temp_lambda_495_581343, float_581344], **kwargs_581345)
    
    # Assigning a type to the variable 'vals' (line 1059)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 4), 'vals', _lazywhere_call_result_581346)
    
    
    # Getting the type of 'bias' (line 1062)
    bias_581347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 11), 'bias')
    # Applying the 'not' unary operator (line 1062)
    result_not__581348 = python_operator(stypy.reporting.localization.Localization(__file__, 1062, 7), 'not', bias_581347)
    
    # Testing the type of an if condition (line 1062)
    if_condition_581349 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1062, 4), result_not__581348)
    # Assigning a type to the variable 'if_condition_581349' (line 1062)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 4), 'if_condition_581349', if_condition_581349)
    # SSA begins for if statement (line 1062)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1063):
    
    # Assigning a BinOp to a Name (line 1063):
    
    # Getting the type of 'n' (line 1063)
    n_581350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 23), 'n')
    int_581351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, 27), 'int')
    # Applying the binary operator '>' (line 1063)
    result_gt_581352 = python_operator(stypy.reporting.localization.Localization(__file__, 1063, 23), '>', n_581350, int_581351)
    
    
    # Getting the type of 'm2' (line 1063)
    m2_581353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 33), 'm2')
    int_581354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, 38), 'int')
    # Applying the binary operator '>' (line 1063)
    result_gt_581355 = python_operator(stypy.reporting.localization.Localization(__file__, 1063, 33), '>', m2_581353, int_581354)
    
    # Applying the binary operator '&' (line 1063)
    result_and__581356 = python_operator(stypy.reporting.localization.Localization(__file__, 1063, 22), '&', result_gt_581352, result_gt_581355)
    
    # Assigning a type to the variable 'can_correct' (line 1063)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1063, 8), 'can_correct', result_and__581356)
    
    
    # Call to any(...): (line 1064)
    # Processing the call keyword arguments (line 1064)
    kwargs_581359 = {}
    # Getting the type of 'can_correct' (line 1064)
    can_correct_581357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 11), 'can_correct', False)
    # Obtaining the member 'any' of a type (line 1064)
    any_581358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1064, 11), can_correct_581357, 'any')
    # Calling any(args, kwargs) (line 1064)
    any_call_result_581360 = invoke(stypy.reporting.localization.Localization(__file__, 1064, 11), any_581358, *[], **kwargs_581359)
    
    # Testing the type of an if condition (line 1064)
    if_condition_581361 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1064, 8), any_call_result_581360)
    # Assigning a type to the variable 'if_condition_581361' (line 1064)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1064, 8), 'if_condition_581361', if_condition_581361)
    # SSA begins for if statement (line 1064)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1065):
    
    # Assigning a Call to a Name (line 1065):
    
    # Call to extract(...): (line 1065)
    # Processing the call arguments (line 1065)
    # Getting the type of 'can_correct' (line 1065)
    can_correct_581364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 28), 'can_correct', False)
    # Getting the type of 'm2' (line 1065)
    m2_581365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 41), 'm2', False)
    # Processing the call keyword arguments (line 1065)
    kwargs_581366 = {}
    # Getting the type of 'np' (line 1065)
    np_581362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 17), 'np', False)
    # Obtaining the member 'extract' of a type (line 1065)
    extract_581363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 17), np_581362, 'extract')
    # Calling extract(args, kwargs) (line 1065)
    extract_call_result_581367 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 17), extract_581363, *[can_correct_581364, m2_581365], **kwargs_581366)
    
    # Assigning a type to the variable 'm2' (line 1065)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 12), 'm2', extract_call_result_581367)
    
    # Assigning a Call to a Name (line 1066):
    
    # Assigning a Call to a Name (line 1066):
    
    # Call to extract(...): (line 1066)
    # Processing the call arguments (line 1066)
    # Getting the type of 'can_correct' (line 1066)
    can_correct_581370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 28), 'can_correct', False)
    # Getting the type of 'm3' (line 1066)
    m3_581371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 41), 'm3', False)
    # Processing the call keyword arguments (line 1066)
    kwargs_581372 = {}
    # Getting the type of 'np' (line 1066)
    np_581368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 17), 'np', False)
    # Obtaining the member 'extract' of a type (line 1066)
    extract_581369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 17), np_581368, 'extract')
    # Calling extract(args, kwargs) (line 1066)
    extract_call_result_581373 = invoke(stypy.reporting.localization.Localization(__file__, 1066, 17), extract_581369, *[can_correct_581370, m3_581371], **kwargs_581372)
    
    # Assigning a type to the variable 'm3' (line 1066)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1066, 12), 'm3', extract_call_result_581373)
    
    # Assigning a BinOp to a Name (line 1067):
    
    # Assigning a BinOp to a Name (line 1067):
    
    # Call to sqrt(...): (line 1067)
    # Processing the call arguments (line 1067)
    # Getting the type of 'n' (line 1067)
    n_581376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 28), 'n', False)
    float_581377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 32), 'float')
    # Applying the binary operator '-' (line 1067)
    result_sub_581378 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 28), '-', n_581376, float_581377)
    
    # Getting the type of 'n' (line 1067)
    n_581379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 39), 'n', False)
    # Applying the binary operator '*' (line 1067)
    result_mul_581380 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 27), '*', result_sub_581378, n_581379)
    
    # Processing the call keyword arguments (line 1067)
    kwargs_581381 = {}
    # Getting the type of 'np' (line 1067)
    np_581374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 19), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1067)
    sqrt_581375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 19), np_581374, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1067)
    sqrt_call_result_581382 = invoke(stypy.reporting.localization.Localization(__file__, 1067, 19), sqrt_581375, *[result_mul_581380], **kwargs_581381)
    
    # Getting the type of 'n' (line 1067)
    n_581383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 45), 'n')
    float_581384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 49), 'float')
    # Applying the binary operator '-' (line 1067)
    result_sub_581385 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 45), '-', n_581383, float_581384)
    
    # Applying the binary operator 'div' (line 1067)
    result_div_581386 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 19), 'div', sqrt_call_result_581382, result_sub_581385)
    
    # Getting the type of 'm3' (line 1067)
    m3_581387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 56), 'm3')
    # Applying the binary operator '*' (line 1067)
    result_mul_581388 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 54), '*', result_div_581386, m3_581387)
    
    # Getting the type of 'm2' (line 1067)
    m2_581389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 61), 'm2')
    float_581390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 65), 'float')
    # Applying the binary operator '**' (line 1067)
    result_pow_581391 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 61), '**', m2_581389, float_581390)
    
    # Applying the binary operator 'div' (line 1067)
    result_div_581392 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 59), 'div', result_mul_581388, result_pow_581391)
    
    # Assigning a type to the variable 'nval' (line 1067)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 12), 'nval', result_div_581392)
    
    # Call to place(...): (line 1068)
    # Processing the call arguments (line 1068)
    # Getting the type of 'vals' (line 1068)
    vals_581395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 21), 'vals', False)
    # Getting the type of 'can_correct' (line 1068)
    can_correct_581396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 27), 'can_correct', False)
    # Getting the type of 'nval' (line 1068)
    nval_581397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 40), 'nval', False)
    # Processing the call keyword arguments (line 1068)
    kwargs_581398 = {}
    # Getting the type of 'np' (line 1068)
    np_581393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 12), 'np', False)
    # Obtaining the member 'place' of a type (line 1068)
    place_581394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 12), np_581393, 'place')
    # Calling place(args, kwargs) (line 1068)
    place_call_result_581399 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 12), place_581394, *[vals_581395, can_correct_581396, nval_581397], **kwargs_581398)
    
    # SSA join for if statement (line 1064)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1062)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'vals' (line 1070)
    vals_581400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 7), 'vals')
    # Obtaining the member 'ndim' of a type (line 1070)
    ndim_581401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 7), vals_581400, 'ndim')
    int_581402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1070, 20), 'int')
    # Applying the binary operator '==' (line 1070)
    result_eq_581403 = python_operator(stypy.reporting.localization.Localization(__file__, 1070, 7), '==', ndim_581401, int_581402)
    
    # Testing the type of an if condition (line 1070)
    if_condition_581404 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1070, 4), result_eq_581403)
    # Assigning a type to the variable 'if_condition_581404' (line 1070)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 4), 'if_condition_581404', if_condition_581404)
    # SSA begins for if statement (line 1070)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to item(...): (line 1071)
    # Processing the call keyword arguments (line 1071)
    kwargs_581407 = {}
    # Getting the type of 'vals' (line 1071)
    vals_581405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 15), 'vals', False)
    # Obtaining the member 'item' of a type (line 1071)
    item_581406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 15), vals_581405, 'item')
    # Calling item(args, kwargs) (line 1071)
    item_call_result_581408 = invoke(stypy.reporting.localization.Localization(__file__, 1071, 15), item_581406, *[], **kwargs_581407)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1071)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1071, 8), 'stypy_return_type', item_call_result_581408)
    # SSA join for if statement (line 1070)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'vals' (line 1073)
    vals_581409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 11), 'vals')
    # Assigning a type to the variable 'stypy_return_type' (line 1073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 4), 'stypy_return_type', vals_581409)
    
    # ################# End of 'skew(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'skew' in the type store
    # Getting the type of 'stypy_return_type' (line 1001)
    stypy_return_type_581410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_581410)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'skew'
    return stypy_return_type_581410

# Assigning a type to the variable 'skew' (line 1001)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 0), 'skew', skew)

@norecursion
def kurtosis(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_581411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1076, 21), 'int')
    # Getting the type of 'True' (line 1076)
    True_581412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 31), 'True')
    # Getting the type of 'True' (line 1076)
    True_581413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 42), 'True')
    str_581414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1076, 59), 'str', 'propagate')
    defaults = [int_581411, True_581412, True_581413, str_581414]
    # Create a new context for function 'kurtosis'
    module_type_store = module_type_store.open_function_context('kurtosis', 1076, 0, False)
    
    # Passed parameters checking function
    kurtosis.stypy_localization = localization
    kurtosis.stypy_type_of_self = None
    kurtosis.stypy_type_store = module_type_store
    kurtosis.stypy_function_name = 'kurtosis'
    kurtosis.stypy_param_names_list = ['a', 'axis', 'fisher', 'bias', 'nan_policy']
    kurtosis.stypy_varargs_param_name = None
    kurtosis.stypy_kwargs_param_name = None
    kurtosis.stypy_call_defaults = defaults
    kurtosis.stypy_call_varargs = varargs
    kurtosis.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kurtosis', ['a', 'axis', 'fisher', 'bias', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kurtosis', localization, ['a', 'axis', 'fisher', 'bias', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kurtosis(...)' code ##################

    str_581415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, (-1)), 'str', "\n    Compute the kurtosis (Fisher or Pearson) of a dataset.\n\n    Kurtosis is the fourth central moment divided by the square of the\n    variance. If Fisher's definition is used, then 3.0 is subtracted from\n    the result to give 0.0 for a normal distribution.\n\n    If bias is False then the kurtosis is calculated using k statistics to\n    eliminate bias coming from biased moment estimators\n\n    Use `kurtosistest` to see if result is close enough to normal.\n\n    Parameters\n    ----------\n    a : array\n        data for which the kurtosis is calculated\n    axis : int or None, optional\n        Axis along which the kurtosis is calculated. Default is 0.\n        If None, compute over the whole array `a`.\n    fisher : bool, optional\n        If True, Fisher's definition is used (normal ==> 0.0). If False,\n        Pearson's definition is used (normal ==> 3.0).\n    bias : bool, optional\n        If False, then the calculations are corrected for statistical bias.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    kurtosis : array\n        The kurtosis of values along an axis. If all values are equal,\n        return -3 for Fisher's definition and 0 for Pearson's definition.\n\n    References\n    ----------\n    .. [1] Zwillinger, D. and Kokoska, S. (2000). CRC Standard\n       Probability and Statistics Tables and Formulae. Chapman & Hall: New\n       York. 2000.\n\n    Examples\n    --------\n    >>> from scipy.stats import kurtosis\n    >>> kurtosis([1, 2, 3, 4, 5])\n    -1.3\n    ")
    
    # Assigning a Call to a Tuple (line 1124):
    
    # Assigning a Subscript to a Name (line 1124):
    
    # Obtaining the type of the subscript
    int_581416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1124)
    # Processing the call arguments (line 1124)
    # Getting the type of 'a' (line 1124)
    a_581418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 27), 'a', False)
    # Getting the type of 'axis' (line 1124)
    axis_581419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 30), 'axis', False)
    # Processing the call keyword arguments (line 1124)
    kwargs_581420 = {}
    # Getting the type of '_chk_asarray' (line 1124)
    _chk_asarray_581417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1124)
    _chk_asarray_call_result_581421 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 14), _chk_asarray_581417, *[a_581418, axis_581419], **kwargs_581420)
    
    # Obtaining the member '__getitem__' of a type (line 1124)
    getitem___581422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 4), _chk_asarray_call_result_581421, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1124)
    subscript_call_result_581423 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 4), getitem___581422, int_581416)
    
    # Assigning a type to the variable 'tuple_var_assignment_579873' (line 1124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 4), 'tuple_var_assignment_579873', subscript_call_result_581423)
    
    # Assigning a Subscript to a Name (line 1124):
    
    # Obtaining the type of the subscript
    int_581424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1124)
    # Processing the call arguments (line 1124)
    # Getting the type of 'a' (line 1124)
    a_581426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 27), 'a', False)
    # Getting the type of 'axis' (line 1124)
    axis_581427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 30), 'axis', False)
    # Processing the call keyword arguments (line 1124)
    kwargs_581428 = {}
    # Getting the type of '_chk_asarray' (line 1124)
    _chk_asarray_581425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1124)
    _chk_asarray_call_result_581429 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 14), _chk_asarray_581425, *[a_581426, axis_581427], **kwargs_581428)
    
    # Obtaining the member '__getitem__' of a type (line 1124)
    getitem___581430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 4), _chk_asarray_call_result_581429, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1124)
    subscript_call_result_581431 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 4), getitem___581430, int_581424)
    
    # Assigning a type to the variable 'tuple_var_assignment_579874' (line 1124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 4), 'tuple_var_assignment_579874', subscript_call_result_581431)
    
    # Assigning a Name to a Name (line 1124):
    # Getting the type of 'tuple_var_assignment_579873' (line 1124)
    tuple_var_assignment_579873_581432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 4), 'tuple_var_assignment_579873')
    # Assigning a type to the variable 'a' (line 1124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 4), 'a', tuple_var_assignment_579873_581432)
    
    # Assigning a Name to a Name (line 1124):
    # Getting the type of 'tuple_var_assignment_579874' (line 1124)
    tuple_var_assignment_579874_581433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 4), 'tuple_var_assignment_579874')
    # Assigning a type to the variable 'axis' (line 1124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 7), 'axis', tuple_var_assignment_579874_581433)
    
    # Assigning a Call to a Tuple (line 1126):
    
    # Assigning a Subscript to a Name (line 1126):
    
    # Obtaining the type of the subscript
    int_581434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 4), 'int')
    
    # Call to _contains_nan(...): (line 1126)
    # Processing the call arguments (line 1126)
    # Getting the type of 'a' (line 1126)
    a_581436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1126)
    nan_policy_581437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1126)
    kwargs_581438 = {}
    # Getting the type of '_contains_nan' (line 1126)
    _contains_nan_581435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1126)
    _contains_nan_call_result_581439 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 31), _contains_nan_581435, *[a_581436, nan_policy_581437], **kwargs_581438)
    
    # Obtaining the member '__getitem__' of a type (line 1126)
    getitem___581440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 4), _contains_nan_call_result_581439, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
    subscript_call_result_581441 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 4), getitem___581440, int_581434)
    
    # Assigning a type to the variable 'tuple_var_assignment_579875' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'tuple_var_assignment_579875', subscript_call_result_581441)
    
    # Assigning a Subscript to a Name (line 1126):
    
    # Obtaining the type of the subscript
    int_581442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 4), 'int')
    
    # Call to _contains_nan(...): (line 1126)
    # Processing the call arguments (line 1126)
    # Getting the type of 'a' (line 1126)
    a_581444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1126)
    nan_policy_581445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1126)
    kwargs_581446 = {}
    # Getting the type of '_contains_nan' (line 1126)
    _contains_nan_581443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1126)
    _contains_nan_call_result_581447 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 31), _contains_nan_581443, *[a_581444, nan_policy_581445], **kwargs_581446)
    
    # Obtaining the member '__getitem__' of a type (line 1126)
    getitem___581448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 4), _contains_nan_call_result_581447, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
    subscript_call_result_581449 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 4), getitem___581448, int_581442)
    
    # Assigning a type to the variable 'tuple_var_assignment_579876' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'tuple_var_assignment_579876', subscript_call_result_581449)
    
    # Assigning a Name to a Name (line 1126):
    # Getting the type of 'tuple_var_assignment_579875' (line 1126)
    tuple_var_assignment_579875_581450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'tuple_var_assignment_579875')
    # Assigning a type to the variable 'contains_nan' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'contains_nan', tuple_var_assignment_579875_581450)
    
    # Assigning a Name to a Name (line 1126):
    # Getting the type of 'tuple_var_assignment_579876' (line 1126)
    tuple_var_assignment_579876_581451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'tuple_var_assignment_579876')
    # Assigning a type to the variable 'nan_policy' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 18), 'nan_policy', tuple_var_assignment_579876_581451)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 1128)
    contains_nan_581452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 1128)
    nan_policy_581453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 24), 'nan_policy')
    str_581454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 1128)
    result_eq_581455 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 24), '==', nan_policy_581453, str_581454)
    
    # Applying the binary operator 'and' (line 1128)
    result_and_keyword_581456 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 7), 'and', contains_nan_581452, result_eq_581455)
    
    # Testing the type of an if condition (line 1128)
    if_condition_581457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1128, 4), result_and_keyword_581456)
    # Assigning a type to the variable 'if_condition_581457' (line 1128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'if_condition_581457', if_condition_581457)
    # SSA begins for if statement (line 1128)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1129):
    
    # Assigning a Call to a Name (line 1129):
    
    # Call to masked_invalid(...): (line 1129)
    # Processing the call arguments (line 1129)
    # Getting the type of 'a' (line 1129)
    a_581460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 30), 'a', False)
    # Processing the call keyword arguments (line 1129)
    kwargs_581461 = {}
    # Getting the type of 'ma' (line 1129)
    ma_581458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 1129)
    masked_invalid_581459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 12), ma_581458, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 1129)
    masked_invalid_call_result_581462 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 12), masked_invalid_581459, *[a_581460], **kwargs_581461)
    
    # Assigning a type to the variable 'a' (line 1129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'a', masked_invalid_call_result_581462)
    
    # Call to kurtosis(...): (line 1130)
    # Processing the call arguments (line 1130)
    # Getting the type of 'a' (line 1130)
    a_581465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 37), 'a', False)
    # Getting the type of 'axis' (line 1130)
    axis_581466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 40), 'axis', False)
    # Getting the type of 'fisher' (line 1130)
    fisher_581467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 46), 'fisher', False)
    # Getting the type of 'bias' (line 1130)
    bias_581468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 54), 'bias', False)
    # Processing the call keyword arguments (line 1130)
    kwargs_581469 = {}
    # Getting the type of 'mstats_basic' (line 1130)
    mstats_basic_581463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 15), 'mstats_basic', False)
    # Obtaining the member 'kurtosis' of a type (line 1130)
    kurtosis_581464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 15), mstats_basic_581463, 'kurtosis')
    # Calling kurtosis(args, kwargs) (line 1130)
    kurtosis_call_result_581470 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 15), kurtosis_581464, *[a_581465, axis_581466, fisher_581467, bias_581468], **kwargs_581469)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'stypy_return_type', kurtosis_call_result_581470)
    # SSA join for if statement (line 1128)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1132):
    
    # Assigning a Subscript to a Name (line 1132):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1132)
    axis_581471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 16), 'axis')
    # Getting the type of 'a' (line 1132)
    a_581472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'a')
    # Obtaining the member 'shape' of a type (line 1132)
    shape_581473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 8), a_581472, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1132)
    getitem___581474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 8), shape_581473, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1132)
    subscript_call_result_581475 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 8), getitem___581474, axis_581471)
    
    # Assigning a type to the variable 'n' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 4), 'n', subscript_call_result_581475)
    
    # Assigning a Call to a Name (line 1133):
    
    # Assigning a Call to a Name (line 1133):
    
    # Call to moment(...): (line 1133)
    # Processing the call arguments (line 1133)
    # Getting the type of 'a' (line 1133)
    a_581477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 16), 'a', False)
    int_581478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1133, 19), 'int')
    # Getting the type of 'axis' (line 1133)
    axis_581479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 22), 'axis', False)
    # Processing the call keyword arguments (line 1133)
    kwargs_581480 = {}
    # Getting the type of 'moment' (line 1133)
    moment_581476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 9), 'moment', False)
    # Calling moment(args, kwargs) (line 1133)
    moment_call_result_581481 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 9), moment_581476, *[a_581477, int_581478, axis_581479], **kwargs_581480)
    
    # Assigning a type to the variable 'm2' (line 1133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 4), 'm2', moment_call_result_581481)
    
    # Assigning a Call to a Name (line 1134):
    
    # Assigning a Call to a Name (line 1134):
    
    # Call to moment(...): (line 1134)
    # Processing the call arguments (line 1134)
    # Getting the type of 'a' (line 1134)
    a_581483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 16), 'a', False)
    int_581484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 19), 'int')
    # Getting the type of 'axis' (line 1134)
    axis_581485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 22), 'axis', False)
    # Processing the call keyword arguments (line 1134)
    kwargs_581486 = {}
    # Getting the type of 'moment' (line 1134)
    moment_581482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 9), 'moment', False)
    # Calling moment(args, kwargs) (line 1134)
    moment_call_result_581487 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 9), moment_581482, *[a_581483, int_581484, axis_581485], **kwargs_581486)
    
    # Assigning a type to the variable 'm4' (line 1134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 4), 'm4', moment_call_result_581487)
    
    # Assigning a Compare to a Name (line 1135):
    
    # Assigning a Compare to a Name (line 1135):
    
    # Getting the type of 'm2' (line 1135)
    m2_581488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 12), 'm2')
    int_581489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 18), 'int')
    # Applying the binary operator '==' (line 1135)
    result_eq_581490 = python_operator(stypy.reporting.localization.Localization(__file__, 1135, 12), '==', m2_581488, int_581489)
    
    # Assigning a type to the variable 'zero' (line 1135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 4), 'zero', result_eq_581490)
    
    # Assigning a Call to a Name (line 1136):
    
    # Assigning a Call to a Name (line 1136):
    
    # Call to seterr(...): (line 1136)
    # Processing the call keyword arguments (line 1136)
    str_581493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 27), 'str', 'ignore')
    keyword_581494 = str_581493
    kwargs_581495 = {'all': keyword_581494}
    # Getting the type of 'np' (line 1136)
    np_581491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 13), 'np', False)
    # Obtaining the member 'seterr' of a type (line 1136)
    seterr_581492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 13), np_581491, 'seterr')
    # Calling seterr(args, kwargs) (line 1136)
    seterr_call_result_581496 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 13), seterr_581492, *[], **kwargs_581495)
    
    # Assigning a type to the variable 'olderr' (line 1136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 4), 'olderr', seterr_call_result_581496)
    
    # Try-finally block (line 1137)
    
    # Assigning a Call to a Name (line 1138):
    
    # Assigning a Call to a Name (line 1138):
    
    # Call to where(...): (line 1138)
    # Processing the call arguments (line 1138)
    # Getting the type of 'zero' (line 1138)
    zero_581499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 24), 'zero', False)
    int_581500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 30), 'int')
    # Getting the type of 'm4' (line 1138)
    m4_581501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 33), 'm4', False)
    # Getting the type of 'm2' (line 1138)
    m2_581502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 38), 'm2', False)
    float_581503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 42), 'float')
    # Applying the binary operator '**' (line 1138)
    result_pow_581504 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 38), '**', m2_581502, float_581503)
    
    # Applying the binary operator 'div' (line 1138)
    result_div_581505 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 33), 'div', m4_581501, result_pow_581504)
    
    # Processing the call keyword arguments (line 1138)
    kwargs_581506 = {}
    # Getting the type of 'np' (line 1138)
    np_581497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 15), 'np', False)
    # Obtaining the member 'where' of a type (line 1138)
    where_581498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 15), np_581497, 'where')
    # Calling where(args, kwargs) (line 1138)
    where_call_result_581507 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 15), where_581498, *[zero_581499, int_581500, result_div_581505], **kwargs_581506)
    
    # Assigning a type to the variable 'vals' (line 1138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'vals', where_call_result_581507)
    
    # finally branch of the try-finally block (line 1137)
    
    # Call to seterr(...): (line 1140)
    # Processing the call keyword arguments (line 1140)
    # Getting the type of 'olderr' (line 1140)
    olderr_581510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 20), 'olderr', False)
    kwargs_581511 = {'olderr_581510': olderr_581510}
    # Getting the type of 'np' (line 1140)
    np_581508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'np', False)
    # Obtaining the member 'seterr' of a type (line 1140)
    seterr_581509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 8), np_581508, 'seterr')
    # Calling seterr(args, kwargs) (line 1140)
    seterr_call_result_581512 = invoke(stypy.reporting.localization.Localization(__file__, 1140, 8), seterr_581509, *[], **kwargs_581511)
    
    
    
    
    # Getting the type of 'bias' (line 1142)
    bias_581513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 11), 'bias')
    # Applying the 'not' unary operator (line 1142)
    result_not__581514 = python_operator(stypy.reporting.localization.Localization(__file__, 1142, 7), 'not', bias_581513)
    
    # Testing the type of an if condition (line 1142)
    if_condition_581515 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1142, 4), result_not__581514)
    # Assigning a type to the variable 'if_condition_581515' (line 1142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 4), 'if_condition_581515', if_condition_581515)
    # SSA begins for if statement (line 1142)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1143):
    
    # Assigning a BinOp to a Name (line 1143):
    
    # Getting the type of 'n' (line 1143)
    n_581516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 23), 'n')
    int_581517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 27), 'int')
    # Applying the binary operator '>' (line 1143)
    result_gt_581518 = python_operator(stypy.reporting.localization.Localization(__file__, 1143, 23), '>', n_581516, int_581517)
    
    
    # Getting the type of 'm2' (line 1143)
    m2_581519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 33), 'm2')
    int_581520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 38), 'int')
    # Applying the binary operator '>' (line 1143)
    result_gt_581521 = python_operator(stypy.reporting.localization.Localization(__file__, 1143, 33), '>', m2_581519, int_581520)
    
    # Applying the binary operator '&' (line 1143)
    result_and__581522 = python_operator(stypy.reporting.localization.Localization(__file__, 1143, 22), '&', result_gt_581518, result_gt_581521)
    
    # Assigning a type to the variable 'can_correct' (line 1143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 8), 'can_correct', result_and__581522)
    
    
    # Call to any(...): (line 1144)
    # Processing the call keyword arguments (line 1144)
    kwargs_581525 = {}
    # Getting the type of 'can_correct' (line 1144)
    can_correct_581523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 11), 'can_correct', False)
    # Obtaining the member 'any' of a type (line 1144)
    any_581524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 11), can_correct_581523, 'any')
    # Calling any(args, kwargs) (line 1144)
    any_call_result_581526 = invoke(stypy.reporting.localization.Localization(__file__, 1144, 11), any_581524, *[], **kwargs_581525)
    
    # Testing the type of an if condition (line 1144)
    if_condition_581527 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1144, 8), any_call_result_581526)
    # Assigning a type to the variable 'if_condition_581527' (line 1144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 8), 'if_condition_581527', if_condition_581527)
    # SSA begins for if statement (line 1144)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1145):
    
    # Assigning a Call to a Name (line 1145):
    
    # Call to extract(...): (line 1145)
    # Processing the call arguments (line 1145)
    # Getting the type of 'can_correct' (line 1145)
    can_correct_581530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 28), 'can_correct', False)
    # Getting the type of 'm2' (line 1145)
    m2_581531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 41), 'm2', False)
    # Processing the call keyword arguments (line 1145)
    kwargs_581532 = {}
    # Getting the type of 'np' (line 1145)
    np_581528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 17), 'np', False)
    # Obtaining the member 'extract' of a type (line 1145)
    extract_581529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 17), np_581528, 'extract')
    # Calling extract(args, kwargs) (line 1145)
    extract_call_result_581533 = invoke(stypy.reporting.localization.Localization(__file__, 1145, 17), extract_581529, *[can_correct_581530, m2_581531], **kwargs_581532)
    
    # Assigning a type to the variable 'm2' (line 1145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1145, 12), 'm2', extract_call_result_581533)
    
    # Assigning a Call to a Name (line 1146):
    
    # Assigning a Call to a Name (line 1146):
    
    # Call to extract(...): (line 1146)
    # Processing the call arguments (line 1146)
    # Getting the type of 'can_correct' (line 1146)
    can_correct_581536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 28), 'can_correct', False)
    # Getting the type of 'm4' (line 1146)
    m4_581537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 41), 'm4', False)
    # Processing the call keyword arguments (line 1146)
    kwargs_581538 = {}
    # Getting the type of 'np' (line 1146)
    np_581534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 17), 'np', False)
    # Obtaining the member 'extract' of a type (line 1146)
    extract_581535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 17), np_581534, 'extract')
    # Calling extract(args, kwargs) (line 1146)
    extract_call_result_581539 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 17), extract_581535, *[can_correct_581536, m4_581537], **kwargs_581538)
    
    # Assigning a type to the variable 'm4' (line 1146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 12), 'm4', extract_call_result_581539)
    
    # Assigning a BinOp to a Name (line 1147):
    
    # Assigning a BinOp to a Name (line 1147):
    float_581540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 19), 'float')
    # Getting the type of 'n' (line 1147)
    n_581541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 24), 'n')
    int_581542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 26), 'int')
    # Applying the binary operator '-' (line 1147)
    result_sub_581543 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 24), '-', n_581541, int_581542)
    
    # Applying the binary operator 'div' (line 1147)
    result_div_581544 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 19), 'div', float_581540, result_sub_581543)
    
    # Getting the type of 'n' (line 1147)
    n_581545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 30), 'n')
    int_581546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 32), 'int')
    # Applying the binary operator '-' (line 1147)
    result_sub_581547 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 30), '-', n_581545, int_581546)
    
    # Applying the binary operator 'div' (line 1147)
    result_div_581548 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 28), 'div', result_div_581544, result_sub_581547)
    
    # Getting the type of 'n' (line 1147)
    n_581549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 39), 'n')
    int_581550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 42), 'int')
    # Applying the binary operator '**' (line 1147)
    result_pow_581551 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 39), '**', n_581549, int_581550)
    
    float_581552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 44), 'float')
    # Applying the binary operator '-' (line 1147)
    result_sub_581553 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 39), '-', result_pow_581551, float_581552)
    
    # Getting the type of 'm4' (line 1147)
    m4_581554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 49), 'm4')
    # Applying the binary operator '*' (line 1147)
    result_mul_581555 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 38), '*', result_sub_581553, m4_581554)
    
    # Getting the type of 'm2' (line 1147)
    m2_581556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 52), 'm2')
    float_581557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 56), 'float')
    # Applying the binary operator '**' (line 1147)
    result_pow_581558 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 52), '**', m2_581556, float_581557)
    
    # Applying the binary operator 'div' (line 1147)
    result_div_581559 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 51), 'div', result_mul_581555, result_pow_581558)
    
    int_581560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 62), 'int')
    # Getting the type of 'n' (line 1147)
    n_581561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 65), 'n')
    int_581562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 67), 'int')
    # Applying the binary operator '-' (line 1147)
    result_sub_581563 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 65), '-', n_581561, int_581562)
    
    float_581564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 71), 'float')
    # Applying the binary operator '**' (line 1147)
    result_pow_581565 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 64), '**', result_sub_581563, float_581564)
    
    # Applying the binary operator '*' (line 1147)
    result_mul_581566 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 62), '*', int_581560, result_pow_581565)
    
    # Applying the binary operator '-' (line 1147)
    result_sub_581567 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 38), '-', result_div_581559, result_mul_581566)
    
    # Applying the binary operator '*' (line 1147)
    result_mul_581568 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 35), '*', result_div_581548, result_sub_581567)
    
    # Assigning a type to the variable 'nval' (line 1147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'nval', result_mul_581568)
    
    # Call to place(...): (line 1148)
    # Processing the call arguments (line 1148)
    # Getting the type of 'vals' (line 1148)
    vals_581571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 21), 'vals', False)
    # Getting the type of 'can_correct' (line 1148)
    can_correct_581572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 27), 'can_correct', False)
    # Getting the type of 'nval' (line 1148)
    nval_581573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 40), 'nval', False)
    float_581574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1148, 47), 'float')
    # Applying the binary operator '+' (line 1148)
    result_add_581575 = python_operator(stypy.reporting.localization.Localization(__file__, 1148, 40), '+', nval_581573, float_581574)
    
    # Processing the call keyword arguments (line 1148)
    kwargs_581576 = {}
    # Getting the type of 'np' (line 1148)
    np_581569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 12), 'np', False)
    # Obtaining the member 'place' of a type (line 1148)
    place_581570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1148, 12), np_581569, 'place')
    # Calling place(args, kwargs) (line 1148)
    place_call_result_581577 = invoke(stypy.reporting.localization.Localization(__file__, 1148, 12), place_581570, *[vals_581571, can_correct_581572, result_add_581575], **kwargs_581576)
    
    # SSA join for if statement (line 1144)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1142)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'vals' (line 1150)
    vals_581578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 7), 'vals')
    # Obtaining the member 'ndim' of a type (line 1150)
    ndim_581579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 7), vals_581578, 'ndim')
    int_581580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 20), 'int')
    # Applying the binary operator '==' (line 1150)
    result_eq_581581 = python_operator(stypy.reporting.localization.Localization(__file__, 1150, 7), '==', ndim_581579, int_581580)
    
    # Testing the type of an if condition (line 1150)
    if_condition_581582 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1150, 4), result_eq_581581)
    # Assigning a type to the variable 'if_condition_581582' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'if_condition_581582', if_condition_581582)
    # SSA begins for if statement (line 1150)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1151):
    
    # Assigning a Call to a Name (line 1151):
    
    # Call to item(...): (line 1151)
    # Processing the call keyword arguments (line 1151)
    kwargs_581585 = {}
    # Getting the type of 'vals' (line 1151)
    vals_581583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 15), 'vals', False)
    # Obtaining the member 'item' of a type (line 1151)
    item_581584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1151, 15), vals_581583, 'item')
    # Calling item(args, kwargs) (line 1151)
    item_call_result_581586 = invoke(stypy.reporting.localization.Localization(__file__, 1151, 15), item_581584, *[], **kwargs_581585)
    
    # Assigning a type to the variable 'vals' (line 1151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1151, 8), 'vals', item_call_result_581586)
    # SSA join for if statement (line 1150)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'fisher' (line 1153)
    fisher_581587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 7), 'fisher')
    # Testing the type of an if condition (line 1153)
    if_condition_581588 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1153, 4), fisher_581587)
    # Assigning a type to the variable 'if_condition_581588' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 4), 'if_condition_581588', if_condition_581588)
    # SSA begins for if statement (line 1153)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'vals' (line 1154)
    vals_581589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 15), 'vals')
    int_581590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1154, 22), 'int')
    # Applying the binary operator '-' (line 1154)
    result_sub_581591 = python_operator(stypy.reporting.localization.Localization(__file__, 1154, 15), '-', vals_581589, int_581590)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 8), 'stypy_return_type', result_sub_581591)
    # SSA branch for the else part of an if statement (line 1153)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'vals' (line 1156)
    vals_581592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 15), 'vals')
    # Assigning a type to the variable 'stypy_return_type' (line 1156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1156, 8), 'stypy_return_type', vals_581592)
    # SSA join for if statement (line 1153)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'kurtosis(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kurtosis' in the type store
    # Getting the type of 'stypy_return_type' (line 1076)
    stypy_return_type_581593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_581593)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kurtosis'
    return stypy_return_type_581593

# Assigning a type to the variable 'kurtosis' (line 1076)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 0), 'kurtosis', kurtosis)

# Assigning a Call to a Name (line 1158):

# Assigning a Call to a Name (line 1158):

# Call to namedtuple(...): (line 1158)
# Processing the call arguments (line 1158)
str_581595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1158, 28), 'str', 'DescribeResult')

# Obtaining an instance of the builtin type 'tuple' (line 1159)
tuple_581596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 29), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1159)
# Adding element type (line 1159)
str_581597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 29), 'str', 'nobs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1159, 29), tuple_581596, str_581597)
# Adding element type (line 1159)
str_581598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 37), 'str', 'minmax')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1159, 29), tuple_581596, str_581598)
# Adding element type (line 1159)
str_581599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 47), 'str', 'mean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1159, 29), tuple_581596, str_581599)
# Adding element type (line 1159)
str_581600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 55), 'str', 'variance')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1159, 29), tuple_581596, str_581600)
# Adding element type (line 1159)
str_581601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 67), 'str', 'skewness')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1159, 29), tuple_581596, str_581601)
# Adding element type (line 1159)
str_581602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, 29), 'str', 'kurtosis')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1159, 29), tuple_581596, str_581602)

# Processing the call keyword arguments (line 1158)
kwargs_581603 = {}
# Getting the type of 'namedtuple' (line 1158)
namedtuple_581594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 17), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1158)
namedtuple_call_result_581604 = invoke(stypy.reporting.localization.Localization(__file__, 1158, 17), namedtuple_581594, *[str_581595, tuple_581596], **kwargs_581603)

# Assigning a type to the variable 'DescribeResult' (line 1158)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1158, 0), 'DescribeResult', namedtuple_call_result_581604)

@norecursion
def describe(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_581605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 21), 'int')
    int_581606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 29), 'int')
    # Getting the type of 'True' (line 1163)
    True_581607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 37), 'True')
    str_581608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 54), 'str', 'propagate')
    defaults = [int_581605, int_581606, True_581607, str_581608]
    # Create a new context for function 'describe'
    module_type_store = module_type_store.open_function_context('describe', 1163, 0, False)
    
    # Passed parameters checking function
    describe.stypy_localization = localization
    describe.stypy_type_of_self = None
    describe.stypy_type_store = module_type_store
    describe.stypy_function_name = 'describe'
    describe.stypy_param_names_list = ['a', 'axis', 'ddof', 'bias', 'nan_policy']
    describe.stypy_varargs_param_name = None
    describe.stypy_kwargs_param_name = None
    describe.stypy_call_defaults = defaults
    describe.stypy_call_varargs = varargs
    describe.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'describe', ['a', 'axis', 'ddof', 'bias', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'describe', localization, ['a', 'axis', 'ddof', 'bias', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'describe(...)' code ##################

    str_581609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, (-1)), 'str', "\n    Compute several descriptive statistics of the passed array.\n\n    Parameters\n    ----------\n    a : array_like\n       Input data.\n    axis : int or None, optional\n       Axis along which statistics are calculated. Default is 0.\n       If None, compute over the whole array `a`.\n    ddof : int, optional\n        Delta degrees of freedom (only for variance).  Default is 1.\n    bias : bool, optional\n        If False, then the skewness and kurtosis calculations are corrected for\n        statistical bias.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    nobs : int or ndarray of ints\n       Number of observations (length of data along `axis`).\n       When 'omit' is chosen as nan_policy, each column is counted separately.\n    minmax: tuple of ndarrays or floats\n       Minimum and maximum value of data array.\n    mean : ndarray or float\n       Arithmetic mean of data along axis.\n    variance : ndarray or float\n       Unbiased variance of the data along axis, denominator is number of\n       observations minus one.\n    skewness : ndarray or float\n       Skewness, based on moment calculations with denominator equal to\n       the number of observations, i.e. no degrees of freedom correction.\n    kurtosis : ndarray or float\n       Kurtosis (Fisher).  The kurtosis is normalized so that it is\n       zero for the normal distribution.  No degrees of freedom are used.\n\n    See Also\n    --------\n    skew, kurtosis\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> a = np.arange(10)\n    >>> stats.describe(a)\n    DescribeResult(nobs=10, minmax=(0, 9), mean=4.5, variance=9.1666666666666661,\n                   skewness=0.0, kurtosis=-1.2242424242424244)\n    >>> b = [[1, 2], [3, 4]]\n    >>> stats.describe(b)\n    DescribeResult(nobs=2, minmax=(array([1, 2]), array([3, 4])),\n                   mean=array([ 2., 3.]), variance=array([ 2., 2.]),\n                   skewness=array([ 0., 0.]), kurtosis=array([-2., -2.]))\n\n    ")
    
    # Assigning a Call to a Tuple (line 1221):
    
    # Assigning a Subscript to a Name (line 1221):
    
    # Obtaining the type of the subscript
    int_581610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1221)
    # Processing the call arguments (line 1221)
    # Getting the type of 'a' (line 1221)
    a_581612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 27), 'a', False)
    # Getting the type of 'axis' (line 1221)
    axis_581613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 30), 'axis', False)
    # Processing the call keyword arguments (line 1221)
    kwargs_581614 = {}
    # Getting the type of '_chk_asarray' (line 1221)
    _chk_asarray_581611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1221)
    _chk_asarray_call_result_581615 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 14), _chk_asarray_581611, *[a_581612, axis_581613], **kwargs_581614)
    
    # Obtaining the member '__getitem__' of a type (line 1221)
    getitem___581616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 4), _chk_asarray_call_result_581615, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1221)
    subscript_call_result_581617 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 4), getitem___581616, int_581610)
    
    # Assigning a type to the variable 'tuple_var_assignment_579877' (line 1221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 4), 'tuple_var_assignment_579877', subscript_call_result_581617)
    
    # Assigning a Subscript to a Name (line 1221):
    
    # Obtaining the type of the subscript
    int_581618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1221)
    # Processing the call arguments (line 1221)
    # Getting the type of 'a' (line 1221)
    a_581620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 27), 'a', False)
    # Getting the type of 'axis' (line 1221)
    axis_581621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 30), 'axis', False)
    # Processing the call keyword arguments (line 1221)
    kwargs_581622 = {}
    # Getting the type of '_chk_asarray' (line 1221)
    _chk_asarray_581619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1221)
    _chk_asarray_call_result_581623 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 14), _chk_asarray_581619, *[a_581620, axis_581621], **kwargs_581622)
    
    # Obtaining the member '__getitem__' of a type (line 1221)
    getitem___581624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 4), _chk_asarray_call_result_581623, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1221)
    subscript_call_result_581625 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 4), getitem___581624, int_581618)
    
    # Assigning a type to the variable 'tuple_var_assignment_579878' (line 1221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 4), 'tuple_var_assignment_579878', subscript_call_result_581625)
    
    # Assigning a Name to a Name (line 1221):
    # Getting the type of 'tuple_var_assignment_579877' (line 1221)
    tuple_var_assignment_579877_581626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 4), 'tuple_var_assignment_579877')
    # Assigning a type to the variable 'a' (line 1221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 4), 'a', tuple_var_assignment_579877_581626)
    
    # Assigning a Name to a Name (line 1221):
    # Getting the type of 'tuple_var_assignment_579878' (line 1221)
    tuple_var_assignment_579878_581627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 4), 'tuple_var_assignment_579878')
    # Assigning a type to the variable 'axis' (line 1221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 7), 'axis', tuple_var_assignment_579878_581627)
    
    # Assigning a Call to a Tuple (line 1223):
    
    # Assigning a Subscript to a Name (line 1223):
    
    # Obtaining the type of the subscript
    int_581628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1223, 4), 'int')
    
    # Call to _contains_nan(...): (line 1223)
    # Processing the call arguments (line 1223)
    # Getting the type of 'a' (line 1223)
    a_581630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1223)
    nan_policy_581631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1223)
    kwargs_581632 = {}
    # Getting the type of '_contains_nan' (line 1223)
    _contains_nan_581629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1223)
    _contains_nan_call_result_581633 = invoke(stypy.reporting.localization.Localization(__file__, 1223, 31), _contains_nan_581629, *[a_581630, nan_policy_581631], **kwargs_581632)
    
    # Obtaining the member '__getitem__' of a type (line 1223)
    getitem___581634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1223, 4), _contains_nan_call_result_581633, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1223)
    subscript_call_result_581635 = invoke(stypy.reporting.localization.Localization(__file__, 1223, 4), getitem___581634, int_581628)
    
    # Assigning a type to the variable 'tuple_var_assignment_579879' (line 1223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 4), 'tuple_var_assignment_579879', subscript_call_result_581635)
    
    # Assigning a Subscript to a Name (line 1223):
    
    # Obtaining the type of the subscript
    int_581636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1223, 4), 'int')
    
    # Call to _contains_nan(...): (line 1223)
    # Processing the call arguments (line 1223)
    # Getting the type of 'a' (line 1223)
    a_581638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1223)
    nan_policy_581639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1223)
    kwargs_581640 = {}
    # Getting the type of '_contains_nan' (line 1223)
    _contains_nan_581637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1223)
    _contains_nan_call_result_581641 = invoke(stypy.reporting.localization.Localization(__file__, 1223, 31), _contains_nan_581637, *[a_581638, nan_policy_581639], **kwargs_581640)
    
    # Obtaining the member '__getitem__' of a type (line 1223)
    getitem___581642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1223, 4), _contains_nan_call_result_581641, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1223)
    subscript_call_result_581643 = invoke(stypy.reporting.localization.Localization(__file__, 1223, 4), getitem___581642, int_581636)
    
    # Assigning a type to the variable 'tuple_var_assignment_579880' (line 1223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 4), 'tuple_var_assignment_579880', subscript_call_result_581643)
    
    # Assigning a Name to a Name (line 1223):
    # Getting the type of 'tuple_var_assignment_579879' (line 1223)
    tuple_var_assignment_579879_581644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 4), 'tuple_var_assignment_579879')
    # Assigning a type to the variable 'contains_nan' (line 1223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 4), 'contains_nan', tuple_var_assignment_579879_581644)
    
    # Assigning a Name to a Name (line 1223):
    # Getting the type of 'tuple_var_assignment_579880' (line 1223)
    tuple_var_assignment_579880_581645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 4), 'tuple_var_assignment_579880')
    # Assigning a type to the variable 'nan_policy' (line 1223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 18), 'nan_policy', tuple_var_assignment_579880_581645)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 1225)
    contains_nan_581646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 1225)
    nan_policy_581647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 24), 'nan_policy')
    str_581648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 1225)
    result_eq_581649 = python_operator(stypy.reporting.localization.Localization(__file__, 1225, 24), '==', nan_policy_581647, str_581648)
    
    # Applying the binary operator 'and' (line 1225)
    result_and_keyword_581650 = python_operator(stypy.reporting.localization.Localization(__file__, 1225, 7), 'and', contains_nan_581646, result_eq_581649)
    
    # Testing the type of an if condition (line 1225)
    if_condition_581651 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1225, 4), result_and_keyword_581650)
    # Assigning a type to the variable 'if_condition_581651' (line 1225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1225, 4), 'if_condition_581651', if_condition_581651)
    # SSA begins for if statement (line 1225)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1226):
    
    # Assigning a Call to a Name (line 1226):
    
    # Call to masked_invalid(...): (line 1226)
    # Processing the call arguments (line 1226)
    # Getting the type of 'a' (line 1226)
    a_581654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 30), 'a', False)
    # Processing the call keyword arguments (line 1226)
    kwargs_581655 = {}
    # Getting the type of 'ma' (line 1226)
    ma_581652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 1226)
    masked_invalid_581653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 12), ma_581652, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 1226)
    masked_invalid_call_result_581656 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 12), masked_invalid_581653, *[a_581654], **kwargs_581655)
    
    # Assigning a type to the variable 'a' (line 1226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 8), 'a', masked_invalid_call_result_581656)
    
    # Call to describe(...): (line 1227)
    # Processing the call arguments (line 1227)
    # Getting the type of 'a' (line 1227)
    a_581659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 37), 'a', False)
    # Getting the type of 'axis' (line 1227)
    axis_581660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 40), 'axis', False)
    # Getting the type of 'ddof' (line 1227)
    ddof_581661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 46), 'ddof', False)
    # Getting the type of 'bias' (line 1227)
    bias_581662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 52), 'bias', False)
    # Processing the call keyword arguments (line 1227)
    kwargs_581663 = {}
    # Getting the type of 'mstats_basic' (line 1227)
    mstats_basic_581657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 15), 'mstats_basic', False)
    # Obtaining the member 'describe' of a type (line 1227)
    describe_581658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 15), mstats_basic_581657, 'describe')
    # Calling describe(args, kwargs) (line 1227)
    describe_call_result_581664 = invoke(stypy.reporting.localization.Localization(__file__, 1227, 15), describe_581658, *[a_581659, axis_581660, ddof_581661, bias_581662], **kwargs_581663)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 8), 'stypy_return_type', describe_call_result_581664)
    # SSA join for if statement (line 1225)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'a' (line 1229)
    a_581665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 7), 'a')
    # Obtaining the member 'size' of a type (line 1229)
    size_581666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 7), a_581665, 'size')
    int_581667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 17), 'int')
    # Applying the binary operator '==' (line 1229)
    result_eq_581668 = python_operator(stypy.reporting.localization.Localization(__file__, 1229, 7), '==', size_581666, int_581667)
    
    # Testing the type of an if condition (line 1229)
    if_condition_581669 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1229, 4), result_eq_581668)
    # Assigning a type to the variable 'if_condition_581669' (line 1229)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 4), 'if_condition_581669', if_condition_581669)
    # SSA begins for if statement (line 1229)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1230)
    # Processing the call arguments (line 1230)
    str_581671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 25), 'str', 'The input must not be empty.')
    # Processing the call keyword arguments (line 1230)
    kwargs_581672 = {}
    # Getting the type of 'ValueError' (line 1230)
    ValueError_581670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1230)
    ValueError_call_result_581673 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 14), ValueError_581670, *[str_581671], **kwargs_581672)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1230, 8), ValueError_call_result_581673, 'raise parameter', BaseException)
    # SSA join for if statement (line 1229)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1231):
    
    # Assigning a Subscript to a Name (line 1231):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1231)
    axis_581674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 16), 'axis')
    # Getting the type of 'a' (line 1231)
    a_581675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 8), 'a')
    # Obtaining the member 'shape' of a type (line 1231)
    shape_581676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 8), a_581675, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1231)
    getitem___581677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 8), shape_581676, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1231)
    subscript_call_result_581678 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 8), getitem___581677, axis_581674)
    
    # Assigning a type to the variable 'n' (line 1231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 4), 'n', subscript_call_result_581678)
    
    # Assigning a Tuple to a Name (line 1232):
    
    # Assigning a Tuple to a Name (line 1232):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1232)
    tuple_581679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 10), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1232)
    # Adding element type (line 1232)
    
    # Call to min(...): (line 1232)
    # Processing the call arguments (line 1232)
    # Getting the type of 'a' (line 1232)
    a_581682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 17), 'a', False)
    # Processing the call keyword arguments (line 1232)
    # Getting the type of 'axis' (line 1232)
    axis_581683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 25), 'axis', False)
    keyword_581684 = axis_581683
    kwargs_581685 = {'axis': keyword_581684}
    # Getting the type of 'np' (line 1232)
    np_581680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 10), 'np', False)
    # Obtaining the member 'min' of a type (line 1232)
    min_581681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 10), np_581680, 'min')
    # Calling min(args, kwargs) (line 1232)
    min_call_result_581686 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 10), min_581681, *[a_581682], **kwargs_581685)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1232, 10), tuple_581679, min_call_result_581686)
    # Adding element type (line 1232)
    
    # Call to max(...): (line 1232)
    # Processing the call arguments (line 1232)
    # Getting the type of 'a' (line 1232)
    a_581689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 39), 'a', False)
    # Processing the call keyword arguments (line 1232)
    # Getting the type of 'axis' (line 1232)
    axis_581690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 47), 'axis', False)
    keyword_581691 = axis_581690
    kwargs_581692 = {'axis': keyword_581691}
    # Getting the type of 'np' (line 1232)
    np_581687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 32), 'np', False)
    # Obtaining the member 'max' of a type (line 1232)
    max_581688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 32), np_581687, 'max')
    # Calling max(args, kwargs) (line 1232)
    max_call_result_581693 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 32), max_581688, *[a_581689], **kwargs_581692)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1232, 10), tuple_581679, max_call_result_581693)
    
    # Assigning a type to the variable 'mm' (line 1232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 4), 'mm', tuple_581679)
    
    # Assigning a Call to a Name (line 1233):
    
    # Assigning a Call to a Name (line 1233):
    
    # Call to mean(...): (line 1233)
    # Processing the call arguments (line 1233)
    # Getting the type of 'a' (line 1233)
    a_581696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 16), 'a', False)
    # Processing the call keyword arguments (line 1233)
    # Getting the type of 'axis' (line 1233)
    axis_581697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 24), 'axis', False)
    keyword_581698 = axis_581697
    kwargs_581699 = {'axis': keyword_581698}
    # Getting the type of 'np' (line 1233)
    np_581694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 8), 'np', False)
    # Obtaining the member 'mean' of a type (line 1233)
    mean_581695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 8), np_581694, 'mean')
    # Calling mean(args, kwargs) (line 1233)
    mean_call_result_581700 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 8), mean_581695, *[a_581696], **kwargs_581699)
    
    # Assigning a type to the variable 'm' (line 1233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'm', mean_call_result_581700)
    
    # Assigning a Call to a Name (line 1234):
    
    # Assigning a Call to a Name (line 1234):
    
    # Call to var(...): (line 1234)
    # Processing the call arguments (line 1234)
    # Getting the type of 'a' (line 1234)
    a_581703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 15), 'a', False)
    # Processing the call keyword arguments (line 1234)
    # Getting the type of 'axis' (line 1234)
    axis_581704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 23), 'axis', False)
    keyword_581705 = axis_581704
    # Getting the type of 'ddof' (line 1234)
    ddof_581706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 34), 'ddof', False)
    keyword_581707 = ddof_581706
    kwargs_581708 = {'ddof': keyword_581707, 'axis': keyword_581705}
    # Getting the type of 'np' (line 1234)
    np_581701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 8), 'np', False)
    # Obtaining the member 'var' of a type (line 1234)
    var_581702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 8), np_581701, 'var')
    # Calling var(args, kwargs) (line 1234)
    var_call_result_581709 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 8), var_581702, *[a_581703], **kwargs_581708)
    
    # Assigning a type to the variable 'v' (line 1234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 4), 'v', var_call_result_581709)
    
    # Assigning a Call to a Name (line 1235):
    
    # Assigning a Call to a Name (line 1235):
    
    # Call to skew(...): (line 1235)
    # Processing the call arguments (line 1235)
    # Getting the type of 'a' (line 1235)
    a_581711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 14), 'a', False)
    # Getting the type of 'axis' (line 1235)
    axis_581712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 17), 'axis', False)
    # Processing the call keyword arguments (line 1235)
    # Getting the type of 'bias' (line 1235)
    bias_581713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 28), 'bias', False)
    keyword_581714 = bias_581713
    kwargs_581715 = {'bias': keyword_581714}
    # Getting the type of 'skew' (line 1235)
    skew_581710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 9), 'skew', False)
    # Calling skew(args, kwargs) (line 1235)
    skew_call_result_581716 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 9), skew_581710, *[a_581711, axis_581712], **kwargs_581715)
    
    # Assigning a type to the variable 'sk' (line 1235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 4), 'sk', skew_call_result_581716)
    
    # Assigning a Call to a Name (line 1236):
    
    # Assigning a Call to a Name (line 1236):
    
    # Call to kurtosis(...): (line 1236)
    # Processing the call arguments (line 1236)
    # Getting the type of 'a' (line 1236)
    a_581718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 20), 'a', False)
    # Getting the type of 'axis' (line 1236)
    axis_581719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 23), 'axis', False)
    # Processing the call keyword arguments (line 1236)
    # Getting the type of 'bias' (line 1236)
    bias_581720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 34), 'bias', False)
    keyword_581721 = bias_581720
    kwargs_581722 = {'bias': keyword_581721}
    # Getting the type of 'kurtosis' (line 1236)
    kurtosis_581717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 11), 'kurtosis', False)
    # Calling kurtosis(args, kwargs) (line 1236)
    kurtosis_call_result_581723 = invoke(stypy.reporting.localization.Localization(__file__, 1236, 11), kurtosis_581717, *[a_581718, axis_581719], **kwargs_581722)
    
    # Assigning a type to the variable 'kurt' (line 1236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 4), 'kurt', kurtosis_call_result_581723)
    
    # Call to DescribeResult(...): (line 1238)
    # Processing the call arguments (line 1238)
    # Getting the type of 'n' (line 1238)
    n_581725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 26), 'n', False)
    # Getting the type of 'mm' (line 1238)
    mm_581726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 29), 'mm', False)
    # Getting the type of 'm' (line 1238)
    m_581727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 33), 'm', False)
    # Getting the type of 'v' (line 1238)
    v_581728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 36), 'v', False)
    # Getting the type of 'sk' (line 1238)
    sk_581729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 39), 'sk', False)
    # Getting the type of 'kurt' (line 1238)
    kurt_581730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 43), 'kurt', False)
    # Processing the call keyword arguments (line 1238)
    kwargs_581731 = {}
    # Getting the type of 'DescribeResult' (line 1238)
    DescribeResult_581724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 11), 'DescribeResult', False)
    # Calling DescribeResult(args, kwargs) (line 1238)
    DescribeResult_call_result_581732 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 11), DescribeResult_581724, *[n_581725, mm_581726, m_581727, v_581728, sk_581729, kurt_581730], **kwargs_581731)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 4), 'stypy_return_type', DescribeResult_call_result_581732)
    
    # ################# End of 'describe(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'describe' in the type store
    # Getting the type of 'stypy_return_type' (line 1163)
    stypy_return_type_581733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_581733)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'describe'
    return stypy_return_type_581733

# Assigning a type to the variable 'describe' (line 1163)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 0), 'describe', describe)

# Assigning a Call to a Name (line 1244):

# Assigning a Call to a Name (line 1244):

# Call to namedtuple(...): (line 1244)
# Processing the call arguments (line 1244)
str_581735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 28), 'str', 'SkewtestResult')

# Obtaining an instance of the builtin type 'tuple' (line 1244)
tuple_581736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 47), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1244)
# Adding element type (line 1244)
str_581737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 47), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1244, 47), tuple_581736, str_581737)
# Adding element type (line 1244)
str_581738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 60), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1244, 47), tuple_581736, str_581738)

# Processing the call keyword arguments (line 1244)
kwargs_581739 = {}
# Getting the type of 'namedtuple' (line 1244)
namedtuple_581734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 17), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1244)
namedtuple_call_result_581740 = invoke(stypy.reporting.localization.Localization(__file__, 1244, 17), namedtuple_581734, *[str_581735, tuple_581736], **kwargs_581739)

# Assigning a type to the variable 'SkewtestResult' (line 1244)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 0), 'SkewtestResult', namedtuple_call_result_581740)

@norecursion
def skewtest(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_581741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 21), 'int')
    str_581742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 35), 'str', 'propagate')
    defaults = [int_581741, str_581742]
    # Create a new context for function 'skewtest'
    module_type_store = module_type_store.open_function_context('skewtest', 1247, 0, False)
    
    # Passed parameters checking function
    skewtest.stypy_localization = localization
    skewtest.stypy_type_of_self = None
    skewtest.stypy_type_store = module_type_store
    skewtest.stypy_function_name = 'skewtest'
    skewtest.stypy_param_names_list = ['a', 'axis', 'nan_policy']
    skewtest.stypy_varargs_param_name = None
    skewtest.stypy_kwargs_param_name = None
    skewtest.stypy_call_defaults = defaults
    skewtest.stypy_call_varargs = varargs
    skewtest.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'skewtest', ['a', 'axis', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'skewtest', localization, ['a', 'axis', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'skewtest(...)' code ##################

    str_581743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1295, (-1)), 'str', '\n    Test whether the skew is different from the normal distribution.\n\n    This function tests the null hypothesis that the skewness of\n    the population that the sample was drawn from is the same\n    as that of a corresponding normal distribution.\n\n    Parameters\n    ----------\n    a : array\n        The data to be tested\n    axis : int or None, optional\n       Axis along which statistics are calculated. Default is 0.\n       If None, compute over the whole array `a`.\n    nan_policy : {\'propagate\', \'raise\', \'omit\'}, optional\n        Defines how to handle when input contains nan. \'propagate\' returns nan,\n        \'raise\' throws an error, \'omit\' performs the calculations ignoring nan\n        values. Default is \'propagate\'.\n\n    Returns\n    -------\n    statistic : float\n        The computed z-score for this test.\n    pvalue : float\n        a 2-sided p-value for the hypothesis test\n\n    Notes\n    -----\n    The sample size must be at least 8.\n\n    References\n    ----------\n    .. [1] R. B. D\'Agostino, A. J. Belanger and R. B. D\'Agostino Jr.,\n            "A suggestion for using powerful and informative tests of\n            normality", American Statistician 44, pp. 316-321, 1990.\n\n    Examples\n    --------\n    >>> from scipy.stats import skewtest\n    >>> skewtest([1, 2, 3, 4, 5, 6, 7, 8])\n    SkewtestResult(statistic=1.0108048609177787, pvalue=0.31210983614218968)\n    >>> skewtest([2, 8, 0, 4, 1, 9, 9, 0])\n    SkewtestResult(statistic=0.44626385374196975, pvalue=0.65540666312754592)\n    >>> skewtest([1, 2, 3, 4, 5, 6, 7, 8000])\n    SkewtestResult(statistic=3.5717735103604071, pvalue=0.00035457199058231331)\n    >>> skewtest([100, 100, 100, 100, 100, 100, 100, 101])\n    SkewtestResult(statistic=3.5717766638478072, pvalue=0.000354567720281634)\n    ')
    
    # Assigning a Call to a Tuple (line 1296):
    
    # Assigning a Subscript to a Name (line 1296):
    
    # Obtaining the type of the subscript
    int_581744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1296, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1296)
    # Processing the call arguments (line 1296)
    # Getting the type of 'a' (line 1296)
    a_581746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 27), 'a', False)
    # Getting the type of 'axis' (line 1296)
    axis_581747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 30), 'axis', False)
    # Processing the call keyword arguments (line 1296)
    kwargs_581748 = {}
    # Getting the type of '_chk_asarray' (line 1296)
    _chk_asarray_581745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1296)
    _chk_asarray_call_result_581749 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 14), _chk_asarray_581745, *[a_581746, axis_581747], **kwargs_581748)
    
    # Obtaining the member '__getitem__' of a type (line 1296)
    getitem___581750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 4), _chk_asarray_call_result_581749, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1296)
    subscript_call_result_581751 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 4), getitem___581750, int_581744)
    
    # Assigning a type to the variable 'tuple_var_assignment_579881' (line 1296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 4), 'tuple_var_assignment_579881', subscript_call_result_581751)
    
    # Assigning a Subscript to a Name (line 1296):
    
    # Obtaining the type of the subscript
    int_581752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1296, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1296)
    # Processing the call arguments (line 1296)
    # Getting the type of 'a' (line 1296)
    a_581754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 27), 'a', False)
    # Getting the type of 'axis' (line 1296)
    axis_581755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 30), 'axis', False)
    # Processing the call keyword arguments (line 1296)
    kwargs_581756 = {}
    # Getting the type of '_chk_asarray' (line 1296)
    _chk_asarray_581753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1296)
    _chk_asarray_call_result_581757 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 14), _chk_asarray_581753, *[a_581754, axis_581755], **kwargs_581756)
    
    # Obtaining the member '__getitem__' of a type (line 1296)
    getitem___581758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 4), _chk_asarray_call_result_581757, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1296)
    subscript_call_result_581759 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 4), getitem___581758, int_581752)
    
    # Assigning a type to the variable 'tuple_var_assignment_579882' (line 1296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 4), 'tuple_var_assignment_579882', subscript_call_result_581759)
    
    # Assigning a Name to a Name (line 1296):
    # Getting the type of 'tuple_var_assignment_579881' (line 1296)
    tuple_var_assignment_579881_581760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 4), 'tuple_var_assignment_579881')
    # Assigning a type to the variable 'a' (line 1296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 4), 'a', tuple_var_assignment_579881_581760)
    
    # Assigning a Name to a Name (line 1296):
    # Getting the type of 'tuple_var_assignment_579882' (line 1296)
    tuple_var_assignment_579882_581761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 4), 'tuple_var_assignment_579882')
    # Assigning a type to the variable 'axis' (line 1296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 7), 'axis', tuple_var_assignment_579882_581761)
    
    # Assigning a Call to a Tuple (line 1298):
    
    # Assigning a Subscript to a Name (line 1298):
    
    # Obtaining the type of the subscript
    int_581762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 4), 'int')
    
    # Call to _contains_nan(...): (line 1298)
    # Processing the call arguments (line 1298)
    # Getting the type of 'a' (line 1298)
    a_581764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1298)
    nan_policy_581765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1298)
    kwargs_581766 = {}
    # Getting the type of '_contains_nan' (line 1298)
    _contains_nan_581763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1298)
    _contains_nan_call_result_581767 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 31), _contains_nan_581763, *[a_581764, nan_policy_581765], **kwargs_581766)
    
    # Obtaining the member '__getitem__' of a type (line 1298)
    getitem___581768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 4), _contains_nan_call_result_581767, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1298)
    subscript_call_result_581769 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 4), getitem___581768, int_581762)
    
    # Assigning a type to the variable 'tuple_var_assignment_579883' (line 1298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'tuple_var_assignment_579883', subscript_call_result_581769)
    
    # Assigning a Subscript to a Name (line 1298):
    
    # Obtaining the type of the subscript
    int_581770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 4), 'int')
    
    # Call to _contains_nan(...): (line 1298)
    # Processing the call arguments (line 1298)
    # Getting the type of 'a' (line 1298)
    a_581772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1298)
    nan_policy_581773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1298)
    kwargs_581774 = {}
    # Getting the type of '_contains_nan' (line 1298)
    _contains_nan_581771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1298)
    _contains_nan_call_result_581775 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 31), _contains_nan_581771, *[a_581772, nan_policy_581773], **kwargs_581774)
    
    # Obtaining the member '__getitem__' of a type (line 1298)
    getitem___581776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 4), _contains_nan_call_result_581775, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1298)
    subscript_call_result_581777 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 4), getitem___581776, int_581770)
    
    # Assigning a type to the variable 'tuple_var_assignment_579884' (line 1298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'tuple_var_assignment_579884', subscript_call_result_581777)
    
    # Assigning a Name to a Name (line 1298):
    # Getting the type of 'tuple_var_assignment_579883' (line 1298)
    tuple_var_assignment_579883_581778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'tuple_var_assignment_579883')
    # Assigning a type to the variable 'contains_nan' (line 1298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'contains_nan', tuple_var_assignment_579883_581778)
    
    # Assigning a Name to a Name (line 1298):
    # Getting the type of 'tuple_var_assignment_579884' (line 1298)
    tuple_var_assignment_579884_581779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'tuple_var_assignment_579884')
    # Assigning a type to the variable 'nan_policy' (line 1298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 18), 'nan_policy', tuple_var_assignment_579884_581779)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 1300)
    contains_nan_581780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 1300)
    nan_policy_581781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 24), 'nan_policy')
    str_581782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1300, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 1300)
    result_eq_581783 = python_operator(stypy.reporting.localization.Localization(__file__, 1300, 24), '==', nan_policy_581781, str_581782)
    
    # Applying the binary operator 'and' (line 1300)
    result_and_keyword_581784 = python_operator(stypy.reporting.localization.Localization(__file__, 1300, 7), 'and', contains_nan_581780, result_eq_581783)
    
    # Testing the type of an if condition (line 1300)
    if_condition_581785 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1300, 4), result_and_keyword_581784)
    # Assigning a type to the variable 'if_condition_581785' (line 1300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 4), 'if_condition_581785', if_condition_581785)
    # SSA begins for if statement (line 1300)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1301):
    
    # Assigning a Call to a Name (line 1301):
    
    # Call to masked_invalid(...): (line 1301)
    # Processing the call arguments (line 1301)
    # Getting the type of 'a' (line 1301)
    a_581788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 30), 'a', False)
    # Processing the call keyword arguments (line 1301)
    kwargs_581789 = {}
    # Getting the type of 'ma' (line 1301)
    ma_581786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 1301)
    masked_invalid_581787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 12), ma_581786, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 1301)
    masked_invalid_call_result_581790 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 12), masked_invalid_581787, *[a_581788], **kwargs_581789)
    
    # Assigning a type to the variable 'a' (line 1301)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 8), 'a', masked_invalid_call_result_581790)
    
    # Call to skewtest(...): (line 1302)
    # Processing the call arguments (line 1302)
    # Getting the type of 'a' (line 1302)
    a_581793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 37), 'a', False)
    # Getting the type of 'axis' (line 1302)
    axis_581794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 40), 'axis', False)
    # Processing the call keyword arguments (line 1302)
    kwargs_581795 = {}
    # Getting the type of 'mstats_basic' (line 1302)
    mstats_basic_581791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 15), 'mstats_basic', False)
    # Obtaining the member 'skewtest' of a type (line 1302)
    skewtest_581792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 15), mstats_basic_581791, 'skewtest')
    # Calling skewtest(args, kwargs) (line 1302)
    skewtest_call_result_581796 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 15), skewtest_581792, *[a_581793, axis_581794], **kwargs_581795)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 8), 'stypy_return_type', skewtest_call_result_581796)
    # SSA join for if statement (line 1300)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1304)
    # Getting the type of 'axis' (line 1304)
    axis_581797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 7), 'axis')
    # Getting the type of 'None' (line 1304)
    None_581798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 15), 'None')
    
    (may_be_581799, more_types_in_union_581800) = may_be_none(axis_581797, None_581798)

    if may_be_581799:

        if more_types_in_union_581800:
            # Runtime conditional SSA (line 1304)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1305):
        
        # Assigning a Call to a Name (line 1305):
        
        # Call to ravel(...): (line 1305)
        # Processing the call arguments (line 1305)
        # Getting the type of 'a' (line 1305)
        a_581803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 21), 'a', False)
        # Processing the call keyword arguments (line 1305)
        kwargs_581804 = {}
        # Getting the type of 'np' (line 1305)
        np_581801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 12), 'np', False)
        # Obtaining the member 'ravel' of a type (line 1305)
        ravel_581802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 12), np_581801, 'ravel')
        # Calling ravel(args, kwargs) (line 1305)
        ravel_call_result_581805 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 12), ravel_581802, *[a_581803], **kwargs_581804)
        
        # Assigning a type to the variable 'a' (line 1305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 8), 'a', ravel_call_result_581805)
        
        # Assigning a Num to a Name (line 1306):
        
        # Assigning a Num to a Name (line 1306):
        int_581806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1306, 15), 'int')
        # Assigning a type to the variable 'axis' (line 1306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 8), 'axis', int_581806)

        if more_types_in_union_581800:
            # SSA join for if statement (line 1304)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1307):
    
    # Assigning a Call to a Name (line 1307):
    
    # Call to skew(...): (line 1307)
    # Processing the call arguments (line 1307)
    # Getting the type of 'a' (line 1307)
    a_581808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 14), 'a', False)
    # Getting the type of 'axis' (line 1307)
    axis_581809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 17), 'axis', False)
    # Processing the call keyword arguments (line 1307)
    kwargs_581810 = {}
    # Getting the type of 'skew' (line 1307)
    skew_581807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 9), 'skew', False)
    # Calling skew(args, kwargs) (line 1307)
    skew_call_result_581811 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 9), skew_581807, *[a_581808, axis_581809], **kwargs_581810)
    
    # Assigning a type to the variable 'b2' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 4), 'b2', skew_call_result_581811)
    
    # Assigning a Call to a Name (line 1308):
    
    # Assigning a Call to a Name (line 1308):
    
    # Call to float(...): (line 1308)
    # Processing the call arguments (line 1308)
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1308)
    axis_581813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 22), 'axis', False)
    # Getting the type of 'a' (line 1308)
    a_581814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 14), 'a', False)
    # Obtaining the member 'shape' of a type (line 1308)
    shape_581815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 14), a_581814, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1308)
    getitem___581816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 14), shape_581815, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1308)
    subscript_call_result_581817 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 14), getitem___581816, axis_581813)
    
    # Processing the call keyword arguments (line 1308)
    kwargs_581818 = {}
    # Getting the type of 'float' (line 1308)
    float_581812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 8), 'float', False)
    # Calling float(args, kwargs) (line 1308)
    float_call_result_581819 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 8), float_581812, *[subscript_call_result_581817], **kwargs_581818)
    
    # Assigning a type to the variable 'n' (line 1308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1308, 4), 'n', float_call_result_581819)
    
    
    # Getting the type of 'n' (line 1309)
    n_581820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 7), 'n')
    int_581821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 11), 'int')
    # Applying the binary operator '<' (line 1309)
    result_lt_581822 = python_operator(stypy.reporting.localization.Localization(__file__, 1309, 7), '<', n_581820, int_581821)
    
    # Testing the type of an if condition (line 1309)
    if_condition_581823 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1309, 4), result_lt_581822)
    # Assigning a type to the variable 'if_condition_581823' (line 1309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 4), 'if_condition_581823', if_condition_581823)
    # SSA begins for if statement (line 1309)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1310)
    # Processing the call arguments (line 1310)
    str_581825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 12), 'str', 'skewtest is not valid with less than 8 samples; %i samples were given.')
    
    # Call to int(...): (line 1312)
    # Processing the call arguments (line 1312)
    # Getting the type of 'n' (line 1312)
    n_581827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 33), 'n', False)
    # Processing the call keyword arguments (line 1312)
    kwargs_581828 = {}
    # Getting the type of 'int' (line 1312)
    int_581826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 29), 'int', False)
    # Calling int(args, kwargs) (line 1312)
    int_call_result_581829 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 29), int_581826, *[n_581827], **kwargs_581828)
    
    # Applying the binary operator '%' (line 1311)
    result_mod_581830 = python_operator(stypy.reporting.localization.Localization(__file__, 1311, 12), '%', str_581825, int_call_result_581829)
    
    # Processing the call keyword arguments (line 1310)
    kwargs_581831 = {}
    # Getting the type of 'ValueError' (line 1310)
    ValueError_581824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1310)
    ValueError_call_result_581832 = invoke(stypy.reporting.localization.Localization(__file__, 1310, 14), ValueError_581824, *[result_mod_581830], **kwargs_581831)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1310, 8), ValueError_call_result_581832, 'raise parameter', BaseException)
    # SSA join for if statement (line 1309)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1313):
    
    # Assigning a BinOp to a Name (line 1313):
    # Getting the type of 'b2' (line 1313)
    b2_581833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 8), 'b2')
    
    # Call to sqrt(...): (line 1313)
    # Processing the call arguments (line 1313)
    # Getting the type of 'n' (line 1313)
    n_581836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 25), 'n', False)
    int_581837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 29), 'int')
    # Applying the binary operator '+' (line 1313)
    result_add_581838 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 25), '+', n_581836, int_581837)
    
    # Getting the type of 'n' (line 1313)
    n_581839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 35), 'n', False)
    int_581840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 39), 'int')
    # Applying the binary operator '+' (line 1313)
    result_add_581841 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 35), '+', n_581839, int_581840)
    
    # Applying the binary operator '*' (line 1313)
    result_mul_581842 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 24), '*', result_add_581838, result_add_581841)
    
    float_581843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 46), 'float')
    # Getting the type of 'n' (line 1313)
    n_581844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 53), 'n', False)
    int_581845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 57), 'int')
    # Applying the binary operator '-' (line 1313)
    result_sub_581846 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 53), '-', n_581844, int_581845)
    
    # Applying the binary operator '*' (line 1313)
    result_mul_581847 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 46), '*', float_581843, result_sub_581846)
    
    # Applying the binary operator 'div' (line 1313)
    result_div_581848 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 23), 'div', result_mul_581842, result_mul_581847)
    
    # Processing the call keyword arguments (line 1313)
    kwargs_581849 = {}
    # Getting the type of 'math' (line 1313)
    math_581834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 13), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 1313)
    sqrt_581835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 13), math_581834, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1313)
    sqrt_call_result_581850 = invoke(stypy.reporting.localization.Localization(__file__, 1313, 13), sqrt_581835, *[result_div_581848], **kwargs_581849)
    
    # Applying the binary operator '*' (line 1313)
    result_mul_581851 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 8), '*', b2_581833, sqrt_call_result_581850)
    
    # Assigning a type to the variable 'y' (line 1313)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1313, 4), 'y', result_mul_581851)
    
    # Assigning a BinOp to a Name (line 1314):
    
    # Assigning a BinOp to a Name (line 1314):
    float_581852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 13), 'float')
    # Getting the type of 'n' (line 1314)
    n_581853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 20), 'n')
    int_581854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 23), 'int')
    # Applying the binary operator '**' (line 1314)
    result_pow_581855 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 20), '**', n_581853, int_581854)
    
    int_581856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 27), 'int')
    # Getting the type of 'n' (line 1314)
    n_581857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 30), 'n')
    # Applying the binary operator '*' (line 1314)
    result_mul_581858 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 27), '*', int_581856, n_581857)
    
    # Applying the binary operator '+' (line 1314)
    result_add_581859 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 20), '+', result_pow_581855, result_mul_581858)
    
    int_581860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 34), 'int')
    # Applying the binary operator '-' (line 1314)
    result_sub_581861 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 32), '-', result_add_581859, int_581860)
    
    # Applying the binary operator '*' (line 1314)
    result_mul_581862 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 13), '*', float_581852, result_sub_581861)
    
    # Getting the type of 'n' (line 1314)
    n_581863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 41), 'n')
    int_581864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 43), 'int')
    # Applying the binary operator '+' (line 1314)
    result_add_581865 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 41), '+', n_581863, int_581864)
    
    # Applying the binary operator '*' (line 1314)
    result_mul_581866 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 38), '*', result_mul_581862, result_add_581865)
    
    # Getting the type of 'n' (line 1314)
    n_581867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 49), 'n')
    int_581868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 51), 'int')
    # Applying the binary operator '+' (line 1314)
    result_add_581869 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 49), '+', n_581867, int_581868)
    
    # Applying the binary operator '*' (line 1314)
    result_mul_581870 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 46), '*', result_mul_581866, result_add_581869)
    
    # Getting the type of 'n' (line 1315)
    n_581871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 15), 'n')
    float_581872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 17), 'float')
    # Applying the binary operator '-' (line 1315)
    result_sub_581873 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 15), '-', n_581871, float_581872)
    
    # Getting the type of 'n' (line 1315)
    n_581874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 25), 'n')
    int_581875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 27), 'int')
    # Applying the binary operator '+' (line 1315)
    result_add_581876 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 25), '+', n_581874, int_581875)
    
    # Applying the binary operator '*' (line 1315)
    result_mul_581877 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 14), '*', result_sub_581873, result_add_581876)
    
    # Getting the type of 'n' (line 1315)
    n_581878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 33), 'n')
    int_581879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 35), 'int')
    # Applying the binary operator '+' (line 1315)
    result_add_581880 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 33), '+', n_581878, int_581879)
    
    # Applying the binary operator '*' (line 1315)
    result_mul_581881 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 30), '*', result_mul_581877, result_add_581880)
    
    # Getting the type of 'n' (line 1315)
    n_581882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 41), 'n')
    int_581883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 43), 'int')
    # Applying the binary operator '+' (line 1315)
    result_add_581884 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 41), '+', n_581882, int_581883)
    
    # Applying the binary operator '*' (line 1315)
    result_mul_581885 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 38), '*', result_mul_581881, result_add_581884)
    
    # Applying the binary operator 'div' (line 1314)
    result_div_581886 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 54), 'div', result_mul_581870, result_mul_581885)
    
    # Assigning a type to the variable 'beta2' (line 1314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 4), 'beta2', result_div_581886)
    
    # Assigning a BinOp to a Name (line 1316):
    
    # Assigning a BinOp to a Name (line 1316):
    int_581887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 9), 'int')
    
    # Call to sqrt(...): (line 1316)
    # Processing the call arguments (line 1316)
    int_581890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 24), 'int')
    # Getting the type of 'beta2' (line 1316)
    beta2_581891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 29), 'beta2', False)
    int_581892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 37), 'int')
    # Applying the binary operator '-' (line 1316)
    result_sub_581893 = python_operator(stypy.reporting.localization.Localization(__file__, 1316, 29), '-', beta2_581891, int_581892)
    
    # Applying the binary operator '*' (line 1316)
    result_mul_581894 = python_operator(stypy.reporting.localization.Localization(__file__, 1316, 24), '*', int_581890, result_sub_581893)
    
    # Processing the call keyword arguments (line 1316)
    kwargs_581895 = {}
    # Getting the type of 'math' (line 1316)
    math_581888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 14), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 1316)
    sqrt_581889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 14), math_581888, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1316)
    sqrt_call_result_581896 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 14), sqrt_581889, *[result_mul_581894], **kwargs_581895)
    
    # Applying the binary operator '+' (line 1316)
    result_add_581897 = python_operator(stypy.reporting.localization.Localization(__file__, 1316, 9), '+', int_581887, sqrt_call_result_581896)
    
    # Assigning a type to the variable 'W2' (line 1316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 4), 'W2', result_add_581897)
    
    # Assigning a BinOp to a Name (line 1317):
    
    # Assigning a BinOp to a Name (line 1317):
    int_581898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 12), 'int')
    
    # Call to sqrt(...): (line 1317)
    # Processing the call arguments (line 1317)
    float_581901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 26), 'float')
    
    # Call to log(...): (line 1317)
    # Processing the call arguments (line 1317)
    # Getting the type of 'W2' (line 1317)
    W2_581904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 41), 'W2', False)
    # Processing the call keyword arguments (line 1317)
    kwargs_581905 = {}
    # Getting the type of 'math' (line 1317)
    math_581902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 32), 'math', False)
    # Obtaining the member 'log' of a type (line 1317)
    log_581903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 32), math_581902, 'log')
    # Calling log(args, kwargs) (line 1317)
    log_call_result_581906 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 32), log_581903, *[W2_581904], **kwargs_581905)
    
    # Applying the binary operator '*' (line 1317)
    result_mul_581907 = python_operator(stypy.reporting.localization.Localization(__file__, 1317, 26), '*', float_581901, log_call_result_581906)
    
    # Processing the call keyword arguments (line 1317)
    kwargs_581908 = {}
    # Getting the type of 'math' (line 1317)
    math_581899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 16), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 1317)
    sqrt_581900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 16), math_581899, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1317)
    sqrt_call_result_581909 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 16), sqrt_581900, *[result_mul_581907], **kwargs_581908)
    
    # Applying the binary operator 'div' (line 1317)
    result_div_581910 = python_operator(stypy.reporting.localization.Localization(__file__, 1317, 12), 'div', int_581898, sqrt_call_result_581909)
    
    # Assigning a type to the variable 'delta' (line 1317)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 4), 'delta', result_div_581910)
    
    # Assigning a Call to a Name (line 1318):
    
    # Assigning a Call to a Name (line 1318):
    
    # Call to sqrt(...): (line 1318)
    # Processing the call arguments (line 1318)
    float_581913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 22), 'float')
    # Getting the type of 'W2' (line 1318)
    W2_581914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 29), 'W2', False)
    int_581915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 34), 'int')
    # Applying the binary operator '-' (line 1318)
    result_sub_581916 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 29), '-', W2_581914, int_581915)
    
    # Applying the binary operator 'div' (line 1318)
    result_div_581917 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 22), 'div', float_581913, result_sub_581916)
    
    # Processing the call keyword arguments (line 1318)
    kwargs_581918 = {}
    # Getting the type of 'math' (line 1318)
    math_581911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 1318)
    sqrt_581912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 12), math_581911, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1318)
    sqrt_call_result_581919 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 12), sqrt_581912, *[result_div_581917], **kwargs_581918)
    
    # Assigning a type to the variable 'alpha' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 4), 'alpha', sqrt_call_result_581919)
    
    # Assigning a Call to a Name (line 1319):
    
    # Assigning a Call to a Name (line 1319):
    
    # Call to where(...): (line 1319)
    # Processing the call arguments (line 1319)
    
    # Getting the type of 'y' (line 1319)
    y_581922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 17), 'y', False)
    int_581923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 22), 'int')
    # Applying the binary operator '==' (line 1319)
    result_eq_581924 = python_operator(stypy.reporting.localization.Localization(__file__, 1319, 17), '==', y_581922, int_581923)
    
    int_581925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 25), 'int')
    # Getting the type of 'y' (line 1319)
    y_581926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 28), 'y', False)
    # Processing the call keyword arguments (line 1319)
    kwargs_581927 = {}
    # Getting the type of 'np' (line 1319)
    np_581920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 8), 'np', False)
    # Obtaining the member 'where' of a type (line 1319)
    where_581921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 8), np_581920, 'where')
    # Calling where(args, kwargs) (line 1319)
    where_call_result_581928 = invoke(stypy.reporting.localization.Localization(__file__, 1319, 8), where_581921, *[result_eq_581924, int_581925, y_581926], **kwargs_581927)
    
    # Assigning a type to the variable 'y' (line 1319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 4), 'y', where_call_result_581928)
    
    # Assigning a BinOp to a Name (line 1320):
    
    # Assigning a BinOp to a Name (line 1320):
    # Getting the type of 'delta' (line 1320)
    delta_581929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 8), 'delta')
    
    # Call to log(...): (line 1320)
    # Processing the call arguments (line 1320)
    # Getting the type of 'y' (line 1320)
    y_581932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 23), 'y', False)
    # Getting the type of 'alpha' (line 1320)
    alpha_581933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 27), 'alpha', False)
    # Applying the binary operator 'div' (line 1320)
    result_div_581934 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 23), 'div', y_581932, alpha_581933)
    
    
    # Call to sqrt(...): (line 1320)
    # Processing the call arguments (line 1320)
    # Getting the type of 'y' (line 1320)
    y_581937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 44), 'y', False)
    # Getting the type of 'alpha' (line 1320)
    alpha_581938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 48), 'alpha', False)
    # Applying the binary operator 'div' (line 1320)
    result_div_581939 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 44), 'div', y_581937, alpha_581938)
    
    int_581940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 56), 'int')
    # Applying the binary operator '**' (line 1320)
    result_pow_581941 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 43), '**', result_div_581939, int_581940)
    
    int_581942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 60), 'int')
    # Applying the binary operator '+' (line 1320)
    result_add_581943 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 43), '+', result_pow_581941, int_581942)
    
    # Processing the call keyword arguments (line 1320)
    kwargs_581944 = {}
    # Getting the type of 'np' (line 1320)
    np_581935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 35), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1320)
    sqrt_581936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 35), np_581935, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1320)
    sqrt_call_result_581945 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 35), sqrt_581936, *[result_add_581943], **kwargs_581944)
    
    # Applying the binary operator '+' (line 1320)
    result_add_581946 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 23), '+', result_div_581934, sqrt_call_result_581945)
    
    # Processing the call keyword arguments (line 1320)
    kwargs_581947 = {}
    # Getting the type of 'np' (line 1320)
    np_581930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 16), 'np', False)
    # Obtaining the member 'log' of a type (line 1320)
    log_581931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 16), np_581930, 'log')
    # Calling log(args, kwargs) (line 1320)
    log_call_result_581948 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 16), log_581931, *[result_add_581946], **kwargs_581947)
    
    # Applying the binary operator '*' (line 1320)
    result_mul_581949 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 8), '*', delta_581929, log_call_result_581948)
    
    # Assigning a type to the variable 'Z' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 4), 'Z', result_mul_581949)
    
    # Call to SkewtestResult(...): (line 1322)
    # Processing the call arguments (line 1322)
    # Getting the type of 'Z' (line 1322)
    Z_581951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 26), 'Z', False)
    int_581952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1322, 29), 'int')
    
    # Call to sf(...): (line 1322)
    # Processing the call arguments (line 1322)
    
    # Call to abs(...): (line 1322)
    # Processing the call arguments (line 1322)
    # Getting the type of 'Z' (line 1322)
    Z_581958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 62), 'Z', False)
    # Processing the call keyword arguments (line 1322)
    kwargs_581959 = {}
    # Getting the type of 'np' (line 1322)
    np_581956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 55), 'np', False)
    # Obtaining the member 'abs' of a type (line 1322)
    abs_581957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1322, 55), np_581956, 'abs')
    # Calling abs(args, kwargs) (line 1322)
    abs_call_result_581960 = invoke(stypy.reporting.localization.Localization(__file__, 1322, 55), abs_581957, *[Z_581958], **kwargs_581959)
    
    # Processing the call keyword arguments (line 1322)
    kwargs_581961 = {}
    # Getting the type of 'distributions' (line 1322)
    distributions_581953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 33), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 1322)
    norm_581954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1322, 33), distributions_581953, 'norm')
    # Obtaining the member 'sf' of a type (line 1322)
    sf_581955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1322, 33), norm_581954, 'sf')
    # Calling sf(args, kwargs) (line 1322)
    sf_call_result_581962 = invoke(stypy.reporting.localization.Localization(__file__, 1322, 33), sf_581955, *[abs_call_result_581960], **kwargs_581961)
    
    # Applying the binary operator '*' (line 1322)
    result_mul_581963 = python_operator(stypy.reporting.localization.Localization(__file__, 1322, 29), '*', int_581952, sf_call_result_581962)
    
    # Processing the call keyword arguments (line 1322)
    kwargs_581964 = {}
    # Getting the type of 'SkewtestResult' (line 1322)
    SkewtestResult_581950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 11), 'SkewtestResult', False)
    # Calling SkewtestResult(args, kwargs) (line 1322)
    SkewtestResult_call_result_581965 = invoke(stypy.reporting.localization.Localization(__file__, 1322, 11), SkewtestResult_581950, *[Z_581951, result_mul_581963], **kwargs_581964)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1322, 4), 'stypy_return_type', SkewtestResult_call_result_581965)
    
    # ################# End of 'skewtest(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'skewtest' in the type store
    # Getting the type of 'stypy_return_type' (line 1247)
    stypy_return_type_581966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_581966)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'skewtest'
    return stypy_return_type_581966

# Assigning a type to the variable 'skewtest' (line 1247)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 0), 'skewtest', skewtest)

# Assigning a Call to a Name (line 1324):

# Assigning a Call to a Name (line 1324):

# Call to namedtuple(...): (line 1324)
# Processing the call arguments (line 1324)
str_581968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1324, 32), 'str', 'KurtosistestResult')

# Obtaining an instance of the builtin type 'tuple' (line 1324)
tuple_581969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1324, 55), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1324)
# Adding element type (line 1324)
str_581970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1324, 55), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1324, 55), tuple_581969, str_581970)
# Adding element type (line 1324)
str_581971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1324, 68), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1324, 55), tuple_581969, str_581971)

# Processing the call keyword arguments (line 1324)
kwargs_581972 = {}
# Getting the type of 'namedtuple' (line 1324)
namedtuple_581967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 21), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1324)
namedtuple_call_result_581973 = invoke(stypy.reporting.localization.Localization(__file__, 1324, 21), namedtuple_581967, *[str_581968, tuple_581969], **kwargs_581972)

# Assigning a type to the variable 'KurtosistestResult' (line 1324)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1324, 0), 'KurtosistestResult', namedtuple_call_result_581973)

@norecursion
def kurtosistest(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_581974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 25), 'int')
    str_581975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 39), 'str', 'propagate')
    defaults = [int_581974, str_581975]
    # Create a new context for function 'kurtosistest'
    module_type_store = module_type_store.open_function_context('kurtosistest', 1327, 0, False)
    
    # Passed parameters checking function
    kurtosistest.stypy_localization = localization
    kurtosistest.stypy_type_of_self = None
    kurtosistest.stypy_type_store = module_type_store
    kurtosistest.stypy_function_name = 'kurtosistest'
    kurtosistest.stypy_param_names_list = ['a', 'axis', 'nan_policy']
    kurtosistest.stypy_varargs_param_name = None
    kurtosistest.stypy_kwargs_param_name = None
    kurtosistest.stypy_call_defaults = defaults
    kurtosistest.stypy_call_varargs = varargs
    kurtosistest.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kurtosistest', ['a', 'axis', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kurtosistest', localization, ['a', 'axis', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kurtosistest(...)' code ##################

    str_581976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1374, (-1)), 'str', '\n    Test whether a dataset has normal kurtosis.\n\n    This function tests the null hypothesis that the kurtosis\n    of the population from which the sample was drawn is that\n    of the normal distribution: ``kurtosis = 3(n-1)/(n+1)``.\n\n    Parameters\n    ----------\n    a : array\n        array of the sample data\n    axis : int or None, optional\n       Axis along which to compute test. Default is 0. If None,\n       compute over the whole array `a`.\n    nan_policy : {\'propagate\', \'raise\', \'omit\'}, optional\n        Defines how to handle when input contains nan. \'propagate\' returns nan,\n        \'raise\' throws an error, \'omit\' performs the calculations ignoring nan\n        values. Default is \'propagate\'.\n\n    Returns\n    -------\n    statistic : float\n        The computed z-score for this test.\n    pvalue : float\n        The 2-sided p-value for the hypothesis test\n\n    Notes\n    -----\n    Valid only for n>20.  The Z-score is set to 0 for bad entries.\n    This function uses the method described in [1]_.\n\n    References\n    ----------\n    .. [1] see e.g. F. J. Anscombe, W. J. Glynn, "Distribution of the kurtosis\n       statistic b2 for normal samples", Biometrika, vol. 70, pp. 227-234, 1983.\n\n    Examples\n    --------\n    >>> from scipy.stats import kurtosistest\n    >>> kurtosistest(list(range(20)))\n    KurtosistestResult(statistic=-1.7058104152122062, pvalue=0.088043383325283484)\n\n    >>> np.random.seed(28041990)\n    >>> s = np.random.normal(0, 1, 1000)\n    >>> kurtosistest(s)\n    KurtosistestResult(statistic=1.2317590987707365, pvalue=0.21803908613450895)\n    ')
    
    # Assigning a Call to a Tuple (line 1375):
    
    # Assigning a Subscript to a Name (line 1375):
    
    # Obtaining the type of the subscript
    int_581977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1375)
    # Processing the call arguments (line 1375)
    # Getting the type of 'a' (line 1375)
    a_581979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 27), 'a', False)
    # Getting the type of 'axis' (line 1375)
    axis_581980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 30), 'axis', False)
    # Processing the call keyword arguments (line 1375)
    kwargs_581981 = {}
    # Getting the type of '_chk_asarray' (line 1375)
    _chk_asarray_581978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1375)
    _chk_asarray_call_result_581982 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 14), _chk_asarray_581978, *[a_581979, axis_581980], **kwargs_581981)
    
    # Obtaining the member '__getitem__' of a type (line 1375)
    getitem___581983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 4), _chk_asarray_call_result_581982, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1375)
    subscript_call_result_581984 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 4), getitem___581983, int_581977)
    
    # Assigning a type to the variable 'tuple_var_assignment_579885' (line 1375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 4), 'tuple_var_assignment_579885', subscript_call_result_581984)
    
    # Assigning a Subscript to a Name (line 1375):
    
    # Obtaining the type of the subscript
    int_581985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1375)
    # Processing the call arguments (line 1375)
    # Getting the type of 'a' (line 1375)
    a_581987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 27), 'a', False)
    # Getting the type of 'axis' (line 1375)
    axis_581988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 30), 'axis', False)
    # Processing the call keyword arguments (line 1375)
    kwargs_581989 = {}
    # Getting the type of '_chk_asarray' (line 1375)
    _chk_asarray_581986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1375)
    _chk_asarray_call_result_581990 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 14), _chk_asarray_581986, *[a_581987, axis_581988], **kwargs_581989)
    
    # Obtaining the member '__getitem__' of a type (line 1375)
    getitem___581991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 4), _chk_asarray_call_result_581990, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1375)
    subscript_call_result_581992 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 4), getitem___581991, int_581985)
    
    # Assigning a type to the variable 'tuple_var_assignment_579886' (line 1375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 4), 'tuple_var_assignment_579886', subscript_call_result_581992)
    
    # Assigning a Name to a Name (line 1375):
    # Getting the type of 'tuple_var_assignment_579885' (line 1375)
    tuple_var_assignment_579885_581993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 4), 'tuple_var_assignment_579885')
    # Assigning a type to the variable 'a' (line 1375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 4), 'a', tuple_var_assignment_579885_581993)
    
    # Assigning a Name to a Name (line 1375):
    # Getting the type of 'tuple_var_assignment_579886' (line 1375)
    tuple_var_assignment_579886_581994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 4), 'tuple_var_assignment_579886')
    # Assigning a type to the variable 'axis' (line 1375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 7), 'axis', tuple_var_assignment_579886_581994)
    
    # Assigning a Call to a Tuple (line 1377):
    
    # Assigning a Subscript to a Name (line 1377):
    
    # Obtaining the type of the subscript
    int_581995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1377, 4), 'int')
    
    # Call to _contains_nan(...): (line 1377)
    # Processing the call arguments (line 1377)
    # Getting the type of 'a' (line 1377)
    a_581997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1377)
    nan_policy_581998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1377)
    kwargs_581999 = {}
    # Getting the type of '_contains_nan' (line 1377)
    _contains_nan_581996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1377)
    _contains_nan_call_result_582000 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 31), _contains_nan_581996, *[a_581997, nan_policy_581998], **kwargs_581999)
    
    # Obtaining the member '__getitem__' of a type (line 1377)
    getitem___582001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 4), _contains_nan_call_result_582000, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1377)
    subscript_call_result_582002 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 4), getitem___582001, int_581995)
    
    # Assigning a type to the variable 'tuple_var_assignment_579887' (line 1377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1377, 4), 'tuple_var_assignment_579887', subscript_call_result_582002)
    
    # Assigning a Subscript to a Name (line 1377):
    
    # Obtaining the type of the subscript
    int_582003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1377, 4), 'int')
    
    # Call to _contains_nan(...): (line 1377)
    # Processing the call arguments (line 1377)
    # Getting the type of 'a' (line 1377)
    a_582005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1377)
    nan_policy_582006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1377)
    kwargs_582007 = {}
    # Getting the type of '_contains_nan' (line 1377)
    _contains_nan_582004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1377)
    _contains_nan_call_result_582008 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 31), _contains_nan_582004, *[a_582005, nan_policy_582006], **kwargs_582007)
    
    # Obtaining the member '__getitem__' of a type (line 1377)
    getitem___582009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 4), _contains_nan_call_result_582008, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1377)
    subscript_call_result_582010 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 4), getitem___582009, int_582003)
    
    # Assigning a type to the variable 'tuple_var_assignment_579888' (line 1377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1377, 4), 'tuple_var_assignment_579888', subscript_call_result_582010)
    
    # Assigning a Name to a Name (line 1377):
    # Getting the type of 'tuple_var_assignment_579887' (line 1377)
    tuple_var_assignment_579887_582011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 4), 'tuple_var_assignment_579887')
    # Assigning a type to the variable 'contains_nan' (line 1377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1377, 4), 'contains_nan', tuple_var_assignment_579887_582011)
    
    # Assigning a Name to a Name (line 1377):
    # Getting the type of 'tuple_var_assignment_579888' (line 1377)
    tuple_var_assignment_579888_582012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 4), 'tuple_var_assignment_579888')
    # Assigning a type to the variable 'nan_policy' (line 1377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1377, 18), 'nan_policy', tuple_var_assignment_579888_582012)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 1379)
    contains_nan_582013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 1379)
    nan_policy_582014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 24), 'nan_policy')
    str_582015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 1379)
    result_eq_582016 = python_operator(stypy.reporting.localization.Localization(__file__, 1379, 24), '==', nan_policy_582014, str_582015)
    
    # Applying the binary operator 'and' (line 1379)
    result_and_keyword_582017 = python_operator(stypy.reporting.localization.Localization(__file__, 1379, 7), 'and', contains_nan_582013, result_eq_582016)
    
    # Testing the type of an if condition (line 1379)
    if_condition_582018 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1379, 4), result_and_keyword_582017)
    # Assigning a type to the variable 'if_condition_582018' (line 1379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 4), 'if_condition_582018', if_condition_582018)
    # SSA begins for if statement (line 1379)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1380):
    
    # Assigning a Call to a Name (line 1380):
    
    # Call to masked_invalid(...): (line 1380)
    # Processing the call arguments (line 1380)
    # Getting the type of 'a' (line 1380)
    a_582021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 30), 'a', False)
    # Processing the call keyword arguments (line 1380)
    kwargs_582022 = {}
    # Getting the type of 'ma' (line 1380)
    ma_582019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 1380)
    masked_invalid_582020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1380, 12), ma_582019, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 1380)
    masked_invalid_call_result_582023 = invoke(stypy.reporting.localization.Localization(__file__, 1380, 12), masked_invalid_582020, *[a_582021], **kwargs_582022)
    
    # Assigning a type to the variable 'a' (line 1380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1380, 8), 'a', masked_invalid_call_result_582023)
    
    # Call to kurtosistest(...): (line 1381)
    # Processing the call arguments (line 1381)
    # Getting the type of 'a' (line 1381)
    a_582026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 41), 'a', False)
    # Getting the type of 'axis' (line 1381)
    axis_582027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 44), 'axis', False)
    # Processing the call keyword arguments (line 1381)
    kwargs_582028 = {}
    # Getting the type of 'mstats_basic' (line 1381)
    mstats_basic_582024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 15), 'mstats_basic', False)
    # Obtaining the member 'kurtosistest' of a type (line 1381)
    kurtosistest_582025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1381, 15), mstats_basic_582024, 'kurtosistest')
    # Calling kurtosistest(args, kwargs) (line 1381)
    kurtosistest_call_result_582029 = invoke(stypy.reporting.localization.Localization(__file__, 1381, 15), kurtosistest_582025, *[a_582026, axis_582027], **kwargs_582028)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'stypy_return_type', kurtosistest_call_result_582029)
    # SSA join for if statement (line 1379)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1383):
    
    # Assigning a Call to a Name (line 1383):
    
    # Call to float(...): (line 1383)
    # Processing the call arguments (line 1383)
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1383)
    axis_582031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 22), 'axis', False)
    # Getting the type of 'a' (line 1383)
    a_582032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 14), 'a', False)
    # Obtaining the member 'shape' of a type (line 1383)
    shape_582033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 14), a_582032, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1383)
    getitem___582034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 14), shape_582033, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1383)
    subscript_call_result_582035 = invoke(stypy.reporting.localization.Localization(__file__, 1383, 14), getitem___582034, axis_582031)
    
    # Processing the call keyword arguments (line 1383)
    kwargs_582036 = {}
    # Getting the type of 'float' (line 1383)
    float_582030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 8), 'float', False)
    # Calling float(args, kwargs) (line 1383)
    float_call_result_582037 = invoke(stypy.reporting.localization.Localization(__file__, 1383, 8), float_582030, *[subscript_call_result_582035], **kwargs_582036)
    
    # Assigning a type to the variable 'n' (line 1383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 4), 'n', float_call_result_582037)
    
    
    # Getting the type of 'n' (line 1384)
    n_582038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 7), 'n')
    int_582039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1384, 11), 'int')
    # Applying the binary operator '<' (line 1384)
    result_lt_582040 = python_operator(stypy.reporting.localization.Localization(__file__, 1384, 7), '<', n_582038, int_582039)
    
    # Testing the type of an if condition (line 1384)
    if_condition_582041 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1384, 4), result_lt_582040)
    # Assigning a type to the variable 'if_condition_582041' (line 1384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 4), 'if_condition_582041', if_condition_582041)
    # SSA begins for if statement (line 1384)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1385)
    # Processing the call arguments (line 1385)
    str_582043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1386, 12), 'str', 'kurtosistest requires at least 5 observations; %i observations were given.')
    
    # Call to int(...): (line 1387)
    # Processing the call arguments (line 1387)
    # Getting the type of 'n' (line 1387)
    n_582045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 33), 'n', False)
    # Processing the call keyword arguments (line 1387)
    kwargs_582046 = {}
    # Getting the type of 'int' (line 1387)
    int_582044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 29), 'int', False)
    # Calling int(args, kwargs) (line 1387)
    int_call_result_582047 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 29), int_582044, *[n_582045], **kwargs_582046)
    
    # Applying the binary operator '%' (line 1386)
    result_mod_582048 = python_operator(stypy.reporting.localization.Localization(__file__, 1386, 12), '%', str_582043, int_call_result_582047)
    
    # Processing the call keyword arguments (line 1385)
    kwargs_582049 = {}
    # Getting the type of 'ValueError' (line 1385)
    ValueError_582042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1385)
    ValueError_call_result_582050 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 14), ValueError_582042, *[result_mod_582048], **kwargs_582049)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1385, 8), ValueError_call_result_582050, 'raise parameter', BaseException)
    # SSA join for if statement (line 1384)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1388)
    n_582051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 7), 'n')
    int_582052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 11), 'int')
    # Applying the binary operator '<' (line 1388)
    result_lt_582053 = python_operator(stypy.reporting.localization.Localization(__file__, 1388, 7), '<', n_582051, int_582052)
    
    # Testing the type of an if condition (line 1388)
    if_condition_582054 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1388, 4), result_lt_582053)
    # Assigning a type to the variable 'if_condition_582054' (line 1388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 4), 'if_condition_582054', if_condition_582054)
    # SSA begins for if statement (line 1388)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1389)
    # Processing the call arguments (line 1389)
    str_582057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1389, 22), 'str', 'kurtosistest only valid for n>=20 ... continuing anyway, n=%i')
    
    # Call to int(...): (line 1390)
    # Processing the call arguments (line 1390)
    # Getting the type of 'n' (line 1390)
    n_582059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 43), 'n', False)
    # Processing the call keyword arguments (line 1390)
    kwargs_582060 = {}
    # Getting the type of 'int' (line 1390)
    int_582058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 39), 'int', False)
    # Calling int(args, kwargs) (line 1390)
    int_call_result_582061 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 39), int_582058, *[n_582059], **kwargs_582060)
    
    # Applying the binary operator '%' (line 1389)
    result_mod_582062 = python_operator(stypy.reporting.localization.Localization(__file__, 1389, 22), '%', str_582057, int_call_result_582061)
    
    # Processing the call keyword arguments (line 1389)
    kwargs_582063 = {}
    # Getting the type of 'warnings' (line 1389)
    warnings_582055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1389)
    warn_582056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 8), warnings_582055, 'warn')
    # Calling warn(args, kwargs) (line 1389)
    warn_call_result_582064 = invoke(stypy.reporting.localization.Localization(__file__, 1389, 8), warn_582056, *[result_mod_582062], **kwargs_582063)
    
    # SSA join for if statement (line 1388)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1391):
    
    # Assigning a Call to a Name (line 1391):
    
    # Call to kurtosis(...): (line 1391)
    # Processing the call arguments (line 1391)
    # Getting the type of 'a' (line 1391)
    a_582066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 18), 'a', False)
    # Getting the type of 'axis' (line 1391)
    axis_582067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 21), 'axis', False)
    # Processing the call keyword arguments (line 1391)
    # Getting the type of 'False' (line 1391)
    False_582068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 34), 'False', False)
    keyword_582069 = False_582068
    kwargs_582070 = {'fisher': keyword_582069}
    # Getting the type of 'kurtosis' (line 1391)
    kurtosis_582065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 9), 'kurtosis', False)
    # Calling kurtosis(args, kwargs) (line 1391)
    kurtosis_call_result_582071 = invoke(stypy.reporting.localization.Localization(__file__, 1391, 9), kurtosis_582065, *[a_582066, axis_582067], **kwargs_582070)
    
    # Assigning a type to the variable 'b2' (line 1391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1391, 4), 'b2', kurtosis_call_result_582071)
    
    # Assigning a BinOp to a Name (line 1393):
    
    # Assigning a BinOp to a Name (line 1393):
    float_582072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1393, 8), 'float')
    # Getting the type of 'n' (line 1393)
    n_582073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 13), 'n')
    int_582074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1393, 15), 'int')
    # Applying the binary operator '-' (line 1393)
    result_sub_582075 = python_operator(stypy.reporting.localization.Localization(__file__, 1393, 13), '-', n_582073, int_582074)
    
    # Applying the binary operator '*' (line 1393)
    result_mul_582076 = python_operator(stypy.reporting.localization.Localization(__file__, 1393, 8), '*', float_582072, result_sub_582075)
    
    # Getting the type of 'n' (line 1393)
    n_582077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 21), 'n')
    int_582078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1393, 23), 'int')
    # Applying the binary operator '+' (line 1393)
    result_add_582079 = python_operator(stypy.reporting.localization.Localization(__file__, 1393, 21), '+', n_582077, int_582078)
    
    # Applying the binary operator 'div' (line 1393)
    result_div_582080 = python_operator(stypy.reporting.localization.Localization(__file__, 1393, 18), 'div', result_mul_582076, result_add_582079)
    
    # Assigning a type to the variable 'E' (line 1393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 4), 'E', result_div_582080)
    
    # Assigning a BinOp to a Name (line 1394):
    
    # Assigning a BinOp to a Name (line 1394):
    float_582081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 12), 'float')
    # Getting the type of 'n' (line 1394)
    n_582082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 17), 'n')
    # Applying the binary operator '*' (line 1394)
    result_mul_582083 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 12), '*', float_582081, n_582082)
    
    # Getting the type of 'n' (line 1394)
    n_582084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 20), 'n')
    int_582085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 22), 'int')
    # Applying the binary operator '-' (line 1394)
    result_sub_582086 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 20), '-', n_582084, int_582085)
    
    # Applying the binary operator '*' (line 1394)
    result_mul_582087 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 18), '*', result_mul_582083, result_sub_582086)
    
    # Getting the type of 'n' (line 1394)
    n_582088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 26), 'n')
    int_582089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 28), 'int')
    # Applying the binary operator '-' (line 1394)
    result_sub_582090 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 26), '-', n_582088, int_582089)
    
    # Applying the binary operator '*' (line 1394)
    result_mul_582091 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 24), '*', result_mul_582087, result_sub_582090)
    
    # Getting the type of 'n' (line 1394)
    n_582092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 35), 'n')
    int_582093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 37), 'int')
    # Applying the binary operator '+' (line 1394)
    result_add_582094 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 35), '+', n_582092, int_582093)
    
    # Getting the type of 'n' (line 1394)
    n_582095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 41), 'n')
    float_582096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 43), 'float')
    # Applying the binary operator '+' (line 1394)
    result_add_582097 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 41), '+', n_582095, float_582096)
    
    # Applying the binary operator '*' (line 1394)
    result_mul_582098 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 34), '*', result_add_582094, result_add_582097)
    
    # Getting the type of 'n' (line 1394)
    n_582099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 48), 'n')
    int_582100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 50), 'int')
    # Applying the binary operator '+' (line 1394)
    result_add_582101 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 48), '+', n_582099, int_582100)
    
    # Applying the binary operator '*' (line 1394)
    result_mul_582102 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 46), '*', result_mul_582098, result_add_582101)
    
    # Getting the type of 'n' (line 1394)
    n_582103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 54), 'n')
    int_582104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 56), 'int')
    # Applying the binary operator '+' (line 1394)
    result_add_582105 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 54), '+', n_582103, int_582104)
    
    # Applying the binary operator '*' (line 1394)
    result_mul_582106 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 52), '*', result_mul_582102, result_add_582105)
    
    # Applying the binary operator 'div' (line 1394)
    result_div_582107 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 31), 'div', result_mul_582091, result_mul_582106)
    
    # Assigning a type to the variable 'varb2' (line 1394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 4), 'varb2', result_div_582107)
    
    # Assigning a BinOp to a Name (line 1395):
    
    # Assigning a BinOp to a Name (line 1395):
    # Getting the type of 'b2' (line 1395)
    b2_582108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 9), 'b2')
    # Getting the type of 'E' (line 1395)
    E_582109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 12), 'E')
    # Applying the binary operator '-' (line 1395)
    result_sub_582110 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 9), '-', b2_582108, E_582109)
    
    
    # Call to sqrt(...): (line 1395)
    # Processing the call arguments (line 1395)
    # Getting the type of 'varb2' (line 1395)
    varb2_582113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 25), 'varb2', False)
    # Processing the call keyword arguments (line 1395)
    kwargs_582114 = {}
    # Getting the type of 'np' (line 1395)
    np_582111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 17), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1395)
    sqrt_582112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 17), np_582111, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1395)
    sqrt_call_result_582115 = invoke(stypy.reporting.localization.Localization(__file__, 1395, 17), sqrt_582112, *[varb2_582113], **kwargs_582114)
    
    # Applying the binary operator 'div' (line 1395)
    result_div_582116 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 8), 'div', result_sub_582110, sqrt_call_result_582115)
    
    # Assigning a type to the variable 'x' (line 1395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 4), 'x', result_div_582116)
    
    # Assigning a BinOp to a Name (line 1397):
    
    # Assigning a BinOp to a Name (line 1397):
    float_582117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 16), 'float')
    # Getting the type of 'n' (line 1397)
    n_582118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 21), 'n')
    # Getting the type of 'n' (line 1397)
    n_582119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 23), 'n')
    # Applying the binary operator '*' (line 1397)
    result_mul_582120 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 21), '*', n_582118, n_582119)
    
    int_582121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 25), 'int')
    # Getting the type of 'n' (line 1397)
    n_582122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 27), 'n')
    # Applying the binary operator '*' (line 1397)
    result_mul_582123 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 25), '*', int_582121, n_582122)
    
    # Applying the binary operator '-' (line 1397)
    result_sub_582124 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 21), '-', result_mul_582120, result_mul_582123)
    
    int_582125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 29), 'int')
    # Applying the binary operator '+' (line 1397)
    result_add_582126 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 28), '+', result_sub_582124, int_582125)
    
    # Applying the binary operator '*' (line 1397)
    result_mul_582127 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 16), '*', float_582117, result_add_582126)
    
    # Getting the type of 'n' (line 1397)
    n_582128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 34), 'n')
    int_582129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 36), 'int')
    # Applying the binary operator '+' (line 1397)
    result_add_582130 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 34), '+', n_582128, int_582129)
    
    # Getting the type of 'n' (line 1397)
    n_582131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 40), 'n')
    int_582132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 42), 'int')
    # Applying the binary operator '+' (line 1397)
    result_add_582133 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 40), '+', n_582131, int_582132)
    
    # Applying the binary operator '*' (line 1397)
    result_mul_582134 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 33), '*', result_add_582130, result_add_582133)
    
    # Applying the binary operator 'div' (line 1397)
    result_div_582135 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 31), 'div', result_mul_582127, result_mul_582134)
    
    
    # Call to sqrt(...): (line 1397)
    # Processing the call arguments (line 1397)
    float_582138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 57), 'float')
    # Getting the type of 'n' (line 1397)
    n_582139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 62), 'n', False)
    int_582140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 64), 'int')
    # Applying the binary operator '+' (line 1397)
    result_add_582141 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 62), '+', n_582139, int_582140)
    
    # Applying the binary operator '*' (line 1397)
    result_mul_582142 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 57), '*', float_582138, result_add_582141)
    
    # Getting the type of 'n' (line 1397)
    n_582143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 68), 'n', False)
    int_582144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 70), 'int')
    # Applying the binary operator '+' (line 1397)
    result_add_582145 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 68), '+', n_582143, int_582144)
    
    # Applying the binary operator '*' (line 1397)
    result_mul_582146 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 66), '*', result_mul_582142, result_add_582145)
    
    # Getting the type of 'n' (line 1398)
    n_582147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 57), 'n', False)
    # Getting the type of 'n' (line 1398)
    n_582148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 60), 'n', False)
    int_582149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 62), 'int')
    # Applying the binary operator '-' (line 1398)
    result_sub_582150 = python_operator(stypy.reporting.localization.Localization(__file__, 1398, 60), '-', n_582148, int_582149)
    
    # Applying the binary operator '*' (line 1398)
    result_mul_582151 = python_operator(stypy.reporting.localization.Localization(__file__, 1398, 57), '*', n_582147, result_sub_582150)
    
    # Getting the type of 'n' (line 1398)
    n_582152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 66), 'n', False)
    int_582153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 68), 'int')
    # Applying the binary operator '-' (line 1398)
    result_sub_582154 = python_operator(stypy.reporting.localization.Localization(__file__, 1398, 66), '-', n_582152, int_582153)
    
    # Applying the binary operator '*' (line 1398)
    result_mul_582155 = python_operator(stypy.reporting.localization.Localization(__file__, 1398, 64), '*', result_mul_582151, result_sub_582154)
    
    # Applying the binary operator 'div' (line 1397)
    result_div_582156 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 56), 'div', result_mul_582146, result_mul_582155)
    
    # Processing the call keyword arguments (line 1397)
    kwargs_582157 = {}
    # Getting the type of 'np' (line 1397)
    np_582136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 48), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1397)
    sqrt_582137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 48), np_582136, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1397)
    sqrt_call_result_582158 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 48), sqrt_582137, *[result_div_582156], **kwargs_582157)
    
    # Applying the binary operator '*' (line 1397)
    result_mul_582159 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 46), '*', result_div_582135, sqrt_call_result_582158)
    
    # Assigning a type to the variable 'sqrtbeta1' (line 1397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 4), 'sqrtbeta1', result_mul_582159)
    
    # Assigning a BinOp to a Name (line 1400):
    
    # Assigning a BinOp to a Name (line 1400):
    float_582160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 8), 'float')
    float_582161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 14), 'float')
    # Getting the type of 'sqrtbeta1' (line 1400)
    sqrtbeta1_582162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 18), 'sqrtbeta1')
    # Applying the binary operator 'div' (line 1400)
    result_div_582163 = python_operator(stypy.reporting.localization.Localization(__file__, 1400, 14), 'div', float_582161, sqrtbeta1_582162)
    
    float_582164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 31), 'float')
    # Getting the type of 'sqrtbeta1' (line 1400)
    sqrtbeta1_582165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 35), 'sqrtbeta1')
    # Applying the binary operator 'div' (line 1400)
    result_div_582166 = python_operator(stypy.reporting.localization.Localization(__file__, 1400, 31), 'div', float_582164, sqrtbeta1_582165)
    
    
    # Call to sqrt(...): (line 1400)
    # Processing the call arguments (line 1400)
    int_582169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 55), 'int')
    float_582170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 57), 'float')
    # Getting the type of 'sqrtbeta1' (line 1400)
    sqrtbeta1_582171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 62), 'sqrtbeta1', False)
    int_582172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 73), 'int')
    # Applying the binary operator '**' (line 1400)
    result_pow_582173 = python_operator(stypy.reporting.localization.Localization(__file__, 1400, 62), '**', sqrtbeta1_582171, int_582172)
    
    # Applying the binary operator 'div' (line 1400)
    result_div_582174 = python_operator(stypy.reporting.localization.Localization(__file__, 1400, 57), 'div', float_582170, result_pow_582173)
    
    # Applying the binary operator '+' (line 1400)
    result_add_582175 = python_operator(stypy.reporting.localization.Localization(__file__, 1400, 55), '+', int_582169, result_div_582174)
    
    # Processing the call keyword arguments (line 1400)
    kwargs_582176 = {}
    # Getting the type of 'np' (line 1400)
    np_582167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 47), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1400)
    sqrt_582168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 47), np_582167, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1400)
    sqrt_call_result_582177 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 47), sqrt_582168, *[result_add_582175], **kwargs_582176)
    
    # Applying the binary operator '+' (line 1400)
    result_add_582178 = python_operator(stypy.reporting.localization.Localization(__file__, 1400, 31), '+', result_div_582166, sqrt_call_result_582177)
    
    # Applying the binary operator '*' (line 1400)
    result_mul_582179 = python_operator(stypy.reporting.localization.Localization(__file__, 1400, 28), '*', result_div_582163, result_add_582178)
    
    # Applying the binary operator '+' (line 1400)
    result_add_582180 = python_operator(stypy.reporting.localization.Localization(__file__, 1400, 8), '+', float_582160, result_mul_582179)
    
    # Assigning a type to the variable 'A' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'A', result_add_582180)
    
    # Assigning a BinOp to a Name (line 1401):
    
    # Assigning a BinOp to a Name (line 1401):
    int_582181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 12), 'int')
    int_582182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 16), 'int')
    float_582183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 19), 'float')
    # Getting the type of 'A' (line 1401)
    A_582184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 23), 'A')
    # Applying the binary operator '*' (line 1401)
    result_mul_582185 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 19), '*', float_582183, A_582184)
    
    # Applying the binary operator 'div' (line 1401)
    result_div_582186 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 16), 'div', int_582182, result_mul_582185)
    
    # Applying the binary operator '-' (line 1401)
    result_sub_582187 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 12), '-', int_582181, result_div_582186)
    
    # Assigning a type to the variable 'term1' (line 1401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1401, 4), 'term1', result_sub_582187)
    
    # Assigning a BinOp to a Name (line 1402):
    
    # Assigning a BinOp to a Name (line 1402):
    int_582188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 12), 'int')
    # Getting the type of 'x' (line 1402)
    x_582189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 16), 'x')
    
    # Call to sqrt(...): (line 1402)
    # Processing the call arguments (line 1402)
    int_582192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 26), 'int')
    # Getting the type of 'A' (line 1402)
    A_582193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 29), 'A', False)
    float_582194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 31), 'float')
    # Applying the binary operator '-' (line 1402)
    result_sub_582195 = python_operator(stypy.reporting.localization.Localization(__file__, 1402, 29), '-', A_582193, float_582194)
    
    # Applying the binary operator 'div' (line 1402)
    result_div_582196 = python_operator(stypy.reporting.localization.Localization(__file__, 1402, 26), 'div', int_582192, result_sub_582195)
    
    # Processing the call keyword arguments (line 1402)
    kwargs_582197 = {}
    # Getting the type of 'np' (line 1402)
    np_582190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 18), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1402)
    sqrt_582191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1402, 18), np_582190, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1402)
    sqrt_call_result_582198 = invoke(stypy.reporting.localization.Localization(__file__, 1402, 18), sqrt_582191, *[result_div_582196], **kwargs_582197)
    
    # Applying the binary operator '*' (line 1402)
    result_mul_582199 = python_operator(stypy.reporting.localization.Localization(__file__, 1402, 16), '*', x_582189, sqrt_call_result_582198)
    
    # Applying the binary operator '+' (line 1402)
    result_add_582200 = python_operator(stypy.reporting.localization.Localization(__file__, 1402, 12), '+', int_582188, result_mul_582199)
    
    # Assigning a type to the variable 'denom' (line 1402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1402, 4), 'denom', result_add_582200)
    
    # Assigning a Call to a Name (line 1403):
    
    # Assigning a Call to a Name (line 1403):
    
    # Call to where(...): (line 1403)
    # Processing the call arguments (line 1403)
    
    # Getting the type of 'denom' (line 1403)
    denom_582203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 21), 'denom', False)
    int_582204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1403, 29), 'int')
    # Applying the binary operator '<' (line 1403)
    result_lt_582205 = python_operator(stypy.reporting.localization.Localization(__file__, 1403, 21), '<', denom_582203, int_582204)
    
    int_582206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1403, 32), 'int')
    # Getting the type of 'denom' (line 1403)
    denom_582207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 36), 'denom', False)
    # Processing the call keyword arguments (line 1403)
    kwargs_582208 = {}
    # Getting the type of 'np' (line 1403)
    np_582201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 12), 'np', False)
    # Obtaining the member 'where' of a type (line 1403)
    where_582202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1403, 12), np_582201, 'where')
    # Calling where(args, kwargs) (line 1403)
    where_call_result_582209 = invoke(stypy.reporting.localization.Localization(__file__, 1403, 12), where_582202, *[result_lt_582205, int_582206, denom_582207], **kwargs_582208)
    
    # Assigning a type to the variable 'denom' (line 1403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 4), 'denom', where_call_result_582209)
    
    # Assigning a Call to a Name (line 1404):
    
    # Assigning a Call to a Name (line 1404):
    
    # Call to where(...): (line 1404)
    # Processing the call arguments (line 1404)
    
    # Getting the type of 'denom' (line 1404)
    denom_582212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 21), 'denom', False)
    int_582213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 29), 'int')
    # Applying the binary operator '<' (line 1404)
    result_lt_582214 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 21), '<', denom_582212, int_582213)
    
    # Getting the type of 'term1' (line 1404)
    term1_582215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 32), 'term1', False)
    
    # Call to power(...): (line 1404)
    # Processing the call arguments (line 1404)
    int_582218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 49), 'int')
    float_582219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 51), 'float')
    # Getting the type of 'A' (line 1404)
    A_582220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 55), 'A', False)
    # Applying the binary operator 'div' (line 1404)
    result_div_582221 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 51), 'div', float_582219, A_582220)
    
    # Applying the binary operator '-' (line 1404)
    result_sub_582222 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 49), '-', int_582218, result_div_582221)
    
    # Getting the type of 'denom' (line 1404)
    denom_582223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 58), 'denom', False)
    # Applying the binary operator 'div' (line 1404)
    result_div_582224 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 48), 'div', result_sub_582222, denom_582223)
    
    int_582225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 65), 'int')
    float_582226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 67), 'float')
    # Applying the binary operator 'div' (line 1404)
    result_div_582227 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 65), 'div', int_582225, float_582226)
    
    # Processing the call keyword arguments (line 1404)
    kwargs_582228 = {}
    # Getting the type of 'np' (line 1404)
    np_582216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 39), 'np', False)
    # Obtaining the member 'power' of a type (line 1404)
    power_582217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 39), np_582216, 'power')
    # Calling power(args, kwargs) (line 1404)
    power_call_result_582229 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 39), power_582217, *[result_div_582224, result_div_582227], **kwargs_582228)
    
    # Processing the call keyword arguments (line 1404)
    kwargs_582230 = {}
    # Getting the type of 'np' (line 1404)
    np_582210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 12), 'np', False)
    # Obtaining the member 'where' of a type (line 1404)
    where_582211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 12), np_582210, 'where')
    # Calling where(args, kwargs) (line 1404)
    where_call_result_582231 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 12), where_582211, *[result_lt_582214, term1_582215, power_call_result_582229], **kwargs_582230)
    
    # Assigning a type to the variable 'term2' (line 1404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 4), 'term2', where_call_result_582231)
    
    # Assigning a BinOp to a Name (line 1405):
    
    # Assigning a BinOp to a Name (line 1405):
    # Getting the type of 'term1' (line 1405)
    term1_582232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 9), 'term1')
    # Getting the type of 'term2' (line 1405)
    term2_582233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 17), 'term2')
    # Applying the binary operator '-' (line 1405)
    result_sub_582234 = python_operator(stypy.reporting.localization.Localization(__file__, 1405, 9), '-', term1_582232, term2_582233)
    
    
    # Call to sqrt(...): (line 1405)
    # Processing the call arguments (line 1405)
    int_582237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 34), 'int')
    float_582238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 37), 'float')
    # Getting the type of 'A' (line 1405)
    A_582239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 41), 'A', False)
    # Applying the binary operator '*' (line 1405)
    result_mul_582240 = python_operator(stypy.reporting.localization.Localization(__file__, 1405, 37), '*', float_582238, A_582239)
    
    # Applying the binary operator 'div' (line 1405)
    result_div_582241 = python_operator(stypy.reporting.localization.Localization(__file__, 1405, 34), 'div', int_582237, result_mul_582240)
    
    # Processing the call keyword arguments (line 1405)
    kwargs_582242 = {}
    # Getting the type of 'np' (line 1405)
    np_582235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 26), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1405)
    sqrt_582236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 26), np_582235, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1405)
    sqrt_call_result_582243 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 26), sqrt_582236, *[result_div_582241], **kwargs_582242)
    
    # Applying the binary operator 'div' (line 1405)
    result_div_582244 = python_operator(stypy.reporting.localization.Localization(__file__, 1405, 8), 'div', result_sub_582234, sqrt_call_result_582243)
    
    # Assigning a type to the variable 'Z' (line 1405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 4), 'Z', result_div_582244)
    
    # Assigning a Call to a Name (line 1406):
    
    # Assigning a Call to a Name (line 1406):
    
    # Call to where(...): (line 1406)
    # Processing the call arguments (line 1406)
    
    # Getting the type of 'denom' (line 1406)
    denom_582247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 17), 'denom', False)
    int_582248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1406, 26), 'int')
    # Applying the binary operator '==' (line 1406)
    result_eq_582249 = python_operator(stypy.reporting.localization.Localization(__file__, 1406, 17), '==', denom_582247, int_582248)
    
    int_582250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1406, 30), 'int')
    # Getting the type of 'Z' (line 1406)
    Z_582251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 33), 'Z', False)
    # Processing the call keyword arguments (line 1406)
    kwargs_582252 = {}
    # Getting the type of 'np' (line 1406)
    np_582245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 8), 'np', False)
    # Obtaining the member 'where' of a type (line 1406)
    where_582246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1406, 8), np_582245, 'where')
    # Calling where(args, kwargs) (line 1406)
    where_call_result_582253 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 8), where_582246, *[result_eq_582249, int_582250, Z_582251], **kwargs_582252)
    
    # Assigning a type to the variable 'Z' (line 1406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 4), 'Z', where_call_result_582253)
    
    
    # Getting the type of 'Z' (line 1407)
    Z_582254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 7), 'Z')
    # Obtaining the member 'ndim' of a type (line 1407)
    ndim_582255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 7), Z_582254, 'ndim')
    int_582256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, 17), 'int')
    # Applying the binary operator '==' (line 1407)
    result_eq_582257 = python_operator(stypy.reporting.localization.Localization(__file__, 1407, 7), '==', ndim_582255, int_582256)
    
    # Testing the type of an if condition (line 1407)
    if_condition_582258 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1407, 4), result_eq_582257)
    # Assigning a type to the variable 'if_condition_582258' (line 1407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 4), 'if_condition_582258', if_condition_582258)
    # SSA begins for if statement (line 1407)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1408):
    
    # Assigning a Subscript to a Name (line 1408):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1408)
    tuple_582259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1408, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1408)
    
    # Getting the type of 'Z' (line 1408)
    Z_582260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 12), 'Z')
    # Obtaining the member '__getitem__' of a type (line 1408)
    getitem___582261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 12), Z_582260, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1408)
    subscript_call_result_582262 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 12), getitem___582261, tuple_582259)
    
    # Assigning a type to the variable 'Z' (line 1408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 8), 'Z', subscript_call_result_582262)
    # SSA join for if statement (line 1407)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to KurtosistestResult(...): (line 1411)
    # Processing the call arguments (line 1411)
    # Getting the type of 'Z' (line 1411)
    Z_582264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 30), 'Z', False)
    int_582265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 33), 'int')
    
    # Call to sf(...): (line 1411)
    # Processing the call arguments (line 1411)
    
    # Call to abs(...): (line 1411)
    # Processing the call arguments (line 1411)
    # Getting the type of 'Z' (line 1411)
    Z_582271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 66), 'Z', False)
    # Processing the call keyword arguments (line 1411)
    kwargs_582272 = {}
    # Getting the type of 'np' (line 1411)
    np_582269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 59), 'np', False)
    # Obtaining the member 'abs' of a type (line 1411)
    abs_582270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 59), np_582269, 'abs')
    # Calling abs(args, kwargs) (line 1411)
    abs_call_result_582273 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 59), abs_582270, *[Z_582271], **kwargs_582272)
    
    # Processing the call keyword arguments (line 1411)
    kwargs_582274 = {}
    # Getting the type of 'distributions' (line 1411)
    distributions_582266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 37), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 1411)
    norm_582267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 37), distributions_582266, 'norm')
    # Obtaining the member 'sf' of a type (line 1411)
    sf_582268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 37), norm_582267, 'sf')
    # Calling sf(args, kwargs) (line 1411)
    sf_call_result_582275 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 37), sf_582268, *[abs_call_result_582273], **kwargs_582274)
    
    # Applying the binary operator '*' (line 1411)
    result_mul_582276 = python_operator(stypy.reporting.localization.Localization(__file__, 1411, 33), '*', int_582265, sf_call_result_582275)
    
    # Processing the call keyword arguments (line 1411)
    kwargs_582277 = {}
    # Getting the type of 'KurtosistestResult' (line 1411)
    KurtosistestResult_582263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 11), 'KurtosistestResult', False)
    # Calling KurtosistestResult(args, kwargs) (line 1411)
    KurtosistestResult_call_result_582278 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 11), KurtosistestResult_582263, *[Z_582264, result_mul_582276], **kwargs_582277)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 4), 'stypy_return_type', KurtosistestResult_call_result_582278)
    
    # ################# End of 'kurtosistest(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kurtosistest' in the type store
    # Getting the type of 'stypy_return_type' (line 1327)
    stypy_return_type_582279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_582279)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kurtosistest'
    return stypy_return_type_582279

# Assigning a type to the variable 'kurtosistest' (line 1327)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 0), 'kurtosistest', kurtosistest)

# Assigning a Call to a Name (line 1413):

# Assigning a Call to a Name (line 1413):

# Call to namedtuple(...): (line 1413)
# Processing the call arguments (line 1413)
str_582281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 30), 'str', 'NormaltestResult')

# Obtaining an instance of the builtin type 'tuple' (line 1413)
tuple_582282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 51), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1413)
# Adding element type (line 1413)
str_582283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 51), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1413, 51), tuple_582282, str_582283)
# Adding element type (line 1413)
str_582284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 64), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1413, 51), tuple_582282, str_582284)

# Processing the call keyword arguments (line 1413)
kwargs_582285 = {}
# Getting the type of 'namedtuple' (line 1413)
namedtuple_582280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 19), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1413)
namedtuple_call_result_582286 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 19), namedtuple_582280, *[str_582281, tuple_582282], **kwargs_582285)

# Assigning a type to the variable 'NormaltestResult' (line 1413)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 0), 'NormaltestResult', namedtuple_call_result_582286)

@norecursion
def normaltest(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_582287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1415, 23), 'int')
    str_582288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1415, 37), 'str', 'propagate')
    defaults = [int_582287, str_582288]
    # Create a new context for function 'normaltest'
    module_type_store = module_type_store.open_function_context('normaltest', 1415, 0, False)
    
    # Passed parameters checking function
    normaltest.stypy_localization = localization
    normaltest.stypy_type_of_self = None
    normaltest.stypy_type_store = module_type_store
    normaltest.stypy_function_name = 'normaltest'
    normaltest.stypy_param_names_list = ['a', 'axis', 'nan_policy']
    normaltest.stypy_varargs_param_name = None
    normaltest.stypy_kwargs_param_name = None
    normaltest.stypy_call_defaults = defaults
    normaltest.stypy_call_varargs = varargs
    normaltest.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'normaltest', ['a', 'axis', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'normaltest', localization, ['a', 'axis', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'normaltest(...)' code ##################

    str_582289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, (-1)), 'str', '\n    Test whether a sample differs from a normal distribution.\n\n    This function tests the null hypothesis that a sample comes\n    from a normal distribution.  It is based on D\'Agostino and\n    Pearson\'s [1]_, [2]_ test that combines skew and kurtosis to\n    produce an omnibus test of normality.\n\n\n    Parameters\n    ----------\n    a : array_like\n        The array containing the sample to be tested.\n    axis : int or None, optional\n        Axis along which to compute test. Default is 0. If None,\n        compute over the whole array `a`.\n    nan_policy : {\'propagate\', \'raise\', \'omit\'}, optional\n        Defines how to handle when input contains nan. \'propagate\' returns nan,\n        \'raise\' throws an error, \'omit\' performs the calculations ignoring nan\n        values. Default is \'propagate\'.\n\n    Returns\n    -------\n    statistic : float or array\n        ``s^2 + k^2``, where ``s`` is the z-score returned by `skewtest` and\n        ``k`` is the z-score returned by `kurtosistest`.\n    pvalue : float or array\n       A 2-sided chi squared probability for the hypothesis test.\n\n    References\n    ----------\n    .. [1] D\'Agostino, R. B. (1971), "An omnibus test of normality for\n           moderate and large sample size", Biometrika, 58, 341-348\n\n    .. [2] D\'Agostino, R. and Pearson, E. S. (1973), "Tests for departure from\n           normality", Biometrika, 60, 613-622\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> pts = 1000\n    >>> np.random.seed(28041990)\n    >>> a = np.random.normal(0, 1, size=pts)\n    >>> b = np.random.normal(2, 1, size=pts)\n    >>> x = np.concatenate((a, b))\n    >>> k2, p = stats.normaltest(x)\n    >>> alpha = 1e-3\n    >>> print("p = {:g}".format(p))\n    p = 3.27207e-11\n    >>> if p < alpha:  # null hypothesis: x comes from a normal distribution\n    ...     print("The null hypothesis can be rejected")\n    ... else:\n    ...     print("The null hypothesis cannot be rejected")\n    The null hypothesis can be rejected\n    ')
    
    # Assigning a Call to a Tuple (line 1471):
    
    # Assigning a Subscript to a Name (line 1471):
    
    # Obtaining the type of the subscript
    int_582290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1471)
    # Processing the call arguments (line 1471)
    # Getting the type of 'a' (line 1471)
    a_582292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 27), 'a', False)
    # Getting the type of 'axis' (line 1471)
    axis_582293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 30), 'axis', False)
    # Processing the call keyword arguments (line 1471)
    kwargs_582294 = {}
    # Getting the type of '_chk_asarray' (line 1471)
    _chk_asarray_582291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1471)
    _chk_asarray_call_result_582295 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 14), _chk_asarray_582291, *[a_582292, axis_582293], **kwargs_582294)
    
    # Obtaining the member '__getitem__' of a type (line 1471)
    getitem___582296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 4), _chk_asarray_call_result_582295, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1471)
    subscript_call_result_582297 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 4), getitem___582296, int_582290)
    
    # Assigning a type to the variable 'tuple_var_assignment_579889' (line 1471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 4), 'tuple_var_assignment_579889', subscript_call_result_582297)
    
    # Assigning a Subscript to a Name (line 1471):
    
    # Obtaining the type of the subscript
    int_582298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1471)
    # Processing the call arguments (line 1471)
    # Getting the type of 'a' (line 1471)
    a_582300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 27), 'a', False)
    # Getting the type of 'axis' (line 1471)
    axis_582301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 30), 'axis', False)
    # Processing the call keyword arguments (line 1471)
    kwargs_582302 = {}
    # Getting the type of '_chk_asarray' (line 1471)
    _chk_asarray_582299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1471)
    _chk_asarray_call_result_582303 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 14), _chk_asarray_582299, *[a_582300, axis_582301], **kwargs_582302)
    
    # Obtaining the member '__getitem__' of a type (line 1471)
    getitem___582304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 4), _chk_asarray_call_result_582303, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1471)
    subscript_call_result_582305 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 4), getitem___582304, int_582298)
    
    # Assigning a type to the variable 'tuple_var_assignment_579890' (line 1471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 4), 'tuple_var_assignment_579890', subscript_call_result_582305)
    
    # Assigning a Name to a Name (line 1471):
    # Getting the type of 'tuple_var_assignment_579889' (line 1471)
    tuple_var_assignment_579889_582306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 4), 'tuple_var_assignment_579889')
    # Assigning a type to the variable 'a' (line 1471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 4), 'a', tuple_var_assignment_579889_582306)
    
    # Assigning a Name to a Name (line 1471):
    # Getting the type of 'tuple_var_assignment_579890' (line 1471)
    tuple_var_assignment_579890_582307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 4), 'tuple_var_assignment_579890')
    # Assigning a type to the variable 'axis' (line 1471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 7), 'axis', tuple_var_assignment_579890_582307)
    
    # Assigning a Call to a Tuple (line 1473):
    
    # Assigning a Subscript to a Name (line 1473):
    
    # Obtaining the type of the subscript
    int_582308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, 4), 'int')
    
    # Call to _contains_nan(...): (line 1473)
    # Processing the call arguments (line 1473)
    # Getting the type of 'a' (line 1473)
    a_582310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1473)
    nan_policy_582311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1473)
    kwargs_582312 = {}
    # Getting the type of '_contains_nan' (line 1473)
    _contains_nan_582309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1473)
    _contains_nan_call_result_582313 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 31), _contains_nan_582309, *[a_582310, nan_policy_582311], **kwargs_582312)
    
    # Obtaining the member '__getitem__' of a type (line 1473)
    getitem___582314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 4), _contains_nan_call_result_582313, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1473)
    subscript_call_result_582315 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 4), getitem___582314, int_582308)
    
    # Assigning a type to the variable 'tuple_var_assignment_579891' (line 1473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'tuple_var_assignment_579891', subscript_call_result_582315)
    
    # Assigning a Subscript to a Name (line 1473):
    
    # Obtaining the type of the subscript
    int_582316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, 4), 'int')
    
    # Call to _contains_nan(...): (line 1473)
    # Processing the call arguments (line 1473)
    # Getting the type of 'a' (line 1473)
    a_582318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 1473)
    nan_policy_582319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 1473)
    kwargs_582320 = {}
    # Getting the type of '_contains_nan' (line 1473)
    _contains_nan_582317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 1473)
    _contains_nan_call_result_582321 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 31), _contains_nan_582317, *[a_582318, nan_policy_582319], **kwargs_582320)
    
    # Obtaining the member '__getitem__' of a type (line 1473)
    getitem___582322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 4), _contains_nan_call_result_582321, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1473)
    subscript_call_result_582323 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 4), getitem___582322, int_582316)
    
    # Assigning a type to the variable 'tuple_var_assignment_579892' (line 1473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'tuple_var_assignment_579892', subscript_call_result_582323)
    
    # Assigning a Name to a Name (line 1473):
    # Getting the type of 'tuple_var_assignment_579891' (line 1473)
    tuple_var_assignment_579891_582324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'tuple_var_assignment_579891')
    # Assigning a type to the variable 'contains_nan' (line 1473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'contains_nan', tuple_var_assignment_579891_582324)
    
    # Assigning a Name to a Name (line 1473):
    # Getting the type of 'tuple_var_assignment_579892' (line 1473)
    tuple_var_assignment_579892_582325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'tuple_var_assignment_579892')
    # Assigning a type to the variable 'nan_policy' (line 1473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 18), 'nan_policy', tuple_var_assignment_579892_582325)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 1475)
    contains_nan_582326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 1475)
    nan_policy_582327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 24), 'nan_policy')
    str_582328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1475, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 1475)
    result_eq_582329 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 24), '==', nan_policy_582327, str_582328)
    
    # Applying the binary operator 'and' (line 1475)
    result_and_keyword_582330 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 7), 'and', contains_nan_582326, result_eq_582329)
    
    # Testing the type of an if condition (line 1475)
    if_condition_582331 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1475, 4), result_and_keyword_582330)
    # Assigning a type to the variable 'if_condition_582331' (line 1475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1475, 4), 'if_condition_582331', if_condition_582331)
    # SSA begins for if statement (line 1475)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1476):
    
    # Assigning a Call to a Name (line 1476):
    
    # Call to masked_invalid(...): (line 1476)
    # Processing the call arguments (line 1476)
    # Getting the type of 'a' (line 1476)
    a_582334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 30), 'a', False)
    # Processing the call keyword arguments (line 1476)
    kwargs_582335 = {}
    # Getting the type of 'ma' (line 1476)
    ma_582332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 1476)
    masked_invalid_582333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1476, 12), ma_582332, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 1476)
    masked_invalid_call_result_582336 = invoke(stypy.reporting.localization.Localization(__file__, 1476, 12), masked_invalid_582333, *[a_582334], **kwargs_582335)
    
    # Assigning a type to the variable 'a' (line 1476)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 8), 'a', masked_invalid_call_result_582336)
    
    # Call to normaltest(...): (line 1477)
    # Processing the call arguments (line 1477)
    # Getting the type of 'a' (line 1477)
    a_582339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 39), 'a', False)
    # Getting the type of 'axis' (line 1477)
    axis_582340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 42), 'axis', False)
    # Processing the call keyword arguments (line 1477)
    kwargs_582341 = {}
    # Getting the type of 'mstats_basic' (line 1477)
    mstats_basic_582337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 15), 'mstats_basic', False)
    # Obtaining the member 'normaltest' of a type (line 1477)
    normaltest_582338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 15), mstats_basic_582337, 'normaltest')
    # Calling normaltest(args, kwargs) (line 1477)
    normaltest_call_result_582342 = invoke(stypy.reporting.localization.Localization(__file__, 1477, 15), normaltest_582338, *[a_582339, axis_582340], **kwargs_582341)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'stypy_return_type', normaltest_call_result_582342)
    # SSA join for if statement (line 1475)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1479):
    
    # Assigning a Subscript to a Name (line 1479):
    
    # Obtaining the type of the subscript
    int_582343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 4), 'int')
    
    # Call to skewtest(...): (line 1479)
    # Processing the call arguments (line 1479)
    # Getting the type of 'a' (line 1479)
    a_582345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 20), 'a', False)
    # Getting the type of 'axis' (line 1479)
    axis_582346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 23), 'axis', False)
    # Processing the call keyword arguments (line 1479)
    kwargs_582347 = {}
    # Getting the type of 'skewtest' (line 1479)
    skewtest_582344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 11), 'skewtest', False)
    # Calling skewtest(args, kwargs) (line 1479)
    skewtest_call_result_582348 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 11), skewtest_582344, *[a_582345, axis_582346], **kwargs_582347)
    
    # Obtaining the member '__getitem__' of a type (line 1479)
    getitem___582349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 4), skewtest_call_result_582348, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1479)
    subscript_call_result_582350 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 4), getitem___582349, int_582343)
    
    # Assigning a type to the variable 'tuple_var_assignment_579893' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 4), 'tuple_var_assignment_579893', subscript_call_result_582350)
    
    # Assigning a Subscript to a Name (line 1479):
    
    # Obtaining the type of the subscript
    int_582351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 4), 'int')
    
    # Call to skewtest(...): (line 1479)
    # Processing the call arguments (line 1479)
    # Getting the type of 'a' (line 1479)
    a_582353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 20), 'a', False)
    # Getting the type of 'axis' (line 1479)
    axis_582354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 23), 'axis', False)
    # Processing the call keyword arguments (line 1479)
    kwargs_582355 = {}
    # Getting the type of 'skewtest' (line 1479)
    skewtest_582352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 11), 'skewtest', False)
    # Calling skewtest(args, kwargs) (line 1479)
    skewtest_call_result_582356 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 11), skewtest_582352, *[a_582353, axis_582354], **kwargs_582355)
    
    # Obtaining the member '__getitem__' of a type (line 1479)
    getitem___582357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 4), skewtest_call_result_582356, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1479)
    subscript_call_result_582358 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 4), getitem___582357, int_582351)
    
    # Assigning a type to the variable 'tuple_var_assignment_579894' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 4), 'tuple_var_assignment_579894', subscript_call_result_582358)
    
    # Assigning a Name to a Name (line 1479):
    # Getting the type of 'tuple_var_assignment_579893' (line 1479)
    tuple_var_assignment_579893_582359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 4), 'tuple_var_assignment_579893')
    # Assigning a type to the variable 's' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 4), 's', tuple_var_assignment_579893_582359)
    
    # Assigning a Name to a Name (line 1479):
    # Getting the type of 'tuple_var_assignment_579894' (line 1479)
    tuple_var_assignment_579894_582360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 4), 'tuple_var_assignment_579894')
    # Assigning a type to the variable '_' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 7), '_', tuple_var_assignment_579894_582360)
    
    # Assigning a Call to a Tuple (line 1480):
    
    # Assigning a Subscript to a Name (line 1480):
    
    # Obtaining the type of the subscript
    int_582361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1480, 4), 'int')
    
    # Call to kurtosistest(...): (line 1480)
    # Processing the call arguments (line 1480)
    # Getting the type of 'a' (line 1480)
    a_582363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 24), 'a', False)
    # Getting the type of 'axis' (line 1480)
    axis_582364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 27), 'axis', False)
    # Processing the call keyword arguments (line 1480)
    kwargs_582365 = {}
    # Getting the type of 'kurtosistest' (line 1480)
    kurtosistest_582362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 11), 'kurtosistest', False)
    # Calling kurtosistest(args, kwargs) (line 1480)
    kurtosistest_call_result_582366 = invoke(stypy.reporting.localization.Localization(__file__, 1480, 11), kurtosistest_582362, *[a_582363, axis_582364], **kwargs_582365)
    
    # Obtaining the member '__getitem__' of a type (line 1480)
    getitem___582367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1480, 4), kurtosistest_call_result_582366, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1480)
    subscript_call_result_582368 = invoke(stypy.reporting.localization.Localization(__file__, 1480, 4), getitem___582367, int_582361)
    
    # Assigning a type to the variable 'tuple_var_assignment_579895' (line 1480)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1480, 4), 'tuple_var_assignment_579895', subscript_call_result_582368)
    
    # Assigning a Subscript to a Name (line 1480):
    
    # Obtaining the type of the subscript
    int_582369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1480, 4), 'int')
    
    # Call to kurtosistest(...): (line 1480)
    # Processing the call arguments (line 1480)
    # Getting the type of 'a' (line 1480)
    a_582371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 24), 'a', False)
    # Getting the type of 'axis' (line 1480)
    axis_582372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 27), 'axis', False)
    # Processing the call keyword arguments (line 1480)
    kwargs_582373 = {}
    # Getting the type of 'kurtosistest' (line 1480)
    kurtosistest_582370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 11), 'kurtosistest', False)
    # Calling kurtosistest(args, kwargs) (line 1480)
    kurtosistest_call_result_582374 = invoke(stypy.reporting.localization.Localization(__file__, 1480, 11), kurtosistest_582370, *[a_582371, axis_582372], **kwargs_582373)
    
    # Obtaining the member '__getitem__' of a type (line 1480)
    getitem___582375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1480, 4), kurtosistest_call_result_582374, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1480)
    subscript_call_result_582376 = invoke(stypy.reporting.localization.Localization(__file__, 1480, 4), getitem___582375, int_582369)
    
    # Assigning a type to the variable 'tuple_var_assignment_579896' (line 1480)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1480, 4), 'tuple_var_assignment_579896', subscript_call_result_582376)
    
    # Assigning a Name to a Name (line 1480):
    # Getting the type of 'tuple_var_assignment_579895' (line 1480)
    tuple_var_assignment_579895_582377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 4), 'tuple_var_assignment_579895')
    # Assigning a type to the variable 'k' (line 1480)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1480, 4), 'k', tuple_var_assignment_579895_582377)
    
    # Assigning a Name to a Name (line 1480):
    # Getting the type of 'tuple_var_assignment_579896' (line 1480)
    tuple_var_assignment_579896_582378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 4), 'tuple_var_assignment_579896')
    # Assigning a type to the variable '_' (line 1480)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1480, 7), '_', tuple_var_assignment_579896_582378)
    
    # Assigning a BinOp to a Name (line 1481):
    
    # Assigning a BinOp to a Name (line 1481):
    # Getting the type of 's' (line 1481)
    s_582379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 9), 's')
    # Getting the type of 's' (line 1481)
    s_582380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 11), 's')
    # Applying the binary operator '*' (line 1481)
    result_mul_582381 = python_operator(stypy.reporting.localization.Localization(__file__, 1481, 9), '*', s_582379, s_582380)
    
    # Getting the type of 'k' (line 1481)
    k_582382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 15), 'k')
    # Getting the type of 'k' (line 1481)
    k_582383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 17), 'k')
    # Applying the binary operator '*' (line 1481)
    result_mul_582384 = python_operator(stypy.reporting.localization.Localization(__file__, 1481, 15), '*', k_582382, k_582383)
    
    # Applying the binary operator '+' (line 1481)
    result_add_582385 = python_operator(stypy.reporting.localization.Localization(__file__, 1481, 9), '+', result_mul_582381, result_mul_582384)
    
    # Assigning a type to the variable 'k2' (line 1481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 4), 'k2', result_add_582385)
    
    # Call to NormaltestResult(...): (line 1483)
    # Processing the call arguments (line 1483)
    # Getting the type of 'k2' (line 1483)
    k2_582387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 28), 'k2', False)
    
    # Call to sf(...): (line 1483)
    # Processing the call arguments (line 1483)
    # Getting the type of 'k2' (line 1483)
    k2_582391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 54), 'k2', False)
    int_582392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 58), 'int')
    # Processing the call keyword arguments (line 1483)
    kwargs_582393 = {}
    # Getting the type of 'distributions' (line 1483)
    distributions_582388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 32), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 1483)
    chi2_582389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 32), distributions_582388, 'chi2')
    # Obtaining the member 'sf' of a type (line 1483)
    sf_582390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 32), chi2_582389, 'sf')
    # Calling sf(args, kwargs) (line 1483)
    sf_call_result_582394 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 32), sf_582390, *[k2_582391, int_582392], **kwargs_582393)
    
    # Processing the call keyword arguments (line 1483)
    kwargs_582395 = {}
    # Getting the type of 'NormaltestResult' (line 1483)
    NormaltestResult_582386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 11), 'NormaltestResult', False)
    # Calling NormaltestResult(args, kwargs) (line 1483)
    NormaltestResult_call_result_582396 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 11), NormaltestResult_582386, *[k2_582387, sf_call_result_582394], **kwargs_582395)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 4), 'stypy_return_type', NormaltestResult_call_result_582396)
    
    # ################# End of 'normaltest(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'normaltest' in the type store
    # Getting the type of 'stypy_return_type' (line 1415)
    stypy_return_type_582397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_582397)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'normaltest'
    return stypy_return_type_582397

# Assigning a type to the variable 'normaltest' (line 1415)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 0), 'normaltest', normaltest)

@norecursion
def jarque_bera(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'jarque_bera'
    module_type_store = module_type_store.open_function_context('jarque_bera', 1486, 0, False)
    
    # Passed parameters checking function
    jarque_bera.stypy_localization = localization
    jarque_bera.stypy_type_of_self = None
    jarque_bera.stypy_type_store = module_type_store
    jarque_bera.stypy_function_name = 'jarque_bera'
    jarque_bera.stypy_param_names_list = ['x']
    jarque_bera.stypy_varargs_param_name = None
    jarque_bera.stypy_kwargs_param_name = None
    jarque_bera.stypy_call_defaults = defaults
    jarque_bera.stypy_call_varargs = varargs
    jarque_bera.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'jarque_bera', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'jarque_bera', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'jarque_bera(...)' code ##################

    str_582398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1526, (-1)), 'str', '\n    Perform the Jarque-Bera goodness of fit test on sample data.\n\n    The Jarque-Bera test tests whether the sample data has the skewness and\n    kurtosis matching a normal distribution.\n\n    Note that this test only works for a large enough number of data samples\n    (>2000) as the test statistic asymptotically has a Chi-squared distribution\n    with 2 degrees of freedom.\n\n    Parameters\n    ----------\n    x : array_like\n        Observations of a random variable.\n\n    Returns\n    -------\n    jb_value : float\n        The test statistic.\n    p : float\n        The p-value for the hypothesis test.\n\n    References\n    ----------\n    .. [1] Jarque, C. and Bera, A. (1980) "Efficient tests for normality,\n           homoscedasticity and serial independence of regression residuals",\n           6 Econometric Letters 255-259.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> np.random.seed(987654321)\n    >>> x = np.random.normal(0, 1, 100000)\n    >>> y = np.random.rayleigh(1, 100000)\n    >>> stats.jarque_bera(x)\n    (4.7165707989581342, 0.09458225503041906)\n    >>> stats.jarque_bera(y)\n    (6713.7098548143422, 0.0)\n\n    ')
    
    # Assigning a Call to a Name (line 1527):
    
    # Assigning a Call to a Name (line 1527):
    
    # Call to asarray(...): (line 1527)
    # Processing the call arguments (line 1527)
    # Getting the type of 'x' (line 1527)
    x_582401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 19), 'x', False)
    # Processing the call keyword arguments (line 1527)
    kwargs_582402 = {}
    # Getting the type of 'np' (line 1527)
    np_582399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1527)
    asarray_582400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 8), np_582399, 'asarray')
    # Calling asarray(args, kwargs) (line 1527)
    asarray_call_result_582403 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 8), asarray_582400, *[x_582401], **kwargs_582402)
    
    # Assigning a type to the variable 'x' (line 1527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 4), 'x', asarray_call_result_582403)
    
    # Assigning a Call to a Name (line 1528):
    
    # Assigning a Call to a Name (line 1528):
    
    # Call to float(...): (line 1528)
    # Processing the call arguments (line 1528)
    # Getting the type of 'x' (line 1528)
    x_582405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 14), 'x', False)
    # Obtaining the member 'size' of a type (line 1528)
    size_582406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 14), x_582405, 'size')
    # Processing the call keyword arguments (line 1528)
    kwargs_582407 = {}
    # Getting the type of 'float' (line 1528)
    float_582404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 8), 'float', False)
    # Calling float(args, kwargs) (line 1528)
    float_call_result_582408 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 8), float_582404, *[size_582406], **kwargs_582407)
    
    # Assigning a type to the variable 'n' (line 1528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 4), 'n', float_call_result_582408)
    
    
    # Getting the type of 'n' (line 1529)
    n_582409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 7), 'n')
    int_582410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 12), 'int')
    # Applying the binary operator '==' (line 1529)
    result_eq_582411 = python_operator(stypy.reporting.localization.Localization(__file__, 1529, 7), '==', n_582409, int_582410)
    
    # Testing the type of an if condition (line 1529)
    if_condition_582412 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1529, 4), result_eq_582411)
    # Assigning a type to the variable 'if_condition_582412' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'if_condition_582412', if_condition_582412)
    # SSA begins for if statement (line 1529)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1530)
    # Processing the call arguments (line 1530)
    str_582414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 25), 'str', 'At least one observation is required.')
    # Processing the call keyword arguments (line 1530)
    kwargs_582415 = {}
    # Getting the type of 'ValueError' (line 1530)
    ValueError_582413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1530)
    ValueError_call_result_582416 = invoke(stypy.reporting.localization.Localization(__file__, 1530, 14), ValueError_582413, *[str_582414], **kwargs_582415)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1530, 8), ValueError_call_result_582416, 'raise parameter', BaseException)
    # SSA join for if statement (line 1529)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1532):
    
    # Assigning a Call to a Name (line 1532):
    
    # Call to mean(...): (line 1532)
    # Processing the call keyword arguments (line 1532)
    kwargs_582419 = {}
    # Getting the type of 'x' (line 1532)
    x_582417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 9), 'x', False)
    # Obtaining the member 'mean' of a type (line 1532)
    mean_582418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 9), x_582417, 'mean')
    # Calling mean(args, kwargs) (line 1532)
    mean_call_result_582420 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 9), mean_582418, *[], **kwargs_582419)
    
    # Assigning a type to the variable 'mu' (line 1532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 4), 'mu', mean_call_result_582420)
    
    # Assigning a BinOp to a Name (line 1533):
    
    # Assigning a BinOp to a Name (line 1533):
    # Getting the type of 'x' (line 1533)
    x_582421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 12), 'x')
    # Getting the type of 'mu' (line 1533)
    mu_582422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 16), 'mu')
    # Applying the binary operator '-' (line 1533)
    result_sub_582423 = python_operator(stypy.reporting.localization.Localization(__file__, 1533, 12), '-', x_582421, mu_582422)
    
    # Assigning a type to the variable 'diffx' (line 1533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 4), 'diffx', result_sub_582423)
    
    # Assigning a BinOp to a Name (line 1534):
    
    # Assigning a BinOp to a Name (line 1534):
    int_582424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 16), 'int')
    # Getting the type of 'n' (line 1534)
    n_582425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 20), 'n')
    # Applying the binary operator 'div' (line 1534)
    result_div_582426 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 16), 'div', int_582424, n_582425)
    
    
    # Call to sum(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'diffx' (line 1534)
    diffx_582429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 31), 'diffx', False)
    int_582430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 38), 'int')
    # Applying the binary operator '**' (line 1534)
    result_pow_582431 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 31), '**', diffx_582429, int_582430)
    
    # Processing the call keyword arguments (line 1534)
    kwargs_582432 = {}
    # Getting the type of 'np' (line 1534)
    np_582427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 24), 'np', False)
    # Obtaining the member 'sum' of a type (line 1534)
    sum_582428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 24), np_582427, 'sum')
    # Calling sum(args, kwargs) (line 1534)
    sum_call_result_582433 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 24), sum_582428, *[result_pow_582431], **kwargs_582432)
    
    # Applying the binary operator '*' (line 1534)
    result_mul_582434 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 22), '*', result_div_582426, sum_call_result_582433)
    
    int_582435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 45), 'int')
    # Getting the type of 'n' (line 1534)
    n_582436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 49), 'n')
    # Applying the binary operator 'div' (line 1534)
    result_div_582437 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 45), 'div', int_582435, n_582436)
    
    
    # Call to sum(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'diffx' (line 1534)
    diffx_582440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 60), 'diffx', False)
    int_582441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 67), 'int')
    # Applying the binary operator '**' (line 1534)
    result_pow_582442 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 60), '**', diffx_582440, int_582441)
    
    # Processing the call keyword arguments (line 1534)
    kwargs_582443 = {}
    # Getting the type of 'np' (line 1534)
    np_582438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 53), 'np', False)
    # Obtaining the member 'sum' of a type (line 1534)
    sum_582439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 53), np_582438, 'sum')
    # Calling sum(args, kwargs) (line 1534)
    sum_call_result_582444 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 53), sum_582439, *[result_pow_582442], **kwargs_582443)
    
    # Applying the binary operator '*' (line 1534)
    result_mul_582445 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 51), '*', result_div_582437, sum_call_result_582444)
    
    int_582446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 73), 'int')
    float_582447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 77), 'float')
    # Applying the binary operator 'div' (line 1534)
    result_div_582448 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 73), 'div', int_582446, float_582447)
    
    # Applying the binary operator '**' (line 1534)
    result_pow_582449 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 44), '**', result_mul_582445, result_div_582448)
    
    # Applying the binary operator 'div' (line 1534)
    result_div_582450 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 15), 'div', result_mul_582434, result_pow_582449)
    
    # Assigning a type to the variable 'skewness' (line 1534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 4), 'skewness', result_div_582450)
    
    # Assigning a BinOp to a Name (line 1535):
    
    # Assigning a BinOp to a Name (line 1535):
    int_582451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 16), 'int')
    # Getting the type of 'n' (line 1535)
    n_582452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 20), 'n')
    # Applying the binary operator 'div' (line 1535)
    result_div_582453 = python_operator(stypy.reporting.localization.Localization(__file__, 1535, 16), 'div', int_582451, n_582452)
    
    
    # Call to sum(...): (line 1535)
    # Processing the call arguments (line 1535)
    # Getting the type of 'diffx' (line 1535)
    diffx_582456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 31), 'diffx', False)
    int_582457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 38), 'int')
    # Applying the binary operator '**' (line 1535)
    result_pow_582458 = python_operator(stypy.reporting.localization.Localization(__file__, 1535, 31), '**', diffx_582456, int_582457)
    
    # Processing the call keyword arguments (line 1535)
    kwargs_582459 = {}
    # Getting the type of 'np' (line 1535)
    np_582454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 24), 'np', False)
    # Obtaining the member 'sum' of a type (line 1535)
    sum_582455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 24), np_582454, 'sum')
    # Calling sum(args, kwargs) (line 1535)
    sum_call_result_582460 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 24), sum_582455, *[result_pow_582458], **kwargs_582459)
    
    # Applying the binary operator '*' (line 1535)
    result_mul_582461 = python_operator(stypy.reporting.localization.Localization(__file__, 1535, 22), '*', result_div_582453, sum_call_result_582460)
    
    int_582462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 45), 'int')
    # Getting the type of 'n' (line 1535)
    n_582463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 49), 'n')
    # Applying the binary operator 'div' (line 1535)
    result_div_582464 = python_operator(stypy.reporting.localization.Localization(__file__, 1535, 45), 'div', int_582462, n_582463)
    
    
    # Call to sum(...): (line 1535)
    # Processing the call arguments (line 1535)
    # Getting the type of 'diffx' (line 1535)
    diffx_582467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 60), 'diffx', False)
    int_582468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 67), 'int')
    # Applying the binary operator '**' (line 1535)
    result_pow_582469 = python_operator(stypy.reporting.localization.Localization(__file__, 1535, 60), '**', diffx_582467, int_582468)
    
    # Processing the call keyword arguments (line 1535)
    kwargs_582470 = {}
    # Getting the type of 'np' (line 1535)
    np_582465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 53), 'np', False)
    # Obtaining the member 'sum' of a type (line 1535)
    sum_582466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 53), np_582465, 'sum')
    # Calling sum(args, kwargs) (line 1535)
    sum_call_result_582471 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 53), sum_582466, *[result_pow_582469], **kwargs_582470)
    
    # Applying the binary operator '*' (line 1535)
    result_mul_582472 = python_operator(stypy.reporting.localization.Localization(__file__, 1535, 51), '*', result_div_582464, sum_call_result_582471)
    
    int_582473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 72), 'int')
    # Applying the binary operator '**' (line 1535)
    result_pow_582474 = python_operator(stypy.reporting.localization.Localization(__file__, 1535, 44), '**', result_mul_582472, int_582473)
    
    # Applying the binary operator 'div' (line 1535)
    result_div_582475 = python_operator(stypy.reporting.localization.Localization(__file__, 1535, 15), 'div', result_mul_582461, result_pow_582474)
    
    # Assigning a type to the variable 'kurtosis' (line 1535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 4), 'kurtosis', result_div_582475)
    
    # Assigning a BinOp to a Name (line 1536):
    
    # Assigning a BinOp to a Name (line 1536):
    # Getting the type of 'n' (line 1536)
    n_582476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 15), 'n')
    int_582477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 19), 'int')
    # Applying the binary operator 'div' (line 1536)
    result_div_582478 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 15), 'div', n_582476, int_582477)
    
    # Getting the type of 'skewness' (line 1536)
    skewness_582479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 24), 'skewness')
    int_582480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 34), 'int')
    # Applying the binary operator '**' (line 1536)
    result_pow_582481 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 24), '**', skewness_582479, int_582480)
    
    # Getting the type of 'kurtosis' (line 1536)
    kurtosis_582482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 39), 'kurtosis')
    int_582483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 50), 'int')
    # Applying the binary operator '-' (line 1536)
    result_sub_582484 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 39), '-', kurtosis_582482, int_582483)
    
    int_582485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 54), 'int')
    # Applying the binary operator '**' (line 1536)
    result_pow_582486 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 38), '**', result_sub_582484, int_582485)
    
    int_582487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 58), 'int')
    # Applying the binary operator 'div' (line 1536)
    result_div_582488 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 38), 'div', result_pow_582486, int_582487)
    
    # Applying the binary operator '+' (line 1536)
    result_add_582489 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 24), '+', result_pow_582481, result_div_582488)
    
    # Applying the binary operator '*' (line 1536)
    result_mul_582490 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 21), '*', result_div_582478, result_add_582489)
    
    # Assigning a type to the variable 'jb_value' (line 1536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'jb_value', result_mul_582490)
    
    # Assigning a BinOp to a Name (line 1537):
    
    # Assigning a BinOp to a Name (line 1537):
    int_582491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 8), 'int')
    
    # Call to cdf(...): (line 1537)
    # Processing the call arguments (line 1537)
    # Getting the type of 'jb_value' (line 1537)
    jb_value_582495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 35), 'jb_value', False)
    int_582496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 45), 'int')
    # Processing the call keyword arguments (line 1537)
    kwargs_582497 = {}
    # Getting the type of 'distributions' (line 1537)
    distributions_582492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 12), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 1537)
    chi2_582493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 12), distributions_582492, 'chi2')
    # Obtaining the member 'cdf' of a type (line 1537)
    cdf_582494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 12), chi2_582493, 'cdf')
    # Calling cdf(args, kwargs) (line 1537)
    cdf_call_result_582498 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 12), cdf_582494, *[jb_value_582495, int_582496], **kwargs_582497)
    
    # Applying the binary operator '-' (line 1537)
    result_sub_582499 = python_operator(stypy.reporting.localization.Localization(__file__, 1537, 8), '-', int_582491, cdf_call_result_582498)
    
    # Assigning a type to the variable 'p' (line 1537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 4), 'p', result_sub_582499)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1539)
    tuple_582500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1539)
    # Adding element type (line 1539)
    # Getting the type of 'jb_value' (line 1539)
    jb_value_582501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 11), 'jb_value')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1539, 11), tuple_582500, jb_value_582501)
    # Adding element type (line 1539)
    # Getting the type of 'p' (line 1539)
    p_582502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 21), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1539, 11), tuple_582500, p_582502)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 4), 'stypy_return_type', tuple_582500)
    
    # ################# End of 'jarque_bera(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'jarque_bera' in the type store
    # Getting the type of 'stypy_return_type' (line 1486)
    stypy_return_type_582503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_582503)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'jarque_bera'
    return stypy_return_type_582503

# Assigning a type to the variable 'jarque_bera' (line 1486)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 0), 'jarque_bera', jarque_bera)

@norecursion
def itemfreq(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'itemfreq'
    module_type_store = module_type_store.open_function_context('itemfreq', 1546, 0, False)
    
    # Passed parameters checking function
    itemfreq.stypy_localization = localization
    itemfreq.stypy_type_of_self = None
    itemfreq.stypy_type_store = module_type_store
    itemfreq.stypy_function_name = 'itemfreq'
    itemfreq.stypy_param_names_list = ['a']
    itemfreq.stypy_varargs_param_name = None
    itemfreq.stypy_kwargs_param_name = None
    itemfreq.stypy_call_defaults = defaults
    itemfreq.stypy_call_varargs = varargs
    itemfreq.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'itemfreq', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'itemfreq', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'itemfreq(...)' code ##################

    str_582504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, (-1)), 'str', '\n    Return a 2-D array of item frequencies.\n\n    Parameters\n    ----------\n    a : (N,) array_like\n        Input array.\n\n    Returns\n    -------\n    itemfreq : (K, 2) ndarray\n        A 2-D frequency table.  Column 1 contains sorted, unique values from\n        `a`, column 2 contains their respective counts.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> a = np.array([1, 1, 5, 0, 1, 2, 2, 0, 1, 4])\n    >>> stats.itemfreq(a)\n    array([[ 0.,  2.],\n           [ 1.,  4.],\n           [ 2.,  2.],\n           [ 4.,  1.],\n           [ 5.,  1.]])\n    >>> np.bincount(a)\n    array([2, 4, 2, 0, 1, 1])\n\n    >>> stats.itemfreq(a/10.)\n    array([[ 0. ,  2. ],\n           [ 0.1,  4. ],\n           [ 0.2,  2. ],\n           [ 0.4,  1. ],\n           [ 0.5,  1. ]])\n\n    ')
    
    # Assigning a Call to a Tuple (line 1582):
    
    # Assigning a Subscript to a Name (line 1582):
    
    # Obtaining the type of the subscript
    int_582505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1582, 4), 'int')
    
    # Call to unique(...): (line 1582)
    # Processing the call arguments (line 1582)
    # Getting the type of 'a' (line 1582)
    a_582508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 27), 'a', False)
    # Processing the call keyword arguments (line 1582)
    # Getting the type of 'True' (line 1582)
    True_582509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 45), 'True', False)
    keyword_582510 = True_582509
    kwargs_582511 = {'return_inverse': keyword_582510}
    # Getting the type of 'np' (line 1582)
    np_582506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 17), 'np', False)
    # Obtaining the member 'unique' of a type (line 1582)
    unique_582507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 17), np_582506, 'unique')
    # Calling unique(args, kwargs) (line 1582)
    unique_call_result_582512 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 17), unique_582507, *[a_582508], **kwargs_582511)
    
    # Obtaining the member '__getitem__' of a type (line 1582)
    getitem___582513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 4), unique_call_result_582512, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1582)
    subscript_call_result_582514 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 4), getitem___582513, int_582505)
    
    # Assigning a type to the variable 'tuple_var_assignment_579897' (line 1582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 4), 'tuple_var_assignment_579897', subscript_call_result_582514)
    
    # Assigning a Subscript to a Name (line 1582):
    
    # Obtaining the type of the subscript
    int_582515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1582, 4), 'int')
    
    # Call to unique(...): (line 1582)
    # Processing the call arguments (line 1582)
    # Getting the type of 'a' (line 1582)
    a_582518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 27), 'a', False)
    # Processing the call keyword arguments (line 1582)
    # Getting the type of 'True' (line 1582)
    True_582519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 45), 'True', False)
    keyword_582520 = True_582519
    kwargs_582521 = {'return_inverse': keyword_582520}
    # Getting the type of 'np' (line 1582)
    np_582516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 17), 'np', False)
    # Obtaining the member 'unique' of a type (line 1582)
    unique_582517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 17), np_582516, 'unique')
    # Calling unique(args, kwargs) (line 1582)
    unique_call_result_582522 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 17), unique_582517, *[a_582518], **kwargs_582521)
    
    # Obtaining the member '__getitem__' of a type (line 1582)
    getitem___582523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 4), unique_call_result_582522, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1582)
    subscript_call_result_582524 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 4), getitem___582523, int_582515)
    
    # Assigning a type to the variable 'tuple_var_assignment_579898' (line 1582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 4), 'tuple_var_assignment_579898', subscript_call_result_582524)
    
    # Assigning a Name to a Name (line 1582):
    # Getting the type of 'tuple_var_assignment_579897' (line 1582)
    tuple_var_assignment_579897_582525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 4), 'tuple_var_assignment_579897')
    # Assigning a type to the variable 'items' (line 1582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 4), 'items', tuple_var_assignment_579897_582525)
    
    # Assigning a Name to a Name (line 1582):
    # Getting the type of 'tuple_var_assignment_579898' (line 1582)
    tuple_var_assignment_579898_582526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 4), 'tuple_var_assignment_579898')
    # Assigning a type to the variable 'inv' (line 1582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 11), 'inv', tuple_var_assignment_579898_582526)
    
    # Assigning a Call to a Name (line 1583):
    
    # Assigning a Call to a Name (line 1583):
    
    # Call to bincount(...): (line 1583)
    # Processing the call arguments (line 1583)
    # Getting the type of 'inv' (line 1583)
    inv_582529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 23), 'inv', False)
    # Processing the call keyword arguments (line 1583)
    kwargs_582530 = {}
    # Getting the type of 'np' (line 1583)
    np_582527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 11), 'np', False)
    # Obtaining the member 'bincount' of a type (line 1583)
    bincount_582528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 11), np_582527, 'bincount')
    # Calling bincount(args, kwargs) (line 1583)
    bincount_call_result_582531 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 11), bincount_582528, *[inv_582529], **kwargs_582530)
    
    # Assigning a type to the variable 'freq' (line 1583)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 4), 'freq', bincount_call_result_582531)
    
    # Call to array(...): (line 1584)
    # Processing the call arguments (line 1584)
    
    # Obtaining an instance of the builtin type 'list' (line 1584)
    list_582534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1584, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1584)
    # Adding element type (line 1584)
    # Getting the type of 'items' (line 1584)
    items_582535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 21), 'items', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1584, 20), list_582534, items_582535)
    # Adding element type (line 1584)
    # Getting the type of 'freq' (line 1584)
    freq_582536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 28), 'freq', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1584, 20), list_582534, freq_582536)
    
    # Processing the call keyword arguments (line 1584)
    kwargs_582537 = {}
    # Getting the type of 'np' (line 1584)
    np_582532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 11), 'np', False)
    # Obtaining the member 'array' of a type (line 1584)
    array_582533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1584, 11), np_582532, 'array')
    # Calling array(args, kwargs) (line 1584)
    array_call_result_582538 = invoke(stypy.reporting.localization.Localization(__file__, 1584, 11), array_582533, *[list_582534], **kwargs_582537)
    
    # Obtaining the member 'T' of a type (line 1584)
    T_582539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1584, 11), array_call_result_582538, 'T')
    # Assigning a type to the variable 'stypy_return_type' (line 1584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1584, 4), 'stypy_return_type', T_582539)
    
    # ################# End of 'itemfreq(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'itemfreq' in the type store
    # Getting the type of 'stypy_return_type' (line 1546)
    stypy_return_type_582540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_582540)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'itemfreq'
    return stypy_return_type_582540

# Assigning a type to the variable 'itemfreq' (line 1546)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 0), 'itemfreq', itemfreq)

@norecursion
def scoreatpercentile(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 1587)
    tuple_582541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1587)
    
    str_582542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 61), 'str', 'fraction')
    # Getting the type of 'None' (line 1588)
    None_582543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 27), 'None')
    defaults = [tuple_582541, str_582542, None_582543]
    # Create a new context for function 'scoreatpercentile'
    module_type_store = module_type_store.open_function_context('scoreatpercentile', 1587, 0, False)
    
    # Passed parameters checking function
    scoreatpercentile.stypy_localization = localization
    scoreatpercentile.stypy_type_of_self = None
    scoreatpercentile.stypy_type_store = module_type_store
    scoreatpercentile.stypy_function_name = 'scoreatpercentile'
    scoreatpercentile.stypy_param_names_list = ['a', 'per', 'limit', 'interpolation_method', 'axis']
    scoreatpercentile.stypy_varargs_param_name = None
    scoreatpercentile.stypy_kwargs_param_name = None
    scoreatpercentile.stypy_call_defaults = defaults
    scoreatpercentile.stypy_call_varargs = varargs
    scoreatpercentile.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'scoreatpercentile', ['a', 'per', 'limit', 'interpolation_method', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'scoreatpercentile', localization, ['a', 'per', 'limit', 'interpolation_method', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'scoreatpercentile(...)' code ##################

    str_582544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, (-1)), 'str', "\n    Calculate the score at a given percentile of the input sequence.\n\n    For example, the score at `per=50` is the median. If the desired quantile\n    lies between two data points, we interpolate between them, according to\n    the value of `interpolation`. If the parameter `limit` is provided, it\n    should be a tuple (lower, upper) of two values.\n\n    Parameters\n    ----------\n    a : array_like\n        A 1-D array of values from which to extract score.\n    per : array_like\n        Percentile(s) at which to extract score.  Values should be in range\n        [0,100].\n    limit : tuple, optional\n        Tuple of two scalars, the lower and upper limits within which to\n        compute the percentile. Values of `a` outside\n        this (closed) interval will be ignored.\n    interpolation_method : {'fraction', 'lower', 'higher'}, optional\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`\n\n          - fraction: ``i + (j - i) * fraction`` where ``fraction`` is the\n            fractional part of the index surrounded by ``i`` and ``j``.\n          - lower: ``i``.\n          - higher: ``j``.\n\n    axis : int, optional\n        Axis along which the percentiles are computed. Default is None. If\n        None, compute over the whole array `a`.\n\n    Returns\n    -------\n    score : float or ndarray\n        Score at percentile(s).\n\n    See Also\n    --------\n    percentileofscore, numpy.percentile\n\n    Notes\n    -----\n    This function will become obsolete in the future.\n    For Numpy 1.9 and higher, `numpy.percentile` provides all the functionality\n    that `scoreatpercentile` provides.  And it's significantly faster.\n    Therefore it's recommended to use `numpy.percentile` for users that have\n    numpy >= 1.9.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> a = np.arange(100)\n    >>> stats.scoreatpercentile(a, 50)\n    49.5\n\n    ")
    
    # Assigning a Call to a Name (line 1648):
    
    # Assigning a Call to a Name (line 1648):
    
    # Call to asarray(...): (line 1648)
    # Processing the call arguments (line 1648)
    # Getting the type of 'a' (line 1648)
    a_582547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 19), 'a', False)
    # Processing the call keyword arguments (line 1648)
    kwargs_582548 = {}
    # Getting the type of 'np' (line 1648)
    np_582545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1648)
    asarray_582546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 8), np_582545, 'asarray')
    # Calling asarray(args, kwargs) (line 1648)
    asarray_call_result_582549 = invoke(stypy.reporting.localization.Localization(__file__, 1648, 8), asarray_582546, *[a_582547], **kwargs_582548)
    
    # Assigning a type to the variable 'a' (line 1648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 4), 'a', asarray_call_result_582549)
    
    
    # Getting the type of 'a' (line 1649)
    a_582550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 7), 'a')
    # Obtaining the member 'size' of a type (line 1649)
    size_582551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 7), a_582550, 'size')
    int_582552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 17), 'int')
    # Applying the binary operator '==' (line 1649)
    result_eq_582553 = python_operator(stypy.reporting.localization.Localization(__file__, 1649, 7), '==', size_582551, int_582552)
    
    # Testing the type of an if condition (line 1649)
    if_condition_582554 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1649, 4), result_eq_582553)
    # Assigning a type to the variable 'if_condition_582554' (line 1649)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 4), 'if_condition_582554', if_condition_582554)
    # SSA begins for if statement (line 1649)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isscalar(...): (line 1651)
    # Processing the call arguments (line 1651)
    # Getting the type of 'per' (line 1651)
    per_582557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 23), 'per', False)
    # Processing the call keyword arguments (line 1651)
    kwargs_582558 = {}
    # Getting the type of 'np' (line 1651)
    np_582555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 11), 'np', False)
    # Obtaining the member 'isscalar' of a type (line 1651)
    isscalar_582556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 11), np_582555, 'isscalar')
    # Calling isscalar(args, kwargs) (line 1651)
    isscalar_call_result_582559 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 11), isscalar_582556, *[per_582557], **kwargs_582558)
    
    # Testing the type of an if condition (line 1651)
    if_condition_582560 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1651, 8), isscalar_call_result_582559)
    # Assigning a type to the variable 'if_condition_582560' (line 1651)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 8), 'if_condition_582560', if_condition_582560)
    # SSA begins for if statement (line 1651)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'np' (line 1652)
    np_582561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 19), 'np')
    # Obtaining the member 'nan' of a type (line 1652)
    nan_582562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 19), np_582561, 'nan')
    # Assigning a type to the variable 'stypy_return_type' (line 1652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1652, 12), 'stypy_return_type', nan_582562)
    # SSA branch for the else part of an if statement (line 1651)
    module_type_store.open_ssa_branch('else')
    
    # Call to ones(...): (line 1654)
    # Processing the call arguments (line 1654)
    
    # Call to asarray(...): (line 1654)
    # Processing the call arguments (line 1654)
    # Getting the type of 'per' (line 1654)
    per_582567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 38), 'per', False)
    # Processing the call keyword arguments (line 1654)
    kwargs_582568 = {}
    # Getting the type of 'np' (line 1654)
    np_582565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 27), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1654)
    asarray_582566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 27), np_582565, 'asarray')
    # Calling asarray(args, kwargs) (line 1654)
    asarray_call_result_582569 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 27), asarray_582566, *[per_582567], **kwargs_582568)
    
    # Obtaining the member 'shape' of a type (line 1654)
    shape_582570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 27), asarray_call_result_582569, 'shape')
    # Processing the call keyword arguments (line 1654)
    # Getting the type of 'np' (line 1654)
    np_582571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 56), 'np', False)
    # Obtaining the member 'float64' of a type (line 1654)
    float64_582572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 56), np_582571, 'float64')
    keyword_582573 = float64_582572
    kwargs_582574 = {'dtype': keyword_582573}
    # Getting the type of 'np' (line 1654)
    np_582563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 19), 'np', False)
    # Obtaining the member 'ones' of a type (line 1654)
    ones_582564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 19), np_582563, 'ones')
    # Calling ones(args, kwargs) (line 1654)
    ones_call_result_582575 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 19), ones_582564, *[shape_582570], **kwargs_582574)
    
    # Getting the type of 'np' (line 1654)
    np_582576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 70), 'np')
    # Obtaining the member 'nan' of a type (line 1654)
    nan_582577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 70), np_582576, 'nan')
    # Applying the binary operator '*' (line 1654)
    result_mul_582578 = python_operator(stypy.reporting.localization.Localization(__file__, 1654, 19), '*', ones_call_result_582575, nan_582577)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1654)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 12), 'stypy_return_type', result_mul_582578)
    # SSA join for if statement (line 1651)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1649)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'limit' (line 1656)
    limit_582579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 7), 'limit')
    # Testing the type of an if condition (line 1656)
    if_condition_582580 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1656, 4), limit_582579)
    # Assigning a type to the variable 'if_condition_582580' (line 1656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 4), 'if_condition_582580', if_condition_582580)
    # SSA begins for if statement (line 1656)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1657):
    
    # Assigning a Subscript to a Name (line 1657):
    
    # Obtaining the type of the subscript
    
    
    # Obtaining the type of the subscript
    int_582581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1657, 21), 'int')
    # Getting the type of 'limit' (line 1657)
    limit_582582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 15), 'limit')
    # Obtaining the member '__getitem__' of a type (line 1657)
    getitem___582583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1657, 15), limit_582582, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1657)
    subscript_call_result_582584 = invoke(stypy.reporting.localization.Localization(__file__, 1657, 15), getitem___582583, int_582581)
    
    # Getting the type of 'a' (line 1657)
    a_582585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 27), 'a')
    # Applying the binary operator '<=' (line 1657)
    result_le_582586 = python_operator(stypy.reporting.localization.Localization(__file__, 1657, 15), '<=', subscript_call_result_582584, a_582585)
    
    
    # Getting the type of 'a' (line 1657)
    a_582587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 33), 'a')
    
    # Obtaining the type of the subscript
    int_582588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1657, 44), 'int')
    # Getting the type of 'limit' (line 1657)
    limit_582589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 38), 'limit')
    # Obtaining the member '__getitem__' of a type (line 1657)
    getitem___582590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1657, 38), limit_582589, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1657)
    subscript_call_result_582591 = invoke(stypy.reporting.localization.Localization(__file__, 1657, 38), getitem___582590, int_582588)
    
    # Applying the binary operator '<=' (line 1657)
    result_le_582592 = python_operator(stypy.reporting.localization.Localization(__file__, 1657, 33), '<=', a_582587, subscript_call_result_582591)
    
    # Applying the binary operator '&' (line 1657)
    result_and__582593 = python_operator(stypy.reporting.localization.Localization(__file__, 1657, 14), '&', result_le_582586, result_le_582592)
    
    # Getting the type of 'a' (line 1657)
    a_582594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 12), 'a')
    # Obtaining the member '__getitem__' of a type (line 1657)
    getitem___582595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1657, 12), a_582594, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1657)
    subscript_call_result_582596 = invoke(stypy.reporting.localization.Localization(__file__, 1657, 12), getitem___582595, result_and__582593)
    
    # Assigning a type to the variable 'a' (line 1657)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1657, 8), 'a', subscript_call_result_582596)
    # SSA join for if statement (line 1656)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1659):
    
    # Assigning a Call to a Name (line 1659):
    
    # Call to sort(...): (line 1659)
    # Processing the call arguments (line 1659)
    # Getting the type of 'a' (line 1659)
    a_582599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 21), 'a', False)
    # Processing the call keyword arguments (line 1659)
    # Getting the type of 'axis' (line 1659)
    axis_582600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 29), 'axis', False)
    keyword_582601 = axis_582600
    kwargs_582602 = {'axis': keyword_582601}
    # Getting the type of 'np' (line 1659)
    np_582597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 13), 'np', False)
    # Obtaining the member 'sort' of a type (line 1659)
    sort_582598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 13), np_582597, 'sort')
    # Calling sort(args, kwargs) (line 1659)
    sort_call_result_582603 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 13), sort_582598, *[a_582599], **kwargs_582602)
    
    # Assigning a type to the variable 'sorted' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 4), 'sorted', sort_call_result_582603)
    
    # Type idiom detected: calculating its left and rigth part (line 1660)
    # Getting the type of 'axis' (line 1660)
    axis_582604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 7), 'axis')
    # Getting the type of 'None' (line 1660)
    None_582605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 15), 'None')
    
    (may_be_582606, more_types_in_union_582607) = may_be_none(axis_582604, None_582605)

    if may_be_582606:

        if more_types_in_union_582607:
            # Runtime conditional SSA (line 1660)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 1661):
        
        # Assigning a Num to a Name (line 1661):
        int_582608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 15), 'int')
        # Assigning a type to the variable 'axis' (line 1661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 8), 'axis', int_582608)

        if more_types_in_union_582607:
            # SSA join for if statement (line 1660)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to _compute_qth_percentile(...): (line 1663)
    # Processing the call arguments (line 1663)
    # Getting the type of 'sorted' (line 1663)
    sorted_582610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 35), 'sorted', False)
    # Getting the type of 'per' (line 1663)
    per_582611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 43), 'per', False)
    # Getting the type of 'interpolation_method' (line 1663)
    interpolation_method_582612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 48), 'interpolation_method', False)
    # Getting the type of 'axis' (line 1663)
    axis_582613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 70), 'axis', False)
    # Processing the call keyword arguments (line 1663)
    kwargs_582614 = {}
    # Getting the type of '_compute_qth_percentile' (line 1663)
    _compute_qth_percentile_582609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 11), '_compute_qth_percentile', False)
    # Calling _compute_qth_percentile(args, kwargs) (line 1663)
    _compute_qth_percentile_call_result_582615 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 11), _compute_qth_percentile_582609, *[sorted_582610, per_582611, interpolation_method_582612, axis_582613], **kwargs_582614)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1663)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1663, 4), 'stypy_return_type', _compute_qth_percentile_call_result_582615)
    
    # ################# End of 'scoreatpercentile(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'scoreatpercentile' in the type store
    # Getting the type of 'stypy_return_type' (line 1587)
    stypy_return_type_582616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_582616)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'scoreatpercentile'
    return stypy_return_type_582616

# Assigning a type to the variable 'scoreatpercentile' (line 1587)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 0), 'scoreatpercentile', scoreatpercentile)

@norecursion
def _compute_qth_percentile(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_compute_qth_percentile'
    module_type_store = module_type_store.open_function_context('_compute_qth_percentile', 1667, 0, False)
    
    # Passed parameters checking function
    _compute_qth_percentile.stypy_localization = localization
    _compute_qth_percentile.stypy_type_of_self = None
    _compute_qth_percentile.stypy_type_store = module_type_store
    _compute_qth_percentile.stypy_function_name = '_compute_qth_percentile'
    _compute_qth_percentile.stypy_param_names_list = ['sorted', 'per', 'interpolation_method', 'axis']
    _compute_qth_percentile.stypy_varargs_param_name = None
    _compute_qth_percentile.stypy_kwargs_param_name = None
    _compute_qth_percentile.stypy_call_defaults = defaults
    _compute_qth_percentile.stypy_call_varargs = varargs
    _compute_qth_percentile.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_compute_qth_percentile', ['sorted', 'per', 'interpolation_method', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_compute_qth_percentile', localization, ['sorted', 'per', 'interpolation_method', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_compute_qth_percentile(...)' code ##################

    
    
    
    # Call to isscalar(...): (line 1668)
    # Processing the call arguments (line 1668)
    # Getting the type of 'per' (line 1668)
    per_582619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 23), 'per', False)
    # Processing the call keyword arguments (line 1668)
    kwargs_582620 = {}
    # Getting the type of 'np' (line 1668)
    np_582617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 11), 'np', False)
    # Obtaining the member 'isscalar' of a type (line 1668)
    isscalar_582618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 11), np_582617, 'isscalar')
    # Calling isscalar(args, kwargs) (line 1668)
    isscalar_call_result_582621 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 11), isscalar_582618, *[per_582619], **kwargs_582620)
    
    # Applying the 'not' unary operator (line 1668)
    result_not__582622 = python_operator(stypy.reporting.localization.Localization(__file__, 1668, 7), 'not', isscalar_call_result_582621)
    
    # Testing the type of an if condition (line 1668)
    if_condition_582623 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1668, 4), result_not__582622)
    # Assigning a type to the variable 'if_condition_582623' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'if_condition_582623', if_condition_582623)
    # SSA begins for if statement (line 1668)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 1669):
    
    # Assigning a ListComp to a Name (line 1669):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'per' (line 1670)
    per_582631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 26), 'per')
    comprehension_582632 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1669, 17), per_582631)
    # Assigning a type to the variable 'i' (line 1669)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 17), 'i', comprehension_582632)
    
    # Call to _compute_qth_percentile(...): (line 1669)
    # Processing the call arguments (line 1669)
    # Getting the type of 'sorted' (line 1669)
    sorted_582625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 41), 'sorted', False)
    # Getting the type of 'i' (line 1669)
    i_582626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 49), 'i', False)
    # Getting the type of 'interpolation_method' (line 1669)
    interpolation_method_582627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 52), 'interpolation_method', False)
    # Getting the type of 'axis' (line 1669)
    axis_582628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 74), 'axis', False)
    # Processing the call keyword arguments (line 1669)
    kwargs_582629 = {}
    # Getting the type of '_compute_qth_percentile' (line 1669)
    _compute_qth_percentile_582624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 17), '_compute_qth_percentile', False)
    # Calling _compute_qth_percentile(args, kwargs) (line 1669)
    _compute_qth_percentile_call_result_582630 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 17), _compute_qth_percentile_582624, *[sorted_582625, i_582626, interpolation_method_582627, axis_582628], **kwargs_582629)
    
    list_582633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1669, 17), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1669, 17), list_582633, _compute_qth_percentile_call_result_582630)
    # Assigning a type to the variable 'score' (line 1669)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 8), 'score', list_582633)
    
    # Call to array(...): (line 1671)
    # Processing the call arguments (line 1671)
    # Getting the type of 'score' (line 1671)
    score_582636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 24), 'score', False)
    # Processing the call keyword arguments (line 1671)
    kwargs_582637 = {}
    # Getting the type of 'np' (line 1671)
    np_582634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 1671)
    array_582635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 15), np_582634, 'array')
    # Calling array(args, kwargs) (line 1671)
    array_call_result_582638 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 15), array_582635, *[score_582636], **kwargs_582637)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 8), 'stypy_return_type', array_call_result_582638)
    # SSA join for if statement (line 1668)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'per' (line 1673)
    per_582639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 8), 'per')
    int_582640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1673, 14), 'int')
    # Applying the binary operator '<' (line 1673)
    result_lt_582641 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 8), '<', per_582639, int_582640)
    
    
    # Getting the type of 'per' (line 1673)
    per_582642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 21), 'per')
    int_582643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1673, 27), 'int')
    # Applying the binary operator '>' (line 1673)
    result_gt_582644 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 21), '>', per_582642, int_582643)
    
    # Applying the binary operator 'or' (line 1673)
    result_or_keyword_582645 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 7), 'or', result_lt_582641, result_gt_582644)
    
    # Testing the type of an if condition (line 1673)
    if_condition_582646 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1673, 4), result_or_keyword_582645)
    # Assigning a type to the variable 'if_condition_582646' (line 1673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 4), 'if_condition_582646', if_condition_582646)
    # SSA begins for if statement (line 1673)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1674)
    # Processing the call arguments (line 1674)
    str_582648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 25), 'str', 'percentile must be in the range [0, 100]')
    # Processing the call keyword arguments (line 1674)
    kwargs_582649 = {}
    # Getting the type of 'ValueError' (line 1674)
    ValueError_582647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1674)
    ValueError_call_result_582650 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 14), ValueError_582647, *[str_582648], **kwargs_582649)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1674, 8), ValueError_call_result_582650, 'raise parameter', BaseException)
    # SSA join for if statement (line 1673)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1676):
    
    # Assigning a BinOp to a Name (line 1676):
    
    # Obtaining an instance of the builtin type 'list' (line 1676)
    list_582651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1676)
    # Adding element type (line 1676)
    
    # Call to slice(...): (line 1676)
    # Processing the call arguments (line 1676)
    # Getting the type of 'None' (line 1676)
    None_582653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 21), 'None', False)
    # Processing the call keyword arguments (line 1676)
    kwargs_582654 = {}
    # Getting the type of 'slice' (line 1676)
    slice_582652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 15), 'slice', False)
    # Calling slice(args, kwargs) (line 1676)
    slice_call_result_582655 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 15), slice_582652, *[None_582653], **kwargs_582654)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1676, 14), list_582651, slice_call_result_582655)
    
    # Getting the type of 'sorted' (line 1676)
    sorted_582656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 30), 'sorted')
    # Obtaining the member 'ndim' of a type (line 1676)
    ndim_582657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 30), sorted_582656, 'ndim')
    # Applying the binary operator '*' (line 1676)
    result_mul_582658 = python_operator(stypy.reporting.localization.Localization(__file__, 1676, 14), '*', list_582651, ndim_582657)
    
    # Assigning a type to the variable 'indexer' (line 1676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 4), 'indexer', result_mul_582658)
    
    # Assigning a BinOp to a Name (line 1677):
    
    # Assigning a BinOp to a Name (line 1677):
    # Getting the type of 'per' (line 1677)
    per_582659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 10), 'per')
    float_582660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 16), 'float')
    # Applying the binary operator 'div' (line 1677)
    result_div_582661 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 10), 'div', per_582659, float_582660)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1677)
    axis_582662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 37), 'axis')
    # Getting the type of 'sorted' (line 1677)
    sorted_582663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 24), 'sorted')
    # Obtaining the member 'shape' of a type (line 1677)
    shape_582664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 24), sorted_582663, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1677)
    getitem___582665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 24), shape_582664, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1677)
    subscript_call_result_582666 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 24), getitem___582665, axis_582662)
    
    int_582667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 45), 'int')
    # Applying the binary operator '-' (line 1677)
    result_sub_582668 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 24), '-', subscript_call_result_582666, int_582667)
    
    # Applying the binary operator '*' (line 1677)
    result_mul_582669 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 21), '*', result_div_582661, result_sub_582668)
    
    # Assigning a type to the variable 'idx' (line 1677)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 4), 'idx', result_mul_582669)
    
    
    
    # Call to int(...): (line 1679)
    # Processing the call arguments (line 1679)
    # Getting the type of 'idx' (line 1679)
    idx_582671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 11), 'idx', False)
    # Processing the call keyword arguments (line 1679)
    kwargs_582672 = {}
    # Getting the type of 'int' (line 1679)
    int_582670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 7), 'int', False)
    # Calling int(args, kwargs) (line 1679)
    int_call_result_582673 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 7), int_582670, *[idx_582671], **kwargs_582672)
    
    # Getting the type of 'idx' (line 1679)
    idx_582674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 19), 'idx')
    # Applying the binary operator '!=' (line 1679)
    result_ne_582675 = python_operator(stypy.reporting.localization.Localization(__file__, 1679, 7), '!=', int_call_result_582673, idx_582674)
    
    # Testing the type of an if condition (line 1679)
    if_condition_582676 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1679, 4), result_ne_582675)
    # Assigning a type to the variable 'if_condition_582676' (line 1679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 4), 'if_condition_582676', if_condition_582676)
    # SSA begins for if statement (line 1679)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'interpolation_method' (line 1681)
    interpolation_method_582677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 11), 'interpolation_method')
    str_582678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 35), 'str', 'lower')
    # Applying the binary operator '==' (line 1681)
    result_eq_582679 = python_operator(stypy.reporting.localization.Localization(__file__, 1681, 11), '==', interpolation_method_582677, str_582678)
    
    # Testing the type of an if condition (line 1681)
    if_condition_582680 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1681, 8), result_eq_582679)
    # Assigning a type to the variable 'if_condition_582680' (line 1681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 8), 'if_condition_582680', if_condition_582680)
    # SSA begins for if statement (line 1681)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1682):
    
    # Assigning a Call to a Name (line 1682):
    
    # Call to int(...): (line 1682)
    # Processing the call arguments (line 1682)
    
    # Call to floor(...): (line 1682)
    # Processing the call arguments (line 1682)
    # Getting the type of 'idx' (line 1682)
    idx_582684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 31), 'idx', False)
    # Processing the call keyword arguments (line 1682)
    kwargs_582685 = {}
    # Getting the type of 'np' (line 1682)
    np_582682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 22), 'np', False)
    # Obtaining the member 'floor' of a type (line 1682)
    floor_582683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 22), np_582682, 'floor')
    # Calling floor(args, kwargs) (line 1682)
    floor_call_result_582686 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 22), floor_582683, *[idx_582684], **kwargs_582685)
    
    # Processing the call keyword arguments (line 1682)
    kwargs_582687 = {}
    # Getting the type of 'int' (line 1682)
    int_582681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 18), 'int', False)
    # Calling int(args, kwargs) (line 1682)
    int_call_result_582688 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 18), int_582681, *[floor_call_result_582686], **kwargs_582687)
    
    # Assigning a type to the variable 'idx' (line 1682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 12), 'idx', int_call_result_582688)
    # SSA branch for the else part of an if statement (line 1681)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'interpolation_method' (line 1683)
    interpolation_method_582689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 13), 'interpolation_method')
    str_582690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1683, 37), 'str', 'higher')
    # Applying the binary operator '==' (line 1683)
    result_eq_582691 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 13), '==', interpolation_method_582689, str_582690)
    
    # Testing the type of an if condition (line 1683)
    if_condition_582692 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1683, 13), result_eq_582691)
    # Assigning a type to the variable 'if_condition_582692' (line 1683)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1683, 13), 'if_condition_582692', if_condition_582692)
    # SSA begins for if statement (line 1683)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1684):
    
    # Assigning a Call to a Name (line 1684):
    
    # Call to int(...): (line 1684)
    # Processing the call arguments (line 1684)
    
    # Call to ceil(...): (line 1684)
    # Processing the call arguments (line 1684)
    # Getting the type of 'idx' (line 1684)
    idx_582696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 30), 'idx', False)
    # Processing the call keyword arguments (line 1684)
    kwargs_582697 = {}
    # Getting the type of 'np' (line 1684)
    np_582694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 22), 'np', False)
    # Obtaining the member 'ceil' of a type (line 1684)
    ceil_582695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 22), np_582694, 'ceil')
    # Calling ceil(args, kwargs) (line 1684)
    ceil_call_result_582698 = invoke(stypy.reporting.localization.Localization(__file__, 1684, 22), ceil_582695, *[idx_582696], **kwargs_582697)
    
    # Processing the call keyword arguments (line 1684)
    kwargs_582699 = {}
    # Getting the type of 'int' (line 1684)
    int_582693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 18), 'int', False)
    # Calling int(args, kwargs) (line 1684)
    int_call_result_582700 = invoke(stypy.reporting.localization.Localization(__file__, 1684, 18), int_582693, *[ceil_call_result_582698], **kwargs_582699)
    
    # Assigning a type to the variable 'idx' (line 1684)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1684, 12), 'idx', int_call_result_582700)
    # SSA branch for the else part of an if statement (line 1683)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'interpolation_method' (line 1685)
    interpolation_method_582701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 13), 'interpolation_method')
    str_582702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1685, 37), 'str', 'fraction')
    # Applying the binary operator '==' (line 1685)
    result_eq_582703 = python_operator(stypy.reporting.localization.Localization(__file__, 1685, 13), '==', interpolation_method_582701, str_582702)
    
    # Testing the type of an if condition (line 1685)
    if_condition_582704 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1685, 13), result_eq_582703)
    # Assigning a type to the variable 'if_condition_582704' (line 1685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 13), 'if_condition_582704', if_condition_582704)
    # SSA begins for if statement (line 1685)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    pass
    # SSA branch for the else part of an if statement (line 1685)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1688)
    # Processing the call arguments (line 1688)
    str_582706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 29), 'str', "interpolation_method can only be 'fraction', 'lower' or 'higher'")
    # Processing the call keyword arguments (line 1688)
    kwargs_582707 = {}
    # Getting the type of 'ValueError' (line 1688)
    ValueError_582705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1688)
    ValueError_call_result_582708 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 18), ValueError_582705, *[str_582706], **kwargs_582707)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1688, 12), ValueError_call_result_582708, 'raise parameter', BaseException)
    # SSA join for if statement (line 1685)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1683)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1681)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1679)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1691):
    
    # Assigning a Call to a Name (line 1691):
    
    # Call to int(...): (line 1691)
    # Processing the call arguments (line 1691)
    # Getting the type of 'idx' (line 1691)
    idx_582710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 12), 'idx', False)
    # Processing the call keyword arguments (line 1691)
    kwargs_582711 = {}
    # Getting the type of 'int' (line 1691)
    int_582709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 8), 'int', False)
    # Calling int(args, kwargs) (line 1691)
    int_call_result_582712 = invoke(stypy.reporting.localization.Localization(__file__, 1691, 8), int_582709, *[idx_582710], **kwargs_582711)
    
    # Assigning a type to the variable 'i' (line 1691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 4), 'i', int_call_result_582712)
    
    
    # Getting the type of 'i' (line 1692)
    i_582713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 7), 'i')
    # Getting the type of 'idx' (line 1692)
    idx_582714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 12), 'idx')
    # Applying the binary operator '==' (line 1692)
    result_eq_582715 = python_operator(stypy.reporting.localization.Localization(__file__, 1692, 7), '==', i_582713, idx_582714)
    
    # Testing the type of an if condition (line 1692)
    if_condition_582716 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1692, 4), result_eq_582715)
    # Assigning a type to the variable 'if_condition_582716' (line 1692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 4), 'if_condition_582716', if_condition_582716)
    # SSA begins for if statement (line 1692)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 1693):
    
    # Assigning a Call to a Subscript (line 1693):
    
    # Call to slice(...): (line 1693)
    # Processing the call arguments (line 1693)
    # Getting the type of 'i' (line 1693)
    i_582718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 30), 'i', False)
    # Getting the type of 'i' (line 1693)
    i_582719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 33), 'i', False)
    int_582720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 37), 'int')
    # Applying the binary operator '+' (line 1693)
    result_add_582721 = python_operator(stypy.reporting.localization.Localization(__file__, 1693, 33), '+', i_582719, int_582720)
    
    # Processing the call keyword arguments (line 1693)
    kwargs_582722 = {}
    # Getting the type of 'slice' (line 1693)
    slice_582717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 24), 'slice', False)
    # Calling slice(args, kwargs) (line 1693)
    slice_call_result_582723 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 24), slice_582717, *[i_582718, result_add_582721], **kwargs_582722)
    
    # Getting the type of 'indexer' (line 1693)
    indexer_582724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 8), 'indexer')
    # Getting the type of 'axis' (line 1693)
    axis_582725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 16), 'axis')
    # Storing an element on a container (line 1693)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1693, 8), indexer_582724, (axis_582725, slice_call_result_582723))
    
    # Assigning a Call to a Name (line 1694):
    
    # Assigning a Call to a Name (line 1694):
    
    # Call to array(...): (line 1694)
    # Processing the call arguments (line 1694)
    int_582727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1694, 24), 'int')
    # Processing the call keyword arguments (line 1694)
    kwargs_582728 = {}
    # Getting the type of 'array' (line 1694)
    array_582726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 18), 'array', False)
    # Calling array(args, kwargs) (line 1694)
    array_call_result_582729 = invoke(stypy.reporting.localization.Localization(__file__, 1694, 18), array_582726, *[int_582727], **kwargs_582728)
    
    # Assigning a type to the variable 'weights' (line 1694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1694, 8), 'weights', array_call_result_582729)
    
    # Assigning a Num to a Name (line 1695):
    
    # Assigning a Num to a Name (line 1695):
    float_582730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1695, 17), 'float')
    # Assigning a type to the variable 'sumval' (line 1695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 8), 'sumval', float_582730)
    # SSA branch for the else part of an if statement (line 1692)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Subscript (line 1697):
    
    # Assigning a Call to a Subscript (line 1697):
    
    # Call to slice(...): (line 1697)
    # Processing the call arguments (line 1697)
    # Getting the type of 'i' (line 1697)
    i_582732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 30), 'i', False)
    # Getting the type of 'i' (line 1697)
    i_582733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 33), 'i', False)
    int_582734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1697, 37), 'int')
    # Applying the binary operator '+' (line 1697)
    result_add_582735 = python_operator(stypy.reporting.localization.Localization(__file__, 1697, 33), '+', i_582733, int_582734)
    
    # Processing the call keyword arguments (line 1697)
    kwargs_582736 = {}
    # Getting the type of 'slice' (line 1697)
    slice_582731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 24), 'slice', False)
    # Calling slice(args, kwargs) (line 1697)
    slice_call_result_582737 = invoke(stypy.reporting.localization.Localization(__file__, 1697, 24), slice_582731, *[i_582732, result_add_582735], **kwargs_582736)
    
    # Getting the type of 'indexer' (line 1697)
    indexer_582738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 8), 'indexer')
    # Getting the type of 'axis' (line 1697)
    axis_582739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 16), 'axis')
    # Storing an element on a container (line 1697)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1697, 8), indexer_582738, (axis_582739, slice_call_result_582737))
    
    # Assigning a BinOp to a Name (line 1698):
    
    # Assigning a BinOp to a Name (line 1698):
    # Getting the type of 'i' (line 1698)
    i_582740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 12), 'i')
    int_582741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1698, 16), 'int')
    # Applying the binary operator '+' (line 1698)
    result_add_582742 = python_operator(stypy.reporting.localization.Localization(__file__, 1698, 12), '+', i_582740, int_582741)
    
    # Assigning a type to the variable 'j' (line 1698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1698, 8), 'j', result_add_582742)
    
    # Assigning a Call to a Name (line 1699):
    
    # Assigning a Call to a Name (line 1699):
    
    # Call to array(...): (line 1699)
    # Processing the call arguments (line 1699)
    
    # Obtaining an instance of the builtin type 'list' (line 1699)
    list_582744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1699, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1699)
    # Adding element type (line 1699)
    # Getting the type of 'j' (line 1699)
    j_582745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 26), 'j', False)
    # Getting the type of 'idx' (line 1699)
    idx_582746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 30), 'idx', False)
    # Applying the binary operator '-' (line 1699)
    result_sub_582747 = python_operator(stypy.reporting.localization.Localization(__file__, 1699, 26), '-', j_582745, idx_582746)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1699, 24), list_582744, result_sub_582747)
    # Adding element type (line 1699)
    # Getting the type of 'idx' (line 1699)
    idx_582748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 37), 'idx', False)
    # Getting the type of 'i' (line 1699)
    i_582749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 43), 'i', False)
    # Applying the binary operator '-' (line 1699)
    result_sub_582750 = python_operator(stypy.reporting.localization.Localization(__file__, 1699, 37), '-', idx_582748, i_582749)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1699, 24), list_582744, result_sub_582750)
    
    # Getting the type of 'float' (line 1699)
    float_582751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 48), 'float', False)
    # Processing the call keyword arguments (line 1699)
    kwargs_582752 = {}
    # Getting the type of 'array' (line 1699)
    array_582743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 18), 'array', False)
    # Calling array(args, kwargs) (line 1699)
    array_call_result_582753 = invoke(stypy.reporting.localization.Localization(__file__, 1699, 18), array_582743, *[list_582744, float_582751], **kwargs_582752)
    
    # Assigning a type to the variable 'weights' (line 1699)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1699, 8), 'weights', array_call_result_582753)
    
    # Assigning a BinOp to a Name (line 1700):
    
    # Assigning a BinOp to a Name (line 1700):
    
    # Obtaining an instance of the builtin type 'list' (line 1700)
    list_582754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1700, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1700)
    # Adding element type (line 1700)
    int_582755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1700, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1700, 17), list_582754, int_582755)
    
    # Getting the type of 'sorted' (line 1700)
    sorted_582756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 23), 'sorted')
    # Obtaining the member 'ndim' of a type (line 1700)
    ndim_582757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 23), sorted_582756, 'ndim')
    # Applying the binary operator '*' (line 1700)
    result_mul_582758 = python_operator(stypy.reporting.localization.Localization(__file__, 1700, 17), '*', list_582754, ndim_582757)
    
    # Assigning a type to the variable 'wshape' (line 1700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 8), 'wshape', result_mul_582758)
    
    # Assigning a Num to a Subscript (line 1701):
    
    # Assigning a Num to a Subscript (line 1701):
    int_582759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1701, 23), 'int')
    # Getting the type of 'wshape' (line 1701)
    wshape_582760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 8), 'wshape')
    # Getting the type of 'axis' (line 1701)
    axis_582761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 15), 'axis')
    # Storing an element on a container (line 1701)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1701, 8), wshape_582760, (axis_582761, int_582759))
    
    # Assigning a Name to a Attribute (line 1702):
    
    # Assigning a Name to a Attribute (line 1702):
    # Getting the type of 'wshape' (line 1702)
    wshape_582762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 24), 'wshape')
    # Getting the type of 'weights' (line 1702)
    weights_582763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 8), 'weights')
    # Setting the type of the member 'shape' of a type (line 1702)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 8), weights_582763, 'shape', wshape_582762)
    
    # Assigning a Call to a Name (line 1703):
    
    # Assigning a Call to a Name (line 1703):
    
    # Call to sum(...): (line 1703)
    # Processing the call keyword arguments (line 1703)
    kwargs_582766 = {}
    # Getting the type of 'weights' (line 1703)
    weights_582764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 17), 'weights', False)
    # Obtaining the member 'sum' of a type (line 1703)
    sum_582765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 17), weights_582764, 'sum')
    # Calling sum(args, kwargs) (line 1703)
    sum_call_result_582767 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 17), sum_582765, *[], **kwargs_582766)
    
    # Assigning a type to the variable 'sumval' (line 1703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1703, 8), 'sumval', sum_call_result_582767)
    # SSA join for if statement (line 1692)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to reduce(...): (line 1706)
    # Processing the call arguments (line 1706)
    
    # Obtaining the type of the subscript
    # Getting the type of 'indexer' (line 1706)
    indexer_582771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 32), 'indexer', False)
    # Getting the type of 'sorted' (line 1706)
    sorted_582772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 25), 'sorted', False)
    # Obtaining the member '__getitem__' of a type (line 1706)
    getitem___582773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 25), sorted_582772, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1706)
    subscript_call_result_582774 = invoke(stypy.reporting.localization.Localization(__file__, 1706, 25), getitem___582773, indexer_582771)
    
    # Getting the type of 'weights' (line 1706)
    weights_582775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 43), 'weights', False)
    # Applying the binary operator '*' (line 1706)
    result_mul_582776 = python_operator(stypy.reporting.localization.Localization(__file__, 1706, 25), '*', subscript_call_result_582774, weights_582775)
    
    # Processing the call keyword arguments (line 1706)
    # Getting the type of 'axis' (line 1706)
    axis_582777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 57), 'axis', False)
    keyword_582778 = axis_582777
    kwargs_582779 = {'axis': keyword_582778}
    # Getting the type of 'np' (line 1706)
    np_582768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 11), 'np', False)
    # Obtaining the member 'add' of a type (line 1706)
    add_582769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 11), np_582768, 'add')
    # Obtaining the member 'reduce' of a type (line 1706)
    reduce_582770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 11), add_582769, 'reduce')
    # Calling reduce(args, kwargs) (line 1706)
    reduce_call_result_582780 = invoke(stypy.reporting.localization.Localization(__file__, 1706, 11), reduce_582770, *[result_mul_582776], **kwargs_582779)
    
    # Getting the type of 'sumval' (line 1706)
    sumval_582781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 65), 'sumval')
    # Applying the binary operator 'div' (line 1706)
    result_div_582782 = python_operator(stypy.reporting.localization.Localization(__file__, 1706, 11), 'div', reduce_call_result_582780, sumval_582781)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1706)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1706, 4), 'stypy_return_type', result_div_582782)
    
    # ################# End of '_compute_qth_percentile(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_compute_qth_percentile' in the type store
    # Getting the type of 'stypy_return_type' (line 1667)
    stypy_return_type_582783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_582783)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_compute_qth_percentile'
    return stypy_return_type_582783

# Assigning a type to the variable '_compute_qth_percentile' (line 1667)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 0), '_compute_qth_percentile', _compute_qth_percentile)

@norecursion
def percentileofscore(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_582784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 37), 'str', 'rank')
    defaults = [str_582784]
    # Create a new context for function 'percentileofscore'
    module_type_store = module_type_store.open_function_context('percentileofscore', 1709, 0, False)
    
    # Passed parameters checking function
    percentileofscore.stypy_localization = localization
    percentileofscore.stypy_type_of_self = None
    percentileofscore.stypy_type_store = module_type_store
    percentileofscore.stypy_function_name = 'percentileofscore'
    percentileofscore.stypy_param_names_list = ['a', 'score', 'kind']
    percentileofscore.stypy_varargs_param_name = None
    percentileofscore.stypy_kwargs_param_name = None
    percentileofscore.stypy_call_defaults = defaults
    percentileofscore.stypy_call_varargs = varargs
    percentileofscore.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'percentileofscore', ['a', 'score', 'kind'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'percentileofscore', localization, ['a', 'score', 'kind'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'percentileofscore(...)' code ##################

    str_582785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, (-1)), 'str', '\n    The percentile rank of a score relative to a list of scores.\n\n    A `percentileofscore` of, for example, 80% means that 80% of the\n    scores in `a` are below the given score. In the case of gaps or\n    ties, the exact definition depends on the optional keyword, `kind`.\n\n    Parameters\n    ----------\n    a : array_like\n        Array of scores to which `score` is compared.\n    score : int or float\n        Score that is compared to the elements in `a`.\n    kind : {\'rank\', \'weak\', \'strict\', \'mean\'}, optional\n        This optional parameter specifies the interpretation of the\n        resulting score:\n\n        - "rank": Average percentage ranking of score.  In case of\n                  multiple matches, average the percentage rankings of\n                  all matching scores.\n        - "weak": This kind corresponds to the definition of a cumulative\n                  distribution function.  A percentileofscore of 80%\n                  means that 80% of values are less than or equal\n                  to the provided score.\n        - "strict": Similar to "weak", except that only values that are\n                    strictly less than the given score are counted.\n        - "mean": The average of the "weak" and "strict" scores, often used in\n                  testing.  See\n\n                  http://en.wikipedia.org/wiki/Percentile_rank\n\n    Returns\n    -------\n    pcos : float\n        Percentile-position of score (0-100) relative to `a`.\n\n    See Also\n    --------\n    numpy.percentile\n\n    Examples\n    --------\n    Three-quarters of the given values lie below a given score:\n\n    >>> from scipy import stats\n    >>> stats.percentileofscore([1, 2, 3, 4], 3)\n    75.0\n\n    With multiple matches, note how the scores of the two matches, 0.6\n    and 0.8 respectively, are averaged:\n\n    >>> stats.percentileofscore([1, 2, 3, 3, 4], 3)\n    70.0\n\n    Only 2/5 values are strictly less than 3:\n\n    >>> stats.percentileofscore([1, 2, 3, 3, 4], 3, kind=\'strict\')\n    40.0\n\n    But 4/5 values are less than or equal to 3:\n\n    >>> stats.percentileofscore([1, 2, 3, 3, 4], 3, kind=\'weak\')\n    80.0\n\n    The average between the weak and the strict scores is\n\n    >>> stats.percentileofscore([1, 2, 3, 3, 4], 3, kind=\'mean\')\n    60.0\n\n    ')
    
    # Assigning a Call to a Name (line 1780):
    
    # Assigning a Call to a Name (line 1780):
    
    # Call to array(...): (line 1780)
    # Processing the call arguments (line 1780)
    # Getting the type of 'a' (line 1780)
    a_582788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 17), 'a', False)
    # Processing the call keyword arguments (line 1780)
    kwargs_582789 = {}
    # Getting the type of 'np' (line 1780)
    np_582786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 1780)
    array_582787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1780, 8), np_582786, 'array')
    # Calling array(args, kwargs) (line 1780)
    array_call_result_582790 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 8), array_582787, *[a_582788], **kwargs_582789)
    
    # Assigning a type to the variable 'a' (line 1780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1780, 4), 'a', array_call_result_582790)
    
    # Assigning a Call to a Name (line 1781):
    
    # Assigning a Call to a Name (line 1781):
    
    # Call to len(...): (line 1781)
    # Processing the call arguments (line 1781)
    # Getting the type of 'a' (line 1781)
    a_582792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 12), 'a', False)
    # Processing the call keyword arguments (line 1781)
    kwargs_582793 = {}
    # Getting the type of 'len' (line 1781)
    len_582791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 8), 'len', False)
    # Calling len(args, kwargs) (line 1781)
    len_call_result_582794 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 8), len_582791, *[a_582792], **kwargs_582793)
    
    # Assigning a type to the variable 'n' (line 1781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 4), 'n', len_call_result_582794)
    
    
    # Getting the type of 'kind' (line 1783)
    kind_582795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 7), 'kind')
    str_582796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1783, 15), 'str', 'rank')
    # Applying the binary operator '==' (line 1783)
    result_eq_582797 = python_operator(stypy.reporting.localization.Localization(__file__, 1783, 7), '==', kind_582795, str_582796)
    
    # Testing the type of an if condition (line 1783)
    if_condition_582798 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1783, 4), result_eq_582797)
    # Assigning a type to the variable 'if_condition_582798' (line 1783)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 4), 'if_condition_582798', if_condition_582798)
    # SSA begins for if statement (line 1783)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to any(...): (line 1784)
    # Processing the call arguments (line 1784)
    
    # Getting the type of 'a' (line 1784)
    a_582801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 22), 'a', False)
    # Getting the type of 'score' (line 1784)
    score_582802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 27), 'score', False)
    # Applying the binary operator '==' (line 1784)
    result_eq_582803 = python_operator(stypy.reporting.localization.Localization(__file__, 1784, 22), '==', a_582801, score_582802)
    
    # Processing the call keyword arguments (line 1784)
    kwargs_582804 = {}
    # Getting the type of 'np' (line 1784)
    np_582799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 15), 'np', False)
    # Obtaining the member 'any' of a type (line 1784)
    any_582800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 15), np_582799, 'any')
    # Calling any(args, kwargs) (line 1784)
    any_call_result_582805 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 15), any_582800, *[result_eq_582803], **kwargs_582804)
    
    # Applying the 'not' unary operator (line 1784)
    result_not__582806 = python_operator(stypy.reporting.localization.Localization(__file__, 1784, 11), 'not', any_call_result_582805)
    
    # Testing the type of an if condition (line 1784)
    if_condition_582807 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1784, 8), result_not__582806)
    # Assigning a type to the variable 'if_condition_582807' (line 1784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 8), 'if_condition_582807', if_condition_582807)
    # SSA begins for if statement (line 1784)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1785):
    
    # Assigning a Call to a Name (line 1785):
    
    # Call to append(...): (line 1785)
    # Processing the call arguments (line 1785)
    # Getting the type of 'a' (line 1785)
    a_582810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 26), 'a', False)
    # Getting the type of 'score' (line 1785)
    score_582811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 29), 'score', False)
    # Processing the call keyword arguments (line 1785)
    kwargs_582812 = {}
    # Getting the type of 'np' (line 1785)
    np_582808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 16), 'np', False)
    # Obtaining the member 'append' of a type (line 1785)
    append_582809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1785, 16), np_582808, 'append')
    # Calling append(args, kwargs) (line 1785)
    append_call_result_582813 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 16), append_582809, *[a_582810, score_582811], **kwargs_582812)
    
    # Assigning a type to the variable 'a' (line 1785)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1785, 12), 'a', append_call_result_582813)
    
    # Assigning a Call to a Name (line 1786):
    
    # Assigning a Call to a Name (line 1786):
    
    # Call to array(...): (line 1786)
    # Processing the call arguments (line 1786)
    
    # Call to list(...): (line 1786)
    # Processing the call arguments (line 1786)
    
    # Call to range(...): (line 1786)
    # Processing the call arguments (line 1786)
    
    # Call to len(...): (line 1786)
    # Processing the call arguments (line 1786)
    # Getting the type of 'a' (line 1786)
    a_582819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 44), 'a', False)
    # Processing the call keyword arguments (line 1786)
    kwargs_582820 = {}
    # Getting the type of 'len' (line 1786)
    len_582818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 40), 'len', False)
    # Calling len(args, kwargs) (line 1786)
    len_call_result_582821 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 40), len_582818, *[a_582819], **kwargs_582820)
    
    # Processing the call keyword arguments (line 1786)
    kwargs_582822 = {}
    # Getting the type of 'range' (line 1786)
    range_582817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 34), 'range', False)
    # Calling range(args, kwargs) (line 1786)
    range_call_result_582823 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 34), range_582817, *[len_call_result_582821], **kwargs_582822)
    
    # Processing the call keyword arguments (line 1786)
    kwargs_582824 = {}
    # Getting the type of 'list' (line 1786)
    list_582816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 29), 'list', False)
    # Calling list(args, kwargs) (line 1786)
    list_call_result_582825 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 29), list_582816, *[range_call_result_582823], **kwargs_582824)
    
    # Processing the call keyword arguments (line 1786)
    kwargs_582826 = {}
    # Getting the type of 'np' (line 1786)
    np_582814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 20), 'np', False)
    # Obtaining the member 'array' of a type (line 1786)
    array_582815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 20), np_582814, 'array')
    # Calling array(args, kwargs) (line 1786)
    array_call_result_582827 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 20), array_582815, *[list_call_result_582825], **kwargs_582826)
    
    # Assigning a type to the variable 'a_len' (line 1786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 12), 'a_len', array_call_result_582827)
    # SSA branch for the else part of an if statement (line 1784)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1788):
    
    # Assigning a BinOp to a Name (line 1788):
    
    # Call to array(...): (line 1788)
    # Processing the call arguments (line 1788)
    
    # Call to list(...): (line 1788)
    # Processing the call arguments (line 1788)
    
    # Call to range(...): (line 1788)
    # Processing the call arguments (line 1788)
    
    # Call to len(...): (line 1788)
    # Processing the call arguments (line 1788)
    # Getting the type of 'a' (line 1788)
    a_582833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 44), 'a', False)
    # Processing the call keyword arguments (line 1788)
    kwargs_582834 = {}
    # Getting the type of 'len' (line 1788)
    len_582832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 40), 'len', False)
    # Calling len(args, kwargs) (line 1788)
    len_call_result_582835 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 40), len_582832, *[a_582833], **kwargs_582834)
    
    # Processing the call keyword arguments (line 1788)
    kwargs_582836 = {}
    # Getting the type of 'range' (line 1788)
    range_582831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 34), 'range', False)
    # Calling range(args, kwargs) (line 1788)
    range_call_result_582837 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 34), range_582831, *[len_call_result_582835], **kwargs_582836)
    
    # Processing the call keyword arguments (line 1788)
    kwargs_582838 = {}
    # Getting the type of 'list' (line 1788)
    list_582830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 29), 'list', False)
    # Calling list(args, kwargs) (line 1788)
    list_call_result_582839 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 29), list_582830, *[range_call_result_582837], **kwargs_582838)
    
    # Processing the call keyword arguments (line 1788)
    kwargs_582840 = {}
    # Getting the type of 'np' (line 1788)
    np_582828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 20), 'np', False)
    # Obtaining the member 'array' of a type (line 1788)
    array_582829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 20), np_582828, 'array')
    # Calling array(args, kwargs) (line 1788)
    array_call_result_582841 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 20), array_582829, *[list_call_result_582839], **kwargs_582840)
    
    float_582842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 52), 'float')
    # Applying the binary operator '+' (line 1788)
    result_add_582843 = python_operator(stypy.reporting.localization.Localization(__file__, 1788, 20), '+', array_call_result_582841, float_582842)
    
    # Assigning a type to the variable 'a_len' (line 1788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 12), 'a_len', result_add_582843)
    # SSA join for if statement (line 1784)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1790):
    
    # Assigning a Call to a Name (line 1790):
    
    # Call to sort(...): (line 1790)
    # Processing the call arguments (line 1790)
    # Getting the type of 'a' (line 1790)
    a_582846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 20), 'a', False)
    # Processing the call keyword arguments (line 1790)
    kwargs_582847 = {}
    # Getting the type of 'np' (line 1790)
    np_582844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 12), 'np', False)
    # Obtaining the member 'sort' of a type (line 1790)
    sort_582845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 12), np_582844, 'sort')
    # Calling sort(args, kwargs) (line 1790)
    sort_call_result_582848 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 12), sort_582845, *[a_582846], **kwargs_582847)
    
    # Assigning a type to the variable 'a' (line 1790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 8), 'a', sort_call_result_582848)
    
    # Assigning a List to a Name (line 1791):
    
    # Assigning a List to a Name (line 1791):
    
    # Obtaining an instance of the builtin type 'list' (line 1791)
    list_582849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1791, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1791)
    # Adding element type (line 1791)
    
    # Getting the type of 'a' (line 1791)
    a_582850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 15), 'a')
    # Getting the type of 'score' (line 1791)
    score_582851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 20), 'score')
    # Applying the binary operator '==' (line 1791)
    result_eq_582852 = python_operator(stypy.reporting.localization.Localization(__file__, 1791, 15), '==', a_582850, score_582851)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1791, 14), list_582849, result_eq_582852)
    
    # Assigning a type to the variable 'idx' (line 1791)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1791, 8), 'idx', list_582849)
    
    # Assigning a BinOp to a Name (line 1792):
    
    # Assigning a BinOp to a Name (line 1792):
    
    # Call to mean(...): (line 1792)
    # Processing the call arguments (line 1792)
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1792)
    idx_582855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 29), 'idx', False)
    # Getting the type of 'a_len' (line 1792)
    a_len_582856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 23), 'a_len', False)
    # Obtaining the member '__getitem__' of a type (line 1792)
    getitem___582857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 23), a_len_582856, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1792)
    subscript_call_result_582858 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 23), getitem___582857, idx_582855)
    
    # Processing the call keyword arguments (line 1792)
    kwargs_582859 = {}
    # Getting the type of 'np' (line 1792)
    np_582853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 15), 'np', False)
    # Obtaining the member 'mean' of a type (line 1792)
    mean_582854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 15), np_582853, 'mean')
    # Calling mean(args, kwargs) (line 1792)
    mean_call_result_582860 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 15), mean_582854, *[subscript_call_result_582858], **kwargs_582859)
    
    # Getting the type of 'n' (line 1792)
    n_582861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 37), 'n')
    # Applying the binary operator 'div' (line 1792)
    result_div_582862 = python_operator(stypy.reporting.localization.Localization(__file__, 1792, 15), 'div', mean_call_result_582860, n_582861)
    
    float_582863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1792, 42), 'float')
    # Applying the binary operator '*' (line 1792)
    result_mul_582864 = python_operator(stypy.reporting.localization.Localization(__file__, 1792, 14), '*', result_div_582862, float_582863)
    
    # Assigning a type to the variable 'pct' (line 1792)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 8), 'pct', result_mul_582864)
    # Getting the type of 'pct' (line 1793)
    pct_582865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 15), 'pct')
    # Assigning a type to the variable 'stypy_return_type' (line 1793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 8), 'stypy_return_type', pct_582865)
    # SSA branch for the else part of an if statement (line 1783)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'kind' (line 1795)
    kind_582866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 9), 'kind')
    str_582867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, 17), 'str', 'strict')
    # Applying the binary operator '==' (line 1795)
    result_eq_582868 = python_operator(stypy.reporting.localization.Localization(__file__, 1795, 9), '==', kind_582866, str_582867)
    
    # Testing the type of an if condition (line 1795)
    if_condition_582869 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1795, 9), result_eq_582868)
    # Assigning a type to the variable 'if_condition_582869' (line 1795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 9), 'if_condition_582869', if_condition_582869)
    # SSA begins for if statement (line 1795)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sum(...): (line 1796)
    # Processing the call arguments (line 1796)
    
    # Getting the type of 'a' (line 1796)
    a_582872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 22), 'a', False)
    # Getting the type of 'score' (line 1796)
    score_582873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 26), 'score', False)
    # Applying the binary operator '<' (line 1796)
    result_lt_582874 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 22), '<', a_582872, score_582873)
    
    # Processing the call keyword arguments (line 1796)
    kwargs_582875 = {}
    # Getting the type of 'np' (line 1796)
    np_582870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 15), 'np', False)
    # Obtaining the member 'sum' of a type (line 1796)
    sum_582871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 15), np_582870, 'sum')
    # Calling sum(args, kwargs) (line 1796)
    sum_call_result_582876 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 15), sum_582871, *[result_lt_582874], **kwargs_582875)
    
    
    # Call to float(...): (line 1796)
    # Processing the call arguments (line 1796)
    # Getting the type of 'n' (line 1796)
    n_582878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 41), 'n', False)
    # Processing the call keyword arguments (line 1796)
    kwargs_582879 = {}
    # Getting the type of 'float' (line 1796)
    float_582877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 35), 'float', False)
    # Calling float(args, kwargs) (line 1796)
    float_call_result_582880 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 35), float_582877, *[n_582878], **kwargs_582879)
    
    # Applying the binary operator 'div' (line 1796)
    result_div_582881 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 15), 'div', sum_call_result_582876, float_call_result_582880)
    
    int_582882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 46), 'int')
    # Applying the binary operator '*' (line 1796)
    result_mul_582883 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 44), '*', result_div_582881, int_582882)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1796, 8), 'stypy_return_type', result_mul_582883)
    # SSA branch for the else part of an if statement (line 1795)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'kind' (line 1797)
    kind_582884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 9), 'kind')
    str_582885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 17), 'str', 'weak')
    # Applying the binary operator '==' (line 1797)
    result_eq_582886 = python_operator(stypy.reporting.localization.Localization(__file__, 1797, 9), '==', kind_582884, str_582885)
    
    # Testing the type of an if condition (line 1797)
    if_condition_582887 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1797, 9), result_eq_582886)
    # Assigning a type to the variable 'if_condition_582887' (line 1797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 9), 'if_condition_582887', if_condition_582887)
    # SSA begins for if statement (line 1797)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sum(...): (line 1798)
    # Processing the call arguments (line 1798)
    
    # Getting the type of 'a' (line 1798)
    a_582890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 22), 'a', False)
    # Getting the type of 'score' (line 1798)
    score_582891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 27), 'score', False)
    # Applying the binary operator '<=' (line 1798)
    result_le_582892 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 22), '<=', a_582890, score_582891)
    
    # Processing the call keyword arguments (line 1798)
    kwargs_582893 = {}
    # Getting the type of 'np' (line 1798)
    np_582888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 15), 'np', False)
    # Obtaining the member 'sum' of a type (line 1798)
    sum_582889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 15), np_582888, 'sum')
    # Calling sum(args, kwargs) (line 1798)
    sum_call_result_582894 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 15), sum_582889, *[result_le_582892], **kwargs_582893)
    
    
    # Call to float(...): (line 1798)
    # Processing the call arguments (line 1798)
    # Getting the type of 'n' (line 1798)
    n_582896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 42), 'n', False)
    # Processing the call keyword arguments (line 1798)
    kwargs_582897 = {}
    # Getting the type of 'float' (line 1798)
    float_582895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 36), 'float', False)
    # Calling float(args, kwargs) (line 1798)
    float_call_result_582898 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 36), float_582895, *[n_582896], **kwargs_582897)
    
    # Applying the binary operator 'div' (line 1798)
    result_div_582899 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 15), 'div', sum_call_result_582894, float_call_result_582898)
    
    int_582900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 47), 'int')
    # Applying the binary operator '*' (line 1798)
    result_mul_582901 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 45), '*', result_div_582899, int_582900)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 8), 'stypy_return_type', result_mul_582901)
    # SSA branch for the else part of an if statement (line 1797)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'kind' (line 1799)
    kind_582902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 9), 'kind')
    str_582903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 17), 'str', 'mean')
    # Applying the binary operator '==' (line 1799)
    result_eq_582904 = python_operator(stypy.reporting.localization.Localization(__file__, 1799, 9), '==', kind_582902, str_582903)
    
    # Testing the type of an if condition (line 1799)
    if_condition_582905 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1799, 9), result_eq_582904)
    # Assigning a type to the variable 'if_condition_582905' (line 1799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 9), 'if_condition_582905', if_condition_582905)
    # SSA begins for if statement (line 1799)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sum(...): (line 1800)
    # Processing the call arguments (line 1800)
    
    # Getting the type of 'a' (line 1800)
    a_582908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 23), 'a', False)
    # Getting the type of 'score' (line 1800)
    score_582909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 27), 'score', False)
    # Applying the binary operator '<' (line 1800)
    result_lt_582910 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 23), '<', a_582908, score_582909)
    
    # Processing the call keyword arguments (line 1800)
    kwargs_582911 = {}
    # Getting the type of 'np' (line 1800)
    np_582906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 16), 'np', False)
    # Obtaining the member 'sum' of a type (line 1800)
    sum_582907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 16), np_582906, 'sum')
    # Calling sum(args, kwargs) (line 1800)
    sum_call_result_582912 = invoke(stypy.reporting.localization.Localization(__file__, 1800, 16), sum_582907, *[result_lt_582910], **kwargs_582911)
    
    
    # Call to sum(...): (line 1800)
    # Processing the call arguments (line 1800)
    
    # Getting the type of 'a' (line 1800)
    a_582915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 43), 'a', False)
    # Getting the type of 'score' (line 1800)
    score_582916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 48), 'score', False)
    # Applying the binary operator '<=' (line 1800)
    result_le_582917 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 43), '<=', a_582915, score_582916)
    
    # Processing the call keyword arguments (line 1800)
    kwargs_582918 = {}
    # Getting the type of 'np' (line 1800)
    np_582913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 36), 'np', False)
    # Obtaining the member 'sum' of a type (line 1800)
    sum_582914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 36), np_582913, 'sum')
    # Calling sum(args, kwargs) (line 1800)
    sum_call_result_582919 = invoke(stypy.reporting.localization.Localization(__file__, 1800, 36), sum_582914, *[result_le_582917], **kwargs_582918)
    
    # Applying the binary operator '+' (line 1800)
    result_add_582920 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 16), '+', sum_call_result_582912, sum_call_result_582919)
    
    int_582921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 58), 'int')
    # Applying the binary operator '*' (line 1800)
    result_mul_582922 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 15), '*', result_add_582920, int_582921)
    
    
    # Call to float(...): (line 1800)
    # Processing the call arguments (line 1800)
    # Getting the type of 'n' (line 1800)
    n_582924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 69), 'n', False)
    # Processing the call keyword arguments (line 1800)
    kwargs_582925 = {}
    # Getting the type of 'float' (line 1800)
    float_582923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 63), 'float', False)
    # Calling float(args, kwargs) (line 1800)
    float_call_result_582926 = invoke(stypy.reporting.localization.Localization(__file__, 1800, 63), float_582923, *[n_582924], **kwargs_582925)
    
    # Applying the binary operator 'div' (line 1800)
    result_div_582927 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 61), 'div', result_mul_582922, float_call_result_582926)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 8), 'stypy_return_type', result_div_582927)
    # SSA branch for the else part of an if statement (line 1799)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1802)
    # Processing the call arguments (line 1802)
    str_582929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 25), 'str', "kind can only be 'rank', 'strict', 'weak' or 'mean'")
    # Processing the call keyword arguments (line 1802)
    kwargs_582930 = {}
    # Getting the type of 'ValueError' (line 1802)
    ValueError_582928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1802)
    ValueError_call_result_582931 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 14), ValueError_582928, *[str_582929], **kwargs_582930)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1802, 8), ValueError_call_result_582931, 'raise parameter', BaseException)
    # SSA join for if statement (line 1799)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1797)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1795)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1783)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'percentileofscore(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'percentileofscore' in the type store
    # Getting the type of 'stypy_return_type' (line 1709)
    stypy_return_type_582932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_582932)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'percentileofscore'
    return stypy_return_type_582932

# Assigning a type to the variable 'percentileofscore' (line 1709)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 0), 'percentileofscore', percentileofscore)

# Assigning a Call to a Name (line 1805):

# Assigning a Call to a Name (line 1805):

# Call to namedtuple(...): (line 1805)
# Processing the call arguments (line 1805)
str_582934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1805, 29), 'str', 'HistogramResult')

# Obtaining an instance of the builtin type 'tuple' (line 1806)
tuple_582935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 30), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1806)
# Adding element type (line 1806)
str_582936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 30), 'str', 'count')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 30), tuple_582935, str_582936)
# Adding element type (line 1806)
str_582937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 39), 'str', 'lowerlimit')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 30), tuple_582935, str_582937)
# Adding element type (line 1806)
str_582938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 53), 'str', 'binsize')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 30), tuple_582935, str_582938)
# Adding element type (line 1806)
str_582939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 64), 'str', 'extrapoints')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1806, 30), tuple_582935, str_582939)

# Processing the call keyword arguments (line 1805)
kwargs_582940 = {}
# Getting the type of 'namedtuple' (line 1805)
namedtuple_582933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 18), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1805)
namedtuple_call_result_582941 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 18), namedtuple_582933, *[str_582934, tuple_582935], **kwargs_582940)

# Assigning a type to the variable 'HistogramResult' (line 1805)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 0), 'HistogramResult', namedtuple_call_result_582941)

@norecursion
def _histogram(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_582942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 26), 'int')
    # Getting the type of 'None' (line 1809)
    None_582943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 44), 'None')
    # Getting the type of 'None' (line 1809)
    None_582944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 58), 'None')
    # Getting the type of 'False' (line 1809)
    False_582945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 76), 'False')
    defaults = [int_582942, None_582943, None_582944, False_582945]
    # Create a new context for function '_histogram'
    module_type_store = module_type_store.open_function_context('_histogram', 1809, 0, False)
    
    # Passed parameters checking function
    _histogram.stypy_localization = localization
    _histogram.stypy_type_of_self = None
    _histogram.stypy_type_store = module_type_store
    _histogram.stypy_function_name = '_histogram'
    _histogram.stypy_param_names_list = ['a', 'numbins', 'defaultlimits', 'weights', 'printextras']
    _histogram.stypy_varargs_param_name = None
    _histogram.stypy_kwargs_param_name = None
    _histogram.stypy_call_defaults = defaults
    _histogram.stypy_call_varargs = varargs
    _histogram.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_histogram', ['a', 'numbins', 'defaultlimits', 'weights', 'printextras'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_histogram', localization, ['a', 'numbins', 'defaultlimits', 'weights', 'printextras'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_histogram(...)' code ##################

    str_582946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1853, (-1)), 'str', "\n    Separate the range into several bins and return the number of instances\n    in each bin.\n\n    Parameters\n    ----------\n    a : array_like\n        Array of scores which will be put into bins.\n    numbins : int, optional\n        The number of bins to use for the histogram. Default is 10.\n    defaultlimits : tuple (lower, upper), optional\n        The lower and upper values for the range of the histogram.\n        If no value is given, a range slightly larger than the range of the\n        values in a is used. Specifically ``(a.min() - s, a.max() + s)``,\n        where ``s = (1/2)(a.max() - a.min()) / (numbins - 1)``.\n    weights : array_like, optional\n        The weights for each value in `a`. Default is None, which gives each\n        value a weight of 1.0\n    printextras : bool, optional\n        If True, if there are extra points (i.e. the points that fall outside\n        the bin limits) a warning is raised saying how many of those points\n        there are.  Default is False.\n\n    Returns\n    -------\n    count : ndarray\n        Number of points (or sum of weights) in each bin.\n    lowerlimit : float\n        Lowest value of histogram, the lower limit of the first bin.\n    binsize : float\n        The size of the bins (all bins have the same size).\n    extrapoints : int\n        The number of points outside the range of the histogram.\n\n    See Also\n    --------\n    numpy.histogram\n\n    Notes\n    -----\n    This histogram is based on numpy's histogram but has a larger range by\n    default if default limits is not set.\n\n    ")
    
    # Assigning a Call to a Name (line 1854):
    
    # Assigning a Call to a Name (line 1854):
    
    # Call to ravel(...): (line 1854)
    # Processing the call arguments (line 1854)
    # Getting the type of 'a' (line 1854)
    a_582949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 17), 'a', False)
    # Processing the call keyword arguments (line 1854)
    kwargs_582950 = {}
    # Getting the type of 'np' (line 1854)
    np_582947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 8), 'np', False)
    # Obtaining the member 'ravel' of a type (line 1854)
    ravel_582948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 8), np_582947, 'ravel')
    # Calling ravel(args, kwargs) (line 1854)
    ravel_call_result_582951 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 8), ravel_582948, *[a_582949], **kwargs_582950)
    
    # Assigning a type to the variable 'a' (line 1854)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 4), 'a', ravel_call_result_582951)
    
    # Type idiom detected: calculating its left and rigth part (line 1855)
    # Getting the type of 'defaultlimits' (line 1855)
    defaultlimits_582952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 7), 'defaultlimits')
    # Getting the type of 'None' (line 1855)
    None_582953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 24), 'None')
    
    (may_be_582954, more_types_in_union_582955) = may_be_none(defaultlimits_582952, None_582953)

    if may_be_582954:

        if more_types_in_union_582955:
            # Runtime conditional SSA (line 1855)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'a' (line 1856)
        a_582956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 11), 'a')
        # Obtaining the member 'size' of a type (line 1856)
        size_582957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 11), a_582956, 'size')
        int_582958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1856, 21), 'int')
        # Applying the binary operator '==' (line 1856)
        result_eq_582959 = python_operator(stypy.reporting.localization.Localization(__file__, 1856, 11), '==', size_582957, int_582958)
        
        # Testing the type of an if condition (line 1856)
        if_condition_582960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1856, 8), result_eq_582959)
        # Assigning a type to the variable 'if_condition_582960' (line 1856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1856, 8), 'if_condition_582960', if_condition_582960)
        # SSA begins for if statement (line 1856)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Name (line 1858):
        
        # Assigning a Tuple to a Name (line 1858):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1858)
        tuple_582961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1858, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1858)
        # Adding element type (line 1858)
        int_582962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1858, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1858, 29), tuple_582961, int_582962)
        # Adding element type (line 1858)
        int_582963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1858, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1858, 29), tuple_582961, int_582963)
        
        # Assigning a type to the variable 'defaultlimits' (line 1858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1858, 12), 'defaultlimits', tuple_582961)
        # SSA branch for the else part of an if statement (line 1856)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1861):
        
        # Assigning a Call to a Name (line 1861):
        
        # Call to min(...): (line 1861)
        # Processing the call keyword arguments (line 1861)
        kwargs_582966 = {}
        # Getting the type of 'a' (line 1861)
        a_582964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 23), 'a', False)
        # Obtaining the member 'min' of a type (line 1861)
        min_582965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1861, 23), a_582964, 'min')
        # Calling min(args, kwargs) (line 1861)
        min_call_result_582967 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 23), min_582965, *[], **kwargs_582966)
        
        # Assigning a type to the variable 'data_min' (line 1861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 12), 'data_min', min_call_result_582967)
        
        # Assigning a Call to a Name (line 1862):
        
        # Assigning a Call to a Name (line 1862):
        
        # Call to max(...): (line 1862)
        # Processing the call keyword arguments (line 1862)
        kwargs_582970 = {}
        # Getting the type of 'a' (line 1862)
        a_582968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 23), 'a', False)
        # Obtaining the member 'max' of a type (line 1862)
        max_582969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 23), a_582968, 'max')
        # Calling max(args, kwargs) (line 1862)
        max_call_result_582971 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 23), max_582969, *[], **kwargs_582970)
        
        # Assigning a type to the variable 'data_max' (line 1862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 12), 'data_max', max_call_result_582971)
        
        # Assigning a BinOp to a Name (line 1864):
        
        # Assigning a BinOp to a Name (line 1864):
        # Getting the type of 'data_max' (line 1864)
        data_max_582972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 17), 'data_max')
        # Getting the type of 'data_min' (line 1864)
        data_min_582973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 28), 'data_min')
        # Applying the binary operator '-' (line 1864)
        result_sub_582974 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 17), '-', data_max_582972, data_min_582973)
        
        float_582975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1864, 41), 'float')
        # Getting the type of 'numbins' (line 1864)
        numbins_582976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 47), 'numbins')
        float_582977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1864, 57), 'float')
        # Applying the binary operator '-' (line 1864)
        result_sub_582978 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 47), '-', numbins_582976, float_582977)
        
        # Applying the binary operator '*' (line 1864)
        result_mul_582979 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 41), '*', float_582975, result_sub_582978)
        
        # Applying the binary operator 'div' (line 1864)
        result_div_582980 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 16), 'div', result_sub_582974, result_mul_582979)
        
        # Assigning a type to the variable 's' (line 1864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 12), 's', result_div_582980)
        
        # Assigning a Tuple to a Name (line 1865):
        
        # Assigning a Tuple to a Name (line 1865):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1865)
        tuple_582981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1865, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1865)
        # Adding element type (line 1865)
        # Getting the type of 'data_min' (line 1865)
        data_min_582982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 29), 'data_min')
        # Getting the type of 's' (line 1865)
        s_582983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 40), 's')
        # Applying the binary operator '-' (line 1865)
        result_sub_582984 = python_operator(stypy.reporting.localization.Localization(__file__, 1865, 29), '-', data_min_582982, s_582983)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1865, 29), tuple_582981, result_sub_582984)
        # Adding element type (line 1865)
        # Getting the type of 'data_max' (line 1865)
        data_max_582985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 43), 'data_max')
        # Getting the type of 's' (line 1865)
        s_582986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 54), 's')
        # Applying the binary operator '+' (line 1865)
        result_add_582987 = python_operator(stypy.reporting.localization.Localization(__file__, 1865, 43), '+', data_max_582985, s_582986)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1865, 29), tuple_582981, result_add_582987)
        
        # Assigning a type to the variable 'defaultlimits' (line 1865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 12), 'defaultlimits', tuple_582981)
        # SSA join for if statement (line 1856)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_582955:
            # SSA join for if statement (line 1855)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 1868):
    
    # Assigning a Subscript to a Name (line 1868):
    
    # Obtaining the type of the subscript
    int_582988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 4), 'int')
    
    # Call to histogram(...): (line 1868)
    # Processing the call arguments (line 1868)
    # Getting the type of 'a' (line 1868)
    a_582991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 35), 'a', False)
    # Processing the call keyword arguments (line 1868)
    # Getting the type of 'numbins' (line 1868)
    numbins_582992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 43), 'numbins', False)
    keyword_582993 = numbins_582992
    # Getting the type of 'defaultlimits' (line 1868)
    defaultlimits_582994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 58), 'defaultlimits', False)
    keyword_582995 = defaultlimits_582994
    # Getting the type of 'weights' (line 1869)
    weights_582996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 43), 'weights', False)
    keyword_582997 = weights_582996
    kwargs_582998 = {'range': keyword_582995, 'weights': keyword_582997, 'bins': keyword_582993}
    # Getting the type of 'np' (line 1868)
    np_582989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 22), 'np', False)
    # Obtaining the member 'histogram' of a type (line 1868)
    histogram_582990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 22), np_582989, 'histogram')
    # Calling histogram(args, kwargs) (line 1868)
    histogram_call_result_582999 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 22), histogram_582990, *[a_582991], **kwargs_582998)
    
    # Obtaining the member '__getitem__' of a type (line 1868)
    getitem___583000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 4), histogram_call_result_582999, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
    subscript_call_result_583001 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 4), getitem___583000, int_582988)
    
    # Assigning a type to the variable 'tuple_var_assignment_579899' (line 1868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 4), 'tuple_var_assignment_579899', subscript_call_result_583001)
    
    # Assigning a Subscript to a Name (line 1868):
    
    # Obtaining the type of the subscript
    int_583002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 4), 'int')
    
    # Call to histogram(...): (line 1868)
    # Processing the call arguments (line 1868)
    # Getting the type of 'a' (line 1868)
    a_583005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 35), 'a', False)
    # Processing the call keyword arguments (line 1868)
    # Getting the type of 'numbins' (line 1868)
    numbins_583006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 43), 'numbins', False)
    keyword_583007 = numbins_583006
    # Getting the type of 'defaultlimits' (line 1868)
    defaultlimits_583008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 58), 'defaultlimits', False)
    keyword_583009 = defaultlimits_583008
    # Getting the type of 'weights' (line 1869)
    weights_583010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 43), 'weights', False)
    keyword_583011 = weights_583010
    kwargs_583012 = {'range': keyword_583009, 'weights': keyword_583011, 'bins': keyword_583007}
    # Getting the type of 'np' (line 1868)
    np_583003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 22), 'np', False)
    # Obtaining the member 'histogram' of a type (line 1868)
    histogram_583004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 22), np_583003, 'histogram')
    # Calling histogram(args, kwargs) (line 1868)
    histogram_call_result_583013 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 22), histogram_583004, *[a_583005], **kwargs_583012)
    
    # Obtaining the member '__getitem__' of a type (line 1868)
    getitem___583014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 4), histogram_call_result_583013, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
    subscript_call_result_583015 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 4), getitem___583014, int_583002)
    
    # Assigning a type to the variable 'tuple_var_assignment_579900' (line 1868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 4), 'tuple_var_assignment_579900', subscript_call_result_583015)
    
    # Assigning a Name to a Name (line 1868):
    # Getting the type of 'tuple_var_assignment_579899' (line 1868)
    tuple_var_assignment_579899_583016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 4), 'tuple_var_assignment_579899')
    # Assigning a type to the variable 'hist' (line 1868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 4), 'hist', tuple_var_assignment_579899_583016)
    
    # Assigning a Name to a Name (line 1868):
    # Getting the type of 'tuple_var_assignment_579900' (line 1868)
    tuple_var_assignment_579900_583017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 4), 'tuple_var_assignment_579900')
    # Assigning a type to the variable 'bin_edges' (line 1868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 10), 'bin_edges', tuple_var_assignment_579900_583017)
    
    # Assigning a Call to a Name (line 1871):
    
    # Assigning a Call to a Name (line 1871):
    
    # Call to array(...): (line 1871)
    # Processing the call arguments (line 1871)
    # Getting the type of 'hist' (line 1871)
    hist_583020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 20), 'hist', False)
    # Processing the call keyword arguments (line 1871)
    # Getting the type of 'float' (line 1871)
    float_583021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 32), 'float', False)
    keyword_583022 = float_583021
    kwargs_583023 = {'dtype': keyword_583022}
    # Getting the type of 'np' (line 1871)
    np_583018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 11), 'np', False)
    # Obtaining the member 'array' of a type (line 1871)
    array_583019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 11), np_583018, 'array')
    # Calling array(args, kwargs) (line 1871)
    array_call_result_583024 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 11), array_583019, *[hist_583020], **kwargs_583023)
    
    # Assigning a type to the variable 'hist' (line 1871)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 4), 'hist', array_call_result_583024)
    
    # Assigning a BinOp to a Name (line 1874):
    
    # Assigning a BinOp to a Name (line 1874):
    
    # Obtaining the type of the subscript
    int_583025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1874, 24), 'int')
    # Getting the type of 'bin_edges' (line 1874)
    bin_edges_583026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 14), 'bin_edges')
    # Obtaining the member '__getitem__' of a type (line 1874)
    getitem___583027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1874, 14), bin_edges_583026, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1874)
    subscript_call_result_583028 = invoke(stypy.reporting.localization.Localization(__file__, 1874, 14), getitem___583027, int_583025)
    
    
    # Obtaining the type of the subscript
    int_583029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1874, 39), 'int')
    # Getting the type of 'bin_edges' (line 1874)
    bin_edges_583030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 29), 'bin_edges')
    # Obtaining the member '__getitem__' of a type (line 1874)
    getitem___583031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1874, 29), bin_edges_583030, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1874)
    subscript_call_result_583032 = invoke(stypy.reporting.localization.Localization(__file__, 1874, 29), getitem___583031, int_583029)
    
    # Applying the binary operator '-' (line 1874)
    result_sub_583033 = python_operator(stypy.reporting.localization.Localization(__file__, 1874, 14), '-', subscript_call_result_583028, subscript_call_result_583032)
    
    # Assigning a type to the variable 'binsize' (line 1874)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1874, 4), 'binsize', result_sub_583033)
    
    # Assigning a Call to a Name (line 1876):
    
    # Assigning a Call to a Name (line 1876):
    
    # Call to len(...): (line 1876)
    # Processing the call arguments (line 1876)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'a' (line 1876)
    a_583049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 34), 'a', False)
    comprehension_583050 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1876, 23), a_583049)
    # Assigning a type to the variable 'v' (line 1876)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 23), 'v', comprehension_583050)
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_583036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 40), 'int')
    # Getting the type of 'defaultlimits' (line 1877)
    defaultlimits_583037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 26), 'defaultlimits', False)
    # Obtaining the member '__getitem__' of a type (line 1877)
    getitem___583038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 26), defaultlimits_583037, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1877)
    subscript_call_result_583039 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 26), getitem___583038, int_583036)
    
    # Getting the type of 'v' (line 1877)
    v_583040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 45), 'v', False)
    # Applying the binary operator '>' (line 1877)
    result_gt_583041 = python_operator(stypy.reporting.localization.Localization(__file__, 1877, 26), '>', subscript_call_result_583039, v_583040)
    
    
    # Getting the type of 'v' (line 1877)
    v_583042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 50), 'v', False)
    
    # Obtaining the type of the subscript
    int_583043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 68), 'int')
    # Getting the type of 'defaultlimits' (line 1877)
    defaultlimits_583044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 54), 'defaultlimits', False)
    # Obtaining the member '__getitem__' of a type (line 1877)
    getitem___583045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 54), defaultlimits_583044, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1877)
    subscript_call_result_583046 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 54), getitem___583045, int_583043)
    
    # Applying the binary operator '>' (line 1877)
    result_gt_583047 = python_operator(stypy.reporting.localization.Localization(__file__, 1877, 50), '>', v_583042, subscript_call_result_583046)
    
    # Applying the binary operator 'or' (line 1877)
    result_or_keyword_583048 = python_operator(stypy.reporting.localization.Localization(__file__, 1877, 26), 'or', result_gt_583041, result_gt_583047)
    
    # Getting the type of 'v' (line 1876)
    v_583035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 23), 'v', False)
    list_583051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 23), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1876, 23), list_583051, v_583035)
    # Processing the call keyword arguments (line 1876)
    kwargs_583052 = {}
    # Getting the type of 'len' (line 1876)
    len_583034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 18), 'len', False)
    # Calling len(args, kwargs) (line 1876)
    len_call_result_583053 = invoke(stypy.reporting.localization.Localization(__file__, 1876, 18), len_583034, *[list_583051], **kwargs_583052)
    
    # Assigning a type to the variable 'extrapoints' (line 1876)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 4), 'extrapoints', len_call_result_583053)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'extrapoints' (line 1878)
    extrapoints_583054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 7), 'extrapoints')
    int_583055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 21), 'int')
    # Applying the binary operator '>' (line 1878)
    result_gt_583056 = python_operator(stypy.reporting.localization.Localization(__file__, 1878, 7), '>', extrapoints_583054, int_583055)
    
    # Getting the type of 'printextras' (line 1878)
    printextras_583057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 27), 'printextras')
    # Applying the binary operator 'and' (line 1878)
    result_and_keyword_583058 = python_operator(stypy.reporting.localization.Localization(__file__, 1878, 7), 'and', result_gt_583056, printextras_583057)
    
    # Testing the type of an if condition (line 1878)
    if_condition_583059 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1878, 4), result_and_keyword_583058)
    # Assigning a type to the variable 'if_condition_583059' (line 1878)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 4), 'if_condition_583059', if_condition_583059)
    # SSA begins for if statement (line 1878)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1879)
    # Processing the call arguments (line 1879)
    str_583062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1879, 22), 'str', 'Points outside given histogram range = %s')
    # Getting the type of 'extrapoints' (line 1880)
    extrapoints_583063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 24), 'extrapoints', False)
    # Applying the binary operator '%' (line 1879)
    result_mod_583064 = python_operator(stypy.reporting.localization.Localization(__file__, 1879, 22), '%', str_583062, extrapoints_583063)
    
    # Processing the call keyword arguments (line 1879)
    kwargs_583065 = {}
    # Getting the type of 'warnings' (line 1879)
    warnings_583060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1879)
    warn_583061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 8), warnings_583060, 'warn')
    # Calling warn(args, kwargs) (line 1879)
    warn_call_result_583066 = invoke(stypy.reporting.localization.Localization(__file__, 1879, 8), warn_583061, *[result_mod_583064], **kwargs_583065)
    
    # SSA join for if statement (line 1878)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to HistogramResult(...): (line 1882)
    # Processing the call arguments (line 1882)
    # Getting the type of 'hist' (line 1882)
    hist_583068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 27), 'hist', False)
    
    # Obtaining the type of the subscript
    int_583069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1882, 47), 'int')
    # Getting the type of 'defaultlimits' (line 1882)
    defaultlimits_583070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 33), 'defaultlimits', False)
    # Obtaining the member '__getitem__' of a type (line 1882)
    getitem___583071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1882, 33), defaultlimits_583070, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1882)
    subscript_call_result_583072 = invoke(stypy.reporting.localization.Localization(__file__, 1882, 33), getitem___583071, int_583069)
    
    # Getting the type of 'binsize' (line 1882)
    binsize_583073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 51), 'binsize', False)
    # Getting the type of 'extrapoints' (line 1882)
    extrapoints_583074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 60), 'extrapoints', False)
    # Processing the call keyword arguments (line 1882)
    kwargs_583075 = {}
    # Getting the type of 'HistogramResult' (line 1882)
    HistogramResult_583067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 11), 'HistogramResult', False)
    # Calling HistogramResult(args, kwargs) (line 1882)
    HistogramResult_call_result_583076 = invoke(stypy.reporting.localization.Localization(__file__, 1882, 11), HistogramResult_583067, *[hist_583068, subscript_call_result_583072, binsize_583073, extrapoints_583074], **kwargs_583075)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1882, 4), 'stypy_return_type', HistogramResult_call_result_583076)
    
    # ################# End of '_histogram(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_histogram' in the type store
    # Getting the type of 'stypy_return_type' (line 1809)
    stypy_return_type_583077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_583077)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_histogram'
    return stypy_return_type_583077

# Assigning a type to the variable '_histogram' (line 1809)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 0), '_histogram', _histogram)

# Assigning a Call to a Name (line 1885):

# Assigning a Call to a Name (line 1885):

# Call to namedtuple(...): (line 1885)
# Processing the call arguments (line 1885)
str_583079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, 27), 'str', 'CumfreqResult')

# Obtaining an instance of the builtin type 'tuple' (line 1886)
tuple_583080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 28), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1886)
# Adding element type (line 1886)
str_583081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 28), 'str', 'cumcount')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1886, 28), tuple_583080, str_583081)
# Adding element type (line 1886)
str_583082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 40), 'str', 'lowerlimit')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1886, 28), tuple_583080, str_583082)
# Adding element type (line 1886)
str_583083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 54), 'str', 'binsize')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1886, 28), tuple_583080, str_583083)
# Adding element type (line 1886)
str_583084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 28), 'str', 'extrapoints')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1886, 28), tuple_583080, str_583084)

# Processing the call keyword arguments (line 1885)
kwargs_583085 = {}
# Getting the type of 'namedtuple' (line 1885)
namedtuple_583078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 16), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1885)
namedtuple_call_result_583086 = invoke(stypy.reporting.localization.Localization(__file__, 1885, 16), namedtuple_583078, *[str_583079, tuple_583080], **kwargs_583085)

# Assigning a type to the variable 'CumfreqResult' (line 1885)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1885, 0), 'CumfreqResult', namedtuple_call_result_583086)

@norecursion
def cumfreq(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_583087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1890, 23), 'int')
    # Getting the type of 'None' (line 1890)
    None_583088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 45), 'None')
    # Getting the type of 'None' (line 1890)
    None_583089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 59), 'None')
    defaults = [int_583087, None_583088, None_583089]
    # Create a new context for function 'cumfreq'
    module_type_store = module_type_store.open_function_context('cumfreq', 1890, 0, False)
    
    # Passed parameters checking function
    cumfreq.stypy_localization = localization
    cumfreq.stypy_type_of_self = None
    cumfreq.stypy_type_store = module_type_store
    cumfreq.stypy_function_name = 'cumfreq'
    cumfreq.stypy_param_names_list = ['a', 'numbins', 'defaultreallimits', 'weights']
    cumfreq.stypy_varargs_param_name = None
    cumfreq.stypy_kwargs_param_name = None
    cumfreq.stypy_call_defaults = defaults
    cumfreq.stypy_call_varargs = varargs
    cumfreq.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cumfreq', ['a', 'numbins', 'defaultreallimits', 'weights'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cumfreq', localization, ['a', 'numbins', 'defaultreallimits', 'weights'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cumfreq(...)' code ##################

    str_583090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1961, (-1)), 'str', "\n    Return a cumulative frequency histogram, using the histogram function.\n\n    A cumulative histogram is a mapping that counts the cumulative number of\n    observations in all of the bins up to the specified bin.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    numbins : int, optional\n        The number of bins to use for the histogram. Default is 10.\n    defaultreallimits : tuple (lower, upper), optional\n        The lower and upper values for the range of the histogram.\n        If no value is given, a range slightly larger than the range of the\n        values in `a` is used. Specifically ``(a.min() - s, a.max() + s)``,\n        where ``s = (1/2)(a.max() - a.min()) / (numbins - 1)``.\n    weights : array_like, optional\n        The weights for each value in `a`. Default is None, which gives each\n        value a weight of 1.0\n\n    Returns\n    -------\n    cumcount : ndarray\n        Binned values of cumulative frequency.\n    lowerlimit : float\n        Lower real limit\n    binsize : float\n        Width of each bin.\n    extrapoints : int\n        Extra points.\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy import stats\n    >>> x = [1, 4, 2, 1, 3, 1]\n    >>> res = stats.cumfreq(x, numbins=4, defaultreallimits=(1.5, 5))\n    >>> res.cumcount\n    array([ 1.,  2.,  3.,  3.])\n    >>> res.extrapoints\n    3\n\n    Create a normal distribution with 1000 random values\n\n    >>> rng = np.random.RandomState(seed=12345)\n    >>> samples = stats.norm.rvs(size=1000, random_state=rng)\n\n    Calculate cumulative frequencies\n\n    >>> res = stats.cumfreq(samples, numbins=25)\n\n    Calculate space of values for x\n\n    >>> x = res.lowerlimit + np.linspace(0, res.binsize*res.cumcount.size,\n    ...                                  res.cumcount.size)\n\n    Plot histogram and cumulative histogram\n\n    >>> fig = plt.figure(figsize=(10, 4))\n    >>> ax1 = fig.add_subplot(1, 2, 1)\n    >>> ax2 = fig.add_subplot(1, 2, 2)\n    >>> ax1.hist(samples, bins=25)\n    >>> ax1.set_title('Histogram')\n    >>> ax2.bar(x, res.cumcount, width=res.binsize)\n    >>> ax2.set_title('Cumulative histogram')\n    >>> ax2.set_xlim([x.min(), x.max()])\n\n    >>> plt.show()\n\n    ")
    
    # Assigning a Call to a Tuple (line 1962):
    
    # Assigning a Subscript to a Name (line 1962):
    
    # Obtaining the type of the subscript
    int_583091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1962, 4), 'int')
    
    # Call to _histogram(...): (line 1962)
    # Processing the call arguments (line 1962)
    # Getting the type of 'a' (line 1962)
    a_583093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 28), 'a', False)
    # Getting the type of 'numbins' (line 1962)
    numbins_583094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 31), 'numbins', False)
    # Getting the type of 'defaultreallimits' (line 1962)
    defaultreallimits_583095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 40), 'defaultreallimits', False)
    # Processing the call keyword arguments (line 1962)
    # Getting the type of 'weights' (line 1962)
    weights_583096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 67), 'weights', False)
    keyword_583097 = weights_583096
    kwargs_583098 = {'weights': keyword_583097}
    # Getting the type of '_histogram' (line 1962)
    _histogram_583092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 17), '_histogram', False)
    # Calling _histogram(args, kwargs) (line 1962)
    _histogram_call_result_583099 = invoke(stypy.reporting.localization.Localization(__file__, 1962, 17), _histogram_583092, *[a_583093, numbins_583094, defaultreallimits_583095], **kwargs_583098)
    
    # Obtaining the member '__getitem__' of a type (line 1962)
    getitem___583100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1962, 4), _histogram_call_result_583099, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1962)
    subscript_call_result_583101 = invoke(stypy.reporting.localization.Localization(__file__, 1962, 4), getitem___583100, int_583091)
    
    # Assigning a type to the variable 'tuple_var_assignment_579901' (line 1962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 4), 'tuple_var_assignment_579901', subscript_call_result_583101)
    
    # Assigning a Subscript to a Name (line 1962):
    
    # Obtaining the type of the subscript
    int_583102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1962, 4), 'int')
    
    # Call to _histogram(...): (line 1962)
    # Processing the call arguments (line 1962)
    # Getting the type of 'a' (line 1962)
    a_583104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 28), 'a', False)
    # Getting the type of 'numbins' (line 1962)
    numbins_583105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 31), 'numbins', False)
    # Getting the type of 'defaultreallimits' (line 1962)
    defaultreallimits_583106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 40), 'defaultreallimits', False)
    # Processing the call keyword arguments (line 1962)
    # Getting the type of 'weights' (line 1962)
    weights_583107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 67), 'weights', False)
    keyword_583108 = weights_583107
    kwargs_583109 = {'weights': keyword_583108}
    # Getting the type of '_histogram' (line 1962)
    _histogram_583103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 17), '_histogram', False)
    # Calling _histogram(args, kwargs) (line 1962)
    _histogram_call_result_583110 = invoke(stypy.reporting.localization.Localization(__file__, 1962, 17), _histogram_583103, *[a_583104, numbins_583105, defaultreallimits_583106], **kwargs_583109)
    
    # Obtaining the member '__getitem__' of a type (line 1962)
    getitem___583111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1962, 4), _histogram_call_result_583110, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1962)
    subscript_call_result_583112 = invoke(stypy.reporting.localization.Localization(__file__, 1962, 4), getitem___583111, int_583102)
    
    # Assigning a type to the variable 'tuple_var_assignment_579902' (line 1962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 4), 'tuple_var_assignment_579902', subscript_call_result_583112)
    
    # Assigning a Subscript to a Name (line 1962):
    
    # Obtaining the type of the subscript
    int_583113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1962, 4), 'int')
    
    # Call to _histogram(...): (line 1962)
    # Processing the call arguments (line 1962)
    # Getting the type of 'a' (line 1962)
    a_583115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 28), 'a', False)
    # Getting the type of 'numbins' (line 1962)
    numbins_583116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 31), 'numbins', False)
    # Getting the type of 'defaultreallimits' (line 1962)
    defaultreallimits_583117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 40), 'defaultreallimits', False)
    # Processing the call keyword arguments (line 1962)
    # Getting the type of 'weights' (line 1962)
    weights_583118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 67), 'weights', False)
    keyword_583119 = weights_583118
    kwargs_583120 = {'weights': keyword_583119}
    # Getting the type of '_histogram' (line 1962)
    _histogram_583114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 17), '_histogram', False)
    # Calling _histogram(args, kwargs) (line 1962)
    _histogram_call_result_583121 = invoke(stypy.reporting.localization.Localization(__file__, 1962, 17), _histogram_583114, *[a_583115, numbins_583116, defaultreallimits_583117], **kwargs_583120)
    
    # Obtaining the member '__getitem__' of a type (line 1962)
    getitem___583122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1962, 4), _histogram_call_result_583121, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1962)
    subscript_call_result_583123 = invoke(stypy.reporting.localization.Localization(__file__, 1962, 4), getitem___583122, int_583113)
    
    # Assigning a type to the variable 'tuple_var_assignment_579903' (line 1962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 4), 'tuple_var_assignment_579903', subscript_call_result_583123)
    
    # Assigning a Subscript to a Name (line 1962):
    
    # Obtaining the type of the subscript
    int_583124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1962, 4), 'int')
    
    # Call to _histogram(...): (line 1962)
    # Processing the call arguments (line 1962)
    # Getting the type of 'a' (line 1962)
    a_583126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 28), 'a', False)
    # Getting the type of 'numbins' (line 1962)
    numbins_583127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 31), 'numbins', False)
    # Getting the type of 'defaultreallimits' (line 1962)
    defaultreallimits_583128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 40), 'defaultreallimits', False)
    # Processing the call keyword arguments (line 1962)
    # Getting the type of 'weights' (line 1962)
    weights_583129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 67), 'weights', False)
    keyword_583130 = weights_583129
    kwargs_583131 = {'weights': keyword_583130}
    # Getting the type of '_histogram' (line 1962)
    _histogram_583125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 17), '_histogram', False)
    # Calling _histogram(args, kwargs) (line 1962)
    _histogram_call_result_583132 = invoke(stypy.reporting.localization.Localization(__file__, 1962, 17), _histogram_583125, *[a_583126, numbins_583127, defaultreallimits_583128], **kwargs_583131)
    
    # Obtaining the member '__getitem__' of a type (line 1962)
    getitem___583133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1962, 4), _histogram_call_result_583132, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1962)
    subscript_call_result_583134 = invoke(stypy.reporting.localization.Localization(__file__, 1962, 4), getitem___583133, int_583124)
    
    # Assigning a type to the variable 'tuple_var_assignment_579904' (line 1962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 4), 'tuple_var_assignment_579904', subscript_call_result_583134)
    
    # Assigning a Name to a Name (line 1962):
    # Getting the type of 'tuple_var_assignment_579901' (line 1962)
    tuple_var_assignment_579901_583135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 4), 'tuple_var_assignment_579901')
    # Assigning a type to the variable 'h' (line 1962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 4), 'h', tuple_var_assignment_579901_583135)
    
    # Assigning a Name to a Name (line 1962):
    # Getting the type of 'tuple_var_assignment_579902' (line 1962)
    tuple_var_assignment_579902_583136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 4), 'tuple_var_assignment_579902')
    # Assigning a type to the variable 'l' (line 1962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 7), 'l', tuple_var_assignment_579902_583136)
    
    # Assigning a Name to a Name (line 1962):
    # Getting the type of 'tuple_var_assignment_579903' (line 1962)
    tuple_var_assignment_579903_583137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 4), 'tuple_var_assignment_579903')
    # Assigning a type to the variable 'b' (line 1962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 10), 'b', tuple_var_assignment_579903_583137)
    
    # Assigning a Name to a Name (line 1962):
    # Getting the type of 'tuple_var_assignment_579904' (line 1962)
    tuple_var_assignment_579904_583138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 4), 'tuple_var_assignment_579904')
    # Assigning a type to the variable 'e' (line 1962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 13), 'e', tuple_var_assignment_579904_583138)
    
    # Assigning a Call to a Name (line 1963):
    
    # Assigning a Call to a Name (line 1963):
    
    # Call to cumsum(...): (line 1963)
    # Processing the call arguments (line 1963)
    # Getting the type of 'h' (line 1963)
    h_583141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 24), 'h', False)
    int_583142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1963, 28), 'int')
    # Applying the binary operator '*' (line 1963)
    result_mul_583143 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 24), '*', h_583141, int_583142)
    
    # Processing the call keyword arguments (line 1963)
    int_583144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1963, 36), 'int')
    keyword_583145 = int_583144
    kwargs_583146 = {'axis': keyword_583145}
    # Getting the type of 'np' (line 1963)
    np_583139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 14), 'np', False)
    # Obtaining the member 'cumsum' of a type (line 1963)
    cumsum_583140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 14), np_583139, 'cumsum')
    # Calling cumsum(args, kwargs) (line 1963)
    cumsum_call_result_583147 = invoke(stypy.reporting.localization.Localization(__file__, 1963, 14), cumsum_583140, *[result_mul_583143], **kwargs_583146)
    
    # Assigning a type to the variable 'cumhist' (line 1963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 4), 'cumhist', cumsum_call_result_583147)
    
    # Call to CumfreqResult(...): (line 1964)
    # Processing the call arguments (line 1964)
    # Getting the type of 'cumhist' (line 1964)
    cumhist_583149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 25), 'cumhist', False)
    # Getting the type of 'l' (line 1964)
    l_583150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 34), 'l', False)
    # Getting the type of 'b' (line 1964)
    b_583151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 37), 'b', False)
    # Getting the type of 'e' (line 1964)
    e_583152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 40), 'e', False)
    # Processing the call keyword arguments (line 1964)
    kwargs_583153 = {}
    # Getting the type of 'CumfreqResult' (line 1964)
    CumfreqResult_583148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 11), 'CumfreqResult', False)
    # Calling CumfreqResult(args, kwargs) (line 1964)
    CumfreqResult_call_result_583154 = invoke(stypy.reporting.localization.Localization(__file__, 1964, 11), CumfreqResult_583148, *[cumhist_583149, l_583150, b_583151, e_583152], **kwargs_583153)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1964)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1964, 4), 'stypy_return_type', CumfreqResult_call_result_583154)
    
    # ################# End of 'cumfreq(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cumfreq' in the type store
    # Getting the type of 'stypy_return_type' (line 1890)
    stypy_return_type_583155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_583155)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cumfreq'
    return stypy_return_type_583155

# Assigning a type to the variable 'cumfreq' (line 1890)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1890, 0), 'cumfreq', cumfreq)

# Assigning a Call to a Name (line 1967):

# Assigning a Call to a Name (line 1967):

# Call to namedtuple(...): (line 1967)
# Processing the call arguments (line 1967)
str_583157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1967, 27), 'str', 'RelfreqResult')

# Obtaining an instance of the builtin type 'tuple' (line 1968)
tuple_583158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1968, 28), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1968)
# Adding element type (line 1968)
str_583159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1968, 28), 'str', 'frequency')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1968, 28), tuple_583158, str_583159)
# Adding element type (line 1968)
str_583160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1968, 41), 'str', 'lowerlimit')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1968, 28), tuple_583158, str_583160)
# Adding element type (line 1968)
str_583161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1968, 55), 'str', 'binsize')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1968, 28), tuple_583158, str_583161)
# Adding element type (line 1968)
str_583162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1969, 28), 'str', 'extrapoints')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1968, 28), tuple_583158, str_583162)

# Processing the call keyword arguments (line 1967)
kwargs_583163 = {}
# Getting the type of 'namedtuple' (line 1967)
namedtuple_583156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 16), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1967)
namedtuple_call_result_583164 = invoke(stypy.reporting.localization.Localization(__file__, 1967, 16), namedtuple_583156, *[str_583157, tuple_583158], **kwargs_583163)

# Assigning a type to the variable 'RelfreqResult' (line 1967)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1967, 0), 'RelfreqResult', namedtuple_call_result_583164)

@norecursion
def relfreq(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_583165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 23), 'int')
    # Getting the type of 'None' (line 1972)
    None_583166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 45), 'None')
    # Getting the type of 'None' (line 1972)
    None_583167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 59), 'None')
    defaults = [int_583165, None_583166, None_583167]
    # Create a new context for function 'relfreq'
    module_type_store = module_type_store.open_function_context('relfreq', 1972, 0, False)
    
    # Passed parameters checking function
    relfreq.stypy_localization = localization
    relfreq.stypy_type_of_self = None
    relfreq.stypy_type_store = module_type_store
    relfreq.stypy_function_name = 'relfreq'
    relfreq.stypy_param_names_list = ['a', 'numbins', 'defaultreallimits', 'weights']
    relfreq.stypy_varargs_param_name = None
    relfreq.stypy_kwargs_param_name = None
    relfreq.stypy_call_defaults = defaults
    relfreq.stypy_call_varargs = varargs
    relfreq.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'relfreq', ['a', 'numbins', 'defaultreallimits', 'weights'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'relfreq', localization, ['a', 'numbins', 'defaultreallimits', 'weights'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'relfreq(...)' code ##################

    str_583168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2040, (-1)), 'str', "\n    Return a relative frequency histogram, using the histogram function.\n\n    A relative frequency  histogram is a mapping of the number of\n    observations in each of the bins relative to the total of observations.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    numbins : int, optional\n        The number of bins to use for the histogram. Default is 10.\n    defaultreallimits : tuple (lower, upper), optional\n        The lower and upper values for the range of the histogram.\n        If no value is given, a range slightly larger than the range of the\n        values in a is used. Specifically ``(a.min() - s, a.max() + s)``,\n        where ``s = (1/2)(a.max() - a.min()) / (numbins - 1)``.\n    weights : array_like, optional\n        The weights for each value in `a`. Default is None, which gives each\n        value a weight of 1.0\n\n    Returns\n    -------\n    frequency : ndarray\n        Binned values of relative frequency.\n    lowerlimit : float\n        Lower real limit\n    binsize : float\n        Width of each bin.\n    extrapoints : int\n        Extra points.\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy import stats\n    >>> a = np.array([2, 4, 1, 2, 3, 2])\n    >>> res = stats.relfreq(a, numbins=4)\n    >>> res.frequency\n    array([ 0.16666667, 0.5       , 0.16666667,  0.16666667])\n    >>> np.sum(res.frequency)  # relative frequencies should add up to 1\n    1.0\n\n    Create a normal distribution with 1000 random values\n\n    >>> rng = np.random.RandomState(seed=12345)\n    >>> samples = stats.norm.rvs(size=1000, random_state=rng)\n\n    Calculate relative frequencies\n\n    >>> res = stats.relfreq(samples, numbins=25)\n\n    Calculate space of values for x\n\n    >>> x = res.lowerlimit + np.linspace(0, res.binsize*res.frequency.size,\n    ...                                  res.frequency.size)\n\n    Plot relative frequency histogram\n\n    >>> fig = plt.figure(figsize=(5, 4))\n    >>> ax = fig.add_subplot(1, 1, 1)\n    >>> ax.bar(x, res.frequency, width=res.binsize)\n    >>> ax.set_title('Relative frequency histogram')\n    >>> ax.set_xlim([x.min(), x.max()])\n\n    >>> plt.show()\n\n    ")
    
    # Assigning a Call to a Name (line 2041):
    
    # Assigning a Call to a Name (line 2041):
    
    # Call to asanyarray(...): (line 2041)
    # Processing the call arguments (line 2041)
    # Getting the type of 'a' (line 2041)
    a_583171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 22), 'a', False)
    # Processing the call keyword arguments (line 2041)
    kwargs_583172 = {}
    # Getting the type of 'np' (line 2041)
    np_583169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 2041)
    asanyarray_583170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2041, 8), np_583169, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 2041)
    asanyarray_call_result_583173 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 8), asanyarray_583170, *[a_583171], **kwargs_583172)
    
    # Assigning a type to the variable 'a' (line 2041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 4), 'a', asanyarray_call_result_583173)
    
    # Assigning a Call to a Tuple (line 2042):
    
    # Assigning a Subscript to a Name (line 2042):
    
    # Obtaining the type of the subscript
    int_583174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 4), 'int')
    
    # Call to _histogram(...): (line 2042)
    # Processing the call arguments (line 2042)
    # Getting the type of 'a' (line 2042)
    a_583176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 28), 'a', False)
    # Getting the type of 'numbins' (line 2042)
    numbins_583177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 31), 'numbins', False)
    # Getting the type of 'defaultreallimits' (line 2042)
    defaultreallimits_583178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 40), 'defaultreallimits', False)
    # Processing the call keyword arguments (line 2042)
    # Getting the type of 'weights' (line 2042)
    weights_583179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 67), 'weights', False)
    keyword_583180 = weights_583179
    kwargs_583181 = {'weights': keyword_583180}
    # Getting the type of '_histogram' (line 2042)
    _histogram_583175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 17), '_histogram', False)
    # Calling _histogram(args, kwargs) (line 2042)
    _histogram_call_result_583182 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 17), _histogram_583175, *[a_583176, numbins_583177, defaultreallimits_583178], **kwargs_583181)
    
    # Obtaining the member '__getitem__' of a type (line 2042)
    getitem___583183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 4), _histogram_call_result_583182, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2042)
    subscript_call_result_583184 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 4), getitem___583183, int_583174)
    
    # Assigning a type to the variable 'tuple_var_assignment_579905' (line 2042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'tuple_var_assignment_579905', subscript_call_result_583184)
    
    # Assigning a Subscript to a Name (line 2042):
    
    # Obtaining the type of the subscript
    int_583185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 4), 'int')
    
    # Call to _histogram(...): (line 2042)
    # Processing the call arguments (line 2042)
    # Getting the type of 'a' (line 2042)
    a_583187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 28), 'a', False)
    # Getting the type of 'numbins' (line 2042)
    numbins_583188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 31), 'numbins', False)
    # Getting the type of 'defaultreallimits' (line 2042)
    defaultreallimits_583189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 40), 'defaultreallimits', False)
    # Processing the call keyword arguments (line 2042)
    # Getting the type of 'weights' (line 2042)
    weights_583190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 67), 'weights', False)
    keyword_583191 = weights_583190
    kwargs_583192 = {'weights': keyword_583191}
    # Getting the type of '_histogram' (line 2042)
    _histogram_583186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 17), '_histogram', False)
    # Calling _histogram(args, kwargs) (line 2042)
    _histogram_call_result_583193 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 17), _histogram_583186, *[a_583187, numbins_583188, defaultreallimits_583189], **kwargs_583192)
    
    # Obtaining the member '__getitem__' of a type (line 2042)
    getitem___583194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 4), _histogram_call_result_583193, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2042)
    subscript_call_result_583195 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 4), getitem___583194, int_583185)
    
    # Assigning a type to the variable 'tuple_var_assignment_579906' (line 2042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'tuple_var_assignment_579906', subscript_call_result_583195)
    
    # Assigning a Subscript to a Name (line 2042):
    
    # Obtaining the type of the subscript
    int_583196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 4), 'int')
    
    # Call to _histogram(...): (line 2042)
    # Processing the call arguments (line 2042)
    # Getting the type of 'a' (line 2042)
    a_583198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 28), 'a', False)
    # Getting the type of 'numbins' (line 2042)
    numbins_583199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 31), 'numbins', False)
    # Getting the type of 'defaultreallimits' (line 2042)
    defaultreallimits_583200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 40), 'defaultreallimits', False)
    # Processing the call keyword arguments (line 2042)
    # Getting the type of 'weights' (line 2042)
    weights_583201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 67), 'weights', False)
    keyword_583202 = weights_583201
    kwargs_583203 = {'weights': keyword_583202}
    # Getting the type of '_histogram' (line 2042)
    _histogram_583197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 17), '_histogram', False)
    # Calling _histogram(args, kwargs) (line 2042)
    _histogram_call_result_583204 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 17), _histogram_583197, *[a_583198, numbins_583199, defaultreallimits_583200], **kwargs_583203)
    
    # Obtaining the member '__getitem__' of a type (line 2042)
    getitem___583205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 4), _histogram_call_result_583204, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2042)
    subscript_call_result_583206 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 4), getitem___583205, int_583196)
    
    # Assigning a type to the variable 'tuple_var_assignment_579907' (line 2042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'tuple_var_assignment_579907', subscript_call_result_583206)
    
    # Assigning a Subscript to a Name (line 2042):
    
    # Obtaining the type of the subscript
    int_583207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 4), 'int')
    
    # Call to _histogram(...): (line 2042)
    # Processing the call arguments (line 2042)
    # Getting the type of 'a' (line 2042)
    a_583209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 28), 'a', False)
    # Getting the type of 'numbins' (line 2042)
    numbins_583210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 31), 'numbins', False)
    # Getting the type of 'defaultreallimits' (line 2042)
    defaultreallimits_583211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 40), 'defaultreallimits', False)
    # Processing the call keyword arguments (line 2042)
    # Getting the type of 'weights' (line 2042)
    weights_583212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 67), 'weights', False)
    keyword_583213 = weights_583212
    kwargs_583214 = {'weights': keyword_583213}
    # Getting the type of '_histogram' (line 2042)
    _histogram_583208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 17), '_histogram', False)
    # Calling _histogram(args, kwargs) (line 2042)
    _histogram_call_result_583215 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 17), _histogram_583208, *[a_583209, numbins_583210, defaultreallimits_583211], **kwargs_583214)
    
    # Obtaining the member '__getitem__' of a type (line 2042)
    getitem___583216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 4), _histogram_call_result_583215, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2042)
    subscript_call_result_583217 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 4), getitem___583216, int_583207)
    
    # Assigning a type to the variable 'tuple_var_assignment_579908' (line 2042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'tuple_var_assignment_579908', subscript_call_result_583217)
    
    # Assigning a Name to a Name (line 2042):
    # Getting the type of 'tuple_var_assignment_579905' (line 2042)
    tuple_var_assignment_579905_583218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'tuple_var_assignment_579905')
    # Assigning a type to the variable 'h' (line 2042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'h', tuple_var_assignment_579905_583218)
    
    # Assigning a Name to a Name (line 2042):
    # Getting the type of 'tuple_var_assignment_579906' (line 2042)
    tuple_var_assignment_579906_583219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'tuple_var_assignment_579906')
    # Assigning a type to the variable 'l' (line 2042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 7), 'l', tuple_var_assignment_579906_583219)
    
    # Assigning a Name to a Name (line 2042):
    # Getting the type of 'tuple_var_assignment_579907' (line 2042)
    tuple_var_assignment_579907_583220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'tuple_var_assignment_579907')
    # Assigning a type to the variable 'b' (line 2042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 10), 'b', tuple_var_assignment_579907_583220)
    
    # Assigning a Name to a Name (line 2042):
    # Getting the type of 'tuple_var_assignment_579908' (line 2042)
    tuple_var_assignment_579908_583221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'tuple_var_assignment_579908')
    # Assigning a type to the variable 'e' (line 2042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 13), 'e', tuple_var_assignment_579908_583221)
    
    # Assigning a BinOp to a Name (line 2043):
    
    # Assigning a BinOp to a Name (line 2043):
    # Getting the type of 'h' (line 2043)
    h_583222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 8), 'h')
    
    # Call to float(...): (line 2043)
    # Processing the call arguments (line 2043)
    
    # Obtaining the type of the subscript
    int_583224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 26), 'int')
    # Getting the type of 'a' (line 2043)
    a_583225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 18), 'a', False)
    # Obtaining the member 'shape' of a type (line 2043)
    shape_583226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2043, 18), a_583225, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2043)
    getitem___583227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2043, 18), shape_583226, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2043)
    subscript_call_result_583228 = invoke(stypy.reporting.localization.Localization(__file__, 2043, 18), getitem___583227, int_583224)
    
    # Processing the call keyword arguments (line 2043)
    kwargs_583229 = {}
    # Getting the type of 'float' (line 2043)
    float_583223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 12), 'float', False)
    # Calling float(args, kwargs) (line 2043)
    float_call_result_583230 = invoke(stypy.reporting.localization.Localization(__file__, 2043, 12), float_583223, *[subscript_call_result_583228], **kwargs_583229)
    
    # Applying the binary operator 'div' (line 2043)
    result_div_583231 = python_operator(stypy.reporting.localization.Localization(__file__, 2043, 8), 'div', h_583222, float_call_result_583230)
    
    # Assigning a type to the variable 'h' (line 2043)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2043, 4), 'h', result_div_583231)
    
    # Call to RelfreqResult(...): (line 2045)
    # Processing the call arguments (line 2045)
    # Getting the type of 'h' (line 2045)
    h_583233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 25), 'h', False)
    # Getting the type of 'l' (line 2045)
    l_583234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 28), 'l', False)
    # Getting the type of 'b' (line 2045)
    b_583235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 31), 'b', False)
    # Getting the type of 'e' (line 2045)
    e_583236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 34), 'e', False)
    # Processing the call keyword arguments (line 2045)
    kwargs_583237 = {}
    # Getting the type of 'RelfreqResult' (line 2045)
    RelfreqResult_583232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 11), 'RelfreqResult', False)
    # Calling RelfreqResult(args, kwargs) (line 2045)
    RelfreqResult_call_result_583238 = invoke(stypy.reporting.localization.Localization(__file__, 2045, 11), RelfreqResult_583232, *[h_583233, l_583234, b_583235, e_583236], **kwargs_583237)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2045)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2045, 4), 'stypy_return_type', RelfreqResult_call_result_583238)
    
    # ################# End of 'relfreq(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'relfreq' in the type store
    # Getting the type of 'stypy_return_type' (line 1972)
    stypy_return_type_583239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_583239)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'relfreq'
    return stypy_return_type_583239

# Assigning a type to the variable 'relfreq' (line 1972)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 0), 'relfreq', relfreq)

@norecursion
def obrientransform(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'obrientransform'
    module_type_store = module_type_store.open_function_context('obrientransform', 2052, 0, False)
    
    # Passed parameters checking function
    obrientransform.stypy_localization = localization
    obrientransform.stypy_type_of_self = None
    obrientransform.stypy_type_store = module_type_store
    obrientransform.stypy_function_name = 'obrientransform'
    obrientransform.stypy_param_names_list = []
    obrientransform.stypy_varargs_param_name = 'args'
    obrientransform.stypy_kwargs_param_name = None
    obrientransform.stypy_call_defaults = defaults
    obrientransform.stypy_call_varargs = varargs
    obrientransform.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'obrientransform', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'obrientransform', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'obrientransform(...)' code ##################

    str_583240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2102, (-1)), 'str', '\n    Compute the O\'Brien transform on input data (any number of arrays).\n\n    Used to test for homogeneity of variance prior to running one-way stats.\n    Each array in ``*args`` is one level of a factor.\n    If `f_oneway` is run on the transformed data and found significant,\n    the variances are unequal.  From Maxwell and Delaney [1]_, p.112.\n\n    Parameters\n    ----------\n    args : tuple of array_like\n        Any number of arrays.\n\n    Returns\n    -------\n    obrientransform : ndarray\n        Transformed data for use in an ANOVA.  The first dimension\n        of the result corresponds to the sequence of transformed\n        arrays.  If the arrays given are all 1-D of the same length,\n        the return value is a 2-D array; otherwise it is a 1-D array\n        of type object, with each element being an ndarray.\n\n    References\n    ----------\n    .. [1] S. E. Maxwell and H. D. Delaney, "Designing Experiments and\n           Analyzing Data: A Model Comparison Perspective", Wadsworth, 1990.\n\n    Examples\n    --------\n    We\'ll test the following data sets for differences in their variance.\n\n    >>> x = [10, 11, 13, 9, 7, 12, 12, 9, 10]\n    >>> y = [13, 21, 5, 10, 8, 14, 10, 12, 7, 15]\n\n    Apply the O\'Brien transform to the data.\n\n    >>> from scipy.stats import obrientransform\n    >>> tx, ty = obrientransform(x, y)\n\n    Use `scipy.stats.f_oneway` to apply a one-way ANOVA test to the\n    transformed data.\n\n    >>> from scipy.stats import f_oneway\n    >>> F, p = f_oneway(tx, ty)\n    >>> p\n    0.1314139477040335\n\n    If we require that ``p < 0.05`` for significance, we cannot conclude\n    that the variances are different.\n    ')
    
    # Assigning a Call to a Name (line 2103):
    
    # Assigning a Call to a Name (line 2103):
    
    # Call to sqrt(...): (line 2103)
    # Processing the call arguments (line 2103)
    
    # Call to finfo(...): (line 2103)
    # Processing the call arguments (line 2103)
    # Getting the type of 'float' (line 2103)
    float_583245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 28), 'float', False)
    # Processing the call keyword arguments (line 2103)
    kwargs_583246 = {}
    # Getting the type of 'np' (line 2103)
    np_583243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 19), 'np', False)
    # Obtaining the member 'finfo' of a type (line 2103)
    finfo_583244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2103, 19), np_583243, 'finfo')
    # Calling finfo(args, kwargs) (line 2103)
    finfo_call_result_583247 = invoke(stypy.reporting.localization.Localization(__file__, 2103, 19), finfo_583244, *[float_583245], **kwargs_583246)
    
    # Obtaining the member 'eps' of a type (line 2103)
    eps_583248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2103, 19), finfo_call_result_583247, 'eps')
    # Processing the call keyword arguments (line 2103)
    kwargs_583249 = {}
    # Getting the type of 'np' (line 2103)
    np_583241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 11), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2103)
    sqrt_583242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2103, 11), np_583241, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2103)
    sqrt_call_result_583250 = invoke(stypy.reporting.localization.Localization(__file__, 2103, 11), sqrt_583242, *[eps_583248], **kwargs_583249)
    
    # Assigning a type to the variable 'TINY' (line 2103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2103, 4), 'TINY', sqrt_call_result_583250)
    
    # Assigning a List to a Name (line 2106):
    
    # Assigning a List to a Name (line 2106):
    
    # Obtaining an instance of the builtin type 'list' (line 2106)
    list_583251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2106, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2106)
    
    # Assigning a type to the variable 'arrays' (line 2106)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2106, 4), 'arrays', list_583251)
    
    # Getting the type of 'args' (line 2108)
    args_583252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 15), 'args')
    # Testing the type of a for loop iterable (line 2108)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2108, 4), args_583252)
    # Getting the type of the for loop variable (line 2108)
    for_loop_var_583253 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2108, 4), args_583252)
    # Assigning a type to the variable 'arg' (line 2108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2108, 4), 'arg', for_loop_var_583253)
    # SSA begins for a for statement (line 2108)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 2109):
    
    # Assigning a Call to a Name (line 2109):
    
    # Call to asarray(...): (line 2109)
    # Processing the call arguments (line 2109)
    # Getting the type of 'arg' (line 2109)
    arg_583256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 23), 'arg', False)
    # Processing the call keyword arguments (line 2109)
    kwargs_583257 = {}
    # Getting the type of 'np' (line 2109)
    np_583254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2109)
    asarray_583255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 12), np_583254, 'asarray')
    # Calling asarray(args, kwargs) (line 2109)
    asarray_call_result_583258 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 12), asarray_583255, *[arg_583256], **kwargs_583257)
    
    # Assigning a type to the variable 'a' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 8), 'a', asarray_call_result_583258)
    
    # Assigning a Call to a Name (line 2110):
    
    # Assigning a Call to a Name (line 2110):
    
    # Call to len(...): (line 2110)
    # Processing the call arguments (line 2110)
    # Getting the type of 'a' (line 2110)
    a_583260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 16), 'a', False)
    # Processing the call keyword arguments (line 2110)
    kwargs_583261 = {}
    # Getting the type of 'len' (line 2110)
    len_583259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 12), 'len', False)
    # Calling len(args, kwargs) (line 2110)
    len_call_result_583262 = invoke(stypy.reporting.localization.Localization(__file__, 2110, 12), len_583259, *[a_583260], **kwargs_583261)
    
    # Assigning a type to the variable 'n' (line 2110)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2110, 8), 'n', len_call_result_583262)
    
    # Assigning a Call to a Name (line 2111):
    
    # Assigning a Call to a Name (line 2111):
    
    # Call to mean(...): (line 2111)
    # Processing the call arguments (line 2111)
    # Getting the type of 'a' (line 2111)
    a_583265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 21), 'a', False)
    # Processing the call keyword arguments (line 2111)
    kwargs_583266 = {}
    # Getting the type of 'np' (line 2111)
    np_583263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 13), 'np', False)
    # Obtaining the member 'mean' of a type (line 2111)
    mean_583264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2111, 13), np_583263, 'mean')
    # Calling mean(args, kwargs) (line 2111)
    mean_call_result_583267 = invoke(stypy.reporting.localization.Localization(__file__, 2111, 13), mean_583264, *[a_583265], **kwargs_583266)
    
    # Assigning a type to the variable 'mu' (line 2111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2111, 8), 'mu', mean_call_result_583267)
    
    # Assigning a BinOp to a Name (line 2112):
    
    # Assigning a BinOp to a Name (line 2112):
    # Getting the type of 'a' (line 2112)
    a_583268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2112, 14), 'a')
    # Getting the type of 'mu' (line 2112)
    mu_583269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2112, 18), 'mu')
    # Applying the binary operator '-' (line 2112)
    result_sub_583270 = python_operator(stypy.reporting.localization.Localization(__file__, 2112, 14), '-', a_583268, mu_583269)
    
    int_583271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2112, 23), 'int')
    # Applying the binary operator '**' (line 2112)
    result_pow_583272 = python_operator(stypy.reporting.localization.Localization(__file__, 2112, 13), '**', result_sub_583270, int_583271)
    
    # Assigning a type to the variable 'sq' (line 2112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2112, 8), 'sq', result_pow_583272)
    
    # Assigning a Call to a Name (line 2113):
    
    # Assigning a Call to a Name (line 2113):
    
    # Call to sum(...): (line 2113)
    # Processing the call keyword arguments (line 2113)
    kwargs_583275 = {}
    # Getting the type of 'sq' (line 2113)
    sq_583273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 16), 'sq', False)
    # Obtaining the member 'sum' of a type (line 2113)
    sum_583274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2113, 16), sq_583273, 'sum')
    # Calling sum(args, kwargs) (line 2113)
    sum_call_result_583276 = invoke(stypy.reporting.localization.Localization(__file__, 2113, 16), sum_583274, *[], **kwargs_583275)
    
    # Assigning a type to the variable 'sumsq' (line 2113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'sumsq', sum_call_result_583276)
    
    # Assigning a BinOp to a Name (line 2116):
    
    # Assigning a BinOp to a Name (line 2116):
    # Getting the type of 'n' (line 2116)
    n_583277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 14), 'n')
    float_583278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2116, 18), 'float')
    # Applying the binary operator '-' (line 2116)
    result_sub_583279 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 14), '-', n_583277, float_583278)
    
    # Getting the type of 'n' (line 2116)
    n_583280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 25), 'n')
    # Applying the binary operator '*' (line 2116)
    result_mul_583281 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 13), '*', result_sub_583279, n_583280)
    
    # Getting the type of 'sq' (line 2116)
    sq_583282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 29), 'sq')
    # Applying the binary operator '*' (line 2116)
    result_mul_583283 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 27), '*', result_mul_583281, sq_583282)
    
    float_583284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2116, 34), 'float')
    # Getting the type of 'sumsq' (line 2116)
    sumsq_583285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 40), 'sumsq')
    # Applying the binary operator '*' (line 2116)
    result_mul_583286 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 34), '*', float_583284, sumsq_583285)
    
    # Applying the binary operator '-' (line 2116)
    result_sub_583287 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 13), '-', result_mul_583283, result_mul_583286)
    
    # Getting the type of 'n' (line 2116)
    n_583288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 51), 'n')
    int_583289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2116, 55), 'int')
    # Applying the binary operator '-' (line 2116)
    result_sub_583290 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 51), '-', n_583288, int_583289)
    
    # Getting the type of 'n' (line 2116)
    n_583291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 61), 'n')
    int_583292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2116, 65), 'int')
    # Applying the binary operator '-' (line 2116)
    result_sub_583293 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 61), '-', n_583291, int_583292)
    
    # Applying the binary operator '*' (line 2116)
    result_mul_583294 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 50), '*', result_sub_583290, result_sub_583293)
    
    # Applying the binary operator 'div' (line 2116)
    result_div_583295 = python_operator(stypy.reporting.localization.Localization(__file__, 2116, 12), 'div', result_sub_583287, result_mul_583294)
    
    # Assigning a type to the variable 't' (line 2116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2116, 8), 't', result_div_583295)
    
    # Assigning a BinOp to a Name (line 2120):
    
    # Assigning a BinOp to a Name (line 2120):
    # Getting the type of 'sumsq' (line 2120)
    sumsq_583296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2120, 14), 'sumsq')
    # Getting the type of 'n' (line 2120)
    n_583297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2120, 23), 'n')
    int_583298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2120, 27), 'int')
    # Applying the binary operator '-' (line 2120)
    result_sub_583299 = python_operator(stypy.reporting.localization.Localization(__file__, 2120, 23), '-', n_583297, int_583298)
    
    # Applying the binary operator 'div' (line 2120)
    result_div_583300 = python_operator(stypy.reporting.localization.Localization(__file__, 2120, 14), 'div', sumsq_583296, result_sub_583299)
    
    # Assigning a type to the variable 'var' (line 2120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2120, 8), 'var', result_div_583300)
    
    
    
    # Call to abs(...): (line 2121)
    # Processing the call arguments (line 2121)
    # Getting the type of 'var' (line 2121)
    var_583302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 15), 'var', False)
    
    # Call to mean(...): (line 2121)
    # Processing the call arguments (line 2121)
    # Getting the type of 't' (line 2121)
    t_583305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 29), 't', False)
    # Processing the call keyword arguments (line 2121)
    kwargs_583306 = {}
    # Getting the type of 'np' (line 2121)
    np_583303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 21), 'np', False)
    # Obtaining the member 'mean' of a type (line 2121)
    mean_583304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2121, 21), np_583303, 'mean')
    # Calling mean(args, kwargs) (line 2121)
    mean_call_result_583307 = invoke(stypy.reporting.localization.Localization(__file__, 2121, 21), mean_583304, *[t_583305], **kwargs_583306)
    
    # Applying the binary operator '-' (line 2121)
    result_sub_583308 = python_operator(stypy.reporting.localization.Localization(__file__, 2121, 15), '-', var_583302, mean_call_result_583307)
    
    # Processing the call keyword arguments (line 2121)
    kwargs_583309 = {}
    # Getting the type of 'abs' (line 2121)
    abs_583301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 11), 'abs', False)
    # Calling abs(args, kwargs) (line 2121)
    abs_call_result_583310 = invoke(stypy.reporting.localization.Localization(__file__, 2121, 11), abs_583301, *[result_sub_583308], **kwargs_583309)
    
    # Getting the type of 'TINY' (line 2121)
    TINY_583311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 35), 'TINY')
    # Applying the binary operator '>' (line 2121)
    result_gt_583312 = python_operator(stypy.reporting.localization.Localization(__file__, 2121, 11), '>', abs_call_result_583310, TINY_583311)
    
    # Testing the type of an if condition (line 2121)
    if_condition_583313 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2121, 8), result_gt_583312)
    # Assigning a type to the variable 'if_condition_583313' (line 2121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2121, 8), 'if_condition_583313', if_condition_583313)
    # SSA begins for if statement (line 2121)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2122)
    # Processing the call arguments (line 2122)
    str_583315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2122, 29), 'str', 'Lack of convergence in obrientransform.')
    # Processing the call keyword arguments (line 2122)
    kwargs_583316 = {}
    # Getting the type of 'ValueError' (line 2122)
    ValueError_583314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2122, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2122)
    ValueError_call_result_583317 = invoke(stypy.reporting.localization.Localization(__file__, 2122, 18), ValueError_583314, *[str_583315], **kwargs_583316)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2122, 12), ValueError_call_result_583317, 'raise parameter', BaseException)
    # SSA join for if statement (line 2121)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 2124)
    # Processing the call arguments (line 2124)
    # Getting the type of 't' (line 2124)
    t_583320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2124, 22), 't', False)
    # Processing the call keyword arguments (line 2124)
    kwargs_583321 = {}
    # Getting the type of 'arrays' (line 2124)
    arrays_583318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2124, 8), 'arrays', False)
    # Obtaining the member 'append' of a type (line 2124)
    append_583319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2124, 8), arrays_583318, 'append')
    # Calling append(args, kwargs) (line 2124)
    append_call_result_583322 = invoke(stypy.reporting.localization.Localization(__file__, 2124, 8), append_583319, *[t_583320], **kwargs_583321)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to array(...): (line 2126)
    # Processing the call arguments (line 2126)
    # Getting the type of 'arrays' (line 2126)
    arrays_583325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2126, 20), 'arrays', False)
    # Processing the call keyword arguments (line 2126)
    kwargs_583326 = {}
    # Getting the type of 'np' (line 2126)
    np_583323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2126, 11), 'np', False)
    # Obtaining the member 'array' of a type (line 2126)
    array_583324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2126, 11), np_583323, 'array')
    # Calling array(args, kwargs) (line 2126)
    array_call_result_583327 = invoke(stypy.reporting.localization.Localization(__file__, 2126, 11), array_583324, *[arrays_583325], **kwargs_583326)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2126, 4), 'stypy_return_type', array_call_result_583327)
    
    # ################# End of 'obrientransform(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'obrientransform' in the type store
    # Getting the type of 'stypy_return_type' (line 2052)
    stypy_return_type_583328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_583328)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'obrientransform'
    return stypy_return_type_583328

# Assigning a type to the variable 'obrientransform' (line 2052)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2052, 0), 'obrientransform', obrientransform)

@norecursion
def sem(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_583329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2129, 16), 'int')
    int_583330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2129, 24), 'int')
    str_583331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2129, 38), 'str', 'propagate')
    defaults = [int_583329, int_583330, str_583331]
    # Create a new context for function 'sem'
    module_type_store = module_type_store.open_function_context('sem', 2129, 0, False)
    
    # Passed parameters checking function
    sem.stypy_localization = localization
    sem.stypy_type_of_self = None
    sem.stypy_type_store = module_type_store
    sem.stypy_function_name = 'sem'
    sem.stypy_param_names_list = ['a', 'axis', 'ddof', 'nan_policy']
    sem.stypy_varargs_param_name = None
    sem.stypy_kwargs_param_name = None
    sem.stypy_call_defaults = defaults
    sem.stypy_call_varargs = varargs
    sem.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sem', ['a', 'axis', 'ddof', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sem', localization, ['a', 'axis', 'ddof', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sem(...)' code ##################

    str_583332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2175, (-1)), 'str', "\n    Calculate the standard error of the mean (or standard error of\n    measurement) of the values in the input array.\n\n    Parameters\n    ----------\n    a : array_like\n        An array containing the values for which the standard error is\n        returned.\n    axis : int or None, optional\n        Axis along which to operate. Default is 0. If None, compute over\n        the whole array `a`.\n    ddof : int, optional\n        Delta degrees-of-freedom. How many degrees of freedom to adjust\n        for bias in limited samples relative to the population estimate\n        of variance. Defaults to 1.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    s : ndarray or float\n        The standard error of the mean in the sample(s), along the input axis.\n\n    Notes\n    -----\n    The default value for `ddof` is different to the default (0) used by other\n    ddof containing routines, such as np.std and np.nanstd.\n\n    Examples\n    --------\n    Find standard error along the first axis:\n\n    >>> from scipy import stats\n    >>> a = np.arange(20).reshape(5,4)\n    >>> stats.sem(a)\n    array([ 2.8284,  2.8284,  2.8284,  2.8284])\n\n    Find standard error across the whole array, using n degrees of freedom:\n\n    >>> stats.sem(a, axis=None, ddof=0)\n    1.2893796958227628\n\n    ")
    
    # Assigning a Call to a Tuple (line 2176):
    
    # Assigning a Subscript to a Name (line 2176):
    
    # Obtaining the type of the subscript
    int_583333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2176)
    # Processing the call arguments (line 2176)
    # Getting the type of 'a' (line 2176)
    a_583335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 27), 'a', False)
    # Getting the type of 'axis' (line 2176)
    axis_583336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 30), 'axis', False)
    # Processing the call keyword arguments (line 2176)
    kwargs_583337 = {}
    # Getting the type of '_chk_asarray' (line 2176)
    _chk_asarray_583334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2176)
    _chk_asarray_call_result_583338 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 14), _chk_asarray_583334, *[a_583335, axis_583336], **kwargs_583337)
    
    # Obtaining the member '__getitem__' of a type (line 2176)
    getitem___583339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 4), _chk_asarray_call_result_583338, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2176)
    subscript_call_result_583340 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 4), getitem___583339, int_583333)
    
    # Assigning a type to the variable 'tuple_var_assignment_579909' (line 2176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 4), 'tuple_var_assignment_579909', subscript_call_result_583340)
    
    # Assigning a Subscript to a Name (line 2176):
    
    # Obtaining the type of the subscript
    int_583341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2176)
    # Processing the call arguments (line 2176)
    # Getting the type of 'a' (line 2176)
    a_583343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 27), 'a', False)
    # Getting the type of 'axis' (line 2176)
    axis_583344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 30), 'axis', False)
    # Processing the call keyword arguments (line 2176)
    kwargs_583345 = {}
    # Getting the type of '_chk_asarray' (line 2176)
    _chk_asarray_583342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2176)
    _chk_asarray_call_result_583346 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 14), _chk_asarray_583342, *[a_583343, axis_583344], **kwargs_583345)
    
    # Obtaining the member '__getitem__' of a type (line 2176)
    getitem___583347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 4), _chk_asarray_call_result_583346, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2176)
    subscript_call_result_583348 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 4), getitem___583347, int_583341)
    
    # Assigning a type to the variable 'tuple_var_assignment_579910' (line 2176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 4), 'tuple_var_assignment_579910', subscript_call_result_583348)
    
    # Assigning a Name to a Name (line 2176):
    # Getting the type of 'tuple_var_assignment_579909' (line 2176)
    tuple_var_assignment_579909_583349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 4), 'tuple_var_assignment_579909')
    # Assigning a type to the variable 'a' (line 2176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 4), 'a', tuple_var_assignment_579909_583349)
    
    # Assigning a Name to a Name (line 2176):
    # Getting the type of 'tuple_var_assignment_579910' (line 2176)
    tuple_var_assignment_579910_583350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 4), 'tuple_var_assignment_579910')
    # Assigning a type to the variable 'axis' (line 2176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 7), 'axis', tuple_var_assignment_579910_583350)
    
    # Assigning a Call to a Tuple (line 2178):
    
    # Assigning a Subscript to a Name (line 2178):
    
    # Obtaining the type of the subscript
    int_583351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2178, 4), 'int')
    
    # Call to _contains_nan(...): (line 2178)
    # Processing the call arguments (line 2178)
    # Getting the type of 'a' (line 2178)
    a_583353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 2178)
    nan_policy_583354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 2178)
    kwargs_583355 = {}
    # Getting the type of '_contains_nan' (line 2178)
    _contains_nan_583352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 2178)
    _contains_nan_call_result_583356 = invoke(stypy.reporting.localization.Localization(__file__, 2178, 31), _contains_nan_583352, *[a_583353, nan_policy_583354], **kwargs_583355)
    
    # Obtaining the member '__getitem__' of a type (line 2178)
    getitem___583357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2178, 4), _contains_nan_call_result_583356, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2178)
    subscript_call_result_583358 = invoke(stypy.reporting.localization.Localization(__file__, 2178, 4), getitem___583357, int_583351)
    
    # Assigning a type to the variable 'tuple_var_assignment_579911' (line 2178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 4), 'tuple_var_assignment_579911', subscript_call_result_583358)
    
    # Assigning a Subscript to a Name (line 2178):
    
    # Obtaining the type of the subscript
    int_583359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2178, 4), 'int')
    
    # Call to _contains_nan(...): (line 2178)
    # Processing the call arguments (line 2178)
    # Getting the type of 'a' (line 2178)
    a_583361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 2178)
    nan_policy_583362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 2178)
    kwargs_583363 = {}
    # Getting the type of '_contains_nan' (line 2178)
    _contains_nan_583360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 2178)
    _contains_nan_call_result_583364 = invoke(stypy.reporting.localization.Localization(__file__, 2178, 31), _contains_nan_583360, *[a_583361, nan_policy_583362], **kwargs_583363)
    
    # Obtaining the member '__getitem__' of a type (line 2178)
    getitem___583365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2178, 4), _contains_nan_call_result_583364, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2178)
    subscript_call_result_583366 = invoke(stypy.reporting.localization.Localization(__file__, 2178, 4), getitem___583365, int_583359)
    
    # Assigning a type to the variable 'tuple_var_assignment_579912' (line 2178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 4), 'tuple_var_assignment_579912', subscript_call_result_583366)
    
    # Assigning a Name to a Name (line 2178):
    # Getting the type of 'tuple_var_assignment_579911' (line 2178)
    tuple_var_assignment_579911_583367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 4), 'tuple_var_assignment_579911')
    # Assigning a type to the variable 'contains_nan' (line 2178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 4), 'contains_nan', tuple_var_assignment_579911_583367)
    
    # Assigning a Name to a Name (line 2178):
    # Getting the type of 'tuple_var_assignment_579912' (line 2178)
    tuple_var_assignment_579912_583368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 4), 'tuple_var_assignment_579912')
    # Assigning a type to the variable 'nan_policy' (line 2178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 18), 'nan_policy', tuple_var_assignment_579912_583368)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 2180)
    contains_nan_583369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 2180)
    nan_policy_583370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 24), 'nan_policy')
    str_583371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2180, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 2180)
    result_eq_583372 = python_operator(stypy.reporting.localization.Localization(__file__, 2180, 24), '==', nan_policy_583370, str_583371)
    
    # Applying the binary operator 'and' (line 2180)
    result_and_keyword_583373 = python_operator(stypy.reporting.localization.Localization(__file__, 2180, 7), 'and', contains_nan_583369, result_eq_583372)
    
    # Testing the type of an if condition (line 2180)
    if_condition_583374 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2180, 4), result_and_keyword_583373)
    # Assigning a type to the variable 'if_condition_583374' (line 2180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2180, 4), 'if_condition_583374', if_condition_583374)
    # SSA begins for if statement (line 2180)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2181):
    
    # Assigning a Call to a Name (line 2181):
    
    # Call to masked_invalid(...): (line 2181)
    # Processing the call arguments (line 2181)
    # Getting the type of 'a' (line 2181)
    a_583377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 30), 'a', False)
    # Processing the call keyword arguments (line 2181)
    kwargs_583378 = {}
    # Getting the type of 'ma' (line 2181)
    ma_583375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 2181)
    masked_invalid_583376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 12), ma_583375, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 2181)
    masked_invalid_call_result_583379 = invoke(stypy.reporting.localization.Localization(__file__, 2181, 12), masked_invalid_583376, *[a_583377], **kwargs_583378)
    
    # Assigning a type to the variable 'a' (line 2181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 8), 'a', masked_invalid_call_result_583379)
    
    # Call to sem(...): (line 2182)
    # Processing the call arguments (line 2182)
    # Getting the type of 'a' (line 2182)
    a_583382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 32), 'a', False)
    # Getting the type of 'axis' (line 2182)
    axis_583383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 35), 'axis', False)
    # Getting the type of 'ddof' (line 2182)
    ddof_583384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 41), 'ddof', False)
    # Processing the call keyword arguments (line 2182)
    kwargs_583385 = {}
    # Getting the type of 'mstats_basic' (line 2182)
    mstats_basic_583380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 15), 'mstats_basic', False)
    # Obtaining the member 'sem' of a type (line 2182)
    sem_583381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 15), mstats_basic_583380, 'sem')
    # Calling sem(args, kwargs) (line 2182)
    sem_call_result_583386 = invoke(stypy.reporting.localization.Localization(__file__, 2182, 15), sem_583381, *[a_583382, axis_583383, ddof_583384], **kwargs_583385)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 8), 'stypy_return_type', sem_call_result_583386)
    # SSA join for if statement (line 2180)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2184):
    
    # Assigning a Subscript to a Name (line 2184):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2184)
    axis_583387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 16), 'axis')
    # Getting the type of 'a' (line 2184)
    a_583388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 8), 'a')
    # Obtaining the member 'shape' of a type (line 2184)
    shape_583389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 8), a_583388, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2184)
    getitem___583390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 8), shape_583389, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2184)
    subscript_call_result_583391 = invoke(stypy.reporting.localization.Localization(__file__, 2184, 8), getitem___583390, axis_583387)
    
    # Assigning a type to the variable 'n' (line 2184)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 4), 'n', subscript_call_result_583391)
    
    # Assigning a BinOp to a Name (line 2185):
    
    # Assigning a BinOp to a Name (line 2185):
    
    # Call to std(...): (line 2185)
    # Processing the call arguments (line 2185)
    # Getting the type of 'a' (line 2185)
    a_583394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 15), 'a', False)
    # Processing the call keyword arguments (line 2185)
    # Getting the type of 'axis' (line 2185)
    axis_583395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 23), 'axis', False)
    keyword_583396 = axis_583395
    # Getting the type of 'ddof' (line 2185)
    ddof_583397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 34), 'ddof', False)
    keyword_583398 = ddof_583397
    kwargs_583399 = {'ddof': keyword_583398, 'axis': keyword_583396}
    # Getting the type of 'np' (line 2185)
    np_583392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 8), 'np', False)
    # Obtaining the member 'std' of a type (line 2185)
    std_583393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2185, 8), np_583392, 'std')
    # Calling std(args, kwargs) (line 2185)
    std_call_result_583400 = invoke(stypy.reporting.localization.Localization(__file__, 2185, 8), std_583393, *[a_583394], **kwargs_583399)
    
    
    # Call to sqrt(...): (line 2185)
    # Processing the call arguments (line 2185)
    # Getting the type of 'n' (line 2185)
    n_583403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 50), 'n', False)
    # Processing the call keyword arguments (line 2185)
    kwargs_583404 = {}
    # Getting the type of 'np' (line 2185)
    np_583401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 42), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2185)
    sqrt_583402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2185, 42), np_583401, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2185)
    sqrt_call_result_583405 = invoke(stypy.reporting.localization.Localization(__file__, 2185, 42), sqrt_583402, *[n_583403], **kwargs_583404)
    
    # Applying the binary operator 'div' (line 2185)
    result_div_583406 = python_operator(stypy.reporting.localization.Localization(__file__, 2185, 8), 'div', std_call_result_583400, sqrt_call_result_583405)
    
    # Assigning a type to the variable 's' (line 2185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 4), 's', result_div_583406)
    # Getting the type of 's' (line 2186)
    s_583407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 11), 's')
    # Assigning a type to the variable 'stypy_return_type' (line 2186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 4), 'stypy_return_type', s_583407)
    
    # ################# End of 'sem(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sem' in the type store
    # Getting the type of 'stypy_return_type' (line 2129)
    stypy_return_type_583408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_583408)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sem'
    return stypy_return_type_583408

# Assigning a type to the variable 'sem' (line 2129)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2129, 0), 'sem', sem)

@norecursion
def zscore(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_583409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 19), 'int')
    int_583410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 27), 'int')
    defaults = [int_583409, int_583410]
    # Create a new context for function 'zscore'
    module_type_store = module_type_store.open_function_context('zscore', 2189, 0, False)
    
    # Passed parameters checking function
    zscore.stypy_localization = localization
    zscore.stypy_type_of_self = None
    zscore.stypy_type_store = module_type_store
    zscore.stypy_function_name = 'zscore'
    zscore.stypy_param_names_list = ['a', 'axis', 'ddof']
    zscore.stypy_varargs_param_name = None
    zscore.stypy_kwargs_param_name = None
    zscore.stypy_call_defaults = defaults
    zscore.stypy_call_varargs = varargs
    zscore.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'zscore', ['a', 'axis', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'zscore', localization, ['a', 'axis', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'zscore(...)' code ##################

    str_583411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2240, (-1)), 'str', '\n    Calculate the z score of each value in the sample, relative to the\n    sample mean and standard deviation.\n\n    Parameters\n    ----------\n    a : array_like\n        An array like object containing the sample data.\n    axis : int or None, optional\n        Axis along which to operate. Default is 0. If None, compute over\n        the whole array `a`.\n    ddof : int, optional\n        Degrees of freedom correction in the calculation of the\n        standard deviation. Default is 0.\n\n    Returns\n    -------\n    zscore : array_like\n        The z-scores, standardized by mean and standard deviation of\n        input array `a`.\n\n    Notes\n    -----\n    This function preserves ndarray subclasses, and works also with\n    matrices and masked arrays (it uses `asanyarray` instead of\n    `asarray` for parameters).\n\n    Examples\n    --------\n    >>> a = np.array([ 0.7972,  0.0767,  0.4383,  0.7866,  0.8091,\n    ...                0.1954,  0.6307,  0.6599,  0.1065,  0.0508])\n    >>> from scipy import stats\n    >>> stats.zscore(a)\n    array([ 1.1273, -1.247 , -0.0552,  1.0923,  1.1664, -0.8559,  0.5786,\n            0.6748, -1.1488, -1.3324])\n\n    Computing along a specified axis, using n-1 degrees of freedom\n    (``ddof=1``) to calculate the standard deviation:\n\n    >>> b = np.array([[ 0.3148,  0.0478,  0.6243,  0.4608],\n    ...               [ 0.7149,  0.0775,  0.6072,  0.9656],\n    ...               [ 0.6341,  0.1403,  0.9759,  0.4064],\n    ...               [ 0.5918,  0.6948,  0.904 ,  0.3721],\n    ...               [ 0.0921,  0.2481,  0.1188,  0.1366]])\n    >>> stats.zscore(b, axis=1, ddof=1)\n    array([[-0.19264823, -1.28415119,  1.07259584,  0.40420358],\n           [ 0.33048416, -1.37380874,  0.04251374,  1.00081084],\n           [ 0.26796377, -1.12598418,  1.23283094, -0.37481053],\n           [-0.22095197,  0.24468594,  1.19042819, -1.21416216],\n           [-0.82780366,  1.4457416 , -0.43867764, -0.1792603 ]])\n    ')
    
    # Assigning a Call to a Name (line 2241):
    
    # Assigning a Call to a Name (line 2241):
    
    # Call to asanyarray(...): (line 2241)
    # Processing the call arguments (line 2241)
    # Getting the type of 'a' (line 2241)
    a_583414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 22), 'a', False)
    # Processing the call keyword arguments (line 2241)
    kwargs_583415 = {}
    # Getting the type of 'np' (line 2241)
    np_583412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 2241)
    asanyarray_583413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2241, 8), np_583412, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 2241)
    asanyarray_call_result_583416 = invoke(stypy.reporting.localization.Localization(__file__, 2241, 8), asanyarray_583413, *[a_583414], **kwargs_583415)
    
    # Assigning a type to the variable 'a' (line 2241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 4), 'a', asanyarray_call_result_583416)
    
    # Assigning a Call to a Name (line 2242):
    
    # Assigning a Call to a Name (line 2242):
    
    # Call to mean(...): (line 2242)
    # Processing the call keyword arguments (line 2242)
    # Getting the type of 'axis' (line 2242)
    axis_583419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 22), 'axis', False)
    keyword_583420 = axis_583419
    kwargs_583421 = {'axis': keyword_583420}
    # Getting the type of 'a' (line 2242)
    a_583417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 10), 'a', False)
    # Obtaining the member 'mean' of a type (line 2242)
    mean_583418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2242, 10), a_583417, 'mean')
    # Calling mean(args, kwargs) (line 2242)
    mean_call_result_583422 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 10), mean_583418, *[], **kwargs_583421)
    
    # Assigning a type to the variable 'mns' (line 2242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 4), 'mns', mean_call_result_583422)
    
    # Assigning a Call to a Name (line 2243):
    
    # Assigning a Call to a Name (line 2243):
    
    # Call to std(...): (line 2243)
    # Processing the call keyword arguments (line 2243)
    # Getting the type of 'axis' (line 2243)
    axis_583425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 22), 'axis', False)
    keyword_583426 = axis_583425
    # Getting the type of 'ddof' (line 2243)
    ddof_583427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 33), 'ddof', False)
    keyword_583428 = ddof_583427
    kwargs_583429 = {'ddof': keyword_583428, 'axis': keyword_583426}
    # Getting the type of 'a' (line 2243)
    a_583423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 11), 'a', False)
    # Obtaining the member 'std' of a type (line 2243)
    std_583424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 11), a_583423, 'std')
    # Calling std(args, kwargs) (line 2243)
    std_call_result_583430 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 11), std_583424, *[], **kwargs_583429)
    
    # Assigning a type to the variable 'sstd' (line 2243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 4), 'sstd', std_call_result_583430)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'axis' (line 2244)
    axis_583431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 7), 'axis')
    
    # Getting the type of 'mns' (line 2244)
    mns_583432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 16), 'mns')
    # Obtaining the member 'ndim' of a type (line 2244)
    ndim_583433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 16), mns_583432, 'ndim')
    # Getting the type of 'a' (line 2244)
    a_583434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 27), 'a')
    # Obtaining the member 'ndim' of a type (line 2244)
    ndim_583435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 27), a_583434, 'ndim')
    # Applying the binary operator '<' (line 2244)
    result_lt_583436 = python_operator(stypy.reporting.localization.Localization(__file__, 2244, 16), '<', ndim_583433, ndim_583435)
    
    # Applying the binary operator 'and' (line 2244)
    result_and_keyword_583437 = python_operator(stypy.reporting.localization.Localization(__file__, 2244, 7), 'and', axis_583431, result_lt_583436)
    
    # Testing the type of an if condition (line 2244)
    if_condition_583438 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2244, 4), result_and_keyword_583437)
    # Assigning a type to the variable 'if_condition_583438' (line 2244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 4), 'if_condition_583438', if_condition_583438)
    # SSA begins for if statement (line 2244)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'a' (line 2245)
    a_583439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 17), 'a')
    
    # Call to expand_dims(...): (line 2245)
    # Processing the call arguments (line 2245)
    # Getting the type of 'mns' (line 2245)
    mns_583442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 36), 'mns', False)
    # Processing the call keyword arguments (line 2245)
    # Getting the type of 'axis' (line 2245)
    axis_583443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 46), 'axis', False)
    keyword_583444 = axis_583443
    kwargs_583445 = {'axis': keyword_583444}
    # Getting the type of 'np' (line 2245)
    np_583440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 21), 'np', False)
    # Obtaining the member 'expand_dims' of a type (line 2245)
    expand_dims_583441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2245, 21), np_583440, 'expand_dims')
    # Calling expand_dims(args, kwargs) (line 2245)
    expand_dims_call_result_583446 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 21), expand_dims_583441, *[mns_583442], **kwargs_583445)
    
    # Applying the binary operator '-' (line 2245)
    result_sub_583447 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 17), '-', a_583439, expand_dims_call_result_583446)
    
    
    # Call to expand_dims(...): (line 2246)
    # Processing the call arguments (line 2246)
    # Getting the type of 'sstd' (line 2246)
    sstd_583450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 31), 'sstd', False)
    # Processing the call keyword arguments (line 2246)
    # Getting the type of 'axis' (line 2246)
    axis_583451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 42), 'axis', False)
    keyword_583452 = axis_583451
    kwargs_583453 = {'axis': keyword_583452}
    # Getting the type of 'np' (line 2246)
    np_583448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 16), 'np', False)
    # Obtaining the member 'expand_dims' of a type (line 2246)
    expand_dims_583449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2246, 16), np_583448, 'expand_dims')
    # Calling expand_dims(args, kwargs) (line 2246)
    expand_dims_call_result_583454 = invoke(stypy.reporting.localization.Localization(__file__, 2246, 16), expand_dims_583449, *[sstd_583450], **kwargs_583453)
    
    # Applying the binary operator 'div' (line 2245)
    result_div_583455 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 16), 'div', result_sub_583447, expand_dims_call_result_583454)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2245, 8), 'stypy_return_type', result_div_583455)
    # SSA branch for the else part of an if statement (line 2244)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'a' (line 2248)
    a_583456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 16), 'a')
    # Getting the type of 'mns' (line 2248)
    mns_583457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 20), 'mns')
    # Applying the binary operator '-' (line 2248)
    result_sub_583458 = python_operator(stypy.reporting.localization.Localization(__file__, 2248, 16), '-', a_583456, mns_583457)
    
    # Getting the type of 'sstd' (line 2248)
    sstd_583459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 27), 'sstd')
    # Applying the binary operator 'div' (line 2248)
    result_div_583460 = python_operator(stypy.reporting.localization.Localization(__file__, 2248, 15), 'div', result_sub_583458, sstd_583459)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2248, 8), 'stypy_return_type', result_div_583460)
    # SSA join for if statement (line 2244)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'zscore(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'zscore' in the type store
    # Getting the type of 'stypy_return_type' (line 2189)
    stypy_return_type_583461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_583461)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'zscore'
    return stypy_return_type_583461

# Assigning a type to the variable 'zscore' (line 2189)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2189, 0), 'zscore', zscore)

@norecursion
def zmap(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_583462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2251, 31), 'int')
    int_583463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2251, 39), 'int')
    defaults = [int_583462, int_583463]
    # Create a new context for function 'zmap'
    module_type_store = module_type_store.open_function_context('zmap', 2251, 0, False)
    
    # Passed parameters checking function
    zmap.stypy_localization = localization
    zmap.stypy_type_of_self = None
    zmap.stypy_type_store = module_type_store
    zmap.stypy_function_name = 'zmap'
    zmap.stypy_param_names_list = ['scores', 'compare', 'axis', 'ddof']
    zmap.stypy_varargs_param_name = None
    zmap.stypy_kwargs_param_name = None
    zmap.stypy_call_defaults = defaults
    zmap.stypy_call_varargs = varargs
    zmap.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'zmap', ['scores', 'compare', 'axis', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'zmap', localization, ['scores', 'compare', 'axis', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'zmap(...)' code ##################

    str_583464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2292, (-1)), 'str', '\n    Calculate the relative z-scores.\n\n    Return an array of z-scores, i.e., scores that are standardized to\n    zero mean and unit variance, where mean and variance are calculated\n    from the comparison array.\n\n    Parameters\n    ----------\n    scores : array_like\n        The input for which z-scores are calculated.\n    compare : array_like\n        The input from which the mean and standard deviation of the\n        normalization are taken; assumed to have the same dimension as\n        `scores`.\n    axis : int or None, optional\n        Axis over which mean and variance of `compare` are calculated.\n        Default is 0. If None, compute over the whole array `scores`.\n    ddof : int, optional\n        Degrees of freedom correction in the calculation of the\n        standard deviation. Default is 0.\n\n    Returns\n    -------\n    zscore : array_like\n        Z-scores, in the same shape as `scores`.\n\n    Notes\n    -----\n    This function preserves ndarray subclasses, and works also with\n    matrices and masked arrays (it uses `asanyarray` instead of\n    `asarray` for parameters).\n\n    Examples\n    --------\n    >>> from scipy.stats import zmap\n    >>> a = [0.5, 2.0, 2.5, 3]\n    >>> b = [0, 1, 2, 3, 4]\n    >>> zmap(a, b)\n    array([-1.06066017,  0.        ,  0.35355339,  0.70710678])\n    ')
    
    # Assigning a Call to a Tuple (line 2293):
    
    # Assigning a Subscript to a Name (line 2293):
    
    # Obtaining the type of the subscript
    int_583465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, 4), 'int')
    
    # Call to map(...): (line 2293)
    # Processing the call arguments (line 2293)
    # Getting the type of 'np' (line 2293)
    np_583467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 26), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 2293)
    asanyarray_583468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 26), np_583467, 'asanyarray')
    
    # Obtaining an instance of the builtin type 'list' (line 2293)
    list_583469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, 41), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2293)
    # Adding element type (line 2293)
    # Getting the type of 'scores' (line 2293)
    scores_583470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 42), 'scores', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2293, 41), list_583469, scores_583470)
    # Adding element type (line 2293)
    # Getting the type of 'compare' (line 2293)
    compare_583471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 50), 'compare', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2293, 41), list_583469, compare_583471)
    
    # Processing the call keyword arguments (line 2293)
    kwargs_583472 = {}
    # Getting the type of 'map' (line 2293)
    map_583466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 22), 'map', False)
    # Calling map(args, kwargs) (line 2293)
    map_call_result_583473 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 22), map_583466, *[asanyarray_583468, list_583469], **kwargs_583472)
    
    # Obtaining the member '__getitem__' of a type (line 2293)
    getitem___583474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 4), map_call_result_583473, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2293)
    subscript_call_result_583475 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 4), getitem___583474, int_583465)
    
    # Assigning a type to the variable 'tuple_var_assignment_579913' (line 2293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 4), 'tuple_var_assignment_579913', subscript_call_result_583475)
    
    # Assigning a Subscript to a Name (line 2293):
    
    # Obtaining the type of the subscript
    int_583476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, 4), 'int')
    
    # Call to map(...): (line 2293)
    # Processing the call arguments (line 2293)
    # Getting the type of 'np' (line 2293)
    np_583478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 26), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 2293)
    asanyarray_583479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 26), np_583478, 'asanyarray')
    
    # Obtaining an instance of the builtin type 'list' (line 2293)
    list_583480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, 41), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2293)
    # Adding element type (line 2293)
    # Getting the type of 'scores' (line 2293)
    scores_583481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 42), 'scores', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2293, 41), list_583480, scores_583481)
    # Adding element type (line 2293)
    # Getting the type of 'compare' (line 2293)
    compare_583482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 50), 'compare', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2293, 41), list_583480, compare_583482)
    
    # Processing the call keyword arguments (line 2293)
    kwargs_583483 = {}
    # Getting the type of 'map' (line 2293)
    map_583477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 22), 'map', False)
    # Calling map(args, kwargs) (line 2293)
    map_call_result_583484 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 22), map_583477, *[asanyarray_583479, list_583480], **kwargs_583483)
    
    # Obtaining the member '__getitem__' of a type (line 2293)
    getitem___583485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 4), map_call_result_583484, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2293)
    subscript_call_result_583486 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 4), getitem___583485, int_583476)
    
    # Assigning a type to the variable 'tuple_var_assignment_579914' (line 2293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 4), 'tuple_var_assignment_579914', subscript_call_result_583486)
    
    # Assigning a Name to a Name (line 2293):
    # Getting the type of 'tuple_var_assignment_579913' (line 2293)
    tuple_var_assignment_579913_583487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 4), 'tuple_var_assignment_579913')
    # Assigning a type to the variable 'scores' (line 2293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 4), 'scores', tuple_var_assignment_579913_583487)
    
    # Assigning a Name to a Name (line 2293):
    # Getting the type of 'tuple_var_assignment_579914' (line 2293)
    tuple_var_assignment_579914_583488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 4), 'tuple_var_assignment_579914')
    # Assigning a type to the variable 'compare' (line 2293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 12), 'compare', tuple_var_assignment_579914_583488)
    
    # Assigning a Call to a Name (line 2294):
    
    # Assigning a Call to a Name (line 2294):
    
    # Call to mean(...): (line 2294)
    # Processing the call keyword arguments (line 2294)
    # Getting the type of 'axis' (line 2294)
    axis_583491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 28), 'axis', False)
    keyword_583492 = axis_583491
    kwargs_583493 = {'axis': keyword_583492}
    # Getting the type of 'compare' (line 2294)
    compare_583489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 10), 'compare', False)
    # Obtaining the member 'mean' of a type (line 2294)
    mean_583490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2294, 10), compare_583489, 'mean')
    # Calling mean(args, kwargs) (line 2294)
    mean_call_result_583494 = invoke(stypy.reporting.localization.Localization(__file__, 2294, 10), mean_583490, *[], **kwargs_583493)
    
    # Assigning a type to the variable 'mns' (line 2294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 4), 'mns', mean_call_result_583494)
    
    # Assigning a Call to a Name (line 2295):
    
    # Assigning a Call to a Name (line 2295):
    
    # Call to std(...): (line 2295)
    # Processing the call keyword arguments (line 2295)
    # Getting the type of 'axis' (line 2295)
    axis_583497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 28), 'axis', False)
    keyword_583498 = axis_583497
    # Getting the type of 'ddof' (line 2295)
    ddof_583499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 39), 'ddof', False)
    keyword_583500 = ddof_583499
    kwargs_583501 = {'ddof': keyword_583500, 'axis': keyword_583498}
    # Getting the type of 'compare' (line 2295)
    compare_583495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 11), 'compare', False)
    # Obtaining the member 'std' of a type (line 2295)
    std_583496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2295, 11), compare_583495, 'std')
    # Calling std(args, kwargs) (line 2295)
    std_call_result_583502 = invoke(stypy.reporting.localization.Localization(__file__, 2295, 11), std_583496, *[], **kwargs_583501)
    
    # Assigning a type to the variable 'sstd' (line 2295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 4), 'sstd', std_call_result_583502)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'axis' (line 2296)
    axis_583503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 7), 'axis')
    
    # Getting the type of 'mns' (line 2296)
    mns_583504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 16), 'mns')
    # Obtaining the member 'ndim' of a type (line 2296)
    ndim_583505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2296, 16), mns_583504, 'ndim')
    # Getting the type of 'compare' (line 2296)
    compare_583506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 27), 'compare')
    # Obtaining the member 'ndim' of a type (line 2296)
    ndim_583507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2296, 27), compare_583506, 'ndim')
    # Applying the binary operator '<' (line 2296)
    result_lt_583508 = python_operator(stypy.reporting.localization.Localization(__file__, 2296, 16), '<', ndim_583505, ndim_583507)
    
    # Applying the binary operator 'and' (line 2296)
    result_and_keyword_583509 = python_operator(stypy.reporting.localization.Localization(__file__, 2296, 7), 'and', axis_583503, result_lt_583508)
    
    # Testing the type of an if condition (line 2296)
    if_condition_583510 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2296, 4), result_and_keyword_583509)
    # Assigning a type to the variable 'if_condition_583510' (line 2296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2296, 4), 'if_condition_583510', if_condition_583510)
    # SSA begins for if statement (line 2296)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'scores' (line 2297)
    scores_583511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 17), 'scores')
    
    # Call to expand_dims(...): (line 2297)
    # Processing the call arguments (line 2297)
    # Getting the type of 'mns' (line 2297)
    mns_583514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 41), 'mns', False)
    # Processing the call keyword arguments (line 2297)
    # Getting the type of 'axis' (line 2297)
    axis_583515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 51), 'axis', False)
    keyword_583516 = axis_583515
    kwargs_583517 = {'axis': keyword_583516}
    # Getting the type of 'np' (line 2297)
    np_583512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 26), 'np', False)
    # Obtaining the member 'expand_dims' of a type (line 2297)
    expand_dims_583513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2297, 26), np_583512, 'expand_dims')
    # Calling expand_dims(args, kwargs) (line 2297)
    expand_dims_call_result_583518 = invoke(stypy.reporting.localization.Localization(__file__, 2297, 26), expand_dims_583513, *[mns_583514], **kwargs_583517)
    
    # Applying the binary operator '-' (line 2297)
    result_sub_583519 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 17), '-', scores_583511, expand_dims_call_result_583518)
    
    
    # Call to expand_dims(...): (line 2298)
    # Processing the call arguments (line 2298)
    # Getting the type of 'sstd' (line 2298)
    sstd_583522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 31), 'sstd', False)
    # Processing the call keyword arguments (line 2298)
    # Getting the type of 'axis' (line 2298)
    axis_583523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 42), 'axis', False)
    keyword_583524 = axis_583523
    kwargs_583525 = {'axis': keyword_583524}
    # Getting the type of 'np' (line 2298)
    np_583520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 16), 'np', False)
    # Obtaining the member 'expand_dims' of a type (line 2298)
    expand_dims_583521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 16), np_583520, 'expand_dims')
    # Calling expand_dims(args, kwargs) (line 2298)
    expand_dims_call_result_583526 = invoke(stypy.reporting.localization.Localization(__file__, 2298, 16), expand_dims_583521, *[sstd_583522], **kwargs_583525)
    
    # Applying the binary operator 'div' (line 2297)
    result_div_583527 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 16), 'div', result_sub_583519, expand_dims_call_result_583526)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2297, 8), 'stypy_return_type', result_div_583527)
    # SSA branch for the else part of an if statement (line 2296)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'scores' (line 2300)
    scores_583528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 16), 'scores')
    # Getting the type of 'mns' (line 2300)
    mns_583529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 25), 'mns')
    # Applying the binary operator '-' (line 2300)
    result_sub_583530 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 16), '-', scores_583528, mns_583529)
    
    # Getting the type of 'sstd' (line 2300)
    sstd_583531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 32), 'sstd')
    # Applying the binary operator 'div' (line 2300)
    result_div_583532 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 15), 'div', result_sub_583530, sstd_583531)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2300, 8), 'stypy_return_type', result_div_583532)
    # SSA join for if statement (line 2296)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'zmap(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'zmap' in the type store
    # Getting the type of 'stypy_return_type' (line 2251)
    stypy_return_type_583533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_583533)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'zmap'
    return stypy_return_type_583533

# Assigning a type to the variable 'zmap' (line 2251)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2251, 0), 'zmap', zmap)

# Assigning a Dict to a Name (line 2305):

# Assigning a Dict to a Name (line 2305):

# Obtaining an instance of the builtin type 'dict' (line 2305)
dict_583534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 21), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2305)
# Adding element type (key, value) (line 2305)
str_583535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 22), 'str', 'raw')
float_583536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 29), 'float')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2305, 21), dict_583534, (str_583535, float_583536))
# Adding element type (key, value) (line 2305)
str_583537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2306, 22), 'str', 'normal')

# Call to erfinv(...): (line 2306)
# Processing the call arguments (line 2306)
float_583540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2306, 47), 'float')
# Processing the call keyword arguments (line 2306)
kwargs_583541 = {}
# Getting the type of 'special' (line 2306)
special_583538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 32), 'special', False)
# Obtaining the member 'erfinv' of a type (line 2306)
erfinv_583539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2306, 32), special_583538, 'erfinv')
# Calling erfinv(args, kwargs) (line 2306)
erfinv_call_result_583542 = invoke(stypy.reporting.localization.Localization(__file__, 2306, 32), erfinv_583539, *[float_583540], **kwargs_583541)

float_583543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2306, 54), 'float')
# Applying the binary operator '*' (line 2306)
result_mul_583544 = python_operator(stypy.reporting.localization.Localization(__file__, 2306, 32), '*', erfinv_call_result_583542, float_583543)


# Call to sqrt(...): (line 2306)
# Processing the call arguments (line 2306)
float_583547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2306, 70), 'float')
# Processing the call keyword arguments (line 2306)
kwargs_583548 = {}
# Getting the type of 'math' (line 2306)
math_583545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 60), 'math', False)
# Obtaining the member 'sqrt' of a type (line 2306)
sqrt_583546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2306, 60), math_583545, 'sqrt')
# Calling sqrt(args, kwargs) (line 2306)
sqrt_call_result_583549 = invoke(stypy.reporting.localization.Localization(__file__, 2306, 60), sqrt_583546, *[float_583547], **kwargs_583548)

# Applying the binary operator '*' (line 2306)
result_mul_583550 = python_operator(stypy.reporting.localization.Localization(__file__, 2306, 58), '*', result_mul_583544, sqrt_call_result_583549)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2305, 21), dict_583534, (str_583537, result_mul_583550))

# Assigning a type to the variable '_scale_conversions' (line 2305)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2305, 0), '_scale_conversions', dict_583534)

@norecursion
def iqr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2309)
    None_583551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 16), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2309)
    tuple_583552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2309)
    # Adding element type (line 2309)
    int_583553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 27), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2309, 27), tuple_583552, int_583553)
    # Adding element type (line 2309)
    int_583554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 31), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2309, 27), tuple_583552, int_583554)
    
    str_583555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 42), 'str', 'raw')
    str_583556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 60), 'str', 'propagate')
    str_583557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2310, 22), 'str', 'linear')
    # Getting the type of 'False' (line 2310)
    False_583558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 41), 'False')
    defaults = [None_583551, tuple_583552, str_583555, str_583556, str_583557, False_583558]
    # Create a new context for function 'iqr'
    module_type_store = module_type_store.open_function_context('iqr', 2309, 0, False)
    
    # Passed parameters checking function
    iqr.stypy_localization = localization
    iqr.stypy_type_of_self = None
    iqr.stypy_type_store = module_type_store
    iqr.stypy_function_name = 'iqr'
    iqr.stypy_param_names_list = ['x', 'axis', 'rng', 'scale', 'nan_policy', 'interpolation', 'keepdims']
    iqr.stypy_varargs_param_name = None
    iqr.stypy_kwargs_param_name = None
    iqr.stypy_call_defaults = defaults
    iqr.stypy_call_varargs = varargs
    iqr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'iqr', ['x', 'axis', 'rng', 'scale', 'nan_policy', 'interpolation', 'keepdims'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'iqr', localization, ['x', 'axis', 'rng', 'scale', 'nan_policy', 'interpolation', 'keepdims'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'iqr(...)' code ##################

    str_583559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2426, (-1)), 'str', '\n    Compute the interquartile range of the data along the specified axis.\n\n    The interquartile range (IQR) is the difference between the 75th and\n    25th percentile of the data. It is a measure of the dispersion\n    similar to standard deviation or variance, but is much more robust\n    against outliers [2]_.\n\n    The ``rng`` parameter allows this function to compute other\n    percentile ranges than the actual IQR. For example, setting\n    ``rng=(0, 100)`` is equivalent to `numpy.ptp`.\n\n    The IQR of an empty array is `np.nan`.\n\n    .. versionadded:: 0.18.0\n\n    Parameters\n    ----------\n    x : array_like\n        Input array or object that can be converted to an array.\n    axis : int or sequence of int, optional\n        Axis along which the range is computed. The default is to\n        compute the IQR for the entire array.\n    rng : Two-element sequence containing floats in range of [0,100] optional\n        Percentiles over which to compute the range. Each must be\n        between 0 and 100, inclusive. The default is the true IQR:\n        `(25, 75)`. The order of the elements is not important.\n    scale : scalar or str, optional\n        The numerical value of scale will be divided out of the final\n        result. The following string values are recognized:\n\n          \'raw\' : No scaling, just return the raw IQR.\n          \'normal\' : Scale by :math:`2 \\sqrt{2} erf^{-1}(\\frac{1}{2}) \\approx 1.349`.\n\n        The default is \'raw\'. Array-like scale is also allowed, as long\n        as it broadcasts correctly to the output such that\n        ``out / scale`` is a valid operation. The output dimensions\n        depend on the input array, `x`, the `axis` argument, and the\n        `keepdims` flag.\n    nan_policy : {\'propagate\', \'raise\', \'omit\'}, optional\n        Defines how to handle when input contains nan. \'propagate\'\n        returns nan, \'raise\' throws an error, \'omit\' performs the\n        calculations ignoring nan values. Default is \'propagate\'.\n    interpolation : {\'linear\', \'lower\', \'higher\', \'midpoint\', \'nearest\'}, optional\n        Specifies the interpolation method to use when the percentile\n        boundaries lie between two data points `i` and `j`:\n\n          * \'linear\' : `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n          * \'lower\' : `i`.\n          * \'higher\' : `j`.\n          * \'nearest\' : `i` or `j` whichever is nearest.\n          * \'midpoint\' : `(i + j) / 2`.\n\n        Default is \'linear\'.\n    keepdims : bool, optional\n        If this is set to `True`, the reduced axes are left in the\n        result as dimensions with size one. With this option, the result\n        will broadcast correctly against the original array `x`.\n\n    Returns\n    -------\n    iqr : scalar or ndarray\n        If ``axis=None``, a scalar is returned. If the input contains\n        integers or floats of smaller precision than ``np.float64``, then the\n        output data-type is ``np.float64``. Otherwise, the output data-type is\n        the same as that of the input.\n\n    See Also\n    --------\n    numpy.std, numpy.var\n\n    Examples\n    --------\n    >>> from scipy.stats import iqr\n    >>> x = np.array([[10, 7, 4], [3, 2, 1]])\n    >>> x\n    array([[10,  7,  4],\n           [ 3,  2,  1]])\n    >>> iqr(x)\n    4.0\n    >>> iqr(x, axis=0)\n    array([ 3.5,  2.5,  1.5])\n    >>> iqr(x, axis=1)\n    array([ 3.,  1.])\n    >>> iqr(x, axis=1, keepdims=True)\n    array([[ 3.],\n           [ 1.]])\n\n    Notes\n    -----\n    This function is heavily dependent on the version of `numpy` that is\n    installed. Versions greater than 1.11.0b3 are highly recommended, as they\n    include a number of enhancements and fixes to `numpy.percentile` and\n    `numpy.nanpercentile` that affect the operation of this function. The\n    following modifications apply:\n\n    Below 1.10.0 : `nan_policy` is poorly defined.\n        The default behavior of `numpy.percentile` is used for \'propagate\'. This\n        is a hybrid of \'omit\' and \'propagate\' that mostly yields a skewed\n        version of \'omit\' since NaNs are sorted to the end of the data. A\n        warning is raised if there are NaNs in the data.\n    Below 1.9.0: `numpy.nanpercentile` does not exist.\n        This means that `numpy.percentile` is used regardless of `nan_policy`\n        and a warning is issued. See previous item for a description of the\n        behavior.\n    Below 1.9.0: `keepdims` and `interpolation` are not supported.\n        The keywords get ignored with a warning if supplied with non-default\n        values. However, multiple axes are still supported.\n\n    References\n    ----------\n    .. [1] "Interquartile range" https://en.wikipedia.org/wiki/Interquartile_range\n    .. [2] "Robust measures of scale" https://en.wikipedia.org/wiki/Robust_measures_of_scale\n    .. [3] "Quantile" https://en.wikipedia.org/wiki/Quantile\n    ')
    
    # Assigning a Call to a Name (line 2427):
    
    # Assigning a Call to a Name (line 2427):
    
    # Call to asarray(...): (line 2427)
    # Processing the call arguments (line 2427)
    # Getting the type of 'x' (line 2427)
    x_583561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 16), 'x', False)
    # Processing the call keyword arguments (line 2427)
    kwargs_583562 = {}
    # Getting the type of 'asarray' (line 2427)
    asarray_583560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2427)
    asarray_call_result_583563 = invoke(stypy.reporting.localization.Localization(__file__, 2427, 8), asarray_583560, *[x_583561], **kwargs_583562)
    
    # Assigning a type to the variable 'x' (line 2427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2427, 4), 'x', asarray_call_result_583563)
    
    
    # Getting the type of 'x' (line 2431)
    x_583564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 11), 'x')
    # Obtaining the member 'size' of a type (line 2431)
    size_583565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2431, 11), x_583564, 'size')
    # Applying the 'not' unary operator (line 2431)
    result_not__583566 = python_operator(stypy.reporting.localization.Localization(__file__, 2431, 7), 'not', size_583565)
    
    # Testing the type of an if condition (line 2431)
    if_condition_583567 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2431, 4), result_not__583566)
    # Assigning a type to the variable 'if_condition_583567' (line 2431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2431, 4), 'if_condition_583567', if_condition_583567)
    # SSA begins for if statement (line 2431)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'np' (line 2432)
    np_583568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 15), 'np')
    # Obtaining the member 'nan' of a type (line 2432)
    nan_583569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 15), np_583568, 'nan')
    # Assigning a type to the variable 'stypy_return_type' (line 2432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2432, 8), 'stypy_return_type', nan_583569)
    # SSA join for if statement (line 2431)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isinstance(...): (line 2436)
    # Processing the call arguments (line 2436)
    # Getting the type of 'scale' (line 2436)
    scale_583571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 18), 'scale', False)
    # Getting the type of 'string_types' (line 2436)
    string_types_583572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 25), 'string_types', False)
    # Processing the call keyword arguments (line 2436)
    kwargs_583573 = {}
    # Getting the type of 'isinstance' (line 2436)
    isinstance_583570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2436)
    isinstance_call_result_583574 = invoke(stypy.reporting.localization.Localization(__file__, 2436, 7), isinstance_583570, *[scale_583571, string_types_583572], **kwargs_583573)
    
    # Testing the type of an if condition (line 2436)
    if_condition_583575 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2436, 4), isinstance_call_result_583574)
    # Assigning a type to the variable 'if_condition_583575' (line 2436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2436, 4), 'if_condition_583575', if_condition_583575)
    # SSA begins for if statement (line 2436)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2437):
    
    # Assigning a Call to a Name (line 2437):
    
    # Call to lower(...): (line 2437)
    # Processing the call keyword arguments (line 2437)
    kwargs_583578 = {}
    # Getting the type of 'scale' (line 2437)
    scale_583576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 20), 'scale', False)
    # Obtaining the member 'lower' of a type (line 2437)
    lower_583577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2437, 20), scale_583576, 'lower')
    # Calling lower(args, kwargs) (line 2437)
    lower_call_result_583579 = invoke(stypy.reporting.localization.Localization(__file__, 2437, 20), lower_583577, *[], **kwargs_583578)
    
    # Assigning a type to the variable 'scale_key' (line 2437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2437, 8), 'scale_key', lower_call_result_583579)
    
    
    # Getting the type of 'scale_key' (line 2438)
    scale_key_583580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 11), 'scale_key')
    # Getting the type of '_scale_conversions' (line 2438)
    _scale_conversions_583581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 28), '_scale_conversions')
    # Applying the binary operator 'notin' (line 2438)
    result_contains_583582 = python_operator(stypy.reporting.localization.Localization(__file__, 2438, 11), 'notin', scale_key_583580, _scale_conversions_583581)
    
    # Testing the type of an if condition (line 2438)
    if_condition_583583 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2438, 8), result_contains_583582)
    # Assigning a type to the variable 'if_condition_583583' (line 2438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2438, 8), 'if_condition_583583', if_condition_583583)
    # SSA begins for if statement (line 2438)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2439)
    # Processing the call arguments (line 2439)
    
    # Call to format(...): (line 2439)
    # Processing the call arguments (line 2439)
    # Getting the type of 'scale' (line 2439)
    scale_583587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 70), 'scale', False)
    # Processing the call keyword arguments (line 2439)
    kwargs_583588 = {}
    str_583585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2439, 29), 'str', '{0} not a valid scale for `iqr`')
    # Obtaining the member 'format' of a type (line 2439)
    format_583586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 29), str_583585, 'format')
    # Calling format(args, kwargs) (line 2439)
    format_call_result_583589 = invoke(stypy.reporting.localization.Localization(__file__, 2439, 29), format_583586, *[scale_583587], **kwargs_583588)
    
    # Processing the call keyword arguments (line 2439)
    kwargs_583590 = {}
    # Getting the type of 'ValueError' (line 2439)
    ValueError_583584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2439)
    ValueError_call_result_583591 = invoke(stypy.reporting.localization.Localization(__file__, 2439, 18), ValueError_583584, *[format_call_result_583589], **kwargs_583590)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2439, 12), ValueError_call_result_583591, 'raise parameter', BaseException)
    # SSA join for if statement (line 2438)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2440):
    
    # Assigning a Subscript to a Name (line 2440):
    
    # Obtaining the type of the subscript
    # Getting the type of 'scale_key' (line 2440)
    scale_key_583592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 35), 'scale_key')
    # Getting the type of '_scale_conversions' (line 2440)
    _scale_conversions_583593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 16), '_scale_conversions')
    # Obtaining the member '__getitem__' of a type (line 2440)
    getitem___583594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2440, 16), _scale_conversions_583593, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2440)
    subscript_call_result_583595 = invoke(stypy.reporting.localization.Localization(__file__, 2440, 16), getitem___583594, scale_key_583592)
    
    # Assigning a type to the variable 'scale' (line 2440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2440, 8), 'scale', subscript_call_result_583595)
    # SSA join for if statement (line 2436)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 2443):
    
    # Assigning a Subscript to a Name (line 2443):
    
    # Obtaining the type of the subscript
    int_583596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2443, 4), 'int')
    
    # Call to _contains_nan(...): (line 2443)
    # Processing the call arguments (line 2443)
    # Getting the type of 'x' (line 2443)
    x_583598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 45), 'x', False)
    # Getting the type of 'nan_policy' (line 2443)
    nan_policy_583599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 2443)
    kwargs_583600 = {}
    # Getting the type of '_contains_nan' (line 2443)
    _contains_nan_583597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 2443)
    _contains_nan_call_result_583601 = invoke(stypy.reporting.localization.Localization(__file__, 2443, 31), _contains_nan_583597, *[x_583598, nan_policy_583599], **kwargs_583600)
    
    # Obtaining the member '__getitem__' of a type (line 2443)
    getitem___583602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2443, 4), _contains_nan_call_result_583601, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2443)
    subscript_call_result_583603 = invoke(stypy.reporting.localization.Localization(__file__, 2443, 4), getitem___583602, int_583596)
    
    # Assigning a type to the variable 'tuple_var_assignment_579915' (line 2443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2443, 4), 'tuple_var_assignment_579915', subscript_call_result_583603)
    
    # Assigning a Subscript to a Name (line 2443):
    
    # Obtaining the type of the subscript
    int_583604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2443, 4), 'int')
    
    # Call to _contains_nan(...): (line 2443)
    # Processing the call arguments (line 2443)
    # Getting the type of 'x' (line 2443)
    x_583606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 45), 'x', False)
    # Getting the type of 'nan_policy' (line 2443)
    nan_policy_583607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 2443)
    kwargs_583608 = {}
    # Getting the type of '_contains_nan' (line 2443)
    _contains_nan_583605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 2443)
    _contains_nan_call_result_583609 = invoke(stypy.reporting.localization.Localization(__file__, 2443, 31), _contains_nan_583605, *[x_583606, nan_policy_583607], **kwargs_583608)
    
    # Obtaining the member '__getitem__' of a type (line 2443)
    getitem___583610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2443, 4), _contains_nan_call_result_583609, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2443)
    subscript_call_result_583611 = invoke(stypy.reporting.localization.Localization(__file__, 2443, 4), getitem___583610, int_583604)
    
    # Assigning a type to the variable 'tuple_var_assignment_579916' (line 2443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2443, 4), 'tuple_var_assignment_579916', subscript_call_result_583611)
    
    # Assigning a Name to a Name (line 2443):
    # Getting the type of 'tuple_var_assignment_579915' (line 2443)
    tuple_var_assignment_579915_583612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 4), 'tuple_var_assignment_579915')
    # Assigning a type to the variable 'contains_nan' (line 2443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2443, 4), 'contains_nan', tuple_var_assignment_579915_583612)
    
    # Assigning a Name to a Name (line 2443):
    # Getting the type of 'tuple_var_assignment_579916' (line 2443)
    tuple_var_assignment_579916_583613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 4), 'tuple_var_assignment_579916')
    # Assigning a type to the variable 'nan_policy' (line 2443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2443, 18), 'nan_policy', tuple_var_assignment_579916_583613)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 2445)
    contains_nan_583614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 2445)
    nan_policy_583615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 24), 'nan_policy')
    str_583616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2445, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 2445)
    result_eq_583617 = python_operator(stypy.reporting.localization.Localization(__file__, 2445, 24), '==', nan_policy_583615, str_583616)
    
    # Applying the binary operator 'and' (line 2445)
    result_and_keyword_583618 = python_operator(stypy.reporting.localization.Localization(__file__, 2445, 7), 'and', contains_nan_583614, result_eq_583617)
    
    # Testing the type of an if condition (line 2445)
    if_condition_583619 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2445, 4), result_and_keyword_583618)
    # Assigning a type to the variable 'if_condition_583619' (line 2445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2445, 4), 'if_condition_583619', if_condition_583619)
    # SSA begins for if statement (line 2445)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2446):
    
    # Assigning a Name to a Name (line 2446):
    # Getting the type of '_iqr_nanpercentile' (line 2446)
    _iqr_nanpercentile_583620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 26), '_iqr_nanpercentile')
    # Assigning a type to the variable 'percentile_func' (line 2446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2446, 8), 'percentile_func', _iqr_nanpercentile_583620)
    # SSA branch for the else part of an if statement (line 2445)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2448):
    
    # Assigning a Name to a Name (line 2448):
    # Getting the type of '_iqr_percentile' (line 2448)
    _iqr_percentile_583621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 26), '_iqr_percentile')
    # Assigning a type to the variable 'percentile_func' (line 2448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2448, 8), 'percentile_func', _iqr_percentile_583621)
    # SSA join for if statement (line 2445)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 2450)
    # Processing the call arguments (line 2450)
    # Getting the type of 'rng' (line 2450)
    rng_583623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 11), 'rng', False)
    # Processing the call keyword arguments (line 2450)
    kwargs_583624 = {}
    # Getting the type of 'len' (line 2450)
    len_583622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 7), 'len', False)
    # Calling len(args, kwargs) (line 2450)
    len_call_result_583625 = invoke(stypy.reporting.localization.Localization(__file__, 2450, 7), len_583622, *[rng_583623], **kwargs_583624)
    
    int_583626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2450, 19), 'int')
    # Applying the binary operator '!=' (line 2450)
    result_ne_583627 = python_operator(stypy.reporting.localization.Localization(__file__, 2450, 7), '!=', len_call_result_583625, int_583626)
    
    # Testing the type of an if condition (line 2450)
    if_condition_583628 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2450, 4), result_ne_583627)
    # Assigning a type to the variable 'if_condition_583628' (line 2450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2450, 4), 'if_condition_583628', if_condition_583628)
    # SSA begins for if statement (line 2450)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 2451)
    # Processing the call arguments (line 2451)
    str_583630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 24), 'str', 'quantile range must be two element sequence')
    # Processing the call keyword arguments (line 2451)
    kwargs_583631 = {}
    # Getting the type of 'TypeError' (line 2451)
    TypeError_583629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 2451)
    TypeError_call_result_583632 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 14), TypeError_583629, *[str_583630], **kwargs_583631)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2451, 8), TypeError_call_result_583632, 'raise parameter', BaseException)
    # SSA join for if statement (line 2450)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2453):
    
    # Assigning a Call to a Name (line 2453):
    
    # Call to sorted(...): (line 2453)
    # Processing the call arguments (line 2453)
    # Getting the type of 'rng' (line 2453)
    rng_583634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 17), 'rng', False)
    # Processing the call keyword arguments (line 2453)
    kwargs_583635 = {}
    # Getting the type of 'sorted' (line 2453)
    sorted_583633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 10), 'sorted', False)
    # Calling sorted(args, kwargs) (line 2453)
    sorted_call_result_583636 = invoke(stypy.reporting.localization.Localization(__file__, 2453, 10), sorted_583633, *[rng_583634], **kwargs_583635)
    
    # Assigning a type to the variable 'rng' (line 2453)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2453, 4), 'rng', sorted_call_result_583636)
    
    # Assigning a Call to a Name (line 2454):
    
    # Assigning a Call to a Name (line 2454):
    
    # Call to percentile_func(...): (line 2454)
    # Processing the call arguments (line 2454)
    # Getting the type of 'x' (line 2454)
    x_583638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 26), 'x', False)
    # Getting the type of 'rng' (line 2454)
    rng_583639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 29), 'rng', False)
    # Processing the call keyword arguments (line 2454)
    # Getting the type of 'axis' (line 2454)
    axis_583640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 39), 'axis', False)
    keyword_583641 = axis_583640
    # Getting the type of 'interpolation' (line 2454)
    interpolation_583642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 59), 'interpolation', False)
    keyword_583643 = interpolation_583642
    # Getting the type of 'keepdims' (line 2455)
    keepdims_583644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 35), 'keepdims', False)
    keyword_583645 = keepdims_583644
    # Getting the type of 'contains_nan' (line 2455)
    contains_nan_583646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 58), 'contains_nan', False)
    keyword_583647 = contains_nan_583646
    kwargs_583648 = {'interpolation': keyword_583643, 'contains_nan': keyword_583647, 'keepdims': keyword_583645, 'axis': keyword_583641}
    # Getting the type of 'percentile_func' (line 2454)
    percentile_func_583637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 10), 'percentile_func', False)
    # Calling percentile_func(args, kwargs) (line 2454)
    percentile_func_call_result_583649 = invoke(stypy.reporting.localization.Localization(__file__, 2454, 10), percentile_func_583637, *[x_583638, rng_583639], **kwargs_583648)
    
    # Assigning a type to the variable 'pct' (line 2454)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2454, 4), 'pct', percentile_func_call_result_583649)
    
    # Assigning a Call to a Name (line 2456):
    
    # Assigning a Call to a Name (line 2456):
    
    # Call to subtract(...): (line 2456)
    # Processing the call arguments (line 2456)
    
    # Obtaining the type of the subscript
    int_583652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2456, 26), 'int')
    # Getting the type of 'pct' (line 2456)
    pct_583653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 22), 'pct', False)
    # Obtaining the member '__getitem__' of a type (line 2456)
    getitem___583654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2456, 22), pct_583653, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2456)
    subscript_call_result_583655 = invoke(stypy.reporting.localization.Localization(__file__, 2456, 22), getitem___583654, int_583652)
    
    
    # Obtaining the type of the subscript
    int_583656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2456, 34), 'int')
    # Getting the type of 'pct' (line 2456)
    pct_583657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 30), 'pct', False)
    # Obtaining the member '__getitem__' of a type (line 2456)
    getitem___583658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2456, 30), pct_583657, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2456)
    subscript_call_result_583659 = invoke(stypy.reporting.localization.Localization(__file__, 2456, 30), getitem___583658, int_583656)
    
    # Processing the call keyword arguments (line 2456)
    kwargs_583660 = {}
    # Getting the type of 'np' (line 2456)
    np_583650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 10), 'np', False)
    # Obtaining the member 'subtract' of a type (line 2456)
    subtract_583651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2456, 10), np_583650, 'subtract')
    # Calling subtract(args, kwargs) (line 2456)
    subtract_call_result_583661 = invoke(stypy.reporting.localization.Localization(__file__, 2456, 10), subtract_583651, *[subscript_call_result_583655, subscript_call_result_583659], **kwargs_583660)
    
    # Assigning a type to the variable 'out' (line 2456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2456, 4), 'out', subtract_call_result_583661)
    
    
    # Getting the type of 'scale' (line 2458)
    scale_583662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 7), 'scale')
    float_583663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2458, 16), 'float')
    # Applying the binary operator '!=' (line 2458)
    result_ne_583664 = python_operator(stypy.reporting.localization.Localization(__file__, 2458, 7), '!=', scale_583662, float_583663)
    
    # Testing the type of an if condition (line 2458)
    if_condition_583665 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2458, 4), result_ne_583664)
    # Assigning a type to the variable 'if_condition_583665' (line 2458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 4), 'if_condition_583665', if_condition_583665)
    # SSA begins for if statement (line 2458)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'out' (line 2459)
    out_583666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2459, 8), 'out')
    # Getting the type of 'scale' (line 2459)
    scale_583667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2459, 15), 'scale')
    # Applying the binary operator 'div=' (line 2459)
    result_div_583668 = python_operator(stypy.reporting.localization.Localization(__file__, 2459, 8), 'div=', out_583666, scale_583667)
    # Assigning a type to the variable 'out' (line 2459)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2459, 8), 'out', result_div_583668)
    
    # SSA join for if statement (line 2458)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'out' (line 2461)
    out_583669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 11), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 2461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2461, 4), 'stypy_return_type', out_583669)
    
    # ################# End of 'iqr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'iqr' in the type store
    # Getting the type of 'stypy_return_type' (line 2309)
    stypy_return_type_583670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_583670)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'iqr'
    return stypy_return_type_583670

# Assigning a type to the variable 'iqr' (line 2309)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2309, 0), 'iqr', iqr)

@norecursion
def _iqr_percentile(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2464)
    None_583671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 31), 'None')
    str_583672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2464, 51), 'str', 'linear')
    # Getting the type of 'False' (line 2464)
    False_583673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 70), 'False')
    # Getting the type of 'False' (line 2464)
    False_583674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 90), 'False')
    defaults = [None_583671, str_583672, False_583673, False_583674]
    # Create a new context for function '_iqr_percentile'
    module_type_store = module_type_store.open_function_context('_iqr_percentile', 2464, 0, False)
    
    # Passed parameters checking function
    _iqr_percentile.stypy_localization = localization
    _iqr_percentile.stypy_type_of_self = None
    _iqr_percentile.stypy_type_store = module_type_store
    _iqr_percentile.stypy_function_name = '_iqr_percentile'
    _iqr_percentile.stypy_param_names_list = ['x', 'q', 'axis', 'interpolation', 'keepdims', 'contains_nan']
    _iqr_percentile.stypy_varargs_param_name = None
    _iqr_percentile.stypy_kwargs_param_name = None
    _iqr_percentile.stypy_call_defaults = defaults
    _iqr_percentile.stypy_call_varargs = varargs
    _iqr_percentile.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_iqr_percentile', ['x', 'q', 'axis', 'interpolation', 'keepdims', 'contains_nan'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_iqr_percentile', localization, ['x', 'q', 'axis', 'interpolation', 'keepdims', 'contains_nan'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_iqr_percentile(...)' code ##################

    str_583675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2471, (-1)), 'str', '\n    Private wrapper that works around older versions of `numpy`.\n\n    While this function is pretty much necessary for the moment, it\n    should be removed as soon as the minimum supported numpy version\n    allows.\n    ')
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 2472)
    contains_nan_583676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 7), 'contains_nan')
    
    
    # Call to NumpyVersion(...): (line 2472)
    # Processing the call arguments (line 2472)
    # Getting the type of 'np' (line 2472)
    np_583678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 37), 'np', False)
    # Obtaining the member '__version__' of a type (line 2472)
    version___583679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2472, 37), np_583678, '__version__')
    # Processing the call keyword arguments (line 2472)
    kwargs_583680 = {}
    # Getting the type of 'NumpyVersion' (line 2472)
    NumpyVersion_583677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 24), 'NumpyVersion', False)
    # Calling NumpyVersion(args, kwargs) (line 2472)
    NumpyVersion_call_result_583681 = invoke(stypy.reporting.localization.Localization(__file__, 2472, 24), NumpyVersion_583677, *[version___583679], **kwargs_583680)
    
    str_583682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2472, 55), 'str', '1.10.0a')
    # Applying the binary operator '<' (line 2472)
    result_lt_583683 = python_operator(stypy.reporting.localization.Localization(__file__, 2472, 24), '<', NumpyVersion_call_result_583681, str_583682)
    
    # Applying the binary operator 'and' (line 2472)
    result_and_keyword_583684 = python_operator(stypy.reporting.localization.Localization(__file__, 2472, 7), 'and', contains_nan_583676, result_lt_583683)
    
    # Testing the type of an if condition (line 2472)
    if_condition_583685 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2472, 4), result_and_keyword_583684)
    # Assigning a type to the variable 'if_condition_583685' (line 2472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2472, 4), 'if_condition_583685', if_condition_583685)
    # SSA begins for if statement (line 2472)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 2476):
    
    # Assigning a Str to a Name (line 2476):
    str_583686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2476, 14), 'str', "Keyword nan_policy='propagate' not correctly supported for numpy versions < 1.10.x. The default behavior of `numpy.percentile` will be used.")
    # Assigning a type to the variable 'msg' (line 2476)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2476, 8), 'msg', str_583686)
    
    # Call to warn(...): (line 2479)
    # Processing the call arguments (line 2479)
    # Getting the type of 'msg' (line 2479)
    msg_583689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 22), 'msg', False)
    # Getting the type of 'RuntimeWarning' (line 2479)
    RuntimeWarning_583690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 27), 'RuntimeWarning', False)
    # Processing the call keyword arguments (line 2479)
    kwargs_583691 = {}
    # Getting the type of 'warnings' (line 2479)
    warnings_583687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2479)
    warn_583688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 8), warnings_583687, 'warn')
    # Calling warn(args, kwargs) (line 2479)
    warn_call_result_583692 = invoke(stypy.reporting.localization.Localization(__file__, 2479, 8), warn_583688, *[msg_583689, RuntimeWarning_583690], **kwargs_583691)
    
    # SSA join for if statement (line 2472)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 2481)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 2488):
    
    # Assigning a Call to a Name (line 2488):
    
    # Call to percentile(...): (line 2488)
    # Processing the call arguments (line 2488)
    # Getting the type of 'x' (line 2488)
    x_583695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2488, 31), 'x', False)
    # Getting the type of 'q' (line 2488)
    q_583696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2488, 34), 'q', False)
    # Processing the call keyword arguments (line 2488)
    # Getting the type of 'axis' (line 2488)
    axis_583697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2488, 42), 'axis', False)
    keyword_583698 = axis_583697
    # Getting the type of 'keepdims' (line 2488)
    keepdims_583699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2488, 57), 'keepdims', False)
    keyword_583700 = keepdims_583699
    # Getting the type of 'interpolation' (line 2489)
    interpolation_583701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 45), 'interpolation', False)
    keyword_583702 = interpolation_583701
    kwargs_583703 = {'interpolation': keyword_583702, 'keepdims': keyword_583700, 'axis': keyword_583698}
    # Getting the type of 'np' (line 2488)
    np_583693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2488, 17), 'np', False)
    # Obtaining the member 'percentile' of a type (line 2488)
    percentile_583694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2488, 17), np_583693, 'percentile')
    # Calling percentile(args, kwargs) (line 2488)
    percentile_call_result_583704 = invoke(stypy.reporting.localization.Localization(__file__, 2488, 17), percentile_583694, *[x_583695, q_583696], **kwargs_583703)
    
    # Assigning a type to the variable 'result' (line 2488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2488, 8), 'result', percentile_call_result_583704)
    # SSA branch for the except part of a try statement (line 2481)
    # SSA branch for the except 'TypeError' branch of a try statement (line 2481)
    module_type_store.open_ssa_branch('except')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'interpolation' (line 2491)
    interpolation_583705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2491, 11), 'interpolation')
    str_583706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, 28), 'str', 'linear')
    # Applying the binary operator '!=' (line 2491)
    result_ne_583707 = python_operator(stypy.reporting.localization.Localization(__file__, 2491, 11), '!=', interpolation_583705, str_583706)
    
    # Getting the type of 'keepdims' (line 2491)
    keepdims_583708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2491, 40), 'keepdims')
    # Applying the binary operator 'or' (line 2491)
    result_or_keyword_583709 = python_operator(stypy.reporting.localization.Localization(__file__, 2491, 11), 'or', result_ne_583707, keepdims_583708)
    
    # Testing the type of an if condition (line 2491)
    if_condition_583710 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2491, 8), result_or_keyword_583709)
    # Assigning a type to the variable 'if_condition_583710' (line 2491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2491, 8), 'if_condition_583710', if_condition_583710)
    # SSA begins for if statement (line 2491)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2493)
    # Processing the call arguments (line 2493)
    str_583713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2493, 26), 'str', 'Keywords interpolation and keepdims not supported for your version of numpy')
    # Getting the type of 'RuntimeWarning' (line 2494)
    RuntimeWarning_583714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 55), 'RuntimeWarning', False)
    # Processing the call keyword arguments (line 2493)
    kwargs_583715 = {}
    # Getting the type of 'warnings' (line 2493)
    warnings_583711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2493)
    warn_583712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2493, 12), warnings_583711, 'warn')
    # Calling warn(args, kwargs) (line 2493)
    warn_call_result_583716 = invoke(stypy.reporting.localization.Localization(__file__, 2493, 12), warn_583712, *[str_583713, RuntimeWarning_583714], **kwargs_583715)
    
    # SSA join for if statement (line 2491)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 2495)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 2497):
    
    # Assigning a Call to a Name (line 2497):
    
    # Call to len(...): (line 2497)
    # Processing the call arguments (line 2497)
    # Getting the type of 'axis' (line 2497)
    axis_583718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 32), 'axis', False)
    # Processing the call keyword arguments (line 2497)
    kwargs_583719 = {}
    # Getting the type of 'len' (line 2497)
    len_583717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 28), 'len', False)
    # Calling len(args, kwargs) (line 2497)
    len_call_result_583720 = invoke(stypy.reporting.localization.Localization(__file__, 2497, 28), len_583717, *[axis_583718], **kwargs_583719)
    
    # Assigning a type to the variable 'original_size' (line 2497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2497, 12), 'original_size', len_call_result_583720)
    # SSA branch for the except part of a try statement (line 2495)
    # SSA branch for the except 'TypeError' branch of a try statement (line 2495)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA branch for the else branch of a try statement (line 2495)
    module_type_store.open_ssa_branch('except else')
    
    # Assigning a Call to a Name (line 2502):
    
    # Assigning a Call to a Name (line 2502):
    
    # Call to unique(...): (line 2502)
    # Processing the call arguments (line 2502)
    
    # Call to asarray(...): (line 2502)
    # Processing the call arguments (line 2502)
    # Getting the type of 'axis' (line 2502)
    axis_583725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 40), 'axis', False)
    # Processing the call keyword arguments (line 2502)
    kwargs_583726 = {}
    # Getting the type of 'np' (line 2502)
    np_583723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 29), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2502)
    asarray_583724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2502, 29), np_583723, 'asarray')
    # Calling asarray(args, kwargs) (line 2502)
    asarray_call_result_583727 = invoke(stypy.reporting.localization.Localization(__file__, 2502, 29), asarray_583724, *[axis_583725], **kwargs_583726)
    
    # Getting the type of 'x' (line 2502)
    x_583728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 48), 'x', False)
    # Obtaining the member 'ndim' of a type (line 2502)
    ndim_583729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2502, 48), x_583728, 'ndim')
    # Applying the binary operator '%' (line 2502)
    result_mod_583730 = python_operator(stypy.reporting.localization.Localization(__file__, 2502, 29), '%', asarray_call_result_583727, ndim_583729)
    
    # Processing the call keyword arguments (line 2502)
    kwargs_583731 = {}
    # Getting the type of 'np' (line 2502)
    np_583721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 19), 'np', False)
    # Obtaining the member 'unique' of a type (line 2502)
    unique_583722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2502, 19), np_583721, 'unique')
    # Calling unique(args, kwargs) (line 2502)
    unique_call_result_583732 = invoke(stypy.reporting.localization.Localization(__file__, 2502, 19), unique_583722, *[result_mod_583730], **kwargs_583731)
    
    # Assigning a type to the variable 'axis' (line 2502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2502, 12), 'axis', unique_call_result_583732)
    
    
    # Getting the type of 'original_size' (line 2503)
    original_size_583733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 15), 'original_size')
    # Getting the type of 'axis' (line 2503)
    axis_583734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 31), 'axis')
    # Obtaining the member 'size' of a type (line 2503)
    size_583735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2503, 31), axis_583734, 'size')
    # Applying the binary operator '>' (line 2503)
    result_gt_583736 = python_operator(stypy.reporting.localization.Localization(__file__, 2503, 15), '>', original_size_583733, size_583735)
    
    # Testing the type of an if condition (line 2503)
    if_condition_583737 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2503, 12), result_gt_583736)
    # Assigning a type to the variable 'if_condition_583737' (line 2503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2503, 12), 'if_condition_583737', if_condition_583737)
    # SSA begins for if statement (line 2503)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2505)
    # Processing the call arguments (line 2505)
    str_583739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2505, 33), 'str', 'duplicate value in axis')
    # Processing the call keyword arguments (line 2505)
    kwargs_583740 = {}
    # Getting the type of 'ValueError' (line 2505)
    ValueError_583738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2505)
    ValueError_call_result_583741 = invoke(stypy.reporting.localization.Localization(__file__, 2505, 22), ValueError_583738, *[str_583739], **kwargs_583740)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2505, 16), ValueError_call_result_583741, 'raise parameter', BaseException)
    # SSA join for if statement (line 2503)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'axis' (line 2506)
    axis_583742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 15), 'axis')
    # Obtaining the member 'size' of a type (line 2506)
    size_583743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2506, 15), axis_583742, 'size')
    # Getting the type of 'x' (line 2506)
    x_583744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 28), 'x')
    # Obtaining the member 'ndim' of a type (line 2506)
    ndim_583745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2506, 28), x_583744, 'ndim')
    # Applying the binary operator '==' (line 2506)
    result_eq_583746 = python_operator(stypy.reporting.localization.Localization(__file__, 2506, 15), '==', size_583743, ndim_583745)
    
    # Testing the type of an if condition (line 2506)
    if_condition_583747 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2506, 12), result_eq_583746)
    # Assigning a type to the variable 'if_condition_583747' (line 2506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2506, 12), 'if_condition_583747', if_condition_583747)
    # SSA begins for if statement (line 2506)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2508):
    
    # Assigning a Name to a Name (line 2508):
    # Getting the type of 'None' (line 2508)
    None_583748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2508, 23), 'None')
    # Assigning a type to the variable 'axis' (line 2508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2508, 16), 'axis', None_583748)
    # SSA branch for the else part of an if statement (line 2506)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'axis' (line 2509)
    axis_583749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 17), 'axis')
    # Obtaining the member 'size' of a type (line 2509)
    size_583750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2509, 17), axis_583749, 'size')
    int_583751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2509, 30), 'int')
    # Applying the binary operator '==' (line 2509)
    result_eq_583752 = python_operator(stypy.reporting.localization.Localization(__file__, 2509, 17), '==', size_583750, int_583751)
    
    # Testing the type of an if condition (line 2509)
    if_condition_583753 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2509, 17), result_eq_583752)
    # Assigning a type to the variable 'if_condition_583753' (line 2509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2509, 17), 'if_condition_583753', if_condition_583753)
    # SSA begins for if statement (line 2509)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2511):
    
    # Assigning a Subscript to a Name (line 2511):
    
    # Obtaining the type of the subscript
    int_583754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2511, 28), 'int')
    # Getting the type of 'axis' (line 2511)
    axis_583755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 23), 'axis')
    # Obtaining the member '__getitem__' of a type (line 2511)
    getitem___583756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2511, 23), axis_583755, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2511)
    subscript_call_result_583757 = invoke(stypy.reporting.localization.Localization(__file__, 2511, 23), getitem___583756, int_583754)
    
    # Assigning a type to the variable 'axis' (line 2511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2511, 16), 'axis', subscript_call_result_583757)
    # SSA branch for the else part of an if statement (line 2509)
    module_type_store.open_ssa_branch('else')
    
    
    # Obtaining the type of the subscript
    int_583758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2514, 33), 'int')
    slice_583759 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2514, 26), None, None, int_583758)
    # Getting the type of 'axis' (line 2514)
    axis_583760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 26), 'axis')
    # Obtaining the member '__getitem__' of a type (line 2514)
    getitem___583761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2514, 26), axis_583760, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2514)
    subscript_call_result_583762 = invoke(stypy.reporting.localization.Localization(__file__, 2514, 26), getitem___583761, slice_583759)
    
    # Testing the type of a for loop iterable (line 2514)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2514, 16), subscript_call_result_583762)
    # Getting the type of the for loop variable (line 2514)
    for_loop_var_583763 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2514, 16), subscript_call_result_583762)
    # Assigning a type to the variable 'ax' (line 2514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2514, 16), 'ax', for_loop_var_583763)
    # SSA begins for a for statement (line 2514)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 2515):
    
    # Assigning a Call to a Name (line 2515):
    
    # Call to rollaxis(...): (line 2515)
    # Processing the call arguments (line 2515)
    # Getting the type of 'x' (line 2515)
    x_583766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 36), 'x', False)
    # Getting the type of 'ax' (line 2515)
    ax_583767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 39), 'ax', False)
    # Getting the type of 'x' (line 2515)
    x_583768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 43), 'x', False)
    # Obtaining the member 'ndim' of a type (line 2515)
    ndim_583769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 43), x_583768, 'ndim')
    # Processing the call keyword arguments (line 2515)
    kwargs_583770 = {}
    # Getting the type of 'np' (line 2515)
    np_583764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 24), 'np', False)
    # Obtaining the member 'rollaxis' of a type (line 2515)
    rollaxis_583765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 24), np_583764, 'rollaxis')
    # Calling rollaxis(args, kwargs) (line 2515)
    rollaxis_call_result_583771 = invoke(stypy.reporting.localization.Localization(__file__, 2515, 24), rollaxis_583765, *[x_583766, ax_583767, ndim_583769], **kwargs_583770)
    
    # Assigning a type to the variable 'x' (line 2515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2515, 20), 'x', rollaxis_call_result_583771)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2516):
    
    # Assigning a Call to a Name (line 2516):
    
    # Call to reshape(...): (line 2516)
    # Processing the call arguments (line 2516)
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'axis' (line 2516)
    axis_583774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 40), 'axis', False)
    # Obtaining the member 'size' of a type (line 2516)
    size_583775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 40), axis_583774, 'size')
    # Applying the 'usub' unary operator (line 2516)
    result___neg___583776 = python_operator(stypy.reporting.localization.Localization(__file__, 2516, 39), 'usub', size_583775)
    
    slice_583777 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2516, 30), None, result___neg___583776, None)
    # Getting the type of 'x' (line 2516)
    x_583778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 30), 'x', False)
    # Obtaining the member 'shape' of a type (line 2516)
    shape_583779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 30), x_583778, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2516)
    getitem___583780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 30), shape_583779, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2516)
    subscript_call_result_583781 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 30), getitem___583780, slice_583777)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2517)
    tuple_583782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2517, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2517)
    # Adding element type (line 2517)
    
    # Call to prod(...): (line 2517)
    # Processing the call arguments (line 2517)
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'axis' (line 2517)
    axis_583785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 48), 'axis', False)
    # Obtaining the member 'size' of a type (line 2517)
    size_583786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 48), axis_583785, 'size')
    # Applying the 'usub' unary operator (line 2517)
    result___neg___583787 = python_operator(stypy.reporting.localization.Localization(__file__, 2517, 47), 'usub', size_583786)
    
    slice_583788 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2517, 39), result___neg___583787, None, None)
    # Getting the type of 'x' (line 2517)
    x_583789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 39), 'x', False)
    # Obtaining the member 'shape' of a type (line 2517)
    shape_583790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 39), x_583789, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2517)
    getitem___583791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 39), shape_583790, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2517)
    subscript_call_result_583792 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 39), getitem___583791, slice_583788)
    
    # Processing the call keyword arguments (line 2517)
    kwargs_583793 = {}
    # Getting the type of 'np' (line 2517)
    np_583783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 31), 'np', False)
    # Obtaining the member 'prod' of a type (line 2517)
    prod_583784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 31), np_583783, 'prod')
    # Calling prod(args, kwargs) (line 2517)
    prod_call_result_583794 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 31), prod_583784, *[subscript_call_result_583792], **kwargs_583793)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2517, 31), tuple_583782, prod_call_result_583794)
    
    # Applying the binary operator '+' (line 2516)
    result_add_583795 = python_operator(stypy.reporting.localization.Localization(__file__, 2516, 30), '+', subscript_call_result_583781, tuple_583782)
    
    # Processing the call keyword arguments (line 2516)
    kwargs_583796 = {}
    # Getting the type of 'x' (line 2516)
    x_583772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 20), 'x', False)
    # Obtaining the member 'reshape' of a type (line 2516)
    reshape_583773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 20), x_583772, 'reshape')
    # Calling reshape(args, kwargs) (line 2516)
    reshape_call_result_583797 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 20), reshape_583773, *[result_add_583795], **kwargs_583796)
    
    # Assigning a type to the variable 'x' (line 2516)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2516, 16), 'x', reshape_call_result_583797)
    
    # Assigning a Num to a Name (line 2518):
    
    # Assigning a Num to a Name (line 2518):
    int_583798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2518, 23), 'int')
    # Assigning a type to the variable 'axis' (line 2518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2518, 16), 'axis', int_583798)
    # SSA join for if statement (line 2509)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2506)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for try-except statement (line 2495)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2519):
    
    # Assigning a Call to a Name (line 2519):
    
    # Call to percentile(...): (line 2519)
    # Processing the call arguments (line 2519)
    # Getting the type of 'x' (line 2519)
    x_583801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 31), 'x', False)
    # Getting the type of 'q' (line 2519)
    q_583802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 34), 'q', False)
    # Processing the call keyword arguments (line 2519)
    # Getting the type of 'axis' (line 2519)
    axis_583803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 42), 'axis', False)
    keyword_583804 = axis_583803
    kwargs_583805 = {'axis': keyword_583804}
    # Getting the type of 'np' (line 2519)
    np_583799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 17), 'np', False)
    # Obtaining the member 'percentile' of a type (line 2519)
    percentile_583800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2519, 17), np_583799, 'percentile')
    # Calling percentile(args, kwargs) (line 2519)
    percentile_call_result_583806 = invoke(stypy.reporting.localization.Localization(__file__, 2519, 17), percentile_583800, *[x_583801, q_583802], **kwargs_583805)
    
    # Assigning a type to the variable 'result' (line 2519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2519, 8), 'result', percentile_call_result_583806)
    # SSA join for try-except statement (line 2481)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 2521)
    result_583807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 2521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2521, 4), 'stypy_return_type', result_583807)
    
    # ################# End of '_iqr_percentile(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_iqr_percentile' in the type store
    # Getting the type of 'stypy_return_type' (line 2464)
    stypy_return_type_583808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_583808)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_iqr_percentile'
    return stypy_return_type_583808

# Assigning a type to the variable '_iqr_percentile' (line 2464)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2464, 0), '_iqr_percentile', _iqr_percentile)

@norecursion
def _iqr_nanpercentile(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2524)
    None_583809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 34), 'None')
    str_583810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2524, 54), 'str', 'linear')
    # Getting the type of 'False' (line 2524)
    False_583811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 73), 'False')
    # Getting the type of 'False' (line 2525)
    False_583812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 36), 'False')
    defaults = [None_583809, str_583810, False_583811, False_583812]
    # Create a new context for function '_iqr_nanpercentile'
    module_type_store = module_type_store.open_function_context('_iqr_nanpercentile', 2524, 0, False)
    
    # Passed parameters checking function
    _iqr_nanpercentile.stypy_localization = localization
    _iqr_nanpercentile.stypy_type_of_self = None
    _iqr_nanpercentile.stypy_type_store = module_type_store
    _iqr_nanpercentile.stypy_function_name = '_iqr_nanpercentile'
    _iqr_nanpercentile.stypy_param_names_list = ['x', 'q', 'axis', 'interpolation', 'keepdims', 'contains_nan']
    _iqr_nanpercentile.stypy_varargs_param_name = None
    _iqr_nanpercentile.stypy_kwargs_param_name = None
    _iqr_nanpercentile.stypy_call_defaults = defaults
    _iqr_nanpercentile.stypy_call_varargs = varargs
    _iqr_nanpercentile.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_iqr_nanpercentile', ['x', 'q', 'axis', 'interpolation', 'keepdims', 'contains_nan'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_iqr_nanpercentile', localization, ['x', 'q', 'axis', 'interpolation', 'keepdims', 'contains_nan'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_iqr_nanpercentile(...)' code ##################

    str_583813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2539, (-1)), 'str', '\n    Private wrapper that works around the following:\n\n      1. A bug in `np.nanpercentile` that was around until numpy version\n         1.11.0.\n      2. A bug in `np.percentile` NaN handling that was fixed in numpy\n         version 1.10.0.\n      3. The non-existence of `np.nanpercentile` before numpy version\n         1.9.0.\n\n    While this function is pretty much necessary for the moment, it\n    should be removed as soon as the minimum supported numpy version\n    allows.\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 2540)
    str_583814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2540, 19), 'str', 'nanpercentile')
    # Getting the type of 'np' (line 2540)
    np_583815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2540, 15), 'np')
    
    (may_be_583816, more_types_in_union_583817) = may_provide_member(str_583814, np_583815)

    if may_be_583816:

        if more_types_in_union_583817:
            # Runtime conditional SSA (line 2540)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'np' (line 2540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2540, 4), 'np', remove_not_member_provider_from_union(np_583815, 'nanpercentile'))
        
        # Assigning a Call to a Name (line 2542):
        
        # Assigning a Call to a Name (line 2542):
        
        # Call to nanpercentile(...): (line 2542)
        # Processing the call arguments (line 2542)
        # Getting the type of 'x' (line 2542)
        x_583820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 34), 'x', False)
        # Getting the type of 'q' (line 2542)
        q_583821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 37), 'q', False)
        # Processing the call keyword arguments (line 2542)
        # Getting the type of 'axis' (line 2542)
        axis_583822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 45), 'axis', False)
        keyword_583823 = axis_583822
        # Getting the type of 'interpolation' (line 2543)
        interpolation_583824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 48), 'interpolation', False)
        keyword_583825 = interpolation_583824
        # Getting the type of 'keepdims' (line 2544)
        keepdims_583826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 43), 'keepdims', False)
        keyword_583827 = keepdims_583826
        kwargs_583828 = {'interpolation': keyword_583825, 'keepdims': keyword_583827, 'axis': keyword_583823}
        # Getting the type of 'np' (line 2542)
        np_583818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 17), 'np', False)
        # Obtaining the member 'nanpercentile' of a type (line 2542)
        nanpercentile_583819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2542, 17), np_583818, 'nanpercentile')
        # Calling nanpercentile(args, kwargs) (line 2542)
        nanpercentile_call_result_583829 = invoke(stypy.reporting.localization.Localization(__file__, 2542, 17), nanpercentile_583819, *[x_583820, q_583821], **kwargs_583828)
        
        # Assigning a type to the variable 'result' (line 2542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2542, 8), 'result', nanpercentile_call_result_583829)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'result' (line 2548)
        result_583830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 11), 'result')
        # Obtaining the member 'ndim' of a type (line 2548)
        ndim_583831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 11), result_583830, 'ndim')
        int_583832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2548, 25), 'int')
        # Applying the binary operator '>' (line 2548)
        result_gt_583833 = python_operator(stypy.reporting.localization.Localization(__file__, 2548, 11), '>', ndim_583831, int_583832)
        
        
        
        # Call to NumpyVersion(...): (line 2548)
        # Processing the call arguments (line 2548)
        # Getting the type of 'np' (line 2548)
        np_583835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 44), 'np', False)
        # Obtaining the member '__version__' of a type (line 2548)
        version___583836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 44), np_583835, '__version__')
        # Processing the call keyword arguments (line 2548)
        kwargs_583837 = {}
        # Getting the type of 'NumpyVersion' (line 2548)
        NumpyVersion_583834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 31), 'NumpyVersion', False)
        # Calling NumpyVersion(args, kwargs) (line 2548)
        NumpyVersion_call_result_583838 = invoke(stypy.reporting.localization.Localization(__file__, 2548, 31), NumpyVersion_583834, *[version___583836], **kwargs_583837)
        
        str_583839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2548, 62), 'str', '1.11.0a')
        # Applying the binary operator '<' (line 2548)
        result_lt_583840 = python_operator(stypy.reporting.localization.Localization(__file__, 2548, 31), '<', NumpyVersion_call_result_583838, str_583839)
        
        # Applying the binary operator 'and' (line 2548)
        result_and_keyword_583841 = python_operator(stypy.reporting.localization.Localization(__file__, 2548, 11), 'and', result_gt_583833, result_lt_583840)
        
        # Testing the type of an if condition (line 2548)
        if_condition_583842 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2548, 8), result_and_keyword_583841)
        # Assigning a type to the variable 'if_condition_583842' (line 2548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2548, 8), 'if_condition_583842', if_condition_583842)
        # SSA begins for if statement (line 2548)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2549):
        
        # Assigning a Call to a Name (line 2549):
        
        # Call to asarray(...): (line 2549)
        # Processing the call arguments (line 2549)
        # Getting the type of 'axis' (line 2549)
        axis_583845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 30), 'axis', False)
        # Processing the call keyword arguments (line 2549)
        kwargs_583846 = {}
        # Getting the type of 'np' (line 2549)
        np_583843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 19), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2549)
        asarray_583844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2549, 19), np_583843, 'asarray')
        # Calling asarray(args, kwargs) (line 2549)
        asarray_call_result_583847 = invoke(stypy.reporting.localization.Localization(__file__, 2549, 19), asarray_583844, *[axis_583845], **kwargs_583846)
        
        # Assigning a type to the variable 'axis' (line 2549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2549, 12), 'axis', asarray_call_result_583847)
        
        
        # Getting the type of 'axis' (line 2550)
        axis_583848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 15), 'axis')
        # Obtaining the member 'size' of a type (line 2550)
        size_583849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2550, 15), axis_583848, 'size')
        int_583850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2550, 28), 'int')
        # Applying the binary operator '==' (line 2550)
        result_eq_583851 = python_operator(stypy.reporting.localization.Localization(__file__, 2550, 15), '==', size_583849, int_583850)
        
        # Testing the type of an if condition (line 2550)
        if_condition_583852 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2550, 12), result_eq_583851)
        # Assigning a type to the variable 'if_condition_583852' (line 2550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2550, 12), 'if_condition_583852', if_condition_583852)
        # SSA begins for if statement (line 2550)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'axis' (line 2552)
        axis_583853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 19), 'axis')
        # Obtaining the member 'ndim' of a type (line 2552)
        ndim_583854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2552, 19), axis_583853, 'ndim')
        int_583855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2552, 32), 'int')
        # Applying the binary operator '==' (line 2552)
        result_eq_583856 = python_operator(stypy.reporting.localization.Localization(__file__, 2552, 19), '==', ndim_583854, int_583855)
        
        # Testing the type of an if condition (line 2552)
        if_condition_583857 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2552, 16), result_eq_583856)
        # Assigning a type to the variable 'if_condition_583857' (line 2552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2552, 16), 'if_condition_583857', if_condition_583857)
        # SSA begins for if statement (line 2552)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 2553):
        
        # Assigning a Subscript to a Name (line 2553):
        
        # Obtaining the type of the subscript
        # Getting the type of 'None' (line 2553)
        None_583858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 32), 'None')
        # Getting the type of 'axis' (line 2553)
        axis_583859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 27), 'axis')
        # Obtaining the member '__getitem__' of a type (line 2553)
        getitem___583860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 27), axis_583859, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2553)
        subscript_call_result_583861 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 27), getitem___583860, None_583858)
        
        # Assigning a type to the variable 'axis' (line 2553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 20), 'axis', subscript_call_result_583861)
        # SSA join for if statement (line 2552)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2554):
        
        # Assigning a Call to a Name (line 2554):
        
        # Call to rollaxis(...): (line 2554)
        # Processing the call arguments (line 2554)
        # Getting the type of 'result' (line 2554)
        result_583864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 37), 'result', False)
        
        # Obtaining the type of the subscript
        int_583865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2554, 50), 'int')
        # Getting the type of 'axis' (line 2554)
        axis_583866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 45), 'axis', False)
        # Obtaining the member '__getitem__' of a type (line 2554)
        getitem___583867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2554, 45), axis_583866, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2554)
        subscript_call_result_583868 = invoke(stypy.reporting.localization.Localization(__file__, 2554, 45), getitem___583867, int_583865)
        
        # Processing the call keyword arguments (line 2554)
        kwargs_583869 = {}
        # Getting the type of 'np' (line 2554)
        np_583862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 25), 'np', False)
        # Obtaining the member 'rollaxis' of a type (line 2554)
        rollaxis_583863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2554, 25), np_583862, 'rollaxis')
        # Calling rollaxis(args, kwargs) (line 2554)
        rollaxis_call_result_583870 = invoke(stypy.reporting.localization.Localization(__file__, 2554, 25), rollaxis_583863, *[result_583864, subscript_call_result_583868], **kwargs_583869)
        
        # Assigning a type to the variable 'result' (line 2554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2554, 16), 'result', rollaxis_call_result_583870)
        # SSA branch for the else part of an if statement (line 2550)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2557):
        
        # Assigning a Call to a Name (line 2557):
        
        # Call to rollaxis(...): (line 2557)
        # Processing the call arguments (line 2557)
        # Getting the type of 'result' (line 2557)
        result_583873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 37), 'result', False)
        int_583874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 45), 'int')
        # Processing the call keyword arguments (line 2557)
        kwargs_583875 = {}
        # Getting the type of 'np' (line 2557)
        np_583871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 25), 'np', False)
        # Obtaining the member 'rollaxis' of a type (line 2557)
        rollaxis_583872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2557, 25), np_583871, 'rollaxis')
        # Calling rollaxis(args, kwargs) (line 2557)
        rollaxis_call_result_583876 = invoke(stypy.reporting.localization.Localization(__file__, 2557, 25), rollaxis_583872, *[result_583873, int_583874], **kwargs_583875)
        
        # Assigning a type to the variable 'result' (line 2557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2557, 16), 'result', rollaxis_call_result_583876)
        # SSA join for if statement (line 2550)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2548)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_583817:
            # Runtime conditional SSA for else branch (line 2540)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_583816) or more_types_in_union_583817):
        # Assigning a type to the variable 'np' (line 2540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2540, 4), 'np', remove_member_provider_from_union(np_583815, 'nanpercentile'))
        
        # Assigning a Str to a Name (line 2559):
        
        # Assigning a Str to a Name (line 2559):
        str_583877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2559, 14), 'str', "Keyword nan_policy='omit' not correctly supported for numpy versions < 1.9.x. The default behavior of  numpy.percentile will be used.")
        # Assigning a type to the variable 'msg' (line 2559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 8), 'msg', str_583877)
        
        # Call to warn(...): (line 2562)
        # Processing the call arguments (line 2562)
        # Getting the type of 'msg' (line 2562)
        msg_583880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 22), 'msg', False)
        # Getting the type of 'RuntimeWarning' (line 2562)
        RuntimeWarning_583881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 27), 'RuntimeWarning', False)
        # Processing the call keyword arguments (line 2562)
        kwargs_583882 = {}
        # Getting the type of 'warnings' (line 2562)
        warnings_583878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2562)
        warn_583879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2562, 8), warnings_583878, 'warn')
        # Calling warn(args, kwargs) (line 2562)
        warn_call_result_583883 = invoke(stypy.reporting.localization.Localization(__file__, 2562, 8), warn_583879, *[msg_583880, RuntimeWarning_583881], **kwargs_583882)
        
        
        # Assigning a Call to a Name (line 2563):
        
        # Assigning a Call to a Name (line 2563):
        
        # Call to _iqr_percentile(...): (line 2563)
        # Processing the call arguments (line 2563)
        # Getting the type of 'x' (line 2563)
        x_583885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 33), 'x', False)
        # Getting the type of 'q' (line 2563)
        q_583886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 36), 'q', False)
        # Processing the call keyword arguments (line 2563)
        # Getting the type of 'axis' (line 2563)
        axis_583887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 44), 'axis', False)
        keyword_583888 = axis_583887
        kwargs_583889 = {'axis': keyword_583888}
        # Getting the type of '_iqr_percentile' (line 2563)
        _iqr_percentile_583884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 17), '_iqr_percentile', False)
        # Calling _iqr_percentile(args, kwargs) (line 2563)
        _iqr_percentile_call_result_583890 = invoke(stypy.reporting.localization.Localization(__file__, 2563, 17), _iqr_percentile_583884, *[x_583885, q_583886], **kwargs_583889)
        
        # Assigning a type to the variable 'result' (line 2563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2563, 8), 'result', _iqr_percentile_call_result_583890)

        if (may_be_583816 and more_types_in_union_583817):
            # SSA join for if statement (line 2540)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'result' (line 2565)
    result_583891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2565, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 2565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2565, 4), 'stypy_return_type', result_583891)
    
    # ################# End of '_iqr_nanpercentile(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_iqr_nanpercentile' in the type store
    # Getting the type of 'stypy_return_type' (line 2524)
    stypy_return_type_583892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_583892)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_iqr_nanpercentile'
    return stypy_return_type_583892

# Assigning a type to the variable '_iqr_nanpercentile' (line 2524)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2524, 0), '_iqr_nanpercentile', _iqr_nanpercentile)

# Assigning a Call to a Name (line 2572):

# Assigning a Call to a Name (line 2572):

# Call to namedtuple(...): (line 2572)
# Processing the call arguments (line 2572)
str_583894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 29), 'str', 'SigmaclipResult')

# Obtaining an instance of the builtin type 'tuple' (line 2572)
tuple_583895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 49), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2572)
# Adding element type (line 2572)
str_583896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 49), 'str', 'clipped')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2572, 49), tuple_583895, str_583896)
# Adding element type (line 2572)
str_583897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 60), 'str', 'lower')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2572, 49), tuple_583895, str_583897)
# Adding element type (line 2572)
str_583898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 69), 'str', 'upper')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2572, 49), tuple_583895, str_583898)

# Processing the call keyword arguments (line 2572)
kwargs_583899 = {}
# Getting the type of 'namedtuple' (line 2572)
namedtuple_583893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 18), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 2572)
namedtuple_call_result_583900 = invoke(stypy.reporting.localization.Localization(__file__, 2572, 18), namedtuple_583893, *[str_583894, tuple_583895], **kwargs_583899)

# Assigning a type to the variable 'SigmaclipResult' (line 2572)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2572, 0), 'SigmaclipResult', namedtuple_call_result_583900)

@norecursion
def sigmaclip(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_583901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2575, 21), 'float')
    float_583902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2575, 30), 'float')
    defaults = [float_583901, float_583902]
    # Create a new context for function 'sigmaclip'
    module_type_store = module_type_store.open_function_context('sigmaclip', 2575, 0, False)
    
    # Passed parameters checking function
    sigmaclip.stypy_localization = localization
    sigmaclip.stypy_type_of_self = None
    sigmaclip.stypy_type_store = module_type_store
    sigmaclip.stypy_function_name = 'sigmaclip'
    sigmaclip.stypy_param_names_list = ['a', 'low', 'high']
    sigmaclip.stypy_varargs_param_name = None
    sigmaclip.stypy_kwargs_param_name = None
    sigmaclip.stypy_call_defaults = defaults
    sigmaclip.stypy_call_varargs = varargs
    sigmaclip.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sigmaclip', ['a', 'low', 'high'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sigmaclip', localization, ['a', 'low', 'high'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sigmaclip(...)' code ##################

    str_583903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2628, (-1)), 'str', '\n    Iterative sigma-clipping of array elements.\n\n    The output array contains only those elements of the input array `c`\n    that satisfy the conditions ::\n\n        mean(c) - std(c)*low < c < mean(c) + std(c)*high\n\n    Starting from the full sample, all elements outside the critical range are\n    removed. The iteration continues with a new critical range until no\n    elements are outside the range.\n\n    Parameters\n    ----------\n    a : array_like\n        Data array, will be raveled if not 1-D.\n    low : float, optional\n        Lower bound factor of sigma clipping. Default is 4.\n    high : float, optional\n        Upper bound factor of sigma clipping. Default is 4.\n\n    Returns\n    -------\n    clipped : ndarray\n        Input array with clipped elements removed.\n    lower : float\n        Lower threshold value use for clipping.\n    upper : float\n        Upper threshold value use for clipping.\n\n    Examples\n    --------\n    >>> from scipy.stats import sigmaclip\n    >>> a = np.concatenate((np.linspace(9.5, 10.5, 31),\n    ...                     np.linspace(0, 20, 5)))\n    >>> fact = 1.5\n    >>> c, low, upp = sigmaclip(a, fact, fact)\n    >>> c\n    array([  9.96666667,  10.        ,  10.03333333,  10.        ])\n    >>> c.var(), c.std()\n    (0.00055555555555555165, 0.023570226039551501)\n    >>> low, c.mean() - fact*c.std(), c.min()\n    (9.9646446609406727, 9.9646446609406727, 9.9666666666666668)\n    >>> upp, c.mean() + fact*c.std(), c.max()\n    (10.035355339059327, 10.035355339059327, 10.033333333333333)\n\n    >>> a = np.concatenate((np.linspace(9.5, 10.5, 11),\n    ...                     np.linspace(-100, -50, 3)))\n    >>> c, low, upp = sigmaclip(a, 1.8, 1.8)\n    >>> (c == np.linspace(9.5, 10.5, 11)).all()\n    True\n\n    ')
    
    # Assigning a Call to a Name (line 2629):
    
    # Assigning a Call to a Name (line 2629):
    
    # Call to ravel(...): (line 2629)
    # Processing the call keyword arguments (line 2629)
    kwargs_583910 = {}
    
    # Call to asarray(...): (line 2629)
    # Processing the call arguments (line 2629)
    # Getting the type of 'a' (line 2629)
    a_583906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 19), 'a', False)
    # Processing the call keyword arguments (line 2629)
    kwargs_583907 = {}
    # Getting the type of 'np' (line 2629)
    np_583904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2629)
    asarray_583905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 8), np_583904, 'asarray')
    # Calling asarray(args, kwargs) (line 2629)
    asarray_call_result_583908 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 8), asarray_583905, *[a_583906], **kwargs_583907)
    
    # Obtaining the member 'ravel' of a type (line 2629)
    ravel_583909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 8), asarray_call_result_583908, 'ravel')
    # Calling ravel(args, kwargs) (line 2629)
    ravel_call_result_583911 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 8), ravel_583909, *[], **kwargs_583910)
    
    # Assigning a type to the variable 'c' (line 2629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2629, 4), 'c', ravel_call_result_583911)
    
    # Assigning a Num to a Name (line 2630):
    
    # Assigning a Num to a Name (line 2630):
    int_583912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2630, 12), 'int')
    # Assigning a type to the variable 'delta' (line 2630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2630, 4), 'delta', int_583912)
    
    # Getting the type of 'delta' (line 2631)
    delta_583913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 10), 'delta')
    # Testing the type of an if condition (line 2631)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2631, 4), delta_583913)
    # SSA begins for while statement (line 2631)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Call to a Name (line 2632):
    
    # Assigning a Call to a Name (line 2632):
    
    # Call to std(...): (line 2632)
    # Processing the call keyword arguments (line 2632)
    kwargs_583916 = {}
    # Getting the type of 'c' (line 2632)
    c_583914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 16), 'c', False)
    # Obtaining the member 'std' of a type (line 2632)
    std_583915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2632, 16), c_583914, 'std')
    # Calling std(args, kwargs) (line 2632)
    std_call_result_583917 = invoke(stypy.reporting.localization.Localization(__file__, 2632, 16), std_583915, *[], **kwargs_583916)
    
    # Assigning a type to the variable 'c_std' (line 2632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2632, 8), 'c_std', std_call_result_583917)
    
    # Assigning a Call to a Name (line 2633):
    
    # Assigning a Call to a Name (line 2633):
    
    # Call to mean(...): (line 2633)
    # Processing the call keyword arguments (line 2633)
    kwargs_583920 = {}
    # Getting the type of 'c' (line 2633)
    c_583918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 17), 'c', False)
    # Obtaining the member 'mean' of a type (line 2633)
    mean_583919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2633, 17), c_583918, 'mean')
    # Calling mean(args, kwargs) (line 2633)
    mean_call_result_583921 = invoke(stypy.reporting.localization.Localization(__file__, 2633, 17), mean_583919, *[], **kwargs_583920)
    
    # Assigning a type to the variable 'c_mean' (line 2633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2633, 8), 'c_mean', mean_call_result_583921)
    
    # Assigning a Attribute to a Name (line 2634):
    
    # Assigning a Attribute to a Name (line 2634):
    # Getting the type of 'c' (line 2634)
    c_583922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 15), 'c')
    # Obtaining the member 'size' of a type (line 2634)
    size_583923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2634, 15), c_583922, 'size')
    # Assigning a type to the variable 'size' (line 2634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2634, 8), 'size', size_583923)
    
    # Assigning a BinOp to a Name (line 2635):
    
    # Assigning a BinOp to a Name (line 2635):
    # Getting the type of 'c_mean' (line 2635)
    c_mean_583924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 20), 'c_mean')
    # Getting the type of 'c_std' (line 2635)
    c_std_583925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 29), 'c_std')
    # Getting the type of 'low' (line 2635)
    low_583926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 37), 'low')
    # Applying the binary operator '*' (line 2635)
    result_mul_583927 = python_operator(stypy.reporting.localization.Localization(__file__, 2635, 29), '*', c_std_583925, low_583926)
    
    # Applying the binary operator '-' (line 2635)
    result_sub_583928 = python_operator(stypy.reporting.localization.Localization(__file__, 2635, 20), '-', c_mean_583924, result_mul_583927)
    
    # Assigning a type to the variable 'critlower' (line 2635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2635, 8), 'critlower', result_sub_583928)
    
    # Assigning a BinOp to a Name (line 2636):
    
    # Assigning a BinOp to a Name (line 2636):
    # Getting the type of 'c_mean' (line 2636)
    c_mean_583929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 20), 'c_mean')
    # Getting the type of 'c_std' (line 2636)
    c_std_583930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 29), 'c_std')
    # Getting the type of 'high' (line 2636)
    high_583931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 37), 'high')
    # Applying the binary operator '*' (line 2636)
    result_mul_583932 = python_operator(stypy.reporting.localization.Localization(__file__, 2636, 29), '*', c_std_583930, high_583931)
    
    # Applying the binary operator '+' (line 2636)
    result_add_583933 = python_operator(stypy.reporting.localization.Localization(__file__, 2636, 20), '+', c_mean_583929, result_mul_583932)
    
    # Assigning a type to the variable 'critupper' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 8), 'critupper', result_add_583933)
    
    # Assigning a Subscript to a Name (line 2637):
    
    # Assigning a Subscript to a Name (line 2637):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'c' (line 2637)
    c_583934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 15), 'c')
    # Getting the type of 'critlower' (line 2637)
    critlower_583935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 19), 'critlower')
    # Applying the binary operator '>' (line 2637)
    result_gt_583936 = python_operator(stypy.reporting.localization.Localization(__file__, 2637, 15), '>', c_583934, critlower_583935)
    
    
    # Getting the type of 'c' (line 2637)
    c_583937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 33), 'c')
    # Getting the type of 'critupper' (line 2637)
    critupper_583938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 37), 'critupper')
    # Applying the binary operator '<' (line 2637)
    result_lt_583939 = python_operator(stypy.reporting.localization.Localization(__file__, 2637, 33), '<', c_583937, critupper_583938)
    
    # Applying the binary operator '&' (line 2637)
    result_and__583940 = python_operator(stypy.reporting.localization.Localization(__file__, 2637, 14), '&', result_gt_583936, result_lt_583939)
    
    # Getting the type of 'c' (line 2637)
    c_583941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 12), 'c')
    # Obtaining the member '__getitem__' of a type (line 2637)
    getitem___583942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2637, 12), c_583941, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2637)
    subscript_call_result_583943 = invoke(stypy.reporting.localization.Localization(__file__, 2637, 12), getitem___583942, result_and__583940)
    
    # Assigning a type to the variable 'c' (line 2637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2637, 8), 'c', subscript_call_result_583943)
    
    # Assigning a BinOp to a Name (line 2638):
    
    # Assigning a BinOp to a Name (line 2638):
    # Getting the type of 'size' (line 2638)
    size_583944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 16), 'size')
    # Getting the type of 'c' (line 2638)
    c_583945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 23), 'c')
    # Obtaining the member 'size' of a type (line 2638)
    size_583946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2638, 23), c_583945, 'size')
    # Applying the binary operator '-' (line 2638)
    result_sub_583947 = python_operator(stypy.reporting.localization.Localization(__file__, 2638, 16), '-', size_583944, size_583946)
    
    # Assigning a type to the variable 'delta' (line 2638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2638, 8), 'delta', result_sub_583947)
    # SSA join for while statement (line 2631)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to SigmaclipResult(...): (line 2640)
    # Processing the call arguments (line 2640)
    # Getting the type of 'c' (line 2640)
    c_583949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 27), 'c', False)
    # Getting the type of 'critlower' (line 2640)
    critlower_583950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 30), 'critlower', False)
    # Getting the type of 'critupper' (line 2640)
    critupper_583951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 41), 'critupper', False)
    # Processing the call keyword arguments (line 2640)
    kwargs_583952 = {}
    # Getting the type of 'SigmaclipResult' (line 2640)
    SigmaclipResult_583948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 11), 'SigmaclipResult', False)
    # Calling SigmaclipResult(args, kwargs) (line 2640)
    SigmaclipResult_call_result_583953 = invoke(stypy.reporting.localization.Localization(__file__, 2640, 11), SigmaclipResult_583948, *[c_583949, critlower_583950, critupper_583951], **kwargs_583952)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2640, 4), 'stypy_return_type', SigmaclipResult_call_result_583953)
    
    # ################# End of 'sigmaclip(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sigmaclip' in the type store
    # Getting the type of 'stypy_return_type' (line 2575)
    stypy_return_type_583954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_583954)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sigmaclip'
    return stypy_return_type_583954

# Assigning a type to the variable 'sigmaclip' (line 2575)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2575, 0), 'sigmaclip', sigmaclip)

@norecursion
def trimboth(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_583955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2643, 38), 'int')
    defaults = [int_583955]
    # Create a new context for function 'trimboth'
    module_type_store = module_type_store.open_function_context('trimboth', 2643, 0, False)
    
    # Passed parameters checking function
    trimboth.stypy_localization = localization
    trimboth.stypy_type_of_self = None
    trimboth.stypy_type_store = module_type_store
    trimboth.stypy_function_name = 'trimboth'
    trimboth.stypy_param_names_list = ['a', 'proportiontocut', 'axis']
    trimboth.stypy_varargs_param_name = None
    trimboth.stypy_kwargs_param_name = None
    trimboth.stypy_call_defaults = defaults
    trimboth.stypy_call_varargs = varargs
    trimboth.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trimboth', ['a', 'proportiontocut', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trimboth', localization, ['a', 'proportiontocut', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trimboth(...)' code ##################

    str_583956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2682, (-1)), 'str', '\n    Slices off a proportion of items from both ends of an array.\n\n    Slices off the passed proportion of items from both ends of the passed\n    array (i.e., with `proportiontocut` = 0.1, slices leftmost 10% **and**\n    rightmost 10% of scores). The trimmed values are the lowest and\n    highest ones.\n    Slices off less if proportion results in a non-integer slice index (i.e.,\n    conservatively slices off`proportiontocut`).\n\n    Parameters\n    ----------\n    a : array_like\n        Data to trim.\n    proportiontocut : float\n        Proportion (in range 0-1) of total data set to trim of each end.\n    axis : int or None, optional\n        Axis along which to trim data. Default is 0. If None, compute over\n        the whole array `a`.\n\n    Returns\n    -------\n    out : ndarray\n        Trimmed version of array `a`. The order of the trimmed content\n        is undefined.\n\n    See Also\n    --------\n    trim_mean\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> a = np.arange(20)\n    >>> b = stats.trimboth(a, 0.1)\n    >>> b.shape\n    (16,)\n\n    ')
    
    # Assigning a Call to a Name (line 2683):
    
    # Assigning a Call to a Name (line 2683):
    
    # Call to asarray(...): (line 2683)
    # Processing the call arguments (line 2683)
    # Getting the type of 'a' (line 2683)
    a_583959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 19), 'a', False)
    # Processing the call keyword arguments (line 2683)
    kwargs_583960 = {}
    # Getting the type of 'np' (line 2683)
    np_583957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2683)
    asarray_583958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2683, 8), np_583957, 'asarray')
    # Calling asarray(args, kwargs) (line 2683)
    asarray_call_result_583961 = invoke(stypy.reporting.localization.Localization(__file__, 2683, 8), asarray_583958, *[a_583959], **kwargs_583960)
    
    # Assigning a type to the variable 'a' (line 2683)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2683, 4), 'a', asarray_call_result_583961)
    
    
    # Getting the type of 'a' (line 2685)
    a_583962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2685, 7), 'a')
    # Obtaining the member 'size' of a type (line 2685)
    size_583963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2685, 7), a_583962, 'size')
    int_583964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2685, 17), 'int')
    # Applying the binary operator '==' (line 2685)
    result_eq_583965 = python_operator(stypy.reporting.localization.Localization(__file__, 2685, 7), '==', size_583963, int_583964)
    
    # Testing the type of an if condition (line 2685)
    if_condition_583966 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2685, 4), result_eq_583965)
    # Assigning a type to the variable 'if_condition_583966' (line 2685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2685, 4), 'if_condition_583966', if_condition_583966)
    # SSA begins for if statement (line 2685)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'a' (line 2686)
    a_583967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2686, 15), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 2686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2686, 8), 'stypy_return_type', a_583967)
    # SSA join for if statement (line 2685)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2688)
    # Getting the type of 'axis' (line 2688)
    axis_583968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 7), 'axis')
    # Getting the type of 'None' (line 2688)
    None_583969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 15), 'None')
    
    (may_be_583970, more_types_in_union_583971) = may_be_none(axis_583968, None_583969)

    if may_be_583970:

        if more_types_in_union_583971:
            # Runtime conditional SSA (line 2688)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2689):
        
        # Assigning a Call to a Name (line 2689):
        
        # Call to ravel(...): (line 2689)
        # Processing the call keyword arguments (line 2689)
        kwargs_583974 = {}
        # Getting the type of 'a' (line 2689)
        a_583972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2689, 12), 'a', False)
        # Obtaining the member 'ravel' of a type (line 2689)
        ravel_583973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2689, 12), a_583972, 'ravel')
        # Calling ravel(args, kwargs) (line 2689)
        ravel_call_result_583975 = invoke(stypy.reporting.localization.Localization(__file__, 2689, 12), ravel_583973, *[], **kwargs_583974)
        
        # Assigning a type to the variable 'a' (line 2689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2689, 8), 'a', ravel_call_result_583975)
        
        # Assigning a Num to a Name (line 2690):
        
        # Assigning a Num to a Name (line 2690):
        int_583976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2690, 15), 'int')
        # Assigning a type to the variable 'axis' (line 2690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2690, 8), 'axis', int_583976)

        if more_types_in_union_583971:
            # SSA join for if statement (line 2688)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Name (line 2692):
    
    # Assigning a Subscript to a Name (line 2692):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2692)
    axis_583977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2692, 19), 'axis')
    # Getting the type of 'a' (line 2692)
    a_583978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2692, 11), 'a')
    # Obtaining the member 'shape' of a type (line 2692)
    shape_583979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2692, 11), a_583978, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2692)
    getitem___583980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2692, 11), shape_583979, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2692)
    subscript_call_result_583981 = invoke(stypy.reporting.localization.Localization(__file__, 2692, 11), getitem___583980, axis_583977)
    
    # Assigning a type to the variable 'nobs' (line 2692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2692, 4), 'nobs', subscript_call_result_583981)
    
    # Assigning a Call to a Name (line 2693):
    
    # Assigning a Call to a Name (line 2693):
    
    # Call to int(...): (line 2693)
    # Processing the call arguments (line 2693)
    # Getting the type of 'proportiontocut' (line 2693)
    proportiontocut_583983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 19), 'proportiontocut', False)
    # Getting the type of 'nobs' (line 2693)
    nobs_583984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 37), 'nobs', False)
    # Applying the binary operator '*' (line 2693)
    result_mul_583985 = python_operator(stypy.reporting.localization.Localization(__file__, 2693, 19), '*', proportiontocut_583983, nobs_583984)
    
    # Processing the call keyword arguments (line 2693)
    kwargs_583986 = {}
    # Getting the type of 'int' (line 2693)
    int_583982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 15), 'int', False)
    # Calling int(args, kwargs) (line 2693)
    int_call_result_583987 = invoke(stypy.reporting.localization.Localization(__file__, 2693, 15), int_583982, *[result_mul_583985], **kwargs_583986)
    
    # Assigning a type to the variable 'lowercut' (line 2693)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2693, 4), 'lowercut', int_call_result_583987)
    
    # Assigning a BinOp to a Name (line 2694):
    
    # Assigning a BinOp to a Name (line 2694):
    # Getting the type of 'nobs' (line 2694)
    nobs_583988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 15), 'nobs')
    # Getting the type of 'lowercut' (line 2694)
    lowercut_583989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 22), 'lowercut')
    # Applying the binary operator '-' (line 2694)
    result_sub_583990 = python_operator(stypy.reporting.localization.Localization(__file__, 2694, 15), '-', nobs_583988, lowercut_583989)
    
    # Assigning a type to the variable 'uppercut' (line 2694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2694, 4), 'uppercut', result_sub_583990)
    
    
    # Getting the type of 'lowercut' (line 2695)
    lowercut_583991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2695, 8), 'lowercut')
    # Getting the type of 'uppercut' (line 2695)
    uppercut_583992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2695, 20), 'uppercut')
    # Applying the binary operator '>=' (line 2695)
    result_ge_583993 = python_operator(stypy.reporting.localization.Localization(__file__, 2695, 8), '>=', lowercut_583991, uppercut_583992)
    
    # Testing the type of an if condition (line 2695)
    if_condition_583994 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2695, 4), result_ge_583993)
    # Assigning a type to the variable 'if_condition_583994' (line 2695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2695, 4), 'if_condition_583994', if_condition_583994)
    # SSA begins for if statement (line 2695)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2696)
    # Processing the call arguments (line 2696)
    str_583996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2696, 25), 'str', 'Proportion too big.')
    # Processing the call keyword arguments (line 2696)
    kwargs_583997 = {}
    # Getting the type of 'ValueError' (line 2696)
    ValueError_583995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2696)
    ValueError_call_result_583998 = invoke(stypy.reporting.localization.Localization(__file__, 2696, 14), ValueError_583995, *[str_583996], **kwargs_583997)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2696, 8), ValueError_call_result_583998, 'raise parameter', BaseException)
    # SSA join for if statement (line 2695)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2698):
    
    # Assigning a Call to a Name (line 2698):
    
    # Call to partition(...): (line 2698)
    # Processing the call arguments (line 2698)
    # Getting the type of 'a' (line 2698)
    a_584001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 24), 'a', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2698)
    tuple_584002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2698, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2698)
    # Adding element type (line 2698)
    # Getting the type of 'lowercut' (line 2698)
    lowercut_584003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 28), 'lowercut', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2698, 28), tuple_584002, lowercut_584003)
    # Adding element type (line 2698)
    # Getting the type of 'uppercut' (line 2698)
    uppercut_584004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 38), 'uppercut', False)
    int_584005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2698, 49), 'int')
    # Applying the binary operator '-' (line 2698)
    result_sub_584006 = python_operator(stypy.reporting.localization.Localization(__file__, 2698, 38), '-', uppercut_584004, int_584005)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2698, 28), tuple_584002, result_sub_584006)
    
    # Getting the type of 'axis' (line 2698)
    axis_584007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 53), 'axis', False)
    # Processing the call keyword arguments (line 2698)
    kwargs_584008 = {}
    # Getting the type of 'np' (line 2698)
    np_583999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 11), 'np', False)
    # Obtaining the member 'partition' of a type (line 2698)
    partition_584000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2698, 11), np_583999, 'partition')
    # Calling partition(args, kwargs) (line 2698)
    partition_call_result_584009 = invoke(stypy.reporting.localization.Localization(__file__, 2698, 11), partition_584000, *[a_584001, tuple_584002, axis_584007], **kwargs_584008)
    
    # Assigning a type to the variable 'atmp' (line 2698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2698, 4), 'atmp', partition_call_result_584009)
    
    # Assigning a BinOp to a Name (line 2700):
    
    # Assigning a BinOp to a Name (line 2700):
    
    # Obtaining an instance of the builtin type 'list' (line 2700)
    list_584010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2700, 9), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2700)
    # Adding element type (line 2700)
    
    # Call to slice(...): (line 2700)
    # Processing the call arguments (line 2700)
    # Getting the type of 'None' (line 2700)
    None_584012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 16), 'None', False)
    # Processing the call keyword arguments (line 2700)
    kwargs_584013 = {}
    # Getting the type of 'slice' (line 2700)
    slice_584011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 10), 'slice', False)
    # Calling slice(args, kwargs) (line 2700)
    slice_call_result_584014 = invoke(stypy.reporting.localization.Localization(__file__, 2700, 10), slice_584011, *[None_584012], **kwargs_584013)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2700, 9), list_584010, slice_call_result_584014)
    
    # Getting the type of 'atmp' (line 2700)
    atmp_584015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 25), 'atmp')
    # Obtaining the member 'ndim' of a type (line 2700)
    ndim_584016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2700, 25), atmp_584015, 'ndim')
    # Applying the binary operator '*' (line 2700)
    result_mul_584017 = python_operator(stypy.reporting.localization.Localization(__file__, 2700, 9), '*', list_584010, ndim_584016)
    
    # Assigning a type to the variable 'sl' (line 2700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2700, 4), 'sl', result_mul_584017)
    
    # Assigning a Call to a Subscript (line 2701):
    
    # Assigning a Call to a Subscript (line 2701):
    
    # Call to slice(...): (line 2701)
    # Processing the call arguments (line 2701)
    # Getting the type of 'lowercut' (line 2701)
    lowercut_584019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 21), 'lowercut', False)
    # Getting the type of 'uppercut' (line 2701)
    uppercut_584020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 31), 'uppercut', False)
    # Processing the call keyword arguments (line 2701)
    kwargs_584021 = {}
    # Getting the type of 'slice' (line 2701)
    slice_584018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 15), 'slice', False)
    # Calling slice(args, kwargs) (line 2701)
    slice_call_result_584022 = invoke(stypy.reporting.localization.Localization(__file__, 2701, 15), slice_584018, *[lowercut_584019, uppercut_584020], **kwargs_584021)
    
    # Getting the type of 'sl' (line 2701)
    sl_584023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 4), 'sl')
    # Getting the type of 'axis' (line 2701)
    axis_584024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 7), 'axis')
    # Storing an element on a container (line 2701)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2701, 4), sl_584023, (axis_584024, slice_call_result_584022))
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2702)
    sl_584025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 16), 'sl')
    # Getting the type of 'atmp' (line 2702)
    atmp_584026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 11), 'atmp')
    # Obtaining the member '__getitem__' of a type (line 2702)
    getitem___584027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2702, 11), atmp_584026, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2702)
    subscript_call_result_584028 = invoke(stypy.reporting.localization.Localization(__file__, 2702, 11), getitem___584027, sl_584025)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2702)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2702, 4), 'stypy_return_type', subscript_call_result_584028)
    
    # ################# End of 'trimboth(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trimboth' in the type store
    # Getting the type of 'stypy_return_type' (line 2643)
    stypy_return_type_584029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_584029)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trimboth'
    return stypy_return_type_584029

# Assigning a type to the variable 'trimboth' (line 2643)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2643, 0), 'trimboth', trimboth)

@norecursion
def trim1(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_584030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2705, 35), 'str', 'right')
    int_584031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2705, 49), 'int')
    defaults = [str_584030, int_584031]
    # Create a new context for function 'trim1'
    module_type_store = module_type_store.open_function_context('trim1', 2705, 0, False)
    
    # Passed parameters checking function
    trim1.stypy_localization = localization
    trim1.stypy_type_of_self = None
    trim1.stypy_type_store = module_type_store
    trim1.stypy_function_name = 'trim1'
    trim1.stypy_param_names_list = ['a', 'proportiontocut', 'tail', 'axis']
    trim1.stypy_varargs_param_name = None
    trim1.stypy_kwargs_param_name = None
    trim1.stypy_call_defaults = defaults
    trim1.stypy_call_varargs = varargs
    trim1.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trim1', ['a', 'proportiontocut', 'tail', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trim1', localization, ['a', 'proportiontocut', 'tail', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trim1(...)' code ##################

    str_584032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2733, (-1)), 'str', "\n    Slices off a proportion from ONE end of the passed array distribution.\n\n    If `proportiontocut` = 0.1, slices off 'leftmost' or 'rightmost'\n    10% of scores. The lowest or highest values are trimmed (depending on\n    the tail).\n    Slices off less if proportion results in a non-integer slice index\n    (i.e., conservatively slices off `proportiontocut` ).\n\n    Parameters\n    ----------\n    a : array_like\n        Input array\n    proportiontocut : float\n        Fraction to cut off of 'left' or 'right' of distribution\n    tail : {'left', 'right'}, optional\n        Defaults to 'right'.\n    axis : int or None, optional\n        Axis along which to trim data. Default is 0. If None, compute over\n        the whole array `a`.\n\n    Returns\n    -------\n    trim1 : ndarray\n        Trimmed version of array `a`. The order of the trimmed content is\n        undefined.\n\n    ")
    
    # Assigning a Call to a Name (line 2734):
    
    # Assigning a Call to a Name (line 2734):
    
    # Call to asarray(...): (line 2734)
    # Processing the call arguments (line 2734)
    # Getting the type of 'a' (line 2734)
    a_584035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 19), 'a', False)
    # Processing the call keyword arguments (line 2734)
    kwargs_584036 = {}
    # Getting the type of 'np' (line 2734)
    np_584033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2734)
    asarray_584034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2734, 8), np_584033, 'asarray')
    # Calling asarray(args, kwargs) (line 2734)
    asarray_call_result_584037 = invoke(stypy.reporting.localization.Localization(__file__, 2734, 8), asarray_584034, *[a_584035], **kwargs_584036)
    
    # Assigning a type to the variable 'a' (line 2734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2734, 4), 'a', asarray_call_result_584037)
    
    # Type idiom detected: calculating its left and rigth part (line 2735)
    # Getting the type of 'axis' (line 2735)
    axis_584038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 7), 'axis')
    # Getting the type of 'None' (line 2735)
    None_584039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 15), 'None')
    
    (may_be_584040, more_types_in_union_584041) = may_be_none(axis_584038, None_584039)

    if may_be_584040:

        if more_types_in_union_584041:
            # Runtime conditional SSA (line 2735)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2736):
        
        # Assigning a Call to a Name (line 2736):
        
        # Call to ravel(...): (line 2736)
        # Processing the call keyword arguments (line 2736)
        kwargs_584044 = {}
        # Getting the type of 'a' (line 2736)
        a_584042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 12), 'a', False)
        # Obtaining the member 'ravel' of a type (line 2736)
        ravel_584043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 12), a_584042, 'ravel')
        # Calling ravel(args, kwargs) (line 2736)
        ravel_call_result_584045 = invoke(stypy.reporting.localization.Localization(__file__, 2736, 12), ravel_584043, *[], **kwargs_584044)
        
        # Assigning a type to the variable 'a' (line 2736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2736, 8), 'a', ravel_call_result_584045)
        
        # Assigning a Num to a Name (line 2737):
        
        # Assigning a Num to a Name (line 2737):
        int_584046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2737, 15), 'int')
        # Assigning a type to the variable 'axis' (line 2737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2737, 8), 'axis', int_584046)

        if more_types_in_union_584041:
            # SSA join for if statement (line 2735)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Name (line 2739):
    
    # Assigning a Subscript to a Name (line 2739):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2739)
    axis_584047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 19), 'axis')
    # Getting the type of 'a' (line 2739)
    a_584048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 11), 'a')
    # Obtaining the member 'shape' of a type (line 2739)
    shape_584049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2739, 11), a_584048, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2739)
    getitem___584050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2739, 11), shape_584049, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2739)
    subscript_call_result_584051 = invoke(stypy.reporting.localization.Localization(__file__, 2739, 11), getitem___584050, axis_584047)
    
    # Assigning a type to the variable 'nobs' (line 2739)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2739, 4), 'nobs', subscript_call_result_584051)
    
    
    # Getting the type of 'proportiontocut' (line 2742)
    proportiontocut_584052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 7), 'proportiontocut')
    int_584053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2742, 26), 'int')
    # Applying the binary operator '>=' (line 2742)
    result_ge_584054 = python_operator(stypy.reporting.localization.Localization(__file__, 2742, 7), '>=', proportiontocut_584052, int_584053)
    
    # Testing the type of an if condition (line 2742)
    if_condition_584055 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2742, 4), result_ge_584054)
    # Assigning a type to the variable 'if_condition_584055' (line 2742)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2742, 4), 'if_condition_584055', if_condition_584055)
    # SSA begins for if statement (line 2742)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'list' (line 2743)
    list_584056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2743, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2743)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2743, 8), 'stypy_return_type', list_584056)
    # SSA join for if statement (line 2742)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to lower(...): (line 2745)
    # Processing the call keyword arguments (line 2745)
    kwargs_584059 = {}
    # Getting the type of 'tail' (line 2745)
    tail_584057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 7), 'tail', False)
    # Obtaining the member 'lower' of a type (line 2745)
    lower_584058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2745, 7), tail_584057, 'lower')
    # Calling lower(args, kwargs) (line 2745)
    lower_call_result_584060 = invoke(stypy.reporting.localization.Localization(__file__, 2745, 7), lower_584058, *[], **kwargs_584059)
    
    str_584061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2745, 23), 'str', 'right')
    # Applying the binary operator '==' (line 2745)
    result_eq_584062 = python_operator(stypy.reporting.localization.Localization(__file__, 2745, 7), '==', lower_call_result_584060, str_584061)
    
    # Testing the type of an if condition (line 2745)
    if_condition_584063 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2745, 4), result_eq_584062)
    # Assigning a type to the variable 'if_condition_584063' (line 2745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2745, 4), 'if_condition_584063', if_condition_584063)
    # SSA begins for if statement (line 2745)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 2746):
    
    # Assigning a Num to a Name (line 2746):
    int_584064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2746, 19), 'int')
    # Assigning a type to the variable 'lowercut' (line 2746)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2746, 8), 'lowercut', int_584064)
    
    # Assigning a BinOp to a Name (line 2747):
    
    # Assigning a BinOp to a Name (line 2747):
    # Getting the type of 'nobs' (line 2747)
    nobs_584065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 19), 'nobs')
    
    # Call to int(...): (line 2747)
    # Processing the call arguments (line 2747)
    # Getting the type of 'proportiontocut' (line 2747)
    proportiontocut_584067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 30), 'proportiontocut', False)
    # Getting the type of 'nobs' (line 2747)
    nobs_584068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 48), 'nobs', False)
    # Applying the binary operator '*' (line 2747)
    result_mul_584069 = python_operator(stypy.reporting.localization.Localization(__file__, 2747, 30), '*', proportiontocut_584067, nobs_584068)
    
    # Processing the call keyword arguments (line 2747)
    kwargs_584070 = {}
    # Getting the type of 'int' (line 2747)
    int_584066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 26), 'int', False)
    # Calling int(args, kwargs) (line 2747)
    int_call_result_584071 = invoke(stypy.reporting.localization.Localization(__file__, 2747, 26), int_584066, *[result_mul_584069], **kwargs_584070)
    
    # Applying the binary operator '-' (line 2747)
    result_sub_584072 = python_operator(stypy.reporting.localization.Localization(__file__, 2747, 19), '-', nobs_584065, int_call_result_584071)
    
    # Assigning a type to the variable 'uppercut' (line 2747)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2747, 8), 'uppercut', result_sub_584072)
    # SSA branch for the else part of an if statement (line 2745)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to lower(...): (line 2749)
    # Processing the call keyword arguments (line 2749)
    kwargs_584075 = {}
    # Getting the type of 'tail' (line 2749)
    tail_584073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 9), 'tail', False)
    # Obtaining the member 'lower' of a type (line 2749)
    lower_584074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 9), tail_584073, 'lower')
    # Calling lower(args, kwargs) (line 2749)
    lower_call_result_584076 = invoke(stypy.reporting.localization.Localization(__file__, 2749, 9), lower_584074, *[], **kwargs_584075)
    
    str_584077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2749, 25), 'str', 'left')
    # Applying the binary operator '==' (line 2749)
    result_eq_584078 = python_operator(stypy.reporting.localization.Localization(__file__, 2749, 9), '==', lower_call_result_584076, str_584077)
    
    # Testing the type of an if condition (line 2749)
    if_condition_584079 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2749, 9), result_eq_584078)
    # Assigning a type to the variable 'if_condition_584079' (line 2749)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 9), 'if_condition_584079', if_condition_584079)
    # SSA begins for if statement (line 2749)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2750):
    
    # Assigning a Call to a Name (line 2750):
    
    # Call to int(...): (line 2750)
    # Processing the call arguments (line 2750)
    # Getting the type of 'proportiontocut' (line 2750)
    proportiontocut_584081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 23), 'proportiontocut', False)
    # Getting the type of 'nobs' (line 2750)
    nobs_584082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 41), 'nobs', False)
    # Applying the binary operator '*' (line 2750)
    result_mul_584083 = python_operator(stypy.reporting.localization.Localization(__file__, 2750, 23), '*', proportiontocut_584081, nobs_584082)
    
    # Processing the call keyword arguments (line 2750)
    kwargs_584084 = {}
    # Getting the type of 'int' (line 2750)
    int_584080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 19), 'int', False)
    # Calling int(args, kwargs) (line 2750)
    int_call_result_584085 = invoke(stypy.reporting.localization.Localization(__file__, 2750, 19), int_584080, *[result_mul_584083], **kwargs_584084)
    
    # Assigning a type to the variable 'lowercut' (line 2750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2750, 8), 'lowercut', int_call_result_584085)
    
    # Assigning a Name to a Name (line 2751):
    
    # Assigning a Name to a Name (line 2751):
    # Getting the type of 'nobs' (line 2751)
    nobs_584086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2751, 19), 'nobs')
    # Assigning a type to the variable 'uppercut' (line 2751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2751, 8), 'uppercut', nobs_584086)
    # SSA join for if statement (line 2749)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2745)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2753):
    
    # Assigning a Call to a Name (line 2753):
    
    # Call to partition(...): (line 2753)
    # Processing the call arguments (line 2753)
    # Getting the type of 'a' (line 2753)
    a_584089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 24), 'a', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2753)
    tuple_584090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2753, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2753)
    # Adding element type (line 2753)
    # Getting the type of 'lowercut' (line 2753)
    lowercut_584091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 28), 'lowercut', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2753, 28), tuple_584090, lowercut_584091)
    # Adding element type (line 2753)
    # Getting the type of 'uppercut' (line 2753)
    uppercut_584092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 38), 'uppercut', False)
    int_584093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2753, 49), 'int')
    # Applying the binary operator '-' (line 2753)
    result_sub_584094 = python_operator(stypy.reporting.localization.Localization(__file__, 2753, 38), '-', uppercut_584092, int_584093)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2753, 28), tuple_584090, result_sub_584094)
    
    # Getting the type of 'axis' (line 2753)
    axis_584095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 53), 'axis', False)
    # Processing the call keyword arguments (line 2753)
    kwargs_584096 = {}
    # Getting the type of 'np' (line 2753)
    np_584087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 11), 'np', False)
    # Obtaining the member 'partition' of a type (line 2753)
    partition_584088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2753, 11), np_584087, 'partition')
    # Calling partition(args, kwargs) (line 2753)
    partition_call_result_584097 = invoke(stypy.reporting.localization.Localization(__file__, 2753, 11), partition_584088, *[a_584089, tuple_584090, axis_584095], **kwargs_584096)
    
    # Assigning a type to the variable 'atmp' (line 2753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2753, 4), 'atmp', partition_call_result_584097)
    
    # Obtaining the type of the subscript
    # Getting the type of 'lowercut' (line 2755)
    lowercut_584098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 16), 'lowercut')
    # Getting the type of 'uppercut' (line 2755)
    uppercut_584099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 25), 'uppercut')
    slice_584100 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2755, 11), lowercut_584098, uppercut_584099, None)
    # Getting the type of 'atmp' (line 2755)
    atmp_584101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 11), 'atmp')
    # Obtaining the member '__getitem__' of a type (line 2755)
    getitem___584102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2755, 11), atmp_584101, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2755)
    subscript_call_result_584103 = invoke(stypy.reporting.localization.Localization(__file__, 2755, 11), getitem___584102, slice_584100)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 4), 'stypy_return_type', subscript_call_result_584103)
    
    # ################# End of 'trim1(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trim1' in the type store
    # Getting the type of 'stypy_return_type' (line 2705)
    stypy_return_type_584104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_584104)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trim1'
    return stypy_return_type_584104

# Assigning a type to the variable 'trim1' (line 2705)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2705, 0), 'trim1', trim1)

@norecursion
def trim_mean(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_584105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2758, 39), 'int')
    defaults = [int_584105]
    # Create a new context for function 'trim_mean'
    module_type_store = module_type_store.open_function_context('trim_mean', 2758, 0, False)
    
    # Passed parameters checking function
    trim_mean.stypy_localization = localization
    trim_mean.stypy_type_of_self = None
    trim_mean.stypy_type_store = module_type_store
    trim_mean.stypy_function_name = 'trim_mean'
    trim_mean.stypy_param_names_list = ['a', 'proportiontocut', 'axis']
    trim_mean.stypy_varargs_param_name = None
    trim_mean.stypy_kwargs_param_name = None
    trim_mean.stypy_call_defaults = defaults
    trim_mean.stypy_call_varargs = varargs
    trim_mean.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trim_mean', ['a', 'proportiontocut', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trim_mean', localization, ['a', 'proportiontocut', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trim_mean(...)' code ##################

    str_584106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2805, (-1)), 'str', "\n    Return mean of array after trimming distribution from both tails.\n\n    If `proportiontocut` = 0.1, slices off 'leftmost' and 'rightmost' 10% of\n    scores. The input is sorted before slicing. Slices off less if proportion\n    results in a non-integer slice index (i.e., conservatively slices off\n    `proportiontocut` ).\n\n    Parameters\n    ----------\n    a : array_like\n        Input array\n    proportiontocut : float\n        Fraction to cut off of both tails of the distribution\n    axis : int or None, optional\n        Axis along which the trimmed means are computed. Default is 0.\n        If None, compute over the whole array `a`.\n\n    Returns\n    -------\n    trim_mean : ndarray\n        Mean of trimmed array.\n\n    See Also\n    --------\n    trimboth\n    tmean : compute the trimmed mean ignoring values outside given `limits`.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> x = np.arange(20)\n    >>> stats.trim_mean(x, 0.1)\n    9.5\n    >>> x2 = x.reshape(5, 4)\n    >>> x2\n    array([[ 0,  1,  2,  3],\n           [ 4,  5,  6,  7],\n           [ 8,  9, 10, 11],\n           [12, 13, 14, 15],\n           [16, 17, 18, 19]])\n    >>> stats.trim_mean(x2, 0.25)\n    array([  8.,   9.,  10.,  11.])\n    >>> stats.trim_mean(x2, 0.25, axis=1)\n    array([  1.5,   5.5,   9.5,  13.5,  17.5])\n\n    ")
    
    # Assigning a Call to a Name (line 2806):
    
    # Assigning a Call to a Name (line 2806):
    
    # Call to asarray(...): (line 2806)
    # Processing the call arguments (line 2806)
    # Getting the type of 'a' (line 2806)
    a_584109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 19), 'a', False)
    # Processing the call keyword arguments (line 2806)
    kwargs_584110 = {}
    # Getting the type of 'np' (line 2806)
    np_584107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2806)
    asarray_584108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2806, 8), np_584107, 'asarray')
    # Calling asarray(args, kwargs) (line 2806)
    asarray_call_result_584111 = invoke(stypy.reporting.localization.Localization(__file__, 2806, 8), asarray_584108, *[a_584109], **kwargs_584110)
    
    # Assigning a type to the variable 'a' (line 2806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2806, 4), 'a', asarray_call_result_584111)
    
    
    # Getting the type of 'a' (line 2808)
    a_584112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 7), 'a')
    # Obtaining the member 'size' of a type (line 2808)
    size_584113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2808, 7), a_584112, 'size')
    int_584114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2808, 17), 'int')
    # Applying the binary operator '==' (line 2808)
    result_eq_584115 = python_operator(stypy.reporting.localization.Localization(__file__, 2808, 7), '==', size_584113, int_584114)
    
    # Testing the type of an if condition (line 2808)
    if_condition_584116 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2808, 4), result_eq_584115)
    # Assigning a type to the variable 'if_condition_584116' (line 2808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2808, 4), 'if_condition_584116', if_condition_584116)
    # SSA begins for if statement (line 2808)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'np' (line 2809)
    np_584117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2809, 15), 'np')
    # Obtaining the member 'nan' of a type (line 2809)
    nan_584118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2809, 15), np_584117, 'nan')
    # Assigning a type to the variable 'stypy_return_type' (line 2809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2809, 8), 'stypy_return_type', nan_584118)
    # SSA join for if statement (line 2808)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2811)
    # Getting the type of 'axis' (line 2811)
    axis_584119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 7), 'axis')
    # Getting the type of 'None' (line 2811)
    None_584120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 15), 'None')
    
    (may_be_584121, more_types_in_union_584122) = may_be_none(axis_584119, None_584120)

    if may_be_584121:

        if more_types_in_union_584122:
            # Runtime conditional SSA (line 2811)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2812):
        
        # Assigning a Call to a Name (line 2812):
        
        # Call to ravel(...): (line 2812)
        # Processing the call keyword arguments (line 2812)
        kwargs_584125 = {}
        # Getting the type of 'a' (line 2812)
        a_584123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2812, 12), 'a', False)
        # Obtaining the member 'ravel' of a type (line 2812)
        ravel_584124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2812, 12), a_584123, 'ravel')
        # Calling ravel(args, kwargs) (line 2812)
        ravel_call_result_584126 = invoke(stypy.reporting.localization.Localization(__file__, 2812, 12), ravel_584124, *[], **kwargs_584125)
        
        # Assigning a type to the variable 'a' (line 2812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2812, 8), 'a', ravel_call_result_584126)
        
        # Assigning a Num to a Name (line 2813):
        
        # Assigning a Num to a Name (line 2813):
        int_584127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2813, 15), 'int')
        # Assigning a type to the variable 'axis' (line 2813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2813, 8), 'axis', int_584127)

        if more_types_in_union_584122:
            # SSA join for if statement (line 2811)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Name (line 2815):
    
    # Assigning a Subscript to a Name (line 2815):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2815)
    axis_584128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 19), 'axis')
    # Getting the type of 'a' (line 2815)
    a_584129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 11), 'a')
    # Obtaining the member 'shape' of a type (line 2815)
    shape_584130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2815, 11), a_584129, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2815)
    getitem___584131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2815, 11), shape_584130, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2815)
    subscript_call_result_584132 = invoke(stypy.reporting.localization.Localization(__file__, 2815, 11), getitem___584131, axis_584128)
    
    # Assigning a type to the variable 'nobs' (line 2815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2815, 4), 'nobs', subscript_call_result_584132)
    
    # Assigning a Call to a Name (line 2816):
    
    # Assigning a Call to a Name (line 2816):
    
    # Call to int(...): (line 2816)
    # Processing the call arguments (line 2816)
    # Getting the type of 'proportiontocut' (line 2816)
    proportiontocut_584134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2816, 19), 'proportiontocut', False)
    # Getting the type of 'nobs' (line 2816)
    nobs_584135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2816, 37), 'nobs', False)
    # Applying the binary operator '*' (line 2816)
    result_mul_584136 = python_operator(stypy.reporting.localization.Localization(__file__, 2816, 19), '*', proportiontocut_584134, nobs_584135)
    
    # Processing the call keyword arguments (line 2816)
    kwargs_584137 = {}
    # Getting the type of 'int' (line 2816)
    int_584133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2816, 15), 'int', False)
    # Calling int(args, kwargs) (line 2816)
    int_call_result_584138 = invoke(stypy.reporting.localization.Localization(__file__, 2816, 15), int_584133, *[result_mul_584136], **kwargs_584137)
    
    # Assigning a type to the variable 'lowercut' (line 2816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2816, 4), 'lowercut', int_call_result_584138)
    
    # Assigning a BinOp to a Name (line 2817):
    
    # Assigning a BinOp to a Name (line 2817):
    # Getting the type of 'nobs' (line 2817)
    nobs_584139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2817, 15), 'nobs')
    # Getting the type of 'lowercut' (line 2817)
    lowercut_584140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2817, 22), 'lowercut')
    # Applying the binary operator '-' (line 2817)
    result_sub_584141 = python_operator(stypy.reporting.localization.Localization(__file__, 2817, 15), '-', nobs_584139, lowercut_584140)
    
    # Assigning a type to the variable 'uppercut' (line 2817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2817, 4), 'uppercut', result_sub_584141)
    
    
    # Getting the type of 'lowercut' (line 2818)
    lowercut_584142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 8), 'lowercut')
    # Getting the type of 'uppercut' (line 2818)
    uppercut_584143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 19), 'uppercut')
    # Applying the binary operator '>' (line 2818)
    result_gt_584144 = python_operator(stypy.reporting.localization.Localization(__file__, 2818, 8), '>', lowercut_584142, uppercut_584143)
    
    # Testing the type of an if condition (line 2818)
    if_condition_584145 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2818, 4), result_gt_584144)
    # Assigning a type to the variable 'if_condition_584145' (line 2818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2818, 4), 'if_condition_584145', if_condition_584145)
    # SSA begins for if statement (line 2818)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2819)
    # Processing the call arguments (line 2819)
    str_584147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2819, 25), 'str', 'Proportion too big.')
    # Processing the call keyword arguments (line 2819)
    kwargs_584148 = {}
    # Getting the type of 'ValueError' (line 2819)
    ValueError_584146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2819)
    ValueError_call_result_584149 = invoke(stypy.reporting.localization.Localization(__file__, 2819, 14), ValueError_584146, *[str_584147], **kwargs_584148)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2819, 8), ValueError_call_result_584149, 'raise parameter', BaseException)
    # SSA join for if statement (line 2818)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2821):
    
    # Assigning a Call to a Name (line 2821):
    
    # Call to partition(...): (line 2821)
    # Processing the call arguments (line 2821)
    # Getting the type of 'a' (line 2821)
    a_584152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 24), 'a', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2821)
    tuple_584153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2821, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2821)
    # Adding element type (line 2821)
    # Getting the type of 'lowercut' (line 2821)
    lowercut_584154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 28), 'lowercut', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2821, 28), tuple_584153, lowercut_584154)
    # Adding element type (line 2821)
    # Getting the type of 'uppercut' (line 2821)
    uppercut_584155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 38), 'uppercut', False)
    int_584156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2821, 49), 'int')
    # Applying the binary operator '-' (line 2821)
    result_sub_584157 = python_operator(stypy.reporting.localization.Localization(__file__, 2821, 38), '-', uppercut_584155, int_584156)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2821, 28), tuple_584153, result_sub_584157)
    
    # Getting the type of 'axis' (line 2821)
    axis_584158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 53), 'axis', False)
    # Processing the call keyword arguments (line 2821)
    kwargs_584159 = {}
    # Getting the type of 'np' (line 2821)
    np_584150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 11), 'np', False)
    # Obtaining the member 'partition' of a type (line 2821)
    partition_584151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2821, 11), np_584150, 'partition')
    # Calling partition(args, kwargs) (line 2821)
    partition_call_result_584160 = invoke(stypy.reporting.localization.Localization(__file__, 2821, 11), partition_584151, *[a_584152, tuple_584153, axis_584158], **kwargs_584159)
    
    # Assigning a type to the variable 'atmp' (line 2821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2821, 4), 'atmp', partition_call_result_584160)
    
    # Assigning a BinOp to a Name (line 2823):
    
    # Assigning a BinOp to a Name (line 2823):
    
    # Obtaining an instance of the builtin type 'list' (line 2823)
    list_584161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2823, 9), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2823)
    # Adding element type (line 2823)
    
    # Call to slice(...): (line 2823)
    # Processing the call arguments (line 2823)
    # Getting the type of 'None' (line 2823)
    None_584163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2823, 16), 'None', False)
    # Processing the call keyword arguments (line 2823)
    kwargs_584164 = {}
    # Getting the type of 'slice' (line 2823)
    slice_584162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2823, 10), 'slice', False)
    # Calling slice(args, kwargs) (line 2823)
    slice_call_result_584165 = invoke(stypy.reporting.localization.Localization(__file__, 2823, 10), slice_584162, *[None_584163], **kwargs_584164)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2823, 9), list_584161, slice_call_result_584165)
    
    # Getting the type of 'atmp' (line 2823)
    atmp_584166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2823, 25), 'atmp')
    # Obtaining the member 'ndim' of a type (line 2823)
    ndim_584167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2823, 25), atmp_584166, 'ndim')
    # Applying the binary operator '*' (line 2823)
    result_mul_584168 = python_operator(stypy.reporting.localization.Localization(__file__, 2823, 9), '*', list_584161, ndim_584167)
    
    # Assigning a type to the variable 'sl' (line 2823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2823, 4), 'sl', result_mul_584168)
    
    # Assigning a Call to a Subscript (line 2824):
    
    # Assigning a Call to a Subscript (line 2824):
    
    # Call to slice(...): (line 2824)
    # Processing the call arguments (line 2824)
    # Getting the type of 'lowercut' (line 2824)
    lowercut_584170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 21), 'lowercut', False)
    # Getting the type of 'uppercut' (line 2824)
    uppercut_584171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 31), 'uppercut', False)
    # Processing the call keyword arguments (line 2824)
    kwargs_584172 = {}
    # Getting the type of 'slice' (line 2824)
    slice_584169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 15), 'slice', False)
    # Calling slice(args, kwargs) (line 2824)
    slice_call_result_584173 = invoke(stypy.reporting.localization.Localization(__file__, 2824, 15), slice_584169, *[lowercut_584170, uppercut_584171], **kwargs_584172)
    
    # Getting the type of 'sl' (line 2824)
    sl_584174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 4), 'sl')
    # Getting the type of 'axis' (line 2824)
    axis_584175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 7), 'axis')
    # Storing an element on a container (line 2824)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2824, 4), sl_584174, (axis_584175, slice_call_result_584173))
    
    # Call to mean(...): (line 2825)
    # Processing the call arguments (line 2825)
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2825)
    sl_584178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 24), 'sl', False)
    # Getting the type of 'atmp' (line 2825)
    atmp_584179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 19), 'atmp', False)
    # Obtaining the member '__getitem__' of a type (line 2825)
    getitem___584180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2825, 19), atmp_584179, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2825)
    subscript_call_result_584181 = invoke(stypy.reporting.localization.Localization(__file__, 2825, 19), getitem___584180, sl_584178)
    
    # Processing the call keyword arguments (line 2825)
    # Getting the type of 'axis' (line 2825)
    axis_584182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 34), 'axis', False)
    keyword_584183 = axis_584182
    kwargs_584184 = {'axis': keyword_584183}
    # Getting the type of 'np' (line 2825)
    np_584176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 11), 'np', False)
    # Obtaining the member 'mean' of a type (line 2825)
    mean_584177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2825, 11), np_584176, 'mean')
    # Calling mean(args, kwargs) (line 2825)
    mean_call_result_584185 = invoke(stypy.reporting.localization.Localization(__file__, 2825, 11), mean_584177, *[subscript_call_result_584181], **kwargs_584184)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2825)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2825, 4), 'stypy_return_type', mean_call_result_584185)
    
    # ################# End of 'trim_mean(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trim_mean' in the type store
    # Getting the type of 'stypy_return_type' (line 2758)
    stypy_return_type_584186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2758, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_584186)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trim_mean'
    return stypy_return_type_584186

# Assigning a type to the variable 'trim_mean' (line 2758)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2758, 0), 'trim_mean', trim_mean)

# Assigning a Call to a Name (line 2827):

# Assigning a Call to a Name (line 2827):

# Call to namedtuple(...): (line 2827)
# Processing the call arguments (line 2827)
str_584188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2827, 28), 'str', 'F_onewayResult')

# Obtaining an instance of the builtin type 'tuple' (line 2827)
tuple_584189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2827, 47), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2827)
# Adding element type (line 2827)
str_584190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2827, 47), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2827, 47), tuple_584189, str_584190)
# Adding element type (line 2827)
str_584191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2827, 60), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2827, 47), tuple_584189, str_584191)

# Processing the call keyword arguments (line 2827)
kwargs_584192 = {}
# Getting the type of 'namedtuple' (line 2827)
namedtuple_584187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2827, 17), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 2827)
namedtuple_call_result_584193 = invoke(stypy.reporting.localization.Localization(__file__, 2827, 17), namedtuple_584187, *[str_584188, tuple_584189], **kwargs_584192)

# Assigning a type to the variable 'F_onewayResult' (line 2827)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2827, 0), 'F_onewayResult', namedtuple_call_result_584193)

@norecursion
def f_oneway(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'f_oneway'
    module_type_store = module_type_store.open_function_context('f_oneway', 2830, 0, False)
    
    # Passed parameters checking function
    f_oneway.stypy_localization = localization
    f_oneway.stypy_type_of_self = None
    f_oneway.stypy_type_store = module_type_store
    f_oneway.stypy_function_name = 'f_oneway'
    f_oneway.stypy_param_names_list = []
    f_oneway.stypy_varargs_param_name = 'args'
    f_oneway.stypy_kwargs_param_name = None
    f_oneway.stypy_call_defaults = defaults
    f_oneway.stypy_call_varargs = varargs
    f_oneway.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'f_oneway', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'f_oneway', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'f_oneway(...)' code ##################

    str_584194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2899, (-1)), 'str', '\n    Performs a 1-way ANOVA.\n\n    The one-way ANOVA tests the null hypothesis that two or more groups have\n    the same population mean.  The test is applied to samples from two or\n    more groups, possibly with differing sizes.\n\n    Parameters\n    ----------\n    sample1, sample2, ... : array_like\n        The sample measurements for each group.\n\n    Returns\n    -------\n    statistic : float\n        The computed F-value of the test.\n    pvalue : float\n        The associated p-value from the F-distribution.\n\n    Notes\n    -----\n    The ANOVA test has important assumptions that must be satisfied in order\n    for the associated p-value to be valid.\n\n    1. The samples are independent.\n    2. Each sample is from a normally distributed population.\n    3. The population standard deviations of the groups are all equal.  This\n       property is known as homoscedasticity.\n\n    If these assumptions are not true for a given set of data, it may still be\n    possible to use the Kruskal-Wallis H-test (`scipy.stats.kruskal`) although\n    with some loss of power.\n\n    The algorithm is from Heiman[2], pp.394-7.\n\n\n    References\n    ----------\n    .. [1] Lowry, Richard.  "Concepts and Applications of Inferential\n           Statistics". Chapter 14.\n           http://faculty.vassar.edu/lowry/ch14pt1.html\n\n    .. [2] Heiman, G.W.  Research Methods in Statistics. 2002.\n\n    .. [3] McDonald, G. H. "Handbook of Biological Statistics", One-way ANOVA.\n           http://www.biostathandbook.com/onewayanova.html\n\n    Examples\n    --------\n    >>> import scipy.stats as stats\n\n    [3]_ Here are some data on a shell measurement (the length of the anterior\n    adductor muscle scar, standardized by dividing by length) in the mussel\n    Mytilus trossulus from five locations: Tillamook, Oregon; Newport, Oregon;\n    Petersburg, Alaska; Magadan, Russia; and Tvarminne, Finland, taken from a\n    much larger data set used in McDonald et al. (1991).\n\n    >>> tillamook = [0.0571, 0.0813, 0.0831, 0.0976, 0.0817, 0.0859, 0.0735,\n    ...              0.0659, 0.0923, 0.0836]\n    >>> newport = [0.0873, 0.0662, 0.0672, 0.0819, 0.0749, 0.0649, 0.0835,\n    ...            0.0725]\n    >>> petersburg = [0.0974, 0.1352, 0.0817, 0.1016, 0.0968, 0.1064, 0.105]\n    >>> magadan = [0.1033, 0.0915, 0.0781, 0.0685, 0.0677, 0.0697, 0.0764,\n    ...            0.0689]\n    >>> tvarminne = [0.0703, 0.1026, 0.0956, 0.0973, 0.1039, 0.1045]\n    >>> stats.f_oneway(tillamook, newport, petersburg, magadan, tvarminne)\n    (7.1210194716424473, 0.00028122423145345439)\n\n    ')
    
    # Assigning a ListComp to a Name (line 2900):
    
    # Assigning a ListComp to a Name (line 2900):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'args' (line 2900)
    args_584202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 52), 'args')
    comprehension_584203 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2900, 12), args_584202)
    # Assigning a type to the variable 'arg' (line 2900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2900, 12), 'arg', comprehension_584203)
    
    # Call to asarray(...): (line 2900)
    # Processing the call arguments (line 2900)
    # Getting the type of 'arg' (line 2900)
    arg_584197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 23), 'arg', False)
    # Processing the call keyword arguments (line 2900)
    # Getting the type of 'float' (line 2900)
    float_584198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 34), 'float', False)
    keyword_584199 = float_584198
    kwargs_584200 = {'dtype': keyword_584199}
    # Getting the type of 'np' (line 2900)
    np_584195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2900)
    asarray_584196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2900, 12), np_584195, 'asarray')
    # Calling asarray(args, kwargs) (line 2900)
    asarray_call_result_584201 = invoke(stypy.reporting.localization.Localization(__file__, 2900, 12), asarray_584196, *[arg_584197], **kwargs_584200)
    
    list_584204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2900, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2900, 12), list_584204, asarray_call_result_584201)
    # Assigning a type to the variable 'args' (line 2900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2900, 4), 'args', list_584204)
    
    # Assigning a Call to a Name (line 2902):
    
    # Assigning a Call to a Name (line 2902):
    
    # Call to len(...): (line 2902)
    # Processing the call arguments (line 2902)
    # Getting the type of 'args' (line 2902)
    args_584206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 21), 'args', False)
    # Processing the call keyword arguments (line 2902)
    kwargs_584207 = {}
    # Getting the type of 'len' (line 2902)
    len_584205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 17), 'len', False)
    # Calling len(args, kwargs) (line 2902)
    len_call_result_584208 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 17), len_584205, *[args_584206], **kwargs_584207)
    
    # Assigning a type to the variable 'num_groups' (line 2902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2902, 4), 'num_groups', len_call_result_584208)
    
    # Assigning a Call to a Name (line 2903):
    
    # Assigning a Call to a Name (line 2903):
    
    # Call to concatenate(...): (line 2903)
    # Processing the call arguments (line 2903)
    # Getting the type of 'args' (line 2903)
    args_584211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 29), 'args', False)
    # Processing the call keyword arguments (line 2903)
    kwargs_584212 = {}
    # Getting the type of 'np' (line 2903)
    np_584209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 14), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 2903)
    concatenate_584210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2903, 14), np_584209, 'concatenate')
    # Calling concatenate(args, kwargs) (line 2903)
    concatenate_call_result_584213 = invoke(stypy.reporting.localization.Localization(__file__, 2903, 14), concatenate_584210, *[args_584211], **kwargs_584212)
    
    # Assigning a type to the variable 'alldata' (line 2903)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2903, 4), 'alldata', concatenate_call_result_584213)
    
    # Assigning a Call to a Name (line 2904):
    
    # Assigning a Call to a Name (line 2904):
    
    # Call to len(...): (line 2904)
    # Processing the call arguments (line 2904)
    # Getting the type of 'alldata' (line 2904)
    alldata_584215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 15), 'alldata', False)
    # Processing the call keyword arguments (line 2904)
    kwargs_584216 = {}
    # Getting the type of 'len' (line 2904)
    len_584214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 11), 'len', False)
    # Calling len(args, kwargs) (line 2904)
    len_call_result_584217 = invoke(stypy.reporting.localization.Localization(__file__, 2904, 11), len_584214, *[alldata_584215], **kwargs_584216)
    
    # Assigning a type to the variable 'bign' (line 2904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2904, 4), 'bign', len_call_result_584217)
    
    # Assigning a Call to a Name (line 2910):
    
    # Assigning a Call to a Name (line 2910):
    
    # Call to mean(...): (line 2910)
    # Processing the call keyword arguments (line 2910)
    kwargs_584220 = {}
    # Getting the type of 'alldata' (line 2910)
    alldata_584218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2910, 13), 'alldata', False)
    # Obtaining the member 'mean' of a type (line 2910)
    mean_584219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2910, 13), alldata_584218, 'mean')
    # Calling mean(args, kwargs) (line 2910)
    mean_call_result_584221 = invoke(stypy.reporting.localization.Localization(__file__, 2910, 13), mean_584219, *[], **kwargs_584220)
    
    # Assigning a type to the variable 'offset' (line 2910)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2910, 4), 'offset', mean_call_result_584221)
    
    # Getting the type of 'alldata' (line 2911)
    alldata_584222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 4), 'alldata')
    # Getting the type of 'offset' (line 2911)
    offset_584223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 15), 'offset')
    # Applying the binary operator '-=' (line 2911)
    result_isub_584224 = python_operator(stypy.reporting.localization.Localization(__file__, 2911, 4), '-=', alldata_584222, offset_584223)
    # Assigning a type to the variable 'alldata' (line 2911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2911, 4), 'alldata', result_isub_584224)
    
    
    # Assigning a BinOp to a Name (line 2913):
    
    # Assigning a BinOp to a Name (line 2913):
    
    # Call to _sum_of_squares(...): (line 2913)
    # Processing the call arguments (line 2913)
    # Getting the type of 'alldata' (line 2913)
    alldata_584226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 28), 'alldata', False)
    # Processing the call keyword arguments (line 2913)
    kwargs_584227 = {}
    # Getting the type of '_sum_of_squares' (line 2913)
    _sum_of_squares_584225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 12), '_sum_of_squares', False)
    # Calling _sum_of_squares(args, kwargs) (line 2913)
    _sum_of_squares_call_result_584228 = invoke(stypy.reporting.localization.Localization(__file__, 2913, 12), _sum_of_squares_584225, *[alldata_584226], **kwargs_584227)
    
    
    # Call to _square_of_sums(...): (line 2913)
    # Processing the call arguments (line 2913)
    # Getting the type of 'alldata' (line 2913)
    alldata_584230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 56), 'alldata', False)
    # Processing the call keyword arguments (line 2913)
    kwargs_584231 = {}
    # Getting the type of '_square_of_sums' (line 2913)
    _square_of_sums_584229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 40), '_square_of_sums', False)
    # Calling _square_of_sums(args, kwargs) (line 2913)
    _square_of_sums_call_result_584232 = invoke(stypy.reporting.localization.Localization(__file__, 2913, 40), _square_of_sums_584229, *[alldata_584230], **kwargs_584231)
    
    
    # Call to float(...): (line 2913)
    # Processing the call arguments (line 2913)
    # Getting the type of 'bign' (line 2913)
    bign_584234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 73), 'bign', False)
    # Processing the call keyword arguments (line 2913)
    kwargs_584235 = {}
    # Getting the type of 'float' (line 2913)
    float_584233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 67), 'float', False)
    # Calling float(args, kwargs) (line 2913)
    float_call_result_584236 = invoke(stypy.reporting.localization.Localization(__file__, 2913, 67), float_584233, *[bign_584234], **kwargs_584235)
    
    # Applying the binary operator 'div' (line 2913)
    result_div_584237 = python_operator(stypy.reporting.localization.Localization(__file__, 2913, 40), 'div', _square_of_sums_call_result_584232, float_call_result_584236)
    
    # Applying the binary operator '-' (line 2913)
    result_sub_584238 = python_operator(stypy.reporting.localization.Localization(__file__, 2913, 12), '-', _sum_of_squares_call_result_584228, result_div_584237)
    
    # Assigning a type to the variable 'sstot' (line 2913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2913, 4), 'sstot', result_sub_584238)
    
    # Assigning a Num to a Name (line 2914):
    
    # Assigning a Num to a Name (line 2914):
    int_584239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2914, 11), 'int')
    # Assigning a type to the variable 'ssbn' (line 2914)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2914, 4), 'ssbn', int_584239)
    
    # Getting the type of 'args' (line 2915)
    args_584240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2915, 13), 'args')
    # Testing the type of a for loop iterable (line 2915)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2915, 4), args_584240)
    # Getting the type of the for loop variable (line 2915)
    for_loop_var_584241 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2915, 4), args_584240)
    # Assigning a type to the variable 'a' (line 2915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2915, 4), 'a', for_loop_var_584241)
    # SSA begins for a for statement (line 2915)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'ssbn' (line 2916)
    ssbn_584242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 8), 'ssbn')
    
    # Call to _square_of_sums(...): (line 2916)
    # Processing the call arguments (line 2916)
    # Getting the type of 'a' (line 2916)
    a_584244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 32), 'a', False)
    # Getting the type of 'offset' (line 2916)
    offset_584245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 36), 'offset', False)
    # Applying the binary operator '-' (line 2916)
    result_sub_584246 = python_operator(stypy.reporting.localization.Localization(__file__, 2916, 32), '-', a_584244, offset_584245)
    
    # Processing the call keyword arguments (line 2916)
    kwargs_584247 = {}
    # Getting the type of '_square_of_sums' (line 2916)
    _square_of_sums_584243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 16), '_square_of_sums', False)
    # Calling _square_of_sums(args, kwargs) (line 2916)
    _square_of_sums_call_result_584248 = invoke(stypy.reporting.localization.Localization(__file__, 2916, 16), _square_of_sums_584243, *[result_sub_584246], **kwargs_584247)
    
    
    # Call to float(...): (line 2916)
    # Processing the call arguments (line 2916)
    
    # Call to len(...): (line 2916)
    # Processing the call arguments (line 2916)
    # Getting the type of 'a' (line 2916)
    a_584251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 56), 'a', False)
    # Processing the call keyword arguments (line 2916)
    kwargs_584252 = {}
    # Getting the type of 'len' (line 2916)
    len_584250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 52), 'len', False)
    # Calling len(args, kwargs) (line 2916)
    len_call_result_584253 = invoke(stypy.reporting.localization.Localization(__file__, 2916, 52), len_584250, *[a_584251], **kwargs_584252)
    
    # Processing the call keyword arguments (line 2916)
    kwargs_584254 = {}
    # Getting the type of 'float' (line 2916)
    float_584249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 46), 'float', False)
    # Calling float(args, kwargs) (line 2916)
    float_call_result_584255 = invoke(stypy.reporting.localization.Localization(__file__, 2916, 46), float_584249, *[len_call_result_584253], **kwargs_584254)
    
    # Applying the binary operator 'div' (line 2916)
    result_div_584256 = python_operator(stypy.reporting.localization.Localization(__file__, 2916, 16), 'div', _square_of_sums_call_result_584248, float_call_result_584255)
    
    # Applying the binary operator '+=' (line 2916)
    result_iadd_584257 = python_operator(stypy.reporting.localization.Localization(__file__, 2916, 8), '+=', ssbn_584242, result_div_584256)
    # Assigning a type to the variable 'ssbn' (line 2916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2916, 8), 'ssbn', result_iadd_584257)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'ssbn' (line 2920)
    ssbn_584258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2920, 4), 'ssbn')
    
    # Call to _square_of_sums(...): (line 2920)
    # Processing the call arguments (line 2920)
    # Getting the type of 'alldata' (line 2920)
    alldata_584260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2920, 29), 'alldata', False)
    # Processing the call keyword arguments (line 2920)
    kwargs_584261 = {}
    # Getting the type of '_square_of_sums' (line 2920)
    _square_of_sums_584259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2920, 13), '_square_of_sums', False)
    # Calling _square_of_sums(args, kwargs) (line 2920)
    _square_of_sums_call_result_584262 = invoke(stypy.reporting.localization.Localization(__file__, 2920, 13), _square_of_sums_584259, *[alldata_584260], **kwargs_584261)
    
    
    # Call to float(...): (line 2920)
    # Processing the call arguments (line 2920)
    # Getting the type of 'bign' (line 2920)
    bign_584264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2920, 46), 'bign', False)
    # Processing the call keyword arguments (line 2920)
    kwargs_584265 = {}
    # Getting the type of 'float' (line 2920)
    float_584263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2920, 40), 'float', False)
    # Calling float(args, kwargs) (line 2920)
    float_call_result_584266 = invoke(stypy.reporting.localization.Localization(__file__, 2920, 40), float_584263, *[bign_584264], **kwargs_584265)
    
    # Applying the binary operator 'div' (line 2920)
    result_div_584267 = python_operator(stypy.reporting.localization.Localization(__file__, 2920, 13), 'div', _square_of_sums_call_result_584262, float_call_result_584266)
    
    # Applying the binary operator '-=' (line 2920)
    result_isub_584268 = python_operator(stypy.reporting.localization.Localization(__file__, 2920, 4), '-=', ssbn_584258, result_div_584267)
    # Assigning a type to the variable 'ssbn' (line 2920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2920, 4), 'ssbn', result_isub_584268)
    
    
    # Assigning a BinOp to a Name (line 2921):
    
    # Assigning a BinOp to a Name (line 2921):
    # Getting the type of 'sstot' (line 2921)
    sstot_584269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 11), 'sstot')
    # Getting the type of 'ssbn' (line 2921)
    ssbn_584270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 19), 'ssbn')
    # Applying the binary operator '-' (line 2921)
    result_sub_584271 = python_operator(stypy.reporting.localization.Localization(__file__, 2921, 11), '-', sstot_584269, ssbn_584270)
    
    # Assigning a type to the variable 'sswn' (line 2921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2921, 4), 'sswn', result_sub_584271)
    
    # Assigning a BinOp to a Name (line 2922):
    
    # Assigning a BinOp to a Name (line 2922):
    # Getting the type of 'num_groups' (line 2922)
    num_groups_584272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 11), 'num_groups')
    int_584273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2922, 24), 'int')
    # Applying the binary operator '-' (line 2922)
    result_sub_584274 = python_operator(stypy.reporting.localization.Localization(__file__, 2922, 11), '-', num_groups_584272, int_584273)
    
    # Assigning a type to the variable 'dfbn' (line 2922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2922, 4), 'dfbn', result_sub_584274)
    
    # Assigning a BinOp to a Name (line 2923):
    
    # Assigning a BinOp to a Name (line 2923):
    # Getting the type of 'bign' (line 2923)
    bign_584275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 11), 'bign')
    # Getting the type of 'num_groups' (line 2923)
    num_groups_584276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 18), 'num_groups')
    # Applying the binary operator '-' (line 2923)
    result_sub_584277 = python_operator(stypy.reporting.localization.Localization(__file__, 2923, 11), '-', bign_584275, num_groups_584276)
    
    # Assigning a type to the variable 'dfwn' (line 2923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2923, 4), 'dfwn', result_sub_584277)
    
    # Assigning a BinOp to a Name (line 2924):
    
    # Assigning a BinOp to a Name (line 2924):
    # Getting the type of 'ssbn' (line 2924)
    ssbn_584278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2924, 10), 'ssbn')
    
    # Call to float(...): (line 2924)
    # Processing the call arguments (line 2924)
    # Getting the type of 'dfbn' (line 2924)
    dfbn_584280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2924, 23), 'dfbn', False)
    # Processing the call keyword arguments (line 2924)
    kwargs_584281 = {}
    # Getting the type of 'float' (line 2924)
    float_584279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2924, 17), 'float', False)
    # Calling float(args, kwargs) (line 2924)
    float_call_result_584282 = invoke(stypy.reporting.localization.Localization(__file__, 2924, 17), float_584279, *[dfbn_584280], **kwargs_584281)
    
    # Applying the binary operator 'div' (line 2924)
    result_div_584283 = python_operator(stypy.reporting.localization.Localization(__file__, 2924, 10), 'div', ssbn_584278, float_call_result_584282)
    
    # Assigning a type to the variable 'msb' (line 2924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2924, 4), 'msb', result_div_584283)
    
    # Assigning a BinOp to a Name (line 2925):
    
    # Assigning a BinOp to a Name (line 2925):
    # Getting the type of 'sswn' (line 2925)
    sswn_584284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 10), 'sswn')
    
    # Call to float(...): (line 2925)
    # Processing the call arguments (line 2925)
    # Getting the type of 'dfwn' (line 2925)
    dfwn_584286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 23), 'dfwn', False)
    # Processing the call keyword arguments (line 2925)
    kwargs_584287 = {}
    # Getting the type of 'float' (line 2925)
    float_584285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 17), 'float', False)
    # Calling float(args, kwargs) (line 2925)
    float_call_result_584288 = invoke(stypy.reporting.localization.Localization(__file__, 2925, 17), float_584285, *[dfwn_584286], **kwargs_584287)
    
    # Applying the binary operator 'div' (line 2925)
    result_div_584289 = python_operator(stypy.reporting.localization.Localization(__file__, 2925, 10), 'div', sswn_584284, float_call_result_584288)
    
    # Assigning a type to the variable 'msw' (line 2925)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2925, 4), 'msw', result_div_584289)
    
    # Assigning a BinOp to a Name (line 2926):
    
    # Assigning a BinOp to a Name (line 2926):
    # Getting the type of 'msb' (line 2926)
    msb_584290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 8), 'msb')
    # Getting the type of 'msw' (line 2926)
    msw_584291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 14), 'msw')
    # Applying the binary operator 'div' (line 2926)
    result_div_584292 = python_operator(stypy.reporting.localization.Localization(__file__, 2926, 8), 'div', msb_584290, msw_584291)
    
    # Assigning a type to the variable 'f' (line 2926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2926, 4), 'f', result_div_584292)
    
    # Assigning a Call to a Name (line 2928):
    
    # Assigning a Call to a Name (line 2928):
    
    # Call to fdtrc(...): (line 2928)
    # Processing the call arguments (line 2928)
    # Getting the type of 'dfbn' (line 2928)
    dfbn_584295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 25), 'dfbn', False)
    # Getting the type of 'dfwn' (line 2928)
    dfwn_584296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 31), 'dfwn', False)
    # Getting the type of 'f' (line 2928)
    f_584297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 37), 'f', False)
    # Processing the call keyword arguments (line 2928)
    kwargs_584298 = {}
    # Getting the type of 'special' (line 2928)
    special_584293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 11), 'special', False)
    # Obtaining the member 'fdtrc' of a type (line 2928)
    fdtrc_584294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2928, 11), special_584293, 'fdtrc')
    # Calling fdtrc(args, kwargs) (line 2928)
    fdtrc_call_result_584299 = invoke(stypy.reporting.localization.Localization(__file__, 2928, 11), fdtrc_584294, *[dfbn_584295, dfwn_584296, f_584297], **kwargs_584298)
    
    # Assigning a type to the variable 'prob' (line 2928)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2928, 4), 'prob', fdtrc_call_result_584299)
    
    # Call to F_onewayResult(...): (line 2930)
    # Processing the call arguments (line 2930)
    # Getting the type of 'f' (line 2930)
    f_584301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 26), 'f', False)
    # Getting the type of 'prob' (line 2930)
    prob_584302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 29), 'prob', False)
    # Processing the call keyword arguments (line 2930)
    kwargs_584303 = {}
    # Getting the type of 'F_onewayResult' (line 2930)
    F_onewayResult_584300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 11), 'F_onewayResult', False)
    # Calling F_onewayResult(args, kwargs) (line 2930)
    F_onewayResult_call_result_584304 = invoke(stypy.reporting.localization.Localization(__file__, 2930, 11), F_onewayResult_584300, *[f_584301, prob_584302], **kwargs_584303)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2930, 4), 'stypy_return_type', F_onewayResult_call_result_584304)
    
    # ################# End of 'f_oneway(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'f_oneway' in the type store
    # Getting the type of 'stypy_return_type' (line 2830)
    stypy_return_type_584305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2830, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_584305)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'f_oneway'
    return stypy_return_type_584305

# Assigning a type to the variable 'f_oneway' (line 2830)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2830, 0), 'f_oneway', f_oneway)

@norecursion
def pearsonr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pearsonr'
    module_type_store = module_type_store.open_function_context('pearsonr', 2933, 0, False)
    
    # Passed parameters checking function
    pearsonr.stypy_localization = localization
    pearsonr.stypy_type_of_self = None
    pearsonr.stypy_type_store = module_type_store
    pearsonr.stypy_function_name = 'pearsonr'
    pearsonr.stypy_param_names_list = ['x', 'y']
    pearsonr.stypy_varargs_param_name = None
    pearsonr.stypy_kwargs_param_name = None
    pearsonr.stypy_call_defaults = defaults
    pearsonr.stypy_call_varargs = varargs
    pearsonr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pearsonr', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pearsonr', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pearsonr(...)' code ##################

    str_584306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2993, (-1)), 'str', "\n    Calculate a Pearson correlation coefficient and the p-value for testing\n    non-correlation.\n\n    The Pearson correlation coefficient measures the linear relationship\n    between two datasets. Strictly speaking, Pearson's correlation requires\n    that each dataset be normally distributed, and not necessarily zero-mean.\n    Like other correlation coefficients, this one varies between -1 and +1\n    with 0 implying no correlation. Correlations of -1 or +1 imply an exact\n    linear relationship. Positive correlations imply that as x increases, so\n    does y. Negative correlations imply that as x increases, y decreases.\n\n    The p-value roughly indicates the probability of an uncorrelated system\n    producing datasets that have a Pearson correlation at least as extreme\n    as the one computed from these datasets. The p-values are not entirely\n    reliable but are probably reasonable for datasets larger than 500 or so.\n\n    Parameters\n    ----------\n    x : (N,) array_like\n        Input\n    y : (N,) array_like\n        Input\n\n    Returns\n    -------\n    r : float\n        Pearson's correlation coefficient\n    p-value : float\n        2-tailed p-value\n\n    Notes\n    -----\n\n    The correlation coefficient is calculated as follows:\n\n    .. math::\n\n        r_{pb} = \\frac{\\sum (x - m_x) (y - m_y)\n                       }{\\sqrt{\\sum (x - m_x)^2 (y - m_y)^2}}\n\n    where :math:`m_x` is the mean of the vector :math:`x` and :math:`m_y` is\n    the mean of the vector :math:`y`.\n\n\n    References\n    ----------\n    http://www.statsoft.com/textbook/glosp.html#Pearson%20Correlation\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> a = np.array([0, 0, 0, 1, 1, 1, 1])\n    >>> b = np.arange(7)\n    >>> stats.pearsonr(a, b)\n    (0.8660254037844386, 0.011724811003954654)\n\n    >>> stats.pearsonr([1,2,3,4,5], [5,6,7,8,7])\n    (0.83205029433784372, 0.080509573298498519)\n    ")
    
    # Assigning a Call to a Name (line 2995):
    
    # Assigning a Call to a Name (line 2995):
    
    # Call to asarray(...): (line 2995)
    # Processing the call arguments (line 2995)
    # Getting the type of 'x' (line 2995)
    x_584309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 19), 'x', False)
    # Processing the call keyword arguments (line 2995)
    kwargs_584310 = {}
    # Getting the type of 'np' (line 2995)
    np_584307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2995)
    asarray_584308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2995, 8), np_584307, 'asarray')
    # Calling asarray(args, kwargs) (line 2995)
    asarray_call_result_584311 = invoke(stypy.reporting.localization.Localization(__file__, 2995, 8), asarray_584308, *[x_584309], **kwargs_584310)
    
    # Assigning a type to the variable 'x' (line 2995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2995, 4), 'x', asarray_call_result_584311)
    
    # Assigning a Call to a Name (line 2996):
    
    # Assigning a Call to a Name (line 2996):
    
    # Call to asarray(...): (line 2996)
    # Processing the call arguments (line 2996)
    # Getting the type of 'y' (line 2996)
    y_584314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2996, 19), 'y', False)
    # Processing the call keyword arguments (line 2996)
    kwargs_584315 = {}
    # Getting the type of 'np' (line 2996)
    np_584312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2996, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2996)
    asarray_584313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2996, 8), np_584312, 'asarray')
    # Calling asarray(args, kwargs) (line 2996)
    asarray_call_result_584316 = invoke(stypy.reporting.localization.Localization(__file__, 2996, 8), asarray_584313, *[y_584314], **kwargs_584315)
    
    # Assigning a type to the variable 'y' (line 2996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2996, 4), 'y', asarray_call_result_584316)
    
    # Assigning a Call to a Name (line 2997):
    
    # Assigning a Call to a Name (line 2997):
    
    # Call to len(...): (line 2997)
    # Processing the call arguments (line 2997)
    # Getting the type of 'x' (line 2997)
    x_584318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2997, 12), 'x', False)
    # Processing the call keyword arguments (line 2997)
    kwargs_584319 = {}
    # Getting the type of 'len' (line 2997)
    len_584317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2997, 8), 'len', False)
    # Calling len(args, kwargs) (line 2997)
    len_call_result_584320 = invoke(stypy.reporting.localization.Localization(__file__, 2997, 8), len_584317, *[x_584318], **kwargs_584319)
    
    # Assigning a type to the variable 'n' (line 2997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2997, 4), 'n', len_call_result_584320)
    
    # Assigning a Call to a Name (line 2998):
    
    # Assigning a Call to a Name (line 2998):
    
    # Call to mean(...): (line 2998)
    # Processing the call keyword arguments (line 2998)
    kwargs_584323 = {}
    # Getting the type of 'x' (line 2998)
    x_584321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2998, 9), 'x', False)
    # Obtaining the member 'mean' of a type (line 2998)
    mean_584322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2998, 9), x_584321, 'mean')
    # Calling mean(args, kwargs) (line 2998)
    mean_call_result_584324 = invoke(stypy.reporting.localization.Localization(__file__, 2998, 9), mean_584322, *[], **kwargs_584323)
    
    # Assigning a type to the variable 'mx' (line 2998)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2998, 4), 'mx', mean_call_result_584324)
    
    # Assigning a Call to a Name (line 2999):
    
    # Assigning a Call to a Name (line 2999):
    
    # Call to mean(...): (line 2999)
    # Processing the call keyword arguments (line 2999)
    kwargs_584327 = {}
    # Getting the type of 'y' (line 2999)
    y_584325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2999, 9), 'y', False)
    # Obtaining the member 'mean' of a type (line 2999)
    mean_584326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2999, 9), y_584325, 'mean')
    # Calling mean(args, kwargs) (line 2999)
    mean_call_result_584328 = invoke(stypy.reporting.localization.Localization(__file__, 2999, 9), mean_584326, *[], **kwargs_584327)
    
    # Assigning a type to the variable 'my' (line 2999)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2999, 4), 'my', mean_call_result_584328)
    
    # Assigning a Tuple to a Tuple (line 3000):
    
    # Assigning a BinOp to a Name (line 3000):
    # Getting the type of 'x' (line 3000)
    x_584329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 13), 'x')
    # Getting the type of 'mx' (line 3000)
    mx_584330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 17), 'mx')
    # Applying the binary operator '-' (line 3000)
    result_sub_584331 = python_operator(stypy.reporting.localization.Localization(__file__, 3000, 13), '-', x_584329, mx_584330)
    
    # Assigning a type to the variable 'tuple_assignment_579917' (line 3000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3000, 4), 'tuple_assignment_579917', result_sub_584331)
    
    # Assigning a BinOp to a Name (line 3000):
    # Getting the type of 'y' (line 3000)
    y_584332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 21), 'y')
    # Getting the type of 'my' (line 3000)
    my_584333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 25), 'my')
    # Applying the binary operator '-' (line 3000)
    result_sub_584334 = python_operator(stypy.reporting.localization.Localization(__file__, 3000, 21), '-', y_584332, my_584333)
    
    # Assigning a type to the variable 'tuple_assignment_579918' (line 3000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3000, 4), 'tuple_assignment_579918', result_sub_584334)
    
    # Assigning a Name to a Name (line 3000):
    # Getting the type of 'tuple_assignment_579917' (line 3000)
    tuple_assignment_579917_584335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 4), 'tuple_assignment_579917')
    # Assigning a type to the variable 'xm' (line 3000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3000, 4), 'xm', tuple_assignment_579917_584335)
    
    # Assigning a Name to a Name (line 3000):
    # Getting the type of 'tuple_assignment_579918' (line 3000)
    tuple_assignment_579918_584336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 4), 'tuple_assignment_579918')
    # Assigning a type to the variable 'ym' (line 3000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3000, 8), 'ym', tuple_assignment_579918_584336)
    
    # Assigning a Call to a Name (line 3001):
    
    # Assigning a Call to a Name (line 3001):
    
    # Call to reduce(...): (line 3001)
    # Processing the call arguments (line 3001)
    # Getting the type of 'xm' (line 3001)
    xm_584340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 26), 'xm', False)
    # Getting the type of 'ym' (line 3001)
    ym_584341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 31), 'ym', False)
    # Applying the binary operator '*' (line 3001)
    result_mul_584342 = python_operator(stypy.reporting.localization.Localization(__file__, 3001, 26), '*', xm_584340, ym_584341)
    
    # Processing the call keyword arguments (line 3001)
    kwargs_584343 = {}
    # Getting the type of 'np' (line 3001)
    np_584337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 12), 'np', False)
    # Obtaining the member 'add' of a type (line 3001)
    add_584338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3001, 12), np_584337, 'add')
    # Obtaining the member 'reduce' of a type (line 3001)
    reduce_584339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3001, 12), add_584338, 'reduce')
    # Calling reduce(args, kwargs) (line 3001)
    reduce_call_result_584344 = invoke(stypy.reporting.localization.Localization(__file__, 3001, 12), reduce_584339, *[result_mul_584342], **kwargs_584343)
    
    # Assigning a type to the variable 'r_num' (line 3001)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3001, 4), 'r_num', reduce_call_result_584344)
    
    # Assigning a Call to a Name (line 3002):
    
    # Assigning a Call to a Name (line 3002):
    
    # Call to sqrt(...): (line 3002)
    # Processing the call arguments (line 3002)
    
    # Call to _sum_of_squares(...): (line 3002)
    # Processing the call arguments (line 3002)
    # Getting the type of 'xm' (line 3002)
    xm_584348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 36), 'xm', False)
    # Processing the call keyword arguments (line 3002)
    kwargs_584349 = {}
    # Getting the type of '_sum_of_squares' (line 3002)
    _sum_of_squares_584347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 20), '_sum_of_squares', False)
    # Calling _sum_of_squares(args, kwargs) (line 3002)
    _sum_of_squares_call_result_584350 = invoke(stypy.reporting.localization.Localization(__file__, 3002, 20), _sum_of_squares_584347, *[xm_584348], **kwargs_584349)
    
    
    # Call to _sum_of_squares(...): (line 3002)
    # Processing the call arguments (line 3002)
    # Getting the type of 'ym' (line 3002)
    ym_584352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 58), 'ym', False)
    # Processing the call keyword arguments (line 3002)
    kwargs_584353 = {}
    # Getting the type of '_sum_of_squares' (line 3002)
    _sum_of_squares_584351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 42), '_sum_of_squares', False)
    # Calling _sum_of_squares(args, kwargs) (line 3002)
    _sum_of_squares_call_result_584354 = invoke(stypy.reporting.localization.Localization(__file__, 3002, 42), _sum_of_squares_584351, *[ym_584352], **kwargs_584353)
    
    # Applying the binary operator '*' (line 3002)
    result_mul_584355 = python_operator(stypy.reporting.localization.Localization(__file__, 3002, 20), '*', _sum_of_squares_call_result_584350, _sum_of_squares_call_result_584354)
    
    # Processing the call keyword arguments (line 3002)
    kwargs_584356 = {}
    # Getting the type of 'np' (line 3002)
    np_584345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 12), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 3002)
    sqrt_584346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3002, 12), np_584345, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3002)
    sqrt_call_result_584357 = invoke(stypy.reporting.localization.Localization(__file__, 3002, 12), sqrt_584346, *[result_mul_584355], **kwargs_584356)
    
    # Assigning a type to the variable 'r_den' (line 3002)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3002, 4), 'r_den', sqrt_call_result_584357)
    
    # Assigning a BinOp to a Name (line 3003):
    
    # Assigning a BinOp to a Name (line 3003):
    # Getting the type of 'r_num' (line 3003)
    r_num_584358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 8), 'r_num')
    # Getting the type of 'r_den' (line 3003)
    r_den_584359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 16), 'r_den')
    # Applying the binary operator 'div' (line 3003)
    result_div_584360 = python_operator(stypy.reporting.localization.Localization(__file__, 3003, 8), 'div', r_num_584358, r_den_584359)
    
    # Assigning a type to the variable 'r' (line 3003)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3003, 4), 'r', result_div_584360)
    
    # Assigning a Call to a Name (line 3007):
    
    # Assigning a Call to a Name (line 3007):
    
    # Call to max(...): (line 3007)
    # Processing the call arguments (line 3007)
    
    # Call to min(...): (line 3007)
    # Processing the call arguments (line 3007)
    # Getting the type of 'r' (line 3007)
    r_584363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 16), 'r', False)
    float_584364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3007, 19), 'float')
    # Processing the call keyword arguments (line 3007)
    kwargs_584365 = {}
    # Getting the type of 'min' (line 3007)
    min_584362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 12), 'min', False)
    # Calling min(args, kwargs) (line 3007)
    min_call_result_584366 = invoke(stypy.reporting.localization.Localization(__file__, 3007, 12), min_584362, *[r_584363, float_584364], **kwargs_584365)
    
    float_584367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3007, 25), 'float')
    # Processing the call keyword arguments (line 3007)
    kwargs_584368 = {}
    # Getting the type of 'max' (line 3007)
    max_584361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 8), 'max', False)
    # Calling max(args, kwargs) (line 3007)
    max_call_result_584369 = invoke(stypy.reporting.localization.Localization(__file__, 3007, 8), max_584361, *[min_call_result_584366, float_584367], **kwargs_584368)
    
    # Assigning a type to the variable 'r' (line 3007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3007, 4), 'r', max_call_result_584369)
    
    # Assigning a BinOp to a Name (line 3008):
    
    # Assigning a BinOp to a Name (line 3008):
    # Getting the type of 'n' (line 3008)
    n_584370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3008, 9), 'n')
    int_584371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3008, 13), 'int')
    # Applying the binary operator '-' (line 3008)
    result_sub_584372 = python_operator(stypy.reporting.localization.Localization(__file__, 3008, 9), '-', n_584370, int_584371)
    
    # Assigning a type to the variable 'df' (line 3008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3008, 4), 'df', result_sub_584372)
    
    
    
    # Call to abs(...): (line 3009)
    # Processing the call arguments (line 3009)
    # Getting the type of 'r' (line 3009)
    r_584374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 11), 'r', False)
    # Processing the call keyword arguments (line 3009)
    kwargs_584375 = {}
    # Getting the type of 'abs' (line 3009)
    abs_584373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 3009)
    abs_call_result_584376 = invoke(stypy.reporting.localization.Localization(__file__, 3009, 7), abs_584373, *[r_584374], **kwargs_584375)
    
    float_584377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3009, 17), 'float')
    # Applying the binary operator '==' (line 3009)
    result_eq_584378 = python_operator(stypy.reporting.localization.Localization(__file__, 3009, 7), '==', abs_call_result_584376, float_584377)
    
    # Testing the type of an if condition (line 3009)
    if_condition_584379 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3009, 4), result_eq_584378)
    # Assigning a type to the variable 'if_condition_584379' (line 3009)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3009, 4), 'if_condition_584379', if_condition_584379)
    # SSA begins for if statement (line 3009)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 3010):
    
    # Assigning a Num to a Name (line 3010):
    float_584380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3010, 15), 'float')
    # Assigning a type to the variable 'prob' (line 3010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3010, 8), 'prob', float_584380)
    # SSA branch for the else part of an if statement (line 3009)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 3012):
    
    # Assigning a BinOp to a Name (line 3012):
    # Getting the type of 'r' (line 3012)
    r_584381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 20), 'r')
    int_584382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3012, 23), 'int')
    # Applying the binary operator '**' (line 3012)
    result_pow_584383 = python_operator(stypy.reporting.localization.Localization(__file__, 3012, 20), '**', r_584381, int_584382)
    
    # Getting the type of 'df' (line 3012)
    df_584384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 28), 'df')
    float_584385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3012, 35), 'float')
    # Getting the type of 'r' (line 3012)
    r_584386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 41), 'r')
    # Applying the binary operator '-' (line 3012)
    result_sub_584387 = python_operator(stypy.reporting.localization.Localization(__file__, 3012, 35), '-', float_584385, r_584386)
    
    float_584388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3012, 47), 'float')
    # Getting the type of 'r' (line 3012)
    r_584389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 53), 'r')
    # Applying the binary operator '+' (line 3012)
    result_add_584390 = python_operator(stypy.reporting.localization.Localization(__file__, 3012, 47), '+', float_584388, r_584389)
    
    # Applying the binary operator '*' (line 3012)
    result_mul_584391 = python_operator(stypy.reporting.localization.Localization(__file__, 3012, 34), '*', result_sub_584387, result_add_584390)
    
    # Applying the binary operator 'div' (line 3012)
    result_div_584392 = python_operator(stypy.reporting.localization.Localization(__file__, 3012, 28), 'div', df_584384, result_mul_584391)
    
    # Applying the binary operator '*' (line 3012)
    result_mul_584393 = python_operator(stypy.reporting.localization.Localization(__file__, 3012, 20), '*', result_pow_584383, result_div_584392)
    
    # Assigning a type to the variable 't_squared' (line 3012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3012, 8), 't_squared', result_mul_584393)
    
    # Assigning a Call to a Name (line 3013):
    
    # Assigning a Call to a Name (line 3013):
    
    # Call to _betai(...): (line 3013)
    # Processing the call arguments (line 3013)
    float_584395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3013, 22), 'float')
    # Getting the type of 'df' (line 3013)
    df_584396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 26), 'df', False)
    # Applying the binary operator '*' (line 3013)
    result_mul_584397 = python_operator(stypy.reporting.localization.Localization(__file__, 3013, 22), '*', float_584395, df_584396)
    
    float_584398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3013, 30), 'float')
    # Getting the type of 'df' (line 3013)
    df_584399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 35), 'df', False)
    # Getting the type of 'df' (line 3013)
    df_584400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 39), 'df', False)
    # Getting the type of 't_squared' (line 3013)
    t_squared_584401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 42), 't_squared', False)
    # Applying the binary operator '+' (line 3013)
    result_add_584402 = python_operator(stypy.reporting.localization.Localization(__file__, 3013, 39), '+', df_584400, t_squared_584401)
    
    # Applying the binary operator 'div' (line 3013)
    result_div_584403 = python_operator(stypy.reporting.localization.Localization(__file__, 3013, 35), 'div', df_584399, result_add_584402)
    
    # Processing the call keyword arguments (line 3013)
    kwargs_584404 = {}
    # Getting the type of '_betai' (line 3013)
    _betai_584394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 15), '_betai', False)
    # Calling _betai(args, kwargs) (line 3013)
    _betai_call_result_584405 = invoke(stypy.reporting.localization.Localization(__file__, 3013, 15), _betai_584394, *[result_mul_584397, float_584398, result_div_584403], **kwargs_584404)
    
    # Assigning a type to the variable 'prob' (line 3013)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3013, 8), 'prob', _betai_call_result_584405)
    # SSA join for if statement (line 3009)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3015)
    tuple_584406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3015, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3015)
    # Adding element type (line 3015)
    # Getting the type of 'r' (line 3015)
    r_584407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 11), 'r')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3015, 11), tuple_584406, r_584407)
    # Adding element type (line 3015)
    # Getting the type of 'prob' (line 3015)
    prob_584408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 14), 'prob')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3015, 11), tuple_584406, prob_584408)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3015)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3015, 4), 'stypy_return_type', tuple_584406)
    
    # ################# End of 'pearsonr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pearsonr' in the type store
    # Getting the type of 'stypy_return_type' (line 2933)
    stypy_return_type_584409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_584409)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pearsonr'
    return stypy_return_type_584409

# Assigning a type to the variable 'pearsonr' (line 2933)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2933, 0), 'pearsonr', pearsonr)

@norecursion
def fisher_exact(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_584410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3018, 36), 'str', 'two-sided')
    defaults = [str_584410]
    # Create a new context for function 'fisher_exact'
    module_type_store = module_type_store.open_function_context('fisher_exact', 3018, 0, False)
    
    # Passed parameters checking function
    fisher_exact.stypy_localization = localization
    fisher_exact.stypy_type_of_self = None
    fisher_exact.stypy_type_store = module_type_store
    fisher_exact.stypy_function_name = 'fisher_exact'
    fisher_exact.stypy_param_names_list = ['table', 'alternative']
    fisher_exact.stypy_varargs_param_name = None
    fisher_exact.stypy_kwargs_param_name = None
    fisher_exact.stypy_call_defaults = defaults
    fisher_exact.stypy_call_varargs = varargs
    fisher_exact.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fisher_exact', ['table', 'alternative'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fisher_exact', localization, ['table', 'alternative'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fisher_exact(...)' code ##################

    str_584411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3076, (-1)), 'str', 'Performs a Fisher exact test on a 2x2 contingency table.\n\n    Parameters\n    ----------\n    table : array_like of ints\n        A 2x2 contingency table.  Elements should be non-negative integers.\n    alternative : {\'two-sided\', \'less\', \'greater\'}, optional\n        Which alternative hypothesis to the null hypothesis the test uses.\n        Default is \'two-sided\'.\n\n    Returns\n    -------\n    oddsratio : float\n        This is prior odds ratio and not a posterior estimate.\n    p_value : float\n        P-value, the probability of obtaining a distribution at least as\n        extreme as the one that was actually observed, assuming that the\n        null hypothesis is true.\n\n    See Also\n    --------\n    chi2_contingency : Chi-square test of independence of variables in a\n        contingency table.\n\n    Notes\n    -----\n    The calculated odds ratio is different from the one R uses. This scipy\n    implementation returns the (more common) "unconditional Maximum\n    Likelihood Estimate", while R uses the "conditional Maximum Likelihood\n    Estimate".\n\n    For tables with large numbers, the (inexact) chi-square test implemented\n    in the function `chi2_contingency` can also be used.\n\n    Examples\n    --------\n    Say we spend a few days counting whales and sharks in the Atlantic and\n    Indian oceans. In the Atlantic ocean we find 8 whales and 1 shark, in the\n    Indian ocean 2 whales and 5 sharks. Then our contingency table is::\n\n                Atlantic  Indian\n        whales     8        2\n        sharks     1        5\n\n    We use this table to find the p-value:\n\n    >>> import scipy.stats as stats\n    >>> oddsratio, pvalue = stats.fisher_exact([[8, 2], [1, 5]])\n    >>> pvalue\n    0.0349...\n\n    The probability that we would observe this or an even more imbalanced ratio\n    by chance is about 3.5%.  A commonly used significance level is 5%--if we\n    adopt that, we can therefore conclude that our observed imbalance is\n    statistically significant; whales prefer the Atlantic while sharks prefer\n    the Indian ocean.\n\n    ')
    
    # Assigning a Attribute to a Name (line 3077):
    
    # Assigning a Attribute to a Name (line 3077):
    # Getting the type of 'distributions' (line 3077)
    distributions_584412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3077, 16), 'distributions')
    # Obtaining the member 'hypergeom' of a type (line 3077)
    hypergeom_584413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3077, 16), distributions_584412, 'hypergeom')
    # Assigning a type to the variable 'hypergeom' (line 3077)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3077, 4), 'hypergeom', hypergeom_584413)
    
    # Assigning a Call to a Name (line 3078):
    
    # Assigning a Call to a Name (line 3078):
    
    # Call to asarray(...): (line 3078)
    # Processing the call arguments (line 3078)
    # Getting the type of 'table' (line 3078)
    table_584416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3078, 19), 'table', False)
    # Processing the call keyword arguments (line 3078)
    # Getting the type of 'np' (line 3078)
    np_584417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3078, 32), 'np', False)
    # Obtaining the member 'int64' of a type (line 3078)
    int64_584418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3078, 32), np_584417, 'int64')
    keyword_584419 = int64_584418
    kwargs_584420 = {'dtype': keyword_584419}
    # Getting the type of 'np' (line 3078)
    np_584414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3078, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3078)
    asarray_584415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3078, 8), np_584414, 'asarray')
    # Calling asarray(args, kwargs) (line 3078)
    asarray_call_result_584421 = invoke(stypy.reporting.localization.Localization(__file__, 3078, 8), asarray_584415, *[table_584416], **kwargs_584420)
    
    # Assigning a type to the variable 'c' (line 3078)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3078, 4), 'c', asarray_call_result_584421)
    
    
    
    # Getting the type of 'c' (line 3079)
    c_584422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3079, 11), 'c')
    # Obtaining the member 'shape' of a type (line 3079)
    shape_584423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3079, 11), c_584422, 'shape')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3079)
    tuple_584424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3079, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3079)
    # Adding element type (line 3079)
    int_584425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3079, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3079, 23), tuple_584424, int_584425)
    # Adding element type (line 3079)
    int_584426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3079, 26), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3079, 23), tuple_584424, int_584426)
    
    # Applying the binary operator '==' (line 3079)
    result_eq_584427 = python_operator(stypy.reporting.localization.Localization(__file__, 3079, 11), '==', shape_584423, tuple_584424)
    
    # Applying the 'not' unary operator (line 3079)
    result_not__584428 = python_operator(stypy.reporting.localization.Localization(__file__, 3079, 7), 'not', result_eq_584427)
    
    # Testing the type of an if condition (line 3079)
    if_condition_584429 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3079, 4), result_not__584428)
    # Assigning a type to the variable 'if_condition_584429' (line 3079)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3079, 4), 'if_condition_584429', if_condition_584429)
    # SSA begins for if statement (line 3079)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3080)
    # Processing the call arguments (line 3080)
    str_584431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3080, 25), 'str', 'The input `table` must be of shape (2, 2).')
    # Processing the call keyword arguments (line 3080)
    kwargs_584432 = {}
    # Getting the type of 'ValueError' (line 3080)
    ValueError_584430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3080)
    ValueError_call_result_584433 = invoke(stypy.reporting.localization.Localization(__file__, 3080, 14), ValueError_584430, *[str_584431], **kwargs_584432)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3080, 8), ValueError_call_result_584433, 'raise parameter', BaseException)
    # SSA join for if statement (line 3079)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 3082)
    # Processing the call arguments (line 3082)
    
    # Getting the type of 'c' (line 3082)
    c_584436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3082, 14), 'c', False)
    int_584437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3082, 18), 'int')
    # Applying the binary operator '<' (line 3082)
    result_lt_584438 = python_operator(stypy.reporting.localization.Localization(__file__, 3082, 14), '<', c_584436, int_584437)
    
    # Processing the call keyword arguments (line 3082)
    kwargs_584439 = {}
    # Getting the type of 'np' (line 3082)
    np_584434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3082, 7), 'np', False)
    # Obtaining the member 'any' of a type (line 3082)
    any_584435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3082, 7), np_584434, 'any')
    # Calling any(args, kwargs) (line 3082)
    any_call_result_584440 = invoke(stypy.reporting.localization.Localization(__file__, 3082, 7), any_584435, *[result_lt_584438], **kwargs_584439)
    
    # Testing the type of an if condition (line 3082)
    if_condition_584441 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3082, 4), any_call_result_584440)
    # Assigning a type to the variable 'if_condition_584441' (line 3082)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3082, 4), 'if_condition_584441', if_condition_584441)
    # SSA begins for if statement (line 3082)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3083)
    # Processing the call arguments (line 3083)
    str_584443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3083, 25), 'str', 'All values in `table` must be nonnegative.')
    # Processing the call keyword arguments (line 3083)
    kwargs_584444 = {}
    # Getting the type of 'ValueError' (line 3083)
    ValueError_584442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3083)
    ValueError_call_result_584445 = invoke(stypy.reporting.localization.Localization(__file__, 3083, 14), ValueError_584442, *[str_584443], **kwargs_584444)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3083, 8), ValueError_call_result_584445, 'raise parameter', BaseException)
    # SSA join for if statement (line 3082)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    int_584446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3085, 7), 'int')
    
    # Call to sum(...): (line 3085)
    # Processing the call keyword arguments (line 3085)
    int_584449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3085, 23), 'int')
    keyword_584450 = int_584449
    kwargs_584451 = {'axis': keyword_584450}
    # Getting the type of 'c' (line 3085)
    c_584447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3085, 12), 'c', False)
    # Obtaining the member 'sum' of a type (line 3085)
    sum_584448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3085, 12), c_584447, 'sum')
    # Calling sum(args, kwargs) (line 3085)
    sum_call_result_584452 = invoke(stypy.reporting.localization.Localization(__file__, 3085, 12), sum_584448, *[], **kwargs_584451)
    
    # Applying the binary operator 'in' (line 3085)
    result_contains_584453 = python_operator(stypy.reporting.localization.Localization(__file__, 3085, 7), 'in', int_584446, sum_call_result_584452)
    
    
    int_584454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3085, 29), 'int')
    
    # Call to sum(...): (line 3085)
    # Processing the call keyword arguments (line 3085)
    int_584457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3085, 45), 'int')
    keyword_584458 = int_584457
    kwargs_584459 = {'axis': keyword_584458}
    # Getting the type of 'c' (line 3085)
    c_584455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3085, 34), 'c', False)
    # Obtaining the member 'sum' of a type (line 3085)
    sum_584456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3085, 34), c_584455, 'sum')
    # Calling sum(args, kwargs) (line 3085)
    sum_call_result_584460 = invoke(stypy.reporting.localization.Localization(__file__, 3085, 34), sum_584456, *[], **kwargs_584459)
    
    # Applying the binary operator 'in' (line 3085)
    result_contains_584461 = python_operator(stypy.reporting.localization.Localization(__file__, 3085, 29), 'in', int_584454, sum_call_result_584460)
    
    # Applying the binary operator 'or' (line 3085)
    result_or_keyword_584462 = python_operator(stypy.reporting.localization.Localization(__file__, 3085, 7), 'or', result_contains_584453, result_contains_584461)
    
    # Testing the type of an if condition (line 3085)
    if_condition_584463 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3085, 4), result_or_keyword_584462)
    # Assigning a type to the variable 'if_condition_584463' (line 3085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3085, 4), 'if_condition_584463', if_condition_584463)
    # SSA begins for if statement (line 3085)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3088)
    tuple_584464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3088, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3088)
    # Adding element type (line 3088)
    # Getting the type of 'np' (line 3088)
    np_584465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 15), 'np')
    # Obtaining the member 'nan' of a type (line 3088)
    nan_584466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3088, 15), np_584465, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3088, 15), tuple_584464, nan_584466)
    # Adding element type (line 3088)
    float_584467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3088, 23), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3088, 15), tuple_584464, float_584467)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3088, 8), 'stypy_return_type', tuple_584464)
    # SSA join for if statement (line 3085)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3090)
    tuple_584468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3090, 9), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3090)
    # Adding element type (line 3090)
    int_584469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3090, 9), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3090, 9), tuple_584468, int_584469)
    # Adding element type (line 3090)
    int_584470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3090, 12), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3090, 9), tuple_584468, int_584470)
    
    # Getting the type of 'c' (line 3090)
    c_584471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 7), 'c')
    # Obtaining the member '__getitem__' of a type (line 3090)
    getitem___584472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3090, 7), c_584471, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3090)
    subscript_call_result_584473 = invoke(stypy.reporting.localization.Localization(__file__, 3090, 7), getitem___584472, tuple_584468)
    
    int_584474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3090, 17), 'int')
    # Applying the binary operator '>' (line 3090)
    result_gt_584475 = python_operator(stypy.reporting.localization.Localization(__file__, 3090, 7), '>', subscript_call_result_584473, int_584474)
    
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3090)
    tuple_584476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3090, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3090)
    # Adding element type (line 3090)
    int_584477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3090, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3090, 25), tuple_584476, int_584477)
    # Adding element type (line 3090)
    int_584478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3090, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3090, 25), tuple_584476, int_584478)
    
    # Getting the type of 'c' (line 3090)
    c_584479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 23), 'c')
    # Obtaining the member '__getitem__' of a type (line 3090)
    getitem___584480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3090, 23), c_584479, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3090)
    subscript_call_result_584481 = invoke(stypy.reporting.localization.Localization(__file__, 3090, 23), getitem___584480, tuple_584476)
    
    int_584482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3090, 33), 'int')
    # Applying the binary operator '>' (line 3090)
    result_gt_584483 = python_operator(stypy.reporting.localization.Localization(__file__, 3090, 23), '>', subscript_call_result_584481, int_584482)
    
    # Applying the binary operator 'and' (line 3090)
    result_and_keyword_584484 = python_operator(stypy.reporting.localization.Localization(__file__, 3090, 7), 'and', result_gt_584475, result_gt_584483)
    
    # Testing the type of an if condition (line 3090)
    if_condition_584485 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3090, 4), result_and_keyword_584484)
    # Assigning a type to the variable 'if_condition_584485' (line 3090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3090, 4), 'if_condition_584485', if_condition_584485)
    # SSA begins for if statement (line 3090)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3091):
    
    # Assigning a BinOp to a Name (line 3091):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3091)
    tuple_584486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3091)
    # Adding element type (line 3091)
    int_584487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3091, 22), tuple_584486, int_584487)
    # Adding element type (line 3091)
    int_584488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3091, 22), tuple_584486, int_584488)
    
    # Getting the type of 'c' (line 3091)
    c_584489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 20), 'c')
    # Obtaining the member '__getitem__' of a type (line 3091)
    getitem___584490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3091, 20), c_584489, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3091)
    subscript_call_result_584491 = invoke(stypy.reporting.localization.Localization(__file__, 3091, 20), getitem___584490, tuple_584486)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3091)
    tuple_584492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3091)
    # Adding element type (line 3091)
    int_584493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 32), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3091, 32), tuple_584492, int_584493)
    # Adding element type (line 3091)
    int_584494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 35), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3091, 32), tuple_584492, int_584494)
    
    # Getting the type of 'c' (line 3091)
    c_584495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 30), 'c')
    # Obtaining the member '__getitem__' of a type (line 3091)
    getitem___584496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3091, 30), c_584495, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3091)
    subscript_call_result_584497 = invoke(stypy.reporting.localization.Localization(__file__, 3091, 30), getitem___584496, tuple_584492)
    
    # Applying the binary operator '*' (line 3091)
    result_mul_584498 = python_operator(stypy.reporting.localization.Localization(__file__, 3091, 20), '*', subscript_call_result_584491, subscript_call_result_584497)
    
    
    # Call to float(...): (line 3091)
    # Processing the call arguments (line 3091)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3091)
    tuple_584500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3091)
    # Adding element type (line 3091)
    int_584501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 48), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3091, 48), tuple_584500, int_584501)
    # Adding element type (line 3091)
    int_584502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 51), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3091, 48), tuple_584500, int_584502)
    
    # Getting the type of 'c' (line 3091)
    c_584503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 46), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 3091)
    getitem___584504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3091, 46), c_584503, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3091)
    subscript_call_result_584505 = invoke(stypy.reporting.localization.Localization(__file__, 3091, 46), getitem___584504, tuple_584500)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3091)
    tuple_584506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 58), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3091)
    # Adding element type (line 3091)
    int_584507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 58), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3091, 58), tuple_584506, int_584507)
    # Adding element type (line 3091)
    int_584508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 61), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3091, 58), tuple_584506, int_584508)
    
    # Getting the type of 'c' (line 3091)
    c_584509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 56), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 3091)
    getitem___584510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3091, 56), c_584509, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3091)
    subscript_call_result_584511 = invoke(stypy.reporting.localization.Localization(__file__, 3091, 56), getitem___584510, tuple_584506)
    
    # Applying the binary operator '*' (line 3091)
    result_mul_584512 = python_operator(stypy.reporting.localization.Localization(__file__, 3091, 46), '*', subscript_call_result_584505, subscript_call_result_584511)
    
    # Processing the call keyword arguments (line 3091)
    kwargs_584513 = {}
    # Getting the type of 'float' (line 3091)
    float_584499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 40), 'float', False)
    # Calling float(args, kwargs) (line 3091)
    float_call_result_584514 = invoke(stypy.reporting.localization.Localization(__file__, 3091, 40), float_584499, *[result_mul_584512], **kwargs_584513)
    
    # Applying the binary operator 'div' (line 3091)
    result_div_584515 = python_operator(stypy.reporting.localization.Localization(__file__, 3091, 38), 'div', result_mul_584498, float_call_result_584514)
    
    # Assigning a type to the variable 'oddsratio' (line 3091)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 8), 'oddsratio', result_div_584515)
    # SSA branch for the else part of an if statement (line 3090)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 3093):
    
    # Assigning a Attribute to a Name (line 3093):
    # Getting the type of 'np' (line 3093)
    np_584516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 20), 'np')
    # Obtaining the member 'inf' of a type (line 3093)
    inf_584517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3093, 20), np_584516, 'inf')
    # Assigning a type to the variable 'oddsratio' (line 3093)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3093, 8), 'oddsratio', inf_584517)
    # SSA join for if statement (line 3090)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 3095):
    
    # Assigning a BinOp to a Name (line 3095):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3095)
    tuple_584518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3095, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3095)
    # Adding element type (line 3095)
    int_584519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3095, 11), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3095, 11), tuple_584518, int_584519)
    # Adding element type (line 3095)
    int_584520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3095, 14), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3095, 11), tuple_584518, int_584520)
    
    # Getting the type of 'c' (line 3095)
    c_584521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 9), 'c')
    # Obtaining the member '__getitem__' of a type (line 3095)
    getitem___584522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3095, 9), c_584521, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3095)
    subscript_call_result_584523 = invoke(stypy.reporting.localization.Localization(__file__, 3095, 9), getitem___584522, tuple_584518)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3095)
    tuple_584524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3095, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3095)
    # Adding element type (line 3095)
    int_584525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3095, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3095, 21), tuple_584524, int_584525)
    # Adding element type (line 3095)
    int_584526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3095, 24), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3095, 21), tuple_584524, int_584526)
    
    # Getting the type of 'c' (line 3095)
    c_584527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 19), 'c')
    # Obtaining the member '__getitem__' of a type (line 3095)
    getitem___584528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3095, 19), c_584527, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3095)
    subscript_call_result_584529 = invoke(stypy.reporting.localization.Localization(__file__, 3095, 19), getitem___584528, tuple_584524)
    
    # Applying the binary operator '+' (line 3095)
    result_add_584530 = python_operator(stypy.reporting.localization.Localization(__file__, 3095, 9), '+', subscript_call_result_584523, subscript_call_result_584529)
    
    # Assigning a type to the variable 'n1' (line 3095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3095, 4), 'n1', result_add_584530)
    
    # Assigning a BinOp to a Name (line 3096):
    
    # Assigning a BinOp to a Name (line 3096):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3096)
    tuple_584531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3096, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3096)
    # Adding element type (line 3096)
    int_584532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3096, 11), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3096, 11), tuple_584531, int_584532)
    # Adding element type (line 3096)
    int_584533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3096, 14), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3096, 11), tuple_584531, int_584533)
    
    # Getting the type of 'c' (line 3096)
    c_584534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 9), 'c')
    # Obtaining the member '__getitem__' of a type (line 3096)
    getitem___584535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3096, 9), c_584534, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3096)
    subscript_call_result_584536 = invoke(stypy.reporting.localization.Localization(__file__, 3096, 9), getitem___584535, tuple_584531)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3096)
    tuple_584537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3096, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3096)
    # Adding element type (line 3096)
    int_584538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3096, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3096, 21), tuple_584537, int_584538)
    # Adding element type (line 3096)
    int_584539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3096, 24), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3096, 21), tuple_584537, int_584539)
    
    # Getting the type of 'c' (line 3096)
    c_584540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 19), 'c')
    # Obtaining the member '__getitem__' of a type (line 3096)
    getitem___584541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3096, 19), c_584540, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3096)
    subscript_call_result_584542 = invoke(stypy.reporting.localization.Localization(__file__, 3096, 19), getitem___584541, tuple_584537)
    
    # Applying the binary operator '+' (line 3096)
    result_add_584543 = python_operator(stypy.reporting.localization.Localization(__file__, 3096, 9), '+', subscript_call_result_584536, subscript_call_result_584542)
    
    # Assigning a type to the variable 'n2' (line 3096)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3096, 4), 'n2', result_add_584543)
    
    # Assigning a BinOp to a Name (line 3097):
    
    # Assigning a BinOp to a Name (line 3097):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3097)
    tuple_584544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3097, 10), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3097)
    # Adding element type (line 3097)
    int_584545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3097, 10), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3097, 10), tuple_584544, int_584545)
    # Adding element type (line 3097)
    int_584546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3097, 13), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3097, 10), tuple_584544, int_584546)
    
    # Getting the type of 'c' (line 3097)
    c_584547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 8), 'c')
    # Obtaining the member '__getitem__' of a type (line 3097)
    getitem___584548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3097, 8), c_584547, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3097)
    subscript_call_result_584549 = invoke(stypy.reporting.localization.Localization(__file__, 3097, 8), getitem___584548, tuple_584544)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3097)
    tuple_584550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3097, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3097)
    # Adding element type (line 3097)
    int_584551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3097, 20), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3097, 20), tuple_584550, int_584551)
    # Adding element type (line 3097)
    int_584552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3097, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3097, 20), tuple_584550, int_584552)
    
    # Getting the type of 'c' (line 3097)
    c_584553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 18), 'c')
    # Obtaining the member '__getitem__' of a type (line 3097)
    getitem___584554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3097, 18), c_584553, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3097)
    subscript_call_result_584555 = invoke(stypy.reporting.localization.Localization(__file__, 3097, 18), getitem___584554, tuple_584550)
    
    # Applying the binary operator '+' (line 3097)
    result_add_584556 = python_operator(stypy.reporting.localization.Localization(__file__, 3097, 8), '+', subscript_call_result_584549, subscript_call_result_584555)
    
    # Assigning a type to the variable 'n' (line 3097)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3097, 4), 'n', result_add_584556)

    @norecursion
    def binary_search(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'binary_search'
        module_type_store = module_type_store.open_function_context('binary_search', 3099, 4, False)
        
        # Passed parameters checking function
        binary_search.stypy_localization = localization
        binary_search.stypy_type_of_self = None
        binary_search.stypy_type_store = module_type_store
        binary_search.stypy_function_name = 'binary_search'
        binary_search.stypy_param_names_list = ['n', 'n1', 'n2', 'side']
        binary_search.stypy_varargs_param_name = None
        binary_search.stypy_kwargs_param_name = None
        binary_search.stypy_call_defaults = defaults
        binary_search.stypy_call_varargs = varargs
        binary_search.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'binary_search', ['n', 'n1', 'n2', 'side'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'binary_search', localization, ['n', 'n1', 'n2', 'side'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'binary_search(...)' code ##################

        str_584557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3102, (-1)), 'str', 'Binary search for where to begin lower/upper halves in two-sided\n        test.\n        ')
        
        
        # Getting the type of 'side' (line 3103)
        side_584558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 11), 'side')
        str_584559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3103, 19), 'str', 'upper')
        # Applying the binary operator '==' (line 3103)
        result_eq_584560 = python_operator(stypy.reporting.localization.Localization(__file__, 3103, 11), '==', side_584558, str_584559)
        
        # Testing the type of an if condition (line 3103)
        if_condition_584561 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3103, 8), result_eq_584560)
        # Assigning a type to the variable 'if_condition_584561' (line 3103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3103, 8), 'if_condition_584561', if_condition_584561)
        # SSA begins for if statement (line 3103)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3104):
        
        # Assigning a Name to a Name (line 3104):
        # Getting the type of 'mode' (line 3104)
        mode_584562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 21), 'mode')
        # Assigning a type to the variable 'minval' (line 3104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3104, 12), 'minval', mode_584562)
        
        # Assigning a Name to a Name (line 3105):
        
        # Assigning a Name to a Name (line 3105):
        # Getting the type of 'n' (line 3105)
        n_584563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 21), 'n')
        # Assigning a type to the variable 'maxval' (line 3105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3105, 12), 'maxval', n_584563)
        # SSA branch for the else part of an if statement (line 3103)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 3107):
        
        # Assigning a Num to a Name (line 3107):
        int_584564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3107, 21), 'int')
        # Assigning a type to the variable 'minval' (line 3107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3107, 12), 'minval', int_584564)
        
        # Assigning a Name to a Name (line 3108):
        
        # Assigning a Name to a Name (line 3108):
        # Getting the type of 'mode' (line 3108)
        mode_584565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3108, 21), 'mode')
        # Assigning a type to the variable 'maxval' (line 3108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3108, 12), 'maxval', mode_584565)
        # SSA join for if statement (line 3103)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 3109):
        
        # Assigning a Num to a Name (line 3109):
        int_584566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3109, 16), 'int')
        # Assigning a type to the variable 'guess' (line 3109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3109, 8), 'guess', int_584566)
        
        
        # Getting the type of 'maxval' (line 3110)
        maxval_584567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 14), 'maxval')
        # Getting the type of 'minval' (line 3110)
        minval_584568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 23), 'minval')
        # Applying the binary operator '-' (line 3110)
        result_sub_584569 = python_operator(stypy.reporting.localization.Localization(__file__, 3110, 14), '-', maxval_584567, minval_584568)
        
        int_584570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3110, 32), 'int')
        # Applying the binary operator '>' (line 3110)
        result_gt_584571 = python_operator(stypy.reporting.localization.Localization(__file__, 3110, 14), '>', result_sub_584569, int_584570)
        
        # Testing the type of an if condition (line 3110)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3110, 8), result_gt_584571)
        # SSA begins for while statement (line 3110)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'maxval' (line 3111)
        maxval_584572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 15), 'maxval')
        # Getting the type of 'minval' (line 3111)
        minval_584573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 25), 'minval')
        int_584574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3111, 34), 'int')
        # Applying the binary operator '+' (line 3111)
        result_add_584575 = python_operator(stypy.reporting.localization.Localization(__file__, 3111, 25), '+', minval_584573, int_584574)
        
        # Applying the binary operator '==' (line 3111)
        result_eq_584576 = python_operator(stypy.reporting.localization.Localization(__file__, 3111, 15), '==', maxval_584572, result_add_584575)
        
        
        # Getting the type of 'guess' (line 3111)
        guess_584577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 40), 'guess')
        # Getting the type of 'minval' (line 3111)
        minval_584578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 49), 'minval')
        # Applying the binary operator '==' (line 3111)
        result_eq_584579 = python_operator(stypy.reporting.localization.Localization(__file__, 3111, 40), '==', guess_584577, minval_584578)
        
        # Applying the binary operator 'and' (line 3111)
        result_and_keyword_584580 = python_operator(stypy.reporting.localization.Localization(__file__, 3111, 15), 'and', result_eq_584576, result_eq_584579)
        
        # Testing the type of an if condition (line 3111)
        if_condition_584581 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3111, 12), result_and_keyword_584580)
        # Assigning a type to the variable 'if_condition_584581' (line 3111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3111, 12), 'if_condition_584581', if_condition_584581)
        # SSA begins for if statement (line 3111)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3112):
        
        # Assigning a Name to a Name (line 3112):
        # Getting the type of 'maxval' (line 3112)
        maxval_584582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3112, 24), 'maxval')
        # Assigning a type to the variable 'guess' (line 3112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3112, 16), 'guess', maxval_584582)
        # SSA branch for the else part of an if statement (line 3111)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 3114):
        
        # Assigning a BinOp to a Name (line 3114):
        # Getting the type of 'maxval' (line 3114)
        maxval_584583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 25), 'maxval')
        # Getting the type of 'minval' (line 3114)
        minval_584584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 34), 'minval')
        # Applying the binary operator '+' (line 3114)
        result_add_584585 = python_operator(stypy.reporting.localization.Localization(__file__, 3114, 25), '+', maxval_584583, minval_584584)
        
        int_584586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3114, 45), 'int')
        # Applying the binary operator '//' (line 3114)
        result_floordiv_584587 = python_operator(stypy.reporting.localization.Localization(__file__, 3114, 24), '//', result_add_584585, int_584586)
        
        # Assigning a type to the variable 'guess' (line 3114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3114, 16), 'guess', result_floordiv_584587)
        # SSA join for if statement (line 3111)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3115):
        
        # Assigning a Call to a Name (line 3115):
        
        # Call to pmf(...): (line 3115)
        # Processing the call arguments (line 3115)
        # Getting the type of 'guess' (line 3115)
        guess_584590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 35), 'guess', False)
        # Getting the type of 'n1' (line 3115)
        n1_584591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 42), 'n1', False)
        # Getting the type of 'n2' (line 3115)
        n2_584592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 47), 'n2', False)
        # Applying the binary operator '+' (line 3115)
        result_add_584593 = python_operator(stypy.reporting.localization.Localization(__file__, 3115, 42), '+', n1_584591, n2_584592)
        
        # Getting the type of 'n1' (line 3115)
        n1_584594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 51), 'n1', False)
        # Getting the type of 'n' (line 3115)
        n_584595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 55), 'n', False)
        # Processing the call keyword arguments (line 3115)
        kwargs_584596 = {}
        # Getting the type of 'hypergeom' (line 3115)
        hypergeom_584588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 21), 'hypergeom', False)
        # Obtaining the member 'pmf' of a type (line 3115)
        pmf_584589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3115, 21), hypergeom_584588, 'pmf')
        # Calling pmf(args, kwargs) (line 3115)
        pmf_call_result_584597 = invoke(stypy.reporting.localization.Localization(__file__, 3115, 21), pmf_584589, *[guess_584590, result_add_584593, n1_584594, n_584595], **kwargs_584596)
        
        # Assigning a type to the variable 'pguess' (line 3115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3115, 12), 'pguess', pmf_call_result_584597)
        
        
        # Getting the type of 'side' (line 3116)
        side_584598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 15), 'side')
        str_584599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3116, 23), 'str', 'upper')
        # Applying the binary operator '==' (line 3116)
        result_eq_584600 = python_operator(stypy.reporting.localization.Localization(__file__, 3116, 15), '==', side_584598, str_584599)
        
        # Testing the type of an if condition (line 3116)
        if_condition_584601 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3116, 12), result_eq_584600)
        # Assigning a type to the variable 'if_condition_584601' (line 3116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3116, 12), 'if_condition_584601', if_condition_584601)
        # SSA begins for if statement (line 3116)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 3117):
        
        # Assigning a BinOp to a Name (line 3117):
        # Getting the type of 'guess' (line 3117)
        guess_584602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 21), 'guess')
        int_584603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3117, 29), 'int')
        # Applying the binary operator '-' (line 3117)
        result_sub_584604 = python_operator(stypy.reporting.localization.Localization(__file__, 3117, 21), '-', guess_584602, int_584603)
        
        # Assigning a type to the variable 'ng' (line 3117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3117, 16), 'ng', result_sub_584604)
        # SSA branch for the else part of an if statement (line 3116)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 3119):
        
        # Assigning a BinOp to a Name (line 3119):
        # Getting the type of 'guess' (line 3119)
        guess_584605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 21), 'guess')
        int_584606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3119, 29), 'int')
        # Applying the binary operator '+' (line 3119)
        result_add_584607 = python_operator(stypy.reporting.localization.Localization(__file__, 3119, 21), '+', guess_584605, int_584606)
        
        # Assigning a type to the variable 'ng' (line 3119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3119, 16), 'ng', result_add_584607)
        # SSA join for if statement (line 3116)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'pguess' (line 3120)
        pguess_584608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 15), 'pguess')
        # Getting the type of 'pexact' (line 3120)
        pexact_584609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 25), 'pexact')
        # Applying the binary operator '<=' (line 3120)
        result_le_584610 = python_operator(stypy.reporting.localization.Localization(__file__, 3120, 15), '<=', pguess_584608, pexact_584609)
        
        # Call to pmf(...): (line 3120)
        # Processing the call arguments (line 3120)
        # Getting the type of 'ng' (line 3120)
        ng_584613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 48), 'ng', False)
        # Getting the type of 'n1' (line 3120)
        n1_584614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 52), 'n1', False)
        # Getting the type of 'n2' (line 3120)
        n2_584615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 57), 'n2', False)
        # Applying the binary operator '+' (line 3120)
        result_add_584616 = python_operator(stypy.reporting.localization.Localization(__file__, 3120, 52), '+', n1_584614, n2_584615)
        
        # Getting the type of 'n1' (line 3120)
        n1_584617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 61), 'n1', False)
        # Getting the type of 'n' (line 3120)
        n_584618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 65), 'n', False)
        # Processing the call keyword arguments (line 3120)
        kwargs_584619 = {}
        # Getting the type of 'hypergeom' (line 3120)
        hypergeom_584611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 34), 'hypergeom', False)
        # Obtaining the member 'pmf' of a type (line 3120)
        pmf_584612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3120, 34), hypergeom_584611, 'pmf')
        # Calling pmf(args, kwargs) (line 3120)
        pmf_call_result_584620 = invoke(stypy.reporting.localization.Localization(__file__, 3120, 34), pmf_584612, *[ng_584613, result_add_584616, n1_584617, n_584618], **kwargs_584619)
        
        # Applying the binary operator '<' (line 3120)
        result_lt_584621 = python_operator(stypy.reporting.localization.Localization(__file__, 3120, 15), '<', pexact_584609, pmf_call_result_584620)
        # Applying the binary operator '&' (line 3120)
        result_and__584622 = python_operator(stypy.reporting.localization.Localization(__file__, 3120, 15), '&', result_le_584610, result_lt_584621)
        
        # Testing the type of an if condition (line 3120)
        if_condition_584623 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3120, 12), result_and__584622)
        # Assigning a type to the variable 'if_condition_584623' (line 3120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3120, 12), 'if_condition_584623', if_condition_584623)
        # SSA begins for if statement (line 3120)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA branch for the else part of an if statement (line 3120)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'pguess' (line 3122)
        pguess_584624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 17), 'pguess')
        # Getting the type of 'pexact' (line 3122)
        pexact_584625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 26), 'pexact')
        # Applying the binary operator '<' (line 3122)
        result_lt_584626 = python_operator(stypy.reporting.localization.Localization(__file__, 3122, 17), '<', pguess_584624, pexact_584625)
        
        # Testing the type of an if condition (line 3122)
        if_condition_584627 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3122, 17), result_lt_584626)
        # Assigning a type to the variable 'if_condition_584627' (line 3122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3122, 17), 'if_condition_584627', if_condition_584627)
        # SSA begins for if statement (line 3122)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3123):
        
        # Assigning a Name to a Name (line 3123):
        # Getting the type of 'guess' (line 3123)
        guess_584628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 25), 'guess')
        # Assigning a type to the variable 'maxval' (line 3123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3123, 16), 'maxval', guess_584628)
        # SSA branch for the else part of an if statement (line 3122)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 3125):
        
        # Assigning a Name to a Name (line 3125):
        # Getting the type of 'guess' (line 3125)
        guess_584629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 25), 'guess')
        # Assigning a type to the variable 'minval' (line 3125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3125, 16), 'minval', guess_584629)
        # SSA join for if statement (line 3122)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3120)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 3110)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'guess' (line 3126)
        guess_584630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3126, 11), 'guess')
        int_584631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3126, 20), 'int')
        # Applying the binary operator '==' (line 3126)
        result_eq_584632 = python_operator(stypy.reporting.localization.Localization(__file__, 3126, 11), '==', guess_584630, int_584631)
        
        # Testing the type of an if condition (line 3126)
        if_condition_584633 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3126, 8), result_eq_584632)
        # Assigning a type to the variable 'if_condition_584633' (line 3126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3126, 8), 'if_condition_584633', if_condition_584633)
        # SSA begins for if statement (line 3126)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3127):
        
        # Assigning a Name to a Name (line 3127):
        # Getting the type of 'minval' (line 3127)
        minval_584634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 20), 'minval')
        # Assigning a type to the variable 'guess' (line 3127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3127, 12), 'guess', minval_584634)
        # SSA join for if statement (line 3126)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'side' (line 3128)
        side_584635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 11), 'side')
        str_584636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3128, 19), 'str', 'upper')
        # Applying the binary operator '==' (line 3128)
        result_eq_584637 = python_operator(stypy.reporting.localization.Localization(__file__, 3128, 11), '==', side_584635, str_584636)
        
        # Testing the type of an if condition (line 3128)
        if_condition_584638 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3128, 8), result_eq_584637)
        # Assigning a type to the variable 'if_condition_584638' (line 3128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3128, 8), 'if_condition_584638', if_condition_584638)
        # SSA begins for if statement (line 3128)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'guess' (line 3129)
        guess_584639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 18), 'guess')
        int_584640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3129, 26), 'int')
        # Applying the binary operator '>' (line 3129)
        result_gt_584641 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 18), '>', guess_584639, int_584640)
        
        
        
        # Call to pmf(...): (line 3129)
        # Processing the call arguments (line 3129)
        # Getting the type of 'guess' (line 3129)
        guess_584644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 46), 'guess', False)
        # Getting the type of 'n1' (line 3129)
        n1_584645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 53), 'n1', False)
        # Getting the type of 'n2' (line 3129)
        n2_584646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 58), 'n2', False)
        # Applying the binary operator '+' (line 3129)
        result_add_584647 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 53), '+', n1_584645, n2_584646)
        
        # Getting the type of 'n1' (line 3129)
        n1_584648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 62), 'n1', False)
        # Getting the type of 'n' (line 3129)
        n_584649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 66), 'n', False)
        # Processing the call keyword arguments (line 3129)
        kwargs_584650 = {}
        # Getting the type of 'hypergeom' (line 3129)
        hypergeom_584642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 32), 'hypergeom', False)
        # Obtaining the member 'pmf' of a type (line 3129)
        pmf_584643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 32), hypergeom_584642, 'pmf')
        # Calling pmf(args, kwargs) (line 3129)
        pmf_call_result_584651 = invoke(stypy.reporting.localization.Localization(__file__, 3129, 32), pmf_584643, *[guess_584644, result_add_584647, n1_584648, n_584649], **kwargs_584650)
        
        # Getting the type of 'pexact' (line 3129)
        pexact_584652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 71), 'pexact')
        # Getting the type of 'epsilon' (line 3129)
        epsilon_584653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 80), 'epsilon')
        # Applying the binary operator '*' (line 3129)
        result_mul_584654 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 71), '*', pexact_584652, epsilon_584653)
        
        # Applying the binary operator '<' (line 3129)
        result_lt_584655 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 32), '<', pmf_call_result_584651, result_mul_584654)
        
        # Applying the binary operator 'and' (line 3129)
        result_and_keyword_584656 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 18), 'and', result_gt_584641, result_lt_584655)
        
        # Testing the type of an if condition (line 3129)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3129, 12), result_and_keyword_584656)
        # SSA begins for while statement (line 3129)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Getting the type of 'guess' (line 3130)
        guess_584657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 16), 'guess')
        int_584658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3130, 25), 'int')
        # Applying the binary operator '-=' (line 3130)
        result_isub_584659 = python_operator(stypy.reporting.localization.Localization(__file__, 3130, 16), '-=', guess_584657, int_584658)
        # Assigning a type to the variable 'guess' (line 3130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3130, 16), 'guess', result_isub_584659)
        
        # SSA join for while statement (line 3129)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to pmf(...): (line 3131)
        # Processing the call arguments (line 3131)
        # Getting the type of 'guess' (line 3131)
        guess_584662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 32), 'guess', False)
        # Getting the type of 'n1' (line 3131)
        n1_584663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 39), 'n1', False)
        # Getting the type of 'n2' (line 3131)
        n2_584664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 44), 'n2', False)
        # Applying the binary operator '+' (line 3131)
        result_add_584665 = python_operator(stypy.reporting.localization.Localization(__file__, 3131, 39), '+', n1_584663, n2_584664)
        
        # Getting the type of 'n1' (line 3131)
        n1_584666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 48), 'n1', False)
        # Getting the type of 'n' (line 3131)
        n_584667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 52), 'n', False)
        # Processing the call keyword arguments (line 3131)
        kwargs_584668 = {}
        # Getting the type of 'hypergeom' (line 3131)
        hypergeom_584660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 18), 'hypergeom', False)
        # Obtaining the member 'pmf' of a type (line 3131)
        pmf_584661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3131, 18), hypergeom_584660, 'pmf')
        # Calling pmf(args, kwargs) (line 3131)
        pmf_call_result_584669 = invoke(stypy.reporting.localization.Localization(__file__, 3131, 18), pmf_584661, *[guess_584662, result_add_584665, n1_584666, n_584667], **kwargs_584668)
        
        # Getting the type of 'pexact' (line 3131)
        pexact_584670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 57), 'pexact')
        # Getting the type of 'epsilon' (line 3131)
        epsilon_584671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 66), 'epsilon')
        # Applying the binary operator 'div' (line 3131)
        result_div_584672 = python_operator(stypy.reporting.localization.Localization(__file__, 3131, 57), 'div', pexact_584670, epsilon_584671)
        
        # Applying the binary operator '>' (line 3131)
        result_gt_584673 = python_operator(stypy.reporting.localization.Localization(__file__, 3131, 18), '>', pmf_call_result_584669, result_div_584672)
        
        # Testing the type of an if condition (line 3131)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3131, 12), result_gt_584673)
        # SSA begins for while statement (line 3131)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Getting the type of 'guess' (line 3132)
        guess_584674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 16), 'guess')
        int_584675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3132, 25), 'int')
        # Applying the binary operator '+=' (line 3132)
        result_iadd_584676 = python_operator(stypy.reporting.localization.Localization(__file__, 3132, 16), '+=', guess_584674, int_584675)
        # Assigning a type to the variable 'guess' (line 3132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3132, 16), 'guess', result_iadd_584676)
        
        # SSA join for while statement (line 3131)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3128)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to pmf(...): (line 3134)
        # Processing the call arguments (line 3134)
        # Getting the type of 'guess' (line 3134)
        guess_584679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 32), 'guess', False)
        # Getting the type of 'n1' (line 3134)
        n1_584680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 39), 'n1', False)
        # Getting the type of 'n2' (line 3134)
        n2_584681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 44), 'n2', False)
        # Applying the binary operator '+' (line 3134)
        result_add_584682 = python_operator(stypy.reporting.localization.Localization(__file__, 3134, 39), '+', n1_584680, n2_584681)
        
        # Getting the type of 'n1' (line 3134)
        n1_584683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 48), 'n1', False)
        # Getting the type of 'n' (line 3134)
        n_584684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 52), 'n', False)
        # Processing the call keyword arguments (line 3134)
        kwargs_584685 = {}
        # Getting the type of 'hypergeom' (line 3134)
        hypergeom_584677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 18), 'hypergeom', False)
        # Obtaining the member 'pmf' of a type (line 3134)
        pmf_584678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3134, 18), hypergeom_584677, 'pmf')
        # Calling pmf(args, kwargs) (line 3134)
        pmf_call_result_584686 = invoke(stypy.reporting.localization.Localization(__file__, 3134, 18), pmf_584678, *[guess_584679, result_add_584682, n1_584683, n_584684], **kwargs_584685)
        
        # Getting the type of 'pexact' (line 3134)
        pexact_584687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 57), 'pexact')
        # Getting the type of 'epsilon' (line 3134)
        epsilon_584688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 66), 'epsilon')
        # Applying the binary operator '*' (line 3134)
        result_mul_584689 = python_operator(stypy.reporting.localization.Localization(__file__, 3134, 57), '*', pexact_584687, epsilon_584688)
        
        # Applying the binary operator '<' (line 3134)
        result_lt_584690 = python_operator(stypy.reporting.localization.Localization(__file__, 3134, 18), '<', pmf_call_result_584686, result_mul_584689)
        
        # Testing the type of an if condition (line 3134)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3134, 12), result_lt_584690)
        # SSA begins for while statement (line 3134)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Getting the type of 'guess' (line 3135)
        guess_584691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3135, 16), 'guess')
        int_584692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3135, 25), 'int')
        # Applying the binary operator '+=' (line 3135)
        result_iadd_584693 = python_operator(stypy.reporting.localization.Localization(__file__, 3135, 16), '+=', guess_584691, int_584692)
        # Assigning a type to the variable 'guess' (line 3135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3135, 16), 'guess', result_iadd_584693)
        
        # SSA join for while statement (line 3134)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'guess' (line 3136)
        guess_584694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 18), 'guess')
        int_584695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3136, 26), 'int')
        # Applying the binary operator '>' (line 3136)
        result_gt_584696 = python_operator(stypy.reporting.localization.Localization(__file__, 3136, 18), '>', guess_584694, int_584695)
        
        
        
        # Call to pmf(...): (line 3136)
        # Processing the call arguments (line 3136)
        # Getting the type of 'guess' (line 3136)
        guess_584699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 46), 'guess', False)
        # Getting the type of 'n1' (line 3136)
        n1_584700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 53), 'n1', False)
        # Getting the type of 'n2' (line 3136)
        n2_584701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 58), 'n2', False)
        # Applying the binary operator '+' (line 3136)
        result_add_584702 = python_operator(stypy.reporting.localization.Localization(__file__, 3136, 53), '+', n1_584700, n2_584701)
        
        # Getting the type of 'n1' (line 3136)
        n1_584703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 62), 'n1', False)
        # Getting the type of 'n' (line 3136)
        n_584704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 66), 'n', False)
        # Processing the call keyword arguments (line 3136)
        kwargs_584705 = {}
        # Getting the type of 'hypergeom' (line 3136)
        hypergeom_584697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 32), 'hypergeom', False)
        # Obtaining the member 'pmf' of a type (line 3136)
        pmf_584698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3136, 32), hypergeom_584697, 'pmf')
        # Calling pmf(args, kwargs) (line 3136)
        pmf_call_result_584706 = invoke(stypy.reporting.localization.Localization(__file__, 3136, 32), pmf_584698, *[guess_584699, result_add_584702, n1_584703, n_584704], **kwargs_584705)
        
        # Getting the type of 'pexact' (line 3136)
        pexact_584707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 71), 'pexact')
        # Getting the type of 'epsilon' (line 3136)
        epsilon_584708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 80), 'epsilon')
        # Applying the binary operator 'div' (line 3136)
        result_div_584709 = python_operator(stypy.reporting.localization.Localization(__file__, 3136, 71), 'div', pexact_584707, epsilon_584708)
        
        # Applying the binary operator '>' (line 3136)
        result_gt_584710 = python_operator(stypy.reporting.localization.Localization(__file__, 3136, 32), '>', pmf_call_result_584706, result_div_584709)
        
        # Applying the binary operator 'and' (line 3136)
        result_and_keyword_584711 = python_operator(stypy.reporting.localization.Localization(__file__, 3136, 18), 'and', result_gt_584696, result_gt_584710)
        
        # Testing the type of an if condition (line 3136)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3136, 12), result_and_keyword_584711)
        # SSA begins for while statement (line 3136)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Getting the type of 'guess' (line 3137)
        guess_584712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 16), 'guess')
        int_584713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3137, 25), 'int')
        # Applying the binary operator '-=' (line 3137)
        result_isub_584714 = python_operator(stypy.reporting.localization.Localization(__file__, 3137, 16), '-=', guess_584712, int_584713)
        # Assigning a type to the variable 'guess' (line 3137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3137, 16), 'guess', result_isub_584714)
        
        # SSA join for while statement (line 3136)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3128)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'guess' (line 3138)
        guess_584715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 15), 'guess')
        # Assigning a type to the variable 'stypy_return_type' (line 3138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3138, 8), 'stypy_return_type', guess_584715)
        
        # ################# End of 'binary_search(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'binary_search' in the type store
        # Getting the type of 'stypy_return_type' (line 3099)
        stypy_return_type_584716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_584716)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'binary_search'
        return stypy_return_type_584716

    # Assigning a type to the variable 'binary_search' (line 3099)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3099, 4), 'binary_search', binary_search)
    
    
    # Getting the type of 'alternative' (line 3140)
    alternative_584717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3140, 7), 'alternative')
    str_584718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3140, 22), 'str', 'less')
    # Applying the binary operator '==' (line 3140)
    result_eq_584719 = python_operator(stypy.reporting.localization.Localization(__file__, 3140, 7), '==', alternative_584717, str_584718)
    
    # Testing the type of an if condition (line 3140)
    if_condition_584720 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3140, 4), result_eq_584719)
    # Assigning a type to the variable 'if_condition_584720' (line 3140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3140, 4), 'if_condition_584720', if_condition_584720)
    # SSA begins for if statement (line 3140)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3141):
    
    # Assigning a Call to a Name (line 3141):
    
    # Call to cdf(...): (line 3141)
    # Processing the call arguments (line 3141)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3141)
    tuple_584723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3141, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3141)
    # Adding element type (line 3141)
    int_584724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3141, 33), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3141, 33), tuple_584723, int_584724)
    # Adding element type (line 3141)
    int_584725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3141, 36), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3141, 33), tuple_584723, int_584725)
    
    # Getting the type of 'c' (line 3141)
    c_584726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 31), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 3141)
    getitem___584727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3141, 31), c_584726, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3141)
    subscript_call_result_584728 = invoke(stypy.reporting.localization.Localization(__file__, 3141, 31), getitem___584727, tuple_584723)
    
    # Getting the type of 'n1' (line 3141)
    n1_584729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 40), 'n1', False)
    # Getting the type of 'n2' (line 3141)
    n2_584730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 45), 'n2', False)
    # Applying the binary operator '+' (line 3141)
    result_add_584731 = python_operator(stypy.reporting.localization.Localization(__file__, 3141, 40), '+', n1_584729, n2_584730)
    
    # Getting the type of 'n1' (line 3141)
    n1_584732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 49), 'n1', False)
    # Getting the type of 'n' (line 3141)
    n_584733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 53), 'n', False)
    # Processing the call keyword arguments (line 3141)
    kwargs_584734 = {}
    # Getting the type of 'hypergeom' (line 3141)
    hypergeom_584721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 17), 'hypergeom', False)
    # Obtaining the member 'cdf' of a type (line 3141)
    cdf_584722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3141, 17), hypergeom_584721, 'cdf')
    # Calling cdf(args, kwargs) (line 3141)
    cdf_call_result_584735 = invoke(stypy.reporting.localization.Localization(__file__, 3141, 17), cdf_584722, *[subscript_call_result_584728, result_add_584731, n1_584732, n_584733], **kwargs_584734)
    
    # Assigning a type to the variable 'pvalue' (line 3141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3141, 8), 'pvalue', cdf_call_result_584735)
    # SSA branch for the else part of an if statement (line 3140)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'alternative' (line 3142)
    alternative_584736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3142, 9), 'alternative')
    str_584737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3142, 24), 'str', 'greater')
    # Applying the binary operator '==' (line 3142)
    result_eq_584738 = python_operator(stypy.reporting.localization.Localization(__file__, 3142, 9), '==', alternative_584736, str_584737)
    
    # Testing the type of an if condition (line 3142)
    if_condition_584739 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3142, 9), result_eq_584738)
    # Assigning a type to the variable 'if_condition_584739' (line 3142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3142, 9), 'if_condition_584739', if_condition_584739)
    # SSA begins for if statement (line 3142)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3144):
    
    # Assigning a Call to a Name (line 3144):
    
    # Call to cdf(...): (line 3144)
    # Processing the call arguments (line 3144)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3144)
    tuple_584742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3144, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3144)
    # Adding element type (line 3144)
    int_584743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3144, 33), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3144, 33), tuple_584742, int_584743)
    # Adding element type (line 3144)
    int_584744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3144, 36), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3144, 33), tuple_584742, int_584744)
    
    # Getting the type of 'c' (line 3144)
    c_584745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 31), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 3144)
    getitem___584746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3144, 31), c_584745, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3144)
    subscript_call_result_584747 = invoke(stypy.reporting.localization.Localization(__file__, 3144, 31), getitem___584746, tuple_584742)
    
    # Getting the type of 'n1' (line 3144)
    n1_584748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 40), 'n1', False)
    # Getting the type of 'n2' (line 3144)
    n2_584749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 45), 'n2', False)
    # Applying the binary operator '+' (line 3144)
    result_add_584750 = python_operator(stypy.reporting.localization.Localization(__file__, 3144, 40), '+', n1_584748, n2_584749)
    
    # Getting the type of 'n1' (line 3144)
    n1_584751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 49), 'n1', False)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3144)
    tuple_584752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3144, 55), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3144)
    # Adding element type (line 3144)
    int_584753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3144, 55), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3144, 55), tuple_584752, int_584753)
    # Adding element type (line 3144)
    int_584754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3144, 58), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3144, 55), tuple_584752, int_584754)
    
    # Getting the type of 'c' (line 3144)
    c_584755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 53), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 3144)
    getitem___584756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3144, 53), c_584755, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3144)
    subscript_call_result_584757 = invoke(stypy.reporting.localization.Localization(__file__, 3144, 53), getitem___584756, tuple_584752)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3144)
    tuple_584758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3144, 65), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3144)
    # Adding element type (line 3144)
    int_584759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3144, 65), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3144, 65), tuple_584758, int_584759)
    # Adding element type (line 3144)
    int_584760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3144, 68), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3144, 65), tuple_584758, int_584760)
    
    # Getting the type of 'c' (line 3144)
    c_584761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 63), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 3144)
    getitem___584762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3144, 63), c_584761, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3144)
    subscript_call_result_584763 = invoke(stypy.reporting.localization.Localization(__file__, 3144, 63), getitem___584762, tuple_584758)
    
    # Applying the binary operator '+' (line 3144)
    result_add_584764 = python_operator(stypy.reporting.localization.Localization(__file__, 3144, 53), '+', subscript_call_result_584757, subscript_call_result_584763)
    
    # Processing the call keyword arguments (line 3144)
    kwargs_584765 = {}
    # Getting the type of 'hypergeom' (line 3144)
    hypergeom_584740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 17), 'hypergeom', False)
    # Obtaining the member 'cdf' of a type (line 3144)
    cdf_584741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3144, 17), hypergeom_584740, 'cdf')
    # Calling cdf(args, kwargs) (line 3144)
    cdf_call_result_584766 = invoke(stypy.reporting.localization.Localization(__file__, 3144, 17), cdf_584741, *[subscript_call_result_584747, result_add_584750, n1_584751, result_add_584764], **kwargs_584765)
    
    # Assigning a type to the variable 'pvalue' (line 3144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3144, 8), 'pvalue', cdf_call_result_584766)
    # SSA branch for the else part of an if statement (line 3142)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'alternative' (line 3145)
    alternative_584767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 9), 'alternative')
    str_584768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3145, 24), 'str', 'two-sided')
    # Applying the binary operator '==' (line 3145)
    result_eq_584769 = python_operator(stypy.reporting.localization.Localization(__file__, 3145, 9), '==', alternative_584767, str_584768)
    
    # Testing the type of an if condition (line 3145)
    if_condition_584770 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3145, 9), result_eq_584769)
    # Assigning a type to the variable 'if_condition_584770' (line 3145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3145, 9), 'if_condition_584770', if_condition_584770)
    # SSA begins for if statement (line 3145)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3146):
    
    # Assigning a Call to a Name (line 3146):
    
    # Call to int(...): (line 3146)
    # Processing the call arguments (line 3146)
    
    # Call to float(...): (line 3146)
    # Processing the call arguments (line 3146)
    # Getting the type of 'n' (line 3146)
    n_584773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 26), 'n', False)
    int_584774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3146, 30), 'int')
    # Applying the binary operator '+' (line 3146)
    result_add_584775 = python_operator(stypy.reporting.localization.Localization(__file__, 3146, 26), '+', n_584773, int_584774)
    
    # Getting the type of 'n1' (line 3146)
    n1_584776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 36), 'n1', False)
    int_584777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3146, 41), 'int')
    # Applying the binary operator '+' (line 3146)
    result_add_584778 = python_operator(stypy.reporting.localization.Localization(__file__, 3146, 36), '+', n1_584776, int_584777)
    
    # Applying the binary operator '*' (line 3146)
    result_mul_584779 = python_operator(stypy.reporting.localization.Localization(__file__, 3146, 25), '*', result_add_584775, result_add_584778)
    
    # Processing the call keyword arguments (line 3146)
    kwargs_584780 = {}
    # Getting the type of 'float' (line 3146)
    float_584772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 19), 'float', False)
    # Calling float(args, kwargs) (line 3146)
    float_call_result_584781 = invoke(stypy.reporting.localization.Localization(__file__, 3146, 19), float_584772, *[result_mul_584779], **kwargs_584780)
    
    # Getting the type of 'n1' (line 3146)
    n1_584782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 48), 'n1', False)
    # Getting the type of 'n2' (line 3146)
    n2_584783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 53), 'n2', False)
    # Applying the binary operator '+' (line 3146)
    result_add_584784 = python_operator(stypy.reporting.localization.Localization(__file__, 3146, 48), '+', n1_584782, n2_584783)
    
    int_584785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3146, 58), 'int')
    # Applying the binary operator '+' (line 3146)
    result_add_584786 = python_operator(stypy.reporting.localization.Localization(__file__, 3146, 56), '+', result_add_584784, int_584785)
    
    # Applying the binary operator 'div' (line 3146)
    result_div_584787 = python_operator(stypy.reporting.localization.Localization(__file__, 3146, 19), 'div', float_call_result_584781, result_add_584786)
    
    # Processing the call keyword arguments (line 3146)
    kwargs_584788 = {}
    # Getting the type of 'int' (line 3146)
    int_584771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 15), 'int', False)
    # Calling int(args, kwargs) (line 3146)
    int_call_result_584789 = invoke(stypy.reporting.localization.Localization(__file__, 3146, 15), int_584771, *[result_div_584787], **kwargs_584788)
    
    # Assigning a type to the variable 'mode' (line 3146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3146, 8), 'mode', int_call_result_584789)
    
    # Assigning a Call to a Name (line 3147):
    
    # Assigning a Call to a Name (line 3147):
    
    # Call to pmf(...): (line 3147)
    # Processing the call arguments (line 3147)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3147)
    tuple_584792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3147, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3147)
    # Adding element type (line 3147)
    int_584793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3147, 33), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3147, 33), tuple_584792, int_584793)
    # Adding element type (line 3147)
    int_584794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3147, 36), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3147, 33), tuple_584792, int_584794)
    
    # Getting the type of 'c' (line 3147)
    c_584795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 31), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 3147)
    getitem___584796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3147, 31), c_584795, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3147)
    subscript_call_result_584797 = invoke(stypy.reporting.localization.Localization(__file__, 3147, 31), getitem___584796, tuple_584792)
    
    # Getting the type of 'n1' (line 3147)
    n1_584798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 40), 'n1', False)
    # Getting the type of 'n2' (line 3147)
    n2_584799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 45), 'n2', False)
    # Applying the binary operator '+' (line 3147)
    result_add_584800 = python_operator(stypy.reporting.localization.Localization(__file__, 3147, 40), '+', n1_584798, n2_584799)
    
    # Getting the type of 'n1' (line 3147)
    n1_584801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 49), 'n1', False)
    # Getting the type of 'n' (line 3147)
    n_584802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 53), 'n', False)
    # Processing the call keyword arguments (line 3147)
    kwargs_584803 = {}
    # Getting the type of 'hypergeom' (line 3147)
    hypergeom_584790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 17), 'hypergeom', False)
    # Obtaining the member 'pmf' of a type (line 3147)
    pmf_584791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3147, 17), hypergeom_584790, 'pmf')
    # Calling pmf(args, kwargs) (line 3147)
    pmf_call_result_584804 = invoke(stypy.reporting.localization.Localization(__file__, 3147, 17), pmf_584791, *[subscript_call_result_584797, result_add_584800, n1_584801, n_584802], **kwargs_584803)
    
    # Assigning a type to the variable 'pexact' (line 3147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3147, 8), 'pexact', pmf_call_result_584804)
    
    # Assigning a Call to a Name (line 3148):
    
    # Assigning a Call to a Name (line 3148):
    
    # Call to pmf(...): (line 3148)
    # Processing the call arguments (line 3148)
    # Getting the type of 'mode' (line 3148)
    mode_584807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 30), 'mode', False)
    # Getting the type of 'n1' (line 3148)
    n1_584808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 36), 'n1', False)
    # Getting the type of 'n2' (line 3148)
    n2_584809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 41), 'n2', False)
    # Applying the binary operator '+' (line 3148)
    result_add_584810 = python_operator(stypy.reporting.localization.Localization(__file__, 3148, 36), '+', n1_584808, n2_584809)
    
    # Getting the type of 'n1' (line 3148)
    n1_584811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 45), 'n1', False)
    # Getting the type of 'n' (line 3148)
    n_584812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 49), 'n', False)
    # Processing the call keyword arguments (line 3148)
    kwargs_584813 = {}
    # Getting the type of 'hypergeom' (line 3148)
    hypergeom_584805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 16), 'hypergeom', False)
    # Obtaining the member 'pmf' of a type (line 3148)
    pmf_584806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3148, 16), hypergeom_584805, 'pmf')
    # Calling pmf(args, kwargs) (line 3148)
    pmf_call_result_584814 = invoke(stypy.reporting.localization.Localization(__file__, 3148, 16), pmf_584806, *[mode_584807, result_add_584810, n1_584811, n_584812], **kwargs_584813)
    
    # Assigning a type to the variable 'pmode' (line 3148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3148, 8), 'pmode', pmf_call_result_584814)
    
    # Assigning a BinOp to a Name (line 3150):
    
    # Assigning a BinOp to a Name (line 3150):
    int_584815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3150, 18), 'int')
    float_584816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3150, 22), 'float')
    # Applying the binary operator '-' (line 3150)
    result_sub_584817 = python_operator(stypy.reporting.localization.Localization(__file__, 3150, 18), '-', int_584815, float_584816)
    
    # Assigning a type to the variable 'epsilon' (line 3150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3150, 8), 'epsilon', result_sub_584817)
    
    
    
    # Call to abs(...): (line 3151)
    # Processing the call arguments (line 3151)
    # Getting the type of 'pexact' (line 3151)
    pexact_584820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3151, 18), 'pexact', False)
    # Getting the type of 'pmode' (line 3151)
    pmode_584821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3151, 27), 'pmode', False)
    # Applying the binary operator '-' (line 3151)
    result_sub_584822 = python_operator(stypy.reporting.localization.Localization(__file__, 3151, 18), '-', pexact_584820, pmode_584821)
    
    # Processing the call keyword arguments (line 3151)
    kwargs_584823 = {}
    # Getting the type of 'np' (line 3151)
    np_584818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3151, 11), 'np', False)
    # Obtaining the member 'abs' of a type (line 3151)
    abs_584819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3151, 11), np_584818, 'abs')
    # Calling abs(args, kwargs) (line 3151)
    abs_call_result_584824 = invoke(stypy.reporting.localization.Localization(__file__, 3151, 11), abs_584819, *[result_sub_584822], **kwargs_584823)
    
    
    # Call to maximum(...): (line 3151)
    # Processing the call arguments (line 3151)
    # Getting the type of 'pexact' (line 3151)
    pexact_584827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3151, 47), 'pexact', False)
    # Getting the type of 'pmode' (line 3151)
    pmode_584828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3151, 55), 'pmode', False)
    # Processing the call keyword arguments (line 3151)
    kwargs_584829 = {}
    # Getting the type of 'np' (line 3151)
    np_584825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3151, 36), 'np', False)
    # Obtaining the member 'maximum' of a type (line 3151)
    maximum_584826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3151, 36), np_584825, 'maximum')
    # Calling maximum(args, kwargs) (line 3151)
    maximum_call_result_584830 = invoke(stypy.reporting.localization.Localization(__file__, 3151, 36), maximum_584826, *[pexact_584827, pmode_584828], **kwargs_584829)
    
    # Applying the binary operator 'div' (line 3151)
    result_div_584831 = python_operator(stypy.reporting.localization.Localization(__file__, 3151, 11), 'div', abs_call_result_584824, maximum_call_result_584830)
    
    int_584832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3151, 65), 'int')
    # Getting the type of 'epsilon' (line 3151)
    epsilon_584833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3151, 69), 'epsilon')
    # Applying the binary operator '-' (line 3151)
    result_sub_584834 = python_operator(stypy.reporting.localization.Localization(__file__, 3151, 65), '-', int_584832, epsilon_584833)
    
    # Applying the binary operator '<=' (line 3151)
    result_le_584835 = python_operator(stypy.reporting.localization.Localization(__file__, 3151, 11), '<=', result_div_584831, result_sub_584834)
    
    # Testing the type of an if condition (line 3151)
    if_condition_584836 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3151, 8), result_le_584835)
    # Assigning a type to the variable 'if_condition_584836' (line 3151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3151, 8), 'if_condition_584836', if_condition_584836)
    # SSA begins for if statement (line 3151)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3152)
    tuple_584837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3152, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3152)
    # Adding element type (line 3152)
    # Getting the type of 'oddsratio' (line 3152)
    oddsratio_584838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3152, 19), 'oddsratio')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3152, 19), tuple_584837, oddsratio_584838)
    # Adding element type (line 3152)
    float_584839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3152, 30), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3152, 19), tuple_584837, float_584839)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3152)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3152, 12), 'stypy_return_type', tuple_584837)
    # SSA branch for the else part of an if statement (line 3151)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3154)
    tuple_584840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3154, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3154)
    # Adding element type (line 3154)
    int_584841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3154, 15), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3154, 15), tuple_584840, int_584841)
    # Adding element type (line 3154)
    int_584842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3154, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3154, 15), tuple_584840, int_584842)
    
    # Getting the type of 'c' (line 3154)
    c_584843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 13), 'c')
    # Obtaining the member '__getitem__' of a type (line 3154)
    getitem___584844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3154, 13), c_584843, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3154)
    subscript_call_result_584845 = invoke(stypy.reporting.localization.Localization(__file__, 3154, 13), getitem___584844, tuple_584840)
    
    # Getting the type of 'mode' (line 3154)
    mode_584846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 23), 'mode')
    # Applying the binary operator '<' (line 3154)
    result_lt_584847 = python_operator(stypy.reporting.localization.Localization(__file__, 3154, 13), '<', subscript_call_result_584845, mode_584846)
    
    # Testing the type of an if condition (line 3154)
    if_condition_584848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3154, 13), result_lt_584847)
    # Assigning a type to the variable 'if_condition_584848' (line 3154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3154, 13), 'if_condition_584848', if_condition_584848)
    # SSA begins for if statement (line 3154)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3155):
    
    # Assigning a Call to a Name (line 3155):
    
    # Call to cdf(...): (line 3155)
    # Processing the call arguments (line 3155)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3155)
    tuple_584851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3155, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3155)
    # Adding element type (line 3155)
    int_584852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3155, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3155, 37), tuple_584851, int_584852)
    # Adding element type (line 3155)
    int_584853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3155, 40), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3155, 37), tuple_584851, int_584853)
    
    # Getting the type of 'c' (line 3155)
    c_584854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 35), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 3155)
    getitem___584855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3155, 35), c_584854, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3155)
    subscript_call_result_584856 = invoke(stypy.reporting.localization.Localization(__file__, 3155, 35), getitem___584855, tuple_584851)
    
    # Getting the type of 'n1' (line 3155)
    n1_584857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 44), 'n1', False)
    # Getting the type of 'n2' (line 3155)
    n2_584858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 49), 'n2', False)
    # Applying the binary operator '+' (line 3155)
    result_add_584859 = python_operator(stypy.reporting.localization.Localization(__file__, 3155, 44), '+', n1_584857, n2_584858)
    
    # Getting the type of 'n1' (line 3155)
    n1_584860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 53), 'n1', False)
    # Getting the type of 'n' (line 3155)
    n_584861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 57), 'n', False)
    # Processing the call keyword arguments (line 3155)
    kwargs_584862 = {}
    # Getting the type of 'hypergeom' (line 3155)
    hypergeom_584849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 21), 'hypergeom', False)
    # Obtaining the member 'cdf' of a type (line 3155)
    cdf_584850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3155, 21), hypergeom_584849, 'cdf')
    # Calling cdf(args, kwargs) (line 3155)
    cdf_call_result_584863 = invoke(stypy.reporting.localization.Localization(__file__, 3155, 21), cdf_584850, *[subscript_call_result_584856, result_add_584859, n1_584860, n_584861], **kwargs_584862)
    
    # Assigning a type to the variable 'plower' (line 3155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3155, 12), 'plower', cdf_call_result_584863)
    
    
    
    # Call to pmf(...): (line 3156)
    # Processing the call arguments (line 3156)
    # Getting the type of 'n' (line 3156)
    n_584866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 29), 'n', False)
    # Getting the type of 'n1' (line 3156)
    n1_584867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 32), 'n1', False)
    # Getting the type of 'n2' (line 3156)
    n2_584868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 37), 'n2', False)
    # Applying the binary operator '+' (line 3156)
    result_add_584869 = python_operator(stypy.reporting.localization.Localization(__file__, 3156, 32), '+', n1_584867, n2_584868)
    
    # Getting the type of 'n1' (line 3156)
    n1_584870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 41), 'n1', False)
    # Getting the type of 'n' (line 3156)
    n_584871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 45), 'n', False)
    # Processing the call keyword arguments (line 3156)
    kwargs_584872 = {}
    # Getting the type of 'hypergeom' (line 3156)
    hypergeom_584864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 15), 'hypergeom', False)
    # Obtaining the member 'pmf' of a type (line 3156)
    pmf_584865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3156, 15), hypergeom_584864, 'pmf')
    # Calling pmf(args, kwargs) (line 3156)
    pmf_call_result_584873 = invoke(stypy.reporting.localization.Localization(__file__, 3156, 15), pmf_584865, *[n_584866, result_add_584869, n1_584870, n_584871], **kwargs_584872)
    
    # Getting the type of 'pexact' (line 3156)
    pexact_584874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 50), 'pexact')
    # Getting the type of 'epsilon' (line 3156)
    epsilon_584875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 59), 'epsilon')
    # Applying the binary operator 'div' (line 3156)
    result_div_584876 = python_operator(stypy.reporting.localization.Localization(__file__, 3156, 50), 'div', pexact_584874, epsilon_584875)
    
    # Applying the binary operator '>' (line 3156)
    result_gt_584877 = python_operator(stypy.reporting.localization.Localization(__file__, 3156, 15), '>', pmf_call_result_584873, result_div_584876)
    
    # Testing the type of an if condition (line 3156)
    if_condition_584878 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3156, 12), result_gt_584877)
    # Assigning a type to the variable 'if_condition_584878' (line 3156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3156, 12), 'if_condition_584878', if_condition_584878)
    # SSA begins for if statement (line 3156)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3157)
    tuple_584879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3157, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3157)
    # Adding element type (line 3157)
    # Getting the type of 'oddsratio' (line 3157)
    oddsratio_584880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3157, 23), 'oddsratio')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3157, 23), tuple_584879, oddsratio_584880)
    # Adding element type (line 3157)
    # Getting the type of 'plower' (line 3157)
    plower_584881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3157, 34), 'plower')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3157, 23), tuple_584879, plower_584881)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3157, 16), 'stypy_return_type', tuple_584879)
    # SSA join for if statement (line 3156)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3159):
    
    # Assigning a Call to a Name (line 3159):
    
    # Call to binary_search(...): (line 3159)
    # Processing the call arguments (line 3159)
    # Getting the type of 'n' (line 3159)
    n_584883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 34), 'n', False)
    # Getting the type of 'n1' (line 3159)
    n1_584884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 37), 'n1', False)
    # Getting the type of 'n2' (line 3159)
    n2_584885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 41), 'n2', False)
    str_584886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3159, 45), 'str', 'upper')
    # Processing the call keyword arguments (line 3159)
    kwargs_584887 = {}
    # Getting the type of 'binary_search' (line 3159)
    binary_search_584882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 20), 'binary_search', False)
    # Calling binary_search(args, kwargs) (line 3159)
    binary_search_call_result_584888 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 20), binary_search_584882, *[n_584883, n1_584884, n2_584885, str_584886], **kwargs_584887)
    
    # Assigning a type to the variable 'guess' (line 3159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3159, 12), 'guess', binary_search_call_result_584888)
    
    # Assigning a BinOp to a Name (line 3160):
    
    # Assigning a BinOp to a Name (line 3160):
    # Getting the type of 'plower' (line 3160)
    plower_584889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3160, 21), 'plower')
    
    # Call to sf(...): (line 3160)
    # Processing the call arguments (line 3160)
    # Getting the type of 'guess' (line 3160)
    guess_584892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3160, 43), 'guess', False)
    int_584893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3160, 51), 'int')
    # Applying the binary operator '-' (line 3160)
    result_sub_584894 = python_operator(stypy.reporting.localization.Localization(__file__, 3160, 43), '-', guess_584892, int_584893)
    
    # Getting the type of 'n1' (line 3160)
    n1_584895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3160, 54), 'n1', False)
    # Getting the type of 'n2' (line 3160)
    n2_584896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3160, 59), 'n2', False)
    # Applying the binary operator '+' (line 3160)
    result_add_584897 = python_operator(stypy.reporting.localization.Localization(__file__, 3160, 54), '+', n1_584895, n2_584896)
    
    # Getting the type of 'n1' (line 3160)
    n1_584898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3160, 63), 'n1', False)
    # Getting the type of 'n' (line 3160)
    n_584899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3160, 67), 'n', False)
    # Processing the call keyword arguments (line 3160)
    kwargs_584900 = {}
    # Getting the type of 'hypergeom' (line 3160)
    hypergeom_584890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3160, 30), 'hypergeom', False)
    # Obtaining the member 'sf' of a type (line 3160)
    sf_584891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3160, 30), hypergeom_584890, 'sf')
    # Calling sf(args, kwargs) (line 3160)
    sf_call_result_584901 = invoke(stypy.reporting.localization.Localization(__file__, 3160, 30), sf_584891, *[result_sub_584894, result_add_584897, n1_584898, n_584899], **kwargs_584900)
    
    # Applying the binary operator '+' (line 3160)
    result_add_584902 = python_operator(stypy.reporting.localization.Localization(__file__, 3160, 21), '+', plower_584889, sf_call_result_584901)
    
    # Assigning a type to the variable 'pvalue' (line 3160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3160, 12), 'pvalue', result_add_584902)
    # SSA branch for the else part of an if statement (line 3154)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3162):
    
    # Assigning a Call to a Name (line 3162):
    
    # Call to sf(...): (line 3162)
    # Processing the call arguments (line 3162)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3162)
    tuple_584905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3162, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3162)
    # Adding element type (line 3162)
    int_584906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3162, 36), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3162, 36), tuple_584905, int_584906)
    # Adding element type (line 3162)
    int_584907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3162, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3162, 36), tuple_584905, int_584907)
    
    # Getting the type of 'c' (line 3162)
    c_584908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 34), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 3162)
    getitem___584909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3162, 34), c_584908, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3162)
    subscript_call_result_584910 = invoke(stypy.reporting.localization.Localization(__file__, 3162, 34), getitem___584909, tuple_584905)
    
    int_584911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3162, 44), 'int')
    # Applying the binary operator '-' (line 3162)
    result_sub_584912 = python_operator(stypy.reporting.localization.Localization(__file__, 3162, 34), '-', subscript_call_result_584910, int_584911)
    
    # Getting the type of 'n1' (line 3162)
    n1_584913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 47), 'n1', False)
    # Getting the type of 'n2' (line 3162)
    n2_584914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 52), 'n2', False)
    # Applying the binary operator '+' (line 3162)
    result_add_584915 = python_operator(stypy.reporting.localization.Localization(__file__, 3162, 47), '+', n1_584913, n2_584914)
    
    # Getting the type of 'n1' (line 3162)
    n1_584916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 56), 'n1', False)
    # Getting the type of 'n' (line 3162)
    n_584917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 60), 'n', False)
    # Processing the call keyword arguments (line 3162)
    kwargs_584918 = {}
    # Getting the type of 'hypergeom' (line 3162)
    hypergeom_584903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 21), 'hypergeom', False)
    # Obtaining the member 'sf' of a type (line 3162)
    sf_584904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3162, 21), hypergeom_584903, 'sf')
    # Calling sf(args, kwargs) (line 3162)
    sf_call_result_584919 = invoke(stypy.reporting.localization.Localization(__file__, 3162, 21), sf_584904, *[result_sub_584912, result_add_584915, n1_584916, n_584917], **kwargs_584918)
    
    # Assigning a type to the variable 'pupper' (line 3162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3162, 12), 'pupper', sf_call_result_584919)
    
    
    
    # Call to pmf(...): (line 3163)
    # Processing the call arguments (line 3163)
    int_584922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3163, 29), 'int')
    # Getting the type of 'n1' (line 3163)
    n1_584923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 32), 'n1', False)
    # Getting the type of 'n2' (line 3163)
    n2_584924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 37), 'n2', False)
    # Applying the binary operator '+' (line 3163)
    result_add_584925 = python_operator(stypy.reporting.localization.Localization(__file__, 3163, 32), '+', n1_584923, n2_584924)
    
    # Getting the type of 'n1' (line 3163)
    n1_584926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 41), 'n1', False)
    # Getting the type of 'n' (line 3163)
    n_584927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 45), 'n', False)
    # Processing the call keyword arguments (line 3163)
    kwargs_584928 = {}
    # Getting the type of 'hypergeom' (line 3163)
    hypergeom_584920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 15), 'hypergeom', False)
    # Obtaining the member 'pmf' of a type (line 3163)
    pmf_584921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3163, 15), hypergeom_584920, 'pmf')
    # Calling pmf(args, kwargs) (line 3163)
    pmf_call_result_584929 = invoke(stypy.reporting.localization.Localization(__file__, 3163, 15), pmf_584921, *[int_584922, result_add_584925, n1_584926, n_584927], **kwargs_584928)
    
    # Getting the type of 'pexact' (line 3163)
    pexact_584930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 50), 'pexact')
    # Getting the type of 'epsilon' (line 3163)
    epsilon_584931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 59), 'epsilon')
    # Applying the binary operator 'div' (line 3163)
    result_div_584932 = python_operator(stypy.reporting.localization.Localization(__file__, 3163, 50), 'div', pexact_584930, epsilon_584931)
    
    # Applying the binary operator '>' (line 3163)
    result_gt_584933 = python_operator(stypy.reporting.localization.Localization(__file__, 3163, 15), '>', pmf_call_result_584929, result_div_584932)
    
    # Testing the type of an if condition (line 3163)
    if_condition_584934 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3163, 12), result_gt_584933)
    # Assigning a type to the variable 'if_condition_584934' (line 3163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3163, 12), 'if_condition_584934', if_condition_584934)
    # SSA begins for if statement (line 3163)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3164)
    tuple_584935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3164, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3164)
    # Adding element type (line 3164)
    # Getting the type of 'oddsratio' (line 3164)
    oddsratio_584936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3164, 23), 'oddsratio')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3164, 23), tuple_584935, oddsratio_584936)
    # Adding element type (line 3164)
    # Getting the type of 'pupper' (line 3164)
    pupper_584937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3164, 34), 'pupper')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3164, 23), tuple_584935, pupper_584937)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3164)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3164, 16), 'stypy_return_type', tuple_584935)
    # SSA join for if statement (line 3163)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3166):
    
    # Assigning a Call to a Name (line 3166):
    
    # Call to binary_search(...): (line 3166)
    # Processing the call arguments (line 3166)
    # Getting the type of 'n' (line 3166)
    n_584939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3166, 34), 'n', False)
    # Getting the type of 'n1' (line 3166)
    n1_584940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3166, 37), 'n1', False)
    # Getting the type of 'n2' (line 3166)
    n2_584941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3166, 41), 'n2', False)
    str_584942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3166, 45), 'str', 'lower')
    # Processing the call keyword arguments (line 3166)
    kwargs_584943 = {}
    # Getting the type of 'binary_search' (line 3166)
    binary_search_584938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3166, 20), 'binary_search', False)
    # Calling binary_search(args, kwargs) (line 3166)
    binary_search_call_result_584944 = invoke(stypy.reporting.localization.Localization(__file__, 3166, 20), binary_search_584938, *[n_584939, n1_584940, n2_584941, str_584942], **kwargs_584943)
    
    # Assigning a type to the variable 'guess' (line 3166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3166, 12), 'guess', binary_search_call_result_584944)
    
    # Assigning a BinOp to a Name (line 3167):
    
    # Assigning a BinOp to a Name (line 3167):
    # Getting the type of 'pupper' (line 3167)
    pupper_584945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 21), 'pupper')
    
    # Call to cdf(...): (line 3167)
    # Processing the call arguments (line 3167)
    # Getting the type of 'guess' (line 3167)
    guess_584948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 44), 'guess', False)
    # Getting the type of 'n1' (line 3167)
    n1_584949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 51), 'n1', False)
    # Getting the type of 'n2' (line 3167)
    n2_584950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 56), 'n2', False)
    # Applying the binary operator '+' (line 3167)
    result_add_584951 = python_operator(stypy.reporting.localization.Localization(__file__, 3167, 51), '+', n1_584949, n2_584950)
    
    # Getting the type of 'n1' (line 3167)
    n1_584952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 60), 'n1', False)
    # Getting the type of 'n' (line 3167)
    n_584953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 64), 'n', False)
    # Processing the call keyword arguments (line 3167)
    kwargs_584954 = {}
    # Getting the type of 'hypergeom' (line 3167)
    hypergeom_584946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 30), 'hypergeom', False)
    # Obtaining the member 'cdf' of a type (line 3167)
    cdf_584947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3167, 30), hypergeom_584946, 'cdf')
    # Calling cdf(args, kwargs) (line 3167)
    cdf_call_result_584955 = invoke(stypy.reporting.localization.Localization(__file__, 3167, 30), cdf_584947, *[guess_584948, result_add_584951, n1_584952, n_584953], **kwargs_584954)
    
    # Applying the binary operator '+' (line 3167)
    result_add_584956 = python_operator(stypy.reporting.localization.Localization(__file__, 3167, 21), '+', pupper_584945, cdf_call_result_584955)
    
    # Assigning a type to the variable 'pvalue' (line 3167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3167, 12), 'pvalue', result_add_584956)
    # SSA join for if statement (line 3154)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3151)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 3145)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Str to a Name (line 3169):
    
    # Assigning a Str to a Name (line 3169):
    str_584957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3169, 14), 'str', "`alternative` should be one of {'two-sided', 'less', 'greater'}")
    # Assigning a type to the variable 'msg' (line 3169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3169, 8), 'msg', str_584957)
    
    # Call to ValueError(...): (line 3170)
    # Processing the call arguments (line 3170)
    # Getting the type of 'msg' (line 3170)
    msg_584959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3170, 25), 'msg', False)
    # Processing the call keyword arguments (line 3170)
    kwargs_584960 = {}
    # Getting the type of 'ValueError' (line 3170)
    ValueError_584958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3170, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3170)
    ValueError_call_result_584961 = invoke(stypy.reporting.localization.Localization(__file__, 3170, 14), ValueError_584958, *[msg_584959], **kwargs_584960)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3170, 8), ValueError_call_result_584961, 'raise parameter', BaseException)
    # SSA join for if statement (line 3145)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3142)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3140)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'pvalue' (line 3172)
    pvalue_584962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3172, 7), 'pvalue')
    float_584963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3172, 16), 'float')
    # Applying the binary operator '>' (line 3172)
    result_gt_584964 = python_operator(stypy.reporting.localization.Localization(__file__, 3172, 7), '>', pvalue_584962, float_584963)
    
    # Testing the type of an if condition (line 3172)
    if_condition_584965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3172, 4), result_gt_584964)
    # Assigning a type to the variable 'if_condition_584965' (line 3172)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3172, 4), 'if_condition_584965', if_condition_584965)
    # SSA begins for if statement (line 3172)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 3173):
    
    # Assigning a Num to a Name (line 3173):
    float_584966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3173, 17), 'float')
    # Assigning a type to the variable 'pvalue' (line 3173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3173, 8), 'pvalue', float_584966)
    # SSA join for if statement (line 3172)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3175)
    tuple_584967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3175, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3175)
    # Adding element type (line 3175)
    # Getting the type of 'oddsratio' (line 3175)
    oddsratio_584968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 11), 'oddsratio')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3175, 11), tuple_584967, oddsratio_584968)
    # Adding element type (line 3175)
    # Getting the type of 'pvalue' (line 3175)
    pvalue_584969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 22), 'pvalue')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3175, 11), tuple_584967, pvalue_584969)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3175, 4), 'stypy_return_type', tuple_584967)
    
    # ################# End of 'fisher_exact(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fisher_exact' in the type store
    # Getting the type of 'stypy_return_type' (line 3018)
    stypy_return_type_584970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_584970)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fisher_exact'
    return stypy_return_type_584970

# Assigning a type to the variable 'fisher_exact' (line 3018)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3018, 0), 'fisher_exact', fisher_exact)

# Assigning a Call to a Name (line 3177):

# Assigning a Call to a Name (line 3177):

# Call to namedtuple(...): (line 3177)
# Processing the call arguments (line 3177)
str_584972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3177, 29), 'str', 'SpearmanrResult')

# Obtaining an instance of the builtin type 'tuple' (line 3177)
tuple_584973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3177, 49), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 3177)
# Adding element type (line 3177)
str_584974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3177, 49), 'str', 'correlation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3177, 49), tuple_584973, str_584974)
# Adding element type (line 3177)
str_584975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3177, 64), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3177, 49), tuple_584973, str_584975)

# Processing the call keyword arguments (line 3177)
kwargs_584976 = {}
# Getting the type of 'namedtuple' (line 3177)
namedtuple_584971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 18), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 3177)
namedtuple_call_result_584977 = invoke(stypy.reporting.localization.Localization(__file__, 3177, 18), namedtuple_584971, *[str_584972, tuple_584973], **kwargs_584976)

# Assigning a type to the variable 'SpearmanrResult' (line 3177)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3177, 0), 'SpearmanrResult', namedtuple_call_result_584977)

@norecursion
def spearmanr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3180)
    None_584978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 19), 'None')
    int_584979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3180, 30), 'int')
    str_584980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3180, 44), 'str', 'propagate')
    defaults = [None_584978, int_584979, str_584980]
    # Create a new context for function 'spearmanr'
    module_type_store = module_type_store.open_function_context('spearmanr', 3180, 0, False)
    
    # Passed parameters checking function
    spearmanr.stypy_localization = localization
    spearmanr.stypy_type_of_self = None
    spearmanr.stypy_type_store = module_type_store
    spearmanr.stypy_function_name = 'spearmanr'
    spearmanr.stypy_param_names_list = ['a', 'b', 'axis', 'nan_policy']
    spearmanr.stypy_varargs_param_name = None
    spearmanr.stypy_kwargs_param_name = None
    spearmanr.stypy_call_defaults = defaults
    spearmanr.stypy_call_varargs = varargs
    spearmanr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'spearmanr', ['a', 'b', 'axis', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'spearmanr', localization, ['a', 'b', 'axis', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'spearmanr(...)' code ##################

    str_584981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3278, (-1)), 'str', "\n    Calculate a Spearman rank-order correlation coefficient and the p-value\n    to test for non-correlation.\n\n    The Spearman correlation is a nonparametric measure of the monotonicity\n    of the relationship between two datasets. Unlike the Pearson correlation,\n    the Spearman correlation does not assume that both datasets are normally\n    distributed. Like other correlation coefficients, this one varies\n    between -1 and +1 with 0 implying no correlation. Correlations of -1 or\n    +1 imply an exact monotonic relationship. Positive correlations imply that\n    as x increases, so does y. Negative correlations imply that as x\n    increases, y decreases.\n\n    The p-value roughly indicates the probability of an uncorrelated system\n    producing datasets that have a Spearman correlation at least as extreme\n    as the one computed from these datasets. The p-values are not entirely\n    reliable but are probably reasonable for datasets larger than 500 or so.\n\n    Parameters\n    ----------\n    a, b : 1D or 2D array_like, b is optional\n        One or two 1-D or 2-D arrays containing multiple variables and\n        observations. When these are 1-D, each represents a vector of\n        observations of a single variable. For the behavior in the 2-D case,\n        see under ``axis``, below.\n        Both arrays need to have the same length in the ``axis`` dimension.\n    axis : int or None, optional\n        If axis=0 (default), then each column represents a variable, with\n        observations in the rows. If axis=1, the relationship is transposed:\n        each row represents a variable, while the columns contain observations.\n        If axis=None, then both arrays will be raveled.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    correlation : float or ndarray (2-D square)\n        Spearman correlation matrix or correlation coefficient (if only 2\n        variables are given as parameters. Correlation matrix is square with\n        length equal to total number of variables (columns or rows) in a and b\n        combined.\n    pvalue : float\n        The two-sided p-value for a hypothesis test whose null hypothesis is\n        that two sets of data are uncorrelated, has same dimension as rho.\n\n    Notes\n    -----\n    Changes in scipy 0.8.0: rewrite to add tie-handling, and axis.\n\n    References\n    ----------\n\n    .. [1] Zwillinger, D. and Kokoska, S. (2000). CRC Standard\n       Probability and Statistics Tables and Formulae. Chapman & Hall: New\n       York. 2000.\n       Section  14.7\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> stats.spearmanr([1,2,3,4,5], [5,6,7,8,7])\n    (0.82078268166812329, 0.088587005313543798)\n    >>> np.random.seed(1234321)\n    >>> x2n = np.random.randn(100, 2)\n    >>> y2n = np.random.randn(100, 2)\n    >>> stats.spearmanr(x2n)\n    (0.059969996999699973, 0.55338590803773591)\n    >>> stats.spearmanr(x2n[:,0], x2n[:,1])\n    (0.059969996999699973, 0.55338590803773591)\n    >>> rho, pval = stats.spearmanr(x2n, y2n)\n    >>> rho\n    array([[ 1.        ,  0.05997   ,  0.18569457,  0.06258626],\n           [ 0.05997   ,  1.        ,  0.110003  ,  0.02534653],\n           [ 0.18569457,  0.110003  ,  1.        ,  0.03488749],\n           [ 0.06258626,  0.02534653,  0.03488749,  1.        ]])\n    >>> pval\n    array([[ 0.        ,  0.55338591,  0.06435364,  0.53617935],\n           [ 0.55338591,  0.        ,  0.27592895,  0.80234077],\n           [ 0.06435364,  0.27592895,  0.        ,  0.73039992],\n           [ 0.53617935,  0.80234077,  0.73039992,  0.        ]])\n    >>> rho, pval = stats.spearmanr(x2n.T, y2n.T, axis=1)\n    >>> rho\n    array([[ 1.        ,  0.05997   ,  0.18569457,  0.06258626],\n           [ 0.05997   ,  1.        ,  0.110003  ,  0.02534653],\n           [ 0.18569457,  0.110003  ,  1.        ,  0.03488749],\n           [ 0.06258626,  0.02534653,  0.03488749,  1.        ]])\n    >>> stats.spearmanr(x2n, y2n, axis=None)\n    (0.10816770419260482, 0.1273562188027364)\n    >>> stats.spearmanr(x2n.ravel(), y2n.ravel())\n    (0.10816770419260482, 0.1273562188027364)\n\n    >>> xint = np.random.randint(10, size=(100, 2))\n    >>> stats.spearmanr(xint)\n    (0.052760927029710199, 0.60213045837062351)\n\n    ")
    
    # Assigning a Call to a Tuple (line 3279):
    
    # Assigning a Subscript to a Name (line 3279):
    
    # Obtaining the type of the subscript
    int_584982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3279, 4), 'int')
    
    # Call to _chk_asarray(...): (line 3279)
    # Processing the call arguments (line 3279)
    # Getting the type of 'a' (line 3279)
    a_584984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 30), 'a', False)
    # Getting the type of 'axis' (line 3279)
    axis_584985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 33), 'axis', False)
    # Processing the call keyword arguments (line 3279)
    kwargs_584986 = {}
    # Getting the type of '_chk_asarray' (line 3279)
    _chk_asarray_584983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 17), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 3279)
    _chk_asarray_call_result_584987 = invoke(stypy.reporting.localization.Localization(__file__, 3279, 17), _chk_asarray_584983, *[a_584984, axis_584985], **kwargs_584986)
    
    # Obtaining the member '__getitem__' of a type (line 3279)
    getitem___584988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3279, 4), _chk_asarray_call_result_584987, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3279)
    subscript_call_result_584989 = invoke(stypy.reporting.localization.Localization(__file__, 3279, 4), getitem___584988, int_584982)
    
    # Assigning a type to the variable 'tuple_var_assignment_579919' (line 3279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3279, 4), 'tuple_var_assignment_579919', subscript_call_result_584989)
    
    # Assigning a Subscript to a Name (line 3279):
    
    # Obtaining the type of the subscript
    int_584990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3279, 4), 'int')
    
    # Call to _chk_asarray(...): (line 3279)
    # Processing the call arguments (line 3279)
    # Getting the type of 'a' (line 3279)
    a_584992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 30), 'a', False)
    # Getting the type of 'axis' (line 3279)
    axis_584993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 33), 'axis', False)
    # Processing the call keyword arguments (line 3279)
    kwargs_584994 = {}
    # Getting the type of '_chk_asarray' (line 3279)
    _chk_asarray_584991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 17), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 3279)
    _chk_asarray_call_result_584995 = invoke(stypy.reporting.localization.Localization(__file__, 3279, 17), _chk_asarray_584991, *[a_584992, axis_584993], **kwargs_584994)
    
    # Obtaining the member '__getitem__' of a type (line 3279)
    getitem___584996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3279, 4), _chk_asarray_call_result_584995, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3279)
    subscript_call_result_584997 = invoke(stypy.reporting.localization.Localization(__file__, 3279, 4), getitem___584996, int_584990)
    
    # Assigning a type to the variable 'tuple_var_assignment_579920' (line 3279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3279, 4), 'tuple_var_assignment_579920', subscript_call_result_584997)
    
    # Assigning a Name to a Name (line 3279):
    # Getting the type of 'tuple_var_assignment_579919' (line 3279)
    tuple_var_assignment_579919_584998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 4), 'tuple_var_assignment_579919')
    # Assigning a type to the variable 'a' (line 3279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3279, 4), 'a', tuple_var_assignment_579919_584998)
    
    # Assigning a Name to a Name (line 3279):
    # Getting the type of 'tuple_var_assignment_579920' (line 3279)
    tuple_var_assignment_579920_584999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 4), 'tuple_var_assignment_579920')
    # Assigning a type to the variable 'axisout' (line 3279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3279, 7), 'axisout', tuple_var_assignment_579920_584999)
    
    # Assigning a Call to a Tuple (line 3281):
    
    # Assigning a Subscript to a Name (line 3281):
    
    # Obtaining the type of the subscript
    int_585000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3281, 4), 'int')
    
    # Call to _contains_nan(...): (line 3281)
    # Processing the call arguments (line 3281)
    # Getting the type of 'a' (line 3281)
    a_585002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 47), 'a', False)
    # Getting the type of 'nan_policy' (line 3281)
    nan_policy_585003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 50), 'nan_policy', False)
    # Processing the call keyword arguments (line 3281)
    kwargs_585004 = {}
    # Getting the type of '_contains_nan' (line 3281)
    _contains_nan_585001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 33), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 3281)
    _contains_nan_call_result_585005 = invoke(stypy.reporting.localization.Localization(__file__, 3281, 33), _contains_nan_585001, *[a_585002, nan_policy_585003], **kwargs_585004)
    
    # Obtaining the member '__getitem__' of a type (line 3281)
    getitem___585006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3281, 4), _contains_nan_call_result_585005, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3281)
    subscript_call_result_585007 = invoke(stypy.reporting.localization.Localization(__file__, 3281, 4), getitem___585006, int_585000)
    
    # Assigning a type to the variable 'tuple_var_assignment_579921' (line 3281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3281, 4), 'tuple_var_assignment_579921', subscript_call_result_585007)
    
    # Assigning a Subscript to a Name (line 3281):
    
    # Obtaining the type of the subscript
    int_585008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3281, 4), 'int')
    
    # Call to _contains_nan(...): (line 3281)
    # Processing the call arguments (line 3281)
    # Getting the type of 'a' (line 3281)
    a_585010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 47), 'a', False)
    # Getting the type of 'nan_policy' (line 3281)
    nan_policy_585011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 50), 'nan_policy', False)
    # Processing the call keyword arguments (line 3281)
    kwargs_585012 = {}
    # Getting the type of '_contains_nan' (line 3281)
    _contains_nan_585009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 33), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 3281)
    _contains_nan_call_result_585013 = invoke(stypy.reporting.localization.Localization(__file__, 3281, 33), _contains_nan_585009, *[a_585010, nan_policy_585011], **kwargs_585012)
    
    # Obtaining the member '__getitem__' of a type (line 3281)
    getitem___585014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3281, 4), _contains_nan_call_result_585013, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3281)
    subscript_call_result_585015 = invoke(stypy.reporting.localization.Localization(__file__, 3281, 4), getitem___585014, int_585008)
    
    # Assigning a type to the variable 'tuple_var_assignment_579922' (line 3281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3281, 4), 'tuple_var_assignment_579922', subscript_call_result_585015)
    
    # Assigning a Name to a Name (line 3281):
    # Getting the type of 'tuple_var_assignment_579921' (line 3281)
    tuple_var_assignment_579921_585016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 4), 'tuple_var_assignment_579921')
    # Assigning a type to the variable 'a_contains_nan' (line 3281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3281, 4), 'a_contains_nan', tuple_var_assignment_579921_585016)
    
    # Assigning a Name to a Name (line 3281):
    # Getting the type of 'tuple_var_assignment_579922' (line 3281)
    tuple_var_assignment_579922_585017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 4), 'tuple_var_assignment_579922')
    # Assigning a type to the variable 'nan_policy' (line 3281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3281, 20), 'nan_policy', tuple_var_assignment_579922_585017)
    
    # Getting the type of 'a_contains_nan' (line 3283)
    a_contains_nan_585018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3283, 7), 'a_contains_nan')
    # Testing the type of an if condition (line 3283)
    if_condition_585019 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3283, 4), a_contains_nan_585018)
    # Assigning a type to the variable 'if_condition_585019' (line 3283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3283, 4), 'if_condition_585019', if_condition_585019)
    # SSA begins for if statement (line 3283)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3284):
    
    # Assigning a Call to a Name (line 3284):
    
    # Call to masked_invalid(...): (line 3284)
    # Processing the call arguments (line 3284)
    # Getting the type of 'a' (line 3284)
    a_585022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3284, 30), 'a', False)
    # Processing the call keyword arguments (line 3284)
    kwargs_585023 = {}
    # Getting the type of 'ma' (line 3284)
    ma_585020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3284, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 3284)
    masked_invalid_585021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3284, 12), ma_585020, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 3284)
    masked_invalid_call_result_585024 = invoke(stypy.reporting.localization.Localization(__file__, 3284, 12), masked_invalid_585021, *[a_585022], **kwargs_585023)
    
    # Assigning a type to the variable 'a' (line 3284)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3284, 8), 'a', masked_invalid_call_result_585024)
    # SSA join for if statement (line 3283)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'a' (line 3286)
    a_585025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3286, 7), 'a')
    # Obtaining the member 'size' of a type (line 3286)
    size_585026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3286, 7), a_585025, 'size')
    int_585027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3286, 17), 'int')
    # Applying the binary operator '<=' (line 3286)
    result_le_585028 = python_operator(stypy.reporting.localization.Localization(__file__, 3286, 7), '<=', size_585026, int_585027)
    
    # Testing the type of an if condition (line 3286)
    if_condition_585029 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3286, 4), result_le_585028)
    # Assigning a type to the variable 'if_condition_585029' (line 3286)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3286, 4), 'if_condition_585029', if_condition_585029)
    # SSA begins for if statement (line 3286)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to SpearmanrResult(...): (line 3287)
    # Processing the call arguments (line 3287)
    # Getting the type of 'np' (line 3287)
    np_585031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3287, 31), 'np', False)
    # Obtaining the member 'nan' of a type (line 3287)
    nan_585032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3287, 31), np_585031, 'nan')
    # Getting the type of 'np' (line 3287)
    np_585033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3287, 39), 'np', False)
    # Obtaining the member 'nan' of a type (line 3287)
    nan_585034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3287, 39), np_585033, 'nan')
    # Processing the call keyword arguments (line 3287)
    kwargs_585035 = {}
    # Getting the type of 'SpearmanrResult' (line 3287)
    SpearmanrResult_585030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3287, 15), 'SpearmanrResult', False)
    # Calling SpearmanrResult(args, kwargs) (line 3287)
    SpearmanrResult_call_result_585036 = invoke(stypy.reporting.localization.Localization(__file__, 3287, 15), SpearmanrResult_585030, *[nan_585032, nan_585034], **kwargs_585035)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3287)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3287, 8), 'stypy_return_type', SpearmanrResult_call_result_585036)
    # SSA join for if statement (line 3286)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3289):
    
    # Assigning a Call to a Name (line 3289):
    
    # Call to apply_along_axis(...): (line 3289)
    # Processing the call arguments (line 3289)
    # Getting the type of 'rankdata' (line 3289)
    rankdata_585039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 29), 'rankdata', False)
    # Getting the type of 'axisout' (line 3289)
    axisout_585040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 39), 'axisout', False)
    # Getting the type of 'a' (line 3289)
    a_585041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 48), 'a', False)
    # Processing the call keyword arguments (line 3289)
    kwargs_585042 = {}
    # Getting the type of 'np' (line 3289)
    np_585037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 9), 'np', False)
    # Obtaining the member 'apply_along_axis' of a type (line 3289)
    apply_along_axis_585038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3289, 9), np_585037, 'apply_along_axis')
    # Calling apply_along_axis(args, kwargs) (line 3289)
    apply_along_axis_call_result_585043 = invoke(stypy.reporting.localization.Localization(__file__, 3289, 9), apply_along_axis_585038, *[rankdata_585039, axisout_585040, a_585041], **kwargs_585042)
    
    # Assigning a type to the variable 'ar' (line 3289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3289, 4), 'ar', apply_along_axis_call_result_585043)
    
    # Assigning a Name to a Name (line 3291):
    
    # Assigning a Name to a Name (line 3291):
    # Getting the type of 'None' (line 3291)
    None_585044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3291, 9), 'None')
    # Assigning a type to the variable 'br' (line 3291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3291, 4), 'br', None_585044)
    
    # Type idiom detected: calculating its left and rigth part (line 3292)
    # Getting the type of 'b' (line 3292)
    b_585045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3292, 4), 'b')
    # Getting the type of 'None' (line 3292)
    None_585046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3292, 16), 'None')
    
    (may_be_585047, more_types_in_union_585048) = may_not_be_none(b_585045, None_585046)

    if may_be_585047:

        if more_types_in_union_585048:
            # Runtime conditional SSA (line 3292)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Tuple (line 3293):
        
        # Assigning a Subscript to a Name (line 3293):
        
        # Obtaining the type of the subscript
        int_585049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3293, 8), 'int')
        
        # Call to _chk_asarray(...): (line 3293)
        # Processing the call arguments (line 3293)
        # Getting the type of 'b' (line 3293)
        b_585051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 34), 'b', False)
        # Getting the type of 'axis' (line 3293)
        axis_585052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 37), 'axis', False)
        # Processing the call keyword arguments (line 3293)
        kwargs_585053 = {}
        # Getting the type of '_chk_asarray' (line 3293)
        _chk_asarray_585050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 21), '_chk_asarray', False)
        # Calling _chk_asarray(args, kwargs) (line 3293)
        _chk_asarray_call_result_585054 = invoke(stypy.reporting.localization.Localization(__file__, 3293, 21), _chk_asarray_585050, *[b_585051, axis_585052], **kwargs_585053)
        
        # Obtaining the member '__getitem__' of a type (line 3293)
        getitem___585055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3293, 8), _chk_asarray_call_result_585054, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3293)
        subscript_call_result_585056 = invoke(stypy.reporting.localization.Localization(__file__, 3293, 8), getitem___585055, int_585049)
        
        # Assigning a type to the variable 'tuple_var_assignment_579923' (line 3293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3293, 8), 'tuple_var_assignment_579923', subscript_call_result_585056)
        
        # Assigning a Subscript to a Name (line 3293):
        
        # Obtaining the type of the subscript
        int_585057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3293, 8), 'int')
        
        # Call to _chk_asarray(...): (line 3293)
        # Processing the call arguments (line 3293)
        # Getting the type of 'b' (line 3293)
        b_585059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 34), 'b', False)
        # Getting the type of 'axis' (line 3293)
        axis_585060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 37), 'axis', False)
        # Processing the call keyword arguments (line 3293)
        kwargs_585061 = {}
        # Getting the type of '_chk_asarray' (line 3293)
        _chk_asarray_585058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 21), '_chk_asarray', False)
        # Calling _chk_asarray(args, kwargs) (line 3293)
        _chk_asarray_call_result_585062 = invoke(stypy.reporting.localization.Localization(__file__, 3293, 21), _chk_asarray_585058, *[b_585059, axis_585060], **kwargs_585061)
        
        # Obtaining the member '__getitem__' of a type (line 3293)
        getitem___585063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3293, 8), _chk_asarray_call_result_585062, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3293)
        subscript_call_result_585064 = invoke(stypy.reporting.localization.Localization(__file__, 3293, 8), getitem___585063, int_585057)
        
        # Assigning a type to the variable 'tuple_var_assignment_579924' (line 3293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3293, 8), 'tuple_var_assignment_579924', subscript_call_result_585064)
        
        # Assigning a Name to a Name (line 3293):
        # Getting the type of 'tuple_var_assignment_579923' (line 3293)
        tuple_var_assignment_579923_585065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 8), 'tuple_var_assignment_579923')
        # Assigning a type to the variable 'b' (line 3293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3293, 8), 'b', tuple_var_assignment_579923_585065)
        
        # Assigning a Name to a Name (line 3293):
        # Getting the type of 'tuple_var_assignment_579924' (line 3293)
        tuple_var_assignment_579924_585066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 8), 'tuple_var_assignment_579924')
        # Assigning a type to the variable 'axisout' (line 3293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3293, 11), 'axisout', tuple_var_assignment_579924_585066)
        
        # Assigning a Call to a Tuple (line 3295):
        
        # Assigning a Subscript to a Name (line 3295):
        
        # Obtaining the type of the subscript
        int_585067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3295, 8), 'int')
        
        # Call to _contains_nan(...): (line 3295)
        # Processing the call arguments (line 3295)
        # Getting the type of 'b' (line 3295)
        b_585069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 51), 'b', False)
        # Getting the type of 'nan_policy' (line 3295)
        nan_policy_585070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 54), 'nan_policy', False)
        # Processing the call keyword arguments (line 3295)
        kwargs_585071 = {}
        # Getting the type of '_contains_nan' (line 3295)
        _contains_nan_585068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 37), '_contains_nan', False)
        # Calling _contains_nan(args, kwargs) (line 3295)
        _contains_nan_call_result_585072 = invoke(stypy.reporting.localization.Localization(__file__, 3295, 37), _contains_nan_585068, *[b_585069, nan_policy_585070], **kwargs_585071)
        
        # Obtaining the member '__getitem__' of a type (line 3295)
        getitem___585073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3295, 8), _contains_nan_call_result_585072, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3295)
        subscript_call_result_585074 = invoke(stypy.reporting.localization.Localization(__file__, 3295, 8), getitem___585073, int_585067)
        
        # Assigning a type to the variable 'tuple_var_assignment_579925' (line 3295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3295, 8), 'tuple_var_assignment_579925', subscript_call_result_585074)
        
        # Assigning a Subscript to a Name (line 3295):
        
        # Obtaining the type of the subscript
        int_585075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3295, 8), 'int')
        
        # Call to _contains_nan(...): (line 3295)
        # Processing the call arguments (line 3295)
        # Getting the type of 'b' (line 3295)
        b_585077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 51), 'b', False)
        # Getting the type of 'nan_policy' (line 3295)
        nan_policy_585078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 54), 'nan_policy', False)
        # Processing the call keyword arguments (line 3295)
        kwargs_585079 = {}
        # Getting the type of '_contains_nan' (line 3295)
        _contains_nan_585076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 37), '_contains_nan', False)
        # Calling _contains_nan(args, kwargs) (line 3295)
        _contains_nan_call_result_585080 = invoke(stypy.reporting.localization.Localization(__file__, 3295, 37), _contains_nan_585076, *[b_585077, nan_policy_585078], **kwargs_585079)
        
        # Obtaining the member '__getitem__' of a type (line 3295)
        getitem___585081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3295, 8), _contains_nan_call_result_585080, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3295)
        subscript_call_result_585082 = invoke(stypy.reporting.localization.Localization(__file__, 3295, 8), getitem___585081, int_585075)
        
        # Assigning a type to the variable 'tuple_var_assignment_579926' (line 3295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3295, 8), 'tuple_var_assignment_579926', subscript_call_result_585082)
        
        # Assigning a Name to a Name (line 3295):
        # Getting the type of 'tuple_var_assignment_579925' (line 3295)
        tuple_var_assignment_579925_585083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 8), 'tuple_var_assignment_579925')
        # Assigning a type to the variable 'b_contains_nan' (line 3295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3295, 8), 'b_contains_nan', tuple_var_assignment_579925_585083)
        
        # Assigning a Name to a Name (line 3295):
        # Getting the type of 'tuple_var_assignment_579926' (line 3295)
        tuple_var_assignment_579926_585084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 8), 'tuple_var_assignment_579926')
        # Assigning a type to the variable 'nan_policy' (line 3295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3295, 24), 'nan_policy', tuple_var_assignment_579926_585084)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'a_contains_nan' (line 3297)
        a_contains_nan_585085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3297, 11), 'a_contains_nan')
        # Getting the type of 'b_contains_nan' (line 3297)
        b_contains_nan_585086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3297, 29), 'b_contains_nan')
        # Applying the binary operator 'or' (line 3297)
        result_or_keyword_585087 = python_operator(stypy.reporting.localization.Localization(__file__, 3297, 11), 'or', a_contains_nan_585085, b_contains_nan_585086)
        
        # Testing the type of an if condition (line 3297)
        if_condition_585088 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3297, 8), result_or_keyword_585087)
        # Assigning a type to the variable 'if_condition_585088' (line 3297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3297, 8), 'if_condition_585088', if_condition_585088)
        # SSA begins for if statement (line 3297)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3298):
        
        # Assigning a Call to a Name (line 3298):
        
        # Call to masked_invalid(...): (line 3298)
        # Processing the call arguments (line 3298)
        # Getting the type of 'b' (line 3298)
        b_585091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3298, 34), 'b', False)
        # Processing the call keyword arguments (line 3298)
        kwargs_585092 = {}
        # Getting the type of 'ma' (line 3298)
        ma_585089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3298, 16), 'ma', False)
        # Obtaining the member 'masked_invalid' of a type (line 3298)
        masked_invalid_585090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3298, 16), ma_585089, 'masked_invalid')
        # Calling masked_invalid(args, kwargs) (line 3298)
        masked_invalid_call_result_585093 = invoke(stypy.reporting.localization.Localization(__file__, 3298, 16), masked_invalid_585090, *[b_585091], **kwargs_585092)
        
        # Assigning a type to the variable 'b' (line 3298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3298, 12), 'b', masked_invalid_call_result_585093)
        
        
        # Getting the type of 'nan_policy' (line 3300)
        nan_policy_585094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3300, 15), 'nan_policy')
        str_585095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3300, 29), 'str', 'propagate')
        # Applying the binary operator '==' (line 3300)
        result_eq_585096 = python_operator(stypy.reporting.localization.Localization(__file__, 3300, 15), '==', nan_policy_585094, str_585095)
        
        # Testing the type of an if condition (line 3300)
        if_condition_585097 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3300, 12), result_eq_585096)
        # Assigning a type to the variable 'if_condition_585097' (line 3300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3300, 12), 'if_condition_585097', if_condition_585097)
        # SSA begins for if statement (line 3300)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 3301):
        
        # Assigning a Subscript to a Name (line 3301):
        
        # Obtaining the type of the subscript
        int_585098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3301, 16), 'int')
        
        # Call to spearmanr(...): (line 3301)
        # Processing the call arguments (line 3301)
        # Getting the type of 'a' (line 3301)
        a_585101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 51), 'a', False)
        # Getting the type of 'b' (line 3301)
        b_585102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 54), 'b', False)
        # Getting the type of 'axis' (line 3301)
        axis_585103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 57), 'axis', False)
        # Processing the call keyword arguments (line 3301)
        kwargs_585104 = {}
        # Getting the type of 'mstats_basic' (line 3301)
        mstats_basic_585099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 28), 'mstats_basic', False)
        # Obtaining the member 'spearmanr' of a type (line 3301)
        spearmanr_585100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3301, 28), mstats_basic_585099, 'spearmanr')
        # Calling spearmanr(args, kwargs) (line 3301)
        spearmanr_call_result_585105 = invoke(stypy.reporting.localization.Localization(__file__, 3301, 28), spearmanr_585100, *[a_585101, b_585102, axis_585103], **kwargs_585104)
        
        # Obtaining the member '__getitem__' of a type (line 3301)
        getitem___585106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3301, 16), spearmanr_call_result_585105, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3301)
        subscript_call_result_585107 = invoke(stypy.reporting.localization.Localization(__file__, 3301, 16), getitem___585106, int_585098)
        
        # Assigning a type to the variable 'tuple_var_assignment_579927' (line 3301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3301, 16), 'tuple_var_assignment_579927', subscript_call_result_585107)
        
        # Assigning a Subscript to a Name (line 3301):
        
        # Obtaining the type of the subscript
        int_585108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3301, 16), 'int')
        
        # Call to spearmanr(...): (line 3301)
        # Processing the call arguments (line 3301)
        # Getting the type of 'a' (line 3301)
        a_585111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 51), 'a', False)
        # Getting the type of 'b' (line 3301)
        b_585112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 54), 'b', False)
        # Getting the type of 'axis' (line 3301)
        axis_585113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 57), 'axis', False)
        # Processing the call keyword arguments (line 3301)
        kwargs_585114 = {}
        # Getting the type of 'mstats_basic' (line 3301)
        mstats_basic_585109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 28), 'mstats_basic', False)
        # Obtaining the member 'spearmanr' of a type (line 3301)
        spearmanr_585110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3301, 28), mstats_basic_585109, 'spearmanr')
        # Calling spearmanr(args, kwargs) (line 3301)
        spearmanr_call_result_585115 = invoke(stypy.reporting.localization.Localization(__file__, 3301, 28), spearmanr_585110, *[a_585111, b_585112, axis_585113], **kwargs_585114)
        
        # Obtaining the member '__getitem__' of a type (line 3301)
        getitem___585116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3301, 16), spearmanr_call_result_585115, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3301)
        subscript_call_result_585117 = invoke(stypy.reporting.localization.Localization(__file__, 3301, 16), getitem___585116, int_585108)
        
        # Assigning a type to the variable 'tuple_var_assignment_579928' (line 3301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3301, 16), 'tuple_var_assignment_579928', subscript_call_result_585117)
        
        # Assigning a Name to a Name (line 3301):
        # Getting the type of 'tuple_var_assignment_579927' (line 3301)
        tuple_var_assignment_579927_585118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 16), 'tuple_var_assignment_579927')
        # Assigning a type to the variable 'rho' (line 3301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3301, 16), 'rho', tuple_var_assignment_579927_585118)
        
        # Assigning a Name to a Name (line 3301):
        # Getting the type of 'tuple_var_assignment_579928' (line 3301)
        tuple_var_assignment_579928_585119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 16), 'tuple_var_assignment_579928')
        # Assigning a type to the variable 'pval' (line 3301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3301, 21), 'pval', tuple_var_assignment_579928_585119)
        
        # Call to SpearmanrResult(...): (line 3302)
        # Processing the call arguments (line 3302)
        # Getting the type of 'rho' (line 3302)
        rho_585121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 39), 'rho', False)
        # Getting the type of 'np' (line 3302)
        np_585122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 45), 'np', False)
        # Obtaining the member 'nan' of a type (line 3302)
        nan_585123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3302, 45), np_585122, 'nan')
        # Applying the binary operator '*' (line 3302)
        result_mul_585124 = python_operator(stypy.reporting.localization.Localization(__file__, 3302, 39), '*', rho_585121, nan_585123)
        
        # Getting the type of 'pval' (line 3302)
        pval_585125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 53), 'pval', False)
        # Getting the type of 'np' (line 3302)
        np_585126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 60), 'np', False)
        # Obtaining the member 'nan' of a type (line 3302)
        nan_585127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3302, 60), np_585126, 'nan')
        # Applying the binary operator '*' (line 3302)
        result_mul_585128 = python_operator(stypy.reporting.localization.Localization(__file__, 3302, 53), '*', pval_585125, nan_585127)
        
        # Processing the call keyword arguments (line 3302)
        kwargs_585129 = {}
        # Getting the type of 'SpearmanrResult' (line 3302)
        SpearmanrResult_585120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 23), 'SpearmanrResult', False)
        # Calling SpearmanrResult(args, kwargs) (line 3302)
        SpearmanrResult_call_result_585130 = invoke(stypy.reporting.localization.Localization(__file__, 3302, 23), SpearmanrResult_585120, *[result_mul_585124, result_mul_585128], **kwargs_585129)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3302, 16), 'stypy_return_type', SpearmanrResult_call_result_585130)
        # SSA join for if statement (line 3300)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'nan_policy' (line 3304)
        nan_policy_585131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3304, 15), 'nan_policy')
        str_585132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3304, 29), 'str', 'omit')
        # Applying the binary operator '==' (line 3304)
        result_eq_585133 = python_operator(stypy.reporting.localization.Localization(__file__, 3304, 15), '==', nan_policy_585131, str_585132)
        
        # Testing the type of an if condition (line 3304)
        if_condition_585134 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3304, 12), result_eq_585133)
        # Assigning a type to the variable 'if_condition_585134' (line 3304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3304, 12), 'if_condition_585134', if_condition_585134)
        # SSA begins for if statement (line 3304)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to spearmanr(...): (line 3305)
        # Processing the call arguments (line 3305)
        # Getting the type of 'a' (line 3305)
        a_585137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 46), 'a', False)
        # Getting the type of 'b' (line 3305)
        b_585138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 49), 'b', False)
        # Getting the type of 'axis' (line 3305)
        axis_585139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 52), 'axis', False)
        # Processing the call keyword arguments (line 3305)
        kwargs_585140 = {}
        # Getting the type of 'mstats_basic' (line 3305)
        mstats_basic_585135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 23), 'mstats_basic', False)
        # Obtaining the member 'spearmanr' of a type (line 3305)
        spearmanr_585136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3305, 23), mstats_basic_585135, 'spearmanr')
        # Calling spearmanr(args, kwargs) (line 3305)
        spearmanr_call_result_585141 = invoke(stypy.reporting.localization.Localization(__file__, 3305, 23), spearmanr_585136, *[a_585137, b_585138, axis_585139], **kwargs_585140)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3305, 16), 'stypy_return_type', spearmanr_call_result_585141)
        # SSA join for if statement (line 3304)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3297)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3307):
        
        # Assigning a Call to a Name (line 3307):
        
        # Call to apply_along_axis(...): (line 3307)
        # Processing the call arguments (line 3307)
        # Getting the type of 'rankdata' (line 3307)
        rankdata_585144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3307, 33), 'rankdata', False)
        # Getting the type of 'axisout' (line 3307)
        axisout_585145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3307, 43), 'axisout', False)
        # Getting the type of 'b' (line 3307)
        b_585146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3307, 52), 'b', False)
        # Processing the call keyword arguments (line 3307)
        kwargs_585147 = {}
        # Getting the type of 'np' (line 3307)
        np_585142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3307, 13), 'np', False)
        # Obtaining the member 'apply_along_axis' of a type (line 3307)
        apply_along_axis_585143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3307, 13), np_585142, 'apply_along_axis')
        # Calling apply_along_axis(args, kwargs) (line 3307)
        apply_along_axis_call_result_585148 = invoke(stypy.reporting.localization.Localization(__file__, 3307, 13), apply_along_axis_585143, *[rankdata_585144, axisout_585145, b_585146], **kwargs_585147)
        
        # Assigning a type to the variable 'br' (line 3307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3307, 8), 'br', apply_along_axis_call_result_585148)

        if more_types_in_union_585048:
            # SSA join for if statement (line 3292)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Name (line 3308):
    
    # Assigning a Subscript to a Name (line 3308):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axisout' (line 3308)
    axisout_585149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3308, 16), 'axisout')
    # Getting the type of 'a' (line 3308)
    a_585150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3308, 8), 'a')
    # Obtaining the member 'shape' of a type (line 3308)
    shape_585151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3308, 8), a_585150, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3308)
    getitem___585152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3308, 8), shape_585151, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3308)
    subscript_call_result_585153 = invoke(stypy.reporting.localization.Localization(__file__, 3308, 8), getitem___585152, axisout_585149)
    
    # Assigning a type to the variable 'n' (line 3308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3308, 4), 'n', subscript_call_result_585153)
    
    # Assigning a Call to a Name (line 3309):
    
    # Assigning a Call to a Name (line 3309):
    
    # Call to corrcoef(...): (line 3309)
    # Processing the call arguments (line 3309)
    # Getting the type of 'ar' (line 3309)
    ar_585156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3309, 21), 'ar', False)
    # Getting the type of 'br' (line 3309)
    br_585157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3309, 25), 'br', False)
    # Processing the call keyword arguments (line 3309)
    # Getting the type of 'axisout' (line 3309)
    axisout_585158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3309, 36), 'axisout', False)
    keyword_585159 = axisout_585158
    kwargs_585160 = {'rowvar': keyword_585159}
    # Getting the type of 'np' (line 3309)
    np_585154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3309, 9), 'np', False)
    # Obtaining the member 'corrcoef' of a type (line 3309)
    corrcoef_585155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3309, 9), np_585154, 'corrcoef')
    # Calling corrcoef(args, kwargs) (line 3309)
    corrcoef_call_result_585161 = invoke(stypy.reporting.localization.Localization(__file__, 3309, 9), corrcoef_585155, *[ar_585156, br_585157], **kwargs_585160)
    
    # Assigning a type to the variable 'rs' (line 3309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3309, 4), 'rs', corrcoef_call_result_585161)
    
    # Assigning a Call to a Name (line 3311):
    
    # Assigning a Call to a Name (line 3311):
    
    # Call to seterr(...): (line 3311)
    # Processing the call keyword arguments (line 3311)
    str_585164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3311, 30), 'str', 'ignore')
    keyword_585165 = str_585164
    kwargs_585166 = {'divide': keyword_585165}
    # Getting the type of 'np' (line 3311)
    np_585162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3311, 13), 'np', False)
    # Obtaining the member 'seterr' of a type (line 3311)
    seterr_585163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3311, 13), np_585162, 'seterr')
    # Calling seterr(args, kwargs) (line 3311)
    seterr_call_result_585167 = invoke(stypy.reporting.localization.Localization(__file__, 3311, 13), seterr_585163, *[], **kwargs_585166)
    
    # Assigning a type to the variable 'olderr' (line 3311)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3311, 4), 'olderr', seterr_call_result_585167)
    
    # Try-finally block (line 3312)
    
    # Assigning a BinOp to a Name (line 3315):
    
    # Assigning a BinOp to a Name (line 3315):
    # Getting the type of 'rs' (line 3315)
    rs_585168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3315, 12), 'rs')
    
    # Call to sqrt(...): (line 3315)
    # Processing the call arguments (line 3315)
    
    # Call to clip(...): (line 3315)
    # Processing the call arguments (line 3315)
    int_585183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3315, 58), 'int')
    # Processing the call keyword arguments (line 3315)
    kwargs_585184 = {}
    # Getting the type of 'n' (line 3315)
    n_585171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3315, 27), 'n', False)
    int_585172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3315, 29), 'int')
    # Applying the binary operator '-' (line 3315)
    result_sub_585173 = python_operator(stypy.reporting.localization.Localization(__file__, 3315, 27), '-', n_585171, int_585172)
    
    # Getting the type of 'rs' (line 3315)
    rs_585174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3315, 34), 'rs', False)
    float_585175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3315, 37), 'float')
    # Applying the binary operator '+' (line 3315)
    result_add_585176 = python_operator(stypy.reporting.localization.Localization(__file__, 3315, 34), '+', rs_585174, float_585175)
    
    float_585177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3315, 43), 'float')
    # Getting the type of 'rs' (line 3315)
    rs_585178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3315, 47), 'rs', False)
    # Applying the binary operator '-' (line 3315)
    result_sub_585179 = python_operator(stypy.reporting.localization.Localization(__file__, 3315, 43), '-', float_585177, rs_585178)
    
    # Applying the binary operator '*' (line 3315)
    result_mul_585180 = python_operator(stypy.reporting.localization.Localization(__file__, 3315, 33), '*', result_add_585176, result_sub_585179)
    
    # Applying the binary operator 'div' (line 3315)
    result_div_585181 = python_operator(stypy.reporting.localization.Localization(__file__, 3315, 26), 'div', result_sub_585173, result_mul_585180)
    
    # Obtaining the member 'clip' of a type (line 3315)
    clip_585182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3315, 26), result_div_585181, 'clip')
    # Calling clip(args, kwargs) (line 3315)
    clip_call_result_585185 = invoke(stypy.reporting.localization.Localization(__file__, 3315, 26), clip_585182, *[int_585183], **kwargs_585184)
    
    # Processing the call keyword arguments (line 3315)
    kwargs_585186 = {}
    # Getting the type of 'np' (line 3315)
    np_585169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3315, 17), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 3315)
    sqrt_585170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3315, 17), np_585169, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3315)
    sqrt_call_result_585187 = invoke(stypy.reporting.localization.Localization(__file__, 3315, 17), sqrt_585170, *[clip_call_result_585185], **kwargs_585186)
    
    # Applying the binary operator '*' (line 3315)
    result_mul_585188 = python_operator(stypy.reporting.localization.Localization(__file__, 3315, 12), '*', rs_585168, sqrt_call_result_585187)
    
    # Assigning a type to the variable 't' (line 3315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3315, 8), 't', result_mul_585188)
    
    # finally branch of the try-finally block (line 3312)
    
    # Call to seterr(...): (line 3317)
    # Processing the call keyword arguments (line 3317)
    # Getting the type of 'olderr' (line 3317)
    olderr_585191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3317, 20), 'olderr', False)
    kwargs_585192 = {'olderr_585191': olderr_585191}
    # Getting the type of 'np' (line 3317)
    np_585189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3317, 8), 'np', False)
    # Obtaining the member 'seterr' of a type (line 3317)
    seterr_585190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3317, 8), np_585189, 'seterr')
    # Calling seterr(args, kwargs) (line 3317)
    seterr_call_result_585193 = invoke(stypy.reporting.localization.Localization(__file__, 3317, 8), seterr_585190, *[], **kwargs_585192)
    
    
    
    # Assigning a BinOp to a Name (line 3319):
    
    # Assigning a BinOp to a Name (line 3319):
    int_585194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3319, 11), 'int')
    
    # Call to sf(...): (line 3319)
    # Processing the call arguments (line 3319)
    
    # Call to abs(...): (line 3319)
    # Processing the call arguments (line 3319)
    # Getting the type of 't' (line 3319)
    t_585200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3319, 41), 't', False)
    # Processing the call keyword arguments (line 3319)
    kwargs_585201 = {}
    # Getting the type of 'np' (line 3319)
    np_585198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3319, 34), 'np', False)
    # Obtaining the member 'abs' of a type (line 3319)
    abs_585199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3319, 34), np_585198, 'abs')
    # Calling abs(args, kwargs) (line 3319)
    abs_call_result_585202 = invoke(stypy.reporting.localization.Localization(__file__, 3319, 34), abs_585199, *[t_585200], **kwargs_585201)
    
    # Getting the type of 'n' (line 3319)
    n_585203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3319, 45), 'n', False)
    int_585204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3319, 47), 'int')
    # Applying the binary operator '-' (line 3319)
    result_sub_585205 = python_operator(stypy.reporting.localization.Localization(__file__, 3319, 45), '-', n_585203, int_585204)
    
    # Processing the call keyword arguments (line 3319)
    kwargs_585206 = {}
    # Getting the type of 'distributions' (line 3319)
    distributions_585195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3319, 15), 'distributions', False)
    # Obtaining the member 't' of a type (line 3319)
    t_585196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3319, 15), distributions_585195, 't')
    # Obtaining the member 'sf' of a type (line 3319)
    sf_585197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3319, 15), t_585196, 'sf')
    # Calling sf(args, kwargs) (line 3319)
    sf_call_result_585207 = invoke(stypy.reporting.localization.Localization(__file__, 3319, 15), sf_585197, *[abs_call_result_585202, result_sub_585205], **kwargs_585206)
    
    # Applying the binary operator '*' (line 3319)
    result_mul_585208 = python_operator(stypy.reporting.localization.Localization(__file__, 3319, 11), '*', int_585194, sf_call_result_585207)
    
    # Assigning a type to the variable 'prob' (line 3319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3319, 4), 'prob', result_mul_585208)
    
    
    # Getting the type of 'rs' (line 3321)
    rs_585209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3321, 7), 'rs')
    # Obtaining the member 'shape' of a type (line 3321)
    shape_585210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3321, 7), rs_585209, 'shape')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3321)
    tuple_585211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3321, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3321)
    # Adding element type (line 3321)
    int_585212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3321, 20), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3321, 20), tuple_585211, int_585212)
    # Adding element type (line 3321)
    int_585213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3321, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3321, 20), tuple_585211, int_585213)
    
    # Applying the binary operator '==' (line 3321)
    result_eq_585214 = python_operator(stypy.reporting.localization.Localization(__file__, 3321, 7), '==', shape_585210, tuple_585211)
    
    # Testing the type of an if condition (line 3321)
    if_condition_585215 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3321, 4), result_eq_585214)
    # Assigning a type to the variable 'if_condition_585215' (line 3321)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3321, 4), 'if_condition_585215', if_condition_585215)
    # SSA begins for if statement (line 3321)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to SpearmanrResult(...): (line 3322)
    # Processing the call arguments (line 3322)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3322)
    tuple_585217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3322, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3322)
    # Adding element type (line 3322)
    int_585218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3322, 34), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3322, 34), tuple_585217, int_585218)
    # Adding element type (line 3322)
    int_585219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3322, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3322, 34), tuple_585217, int_585219)
    
    # Getting the type of 'rs' (line 3322)
    rs_585220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3322, 31), 'rs', False)
    # Obtaining the member '__getitem__' of a type (line 3322)
    getitem___585221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3322, 31), rs_585220, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3322)
    subscript_call_result_585222 = invoke(stypy.reporting.localization.Localization(__file__, 3322, 31), getitem___585221, tuple_585217)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3322)
    tuple_585223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3322, 46), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3322)
    # Adding element type (line 3322)
    int_585224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3322, 46), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3322, 46), tuple_585223, int_585224)
    # Adding element type (line 3322)
    int_585225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3322, 49), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3322, 46), tuple_585223, int_585225)
    
    # Getting the type of 'prob' (line 3322)
    prob_585226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3322, 41), 'prob', False)
    # Obtaining the member '__getitem__' of a type (line 3322)
    getitem___585227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3322, 41), prob_585226, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3322)
    subscript_call_result_585228 = invoke(stypy.reporting.localization.Localization(__file__, 3322, 41), getitem___585227, tuple_585223)
    
    # Processing the call keyword arguments (line 3322)
    kwargs_585229 = {}
    # Getting the type of 'SpearmanrResult' (line 3322)
    SpearmanrResult_585216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3322, 15), 'SpearmanrResult', False)
    # Calling SpearmanrResult(args, kwargs) (line 3322)
    SpearmanrResult_call_result_585230 = invoke(stypy.reporting.localization.Localization(__file__, 3322, 15), SpearmanrResult_585216, *[subscript_call_result_585222, subscript_call_result_585228], **kwargs_585229)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3322, 8), 'stypy_return_type', SpearmanrResult_call_result_585230)
    # SSA branch for the else part of an if statement (line 3321)
    module_type_store.open_ssa_branch('else')
    
    # Call to SpearmanrResult(...): (line 3324)
    # Processing the call arguments (line 3324)
    # Getting the type of 'rs' (line 3324)
    rs_585232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 31), 'rs', False)
    # Getting the type of 'prob' (line 3324)
    prob_585233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 35), 'prob', False)
    # Processing the call keyword arguments (line 3324)
    kwargs_585234 = {}
    # Getting the type of 'SpearmanrResult' (line 3324)
    SpearmanrResult_585231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 15), 'SpearmanrResult', False)
    # Calling SpearmanrResult(args, kwargs) (line 3324)
    SpearmanrResult_call_result_585235 = invoke(stypy.reporting.localization.Localization(__file__, 3324, 15), SpearmanrResult_585231, *[rs_585232, prob_585233], **kwargs_585234)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3324, 8), 'stypy_return_type', SpearmanrResult_call_result_585235)
    # SSA join for if statement (line 3321)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'spearmanr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'spearmanr' in the type store
    # Getting the type of 'stypy_return_type' (line 3180)
    stypy_return_type_585236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_585236)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'spearmanr'
    return stypy_return_type_585236

# Assigning a type to the variable 'spearmanr' (line 3180)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3180, 0), 'spearmanr', spearmanr)

# Assigning a Call to a Name (line 3326):

# Assigning a Call to a Name (line 3326):

# Call to namedtuple(...): (line 3326)
# Processing the call arguments (line 3326)
str_585238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3326, 34), 'str', 'PointbiserialrResult')

# Obtaining an instance of the builtin type 'tuple' (line 3327)
tuple_585239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3327, 35), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 3327)
# Adding element type (line 3327)
str_585240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3327, 35), 'str', 'correlation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3327, 35), tuple_585239, str_585240)
# Adding element type (line 3327)
str_585241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3327, 50), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3327, 35), tuple_585239, str_585241)

# Processing the call keyword arguments (line 3326)
kwargs_585242 = {}
# Getting the type of 'namedtuple' (line 3326)
namedtuple_585237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 23), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 3326)
namedtuple_call_result_585243 = invoke(stypy.reporting.localization.Localization(__file__, 3326, 23), namedtuple_585237, *[str_585238, tuple_585239], **kwargs_585242)

# Assigning a type to the variable 'PointbiserialrResult' (line 3326)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3326, 0), 'PointbiserialrResult', namedtuple_call_result_585243)

@norecursion
def pointbiserialr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pointbiserialr'
    module_type_store = module_type_store.open_function_context('pointbiserialr', 3330, 0, False)
    
    # Passed parameters checking function
    pointbiserialr.stypy_localization = localization
    pointbiserialr.stypy_type_of_self = None
    pointbiserialr.stypy_type_store = module_type_store
    pointbiserialr.stypy_function_name = 'pointbiserialr'
    pointbiserialr.stypy_param_names_list = ['x', 'y']
    pointbiserialr.stypy_varargs_param_name = None
    pointbiserialr.stypy_kwargs_param_name = None
    pointbiserialr.stypy_call_defaults = defaults
    pointbiserialr.stypy_call_varargs = varargs
    pointbiserialr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pointbiserialr', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pointbiserialr', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pointbiserialr(...)' code ##################

    str_585244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3410, (-1)), 'str', '\n    Calculate a point biserial correlation coefficient and its p-value.\n\n    The point biserial correlation is used to measure the relationship\n    between a binary variable, x, and a continuous variable, y. Like other\n    correlation coefficients, this one varies between -1 and +1 with 0\n    implying no correlation. Correlations of -1 or +1 imply a determinative\n    relationship.\n\n    This function uses a shortcut formula but produces the same result as\n    `pearsonr`.\n\n    Parameters\n    ----------\n    x : array_like of bools\n        Input array.\n    y : array_like\n        Input array.\n\n    Returns\n    -------\n    correlation : float\n        R value\n    pvalue : float\n        2-tailed p-value\n\n    Notes\n    -----\n    `pointbiserialr` uses a t-test with ``n-1`` degrees of freedom.\n    It is equivalent to `pearsonr.`\n\n    The value of the point-biserial correlation can be calculated from:\n\n    .. math::\n\n        r_{pb} = \\frac{\\overline{Y_{1}} -\n                 \\overline{Y_{0}}}{s_{y}}\\sqrt{\\frac{N_{1} N_{2}}{N (N - 1))}}\n\n    Where :math:`Y_{0}` and :math:`Y_{1}` are means of the metric\n    observations coded 0 and 1 respectively; :math:`N_{0}` and :math:`N_{1}`\n    are number of observations coded 0 and 1 respectively; :math:`N` is the\n    total number of observations and :math:`s_{y}` is the standard\n    deviation of all the metric observations.\n\n    A value of :math:`r_{pb}` that is significantly different from zero is\n    completely equivalent to a significant difference in means between the two\n    groups. Thus, an independent groups t Test with :math:`N-2` degrees of\n    freedom may be used to test whether :math:`r_{pb}` is nonzero. The\n    relation between the t-statistic for comparing two independent groups and\n    :math:`r_{pb}` is given by:\n\n    .. math::\n\n        t = \\sqrt{N - 2}\\frac{r_{pb}}{\\sqrt{1 - r^{2}_{pb}}}\n\n    References\n    ----------\n    .. [1] J. Lev, "The Point Biserial Coefficient of Correlation", Ann. Math.\n           Statist., Vol. 20, no.1, pp. 125-126, 1949.\n\n    .. [2] R.F. Tate, "Correlation Between a Discrete and a Continuous\n           Variable. Point-Biserial Correlation.", Ann. Math. Statist., Vol. 25,\n           np. 3, pp. 603-607, 1954.\n\n    .. [3] http://onlinelibrary.wiley.com/doi/10.1002/9781118445112.stat06227/full\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> a = np.array([0, 0, 0, 1, 1, 1, 1])\n    >>> b = np.arange(7)\n    >>> stats.pointbiserialr(a, b)\n    (0.8660254037844386, 0.011724811003954652)\n    >>> stats.pearsonr(a, b)\n    (0.86602540378443871, 0.011724811003954626)\n    >>> np.corrcoef(a, b)\n    array([[ 1.       ,  0.8660254],\n           [ 0.8660254,  1.       ]])\n\n    ')
    
    # Assigning a Call to a Tuple (line 3411):
    
    # Assigning a Subscript to a Name (line 3411):
    
    # Obtaining the type of the subscript
    int_585245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3411, 4), 'int')
    
    # Call to pearsonr(...): (line 3411)
    # Processing the call arguments (line 3411)
    # Getting the type of 'x' (line 3411)
    x_585247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 25), 'x', False)
    # Getting the type of 'y' (line 3411)
    y_585248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 28), 'y', False)
    # Processing the call keyword arguments (line 3411)
    kwargs_585249 = {}
    # Getting the type of 'pearsonr' (line 3411)
    pearsonr_585246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 16), 'pearsonr', False)
    # Calling pearsonr(args, kwargs) (line 3411)
    pearsonr_call_result_585250 = invoke(stypy.reporting.localization.Localization(__file__, 3411, 16), pearsonr_585246, *[x_585247, y_585248], **kwargs_585249)
    
    # Obtaining the member '__getitem__' of a type (line 3411)
    getitem___585251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3411, 4), pearsonr_call_result_585250, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3411)
    subscript_call_result_585252 = invoke(stypy.reporting.localization.Localization(__file__, 3411, 4), getitem___585251, int_585245)
    
    # Assigning a type to the variable 'tuple_var_assignment_579929' (line 3411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3411, 4), 'tuple_var_assignment_579929', subscript_call_result_585252)
    
    # Assigning a Subscript to a Name (line 3411):
    
    # Obtaining the type of the subscript
    int_585253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3411, 4), 'int')
    
    # Call to pearsonr(...): (line 3411)
    # Processing the call arguments (line 3411)
    # Getting the type of 'x' (line 3411)
    x_585255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 25), 'x', False)
    # Getting the type of 'y' (line 3411)
    y_585256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 28), 'y', False)
    # Processing the call keyword arguments (line 3411)
    kwargs_585257 = {}
    # Getting the type of 'pearsonr' (line 3411)
    pearsonr_585254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 16), 'pearsonr', False)
    # Calling pearsonr(args, kwargs) (line 3411)
    pearsonr_call_result_585258 = invoke(stypy.reporting.localization.Localization(__file__, 3411, 16), pearsonr_585254, *[x_585255, y_585256], **kwargs_585257)
    
    # Obtaining the member '__getitem__' of a type (line 3411)
    getitem___585259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3411, 4), pearsonr_call_result_585258, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3411)
    subscript_call_result_585260 = invoke(stypy.reporting.localization.Localization(__file__, 3411, 4), getitem___585259, int_585253)
    
    # Assigning a type to the variable 'tuple_var_assignment_579930' (line 3411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3411, 4), 'tuple_var_assignment_579930', subscript_call_result_585260)
    
    # Assigning a Name to a Name (line 3411):
    # Getting the type of 'tuple_var_assignment_579929' (line 3411)
    tuple_var_assignment_579929_585261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 4), 'tuple_var_assignment_579929')
    # Assigning a type to the variable 'rpb' (line 3411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3411, 4), 'rpb', tuple_var_assignment_579929_585261)
    
    # Assigning a Name to a Name (line 3411):
    # Getting the type of 'tuple_var_assignment_579930' (line 3411)
    tuple_var_assignment_579930_585262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 4), 'tuple_var_assignment_579930')
    # Assigning a type to the variable 'prob' (line 3411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3411, 9), 'prob', tuple_var_assignment_579930_585262)
    
    # Call to PointbiserialrResult(...): (line 3412)
    # Processing the call arguments (line 3412)
    # Getting the type of 'rpb' (line 3412)
    rpb_585264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 32), 'rpb', False)
    # Getting the type of 'prob' (line 3412)
    prob_585265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 37), 'prob', False)
    # Processing the call keyword arguments (line 3412)
    kwargs_585266 = {}
    # Getting the type of 'PointbiserialrResult' (line 3412)
    PointbiserialrResult_585263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 11), 'PointbiserialrResult', False)
    # Calling PointbiserialrResult(args, kwargs) (line 3412)
    PointbiserialrResult_call_result_585267 = invoke(stypy.reporting.localization.Localization(__file__, 3412, 11), PointbiserialrResult_585263, *[rpb_585264, prob_585265], **kwargs_585266)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3412, 4), 'stypy_return_type', PointbiserialrResult_call_result_585267)
    
    # ################# End of 'pointbiserialr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pointbiserialr' in the type store
    # Getting the type of 'stypy_return_type' (line 3330)
    stypy_return_type_585268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3330, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_585268)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pointbiserialr'
    return stypy_return_type_585268

# Assigning a type to the variable 'pointbiserialr' (line 3330)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3330, 0), 'pointbiserialr', pointbiserialr)

# Assigning a Call to a Name (line 3415):

# Assigning a Call to a Name (line 3415):

# Call to namedtuple(...): (line 3415)
# Processing the call arguments (line 3415)
str_585270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3415, 30), 'str', 'KendalltauResult')

# Obtaining an instance of the builtin type 'tuple' (line 3415)
tuple_585271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3415, 51), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 3415)
# Adding element type (line 3415)
str_585272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3415, 51), 'str', 'correlation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3415, 51), tuple_585271, str_585272)
# Adding element type (line 3415)
str_585273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3415, 66), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3415, 51), tuple_585271, str_585273)

# Processing the call keyword arguments (line 3415)
kwargs_585274 = {}
# Getting the type of 'namedtuple' (line 3415)
namedtuple_585269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3415, 19), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 3415)
namedtuple_call_result_585275 = invoke(stypy.reporting.localization.Localization(__file__, 3415, 19), namedtuple_585269, *[str_585270, tuple_585271], **kwargs_585274)

# Assigning a type to the variable 'KendalltauResult' (line 3415)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3415, 0), 'KendalltauResult', namedtuple_call_result_585275)

@norecursion
def kendalltau(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3418)
    None_585276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 37), 'None')
    str_585277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3418, 54), 'str', 'propagate')
    defaults = [None_585276, str_585277]
    # Create a new context for function 'kendalltau'
    module_type_store = module_type_store.open_function_context('kendalltau', 3418, 0, False)
    
    # Passed parameters checking function
    kendalltau.stypy_localization = localization
    kendalltau.stypy_type_of_self = None
    kendalltau.stypy_type_store = module_type_store
    kendalltau.stypy_function_name = 'kendalltau'
    kendalltau.stypy_param_names_list = ['x', 'y', 'initial_lexsort', 'nan_policy']
    kendalltau.stypy_varargs_param_name = None
    kendalltau.stypy_kwargs_param_name = None
    kendalltau.stypy_call_defaults = defaults
    kendalltau.stypy_call_varargs = varargs
    kendalltau.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kendalltau', ['x', 'y', 'initial_lexsort', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kendalltau', localization, ['x', 'y', 'initial_lexsort', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kendalltau(...)' code ##################

    str_585278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3490, (-1)), 'str', '\n    Calculate Kendall\'s tau, a correlation measure for ordinal data.\n\n    Kendall\'s tau is a measure of the correspondence between two rankings.\n    Values close to 1 indicate strong agreement, values close to -1 indicate\n    strong disagreement.  This is the 1945 "tau-b" version of Kendall\'s\n    tau [2]_, which can account for ties and which reduces to the 1938 "tau-a"\n    version [1]_ in absence of ties.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of rankings, of the same shape. If arrays are not 1-D, they will\n        be flattened to 1-D.\n    initial_lexsort : bool, optional\n        Unused (deprecated).\n    nan_policy : {\'propagate\', \'raise\', \'omit\'}, optional\n        Defines how to handle when input contains nan. \'propagate\' returns nan,\n        \'raise\' throws an error, \'omit\' performs the calculations ignoring nan\n        values. Default is \'propagate\'. Note that if the input contains nan\n        \'omit\' delegates to mstats_basic.kendalltau(), which has a different\n        implementation.\n\n    Returns\n    -------\n    correlation : float\n       The tau statistic.\n    pvalue : float\n       The two-sided p-value for a hypothesis test whose null hypothesis is\n       an absence of association, tau = 0.\n\n    See also\n    --------\n    spearmanr : Calculates a Spearman rank-order correlation coefficient.\n    theilslopes : Computes the Theil-Sen estimator for a set of points (x, y).\n    weightedtau : Computes a weighted version of Kendall\'s tau.\n\n    Notes\n    -----\n    The definition of Kendall\'s tau that is used is [2]_::\n\n      tau = (P - Q) / sqrt((P + Q + T) * (P + Q + U))\n\n    where P is the number of concordant pairs, Q the number of discordant\n    pairs, T the number of ties only in `x`, and U the number of ties only in\n    `y`.  If a tie occurs for the same pair in both `x` and `y`, it is not\n    added to either T or U.\n\n    References\n    ----------\n    .. [1] Maurice G. Kendall, "A New Measure of Rank Correlation", Biometrika\n           Vol. 30, No. 1/2, pp. 81-93, 1938.\n    .. [2] Maurice G. Kendall, "The treatment of ties in ranking problems",\n           Biometrika Vol. 33, No. 3, pp. 239-251. 1945.\n    .. [3] Gottfried E. Noether, "Elements of Nonparametric Statistics", John\n           Wiley & Sons, 1967.\n    .. [4] Peter M. Fenwick, "A new data structure for cumulative frequency\n           tables", Software: Practice and Experience, Vol. 24, No. 3,\n           pp. 327-336, 1994.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> x1 = [12, 2, 1, 12, 2]\n    >>> x2 = [1, 4, 7, 1, 0]\n    >>> tau, p_value = stats.kendalltau(x1, x2)\n    >>> tau\n    -0.47140452079103173\n    >>> p_value\n    0.2827454599327748\n\n    ')
    
    # Assigning a Call to a Name (line 3491):
    
    # Assigning a Call to a Name (line 3491):
    
    # Call to ravel(...): (line 3491)
    # Processing the call keyword arguments (line 3491)
    kwargs_585285 = {}
    
    # Call to asarray(...): (line 3491)
    # Processing the call arguments (line 3491)
    # Getting the type of 'x' (line 3491)
    x_585281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3491, 19), 'x', False)
    # Processing the call keyword arguments (line 3491)
    kwargs_585282 = {}
    # Getting the type of 'np' (line 3491)
    np_585279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3491, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3491)
    asarray_585280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3491, 8), np_585279, 'asarray')
    # Calling asarray(args, kwargs) (line 3491)
    asarray_call_result_585283 = invoke(stypy.reporting.localization.Localization(__file__, 3491, 8), asarray_585280, *[x_585281], **kwargs_585282)
    
    # Obtaining the member 'ravel' of a type (line 3491)
    ravel_585284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3491, 8), asarray_call_result_585283, 'ravel')
    # Calling ravel(args, kwargs) (line 3491)
    ravel_call_result_585286 = invoke(stypy.reporting.localization.Localization(__file__, 3491, 8), ravel_585284, *[], **kwargs_585285)
    
    # Assigning a type to the variable 'x' (line 3491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3491, 4), 'x', ravel_call_result_585286)
    
    # Assigning a Call to a Name (line 3492):
    
    # Assigning a Call to a Name (line 3492):
    
    # Call to ravel(...): (line 3492)
    # Processing the call keyword arguments (line 3492)
    kwargs_585293 = {}
    
    # Call to asarray(...): (line 3492)
    # Processing the call arguments (line 3492)
    # Getting the type of 'y' (line 3492)
    y_585289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 19), 'y', False)
    # Processing the call keyword arguments (line 3492)
    kwargs_585290 = {}
    # Getting the type of 'np' (line 3492)
    np_585287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3492)
    asarray_585288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3492, 8), np_585287, 'asarray')
    # Calling asarray(args, kwargs) (line 3492)
    asarray_call_result_585291 = invoke(stypy.reporting.localization.Localization(__file__, 3492, 8), asarray_585288, *[y_585289], **kwargs_585290)
    
    # Obtaining the member 'ravel' of a type (line 3492)
    ravel_585292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3492, 8), asarray_call_result_585291, 'ravel')
    # Calling ravel(args, kwargs) (line 3492)
    ravel_call_result_585294 = invoke(stypy.reporting.localization.Localization(__file__, 3492, 8), ravel_585292, *[], **kwargs_585293)
    
    # Assigning a type to the variable 'y' (line 3492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3492, 4), 'y', ravel_call_result_585294)
    
    
    # Getting the type of 'x' (line 3494)
    x_585295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3494, 7), 'x')
    # Obtaining the member 'size' of a type (line 3494)
    size_585296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3494, 7), x_585295, 'size')
    # Getting the type of 'y' (line 3494)
    y_585297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3494, 17), 'y')
    # Obtaining the member 'size' of a type (line 3494)
    size_585298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3494, 17), y_585297, 'size')
    # Applying the binary operator '!=' (line 3494)
    result_ne_585299 = python_operator(stypy.reporting.localization.Localization(__file__, 3494, 7), '!=', size_585296, size_585298)
    
    # Testing the type of an if condition (line 3494)
    if_condition_585300 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3494, 4), result_ne_585299)
    # Assigning a type to the variable 'if_condition_585300' (line 3494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3494, 4), 'if_condition_585300', if_condition_585300)
    # SSA begins for if statement (line 3494)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3495)
    # Processing the call arguments (line 3495)
    str_585302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3495, 25), 'str', 'All inputs to `kendalltau` must be of the same size, found x-size %s and y-size %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3496)
    tuple_585303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3496, 60), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3496)
    # Adding element type (line 3496)
    # Getting the type of 'x' (line 3496)
    x_585304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3496, 60), 'x', False)
    # Obtaining the member 'size' of a type (line 3496)
    size_585305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3496, 60), x_585304, 'size')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3496, 60), tuple_585303, size_585305)
    # Adding element type (line 3496)
    # Getting the type of 'y' (line 3496)
    y_585306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3496, 68), 'y', False)
    # Obtaining the member 'size' of a type (line 3496)
    size_585307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3496, 68), y_585306, 'size')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3496, 60), tuple_585303, size_585307)
    
    # Applying the binary operator '%' (line 3495)
    result_mod_585308 = python_operator(stypy.reporting.localization.Localization(__file__, 3495, 25), '%', str_585302, tuple_585303)
    
    # Processing the call keyword arguments (line 3495)
    kwargs_585309 = {}
    # Getting the type of 'ValueError' (line 3495)
    ValueError_585301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3495, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3495)
    ValueError_call_result_585310 = invoke(stypy.reporting.localization.Localization(__file__, 3495, 14), ValueError_585301, *[result_mod_585308], **kwargs_585309)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3495, 8), ValueError_call_result_585310, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 3494)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'x' (line 3497)
    x_585311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3497, 13), 'x')
    # Obtaining the member 'size' of a type (line 3497)
    size_585312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3497, 13), x_585311, 'size')
    # Applying the 'not' unary operator (line 3497)
    result_not__585313 = python_operator(stypy.reporting.localization.Localization(__file__, 3497, 9), 'not', size_585312)
    
    
    # Getting the type of 'y' (line 3497)
    y_585314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3497, 27), 'y')
    # Obtaining the member 'size' of a type (line 3497)
    size_585315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3497, 27), y_585314, 'size')
    # Applying the 'not' unary operator (line 3497)
    result_not__585316 = python_operator(stypy.reporting.localization.Localization(__file__, 3497, 23), 'not', size_585315)
    
    # Applying the binary operator 'or' (line 3497)
    result_or_keyword_585317 = python_operator(stypy.reporting.localization.Localization(__file__, 3497, 9), 'or', result_not__585313, result_not__585316)
    
    # Testing the type of an if condition (line 3497)
    if_condition_585318 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3497, 9), result_or_keyword_585317)
    # Assigning a type to the variable 'if_condition_585318' (line 3497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3497, 9), 'if_condition_585318', if_condition_585318)
    # SSA begins for if statement (line 3497)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to KendalltauResult(...): (line 3498)
    # Processing the call arguments (line 3498)
    # Getting the type of 'np' (line 3498)
    np_585320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3498, 32), 'np', False)
    # Obtaining the member 'nan' of a type (line 3498)
    nan_585321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3498, 32), np_585320, 'nan')
    # Getting the type of 'np' (line 3498)
    np_585322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3498, 40), 'np', False)
    # Obtaining the member 'nan' of a type (line 3498)
    nan_585323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3498, 40), np_585322, 'nan')
    # Processing the call keyword arguments (line 3498)
    kwargs_585324 = {}
    # Getting the type of 'KendalltauResult' (line 3498)
    KendalltauResult_585319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3498, 15), 'KendalltauResult', False)
    # Calling KendalltauResult(args, kwargs) (line 3498)
    KendalltauResult_call_result_585325 = invoke(stypy.reporting.localization.Localization(__file__, 3498, 15), KendalltauResult_585319, *[nan_585321, nan_585323], **kwargs_585324)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3498, 8), 'stypy_return_type', KendalltauResult_call_result_585325)
    # SSA join for if statement (line 3497)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3494)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 3501):
    
    # Assigning a Subscript to a Name (line 3501):
    
    # Obtaining the type of the subscript
    int_585326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3501, 4), 'int')
    
    # Call to _contains_nan(...): (line 3501)
    # Processing the call arguments (line 3501)
    # Getting the type of 'x' (line 3501)
    x_585328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 29), 'x', False)
    # Getting the type of 'nan_policy' (line 3501)
    nan_policy_585329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 3501)
    kwargs_585330 = {}
    # Getting the type of '_contains_nan' (line 3501)
    _contains_nan_585327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 3501)
    _contains_nan_call_result_585331 = invoke(stypy.reporting.localization.Localization(__file__, 3501, 15), _contains_nan_585327, *[x_585328, nan_policy_585329], **kwargs_585330)
    
    # Obtaining the member '__getitem__' of a type (line 3501)
    getitem___585332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3501, 4), _contains_nan_call_result_585331, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3501)
    subscript_call_result_585333 = invoke(stypy.reporting.localization.Localization(__file__, 3501, 4), getitem___585332, int_585326)
    
    # Assigning a type to the variable 'tuple_var_assignment_579931' (line 3501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3501, 4), 'tuple_var_assignment_579931', subscript_call_result_585333)
    
    # Assigning a Subscript to a Name (line 3501):
    
    # Obtaining the type of the subscript
    int_585334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3501, 4), 'int')
    
    # Call to _contains_nan(...): (line 3501)
    # Processing the call arguments (line 3501)
    # Getting the type of 'x' (line 3501)
    x_585336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 29), 'x', False)
    # Getting the type of 'nan_policy' (line 3501)
    nan_policy_585337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 3501)
    kwargs_585338 = {}
    # Getting the type of '_contains_nan' (line 3501)
    _contains_nan_585335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 3501)
    _contains_nan_call_result_585339 = invoke(stypy.reporting.localization.Localization(__file__, 3501, 15), _contains_nan_585335, *[x_585336, nan_policy_585337], **kwargs_585338)
    
    # Obtaining the member '__getitem__' of a type (line 3501)
    getitem___585340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3501, 4), _contains_nan_call_result_585339, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3501)
    subscript_call_result_585341 = invoke(stypy.reporting.localization.Localization(__file__, 3501, 4), getitem___585340, int_585334)
    
    # Assigning a type to the variable 'tuple_var_assignment_579932' (line 3501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3501, 4), 'tuple_var_assignment_579932', subscript_call_result_585341)
    
    # Assigning a Name to a Name (line 3501):
    # Getting the type of 'tuple_var_assignment_579931' (line 3501)
    tuple_var_assignment_579931_585342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 4), 'tuple_var_assignment_579931')
    # Assigning a type to the variable 'cnx' (line 3501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3501, 4), 'cnx', tuple_var_assignment_579931_585342)
    
    # Assigning a Name to a Name (line 3501):
    # Getting the type of 'tuple_var_assignment_579932' (line 3501)
    tuple_var_assignment_579932_585343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 4), 'tuple_var_assignment_579932')
    # Assigning a type to the variable 'npx' (line 3501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3501, 9), 'npx', tuple_var_assignment_579932_585343)
    
    # Assigning a Call to a Tuple (line 3502):
    
    # Assigning a Subscript to a Name (line 3502):
    
    # Obtaining the type of the subscript
    int_585344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3502, 4), 'int')
    
    # Call to _contains_nan(...): (line 3502)
    # Processing the call arguments (line 3502)
    # Getting the type of 'y' (line 3502)
    y_585346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 29), 'y', False)
    # Getting the type of 'nan_policy' (line 3502)
    nan_policy_585347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 3502)
    kwargs_585348 = {}
    # Getting the type of '_contains_nan' (line 3502)
    _contains_nan_585345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 3502)
    _contains_nan_call_result_585349 = invoke(stypy.reporting.localization.Localization(__file__, 3502, 15), _contains_nan_585345, *[y_585346, nan_policy_585347], **kwargs_585348)
    
    # Obtaining the member '__getitem__' of a type (line 3502)
    getitem___585350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3502, 4), _contains_nan_call_result_585349, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3502)
    subscript_call_result_585351 = invoke(stypy.reporting.localization.Localization(__file__, 3502, 4), getitem___585350, int_585344)
    
    # Assigning a type to the variable 'tuple_var_assignment_579933' (line 3502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3502, 4), 'tuple_var_assignment_579933', subscript_call_result_585351)
    
    # Assigning a Subscript to a Name (line 3502):
    
    # Obtaining the type of the subscript
    int_585352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3502, 4), 'int')
    
    # Call to _contains_nan(...): (line 3502)
    # Processing the call arguments (line 3502)
    # Getting the type of 'y' (line 3502)
    y_585354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 29), 'y', False)
    # Getting the type of 'nan_policy' (line 3502)
    nan_policy_585355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 3502)
    kwargs_585356 = {}
    # Getting the type of '_contains_nan' (line 3502)
    _contains_nan_585353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 3502)
    _contains_nan_call_result_585357 = invoke(stypy.reporting.localization.Localization(__file__, 3502, 15), _contains_nan_585353, *[y_585354, nan_policy_585355], **kwargs_585356)
    
    # Obtaining the member '__getitem__' of a type (line 3502)
    getitem___585358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3502, 4), _contains_nan_call_result_585357, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3502)
    subscript_call_result_585359 = invoke(stypy.reporting.localization.Localization(__file__, 3502, 4), getitem___585358, int_585352)
    
    # Assigning a type to the variable 'tuple_var_assignment_579934' (line 3502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3502, 4), 'tuple_var_assignment_579934', subscript_call_result_585359)
    
    # Assigning a Name to a Name (line 3502):
    # Getting the type of 'tuple_var_assignment_579933' (line 3502)
    tuple_var_assignment_579933_585360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 4), 'tuple_var_assignment_579933')
    # Assigning a type to the variable 'cny' (line 3502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3502, 4), 'cny', tuple_var_assignment_579933_585360)
    
    # Assigning a Name to a Name (line 3502):
    # Getting the type of 'tuple_var_assignment_579934' (line 3502)
    tuple_var_assignment_579934_585361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 4), 'tuple_var_assignment_579934')
    # Assigning a type to the variable 'npy' (line 3502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3502, 9), 'npy', tuple_var_assignment_579934_585361)
    
    # Assigning a BoolOp to a Name (line 3503):
    
    # Assigning a BoolOp to a Name (line 3503):
    
    # Evaluating a boolean operation
    # Getting the type of 'cnx' (line 3503)
    cnx_585362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3503, 19), 'cnx')
    # Getting the type of 'cny' (line 3503)
    cny_585363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3503, 26), 'cny')
    # Applying the binary operator 'or' (line 3503)
    result_or_keyword_585364 = python_operator(stypy.reporting.localization.Localization(__file__, 3503, 19), 'or', cnx_585362, cny_585363)
    
    # Assigning a type to the variable 'contains_nan' (line 3503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3503, 4), 'contains_nan', result_or_keyword_585364)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'npx' (line 3504)
    npx_585365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3504, 7), 'npx')
    str_585366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3504, 14), 'str', 'omit')
    # Applying the binary operator '==' (line 3504)
    result_eq_585367 = python_operator(stypy.reporting.localization.Localization(__file__, 3504, 7), '==', npx_585365, str_585366)
    
    
    # Getting the type of 'npy' (line 3504)
    npy_585368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3504, 24), 'npy')
    str_585369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3504, 31), 'str', 'omit')
    # Applying the binary operator '==' (line 3504)
    result_eq_585370 = python_operator(stypy.reporting.localization.Localization(__file__, 3504, 24), '==', npy_585368, str_585369)
    
    # Applying the binary operator 'or' (line 3504)
    result_or_keyword_585371 = python_operator(stypy.reporting.localization.Localization(__file__, 3504, 7), 'or', result_eq_585367, result_eq_585370)
    
    # Testing the type of an if condition (line 3504)
    if_condition_585372 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3504, 4), result_or_keyword_585371)
    # Assigning a type to the variable 'if_condition_585372' (line 3504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3504, 4), 'if_condition_585372', if_condition_585372)
    # SSA begins for if statement (line 3504)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 3505):
    
    # Assigning a Str to a Name (line 3505):
    str_585373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3505, 21), 'str', 'omit')
    # Assigning a type to the variable 'nan_policy' (line 3505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3505, 8), 'nan_policy', str_585373)
    # SSA join for if statement (line 3504)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 3507)
    contains_nan_585374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3507, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 3507)
    nan_policy_585375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3507, 24), 'nan_policy')
    str_585376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3507, 38), 'str', 'propagate')
    # Applying the binary operator '==' (line 3507)
    result_eq_585377 = python_operator(stypy.reporting.localization.Localization(__file__, 3507, 24), '==', nan_policy_585375, str_585376)
    
    # Applying the binary operator 'and' (line 3507)
    result_and_keyword_585378 = python_operator(stypy.reporting.localization.Localization(__file__, 3507, 7), 'and', contains_nan_585374, result_eq_585377)
    
    # Testing the type of an if condition (line 3507)
    if_condition_585379 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3507, 4), result_and_keyword_585378)
    # Assigning a type to the variable 'if_condition_585379' (line 3507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3507, 4), 'if_condition_585379', if_condition_585379)
    # SSA begins for if statement (line 3507)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to KendalltauResult(...): (line 3508)
    # Processing the call arguments (line 3508)
    # Getting the type of 'np' (line 3508)
    np_585381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3508, 32), 'np', False)
    # Obtaining the member 'nan' of a type (line 3508)
    nan_585382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3508, 32), np_585381, 'nan')
    # Getting the type of 'np' (line 3508)
    np_585383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3508, 40), 'np', False)
    # Obtaining the member 'nan' of a type (line 3508)
    nan_585384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3508, 40), np_585383, 'nan')
    # Processing the call keyword arguments (line 3508)
    kwargs_585385 = {}
    # Getting the type of 'KendalltauResult' (line 3508)
    KendalltauResult_585380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3508, 15), 'KendalltauResult', False)
    # Calling KendalltauResult(args, kwargs) (line 3508)
    KendalltauResult_call_result_585386 = invoke(stypy.reporting.localization.Localization(__file__, 3508, 15), KendalltauResult_585380, *[nan_585382, nan_585384], **kwargs_585385)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3508, 8), 'stypy_return_type', KendalltauResult_call_result_585386)
    # SSA branch for the else part of an if statement (line 3507)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 3510)
    contains_nan_585387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3510, 9), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 3510)
    nan_policy_585388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3510, 26), 'nan_policy')
    str_585389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3510, 40), 'str', 'omit')
    # Applying the binary operator '==' (line 3510)
    result_eq_585390 = python_operator(stypy.reporting.localization.Localization(__file__, 3510, 26), '==', nan_policy_585388, str_585389)
    
    # Applying the binary operator 'and' (line 3510)
    result_and_keyword_585391 = python_operator(stypy.reporting.localization.Localization(__file__, 3510, 9), 'and', contains_nan_585387, result_eq_585390)
    
    # Testing the type of an if condition (line 3510)
    if_condition_585392 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3510, 9), result_and_keyword_585391)
    # Assigning a type to the variable 'if_condition_585392' (line 3510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3510, 9), 'if_condition_585392', if_condition_585392)
    # SSA begins for if statement (line 3510)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3511):
    
    # Assigning a Call to a Name (line 3511):
    
    # Call to masked_invalid(...): (line 3511)
    # Processing the call arguments (line 3511)
    # Getting the type of 'x' (line 3511)
    x_585395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3511, 30), 'x', False)
    # Processing the call keyword arguments (line 3511)
    kwargs_585396 = {}
    # Getting the type of 'ma' (line 3511)
    ma_585393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3511, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 3511)
    masked_invalid_585394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3511, 12), ma_585393, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 3511)
    masked_invalid_call_result_585397 = invoke(stypy.reporting.localization.Localization(__file__, 3511, 12), masked_invalid_585394, *[x_585395], **kwargs_585396)
    
    # Assigning a type to the variable 'x' (line 3511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3511, 8), 'x', masked_invalid_call_result_585397)
    
    # Assigning a Call to a Name (line 3512):
    
    # Assigning a Call to a Name (line 3512):
    
    # Call to masked_invalid(...): (line 3512)
    # Processing the call arguments (line 3512)
    # Getting the type of 'y' (line 3512)
    y_585400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 30), 'y', False)
    # Processing the call keyword arguments (line 3512)
    kwargs_585401 = {}
    # Getting the type of 'ma' (line 3512)
    ma_585398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 3512)
    masked_invalid_585399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3512, 12), ma_585398, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 3512)
    masked_invalid_call_result_585402 = invoke(stypy.reporting.localization.Localization(__file__, 3512, 12), masked_invalid_585399, *[y_585400], **kwargs_585401)
    
    # Assigning a type to the variable 'y' (line 3512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3512, 8), 'y', masked_invalid_call_result_585402)
    
    # Call to kendalltau(...): (line 3513)
    # Processing the call arguments (line 3513)
    # Getting the type of 'x' (line 3513)
    x_585405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3513, 39), 'x', False)
    # Getting the type of 'y' (line 3513)
    y_585406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3513, 42), 'y', False)
    # Processing the call keyword arguments (line 3513)
    kwargs_585407 = {}
    # Getting the type of 'mstats_basic' (line 3513)
    mstats_basic_585403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3513, 15), 'mstats_basic', False)
    # Obtaining the member 'kendalltau' of a type (line 3513)
    kendalltau_585404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3513, 15), mstats_basic_585403, 'kendalltau')
    # Calling kendalltau(args, kwargs) (line 3513)
    kendalltau_call_result_585408 = invoke(stypy.reporting.localization.Localization(__file__, 3513, 15), kendalltau_585404, *[x_585405, y_585406], **kwargs_585407)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3513, 8), 'stypy_return_type', kendalltau_call_result_585408)
    # SSA join for if statement (line 3510)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3507)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 3515)
    # Getting the type of 'initial_lexsort' (line 3515)
    initial_lexsort_585409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3515, 4), 'initial_lexsort')
    # Getting the type of 'None' (line 3515)
    None_585410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3515, 30), 'None')
    
    (may_be_585411, more_types_in_union_585412) = may_not_be_none(initial_lexsort_585409, None_585410)

    if may_be_585411:

        if more_types_in_union_585412:
            # Runtime conditional SSA (line 3515)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to warn(...): (line 3516)
        # Processing the call arguments (line 3516)
        str_585415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3516, 22), 'str', '"initial_lexsort" is gone!')
        # Processing the call keyword arguments (line 3516)
        kwargs_585416 = {}
        # Getting the type of 'warnings' (line 3516)
        warnings_585413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3516, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3516)
        warn_585414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3516, 8), warnings_585413, 'warn')
        # Calling warn(args, kwargs) (line 3516)
        warn_call_result_585417 = invoke(stypy.reporting.localization.Localization(__file__, 3516, 8), warn_585414, *[str_585415], **kwargs_585416)
        

        if more_types_in_union_585412:
            # SSA join for if statement (line 3515)
            module_type_store = module_type_store.join_ssa_context()


    

    @norecursion
    def count_rank_tie(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'count_rank_tie'
        module_type_store = module_type_store.open_function_context('count_rank_tie', 3518, 4, False)
        
        # Passed parameters checking function
        count_rank_tie.stypy_localization = localization
        count_rank_tie.stypy_type_of_self = None
        count_rank_tie.stypy_type_store = module_type_store
        count_rank_tie.stypy_function_name = 'count_rank_tie'
        count_rank_tie.stypy_param_names_list = ['ranks']
        count_rank_tie.stypy_varargs_param_name = None
        count_rank_tie.stypy_kwargs_param_name = None
        count_rank_tie.stypy_call_defaults = defaults
        count_rank_tie.stypy_call_varargs = varargs
        count_rank_tie.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'count_rank_tie', ['ranks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'count_rank_tie', localization, ['ranks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'count_rank_tie(...)' code ##################

        
        # Assigning a Call to a Name (line 3519):
        
        # Assigning a Call to a Name (line 3519):
        
        # Call to astype(...): (line 3519)
        # Processing the call arguments (line 3519)
        str_585424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3519, 40), 'str', 'int64')
        # Processing the call keyword arguments (line 3519)
        # Getting the type of 'False' (line 3519)
        False_585425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3519, 54), 'False', False)
        keyword_585426 = False_585425
        kwargs_585427 = {'copy': keyword_585426}
        
        # Call to bincount(...): (line 3519)
        # Processing the call arguments (line 3519)
        # Getting the type of 'ranks' (line 3519)
        ranks_585420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3519, 26), 'ranks', False)
        # Processing the call keyword arguments (line 3519)
        kwargs_585421 = {}
        # Getting the type of 'np' (line 3519)
        np_585418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3519, 14), 'np', False)
        # Obtaining the member 'bincount' of a type (line 3519)
        bincount_585419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3519, 14), np_585418, 'bincount')
        # Calling bincount(args, kwargs) (line 3519)
        bincount_call_result_585422 = invoke(stypy.reporting.localization.Localization(__file__, 3519, 14), bincount_585419, *[ranks_585420], **kwargs_585421)
        
        # Obtaining the member 'astype' of a type (line 3519)
        astype_585423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3519, 14), bincount_call_result_585422, 'astype')
        # Calling astype(args, kwargs) (line 3519)
        astype_call_result_585428 = invoke(stypy.reporting.localization.Localization(__file__, 3519, 14), astype_585423, *[str_585424], **kwargs_585427)
        
        # Assigning a type to the variable 'cnt' (line 3519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3519, 8), 'cnt', astype_call_result_585428)
        
        # Assigning a Subscript to a Name (line 3520):
        
        # Assigning a Subscript to a Name (line 3520):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'cnt' (line 3520)
        cnt_585429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3520, 18), 'cnt')
        int_585430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3520, 24), 'int')
        # Applying the binary operator '>' (line 3520)
        result_gt_585431 = python_operator(stypy.reporting.localization.Localization(__file__, 3520, 18), '>', cnt_585429, int_585430)
        
        # Getting the type of 'cnt' (line 3520)
        cnt_585432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3520, 14), 'cnt')
        # Obtaining the member '__getitem__' of a type (line 3520)
        getitem___585433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3520, 14), cnt_585432, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3520)
        subscript_call_result_585434 = invoke(stypy.reporting.localization.Localization(__file__, 3520, 14), getitem___585433, result_gt_585431)
        
        # Assigning a type to the variable 'cnt' (line 3520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3520, 8), 'cnt', subscript_call_result_585434)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3521)
        tuple_585435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3521, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3521)
        # Adding element type (line 3521)
        
        # Call to sum(...): (line 3521)
        # Processing the call keyword arguments (line 3521)
        kwargs_585444 = {}
        # Getting the type of 'cnt' (line 3521)
        cnt_585436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3521, 17), 'cnt', False)
        # Getting the type of 'cnt' (line 3521)
        cnt_585437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3521, 24), 'cnt', False)
        int_585438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3521, 30), 'int')
        # Applying the binary operator '-' (line 3521)
        result_sub_585439 = python_operator(stypy.reporting.localization.Localization(__file__, 3521, 24), '-', cnt_585437, int_585438)
        
        # Applying the binary operator '*' (line 3521)
        result_mul_585440 = python_operator(stypy.reporting.localization.Localization(__file__, 3521, 17), '*', cnt_585436, result_sub_585439)
        
        int_585441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3521, 36), 'int')
        # Applying the binary operator '//' (line 3521)
        result_floordiv_585442 = python_operator(stypy.reporting.localization.Localization(__file__, 3521, 33), '//', result_mul_585440, int_585441)
        
        # Obtaining the member 'sum' of a type (line 3521)
        sum_585443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3521, 33), result_floordiv_585442, 'sum')
        # Calling sum(args, kwargs) (line 3521)
        sum_call_result_585445 = invoke(stypy.reporting.localization.Localization(__file__, 3521, 33), sum_585443, *[], **kwargs_585444)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3521, 16), tuple_585435, sum_call_result_585445)
        # Adding element type (line 3521)
        
        # Call to sum(...): (line 3522)
        # Processing the call keyword arguments (line 3522)
        kwargs_585456 = {}
        # Getting the type of 'cnt' (line 3522)
        cnt_585446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3522, 13), 'cnt', False)
        # Getting the type of 'cnt' (line 3522)
        cnt_585447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3522, 20), 'cnt', False)
        float_585448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3522, 26), 'float')
        # Applying the binary operator '-' (line 3522)
        result_sub_585449 = python_operator(stypy.reporting.localization.Localization(__file__, 3522, 20), '-', cnt_585447, float_585448)
        
        # Applying the binary operator '*' (line 3522)
        result_mul_585450 = python_operator(stypy.reporting.localization.Localization(__file__, 3522, 13), '*', cnt_585446, result_sub_585449)
        
        # Getting the type of 'cnt' (line 3522)
        cnt_585451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3522, 33), 'cnt', False)
        int_585452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3522, 39), 'int')
        # Applying the binary operator '-' (line 3522)
        result_sub_585453 = python_operator(stypy.reporting.localization.Localization(__file__, 3522, 33), '-', cnt_585451, int_585452)
        
        # Applying the binary operator '*' (line 3522)
        result_mul_585454 = python_operator(stypy.reporting.localization.Localization(__file__, 3522, 30), '*', result_mul_585450, result_sub_585453)
        
        # Obtaining the member 'sum' of a type (line 3522)
        sum_585455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3522, 30), result_mul_585454, 'sum')
        # Calling sum(args, kwargs) (line 3522)
        sum_call_result_585457 = invoke(stypy.reporting.localization.Localization(__file__, 3522, 30), sum_585455, *[], **kwargs_585456)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3521, 16), tuple_585435, sum_call_result_585457)
        # Adding element type (line 3521)
        
        # Call to sum(...): (line 3523)
        # Processing the call keyword arguments (line 3523)
        kwargs_585470 = {}
        # Getting the type of 'cnt' (line 3523)
        cnt_585458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3523, 13), 'cnt', False)
        # Getting the type of 'cnt' (line 3523)
        cnt_585459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3523, 20), 'cnt', False)
        float_585460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3523, 26), 'float')
        # Applying the binary operator '-' (line 3523)
        result_sub_585461 = python_operator(stypy.reporting.localization.Localization(__file__, 3523, 20), '-', cnt_585459, float_585460)
        
        # Applying the binary operator '*' (line 3523)
        result_mul_585462 = python_operator(stypy.reporting.localization.Localization(__file__, 3523, 13), '*', cnt_585458, result_sub_585461)
        
        int_585463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3523, 33), 'int')
        # Getting the type of 'cnt' (line 3523)
        cnt_585464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3523, 35), 'cnt', False)
        # Applying the binary operator '*' (line 3523)
        result_mul_585465 = python_operator(stypy.reporting.localization.Localization(__file__, 3523, 33), '*', int_585463, cnt_585464)
        
        int_585466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3523, 41), 'int')
        # Applying the binary operator '+' (line 3523)
        result_add_585467 = python_operator(stypy.reporting.localization.Localization(__file__, 3523, 33), '+', result_mul_585465, int_585466)
        
        # Applying the binary operator '*' (line 3523)
        result_mul_585468 = python_operator(stypy.reporting.localization.Localization(__file__, 3523, 30), '*', result_mul_585462, result_add_585467)
        
        # Obtaining the member 'sum' of a type (line 3523)
        sum_585469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3523, 30), result_mul_585468, 'sum')
        # Calling sum(args, kwargs) (line 3523)
        sum_call_result_585471 = invoke(stypy.reporting.localization.Localization(__file__, 3523, 30), sum_585469, *[], **kwargs_585470)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3521, 16), tuple_585435, sum_call_result_585471)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3521, 8), 'stypy_return_type', tuple_585435)
        
        # ################# End of 'count_rank_tie(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'count_rank_tie' in the type store
        # Getting the type of 'stypy_return_type' (line 3518)
        stypy_return_type_585472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3518, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_585472)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'count_rank_tie'
        return stypy_return_type_585472

    # Assigning a type to the variable 'count_rank_tie' (line 3518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3518, 4), 'count_rank_tie', count_rank_tie)
    
    # Assigning a Attribute to a Name (line 3525):
    
    # Assigning a Attribute to a Name (line 3525):
    # Getting the type of 'x' (line 3525)
    x_585473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 11), 'x')
    # Obtaining the member 'size' of a type (line 3525)
    size_585474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3525, 11), x_585473, 'size')
    # Assigning a type to the variable 'size' (line 3525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3525, 4), 'size', size_585474)
    
    # Assigning a Call to a Name (line 3526):
    
    # Assigning a Call to a Name (line 3526):
    
    # Call to argsort(...): (line 3526)
    # Processing the call arguments (line 3526)
    # Getting the type of 'y' (line 3526)
    y_585477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3526, 22), 'y', False)
    # Processing the call keyword arguments (line 3526)
    kwargs_585478 = {}
    # Getting the type of 'np' (line 3526)
    np_585475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3526, 11), 'np', False)
    # Obtaining the member 'argsort' of a type (line 3526)
    argsort_585476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3526, 11), np_585475, 'argsort')
    # Calling argsort(args, kwargs) (line 3526)
    argsort_call_result_585479 = invoke(stypy.reporting.localization.Localization(__file__, 3526, 11), argsort_585476, *[y_585477], **kwargs_585478)
    
    # Assigning a type to the variable 'perm' (line 3526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3526, 4), 'perm', argsort_call_result_585479)
    
    # Assigning a Tuple to a Tuple (line 3527):
    
    # Assigning a Subscript to a Name (line 3527):
    
    # Obtaining the type of the subscript
    # Getting the type of 'perm' (line 3527)
    perm_585480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3527, 13), 'perm')
    # Getting the type of 'x' (line 3527)
    x_585481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3527, 11), 'x')
    # Obtaining the member '__getitem__' of a type (line 3527)
    getitem___585482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3527, 11), x_585481, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3527)
    subscript_call_result_585483 = invoke(stypy.reporting.localization.Localization(__file__, 3527, 11), getitem___585482, perm_585480)
    
    # Assigning a type to the variable 'tuple_assignment_579935' (line 3527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3527, 4), 'tuple_assignment_579935', subscript_call_result_585483)
    
    # Assigning a Subscript to a Name (line 3527):
    
    # Obtaining the type of the subscript
    # Getting the type of 'perm' (line 3527)
    perm_585484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3527, 22), 'perm')
    # Getting the type of 'y' (line 3527)
    y_585485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3527, 20), 'y')
    # Obtaining the member '__getitem__' of a type (line 3527)
    getitem___585486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3527, 20), y_585485, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3527)
    subscript_call_result_585487 = invoke(stypy.reporting.localization.Localization(__file__, 3527, 20), getitem___585486, perm_585484)
    
    # Assigning a type to the variable 'tuple_assignment_579936' (line 3527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3527, 4), 'tuple_assignment_579936', subscript_call_result_585487)
    
    # Assigning a Name to a Name (line 3527):
    # Getting the type of 'tuple_assignment_579935' (line 3527)
    tuple_assignment_579935_585488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3527, 4), 'tuple_assignment_579935')
    # Assigning a type to the variable 'x' (line 3527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3527, 4), 'x', tuple_assignment_579935_585488)
    
    # Assigning a Name to a Name (line 3527):
    # Getting the type of 'tuple_assignment_579936' (line 3527)
    tuple_assignment_579936_585489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3527, 4), 'tuple_assignment_579936')
    # Assigning a type to the variable 'y' (line 3527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3527, 7), 'y', tuple_assignment_579936_585489)
    
    # Assigning a Call to a Name (line 3528):
    
    # Assigning a Call to a Name (line 3528):
    
    # Call to cumsum(...): (line 3528)
    # Processing the call keyword arguments (line 3528)
    # Getting the type of 'np' (line 3528)
    np_585508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3528, 50), 'np', False)
    # Obtaining the member 'intp' of a type (line 3528)
    intp_585509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3528, 50), np_585508, 'intp')
    keyword_585510 = intp_585509
    kwargs_585511 = {'dtype': keyword_585510}
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3528)
    tuple_585490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3528, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3528)
    # Adding element type (line 3528)
    # Getting the type of 'True' (line 3528)
    True_585491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3528, 14), 'True', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3528, 14), tuple_585490, True_585491)
    # Adding element type (line 3528)
    
    
    # Obtaining the type of the subscript
    int_585492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3528, 22), 'int')
    slice_585493 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3528, 20), int_585492, None, None)
    # Getting the type of 'y' (line 3528)
    y_585494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3528, 20), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 3528)
    getitem___585495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3528, 20), y_585494, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3528)
    subscript_call_result_585496 = invoke(stypy.reporting.localization.Localization(__file__, 3528, 20), getitem___585495, slice_585493)
    
    
    # Obtaining the type of the subscript
    int_585497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3528, 32), 'int')
    slice_585498 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3528, 29), None, int_585497, None)
    # Getting the type of 'y' (line 3528)
    y_585499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3528, 29), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 3528)
    getitem___585500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3528, 29), y_585499, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3528)
    subscript_call_result_585501 = invoke(stypy.reporting.localization.Localization(__file__, 3528, 29), getitem___585500, slice_585498)
    
    # Applying the binary operator '!=' (line 3528)
    result_ne_585502 = python_operator(stypy.reporting.localization.Localization(__file__, 3528, 20), '!=', subscript_call_result_585496, subscript_call_result_585501)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3528, 14), tuple_585490, result_ne_585502)
    
    # Getting the type of 'np' (line 3528)
    np_585503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3528, 8), 'np', False)
    # Obtaining the member 'r_' of a type (line 3528)
    r__585504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3528, 8), np_585503, 'r_')
    # Obtaining the member '__getitem__' of a type (line 3528)
    getitem___585505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3528, 8), r__585504, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3528)
    subscript_call_result_585506 = invoke(stypy.reporting.localization.Localization(__file__, 3528, 8), getitem___585505, tuple_585490)
    
    # Obtaining the member 'cumsum' of a type (line 3528)
    cumsum_585507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3528, 8), subscript_call_result_585506, 'cumsum')
    # Calling cumsum(args, kwargs) (line 3528)
    cumsum_call_result_585512 = invoke(stypy.reporting.localization.Localization(__file__, 3528, 8), cumsum_585507, *[], **kwargs_585511)
    
    # Assigning a type to the variable 'y' (line 3528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3528, 4), 'y', cumsum_call_result_585512)
    
    # Assigning a Call to a Name (line 3531):
    
    # Assigning a Call to a Name (line 3531):
    
    # Call to argsort(...): (line 3531)
    # Processing the call arguments (line 3531)
    # Getting the type of 'x' (line 3531)
    x_585515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 22), 'x', False)
    # Processing the call keyword arguments (line 3531)
    str_585516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3531, 30), 'str', 'mergesort')
    keyword_585517 = str_585516
    kwargs_585518 = {'kind': keyword_585517}
    # Getting the type of 'np' (line 3531)
    np_585513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 11), 'np', False)
    # Obtaining the member 'argsort' of a type (line 3531)
    argsort_585514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3531, 11), np_585513, 'argsort')
    # Calling argsort(args, kwargs) (line 3531)
    argsort_call_result_585519 = invoke(stypy.reporting.localization.Localization(__file__, 3531, 11), argsort_585514, *[x_585515], **kwargs_585518)
    
    # Assigning a type to the variable 'perm' (line 3531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3531, 4), 'perm', argsort_call_result_585519)
    
    # Assigning a Tuple to a Tuple (line 3532):
    
    # Assigning a Subscript to a Name (line 3532):
    
    # Obtaining the type of the subscript
    # Getting the type of 'perm' (line 3532)
    perm_585520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3532, 13), 'perm')
    # Getting the type of 'x' (line 3532)
    x_585521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3532, 11), 'x')
    # Obtaining the member '__getitem__' of a type (line 3532)
    getitem___585522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3532, 11), x_585521, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3532)
    subscript_call_result_585523 = invoke(stypy.reporting.localization.Localization(__file__, 3532, 11), getitem___585522, perm_585520)
    
    # Assigning a type to the variable 'tuple_assignment_579937' (line 3532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3532, 4), 'tuple_assignment_579937', subscript_call_result_585523)
    
    # Assigning a Subscript to a Name (line 3532):
    
    # Obtaining the type of the subscript
    # Getting the type of 'perm' (line 3532)
    perm_585524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3532, 22), 'perm')
    # Getting the type of 'y' (line 3532)
    y_585525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3532, 20), 'y')
    # Obtaining the member '__getitem__' of a type (line 3532)
    getitem___585526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3532, 20), y_585525, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3532)
    subscript_call_result_585527 = invoke(stypy.reporting.localization.Localization(__file__, 3532, 20), getitem___585526, perm_585524)
    
    # Assigning a type to the variable 'tuple_assignment_579938' (line 3532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3532, 4), 'tuple_assignment_579938', subscript_call_result_585527)
    
    # Assigning a Name to a Name (line 3532):
    # Getting the type of 'tuple_assignment_579937' (line 3532)
    tuple_assignment_579937_585528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3532, 4), 'tuple_assignment_579937')
    # Assigning a type to the variable 'x' (line 3532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3532, 4), 'x', tuple_assignment_579937_585528)
    
    # Assigning a Name to a Name (line 3532):
    # Getting the type of 'tuple_assignment_579938' (line 3532)
    tuple_assignment_579938_585529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3532, 4), 'tuple_assignment_579938')
    # Assigning a type to the variable 'y' (line 3532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3532, 7), 'y', tuple_assignment_579938_585529)
    
    # Assigning a Call to a Name (line 3533):
    
    # Assigning a Call to a Name (line 3533):
    
    # Call to cumsum(...): (line 3533)
    # Processing the call keyword arguments (line 3533)
    # Getting the type of 'np' (line 3533)
    np_585548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 50), 'np', False)
    # Obtaining the member 'intp' of a type (line 3533)
    intp_585549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3533, 50), np_585548, 'intp')
    keyword_585550 = intp_585549
    kwargs_585551 = {'dtype': keyword_585550}
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3533)
    tuple_585530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3533, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3533)
    # Adding element type (line 3533)
    # Getting the type of 'True' (line 3533)
    True_585531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 14), 'True', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3533, 14), tuple_585530, True_585531)
    # Adding element type (line 3533)
    
    
    # Obtaining the type of the subscript
    int_585532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3533, 22), 'int')
    slice_585533 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3533, 20), int_585532, None, None)
    # Getting the type of 'x' (line 3533)
    x_585534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 20), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3533)
    getitem___585535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3533, 20), x_585534, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3533)
    subscript_call_result_585536 = invoke(stypy.reporting.localization.Localization(__file__, 3533, 20), getitem___585535, slice_585533)
    
    
    # Obtaining the type of the subscript
    int_585537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3533, 32), 'int')
    slice_585538 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3533, 29), None, int_585537, None)
    # Getting the type of 'x' (line 3533)
    x_585539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 29), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3533)
    getitem___585540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3533, 29), x_585539, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3533)
    subscript_call_result_585541 = invoke(stypy.reporting.localization.Localization(__file__, 3533, 29), getitem___585540, slice_585538)
    
    # Applying the binary operator '!=' (line 3533)
    result_ne_585542 = python_operator(stypy.reporting.localization.Localization(__file__, 3533, 20), '!=', subscript_call_result_585536, subscript_call_result_585541)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3533, 14), tuple_585530, result_ne_585542)
    
    # Getting the type of 'np' (line 3533)
    np_585543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 8), 'np', False)
    # Obtaining the member 'r_' of a type (line 3533)
    r__585544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3533, 8), np_585543, 'r_')
    # Obtaining the member '__getitem__' of a type (line 3533)
    getitem___585545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3533, 8), r__585544, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3533)
    subscript_call_result_585546 = invoke(stypy.reporting.localization.Localization(__file__, 3533, 8), getitem___585545, tuple_585530)
    
    # Obtaining the member 'cumsum' of a type (line 3533)
    cumsum_585547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3533, 8), subscript_call_result_585546, 'cumsum')
    # Calling cumsum(args, kwargs) (line 3533)
    cumsum_call_result_585552 = invoke(stypy.reporting.localization.Localization(__file__, 3533, 8), cumsum_585547, *[], **kwargs_585551)
    
    # Assigning a type to the variable 'x' (line 3533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3533, 4), 'x', cumsum_call_result_585552)
    
    # Assigning a Call to a Name (line 3535):
    
    # Assigning a Call to a Name (line 3535):
    
    # Call to _kendall_dis(...): (line 3535)
    # Processing the call arguments (line 3535)
    # Getting the type of 'x' (line 3535)
    x_585554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3535, 23), 'x', False)
    # Getting the type of 'y' (line 3535)
    y_585555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3535, 26), 'y', False)
    # Processing the call keyword arguments (line 3535)
    kwargs_585556 = {}
    # Getting the type of '_kendall_dis' (line 3535)
    _kendall_dis_585553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3535, 10), '_kendall_dis', False)
    # Calling _kendall_dis(args, kwargs) (line 3535)
    _kendall_dis_call_result_585557 = invoke(stypy.reporting.localization.Localization(__file__, 3535, 10), _kendall_dis_585553, *[x_585554, y_585555], **kwargs_585556)
    
    # Assigning a type to the variable 'dis' (line 3535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3535, 4), 'dis', _kendall_dis_call_result_585557)
    
    # Assigning a Subscript to a Name (line 3537):
    
    # Assigning a Subscript to a Name (line 3537):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3537)
    tuple_585558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3537, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3537)
    # Adding element type (line 3537)
    # Getting the type of 'True' (line 3537)
    True_585559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 16), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3537, 16), tuple_585558, True_585559)
    # Adding element type (line 3537)
    
    
    # Obtaining the type of the subscript
    int_585560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3537, 25), 'int')
    slice_585561 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3537, 23), int_585560, None, None)
    # Getting the type of 'x' (line 3537)
    x_585562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 23), 'x')
    # Obtaining the member '__getitem__' of a type (line 3537)
    getitem___585563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 23), x_585562, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3537)
    subscript_call_result_585564 = invoke(stypy.reporting.localization.Localization(__file__, 3537, 23), getitem___585563, slice_585561)
    
    
    # Obtaining the type of the subscript
    int_585565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3537, 35), 'int')
    slice_585566 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3537, 32), None, int_585565, None)
    # Getting the type of 'x' (line 3537)
    x_585567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 32), 'x')
    # Obtaining the member '__getitem__' of a type (line 3537)
    getitem___585568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 32), x_585567, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3537)
    subscript_call_result_585569 = invoke(stypy.reporting.localization.Localization(__file__, 3537, 32), getitem___585568, slice_585566)
    
    # Applying the binary operator '!=' (line 3537)
    result_ne_585570 = python_operator(stypy.reporting.localization.Localization(__file__, 3537, 23), '!=', subscript_call_result_585564, subscript_call_result_585569)
    
    
    
    # Obtaining the type of the subscript
    int_585571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3537, 45), 'int')
    slice_585572 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3537, 43), int_585571, None, None)
    # Getting the type of 'y' (line 3537)
    y_585573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 43), 'y')
    # Obtaining the member '__getitem__' of a type (line 3537)
    getitem___585574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 43), y_585573, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3537)
    subscript_call_result_585575 = invoke(stypy.reporting.localization.Localization(__file__, 3537, 43), getitem___585574, slice_585572)
    
    
    # Obtaining the type of the subscript
    int_585576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3537, 55), 'int')
    slice_585577 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3537, 52), None, int_585576, None)
    # Getting the type of 'y' (line 3537)
    y_585578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 52), 'y')
    # Obtaining the member '__getitem__' of a type (line 3537)
    getitem___585579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 52), y_585578, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3537)
    subscript_call_result_585580 = invoke(stypy.reporting.localization.Localization(__file__, 3537, 52), getitem___585579, slice_585577)
    
    # Applying the binary operator '!=' (line 3537)
    result_ne_585581 = python_operator(stypy.reporting.localization.Localization(__file__, 3537, 43), '!=', subscript_call_result_585575, subscript_call_result_585580)
    
    # Applying the binary operator '|' (line 3537)
    result_or__585582 = python_operator(stypy.reporting.localization.Localization(__file__, 3537, 22), '|', result_ne_585570, result_ne_585581)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3537, 16), tuple_585558, result_or__585582)
    # Adding element type (line 3537)
    # Getting the type of 'True' (line 3537)
    True_585583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 61), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3537, 16), tuple_585558, True_585583)
    
    # Getting the type of 'np' (line 3537)
    np_585584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 10), 'np')
    # Obtaining the member 'r_' of a type (line 3537)
    r__585585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 10), np_585584, 'r_')
    # Obtaining the member '__getitem__' of a type (line 3537)
    getitem___585586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 10), r__585585, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3537)
    subscript_call_result_585587 = invoke(stypy.reporting.localization.Localization(__file__, 3537, 10), getitem___585586, tuple_585558)
    
    # Assigning a type to the variable 'obs' (line 3537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3537, 4), 'obs', subscript_call_result_585587)
    
    # Assigning a Call to a Name (line 3538):
    
    # Assigning a Call to a Name (line 3538):
    
    # Call to astype(...): (line 3538)
    # Processing the call arguments (line 3538)
    str_585601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3538, 43), 'str', 'int64')
    # Processing the call keyword arguments (line 3538)
    # Getting the type of 'False' (line 3538)
    False_585602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 57), 'False', False)
    keyword_585603 = False_585602
    kwargs_585604 = {'copy': keyword_585603}
    
    # Call to diff(...): (line 3538)
    # Processing the call arguments (line 3538)
    
    # Obtaining the type of the subscript
    int_585590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3538, 32), 'int')
    
    # Call to where(...): (line 3538)
    # Processing the call arguments (line 3538)
    # Getting the type of 'obs' (line 3538)
    obs_585593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 27), 'obs', False)
    # Processing the call keyword arguments (line 3538)
    kwargs_585594 = {}
    # Getting the type of 'np' (line 3538)
    np_585591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 18), 'np', False)
    # Obtaining the member 'where' of a type (line 3538)
    where_585592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3538, 18), np_585591, 'where')
    # Calling where(args, kwargs) (line 3538)
    where_call_result_585595 = invoke(stypy.reporting.localization.Localization(__file__, 3538, 18), where_585592, *[obs_585593], **kwargs_585594)
    
    # Obtaining the member '__getitem__' of a type (line 3538)
    getitem___585596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3538, 18), where_call_result_585595, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3538)
    subscript_call_result_585597 = invoke(stypy.reporting.localization.Localization(__file__, 3538, 18), getitem___585596, int_585590)
    
    # Processing the call keyword arguments (line 3538)
    kwargs_585598 = {}
    # Getting the type of 'np' (line 3538)
    np_585588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 10), 'np', False)
    # Obtaining the member 'diff' of a type (line 3538)
    diff_585589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3538, 10), np_585588, 'diff')
    # Calling diff(args, kwargs) (line 3538)
    diff_call_result_585599 = invoke(stypy.reporting.localization.Localization(__file__, 3538, 10), diff_585589, *[subscript_call_result_585597], **kwargs_585598)
    
    # Obtaining the member 'astype' of a type (line 3538)
    astype_585600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3538, 10), diff_call_result_585599, 'astype')
    # Calling astype(args, kwargs) (line 3538)
    astype_call_result_585605 = invoke(stypy.reporting.localization.Localization(__file__, 3538, 10), astype_585600, *[str_585601], **kwargs_585604)
    
    # Assigning a type to the variable 'cnt' (line 3538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3538, 4), 'cnt', astype_call_result_585605)
    
    # Assigning a Call to a Name (line 3540):
    
    # Assigning a Call to a Name (line 3540):
    
    # Call to sum(...): (line 3540)
    # Processing the call keyword arguments (line 3540)
    kwargs_585614 = {}
    # Getting the type of 'cnt' (line 3540)
    cnt_585606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3540, 12), 'cnt', False)
    # Getting the type of 'cnt' (line 3540)
    cnt_585607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3540, 19), 'cnt', False)
    int_585608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3540, 25), 'int')
    # Applying the binary operator '-' (line 3540)
    result_sub_585609 = python_operator(stypy.reporting.localization.Localization(__file__, 3540, 19), '-', cnt_585607, int_585608)
    
    # Applying the binary operator '*' (line 3540)
    result_mul_585610 = python_operator(stypy.reporting.localization.Localization(__file__, 3540, 12), '*', cnt_585606, result_sub_585609)
    
    int_585611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3540, 31), 'int')
    # Applying the binary operator '//' (line 3540)
    result_floordiv_585612 = python_operator(stypy.reporting.localization.Localization(__file__, 3540, 28), '//', result_mul_585610, int_585611)
    
    # Obtaining the member 'sum' of a type (line 3540)
    sum_585613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3540, 28), result_floordiv_585612, 'sum')
    # Calling sum(args, kwargs) (line 3540)
    sum_call_result_585615 = invoke(stypy.reporting.localization.Localization(__file__, 3540, 28), sum_585613, *[], **kwargs_585614)
    
    # Assigning a type to the variable 'ntie' (line 3540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3540, 4), 'ntie', sum_call_result_585615)
    
    # Assigning a Call to a Tuple (line 3541):
    
    # Assigning a Subscript to a Name (line 3541):
    
    # Obtaining the type of the subscript
    int_585616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3541, 4), 'int')
    
    # Call to count_rank_tie(...): (line 3541)
    # Processing the call arguments (line 3541)
    # Getting the type of 'x' (line 3541)
    x_585618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 34), 'x', False)
    # Processing the call keyword arguments (line 3541)
    kwargs_585619 = {}
    # Getting the type of 'count_rank_tie' (line 3541)
    count_rank_tie_585617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 19), 'count_rank_tie', False)
    # Calling count_rank_tie(args, kwargs) (line 3541)
    count_rank_tie_call_result_585620 = invoke(stypy.reporting.localization.Localization(__file__, 3541, 19), count_rank_tie_585617, *[x_585618], **kwargs_585619)
    
    # Obtaining the member '__getitem__' of a type (line 3541)
    getitem___585621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3541, 4), count_rank_tie_call_result_585620, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3541)
    subscript_call_result_585622 = invoke(stypy.reporting.localization.Localization(__file__, 3541, 4), getitem___585621, int_585616)
    
    # Assigning a type to the variable 'tuple_var_assignment_579939' (line 3541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3541, 4), 'tuple_var_assignment_579939', subscript_call_result_585622)
    
    # Assigning a Subscript to a Name (line 3541):
    
    # Obtaining the type of the subscript
    int_585623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3541, 4), 'int')
    
    # Call to count_rank_tie(...): (line 3541)
    # Processing the call arguments (line 3541)
    # Getting the type of 'x' (line 3541)
    x_585625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 34), 'x', False)
    # Processing the call keyword arguments (line 3541)
    kwargs_585626 = {}
    # Getting the type of 'count_rank_tie' (line 3541)
    count_rank_tie_585624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 19), 'count_rank_tie', False)
    # Calling count_rank_tie(args, kwargs) (line 3541)
    count_rank_tie_call_result_585627 = invoke(stypy.reporting.localization.Localization(__file__, 3541, 19), count_rank_tie_585624, *[x_585625], **kwargs_585626)
    
    # Obtaining the member '__getitem__' of a type (line 3541)
    getitem___585628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3541, 4), count_rank_tie_call_result_585627, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3541)
    subscript_call_result_585629 = invoke(stypy.reporting.localization.Localization(__file__, 3541, 4), getitem___585628, int_585623)
    
    # Assigning a type to the variable 'tuple_var_assignment_579940' (line 3541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3541, 4), 'tuple_var_assignment_579940', subscript_call_result_585629)
    
    # Assigning a Subscript to a Name (line 3541):
    
    # Obtaining the type of the subscript
    int_585630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3541, 4), 'int')
    
    # Call to count_rank_tie(...): (line 3541)
    # Processing the call arguments (line 3541)
    # Getting the type of 'x' (line 3541)
    x_585632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 34), 'x', False)
    # Processing the call keyword arguments (line 3541)
    kwargs_585633 = {}
    # Getting the type of 'count_rank_tie' (line 3541)
    count_rank_tie_585631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 19), 'count_rank_tie', False)
    # Calling count_rank_tie(args, kwargs) (line 3541)
    count_rank_tie_call_result_585634 = invoke(stypy.reporting.localization.Localization(__file__, 3541, 19), count_rank_tie_585631, *[x_585632], **kwargs_585633)
    
    # Obtaining the member '__getitem__' of a type (line 3541)
    getitem___585635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3541, 4), count_rank_tie_call_result_585634, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3541)
    subscript_call_result_585636 = invoke(stypy.reporting.localization.Localization(__file__, 3541, 4), getitem___585635, int_585630)
    
    # Assigning a type to the variable 'tuple_var_assignment_579941' (line 3541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3541, 4), 'tuple_var_assignment_579941', subscript_call_result_585636)
    
    # Assigning a Name to a Name (line 3541):
    # Getting the type of 'tuple_var_assignment_579939' (line 3541)
    tuple_var_assignment_579939_585637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 4), 'tuple_var_assignment_579939')
    # Assigning a type to the variable 'xtie' (line 3541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3541, 4), 'xtie', tuple_var_assignment_579939_585637)
    
    # Assigning a Name to a Name (line 3541):
    # Getting the type of 'tuple_var_assignment_579940' (line 3541)
    tuple_var_assignment_579940_585638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 4), 'tuple_var_assignment_579940')
    # Assigning a type to the variable 'x0' (line 3541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3541, 10), 'x0', tuple_var_assignment_579940_585638)
    
    # Assigning a Name to a Name (line 3541):
    # Getting the type of 'tuple_var_assignment_579941' (line 3541)
    tuple_var_assignment_579941_585639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 4), 'tuple_var_assignment_579941')
    # Assigning a type to the variable 'x1' (line 3541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3541, 14), 'x1', tuple_var_assignment_579941_585639)
    
    # Assigning a Call to a Tuple (line 3542):
    
    # Assigning a Subscript to a Name (line 3542):
    
    # Obtaining the type of the subscript
    int_585640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3542, 4), 'int')
    
    # Call to count_rank_tie(...): (line 3542)
    # Processing the call arguments (line 3542)
    # Getting the type of 'y' (line 3542)
    y_585642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 34), 'y', False)
    # Processing the call keyword arguments (line 3542)
    kwargs_585643 = {}
    # Getting the type of 'count_rank_tie' (line 3542)
    count_rank_tie_585641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 19), 'count_rank_tie', False)
    # Calling count_rank_tie(args, kwargs) (line 3542)
    count_rank_tie_call_result_585644 = invoke(stypy.reporting.localization.Localization(__file__, 3542, 19), count_rank_tie_585641, *[y_585642], **kwargs_585643)
    
    # Obtaining the member '__getitem__' of a type (line 3542)
    getitem___585645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3542, 4), count_rank_tie_call_result_585644, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3542)
    subscript_call_result_585646 = invoke(stypy.reporting.localization.Localization(__file__, 3542, 4), getitem___585645, int_585640)
    
    # Assigning a type to the variable 'tuple_var_assignment_579942' (line 3542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3542, 4), 'tuple_var_assignment_579942', subscript_call_result_585646)
    
    # Assigning a Subscript to a Name (line 3542):
    
    # Obtaining the type of the subscript
    int_585647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3542, 4), 'int')
    
    # Call to count_rank_tie(...): (line 3542)
    # Processing the call arguments (line 3542)
    # Getting the type of 'y' (line 3542)
    y_585649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 34), 'y', False)
    # Processing the call keyword arguments (line 3542)
    kwargs_585650 = {}
    # Getting the type of 'count_rank_tie' (line 3542)
    count_rank_tie_585648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 19), 'count_rank_tie', False)
    # Calling count_rank_tie(args, kwargs) (line 3542)
    count_rank_tie_call_result_585651 = invoke(stypy.reporting.localization.Localization(__file__, 3542, 19), count_rank_tie_585648, *[y_585649], **kwargs_585650)
    
    # Obtaining the member '__getitem__' of a type (line 3542)
    getitem___585652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3542, 4), count_rank_tie_call_result_585651, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3542)
    subscript_call_result_585653 = invoke(stypy.reporting.localization.Localization(__file__, 3542, 4), getitem___585652, int_585647)
    
    # Assigning a type to the variable 'tuple_var_assignment_579943' (line 3542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3542, 4), 'tuple_var_assignment_579943', subscript_call_result_585653)
    
    # Assigning a Subscript to a Name (line 3542):
    
    # Obtaining the type of the subscript
    int_585654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3542, 4), 'int')
    
    # Call to count_rank_tie(...): (line 3542)
    # Processing the call arguments (line 3542)
    # Getting the type of 'y' (line 3542)
    y_585656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 34), 'y', False)
    # Processing the call keyword arguments (line 3542)
    kwargs_585657 = {}
    # Getting the type of 'count_rank_tie' (line 3542)
    count_rank_tie_585655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 19), 'count_rank_tie', False)
    # Calling count_rank_tie(args, kwargs) (line 3542)
    count_rank_tie_call_result_585658 = invoke(stypy.reporting.localization.Localization(__file__, 3542, 19), count_rank_tie_585655, *[y_585656], **kwargs_585657)
    
    # Obtaining the member '__getitem__' of a type (line 3542)
    getitem___585659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3542, 4), count_rank_tie_call_result_585658, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3542)
    subscript_call_result_585660 = invoke(stypy.reporting.localization.Localization(__file__, 3542, 4), getitem___585659, int_585654)
    
    # Assigning a type to the variable 'tuple_var_assignment_579944' (line 3542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3542, 4), 'tuple_var_assignment_579944', subscript_call_result_585660)
    
    # Assigning a Name to a Name (line 3542):
    # Getting the type of 'tuple_var_assignment_579942' (line 3542)
    tuple_var_assignment_579942_585661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 4), 'tuple_var_assignment_579942')
    # Assigning a type to the variable 'ytie' (line 3542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3542, 4), 'ytie', tuple_var_assignment_579942_585661)
    
    # Assigning a Name to a Name (line 3542):
    # Getting the type of 'tuple_var_assignment_579943' (line 3542)
    tuple_var_assignment_579943_585662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 4), 'tuple_var_assignment_579943')
    # Assigning a type to the variable 'y0' (line 3542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3542, 10), 'y0', tuple_var_assignment_579943_585662)
    
    # Assigning a Name to a Name (line 3542):
    # Getting the type of 'tuple_var_assignment_579944' (line 3542)
    tuple_var_assignment_579944_585663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 4), 'tuple_var_assignment_579944')
    # Assigning a type to the variable 'y1' (line 3542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3542, 14), 'y1', tuple_var_assignment_579944_585663)
    
    # Assigning a BinOp to a Name (line 3544):
    
    # Assigning a BinOp to a Name (line 3544):
    # Getting the type of 'size' (line 3544)
    size_585664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3544, 11), 'size')
    # Getting the type of 'size' (line 3544)
    size_585665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3544, 19), 'size')
    int_585666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3544, 26), 'int')
    # Applying the binary operator '-' (line 3544)
    result_sub_585667 = python_operator(stypy.reporting.localization.Localization(__file__, 3544, 19), '-', size_585665, int_585666)
    
    # Applying the binary operator '*' (line 3544)
    result_mul_585668 = python_operator(stypy.reporting.localization.Localization(__file__, 3544, 11), '*', size_585664, result_sub_585667)
    
    int_585669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3544, 33), 'int')
    # Applying the binary operator '//' (line 3544)
    result_floordiv_585670 = python_operator(stypy.reporting.localization.Localization(__file__, 3544, 10), '//', result_mul_585668, int_585669)
    
    # Assigning a type to the variable 'tot' (line 3544)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3544, 4), 'tot', result_floordiv_585670)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'xtie' (line 3546)
    xtie_585671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3546, 7), 'xtie')
    # Getting the type of 'tot' (line 3546)
    tot_585672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3546, 15), 'tot')
    # Applying the binary operator '==' (line 3546)
    result_eq_585673 = python_operator(stypy.reporting.localization.Localization(__file__, 3546, 7), '==', xtie_585671, tot_585672)
    
    
    # Getting the type of 'ytie' (line 3546)
    ytie_585674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3546, 22), 'ytie')
    # Getting the type of 'tot' (line 3546)
    tot_585675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3546, 30), 'tot')
    # Applying the binary operator '==' (line 3546)
    result_eq_585676 = python_operator(stypy.reporting.localization.Localization(__file__, 3546, 22), '==', ytie_585674, tot_585675)
    
    # Applying the binary operator 'or' (line 3546)
    result_or_keyword_585677 = python_operator(stypy.reporting.localization.Localization(__file__, 3546, 7), 'or', result_eq_585673, result_eq_585676)
    
    # Testing the type of an if condition (line 3546)
    if_condition_585678 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3546, 4), result_or_keyword_585677)
    # Assigning a type to the variable 'if_condition_585678' (line 3546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3546, 4), 'if_condition_585678', if_condition_585678)
    # SSA begins for if statement (line 3546)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to KendalltauResult(...): (line 3547)
    # Processing the call arguments (line 3547)
    # Getting the type of 'np' (line 3547)
    np_585680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 32), 'np', False)
    # Obtaining the member 'nan' of a type (line 3547)
    nan_585681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3547, 32), np_585680, 'nan')
    # Getting the type of 'np' (line 3547)
    np_585682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 40), 'np', False)
    # Obtaining the member 'nan' of a type (line 3547)
    nan_585683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3547, 40), np_585682, 'nan')
    # Processing the call keyword arguments (line 3547)
    kwargs_585684 = {}
    # Getting the type of 'KendalltauResult' (line 3547)
    KendalltauResult_585679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 15), 'KendalltauResult', False)
    # Calling KendalltauResult(args, kwargs) (line 3547)
    KendalltauResult_call_result_585685 = invoke(stypy.reporting.localization.Localization(__file__, 3547, 15), KendalltauResult_585679, *[nan_585681, nan_585683], **kwargs_585684)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3547, 8), 'stypy_return_type', KendalltauResult_call_result_585685)
    # SSA join for if statement (line 3546)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 3551):
    
    # Assigning a BinOp to a Name (line 3551):
    # Getting the type of 'tot' (line 3551)
    tot_585686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 20), 'tot')
    # Getting the type of 'xtie' (line 3551)
    xtie_585687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 26), 'xtie')
    # Applying the binary operator '-' (line 3551)
    result_sub_585688 = python_operator(stypy.reporting.localization.Localization(__file__, 3551, 20), '-', tot_585686, xtie_585687)
    
    # Getting the type of 'ytie' (line 3551)
    ytie_585689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 33), 'ytie')
    # Applying the binary operator '-' (line 3551)
    result_sub_585690 = python_operator(stypy.reporting.localization.Localization(__file__, 3551, 31), '-', result_sub_585688, ytie_585689)
    
    # Getting the type of 'ntie' (line 3551)
    ntie_585691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 40), 'ntie')
    # Applying the binary operator '+' (line 3551)
    result_add_585692 = python_operator(stypy.reporting.localization.Localization(__file__, 3551, 38), '+', result_sub_585690, ntie_585691)
    
    int_585693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3551, 47), 'int')
    # Getting the type of 'dis' (line 3551)
    dis_585694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 51), 'dis')
    # Applying the binary operator '*' (line 3551)
    result_mul_585695 = python_operator(stypy.reporting.localization.Localization(__file__, 3551, 47), '*', int_585693, dis_585694)
    
    # Applying the binary operator '-' (line 3551)
    result_sub_585696 = python_operator(stypy.reporting.localization.Localization(__file__, 3551, 45), '-', result_add_585692, result_mul_585695)
    
    # Assigning a type to the variable 'con_minus_dis' (line 3551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3551, 4), 'con_minus_dis', result_sub_585696)
    
    # Assigning a BinOp to a Name (line 3552):
    
    # Assigning a BinOp to a Name (line 3552):
    # Getting the type of 'con_minus_dis' (line 3552)
    con_minus_dis_585697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 10), 'con_minus_dis')
    
    # Call to sqrt(...): (line 3552)
    # Processing the call arguments (line 3552)
    # Getting the type of 'tot' (line 3552)
    tot_585700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 34), 'tot', False)
    # Getting the type of 'xtie' (line 3552)
    xtie_585701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 40), 'xtie', False)
    # Applying the binary operator '-' (line 3552)
    result_sub_585702 = python_operator(stypy.reporting.localization.Localization(__file__, 3552, 34), '-', tot_585700, xtie_585701)
    
    # Processing the call keyword arguments (line 3552)
    kwargs_585703 = {}
    # Getting the type of 'np' (line 3552)
    np_585698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 26), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 3552)
    sqrt_585699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3552, 26), np_585698, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3552)
    sqrt_call_result_585704 = invoke(stypy.reporting.localization.Localization(__file__, 3552, 26), sqrt_585699, *[result_sub_585702], **kwargs_585703)
    
    # Applying the binary operator 'div' (line 3552)
    result_div_585705 = python_operator(stypy.reporting.localization.Localization(__file__, 3552, 10), 'div', con_minus_dis_585697, sqrt_call_result_585704)
    
    
    # Call to sqrt(...): (line 3552)
    # Processing the call arguments (line 3552)
    # Getting the type of 'tot' (line 3552)
    tot_585708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 56), 'tot', False)
    # Getting the type of 'ytie' (line 3552)
    ytie_585709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 62), 'ytie', False)
    # Applying the binary operator '-' (line 3552)
    result_sub_585710 = python_operator(stypy.reporting.localization.Localization(__file__, 3552, 56), '-', tot_585708, ytie_585709)
    
    # Processing the call keyword arguments (line 3552)
    kwargs_585711 = {}
    # Getting the type of 'np' (line 3552)
    np_585706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 48), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 3552)
    sqrt_585707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3552, 48), np_585706, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3552)
    sqrt_call_result_585712 = invoke(stypy.reporting.localization.Localization(__file__, 3552, 48), sqrt_585707, *[result_sub_585710], **kwargs_585711)
    
    # Applying the binary operator 'div' (line 3552)
    result_div_585713 = python_operator(stypy.reporting.localization.Localization(__file__, 3552, 46), 'div', result_div_585705, sqrt_call_result_585712)
    
    # Assigning a type to the variable 'tau' (line 3552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3552, 4), 'tau', result_div_585713)
    
    # Assigning a Call to a Name (line 3554):
    
    # Assigning a Call to a Name (line 3554):
    
    # Call to min(...): (line 3554)
    # Processing the call arguments (line 3554)
    float_585715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3554, 14), 'float')
    
    # Call to max(...): (line 3554)
    # Processing the call arguments (line 3554)
    float_585717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3554, 22), 'float')
    # Getting the type of 'tau' (line 3554)
    tau_585718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3554, 27), 'tau', False)
    # Processing the call keyword arguments (line 3554)
    kwargs_585719 = {}
    # Getting the type of 'max' (line 3554)
    max_585716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3554, 18), 'max', False)
    # Calling max(args, kwargs) (line 3554)
    max_call_result_585720 = invoke(stypy.reporting.localization.Localization(__file__, 3554, 18), max_585716, *[float_585717, tau_585718], **kwargs_585719)
    
    # Processing the call keyword arguments (line 3554)
    kwargs_585721 = {}
    # Getting the type of 'min' (line 3554)
    min_585714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3554, 10), 'min', False)
    # Calling min(args, kwargs) (line 3554)
    min_call_result_585722 = invoke(stypy.reporting.localization.Localization(__file__, 3554, 10), min_585714, *[float_585715, max_call_result_585720], **kwargs_585721)
    
    # Assigning a type to the variable 'tau' (line 3554)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3554, 4), 'tau', min_call_result_585722)
    
    # Assigning a BinOp to a Name (line 3557):
    
    # Assigning a BinOp to a Name (line 3557):
    # Getting the type of 'size' (line 3557)
    size_585723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3557, 11), 'size')
    # Getting the type of 'size' (line 3557)
    size_585724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3557, 19), 'size')
    int_585725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3557, 26), 'int')
    # Applying the binary operator '-' (line 3557)
    result_sub_585726 = python_operator(stypy.reporting.localization.Localization(__file__, 3557, 19), '-', size_585724, int_585725)
    
    # Applying the binary operator '*' (line 3557)
    result_mul_585727 = python_operator(stypy.reporting.localization.Localization(__file__, 3557, 11), '*', size_585723, result_sub_585726)
    
    float_585728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3557, 32), 'float')
    # Getting the type of 'size' (line 3557)
    size_585729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3557, 35), 'size')
    # Applying the binary operator '*' (line 3557)
    result_mul_585730 = python_operator(stypy.reporting.localization.Localization(__file__, 3557, 32), '*', float_585728, size_585729)
    
    int_585731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3557, 42), 'int')
    # Applying the binary operator '+' (line 3557)
    result_add_585732 = python_operator(stypy.reporting.localization.Localization(__file__, 3557, 32), '+', result_mul_585730, int_585731)
    
    # Applying the binary operator '*' (line 3557)
    result_mul_585733 = python_operator(stypy.reporting.localization.Localization(__file__, 3557, 29), '*', result_mul_585727, result_add_585732)
    
    # Getting the type of 'x1' (line 3557)
    x1_585734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3557, 47), 'x1')
    # Applying the binary operator '-' (line 3557)
    result_sub_585735 = python_operator(stypy.reporting.localization.Localization(__file__, 3557, 11), '-', result_mul_585733, x1_585734)
    
    # Getting the type of 'y1' (line 3557)
    y1_585736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3557, 52), 'y1')
    # Applying the binary operator '-' (line 3557)
    result_sub_585737 = python_operator(stypy.reporting.localization.Localization(__file__, 3557, 50), '-', result_sub_585735, y1_585736)
    
    float_585738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3557, 58), 'float')
    # Applying the binary operator 'div' (line 3557)
    result_div_585739 = python_operator(stypy.reporting.localization.Localization(__file__, 3557, 10), 'div', result_sub_585737, float_585738)
    
    float_585740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3558, 8), 'float')
    # Getting the type of 'xtie' (line 3558)
    xtie_585741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3558, 13), 'xtie')
    # Applying the binary operator '*' (line 3558)
    result_mul_585742 = python_operator(stypy.reporting.localization.Localization(__file__, 3558, 8), '*', float_585740, xtie_585741)
    
    # Getting the type of 'ytie' (line 3558)
    ytie_585743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3558, 20), 'ytie')
    # Applying the binary operator '*' (line 3558)
    result_mul_585744 = python_operator(stypy.reporting.localization.Localization(__file__, 3558, 18), '*', result_mul_585742, ytie_585743)
    
    # Getting the type of 'size' (line 3558)
    size_585745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3558, 29), 'size')
    # Getting the type of 'size' (line 3558)
    size_585746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3558, 37), 'size')
    int_585747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3558, 44), 'int')
    # Applying the binary operator '-' (line 3558)
    result_sub_585748 = python_operator(stypy.reporting.localization.Localization(__file__, 3558, 37), '-', size_585746, int_585747)
    
    # Applying the binary operator '*' (line 3558)
    result_mul_585749 = python_operator(stypy.reporting.localization.Localization(__file__, 3558, 29), '*', size_585745, result_sub_585748)
    
    # Applying the binary operator 'div' (line 3557)
    result_div_585750 = python_operator(stypy.reporting.localization.Localization(__file__, 3557, 64), 'div', result_mul_585744, result_mul_585749)
    
    # Applying the binary operator '+' (line 3557)
    result_add_585751 = python_operator(stypy.reporting.localization.Localization(__file__, 3557, 10), '+', result_div_585739, result_div_585750)
    
    # Getting the type of 'x0' (line 3558)
    x0_585752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3558, 50), 'x0')
    # Getting the type of 'y0' (line 3558)
    y0_585753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3558, 55), 'y0')
    # Applying the binary operator '*' (line 3558)
    result_mul_585754 = python_operator(stypy.reporting.localization.Localization(__file__, 3558, 50), '*', x0_585752, y0_585753)
    
    float_585755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3558, 61), 'float')
    # Getting the type of 'size' (line 3559)
    size_585756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3559, 8), 'size')
    # Applying the binary operator '*' (line 3558)
    result_mul_585757 = python_operator(stypy.reporting.localization.Localization(__file__, 3558, 61), '*', float_585755, size_585756)
    
    # Getting the type of 'size' (line 3559)
    size_585758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3559, 16), 'size')
    int_585759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3559, 23), 'int')
    # Applying the binary operator '-' (line 3559)
    result_sub_585760 = python_operator(stypy.reporting.localization.Localization(__file__, 3559, 16), '-', size_585758, int_585759)
    
    # Applying the binary operator '*' (line 3559)
    result_mul_585761 = python_operator(stypy.reporting.localization.Localization(__file__, 3559, 13), '*', result_mul_585757, result_sub_585760)
    
    # Getting the type of 'size' (line 3559)
    size_585762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3559, 29), 'size')
    int_585763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3559, 36), 'int')
    # Applying the binary operator '-' (line 3559)
    result_sub_585764 = python_operator(stypy.reporting.localization.Localization(__file__, 3559, 29), '-', size_585762, int_585763)
    
    # Applying the binary operator '*' (line 3559)
    result_mul_585765 = python_operator(stypy.reporting.localization.Localization(__file__, 3559, 26), '*', result_mul_585761, result_sub_585764)
    
    # Applying the binary operator 'div' (line 3558)
    result_div_585766 = python_operator(stypy.reporting.localization.Localization(__file__, 3558, 58), 'div', result_mul_585754, result_mul_585765)
    
    # Applying the binary operator '+' (line 3558)
    result_add_585767 = python_operator(stypy.reporting.localization.Localization(__file__, 3558, 48), '+', result_add_585751, result_div_585766)
    
    # Assigning a type to the variable 'var' (line 3557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3557, 4), 'var', result_add_585767)
    
    # Assigning a Call to a Name (line 3560):
    
    # Assigning a Call to a Name (line 3560):
    
    # Call to erfc(...): (line 3560)
    # Processing the call arguments (line 3560)
    
    # Call to abs(...): (line 3560)
    # Processing the call arguments (line 3560)
    # Getting the type of 'con_minus_dis' (line 3560)
    con_minus_dis_585772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 33), 'con_minus_dis', False)
    # Processing the call keyword arguments (line 3560)
    kwargs_585773 = {}
    # Getting the type of 'np' (line 3560)
    np_585770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 26), 'np', False)
    # Obtaining the member 'abs' of a type (line 3560)
    abs_585771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3560, 26), np_585770, 'abs')
    # Calling abs(args, kwargs) (line 3560)
    abs_call_result_585774 = invoke(stypy.reporting.localization.Localization(__file__, 3560, 26), abs_585771, *[con_minus_dis_585772], **kwargs_585773)
    
    
    # Call to sqrt(...): (line 3560)
    # Processing the call arguments (line 3560)
    # Getting the type of 'var' (line 3560)
    var_585777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 58), 'var', False)
    # Processing the call keyword arguments (line 3560)
    kwargs_585778 = {}
    # Getting the type of 'np' (line 3560)
    np_585775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 50), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 3560)
    sqrt_585776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3560, 50), np_585775, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3560)
    sqrt_call_result_585779 = invoke(stypy.reporting.localization.Localization(__file__, 3560, 50), sqrt_585776, *[var_585777], **kwargs_585778)
    
    # Applying the binary operator 'div' (line 3560)
    result_div_585780 = python_operator(stypy.reporting.localization.Localization(__file__, 3560, 26), 'div', abs_call_result_585774, sqrt_call_result_585779)
    
    
    # Call to sqrt(...): (line 3560)
    # Processing the call arguments (line 3560)
    int_585783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3560, 73), 'int')
    # Processing the call keyword arguments (line 3560)
    kwargs_585784 = {}
    # Getting the type of 'np' (line 3560)
    np_585781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 65), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 3560)
    sqrt_585782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3560, 65), np_585781, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3560)
    sqrt_call_result_585785 = invoke(stypy.reporting.localization.Localization(__file__, 3560, 65), sqrt_585782, *[int_585783], **kwargs_585784)
    
    # Applying the binary operator 'div' (line 3560)
    result_div_585786 = python_operator(stypy.reporting.localization.Localization(__file__, 3560, 63), 'div', result_div_585780, sqrt_call_result_585785)
    
    # Processing the call keyword arguments (line 3560)
    kwargs_585787 = {}
    # Getting the type of 'special' (line 3560)
    special_585768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 13), 'special', False)
    # Obtaining the member 'erfc' of a type (line 3560)
    erfc_585769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3560, 13), special_585768, 'erfc')
    # Calling erfc(args, kwargs) (line 3560)
    erfc_call_result_585788 = invoke(stypy.reporting.localization.Localization(__file__, 3560, 13), erfc_585769, *[result_div_585786], **kwargs_585787)
    
    # Assigning a type to the variable 'pvalue' (line 3560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3560, 4), 'pvalue', erfc_call_result_585788)
    
    # Call to KendalltauResult(...): (line 3563)
    # Processing the call arguments (line 3563)
    
    # Call to min(...): (line 3563)
    # Processing the call arguments (line 3563)
    float_585791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3563, 32), 'float')
    
    # Call to max(...): (line 3563)
    # Processing the call arguments (line 3563)
    float_585793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3563, 40), 'float')
    # Getting the type of 'tau' (line 3563)
    tau_585794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3563, 45), 'tau', False)
    # Processing the call keyword arguments (line 3563)
    kwargs_585795 = {}
    # Getting the type of 'max' (line 3563)
    max_585792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3563, 36), 'max', False)
    # Calling max(args, kwargs) (line 3563)
    max_call_result_585796 = invoke(stypy.reporting.localization.Localization(__file__, 3563, 36), max_585792, *[float_585793, tau_585794], **kwargs_585795)
    
    # Processing the call keyword arguments (line 3563)
    kwargs_585797 = {}
    # Getting the type of 'min' (line 3563)
    min_585790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3563, 28), 'min', False)
    # Calling min(args, kwargs) (line 3563)
    min_call_result_585798 = invoke(stypy.reporting.localization.Localization(__file__, 3563, 28), min_585790, *[float_585791, max_call_result_585796], **kwargs_585797)
    
    # Getting the type of 'pvalue' (line 3563)
    pvalue_585799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3563, 52), 'pvalue', False)
    # Processing the call keyword arguments (line 3563)
    kwargs_585800 = {}
    # Getting the type of 'KendalltauResult' (line 3563)
    KendalltauResult_585789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3563, 11), 'KendalltauResult', False)
    # Calling KendalltauResult(args, kwargs) (line 3563)
    KendalltauResult_call_result_585801 = invoke(stypy.reporting.localization.Localization(__file__, 3563, 11), KendalltauResult_585789, *[min_call_result_585798, pvalue_585799], **kwargs_585800)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3563, 4), 'stypy_return_type', KendalltauResult_call_result_585801)
    
    # ################# End of 'kendalltau(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kendalltau' in the type store
    # Getting the type of 'stypy_return_type' (line 3418)
    stypy_return_type_585802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_585802)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kendalltau'
    return stypy_return_type_585802

# Assigning a type to the variable 'kendalltau' (line 3418)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3418, 0), 'kendalltau', kendalltau)

# Assigning a Call to a Name (line 3566):

# Assigning a Call to a Name (line 3566):

# Call to namedtuple(...): (line 3566)
# Processing the call arguments (line 3566)
str_585804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3566, 31), 'str', 'WeightedTauResult')

# Obtaining an instance of the builtin type 'tuple' (line 3566)
tuple_585805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3566, 53), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 3566)
# Adding element type (line 3566)
str_585806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3566, 53), 'str', 'correlation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3566, 53), tuple_585805, str_585806)
# Adding element type (line 3566)
str_585807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3566, 68), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3566, 53), tuple_585805, str_585807)

# Processing the call keyword arguments (line 3566)
kwargs_585808 = {}
# Getting the type of 'namedtuple' (line 3566)
namedtuple_585803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 20), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 3566)
namedtuple_call_result_585809 = invoke(stypy.reporting.localization.Localization(__file__, 3566, 20), namedtuple_585803, *[str_585804, tuple_585805], **kwargs_585808)

# Assigning a type to the variable 'WeightedTauResult' (line 3566)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 0), 'WeightedTauResult', namedtuple_call_result_585809)

@norecursion
def weightedtau(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 3569)
    True_585810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3569, 27), 'True')
    # Getting the type of 'None' (line 3569)
    None_585811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3569, 41), 'None')
    # Getting the type of 'True' (line 3569)
    True_585812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3569, 56), 'True')
    defaults = [True_585810, None_585811, True_585812]
    # Create a new context for function 'weightedtau'
    module_type_store = module_type_store.open_function_context('weightedtau', 3569, 0, False)
    
    # Passed parameters checking function
    weightedtau.stypy_localization = localization
    weightedtau.stypy_type_of_self = None
    weightedtau.stypy_type_store = module_type_store
    weightedtau.stypy_function_name = 'weightedtau'
    weightedtau.stypy_param_names_list = ['x', 'y', 'rank', 'weigher', 'additive']
    weightedtau.stypy_varargs_param_name = None
    weightedtau.stypy_kwargs_param_name = None
    weightedtau.stypy_call_defaults = defaults
    weightedtau.stypy_call_varargs = varargs
    weightedtau.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'weightedtau', ['x', 'y', 'rank', 'weigher', 'additive'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'weightedtau', localization, ['x', 'y', 'rank', 'weigher', 'additive'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'weightedtau(...)' code ##################

    str_585813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3700, (-1)), 'str', '\n    Compute a weighted version of Kendall\'s :math:`\\tau`.\n\n    The weighted :math:`\\tau` is a weighted version of Kendall\'s\n    :math:`\\tau` in which exchanges of high weight are more influential than\n    exchanges of low weight. The default parameters compute the additive\n    hyperbolic version of the index, :math:`\\tau_\\mathrm h`, which has\n    been shown to provide the best balance between important and\n    unimportant elements [1]_.\n\n    The weighting is defined by means of a rank array, which assigns a\n    nonnegative rank to each element, and a weigher function, which\n    assigns a weight based from the rank to each element. The weight of an\n    exchange is then the sum or the product of the weights of the ranks of\n    the exchanged elements. The default parameters compute\n    :math:`\\tau_\\mathrm h`: an exchange between elements with rank\n    :math:`r` and :math:`s` (starting from zero) has weight\n    :math:`1/(r+1) + 1/(s+1)`.\n\n    Specifying a rank array is meaningful only if you have in mind an\n    external criterion of importance. If, as it usually happens, you do\n    not have in mind a specific rank, the weighted :math:`\\tau` is\n    defined by averaging the values obtained using the decreasing\n    lexicographical rank by (`x`, `y`) and by (`y`, `x`). This is the\n    behavior with default parameters.\n\n    Note that if you are computing the weighted :math:`\\tau` on arrays of\n    ranks, rather than of scores (i.e., a larger value implies a lower\n    rank) you must negate the ranks, so that elements of higher rank are\n    associated with a larger value.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of scores, of the same shape. If arrays are not 1-D, they will\n        be flattened to 1-D.\n    rank: array_like of ints or bool, optional\n        A nonnegative rank assigned to each element. If it is None, the\n        decreasing lexicographical rank by (`x`, `y`) will be used: elements of\n        higher rank will be those with larger `x`-values, using `y`-values to\n        break ties (in particular, swapping `x` and `y` will give a different\n        result). If it is False, the element indices will be used\n        directly as ranks. The default is True, in which case this\n        function returns the average of the values obtained using the\n        decreasing lexicographical rank by (`x`, `y`) and by (`y`, `x`).\n    weigher : callable, optional\n        The weigher function. Must map nonnegative integers (zero\n        representing the most important element) to a nonnegative weight.\n        The default, None, provides hyperbolic weighing, that is,\n        rank :math:`r` is mapped to weight :math:`1/(r+1)`.\n    additive : bool, optional\n        If True, the weight of an exchange is computed by adding the\n        weights of the ranks of the exchanged elements; otherwise, the weights\n        are multiplied. The default is True.\n\n    Returns\n    -------\n    correlation : float\n       The weighted :math:`\\tau` correlation index.\n    pvalue : float\n       Presently ``np.nan``, as the null statistics is unknown (even in the\n       additive hyperbolic case).\n\n    See also\n    --------\n    kendalltau : Calculates Kendall\'s tau.\n    spearmanr : Calculates a Spearman rank-order correlation coefficient.\n    theilslopes : Computes the Theil-Sen estimator for a set of points (x, y).\n\n    Notes\n    -----\n    This function uses an :math:`O(n \\log n)`, mergesort-based algorithm\n    [1]_ that is a weighted extension of Knight\'s algorithm for Kendall\'s\n    :math:`\\tau` [2]_. It can compute Shieh\'s weighted :math:`\\tau` [3]_\n    between rankings without ties (i.e., permutations) by setting\n    `additive` and `rank` to False, as the definition given in [1]_ is a\n    generalization of Shieh\'s.\n\n    NaNs are considered the smallest possible score.\n\n    .. versionadded:: 0.19.0\n\n    References\n    ----------\n    .. [1] Sebastiano Vigna, "A weighted correlation index for rankings with\n           ties", Proceedings of the 24th international conference on World\n           Wide Web, pp. 1166-1176, ACM, 2015.\n    .. [2] W.R. Knight, "A Computer Method for Calculating Kendall\'s Tau with\n           Ungrouped Data", Journal of the American Statistical Association,\n           Vol. 61, No. 314, Part 1, pp. 436-439, 1966.\n    .. [3] Grace S. Shieh. "A weighted Kendall\'s tau statistic", Statistics &\n           Probability Letters, Vol. 39, No. 1, pp. 17-24, 1998.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> x = [12, 2, 1, 12, 2]\n    >>> y = [1, 4, 7, 1, 0]\n    >>> tau, p_value = stats.weightedtau(x, y)\n    >>> tau\n    -0.56694968153682723\n    >>> p_value\n    nan\n    >>> tau, p_value = stats.weightedtau(x, y, additive=False)\n    >>> tau\n    -0.62205716951801038\n\n    NaNs are considered the smallest possible score:\n\n    >>> x = [12, 2, 1, 12, 2]\n    >>> y = [1, 4, 7, 1, np.nan]\n    >>> tau, _ = stats.weightedtau(x, y)\n    >>> tau\n    -0.56694968153682723\n\n    This is exactly Kendall\'s tau:\n\n    >>> x = [12, 2, 1, 12, 2]\n    >>> y = [1, 4, 7, 1, 0]\n    >>> tau, _ = stats.weightedtau(x, y, weigher=lambda x: 1)\n    >>> tau\n    -0.47140452079103173\n\n    >>> x = [12, 2, 1, 12, 2]\n    >>> y = [1, 4, 7, 1, 0]\n    >>> stats.weightedtau(x, y, rank=None)\n    WeightedTauResult(correlation=-0.4157652301037516, pvalue=nan)\n    >>> stats.weightedtau(y, x, rank=None)\n    WeightedTauResult(correlation=-0.71813413296990281, pvalue=nan)\n\n    ')
    
    # Assigning a Call to a Name (line 3701):
    
    # Assigning a Call to a Name (line 3701):
    
    # Call to ravel(...): (line 3701)
    # Processing the call keyword arguments (line 3701)
    kwargs_585820 = {}
    
    # Call to asarray(...): (line 3701)
    # Processing the call arguments (line 3701)
    # Getting the type of 'x' (line 3701)
    x_585816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3701, 19), 'x', False)
    # Processing the call keyword arguments (line 3701)
    kwargs_585817 = {}
    # Getting the type of 'np' (line 3701)
    np_585814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3701, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3701)
    asarray_585815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3701, 8), np_585814, 'asarray')
    # Calling asarray(args, kwargs) (line 3701)
    asarray_call_result_585818 = invoke(stypy.reporting.localization.Localization(__file__, 3701, 8), asarray_585815, *[x_585816], **kwargs_585817)
    
    # Obtaining the member 'ravel' of a type (line 3701)
    ravel_585819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3701, 8), asarray_call_result_585818, 'ravel')
    # Calling ravel(args, kwargs) (line 3701)
    ravel_call_result_585821 = invoke(stypy.reporting.localization.Localization(__file__, 3701, 8), ravel_585819, *[], **kwargs_585820)
    
    # Assigning a type to the variable 'x' (line 3701)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3701, 4), 'x', ravel_call_result_585821)
    
    # Assigning a Call to a Name (line 3702):
    
    # Assigning a Call to a Name (line 3702):
    
    # Call to ravel(...): (line 3702)
    # Processing the call keyword arguments (line 3702)
    kwargs_585828 = {}
    
    # Call to asarray(...): (line 3702)
    # Processing the call arguments (line 3702)
    # Getting the type of 'y' (line 3702)
    y_585824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3702, 19), 'y', False)
    # Processing the call keyword arguments (line 3702)
    kwargs_585825 = {}
    # Getting the type of 'np' (line 3702)
    np_585822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3702, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3702)
    asarray_585823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3702, 8), np_585822, 'asarray')
    # Calling asarray(args, kwargs) (line 3702)
    asarray_call_result_585826 = invoke(stypy.reporting.localization.Localization(__file__, 3702, 8), asarray_585823, *[y_585824], **kwargs_585825)
    
    # Obtaining the member 'ravel' of a type (line 3702)
    ravel_585827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3702, 8), asarray_call_result_585826, 'ravel')
    # Calling ravel(args, kwargs) (line 3702)
    ravel_call_result_585829 = invoke(stypy.reporting.localization.Localization(__file__, 3702, 8), ravel_585827, *[], **kwargs_585828)
    
    # Assigning a type to the variable 'y' (line 3702)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3702, 4), 'y', ravel_call_result_585829)
    
    
    # Getting the type of 'x' (line 3704)
    x_585830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3704, 7), 'x')
    # Obtaining the member 'size' of a type (line 3704)
    size_585831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3704, 7), x_585830, 'size')
    # Getting the type of 'y' (line 3704)
    y_585832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3704, 17), 'y')
    # Obtaining the member 'size' of a type (line 3704)
    size_585833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3704, 17), y_585832, 'size')
    # Applying the binary operator '!=' (line 3704)
    result_ne_585834 = python_operator(stypy.reporting.localization.Localization(__file__, 3704, 7), '!=', size_585831, size_585833)
    
    # Testing the type of an if condition (line 3704)
    if_condition_585835 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3704, 4), result_ne_585834)
    # Assigning a type to the variable 'if_condition_585835' (line 3704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3704, 4), 'if_condition_585835', if_condition_585835)
    # SSA begins for if statement (line 3704)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3705)
    # Processing the call arguments (line 3705)
    str_585837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3705, 25), 'str', 'All inputs to `weightedtau` must be of the same size, found x-size %s and y-size %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3706)
    tuple_585838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3706, 60), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3706)
    # Adding element type (line 3706)
    # Getting the type of 'x' (line 3706)
    x_585839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3706, 60), 'x', False)
    # Obtaining the member 'size' of a type (line 3706)
    size_585840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3706, 60), x_585839, 'size')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3706, 60), tuple_585838, size_585840)
    # Adding element type (line 3706)
    # Getting the type of 'y' (line 3706)
    y_585841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3706, 68), 'y', False)
    # Obtaining the member 'size' of a type (line 3706)
    size_585842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3706, 68), y_585841, 'size')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3706, 60), tuple_585838, size_585842)
    
    # Applying the binary operator '%' (line 3705)
    result_mod_585843 = python_operator(stypy.reporting.localization.Localization(__file__, 3705, 25), '%', str_585837, tuple_585838)
    
    # Processing the call keyword arguments (line 3705)
    kwargs_585844 = {}
    # Getting the type of 'ValueError' (line 3705)
    ValueError_585836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3705, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3705)
    ValueError_call_result_585845 = invoke(stypy.reporting.localization.Localization(__file__, 3705, 14), ValueError_585836, *[result_mod_585843], **kwargs_585844)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3705, 8), ValueError_call_result_585845, 'raise parameter', BaseException)
    # SSA join for if statement (line 3704)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'x' (line 3707)
    x_585846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3707, 11), 'x')
    # Obtaining the member 'size' of a type (line 3707)
    size_585847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3707, 11), x_585846, 'size')
    # Applying the 'not' unary operator (line 3707)
    result_not__585848 = python_operator(stypy.reporting.localization.Localization(__file__, 3707, 7), 'not', size_585847)
    
    # Testing the type of an if condition (line 3707)
    if_condition_585849 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3707, 4), result_not__585848)
    # Assigning a type to the variable 'if_condition_585849' (line 3707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3707, 4), 'if_condition_585849', if_condition_585849)
    # SSA begins for if statement (line 3707)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to WeightedTauResult(...): (line 3708)
    # Processing the call arguments (line 3708)
    # Getting the type of 'np' (line 3708)
    np_585851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 33), 'np', False)
    # Obtaining the member 'nan' of a type (line 3708)
    nan_585852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3708, 33), np_585851, 'nan')
    # Getting the type of 'np' (line 3708)
    np_585853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 41), 'np', False)
    # Obtaining the member 'nan' of a type (line 3708)
    nan_585854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3708, 41), np_585853, 'nan')
    # Processing the call keyword arguments (line 3708)
    kwargs_585855 = {}
    # Getting the type of 'WeightedTauResult' (line 3708)
    WeightedTauResult_585850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 15), 'WeightedTauResult', False)
    # Calling WeightedTauResult(args, kwargs) (line 3708)
    WeightedTauResult_call_result_585856 = invoke(stypy.reporting.localization.Localization(__file__, 3708, 15), WeightedTauResult_585850, *[nan_585852, nan_585854], **kwargs_585855)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3708, 8), 'stypy_return_type', WeightedTauResult_call_result_585856)
    # SSA join for if statement (line 3707)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isnan(...): (line 3711)
    # Processing the call arguments (line 3711)
    
    # Call to min(...): (line 3711)
    # Processing the call arguments (line 3711)
    # Getting the type of 'x' (line 3711)
    x_585861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 23), 'x', False)
    # Processing the call keyword arguments (line 3711)
    kwargs_585862 = {}
    # Getting the type of 'np' (line 3711)
    np_585859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 16), 'np', False)
    # Obtaining the member 'min' of a type (line 3711)
    min_585860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3711, 16), np_585859, 'min')
    # Calling min(args, kwargs) (line 3711)
    min_call_result_585863 = invoke(stypy.reporting.localization.Localization(__file__, 3711, 16), min_585860, *[x_585861], **kwargs_585862)
    
    # Processing the call keyword arguments (line 3711)
    kwargs_585864 = {}
    # Getting the type of 'np' (line 3711)
    np_585857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 7), 'np', False)
    # Obtaining the member 'isnan' of a type (line 3711)
    isnan_585858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3711, 7), np_585857, 'isnan')
    # Calling isnan(args, kwargs) (line 3711)
    isnan_call_result_585865 = invoke(stypy.reporting.localization.Localization(__file__, 3711, 7), isnan_585858, *[min_call_result_585863], **kwargs_585864)
    
    # Testing the type of an if condition (line 3711)
    if_condition_585866 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3711, 4), isnan_call_result_585865)
    # Assigning a type to the variable 'if_condition_585866' (line 3711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3711, 4), 'if_condition_585866', if_condition_585866)
    # SSA begins for if statement (line 3711)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3712):
    
    # Assigning a Call to a Name (line 3712):
    
    # Call to _toint64(...): (line 3712)
    # Processing the call arguments (line 3712)
    # Getting the type of 'x' (line 3712)
    x_585868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3712, 25), 'x', False)
    # Processing the call keyword arguments (line 3712)
    kwargs_585869 = {}
    # Getting the type of '_toint64' (line 3712)
    _toint64_585867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3712, 16), '_toint64', False)
    # Calling _toint64(args, kwargs) (line 3712)
    _toint64_call_result_585870 = invoke(stypy.reporting.localization.Localization(__file__, 3712, 16), _toint64_585867, *[x_585868], **kwargs_585869)
    
    # Assigning a type to the variable 'x' (line 3712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3712, 12), 'x', _toint64_call_result_585870)
    # SSA join for if statement (line 3711)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isnan(...): (line 3713)
    # Processing the call arguments (line 3713)
    
    # Call to min(...): (line 3713)
    # Processing the call arguments (line 3713)
    # Getting the type of 'y' (line 3713)
    y_585875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 23), 'y', False)
    # Processing the call keyword arguments (line 3713)
    kwargs_585876 = {}
    # Getting the type of 'np' (line 3713)
    np_585873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 16), 'np', False)
    # Obtaining the member 'min' of a type (line 3713)
    min_585874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3713, 16), np_585873, 'min')
    # Calling min(args, kwargs) (line 3713)
    min_call_result_585877 = invoke(stypy.reporting.localization.Localization(__file__, 3713, 16), min_585874, *[y_585875], **kwargs_585876)
    
    # Processing the call keyword arguments (line 3713)
    kwargs_585878 = {}
    # Getting the type of 'np' (line 3713)
    np_585871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 7), 'np', False)
    # Obtaining the member 'isnan' of a type (line 3713)
    isnan_585872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3713, 7), np_585871, 'isnan')
    # Calling isnan(args, kwargs) (line 3713)
    isnan_call_result_585879 = invoke(stypy.reporting.localization.Localization(__file__, 3713, 7), isnan_585872, *[min_call_result_585877], **kwargs_585878)
    
    # Testing the type of an if condition (line 3713)
    if_condition_585880 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3713, 4), isnan_call_result_585879)
    # Assigning a type to the variable 'if_condition_585880' (line 3713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3713, 4), 'if_condition_585880', if_condition_585880)
    # SSA begins for if statement (line 3713)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3714):
    
    # Assigning a Call to a Name (line 3714):
    
    # Call to _toint64(...): (line 3714)
    # Processing the call arguments (line 3714)
    # Getting the type of 'y' (line 3714)
    y_585882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 25), 'y', False)
    # Processing the call keyword arguments (line 3714)
    kwargs_585883 = {}
    # Getting the type of '_toint64' (line 3714)
    _toint64_585881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 16), '_toint64', False)
    # Calling _toint64(args, kwargs) (line 3714)
    _toint64_call_result_585884 = invoke(stypy.reporting.localization.Localization(__file__, 3714, 16), _toint64_585881, *[y_585882], **kwargs_585883)
    
    # Assigning a type to the variable 'y' (line 3714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3714, 12), 'y', _toint64_call_result_585884)
    # SSA join for if statement (line 3713)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'x' (line 3717)
    x_585885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3717, 7), 'x')
    # Obtaining the member 'dtype' of a type (line 3717)
    dtype_585886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3717, 7), x_585885, 'dtype')
    # Getting the type of 'y' (line 3717)
    y_585887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3717, 18), 'y')
    # Obtaining the member 'dtype' of a type (line 3717)
    dtype_585888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3717, 18), y_585887, 'dtype')
    # Applying the binary operator '!=' (line 3717)
    result_ne_585889 = python_operator(stypy.reporting.localization.Localization(__file__, 3717, 7), '!=', dtype_585886, dtype_585888)
    
    # Testing the type of an if condition (line 3717)
    if_condition_585890 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3717, 4), result_ne_585889)
    # Assigning a type to the variable 'if_condition_585890' (line 3717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3717, 4), 'if_condition_585890', if_condition_585890)
    # SSA begins for if statement (line 3717)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'x' (line 3718)
    x_585891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 11), 'x')
    # Obtaining the member 'dtype' of a type (line 3718)
    dtype_585892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3718, 11), x_585891, 'dtype')
    # Getting the type of 'np' (line 3718)
    np_585893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 22), 'np')
    # Obtaining the member 'int64' of a type (line 3718)
    int64_585894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3718, 22), np_585893, 'int64')
    # Applying the binary operator '!=' (line 3718)
    result_ne_585895 = python_operator(stypy.reporting.localization.Localization(__file__, 3718, 11), '!=', dtype_585892, int64_585894)
    
    # Testing the type of an if condition (line 3718)
    if_condition_585896 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3718, 8), result_ne_585895)
    # Assigning a type to the variable 'if_condition_585896' (line 3718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3718, 8), 'if_condition_585896', if_condition_585896)
    # SSA begins for if statement (line 3718)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3719):
    
    # Assigning a Call to a Name (line 3719):
    
    # Call to _toint64(...): (line 3719)
    # Processing the call arguments (line 3719)
    # Getting the type of 'x' (line 3719)
    x_585898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3719, 25), 'x', False)
    # Processing the call keyword arguments (line 3719)
    kwargs_585899 = {}
    # Getting the type of '_toint64' (line 3719)
    _toint64_585897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3719, 16), '_toint64', False)
    # Calling _toint64(args, kwargs) (line 3719)
    _toint64_call_result_585900 = invoke(stypy.reporting.localization.Localization(__file__, 3719, 16), _toint64_585897, *[x_585898], **kwargs_585899)
    
    # Assigning a type to the variable 'x' (line 3719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3719, 12), 'x', _toint64_call_result_585900)
    # SSA join for if statement (line 3718)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'y' (line 3720)
    y_585901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3720, 11), 'y')
    # Obtaining the member 'dtype' of a type (line 3720)
    dtype_585902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3720, 11), y_585901, 'dtype')
    # Getting the type of 'np' (line 3720)
    np_585903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3720, 22), 'np')
    # Obtaining the member 'int64' of a type (line 3720)
    int64_585904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3720, 22), np_585903, 'int64')
    # Applying the binary operator '!=' (line 3720)
    result_ne_585905 = python_operator(stypy.reporting.localization.Localization(__file__, 3720, 11), '!=', dtype_585902, int64_585904)
    
    # Testing the type of an if condition (line 3720)
    if_condition_585906 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3720, 8), result_ne_585905)
    # Assigning a type to the variable 'if_condition_585906' (line 3720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3720, 8), 'if_condition_585906', if_condition_585906)
    # SSA begins for if statement (line 3720)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3721):
    
    # Assigning a Call to a Name (line 3721):
    
    # Call to _toint64(...): (line 3721)
    # Processing the call arguments (line 3721)
    # Getting the type of 'y' (line 3721)
    y_585908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 25), 'y', False)
    # Processing the call keyword arguments (line 3721)
    kwargs_585909 = {}
    # Getting the type of '_toint64' (line 3721)
    _toint64_585907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 16), '_toint64', False)
    # Calling _toint64(args, kwargs) (line 3721)
    _toint64_call_result_585910 = invoke(stypy.reporting.localization.Localization(__file__, 3721, 16), _toint64_585907, *[y_585908], **kwargs_585909)
    
    # Assigning a type to the variable 'y' (line 3721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3721, 12), 'y', _toint64_call_result_585910)
    # SSA join for if statement (line 3720)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 3717)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'x' (line 3723)
    x_585911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 11), 'x')
    # Obtaining the member 'dtype' of a type (line 3723)
    dtype_585912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3723, 11), x_585911, 'dtype')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3723)
    tuple_585913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3723, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3723)
    # Adding element type (line 3723)
    # Getting the type of 'np' (line 3723)
    np_585914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 27), 'np')
    # Obtaining the member 'int32' of a type (line 3723)
    int32_585915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3723, 27), np_585914, 'int32')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3723, 27), tuple_585913, int32_585915)
    # Adding element type (line 3723)
    # Getting the type of 'np' (line 3723)
    np_585916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 37), 'np')
    # Obtaining the member 'int64' of a type (line 3723)
    int64_585917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3723, 37), np_585916, 'int64')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3723, 27), tuple_585913, int64_585917)
    # Adding element type (line 3723)
    # Getting the type of 'np' (line 3723)
    np_585918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 47), 'np')
    # Obtaining the member 'float32' of a type (line 3723)
    float32_585919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3723, 47), np_585918, 'float32')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3723, 27), tuple_585913, float32_585919)
    # Adding element type (line 3723)
    # Getting the type of 'np' (line 3723)
    np_585920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 59), 'np')
    # Obtaining the member 'float64' of a type (line 3723)
    float64_585921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3723, 59), np_585920, 'float64')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3723, 27), tuple_585913, float64_585921)
    
    # Applying the binary operator 'notin' (line 3723)
    result_contains_585922 = python_operator(stypy.reporting.localization.Localization(__file__, 3723, 11), 'notin', dtype_585912, tuple_585913)
    
    # Testing the type of an if condition (line 3723)
    if_condition_585923 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3723, 8), result_contains_585922)
    # Assigning a type to the variable 'if_condition_585923' (line 3723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3723, 8), 'if_condition_585923', if_condition_585923)
    # SSA begins for if statement (line 3723)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3724):
    
    # Assigning a Call to a Name (line 3724):
    
    # Call to _toint64(...): (line 3724)
    # Processing the call arguments (line 3724)
    # Getting the type of 'x' (line 3724)
    x_585925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3724, 25), 'x', False)
    # Processing the call keyword arguments (line 3724)
    kwargs_585926 = {}
    # Getting the type of '_toint64' (line 3724)
    _toint64_585924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3724, 16), '_toint64', False)
    # Calling _toint64(args, kwargs) (line 3724)
    _toint64_call_result_585927 = invoke(stypy.reporting.localization.Localization(__file__, 3724, 16), _toint64_585924, *[x_585925], **kwargs_585926)
    
    # Assigning a type to the variable 'x' (line 3724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3724, 12), 'x', _toint64_call_result_585927)
    
    # Assigning a Call to a Name (line 3725):
    
    # Assigning a Call to a Name (line 3725):
    
    # Call to _toint64(...): (line 3725)
    # Processing the call arguments (line 3725)
    # Getting the type of 'y' (line 3725)
    y_585929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3725, 25), 'y', False)
    # Processing the call keyword arguments (line 3725)
    kwargs_585930 = {}
    # Getting the type of '_toint64' (line 3725)
    _toint64_585928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3725, 16), '_toint64', False)
    # Calling _toint64(args, kwargs) (line 3725)
    _toint64_call_result_585931 = invoke(stypy.reporting.localization.Localization(__file__, 3725, 16), _toint64_585928, *[y_585929], **kwargs_585930)
    
    # Assigning a type to the variable 'y' (line 3725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3725, 12), 'y', _toint64_call_result_585931)
    # SSA join for if statement (line 3723)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3717)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'rank' (line 3727)
    rank_585932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3727, 7), 'rank')
    # Getting the type of 'True' (line 3727)
    True_585933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3727, 15), 'True')
    # Applying the binary operator 'is' (line 3727)
    result_is__585934 = python_operator(stypy.reporting.localization.Localization(__file__, 3727, 7), 'is', rank_585932, True_585933)
    
    # Testing the type of an if condition (line 3727)
    if_condition_585935 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3727, 4), result_is__585934)
    # Assigning a type to the variable 'if_condition_585935' (line 3727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3727, 4), 'if_condition_585935', if_condition_585935)
    # SSA begins for if statement (line 3727)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to WeightedTauResult(...): (line 3728)
    # Processing the call arguments (line 3728)
    
    # Call to _weightedrankedtau(...): (line 3729)
    # Processing the call arguments (line 3729)
    # Getting the type of 'x' (line 3729)
    x_585938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 31), 'x', False)
    # Getting the type of 'y' (line 3729)
    y_585939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 34), 'y', False)
    # Getting the type of 'None' (line 3729)
    None_585940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 37), 'None', False)
    # Getting the type of 'weigher' (line 3729)
    weigher_585941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 43), 'weigher', False)
    # Getting the type of 'additive' (line 3729)
    additive_585942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 52), 'additive', False)
    # Processing the call keyword arguments (line 3729)
    kwargs_585943 = {}
    # Getting the type of '_weightedrankedtau' (line 3729)
    _weightedrankedtau_585937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 12), '_weightedrankedtau', False)
    # Calling _weightedrankedtau(args, kwargs) (line 3729)
    _weightedrankedtau_call_result_585944 = invoke(stypy.reporting.localization.Localization(__file__, 3729, 12), _weightedrankedtau_585937, *[x_585938, y_585939, None_585940, weigher_585941, additive_585942], **kwargs_585943)
    
    
    # Call to _weightedrankedtau(...): (line 3730)
    # Processing the call arguments (line 3730)
    # Getting the type of 'y' (line 3730)
    y_585946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 31), 'y', False)
    # Getting the type of 'x' (line 3730)
    x_585947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 34), 'x', False)
    # Getting the type of 'None' (line 3730)
    None_585948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 37), 'None', False)
    # Getting the type of 'weigher' (line 3730)
    weigher_585949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 43), 'weigher', False)
    # Getting the type of 'additive' (line 3730)
    additive_585950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 52), 'additive', False)
    # Processing the call keyword arguments (line 3730)
    kwargs_585951 = {}
    # Getting the type of '_weightedrankedtau' (line 3730)
    _weightedrankedtau_585945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 12), '_weightedrankedtau', False)
    # Calling _weightedrankedtau(args, kwargs) (line 3730)
    _weightedrankedtau_call_result_585952 = invoke(stypy.reporting.localization.Localization(__file__, 3730, 12), _weightedrankedtau_585945, *[y_585946, x_585947, None_585948, weigher_585949, additive_585950], **kwargs_585951)
    
    # Applying the binary operator '+' (line 3729)
    result_add_585953 = python_operator(stypy.reporting.localization.Localization(__file__, 3729, 12), '+', _weightedrankedtau_call_result_585944, _weightedrankedtau_call_result_585952)
    
    int_585954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3731, 16), 'int')
    # Applying the binary operator 'div' (line 3728)
    result_div_585955 = python_operator(stypy.reporting.localization.Localization(__file__, 3728, 33), 'div', result_add_585953, int_585954)
    
    # Getting the type of 'np' (line 3731)
    np_585956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3731, 19), 'np', False)
    # Obtaining the member 'nan' of a type (line 3731)
    nan_585957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3731, 19), np_585956, 'nan')
    # Processing the call keyword arguments (line 3728)
    kwargs_585958 = {}
    # Getting the type of 'WeightedTauResult' (line 3728)
    WeightedTauResult_585936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3728, 15), 'WeightedTauResult', False)
    # Calling WeightedTauResult(args, kwargs) (line 3728)
    WeightedTauResult_call_result_585959 = invoke(stypy.reporting.localization.Localization(__file__, 3728, 15), WeightedTauResult_585936, *[result_div_585955, nan_585957], **kwargs_585958)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3728, 8), 'stypy_return_type', WeightedTauResult_call_result_585959)
    # SSA join for if statement (line 3727)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'rank' (line 3733)
    rank_585960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3733, 7), 'rank')
    # Getting the type of 'False' (line 3733)
    False_585961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3733, 15), 'False')
    # Applying the binary operator 'is' (line 3733)
    result_is__585962 = python_operator(stypy.reporting.localization.Localization(__file__, 3733, 7), 'is', rank_585960, False_585961)
    
    # Testing the type of an if condition (line 3733)
    if_condition_585963 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3733, 4), result_is__585962)
    # Assigning a type to the variable 'if_condition_585963' (line 3733)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3733, 4), 'if_condition_585963', if_condition_585963)
    # SSA begins for if statement (line 3733)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3734):
    
    # Assigning a Call to a Name (line 3734):
    
    # Call to arange(...): (line 3734)
    # Processing the call arguments (line 3734)
    # Getting the type of 'x' (line 3734)
    x_585966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3734, 25), 'x', False)
    # Obtaining the member 'size' of a type (line 3734)
    size_585967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3734, 25), x_585966, 'size')
    # Processing the call keyword arguments (line 3734)
    # Getting the type of 'np' (line 3734)
    np_585968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3734, 39), 'np', False)
    # Obtaining the member 'intp' of a type (line 3734)
    intp_585969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3734, 39), np_585968, 'intp')
    keyword_585970 = intp_585969
    kwargs_585971 = {'dtype': keyword_585970}
    # Getting the type of 'np' (line 3734)
    np_585964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3734, 15), 'np', False)
    # Obtaining the member 'arange' of a type (line 3734)
    arange_585965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3734, 15), np_585964, 'arange')
    # Calling arange(args, kwargs) (line 3734)
    arange_call_result_585972 = invoke(stypy.reporting.localization.Localization(__file__, 3734, 15), arange_585965, *[size_585967], **kwargs_585971)
    
    # Assigning a type to the variable 'rank' (line 3734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3734, 8), 'rank', arange_call_result_585972)
    # SSA branch for the else part of an if statement (line 3733)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 3735)
    # Getting the type of 'rank' (line 3735)
    rank_585973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 9), 'rank')
    # Getting the type of 'None' (line 3735)
    None_585974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 21), 'None')
    
    (may_be_585975, more_types_in_union_585976) = may_not_be_none(rank_585973, None_585974)

    if may_be_585975:

        if more_types_in_union_585976:
            # Runtime conditional SSA (line 3735)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3736):
        
        # Assigning a Call to a Name (line 3736):
        
        # Call to ravel(...): (line 3736)
        # Processing the call keyword arguments (line 3736)
        kwargs_585983 = {}
        
        # Call to asarray(...): (line 3736)
        # Processing the call arguments (line 3736)
        # Getting the type of 'rank' (line 3736)
        rank_585979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3736, 26), 'rank', False)
        # Processing the call keyword arguments (line 3736)
        kwargs_585980 = {}
        # Getting the type of 'np' (line 3736)
        np_585977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3736, 15), 'np', False)
        # Obtaining the member 'asarray' of a type (line 3736)
        asarray_585978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3736, 15), np_585977, 'asarray')
        # Calling asarray(args, kwargs) (line 3736)
        asarray_call_result_585981 = invoke(stypy.reporting.localization.Localization(__file__, 3736, 15), asarray_585978, *[rank_585979], **kwargs_585980)
        
        # Obtaining the member 'ravel' of a type (line 3736)
        ravel_585982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3736, 15), asarray_call_result_585981, 'ravel')
        # Calling ravel(args, kwargs) (line 3736)
        ravel_call_result_585984 = invoke(stypy.reporting.localization.Localization(__file__, 3736, 15), ravel_585982, *[], **kwargs_585983)
        
        # Assigning a type to the variable 'rank' (line 3736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3736, 8), 'rank', ravel_call_result_585984)
        
        
        # Getting the type of 'rank' (line 3737)
        rank_585985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 11), 'rank')
        # Obtaining the member 'size' of a type (line 3737)
        size_585986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3737, 11), rank_585985, 'size')
        # Getting the type of 'x' (line 3737)
        x_585987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 24), 'x')
        # Obtaining the member 'size' of a type (line 3737)
        size_585988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3737, 24), x_585987, 'size')
        # Applying the binary operator '!=' (line 3737)
        result_ne_585989 = python_operator(stypy.reporting.localization.Localization(__file__, 3737, 11), '!=', size_585986, size_585988)
        
        # Testing the type of an if condition (line 3737)
        if_condition_585990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3737, 8), result_ne_585989)
        # Assigning a type to the variable 'if_condition_585990' (line 3737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3737, 8), 'if_condition_585990', if_condition_585990)
        # SSA begins for if statement (line 3737)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3738)
        # Processing the call arguments (line 3738)
        str_585992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3738, 29), 'str', 'All inputs to `weightedtau` must be of the same size, found x-size %s and rank-size %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3739)
        tuple_585993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3739, 63), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3739)
        # Adding element type (line 3739)
        # Getting the type of 'x' (line 3739)
        x_585994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3739, 63), 'x', False)
        # Obtaining the member 'size' of a type (line 3739)
        size_585995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3739, 63), x_585994, 'size')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3739, 63), tuple_585993, size_585995)
        # Adding element type (line 3739)
        # Getting the type of 'rank' (line 3739)
        rank_585996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3739, 71), 'rank', False)
        # Obtaining the member 'size' of a type (line 3739)
        size_585997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3739, 71), rank_585996, 'size')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3739, 63), tuple_585993, size_585997)
        
        # Applying the binary operator '%' (line 3738)
        result_mod_585998 = python_operator(stypy.reporting.localization.Localization(__file__, 3738, 29), '%', str_585992, tuple_585993)
        
        # Processing the call keyword arguments (line 3738)
        kwargs_585999 = {}
        # Getting the type of 'ValueError' (line 3738)
        ValueError_585991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3738, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3738)
        ValueError_call_result_586000 = invoke(stypy.reporting.localization.Localization(__file__, 3738, 18), ValueError_585991, *[result_mod_585998], **kwargs_585999)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3738, 12), ValueError_call_result_586000, 'raise parameter', BaseException)
        # SSA join for if statement (line 3737)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_585976:
            # SSA join for if statement (line 3735)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 3733)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to WeightedTauResult(...): (line 3741)
    # Processing the call arguments (line 3741)
    
    # Call to _weightedrankedtau(...): (line 3741)
    # Processing the call arguments (line 3741)
    # Getting the type of 'x' (line 3741)
    x_586003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 48), 'x', False)
    # Getting the type of 'y' (line 3741)
    y_586004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 51), 'y', False)
    # Getting the type of 'rank' (line 3741)
    rank_586005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 54), 'rank', False)
    # Getting the type of 'weigher' (line 3741)
    weigher_586006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 60), 'weigher', False)
    # Getting the type of 'additive' (line 3741)
    additive_586007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 69), 'additive', False)
    # Processing the call keyword arguments (line 3741)
    kwargs_586008 = {}
    # Getting the type of '_weightedrankedtau' (line 3741)
    _weightedrankedtau_586002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 29), '_weightedrankedtau', False)
    # Calling _weightedrankedtau(args, kwargs) (line 3741)
    _weightedrankedtau_call_result_586009 = invoke(stypy.reporting.localization.Localization(__file__, 3741, 29), _weightedrankedtau_586002, *[x_586003, y_586004, rank_586005, weigher_586006, additive_586007], **kwargs_586008)
    
    # Getting the type of 'np' (line 3741)
    np_586010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 80), 'np', False)
    # Obtaining the member 'nan' of a type (line 3741)
    nan_586011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3741, 80), np_586010, 'nan')
    # Processing the call keyword arguments (line 3741)
    kwargs_586012 = {}
    # Getting the type of 'WeightedTauResult' (line 3741)
    WeightedTauResult_586001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 11), 'WeightedTauResult', False)
    # Calling WeightedTauResult(args, kwargs) (line 3741)
    WeightedTauResult_call_result_586013 = invoke(stypy.reporting.localization.Localization(__file__, 3741, 11), WeightedTauResult_586001, *[_weightedrankedtau_call_result_586009, nan_586011], **kwargs_586012)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3741, 4), 'stypy_return_type', WeightedTauResult_call_result_586013)
    
    # ################# End of 'weightedtau(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'weightedtau' in the type store
    # Getting the type of 'stypy_return_type' (line 3569)
    stypy_return_type_586014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3569, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_586014)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'weightedtau'
    return stypy_return_type_586014

# Assigning a type to the variable 'weightedtau' (line 3569)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3569, 0), 'weightedtau', weightedtau)

# Assigning a Call to a Name (line 3748):

# Assigning a Call to a Name (line 3748):

# Call to namedtuple(...): (line 3748)
# Processing the call arguments (line 3748)
str_586016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3748, 31), 'str', 'Ttest_1sampResult')

# Obtaining an instance of the builtin type 'tuple' (line 3748)
tuple_586017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3748, 53), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 3748)
# Adding element type (line 3748)
str_586018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3748, 53), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3748, 53), tuple_586017, str_586018)
# Adding element type (line 3748)
str_586019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3748, 66), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3748, 53), tuple_586017, str_586019)

# Processing the call keyword arguments (line 3748)
kwargs_586020 = {}
# Getting the type of 'namedtuple' (line 3748)
namedtuple_586015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3748, 20), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 3748)
namedtuple_call_result_586021 = invoke(stypy.reporting.localization.Localization(__file__, 3748, 20), namedtuple_586015, *[str_586016, tuple_586017], **kwargs_586020)

# Assigning a type to the variable 'Ttest_1sampResult' (line 3748)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3748, 0), 'Ttest_1sampResult', namedtuple_call_result_586021)

@norecursion
def ttest_1samp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_586022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3751, 33), 'int')
    str_586023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3751, 47), 'str', 'propagate')
    defaults = [int_586022, str_586023]
    # Create a new context for function 'ttest_1samp'
    module_type_store = module_type_store.open_function_context('ttest_1samp', 3751, 0, False)
    
    # Passed parameters checking function
    ttest_1samp.stypy_localization = localization
    ttest_1samp.stypy_type_of_self = None
    ttest_1samp.stypy_type_store = module_type_store
    ttest_1samp.stypy_function_name = 'ttest_1samp'
    ttest_1samp.stypy_param_names_list = ['a', 'popmean', 'axis', 'nan_policy']
    ttest_1samp.stypy_varargs_param_name = None
    ttest_1samp.stypy_kwargs_param_name = None
    ttest_1samp.stypy_call_defaults = defaults
    ttest_1samp.stypy_call_varargs = varargs
    ttest_1samp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ttest_1samp', ['a', 'popmean', 'axis', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ttest_1samp', localization, ['a', 'popmean', 'axis', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ttest_1samp(...)' code ##################

    str_586024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3808, (-1)), 'str', "\n    Calculate the T-test for the mean of ONE group of scores.\n\n    This is a two-sided test for the null hypothesis that the expected value\n    (mean) of a sample of independent observations `a` is equal to the given\n    population mean, `popmean`.\n\n    Parameters\n    ----------\n    a : array_like\n        sample observation\n    popmean : float or array_like\n        expected value in null hypothesis, if array_like than it must have the\n        same shape as `a` excluding the axis dimension\n    axis : int or None, optional\n        Axis along which to compute test. If None, compute over the whole\n        array `a`.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    statistic : float or array\n        t-statistic\n    pvalue : float or array\n        two-tailed p-value\n\n    Examples\n    --------\n    >>> from scipy import stats\n\n    >>> np.random.seed(7654567)  # fix seed to get the same result\n    >>> rvs = stats.norm.rvs(loc=5, scale=10, size=(50,2))\n\n    Test if mean of random sample is equal to true mean, and different mean.\n    We reject the null hypothesis in the second case and don't reject it in\n    the first case.\n\n    >>> stats.ttest_1samp(rvs,5.0)\n    (array([-0.68014479, -0.04323899]), array([ 0.49961383,  0.96568674]))\n    >>> stats.ttest_1samp(rvs,0.0)\n    (array([ 2.77025808,  4.11038784]), array([ 0.00789095,  0.00014999]))\n\n    Examples using axis and non-scalar dimension for population mean.\n\n    >>> stats.ttest_1samp(rvs,[5.0,0.0])\n    (array([-0.68014479,  4.11038784]), array([  4.99613833e-01,   1.49986458e-04]))\n    >>> stats.ttest_1samp(rvs.T,[5.0,0.0],axis=1)\n    (array([-0.68014479,  4.11038784]), array([  4.99613833e-01,   1.49986458e-04]))\n    >>> stats.ttest_1samp(rvs,[[5.0],[0.0]])\n    (array([[-0.68014479, -0.04323899],\n           [ 2.77025808,  4.11038784]]), array([[  4.99613833e-01,   9.65686743e-01],\n           [  7.89094663e-03,   1.49986458e-04]]))\n\n    ")
    
    # Assigning a Call to a Tuple (line 3809):
    
    # Assigning a Subscript to a Name (line 3809):
    
    # Obtaining the type of the subscript
    int_586025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3809, 4), 'int')
    
    # Call to _chk_asarray(...): (line 3809)
    # Processing the call arguments (line 3809)
    # Getting the type of 'a' (line 3809)
    a_586027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 27), 'a', False)
    # Getting the type of 'axis' (line 3809)
    axis_586028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 30), 'axis', False)
    # Processing the call keyword arguments (line 3809)
    kwargs_586029 = {}
    # Getting the type of '_chk_asarray' (line 3809)
    _chk_asarray_586026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 3809)
    _chk_asarray_call_result_586030 = invoke(stypy.reporting.localization.Localization(__file__, 3809, 14), _chk_asarray_586026, *[a_586027, axis_586028], **kwargs_586029)
    
    # Obtaining the member '__getitem__' of a type (line 3809)
    getitem___586031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3809, 4), _chk_asarray_call_result_586030, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3809)
    subscript_call_result_586032 = invoke(stypy.reporting.localization.Localization(__file__, 3809, 4), getitem___586031, int_586025)
    
    # Assigning a type to the variable 'tuple_var_assignment_579945' (line 3809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3809, 4), 'tuple_var_assignment_579945', subscript_call_result_586032)
    
    # Assigning a Subscript to a Name (line 3809):
    
    # Obtaining the type of the subscript
    int_586033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3809, 4), 'int')
    
    # Call to _chk_asarray(...): (line 3809)
    # Processing the call arguments (line 3809)
    # Getting the type of 'a' (line 3809)
    a_586035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 27), 'a', False)
    # Getting the type of 'axis' (line 3809)
    axis_586036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 30), 'axis', False)
    # Processing the call keyword arguments (line 3809)
    kwargs_586037 = {}
    # Getting the type of '_chk_asarray' (line 3809)
    _chk_asarray_586034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 3809)
    _chk_asarray_call_result_586038 = invoke(stypy.reporting.localization.Localization(__file__, 3809, 14), _chk_asarray_586034, *[a_586035, axis_586036], **kwargs_586037)
    
    # Obtaining the member '__getitem__' of a type (line 3809)
    getitem___586039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3809, 4), _chk_asarray_call_result_586038, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3809)
    subscript_call_result_586040 = invoke(stypy.reporting.localization.Localization(__file__, 3809, 4), getitem___586039, int_586033)
    
    # Assigning a type to the variable 'tuple_var_assignment_579946' (line 3809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3809, 4), 'tuple_var_assignment_579946', subscript_call_result_586040)
    
    # Assigning a Name to a Name (line 3809):
    # Getting the type of 'tuple_var_assignment_579945' (line 3809)
    tuple_var_assignment_579945_586041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 4), 'tuple_var_assignment_579945')
    # Assigning a type to the variable 'a' (line 3809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3809, 4), 'a', tuple_var_assignment_579945_586041)
    
    # Assigning a Name to a Name (line 3809):
    # Getting the type of 'tuple_var_assignment_579946' (line 3809)
    tuple_var_assignment_579946_586042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 4), 'tuple_var_assignment_579946')
    # Assigning a type to the variable 'axis' (line 3809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3809, 7), 'axis', tuple_var_assignment_579946_586042)
    
    # Assigning a Call to a Tuple (line 3811):
    
    # Assigning a Subscript to a Name (line 3811):
    
    # Obtaining the type of the subscript
    int_586043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3811, 4), 'int')
    
    # Call to _contains_nan(...): (line 3811)
    # Processing the call arguments (line 3811)
    # Getting the type of 'a' (line 3811)
    a_586045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 3811)
    nan_policy_586046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 3811)
    kwargs_586047 = {}
    # Getting the type of '_contains_nan' (line 3811)
    _contains_nan_586044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 3811)
    _contains_nan_call_result_586048 = invoke(stypy.reporting.localization.Localization(__file__, 3811, 31), _contains_nan_586044, *[a_586045, nan_policy_586046], **kwargs_586047)
    
    # Obtaining the member '__getitem__' of a type (line 3811)
    getitem___586049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3811, 4), _contains_nan_call_result_586048, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3811)
    subscript_call_result_586050 = invoke(stypy.reporting.localization.Localization(__file__, 3811, 4), getitem___586049, int_586043)
    
    # Assigning a type to the variable 'tuple_var_assignment_579947' (line 3811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 4), 'tuple_var_assignment_579947', subscript_call_result_586050)
    
    # Assigning a Subscript to a Name (line 3811):
    
    # Obtaining the type of the subscript
    int_586051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3811, 4), 'int')
    
    # Call to _contains_nan(...): (line 3811)
    # Processing the call arguments (line 3811)
    # Getting the type of 'a' (line 3811)
    a_586053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 45), 'a', False)
    # Getting the type of 'nan_policy' (line 3811)
    nan_policy_586054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 48), 'nan_policy', False)
    # Processing the call keyword arguments (line 3811)
    kwargs_586055 = {}
    # Getting the type of '_contains_nan' (line 3811)
    _contains_nan_586052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 3811)
    _contains_nan_call_result_586056 = invoke(stypy.reporting.localization.Localization(__file__, 3811, 31), _contains_nan_586052, *[a_586053, nan_policy_586054], **kwargs_586055)
    
    # Obtaining the member '__getitem__' of a type (line 3811)
    getitem___586057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3811, 4), _contains_nan_call_result_586056, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3811)
    subscript_call_result_586058 = invoke(stypy.reporting.localization.Localization(__file__, 3811, 4), getitem___586057, int_586051)
    
    # Assigning a type to the variable 'tuple_var_assignment_579948' (line 3811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 4), 'tuple_var_assignment_579948', subscript_call_result_586058)
    
    # Assigning a Name to a Name (line 3811):
    # Getting the type of 'tuple_var_assignment_579947' (line 3811)
    tuple_var_assignment_579947_586059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 4), 'tuple_var_assignment_579947')
    # Assigning a type to the variable 'contains_nan' (line 3811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 4), 'contains_nan', tuple_var_assignment_579947_586059)
    
    # Assigning a Name to a Name (line 3811):
    # Getting the type of 'tuple_var_assignment_579948' (line 3811)
    tuple_var_assignment_579948_586060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 4), 'tuple_var_assignment_579948')
    # Assigning a type to the variable 'nan_policy' (line 3811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 18), 'nan_policy', tuple_var_assignment_579948_586060)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 3813)
    contains_nan_586061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3813, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 3813)
    nan_policy_586062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3813, 24), 'nan_policy')
    str_586063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3813, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 3813)
    result_eq_586064 = python_operator(stypy.reporting.localization.Localization(__file__, 3813, 24), '==', nan_policy_586062, str_586063)
    
    # Applying the binary operator 'and' (line 3813)
    result_and_keyword_586065 = python_operator(stypy.reporting.localization.Localization(__file__, 3813, 7), 'and', contains_nan_586061, result_eq_586064)
    
    # Testing the type of an if condition (line 3813)
    if_condition_586066 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3813, 4), result_and_keyword_586065)
    # Assigning a type to the variable 'if_condition_586066' (line 3813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3813, 4), 'if_condition_586066', if_condition_586066)
    # SSA begins for if statement (line 3813)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3814):
    
    # Assigning a Call to a Name (line 3814):
    
    # Call to masked_invalid(...): (line 3814)
    # Processing the call arguments (line 3814)
    # Getting the type of 'a' (line 3814)
    a_586069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 30), 'a', False)
    # Processing the call keyword arguments (line 3814)
    kwargs_586070 = {}
    # Getting the type of 'ma' (line 3814)
    ma_586067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 3814)
    masked_invalid_586068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3814, 12), ma_586067, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 3814)
    masked_invalid_call_result_586071 = invoke(stypy.reporting.localization.Localization(__file__, 3814, 12), masked_invalid_586068, *[a_586069], **kwargs_586070)
    
    # Assigning a type to the variable 'a' (line 3814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3814, 8), 'a', masked_invalid_call_result_586071)
    
    # Call to ttest_1samp(...): (line 3815)
    # Processing the call arguments (line 3815)
    # Getting the type of 'a' (line 3815)
    a_586074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 40), 'a', False)
    # Getting the type of 'popmean' (line 3815)
    popmean_586075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 43), 'popmean', False)
    # Getting the type of 'axis' (line 3815)
    axis_586076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 52), 'axis', False)
    # Processing the call keyword arguments (line 3815)
    kwargs_586077 = {}
    # Getting the type of 'mstats_basic' (line 3815)
    mstats_basic_586072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 15), 'mstats_basic', False)
    # Obtaining the member 'ttest_1samp' of a type (line 3815)
    ttest_1samp_586073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3815, 15), mstats_basic_586072, 'ttest_1samp')
    # Calling ttest_1samp(args, kwargs) (line 3815)
    ttest_1samp_call_result_586078 = invoke(stypy.reporting.localization.Localization(__file__, 3815, 15), ttest_1samp_586073, *[a_586074, popmean_586075, axis_586076], **kwargs_586077)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3815, 8), 'stypy_return_type', ttest_1samp_call_result_586078)
    # SSA join for if statement (line 3813)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 3817):
    
    # Assigning a Subscript to a Name (line 3817):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 3817)
    axis_586079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 16), 'axis')
    # Getting the type of 'a' (line 3817)
    a_586080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 8), 'a')
    # Obtaining the member 'shape' of a type (line 3817)
    shape_586081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3817, 8), a_586080, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3817)
    getitem___586082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3817, 8), shape_586081, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3817)
    subscript_call_result_586083 = invoke(stypy.reporting.localization.Localization(__file__, 3817, 8), getitem___586082, axis_586079)
    
    # Assigning a type to the variable 'n' (line 3817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3817, 4), 'n', subscript_call_result_586083)
    
    # Assigning a BinOp to a Name (line 3818):
    
    # Assigning a BinOp to a Name (line 3818):
    # Getting the type of 'n' (line 3818)
    n_586084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3818, 9), 'n')
    int_586085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3818, 13), 'int')
    # Applying the binary operator '-' (line 3818)
    result_sub_586086 = python_operator(stypy.reporting.localization.Localization(__file__, 3818, 9), '-', n_586084, int_586085)
    
    # Assigning a type to the variable 'df' (line 3818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3818, 4), 'df', result_sub_586086)
    
    # Assigning a BinOp to a Name (line 3820):
    
    # Assigning a BinOp to a Name (line 3820):
    
    # Call to mean(...): (line 3820)
    # Processing the call arguments (line 3820)
    # Getting the type of 'a' (line 3820)
    a_586089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3820, 16), 'a', False)
    # Getting the type of 'axis' (line 3820)
    axis_586090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3820, 19), 'axis', False)
    # Processing the call keyword arguments (line 3820)
    kwargs_586091 = {}
    # Getting the type of 'np' (line 3820)
    np_586087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3820, 8), 'np', False)
    # Obtaining the member 'mean' of a type (line 3820)
    mean_586088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3820, 8), np_586087, 'mean')
    # Calling mean(args, kwargs) (line 3820)
    mean_call_result_586092 = invoke(stypy.reporting.localization.Localization(__file__, 3820, 8), mean_586088, *[a_586089, axis_586090], **kwargs_586091)
    
    # Getting the type of 'popmean' (line 3820)
    popmean_586093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3820, 27), 'popmean')
    # Applying the binary operator '-' (line 3820)
    result_sub_586094 = python_operator(stypy.reporting.localization.Localization(__file__, 3820, 8), '-', mean_call_result_586092, popmean_586093)
    
    # Assigning a type to the variable 'd' (line 3820)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3820, 4), 'd', result_sub_586094)
    
    # Assigning a Call to a Name (line 3821):
    
    # Assigning a Call to a Name (line 3821):
    
    # Call to var(...): (line 3821)
    # Processing the call arguments (line 3821)
    # Getting the type of 'a' (line 3821)
    a_586097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 15), 'a', False)
    # Getting the type of 'axis' (line 3821)
    axis_586098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 18), 'axis', False)
    # Processing the call keyword arguments (line 3821)
    int_586099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3821, 29), 'int')
    keyword_586100 = int_586099
    kwargs_586101 = {'ddof': keyword_586100}
    # Getting the type of 'np' (line 3821)
    np_586095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 8), 'np', False)
    # Obtaining the member 'var' of a type (line 3821)
    var_586096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 8), np_586095, 'var')
    # Calling var(args, kwargs) (line 3821)
    var_call_result_586102 = invoke(stypy.reporting.localization.Localization(__file__, 3821, 8), var_586096, *[a_586097, axis_586098], **kwargs_586101)
    
    # Assigning a type to the variable 'v' (line 3821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3821, 4), 'v', var_call_result_586102)
    
    # Assigning a Call to a Name (line 3822):
    
    # Assigning a Call to a Name (line 3822):
    
    # Call to sqrt(...): (line 3822)
    # Processing the call arguments (line 3822)
    # Getting the type of 'v' (line 3822)
    v_586105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3822, 20), 'v', False)
    
    # Call to float(...): (line 3822)
    # Processing the call arguments (line 3822)
    # Getting the type of 'n' (line 3822)
    n_586107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3822, 30), 'n', False)
    # Processing the call keyword arguments (line 3822)
    kwargs_586108 = {}
    # Getting the type of 'float' (line 3822)
    float_586106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3822, 24), 'float', False)
    # Calling float(args, kwargs) (line 3822)
    float_call_result_586109 = invoke(stypy.reporting.localization.Localization(__file__, 3822, 24), float_586106, *[n_586107], **kwargs_586108)
    
    # Applying the binary operator 'div' (line 3822)
    result_div_586110 = python_operator(stypy.reporting.localization.Localization(__file__, 3822, 20), 'div', v_586105, float_call_result_586109)
    
    # Processing the call keyword arguments (line 3822)
    kwargs_586111 = {}
    # Getting the type of 'np' (line 3822)
    np_586103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3822, 12), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 3822)
    sqrt_586104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3822, 12), np_586103, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3822)
    sqrt_call_result_586112 = invoke(stypy.reporting.localization.Localization(__file__, 3822, 12), sqrt_586104, *[result_div_586110], **kwargs_586111)
    
    # Assigning a type to the variable 'denom' (line 3822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3822, 4), 'denom', sqrt_call_result_586112)
    
    # Call to errstate(...): (line 3824)
    # Processing the call keyword arguments (line 3824)
    str_586115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3824, 28), 'str', 'ignore')
    keyword_586116 = str_586115
    str_586117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3824, 46), 'str', 'ignore')
    keyword_586118 = str_586117
    kwargs_586119 = {'divide': keyword_586116, 'invalid': keyword_586118}
    # Getting the type of 'np' (line 3824)
    np_586113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3824, 9), 'np', False)
    # Obtaining the member 'errstate' of a type (line 3824)
    errstate_586114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3824, 9), np_586113, 'errstate')
    # Calling errstate(args, kwargs) (line 3824)
    errstate_call_result_586120 = invoke(stypy.reporting.localization.Localization(__file__, 3824, 9), errstate_586114, *[], **kwargs_586119)
    
    with_586121 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 3824, 9), errstate_call_result_586120, 'with parameter', '__enter__', '__exit__')

    if with_586121:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 3824)
        enter___586122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3824, 9), errstate_call_result_586120, '__enter__')
        with_enter_586123 = invoke(stypy.reporting.localization.Localization(__file__, 3824, 9), enter___586122)
        
        # Assigning a Call to a Name (line 3825):
        
        # Assigning a Call to a Name (line 3825):
        
        # Call to divide(...): (line 3825)
        # Processing the call arguments (line 3825)
        # Getting the type of 'd' (line 3825)
        d_586126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3825, 22), 'd', False)
        # Getting the type of 'denom' (line 3825)
        denom_586127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3825, 25), 'denom', False)
        # Processing the call keyword arguments (line 3825)
        kwargs_586128 = {}
        # Getting the type of 'np' (line 3825)
        np_586124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3825, 12), 'np', False)
        # Obtaining the member 'divide' of a type (line 3825)
        divide_586125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3825, 12), np_586124, 'divide')
        # Calling divide(args, kwargs) (line 3825)
        divide_call_result_586129 = invoke(stypy.reporting.localization.Localization(__file__, 3825, 12), divide_586125, *[d_586126, denom_586127], **kwargs_586128)
        
        # Assigning a type to the variable 't' (line 3825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3825, 8), 't', divide_call_result_586129)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 3824)
        exit___586130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3824, 9), errstate_call_result_586120, '__exit__')
        with_exit_586131 = invoke(stypy.reporting.localization.Localization(__file__, 3824, 9), exit___586130, None, None, None)

    
    # Assigning a Call to a Tuple (line 3826):
    
    # Assigning a Subscript to a Name (line 3826):
    
    # Obtaining the type of the subscript
    int_586132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3826, 4), 'int')
    
    # Call to _ttest_finish(...): (line 3826)
    # Processing the call arguments (line 3826)
    # Getting the type of 'df' (line 3826)
    df_586134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 28), 'df', False)
    # Getting the type of 't' (line 3826)
    t_586135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 32), 't', False)
    # Processing the call keyword arguments (line 3826)
    kwargs_586136 = {}
    # Getting the type of '_ttest_finish' (line 3826)
    _ttest_finish_586133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 14), '_ttest_finish', False)
    # Calling _ttest_finish(args, kwargs) (line 3826)
    _ttest_finish_call_result_586137 = invoke(stypy.reporting.localization.Localization(__file__, 3826, 14), _ttest_finish_586133, *[df_586134, t_586135], **kwargs_586136)
    
    # Obtaining the member '__getitem__' of a type (line 3826)
    getitem___586138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3826, 4), _ttest_finish_call_result_586137, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3826)
    subscript_call_result_586139 = invoke(stypy.reporting.localization.Localization(__file__, 3826, 4), getitem___586138, int_586132)
    
    # Assigning a type to the variable 'tuple_var_assignment_579949' (line 3826)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3826, 4), 'tuple_var_assignment_579949', subscript_call_result_586139)
    
    # Assigning a Subscript to a Name (line 3826):
    
    # Obtaining the type of the subscript
    int_586140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3826, 4), 'int')
    
    # Call to _ttest_finish(...): (line 3826)
    # Processing the call arguments (line 3826)
    # Getting the type of 'df' (line 3826)
    df_586142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 28), 'df', False)
    # Getting the type of 't' (line 3826)
    t_586143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 32), 't', False)
    # Processing the call keyword arguments (line 3826)
    kwargs_586144 = {}
    # Getting the type of '_ttest_finish' (line 3826)
    _ttest_finish_586141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 14), '_ttest_finish', False)
    # Calling _ttest_finish(args, kwargs) (line 3826)
    _ttest_finish_call_result_586145 = invoke(stypy.reporting.localization.Localization(__file__, 3826, 14), _ttest_finish_586141, *[df_586142, t_586143], **kwargs_586144)
    
    # Obtaining the member '__getitem__' of a type (line 3826)
    getitem___586146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3826, 4), _ttest_finish_call_result_586145, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3826)
    subscript_call_result_586147 = invoke(stypy.reporting.localization.Localization(__file__, 3826, 4), getitem___586146, int_586140)
    
    # Assigning a type to the variable 'tuple_var_assignment_579950' (line 3826)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3826, 4), 'tuple_var_assignment_579950', subscript_call_result_586147)
    
    # Assigning a Name to a Name (line 3826):
    # Getting the type of 'tuple_var_assignment_579949' (line 3826)
    tuple_var_assignment_579949_586148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 4), 'tuple_var_assignment_579949')
    # Assigning a type to the variable 't' (line 3826)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3826, 4), 't', tuple_var_assignment_579949_586148)
    
    # Assigning a Name to a Name (line 3826):
    # Getting the type of 'tuple_var_assignment_579950' (line 3826)
    tuple_var_assignment_579950_586149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 4), 'tuple_var_assignment_579950')
    # Assigning a type to the variable 'prob' (line 3826)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3826, 7), 'prob', tuple_var_assignment_579950_586149)
    
    # Call to Ttest_1sampResult(...): (line 3828)
    # Processing the call arguments (line 3828)
    # Getting the type of 't' (line 3828)
    t_586151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3828, 29), 't', False)
    # Getting the type of 'prob' (line 3828)
    prob_586152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3828, 32), 'prob', False)
    # Processing the call keyword arguments (line 3828)
    kwargs_586153 = {}
    # Getting the type of 'Ttest_1sampResult' (line 3828)
    Ttest_1sampResult_586150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3828, 11), 'Ttest_1sampResult', False)
    # Calling Ttest_1sampResult(args, kwargs) (line 3828)
    Ttest_1sampResult_call_result_586154 = invoke(stypy.reporting.localization.Localization(__file__, 3828, 11), Ttest_1sampResult_586150, *[t_586151, prob_586152], **kwargs_586153)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3828, 4), 'stypy_return_type', Ttest_1sampResult_call_result_586154)
    
    # ################# End of 'ttest_1samp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ttest_1samp' in the type store
    # Getting the type of 'stypy_return_type' (line 3751)
    stypy_return_type_586155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3751, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_586155)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ttest_1samp'
    return stypy_return_type_586155

# Assigning a type to the variable 'ttest_1samp' (line 3751)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3751, 0), 'ttest_1samp', ttest_1samp)

@norecursion
def _ttest_finish(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_ttest_finish'
    module_type_store = module_type_store.open_function_context('_ttest_finish', 3831, 0, False)
    
    # Passed parameters checking function
    _ttest_finish.stypy_localization = localization
    _ttest_finish.stypy_type_of_self = None
    _ttest_finish.stypy_type_store = module_type_store
    _ttest_finish.stypy_function_name = '_ttest_finish'
    _ttest_finish.stypy_param_names_list = ['df', 't']
    _ttest_finish.stypy_varargs_param_name = None
    _ttest_finish.stypy_kwargs_param_name = None
    _ttest_finish.stypy_call_defaults = defaults
    _ttest_finish.stypy_call_varargs = varargs
    _ttest_finish.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_ttest_finish', ['df', 't'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_ttest_finish', localization, ['df', 't'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_ttest_finish(...)' code ##################

    str_586156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3832, 4), 'str', 'Common code between all 3 t-test functions.')
    
    # Assigning a BinOp to a Name (line 3833):
    
    # Assigning a BinOp to a Name (line 3833):
    
    # Call to sf(...): (line 3833)
    # Processing the call arguments (line 3833)
    
    # Call to abs(...): (line 3833)
    # Processing the call arguments (line 3833)
    # Getting the type of 't' (line 3833)
    t_586162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3833, 37), 't', False)
    # Processing the call keyword arguments (line 3833)
    kwargs_586163 = {}
    # Getting the type of 'np' (line 3833)
    np_586160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3833, 30), 'np', False)
    # Obtaining the member 'abs' of a type (line 3833)
    abs_586161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3833, 30), np_586160, 'abs')
    # Calling abs(args, kwargs) (line 3833)
    abs_call_result_586164 = invoke(stypy.reporting.localization.Localization(__file__, 3833, 30), abs_586161, *[t_586162], **kwargs_586163)
    
    # Getting the type of 'df' (line 3833)
    df_586165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3833, 41), 'df', False)
    # Processing the call keyword arguments (line 3833)
    kwargs_586166 = {}
    # Getting the type of 'distributions' (line 3833)
    distributions_586157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3833, 11), 'distributions', False)
    # Obtaining the member 't' of a type (line 3833)
    t_586158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3833, 11), distributions_586157, 't')
    # Obtaining the member 'sf' of a type (line 3833)
    sf_586159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3833, 11), t_586158, 'sf')
    # Calling sf(args, kwargs) (line 3833)
    sf_call_result_586167 = invoke(stypy.reporting.localization.Localization(__file__, 3833, 11), sf_586159, *[abs_call_result_586164, df_586165], **kwargs_586166)
    
    int_586168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3833, 47), 'int')
    # Applying the binary operator '*' (line 3833)
    result_mul_586169 = python_operator(stypy.reporting.localization.Localization(__file__, 3833, 11), '*', sf_call_result_586167, int_586168)
    
    # Assigning a type to the variable 'prob' (line 3833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3833, 4), 'prob', result_mul_586169)
    
    
    # Getting the type of 't' (line 3834)
    t_586170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3834, 7), 't')
    # Obtaining the member 'ndim' of a type (line 3834)
    ndim_586171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3834, 7), t_586170, 'ndim')
    int_586172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3834, 17), 'int')
    # Applying the binary operator '==' (line 3834)
    result_eq_586173 = python_operator(stypy.reporting.localization.Localization(__file__, 3834, 7), '==', ndim_586171, int_586172)
    
    # Testing the type of an if condition (line 3834)
    if_condition_586174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3834, 4), result_eq_586173)
    # Assigning a type to the variable 'if_condition_586174' (line 3834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3834, 4), 'if_condition_586174', if_condition_586174)
    # SSA begins for if statement (line 3834)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 3835):
    
    # Assigning a Subscript to a Name (line 3835):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 3835)
    tuple_586175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3835, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3835)
    
    # Getting the type of 't' (line 3835)
    t_586176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 12), 't')
    # Obtaining the member '__getitem__' of a type (line 3835)
    getitem___586177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 12), t_586176, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3835)
    subscript_call_result_586178 = invoke(stypy.reporting.localization.Localization(__file__, 3835, 12), getitem___586177, tuple_586175)
    
    # Assigning a type to the variable 't' (line 3835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3835, 8), 't', subscript_call_result_586178)
    # SSA join for if statement (line 3834)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3837)
    tuple_586179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3837, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3837)
    # Adding element type (line 3837)
    # Getting the type of 't' (line 3837)
    t_586180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 11), 't')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3837, 11), tuple_586179, t_586180)
    # Adding element type (line 3837)
    # Getting the type of 'prob' (line 3837)
    prob_586181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 14), 'prob')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3837, 11), tuple_586179, prob_586181)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3837)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3837, 4), 'stypy_return_type', tuple_586179)
    
    # ################# End of '_ttest_finish(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_ttest_finish' in the type store
    # Getting the type of 'stypy_return_type' (line 3831)
    stypy_return_type_586182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3831, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_586182)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_ttest_finish'
    return stypy_return_type_586182

# Assigning a type to the variable '_ttest_finish' (line 3831)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3831, 0), '_ttest_finish', _ttest_finish)

@norecursion
def _ttest_ind_from_stats(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_ttest_ind_from_stats'
    module_type_store = module_type_store.open_function_context('_ttest_ind_from_stats', 3840, 0, False)
    
    # Passed parameters checking function
    _ttest_ind_from_stats.stypy_localization = localization
    _ttest_ind_from_stats.stypy_type_of_self = None
    _ttest_ind_from_stats.stypy_type_store = module_type_store
    _ttest_ind_from_stats.stypy_function_name = '_ttest_ind_from_stats'
    _ttest_ind_from_stats.stypy_param_names_list = ['mean1', 'mean2', 'denom', 'df']
    _ttest_ind_from_stats.stypy_varargs_param_name = None
    _ttest_ind_from_stats.stypy_kwargs_param_name = None
    _ttest_ind_from_stats.stypy_call_defaults = defaults
    _ttest_ind_from_stats.stypy_call_varargs = varargs
    _ttest_ind_from_stats.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_ttest_ind_from_stats', ['mean1', 'mean2', 'denom', 'df'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_ttest_ind_from_stats', localization, ['mean1', 'mean2', 'denom', 'df'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_ttest_ind_from_stats(...)' code ##################

    
    # Assigning a BinOp to a Name (line 3842):
    
    # Assigning a BinOp to a Name (line 3842):
    # Getting the type of 'mean1' (line 3842)
    mean1_586183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3842, 8), 'mean1')
    # Getting the type of 'mean2' (line 3842)
    mean2_586184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3842, 16), 'mean2')
    # Applying the binary operator '-' (line 3842)
    result_sub_586185 = python_operator(stypy.reporting.localization.Localization(__file__, 3842, 8), '-', mean1_586183, mean2_586184)
    
    # Assigning a type to the variable 'd' (line 3842)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3842, 4), 'd', result_sub_586185)
    
    # Call to errstate(...): (line 3843)
    # Processing the call keyword arguments (line 3843)
    str_586188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3843, 28), 'str', 'ignore')
    keyword_586189 = str_586188
    str_586190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3843, 46), 'str', 'ignore')
    keyword_586191 = str_586190
    kwargs_586192 = {'divide': keyword_586189, 'invalid': keyword_586191}
    # Getting the type of 'np' (line 3843)
    np_586186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3843, 9), 'np', False)
    # Obtaining the member 'errstate' of a type (line 3843)
    errstate_586187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3843, 9), np_586186, 'errstate')
    # Calling errstate(args, kwargs) (line 3843)
    errstate_call_result_586193 = invoke(stypy.reporting.localization.Localization(__file__, 3843, 9), errstate_586187, *[], **kwargs_586192)
    
    with_586194 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 3843, 9), errstate_call_result_586193, 'with parameter', '__enter__', '__exit__')

    if with_586194:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 3843)
        enter___586195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3843, 9), errstate_call_result_586193, '__enter__')
        with_enter_586196 = invoke(stypy.reporting.localization.Localization(__file__, 3843, 9), enter___586195)
        
        # Assigning a Call to a Name (line 3844):
        
        # Assigning a Call to a Name (line 3844):
        
        # Call to divide(...): (line 3844)
        # Processing the call arguments (line 3844)
        # Getting the type of 'd' (line 3844)
        d_586199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3844, 22), 'd', False)
        # Getting the type of 'denom' (line 3844)
        denom_586200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3844, 25), 'denom', False)
        # Processing the call keyword arguments (line 3844)
        kwargs_586201 = {}
        # Getting the type of 'np' (line 3844)
        np_586197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3844, 12), 'np', False)
        # Obtaining the member 'divide' of a type (line 3844)
        divide_586198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3844, 12), np_586197, 'divide')
        # Calling divide(args, kwargs) (line 3844)
        divide_call_result_586202 = invoke(stypy.reporting.localization.Localization(__file__, 3844, 12), divide_586198, *[d_586199, denom_586200], **kwargs_586201)
        
        # Assigning a type to the variable 't' (line 3844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3844, 8), 't', divide_call_result_586202)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 3843)
        exit___586203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3843, 9), errstate_call_result_586193, '__exit__')
        with_exit_586204 = invoke(stypy.reporting.localization.Localization(__file__, 3843, 9), exit___586203, None, None, None)

    
    # Assigning a Call to a Tuple (line 3845):
    
    # Assigning a Subscript to a Name (line 3845):
    
    # Obtaining the type of the subscript
    int_586205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3845, 4), 'int')
    
    # Call to _ttest_finish(...): (line 3845)
    # Processing the call arguments (line 3845)
    # Getting the type of 'df' (line 3845)
    df_586207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 28), 'df', False)
    # Getting the type of 't' (line 3845)
    t_586208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 32), 't', False)
    # Processing the call keyword arguments (line 3845)
    kwargs_586209 = {}
    # Getting the type of '_ttest_finish' (line 3845)
    _ttest_finish_586206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 14), '_ttest_finish', False)
    # Calling _ttest_finish(args, kwargs) (line 3845)
    _ttest_finish_call_result_586210 = invoke(stypy.reporting.localization.Localization(__file__, 3845, 14), _ttest_finish_586206, *[df_586207, t_586208], **kwargs_586209)
    
    # Obtaining the member '__getitem__' of a type (line 3845)
    getitem___586211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3845, 4), _ttest_finish_call_result_586210, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3845)
    subscript_call_result_586212 = invoke(stypy.reporting.localization.Localization(__file__, 3845, 4), getitem___586211, int_586205)
    
    # Assigning a type to the variable 'tuple_var_assignment_579951' (line 3845)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3845, 4), 'tuple_var_assignment_579951', subscript_call_result_586212)
    
    # Assigning a Subscript to a Name (line 3845):
    
    # Obtaining the type of the subscript
    int_586213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3845, 4), 'int')
    
    # Call to _ttest_finish(...): (line 3845)
    # Processing the call arguments (line 3845)
    # Getting the type of 'df' (line 3845)
    df_586215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 28), 'df', False)
    # Getting the type of 't' (line 3845)
    t_586216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 32), 't', False)
    # Processing the call keyword arguments (line 3845)
    kwargs_586217 = {}
    # Getting the type of '_ttest_finish' (line 3845)
    _ttest_finish_586214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 14), '_ttest_finish', False)
    # Calling _ttest_finish(args, kwargs) (line 3845)
    _ttest_finish_call_result_586218 = invoke(stypy.reporting.localization.Localization(__file__, 3845, 14), _ttest_finish_586214, *[df_586215, t_586216], **kwargs_586217)
    
    # Obtaining the member '__getitem__' of a type (line 3845)
    getitem___586219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3845, 4), _ttest_finish_call_result_586218, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3845)
    subscript_call_result_586220 = invoke(stypy.reporting.localization.Localization(__file__, 3845, 4), getitem___586219, int_586213)
    
    # Assigning a type to the variable 'tuple_var_assignment_579952' (line 3845)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3845, 4), 'tuple_var_assignment_579952', subscript_call_result_586220)
    
    # Assigning a Name to a Name (line 3845):
    # Getting the type of 'tuple_var_assignment_579951' (line 3845)
    tuple_var_assignment_579951_586221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 4), 'tuple_var_assignment_579951')
    # Assigning a type to the variable 't' (line 3845)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3845, 4), 't', tuple_var_assignment_579951_586221)
    
    # Assigning a Name to a Name (line 3845):
    # Getting the type of 'tuple_var_assignment_579952' (line 3845)
    tuple_var_assignment_579952_586222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 4), 'tuple_var_assignment_579952')
    # Assigning a type to the variable 'prob' (line 3845)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3845, 7), 'prob', tuple_var_assignment_579952_586222)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3847)
    tuple_586223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3847, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3847)
    # Adding element type (line 3847)
    # Getting the type of 't' (line 3847)
    t_586224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3847, 12), 't')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3847, 12), tuple_586223, t_586224)
    # Adding element type (line 3847)
    # Getting the type of 'prob' (line 3847)
    prob_586225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3847, 15), 'prob')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3847, 12), tuple_586223, prob_586225)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3847, 4), 'stypy_return_type', tuple_586223)
    
    # ################# End of '_ttest_ind_from_stats(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_ttest_ind_from_stats' in the type store
    # Getting the type of 'stypy_return_type' (line 3840)
    stypy_return_type_586226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3840, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_586226)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_ttest_ind_from_stats'
    return stypy_return_type_586226

# Assigning a type to the variable '_ttest_ind_from_stats' (line 3840)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3840, 0), '_ttest_ind_from_stats', _ttest_ind_from_stats)

@norecursion
def _unequal_var_ttest_denom(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_unequal_var_ttest_denom'
    module_type_store = module_type_store.open_function_context('_unequal_var_ttest_denom', 3850, 0, False)
    
    # Passed parameters checking function
    _unequal_var_ttest_denom.stypy_localization = localization
    _unequal_var_ttest_denom.stypy_type_of_self = None
    _unequal_var_ttest_denom.stypy_type_store = module_type_store
    _unequal_var_ttest_denom.stypy_function_name = '_unequal_var_ttest_denom'
    _unequal_var_ttest_denom.stypy_param_names_list = ['v1', 'n1', 'v2', 'n2']
    _unequal_var_ttest_denom.stypy_varargs_param_name = None
    _unequal_var_ttest_denom.stypy_kwargs_param_name = None
    _unequal_var_ttest_denom.stypy_call_defaults = defaults
    _unequal_var_ttest_denom.stypy_call_varargs = varargs
    _unequal_var_ttest_denom.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_unequal_var_ttest_denom', ['v1', 'n1', 'v2', 'n2'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_unequal_var_ttest_denom', localization, ['v1', 'n1', 'v2', 'n2'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_unequal_var_ttest_denom(...)' code ##################

    
    # Assigning a BinOp to a Name (line 3851):
    
    # Assigning a BinOp to a Name (line 3851):
    # Getting the type of 'v1' (line 3851)
    v1_586227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3851, 10), 'v1')
    # Getting the type of 'n1' (line 3851)
    n1_586228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3851, 15), 'n1')
    # Applying the binary operator 'div' (line 3851)
    result_div_586229 = python_operator(stypy.reporting.localization.Localization(__file__, 3851, 10), 'div', v1_586227, n1_586228)
    
    # Assigning a type to the variable 'vn1' (line 3851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3851, 4), 'vn1', result_div_586229)
    
    # Assigning a BinOp to a Name (line 3852):
    
    # Assigning a BinOp to a Name (line 3852):
    # Getting the type of 'v2' (line 3852)
    v2_586230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3852, 10), 'v2')
    # Getting the type of 'n2' (line 3852)
    n2_586231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3852, 15), 'n2')
    # Applying the binary operator 'div' (line 3852)
    result_div_586232 = python_operator(stypy.reporting.localization.Localization(__file__, 3852, 10), 'div', v2_586230, n2_586231)
    
    # Assigning a type to the variable 'vn2' (line 3852)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3852, 4), 'vn2', result_div_586232)
    
    # Call to errstate(...): (line 3853)
    # Processing the call keyword arguments (line 3853)
    str_586235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3853, 28), 'str', 'ignore')
    keyword_586236 = str_586235
    str_586237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3853, 46), 'str', 'ignore')
    keyword_586238 = str_586237
    kwargs_586239 = {'divide': keyword_586236, 'invalid': keyword_586238}
    # Getting the type of 'np' (line 3853)
    np_586233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3853, 9), 'np', False)
    # Obtaining the member 'errstate' of a type (line 3853)
    errstate_586234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3853, 9), np_586233, 'errstate')
    # Calling errstate(args, kwargs) (line 3853)
    errstate_call_result_586240 = invoke(stypy.reporting.localization.Localization(__file__, 3853, 9), errstate_586234, *[], **kwargs_586239)
    
    with_586241 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 3853, 9), errstate_call_result_586240, 'with parameter', '__enter__', '__exit__')

    if with_586241:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 3853)
        enter___586242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3853, 9), errstate_call_result_586240, '__enter__')
        with_enter_586243 = invoke(stypy.reporting.localization.Localization(__file__, 3853, 9), enter___586242)
        
        # Assigning a BinOp to a Name (line 3854):
        
        # Assigning a BinOp to a Name (line 3854):
        # Getting the type of 'vn1' (line 3854)
        vn1_586244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3854, 14), 'vn1')
        # Getting the type of 'vn2' (line 3854)
        vn2_586245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3854, 20), 'vn2')
        # Applying the binary operator '+' (line 3854)
        result_add_586246 = python_operator(stypy.reporting.localization.Localization(__file__, 3854, 14), '+', vn1_586244, vn2_586245)
        
        int_586247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3854, 26), 'int')
        # Applying the binary operator '**' (line 3854)
        result_pow_586248 = python_operator(stypy.reporting.localization.Localization(__file__, 3854, 13), '**', result_add_586246, int_586247)
        
        # Getting the type of 'vn1' (line 3854)
        vn1_586249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3854, 31), 'vn1')
        int_586250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3854, 36), 'int')
        # Applying the binary operator '**' (line 3854)
        result_pow_586251 = python_operator(stypy.reporting.localization.Localization(__file__, 3854, 31), '**', vn1_586249, int_586250)
        
        # Getting the type of 'n1' (line 3854)
        n1_586252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3854, 41), 'n1')
        int_586253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3854, 46), 'int')
        # Applying the binary operator '-' (line 3854)
        result_sub_586254 = python_operator(stypy.reporting.localization.Localization(__file__, 3854, 41), '-', n1_586252, int_586253)
        
        # Applying the binary operator 'div' (line 3854)
        result_div_586255 = python_operator(stypy.reporting.localization.Localization(__file__, 3854, 31), 'div', result_pow_586251, result_sub_586254)
        
        # Getting the type of 'vn2' (line 3854)
        vn2_586256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3854, 51), 'vn2')
        int_586257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3854, 56), 'int')
        # Applying the binary operator '**' (line 3854)
        result_pow_586258 = python_operator(stypy.reporting.localization.Localization(__file__, 3854, 51), '**', vn2_586256, int_586257)
        
        # Getting the type of 'n2' (line 3854)
        n2_586259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3854, 61), 'n2')
        int_586260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3854, 66), 'int')
        # Applying the binary operator '-' (line 3854)
        result_sub_586261 = python_operator(stypy.reporting.localization.Localization(__file__, 3854, 61), '-', n2_586259, int_586260)
        
        # Applying the binary operator 'div' (line 3854)
        result_div_586262 = python_operator(stypy.reporting.localization.Localization(__file__, 3854, 51), 'div', result_pow_586258, result_sub_586261)
        
        # Applying the binary operator '+' (line 3854)
        result_add_586263 = python_operator(stypy.reporting.localization.Localization(__file__, 3854, 31), '+', result_div_586255, result_div_586262)
        
        # Applying the binary operator 'div' (line 3854)
        result_div_586264 = python_operator(stypy.reporting.localization.Localization(__file__, 3854, 13), 'div', result_pow_586248, result_add_586263)
        
        # Assigning a type to the variable 'df' (line 3854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3854, 8), 'df', result_div_586264)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 3853)
        exit___586265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3853, 9), errstate_call_result_586240, '__exit__')
        with_exit_586266 = invoke(stypy.reporting.localization.Localization(__file__, 3853, 9), exit___586265, None, None, None)

    
    # Assigning a Call to a Name (line 3858):
    
    # Assigning a Call to a Name (line 3858):
    
    # Call to where(...): (line 3858)
    # Processing the call arguments (line 3858)
    
    # Call to isnan(...): (line 3858)
    # Processing the call arguments (line 3858)
    # Getting the type of 'df' (line 3858)
    df_586271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3858, 27), 'df', False)
    # Processing the call keyword arguments (line 3858)
    kwargs_586272 = {}
    # Getting the type of 'np' (line 3858)
    np_586269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3858, 18), 'np', False)
    # Obtaining the member 'isnan' of a type (line 3858)
    isnan_586270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3858, 18), np_586269, 'isnan')
    # Calling isnan(args, kwargs) (line 3858)
    isnan_call_result_586273 = invoke(stypy.reporting.localization.Localization(__file__, 3858, 18), isnan_586270, *[df_586271], **kwargs_586272)
    
    int_586274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3858, 32), 'int')
    # Getting the type of 'df' (line 3858)
    df_586275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3858, 35), 'df', False)
    # Processing the call keyword arguments (line 3858)
    kwargs_586276 = {}
    # Getting the type of 'np' (line 3858)
    np_586267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3858, 9), 'np', False)
    # Obtaining the member 'where' of a type (line 3858)
    where_586268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3858, 9), np_586267, 'where')
    # Calling where(args, kwargs) (line 3858)
    where_call_result_586277 = invoke(stypy.reporting.localization.Localization(__file__, 3858, 9), where_586268, *[isnan_call_result_586273, int_586274, df_586275], **kwargs_586276)
    
    # Assigning a type to the variable 'df' (line 3858)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3858, 4), 'df', where_call_result_586277)
    
    # Assigning a Call to a Name (line 3859):
    
    # Assigning a Call to a Name (line 3859):
    
    # Call to sqrt(...): (line 3859)
    # Processing the call arguments (line 3859)
    # Getting the type of 'vn1' (line 3859)
    vn1_586280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3859, 20), 'vn1', False)
    # Getting the type of 'vn2' (line 3859)
    vn2_586281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3859, 26), 'vn2', False)
    # Applying the binary operator '+' (line 3859)
    result_add_586282 = python_operator(stypy.reporting.localization.Localization(__file__, 3859, 20), '+', vn1_586280, vn2_586281)
    
    # Processing the call keyword arguments (line 3859)
    kwargs_586283 = {}
    # Getting the type of 'np' (line 3859)
    np_586278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3859, 12), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 3859)
    sqrt_586279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3859, 12), np_586278, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3859)
    sqrt_call_result_586284 = invoke(stypy.reporting.localization.Localization(__file__, 3859, 12), sqrt_586279, *[result_add_586282], **kwargs_586283)
    
    # Assigning a type to the variable 'denom' (line 3859)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3859, 4), 'denom', sqrt_call_result_586284)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3860)
    tuple_586285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3860, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3860)
    # Adding element type (line 3860)
    # Getting the type of 'df' (line 3860)
    df_586286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3860, 11), 'df')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3860, 11), tuple_586285, df_586286)
    # Adding element type (line 3860)
    # Getting the type of 'denom' (line 3860)
    denom_586287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3860, 15), 'denom')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3860, 11), tuple_586285, denom_586287)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3860)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3860, 4), 'stypy_return_type', tuple_586285)
    
    # ################# End of '_unequal_var_ttest_denom(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_unequal_var_ttest_denom' in the type store
    # Getting the type of 'stypy_return_type' (line 3850)
    stypy_return_type_586288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3850, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_586288)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_unequal_var_ttest_denom'
    return stypy_return_type_586288

# Assigning a type to the variable '_unequal_var_ttest_denom' (line 3850)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3850, 0), '_unequal_var_ttest_denom', _unequal_var_ttest_denom)

@norecursion
def _equal_var_ttest_denom(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_equal_var_ttest_denom'
    module_type_store = module_type_store.open_function_context('_equal_var_ttest_denom', 3863, 0, False)
    
    # Passed parameters checking function
    _equal_var_ttest_denom.stypy_localization = localization
    _equal_var_ttest_denom.stypy_type_of_self = None
    _equal_var_ttest_denom.stypy_type_store = module_type_store
    _equal_var_ttest_denom.stypy_function_name = '_equal_var_ttest_denom'
    _equal_var_ttest_denom.stypy_param_names_list = ['v1', 'n1', 'v2', 'n2']
    _equal_var_ttest_denom.stypy_varargs_param_name = None
    _equal_var_ttest_denom.stypy_kwargs_param_name = None
    _equal_var_ttest_denom.stypy_call_defaults = defaults
    _equal_var_ttest_denom.stypy_call_varargs = varargs
    _equal_var_ttest_denom.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_equal_var_ttest_denom', ['v1', 'n1', 'v2', 'n2'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_equal_var_ttest_denom', localization, ['v1', 'n1', 'v2', 'n2'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_equal_var_ttest_denom(...)' code ##################

    
    # Assigning a BinOp to a Name (line 3864):
    
    # Assigning a BinOp to a Name (line 3864):
    # Getting the type of 'n1' (line 3864)
    n1_586289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3864, 9), 'n1')
    # Getting the type of 'n2' (line 3864)
    n2_586290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3864, 14), 'n2')
    # Applying the binary operator '+' (line 3864)
    result_add_586291 = python_operator(stypy.reporting.localization.Localization(__file__, 3864, 9), '+', n1_586289, n2_586290)
    
    float_586292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3864, 19), 'float')
    # Applying the binary operator '-' (line 3864)
    result_sub_586293 = python_operator(stypy.reporting.localization.Localization(__file__, 3864, 17), '-', result_add_586291, float_586292)
    
    # Assigning a type to the variable 'df' (line 3864)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3864, 4), 'df', result_sub_586293)
    
    # Assigning a BinOp to a Name (line 3865):
    
    # Assigning a BinOp to a Name (line 3865):
    # Getting the type of 'n1' (line 3865)
    n1_586294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3865, 13), 'n1')
    int_586295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3865, 18), 'int')
    # Applying the binary operator '-' (line 3865)
    result_sub_586296 = python_operator(stypy.reporting.localization.Localization(__file__, 3865, 13), '-', n1_586294, int_586295)
    
    # Getting the type of 'v1' (line 3865)
    v1_586297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3865, 23), 'v1')
    # Applying the binary operator '*' (line 3865)
    result_mul_586298 = python_operator(stypy.reporting.localization.Localization(__file__, 3865, 12), '*', result_sub_586296, v1_586297)
    
    # Getting the type of 'n2' (line 3865)
    n2_586299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3865, 29), 'n2')
    int_586300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3865, 34), 'int')
    # Applying the binary operator '-' (line 3865)
    result_sub_586301 = python_operator(stypy.reporting.localization.Localization(__file__, 3865, 29), '-', n2_586299, int_586300)
    
    # Getting the type of 'v2' (line 3865)
    v2_586302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3865, 39), 'v2')
    # Applying the binary operator '*' (line 3865)
    result_mul_586303 = python_operator(stypy.reporting.localization.Localization(__file__, 3865, 28), '*', result_sub_586301, v2_586302)
    
    # Applying the binary operator '+' (line 3865)
    result_add_586304 = python_operator(stypy.reporting.localization.Localization(__file__, 3865, 12), '+', result_mul_586298, result_mul_586303)
    
    # Getting the type of 'df' (line 3865)
    df_586305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3865, 45), 'df')
    # Applying the binary operator 'div' (line 3865)
    result_div_586306 = python_operator(stypy.reporting.localization.Localization(__file__, 3865, 11), 'div', result_add_586304, df_586305)
    
    # Assigning a type to the variable 'svar' (line 3865)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3865, 4), 'svar', result_div_586306)
    
    # Assigning a Call to a Name (line 3866):
    
    # Assigning a Call to a Name (line 3866):
    
    # Call to sqrt(...): (line 3866)
    # Processing the call arguments (line 3866)
    # Getting the type of 'svar' (line 3866)
    svar_586309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3866, 20), 'svar', False)
    float_586310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3866, 28), 'float')
    # Getting the type of 'n1' (line 3866)
    n1_586311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3866, 34), 'n1', False)
    # Applying the binary operator 'div' (line 3866)
    result_div_586312 = python_operator(stypy.reporting.localization.Localization(__file__, 3866, 28), 'div', float_586310, n1_586311)
    
    float_586313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3866, 39), 'float')
    # Getting the type of 'n2' (line 3866)
    n2_586314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3866, 45), 'n2', False)
    # Applying the binary operator 'div' (line 3866)
    result_div_586315 = python_operator(stypy.reporting.localization.Localization(__file__, 3866, 39), 'div', float_586313, n2_586314)
    
    # Applying the binary operator '+' (line 3866)
    result_add_586316 = python_operator(stypy.reporting.localization.Localization(__file__, 3866, 28), '+', result_div_586312, result_div_586315)
    
    # Applying the binary operator '*' (line 3866)
    result_mul_586317 = python_operator(stypy.reporting.localization.Localization(__file__, 3866, 20), '*', svar_586309, result_add_586316)
    
    # Processing the call keyword arguments (line 3866)
    kwargs_586318 = {}
    # Getting the type of 'np' (line 3866)
    np_586307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3866, 12), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 3866)
    sqrt_586308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3866, 12), np_586307, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3866)
    sqrt_call_result_586319 = invoke(stypy.reporting.localization.Localization(__file__, 3866, 12), sqrt_586308, *[result_mul_586317], **kwargs_586318)
    
    # Assigning a type to the variable 'denom' (line 3866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3866, 4), 'denom', sqrt_call_result_586319)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3867)
    tuple_586320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3867, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3867)
    # Adding element type (line 3867)
    # Getting the type of 'df' (line 3867)
    df_586321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3867, 11), 'df')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3867, 11), tuple_586320, df_586321)
    # Adding element type (line 3867)
    # Getting the type of 'denom' (line 3867)
    denom_586322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3867, 15), 'denom')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3867, 11), tuple_586320, denom_586322)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3867)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3867, 4), 'stypy_return_type', tuple_586320)
    
    # ################# End of '_equal_var_ttest_denom(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_equal_var_ttest_denom' in the type store
    # Getting the type of 'stypy_return_type' (line 3863)
    stypy_return_type_586323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3863, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_586323)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_equal_var_ttest_denom'
    return stypy_return_type_586323

# Assigning a type to the variable '_equal_var_ttest_denom' (line 3863)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3863, 0), '_equal_var_ttest_denom', _equal_var_ttest_denom)

# Assigning a Call to a Name (line 3869):

# Assigning a Call to a Name (line 3869):

# Call to namedtuple(...): (line 3869)
# Processing the call arguments (line 3869)
str_586325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3869, 29), 'str', 'Ttest_indResult')

# Obtaining an instance of the builtin type 'tuple' (line 3869)
tuple_586326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3869, 49), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 3869)
# Adding element type (line 3869)
str_586327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3869, 49), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3869, 49), tuple_586326, str_586327)
# Adding element type (line 3869)
str_586328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3869, 62), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3869, 49), tuple_586326, str_586328)

# Processing the call keyword arguments (line 3869)
kwargs_586329 = {}
# Getting the type of 'namedtuple' (line 3869)
namedtuple_586324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3869, 18), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 3869)
namedtuple_call_result_586330 = invoke(stypy.reporting.localization.Localization(__file__, 3869, 18), namedtuple_586324, *[str_586325, tuple_586326], **kwargs_586329)

# Assigning a type to the variable 'Ttest_indResult' (line 3869)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3869, 0), 'Ttest_indResult', namedtuple_call_result_586330)

@norecursion
def ttest_ind_from_stats(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 3873)
    True_586331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3873, 35), 'True')
    defaults = [True_586331]
    # Create a new context for function 'ttest_ind_from_stats'
    module_type_store = module_type_store.open_function_context('ttest_ind_from_stats', 3872, 0, False)
    
    # Passed parameters checking function
    ttest_ind_from_stats.stypy_localization = localization
    ttest_ind_from_stats.stypy_type_of_self = None
    ttest_ind_from_stats.stypy_type_store = module_type_store
    ttest_ind_from_stats.stypy_function_name = 'ttest_ind_from_stats'
    ttest_ind_from_stats.stypy_param_names_list = ['mean1', 'std1', 'nobs1', 'mean2', 'std2', 'nobs2', 'equal_var']
    ttest_ind_from_stats.stypy_varargs_param_name = None
    ttest_ind_from_stats.stypy_kwargs_param_name = None
    ttest_ind_from_stats.stypy_call_defaults = defaults
    ttest_ind_from_stats.stypy_call_varargs = varargs
    ttest_ind_from_stats.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ttest_ind_from_stats', ['mean1', 'std1', 'nobs1', 'mean2', 'std2', 'nobs2', 'equal_var'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ttest_ind_from_stats', localization, ['mean1', 'std1', 'nobs1', 'mean2', 'std2', 'nobs2', 'equal_var'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ttest_ind_from_stats(...)' code ##################

    str_586332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3949, (-1)), 'str', "\n    T-test for means of two independent samples from descriptive statistics.\n\n    This is a two-sided test for the null hypothesis that two independent\n    samples have identical average (expected) values.\n\n    Parameters\n    ----------\n    mean1 : array_like\n        The mean(s) of sample 1.\n    std1 : array_like\n        The standard deviation(s) of sample 1.\n    nobs1 : array_like\n        The number(s) of observations of sample 1.\n    mean2 : array_like\n        The mean(s) of sample 2\n    std2 : array_like\n        The standard deviations(s) of sample 2.\n    nobs2 : array_like\n        The number(s) of observations of sample 2.\n    equal_var : bool, optional\n        If True (default), perform a standard independent 2 sample test\n        that assumes equal population variances [1]_.\n        If False, perform Welch's t-test, which does not assume equal\n        population variance [2]_.\n\n    Returns\n    -------\n    statistic : float or array\n        The calculated t-statistics\n    pvalue : float or array\n        The two-tailed p-value.\n\n    See Also\n    --------\n    scipy.stats.ttest_ind\n\n    Notes\n    -----\n\n    .. versionadded:: 0.16.0\n\n    References\n    ----------\n    .. [1] http://en.wikipedia.org/wiki/T-test#Independent_two-sample_t-test\n\n    .. [2] http://en.wikipedia.org/wiki/Welch%27s_t_test\n\n    Examples\n    --------\n    Suppose we have the summary data for two samples, as follows::\n\n                         Sample   Sample\n                   Size   Mean   Variance\n        Sample 1    13    15.0     87.5\n        Sample 2    11    12.0     39.0\n\n    Apply the t-test to this data (with the assumption that the population\n    variances are equal):\n\n    >>> from scipy.stats import ttest_ind_from_stats\n    >>> ttest_ind_from_stats(mean1=15.0, std1=np.sqrt(87.5), nobs1=13,\n    ...                      mean2=12.0, std2=np.sqrt(39.0), nobs2=11)\n    Ttest_indResult(statistic=0.90513580933102689, pvalue=0.37519967975814872)\n\n    For comparison, here is the data from which those summary statistics\n    were taken.  With this data, we can compute the same result using\n    `scipy.stats.ttest_ind`:\n\n    >>> a = np.array([1, 3, 4, 6, 11, 13, 15, 19, 22, 24, 25, 26, 26])\n    >>> b = np.array([2, 4, 6, 9, 11, 13, 14, 15, 18, 19, 21])\n    >>> from scipy.stats import ttest_ind\n    >>> ttest_ind(a, b)\n    Ttest_indResult(statistic=0.905135809331027, pvalue=0.37519967975814861)\n\n    ")
    
    # Getting the type of 'equal_var' (line 3950)
    equal_var_586333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3950, 7), 'equal_var')
    # Testing the type of an if condition (line 3950)
    if_condition_586334 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3950, 4), equal_var_586333)
    # Assigning a type to the variable 'if_condition_586334' (line 3950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3950, 4), 'if_condition_586334', if_condition_586334)
    # SSA begins for if statement (line 3950)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 3951):
    
    # Assigning a Subscript to a Name (line 3951):
    
    # Obtaining the type of the subscript
    int_586335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3951, 8), 'int')
    
    # Call to _equal_var_ttest_denom(...): (line 3951)
    # Processing the call arguments (line 3951)
    # Getting the type of 'std1' (line 3951)
    std1_586337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 43), 'std1', False)
    int_586338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3951, 49), 'int')
    # Applying the binary operator '**' (line 3951)
    result_pow_586339 = python_operator(stypy.reporting.localization.Localization(__file__, 3951, 43), '**', std1_586337, int_586338)
    
    # Getting the type of 'nobs1' (line 3951)
    nobs1_586340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 52), 'nobs1', False)
    # Getting the type of 'std2' (line 3951)
    std2_586341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 59), 'std2', False)
    int_586342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3951, 65), 'int')
    # Applying the binary operator '**' (line 3951)
    result_pow_586343 = python_operator(stypy.reporting.localization.Localization(__file__, 3951, 59), '**', std2_586341, int_586342)
    
    # Getting the type of 'nobs2' (line 3951)
    nobs2_586344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 68), 'nobs2', False)
    # Processing the call keyword arguments (line 3951)
    kwargs_586345 = {}
    # Getting the type of '_equal_var_ttest_denom' (line 3951)
    _equal_var_ttest_denom_586336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 20), '_equal_var_ttest_denom', False)
    # Calling _equal_var_ttest_denom(args, kwargs) (line 3951)
    _equal_var_ttest_denom_call_result_586346 = invoke(stypy.reporting.localization.Localization(__file__, 3951, 20), _equal_var_ttest_denom_586336, *[result_pow_586339, nobs1_586340, result_pow_586343, nobs2_586344], **kwargs_586345)
    
    # Obtaining the member '__getitem__' of a type (line 3951)
    getitem___586347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3951, 8), _equal_var_ttest_denom_call_result_586346, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3951)
    subscript_call_result_586348 = invoke(stypy.reporting.localization.Localization(__file__, 3951, 8), getitem___586347, int_586335)
    
    # Assigning a type to the variable 'tuple_var_assignment_579953' (line 3951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3951, 8), 'tuple_var_assignment_579953', subscript_call_result_586348)
    
    # Assigning a Subscript to a Name (line 3951):
    
    # Obtaining the type of the subscript
    int_586349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3951, 8), 'int')
    
    # Call to _equal_var_ttest_denom(...): (line 3951)
    # Processing the call arguments (line 3951)
    # Getting the type of 'std1' (line 3951)
    std1_586351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 43), 'std1', False)
    int_586352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3951, 49), 'int')
    # Applying the binary operator '**' (line 3951)
    result_pow_586353 = python_operator(stypy.reporting.localization.Localization(__file__, 3951, 43), '**', std1_586351, int_586352)
    
    # Getting the type of 'nobs1' (line 3951)
    nobs1_586354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 52), 'nobs1', False)
    # Getting the type of 'std2' (line 3951)
    std2_586355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 59), 'std2', False)
    int_586356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3951, 65), 'int')
    # Applying the binary operator '**' (line 3951)
    result_pow_586357 = python_operator(stypy.reporting.localization.Localization(__file__, 3951, 59), '**', std2_586355, int_586356)
    
    # Getting the type of 'nobs2' (line 3951)
    nobs2_586358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 68), 'nobs2', False)
    # Processing the call keyword arguments (line 3951)
    kwargs_586359 = {}
    # Getting the type of '_equal_var_ttest_denom' (line 3951)
    _equal_var_ttest_denom_586350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 20), '_equal_var_ttest_denom', False)
    # Calling _equal_var_ttest_denom(args, kwargs) (line 3951)
    _equal_var_ttest_denom_call_result_586360 = invoke(stypy.reporting.localization.Localization(__file__, 3951, 20), _equal_var_ttest_denom_586350, *[result_pow_586353, nobs1_586354, result_pow_586357, nobs2_586358], **kwargs_586359)
    
    # Obtaining the member '__getitem__' of a type (line 3951)
    getitem___586361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3951, 8), _equal_var_ttest_denom_call_result_586360, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3951)
    subscript_call_result_586362 = invoke(stypy.reporting.localization.Localization(__file__, 3951, 8), getitem___586361, int_586349)
    
    # Assigning a type to the variable 'tuple_var_assignment_579954' (line 3951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3951, 8), 'tuple_var_assignment_579954', subscript_call_result_586362)
    
    # Assigning a Name to a Name (line 3951):
    # Getting the type of 'tuple_var_assignment_579953' (line 3951)
    tuple_var_assignment_579953_586363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 8), 'tuple_var_assignment_579953')
    # Assigning a type to the variable 'df' (line 3951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3951, 8), 'df', tuple_var_assignment_579953_586363)
    
    # Assigning a Name to a Name (line 3951):
    # Getting the type of 'tuple_var_assignment_579954' (line 3951)
    tuple_var_assignment_579954_586364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3951, 8), 'tuple_var_assignment_579954')
    # Assigning a type to the variable 'denom' (line 3951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3951, 12), 'denom', tuple_var_assignment_579954_586364)
    # SSA branch for the else part of an if statement (line 3950)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 3953):
    
    # Assigning a Subscript to a Name (line 3953):
    
    # Obtaining the type of the subscript
    int_586365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3953, 8), 'int')
    
    # Call to _unequal_var_ttest_denom(...): (line 3953)
    # Processing the call arguments (line 3953)
    # Getting the type of 'std1' (line 3953)
    std1_586367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3953, 45), 'std1', False)
    int_586368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3953, 51), 'int')
    # Applying the binary operator '**' (line 3953)
    result_pow_586369 = python_operator(stypy.reporting.localization.Localization(__file__, 3953, 45), '**', std1_586367, int_586368)
    
    # Getting the type of 'nobs1' (line 3953)
    nobs1_586370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3953, 54), 'nobs1', False)
    # Getting the type of 'std2' (line 3954)
    std2_586371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3954, 45), 'std2', False)
    int_586372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3954, 51), 'int')
    # Applying the binary operator '**' (line 3954)
    result_pow_586373 = python_operator(stypy.reporting.localization.Localization(__file__, 3954, 45), '**', std2_586371, int_586372)
    
    # Getting the type of 'nobs2' (line 3954)
    nobs2_586374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3954, 54), 'nobs2', False)
    # Processing the call keyword arguments (line 3953)
    kwargs_586375 = {}
    # Getting the type of '_unequal_var_ttest_denom' (line 3953)
    _unequal_var_ttest_denom_586366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3953, 20), '_unequal_var_ttest_denom', False)
    # Calling _unequal_var_ttest_denom(args, kwargs) (line 3953)
    _unequal_var_ttest_denom_call_result_586376 = invoke(stypy.reporting.localization.Localization(__file__, 3953, 20), _unequal_var_ttest_denom_586366, *[result_pow_586369, nobs1_586370, result_pow_586373, nobs2_586374], **kwargs_586375)
    
    # Obtaining the member '__getitem__' of a type (line 3953)
    getitem___586377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3953, 8), _unequal_var_ttest_denom_call_result_586376, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3953)
    subscript_call_result_586378 = invoke(stypy.reporting.localization.Localization(__file__, 3953, 8), getitem___586377, int_586365)
    
    # Assigning a type to the variable 'tuple_var_assignment_579955' (line 3953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3953, 8), 'tuple_var_assignment_579955', subscript_call_result_586378)
    
    # Assigning a Subscript to a Name (line 3953):
    
    # Obtaining the type of the subscript
    int_586379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3953, 8), 'int')
    
    # Call to _unequal_var_ttest_denom(...): (line 3953)
    # Processing the call arguments (line 3953)
    # Getting the type of 'std1' (line 3953)
    std1_586381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3953, 45), 'std1', False)
    int_586382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3953, 51), 'int')
    # Applying the binary operator '**' (line 3953)
    result_pow_586383 = python_operator(stypy.reporting.localization.Localization(__file__, 3953, 45), '**', std1_586381, int_586382)
    
    # Getting the type of 'nobs1' (line 3953)
    nobs1_586384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3953, 54), 'nobs1', False)
    # Getting the type of 'std2' (line 3954)
    std2_586385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3954, 45), 'std2', False)
    int_586386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3954, 51), 'int')
    # Applying the binary operator '**' (line 3954)
    result_pow_586387 = python_operator(stypy.reporting.localization.Localization(__file__, 3954, 45), '**', std2_586385, int_586386)
    
    # Getting the type of 'nobs2' (line 3954)
    nobs2_586388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3954, 54), 'nobs2', False)
    # Processing the call keyword arguments (line 3953)
    kwargs_586389 = {}
    # Getting the type of '_unequal_var_ttest_denom' (line 3953)
    _unequal_var_ttest_denom_586380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3953, 20), '_unequal_var_ttest_denom', False)
    # Calling _unequal_var_ttest_denom(args, kwargs) (line 3953)
    _unequal_var_ttest_denom_call_result_586390 = invoke(stypy.reporting.localization.Localization(__file__, 3953, 20), _unequal_var_ttest_denom_586380, *[result_pow_586383, nobs1_586384, result_pow_586387, nobs2_586388], **kwargs_586389)
    
    # Obtaining the member '__getitem__' of a type (line 3953)
    getitem___586391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3953, 8), _unequal_var_ttest_denom_call_result_586390, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3953)
    subscript_call_result_586392 = invoke(stypy.reporting.localization.Localization(__file__, 3953, 8), getitem___586391, int_586379)
    
    # Assigning a type to the variable 'tuple_var_assignment_579956' (line 3953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3953, 8), 'tuple_var_assignment_579956', subscript_call_result_586392)
    
    # Assigning a Name to a Name (line 3953):
    # Getting the type of 'tuple_var_assignment_579955' (line 3953)
    tuple_var_assignment_579955_586393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3953, 8), 'tuple_var_assignment_579955')
    # Assigning a type to the variable 'df' (line 3953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3953, 8), 'df', tuple_var_assignment_579955_586393)
    
    # Assigning a Name to a Name (line 3953):
    # Getting the type of 'tuple_var_assignment_579956' (line 3953)
    tuple_var_assignment_579956_586394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3953, 8), 'tuple_var_assignment_579956')
    # Assigning a type to the variable 'denom' (line 3953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3953, 12), 'denom', tuple_var_assignment_579956_586394)
    # SSA join for if statement (line 3950)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3956):
    
    # Assigning a Call to a Name (line 3956):
    
    # Call to _ttest_ind_from_stats(...): (line 3956)
    # Processing the call arguments (line 3956)
    # Getting the type of 'mean1' (line 3956)
    mean1_586396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 32), 'mean1', False)
    # Getting the type of 'mean2' (line 3956)
    mean2_586397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 39), 'mean2', False)
    # Getting the type of 'denom' (line 3956)
    denom_586398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 46), 'denom', False)
    # Getting the type of 'df' (line 3956)
    df_586399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 53), 'df', False)
    # Processing the call keyword arguments (line 3956)
    kwargs_586400 = {}
    # Getting the type of '_ttest_ind_from_stats' (line 3956)
    _ttest_ind_from_stats_586395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 10), '_ttest_ind_from_stats', False)
    # Calling _ttest_ind_from_stats(args, kwargs) (line 3956)
    _ttest_ind_from_stats_call_result_586401 = invoke(stypy.reporting.localization.Localization(__file__, 3956, 10), _ttest_ind_from_stats_586395, *[mean1_586396, mean2_586397, denom_586398, df_586399], **kwargs_586400)
    
    # Assigning a type to the variable 'res' (line 3956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3956, 4), 'res', _ttest_ind_from_stats_call_result_586401)
    
    # Call to Ttest_indResult(...): (line 3957)
    # Getting the type of 'res' (line 3957)
    res_586403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3957, 28), 'res', False)
    # Processing the call keyword arguments (line 3957)
    kwargs_586404 = {}
    # Getting the type of 'Ttest_indResult' (line 3957)
    Ttest_indResult_586402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3957, 11), 'Ttest_indResult', False)
    # Calling Ttest_indResult(args, kwargs) (line 3957)
    Ttest_indResult_call_result_586405 = invoke(stypy.reporting.localization.Localization(__file__, 3957, 11), Ttest_indResult_586402, *[res_586403], **kwargs_586404)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3957)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3957, 4), 'stypy_return_type', Ttest_indResult_call_result_586405)
    
    # ################# End of 'ttest_ind_from_stats(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ttest_ind_from_stats' in the type store
    # Getting the type of 'stypy_return_type' (line 3872)
    stypy_return_type_586406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3872, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_586406)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ttest_ind_from_stats'
    return stypy_return_type_586406

# Assigning a type to the variable 'ttest_ind_from_stats' (line 3872)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3872, 0), 'ttest_ind_from_stats', ttest_ind_from_stats)

@norecursion
def ttest_ind(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_586407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3960, 25), 'int')
    # Getting the type of 'True' (line 3960)
    True_586408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3960, 38), 'True')
    str_586409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3960, 55), 'str', 'propagate')
    defaults = [int_586407, True_586408, str_586409]
    # Create a new context for function 'ttest_ind'
    module_type_store = module_type_store.open_function_context('ttest_ind', 3960, 0, False)
    
    # Passed parameters checking function
    ttest_ind.stypy_localization = localization
    ttest_ind.stypy_type_of_self = None
    ttest_ind.stypy_type_store = module_type_store
    ttest_ind.stypy_function_name = 'ttest_ind'
    ttest_ind.stypy_param_names_list = ['a', 'b', 'axis', 'equal_var', 'nan_policy']
    ttest_ind.stypy_varargs_param_name = None
    ttest_ind.stypy_kwargs_param_name = None
    ttest_ind.stypy_call_defaults = defaults
    ttest_ind.stypy_call_varargs = varargs
    ttest_ind.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ttest_ind', ['a', 'b', 'axis', 'equal_var', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ttest_ind', localization, ['a', 'b', 'axis', 'equal_var', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ttest_ind(...)' code ##################

    str_586410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4052, (-1)), 'str', "\n    Calculate the T-test for the means of *two independent* samples of scores.\n\n    This is a two-sided test for the null hypothesis that 2 independent samples\n    have identical average (expected) values. This test assumes that the\n    populations have identical variances by default.\n\n    Parameters\n    ----------\n    a, b : array_like\n        The arrays must have the same shape, except in the dimension\n        corresponding to `axis` (the first, by default).\n    axis : int or None, optional\n        Axis along which to compute test. If None, compute over the whole\n        arrays, `a`, and `b`.\n    equal_var : bool, optional\n        If True (default), perform a standard independent 2 sample test\n        that assumes equal population variances [1]_.\n        If False, perform Welch's t-test, which does not assume equal\n        population variance [2]_.\n\n        .. versionadded:: 0.11.0\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n\n    Returns\n    -------\n    statistic : float or array\n        The calculated t-statistic.\n    pvalue : float or array\n        The two-tailed p-value.\n\n    Notes\n    -----\n    We can use this test, if we observe two independent samples from\n    the same or different population, e.g. exam scores of boys and\n    girls or of two ethnic groups. The test measures whether the\n    average (expected) value differs significantly across samples. If\n    we observe a large p-value, for example larger than 0.05 or 0.1,\n    then we cannot reject the null hypothesis of identical average scores.\n    If the p-value is smaller than the threshold, e.g. 1%, 5% or 10%,\n    then we reject the null hypothesis of equal averages.\n\n    References\n    ----------\n    .. [1] http://en.wikipedia.org/wiki/T-test#Independent_two-sample_t-test\n\n    .. [2] http://en.wikipedia.org/wiki/Welch%27s_t_test\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> np.random.seed(12345678)\n\n    Test with sample with identical means:\n\n    >>> rvs1 = stats.norm.rvs(loc=5,scale=10,size=500)\n    >>> rvs2 = stats.norm.rvs(loc=5,scale=10,size=500)\n    >>> stats.ttest_ind(rvs1,rvs2)\n    (0.26833823296239279, 0.78849443369564776)\n    >>> stats.ttest_ind(rvs1,rvs2, equal_var = False)\n    (0.26833823296239279, 0.78849452749500748)\n\n    `ttest_ind` underestimates p for unequal variances:\n\n    >>> rvs3 = stats.norm.rvs(loc=5, scale=20, size=500)\n    >>> stats.ttest_ind(rvs1, rvs3)\n    (-0.46580283298287162, 0.64145827413436174)\n    >>> stats.ttest_ind(rvs1, rvs3, equal_var = False)\n    (-0.46580283298287162, 0.64149646246569292)\n\n    When n1 != n2, the equal variance t-statistic is no longer equal to the\n    unequal variance t-statistic:\n\n    >>> rvs4 = stats.norm.rvs(loc=5, scale=20, size=100)\n    >>> stats.ttest_ind(rvs1, rvs4)\n    (-0.99882539442782481, 0.3182832709103896)\n    >>> stats.ttest_ind(rvs1, rvs4, equal_var = False)\n    (-0.69712570584654099, 0.48716927725402048)\n\n    T-test with different means, variance, and n:\n\n    >>> rvs5 = stats.norm.rvs(loc=8, scale=20, size=100)\n    >>> stats.ttest_ind(rvs1, rvs5)\n    (-1.4679669854490653, 0.14263895620529152)\n    >>> stats.ttest_ind(rvs1, rvs5, equal_var = False)\n    (-0.94365973617132992, 0.34744170334794122)\n\n    ")
    
    # Assigning a Call to a Tuple (line 4053):
    
    # Assigning a Subscript to a Name (line 4053):
    
    # Obtaining the type of the subscript
    int_586411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4053, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 4053)
    # Processing the call arguments (line 4053)
    # Getting the type of 'a' (line 4053)
    a_586413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 31), 'a', False)
    # Getting the type of 'b' (line 4053)
    b_586414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 34), 'b', False)
    # Getting the type of 'axis' (line 4053)
    axis_586415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 37), 'axis', False)
    # Processing the call keyword arguments (line 4053)
    kwargs_586416 = {}
    # Getting the type of '_chk2_asarray' (line 4053)
    _chk2_asarray_586412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 4053)
    _chk2_asarray_call_result_586417 = invoke(stypy.reporting.localization.Localization(__file__, 4053, 17), _chk2_asarray_586412, *[a_586413, b_586414, axis_586415], **kwargs_586416)
    
    # Obtaining the member '__getitem__' of a type (line 4053)
    getitem___586418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4053, 4), _chk2_asarray_call_result_586417, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4053)
    subscript_call_result_586419 = invoke(stypy.reporting.localization.Localization(__file__, 4053, 4), getitem___586418, int_586411)
    
    # Assigning a type to the variable 'tuple_var_assignment_579957' (line 4053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4053, 4), 'tuple_var_assignment_579957', subscript_call_result_586419)
    
    # Assigning a Subscript to a Name (line 4053):
    
    # Obtaining the type of the subscript
    int_586420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4053, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 4053)
    # Processing the call arguments (line 4053)
    # Getting the type of 'a' (line 4053)
    a_586422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 31), 'a', False)
    # Getting the type of 'b' (line 4053)
    b_586423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 34), 'b', False)
    # Getting the type of 'axis' (line 4053)
    axis_586424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 37), 'axis', False)
    # Processing the call keyword arguments (line 4053)
    kwargs_586425 = {}
    # Getting the type of '_chk2_asarray' (line 4053)
    _chk2_asarray_586421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 4053)
    _chk2_asarray_call_result_586426 = invoke(stypy.reporting.localization.Localization(__file__, 4053, 17), _chk2_asarray_586421, *[a_586422, b_586423, axis_586424], **kwargs_586425)
    
    # Obtaining the member '__getitem__' of a type (line 4053)
    getitem___586427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4053, 4), _chk2_asarray_call_result_586426, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4053)
    subscript_call_result_586428 = invoke(stypy.reporting.localization.Localization(__file__, 4053, 4), getitem___586427, int_586420)
    
    # Assigning a type to the variable 'tuple_var_assignment_579958' (line 4053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4053, 4), 'tuple_var_assignment_579958', subscript_call_result_586428)
    
    # Assigning a Subscript to a Name (line 4053):
    
    # Obtaining the type of the subscript
    int_586429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4053, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 4053)
    # Processing the call arguments (line 4053)
    # Getting the type of 'a' (line 4053)
    a_586431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 31), 'a', False)
    # Getting the type of 'b' (line 4053)
    b_586432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 34), 'b', False)
    # Getting the type of 'axis' (line 4053)
    axis_586433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 37), 'axis', False)
    # Processing the call keyword arguments (line 4053)
    kwargs_586434 = {}
    # Getting the type of '_chk2_asarray' (line 4053)
    _chk2_asarray_586430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 4053)
    _chk2_asarray_call_result_586435 = invoke(stypy.reporting.localization.Localization(__file__, 4053, 17), _chk2_asarray_586430, *[a_586431, b_586432, axis_586433], **kwargs_586434)
    
    # Obtaining the member '__getitem__' of a type (line 4053)
    getitem___586436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4053, 4), _chk2_asarray_call_result_586435, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4053)
    subscript_call_result_586437 = invoke(stypy.reporting.localization.Localization(__file__, 4053, 4), getitem___586436, int_586429)
    
    # Assigning a type to the variable 'tuple_var_assignment_579959' (line 4053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4053, 4), 'tuple_var_assignment_579959', subscript_call_result_586437)
    
    # Assigning a Name to a Name (line 4053):
    # Getting the type of 'tuple_var_assignment_579957' (line 4053)
    tuple_var_assignment_579957_586438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 4), 'tuple_var_assignment_579957')
    # Assigning a type to the variable 'a' (line 4053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4053, 4), 'a', tuple_var_assignment_579957_586438)
    
    # Assigning a Name to a Name (line 4053):
    # Getting the type of 'tuple_var_assignment_579958' (line 4053)
    tuple_var_assignment_579958_586439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 4), 'tuple_var_assignment_579958')
    # Assigning a type to the variable 'b' (line 4053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4053, 7), 'b', tuple_var_assignment_579958_586439)
    
    # Assigning a Name to a Name (line 4053):
    # Getting the type of 'tuple_var_assignment_579959' (line 4053)
    tuple_var_assignment_579959_586440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 4), 'tuple_var_assignment_579959')
    # Assigning a type to the variable 'axis' (line 4053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4053, 10), 'axis', tuple_var_assignment_579959_586440)
    
    # Assigning a Call to a Tuple (line 4056):
    
    # Assigning a Subscript to a Name (line 4056):
    
    # Obtaining the type of the subscript
    int_586441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4056, 4), 'int')
    
    # Call to _contains_nan(...): (line 4056)
    # Processing the call arguments (line 4056)
    # Getting the type of 'a' (line 4056)
    a_586443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4056, 29), 'a', False)
    # Getting the type of 'nan_policy' (line 4056)
    nan_policy_586444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4056, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 4056)
    kwargs_586445 = {}
    # Getting the type of '_contains_nan' (line 4056)
    _contains_nan_586442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4056, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 4056)
    _contains_nan_call_result_586446 = invoke(stypy.reporting.localization.Localization(__file__, 4056, 15), _contains_nan_586442, *[a_586443, nan_policy_586444], **kwargs_586445)
    
    # Obtaining the member '__getitem__' of a type (line 4056)
    getitem___586447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4056, 4), _contains_nan_call_result_586446, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4056)
    subscript_call_result_586448 = invoke(stypy.reporting.localization.Localization(__file__, 4056, 4), getitem___586447, int_586441)
    
    # Assigning a type to the variable 'tuple_var_assignment_579960' (line 4056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4056, 4), 'tuple_var_assignment_579960', subscript_call_result_586448)
    
    # Assigning a Subscript to a Name (line 4056):
    
    # Obtaining the type of the subscript
    int_586449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4056, 4), 'int')
    
    # Call to _contains_nan(...): (line 4056)
    # Processing the call arguments (line 4056)
    # Getting the type of 'a' (line 4056)
    a_586451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4056, 29), 'a', False)
    # Getting the type of 'nan_policy' (line 4056)
    nan_policy_586452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4056, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 4056)
    kwargs_586453 = {}
    # Getting the type of '_contains_nan' (line 4056)
    _contains_nan_586450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4056, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 4056)
    _contains_nan_call_result_586454 = invoke(stypy.reporting.localization.Localization(__file__, 4056, 15), _contains_nan_586450, *[a_586451, nan_policy_586452], **kwargs_586453)
    
    # Obtaining the member '__getitem__' of a type (line 4056)
    getitem___586455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4056, 4), _contains_nan_call_result_586454, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4056)
    subscript_call_result_586456 = invoke(stypy.reporting.localization.Localization(__file__, 4056, 4), getitem___586455, int_586449)
    
    # Assigning a type to the variable 'tuple_var_assignment_579961' (line 4056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4056, 4), 'tuple_var_assignment_579961', subscript_call_result_586456)
    
    # Assigning a Name to a Name (line 4056):
    # Getting the type of 'tuple_var_assignment_579960' (line 4056)
    tuple_var_assignment_579960_586457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4056, 4), 'tuple_var_assignment_579960')
    # Assigning a type to the variable 'cna' (line 4056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4056, 4), 'cna', tuple_var_assignment_579960_586457)
    
    # Assigning a Name to a Name (line 4056):
    # Getting the type of 'tuple_var_assignment_579961' (line 4056)
    tuple_var_assignment_579961_586458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4056, 4), 'tuple_var_assignment_579961')
    # Assigning a type to the variable 'npa' (line 4056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4056, 9), 'npa', tuple_var_assignment_579961_586458)
    
    # Assigning a Call to a Tuple (line 4057):
    
    # Assigning a Subscript to a Name (line 4057):
    
    # Obtaining the type of the subscript
    int_586459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4057, 4), 'int')
    
    # Call to _contains_nan(...): (line 4057)
    # Processing the call arguments (line 4057)
    # Getting the type of 'b' (line 4057)
    b_586461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4057, 29), 'b', False)
    # Getting the type of 'nan_policy' (line 4057)
    nan_policy_586462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4057, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 4057)
    kwargs_586463 = {}
    # Getting the type of '_contains_nan' (line 4057)
    _contains_nan_586460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4057, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 4057)
    _contains_nan_call_result_586464 = invoke(stypy.reporting.localization.Localization(__file__, 4057, 15), _contains_nan_586460, *[b_586461, nan_policy_586462], **kwargs_586463)
    
    # Obtaining the member '__getitem__' of a type (line 4057)
    getitem___586465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4057, 4), _contains_nan_call_result_586464, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4057)
    subscript_call_result_586466 = invoke(stypy.reporting.localization.Localization(__file__, 4057, 4), getitem___586465, int_586459)
    
    # Assigning a type to the variable 'tuple_var_assignment_579962' (line 4057)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4057, 4), 'tuple_var_assignment_579962', subscript_call_result_586466)
    
    # Assigning a Subscript to a Name (line 4057):
    
    # Obtaining the type of the subscript
    int_586467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4057, 4), 'int')
    
    # Call to _contains_nan(...): (line 4057)
    # Processing the call arguments (line 4057)
    # Getting the type of 'b' (line 4057)
    b_586469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4057, 29), 'b', False)
    # Getting the type of 'nan_policy' (line 4057)
    nan_policy_586470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4057, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 4057)
    kwargs_586471 = {}
    # Getting the type of '_contains_nan' (line 4057)
    _contains_nan_586468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4057, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 4057)
    _contains_nan_call_result_586472 = invoke(stypy.reporting.localization.Localization(__file__, 4057, 15), _contains_nan_586468, *[b_586469, nan_policy_586470], **kwargs_586471)
    
    # Obtaining the member '__getitem__' of a type (line 4057)
    getitem___586473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4057, 4), _contains_nan_call_result_586472, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4057)
    subscript_call_result_586474 = invoke(stypy.reporting.localization.Localization(__file__, 4057, 4), getitem___586473, int_586467)
    
    # Assigning a type to the variable 'tuple_var_assignment_579963' (line 4057)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4057, 4), 'tuple_var_assignment_579963', subscript_call_result_586474)
    
    # Assigning a Name to a Name (line 4057):
    # Getting the type of 'tuple_var_assignment_579962' (line 4057)
    tuple_var_assignment_579962_586475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4057, 4), 'tuple_var_assignment_579962')
    # Assigning a type to the variable 'cnb' (line 4057)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4057, 4), 'cnb', tuple_var_assignment_579962_586475)
    
    # Assigning a Name to a Name (line 4057):
    # Getting the type of 'tuple_var_assignment_579963' (line 4057)
    tuple_var_assignment_579963_586476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4057, 4), 'tuple_var_assignment_579963')
    # Assigning a type to the variable 'npb' (line 4057)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4057, 9), 'npb', tuple_var_assignment_579963_586476)
    
    # Assigning a BoolOp to a Name (line 4058):
    
    # Assigning a BoolOp to a Name (line 4058):
    
    # Evaluating a boolean operation
    # Getting the type of 'cna' (line 4058)
    cna_586477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4058, 19), 'cna')
    # Getting the type of 'cnb' (line 4058)
    cnb_586478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4058, 26), 'cnb')
    # Applying the binary operator 'or' (line 4058)
    result_or_keyword_586479 = python_operator(stypy.reporting.localization.Localization(__file__, 4058, 19), 'or', cna_586477, cnb_586478)
    
    # Assigning a type to the variable 'contains_nan' (line 4058)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4058, 4), 'contains_nan', result_or_keyword_586479)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'npa' (line 4059)
    npa_586480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4059, 7), 'npa')
    str_586481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4059, 14), 'str', 'omit')
    # Applying the binary operator '==' (line 4059)
    result_eq_586482 = python_operator(stypy.reporting.localization.Localization(__file__, 4059, 7), '==', npa_586480, str_586481)
    
    
    # Getting the type of 'npb' (line 4059)
    npb_586483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4059, 24), 'npb')
    str_586484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4059, 31), 'str', 'omit')
    # Applying the binary operator '==' (line 4059)
    result_eq_586485 = python_operator(stypy.reporting.localization.Localization(__file__, 4059, 24), '==', npb_586483, str_586484)
    
    # Applying the binary operator 'or' (line 4059)
    result_or_keyword_586486 = python_operator(stypy.reporting.localization.Localization(__file__, 4059, 7), 'or', result_eq_586482, result_eq_586485)
    
    # Testing the type of an if condition (line 4059)
    if_condition_586487 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4059, 4), result_or_keyword_586486)
    # Assigning a type to the variable 'if_condition_586487' (line 4059)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4059, 4), 'if_condition_586487', if_condition_586487)
    # SSA begins for if statement (line 4059)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 4060):
    
    # Assigning a Str to a Name (line 4060):
    str_586488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4060, 21), 'str', 'omit')
    # Assigning a type to the variable 'nan_policy' (line 4060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4060, 8), 'nan_policy', str_586488)
    # SSA join for if statement (line 4059)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 4062)
    contains_nan_586489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4062, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 4062)
    nan_policy_586490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4062, 24), 'nan_policy')
    str_586491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4062, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 4062)
    result_eq_586492 = python_operator(stypy.reporting.localization.Localization(__file__, 4062, 24), '==', nan_policy_586490, str_586491)
    
    # Applying the binary operator 'and' (line 4062)
    result_and_keyword_586493 = python_operator(stypy.reporting.localization.Localization(__file__, 4062, 7), 'and', contains_nan_586489, result_eq_586492)
    
    # Testing the type of an if condition (line 4062)
    if_condition_586494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4062, 4), result_and_keyword_586493)
    # Assigning a type to the variable 'if_condition_586494' (line 4062)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4062, 4), 'if_condition_586494', if_condition_586494)
    # SSA begins for if statement (line 4062)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4063):
    
    # Assigning a Call to a Name (line 4063):
    
    # Call to masked_invalid(...): (line 4063)
    # Processing the call arguments (line 4063)
    # Getting the type of 'a' (line 4063)
    a_586497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4063, 30), 'a', False)
    # Processing the call keyword arguments (line 4063)
    kwargs_586498 = {}
    # Getting the type of 'ma' (line 4063)
    ma_586495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4063, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 4063)
    masked_invalid_586496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4063, 12), ma_586495, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 4063)
    masked_invalid_call_result_586499 = invoke(stypy.reporting.localization.Localization(__file__, 4063, 12), masked_invalid_586496, *[a_586497], **kwargs_586498)
    
    # Assigning a type to the variable 'a' (line 4063)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4063, 8), 'a', masked_invalid_call_result_586499)
    
    # Assigning a Call to a Name (line 4064):
    
    # Assigning a Call to a Name (line 4064):
    
    # Call to masked_invalid(...): (line 4064)
    # Processing the call arguments (line 4064)
    # Getting the type of 'b' (line 4064)
    b_586502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4064, 30), 'b', False)
    # Processing the call keyword arguments (line 4064)
    kwargs_586503 = {}
    # Getting the type of 'ma' (line 4064)
    ma_586500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4064, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 4064)
    masked_invalid_586501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4064, 12), ma_586500, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 4064)
    masked_invalid_call_result_586504 = invoke(stypy.reporting.localization.Localization(__file__, 4064, 12), masked_invalid_586501, *[b_586502], **kwargs_586503)
    
    # Assigning a type to the variable 'b' (line 4064)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4064, 8), 'b', masked_invalid_call_result_586504)
    
    # Call to ttest_ind(...): (line 4065)
    # Processing the call arguments (line 4065)
    # Getting the type of 'a' (line 4065)
    a_586507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4065, 38), 'a', False)
    # Getting the type of 'b' (line 4065)
    b_586508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4065, 41), 'b', False)
    # Getting the type of 'axis' (line 4065)
    axis_586509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4065, 44), 'axis', False)
    # Getting the type of 'equal_var' (line 4065)
    equal_var_586510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4065, 50), 'equal_var', False)
    # Processing the call keyword arguments (line 4065)
    kwargs_586511 = {}
    # Getting the type of 'mstats_basic' (line 4065)
    mstats_basic_586505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4065, 15), 'mstats_basic', False)
    # Obtaining the member 'ttest_ind' of a type (line 4065)
    ttest_ind_586506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4065, 15), mstats_basic_586505, 'ttest_ind')
    # Calling ttest_ind(args, kwargs) (line 4065)
    ttest_ind_call_result_586512 = invoke(stypy.reporting.localization.Localization(__file__, 4065, 15), ttest_ind_586506, *[a_586507, b_586508, axis_586509, equal_var_586510], **kwargs_586511)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4065)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4065, 8), 'stypy_return_type', ttest_ind_call_result_586512)
    # SSA join for if statement (line 4062)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'a' (line 4067)
    a_586513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4067, 7), 'a')
    # Obtaining the member 'size' of a type (line 4067)
    size_586514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4067, 7), a_586513, 'size')
    int_586515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4067, 17), 'int')
    # Applying the binary operator '==' (line 4067)
    result_eq_586516 = python_operator(stypy.reporting.localization.Localization(__file__, 4067, 7), '==', size_586514, int_586515)
    
    
    # Getting the type of 'b' (line 4067)
    b_586517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4067, 22), 'b')
    # Obtaining the member 'size' of a type (line 4067)
    size_586518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4067, 22), b_586517, 'size')
    int_586519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4067, 32), 'int')
    # Applying the binary operator '==' (line 4067)
    result_eq_586520 = python_operator(stypy.reporting.localization.Localization(__file__, 4067, 22), '==', size_586518, int_586519)
    
    # Applying the binary operator 'or' (line 4067)
    result_or_keyword_586521 = python_operator(stypy.reporting.localization.Localization(__file__, 4067, 7), 'or', result_eq_586516, result_eq_586520)
    
    # Testing the type of an if condition (line 4067)
    if_condition_586522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4067, 4), result_or_keyword_586521)
    # Assigning a type to the variable 'if_condition_586522' (line 4067)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4067, 4), 'if_condition_586522', if_condition_586522)
    # SSA begins for if statement (line 4067)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to Ttest_indResult(...): (line 4068)
    # Processing the call arguments (line 4068)
    # Getting the type of 'np' (line 4068)
    np_586524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4068, 31), 'np', False)
    # Obtaining the member 'nan' of a type (line 4068)
    nan_586525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4068, 31), np_586524, 'nan')
    # Getting the type of 'np' (line 4068)
    np_586526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4068, 39), 'np', False)
    # Obtaining the member 'nan' of a type (line 4068)
    nan_586527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4068, 39), np_586526, 'nan')
    # Processing the call keyword arguments (line 4068)
    kwargs_586528 = {}
    # Getting the type of 'Ttest_indResult' (line 4068)
    Ttest_indResult_586523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4068, 15), 'Ttest_indResult', False)
    # Calling Ttest_indResult(args, kwargs) (line 4068)
    Ttest_indResult_call_result_586529 = invoke(stypy.reporting.localization.Localization(__file__, 4068, 15), Ttest_indResult_586523, *[nan_586525, nan_586527], **kwargs_586528)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4068)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4068, 8), 'stypy_return_type', Ttest_indResult_call_result_586529)
    # SSA join for if statement (line 4067)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 4070):
    
    # Assigning a Call to a Name (line 4070):
    
    # Call to var(...): (line 4070)
    # Processing the call arguments (line 4070)
    # Getting the type of 'a' (line 4070)
    a_586532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4070, 16), 'a', False)
    # Getting the type of 'axis' (line 4070)
    axis_586533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4070, 19), 'axis', False)
    # Processing the call keyword arguments (line 4070)
    int_586534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4070, 30), 'int')
    keyword_586535 = int_586534
    kwargs_586536 = {'ddof': keyword_586535}
    # Getting the type of 'np' (line 4070)
    np_586530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4070, 9), 'np', False)
    # Obtaining the member 'var' of a type (line 4070)
    var_586531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4070, 9), np_586530, 'var')
    # Calling var(args, kwargs) (line 4070)
    var_call_result_586537 = invoke(stypy.reporting.localization.Localization(__file__, 4070, 9), var_586531, *[a_586532, axis_586533], **kwargs_586536)
    
    # Assigning a type to the variable 'v1' (line 4070)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4070, 4), 'v1', var_call_result_586537)
    
    # Assigning a Call to a Name (line 4071):
    
    # Assigning a Call to a Name (line 4071):
    
    # Call to var(...): (line 4071)
    # Processing the call arguments (line 4071)
    # Getting the type of 'b' (line 4071)
    b_586540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4071, 16), 'b', False)
    # Getting the type of 'axis' (line 4071)
    axis_586541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4071, 19), 'axis', False)
    # Processing the call keyword arguments (line 4071)
    int_586542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4071, 30), 'int')
    keyword_586543 = int_586542
    kwargs_586544 = {'ddof': keyword_586543}
    # Getting the type of 'np' (line 4071)
    np_586538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4071, 9), 'np', False)
    # Obtaining the member 'var' of a type (line 4071)
    var_586539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4071, 9), np_586538, 'var')
    # Calling var(args, kwargs) (line 4071)
    var_call_result_586545 = invoke(stypy.reporting.localization.Localization(__file__, 4071, 9), var_586539, *[b_586540, axis_586541], **kwargs_586544)
    
    # Assigning a type to the variable 'v2' (line 4071)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4071, 4), 'v2', var_call_result_586545)
    
    # Assigning a Subscript to a Name (line 4072):
    
    # Assigning a Subscript to a Name (line 4072):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4072)
    axis_586546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4072, 17), 'axis')
    # Getting the type of 'a' (line 4072)
    a_586547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4072, 9), 'a')
    # Obtaining the member 'shape' of a type (line 4072)
    shape_586548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4072, 9), a_586547, 'shape')
    # Obtaining the member '__getitem__' of a type (line 4072)
    getitem___586549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4072, 9), shape_586548, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4072)
    subscript_call_result_586550 = invoke(stypy.reporting.localization.Localization(__file__, 4072, 9), getitem___586549, axis_586546)
    
    # Assigning a type to the variable 'n1' (line 4072)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4072, 4), 'n1', subscript_call_result_586550)
    
    # Assigning a Subscript to a Name (line 4073):
    
    # Assigning a Subscript to a Name (line 4073):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4073)
    axis_586551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4073, 17), 'axis')
    # Getting the type of 'b' (line 4073)
    b_586552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4073, 9), 'b')
    # Obtaining the member 'shape' of a type (line 4073)
    shape_586553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4073, 9), b_586552, 'shape')
    # Obtaining the member '__getitem__' of a type (line 4073)
    getitem___586554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4073, 9), shape_586553, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4073)
    subscript_call_result_586555 = invoke(stypy.reporting.localization.Localization(__file__, 4073, 9), getitem___586554, axis_586551)
    
    # Assigning a type to the variable 'n2' (line 4073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4073, 4), 'n2', subscript_call_result_586555)
    
    # Getting the type of 'equal_var' (line 4075)
    equal_var_586556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4075, 7), 'equal_var')
    # Testing the type of an if condition (line 4075)
    if_condition_586557 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4075, 4), equal_var_586556)
    # Assigning a type to the variable 'if_condition_586557' (line 4075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4075, 4), 'if_condition_586557', if_condition_586557)
    # SSA begins for if statement (line 4075)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 4076):
    
    # Assigning a Subscript to a Name (line 4076):
    
    # Obtaining the type of the subscript
    int_586558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4076, 8), 'int')
    
    # Call to _equal_var_ttest_denom(...): (line 4076)
    # Processing the call arguments (line 4076)
    # Getting the type of 'v1' (line 4076)
    v1_586560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 43), 'v1', False)
    # Getting the type of 'n1' (line 4076)
    n1_586561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 47), 'n1', False)
    # Getting the type of 'v2' (line 4076)
    v2_586562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 51), 'v2', False)
    # Getting the type of 'n2' (line 4076)
    n2_586563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 55), 'n2', False)
    # Processing the call keyword arguments (line 4076)
    kwargs_586564 = {}
    # Getting the type of '_equal_var_ttest_denom' (line 4076)
    _equal_var_ttest_denom_586559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 20), '_equal_var_ttest_denom', False)
    # Calling _equal_var_ttest_denom(args, kwargs) (line 4076)
    _equal_var_ttest_denom_call_result_586565 = invoke(stypy.reporting.localization.Localization(__file__, 4076, 20), _equal_var_ttest_denom_586559, *[v1_586560, n1_586561, v2_586562, n2_586563], **kwargs_586564)
    
    # Obtaining the member '__getitem__' of a type (line 4076)
    getitem___586566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4076, 8), _equal_var_ttest_denom_call_result_586565, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4076)
    subscript_call_result_586567 = invoke(stypy.reporting.localization.Localization(__file__, 4076, 8), getitem___586566, int_586558)
    
    # Assigning a type to the variable 'tuple_var_assignment_579964' (line 4076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4076, 8), 'tuple_var_assignment_579964', subscript_call_result_586567)
    
    # Assigning a Subscript to a Name (line 4076):
    
    # Obtaining the type of the subscript
    int_586568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4076, 8), 'int')
    
    # Call to _equal_var_ttest_denom(...): (line 4076)
    # Processing the call arguments (line 4076)
    # Getting the type of 'v1' (line 4076)
    v1_586570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 43), 'v1', False)
    # Getting the type of 'n1' (line 4076)
    n1_586571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 47), 'n1', False)
    # Getting the type of 'v2' (line 4076)
    v2_586572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 51), 'v2', False)
    # Getting the type of 'n2' (line 4076)
    n2_586573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 55), 'n2', False)
    # Processing the call keyword arguments (line 4076)
    kwargs_586574 = {}
    # Getting the type of '_equal_var_ttest_denom' (line 4076)
    _equal_var_ttest_denom_586569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 20), '_equal_var_ttest_denom', False)
    # Calling _equal_var_ttest_denom(args, kwargs) (line 4076)
    _equal_var_ttest_denom_call_result_586575 = invoke(stypy.reporting.localization.Localization(__file__, 4076, 20), _equal_var_ttest_denom_586569, *[v1_586570, n1_586571, v2_586572, n2_586573], **kwargs_586574)
    
    # Obtaining the member '__getitem__' of a type (line 4076)
    getitem___586576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4076, 8), _equal_var_ttest_denom_call_result_586575, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4076)
    subscript_call_result_586577 = invoke(stypy.reporting.localization.Localization(__file__, 4076, 8), getitem___586576, int_586568)
    
    # Assigning a type to the variable 'tuple_var_assignment_579965' (line 4076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4076, 8), 'tuple_var_assignment_579965', subscript_call_result_586577)
    
    # Assigning a Name to a Name (line 4076):
    # Getting the type of 'tuple_var_assignment_579964' (line 4076)
    tuple_var_assignment_579964_586578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 8), 'tuple_var_assignment_579964')
    # Assigning a type to the variable 'df' (line 4076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4076, 8), 'df', tuple_var_assignment_579964_586578)
    
    # Assigning a Name to a Name (line 4076):
    # Getting the type of 'tuple_var_assignment_579965' (line 4076)
    tuple_var_assignment_579965_586579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 8), 'tuple_var_assignment_579965')
    # Assigning a type to the variable 'denom' (line 4076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4076, 12), 'denom', tuple_var_assignment_579965_586579)
    # SSA branch for the else part of an if statement (line 4075)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 4078):
    
    # Assigning a Subscript to a Name (line 4078):
    
    # Obtaining the type of the subscript
    int_586580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4078, 8), 'int')
    
    # Call to _unequal_var_ttest_denom(...): (line 4078)
    # Processing the call arguments (line 4078)
    # Getting the type of 'v1' (line 4078)
    v1_586582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 45), 'v1', False)
    # Getting the type of 'n1' (line 4078)
    n1_586583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 49), 'n1', False)
    # Getting the type of 'v2' (line 4078)
    v2_586584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 53), 'v2', False)
    # Getting the type of 'n2' (line 4078)
    n2_586585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 57), 'n2', False)
    # Processing the call keyword arguments (line 4078)
    kwargs_586586 = {}
    # Getting the type of '_unequal_var_ttest_denom' (line 4078)
    _unequal_var_ttest_denom_586581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 20), '_unequal_var_ttest_denom', False)
    # Calling _unequal_var_ttest_denom(args, kwargs) (line 4078)
    _unequal_var_ttest_denom_call_result_586587 = invoke(stypy.reporting.localization.Localization(__file__, 4078, 20), _unequal_var_ttest_denom_586581, *[v1_586582, n1_586583, v2_586584, n2_586585], **kwargs_586586)
    
    # Obtaining the member '__getitem__' of a type (line 4078)
    getitem___586588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4078, 8), _unequal_var_ttest_denom_call_result_586587, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4078)
    subscript_call_result_586589 = invoke(stypy.reporting.localization.Localization(__file__, 4078, 8), getitem___586588, int_586580)
    
    # Assigning a type to the variable 'tuple_var_assignment_579966' (line 4078)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4078, 8), 'tuple_var_assignment_579966', subscript_call_result_586589)
    
    # Assigning a Subscript to a Name (line 4078):
    
    # Obtaining the type of the subscript
    int_586590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4078, 8), 'int')
    
    # Call to _unequal_var_ttest_denom(...): (line 4078)
    # Processing the call arguments (line 4078)
    # Getting the type of 'v1' (line 4078)
    v1_586592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 45), 'v1', False)
    # Getting the type of 'n1' (line 4078)
    n1_586593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 49), 'n1', False)
    # Getting the type of 'v2' (line 4078)
    v2_586594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 53), 'v2', False)
    # Getting the type of 'n2' (line 4078)
    n2_586595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 57), 'n2', False)
    # Processing the call keyword arguments (line 4078)
    kwargs_586596 = {}
    # Getting the type of '_unequal_var_ttest_denom' (line 4078)
    _unequal_var_ttest_denom_586591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 20), '_unequal_var_ttest_denom', False)
    # Calling _unequal_var_ttest_denom(args, kwargs) (line 4078)
    _unequal_var_ttest_denom_call_result_586597 = invoke(stypy.reporting.localization.Localization(__file__, 4078, 20), _unequal_var_ttest_denom_586591, *[v1_586592, n1_586593, v2_586594, n2_586595], **kwargs_586596)
    
    # Obtaining the member '__getitem__' of a type (line 4078)
    getitem___586598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4078, 8), _unequal_var_ttest_denom_call_result_586597, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4078)
    subscript_call_result_586599 = invoke(stypy.reporting.localization.Localization(__file__, 4078, 8), getitem___586598, int_586590)
    
    # Assigning a type to the variable 'tuple_var_assignment_579967' (line 4078)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4078, 8), 'tuple_var_assignment_579967', subscript_call_result_586599)
    
    # Assigning a Name to a Name (line 4078):
    # Getting the type of 'tuple_var_assignment_579966' (line 4078)
    tuple_var_assignment_579966_586600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 8), 'tuple_var_assignment_579966')
    # Assigning a type to the variable 'df' (line 4078)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4078, 8), 'df', tuple_var_assignment_579966_586600)
    
    # Assigning a Name to a Name (line 4078):
    # Getting the type of 'tuple_var_assignment_579967' (line 4078)
    tuple_var_assignment_579967_586601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 8), 'tuple_var_assignment_579967')
    # Assigning a type to the variable 'denom' (line 4078)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4078, 12), 'denom', tuple_var_assignment_579967_586601)
    # SSA join for if statement (line 4075)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 4080):
    
    # Assigning a Call to a Name (line 4080):
    
    # Call to _ttest_ind_from_stats(...): (line 4080)
    # Processing the call arguments (line 4080)
    
    # Call to mean(...): (line 4080)
    # Processing the call arguments (line 4080)
    # Getting the type of 'a' (line 4080)
    a_586605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 40), 'a', False)
    # Getting the type of 'axis' (line 4080)
    axis_586606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 43), 'axis', False)
    # Processing the call keyword arguments (line 4080)
    kwargs_586607 = {}
    # Getting the type of 'np' (line 4080)
    np_586603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 32), 'np', False)
    # Obtaining the member 'mean' of a type (line 4080)
    mean_586604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4080, 32), np_586603, 'mean')
    # Calling mean(args, kwargs) (line 4080)
    mean_call_result_586608 = invoke(stypy.reporting.localization.Localization(__file__, 4080, 32), mean_586604, *[a_586605, axis_586606], **kwargs_586607)
    
    
    # Call to mean(...): (line 4080)
    # Processing the call arguments (line 4080)
    # Getting the type of 'b' (line 4080)
    b_586611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 58), 'b', False)
    # Getting the type of 'axis' (line 4080)
    axis_586612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 61), 'axis', False)
    # Processing the call keyword arguments (line 4080)
    kwargs_586613 = {}
    # Getting the type of 'np' (line 4080)
    np_586609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 50), 'np', False)
    # Obtaining the member 'mean' of a type (line 4080)
    mean_586610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4080, 50), np_586609, 'mean')
    # Calling mean(args, kwargs) (line 4080)
    mean_call_result_586614 = invoke(stypy.reporting.localization.Localization(__file__, 4080, 50), mean_586610, *[b_586611, axis_586612], **kwargs_586613)
    
    # Getting the type of 'denom' (line 4080)
    denom_586615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 68), 'denom', False)
    # Getting the type of 'df' (line 4080)
    df_586616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 75), 'df', False)
    # Processing the call keyword arguments (line 4080)
    kwargs_586617 = {}
    # Getting the type of '_ttest_ind_from_stats' (line 4080)
    _ttest_ind_from_stats_586602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 10), '_ttest_ind_from_stats', False)
    # Calling _ttest_ind_from_stats(args, kwargs) (line 4080)
    _ttest_ind_from_stats_call_result_586618 = invoke(stypy.reporting.localization.Localization(__file__, 4080, 10), _ttest_ind_from_stats_586602, *[mean_call_result_586608, mean_call_result_586614, denom_586615, df_586616], **kwargs_586617)
    
    # Assigning a type to the variable 'res' (line 4080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4080, 4), 'res', _ttest_ind_from_stats_call_result_586618)
    
    # Call to Ttest_indResult(...): (line 4082)
    # Getting the type of 'res' (line 4082)
    res_586620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4082, 28), 'res', False)
    # Processing the call keyword arguments (line 4082)
    kwargs_586621 = {}
    # Getting the type of 'Ttest_indResult' (line 4082)
    Ttest_indResult_586619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4082, 11), 'Ttest_indResult', False)
    # Calling Ttest_indResult(args, kwargs) (line 4082)
    Ttest_indResult_call_result_586622 = invoke(stypy.reporting.localization.Localization(__file__, 4082, 11), Ttest_indResult_586619, *[res_586620], **kwargs_586621)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4082)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4082, 4), 'stypy_return_type', Ttest_indResult_call_result_586622)
    
    # ################# End of 'ttest_ind(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ttest_ind' in the type store
    # Getting the type of 'stypy_return_type' (line 3960)
    stypy_return_type_586623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3960, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_586623)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ttest_ind'
    return stypy_return_type_586623

# Assigning a type to the variable 'ttest_ind' (line 3960)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3960, 0), 'ttest_ind', ttest_ind)

# Assigning a Call to a Name (line 4084):

# Assigning a Call to a Name (line 4084):

# Call to namedtuple(...): (line 4084)
# Processing the call arguments (line 4084)
str_586625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4084, 29), 'str', 'Ttest_relResult')

# Obtaining an instance of the builtin type 'tuple' (line 4084)
tuple_586626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4084, 49), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 4084)
# Adding element type (line 4084)
str_586627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4084, 49), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4084, 49), tuple_586626, str_586627)
# Adding element type (line 4084)
str_586628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4084, 62), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4084, 49), tuple_586626, str_586628)

# Processing the call keyword arguments (line 4084)
kwargs_586629 = {}
# Getting the type of 'namedtuple' (line 4084)
namedtuple_586624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4084, 18), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 4084)
namedtuple_call_result_586630 = invoke(stypy.reporting.localization.Localization(__file__, 4084, 18), namedtuple_586624, *[str_586625, tuple_586626], **kwargs_586629)

# Assigning a type to the variable 'Ttest_relResult' (line 4084)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4084, 0), 'Ttest_relResult', namedtuple_call_result_586630)

@norecursion
def ttest_rel(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_586631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4087, 25), 'int')
    str_586632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4087, 39), 'str', 'propagate')
    defaults = [int_586631, str_586632]
    # Create a new context for function 'ttest_rel'
    module_type_store = module_type_store.open_function_context('ttest_rel', 4087, 0, False)
    
    # Passed parameters checking function
    ttest_rel.stypy_localization = localization
    ttest_rel.stypy_type_of_self = None
    ttest_rel.stypy_type_store = module_type_store
    ttest_rel.stypy_function_name = 'ttest_rel'
    ttest_rel.stypy_param_names_list = ['a', 'b', 'axis', 'nan_policy']
    ttest_rel.stypy_varargs_param_name = None
    ttest_rel.stypy_kwargs_param_name = None
    ttest_rel.stypy_call_defaults = defaults
    ttest_rel.stypy_call_varargs = varargs
    ttest_rel.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ttest_rel', ['a', 'b', 'axis', 'nan_policy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ttest_rel', localization, ['a', 'b', 'axis', 'nan_policy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ttest_rel(...)' code ##################

    str_586633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4144, (-1)), 'str', "\n    Calculate the T-test on TWO RELATED samples of scores, a and b.\n\n    This is a two-sided test for the null hypothesis that 2 related or\n    repeated samples have identical average (expected) values.\n\n    Parameters\n    ----------\n    a, b : array_like\n        The arrays must have the same shape.\n    axis : int or None, optional\n        Axis along which to compute test. If None, compute over the whole\n        arrays, `a`, and `b`.\n    nan_policy : {'propagate', 'raise', 'omit'}, optional\n        Defines how to handle when input contains nan. 'propagate' returns nan,\n        'raise' throws an error, 'omit' performs the calculations ignoring nan\n        values. Default is 'propagate'.\n\n    Returns\n    -------\n    statistic : float or array\n        t-statistic\n    pvalue : float or array\n        two-tailed p-value\n\n    Notes\n    -----\n    Examples for the use are scores of the same set of student in\n    different exams, or repeated sampling from the same units. The\n    test measures whether the average score differs significantly\n    across samples (e.g. exams). If we observe a large p-value, for\n    example greater than 0.05 or 0.1 then we cannot reject the null\n    hypothesis of identical average scores. If the p-value is smaller\n    than the threshold, e.g. 1%, 5% or 10%, then we reject the null\n    hypothesis of equal averages. Small p-values are associated with\n    large t-statistics.\n\n    References\n    ----------\n    https://en.wikipedia.org/wiki/T-test#Dependent_t-test_for_paired_samples\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> np.random.seed(12345678) # fix random seed to get same numbers\n\n    >>> rvs1 = stats.norm.rvs(loc=5,scale=10,size=500)\n    >>> rvs2 = (stats.norm.rvs(loc=5,scale=10,size=500) +\n    ...         stats.norm.rvs(scale=0.2,size=500))\n    >>> stats.ttest_rel(rvs1,rvs2)\n    (0.24101764965300962, 0.80964043445811562)\n    >>> rvs3 = (stats.norm.rvs(loc=8,scale=10,size=500) +\n    ...         stats.norm.rvs(scale=0.2,size=500))\n    >>> stats.ttest_rel(rvs1,rvs3)\n    (-3.9995108708727933, 7.3082402191726459e-005)\n\n    ")
    
    # Assigning a Call to a Tuple (line 4145):
    
    # Assigning a Subscript to a Name (line 4145):
    
    # Obtaining the type of the subscript
    int_586634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4145, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 4145)
    # Processing the call arguments (line 4145)
    # Getting the type of 'a' (line 4145)
    a_586636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 31), 'a', False)
    # Getting the type of 'b' (line 4145)
    b_586637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 34), 'b', False)
    # Getting the type of 'axis' (line 4145)
    axis_586638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 37), 'axis', False)
    # Processing the call keyword arguments (line 4145)
    kwargs_586639 = {}
    # Getting the type of '_chk2_asarray' (line 4145)
    _chk2_asarray_586635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 4145)
    _chk2_asarray_call_result_586640 = invoke(stypy.reporting.localization.Localization(__file__, 4145, 17), _chk2_asarray_586635, *[a_586636, b_586637, axis_586638], **kwargs_586639)
    
    # Obtaining the member '__getitem__' of a type (line 4145)
    getitem___586641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4145, 4), _chk2_asarray_call_result_586640, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4145)
    subscript_call_result_586642 = invoke(stypy.reporting.localization.Localization(__file__, 4145, 4), getitem___586641, int_586634)
    
    # Assigning a type to the variable 'tuple_var_assignment_579968' (line 4145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4145, 4), 'tuple_var_assignment_579968', subscript_call_result_586642)
    
    # Assigning a Subscript to a Name (line 4145):
    
    # Obtaining the type of the subscript
    int_586643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4145, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 4145)
    # Processing the call arguments (line 4145)
    # Getting the type of 'a' (line 4145)
    a_586645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 31), 'a', False)
    # Getting the type of 'b' (line 4145)
    b_586646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 34), 'b', False)
    # Getting the type of 'axis' (line 4145)
    axis_586647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 37), 'axis', False)
    # Processing the call keyword arguments (line 4145)
    kwargs_586648 = {}
    # Getting the type of '_chk2_asarray' (line 4145)
    _chk2_asarray_586644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 4145)
    _chk2_asarray_call_result_586649 = invoke(stypy.reporting.localization.Localization(__file__, 4145, 17), _chk2_asarray_586644, *[a_586645, b_586646, axis_586647], **kwargs_586648)
    
    # Obtaining the member '__getitem__' of a type (line 4145)
    getitem___586650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4145, 4), _chk2_asarray_call_result_586649, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4145)
    subscript_call_result_586651 = invoke(stypy.reporting.localization.Localization(__file__, 4145, 4), getitem___586650, int_586643)
    
    # Assigning a type to the variable 'tuple_var_assignment_579969' (line 4145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4145, 4), 'tuple_var_assignment_579969', subscript_call_result_586651)
    
    # Assigning a Subscript to a Name (line 4145):
    
    # Obtaining the type of the subscript
    int_586652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4145, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 4145)
    # Processing the call arguments (line 4145)
    # Getting the type of 'a' (line 4145)
    a_586654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 31), 'a', False)
    # Getting the type of 'b' (line 4145)
    b_586655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 34), 'b', False)
    # Getting the type of 'axis' (line 4145)
    axis_586656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 37), 'axis', False)
    # Processing the call keyword arguments (line 4145)
    kwargs_586657 = {}
    # Getting the type of '_chk2_asarray' (line 4145)
    _chk2_asarray_586653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 4145)
    _chk2_asarray_call_result_586658 = invoke(stypy.reporting.localization.Localization(__file__, 4145, 17), _chk2_asarray_586653, *[a_586654, b_586655, axis_586656], **kwargs_586657)
    
    # Obtaining the member '__getitem__' of a type (line 4145)
    getitem___586659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4145, 4), _chk2_asarray_call_result_586658, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4145)
    subscript_call_result_586660 = invoke(stypy.reporting.localization.Localization(__file__, 4145, 4), getitem___586659, int_586652)
    
    # Assigning a type to the variable 'tuple_var_assignment_579970' (line 4145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4145, 4), 'tuple_var_assignment_579970', subscript_call_result_586660)
    
    # Assigning a Name to a Name (line 4145):
    # Getting the type of 'tuple_var_assignment_579968' (line 4145)
    tuple_var_assignment_579968_586661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 4), 'tuple_var_assignment_579968')
    # Assigning a type to the variable 'a' (line 4145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4145, 4), 'a', tuple_var_assignment_579968_586661)
    
    # Assigning a Name to a Name (line 4145):
    # Getting the type of 'tuple_var_assignment_579969' (line 4145)
    tuple_var_assignment_579969_586662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 4), 'tuple_var_assignment_579969')
    # Assigning a type to the variable 'b' (line 4145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4145, 7), 'b', tuple_var_assignment_579969_586662)
    
    # Assigning a Name to a Name (line 4145):
    # Getting the type of 'tuple_var_assignment_579970' (line 4145)
    tuple_var_assignment_579970_586663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 4), 'tuple_var_assignment_579970')
    # Assigning a type to the variable 'axis' (line 4145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4145, 10), 'axis', tuple_var_assignment_579970_586663)
    
    # Assigning a Call to a Tuple (line 4147):
    
    # Assigning a Subscript to a Name (line 4147):
    
    # Obtaining the type of the subscript
    int_586664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4147, 4), 'int')
    
    # Call to _contains_nan(...): (line 4147)
    # Processing the call arguments (line 4147)
    # Getting the type of 'a' (line 4147)
    a_586666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4147, 29), 'a', False)
    # Getting the type of 'nan_policy' (line 4147)
    nan_policy_586667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4147, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 4147)
    kwargs_586668 = {}
    # Getting the type of '_contains_nan' (line 4147)
    _contains_nan_586665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4147, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 4147)
    _contains_nan_call_result_586669 = invoke(stypy.reporting.localization.Localization(__file__, 4147, 15), _contains_nan_586665, *[a_586666, nan_policy_586667], **kwargs_586668)
    
    # Obtaining the member '__getitem__' of a type (line 4147)
    getitem___586670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4147, 4), _contains_nan_call_result_586669, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4147)
    subscript_call_result_586671 = invoke(stypy.reporting.localization.Localization(__file__, 4147, 4), getitem___586670, int_586664)
    
    # Assigning a type to the variable 'tuple_var_assignment_579971' (line 4147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4147, 4), 'tuple_var_assignment_579971', subscript_call_result_586671)
    
    # Assigning a Subscript to a Name (line 4147):
    
    # Obtaining the type of the subscript
    int_586672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4147, 4), 'int')
    
    # Call to _contains_nan(...): (line 4147)
    # Processing the call arguments (line 4147)
    # Getting the type of 'a' (line 4147)
    a_586674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4147, 29), 'a', False)
    # Getting the type of 'nan_policy' (line 4147)
    nan_policy_586675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4147, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 4147)
    kwargs_586676 = {}
    # Getting the type of '_contains_nan' (line 4147)
    _contains_nan_586673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4147, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 4147)
    _contains_nan_call_result_586677 = invoke(stypy.reporting.localization.Localization(__file__, 4147, 15), _contains_nan_586673, *[a_586674, nan_policy_586675], **kwargs_586676)
    
    # Obtaining the member '__getitem__' of a type (line 4147)
    getitem___586678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4147, 4), _contains_nan_call_result_586677, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4147)
    subscript_call_result_586679 = invoke(stypy.reporting.localization.Localization(__file__, 4147, 4), getitem___586678, int_586672)
    
    # Assigning a type to the variable 'tuple_var_assignment_579972' (line 4147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4147, 4), 'tuple_var_assignment_579972', subscript_call_result_586679)
    
    # Assigning a Name to a Name (line 4147):
    # Getting the type of 'tuple_var_assignment_579971' (line 4147)
    tuple_var_assignment_579971_586680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4147, 4), 'tuple_var_assignment_579971')
    # Assigning a type to the variable 'cna' (line 4147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4147, 4), 'cna', tuple_var_assignment_579971_586680)
    
    # Assigning a Name to a Name (line 4147):
    # Getting the type of 'tuple_var_assignment_579972' (line 4147)
    tuple_var_assignment_579972_586681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4147, 4), 'tuple_var_assignment_579972')
    # Assigning a type to the variable 'npa' (line 4147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4147, 9), 'npa', tuple_var_assignment_579972_586681)
    
    # Assigning a Call to a Tuple (line 4148):
    
    # Assigning a Subscript to a Name (line 4148):
    
    # Obtaining the type of the subscript
    int_586682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4148, 4), 'int')
    
    # Call to _contains_nan(...): (line 4148)
    # Processing the call arguments (line 4148)
    # Getting the type of 'b' (line 4148)
    b_586684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4148, 29), 'b', False)
    # Getting the type of 'nan_policy' (line 4148)
    nan_policy_586685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4148, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 4148)
    kwargs_586686 = {}
    # Getting the type of '_contains_nan' (line 4148)
    _contains_nan_586683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4148, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 4148)
    _contains_nan_call_result_586687 = invoke(stypy.reporting.localization.Localization(__file__, 4148, 15), _contains_nan_586683, *[b_586684, nan_policy_586685], **kwargs_586686)
    
    # Obtaining the member '__getitem__' of a type (line 4148)
    getitem___586688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4148, 4), _contains_nan_call_result_586687, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4148)
    subscript_call_result_586689 = invoke(stypy.reporting.localization.Localization(__file__, 4148, 4), getitem___586688, int_586682)
    
    # Assigning a type to the variable 'tuple_var_assignment_579973' (line 4148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4148, 4), 'tuple_var_assignment_579973', subscript_call_result_586689)
    
    # Assigning a Subscript to a Name (line 4148):
    
    # Obtaining the type of the subscript
    int_586690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4148, 4), 'int')
    
    # Call to _contains_nan(...): (line 4148)
    # Processing the call arguments (line 4148)
    # Getting the type of 'b' (line 4148)
    b_586692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4148, 29), 'b', False)
    # Getting the type of 'nan_policy' (line 4148)
    nan_policy_586693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4148, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 4148)
    kwargs_586694 = {}
    # Getting the type of '_contains_nan' (line 4148)
    _contains_nan_586691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4148, 15), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 4148)
    _contains_nan_call_result_586695 = invoke(stypy.reporting.localization.Localization(__file__, 4148, 15), _contains_nan_586691, *[b_586692, nan_policy_586693], **kwargs_586694)
    
    # Obtaining the member '__getitem__' of a type (line 4148)
    getitem___586696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4148, 4), _contains_nan_call_result_586695, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4148)
    subscript_call_result_586697 = invoke(stypy.reporting.localization.Localization(__file__, 4148, 4), getitem___586696, int_586690)
    
    # Assigning a type to the variable 'tuple_var_assignment_579974' (line 4148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4148, 4), 'tuple_var_assignment_579974', subscript_call_result_586697)
    
    # Assigning a Name to a Name (line 4148):
    # Getting the type of 'tuple_var_assignment_579973' (line 4148)
    tuple_var_assignment_579973_586698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4148, 4), 'tuple_var_assignment_579973')
    # Assigning a type to the variable 'cnb' (line 4148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4148, 4), 'cnb', tuple_var_assignment_579973_586698)
    
    # Assigning a Name to a Name (line 4148):
    # Getting the type of 'tuple_var_assignment_579974' (line 4148)
    tuple_var_assignment_579974_586699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4148, 4), 'tuple_var_assignment_579974')
    # Assigning a type to the variable 'npb' (line 4148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4148, 9), 'npb', tuple_var_assignment_579974_586699)
    
    # Assigning a BoolOp to a Name (line 4149):
    
    # Assigning a BoolOp to a Name (line 4149):
    
    # Evaluating a boolean operation
    # Getting the type of 'cna' (line 4149)
    cna_586700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4149, 19), 'cna')
    # Getting the type of 'cnb' (line 4149)
    cnb_586701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4149, 26), 'cnb')
    # Applying the binary operator 'or' (line 4149)
    result_or_keyword_586702 = python_operator(stypy.reporting.localization.Localization(__file__, 4149, 19), 'or', cna_586700, cnb_586701)
    
    # Assigning a type to the variable 'contains_nan' (line 4149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4149, 4), 'contains_nan', result_or_keyword_586702)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'npa' (line 4150)
    npa_586703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4150, 7), 'npa')
    str_586704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4150, 14), 'str', 'omit')
    # Applying the binary operator '==' (line 4150)
    result_eq_586705 = python_operator(stypy.reporting.localization.Localization(__file__, 4150, 7), '==', npa_586703, str_586704)
    
    
    # Getting the type of 'npb' (line 4150)
    npb_586706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4150, 24), 'npb')
    str_586707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4150, 31), 'str', 'omit')
    # Applying the binary operator '==' (line 4150)
    result_eq_586708 = python_operator(stypy.reporting.localization.Localization(__file__, 4150, 24), '==', npb_586706, str_586707)
    
    # Applying the binary operator 'or' (line 4150)
    result_or_keyword_586709 = python_operator(stypy.reporting.localization.Localization(__file__, 4150, 7), 'or', result_eq_586705, result_eq_586708)
    
    # Testing the type of an if condition (line 4150)
    if_condition_586710 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4150, 4), result_or_keyword_586709)
    # Assigning a type to the variable 'if_condition_586710' (line 4150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4150, 4), 'if_condition_586710', if_condition_586710)
    # SSA begins for if statement (line 4150)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 4151):
    
    # Assigning a Str to a Name (line 4151):
    str_586711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4151, 21), 'str', 'omit')
    # Assigning a type to the variable 'nan_policy' (line 4151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4151, 8), 'nan_policy', str_586711)
    # SSA join for if statement (line 4150)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 4153)
    contains_nan_586712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4153, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 4153)
    nan_policy_586713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4153, 24), 'nan_policy')
    str_586714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4153, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 4153)
    result_eq_586715 = python_operator(stypy.reporting.localization.Localization(__file__, 4153, 24), '==', nan_policy_586713, str_586714)
    
    # Applying the binary operator 'and' (line 4153)
    result_and_keyword_586716 = python_operator(stypy.reporting.localization.Localization(__file__, 4153, 7), 'and', contains_nan_586712, result_eq_586715)
    
    # Testing the type of an if condition (line 4153)
    if_condition_586717 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4153, 4), result_and_keyword_586716)
    # Assigning a type to the variable 'if_condition_586717' (line 4153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4153, 4), 'if_condition_586717', if_condition_586717)
    # SSA begins for if statement (line 4153)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4154):
    
    # Assigning a Call to a Name (line 4154):
    
    # Call to masked_invalid(...): (line 4154)
    # Processing the call arguments (line 4154)
    # Getting the type of 'a' (line 4154)
    a_586720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4154, 30), 'a', False)
    # Processing the call keyword arguments (line 4154)
    kwargs_586721 = {}
    # Getting the type of 'ma' (line 4154)
    ma_586718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4154, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 4154)
    masked_invalid_586719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4154, 12), ma_586718, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 4154)
    masked_invalid_call_result_586722 = invoke(stypy.reporting.localization.Localization(__file__, 4154, 12), masked_invalid_586719, *[a_586720], **kwargs_586721)
    
    # Assigning a type to the variable 'a' (line 4154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4154, 8), 'a', masked_invalid_call_result_586722)
    
    # Assigning a Call to a Name (line 4155):
    
    # Assigning a Call to a Name (line 4155):
    
    # Call to masked_invalid(...): (line 4155)
    # Processing the call arguments (line 4155)
    # Getting the type of 'b' (line 4155)
    b_586725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4155, 30), 'b', False)
    # Processing the call keyword arguments (line 4155)
    kwargs_586726 = {}
    # Getting the type of 'ma' (line 4155)
    ma_586723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4155, 12), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 4155)
    masked_invalid_586724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4155, 12), ma_586723, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 4155)
    masked_invalid_call_result_586727 = invoke(stypy.reporting.localization.Localization(__file__, 4155, 12), masked_invalid_586724, *[b_586725], **kwargs_586726)
    
    # Assigning a type to the variable 'b' (line 4155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4155, 8), 'b', masked_invalid_call_result_586727)
    
    # Assigning a Call to a Name (line 4156):
    
    # Assigning a Call to a Name (line 4156):
    
    # Call to mask_or(...): (line 4156)
    # Processing the call arguments (line 4156)
    
    # Call to getmask(...): (line 4156)
    # Processing the call arguments (line 4156)
    # Getting the type of 'a' (line 4156)
    a_586732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4156, 34), 'a', False)
    # Processing the call keyword arguments (line 4156)
    kwargs_586733 = {}
    # Getting the type of 'ma' (line 4156)
    ma_586730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4156, 23), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 4156)
    getmask_586731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4156, 23), ma_586730, 'getmask')
    # Calling getmask(args, kwargs) (line 4156)
    getmask_call_result_586734 = invoke(stypy.reporting.localization.Localization(__file__, 4156, 23), getmask_586731, *[a_586732], **kwargs_586733)
    
    
    # Call to getmask(...): (line 4156)
    # Processing the call arguments (line 4156)
    # Getting the type of 'b' (line 4156)
    b_586737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4156, 49), 'b', False)
    # Processing the call keyword arguments (line 4156)
    kwargs_586738 = {}
    # Getting the type of 'ma' (line 4156)
    ma_586735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4156, 38), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 4156)
    getmask_586736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4156, 38), ma_586735, 'getmask')
    # Calling getmask(args, kwargs) (line 4156)
    getmask_call_result_586739 = invoke(stypy.reporting.localization.Localization(__file__, 4156, 38), getmask_586736, *[b_586737], **kwargs_586738)
    
    # Processing the call keyword arguments (line 4156)
    kwargs_586740 = {}
    # Getting the type of 'ma' (line 4156)
    ma_586728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4156, 12), 'ma', False)
    # Obtaining the member 'mask_or' of a type (line 4156)
    mask_or_586729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4156, 12), ma_586728, 'mask_or')
    # Calling mask_or(args, kwargs) (line 4156)
    mask_or_call_result_586741 = invoke(stypy.reporting.localization.Localization(__file__, 4156, 12), mask_or_586729, *[getmask_call_result_586734, getmask_call_result_586739], **kwargs_586740)
    
    # Assigning a type to the variable 'm' (line 4156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4156, 8), 'm', mask_or_call_result_586741)
    
    # Assigning a Call to a Name (line 4157):
    
    # Assigning a Call to a Name (line 4157):
    
    # Call to array(...): (line 4157)
    # Processing the call arguments (line 4157)
    # Getting the type of 'a' (line 4157)
    a_586744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4157, 22), 'a', False)
    # Processing the call keyword arguments (line 4157)
    # Getting the type of 'm' (line 4157)
    m_586745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4157, 30), 'm', False)
    keyword_586746 = m_586745
    # Getting the type of 'True' (line 4157)
    True_586747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4157, 38), 'True', False)
    keyword_586748 = True_586747
    kwargs_586749 = {'copy': keyword_586748, 'mask': keyword_586746}
    # Getting the type of 'ma' (line 4157)
    ma_586742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4157, 13), 'ma', False)
    # Obtaining the member 'array' of a type (line 4157)
    array_586743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4157, 13), ma_586742, 'array')
    # Calling array(args, kwargs) (line 4157)
    array_call_result_586750 = invoke(stypy.reporting.localization.Localization(__file__, 4157, 13), array_586743, *[a_586744], **kwargs_586749)
    
    # Assigning a type to the variable 'aa' (line 4157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4157, 8), 'aa', array_call_result_586750)
    
    # Assigning a Call to a Name (line 4158):
    
    # Assigning a Call to a Name (line 4158):
    
    # Call to array(...): (line 4158)
    # Processing the call arguments (line 4158)
    # Getting the type of 'b' (line 4158)
    b_586753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4158, 22), 'b', False)
    # Processing the call keyword arguments (line 4158)
    # Getting the type of 'm' (line 4158)
    m_586754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4158, 30), 'm', False)
    keyword_586755 = m_586754
    # Getting the type of 'True' (line 4158)
    True_586756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4158, 38), 'True', False)
    keyword_586757 = True_586756
    kwargs_586758 = {'copy': keyword_586757, 'mask': keyword_586755}
    # Getting the type of 'ma' (line 4158)
    ma_586751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4158, 13), 'ma', False)
    # Obtaining the member 'array' of a type (line 4158)
    array_586752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4158, 13), ma_586751, 'array')
    # Calling array(args, kwargs) (line 4158)
    array_call_result_586759 = invoke(stypy.reporting.localization.Localization(__file__, 4158, 13), array_586752, *[b_586753], **kwargs_586758)
    
    # Assigning a type to the variable 'bb' (line 4158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4158, 8), 'bb', array_call_result_586759)
    
    # Call to ttest_rel(...): (line 4159)
    # Processing the call arguments (line 4159)
    # Getting the type of 'aa' (line 4159)
    aa_586762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4159, 38), 'aa', False)
    # Getting the type of 'bb' (line 4159)
    bb_586763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4159, 42), 'bb', False)
    # Getting the type of 'axis' (line 4159)
    axis_586764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4159, 46), 'axis', False)
    # Processing the call keyword arguments (line 4159)
    kwargs_586765 = {}
    # Getting the type of 'mstats_basic' (line 4159)
    mstats_basic_586760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4159, 15), 'mstats_basic', False)
    # Obtaining the member 'ttest_rel' of a type (line 4159)
    ttest_rel_586761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4159, 15), mstats_basic_586760, 'ttest_rel')
    # Calling ttest_rel(args, kwargs) (line 4159)
    ttest_rel_call_result_586766 = invoke(stypy.reporting.localization.Localization(__file__, 4159, 15), ttest_rel_586761, *[aa_586762, bb_586763, axis_586764], **kwargs_586765)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4159, 8), 'stypy_return_type', ttest_rel_call_result_586766)
    # SSA join for if statement (line 4153)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4161)
    axis_586767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4161, 15), 'axis')
    # Getting the type of 'a' (line 4161)
    a_586768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4161, 7), 'a')
    # Obtaining the member 'shape' of a type (line 4161)
    shape_586769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4161, 7), a_586768, 'shape')
    # Obtaining the member '__getitem__' of a type (line 4161)
    getitem___586770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4161, 7), shape_586769, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4161)
    subscript_call_result_586771 = invoke(stypy.reporting.localization.Localization(__file__, 4161, 7), getitem___586770, axis_586767)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4161)
    axis_586772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4161, 32), 'axis')
    # Getting the type of 'b' (line 4161)
    b_586773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4161, 24), 'b')
    # Obtaining the member 'shape' of a type (line 4161)
    shape_586774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4161, 24), b_586773, 'shape')
    # Obtaining the member '__getitem__' of a type (line 4161)
    getitem___586775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4161, 24), shape_586774, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4161)
    subscript_call_result_586776 = invoke(stypy.reporting.localization.Localization(__file__, 4161, 24), getitem___586775, axis_586772)
    
    # Applying the binary operator '!=' (line 4161)
    result_ne_586777 = python_operator(stypy.reporting.localization.Localization(__file__, 4161, 7), '!=', subscript_call_result_586771, subscript_call_result_586776)
    
    # Testing the type of an if condition (line 4161)
    if_condition_586778 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4161, 4), result_ne_586777)
    # Assigning a type to the variable 'if_condition_586778' (line 4161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4161, 4), 'if_condition_586778', if_condition_586778)
    # SSA begins for if statement (line 4161)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 4162)
    # Processing the call arguments (line 4162)
    str_586780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4162, 25), 'str', 'unequal length arrays')
    # Processing the call keyword arguments (line 4162)
    kwargs_586781 = {}
    # Getting the type of 'ValueError' (line 4162)
    ValueError_586779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4162, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 4162)
    ValueError_call_result_586782 = invoke(stypy.reporting.localization.Localization(__file__, 4162, 14), ValueError_586779, *[str_586780], **kwargs_586781)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4162, 8), ValueError_call_result_586782, 'raise parameter', BaseException)
    # SSA join for if statement (line 4161)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'a' (line 4164)
    a_586783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4164, 7), 'a')
    # Obtaining the member 'size' of a type (line 4164)
    size_586784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4164, 7), a_586783, 'size')
    int_586785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4164, 17), 'int')
    # Applying the binary operator '==' (line 4164)
    result_eq_586786 = python_operator(stypy.reporting.localization.Localization(__file__, 4164, 7), '==', size_586784, int_586785)
    
    
    # Getting the type of 'b' (line 4164)
    b_586787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4164, 22), 'b')
    # Obtaining the member 'size' of a type (line 4164)
    size_586788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4164, 22), b_586787, 'size')
    int_586789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4164, 32), 'int')
    # Applying the binary operator '==' (line 4164)
    result_eq_586790 = python_operator(stypy.reporting.localization.Localization(__file__, 4164, 22), '==', size_586788, int_586789)
    
    # Applying the binary operator 'or' (line 4164)
    result_or_keyword_586791 = python_operator(stypy.reporting.localization.Localization(__file__, 4164, 7), 'or', result_eq_586786, result_eq_586790)
    
    # Testing the type of an if condition (line 4164)
    if_condition_586792 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4164, 4), result_or_keyword_586791)
    # Assigning a type to the variable 'if_condition_586792' (line 4164)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4164, 4), 'if_condition_586792', if_condition_586792)
    # SSA begins for if statement (line 4164)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 4165)
    tuple_586793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4165, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4165)
    # Adding element type (line 4165)
    # Getting the type of 'np' (line 4165)
    np_586794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4165, 15), 'np')
    # Obtaining the member 'nan' of a type (line 4165)
    nan_586795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4165, 15), np_586794, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4165, 15), tuple_586793, nan_586795)
    # Adding element type (line 4165)
    # Getting the type of 'np' (line 4165)
    np_586796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4165, 23), 'np')
    # Obtaining the member 'nan' of a type (line 4165)
    nan_586797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4165, 23), np_586796, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4165, 15), tuple_586793, nan_586797)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4165)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4165, 8), 'stypy_return_type', tuple_586793)
    # SSA join for if statement (line 4164)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 4167):
    
    # Assigning a Subscript to a Name (line 4167):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4167)
    axis_586798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4167, 16), 'axis')
    # Getting the type of 'a' (line 4167)
    a_586799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4167, 8), 'a')
    # Obtaining the member 'shape' of a type (line 4167)
    shape_586800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4167, 8), a_586799, 'shape')
    # Obtaining the member '__getitem__' of a type (line 4167)
    getitem___586801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4167, 8), shape_586800, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4167)
    subscript_call_result_586802 = invoke(stypy.reporting.localization.Localization(__file__, 4167, 8), getitem___586801, axis_586798)
    
    # Assigning a type to the variable 'n' (line 4167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4167, 4), 'n', subscript_call_result_586802)
    
    # Assigning a Call to a Name (line 4168):
    
    # Assigning a Call to a Name (line 4168):
    
    # Call to float(...): (line 4168)
    # Processing the call arguments (line 4168)
    # Getting the type of 'n' (line 4168)
    n_586804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4168, 15), 'n', False)
    int_586805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4168, 19), 'int')
    # Applying the binary operator '-' (line 4168)
    result_sub_586806 = python_operator(stypy.reporting.localization.Localization(__file__, 4168, 15), '-', n_586804, int_586805)
    
    # Processing the call keyword arguments (line 4168)
    kwargs_586807 = {}
    # Getting the type of 'float' (line 4168)
    float_586803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4168, 9), 'float', False)
    # Calling float(args, kwargs) (line 4168)
    float_call_result_586808 = invoke(stypy.reporting.localization.Localization(__file__, 4168, 9), float_586803, *[result_sub_586806], **kwargs_586807)
    
    # Assigning a type to the variable 'df' (line 4168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4168, 4), 'df', float_call_result_586808)
    
    # Assigning a Call to a Name (line 4170):
    
    # Assigning a Call to a Name (line 4170):
    
    # Call to astype(...): (line 4170)
    # Processing the call arguments (line 4170)
    # Getting the type of 'np' (line 4170)
    np_586813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4170, 23), 'np', False)
    # Obtaining the member 'float64' of a type (line 4170)
    float64_586814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4170, 23), np_586813, 'float64')
    # Processing the call keyword arguments (line 4170)
    kwargs_586815 = {}
    # Getting the type of 'a' (line 4170)
    a_586809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4170, 9), 'a', False)
    # Getting the type of 'b' (line 4170)
    b_586810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4170, 13), 'b', False)
    # Applying the binary operator '-' (line 4170)
    result_sub_586811 = python_operator(stypy.reporting.localization.Localization(__file__, 4170, 9), '-', a_586809, b_586810)
    
    # Obtaining the member 'astype' of a type (line 4170)
    astype_586812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4170, 9), result_sub_586811, 'astype')
    # Calling astype(args, kwargs) (line 4170)
    astype_call_result_586816 = invoke(stypy.reporting.localization.Localization(__file__, 4170, 9), astype_586812, *[float64_586814], **kwargs_586815)
    
    # Assigning a type to the variable 'd' (line 4170)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4170, 4), 'd', astype_call_result_586816)
    
    # Assigning a Call to a Name (line 4171):
    
    # Assigning a Call to a Name (line 4171):
    
    # Call to var(...): (line 4171)
    # Processing the call arguments (line 4171)
    # Getting the type of 'd' (line 4171)
    d_586819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4171, 15), 'd', False)
    # Getting the type of 'axis' (line 4171)
    axis_586820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4171, 18), 'axis', False)
    # Processing the call keyword arguments (line 4171)
    int_586821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4171, 29), 'int')
    keyword_586822 = int_586821
    kwargs_586823 = {'ddof': keyword_586822}
    # Getting the type of 'np' (line 4171)
    np_586817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4171, 8), 'np', False)
    # Obtaining the member 'var' of a type (line 4171)
    var_586818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4171, 8), np_586817, 'var')
    # Calling var(args, kwargs) (line 4171)
    var_call_result_586824 = invoke(stypy.reporting.localization.Localization(__file__, 4171, 8), var_586818, *[d_586819, axis_586820], **kwargs_586823)
    
    # Assigning a type to the variable 'v' (line 4171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4171, 4), 'v', var_call_result_586824)
    
    # Assigning a Call to a Name (line 4172):
    
    # Assigning a Call to a Name (line 4172):
    
    # Call to mean(...): (line 4172)
    # Processing the call arguments (line 4172)
    # Getting the type of 'd' (line 4172)
    d_586827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4172, 17), 'd', False)
    # Getting the type of 'axis' (line 4172)
    axis_586828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4172, 20), 'axis', False)
    # Processing the call keyword arguments (line 4172)
    kwargs_586829 = {}
    # Getting the type of 'np' (line 4172)
    np_586825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4172, 9), 'np', False)
    # Obtaining the member 'mean' of a type (line 4172)
    mean_586826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4172, 9), np_586825, 'mean')
    # Calling mean(args, kwargs) (line 4172)
    mean_call_result_586830 = invoke(stypy.reporting.localization.Localization(__file__, 4172, 9), mean_586826, *[d_586827, axis_586828], **kwargs_586829)
    
    # Assigning a type to the variable 'dm' (line 4172)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4172, 4), 'dm', mean_call_result_586830)
    
    # Assigning a Call to a Name (line 4173):
    
    # Assigning a Call to a Name (line 4173):
    
    # Call to sqrt(...): (line 4173)
    # Processing the call arguments (line 4173)
    # Getting the type of 'v' (line 4173)
    v_586833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4173, 20), 'v', False)
    
    # Call to float(...): (line 4173)
    # Processing the call arguments (line 4173)
    # Getting the type of 'n' (line 4173)
    n_586835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4173, 30), 'n', False)
    # Processing the call keyword arguments (line 4173)
    kwargs_586836 = {}
    # Getting the type of 'float' (line 4173)
    float_586834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4173, 24), 'float', False)
    # Calling float(args, kwargs) (line 4173)
    float_call_result_586837 = invoke(stypy.reporting.localization.Localization(__file__, 4173, 24), float_586834, *[n_586835], **kwargs_586836)
    
    # Applying the binary operator 'div' (line 4173)
    result_div_586838 = python_operator(stypy.reporting.localization.Localization(__file__, 4173, 20), 'div', v_586833, float_call_result_586837)
    
    # Processing the call keyword arguments (line 4173)
    kwargs_586839 = {}
    # Getting the type of 'np' (line 4173)
    np_586831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4173, 12), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 4173)
    sqrt_586832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4173, 12), np_586831, 'sqrt')
    # Calling sqrt(args, kwargs) (line 4173)
    sqrt_call_result_586840 = invoke(stypy.reporting.localization.Localization(__file__, 4173, 12), sqrt_586832, *[result_div_586838], **kwargs_586839)
    
    # Assigning a type to the variable 'denom' (line 4173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4173, 4), 'denom', sqrt_call_result_586840)
    
    # Call to errstate(...): (line 4175)
    # Processing the call keyword arguments (line 4175)
    str_586843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4175, 28), 'str', 'ignore')
    keyword_586844 = str_586843
    str_586845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4175, 46), 'str', 'ignore')
    keyword_586846 = str_586845
    kwargs_586847 = {'divide': keyword_586844, 'invalid': keyword_586846}
    # Getting the type of 'np' (line 4175)
    np_586841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4175, 9), 'np', False)
    # Obtaining the member 'errstate' of a type (line 4175)
    errstate_586842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4175, 9), np_586841, 'errstate')
    # Calling errstate(args, kwargs) (line 4175)
    errstate_call_result_586848 = invoke(stypy.reporting.localization.Localization(__file__, 4175, 9), errstate_586842, *[], **kwargs_586847)
    
    with_586849 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 4175, 9), errstate_call_result_586848, 'with parameter', '__enter__', '__exit__')

    if with_586849:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 4175)
        enter___586850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4175, 9), errstate_call_result_586848, '__enter__')
        with_enter_586851 = invoke(stypy.reporting.localization.Localization(__file__, 4175, 9), enter___586850)
        
        # Assigning a Call to a Name (line 4176):
        
        # Assigning a Call to a Name (line 4176):
        
        # Call to divide(...): (line 4176)
        # Processing the call arguments (line 4176)
        # Getting the type of 'dm' (line 4176)
        dm_586854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4176, 22), 'dm', False)
        # Getting the type of 'denom' (line 4176)
        denom_586855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4176, 26), 'denom', False)
        # Processing the call keyword arguments (line 4176)
        kwargs_586856 = {}
        # Getting the type of 'np' (line 4176)
        np_586852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4176, 12), 'np', False)
        # Obtaining the member 'divide' of a type (line 4176)
        divide_586853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4176, 12), np_586852, 'divide')
        # Calling divide(args, kwargs) (line 4176)
        divide_call_result_586857 = invoke(stypy.reporting.localization.Localization(__file__, 4176, 12), divide_586853, *[dm_586854, denom_586855], **kwargs_586856)
        
        # Assigning a type to the variable 't' (line 4176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4176, 8), 't', divide_call_result_586857)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 4175)
        exit___586858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4175, 9), errstate_call_result_586848, '__exit__')
        with_exit_586859 = invoke(stypy.reporting.localization.Localization(__file__, 4175, 9), exit___586858, None, None, None)

    
    # Assigning a Call to a Tuple (line 4177):
    
    # Assigning a Subscript to a Name (line 4177):
    
    # Obtaining the type of the subscript
    int_586860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4177, 4), 'int')
    
    # Call to _ttest_finish(...): (line 4177)
    # Processing the call arguments (line 4177)
    # Getting the type of 'df' (line 4177)
    df_586862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4177, 28), 'df', False)
    # Getting the type of 't' (line 4177)
    t_586863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4177, 32), 't', False)
    # Processing the call keyword arguments (line 4177)
    kwargs_586864 = {}
    # Getting the type of '_ttest_finish' (line 4177)
    _ttest_finish_586861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4177, 14), '_ttest_finish', False)
    # Calling _ttest_finish(args, kwargs) (line 4177)
    _ttest_finish_call_result_586865 = invoke(stypy.reporting.localization.Localization(__file__, 4177, 14), _ttest_finish_586861, *[df_586862, t_586863], **kwargs_586864)
    
    # Obtaining the member '__getitem__' of a type (line 4177)
    getitem___586866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4177, 4), _ttest_finish_call_result_586865, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4177)
    subscript_call_result_586867 = invoke(stypy.reporting.localization.Localization(__file__, 4177, 4), getitem___586866, int_586860)
    
    # Assigning a type to the variable 'tuple_var_assignment_579975' (line 4177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4177, 4), 'tuple_var_assignment_579975', subscript_call_result_586867)
    
    # Assigning a Subscript to a Name (line 4177):
    
    # Obtaining the type of the subscript
    int_586868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4177, 4), 'int')
    
    # Call to _ttest_finish(...): (line 4177)
    # Processing the call arguments (line 4177)
    # Getting the type of 'df' (line 4177)
    df_586870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4177, 28), 'df', False)
    # Getting the type of 't' (line 4177)
    t_586871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4177, 32), 't', False)
    # Processing the call keyword arguments (line 4177)
    kwargs_586872 = {}
    # Getting the type of '_ttest_finish' (line 4177)
    _ttest_finish_586869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4177, 14), '_ttest_finish', False)
    # Calling _ttest_finish(args, kwargs) (line 4177)
    _ttest_finish_call_result_586873 = invoke(stypy.reporting.localization.Localization(__file__, 4177, 14), _ttest_finish_586869, *[df_586870, t_586871], **kwargs_586872)
    
    # Obtaining the member '__getitem__' of a type (line 4177)
    getitem___586874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4177, 4), _ttest_finish_call_result_586873, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4177)
    subscript_call_result_586875 = invoke(stypy.reporting.localization.Localization(__file__, 4177, 4), getitem___586874, int_586868)
    
    # Assigning a type to the variable 'tuple_var_assignment_579976' (line 4177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4177, 4), 'tuple_var_assignment_579976', subscript_call_result_586875)
    
    # Assigning a Name to a Name (line 4177):
    # Getting the type of 'tuple_var_assignment_579975' (line 4177)
    tuple_var_assignment_579975_586876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4177, 4), 'tuple_var_assignment_579975')
    # Assigning a type to the variable 't' (line 4177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4177, 4), 't', tuple_var_assignment_579975_586876)
    
    # Assigning a Name to a Name (line 4177):
    # Getting the type of 'tuple_var_assignment_579976' (line 4177)
    tuple_var_assignment_579976_586877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4177, 4), 'tuple_var_assignment_579976')
    # Assigning a type to the variable 'prob' (line 4177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4177, 7), 'prob', tuple_var_assignment_579976_586877)
    
    # Call to Ttest_relResult(...): (line 4179)
    # Processing the call arguments (line 4179)
    # Getting the type of 't' (line 4179)
    t_586879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4179, 27), 't', False)
    # Getting the type of 'prob' (line 4179)
    prob_586880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4179, 30), 'prob', False)
    # Processing the call keyword arguments (line 4179)
    kwargs_586881 = {}
    # Getting the type of 'Ttest_relResult' (line 4179)
    Ttest_relResult_586878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4179, 11), 'Ttest_relResult', False)
    # Calling Ttest_relResult(args, kwargs) (line 4179)
    Ttest_relResult_call_result_586882 = invoke(stypy.reporting.localization.Localization(__file__, 4179, 11), Ttest_relResult_586878, *[t_586879, prob_586880], **kwargs_586881)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4179)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4179, 4), 'stypy_return_type', Ttest_relResult_call_result_586882)
    
    # ################# End of 'ttest_rel(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ttest_rel' in the type store
    # Getting the type of 'stypy_return_type' (line 4087)
    stypy_return_type_586883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4087, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_586883)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ttest_rel'
    return stypy_return_type_586883

# Assigning a type to the variable 'ttest_rel' (line 4087)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4087, 0), 'ttest_rel', ttest_rel)

# Assigning a Call to a Name (line 4181):

# Assigning a Call to a Name (line 4181):

# Call to namedtuple(...): (line 4181)
# Processing the call arguments (line 4181)
str_586885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4181, 26), 'str', 'KstestResult')

# Obtaining an instance of the builtin type 'tuple' (line 4181)
tuple_586886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4181, 43), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 4181)
# Adding element type (line 4181)
str_586887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4181, 43), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4181, 43), tuple_586886, str_586887)
# Adding element type (line 4181)
str_586888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4181, 56), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4181, 43), tuple_586886, str_586888)

# Processing the call keyword arguments (line 4181)
kwargs_586889 = {}
# Getting the type of 'namedtuple' (line 4181)
namedtuple_586884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4181, 15), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 4181)
namedtuple_call_result_586890 = invoke(stypy.reporting.localization.Localization(__file__, 4181, 15), namedtuple_586884, *[str_586885, tuple_586886], **kwargs_586889)

# Assigning a type to the variable 'KstestResult' (line 4181)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4181, 0), 'KstestResult', namedtuple_call_result_586890)

@norecursion
def kstest(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 4184)
    tuple_586891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4184, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4184)
    
    int_586892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4184, 32), 'int')
    str_586893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4184, 48), 'str', 'two-sided')
    str_586894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4184, 66), 'str', 'approx')
    defaults = [tuple_586891, int_586892, str_586893, str_586894]
    # Create a new context for function 'kstest'
    module_type_store = module_type_store.open_function_context('kstest', 4184, 0, False)
    
    # Passed parameters checking function
    kstest.stypy_localization = localization
    kstest.stypy_type_of_self = None
    kstest.stypy_type_store = module_type_store
    kstest.stypy_function_name = 'kstest'
    kstest.stypy_param_names_list = ['rvs', 'cdf', 'args', 'N', 'alternative', 'mode']
    kstest.stypy_varargs_param_name = None
    kstest.stypy_kwargs_param_name = None
    kstest.stypy_call_defaults = defaults
    kstest.stypy_call_varargs = varargs
    kstest.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kstest', ['rvs', 'cdf', 'args', 'N', 'alternative', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kstest', localization, ['rvs', 'cdf', 'args', 'N', 'alternative', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kstest(...)' code ##################

    str_586895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4288, (-1)), 'str', '\n    Perform the Kolmogorov-Smirnov test for goodness of fit.\n\n    This performs a test of the distribution G(x) of an observed\n    random variable against a given distribution F(x). Under the null\n    hypothesis the two distributions are identical, G(x)=F(x). The\n    alternative hypothesis can be either \'two-sided\' (default), \'less\'\n    or \'greater\'. The KS test is only valid for continuous distributions.\n\n    Parameters\n    ----------\n    rvs : str, array or callable\n        If a string, it should be the name of a distribution in `scipy.stats`.\n        If an array, it should be a 1-D array of observations of random\n        variables.\n        If a callable, it should be a function to generate random variables;\n        it is required to have a keyword argument `size`.\n    cdf : str or callable\n        If a string, it should be the name of a distribution in `scipy.stats`.\n        If `rvs` is a string then `cdf` can be False or the same as `rvs`.\n        If a callable, that callable is used to calculate the cdf.\n    args : tuple, sequence, optional\n        Distribution parameters, used if `rvs` or `cdf` are strings.\n    N : int, optional\n        Sample size if `rvs` is string or callable.  Default is 20.\n    alternative : {\'two-sided\', \'less\',\'greater\'}, optional\n        Defines the alternative hypothesis (see explanation above).\n        Default is \'two-sided\'.\n    mode : \'approx\' (default) or \'asymp\', optional\n        Defines the distribution used for calculating the p-value.\n\n          - \'approx\' : use approximation to exact distribution of test statistic\n          - \'asymp\' : use asymptotic distribution of test statistic\n\n    Returns\n    -------\n    statistic : float\n        KS test statistic, either D, D+ or D-.\n    pvalue :  float\n        One-tailed or two-tailed p-value.\n\n    Notes\n    -----\n    In the one-sided test, the alternative is that the empirical\n    cumulative distribution function of the random variable is "less"\n    or "greater" than the cumulative distribution function F(x) of the\n    hypothesis, ``G(x)<=F(x)``, resp. ``G(x)>=F(x)``.\n\n    Examples\n    --------\n    >>> from scipy import stats\n\n    >>> x = np.linspace(-15, 15, 9)\n    >>> stats.kstest(x, \'norm\')\n    (0.44435602715924361, 0.038850142705171065)\n\n    >>> np.random.seed(987654321) # set random seed to get the same result\n    >>> stats.kstest(\'norm\', False, N=100)\n    (0.058352892479417884, 0.88531190944151261)\n\n    The above lines are equivalent to:\n\n    >>> np.random.seed(987654321)\n    >>> stats.kstest(stats.norm.rvs(size=100), \'norm\')\n    (0.058352892479417884, 0.88531190944151261)\n\n    *Test against one-sided alternative hypothesis*\n\n    Shift distribution to larger values, so that ``cdf_dgp(x) < norm.cdf(x)``:\n\n    >>> np.random.seed(987654321)\n    >>> x = stats.norm.rvs(loc=0.2, size=100)\n    >>> stats.kstest(x,\'norm\', alternative = \'less\')\n    (0.12464329735846891, 0.040989164077641749)\n\n    Reject equal distribution against alternative hypothesis: less\n\n    >>> stats.kstest(x,\'norm\', alternative = \'greater\')\n    (0.0072115233216311081, 0.98531158590396395)\n\n    Don\'t reject equal distribution against alternative hypothesis: greater\n\n    >>> stats.kstest(x,\'norm\', mode=\'asymp\')\n    (0.12464329735846891, 0.08944488871182088)\n\n    *Testing t distributed random variables against normal distribution*\n\n    With 100 degrees of freedom the t distribution looks close to the normal\n    distribution, and the K-S test does not reject the hypothesis that the\n    sample came from the normal distribution:\n\n    >>> np.random.seed(987654321)\n    >>> stats.kstest(stats.t.rvs(100,size=100),\'norm\')\n    (0.072018929165471257, 0.67630062862479168)\n\n    With 3 degrees of freedom the t distribution looks sufficiently different\n    from the normal distribution, that we can reject the hypothesis that the\n    sample came from the normal distribution at the 10% level:\n\n    >>> np.random.seed(987654321)\n    >>> stats.kstest(stats.t.rvs(3,size=100),\'norm\')\n    (0.131016895759829, 0.058826222555312224)\n\n    ')
    
    
    # Call to isinstance(...): (line 4289)
    # Processing the call arguments (line 4289)
    # Getting the type of 'rvs' (line 4289)
    rvs_586897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4289, 18), 'rvs', False)
    # Getting the type of 'string_types' (line 4289)
    string_types_586898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4289, 23), 'string_types', False)
    # Processing the call keyword arguments (line 4289)
    kwargs_586899 = {}
    # Getting the type of 'isinstance' (line 4289)
    isinstance_586896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4289, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 4289)
    isinstance_call_result_586900 = invoke(stypy.reporting.localization.Localization(__file__, 4289, 7), isinstance_586896, *[rvs_586897, string_types_586898], **kwargs_586899)
    
    # Testing the type of an if condition (line 4289)
    if_condition_586901 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4289, 4), isinstance_call_result_586900)
    # Assigning a type to the variable 'if_condition_586901' (line 4289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4289, 4), 'if_condition_586901', if_condition_586901)
    # SSA begins for if statement (line 4289)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'cdf' (line 4290)
    cdf_586902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4290, 16), 'cdf')
    # Applying the 'not' unary operator (line 4290)
    result_not__586903 = python_operator(stypy.reporting.localization.Localization(__file__, 4290, 12), 'not', cdf_586902)
    
    
    # Getting the type of 'cdf' (line 4290)
    cdf_586904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4290, 25), 'cdf')
    # Getting the type of 'rvs' (line 4290)
    rvs_586905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4290, 32), 'rvs')
    # Applying the binary operator '==' (line 4290)
    result_eq_586906 = python_operator(stypy.reporting.localization.Localization(__file__, 4290, 25), '==', cdf_586904, rvs_586905)
    
    # Applying the binary operator 'or' (line 4290)
    result_or_keyword_586907 = python_operator(stypy.reporting.localization.Localization(__file__, 4290, 11), 'or', result_not__586903, result_eq_586906)
    
    # Testing the type of an if condition (line 4290)
    if_condition_586908 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4290, 8), result_or_keyword_586907)
    # Assigning a type to the variable 'if_condition_586908' (line 4290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4290, 8), 'if_condition_586908', if_condition_586908)
    # SSA begins for if statement (line 4290)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 4291):
    
    # Assigning a Attribute to a Name (line 4291):
    
    # Call to getattr(...): (line 4291)
    # Processing the call arguments (line 4291)
    # Getting the type of 'distributions' (line 4291)
    distributions_586910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4291, 26), 'distributions', False)
    # Getting the type of 'rvs' (line 4291)
    rvs_586911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4291, 41), 'rvs', False)
    # Processing the call keyword arguments (line 4291)
    kwargs_586912 = {}
    # Getting the type of 'getattr' (line 4291)
    getattr_586909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4291, 18), 'getattr', False)
    # Calling getattr(args, kwargs) (line 4291)
    getattr_call_result_586913 = invoke(stypy.reporting.localization.Localization(__file__, 4291, 18), getattr_586909, *[distributions_586910, rvs_586911], **kwargs_586912)
    
    # Obtaining the member 'cdf' of a type (line 4291)
    cdf_586914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4291, 18), getattr_call_result_586913, 'cdf')
    # Assigning a type to the variable 'cdf' (line 4291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4291, 12), 'cdf', cdf_586914)
    
    # Assigning a Attribute to a Name (line 4292):
    
    # Assigning a Attribute to a Name (line 4292):
    
    # Call to getattr(...): (line 4292)
    # Processing the call arguments (line 4292)
    # Getting the type of 'distributions' (line 4292)
    distributions_586916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4292, 26), 'distributions', False)
    # Getting the type of 'rvs' (line 4292)
    rvs_586917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4292, 41), 'rvs', False)
    # Processing the call keyword arguments (line 4292)
    kwargs_586918 = {}
    # Getting the type of 'getattr' (line 4292)
    getattr_586915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4292, 18), 'getattr', False)
    # Calling getattr(args, kwargs) (line 4292)
    getattr_call_result_586919 = invoke(stypy.reporting.localization.Localization(__file__, 4292, 18), getattr_586915, *[distributions_586916, rvs_586917], **kwargs_586918)
    
    # Obtaining the member 'rvs' of a type (line 4292)
    rvs_586920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4292, 18), getattr_call_result_586919, 'rvs')
    # Assigning a type to the variable 'rvs' (line 4292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4292, 12), 'rvs', rvs_586920)
    # SSA branch for the else part of an if statement (line 4290)
    module_type_store.open_ssa_branch('else')
    
    # Call to AttributeError(...): (line 4294)
    # Processing the call arguments (line 4294)
    str_586922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4294, 33), 'str', 'if rvs is string, cdf has to be the same distribution')
    # Processing the call keyword arguments (line 4294)
    kwargs_586923 = {}
    # Getting the type of 'AttributeError' (line 4294)
    AttributeError_586921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4294, 18), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 4294)
    AttributeError_call_result_586924 = invoke(stypy.reporting.localization.Localization(__file__, 4294, 18), AttributeError_586921, *[str_586922], **kwargs_586923)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4294, 12), AttributeError_call_result_586924, 'raise parameter', BaseException)
    # SSA join for if statement (line 4290)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4289)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isinstance(...): (line 4297)
    # Processing the call arguments (line 4297)
    # Getting the type of 'cdf' (line 4297)
    cdf_586926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4297, 18), 'cdf', False)
    # Getting the type of 'string_types' (line 4297)
    string_types_586927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4297, 23), 'string_types', False)
    # Processing the call keyword arguments (line 4297)
    kwargs_586928 = {}
    # Getting the type of 'isinstance' (line 4297)
    isinstance_586925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4297, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 4297)
    isinstance_call_result_586929 = invoke(stypy.reporting.localization.Localization(__file__, 4297, 7), isinstance_586925, *[cdf_586926, string_types_586927], **kwargs_586928)
    
    # Testing the type of an if condition (line 4297)
    if_condition_586930 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4297, 4), isinstance_call_result_586929)
    # Assigning a type to the variable 'if_condition_586930' (line 4297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4297, 4), 'if_condition_586930', if_condition_586930)
    # SSA begins for if statement (line 4297)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 4298):
    
    # Assigning a Attribute to a Name (line 4298):
    
    # Call to getattr(...): (line 4298)
    # Processing the call arguments (line 4298)
    # Getting the type of 'distributions' (line 4298)
    distributions_586932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4298, 22), 'distributions', False)
    # Getting the type of 'cdf' (line 4298)
    cdf_586933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4298, 37), 'cdf', False)
    # Processing the call keyword arguments (line 4298)
    kwargs_586934 = {}
    # Getting the type of 'getattr' (line 4298)
    getattr_586931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4298, 14), 'getattr', False)
    # Calling getattr(args, kwargs) (line 4298)
    getattr_call_result_586935 = invoke(stypy.reporting.localization.Localization(__file__, 4298, 14), getattr_586931, *[distributions_586932, cdf_586933], **kwargs_586934)
    
    # Obtaining the member 'cdf' of a type (line 4298)
    cdf_586936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4298, 14), getattr_call_result_586935, 'cdf')
    # Assigning a type to the variable 'cdf' (line 4298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4298, 8), 'cdf', cdf_586936)
    # SSA join for if statement (line 4297)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to callable(...): (line 4299)
    # Processing the call arguments (line 4299)
    # Getting the type of 'rvs' (line 4299)
    rvs_586938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4299, 16), 'rvs', False)
    # Processing the call keyword arguments (line 4299)
    kwargs_586939 = {}
    # Getting the type of 'callable' (line 4299)
    callable_586937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4299, 7), 'callable', False)
    # Calling callable(args, kwargs) (line 4299)
    callable_call_result_586940 = invoke(stypy.reporting.localization.Localization(__file__, 4299, 7), callable_586937, *[rvs_586938], **kwargs_586939)
    
    # Testing the type of an if condition (line 4299)
    if_condition_586941 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4299, 4), callable_call_result_586940)
    # Assigning a type to the variable 'if_condition_586941' (line 4299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4299, 4), 'if_condition_586941', if_condition_586941)
    # SSA begins for if statement (line 4299)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Dict to a Name (line 4300):
    
    # Assigning a Dict to a Name (line 4300):
    
    # Obtaining an instance of the builtin type 'dict' (line 4300)
    dict_586942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4300, 15), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 4300)
    # Adding element type (key, value) (line 4300)
    str_586943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4300, 16), 'str', 'size')
    # Getting the type of 'N' (line 4300)
    N_586944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4300, 24), 'N')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4300, 15), dict_586942, (str_586943, N_586944))
    
    # Assigning a type to the variable 'kwds' (line 4300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4300, 8), 'kwds', dict_586942)
    
    # Assigning a Call to a Name (line 4301):
    
    # Assigning a Call to a Name (line 4301):
    
    # Call to sort(...): (line 4301)
    # Processing the call arguments (line 4301)
    
    # Call to rvs(...): (line 4301)
    # Getting the type of 'args' (line 4301)
    args_586948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4301, 28), 'args', False)
    # Processing the call keyword arguments (line 4301)
    # Getting the type of 'kwds' (line 4301)
    kwds_586949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4301, 36), 'kwds', False)
    kwargs_586950 = {'kwds_586949': kwds_586949}
    # Getting the type of 'rvs' (line 4301)
    rvs_586947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4301, 23), 'rvs', False)
    # Calling rvs(args, kwargs) (line 4301)
    rvs_call_result_586951 = invoke(stypy.reporting.localization.Localization(__file__, 4301, 23), rvs_586947, *[args_586948], **kwargs_586950)
    
    # Processing the call keyword arguments (line 4301)
    kwargs_586952 = {}
    # Getting the type of 'np' (line 4301)
    np_586945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4301, 15), 'np', False)
    # Obtaining the member 'sort' of a type (line 4301)
    sort_586946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4301, 15), np_586945, 'sort')
    # Calling sort(args, kwargs) (line 4301)
    sort_call_result_586953 = invoke(stypy.reporting.localization.Localization(__file__, 4301, 15), sort_586946, *[rvs_call_result_586951], **kwargs_586952)
    
    # Assigning a type to the variable 'vals' (line 4301)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4301, 8), 'vals', sort_call_result_586953)
    # SSA branch for the else part of an if statement (line 4299)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 4303):
    
    # Assigning a Call to a Name (line 4303):
    
    # Call to sort(...): (line 4303)
    # Processing the call arguments (line 4303)
    # Getting the type of 'rvs' (line 4303)
    rvs_586956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4303, 23), 'rvs', False)
    # Processing the call keyword arguments (line 4303)
    kwargs_586957 = {}
    # Getting the type of 'np' (line 4303)
    np_586954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4303, 15), 'np', False)
    # Obtaining the member 'sort' of a type (line 4303)
    sort_586955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4303, 15), np_586954, 'sort')
    # Calling sort(args, kwargs) (line 4303)
    sort_call_result_586958 = invoke(stypy.reporting.localization.Localization(__file__, 4303, 15), sort_586955, *[rvs_586956], **kwargs_586957)
    
    # Assigning a type to the variable 'vals' (line 4303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4303, 8), 'vals', sort_call_result_586958)
    
    # Assigning a Call to a Name (line 4304):
    
    # Assigning a Call to a Name (line 4304):
    
    # Call to len(...): (line 4304)
    # Processing the call arguments (line 4304)
    # Getting the type of 'vals' (line 4304)
    vals_586960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4304, 16), 'vals', False)
    # Processing the call keyword arguments (line 4304)
    kwargs_586961 = {}
    # Getting the type of 'len' (line 4304)
    len_586959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4304, 12), 'len', False)
    # Calling len(args, kwargs) (line 4304)
    len_call_result_586962 = invoke(stypy.reporting.localization.Localization(__file__, 4304, 12), len_586959, *[vals_586960], **kwargs_586961)
    
    # Assigning a type to the variable 'N' (line 4304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4304, 8), 'N', len_call_result_586962)
    # SSA join for if statement (line 4299)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 4305):
    
    # Assigning a Call to a Name (line 4305):
    
    # Call to cdf(...): (line 4305)
    # Processing the call arguments (line 4305)
    # Getting the type of 'vals' (line 4305)
    vals_586964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4305, 18), 'vals', False)
    # Getting the type of 'args' (line 4305)
    args_586965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4305, 25), 'args', False)
    # Processing the call keyword arguments (line 4305)
    kwargs_586966 = {}
    # Getting the type of 'cdf' (line 4305)
    cdf_586963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4305, 14), 'cdf', False)
    # Calling cdf(args, kwargs) (line 4305)
    cdf_call_result_586967 = invoke(stypy.reporting.localization.Localization(__file__, 4305, 14), cdf_586963, *[vals_586964, args_586965], **kwargs_586966)
    
    # Assigning a type to the variable 'cdfvals' (line 4305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4305, 4), 'cdfvals', cdf_call_result_586967)
    
    
    # Getting the type of 'alternative' (line 4308)
    alternative_586968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4308, 7), 'alternative')
    str_586969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4308, 22), 'str', 'two_sided')
    # Applying the binary operator '==' (line 4308)
    result_eq_586970 = python_operator(stypy.reporting.localization.Localization(__file__, 4308, 7), '==', alternative_586968, str_586969)
    
    # Testing the type of an if condition (line 4308)
    if_condition_586971 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4308, 4), result_eq_586970)
    # Assigning a type to the variable 'if_condition_586971' (line 4308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4308, 4), 'if_condition_586971', if_condition_586971)
    # SSA begins for if statement (line 4308)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 4309):
    
    # Assigning a Str to a Name (line 4309):
    str_586972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4309, 22), 'str', 'two-sided')
    # Assigning a type to the variable 'alternative' (line 4309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4309, 8), 'alternative', str_586972)
    # SSA join for if statement (line 4308)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'alternative' (line 4311)
    alternative_586973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4311, 7), 'alternative')
    
    # Obtaining an instance of the builtin type 'list' (line 4311)
    list_586974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4311, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4311)
    # Adding element type (line 4311)
    str_586975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4311, 23), 'str', 'two-sided')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4311, 22), list_586974, str_586975)
    # Adding element type (line 4311)
    str_586976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4311, 36), 'str', 'greater')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4311, 22), list_586974, str_586976)
    
    # Applying the binary operator 'in' (line 4311)
    result_contains_586977 = python_operator(stypy.reporting.localization.Localization(__file__, 4311, 7), 'in', alternative_586973, list_586974)
    
    # Testing the type of an if condition (line 4311)
    if_condition_586978 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4311, 4), result_contains_586977)
    # Assigning a type to the variable 'if_condition_586978' (line 4311)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4311, 4), 'if_condition_586978', if_condition_586978)
    # SSA begins for if statement (line 4311)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4312):
    
    # Assigning a Call to a Name (line 4312):
    
    # Call to max(...): (line 4312)
    # Processing the call keyword arguments (line 4312)
    kwargs_586992 = {}
    
    # Call to arange(...): (line 4312)
    # Processing the call arguments (line 4312)
    float_586981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4312, 27), 'float')
    # Getting the type of 'N' (line 4312)
    N_586982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4312, 32), 'N', False)
    int_586983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4312, 36), 'int')
    # Applying the binary operator '+' (line 4312)
    result_add_586984 = python_operator(stypy.reporting.localization.Localization(__file__, 4312, 32), '+', N_586982, int_586983)
    
    # Processing the call keyword arguments (line 4312)
    kwargs_586985 = {}
    # Getting the type of 'np' (line 4312)
    np_586979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4312, 17), 'np', False)
    # Obtaining the member 'arange' of a type (line 4312)
    arange_586980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4312, 17), np_586979, 'arange')
    # Calling arange(args, kwargs) (line 4312)
    arange_call_result_586986 = invoke(stypy.reporting.localization.Localization(__file__, 4312, 17), arange_586980, *[float_586981, result_add_586984], **kwargs_586985)
    
    # Getting the type of 'N' (line 4312)
    N_586987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4312, 39), 'N', False)
    # Applying the binary operator 'div' (line 4312)
    result_div_586988 = python_operator(stypy.reporting.localization.Localization(__file__, 4312, 17), 'div', arange_call_result_586986, N_586987)
    
    # Getting the type of 'cdfvals' (line 4312)
    cdfvals_586989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4312, 43), 'cdfvals', False)
    # Applying the binary operator '-' (line 4312)
    result_sub_586990 = python_operator(stypy.reporting.localization.Localization(__file__, 4312, 17), '-', result_div_586988, cdfvals_586989)
    
    # Obtaining the member 'max' of a type (line 4312)
    max_586991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4312, 17), result_sub_586990, 'max')
    # Calling max(args, kwargs) (line 4312)
    max_call_result_586993 = invoke(stypy.reporting.localization.Localization(__file__, 4312, 17), max_586991, *[], **kwargs_586992)
    
    # Assigning a type to the variable 'Dplus' (line 4312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4312, 8), 'Dplus', max_call_result_586993)
    
    
    # Getting the type of 'alternative' (line 4313)
    alternative_586994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4313, 11), 'alternative')
    str_586995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4313, 26), 'str', 'greater')
    # Applying the binary operator '==' (line 4313)
    result_eq_586996 = python_operator(stypy.reporting.localization.Localization(__file__, 4313, 11), '==', alternative_586994, str_586995)
    
    # Testing the type of an if condition (line 4313)
    if_condition_586997 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4313, 8), result_eq_586996)
    # Assigning a type to the variable 'if_condition_586997' (line 4313)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4313, 8), 'if_condition_586997', if_condition_586997)
    # SSA begins for if statement (line 4313)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to KstestResult(...): (line 4314)
    # Processing the call arguments (line 4314)
    # Getting the type of 'Dplus' (line 4314)
    Dplus_586999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4314, 32), 'Dplus', False)
    
    # Call to sf(...): (line 4314)
    # Processing the call arguments (line 4314)
    # Getting the type of 'Dplus' (line 4314)
    Dplus_587003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4314, 62), 'Dplus', False)
    # Getting the type of 'N' (line 4314)
    N_587004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4314, 69), 'N', False)
    # Processing the call keyword arguments (line 4314)
    kwargs_587005 = {}
    # Getting the type of 'distributions' (line 4314)
    distributions_587000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4314, 39), 'distributions', False)
    # Obtaining the member 'ksone' of a type (line 4314)
    ksone_587001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4314, 39), distributions_587000, 'ksone')
    # Obtaining the member 'sf' of a type (line 4314)
    sf_587002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4314, 39), ksone_587001, 'sf')
    # Calling sf(args, kwargs) (line 4314)
    sf_call_result_587006 = invoke(stypy.reporting.localization.Localization(__file__, 4314, 39), sf_587002, *[Dplus_587003, N_587004], **kwargs_587005)
    
    # Processing the call keyword arguments (line 4314)
    kwargs_587007 = {}
    # Getting the type of 'KstestResult' (line 4314)
    KstestResult_586998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4314, 19), 'KstestResult', False)
    # Calling KstestResult(args, kwargs) (line 4314)
    KstestResult_call_result_587008 = invoke(stypy.reporting.localization.Localization(__file__, 4314, 19), KstestResult_586998, *[Dplus_586999, sf_call_result_587006], **kwargs_587007)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4314, 12), 'stypy_return_type', KstestResult_call_result_587008)
    # SSA join for if statement (line 4313)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4311)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'alternative' (line 4316)
    alternative_587009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4316, 7), 'alternative')
    
    # Obtaining an instance of the builtin type 'list' (line 4316)
    list_587010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4316, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4316)
    # Adding element type (line 4316)
    str_587011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4316, 23), 'str', 'two-sided')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4316, 22), list_587010, str_587011)
    # Adding element type (line 4316)
    str_587012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4316, 36), 'str', 'less')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4316, 22), list_587010, str_587012)
    
    # Applying the binary operator 'in' (line 4316)
    result_contains_587013 = python_operator(stypy.reporting.localization.Localization(__file__, 4316, 7), 'in', alternative_587009, list_587010)
    
    # Testing the type of an if condition (line 4316)
    if_condition_587014 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4316, 4), result_contains_587013)
    # Assigning a type to the variable 'if_condition_587014' (line 4316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4316, 4), 'if_condition_587014', if_condition_587014)
    # SSA begins for if statement (line 4316)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4317):
    
    # Assigning a Call to a Name (line 4317):
    
    # Call to max(...): (line 4317)
    # Processing the call keyword arguments (line 4317)
    kwargs_587026 = {}
    # Getting the type of 'cdfvals' (line 4317)
    cdfvals_587015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4317, 16), 'cdfvals', False)
    
    # Call to arange(...): (line 4317)
    # Processing the call arguments (line 4317)
    float_587018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4317, 36), 'float')
    # Getting the type of 'N' (line 4317)
    N_587019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4317, 41), 'N', False)
    # Processing the call keyword arguments (line 4317)
    kwargs_587020 = {}
    # Getting the type of 'np' (line 4317)
    np_587016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4317, 26), 'np', False)
    # Obtaining the member 'arange' of a type (line 4317)
    arange_587017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4317, 26), np_587016, 'arange')
    # Calling arange(args, kwargs) (line 4317)
    arange_call_result_587021 = invoke(stypy.reporting.localization.Localization(__file__, 4317, 26), arange_587017, *[float_587018, N_587019], **kwargs_587020)
    
    # Getting the type of 'N' (line 4317)
    N_587022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4317, 44), 'N', False)
    # Applying the binary operator 'div' (line 4317)
    result_div_587023 = python_operator(stypy.reporting.localization.Localization(__file__, 4317, 26), 'div', arange_call_result_587021, N_587022)
    
    # Applying the binary operator '-' (line 4317)
    result_sub_587024 = python_operator(stypy.reporting.localization.Localization(__file__, 4317, 16), '-', cdfvals_587015, result_div_587023)
    
    # Obtaining the member 'max' of a type (line 4317)
    max_587025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4317, 16), result_sub_587024, 'max')
    # Calling max(args, kwargs) (line 4317)
    max_call_result_587027 = invoke(stypy.reporting.localization.Localization(__file__, 4317, 16), max_587025, *[], **kwargs_587026)
    
    # Assigning a type to the variable 'Dmin' (line 4317)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4317, 8), 'Dmin', max_call_result_587027)
    
    
    # Getting the type of 'alternative' (line 4318)
    alternative_587028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4318, 11), 'alternative')
    str_587029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4318, 26), 'str', 'less')
    # Applying the binary operator '==' (line 4318)
    result_eq_587030 = python_operator(stypy.reporting.localization.Localization(__file__, 4318, 11), '==', alternative_587028, str_587029)
    
    # Testing the type of an if condition (line 4318)
    if_condition_587031 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4318, 8), result_eq_587030)
    # Assigning a type to the variable 'if_condition_587031' (line 4318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4318, 8), 'if_condition_587031', if_condition_587031)
    # SSA begins for if statement (line 4318)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to KstestResult(...): (line 4319)
    # Processing the call arguments (line 4319)
    # Getting the type of 'Dmin' (line 4319)
    Dmin_587033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4319, 32), 'Dmin', False)
    
    # Call to sf(...): (line 4319)
    # Processing the call arguments (line 4319)
    # Getting the type of 'Dmin' (line 4319)
    Dmin_587037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4319, 61), 'Dmin', False)
    # Getting the type of 'N' (line 4319)
    N_587038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4319, 67), 'N', False)
    # Processing the call keyword arguments (line 4319)
    kwargs_587039 = {}
    # Getting the type of 'distributions' (line 4319)
    distributions_587034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4319, 38), 'distributions', False)
    # Obtaining the member 'ksone' of a type (line 4319)
    ksone_587035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4319, 38), distributions_587034, 'ksone')
    # Obtaining the member 'sf' of a type (line 4319)
    sf_587036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4319, 38), ksone_587035, 'sf')
    # Calling sf(args, kwargs) (line 4319)
    sf_call_result_587040 = invoke(stypy.reporting.localization.Localization(__file__, 4319, 38), sf_587036, *[Dmin_587037, N_587038], **kwargs_587039)
    
    # Processing the call keyword arguments (line 4319)
    kwargs_587041 = {}
    # Getting the type of 'KstestResult' (line 4319)
    KstestResult_587032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4319, 19), 'KstestResult', False)
    # Calling KstestResult(args, kwargs) (line 4319)
    KstestResult_call_result_587042 = invoke(stypy.reporting.localization.Localization(__file__, 4319, 19), KstestResult_587032, *[Dmin_587033, sf_call_result_587040], **kwargs_587041)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4319, 12), 'stypy_return_type', KstestResult_call_result_587042)
    # SSA join for if statement (line 4318)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4316)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'alternative' (line 4321)
    alternative_587043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4321, 7), 'alternative')
    str_587044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4321, 22), 'str', 'two-sided')
    # Applying the binary operator '==' (line 4321)
    result_eq_587045 = python_operator(stypy.reporting.localization.Localization(__file__, 4321, 7), '==', alternative_587043, str_587044)
    
    # Testing the type of an if condition (line 4321)
    if_condition_587046 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4321, 4), result_eq_587045)
    # Assigning a type to the variable 'if_condition_587046' (line 4321)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4321, 4), 'if_condition_587046', if_condition_587046)
    # SSA begins for if statement (line 4321)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4322):
    
    # Assigning a Call to a Name (line 4322):
    
    # Call to max(...): (line 4322)
    # Processing the call arguments (line 4322)
    
    # Obtaining an instance of the builtin type 'list' (line 4322)
    list_587049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4322, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4322)
    # Adding element type (line 4322)
    # Getting the type of 'Dplus' (line 4322)
    Dplus_587050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4322, 20), 'Dplus', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4322, 19), list_587049, Dplus_587050)
    # Adding element type (line 4322)
    # Getting the type of 'Dmin' (line 4322)
    Dmin_587051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4322, 27), 'Dmin', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4322, 19), list_587049, Dmin_587051)
    
    # Processing the call keyword arguments (line 4322)
    kwargs_587052 = {}
    # Getting the type of 'np' (line 4322)
    np_587047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4322, 12), 'np', False)
    # Obtaining the member 'max' of a type (line 4322)
    max_587048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4322, 12), np_587047, 'max')
    # Calling max(args, kwargs) (line 4322)
    max_call_result_587053 = invoke(stypy.reporting.localization.Localization(__file__, 4322, 12), max_587048, *[list_587049], **kwargs_587052)
    
    # Assigning a type to the variable 'D' (line 4322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4322, 8), 'D', max_call_result_587053)
    
    
    # Getting the type of 'mode' (line 4323)
    mode_587054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4323, 11), 'mode')
    str_587055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4323, 19), 'str', 'asymp')
    # Applying the binary operator '==' (line 4323)
    result_eq_587056 = python_operator(stypy.reporting.localization.Localization(__file__, 4323, 11), '==', mode_587054, str_587055)
    
    # Testing the type of an if condition (line 4323)
    if_condition_587057 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4323, 8), result_eq_587056)
    # Assigning a type to the variable 'if_condition_587057' (line 4323)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4323, 8), 'if_condition_587057', if_condition_587057)
    # SSA begins for if statement (line 4323)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to KstestResult(...): (line 4324)
    # Processing the call arguments (line 4324)
    # Getting the type of 'D' (line 4324)
    D_587059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4324, 32), 'D', False)
    
    # Call to sf(...): (line 4324)
    # Processing the call arguments (line 4324)
    # Getting the type of 'D' (line 4324)
    D_587063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4324, 62), 'D', False)
    
    # Call to sqrt(...): (line 4324)
    # Processing the call arguments (line 4324)
    # Getting the type of 'N' (line 4324)
    N_587066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4324, 74), 'N', False)
    # Processing the call keyword arguments (line 4324)
    kwargs_587067 = {}
    # Getting the type of 'np' (line 4324)
    np_587064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4324, 66), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 4324)
    sqrt_587065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4324, 66), np_587064, 'sqrt')
    # Calling sqrt(args, kwargs) (line 4324)
    sqrt_call_result_587068 = invoke(stypy.reporting.localization.Localization(__file__, 4324, 66), sqrt_587065, *[N_587066], **kwargs_587067)
    
    # Applying the binary operator '*' (line 4324)
    result_mul_587069 = python_operator(stypy.reporting.localization.Localization(__file__, 4324, 62), '*', D_587063, sqrt_call_result_587068)
    
    # Processing the call keyword arguments (line 4324)
    kwargs_587070 = {}
    # Getting the type of 'distributions' (line 4324)
    distributions_587060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4324, 35), 'distributions', False)
    # Obtaining the member 'kstwobign' of a type (line 4324)
    kstwobign_587061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4324, 35), distributions_587060, 'kstwobign')
    # Obtaining the member 'sf' of a type (line 4324)
    sf_587062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4324, 35), kstwobign_587061, 'sf')
    # Calling sf(args, kwargs) (line 4324)
    sf_call_result_587071 = invoke(stypy.reporting.localization.Localization(__file__, 4324, 35), sf_587062, *[result_mul_587069], **kwargs_587070)
    
    # Processing the call keyword arguments (line 4324)
    kwargs_587072 = {}
    # Getting the type of 'KstestResult' (line 4324)
    KstestResult_587058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4324, 19), 'KstestResult', False)
    # Calling KstestResult(args, kwargs) (line 4324)
    KstestResult_call_result_587073 = invoke(stypy.reporting.localization.Localization(__file__, 4324, 19), KstestResult_587058, *[D_587059, sf_call_result_587071], **kwargs_587072)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4324, 12), 'stypy_return_type', KstestResult_call_result_587073)
    # SSA join for if statement (line 4323)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'mode' (line 4325)
    mode_587074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4325, 11), 'mode')
    str_587075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4325, 19), 'str', 'approx')
    # Applying the binary operator '==' (line 4325)
    result_eq_587076 = python_operator(stypy.reporting.localization.Localization(__file__, 4325, 11), '==', mode_587074, str_587075)
    
    # Testing the type of an if condition (line 4325)
    if_condition_587077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4325, 8), result_eq_587076)
    # Assigning a type to the variable 'if_condition_587077' (line 4325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4325, 8), 'if_condition_587077', if_condition_587077)
    # SSA begins for if statement (line 4325)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4326):
    
    # Assigning a Call to a Name (line 4326):
    
    # Call to sf(...): (line 4326)
    # Processing the call arguments (line 4326)
    # Getting the type of 'D' (line 4326)
    D_587081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4326, 50), 'D', False)
    
    # Call to sqrt(...): (line 4326)
    # Processing the call arguments (line 4326)
    # Getting the type of 'N' (line 4326)
    N_587084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4326, 62), 'N', False)
    # Processing the call keyword arguments (line 4326)
    kwargs_587085 = {}
    # Getting the type of 'np' (line 4326)
    np_587082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4326, 54), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 4326)
    sqrt_587083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4326, 54), np_587082, 'sqrt')
    # Calling sqrt(args, kwargs) (line 4326)
    sqrt_call_result_587086 = invoke(stypy.reporting.localization.Localization(__file__, 4326, 54), sqrt_587083, *[N_587084], **kwargs_587085)
    
    # Applying the binary operator '*' (line 4326)
    result_mul_587087 = python_operator(stypy.reporting.localization.Localization(__file__, 4326, 50), '*', D_587081, sqrt_call_result_587086)
    
    # Processing the call keyword arguments (line 4326)
    kwargs_587088 = {}
    # Getting the type of 'distributions' (line 4326)
    distributions_587078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4326, 23), 'distributions', False)
    # Obtaining the member 'kstwobign' of a type (line 4326)
    kstwobign_587079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4326, 23), distributions_587078, 'kstwobign')
    # Obtaining the member 'sf' of a type (line 4326)
    sf_587080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4326, 23), kstwobign_587079, 'sf')
    # Calling sf(args, kwargs) (line 4326)
    sf_call_result_587089 = invoke(stypy.reporting.localization.Localization(__file__, 4326, 23), sf_587080, *[result_mul_587087], **kwargs_587088)
    
    # Assigning a type to the variable 'pval_two' (line 4326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4326, 12), 'pval_two', sf_call_result_587089)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'N' (line 4327)
    N_587090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4327, 15), 'N')
    int_587091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4327, 19), 'int')
    # Applying the binary operator '>' (line 4327)
    result_gt_587092 = python_operator(stypy.reporting.localization.Localization(__file__, 4327, 15), '>', N_587090, int_587091)
    
    
    # Getting the type of 'pval_two' (line 4327)
    pval_two_587093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4327, 27), 'pval_two')
    float_587094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4327, 38), 'float')
    # Getting the type of 'N' (line 4327)
    N_587095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4327, 45), 'N')
    float_587096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4327, 47), 'float')
    # Applying the binary operator '*' (line 4327)
    result_mul_587097 = python_operator(stypy.reporting.localization.Localization(__file__, 4327, 45), '*', N_587095, float_587096)
    
    int_587098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4327, 51), 'int')
    # Applying the binary operator 'div' (line 4327)
    result_div_587099 = python_operator(stypy.reporting.localization.Localization(__file__, 4327, 50), 'div', result_mul_587097, int_587098)
    
    # Applying the binary operator '-' (line 4327)
    result_sub_587100 = python_operator(stypy.reporting.localization.Localization(__file__, 4327, 38), '-', float_587094, result_div_587099)
    
    # Applying the binary operator '>' (line 4327)
    result_gt_587101 = python_operator(stypy.reporting.localization.Localization(__file__, 4327, 27), '>', pval_two_587093, result_sub_587100)
    
    # Applying the binary operator 'or' (line 4327)
    result_or_keyword_587102 = python_operator(stypy.reporting.localization.Localization(__file__, 4327, 15), 'or', result_gt_587092, result_gt_587101)
    
    # Testing the type of an if condition (line 4327)
    if_condition_587103 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4327, 12), result_or_keyword_587102)
    # Assigning a type to the variable 'if_condition_587103' (line 4327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4327, 12), 'if_condition_587103', if_condition_587103)
    # SSA begins for if statement (line 4327)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to KstestResult(...): (line 4328)
    # Processing the call arguments (line 4328)
    # Getting the type of 'D' (line 4328)
    D_587105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4328, 36), 'D', False)
    # Getting the type of 'pval_two' (line 4328)
    pval_two_587106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4328, 39), 'pval_two', False)
    # Processing the call keyword arguments (line 4328)
    kwargs_587107 = {}
    # Getting the type of 'KstestResult' (line 4328)
    KstestResult_587104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4328, 23), 'KstestResult', False)
    # Calling KstestResult(args, kwargs) (line 4328)
    KstestResult_call_result_587108 = invoke(stypy.reporting.localization.Localization(__file__, 4328, 23), KstestResult_587104, *[D_587105, pval_two_587106], **kwargs_587107)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4328, 16), 'stypy_return_type', KstestResult_call_result_587108)
    # SSA branch for the else part of an if statement (line 4327)
    module_type_store.open_ssa_branch('else')
    
    # Call to KstestResult(...): (line 4330)
    # Processing the call arguments (line 4330)
    # Getting the type of 'D' (line 4330)
    D_587110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4330, 36), 'D', False)
    int_587111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4330, 39), 'int')
    
    # Call to sf(...): (line 4330)
    # Processing the call arguments (line 4330)
    # Getting the type of 'D' (line 4330)
    D_587115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4330, 66), 'D', False)
    # Getting the type of 'N' (line 4330)
    N_587116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4330, 69), 'N', False)
    # Processing the call keyword arguments (line 4330)
    kwargs_587117 = {}
    # Getting the type of 'distributions' (line 4330)
    distributions_587112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4330, 43), 'distributions', False)
    # Obtaining the member 'ksone' of a type (line 4330)
    ksone_587113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4330, 43), distributions_587112, 'ksone')
    # Obtaining the member 'sf' of a type (line 4330)
    sf_587114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4330, 43), ksone_587113, 'sf')
    # Calling sf(args, kwargs) (line 4330)
    sf_call_result_587118 = invoke(stypy.reporting.localization.Localization(__file__, 4330, 43), sf_587114, *[D_587115, N_587116], **kwargs_587117)
    
    # Applying the binary operator '*' (line 4330)
    result_mul_587119 = python_operator(stypy.reporting.localization.Localization(__file__, 4330, 39), '*', int_587111, sf_call_result_587118)
    
    # Processing the call keyword arguments (line 4330)
    kwargs_587120 = {}
    # Getting the type of 'KstestResult' (line 4330)
    KstestResult_587109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4330, 23), 'KstestResult', False)
    # Calling KstestResult(args, kwargs) (line 4330)
    KstestResult_call_result_587121 = invoke(stypy.reporting.localization.Localization(__file__, 4330, 23), KstestResult_587109, *[D_587110, result_mul_587119], **kwargs_587120)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4330, 16), 'stypy_return_type', KstestResult_call_result_587121)
    # SSA join for if statement (line 4327)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4325)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4321)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'kstest(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kstest' in the type store
    # Getting the type of 'stypy_return_type' (line 4184)
    stypy_return_type_587122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4184, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_587122)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kstest'
    return stypy_return_type_587122

# Assigning a type to the variable 'kstest' (line 4184)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4184, 0), 'kstest', kstest)

# Assigning a Dict to a Name (line 4334):

# Assigning a Dict to a Name (line 4334):

# Obtaining an instance of the builtin type 'dict' (line 4334)
dict_587123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4334, 26), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 4334)
# Adding element type (key, value) (line 4334)
str_587124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4335, 4), 'str', 'pearson')
int_587125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4335, 15), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4334, 26), dict_587123, (str_587124, int_587125))
# Adding element type (key, value) (line 4334)
str_587126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4336, 4), 'str', 'log-likelihood')
int_587127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4336, 22), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4334, 26), dict_587123, (str_587126, int_587127))
# Adding element type (key, value) (line 4334)
str_587128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4337, 4), 'str', 'freeman-tukey')
float_587129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4337, 21), 'float')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4334, 26), dict_587123, (str_587128, float_587129))
# Adding element type (key, value) (line 4334)
str_587130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4338, 4), 'str', 'mod-log-likelihood')
int_587131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4338, 26), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4334, 26), dict_587123, (str_587130, int_587131))
# Adding element type (key, value) (line 4334)
str_587132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4339, 4), 'str', 'neyman')
int_587133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4339, 14), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4334, 26), dict_587123, (str_587132, int_587133))
# Adding element type (key, value) (line 4334)
str_587134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4340, 4), 'str', 'cressie-read')
int_587135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4340, 20), 'int')
int_587136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4340, 22), 'int')
# Applying the binary operator 'div' (line 4340)
result_div_587137 = python_operator(stypy.reporting.localization.Localization(__file__, 4340, 20), 'div', int_587135, int_587136)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4334, 26), dict_587123, (str_587134, result_div_587137))

# Assigning a type to the variable '_power_div_lambda_names' (line 4334)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4334, 0), '_power_div_lambda_names', dict_587123)

@norecursion
def _count(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 4344)
    None_587138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4344, 19), 'None')
    defaults = [None_587138]
    # Create a new context for function '_count'
    module_type_store = module_type_store.open_function_context('_count', 4344, 0, False)
    
    # Passed parameters checking function
    _count.stypy_localization = localization
    _count.stypy_type_of_self = None
    _count.stypy_type_store = module_type_store
    _count.stypy_function_name = '_count'
    _count.stypy_param_names_list = ['a', 'axis']
    _count.stypy_varargs_param_name = None
    _count.stypy_kwargs_param_name = None
    _count.stypy_call_defaults = defaults
    _count.stypy_call_varargs = varargs
    _count.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_count', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_count', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_count(...)' code ##################

    str_587139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4350, (-1)), 'str', '\n    Count the number of non-masked elements of an array.\n\n    This function behaves like np.ma.count(), but is much faster\n    for ndarrays.\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 4351)
    str_587140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4351, 18), 'str', 'count')
    # Getting the type of 'a' (line 4351)
    a_587141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4351, 15), 'a')
    
    (may_be_587142, more_types_in_union_587143) = may_provide_member(str_587140, a_587141)

    if may_be_587142:

        if more_types_in_union_587143:
            # Runtime conditional SSA (line 4351)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'a' (line 4351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4351, 4), 'a', remove_not_member_provider_from_union(a_587141, 'count'))
        
        # Assigning a Call to a Name (line 4352):
        
        # Assigning a Call to a Name (line 4352):
        
        # Call to count(...): (line 4352)
        # Processing the call keyword arguments (line 4352)
        # Getting the type of 'axis' (line 4352)
        axis_587146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4352, 27), 'axis', False)
        keyword_587147 = axis_587146
        kwargs_587148 = {'axis': keyword_587147}
        # Getting the type of 'a' (line 4352)
        a_587144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4352, 14), 'a', False)
        # Obtaining the member 'count' of a type (line 4352)
        count_587145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4352, 14), a_587144, 'count')
        # Calling count(args, kwargs) (line 4352)
        count_call_result_587149 = invoke(stypy.reporting.localization.Localization(__file__, 4352, 14), count_587145, *[], **kwargs_587148)
        
        # Assigning a type to the variable 'num' (line 4352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4352, 8), 'num', count_call_result_587149)
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 4353)
        # Processing the call arguments (line 4353)
        # Getting the type of 'num' (line 4353)
        num_587151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4353, 22), 'num', False)
        # Getting the type of 'np' (line 4353)
        np_587152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4353, 27), 'np', False)
        # Obtaining the member 'ndarray' of a type (line 4353)
        ndarray_587153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4353, 27), np_587152, 'ndarray')
        # Processing the call keyword arguments (line 4353)
        kwargs_587154 = {}
        # Getting the type of 'isinstance' (line 4353)
        isinstance_587150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4353, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 4353)
        isinstance_call_result_587155 = invoke(stypy.reporting.localization.Localization(__file__, 4353, 11), isinstance_587150, *[num_587151, ndarray_587153], **kwargs_587154)
        
        
        # Getting the type of 'num' (line 4353)
        num_587156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4353, 43), 'num')
        # Obtaining the member 'ndim' of a type (line 4353)
        ndim_587157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4353, 43), num_587156, 'ndim')
        int_587158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4353, 55), 'int')
        # Applying the binary operator '==' (line 4353)
        result_eq_587159 = python_operator(stypy.reporting.localization.Localization(__file__, 4353, 43), '==', ndim_587157, int_587158)
        
        # Applying the binary operator 'and' (line 4353)
        result_and_keyword_587160 = python_operator(stypy.reporting.localization.Localization(__file__, 4353, 11), 'and', isinstance_call_result_587155, result_eq_587159)
        
        # Testing the type of an if condition (line 4353)
        if_condition_587161 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4353, 8), result_and_keyword_587160)
        # Assigning a type to the variable 'if_condition_587161' (line 4353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4353, 8), 'if_condition_587161', if_condition_587161)
        # SSA begins for if statement (line 4353)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 4356):
        
        # Assigning a Call to a Name (line 4356):
        
        # Call to int(...): (line 4356)
        # Processing the call arguments (line 4356)
        # Getting the type of 'num' (line 4356)
        num_587163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4356, 22), 'num', False)
        # Processing the call keyword arguments (line 4356)
        kwargs_587164 = {}
        # Getting the type of 'int' (line 4356)
        int_587162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4356, 18), 'int', False)
        # Calling int(args, kwargs) (line 4356)
        int_call_result_587165 = invoke(stypy.reporting.localization.Localization(__file__, 4356, 18), int_587162, *[num_587163], **kwargs_587164)
        
        # Assigning a type to the variable 'num' (line 4356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4356, 12), 'num', int_call_result_587165)
        # SSA join for if statement (line 4353)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_587143:
            # Runtime conditional SSA for else branch (line 4351)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_587142) or more_types_in_union_587143):
        # Assigning a type to the variable 'a' (line 4351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4351, 4), 'a', remove_member_provider_from_union(a_587141, 'count'))
        
        # Type idiom detected: calculating its left and rigth part (line 4358)
        # Getting the type of 'axis' (line 4358)
        axis_587166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4358, 11), 'axis')
        # Getting the type of 'None' (line 4358)
        None_587167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4358, 19), 'None')
        
        (may_be_587168, more_types_in_union_587169) = may_be_none(axis_587166, None_587167)

        if may_be_587168:

            if more_types_in_union_587169:
                # Runtime conditional SSA (line 4358)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 4359):
            
            # Assigning a Attribute to a Name (line 4359):
            # Getting the type of 'a' (line 4359)
            a_587170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4359, 18), 'a')
            # Obtaining the member 'size' of a type (line 4359)
            size_587171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4359, 18), a_587170, 'size')
            # Assigning a type to the variable 'num' (line 4359)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4359, 12), 'num', size_587171)

            if more_types_in_union_587169:
                # Runtime conditional SSA for else branch (line 4358)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_587168) or more_types_in_union_587169):
            
            # Assigning a Subscript to a Name (line 4361):
            
            # Assigning a Subscript to a Name (line 4361):
            
            # Obtaining the type of the subscript
            # Getting the type of 'axis' (line 4361)
            axis_587172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4361, 26), 'axis')
            # Getting the type of 'a' (line 4361)
            a_587173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4361, 18), 'a')
            # Obtaining the member 'shape' of a type (line 4361)
            shape_587174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4361, 18), a_587173, 'shape')
            # Obtaining the member '__getitem__' of a type (line 4361)
            getitem___587175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4361, 18), shape_587174, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 4361)
            subscript_call_result_587176 = invoke(stypy.reporting.localization.Localization(__file__, 4361, 18), getitem___587175, axis_587172)
            
            # Assigning a type to the variable 'num' (line 4361)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4361, 12), 'num', subscript_call_result_587176)

            if (may_be_587168 and more_types_in_union_587169):
                # SSA join for if statement (line 4358)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_587142 and more_types_in_union_587143):
            # SSA join for if statement (line 4351)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'num' (line 4362)
    num_587177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4362, 11), 'num')
    # Assigning a type to the variable 'stypy_return_type' (line 4362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4362, 4), 'stypy_return_type', num_587177)
    
    # ################# End of '_count(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_count' in the type store
    # Getting the type of 'stypy_return_type' (line 4344)
    stypy_return_type_587178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4344, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_587178)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_count'
    return stypy_return_type_587178

# Assigning a type to the variable '_count' (line 4344)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4344, 0), '_count', _count)

# Assigning a Call to a Name (line 4364):

# Assigning a Call to a Name (line 4364):

# Call to namedtuple(...): (line 4364)
# Processing the call arguments (line 4364)
str_587180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4364, 36), 'str', 'Power_divergenceResult')

# Obtaining an instance of the builtin type 'tuple' (line 4365)
tuple_587181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4365, 37), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 4365)
# Adding element type (line 4365)
str_587182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4365, 37), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4365, 37), tuple_587181, str_587182)
# Adding element type (line 4365)
str_587183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4365, 50), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4365, 37), tuple_587181, str_587183)

# Processing the call keyword arguments (line 4364)
kwargs_587184 = {}
# Getting the type of 'namedtuple' (line 4364)
namedtuple_587179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4364, 25), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 4364)
namedtuple_call_result_587185 = invoke(stypy.reporting.localization.Localization(__file__, 4364, 25), namedtuple_587179, *[str_587180, tuple_587181], **kwargs_587184)

# Assigning a type to the variable 'Power_divergenceResult' (line 4364)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4364, 0), 'Power_divergenceResult', namedtuple_call_result_587185)

@norecursion
def power_divergence(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 4367)
    None_587186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4367, 34), 'None')
    int_587187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4367, 45), 'int')
    int_587188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4367, 53), 'int')
    # Getting the type of 'None' (line 4367)
    None_587189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4367, 64), 'None')
    defaults = [None_587186, int_587187, int_587188, None_587189]
    # Create a new context for function 'power_divergence'
    module_type_store = module_type_store.open_function_context('power_divergence', 4367, 0, False)
    
    # Passed parameters checking function
    power_divergence.stypy_localization = localization
    power_divergence.stypy_type_of_self = None
    power_divergence.stypy_type_store = module_type_store
    power_divergence.stypy_function_name = 'power_divergence'
    power_divergence.stypy_param_names_list = ['f_obs', 'f_exp', 'ddof', 'axis', 'lambda_']
    power_divergence.stypy_varargs_param_name = None
    power_divergence.stypy_kwargs_param_name = None
    power_divergence.stypy_call_defaults = defaults
    power_divergence.stypy_call_varargs = varargs
    power_divergence.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'power_divergence', ['f_obs', 'f_exp', 'ddof', 'axis', 'lambda_'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'power_divergence', localization, ['f_obs', 'f_exp', 'ddof', 'axis', 'lambda_'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'power_divergence(...)' code ##################

    str_587190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4520, (-1)), 'str', '\n    Cressie-Read power divergence statistic and goodness of fit test.\n\n    This function tests the null hypothesis that the categorical data\n    has the given frequencies, using the Cressie-Read power divergence\n    statistic.\n\n    Parameters\n    ----------\n    f_obs : array_like\n        Observed frequencies in each category.\n    f_exp : array_like, optional\n        Expected frequencies in each category.  By default the categories are\n        assumed to be equally likely.\n    ddof : int, optional\n        "Delta degrees of freedom": adjustment to the degrees of freedom\n        for the p-value.  The p-value is computed using a chi-squared\n        distribution with ``k - 1 - ddof`` degrees of freedom, where `k`\n        is the number of observed frequencies.  The default value of `ddof`\n        is 0.\n    axis : int or None, optional\n        The axis of the broadcast result of `f_obs` and `f_exp` along which to\n        apply the test.  If axis is None, all values in `f_obs` are treated\n        as a single data set.  Default is 0.\n    lambda_ : float or str, optional\n        `lambda_` gives the power in the Cressie-Read power divergence\n        statistic.  The default is 1.  For convenience, `lambda_` may be\n        assigned one of the following strings, in which case the\n        corresponding numerical value is used::\n\n            String              Value   Description\n            "pearson"             1     Pearson\'s chi-squared statistic.\n                                        In this case, the function is\n                                        equivalent to `stats.chisquare`.\n            "log-likelihood"      0     Log-likelihood ratio. Also known as\n                                        the G-test [3]_.\n            "freeman-tukey"      -1/2   Freeman-Tukey statistic.\n            "mod-log-likelihood" -1     Modified log-likelihood ratio.\n            "neyman"             -2     Neyman\'s statistic.\n            "cressie-read"        2/3   The power recommended in [5]_.\n\n    Returns\n    -------\n    statistic : float or ndarray\n        The Cressie-Read power divergence test statistic.  The value is\n        a float if `axis` is None or if` `f_obs` and `f_exp` are 1-D.\n    pvalue : float or ndarray\n        The p-value of the test.  The value is a float if `ddof` and the\n        return value `stat` are scalars.\n\n    See Also\n    --------\n    chisquare\n\n    Notes\n    -----\n    This test is invalid when the observed or expected frequencies in each\n    category are too small.  A typical rule is that all of the observed\n    and expected frequencies should be at least 5.\n\n    When `lambda_` is less than zero, the formula for the statistic involves\n    dividing by `f_obs`, so a warning or error may be generated if any value\n    in `f_obs` is 0.\n\n    Similarly, a warning or error may be generated if any value in `f_exp` is\n    zero when `lambda_` >= 0.\n\n    The default degrees of freedom, k-1, are for the case when no parameters\n    of the distribution are estimated. If p parameters are estimated by\n    efficient maximum likelihood then the correct degrees of freedom are\n    k-1-p. If the parameters are estimated in a different way, then the\n    dof can be between k-1-p and k-1. However, it is also possible that\n    the asymptotic distribution is not a chisquare, in which case this\n    test is not appropriate.\n\n    This function handles masked arrays.  If an element of `f_obs` or `f_exp`\n    is masked, then data at that position is ignored, and does not count\n    towards the size of the data set.\n\n    .. versionadded:: 0.13.0\n\n    References\n    ----------\n    .. [1] Lowry, Richard.  "Concepts and Applications of Inferential\n           Statistics". Chapter 8. http://faculty.vassar.edu/lowry/ch8pt1.html\n    .. [2] "Chi-squared test", http://en.wikipedia.org/wiki/Chi-squared_test\n    .. [3] "G-test", http://en.wikipedia.org/wiki/G-test\n    .. [4] Sokal, R. R. and Rohlf, F. J. "Biometry: the principles and\n           practice of statistics in biological research", New York: Freeman\n           (1981)\n    .. [5] Cressie, N. and Read, T. R. C., "Multinomial Goodness-of-Fit\n           Tests", J. Royal Stat. Soc. Series B, Vol. 46, No. 3 (1984),\n           pp. 440-464.\n\n    Examples\n    --------\n\n    (See `chisquare` for more examples.)\n\n    When just `f_obs` is given, it is assumed that the expected frequencies\n    are uniform and given by the mean of the observed frequencies.  Here we\n    perform a G-test (i.e. use the log-likelihood ratio statistic):\n\n    >>> from scipy.stats import power_divergence\n    >>> power_divergence([16, 18, 16, 14, 12, 12], lambda_=\'log-likelihood\')\n    (2.006573162632538, 0.84823476779463769)\n\n    The expected frequencies can be given with the `f_exp` argument:\n\n    >>> power_divergence([16, 18, 16, 14, 12, 12],\n    ...                  f_exp=[16, 16, 16, 16, 16, 8],\n    ...                  lambda_=\'log-likelihood\')\n    (3.3281031458963746, 0.6495419288047497)\n\n    When `f_obs` is 2-D, by default the test is applied to each column.\n\n    >>> obs = np.array([[16, 18, 16, 14, 12, 12], [32, 24, 16, 28, 20, 24]]).T\n    >>> obs.shape\n    (6, 2)\n    >>> power_divergence(obs, lambda_="log-likelihood")\n    (array([ 2.00657316,  6.77634498]), array([ 0.84823477,  0.23781225]))\n\n    By setting ``axis=None``, the test is applied to all data in the array,\n    which is equivalent to applying the test to the flattened array.\n\n    >>> power_divergence(obs, axis=None)\n    (23.31034482758621, 0.015975692534127565)\n    >>> power_divergence(obs.ravel())\n    (23.31034482758621, 0.015975692534127565)\n\n    `ddof` is the change to make to the default degrees of freedom.\n\n    >>> power_divergence([16, 18, 16, 14, 12, 12], ddof=1)\n    (2.0, 0.73575888234288467)\n\n    The calculation of the p-values is done by broadcasting the\n    test statistic with `ddof`.\n\n    >>> power_divergence([16, 18, 16, 14, 12, 12], ddof=[0,1,2])\n    (2.0, array([ 0.84914504,  0.73575888,  0.5724067 ]))\n\n    `f_obs` and `f_exp` are also broadcast.  In the following, `f_obs` has\n    shape (6,) and `f_exp` has shape (2, 6), so the result of broadcasting\n    `f_obs` and `f_exp` has shape (2, 6).  To compute the desired chi-squared\n    statistics, we must use ``axis=1``:\n\n    >>> power_divergence([16, 18, 16, 14, 12, 12],\n    ...                  f_exp=[[16, 16, 16, 16, 16, 8],\n    ...                         [8, 20, 20, 16, 12, 12]],\n    ...                  axis=1)\n    (array([ 3.5 ,  9.25]), array([ 0.62338763,  0.09949846]))\n\n    ')
    
    
    # Call to isinstance(...): (line 4522)
    # Processing the call arguments (line 4522)
    # Getting the type of 'lambda_' (line 4522)
    lambda__587192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4522, 18), 'lambda_', False)
    # Getting the type of 'string_types' (line 4522)
    string_types_587193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4522, 27), 'string_types', False)
    # Processing the call keyword arguments (line 4522)
    kwargs_587194 = {}
    # Getting the type of 'isinstance' (line 4522)
    isinstance_587191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4522, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 4522)
    isinstance_call_result_587195 = invoke(stypy.reporting.localization.Localization(__file__, 4522, 7), isinstance_587191, *[lambda__587192, string_types_587193], **kwargs_587194)
    
    # Testing the type of an if condition (line 4522)
    if_condition_587196 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4522, 4), isinstance_call_result_587195)
    # Assigning a type to the variable 'if_condition_587196' (line 4522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4522, 4), 'if_condition_587196', if_condition_587196)
    # SSA begins for if statement (line 4522)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'lambda_' (line 4523)
    lambda__587197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4523, 11), 'lambda_')
    # Getting the type of '_power_div_lambda_names' (line 4523)
    _power_div_lambda_names_587198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4523, 26), '_power_div_lambda_names')
    # Applying the binary operator 'notin' (line 4523)
    result_contains_587199 = python_operator(stypy.reporting.localization.Localization(__file__, 4523, 11), 'notin', lambda__587197, _power_div_lambda_names_587198)
    
    # Testing the type of an if condition (line 4523)
    if_condition_587200 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4523, 8), result_contains_587199)
    # Assigning a type to the variable 'if_condition_587200' (line 4523)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4523, 8), 'if_condition_587200', if_condition_587200)
    # SSA begins for if statement (line 4523)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 4524):
    
    # Assigning a Subscript to a Name (line 4524):
    
    # Obtaining the type of the subscript
    int_587201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4524, 63), 'int')
    int_587202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4524, 65), 'int')
    slice_587203 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 4524, 20), int_587201, int_587202, None)
    
    # Call to repr(...): (line 4524)
    # Processing the call arguments (line 4524)
    
    # Call to list(...): (line 4524)
    # Processing the call arguments (line 4524)
    
    # Call to keys(...): (line 4524)
    # Processing the call keyword arguments (line 4524)
    kwargs_587208 = {}
    # Getting the type of '_power_div_lambda_names' (line 4524)
    _power_div_lambda_names_587206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4524, 30), '_power_div_lambda_names', False)
    # Obtaining the member 'keys' of a type (line 4524)
    keys_587207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4524, 30), _power_div_lambda_names_587206, 'keys')
    # Calling keys(args, kwargs) (line 4524)
    keys_call_result_587209 = invoke(stypy.reporting.localization.Localization(__file__, 4524, 30), keys_587207, *[], **kwargs_587208)
    
    # Processing the call keyword arguments (line 4524)
    kwargs_587210 = {}
    # Getting the type of 'list' (line 4524)
    list_587205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4524, 25), 'list', False)
    # Calling list(args, kwargs) (line 4524)
    list_call_result_587211 = invoke(stypy.reporting.localization.Localization(__file__, 4524, 25), list_587205, *[keys_call_result_587209], **kwargs_587210)
    
    # Processing the call keyword arguments (line 4524)
    kwargs_587212 = {}
    # Getting the type of 'repr' (line 4524)
    repr_587204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4524, 20), 'repr', False)
    # Calling repr(args, kwargs) (line 4524)
    repr_call_result_587213 = invoke(stypy.reporting.localization.Localization(__file__, 4524, 20), repr_587204, *[list_call_result_587211], **kwargs_587212)
    
    # Obtaining the member '__getitem__' of a type (line 4524)
    getitem___587214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4524, 20), repr_call_result_587213, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4524)
    subscript_call_result_587215 = invoke(stypy.reporting.localization.Localization(__file__, 4524, 20), getitem___587214, slice_587203)
    
    # Assigning a type to the variable 'names' (line 4524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4524, 12), 'names', subscript_call_result_587215)
    
    # Call to ValueError(...): (line 4525)
    # Processing the call arguments (line 4525)
    
    # Call to format(...): (line 4525)
    # Processing the call arguments (line 4525)
    # Getting the type of 'lambda_' (line 4526)
    lambda__587219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4526, 46), 'lambda_', False)
    # Getting the type of 'names' (line 4526)
    names_587220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4526, 55), 'names', False)
    # Processing the call keyword arguments (line 4525)
    kwargs_587221 = {}
    str_587217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4525, 29), 'str', 'invalid string for lambda_: {0!r}.  Valid strings are {1}')
    # Obtaining the member 'format' of a type (line 4525)
    format_587218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4525, 29), str_587217, 'format')
    # Calling format(args, kwargs) (line 4525)
    format_call_result_587222 = invoke(stypy.reporting.localization.Localization(__file__, 4525, 29), format_587218, *[lambda__587219, names_587220], **kwargs_587221)
    
    # Processing the call keyword arguments (line 4525)
    kwargs_587223 = {}
    # Getting the type of 'ValueError' (line 4525)
    ValueError_587216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4525, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 4525)
    ValueError_call_result_587224 = invoke(stypy.reporting.localization.Localization(__file__, 4525, 18), ValueError_587216, *[format_call_result_587222], **kwargs_587223)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4525, 12), ValueError_call_result_587224, 'raise parameter', BaseException)
    # SSA join for if statement (line 4523)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 4527):
    
    # Assigning a Subscript to a Name (line 4527):
    
    # Obtaining the type of the subscript
    # Getting the type of 'lambda_' (line 4527)
    lambda__587225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4527, 42), 'lambda_')
    # Getting the type of '_power_div_lambda_names' (line 4527)
    _power_div_lambda_names_587226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4527, 18), '_power_div_lambda_names')
    # Obtaining the member '__getitem__' of a type (line 4527)
    getitem___587227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4527, 18), _power_div_lambda_names_587226, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4527)
    subscript_call_result_587228 = invoke(stypy.reporting.localization.Localization(__file__, 4527, 18), getitem___587227, lambda__587225)
    
    # Assigning a type to the variable 'lambda_' (line 4527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4527, 8), 'lambda_', subscript_call_result_587228)
    # SSA branch for the else part of an if statement (line 4522)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 4528)
    # Getting the type of 'lambda_' (line 4528)
    lambda__587229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4528, 9), 'lambda_')
    # Getting the type of 'None' (line 4528)
    None_587230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4528, 20), 'None')
    
    (may_be_587231, more_types_in_union_587232) = may_be_none(lambda__587229, None_587230)

    if may_be_587231:

        if more_types_in_union_587232:
            # Runtime conditional SSA (line 4528)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 4529):
        
        # Assigning a Num to a Name (line 4529):
        int_587233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4529, 18), 'int')
        # Assigning a type to the variable 'lambda_' (line 4529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4529, 8), 'lambda_', int_587233)

        if more_types_in_union_587232:
            # SSA join for if statement (line 4528)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 4522)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 4531):
    
    # Assigning a Call to a Name (line 4531):
    
    # Call to asanyarray(...): (line 4531)
    # Processing the call arguments (line 4531)
    # Getting the type of 'f_obs' (line 4531)
    f_obs_587236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4531, 26), 'f_obs', False)
    # Processing the call keyword arguments (line 4531)
    kwargs_587237 = {}
    # Getting the type of 'np' (line 4531)
    np_587234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4531, 12), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 4531)
    asanyarray_587235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4531, 12), np_587234, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 4531)
    asanyarray_call_result_587238 = invoke(stypy.reporting.localization.Localization(__file__, 4531, 12), asanyarray_587235, *[f_obs_587236], **kwargs_587237)
    
    # Assigning a type to the variable 'f_obs' (line 4531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4531, 4), 'f_obs', asanyarray_call_result_587238)
    
    # Type idiom detected: calculating its left and rigth part (line 4533)
    # Getting the type of 'f_exp' (line 4533)
    f_exp_587239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4533, 4), 'f_exp')
    # Getting the type of 'None' (line 4533)
    None_587240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4533, 20), 'None')
    
    (may_be_587241, more_types_in_union_587242) = may_not_be_none(f_exp_587239, None_587240)

    if may_be_587241:

        if more_types_in_union_587242:
            # Runtime conditional SSA (line 4533)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 4534):
        
        # Assigning a Call to a Name (line 4534):
        
        # Call to atleast_1d(...): (line 4534)
        # Processing the call arguments (line 4534)
        
        # Call to asanyarray(...): (line 4534)
        # Processing the call arguments (line 4534)
        # Getting the type of 'f_exp' (line 4534)
        f_exp_587247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4534, 44), 'f_exp', False)
        # Processing the call keyword arguments (line 4534)
        kwargs_587248 = {}
        # Getting the type of 'np' (line 4534)
        np_587245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4534, 30), 'np', False)
        # Obtaining the member 'asanyarray' of a type (line 4534)
        asanyarray_587246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4534, 30), np_587245, 'asanyarray')
        # Calling asanyarray(args, kwargs) (line 4534)
        asanyarray_call_result_587249 = invoke(stypy.reporting.localization.Localization(__file__, 4534, 30), asanyarray_587246, *[f_exp_587247], **kwargs_587248)
        
        # Processing the call keyword arguments (line 4534)
        kwargs_587250 = {}
        # Getting the type of 'np' (line 4534)
        np_587243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4534, 16), 'np', False)
        # Obtaining the member 'atleast_1d' of a type (line 4534)
        atleast_1d_587244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4534, 16), np_587243, 'atleast_1d')
        # Calling atleast_1d(args, kwargs) (line 4534)
        atleast_1d_call_result_587251 = invoke(stypy.reporting.localization.Localization(__file__, 4534, 16), atleast_1d_587244, *[asanyarray_call_result_587249], **kwargs_587250)
        
        # Assigning a type to the variable 'f_exp' (line 4534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4534, 8), 'f_exp', atleast_1d_call_result_587251)

        if more_types_in_union_587242:
            # Runtime conditional SSA for else branch (line 4533)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_587241) or more_types_in_union_587242):
        
        # Call to errstate(...): (line 4542)
        # Processing the call keyword arguments (line 4542)
        str_587254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4542, 33), 'str', 'ignore')
        keyword_587255 = str_587254
        kwargs_587256 = {'invalid': keyword_587255}
        # Getting the type of 'np' (line 4542)
        np_587252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4542, 13), 'np', False)
        # Obtaining the member 'errstate' of a type (line 4542)
        errstate_587253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4542, 13), np_587252, 'errstate')
        # Calling errstate(args, kwargs) (line 4542)
        errstate_call_result_587257 = invoke(stypy.reporting.localization.Localization(__file__, 4542, 13), errstate_587253, *[], **kwargs_587256)
        
        with_587258 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 4542, 13), errstate_call_result_587257, 'with parameter', '__enter__', '__exit__')

        if with_587258:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 4542)
            enter___587259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4542, 13), errstate_call_result_587257, '__enter__')
            with_enter_587260 = invoke(stypy.reporting.localization.Localization(__file__, 4542, 13), enter___587259)
            
            # Assigning a Call to a Name (line 4543):
            
            # Assigning a Call to a Name (line 4543):
            
            # Call to atleast_1d(...): (line 4543)
            # Processing the call arguments (line 4543)
            
            # Call to mean(...): (line 4543)
            # Processing the call keyword arguments (line 4543)
            # Getting the type of 'axis' (line 4543)
            axis_587265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4543, 50), 'axis', False)
            keyword_587266 = axis_587265
            kwargs_587267 = {'axis': keyword_587266}
            # Getting the type of 'f_obs' (line 4543)
            f_obs_587263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4543, 34), 'f_obs', False)
            # Obtaining the member 'mean' of a type (line 4543)
            mean_587264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4543, 34), f_obs_587263, 'mean')
            # Calling mean(args, kwargs) (line 4543)
            mean_call_result_587268 = invoke(stypy.reporting.localization.Localization(__file__, 4543, 34), mean_587264, *[], **kwargs_587267)
            
            # Processing the call keyword arguments (line 4543)
            kwargs_587269 = {}
            # Getting the type of 'np' (line 4543)
            np_587261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4543, 20), 'np', False)
            # Obtaining the member 'atleast_1d' of a type (line 4543)
            atleast_1d_587262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4543, 20), np_587261, 'atleast_1d')
            # Calling atleast_1d(args, kwargs) (line 4543)
            atleast_1d_call_result_587270 = invoke(stypy.reporting.localization.Localization(__file__, 4543, 20), atleast_1d_587262, *[mean_call_result_587268], **kwargs_587269)
            
            # Assigning a type to the variable 'f_exp' (line 4543)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4543, 12), 'f_exp', atleast_1d_call_result_587270)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 4542)
            exit___587271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4542, 13), errstate_call_result_587257, '__exit__')
            with_exit_587272 = invoke(stypy.reporting.localization.Localization(__file__, 4542, 13), exit___587271, None, None, None)

        
        # Type idiom detected: calculating its left and rigth part (line 4544)
        # Getting the type of 'axis' (line 4544)
        axis_587273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4544, 8), 'axis')
        # Getting the type of 'None' (line 4544)
        None_587274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4544, 23), 'None')
        
        (may_be_587275, more_types_in_union_587276) = may_not_be_none(axis_587273, None_587274)

        if may_be_587275:

            if more_types_in_union_587276:
                # Runtime conditional SSA (line 4544)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 4545):
            
            # Assigning a Call to a Name (line 4545):
            
            # Call to list(...): (line 4545)
            # Processing the call arguments (line 4545)
            # Getting the type of 'f_obs' (line 4545)
            f_obs_587278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4545, 33), 'f_obs', False)
            # Obtaining the member 'shape' of a type (line 4545)
            shape_587279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4545, 33), f_obs_587278, 'shape')
            # Processing the call keyword arguments (line 4545)
            kwargs_587280 = {}
            # Getting the type of 'list' (line 4545)
            list_587277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4545, 28), 'list', False)
            # Calling list(args, kwargs) (line 4545)
            list_call_result_587281 = invoke(stypy.reporting.localization.Localization(__file__, 4545, 28), list_587277, *[shape_587279], **kwargs_587280)
            
            # Assigning a type to the variable 'reduced_shape' (line 4545)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4545, 12), 'reduced_shape', list_call_result_587281)
            
            # Assigning a Num to a Subscript (line 4546):
            
            # Assigning a Num to a Subscript (line 4546):
            int_587282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4546, 34), 'int')
            # Getting the type of 'reduced_shape' (line 4546)
            reduced_shape_587283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4546, 12), 'reduced_shape')
            # Getting the type of 'axis' (line 4546)
            axis_587284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4546, 26), 'axis')
            # Storing an element on a container (line 4546)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4546, 12), reduced_shape_587283, (axis_587284, int_587282))
            
            # Assigning a Name to a Attribute (line 4547):
            
            # Assigning a Name to a Attribute (line 4547):
            # Getting the type of 'reduced_shape' (line 4547)
            reduced_shape_587285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4547, 26), 'reduced_shape')
            # Getting the type of 'f_exp' (line 4547)
            f_exp_587286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4547, 12), 'f_exp')
            # Setting the type of the member 'shape' of a type (line 4547)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4547, 12), f_exp_587286, 'shape', reduced_shape_587285)

            if more_types_in_union_587276:
                # SSA join for if statement (line 4544)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_587241 and more_types_in_union_587242):
            # SSA join for if statement (line 4533)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'lambda_' (line 4552)
    lambda__587287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4552, 7), 'lambda_')
    int_587288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4552, 18), 'int')
    # Applying the binary operator '==' (line 4552)
    result_eq_587289 = python_operator(stypy.reporting.localization.Localization(__file__, 4552, 7), '==', lambda__587287, int_587288)
    
    # Testing the type of an if condition (line 4552)
    if_condition_587290 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4552, 4), result_eq_587289)
    # Assigning a type to the variable 'if_condition_587290' (line 4552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4552, 4), 'if_condition_587290', if_condition_587290)
    # SSA begins for if statement (line 4552)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 4554):
    
    # Assigning a BinOp to a Name (line 4554):
    # Getting the type of 'f_obs' (line 4554)
    f_obs_587291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4554, 17), 'f_obs')
    # Getting the type of 'f_exp' (line 4554)
    f_exp_587292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4554, 25), 'f_exp')
    # Applying the binary operator '-' (line 4554)
    result_sub_587293 = python_operator(stypy.reporting.localization.Localization(__file__, 4554, 17), '-', f_obs_587291, f_exp_587292)
    
    int_587294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4554, 33), 'int')
    # Applying the binary operator '**' (line 4554)
    result_pow_587295 = python_operator(stypy.reporting.localization.Localization(__file__, 4554, 16), '**', result_sub_587293, int_587294)
    
    # Getting the type of 'f_exp' (line 4554)
    f_exp_587296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4554, 37), 'f_exp')
    # Applying the binary operator 'div' (line 4554)
    result_div_587297 = python_operator(stypy.reporting.localization.Localization(__file__, 4554, 16), 'div', result_pow_587295, f_exp_587296)
    
    # Assigning a type to the variable 'terms' (line 4554)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4554, 8), 'terms', result_div_587297)
    # SSA branch for the else part of an if statement (line 4552)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'lambda_' (line 4555)
    lambda__587298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4555, 9), 'lambda_')
    int_587299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4555, 20), 'int')
    # Applying the binary operator '==' (line 4555)
    result_eq_587300 = python_operator(stypy.reporting.localization.Localization(__file__, 4555, 9), '==', lambda__587298, int_587299)
    
    # Testing the type of an if condition (line 4555)
    if_condition_587301 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4555, 9), result_eq_587300)
    # Assigning a type to the variable 'if_condition_587301' (line 4555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4555, 9), 'if_condition_587301', if_condition_587301)
    # SSA begins for if statement (line 4555)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 4557):
    
    # Assigning a BinOp to a Name (line 4557):
    float_587302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4557, 16), 'float')
    
    # Call to xlogy(...): (line 4557)
    # Processing the call arguments (line 4557)
    # Getting the type of 'f_obs' (line 4557)
    f_obs_587305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4557, 36), 'f_obs', False)
    # Getting the type of 'f_obs' (line 4557)
    f_obs_587306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4557, 43), 'f_obs', False)
    # Getting the type of 'f_exp' (line 4557)
    f_exp_587307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4557, 51), 'f_exp', False)
    # Applying the binary operator 'div' (line 4557)
    result_div_587308 = python_operator(stypy.reporting.localization.Localization(__file__, 4557, 43), 'div', f_obs_587306, f_exp_587307)
    
    # Processing the call keyword arguments (line 4557)
    kwargs_587309 = {}
    # Getting the type of 'special' (line 4557)
    special_587303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4557, 22), 'special', False)
    # Obtaining the member 'xlogy' of a type (line 4557)
    xlogy_587304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4557, 22), special_587303, 'xlogy')
    # Calling xlogy(args, kwargs) (line 4557)
    xlogy_call_result_587310 = invoke(stypy.reporting.localization.Localization(__file__, 4557, 22), xlogy_587304, *[f_obs_587305, result_div_587308], **kwargs_587309)
    
    # Applying the binary operator '*' (line 4557)
    result_mul_587311 = python_operator(stypy.reporting.localization.Localization(__file__, 4557, 16), '*', float_587302, xlogy_call_result_587310)
    
    # Assigning a type to the variable 'terms' (line 4557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4557, 8), 'terms', result_mul_587311)
    # SSA branch for the else part of an if statement (line 4555)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'lambda_' (line 4558)
    lambda__587312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4558, 9), 'lambda_')
    int_587313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4558, 20), 'int')
    # Applying the binary operator '==' (line 4558)
    result_eq_587314 = python_operator(stypy.reporting.localization.Localization(__file__, 4558, 9), '==', lambda__587312, int_587313)
    
    # Testing the type of an if condition (line 4558)
    if_condition_587315 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4558, 9), result_eq_587314)
    # Assigning a type to the variable 'if_condition_587315' (line 4558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4558, 9), 'if_condition_587315', if_condition_587315)
    # SSA begins for if statement (line 4558)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 4560):
    
    # Assigning a BinOp to a Name (line 4560):
    float_587316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4560, 16), 'float')
    
    # Call to xlogy(...): (line 4560)
    # Processing the call arguments (line 4560)
    # Getting the type of 'f_exp' (line 4560)
    f_exp_587319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4560, 36), 'f_exp', False)
    # Getting the type of 'f_exp' (line 4560)
    f_exp_587320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4560, 43), 'f_exp', False)
    # Getting the type of 'f_obs' (line 4560)
    f_obs_587321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4560, 51), 'f_obs', False)
    # Applying the binary operator 'div' (line 4560)
    result_div_587322 = python_operator(stypy.reporting.localization.Localization(__file__, 4560, 43), 'div', f_exp_587320, f_obs_587321)
    
    # Processing the call keyword arguments (line 4560)
    kwargs_587323 = {}
    # Getting the type of 'special' (line 4560)
    special_587317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4560, 22), 'special', False)
    # Obtaining the member 'xlogy' of a type (line 4560)
    xlogy_587318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4560, 22), special_587317, 'xlogy')
    # Calling xlogy(args, kwargs) (line 4560)
    xlogy_call_result_587324 = invoke(stypy.reporting.localization.Localization(__file__, 4560, 22), xlogy_587318, *[f_exp_587319, result_div_587322], **kwargs_587323)
    
    # Applying the binary operator '*' (line 4560)
    result_mul_587325 = python_operator(stypy.reporting.localization.Localization(__file__, 4560, 16), '*', float_587316, xlogy_call_result_587324)
    
    # Assigning a type to the variable 'terms' (line 4560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4560, 8), 'terms', result_mul_587325)
    # SSA branch for the else part of an if statement (line 4558)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 4563):
    
    # Assigning a BinOp to a Name (line 4563):
    # Getting the type of 'f_obs' (line 4563)
    f_obs_587326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4563, 16), 'f_obs')
    # Getting the type of 'f_obs' (line 4563)
    f_obs_587327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4563, 26), 'f_obs')
    # Getting the type of 'f_exp' (line 4563)
    f_exp_587328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4563, 34), 'f_exp')
    # Applying the binary operator 'div' (line 4563)
    result_div_587329 = python_operator(stypy.reporting.localization.Localization(__file__, 4563, 26), 'div', f_obs_587327, f_exp_587328)
    
    # Getting the type of 'lambda_' (line 4563)
    lambda__587330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4563, 42), 'lambda_')
    # Applying the binary operator '**' (line 4563)
    result_pow_587331 = python_operator(stypy.reporting.localization.Localization(__file__, 4563, 25), '**', result_div_587329, lambda__587330)
    
    int_587332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4563, 52), 'int')
    # Applying the binary operator '-' (line 4563)
    result_sub_587333 = python_operator(stypy.reporting.localization.Localization(__file__, 4563, 25), '-', result_pow_587331, int_587332)
    
    # Applying the binary operator '*' (line 4563)
    result_mul_587334 = python_operator(stypy.reporting.localization.Localization(__file__, 4563, 16), '*', f_obs_587326, result_sub_587333)
    
    # Assigning a type to the variable 'terms' (line 4563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4563, 8), 'terms', result_mul_587334)
    
    # Getting the type of 'terms' (line 4564)
    terms_587335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4564, 8), 'terms')
    float_587336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4564, 17), 'float')
    # Getting the type of 'lambda_' (line 4564)
    lambda__587337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4564, 23), 'lambda_')
    # Applying the binary operator '*' (line 4564)
    result_mul_587338 = python_operator(stypy.reporting.localization.Localization(__file__, 4564, 17), '*', float_587336, lambda__587337)
    
    # Getting the type of 'lambda_' (line 4564)
    lambda__587339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4564, 34), 'lambda_')
    int_587340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4564, 44), 'int')
    # Applying the binary operator '+' (line 4564)
    result_add_587341 = python_operator(stypy.reporting.localization.Localization(__file__, 4564, 34), '+', lambda__587339, int_587340)
    
    # Applying the binary operator '*' (line 4564)
    result_mul_587342 = python_operator(stypy.reporting.localization.Localization(__file__, 4564, 31), '*', result_mul_587338, result_add_587341)
    
    # Applying the binary operator 'div=' (line 4564)
    result_div_587343 = python_operator(stypy.reporting.localization.Localization(__file__, 4564, 8), 'div=', terms_587335, result_mul_587342)
    # Assigning a type to the variable 'terms' (line 4564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4564, 8), 'terms', result_div_587343)
    
    # SSA join for if statement (line 4558)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4555)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4552)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 4566):
    
    # Assigning a Call to a Name (line 4566):
    
    # Call to sum(...): (line 4566)
    # Processing the call keyword arguments (line 4566)
    # Getting the type of 'axis' (line 4566)
    axis_587346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4566, 26), 'axis', False)
    keyword_587347 = axis_587346
    kwargs_587348 = {'axis': keyword_587347}
    # Getting the type of 'terms' (line 4566)
    terms_587344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4566, 11), 'terms', False)
    # Obtaining the member 'sum' of a type (line 4566)
    sum_587345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4566, 11), terms_587344, 'sum')
    # Calling sum(args, kwargs) (line 4566)
    sum_call_result_587349 = invoke(stypy.reporting.localization.Localization(__file__, 4566, 11), sum_587345, *[], **kwargs_587348)
    
    # Assigning a type to the variable 'stat' (line 4566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4566, 4), 'stat', sum_call_result_587349)
    
    # Assigning a Call to a Name (line 4568):
    
    # Assigning a Call to a Name (line 4568):
    
    # Call to _count(...): (line 4568)
    # Processing the call arguments (line 4568)
    # Getting the type of 'terms' (line 4568)
    terms_587351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4568, 21), 'terms', False)
    # Processing the call keyword arguments (line 4568)
    # Getting the type of 'axis' (line 4568)
    axis_587352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4568, 33), 'axis', False)
    keyword_587353 = axis_587352
    kwargs_587354 = {'axis': keyword_587353}
    # Getting the type of '_count' (line 4568)
    _count_587350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4568, 14), '_count', False)
    # Calling _count(args, kwargs) (line 4568)
    _count_call_result_587355 = invoke(stypy.reporting.localization.Localization(__file__, 4568, 14), _count_587350, *[terms_587351], **kwargs_587354)
    
    # Assigning a type to the variable 'num_obs' (line 4568)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4568, 4), 'num_obs', _count_call_result_587355)
    
    # Assigning a Call to a Name (line 4569):
    
    # Assigning a Call to a Name (line 4569):
    
    # Call to asarray(...): (line 4569)
    # Processing the call arguments (line 4569)
    # Getting the type of 'ddof' (line 4569)
    ddof_587357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4569, 19), 'ddof', False)
    # Processing the call keyword arguments (line 4569)
    kwargs_587358 = {}
    # Getting the type of 'asarray' (line 4569)
    asarray_587356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4569, 11), 'asarray', False)
    # Calling asarray(args, kwargs) (line 4569)
    asarray_call_result_587359 = invoke(stypy.reporting.localization.Localization(__file__, 4569, 11), asarray_587356, *[ddof_587357], **kwargs_587358)
    
    # Assigning a type to the variable 'ddof' (line 4569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4569, 4), 'ddof', asarray_call_result_587359)
    
    # Assigning a Call to a Name (line 4570):
    
    # Assigning a Call to a Name (line 4570):
    
    # Call to sf(...): (line 4570)
    # Processing the call arguments (line 4570)
    # Getting the type of 'stat' (line 4570)
    stat_587363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4570, 30), 'stat', False)
    # Getting the type of 'num_obs' (line 4570)
    num_obs_587364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4570, 36), 'num_obs', False)
    int_587365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4570, 46), 'int')
    # Applying the binary operator '-' (line 4570)
    result_sub_587366 = python_operator(stypy.reporting.localization.Localization(__file__, 4570, 36), '-', num_obs_587364, int_587365)
    
    # Getting the type of 'ddof' (line 4570)
    ddof_587367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4570, 50), 'ddof', False)
    # Applying the binary operator '-' (line 4570)
    result_sub_587368 = python_operator(stypy.reporting.localization.Localization(__file__, 4570, 48), '-', result_sub_587366, ddof_587367)
    
    # Processing the call keyword arguments (line 4570)
    kwargs_587369 = {}
    # Getting the type of 'distributions' (line 4570)
    distributions_587360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4570, 8), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 4570)
    chi2_587361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4570, 8), distributions_587360, 'chi2')
    # Obtaining the member 'sf' of a type (line 4570)
    sf_587362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4570, 8), chi2_587361, 'sf')
    # Calling sf(args, kwargs) (line 4570)
    sf_call_result_587370 = invoke(stypy.reporting.localization.Localization(__file__, 4570, 8), sf_587362, *[stat_587363, result_sub_587368], **kwargs_587369)
    
    # Assigning a type to the variable 'p' (line 4570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4570, 4), 'p', sf_call_result_587370)
    
    # Call to Power_divergenceResult(...): (line 4572)
    # Processing the call arguments (line 4572)
    # Getting the type of 'stat' (line 4572)
    stat_587372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4572, 34), 'stat', False)
    # Getting the type of 'p' (line 4572)
    p_587373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4572, 40), 'p', False)
    # Processing the call keyword arguments (line 4572)
    kwargs_587374 = {}
    # Getting the type of 'Power_divergenceResult' (line 4572)
    Power_divergenceResult_587371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4572, 11), 'Power_divergenceResult', False)
    # Calling Power_divergenceResult(args, kwargs) (line 4572)
    Power_divergenceResult_call_result_587375 = invoke(stypy.reporting.localization.Localization(__file__, 4572, 11), Power_divergenceResult_587371, *[stat_587372, p_587373], **kwargs_587374)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4572)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4572, 4), 'stypy_return_type', Power_divergenceResult_call_result_587375)
    
    # ################# End of 'power_divergence(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'power_divergence' in the type store
    # Getting the type of 'stypy_return_type' (line 4367)
    stypy_return_type_587376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4367, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_587376)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'power_divergence'
    return stypy_return_type_587376

# Assigning a type to the variable 'power_divergence' (line 4367)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4367, 0), 'power_divergence', power_divergence)

@norecursion
def chisquare(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 4575)
    None_587377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4575, 27), 'None')
    int_587378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4575, 38), 'int')
    int_587379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4575, 46), 'int')
    defaults = [None_587377, int_587378, int_587379]
    # Create a new context for function 'chisquare'
    module_type_store = module_type_store.open_function_context('chisquare', 4575, 0, False)
    
    # Passed parameters checking function
    chisquare.stypy_localization = localization
    chisquare.stypy_type_of_self = None
    chisquare.stypy_type_store = module_type_store
    chisquare.stypy_function_name = 'chisquare'
    chisquare.stypy_param_names_list = ['f_obs', 'f_exp', 'ddof', 'axis']
    chisquare.stypy_varargs_param_name = None
    chisquare.stypy_kwargs_param_name = None
    chisquare.stypy_call_defaults = defaults
    chisquare.stypy_call_varargs = varargs
    chisquare.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'chisquare', ['f_obs', 'f_exp', 'ddof', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'chisquare', localization, ['f_obs', 'f_exp', 'ddof', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'chisquare(...)' code ##################

    str_587380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4685, (-1)), 'str', '\n    Calculate a one-way chi square test.\n\n    The chi square test tests the null hypothesis that the categorical data\n    has the given frequencies.\n\n    Parameters\n    ----------\n    f_obs : array_like\n        Observed frequencies in each category.\n    f_exp : array_like, optional\n        Expected frequencies in each category.  By default the categories are\n        assumed to be equally likely.\n    ddof : int, optional\n        "Delta degrees of freedom": adjustment to the degrees of freedom\n        for the p-value.  The p-value is computed using a chi-squared\n        distribution with ``k - 1 - ddof`` degrees of freedom, where `k`\n        is the number of observed frequencies.  The default value of `ddof`\n        is 0.\n    axis : int or None, optional\n        The axis of the broadcast result of `f_obs` and `f_exp` along which to\n        apply the test.  If axis is None, all values in `f_obs` are treated\n        as a single data set.  Default is 0.\n\n    Returns\n    -------\n    chisq : float or ndarray\n        The chi-squared test statistic.  The value is a float if `axis` is\n        None or `f_obs` and `f_exp` are 1-D.\n    p : float or ndarray\n        The p-value of the test.  The value is a float if `ddof` and the\n        return value `chisq` are scalars.\n\n    See Also\n    --------\n    power_divergence\n    mstats.chisquare\n\n    Notes\n    -----\n    This test is invalid when the observed or expected frequencies in each\n    category are too small.  A typical rule is that all of the observed\n    and expected frequencies should be at least 5.\n\n    The default degrees of freedom, k-1, are for the case when no parameters\n    of the distribution are estimated. If p parameters are estimated by\n    efficient maximum likelihood then the correct degrees of freedom are\n    k-1-p. If the parameters are estimated in a different way, then the\n    dof can be between k-1-p and k-1. However, it is also possible that\n    the asymptotic distribution is not a chisquare, in which case this\n    test is not appropriate.\n\n    References\n    ----------\n    .. [1] Lowry, Richard.  "Concepts and Applications of Inferential\n           Statistics". Chapter 8. http://faculty.vassar.edu/lowry/ch8pt1.html\n    .. [2] "Chi-squared test", http://en.wikipedia.org/wiki/Chi-squared_test\n\n    Examples\n    --------\n    When just `f_obs` is given, it is assumed that the expected frequencies\n    are uniform and given by the mean of the observed frequencies.\n\n    >>> from scipy.stats import chisquare\n    >>> chisquare([16, 18, 16, 14, 12, 12])\n    (2.0, 0.84914503608460956)\n\n    With `f_exp` the expected frequencies can be given.\n\n    >>> chisquare([16, 18, 16, 14, 12, 12], f_exp=[16, 16, 16, 16, 16, 8])\n    (3.5, 0.62338762774958223)\n\n    When `f_obs` is 2-D, by default the test is applied to each column.\n\n    >>> obs = np.array([[16, 18, 16, 14, 12, 12], [32, 24, 16, 28, 20, 24]]).T\n    >>> obs.shape\n    (6, 2)\n    >>> chisquare(obs)\n    (array([ 2.        ,  6.66666667]), array([ 0.84914504,  0.24663415]))\n\n    By setting ``axis=None``, the test is applied to all data in the array,\n    which is equivalent to applying the test to the flattened array.\n\n    >>> chisquare(obs, axis=None)\n    (23.31034482758621, 0.015975692534127565)\n    >>> chisquare(obs.ravel())\n    (23.31034482758621, 0.015975692534127565)\n\n    `ddof` is the change to make to the default degrees of freedom.\n\n    >>> chisquare([16, 18, 16, 14, 12, 12], ddof=1)\n    (2.0, 0.73575888234288467)\n\n    The calculation of the p-values is done by broadcasting the\n    chi-squared statistic with `ddof`.\n\n    >>> chisquare([16, 18, 16, 14, 12, 12], ddof=[0,1,2])\n    (2.0, array([ 0.84914504,  0.73575888,  0.5724067 ]))\n\n    `f_obs` and `f_exp` are also broadcast.  In the following, `f_obs` has\n    shape (6,) and `f_exp` has shape (2, 6), so the result of broadcasting\n    `f_obs` and `f_exp` has shape (2, 6).  To compute the desired chi-squared\n    statistics, we use ``axis=1``:\n\n    >>> chisquare([16, 18, 16, 14, 12, 12],\n    ...           f_exp=[[16, 16, 16, 16, 16, 8], [8, 20, 20, 16, 12, 12]],\n    ...           axis=1)\n    (array([ 3.5 ,  9.25]), array([ 0.62338763,  0.09949846]))\n\n    ')
    
    # Call to power_divergence(...): (line 4686)
    # Processing the call arguments (line 4686)
    # Getting the type of 'f_obs' (line 4686)
    f_obs_587382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4686, 28), 'f_obs', False)
    # Processing the call keyword arguments (line 4686)
    # Getting the type of 'f_exp' (line 4686)
    f_exp_587383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4686, 41), 'f_exp', False)
    keyword_587384 = f_exp_587383
    # Getting the type of 'ddof' (line 4686)
    ddof_587385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4686, 53), 'ddof', False)
    keyword_587386 = ddof_587385
    # Getting the type of 'axis' (line 4686)
    axis_587387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4686, 64), 'axis', False)
    keyword_587388 = axis_587387
    str_587389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4687, 36), 'str', 'pearson')
    keyword_587390 = str_587389
    kwargs_587391 = {'lambda_': keyword_587390, 'ddof': keyword_587386, 'axis': keyword_587388, 'f_exp': keyword_587384}
    # Getting the type of 'power_divergence' (line 4686)
    power_divergence_587381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4686, 11), 'power_divergence', False)
    # Calling power_divergence(args, kwargs) (line 4686)
    power_divergence_call_result_587392 = invoke(stypy.reporting.localization.Localization(__file__, 4686, 11), power_divergence_587381, *[f_obs_587382], **kwargs_587391)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4686, 4), 'stypy_return_type', power_divergence_call_result_587392)
    
    # ################# End of 'chisquare(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'chisquare' in the type store
    # Getting the type of 'stypy_return_type' (line 4575)
    stypy_return_type_587393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4575, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_587393)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'chisquare'
    return stypy_return_type_587393

# Assigning a type to the variable 'chisquare' (line 4575)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4575, 0), 'chisquare', chisquare)

# Assigning a Call to a Name (line 4689):

# Assigning a Call to a Name (line 4689):

# Call to namedtuple(...): (line 4689)
# Processing the call arguments (line 4689)
str_587395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4689, 28), 'str', 'Ks_2sampResult')

# Obtaining an instance of the builtin type 'tuple' (line 4689)
tuple_587396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4689, 47), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 4689)
# Adding element type (line 4689)
str_587397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4689, 47), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4689, 47), tuple_587396, str_587397)
# Adding element type (line 4689)
str_587398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4689, 60), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4689, 47), tuple_587396, str_587398)

# Processing the call keyword arguments (line 4689)
kwargs_587399 = {}
# Getting the type of 'namedtuple' (line 4689)
namedtuple_587394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4689, 17), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 4689)
namedtuple_call_result_587400 = invoke(stypy.reporting.localization.Localization(__file__, 4689, 17), namedtuple_587394, *[str_587395, tuple_587396], **kwargs_587399)

# Assigning a type to the variable 'Ks_2sampResult' (line 4689)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4689, 0), 'Ks_2sampResult', namedtuple_call_result_587400)

@norecursion
def ks_2samp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ks_2samp'
    module_type_store = module_type_store.open_function_context('ks_2samp', 4692, 0, False)
    
    # Passed parameters checking function
    ks_2samp.stypy_localization = localization
    ks_2samp.stypy_type_of_self = None
    ks_2samp.stypy_type_store = module_type_store
    ks_2samp.stypy_function_name = 'ks_2samp'
    ks_2samp.stypy_param_names_list = ['data1', 'data2']
    ks_2samp.stypy_varargs_param_name = None
    ks_2samp.stypy_kwargs_param_name = None
    ks_2samp.stypy_call_defaults = defaults
    ks_2samp.stypy_call_varargs = varargs
    ks_2samp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ks_2samp', ['data1', 'data2'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ks_2samp', localization, ['data1', 'data2'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ks_2samp(...)' code ##################

    str_587401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4754, (-1)), 'str', '\n    Compute the Kolmogorov-Smirnov statistic on 2 samples.\n\n    This is a two-sided test for the null hypothesis that 2 independent samples\n    are drawn from the same continuous distribution.\n\n    Parameters\n    ----------\n    data1, data2 : sequence of 1-D ndarrays\n        two arrays of sample observations assumed to be drawn from a continuous\n        distribution, sample sizes can be different\n\n    Returns\n    -------\n    statistic : float\n        KS statistic\n    pvalue : float\n        two-tailed p-value\n\n    Notes\n    -----\n    This tests whether 2 samples are drawn from the same distribution. Note\n    that, like in the case of the one-sample K-S test, the distribution is\n    assumed to be continuous.\n\n    This is the two-sided test, one-sided tests are not implemented.\n    The test uses the two-sided asymptotic Kolmogorov-Smirnov distribution.\n\n    If the K-S statistic is small or the p-value is high, then we cannot\n    reject the hypothesis that the distributions of the two samples\n    are the same.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> np.random.seed(12345678)  #fix random seed to get the same result\n    >>> n1 = 200  # size of first sample\n    >>> n2 = 300  # size of second sample\n\n    For a different distribution, we can reject the null hypothesis since the\n    pvalue is below 1%:\n\n    >>> rvs1 = stats.norm.rvs(size=n1, loc=0., scale=1)\n    >>> rvs2 = stats.norm.rvs(size=n2, loc=0.5, scale=1.5)\n    >>> stats.ks_2samp(rvs1, rvs2)\n    (0.20833333333333337, 4.6674975515806989e-005)\n\n    For a slightly different distribution, we cannot reject the null hypothesis\n    at a 10% or lower alpha since the p-value at 0.144 is higher than 10%\n\n    >>> rvs3 = stats.norm.rvs(size=n2, loc=0.01, scale=1.0)\n    >>> stats.ks_2samp(rvs1, rvs3)\n    (0.10333333333333333, 0.14498781825751686)\n\n    For an identical distribution, we cannot reject the null hypothesis since\n    the p-value is high, 41%:\n\n    >>> rvs4 = stats.norm.rvs(size=n2, loc=0.0, scale=1.0)\n    >>> stats.ks_2samp(rvs1, rvs4)\n    (0.07999999999999996, 0.41126949729859719)\n\n    ')
    
    # Assigning a Call to a Name (line 4755):
    
    # Assigning a Call to a Name (line 4755):
    
    # Call to sort(...): (line 4755)
    # Processing the call arguments (line 4755)
    # Getting the type of 'data1' (line 4755)
    data1_587404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4755, 20), 'data1', False)
    # Processing the call keyword arguments (line 4755)
    kwargs_587405 = {}
    # Getting the type of 'np' (line 4755)
    np_587402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4755, 12), 'np', False)
    # Obtaining the member 'sort' of a type (line 4755)
    sort_587403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4755, 12), np_587402, 'sort')
    # Calling sort(args, kwargs) (line 4755)
    sort_call_result_587406 = invoke(stypy.reporting.localization.Localization(__file__, 4755, 12), sort_587403, *[data1_587404], **kwargs_587405)
    
    # Assigning a type to the variable 'data1' (line 4755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4755, 4), 'data1', sort_call_result_587406)
    
    # Assigning a Call to a Name (line 4756):
    
    # Assigning a Call to a Name (line 4756):
    
    # Call to sort(...): (line 4756)
    # Processing the call arguments (line 4756)
    # Getting the type of 'data2' (line 4756)
    data2_587409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4756, 20), 'data2', False)
    # Processing the call keyword arguments (line 4756)
    kwargs_587410 = {}
    # Getting the type of 'np' (line 4756)
    np_587407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4756, 12), 'np', False)
    # Obtaining the member 'sort' of a type (line 4756)
    sort_587408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4756, 12), np_587407, 'sort')
    # Calling sort(args, kwargs) (line 4756)
    sort_call_result_587411 = invoke(stypy.reporting.localization.Localization(__file__, 4756, 12), sort_587408, *[data2_587409], **kwargs_587410)
    
    # Assigning a type to the variable 'data2' (line 4756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4756, 4), 'data2', sort_call_result_587411)
    
    # Assigning a Subscript to a Name (line 4757):
    
    # Assigning a Subscript to a Name (line 4757):
    
    # Obtaining the type of the subscript
    int_587412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4757, 21), 'int')
    # Getting the type of 'data1' (line 4757)
    data1_587413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4757, 9), 'data1')
    # Obtaining the member 'shape' of a type (line 4757)
    shape_587414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4757, 9), data1_587413, 'shape')
    # Obtaining the member '__getitem__' of a type (line 4757)
    getitem___587415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4757, 9), shape_587414, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4757)
    subscript_call_result_587416 = invoke(stypy.reporting.localization.Localization(__file__, 4757, 9), getitem___587415, int_587412)
    
    # Assigning a type to the variable 'n1' (line 4757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4757, 4), 'n1', subscript_call_result_587416)
    
    # Assigning a Subscript to a Name (line 4758):
    
    # Assigning a Subscript to a Name (line 4758):
    
    # Obtaining the type of the subscript
    int_587417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4758, 21), 'int')
    # Getting the type of 'data2' (line 4758)
    data2_587418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4758, 9), 'data2')
    # Obtaining the member 'shape' of a type (line 4758)
    shape_587419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4758, 9), data2_587418, 'shape')
    # Obtaining the member '__getitem__' of a type (line 4758)
    getitem___587420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4758, 9), shape_587419, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4758)
    subscript_call_result_587421 = invoke(stypy.reporting.localization.Localization(__file__, 4758, 9), getitem___587420, int_587417)
    
    # Assigning a type to the variable 'n2' (line 4758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4758, 4), 'n2', subscript_call_result_587421)
    
    # Assigning a Call to a Name (line 4759):
    
    # Assigning a Call to a Name (line 4759):
    
    # Call to concatenate(...): (line 4759)
    # Processing the call arguments (line 4759)
    
    # Obtaining an instance of the builtin type 'list' (line 4759)
    list_587424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4759, 30), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4759)
    # Adding element type (line 4759)
    # Getting the type of 'data1' (line 4759)
    data1_587425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4759, 31), 'data1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4759, 30), list_587424, data1_587425)
    # Adding element type (line 4759)
    # Getting the type of 'data2' (line 4759)
    data2_587426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4759, 38), 'data2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4759, 30), list_587424, data2_587426)
    
    # Processing the call keyword arguments (line 4759)
    kwargs_587427 = {}
    # Getting the type of 'np' (line 4759)
    np_587422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4759, 15), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 4759)
    concatenate_587423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4759, 15), np_587422, 'concatenate')
    # Calling concatenate(args, kwargs) (line 4759)
    concatenate_call_result_587428 = invoke(stypy.reporting.localization.Localization(__file__, 4759, 15), concatenate_587423, *[list_587424], **kwargs_587427)
    
    # Assigning a type to the variable 'data_all' (line 4759)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4759, 4), 'data_all', concatenate_call_result_587428)
    
    # Assigning a BinOp to a Name (line 4760):
    
    # Assigning a BinOp to a Name (line 4760):
    
    # Call to searchsorted(...): (line 4760)
    # Processing the call arguments (line 4760)
    # Getting the type of 'data1' (line 4760)
    data1_587431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4760, 27), 'data1', False)
    # Getting the type of 'data_all' (line 4760)
    data_all_587432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4760, 34), 'data_all', False)
    # Processing the call keyword arguments (line 4760)
    str_587433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4760, 49), 'str', 'right')
    keyword_587434 = str_587433
    kwargs_587435 = {'side': keyword_587434}
    # Getting the type of 'np' (line 4760)
    np_587429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4760, 11), 'np', False)
    # Obtaining the member 'searchsorted' of a type (line 4760)
    searchsorted_587430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4760, 11), np_587429, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 4760)
    searchsorted_call_result_587436 = invoke(stypy.reporting.localization.Localization(__file__, 4760, 11), searchsorted_587430, *[data1_587431, data_all_587432], **kwargs_587435)
    
    float_587437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4760, 61), 'float')
    # Getting the type of 'n1' (line 4760)
    n1_587438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4760, 65), 'n1')
    # Applying the binary operator '*' (line 4760)
    result_mul_587439 = python_operator(stypy.reporting.localization.Localization(__file__, 4760, 61), '*', float_587437, n1_587438)
    
    # Applying the binary operator 'div' (line 4760)
    result_div_587440 = python_operator(stypy.reporting.localization.Localization(__file__, 4760, 11), 'div', searchsorted_call_result_587436, result_mul_587439)
    
    # Assigning a type to the variable 'cdf1' (line 4760)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4760, 4), 'cdf1', result_div_587440)
    
    # Assigning a BinOp to a Name (line 4761):
    
    # Assigning a BinOp to a Name (line 4761):
    
    # Call to searchsorted(...): (line 4761)
    # Processing the call arguments (line 4761)
    # Getting the type of 'data2' (line 4761)
    data2_587443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4761, 27), 'data2', False)
    # Getting the type of 'data_all' (line 4761)
    data_all_587444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4761, 34), 'data_all', False)
    # Processing the call keyword arguments (line 4761)
    str_587445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4761, 49), 'str', 'right')
    keyword_587446 = str_587445
    kwargs_587447 = {'side': keyword_587446}
    # Getting the type of 'np' (line 4761)
    np_587441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4761, 11), 'np', False)
    # Obtaining the member 'searchsorted' of a type (line 4761)
    searchsorted_587442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4761, 11), np_587441, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 4761)
    searchsorted_call_result_587448 = invoke(stypy.reporting.localization.Localization(__file__, 4761, 11), searchsorted_587442, *[data2_587443, data_all_587444], **kwargs_587447)
    
    float_587449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4761, 61), 'float')
    # Getting the type of 'n2' (line 4761)
    n2_587450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4761, 65), 'n2')
    # Applying the binary operator '*' (line 4761)
    result_mul_587451 = python_operator(stypy.reporting.localization.Localization(__file__, 4761, 61), '*', float_587449, n2_587450)
    
    # Applying the binary operator 'div' (line 4761)
    result_div_587452 = python_operator(stypy.reporting.localization.Localization(__file__, 4761, 11), 'div', searchsorted_call_result_587448, result_mul_587451)
    
    # Assigning a type to the variable 'cdf2' (line 4761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4761, 4), 'cdf2', result_div_587452)
    
    # Assigning a Call to a Name (line 4762):
    
    # Assigning a Call to a Name (line 4762):
    
    # Call to max(...): (line 4762)
    # Processing the call arguments (line 4762)
    
    # Call to absolute(...): (line 4762)
    # Processing the call arguments (line 4762)
    # Getting the type of 'cdf1' (line 4762)
    cdf1_587457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4762, 27), 'cdf1', False)
    # Getting the type of 'cdf2' (line 4762)
    cdf2_587458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4762, 34), 'cdf2', False)
    # Applying the binary operator '-' (line 4762)
    result_sub_587459 = python_operator(stypy.reporting.localization.Localization(__file__, 4762, 27), '-', cdf1_587457, cdf2_587458)
    
    # Processing the call keyword arguments (line 4762)
    kwargs_587460 = {}
    # Getting the type of 'np' (line 4762)
    np_587455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4762, 15), 'np', False)
    # Obtaining the member 'absolute' of a type (line 4762)
    absolute_587456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4762, 15), np_587455, 'absolute')
    # Calling absolute(args, kwargs) (line 4762)
    absolute_call_result_587461 = invoke(stypy.reporting.localization.Localization(__file__, 4762, 15), absolute_587456, *[result_sub_587459], **kwargs_587460)
    
    # Processing the call keyword arguments (line 4762)
    kwargs_587462 = {}
    # Getting the type of 'np' (line 4762)
    np_587453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4762, 8), 'np', False)
    # Obtaining the member 'max' of a type (line 4762)
    max_587454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4762, 8), np_587453, 'max')
    # Calling max(args, kwargs) (line 4762)
    max_call_result_587463 = invoke(stypy.reporting.localization.Localization(__file__, 4762, 8), max_587454, *[absolute_call_result_587461], **kwargs_587462)
    
    # Assigning a type to the variable 'd' (line 4762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4762, 4), 'd', max_call_result_587463)
    
    # Assigning a Call to a Name (line 4764):
    
    # Assigning a Call to a Name (line 4764):
    
    # Call to sqrt(...): (line 4764)
    # Processing the call arguments (line 4764)
    # Getting the type of 'n1' (line 4764)
    n1_587466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4764, 17), 'n1', False)
    # Getting the type of 'n2' (line 4764)
    n2_587467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4764, 22), 'n2', False)
    # Applying the binary operator '*' (line 4764)
    result_mul_587468 = python_operator(stypy.reporting.localization.Localization(__file__, 4764, 17), '*', n1_587466, n2_587467)
    
    
    # Call to float(...): (line 4764)
    # Processing the call arguments (line 4764)
    # Getting the type of 'n1' (line 4764)
    n1_587470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4764, 33), 'n1', False)
    # Getting the type of 'n2' (line 4764)
    n2_587471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4764, 38), 'n2', False)
    # Applying the binary operator '+' (line 4764)
    result_add_587472 = python_operator(stypy.reporting.localization.Localization(__file__, 4764, 33), '+', n1_587470, n2_587471)
    
    # Processing the call keyword arguments (line 4764)
    kwargs_587473 = {}
    # Getting the type of 'float' (line 4764)
    float_587469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4764, 27), 'float', False)
    # Calling float(args, kwargs) (line 4764)
    float_call_result_587474 = invoke(stypy.reporting.localization.Localization(__file__, 4764, 27), float_587469, *[result_add_587472], **kwargs_587473)
    
    # Applying the binary operator 'div' (line 4764)
    result_div_587475 = python_operator(stypy.reporting.localization.Localization(__file__, 4764, 25), 'div', result_mul_587468, float_call_result_587474)
    
    # Processing the call keyword arguments (line 4764)
    kwargs_587476 = {}
    # Getting the type of 'np' (line 4764)
    np_587464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4764, 9), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 4764)
    sqrt_587465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4764, 9), np_587464, 'sqrt')
    # Calling sqrt(args, kwargs) (line 4764)
    sqrt_call_result_587477 = invoke(stypy.reporting.localization.Localization(__file__, 4764, 9), sqrt_587465, *[result_div_587475], **kwargs_587476)
    
    # Assigning a type to the variable 'en' (line 4764)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4764, 4), 'en', sqrt_call_result_587477)
    
    
    # SSA begins for try-except statement (line 4765)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 4766):
    
    # Assigning a Call to a Name (line 4766):
    
    # Call to sf(...): (line 4766)
    # Processing the call arguments (line 4766)
    # Getting the type of 'en' (line 4766)
    en_587481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4766, 43), 'en', False)
    float_587482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4766, 48), 'float')
    # Applying the binary operator '+' (line 4766)
    result_add_587483 = python_operator(stypy.reporting.localization.Localization(__file__, 4766, 43), '+', en_587481, float_587482)
    
    float_587484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4766, 55), 'float')
    # Getting the type of 'en' (line 4766)
    en_587485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4766, 62), 'en', False)
    # Applying the binary operator 'div' (line 4766)
    result_div_587486 = python_operator(stypy.reporting.localization.Localization(__file__, 4766, 55), 'div', float_587484, en_587485)
    
    # Applying the binary operator '+' (line 4766)
    result_add_587487 = python_operator(stypy.reporting.localization.Localization(__file__, 4766, 53), '+', result_add_587483, result_div_587486)
    
    # Getting the type of 'd' (line 4766)
    d_587488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4766, 68), 'd', False)
    # Applying the binary operator '*' (line 4766)
    result_mul_587489 = python_operator(stypy.reporting.localization.Localization(__file__, 4766, 42), '*', result_add_587487, d_587488)
    
    # Processing the call keyword arguments (line 4766)
    kwargs_587490 = {}
    # Getting the type of 'distributions' (line 4766)
    distributions_587478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4766, 15), 'distributions', False)
    # Obtaining the member 'kstwobign' of a type (line 4766)
    kstwobign_587479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4766, 15), distributions_587478, 'kstwobign')
    # Obtaining the member 'sf' of a type (line 4766)
    sf_587480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4766, 15), kstwobign_587479, 'sf')
    # Calling sf(args, kwargs) (line 4766)
    sf_call_result_587491 = invoke(stypy.reporting.localization.Localization(__file__, 4766, 15), sf_587480, *[result_mul_587489], **kwargs_587490)
    
    # Assigning a type to the variable 'prob' (line 4766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4766, 8), 'prob', sf_call_result_587491)
    # SSA branch for the except part of a try statement (line 4765)
    # SSA branch for the except '<any exception>' branch of a try statement (line 4765)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Num to a Name (line 4768):
    
    # Assigning a Num to a Name (line 4768):
    float_587492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4768, 15), 'float')
    # Assigning a type to the variable 'prob' (line 4768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4768, 8), 'prob', float_587492)
    # SSA join for try-except statement (line 4765)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to Ks_2sampResult(...): (line 4770)
    # Processing the call arguments (line 4770)
    # Getting the type of 'd' (line 4770)
    d_587494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4770, 26), 'd', False)
    # Getting the type of 'prob' (line 4770)
    prob_587495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4770, 29), 'prob', False)
    # Processing the call keyword arguments (line 4770)
    kwargs_587496 = {}
    # Getting the type of 'Ks_2sampResult' (line 4770)
    Ks_2sampResult_587493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4770, 11), 'Ks_2sampResult', False)
    # Calling Ks_2sampResult(args, kwargs) (line 4770)
    Ks_2sampResult_call_result_587497 = invoke(stypy.reporting.localization.Localization(__file__, 4770, 11), Ks_2sampResult_587493, *[d_587494, prob_587495], **kwargs_587496)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4770)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4770, 4), 'stypy_return_type', Ks_2sampResult_call_result_587497)
    
    # ################# End of 'ks_2samp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ks_2samp' in the type store
    # Getting the type of 'stypy_return_type' (line 4692)
    stypy_return_type_587498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4692, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_587498)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ks_2samp'
    return stypy_return_type_587498

# Assigning a type to the variable 'ks_2samp' (line 4692)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4692, 0), 'ks_2samp', ks_2samp)

@norecursion
def tiecorrect(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'tiecorrect'
    module_type_store = module_type_store.open_function_context('tiecorrect', 4773, 0, False)
    
    # Passed parameters checking function
    tiecorrect.stypy_localization = localization
    tiecorrect.stypy_type_of_self = None
    tiecorrect.stypy_type_store = module_type_store
    tiecorrect.stypy_function_name = 'tiecorrect'
    tiecorrect.stypy_param_names_list = ['rankvals']
    tiecorrect.stypy_varargs_param_name = None
    tiecorrect.stypy_kwargs_param_name = None
    tiecorrect.stypy_call_defaults = defaults
    tiecorrect.stypy_call_varargs = varargs
    tiecorrect.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tiecorrect', ['rankvals'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tiecorrect', localization, ['rankvals'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tiecorrect(...)' code ##################

    str_587499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4811, (-1)), 'str', '\n    Tie correction factor for ties in the Mann-Whitney U and\n    Kruskal-Wallis H tests.\n\n    Parameters\n    ----------\n    rankvals : array_like\n        A 1-D sequence of ranks.  Typically this will be the array\n        returned by `stats.rankdata`.\n\n    Returns\n    -------\n    factor : float\n        Correction factor for U or H.\n\n    See Also\n    --------\n    rankdata : Assign ranks to the data\n    mannwhitneyu : Mann-Whitney rank test\n    kruskal : Kruskal-Wallis H test\n\n    References\n    ----------\n    .. [1] Siegel, S. (1956) Nonparametric Statistics for the Behavioral\n           Sciences.  New York: McGraw-Hill.\n\n    Examples\n    --------\n    >>> from scipy.stats import tiecorrect, rankdata\n    >>> tiecorrect([1, 2.5, 2.5, 4])\n    0.9\n    >>> ranks = rankdata([1, 3, 2, 4, 5, 7, 2, 8, 4])\n    >>> ranks\n    array([ 1. ,  4. ,  2.5,  5.5,  7. ,  8. ,  2.5,  9. ,  5.5])\n    >>> tiecorrect(ranks)\n    0.9833333333333333\n\n    ')
    
    # Assigning a Call to a Name (line 4812):
    
    # Assigning a Call to a Name (line 4812):
    
    # Call to sort(...): (line 4812)
    # Processing the call arguments (line 4812)
    # Getting the type of 'rankvals' (line 4812)
    rankvals_587502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4812, 18), 'rankvals', False)
    # Processing the call keyword arguments (line 4812)
    kwargs_587503 = {}
    # Getting the type of 'np' (line 4812)
    np_587500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4812, 10), 'np', False)
    # Obtaining the member 'sort' of a type (line 4812)
    sort_587501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4812, 10), np_587500, 'sort')
    # Calling sort(args, kwargs) (line 4812)
    sort_call_result_587504 = invoke(stypy.reporting.localization.Localization(__file__, 4812, 10), sort_587501, *[rankvals_587502], **kwargs_587503)
    
    # Assigning a type to the variable 'arr' (line 4812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4812, 4), 'arr', sort_call_result_587504)
    
    # Assigning a Subscript to a Name (line 4813):
    
    # Assigning a Subscript to a Name (line 4813):
    
    # Obtaining the type of the subscript
    int_587505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4813, 61), 'int')
    
    # Call to nonzero(...): (line 4813)
    # Processing the call arguments (line 4813)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 4813)
    tuple_587508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4813, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4813)
    # Adding element type (line 4813)
    # Getting the type of 'True' (line 4813)
    True_587509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4813, 27), 'True', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4813, 27), tuple_587508, True_587509)
    # Adding element type (line 4813)
    
    
    # Obtaining the type of the subscript
    int_587510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4813, 37), 'int')
    slice_587511 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 4813, 33), int_587510, None, None)
    # Getting the type of 'arr' (line 4813)
    arr_587512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4813, 33), 'arr', False)
    # Obtaining the member '__getitem__' of a type (line 4813)
    getitem___587513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4813, 33), arr_587512, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4813)
    subscript_call_result_587514 = invoke(stypy.reporting.localization.Localization(__file__, 4813, 33), getitem___587513, slice_587511)
    
    
    # Obtaining the type of the subscript
    int_587515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4813, 49), 'int')
    slice_587516 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 4813, 44), None, int_587515, None)
    # Getting the type of 'arr' (line 4813)
    arr_587517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4813, 44), 'arr', False)
    # Obtaining the member '__getitem__' of a type (line 4813)
    getitem___587518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4813, 44), arr_587517, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4813)
    subscript_call_result_587519 = invoke(stypy.reporting.localization.Localization(__file__, 4813, 44), getitem___587518, slice_587516)
    
    # Applying the binary operator '!=' (line 4813)
    result_ne_587520 = python_operator(stypy.reporting.localization.Localization(__file__, 4813, 33), '!=', subscript_call_result_587514, subscript_call_result_587519)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4813, 27), tuple_587508, result_ne_587520)
    # Adding element type (line 4813)
    # Getting the type of 'True' (line 4813)
    True_587521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4813, 54), 'True', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4813, 27), tuple_587508, True_587521)
    
    # Getting the type of 'np' (line 4813)
    np_587522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4813, 21), 'np', False)
    # Obtaining the member 'r_' of a type (line 4813)
    r__587523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4813, 21), np_587522, 'r_')
    # Obtaining the member '__getitem__' of a type (line 4813)
    getitem___587524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4813, 21), r__587523, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4813)
    subscript_call_result_587525 = invoke(stypy.reporting.localization.Localization(__file__, 4813, 21), getitem___587524, tuple_587508)
    
    # Processing the call keyword arguments (line 4813)
    kwargs_587526 = {}
    # Getting the type of 'np' (line 4813)
    np_587506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4813, 10), 'np', False)
    # Obtaining the member 'nonzero' of a type (line 4813)
    nonzero_587507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4813, 10), np_587506, 'nonzero')
    # Calling nonzero(args, kwargs) (line 4813)
    nonzero_call_result_587527 = invoke(stypy.reporting.localization.Localization(__file__, 4813, 10), nonzero_587507, *[subscript_call_result_587525], **kwargs_587526)
    
    # Obtaining the member '__getitem__' of a type (line 4813)
    getitem___587528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4813, 10), nonzero_call_result_587527, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4813)
    subscript_call_result_587529 = invoke(stypy.reporting.localization.Localization(__file__, 4813, 10), getitem___587528, int_587505)
    
    # Assigning a type to the variable 'idx' (line 4813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4813, 4), 'idx', subscript_call_result_587529)
    
    # Assigning a Call to a Name (line 4814):
    
    # Assigning a Call to a Name (line 4814):
    
    # Call to astype(...): (line 4814)
    # Processing the call arguments (line 4814)
    # Getting the type of 'np' (line 4814)
    np_587536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4814, 30), 'np', False)
    # Obtaining the member 'float64' of a type (line 4814)
    float64_587537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4814, 30), np_587536, 'float64')
    # Processing the call keyword arguments (line 4814)
    kwargs_587538 = {}
    
    # Call to diff(...): (line 4814)
    # Processing the call arguments (line 4814)
    # Getting the type of 'idx' (line 4814)
    idx_587532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4814, 18), 'idx', False)
    # Processing the call keyword arguments (line 4814)
    kwargs_587533 = {}
    # Getting the type of 'np' (line 4814)
    np_587530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4814, 10), 'np', False)
    # Obtaining the member 'diff' of a type (line 4814)
    diff_587531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4814, 10), np_587530, 'diff')
    # Calling diff(args, kwargs) (line 4814)
    diff_call_result_587534 = invoke(stypy.reporting.localization.Localization(__file__, 4814, 10), diff_587531, *[idx_587532], **kwargs_587533)
    
    # Obtaining the member 'astype' of a type (line 4814)
    astype_587535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4814, 10), diff_call_result_587534, 'astype')
    # Calling astype(args, kwargs) (line 4814)
    astype_call_result_587539 = invoke(stypy.reporting.localization.Localization(__file__, 4814, 10), astype_587535, *[float64_587537], **kwargs_587538)
    
    # Assigning a type to the variable 'cnt' (line 4814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4814, 4), 'cnt', astype_call_result_587539)
    
    # Assigning a Call to a Name (line 4816):
    
    # Assigning a Call to a Name (line 4816):
    
    # Call to float64(...): (line 4816)
    # Processing the call arguments (line 4816)
    # Getting the type of 'arr' (line 4816)
    arr_587542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4816, 22), 'arr', False)
    # Obtaining the member 'size' of a type (line 4816)
    size_587543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4816, 22), arr_587542, 'size')
    # Processing the call keyword arguments (line 4816)
    kwargs_587544 = {}
    # Getting the type of 'np' (line 4816)
    np_587540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4816, 11), 'np', False)
    # Obtaining the member 'float64' of a type (line 4816)
    float64_587541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4816, 11), np_587540, 'float64')
    # Calling float64(args, kwargs) (line 4816)
    float64_call_result_587545 = invoke(stypy.reporting.localization.Localization(__file__, 4816, 11), float64_587541, *[size_587543], **kwargs_587544)
    
    # Assigning a type to the variable 'size' (line 4816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4816, 4), 'size', float64_call_result_587545)
    
    
    # Getting the type of 'size' (line 4817)
    size_587546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4817, 18), 'size')
    int_587547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4817, 25), 'int')
    # Applying the binary operator '<' (line 4817)
    result_lt_587548 = python_operator(stypy.reporting.localization.Localization(__file__, 4817, 18), '<', size_587546, int_587547)
    
    # Testing the type of an if expression (line 4817)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4817, 11), result_lt_587548)
    # SSA begins for if expression (line 4817)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    float_587549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4817, 11), 'float')
    # SSA branch for the else part of an if expression (line 4817)
    module_type_store.open_ssa_branch('if expression else')
    float_587550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4817, 32), 'float')
    
    # Call to sum(...): (line 4817)
    # Processing the call keyword arguments (line 4817)
    kwargs_587557 = {}
    # Getting the type of 'cnt' (line 4817)
    cnt_587551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4817, 39), 'cnt', False)
    int_587552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4817, 44), 'int')
    # Applying the binary operator '**' (line 4817)
    result_pow_587553 = python_operator(stypy.reporting.localization.Localization(__file__, 4817, 39), '**', cnt_587551, int_587552)
    
    # Getting the type of 'cnt' (line 4817)
    cnt_587554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4817, 48), 'cnt', False)
    # Applying the binary operator '-' (line 4817)
    result_sub_587555 = python_operator(stypy.reporting.localization.Localization(__file__, 4817, 39), '-', result_pow_587553, cnt_587554)
    
    # Obtaining the member 'sum' of a type (line 4817)
    sum_587556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4817, 39), result_sub_587555, 'sum')
    # Calling sum(args, kwargs) (line 4817)
    sum_call_result_587558 = invoke(stypy.reporting.localization.Localization(__file__, 4817, 39), sum_587556, *[], **kwargs_587557)
    
    # Getting the type of 'size' (line 4817)
    size_587559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4817, 62), 'size')
    int_587560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4817, 68), 'int')
    # Applying the binary operator '**' (line 4817)
    result_pow_587561 = python_operator(stypy.reporting.localization.Localization(__file__, 4817, 62), '**', size_587559, int_587560)
    
    # Getting the type of 'size' (line 4817)
    size_587562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4817, 72), 'size')
    # Applying the binary operator '-' (line 4817)
    result_sub_587563 = python_operator(stypy.reporting.localization.Localization(__file__, 4817, 62), '-', result_pow_587561, size_587562)
    
    # Applying the binary operator 'div' (line 4817)
    result_div_587564 = python_operator(stypy.reporting.localization.Localization(__file__, 4817, 38), 'div', sum_call_result_587558, result_sub_587563)
    
    # Applying the binary operator '-' (line 4817)
    result_sub_587565 = python_operator(stypy.reporting.localization.Localization(__file__, 4817, 32), '-', float_587550, result_div_587564)
    
    # SSA join for if expression (line 4817)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_587566 = union_type.UnionType.add(float_587549, result_sub_587565)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4817, 4), 'stypy_return_type', if_exp_587566)
    
    # ################# End of 'tiecorrect(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tiecorrect' in the type store
    # Getting the type of 'stypy_return_type' (line 4773)
    stypy_return_type_587567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4773, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_587567)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tiecorrect'
    return stypy_return_type_587567

# Assigning a type to the variable 'tiecorrect' (line 4773)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4773, 0), 'tiecorrect', tiecorrect)

# Assigning a Call to a Name (line 4820):

# Assigning a Call to a Name (line 4820):

# Call to namedtuple(...): (line 4820)
# Processing the call arguments (line 4820)
str_587569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4820, 32), 'str', 'MannwhitneyuResult')

# Obtaining an instance of the builtin type 'tuple' (line 4820)
tuple_587570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4820, 55), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 4820)
# Adding element type (line 4820)
str_587571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4820, 55), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4820, 55), tuple_587570, str_587571)
# Adding element type (line 4820)
str_587572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4820, 68), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4820, 55), tuple_587570, str_587572)

# Processing the call keyword arguments (line 4820)
kwargs_587573 = {}
# Getting the type of 'namedtuple' (line 4820)
namedtuple_587568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4820, 21), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 4820)
namedtuple_call_result_587574 = invoke(stypy.reporting.localization.Localization(__file__, 4820, 21), namedtuple_587568, *[str_587569, tuple_587570], **kwargs_587573)

# Assigning a type to the variable 'MannwhitneyuResult' (line 4820)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4820, 0), 'MannwhitneyuResult', namedtuple_call_result_587574)

@norecursion
def mannwhitneyu(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 4822)
    True_587575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4822, 38), 'True')
    # Getting the type of 'None' (line 4822)
    None_587576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4822, 56), 'None')
    defaults = [True_587575, None_587576]
    # Create a new context for function 'mannwhitneyu'
    module_type_store = module_type_store.open_function_context('mannwhitneyu', 4822, 0, False)
    
    # Passed parameters checking function
    mannwhitneyu.stypy_localization = localization
    mannwhitneyu.stypy_type_of_self = None
    mannwhitneyu.stypy_type_store = module_type_store
    mannwhitneyu.stypy_function_name = 'mannwhitneyu'
    mannwhitneyu.stypy_param_names_list = ['x', 'y', 'use_continuity', 'alternative']
    mannwhitneyu.stypy_varargs_param_name = None
    mannwhitneyu.stypy_kwargs_param_name = None
    mannwhitneyu.stypy_call_defaults = defaults
    mannwhitneyu.stypy_call_varargs = varargs
    mannwhitneyu.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mannwhitneyu', ['x', 'y', 'use_continuity', 'alternative'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mannwhitneyu', localization, ['x', 'y', 'use_continuity', 'alternative'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mannwhitneyu(...)' code ##################

    str_587577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4868, (-1)), 'str', '\n    Compute the Mann-Whitney rank test on samples x and y.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Array of samples, should be one-dimensional.\n    use_continuity : bool, optional\n            Whether a continuity correction (1/2.) should be taken into\n            account. Default is True.\n    alternative : None (deprecated), \'less\', \'two-sided\', or \'greater\'\n            Whether to get the p-value for the one-sided hypothesis (\'less\'\n            or \'greater\') or for the two-sided hypothesis (\'two-sided\').\n            Defaults to None, which results in a p-value half the size of\n            the \'two-sided\' p-value and a different U statistic. The\n            default behavior is not the same as using \'less\' or \'greater\':\n            it only exists for backward compatibility and is deprecated.\n\n    Returns\n    -------\n    statistic : float\n        The Mann-Whitney U statistic, equal to min(U for x, U for y) if\n        `alternative` is equal to None (deprecated; exists for backward\n        compatibility), and U for y otherwise.\n    pvalue : float\n        p-value assuming an asymptotic normal distribution. One-sided or\n        two-sided, depending on the choice of `alternative`.\n\n    Notes\n    -----\n    Use only when the number of observation in each sample is > 20 and\n    you have 2 independent samples of ranks. Mann-Whitney U is\n    significant if the u-obtained is LESS THAN or equal to the critical\n    value of U.\n\n    This test corrects for ties and by default uses a continuity correction.\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Mann-Whitney_U_test\n\n    .. [2] H.B. Mann and D.R. Whitney, "On a Test of Whether one of Two Random\n           Variables is Stochastically Larger than the Other," The Annals of\n           Mathematical Statistics, vol. 18, no. 1, pp. 50-60, 1947.\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 4869)
    # Getting the type of 'alternative' (line 4869)
    alternative_587578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4869, 7), 'alternative')
    # Getting the type of 'None' (line 4869)
    None_587579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4869, 22), 'None')
    
    (may_be_587580, more_types_in_union_587581) = may_be_none(alternative_587578, None_587579)

    if may_be_587580:

        if more_types_in_union_587581:
            # Runtime conditional SSA (line 4869)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to warn(...): (line 4870)
        # Processing the call arguments (line 4870)
        str_587584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4870, 22), 'str', 'Calling `mannwhitneyu` without specifying `alternative` is deprecated.')
        # Getting the type of 'DeprecationWarning' (line 4871)
        DeprecationWarning_587585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4871, 54), 'DeprecationWarning', False)
        # Processing the call keyword arguments (line 4870)
        kwargs_587586 = {}
        # Getting the type of 'warnings' (line 4870)
        warnings_587582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4870, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 4870)
        warn_587583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4870, 8), warnings_587582, 'warn')
        # Calling warn(args, kwargs) (line 4870)
        warn_call_result_587587 = invoke(stypy.reporting.localization.Localization(__file__, 4870, 8), warn_587583, *[str_587584, DeprecationWarning_587585], **kwargs_587586)
        

        if more_types_in_union_587581:
            # SSA join for if statement (line 4869)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 4873):
    
    # Assigning a Call to a Name (line 4873):
    
    # Call to asarray(...): (line 4873)
    # Processing the call arguments (line 4873)
    # Getting the type of 'x' (line 4873)
    x_587590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4873, 19), 'x', False)
    # Processing the call keyword arguments (line 4873)
    kwargs_587591 = {}
    # Getting the type of 'np' (line 4873)
    np_587588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4873, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 4873)
    asarray_587589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4873, 8), np_587588, 'asarray')
    # Calling asarray(args, kwargs) (line 4873)
    asarray_call_result_587592 = invoke(stypy.reporting.localization.Localization(__file__, 4873, 8), asarray_587589, *[x_587590], **kwargs_587591)
    
    # Assigning a type to the variable 'x' (line 4873)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4873, 4), 'x', asarray_call_result_587592)
    
    # Assigning a Call to a Name (line 4874):
    
    # Assigning a Call to a Name (line 4874):
    
    # Call to asarray(...): (line 4874)
    # Processing the call arguments (line 4874)
    # Getting the type of 'y' (line 4874)
    y_587595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4874, 19), 'y', False)
    # Processing the call keyword arguments (line 4874)
    kwargs_587596 = {}
    # Getting the type of 'np' (line 4874)
    np_587593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4874, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 4874)
    asarray_587594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4874, 8), np_587593, 'asarray')
    # Calling asarray(args, kwargs) (line 4874)
    asarray_call_result_587597 = invoke(stypy.reporting.localization.Localization(__file__, 4874, 8), asarray_587594, *[y_587595], **kwargs_587596)
    
    # Assigning a type to the variable 'y' (line 4874)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4874, 4), 'y', asarray_call_result_587597)
    
    # Assigning a Call to a Name (line 4875):
    
    # Assigning a Call to a Name (line 4875):
    
    # Call to len(...): (line 4875)
    # Processing the call arguments (line 4875)
    # Getting the type of 'x' (line 4875)
    x_587599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4875, 13), 'x', False)
    # Processing the call keyword arguments (line 4875)
    kwargs_587600 = {}
    # Getting the type of 'len' (line 4875)
    len_587598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4875, 9), 'len', False)
    # Calling len(args, kwargs) (line 4875)
    len_call_result_587601 = invoke(stypy.reporting.localization.Localization(__file__, 4875, 9), len_587598, *[x_587599], **kwargs_587600)
    
    # Assigning a type to the variable 'n1' (line 4875)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4875, 4), 'n1', len_call_result_587601)
    
    # Assigning a Call to a Name (line 4876):
    
    # Assigning a Call to a Name (line 4876):
    
    # Call to len(...): (line 4876)
    # Processing the call arguments (line 4876)
    # Getting the type of 'y' (line 4876)
    y_587603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4876, 13), 'y', False)
    # Processing the call keyword arguments (line 4876)
    kwargs_587604 = {}
    # Getting the type of 'len' (line 4876)
    len_587602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4876, 9), 'len', False)
    # Calling len(args, kwargs) (line 4876)
    len_call_result_587605 = invoke(stypy.reporting.localization.Localization(__file__, 4876, 9), len_587602, *[y_587603], **kwargs_587604)
    
    # Assigning a type to the variable 'n2' (line 4876)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4876, 4), 'n2', len_call_result_587605)
    
    # Assigning a Call to a Name (line 4877):
    
    # Assigning a Call to a Name (line 4877):
    
    # Call to rankdata(...): (line 4877)
    # Processing the call arguments (line 4877)
    
    # Call to concatenate(...): (line 4877)
    # Processing the call arguments (line 4877)
    
    # Obtaining an instance of the builtin type 'tuple' (line 4877)
    tuple_587609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4877, 38), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4877)
    # Adding element type (line 4877)
    # Getting the type of 'x' (line 4877)
    x_587610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4877, 38), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4877, 38), tuple_587609, x_587610)
    # Adding element type (line 4877)
    # Getting the type of 'y' (line 4877)
    y_587611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4877, 41), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4877, 38), tuple_587609, y_587611)
    
    # Processing the call keyword arguments (line 4877)
    kwargs_587612 = {}
    # Getting the type of 'np' (line 4877)
    np_587607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4877, 22), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 4877)
    concatenate_587608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4877, 22), np_587607, 'concatenate')
    # Calling concatenate(args, kwargs) (line 4877)
    concatenate_call_result_587613 = invoke(stypy.reporting.localization.Localization(__file__, 4877, 22), concatenate_587608, *[tuple_587609], **kwargs_587612)
    
    # Processing the call keyword arguments (line 4877)
    kwargs_587614 = {}
    # Getting the type of 'rankdata' (line 4877)
    rankdata_587606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4877, 13), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 4877)
    rankdata_call_result_587615 = invoke(stypy.reporting.localization.Localization(__file__, 4877, 13), rankdata_587606, *[concatenate_call_result_587613], **kwargs_587614)
    
    # Assigning a type to the variable 'ranked' (line 4877)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4877, 4), 'ranked', rankdata_call_result_587615)
    
    # Assigning a Subscript to a Name (line 4878):
    
    # Assigning a Subscript to a Name (line 4878):
    
    # Obtaining the type of the subscript
    int_587616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4878, 19), 'int')
    # Getting the type of 'n1' (line 4878)
    n1_587617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4878, 21), 'n1')
    slice_587618 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 4878, 12), int_587616, n1_587617, None)
    # Getting the type of 'ranked' (line 4878)
    ranked_587619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4878, 12), 'ranked')
    # Obtaining the member '__getitem__' of a type (line 4878)
    getitem___587620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4878, 12), ranked_587619, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4878)
    subscript_call_result_587621 = invoke(stypy.reporting.localization.Localization(__file__, 4878, 12), getitem___587620, slice_587618)
    
    # Assigning a type to the variable 'rankx' (line 4878)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4878, 4), 'rankx', subscript_call_result_587621)
    
    # Assigning a BinOp to a Name (line 4879):
    
    # Assigning a BinOp to a Name (line 4879):
    # Getting the type of 'n1' (line 4879)
    n1_587622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4879, 9), 'n1')
    # Getting the type of 'n2' (line 4879)
    n2_587623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4879, 12), 'n2')
    # Applying the binary operator '*' (line 4879)
    result_mul_587624 = python_operator(stypy.reporting.localization.Localization(__file__, 4879, 9), '*', n1_587622, n2_587623)
    
    # Getting the type of 'n1' (line 4879)
    n1_587625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4879, 18), 'n1')
    # Getting the type of 'n1' (line 4879)
    n1_587626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4879, 22), 'n1')
    int_587627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4879, 25), 'int')
    # Applying the binary operator '+' (line 4879)
    result_add_587628 = python_operator(stypy.reporting.localization.Localization(__file__, 4879, 22), '+', n1_587626, int_587627)
    
    # Applying the binary operator '*' (line 4879)
    result_mul_587629 = python_operator(stypy.reporting.localization.Localization(__file__, 4879, 18), '*', n1_587625, result_add_587628)
    
    float_587630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4879, 29), 'float')
    # Applying the binary operator 'div' (line 4879)
    result_div_587631 = python_operator(stypy.reporting.localization.Localization(__file__, 4879, 17), 'div', result_mul_587629, float_587630)
    
    # Applying the binary operator '+' (line 4879)
    result_add_587632 = python_operator(stypy.reporting.localization.Localization(__file__, 4879, 9), '+', result_mul_587624, result_div_587631)
    
    
    # Call to sum(...): (line 4879)
    # Processing the call arguments (line 4879)
    # Getting the type of 'rankx' (line 4879)
    rankx_587635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4879, 42), 'rankx', False)
    # Processing the call keyword arguments (line 4879)
    int_587636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4879, 54), 'int')
    keyword_587637 = int_587636
    kwargs_587638 = {'axis': keyword_587637}
    # Getting the type of 'np' (line 4879)
    np_587633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4879, 35), 'np', False)
    # Obtaining the member 'sum' of a type (line 4879)
    sum_587634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4879, 35), np_587633, 'sum')
    # Calling sum(args, kwargs) (line 4879)
    sum_call_result_587639 = invoke(stypy.reporting.localization.Localization(__file__, 4879, 35), sum_587634, *[rankx_587635], **kwargs_587638)
    
    # Applying the binary operator '-' (line 4879)
    result_sub_587640 = python_operator(stypy.reporting.localization.Localization(__file__, 4879, 33), '-', result_add_587632, sum_call_result_587639)
    
    # Assigning a type to the variable 'u1' (line 4879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4879, 4), 'u1', result_sub_587640)
    
    # Assigning a BinOp to a Name (line 4880):
    
    # Assigning a BinOp to a Name (line 4880):
    # Getting the type of 'n1' (line 4880)
    n1_587641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4880, 9), 'n1')
    # Getting the type of 'n2' (line 4880)
    n2_587642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4880, 12), 'n2')
    # Applying the binary operator '*' (line 4880)
    result_mul_587643 = python_operator(stypy.reporting.localization.Localization(__file__, 4880, 9), '*', n1_587641, n2_587642)
    
    # Getting the type of 'u1' (line 4880)
    u1_587644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4880, 17), 'u1')
    # Applying the binary operator '-' (line 4880)
    result_sub_587645 = python_operator(stypy.reporting.localization.Localization(__file__, 4880, 9), '-', result_mul_587643, u1_587644)
    
    # Assigning a type to the variable 'u2' (line 4880)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4880, 4), 'u2', result_sub_587645)
    
    # Assigning a Call to a Name (line 4881):
    
    # Assigning a Call to a Name (line 4881):
    
    # Call to tiecorrect(...): (line 4881)
    # Processing the call arguments (line 4881)
    # Getting the type of 'ranked' (line 4881)
    ranked_587647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4881, 19), 'ranked', False)
    # Processing the call keyword arguments (line 4881)
    kwargs_587648 = {}
    # Getting the type of 'tiecorrect' (line 4881)
    tiecorrect_587646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4881, 8), 'tiecorrect', False)
    # Calling tiecorrect(args, kwargs) (line 4881)
    tiecorrect_call_result_587649 = invoke(stypy.reporting.localization.Localization(__file__, 4881, 8), tiecorrect_587646, *[ranked_587647], **kwargs_587648)
    
    # Assigning a type to the variable 'T' (line 4881)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4881, 4), 'T', tiecorrect_call_result_587649)
    
    
    # Getting the type of 'T' (line 4882)
    T_587650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4882, 7), 'T')
    int_587651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4882, 12), 'int')
    # Applying the binary operator '==' (line 4882)
    result_eq_587652 = python_operator(stypy.reporting.localization.Localization(__file__, 4882, 7), '==', T_587650, int_587651)
    
    # Testing the type of an if condition (line 4882)
    if_condition_587653 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4882, 4), result_eq_587652)
    # Assigning a type to the variable 'if_condition_587653' (line 4882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4882, 4), 'if_condition_587653', if_condition_587653)
    # SSA begins for if statement (line 4882)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 4883)
    # Processing the call arguments (line 4883)
    str_587655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4883, 25), 'str', 'All numbers are identical in mannwhitneyu')
    # Processing the call keyword arguments (line 4883)
    kwargs_587656 = {}
    # Getting the type of 'ValueError' (line 4883)
    ValueError_587654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4883, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 4883)
    ValueError_call_result_587657 = invoke(stypy.reporting.localization.Localization(__file__, 4883, 14), ValueError_587654, *[str_587655], **kwargs_587656)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4883, 8), ValueError_call_result_587657, 'raise parameter', BaseException)
    # SSA join for if statement (line 4882)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 4884):
    
    # Assigning a Call to a Name (line 4884):
    
    # Call to sqrt(...): (line 4884)
    # Processing the call arguments (line 4884)
    # Getting the type of 'T' (line 4884)
    T_587660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4884, 17), 'T', False)
    # Getting the type of 'n1' (line 4884)
    n1_587661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4884, 21), 'n1', False)
    # Applying the binary operator '*' (line 4884)
    result_mul_587662 = python_operator(stypy.reporting.localization.Localization(__file__, 4884, 17), '*', T_587660, n1_587661)
    
    # Getting the type of 'n2' (line 4884)
    n2_587663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4884, 26), 'n2', False)
    # Applying the binary operator '*' (line 4884)
    result_mul_587664 = python_operator(stypy.reporting.localization.Localization(__file__, 4884, 24), '*', result_mul_587662, n2_587663)
    
    # Getting the type of 'n1' (line 4884)
    n1_587665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4884, 32), 'n1', False)
    # Getting the type of 'n2' (line 4884)
    n2_587666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4884, 35), 'n2', False)
    # Applying the binary operator '+' (line 4884)
    result_add_587667 = python_operator(stypy.reporting.localization.Localization(__file__, 4884, 32), '+', n1_587665, n2_587666)
    
    int_587668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4884, 38), 'int')
    # Applying the binary operator '+' (line 4884)
    result_add_587669 = python_operator(stypy.reporting.localization.Localization(__file__, 4884, 37), '+', result_add_587667, int_587668)
    
    # Applying the binary operator '*' (line 4884)
    result_mul_587670 = python_operator(stypy.reporting.localization.Localization(__file__, 4884, 29), '*', result_mul_587664, result_add_587669)
    
    float_587671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4884, 43), 'float')
    # Applying the binary operator 'div' (line 4884)
    result_div_587672 = python_operator(stypy.reporting.localization.Localization(__file__, 4884, 41), 'div', result_mul_587670, float_587671)
    
    # Processing the call keyword arguments (line 4884)
    kwargs_587673 = {}
    # Getting the type of 'np' (line 4884)
    np_587658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4884, 9), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 4884)
    sqrt_587659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4884, 9), np_587658, 'sqrt')
    # Calling sqrt(args, kwargs) (line 4884)
    sqrt_call_result_587674 = invoke(stypy.reporting.localization.Localization(__file__, 4884, 9), sqrt_587659, *[result_div_587672], **kwargs_587673)
    
    # Assigning a type to the variable 'sd' (line 4884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4884, 4), 'sd', sqrt_call_result_587674)
    
    # Assigning a BinOp to a Name (line 4886):
    
    # Assigning a BinOp to a Name (line 4886):
    # Getting the type of 'n1' (line 4886)
    n1_587675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4886, 15), 'n1')
    # Getting the type of 'n2' (line 4886)
    n2_587676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4886, 18), 'n2')
    # Applying the binary operator '*' (line 4886)
    result_mul_587677 = python_operator(stypy.reporting.localization.Localization(__file__, 4886, 15), '*', n1_587675, n2_587676)
    
    float_587678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4886, 21), 'float')
    # Applying the binary operator 'div' (line 4886)
    result_div_587679 = python_operator(stypy.reporting.localization.Localization(__file__, 4886, 20), 'div', result_mul_587677, float_587678)
    
    float_587680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4886, 27), 'float')
    # Getting the type of 'use_continuity' (line 4886)
    use_continuity_587681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4886, 33), 'use_continuity')
    # Applying the binary operator '*' (line 4886)
    result_mul_587682 = python_operator(stypy.reporting.localization.Localization(__file__, 4886, 27), '*', float_587680, use_continuity_587681)
    
    # Applying the binary operator '+' (line 4886)
    result_add_587683 = python_operator(stypy.reporting.localization.Localization(__file__, 4886, 15), '+', result_div_587679, result_mul_587682)
    
    # Assigning a type to the variable 'meanrank' (line 4886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4886, 4), 'meanrank', result_add_587683)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'alternative' (line 4887)
    alternative_587684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4887, 7), 'alternative')
    # Getting the type of 'None' (line 4887)
    None_587685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4887, 22), 'None')
    # Applying the binary operator 'is' (line 4887)
    result_is__587686 = python_operator(stypy.reporting.localization.Localization(__file__, 4887, 7), 'is', alternative_587684, None_587685)
    
    
    # Getting the type of 'alternative' (line 4887)
    alternative_587687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4887, 30), 'alternative')
    str_587688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4887, 45), 'str', 'two-sided')
    # Applying the binary operator '==' (line 4887)
    result_eq_587689 = python_operator(stypy.reporting.localization.Localization(__file__, 4887, 30), '==', alternative_587687, str_587688)
    
    # Applying the binary operator 'or' (line 4887)
    result_or_keyword_587690 = python_operator(stypy.reporting.localization.Localization(__file__, 4887, 7), 'or', result_is__587686, result_eq_587689)
    
    # Testing the type of an if condition (line 4887)
    if_condition_587691 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4887, 4), result_or_keyword_587690)
    # Assigning a type to the variable 'if_condition_587691' (line 4887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4887, 4), 'if_condition_587691', if_condition_587691)
    # SSA begins for if statement (line 4887)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4888):
    
    # Assigning a Call to a Name (line 4888):
    
    # Call to max(...): (line 4888)
    # Processing the call arguments (line 4888)
    # Getting the type of 'u1' (line 4888)
    u1_587693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4888, 19), 'u1', False)
    # Getting the type of 'u2' (line 4888)
    u2_587694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4888, 23), 'u2', False)
    # Processing the call keyword arguments (line 4888)
    kwargs_587695 = {}
    # Getting the type of 'max' (line 4888)
    max_587692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4888, 15), 'max', False)
    # Calling max(args, kwargs) (line 4888)
    max_call_result_587696 = invoke(stypy.reporting.localization.Localization(__file__, 4888, 15), max_587692, *[u1_587693, u2_587694], **kwargs_587695)
    
    # Assigning a type to the variable 'bigu' (line 4888)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4888, 8), 'bigu', max_call_result_587696)
    # SSA branch for the else part of an if statement (line 4887)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'alternative' (line 4889)
    alternative_587697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4889, 9), 'alternative')
    str_587698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4889, 24), 'str', 'less')
    # Applying the binary operator '==' (line 4889)
    result_eq_587699 = python_operator(stypy.reporting.localization.Localization(__file__, 4889, 9), '==', alternative_587697, str_587698)
    
    # Testing the type of an if condition (line 4889)
    if_condition_587700 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4889, 9), result_eq_587699)
    # Assigning a type to the variable 'if_condition_587700' (line 4889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4889, 9), 'if_condition_587700', if_condition_587700)
    # SSA begins for if statement (line 4889)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 4890):
    
    # Assigning a Name to a Name (line 4890):
    # Getting the type of 'u1' (line 4890)
    u1_587701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4890, 15), 'u1')
    # Assigning a type to the variable 'bigu' (line 4890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4890, 8), 'bigu', u1_587701)
    # SSA branch for the else part of an if statement (line 4889)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'alternative' (line 4891)
    alternative_587702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4891, 9), 'alternative')
    str_587703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4891, 24), 'str', 'greater')
    # Applying the binary operator '==' (line 4891)
    result_eq_587704 = python_operator(stypy.reporting.localization.Localization(__file__, 4891, 9), '==', alternative_587702, str_587703)
    
    # Testing the type of an if condition (line 4891)
    if_condition_587705 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4891, 9), result_eq_587704)
    # Assigning a type to the variable 'if_condition_587705' (line 4891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4891, 9), 'if_condition_587705', if_condition_587705)
    # SSA begins for if statement (line 4891)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 4892):
    
    # Assigning a Name to a Name (line 4892):
    # Getting the type of 'u2' (line 4892)
    u2_587706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4892, 15), 'u2')
    # Assigning a type to the variable 'bigu' (line 4892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4892, 8), 'bigu', u2_587706)
    # SSA branch for the else part of an if statement (line 4891)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 4894)
    # Processing the call arguments (line 4894)
    str_587708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4894, 25), 'str', "alternative should be None, 'less', 'greater' or 'two-sided'")
    # Processing the call keyword arguments (line 4894)
    kwargs_587709 = {}
    # Getting the type of 'ValueError' (line 4894)
    ValueError_587707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4894, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 4894)
    ValueError_call_result_587710 = invoke(stypy.reporting.localization.Localization(__file__, 4894, 14), ValueError_587707, *[str_587708], **kwargs_587709)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4894, 8), ValueError_call_result_587710, 'raise parameter', BaseException)
    # SSA join for if statement (line 4891)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4889)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4887)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 4897):
    
    # Assigning a BinOp to a Name (line 4897):
    # Getting the type of 'bigu' (line 4897)
    bigu_587711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4897, 9), 'bigu')
    # Getting the type of 'meanrank' (line 4897)
    meanrank_587712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4897, 16), 'meanrank')
    # Applying the binary operator '-' (line 4897)
    result_sub_587713 = python_operator(stypy.reporting.localization.Localization(__file__, 4897, 9), '-', bigu_587711, meanrank_587712)
    
    # Getting the type of 'sd' (line 4897)
    sd_587714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4897, 28), 'sd')
    # Applying the binary operator 'div' (line 4897)
    result_div_587715 = python_operator(stypy.reporting.localization.Localization(__file__, 4897, 8), 'div', result_sub_587713, sd_587714)
    
    # Assigning a type to the variable 'z' (line 4897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4897, 4), 'z', result_div_587715)
    
    # Type idiom detected: calculating its left and rigth part (line 4898)
    # Getting the type of 'alternative' (line 4898)
    alternative_587716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4898, 7), 'alternative')
    # Getting the type of 'None' (line 4898)
    None_587717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4898, 22), 'None')
    
    (may_be_587718, more_types_in_union_587719) = may_be_none(alternative_587716, None_587717)

    if may_be_587718:

        if more_types_in_union_587719:
            # Runtime conditional SSA (line 4898)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 4901):
        
        # Assigning a Call to a Name (line 4901):
        
        # Call to sf(...): (line 4901)
        # Processing the call arguments (line 4901)
        
        # Call to abs(...): (line 4901)
        # Processing the call arguments (line 4901)
        # Getting the type of 'z' (line 4901)
        z_587724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4901, 38), 'z', False)
        # Processing the call keyword arguments (line 4901)
        kwargs_587725 = {}
        # Getting the type of 'abs' (line 4901)
        abs_587723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4901, 34), 'abs', False)
        # Calling abs(args, kwargs) (line 4901)
        abs_call_result_587726 = invoke(stypy.reporting.localization.Localization(__file__, 4901, 34), abs_587723, *[z_587724], **kwargs_587725)
        
        # Processing the call keyword arguments (line 4901)
        kwargs_587727 = {}
        # Getting the type of 'distributions' (line 4901)
        distributions_587720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4901, 12), 'distributions', False)
        # Obtaining the member 'norm' of a type (line 4901)
        norm_587721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4901, 12), distributions_587720, 'norm')
        # Obtaining the member 'sf' of a type (line 4901)
        sf_587722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4901, 12), norm_587721, 'sf')
        # Calling sf(args, kwargs) (line 4901)
        sf_call_result_587728 = invoke(stypy.reporting.localization.Localization(__file__, 4901, 12), sf_587722, *[abs_call_result_587726], **kwargs_587727)
        
        # Assigning a type to the variable 'p' (line 4901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4901, 8), 'p', sf_call_result_587728)

        if more_types_in_union_587719:
            # Runtime conditional SSA for else branch (line 4898)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_587718) or more_types_in_union_587719):
        
        
        # Getting the type of 'alternative' (line 4902)
        alternative_587729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4902, 9), 'alternative')
        str_587730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4902, 24), 'str', 'two-sided')
        # Applying the binary operator '==' (line 4902)
        result_eq_587731 = python_operator(stypy.reporting.localization.Localization(__file__, 4902, 9), '==', alternative_587729, str_587730)
        
        # Testing the type of an if condition (line 4902)
        if_condition_587732 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4902, 9), result_eq_587731)
        # Assigning a type to the variable 'if_condition_587732' (line 4902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4902, 9), 'if_condition_587732', if_condition_587732)
        # SSA begins for if statement (line 4902)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 4903):
        
        # Assigning a BinOp to a Name (line 4903):
        int_587733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4903, 12), 'int')
        
        # Call to sf(...): (line 4903)
        # Processing the call arguments (line 4903)
        
        # Call to abs(...): (line 4903)
        # Processing the call arguments (line 4903)
        # Getting the type of 'z' (line 4903)
        z_587738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4903, 42), 'z', False)
        # Processing the call keyword arguments (line 4903)
        kwargs_587739 = {}
        # Getting the type of 'abs' (line 4903)
        abs_587737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4903, 38), 'abs', False)
        # Calling abs(args, kwargs) (line 4903)
        abs_call_result_587740 = invoke(stypy.reporting.localization.Localization(__file__, 4903, 38), abs_587737, *[z_587738], **kwargs_587739)
        
        # Processing the call keyword arguments (line 4903)
        kwargs_587741 = {}
        # Getting the type of 'distributions' (line 4903)
        distributions_587734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4903, 16), 'distributions', False)
        # Obtaining the member 'norm' of a type (line 4903)
        norm_587735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4903, 16), distributions_587734, 'norm')
        # Obtaining the member 'sf' of a type (line 4903)
        sf_587736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4903, 16), norm_587735, 'sf')
        # Calling sf(args, kwargs) (line 4903)
        sf_call_result_587742 = invoke(stypy.reporting.localization.Localization(__file__, 4903, 16), sf_587736, *[abs_call_result_587740], **kwargs_587741)
        
        # Applying the binary operator '*' (line 4903)
        result_mul_587743 = python_operator(stypy.reporting.localization.Localization(__file__, 4903, 12), '*', int_587733, sf_call_result_587742)
        
        # Assigning a type to the variable 'p' (line 4903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4903, 8), 'p', result_mul_587743)
        # SSA branch for the else part of an if statement (line 4902)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 4905):
        
        # Assigning a Call to a Name (line 4905):
        
        # Call to sf(...): (line 4905)
        # Processing the call arguments (line 4905)
        # Getting the type of 'z' (line 4905)
        z_587747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4905, 34), 'z', False)
        # Processing the call keyword arguments (line 4905)
        kwargs_587748 = {}
        # Getting the type of 'distributions' (line 4905)
        distributions_587744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4905, 12), 'distributions', False)
        # Obtaining the member 'norm' of a type (line 4905)
        norm_587745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4905, 12), distributions_587744, 'norm')
        # Obtaining the member 'sf' of a type (line 4905)
        sf_587746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4905, 12), norm_587745, 'sf')
        # Calling sf(args, kwargs) (line 4905)
        sf_call_result_587749 = invoke(stypy.reporting.localization.Localization(__file__, 4905, 12), sf_587746, *[z_587747], **kwargs_587748)
        
        # Assigning a type to the variable 'p' (line 4905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4905, 8), 'p', sf_call_result_587749)
        # SSA join for if statement (line 4902)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_587718 and more_types_in_union_587719):
            # SSA join for if statement (line 4898)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 4907):
    
    # Assigning a Name to a Name (line 4907):
    # Getting the type of 'u2' (line 4907)
    u2_587750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4907, 8), 'u2')
    # Assigning a type to the variable 'u' (line 4907)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4907, 4), 'u', u2_587750)
    
    # Type idiom detected: calculating its left and rigth part (line 4909)
    # Getting the type of 'alternative' (line 4909)
    alternative_587751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4909, 7), 'alternative')
    # Getting the type of 'None' (line 4909)
    None_587752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4909, 22), 'None')
    
    (may_be_587753, more_types_in_union_587754) = may_be_none(alternative_587751, None_587752)

    if may_be_587753:

        if more_types_in_union_587754:
            # Runtime conditional SSA (line 4909)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 4910):
        
        # Assigning a Call to a Name (line 4910):
        
        # Call to min(...): (line 4910)
        # Processing the call arguments (line 4910)
        # Getting the type of 'u1' (line 4910)
        u1_587756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4910, 16), 'u1', False)
        # Getting the type of 'u2' (line 4910)
        u2_587757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4910, 20), 'u2', False)
        # Processing the call keyword arguments (line 4910)
        kwargs_587758 = {}
        # Getting the type of 'min' (line 4910)
        min_587755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4910, 12), 'min', False)
        # Calling min(args, kwargs) (line 4910)
        min_call_result_587759 = invoke(stypy.reporting.localization.Localization(__file__, 4910, 12), min_587755, *[u1_587756, u2_587757], **kwargs_587758)
        
        # Assigning a type to the variable 'u' (line 4910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4910, 8), 'u', min_call_result_587759)

        if more_types_in_union_587754:
            # SSA join for if statement (line 4909)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to MannwhitneyuResult(...): (line 4911)
    # Processing the call arguments (line 4911)
    # Getting the type of 'u' (line 4911)
    u_587761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4911, 30), 'u', False)
    # Getting the type of 'p' (line 4911)
    p_587762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4911, 33), 'p', False)
    # Processing the call keyword arguments (line 4911)
    kwargs_587763 = {}
    # Getting the type of 'MannwhitneyuResult' (line 4911)
    MannwhitneyuResult_587760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4911, 11), 'MannwhitneyuResult', False)
    # Calling MannwhitneyuResult(args, kwargs) (line 4911)
    MannwhitneyuResult_call_result_587764 = invoke(stypy.reporting.localization.Localization(__file__, 4911, 11), MannwhitneyuResult_587760, *[u_587761, p_587762], **kwargs_587763)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4911, 4), 'stypy_return_type', MannwhitneyuResult_call_result_587764)
    
    # ################# End of 'mannwhitneyu(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mannwhitneyu' in the type store
    # Getting the type of 'stypy_return_type' (line 4822)
    stypy_return_type_587765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4822, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_587765)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mannwhitneyu'
    return stypy_return_type_587765

# Assigning a type to the variable 'mannwhitneyu' (line 4822)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4822, 0), 'mannwhitneyu', mannwhitneyu)

# Assigning a Call to a Name (line 4913):

# Assigning a Call to a Name (line 4913):

# Call to namedtuple(...): (line 4913)
# Processing the call arguments (line 4913)
str_587767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4913, 28), 'str', 'RanksumsResult')

# Obtaining an instance of the builtin type 'tuple' (line 4913)
tuple_587768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4913, 47), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 4913)
# Adding element type (line 4913)
str_587769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4913, 47), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4913, 47), tuple_587768, str_587769)
# Adding element type (line 4913)
str_587770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4913, 60), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4913, 47), tuple_587768, str_587770)

# Processing the call keyword arguments (line 4913)
kwargs_587771 = {}
# Getting the type of 'namedtuple' (line 4913)
namedtuple_587766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4913, 17), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 4913)
namedtuple_call_result_587772 = invoke(stypy.reporting.localization.Localization(__file__, 4913, 17), namedtuple_587766, *[str_587767, tuple_587768], **kwargs_587771)

# Assigning a type to the variable 'RanksumsResult' (line 4913)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4913, 0), 'RanksumsResult', namedtuple_call_result_587772)

@norecursion
def ranksums(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ranksums'
    module_type_store = module_type_store.open_function_context('ranksums', 4916, 0, False)
    
    # Passed parameters checking function
    ranksums.stypy_localization = localization
    ranksums.stypy_type_of_self = None
    ranksums.stypy_type_store = module_type_store
    ranksums.stypy_function_name = 'ranksums'
    ranksums.stypy_param_names_list = ['x', 'y']
    ranksums.stypy_varargs_param_name = None
    ranksums.stypy_kwargs_param_name = None
    ranksums.stypy_call_defaults = defaults
    ranksums.stypy_call_varargs = varargs
    ranksums.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ranksums', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ranksums', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ranksums(...)' code ##################

    str_587773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4947, (-1)), 'str', '\n    Compute the Wilcoxon rank-sum statistic for two samples.\n\n    The Wilcoxon rank-sum test tests the null hypothesis that two sets\n    of measurements are drawn from the same distribution.  The alternative\n    hypothesis is that values in one sample are more likely to be\n    larger than the values in the other sample.\n\n    This test should be used to compare two samples from continuous\n    distributions.  It does not handle ties between measurements\n    in x and y.  For tie-handling and an optional continuity correction\n    see `scipy.stats.mannwhitneyu`.\n\n    Parameters\n    ----------\n    x,y : array_like\n        The data from the two samples\n\n    Returns\n    -------\n    statistic : float\n        The test statistic under the large-sample approximation that the\n        rank sum statistic is normally distributed\n    pvalue : float\n        The two-sided p-value of the test\n\n    References\n    ----------\n    .. [1] http://en.wikipedia.org/wiki/Wilcoxon_rank-sum_test\n\n    ')
    
    # Assigning a Call to a Tuple (line 4948):
    
    # Assigning a Subscript to a Name (line 4948):
    
    # Obtaining the type of the subscript
    int_587774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4948, 4), 'int')
    
    # Call to map(...): (line 4948)
    # Processing the call arguments (line 4948)
    # Getting the type of 'np' (line 4948)
    np_587776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4948, 15), 'np', False)
    # Obtaining the member 'asarray' of a type (line 4948)
    asarray_587777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4948, 15), np_587776, 'asarray')
    
    # Obtaining an instance of the builtin type 'tuple' (line 4948)
    tuple_587778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4948, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4948)
    # Adding element type (line 4948)
    # Getting the type of 'x' (line 4948)
    x_587779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4948, 28), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4948, 28), tuple_587778, x_587779)
    # Adding element type (line 4948)
    # Getting the type of 'y' (line 4948)
    y_587780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4948, 31), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4948, 28), tuple_587778, y_587780)
    
    # Processing the call keyword arguments (line 4948)
    kwargs_587781 = {}
    # Getting the type of 'map' (line 4948)
    map_587775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4948, 11), 'map', False)
    # Calling map(args, kwargs) (line 4948)
    map_call_result_587782 = invoke(stypy.reporting.localization.Localization(__file__, 4948, 11), map_587775, *[asarray_587777, tuple_587778], **kwargs_587781)
    
    # Obtaining the member '__getitem__' of a type (line 4948)
    getitem___587783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4948, 4), map_call_result_587782, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4948)
    subscript_call_result_587784 = invoke(stypy.reporting.localization.Localization(__file__, 4948, 4), getitem___587783, int_587774)
    
    # Assigning a type to the variable 'tuple_var_assignment_579977' (line 4948)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4948, 4), 'tuple_var_assignment_579977', subscript_call_result_587784)
    
    # Assigning a Subscript to a Name (line 4948):
    
    # Obtaining the type of the subscript
    int_587785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4948, 4), 'int')
    
    # Call to map(...): (line 4948)
    # Processing the call arguments (line 4948)
    # Getting the type of 'np' (line 4948)
    np_587787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4948, 15), 'np', False)
    # Obtaining the member 'asarray' of a type (line 4948)
    asarray_587788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4948, 15), np_587787, 'asarray')
    
    # Obtaining an instance of the builtin type 'tuple' (line 4948)
    tuple_587789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4948, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4948)
    # Adding element type (line 4948)
    # Getting the type of 'x' (line 4948)
    x_587790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4948, 28), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4948, 28), tuple_587789, x_587790)
    # Adding element type (line 4948)
    # Getting the type of 'y' (line 4948)
    y_587791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4948, 31), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4948, 28), tuple_587789, y_587791)
    
    # Processing the call keyword arguments (line 4948)
    kwargs_587792 = {}
    # Getting the type of 'map' (line 4948)
    map_587786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4948, 11), 'map', False)
    # Calling map(args, kwargs) (line 4948)
    map_call_result_587793 = invoke(stypy.reporting.localization.Localization(__file__, 4948, 11), map_587786, *[asarray_587788, tuple_587789], **kwargs_587792)
    
    # Obtaining the member '__getitem__' of a type (line 4948)
    getitem___587794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4948, 4), map_call_result_587793, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4948)
    subscript_call_result_587795 = invoke(stypy.reporting.localization.Localization(__file__, 4948, 4), getitem___587794, int_587785)
    
    # Assigning a type to the variable 'tuple_var_assignment_579978' (line 4948)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4948, 4), 'tuple_var_assignment_579978', subscript_call_result_587795)
    
    # Assigning a Name to a Name (line 4948):
    # Getting the type of 'tuple_var_assignment_579977' (line 4948)
    tuple_var_assignment_579977_587796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4948, 4), 'tuple_var_assignment_579977')
    # Assigning a type to the variable 'x' (line 4948)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4948, 4), 'x', tuple_var_assignment_579977_587796)
    
    # Assigning a Name to a Name (line 4948):
    # Getting the type of 'tuple_var_assignment_579978' (line 4948)
    tuple_var_assignment_579978_587797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4948, 4), 'tuple_var_assignment_579978')
    # Assigning a type to the variable 'y' (line 4948)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4948, 7), 'y', tuple_var_assignment_579978_587797)
    
    # Assigning a Call to a Name (line 4949):
    
    # Assigning a Call to a Name (line 4949):
    
    # Call to len(...): (line 4949)
    # Processing the call arguments (line 4949)
    # Getting the type of 'x' (line 4949)
    x_587799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4949, 13), 'x', False)
    # Processing the call keyword arguments (line 4949)
    kwargs_587800 = {}
    # Getting the type of 'len' (line 4949)
    len_587798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4949, 9), 'len', False)
    # Calling len(args, kwargs) (line 4949)
    len_call_result_587801 = invoke(stypy.reporting.localization.Localization(__file__, 4949, 9), len_587798, *[x_587799], **kwargs_587800)
    
    # Assigning a type to the variable 'n1' (line 4949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4949, 4), 'n1', len_call_result_587801)
    
    # Assigning a Call to a Name (line 4950):
    
    # Assigning a Call to a Name (line 4950):
    
    # Call to len(...): (line 4950)
    # Processing the call arguments (line 4950)
    # Getting the type of 'y' (line 4950)
    y_587803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4950, 13), 'y', False)
    # Processing the call keyword arguments (line 4950)
    kwargs_587804 = {}
    # Getting the type of 'len' (line 4950)
    len_587802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4950, 9), 'len', False)
    # Calling len(args, kwargs) (line 4950)
    len_call_result_587805 = invoke(stypy.reporting.localization.Localization(__file__, 4950, 9), len_587802, *[y_587803], **kwargs_587804)
    
    # Assigning a type to the variable 'n2' (line 4950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4950, 4), 'n2', len_call_result_587805)
    
    # Assigning a Call to a Name (line 4951):
    
    # Assigning a Call to a Name (line 4951):
    
    # Call to concatenate(...): (line 4951)
    # Processing the call arguments (line 4951)
    
    # Obtaining an instance of the builtin type 'tuple' (line 4951)
    tuple_587808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4951, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4951)
    # Adding element type (line 4951)
    # Getting the type of 'x' (line 4951)
    x_587809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4951, 30), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4951, 30), tuple_587808, x_587809)
    # Adding element type (line 4951)
    # Getting the type of 'y' (line 4951)
    y_587810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4951, 33), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4951, 30), tuple_587808, y_587810)
    
    # Processing the call keyword arguments (line 4951)
    kwargs_587811 = {}
    # Getting the type of 'np' (line 4951)
    np_587806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4951, 14), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 4951)
    concatenate_587807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4951, 14), np_587806, 'concatenate')
    # Calling concatenate(args, kwargs) (line 4951)
    concatenate_call_result_587812 = invoke(stypy.reporting.localization.Localization(__file__, 4951, 14), concatenate_587807, *[tuple_587808], **kwargs_587811)
    
    # Assigning a type to the variable 'alldata' (line 4951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4951, 4), 'alldata', concatenate_call_result_587812)
    
    # Assigning a Call to a Name (line 4952):
    
    # Assigning a Call to a Name (line 4952):
    
    # Call to rankdata(...): (line 4952)
    # Processing the call arguments (line 4952)
    # Getting the type of 'alldata' (line 4952)
    alldata_587814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4952, 22), 'alldata', False)
    # Processing the call keyword arguments (line 4952)
    kwargs_587815 = {}
    # Getting the type of 'rankdata' (line 4952)
    rankdata_587813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4952, 13), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 4952)
    rankdata_call_result_587816 = invoke(stypy.reporting.localization.Localization(__file__, 4952, 13), rankdata_587813, *[alldata_587814], **kwargs_587815)
    
    # Assigning a type to the variable 'ranked' (line 4952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4952, 4), 'ranked', rankdata_call_result_587816)
    
    # Assigning a Subscript to a Name (line 4953):
    
    # Assigning a Subscript to a Name (line 4953):
    
    # Obtaining the type of the subscript
    # Getting the type of 'n1' (line 4953)
    n1_587817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4953, 16), 'n1')
    slice_587818 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 4953, 8), None, n1_587817, None)
    # Getting the type of 'ranked' (line 4953)
    ranked_587819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4953, 8), 'ranked')
    # Obtaining the member '__getitem__' of a type (line 4953)
    getitem___587820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4953, 8), ranked_587819, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4953)
    subscript_call_result_587821 = invoke(stypy.reporting.localization.Localization(__file__, 4953, 8), getitem___587820, slice_587818)
    
    # Assigning a type to the variable 'x' (line 4953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4953, 4), 'x', subscript_call_result_587821)
    
    # Assigning a Call to a Name (line 4954):
    
    # Assigning a Call to a Name (line 4954):
    
    # Call to sum(...): (line 4954)
    # Processing the call arguments (line 4954)
    # Getting the type of 'x' (line 4954)
    x_587824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4954, 15), 'x', False)
    # Processing the call keyword arguments (line 4954)
    int_587825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4954, 23), 'int')
    keyword_587826 = int_587825
    kwargs_587827 = {'axis': keyword_587826}
    # Getting the type of 'np' (line 4954)
    np_587822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4954, 8), 'np', False)
    # Obtaining the member 'sum' of a type (line 4954)
    sum_587823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4954, 8), np_587822, 'sum')
    # Calling sum(args, kwargs) (line 4954)
    sum_call_result_587828 = invoke(stypy.reporting.localization.Localization(__file__, 4954, 8), sum_587823, *[x_587824], **kwargs_587827)
    
    # Assigning a type to the variable 's' (line 4954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4954, 4), 's', sum_call_result_587828)
    
    # Assigning a BinOp to a Name (line 4955):
    
    # Assigning a BinOp to a Name (line 4955):
    # Getting the type of 'n1' (line 4955)
    n1_587829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4955, 15), 'n1')
    # Getting the type of 'n1' (line 4955)
    n1_587830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4955, 21), 'n1')
    # Getting the type of 'n2' (line 4955)
    n2_587831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4955, 24), 'n2')
    # Applying the binary operator '+' (line 4955)
    result_add_587832 = python_operator(stypy.reporting.localization.Localization(__file__, 4955, 21), '+', n1_587830, n2_587831)
    
    int_587833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4955, 27), 'int')
    # Applying the binary operator '+' (line 4955)
    result_add_587834 = python_operator(stypy.reporting.localization.Localization(__file__, 4955, 26), '+', result_add_587832, int_587833)
    
    # Applying the binary operator '*' (line 4955)
    result_mul_587835 = python_operator(stypy.reporting.localization.Localization(__file__, 4955, 15), '*', n1_587829, result_add_587834)
    
    float_587836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4955, 32), 'float')
    # Applying the binary operator 'div' (line 4955)
    result_div_587837 = python_operator(stypy.reporting.localization.Localization(__file__, 4955, 30), 'div', result_mul_587835, float_587836)
    
    # Assigning a type to the variable 'expected' (line 4955)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4955, 4), 'expected', result_div_587837)
    
    # Assigning a BinOp to a Name (line 4956):
    
    # Assigning a BinOp to a Name (line 4956):
    # Getting the type of 's' (line 4956)
    s_587838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4956, 9), 's')
    # Getting the type of 'expected' (line 4956)
    expected_587839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4956, 13), 'expected')
    # Applying the binary operator '-' (line 4956)
    result_sub_587840 = python_operator(stypy.reporting.localization.Localization(__file__, 4956, 9), '-', s_587838, expected_587839)
    
    
    # Call to sqrt(...): (line 4956)
    # Processing the call arguments (line 4956)
    # Getting the type of 'n1' (line 4956)
    n1_587843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4956, 33), 'n1', False)
    # Getting the type of 'n2' (line 4956)
    n2_587844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4956, 36), 'n2', False)
    # Applying the binary operator '*' (line 4956)
    result_mul_587845 = python_operator(stypy.reporting.localization.Localization(__file__, 4956, 33), '*', n1_587843, n2_587844)
    
    # Getting the type of 'n1' (line 4956)
    n1_587846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4956, 40), 'n1', False)
    # Getting the type of 'n2' (line 4956)
    n2_587847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4956, 43), 'n2', False)
    # Applying the binary operator '+' (line 4956)
    result_add_587848 = python_operator(stypy.reporting.localization.Localization(__file__, 4956, 40), '+', n1_587846, n2_587847)
    
    int_587849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4956, 46), 'int')
    # Applying the binary operator '+' (line 4956)
    result_add_587850 = python_operator(stypy.reporting.localization.Localization(__file__, 4956, 45), '+', result_add_587848, int_587849)
    
    # Applying the binary operator '*' (line 4956)
    result_mul_587851 = python_operator(stypy.reporting.localization.Localization(__file__, 4956, 38), '*', result_mul_587845, result_add_587850)
    
    float_587852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4956, 49), 'float')
    # Applying the binary operator 'div' (line 4956)
    result_div_587853 = python_operator(stypy.reporting.localization.Localization(__file__, 4956, 48), 'div', result_mul_587851, float_587852)
    
    # Processing the call keyword arguments (line 4956)
    kwargs_587854 = {}
    # Getting the type of 'np' (line 4956)
    np_587841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4956, 25), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 4956)
    sqrt_587842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4956, 25), np_587841, 'sqrt')
    # Calling sqrt(args, kwargs) (line 4956)
    sqrt_call_result_587855 = invoke(stypy.reporting.localization.Localization(__file__, 4956, 25), sqrt_587842, *[result_div_587853], **kwargs_587854)
    
    # Applying the binary operator 'div' (line 4956)
    result_div_587856 = python_operator(stypy.reporting.localization.Localization(__file__, 4956, 8), 'div', result_sub_587840, sqrt_call_result_587855)
    
    # Assigning a type to the variable 'z' (line 4956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4956, 4), 'z', result_div_587856)
    
    # Assigning a BinOp to a Name (line 4957):
    
    # Assigning a BinOp to a Name (line 4957):
    int_587857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4957, 11), 'int')
    
    # Call to sf(...): (line 4957)
    # Processing the call arguments (line 4957)
    
    # Call to abs(...): (line 4957)
    # Processing the call arguments (line 4957)
    # Getting the type of 'z' (line 4957)
    z_587862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4957, 41), 'z', False)
    # Processing the call keyword arguments (line 4957)
    kwargs_587863 = {}
    # Getting the type of 'abs' (line 4957)
    abs_587861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4957, 37), 'abs', False)
    # Calling abs(args, kwargs) (line 4957)
    abs_call_result_587864 = invoke(stypy.reporting.localization.Localization(__file__, 4957, 37), abs_587861, *[z_587862], **kwargs_587863)
    
    # Processing the call keyword arguments (line 4957)
    kwargs_587865 = {}
    # Getting the type of 'distributions' (line 4957)
    distributions_587858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4957, 15), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 4957)
    norm_587859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4957, 15), distributions_587858, 'norm')
    # Obtaining the member 'sf' of a type (line 4957)
    sf_587860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4957, 15), norm_587859, 'sf')
    # Calling sf(args, kwargs) (line 4957)
    sf_call_result_587866 = invoke(stypy.reporting.localization.Localization(__file__, 4957, 15), sf_587860, *[abs_call_result_587864], **kwargs_587865)
    
    # Applying the binary operator '*' (line 4957)
    result_mul_587867 = python_operator(stypy.reporting.localization.Localization(__file__, 4957, 11), '*', int_587857, sf_call_result_587866)
    
    # Assigning a type to the variable 'prob' (line 4957)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4957, 4), 'prob', result_mul_587867)
    
    # Call to RanksumsResult(...): (line 4959)
    # Processing the call arguments (line 4959)
    # Getting the type of 'z' (line 4959)
    z_587869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4959, 26), 'z', False)
    # Getting the type of 'prob' (line 4959)
    prob_587870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4959, 29), 'prob', False)
    # Processing the call keyword arguments (line 4959)
    kwargs_587871 = {}
    # Getting the type of 'RanksumsResult' (line 4959)
    RanksumsResult_587868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4959, 11), 'RanksumsResult', False)
    # Calling RanksumsResult(args, kwargs) (line 4959)
    RanksumsResult_call_result_587872 = invoke(stypy.reporting.localization.Localization(__file__, 4959, 11), RanksumsResult_587868, *[z_587869, prob_587870], **kwargs_587871)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4959, 4), 'stypy_return_type', RanksumsResult_call_result_587872)
    
    # ################# End of 'ranksums(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ranksums' in the type store
    # Getting the type of 'stypy_return_type' (line 4916)
    stypy_return_type_587873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4916, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_587873)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ranksums'
    return stypy_return_type_587873

# Assigning a type to the variable 'ranksums' (line 4916)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4916, 0), 'ranksums', ranksums)

# Assigning a Call to a Name (line 4961):

# Assigning a Call to a Name (line 4961):

# Call to namedtuple(...): (line 4961)
# Processing the call arguments (line 4961)
str_587875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4961, 27), 'str', 'KruskalResult')

# Obtaining an instance of the builtin type 'tuple' (line 4961)
tuple_587876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4961, 45), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 4961)
# Adding element type (line 4961)
str_587877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4961, 45), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4961, 45), tuple_587876, str_587877)
# Adding element type (line 4961)
str_587878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4961, 58), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4961, 45), tuple_587876, str_587878)

# Processing the call keyword arguments (line 4961)
kwargs_587879 = {}
# Getting the type of 'namedtuple' (line 4961)
namedtuple_587874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4961, 16), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 4961)
namedtuple_call_result_587880 = invoke(stypy.reporting.localization.Localization(__file__, 4961, 16), namedtuple_587874, *[str_587875, tuple_587876], **kwargs_587879)

# Assigning a type to the variable 'KruskalResult' (line 4961)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4961, 0), 'KruskalResult', namedtuple_call_result_587880)

@norecursion
def kruskal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'kruskal'
    module_type_store = module_type_store.open_function_context('kruskal', 4964, 0, False)
    
    # Passed parameters checking function
    kruskal.stypy_localization = localization
    kruskal.stypy_type_of_self = None
    kruskal.stypy_type_store = module_type_store
    kruskal.stypy_function_name = 'kruskal'
    kruskal.stypy_param_names_list = []
    kruskal.stypy_varargs_param_name = 'args'
    kruskal.stypy_kwargs_param_name = 'kwargs'
    kruskal.stypy_call_defaults = defaults
    kruskal.stypy_call_varargs = varargs
    kruskal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kruskal', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kruskal', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kruskal(...)' code ##################

    str_587881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5026, (-1)), 'str', '\n    Compute the Kruskal-Wallis H-test for independent samples\n\n    The Kruskal-Wallis H-test tests the null hypothesis that the population\n    median of all of the groups are equal.  It is a non-parametric version of\n    ANOVA.  The test works on 2 or more independent samples, which may have\n    different sizes.  Note that rejecting the null hypothesis does not\n    indicate which of the groups differs.  Post-hoc comparisons between\n    groups are required to determine which groups are different.\n\n    Parameters\n    ----------\n    sample1, sample2, ... : array_like\n       Two or more arrays with the sample measurements can be given as\n       arguments.\n    nan_policy : {\'propagate\', \'raise\', \'omit\'}, optional\n        Defines how to handle when input contains nan. \'propagate\' returns nan,\n        \'raise\' throws an error, \'omit\' performs the calculations ignoring nan\n        values. Default is \'propagate\'.\n\n    Returns\n    -------\n    statistic : float\n       The Kruskal-Wallis H statistic, corrected for ties\n    pvalue : float\n       The p-value for the test using the assumption that H has a chi\n       square distribution\n\n    See Also\n    --------\n    f_oneway : 1-way ANOVA\n    mannwhitneyu : Mann-Whitney rank test on two samples.\n    friedmanchisquare : Friedman test for repeated measurements\n\n    Notes\n    -----\n    Due to the assumption that H has a chi square distribution, the number\n    of samples in each group must not be too small.  A typical rule is\n    that each sample must have at least 5 measurements.\n\n    References\n    ----------\n    .. [1] W. H. Kruskal & W. W. Wallis, "Use of Ranks in\n       One-Criterion Variance Analysis", Journal of the American Statistical\n       Association, Vol. 47, Issue 260, pp. 583-621, 1952.\n    .. [2] http://en.wikipedia.org/wiki/Kruskal-Wallis_one-way_analysis_of_variance\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> x = [1, 3, 5, 7, 9]\n    >>> y = [2, 4, 6, 8, 10]\n    >>> stats.kruskal(x, y)\n    KruskalResult(statistic=0.27272727272727337, pvalue=0.60150813444058948)\n\n    >>> x = [1, 1, 1]\n    >>> y = [2, 2, 2]\n    >>> z = [2, 2]\n    >>> stats.kruskal(x, y, z)\n    KruskalResult(statistic=7.0, pvalue=0.030197383422318501)\n\n    ')
    
    # Assigning a Call to a Name (line 5027):
    
    # Assigning a Call to a Name (line 5027):
    
    # Call to list(...): (line 5027)
    # Processing the call arguments (line 5027)
    
    # Call to map(...): (line 5027)
    # Processing the call arguments (line 5027)
    # Getting the type of 'np' (line 5027)
    np_587884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5027, 20), 'np', False)
    # Obtaining the member 'asarray' of a type (line 5027)
    asarray_587885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5027, 20), np_587884, 'asarray')
    # Getting the type of 'args' (line 5027)
    args_587886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5027, 32), 'args', False)
    # Processing the call keyword arguments (line 5027)
    kwargs_587887 = {}
    # Getting the type of 'map' (line 5027)
    map_587883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5027, 16), 'map', False)
    # Calling map(args, kwargs) (line 5027)
    map_call_result_587888 = invoke(stypy.reporting.localization.Localization(__file__, 5027, 16), map_587883, *[asarray_587885, args_587886], **kwargs_587887)
    
    # Processing the call keyword arguments (line 5027)
    kwargs_587889 = {}
    # Getting the type of 'list' (line 5027)
    list_587882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5027, 11), 'list', False)
    # Calling list(args, kwargs) (line 5027)
    list_call_result_587890 = invoke(stypy.reporting.localization.Localization(__file__, 5027, 11), list_587882, *[map_call_result_587888], **kwargs_587889)
    
    # Assigning a type to the variable 'args' (line 5027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5027, 4), 'args', list_call_result_587890)
    
    # Assigning a Call to a Name (line 5028):
    
    # Assigning a Call to a Name (line 5028):
    
    # Call to len(...): (line 5028)
    # Processing the call arguments (line 5028)
    # Getting the type of 'args' (line 5028)
    args_587892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5028, 21), 'args', False)
    # Processing the call keyword arguments (line 5028)
    kwargs_587893 = {}
    # Getting the type of 'len' (line 5028)
    len_587891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5028, 17), 'len', False)
    # Calling len(args, kwargs) (line 5028)
    len_call_result_587894 = invoke(stypy.reporting.localization.Localization(__file__, 5028, 17), len_587891, *[args_587892], **kwargs_587893)
    
    # Assigning a type to the variable 'num_groups' (line 5028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5028, 4), 'num_groups', len_call_result_587894)
    
    
    # Getting the type of 'num_groups' (line 5029)
    num_groups_587895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5029, 7), 'num_groups')
    int_587896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5029, 20), 'int')
    # Applying the binary operator '<' (line 5029)
    result_lt_587897 = python_operator(stypy.reporting.localization.Localization(__file__, 5029, 7), '<', num_groups_587895, int_587896)
    
    # Testing the type of an if condition (line 5029)
    if_condition_587898 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5029, 4), result_lt_587897)
    # Assigning a type to the variable 'if_condition_587898' (line 5029)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5029, 4), 'if_condition_587898', if_condition_587898)
    # SSA begins for if statement (line 5029)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 5030)
    # Processing the call arguments (line 5030)
    str_587900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5030, 25), 'str', 'Need at least two groups in stats.kruskal()')
    # Processing the call keyword arguments (line 5030)
    kwargs_587901 = {}
    # Getting the type of 'ValueError' (line 5030)
    ValueError_587899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5030, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 5030)
    ValueError_call_result_587902 = invoke(stypy.reporting.localization.Localization(__file__, 5030, 14), ValueError_587899, *[str_587900], **kwargs_587901)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5030, 8), ValueError_call_result_587902, 'raise parameter', BaseException)
    # SSA join for if statement (line 5029)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'args' (line 5032)
    args_587903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5032, 15), 'args')
    # Testing the type of a for loop iterable (line 5032)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5032, 4), args_587903)
    # Getting the type of the for loop variable (line 5032)
    for_loop_var_587904 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5032, 4), args_587903)
    # Assigning a type to the variable 'arg' (line 5032)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5032, 4), 'arg', for_loop_var_587904)
    # SSA begins for a for statement (line 5032)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'arg' (line 5033)
    arg_587905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5033, 11), 'arg')
    # Obtaining the member 'size' of a type (line 5033)
    size_587906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5033, 11), arg_587905, 'size')
    int_587907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5033, 23), 'int')
    # Applying the binary operator '==' (line 5033)
    result_eq_587908 = python_operator(stypy.reporting.localization.Localization(__file__, 5033, 11), '==', size_587906, int_587907)
    
    # Testing the type of an if condition (line 5033)
    if_condition_587909 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5033, 8), result_eq_587908)
    # Assigning a type to the variable 'if_condition_587909' (line 5033)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5033, 8), 'if_condition_587909', if_condition_587909)
    # SSA begins for if statement (line 5033)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to KruskalResult(...): (line 5034)
    # Processing the call arguments (line 5034)
    # Getting the type of 'np' (line 5034)
    np_587911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5034, 33), 'np', False)
    # Obtaining the member 'nan' of a type (line 5034)
    nan_587912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5034, 33), np_587911, 'nan')
    # Getting the type of 'np' (line 5034)
    np_587913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5034, 41), 'np', False)
    # Obtaining the member 'nan' of a type (line 5034)
    nan_587914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5034, 41), np_587913, 'nan')
    # Processing the call keyword arguments (line 5034)
    kwargs_587915 = {}
    # Getting the type of 'KruskalResult' (line 5034)
    KruskalResult_587910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5034, 19), 'KruskalResult', False)
    # Calling KruskalResult(args, kwargs) (line 5034)
    KruskalResult_call_result_587916 = invoke(stypy.reporting.localization.Localization(__file__, 5034, 19), KruskalResult_587910, *[nan_587912, nan_587914], **kwargs_587915)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5034)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5034, 12), 'stypy_return_type', KruskalResult_call_result_587916)
    # SSA join for if statement (line 5033)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 5035):
    
    # Assigning a Call to a Name (line 5035):
    
    # Call to asarray(...): (line 5035)
    # Processing the call arguments (line 5035)
    
    # Call to list(...): (line 5035)
    # Processing the call arguments (line 5035)
    
    # Call to map(...): (line 5035)
    # Processing the call arguments (line 5035)
    # Getting the type of 'len' (line 5035)
    len_587921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5035, 28), 'len', False)
    # Getting the type of 'args' (line 5035)
    args_587922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5035, 33), 'args', False)
    # Processing the call keyword arguments (line 5035)
    kwargs_587923 = {}
    # Getting the type of 'map' (line 5035)
    map_587920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5035, 24), 'map', False)
    # Calling map(args, kwargs) (line 5035)
    map_call_result_587924 = invoke(stypy.reporting.localization.Localization(__file__, 5035, 24), map_587920, *[len_587921, args_587922], **kwargs_587923)
    
    # Processing the call keyword arguments (line 5035)
    kwargs_587925 = {}
    # Getting the type of 'list' (line 5035)
    list_587919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5035, 19), 'list', False)
    # Calling list(args, kwargs) (line 5035)
    list_call_result_587926 = invoke(stypy.reporting.localization.Localization(__file__, 5035, 19), list_587919, *[map_call_result_587924], **kwargs_587925)
    
    # Processing the call keyword arguments (line 5035)
    kwargs_587927 = {}
    # Getting the type of 'np' (line 5035)
    np_587917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5035, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 5035)
    asarray_587918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5035, 8), np_587917, 'asarray')
    # Calling asarray(args, kwargs) (line 5035)
    asarray_call_result_587928 = invoke(stypy.reporting.localization.Localization(__file__, 5035, 8), asarray_587918, *[list_call_result_587926], **kwargs_587927)
    
    # Assigning a type to the variable 'n' (line 5035)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5035, 4), 'n', asarray_call_result_587928)
    
    
    str_587929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5037, 7), 'str', 'nan_policy')
    
    # Call to keys(...): (line 5037)
    # Processing the call keyword arguments (line 5037)
    kwargs_587932 = {}
    # Getting the type of 'kwargs' (line 5037)
    kwargs_587930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5037, 23), 'kwargs', False)
    # Obtaining the member 'keys' of a type (line 5037)
    keys_587931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5037, 23), kwargs_587930, 'keys')
    # Calling keys(args, kwargs) (line 5037)
    keys_call_result_587933 = invoke(stypy.reporting.localization.Localization(__file__, 5037, 23), keys_587931, *[], **kwargs_587932)
    
    # Applying the binary operator 'in' (line 5037)
    result_contains_587934 = python_operator(stypy.reporting.localization.Localization(__file__, 5037, 7), 'in', str_587929, keys_call_result_587933)
    
    # Testing the type of an if condition (line 5037)
    if_condition_587935 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5037, 4), result_contains_587934)
    # Assigning a type to the variable 'if_condition_587935' (line 5037)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5037, 4), 'if_condition_587935', if_condition_587935)
    # SSA begins for if statement (line 5037)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Obtaining the type of the subscript
    str_587936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5038, 18), 'str', 'nan_policy')
    # Getting the type of 'kwargs' (line 5038)
    kwargs_587937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5038, 11), 'kwargs')
    # Obtaining the member '__getitem__' of a type (line 5038)
    getitem___587938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5038, 11), kwargs_587937, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5038)
    subscript_call_result_587939 = invoke(stypy.reporting.localization.Localization(__file__, 5038, 11), getitem___587938, str_587936)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 5038)
    tuple_587940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5038, 40), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 5038)
    # Adding element type (line 5038)
    str_587941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5038, 40), 'str', 'propagate')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5038, 40), tuple_587940, str_587941)
    # Adding element type (line 5038)
    str_587942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5038, 53), 'str', 'raise')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5038, 40), tuple_587940, str_587942)
    # Adding element type (line 5038)
    str_587943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5038, 62), 'str', 'omit')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5038, 40), tuple_587940, str_587943)
    
    # Applying the binary operator 'notin' (line 5038)
    result_contains_587944 = python_operator(stypy.reporting.localization.Localization(__file__, 5038, 11), 'notin', subscript_call_result_587939, tuple_587940)
    
    # Testing the type of an if condition (line 5038)
    if_condition_587945 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5038, 8), result_contains_587944)
    # Assigning a type to the variable 'if_condition_587945' (line 5038)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5038, 8), 'if_condition_587945', if_condition_587945)
    # SSA begins for if statement (line 5038)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 5039)
    # Processing the call arguments (line 5039)
    str_587947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5039, 29), 'str', "nan_policy must be 'propagate', 'raise' or'omit'")
    # Processing the call keyword arguments (line 5039)
    kwargs_587948 = {}
    # Getting the type of 'ValueError' (line 5039)
    ValueError_587946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5039, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 5039)
    ValueError_call_result_587949 = invoke(stypy.reporting.localization.Localization(__file__, 5039, 18), ValueError_587946, *[str_587947], **kwargs_587948)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5039, 12), ValueError_call_result_587949, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 5038)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 5042):
    
    # Assigning a Subscript to a Name (line 5042):
    
    # Obtaining the type of the subscript
    str_587950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5042, 32), 'str', 'nan_policy')
    # Getting the type of 'kwargs' (line 5042)
    kwargs_587951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5042, 25), 'kwargs')
    # Obtaining the member '__getitem__' of a type (line 5042)
    getitem___587952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5042, 25), kwargs_587951, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5042)
    subscript_call_result_587953 = invoke(stypy.reporting.localization.Localization(__file__, 5042, 25), getitem___587952, str_587950)
    
    # Assigning a type to the variable 'nan_policy' (line 5042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5042, 12), 'nan_policy', subscript_call_result_587953)
    # SSA join for if statement (line 5038)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 5037)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Str to a Name (line 5044):
    
    # Assigning a Str to a Name (line 5044):
    str_587954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5044, 21), 'str', 'propagate')
    # Assigning a type to the variable 'nan_policy' (line 5044)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5044, 8), 'nan_policy', str_587954)
    # SSA join for if statement (line 5037)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 5046):
    
    # Assigning a Name to a Name (line 5046):
    # Getting the type of 'False' (line 5046)
    False_587955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5046, 19), 'False')
    # Assigning a type to the variable 'contains_nan' (line 5046)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5046, 4), 'contains_nan', False_587955)
    
    # Getting the type of 'args' (line 5047)
    args_587956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5047, 15), 'args')
    # Testing the type of a for loop iterable (line 5047)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5047, 4), args_587956)
    # Getting the type of the for loop variable (line 5047)
    for_loop_var_587957 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5047, 4), args_587956)
    # Assigning a type to the variable 'arg' (line 5047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5047, 4), 'arg', for_loop_var_587957)
    # SSA begins for a for statement (line 5047)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 5048):
    
    # Assigning a Call to a Name (line 5048):
    
    # Call to _contains_nan(...): (line 5048)
    # Processing the call arguments (line 5048)
    # Getting the type of 'arg' (line 5048)
    arg_587959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5048, 27), 'arg', False)
    # Getting the type of 'nan_policy' (line 5048)
    nan_policy_587960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5048, 32), 'nan_policy', False)
    # Processing the call keyword arguments (line 5048)
    kwargs_587961 = {}
    # Getting the type of '_contains_nan' (line 5048)
    _contains_nan_587958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5048, 13), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 5048)
    _contains_nan_call_result_587962 = invoke(stypy.reporting.localization.Localization(__file__, 5048, 13), _contains_nan_587958, *[arg_587959, nan_policy_587960], **kwargs_587961)
    
    # Assigning a type to the variable 'cn' (line 5048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5048, 8), 'cn', _contains_nan_call_result_587962)
    
    
    # Obtaining the type of the subscript
    int_587963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5049, 14), 'int')
    # Getting the type of 'cn' (line 5049)
    cn_587964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5049, 11), 'cn')
    # Obtaining the member '__getitem__' of a type (line 5049)
    getitem___587965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5049, 11), cn_587964, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5049)
    subscript_call_result_587966 = invoke(stypy.reporting.localization.Localization(__file__, 5049, 11), getitem___587965, int_587963)
    
    # Testing the type of an if condition (line 5049)
    if_condition_587967 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5049, 8), subscript_call_result_587966)
    # Assigning a type to the variable 'if_condition_587967' (line 5049)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5049, 8), 'if_condition_587967', if_condition_587967)
    # SSA begins for if statement (line 5049)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 5050):
    
    # Assigning a Name to a Name (line 5050):
    # Getting the type of 'True' (line 5050)
    True_587968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5050, 27), 'True')
    # Assigning a type to the variable 'contains_nan' (line 5050)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5050, 12), 'contains_nan', True_587968)
    # SSA join for if statement (line 5049)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 5053)
    contains_nan_587969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5053, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 5053)
    nan_policy_587970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5053, 24), 'nan_policy')
    str_587971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5053, 38), 'str', 'omit')
    # Applying the binary operator '==' (line 5053)
    result_eq_587972 = python_operator(stypy.reporting.localization.Localization(__file__, 5053, 24), '==', nan_policy_587970, str_587971)
    
    # Applying the binary operator 'and' (line 5053)
    result_and_keyword_587973 = python_operator(stypy.reporting.localization.Localization(__file__, 5053, 7), 'and', contains_nan_587969, result_eq_587972)
    
    # Testing the type of an if condition (line 5053)
    if_condition_587974 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5053, 4), result_and_keyword_587973)
    # Assigning a type to the variable 'if_condition_587974' (line 5053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5053, 4), 'if_condition_587974', if_condition_587974)
    # SSA begins for if statement (line 5053)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'args' (line 5054)
    args_587975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5054, 17), 'args')
    # Testing the type of a for loop iterable (line 5054)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5054, 8), args_587975)
    # Getting the type of the for loop variable (line 5054)
    for_loop_var_587976 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5054, 8), args_587975)
    # Assigning a type to the variable 'a' (line 5054)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5054, 8), 'a', for_loop_var_587976)
    # SSA begins for a for statement (line 5054)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 5055):
    
    # Assigning a Call to a Name (line 5055):
    
    # Call to masked_invalid(...): (line 5055)
    # Processing the call arguments (line 5055)
    # Getting the type of 'a' (line 5055)
    a_587979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5055, 34), 'a', False)
    # Processing the call keyword arguments (line 5055)
    kwargs_587980 = {}
    # Getting the type of 'ma' (line 5055)
    ma_587977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5055, 16), 'ma', False)
    # Obtaining the member 'masked_invalid' of a type (line 5055)
    masked_invalid_587978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5055, 16), ma_587977, 'masked_invalid')
    # Calling masked_invalid(args, kwargs) (line 5055)
    masked_invalid_call_result_587981 = invoke(stypy.reporting.localization.Localization(__file__, 5055, 16), masked_invalid_587978, *[a_587979], **kwargs_587980)
    
    # Assigning a type to the variable 'a' (line 5055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5055, 12), 'a', masked_invalid_call_result_587981)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to kruskal(...): (line 5056)
    # Getting the type of 'args' (line 5056)
    args_587984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5056, 37), 'args', False)
    # Processing the call keyword arguments (line 5056)
    kwargs_587985 = {}
    # Getting the type of 'mstats_basic' (line 5056)
    mstats_basic_587982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5056, 15), 'mstats_basic', False)
    # Obtaining the member 'kruskal' of a type (line 5056)
    kruskal_587983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5056, 15), mstats_basic_587982, 'kruskal')
    # Calling kruskal(args, kwargs) (line 5056)
    kruskal_call_result_587986 = invoke(stypy.reporting.localization.Localization(__file__, 5056, 15), kruskal_587983, *[args_587984], **kwargs_587985)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5056, 8), 'stypy_return_type', kruskal_call_result_587986)
    # SSA join for if statement (line 5053)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 5058)
    contains_nan_587987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5058, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 5058)
    nan_policy_587988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5058, 24), 'nan_policy')
    str_587989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5058, 38), 'str', 'propagate')
    # Applying the binary operator '==' (line 5058)
    result_eq_587990 = python_operator(stypy.reporting.localization.Localization(__file__, 5058, 24), '==', nan_policy_587988, str_587989)
    
    # Applying the binary operator 'and' (line 5058)
    result_and_keyword_587991 = python_operator(stypy.reporting.localization.Localization(__file__, 5058, 7), 'and', contains_nan_587987, result_eq_587990)
    
    # Testing the type of an if condition (line 5058)
    if_condition_587992 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5058, 4), result_and_keyword_587991)
    # Assigning a type to the variable 'if_condition_587992' (line 5058)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5058, 4), 'if_condition_587992', if_condition_587992)
    # SSA begins for if statement (line 5058)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to KruskalResult(...): (line 5059)
    # Processing the call arguments (line 5059)
    # Getting the type of 'np' (line 5059)
    np_587994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5059, 29), 'np', False)
    # Obtaining the member 'nan' of a type (line 5059)
    nan_587995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5059, 29), np_587994, 'nan')
    # Getting the type of 'np' (line 5059)
    np_587996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5059, 37), 'np', False)
    # Obtaining the member 'nan' of a type (line 5059)
    nan_587997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5059, 37), np_587996, 'nan')
    # Processing the call keyword arguments (line 5059)
    kwargs_587998 = {}
    # Getting the type of 'KruskalResult' (line 5059)
    KruskalResult_587993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5059, 15), 'KruskalResult', False)
    # Calling KruskalResult(args, kwargs) (line 5059)
    KruskalResult_call_result_587999 = invoke(stypy.reporting.localization.Localization(__file__, 5059, 15), KruskalResult_587993, *[nan_587995, nan_587997], **kwargs_587998)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5059)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5059, 8), 'stypy_return_type', KruskalResult_call_result_587999)
    # SSA join for if statement (line 5058)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 5061):
    
    # Assigning a Call to a Name (line 5061):
    
    # Call to concatenate(...): (line 5061)
    # Processing the call arguments (line 5061)
    # Getting the type of 'args' (line 5061)
    args_588002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5061, 29), 'args', False)
    # Processing the call keyword arguments (line 5061)
    kwargs_588003 = {}
    # Getting the type of 'np' (line 5061)
    np_588000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5061, 14), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 5061)
    concatenate_588001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5061, 14), np_588000, 'concatenate')
    # Calling concatenate(args, kwargs) (line 5061)
    concatenate_call_result_588004 = invoke(stypy.reporting.localization.Localization(__file__, 5061, 14), concatenate_588001, *[args_588002], **kwargs_588003)
    
    # Assigning a type to the variable 'alldata' (line 5061)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5061, 4), 'alldata', concatenate_call_result_588004)
    
    # Assigning a Call to a Name (line 5062):
    
    # Assigning a Call to a Name (line 5062):
    
    # Call to rankdata(...): (line 5062)
    # Processing the call arguments (line 5062)
    # Getting the type of 'alldata' (line 5062)
    alldata_588006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5062, 22), 'alldata', False)
    # Processing the call keyword arguments (line 5062)
    kwargs_588007 = {}
    # Getting the type of 'rankdata' (line 5062)
    rankdata_588005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5062, 13), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 5062)
    rankdata_call_result_588008 = invoke(stypy.reporting.localization.Localization(__file__, 5062, 13), rankdata_588005, *[alldata_588006], **kwargs_588007)
    
    # Assigning a type to the variable 'ranked' (line 5062)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5062, 4), 'ranked', rankdata_call_result_588008)
    
    # Assigning a Call to a Name (line 5063):
    
    # Assigning a Call to a Name (line 5063):
    
    # Call to tiecorrect(...): (line 5063)
    # Processing the call arguments (line 5063)
    # Getting the type of 'ranked' (line 5063)
    ranked_588010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5063, 22), 'ranked', False)
    # Processing the call keyword arguments (line 5063)
    kwargs_588011 = {}
    # Getting the type of 'tiecorrect' (line 5063)
    tiecorrect_588009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5063, 11), 'tiecorrect', False)
    # Calling tiecorrect(args, kwargs) (line 5063)
    tiecorrect_call_result_588012 = invoke(stypy.reporting.localization.Localization(__file__, 5063, 11), tiecorrect_588009, *[ranked_588010], **kwargs_588011)
    
    # Assigning a type to the variable 'ties' (line 5063)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5063, 4), 'ties', tiecorrect_call_result_588012)
    
    
    # Getting the type of 'ties' (line 5064)
    ties_588013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5064, 7), 'ties')
    int_588014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5064, 15), 'int')
    # Applying the binary operator '==' (line 5064)
    result_eq_588015 = python_operator(stypy.reporting.localization.Localization(__file__, 5064, 7), '==', ties_588013, int_588014)
    
    # Testing the type of an if condition (line 5064)
    if_condition_588016 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5064, 4), result_eq_588015)
    # Assigning a type to the variable 'if_condition_588016' (line 5064)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5064, 4), 'if_condition_588016', if_condition_588016)
    # SSA begins for if statement (line 5064)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 5065)
    # Processing the call arguments (line 5065)
    str_588018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5065, 25), 'str', 'All numbers are identical in kruskal')
    # Processing the call keyword arguments (line 5065)
    kwargs_588019 = {}
    # Getting the type of 'ValueError' (line 5065)
    ValueError_588017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5065, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 5065)
    ValueError_call_result_588020 = invoke(stypy.reporting.localization.Localization(__file__, 5065, 14), ValueError_588017, *[str_588018], **kwargs_588019)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5065, 8), ValueError_call_result_588020, 'raise parameter', BaseException)
    # SSA join for if statement (line 5064)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 5068):
    
    # Assigning a Call to a Name (line 5068):
    
    # Call to insert(...): (line 5068)
    # Processing the call arguments (line 5068)
    
    # Call to cumsum(...): (line 5068)
    # Processing the call arguments (line 5068)
    # Getting the type of 'n' (line 5068)
    n_588025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5068, 28), 'n', False)
    # Processing the call keyword arguments (line 5068)
    kwargs_588026 = {}
    # Getting the type of 'np' (line 5068)
    np_588023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5068, 18), 'np', False)
    # Obtaining the member 'cumsum' of a type (line 5068)
    cumsum_588024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5068, 18), np_588023, 'cumsum')
    # Calling cumsum(args, kwargs) (line 5068)
    cumsum_call_result_588027 = invoke(stypy.reporting.localization.Localization(__file__, 5068, 18), cumsum_588024, *[n_588025], **kwargs_588026)
    
    int_588028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5068, 32), 'int')
    int_588029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5068, 35), 'int')
    # Processing the call keyword arguments (line 5068)
    kwargs_588030 = {}
    # Getting the type of 'np' (line 5068)
    np_588021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5068, 8), 'np', False)
    # Obtaining the member 'insert' of a type (line 5068)
    insert_588022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5068, 8), np_588021, 'insert')
    # Calling insert(args, kwargs) (line 5068)
    insert_call_result_588031 = invoke(stypy.reporting.localization.Localization(__file__, 5068, 8), insert_588022, *[cumsum_call_result_588027, int_588028, int_588029], **kwargs_588030)
    
    # Assigning a type to the variable 'j' (line 5068)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5068, 4), 'j', insert_call_result_588031)
    
    # Assigning a Num to a Name (line 5069):
    
    # Assigning a Num to a Name (line 5069):
    int_588032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5069, 11), 'int')
    # Assigning a type to the variable 'ssbn' (line 5069)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5069, 4), 'ssbn', int_588032)
    
    
    # Call to range(...): (line 5070)
    # Processing the call arguments (line 5070)
    # Getting the type of 'num_groups' (line 5070)
    num_groups_588034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5070, 19), 'num_groups', False)
    # Processing the call keyword arguments (line 5070)
    kwargs_588035 = {}
    # Getting the type of 'range' (line 5070)
    range_588033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5070, 13), 'range', False)
    # Calling range(args, kwargs) (line 5070)
    range_call_result_588036 = invoke(stypy.reporting.localization.Localization(__file__, 5070, 13), range_588033, *[num_groups_588034], **kwargs_588035)
    
    # Testing the type of a for loop iterable (line 5070)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5070, 4), range_call_result_588036)
    # Getting the type of the for loop variable (line 5070)
    for_loop_var_588037 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5070, 4), range_call_result_588036)
    # Assigning a type to the variable 'i' (line 5070)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5070, 4), 'i', for_loop_var_588037)
    # SSA begins for a for statement (line 5070)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'ssbn' (line 5071)
    ssbn_588038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 8), 'ssbn')
    
    # Call to _square_of_sums(...): (line 5071)
    # Processing the call arguments (line 5071)
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 5071)
    i_588040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 41), 'i', False)
    # Getting the type of 'j' (line 5071)
    j_588041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 39), 'j', False)
    # Obtaining the member '__getitem__' of a type (line 5071)
    getitem___588042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5071, 39), j_588041, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5071)
    subscript_call_result_588043 = invoke(stypy.reporting.localization.Localization(__file__, 5071, 39), getitem___588042, i_588040)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 5071)
    i_588044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 46), 'i', False)
    int_588045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5071, 48), 'int')
    # Applying the binary operator '+' (line 5071)
    result_add_588046 = python_operator(stypy.reporting.localization.Localization(__file__, 5071, 46), '+', i_588044, int_588045)
    
    # Getting the type of 'j' (line 5071)
    j_588047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 44), 'j', False)
    # Obtaining the member '__getitem__' of a type (line 5071)
    getitem___588048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5071, 44), j_588047, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5071)
    subscript_call_result_588049 = invoke(stypy.reporting.localization.Localization(__file__, 5071, 44), getitem___588048, result_add_588046)
    
    slice_588050 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 5071, 32), subscript_call_result_588043, subscript_call_result_588049, None)
    # Getting the type of 'ranked' (line 5071)
    ranked_588051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 32), 'ranked', False)
    # Obtaining the member '__getitem__' of a type (line 5071)
    getitem___588052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5071, 32), ranked_588051, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5071)
    subscript_call_result_588053 = invoke(stypy.reporting.localization.Localization(__file__, 5071, 32), getitem___588052, slice_588050)
    
    # Processing the call keyword arguments (line 5071)
    kwargs_588054 = {}
    # Getting the type of '_square_of_sums' (line 5071)
    _square_of_sums_588039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 16), '_square_of_sums', False)
    # Calling _square_of_sums(args, kwargs) (line 5071)
    _square_of_sums_call_result_588055 = invoke(stypy.reporting.localization.Localization(__file__, 5071, 16), _square_of_sums_588039, *[subscript_call_result_588053], **kwargs_588054)
    
    
    # Call to float(...): (line 5071)
    # Processing the call arguments (line 5071)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 5071)
    i_588057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 63), 'i', False)
    # Getting the type of 'n' (line 5071)
    n_588058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 61), 'n', False)
    # Obtaining the member '__getitem__' of a type (line 5071)
    getitem___588059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5071, 61), n_588058, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5071)
    subscript_call_result_588060 = invoke(stypy.reporting.localization.Localization(__file__, 5071, 61), getitem___588059, i_588057)
    
    # Processing the call keyword arguments (line 5071)
    kwargs_588061 = {}
    # Getting the type of 'float' (line 5071)
    float_588056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 55), 'float', False)
    # Calling float(args, kwargs) (line 5071)
    float_call_result_588062 = invoke(stypy.reporting.localization.Localization(__file__, 5071, 55), float_588056, *[subscript_call_result_588060], **kwargs_588061)
    
    # Applying the binary operator 'div' (line 5071)
    result_div_588063 = python_operator(stypy.reporting.localization.Localization(__file__, 5071, 16), 'div', _square_of_sums_call_result_588055, float_call_result_588062)
    
    # Applying the binary operator '+=' (line 5071)
    result_iadd_588064 = python_operator(stypy.reporting.localization.Localization(__file__, 5071, 8), '+=', ssbn_588038, result_div_588063)
    # Assigning a type to the variable 'ssbn' (line 5071)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5071, 8), 'ssbn', result_iadd_588064)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 5073):
    
    # Assigning a Call to a Name (line 5073):
    
    # Call to sum(...): (line 5073)
    # Processing the call arguments (line 5073)
    # Getting the type of 'n' (line 5073)
    n_588067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5073, 20), 'n', False)
    # Processing the call keyword arguments (line 5073)
    kwargs_588068 = {}
    # Getting the type of 'np' (line 5073)
    np_588065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5073, 13), 'np', False)
    # Obtaining the member 'sum' of a type (line 5073)
    sum_588066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5073, 13), np_588065, 'sum')
    # Calling sum(args, kwargs) (line 5073)
    sum_call_result_588069 = invoke(stypy.reporting.localization.Localization(__file__, 5073, 13), sum_588066, *[n_588067], **kwargs_588068)
    
    # Assigning a type to the variable 'totaln' (line 5073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5073, 4), 'totaln', sum_call_result_588069)
    
    # Assigning a BinOp to a Name (line 5074):
    
    # Assigning a BinOp to a Name (line 5074):
    float_588070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5074, 8), 'float')
    # Getting the type of 'totaln' (line 5074)
    totaln_588071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5074, 16), 'totaln')
    # Getting the type of 'totaln' (line 5074)
    totaln_588072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5074, 26), 'totaln')
    int_588073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5074, 35), 'int')
    # Applying the binary operator '+' (line 5074)
    result_add_588074 = python_operator(stypy.reporting.localization.Localization(__file__, 5074, 26), '+', totaln_588072, int_588073)
    
    # Applying the binary operator '*' (line 5074)
    result_mul_588075 = python_operator(stypy.reporting.localization.Localization(__file__, 5074, 16), '*', totaln_588071, result_add_588074)
    
    # Applying the binary operator 'div' (line 5074)
    result_div_588076 = python_operator(stypy.reporting.localization.Localization(__file__, 5074, 8), 'div', float_588070, result_mul_588075)
    
    # Getting the type of 'ssbn' (line 5074)
    ssbn_588077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5074, 41), 'ssbn')
    # Applying the binary operator '*' (line 5074)
    result_mul_588078 = python_operator(stypy.reporting.localization.Localization(__file__, 5074, 39), '*', result_div_588076, ssbn_588077)
    
    int_588079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5074, 48), 'int')
    # Getting the type of 'totaln' (line 5074)
    totaln_588080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5074, 53), 'totaln')
    int_588081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5074, 62), 'int')
    # Applying the binary operator '+' (line 5074)
    result_add_588082 = python_operator(stypy.reporting.localization.Localization(__file__, 5074, 53), '+', totaln_588080, int_588081)
    
    # Applying the binary operator '*' (line 5074)
    result_mul_588083 = python_operator(stypy.reporting.localization.Localization(__file__, 5074, 48), '*', int_588079, result_add_588082)
    
    # Applying the binary operator '-' (line 5074)
    result_sub_588084 = python_operator(stypy.reporting.localization.Localization(__file__, 5074, 8), '-', result_mul_588078, result_mul_588083)
    
    # Assigning a type to the variable 'h' (line 5074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5074, 4), 'h', result_sub_588084)
    
    # Assigning a BinOp to a Name (line 5075):
    
    # Assigning a BinOp to a Name (line 5075):
    # Getting the type of 'num_groups' (line 5075)
    num_groups_588085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5075, 9), 'num_groups')
    int_588086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5075, 22), 'int')
    # Applying the binary operator '-' (line 5075)
    result_sub_588087 = python_operator(stypy.reporting.localization.Localization(__file__, 5075, 9), '-', num_groups_588085, int_588086)
    
    # Assigning a type to the variable 'df' (line 5075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5075, 4), 'df', result_sub_588087)
    
    # Getting the type of 'h' (line 5076)
    h_588088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5076, 4), 'h')
    # Getting the type of 'ties' (line 5076)
    ties_588089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5076, 9), 'ties')
    # Applying the binary operator 'div=' (line 5076)
    result_div_588090 = python_operator(stypy.reporting.localization.Localization(__file__, 5076, 4), 'div=', h_588088, ties_588089)
    # Assigning a type to the variable 'h' (line 5076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5076, 4), 'h', result_div_588090)
    
    
    # Call to KruskalResult(...): (line 5078)
    # Processing the call arguments (line 5078)
    # Getting the type of 'h' (line 5078)
    h_588092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5078, 25), 'h', False)
    
    # Call to sf(...): (line 5078)
    # Processing the call arguments (line 5078)
    # Getting the type of 'h' (line 5078)
    h_588096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5078, 50), 'h', False)
    # Getting the type of 'df' (line 5078)
    df_588097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5078, 53), 'df', False)
    # Processing the call keyword arguments (line 5078)
    kwargs_588098 = {}
    # Getting the type of 'distributions' (line 5078)
    distributions_588093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5078, 28), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 5078)
    chi2_588094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5078, 28), distributions_588093, 'chi2')
    # Obtaining the member 'sf' of a type (line 5078)
    sf_588095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5078, 28), chi2_588094, 'sf')
    # Calling sf(args, kwargs) (line 5078)
    sf_call_result_588099 = invoke(stypy.reporting.localization.Localization(__file__, 5078, 28), sf_588095, *[h_588096, df_588097], **kwargs_588098)
    
    # Processing the call keyword arguments (line 5078)
    kwargs_588100 = {}
    # Getting the type of 'KruskalResult' (line 5078)
    KruskalResult_588091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5078, 11), 'KruskalResult', False)
    # Calling KruskalResult(args, kwargs) (line 5078)
    KruskalResult_call_result_588101 = invoke(stypy.reporting.localization.Localization(__file__, 5078, 11), KruskalResult_588091, *[h_588092, sf_call_result_588099], **kwargs_588100)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5078)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5078, 4), 'stypy_return_type', KruskalResult_call_result_588101)
    
    # ################# End of 'kruskal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kruskal' in the type store
    # Getting the type of 'stypy_return_type' (line 4964)
    stypy_return_type_588102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4964, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_588102)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kruskal'
    return stypy_return_type_588102

# Assigning a type to the variable 'kruskal' (line 4964)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4964, 0), 'kruskal', kruskal)

# Assigning a Call to a Name (line 5081):

# Assigning a Call to a Name (line 5081):

# Call to namedtuple(...): (line 5081)
# Processing the call arguments (line 5081)
str_588104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5081, 37), 'str', 'FriedmanchisquareResult')

# Obtaining an instance of the builtin type 'tuple' (line 5082)
tuple_588105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5082, 38), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 5082)
# Adding element type (line 5082)
str_588106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5082, 38), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5082, 38), tuple_588105, str_588106)
# Adding element type (line 5082)
str_588107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5082, 51), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5082, 38), tuple_588105, str_588107)

# Processing the call keyword arguments (line 5081)
kwargs_588108 = {}
# Getting the type of 'namedtuple' (line 5081)
namedtuple_588103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5081, 26), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 5081)
namedtuple_call_result_588109 = invoke(stypy.reporting.localization.Localization(__file__, 5081, 26), namedtuple_588103, *[str_588104, tuple_588105], **kwargs_588108)

# Assigning a type to the variable 'FriedmanchisquareResult' (line 5081)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5081, 0), 'FriedmanchisquareResult', namedtuple_call_result_588109)

@norecursion
def friedmanchisquare(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'friedmanchisquare'
    module_type_store = module_type_store.open_function_context('friedmanchisquare', 5085, 0, False)
    
    # Passed parameters checking function
    friedmanchisquare.stypy_localization = localization
    friedmanchisquare.stypy_type_of_self = None
    friedmanchisquare.stypy_type_store = module_type_store
    friedmanchisquare.stypy_function_name = 'friedmanchisquare'
    friedmanchisquare.stypy_param_names_list = []
    friedmanchisquare.stypy_varargs_param_name = 'args'
    friedmanchisquare.stypy_kwargs_param_name = None
    friedmanchisquare.stypy_call_defaults = defaults
    friedmanchisquare.stypy_call_varargs = varargs
    friedmanchisquare.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'friedmanchisquare', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'friedmanchisquare', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'friedmanchisquare(...)' code ##################

    str_588110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5120, (-1)), 'str', '\n    Compute the Friedman test for repeated measurements\n\n    The Friedman test tests the null hypothesis that repeated measurements of\n    the same individuals have the same distribution.  It is often used\n    to test for consistency among measurements obtained in different ways.\n    For example, if two measurement techniques are used on the same set of\n    individuals, the Friedman test can be used to determine if the two\n    measurement techniques are consistent.\n\n    Parameters\n    ----------\n    measurements1, measurements2, measurements3... : array_like\n        Arrays of measurements.  All of the arrays must have the same number\n        of elements.  At least 3 sets of measurements must be given.\n\n    Returns\n    -------\n    statistic : float\n        the test statistic, correcting for ties\n    pvalue : float\n        the associated p-value assuming that the test statistic has a chi\n        squared distribution\n\n    Notes\n    -----\n    Due to the assumption that the test statistic has a chi squared\n    distribution, the p-value is only reliable for n > 10 and more than\n    6 repeated measurements.\n\n    References\n    ----------\n    .. [1] http://en.wikipedia.org/wiki/Friedman_test\n\n    ')
    
    # Assigning a Call to a Name (line 5121):
    
    # Assigning a Call to a Name (line 5121):
    
    # Call to len(...): (line 5121)
    # Processing the call arguments (line 5121)
    # Getting the type of 'args' (line 5121)
    args_588112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5121, 12), 'args', False)
    # Processing the call keyword arguments (line 5121)
    kwargs_588113 = {}
    # Getting the type of 'len' (line 5121)
    len_588111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5121, 8), 'len', False)
    # Calling len(args, kwargs) (line 5121)
    len_call_result_588114 = invoke(stypy.reporting.localization.Localization(__file__, 5121, 8), len_588111, *[args_588112], **kwargs_588113)
    
    # Assigning a type to the variable 'k' (line 5121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5121, 4), 'k', len_call_result_588114)
    
    
    # Getting the type of 'k' (line 5122)
    k_588115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5122, 7), 'k')
    int_588116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5122, 11), 'int')
    # Applying the binary operator '<' (line 5122)
    result_lt_588117 = python_operator(stypy.reporting.localization.Localization(__file__, 5122, 7), '<', k_588115, int_588116)
    
    # Testing the type of an if condition (line 5122)
    if_condition_588118 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5122, 4), result_lt_588117)
    # Assigning a type to the variable 'if_condition_588118' (line 5122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5122, 4), 'if_condition_588118', if_condition_588118)
    # SSA begins for if statement (line 5122)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 5123)
    # Processing the call arguments (line 5123)
    str_588120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5123, 25), 'str', 'Less than 3 levels.  Friedman test not appropriate.')
    # Processing the call keyword arguments (line 5123)
    kwargs_588121 = {}
    # Getting the type of 'ValueError' (line 5123)
    ValueError_588119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5123, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 5123)
    ValueError_call_result_588122 = invoke(stypy.reporting.localization.Localization(__file__, 5123, 14), ValueError_588119, *[str_588120], **kwargs_588121)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5123, 8), ValueError_call_result_588122, 'raise parameter', BaseException)
    # SSA join for if statement (line 5122)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 5125):
    
    # Assigning a Call to a Name (line 5125):
    
    # Call to len(...): (line 5125)
    # Processing the call arguments (line 5125)
    
    # Obtaining the type of the subscript
    int_588124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5125, 17), 'int')
    # Getting the type of 'args' (line 5125)
    args_588125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5125, 12), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 5125)
    getitem___588126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5125, 12), args_588125, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5125)
    subscript_call_result_588127 = invoke(stypy.reporting.localization.Localization(__file__, 5125, 12), getitem___588126, int_588124)
    
    # Processing the call keyword arguments (line 5125)
    kwargs_588128 = {}
    # Getting the type of 'len' (line 5125)
    len_588123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5125, 8), 'len', False)
    # Calling len(args, kwargs) (line 5125)
    len_call_result_588129 = invoke(stypy.reporting.localization.Localization(__file__, 5125, 8), len_588123, *[subscript_call_result_588127], **kwargs_588128)
    
    # Assigning a type to the variable 'n' (line 5125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5125, 4), 'n', len_call_result_588129)
    
    
    # Call to range(...): (line 5126)
    # Processing the call arguments (line 5126)
    int_588131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5126, 19), 'int')
    # Getting the type of 'k' (line 5126)
    k_588132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5126, 22), 'k', False)
    # Processing the call keyword arguments (line 5126)
    kwargs_588133 = {}
    # Getting the type of 'range' (line 5126)
    range_588130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5126, 13), 'range', False)
    # Calling range(args, kwargs) (line 5126)
    range_call_result_588134 = invoke(stypy.reporting.localization.Localization(__file__, 5126, 13), range_588130, *[int_588131, k_588132], **kwargs_588133)
    
    # Testing the type of a for loop iterable (line 5126)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5126, 4), range_call_result_588134)
    # Getting the type of the for loop variable (line 5126)
    for_loop_var_588135 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5126, 4), range_call_result_588134)
    # Assigning a type to the variable 'i' (line 5126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5126, 4), 'i', for_loop_var_588135)
    # SSA begins for a for statement (line 5126)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to len(...): (line 5127)
    # Processing the call arguments (line 5127)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 5127)
    i_588137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5127, 20), 'i', False)
    # Getting the type of 'args' (line 5127)
    args_588138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5127, 15), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 5127)
    getitem___588139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5127, 15), args_588138, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5127)
    subscript_call_result_588140 = invoke(stypy.reporting.localization.Localization(__file__, 5127, 15), getitem___588139, i_588137)
    
    # Processing the call keyword arguments (line 5127)
    kwargs_588141 = {}
    # Getting the type of 'len' (line 5127)
    len_588136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5127, 11), 'len', False)
    # Calling len(args, kwargs) (line 5127)
    len_call_result_588142 = invoke(stypy.reporting.localization.Localization(__file__, 5127, 11), len_588136, *[subscript_call_result_588140], **kwargs_588141)
    
    # Getting the type of 'n' (line 5127)
    n_588143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5127, 27), 'n')
    # Applying the binary operator '!=' (line 5127)
    result_ne_588144 = python_operator(stypy.reporting.localization.Localization(__file__, 5127, 11), '!=', len_call_result_588142, n_588143)
    
    # Testing the type of an if condition (line 5127)
    if_condition_588145 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5127, 8), result_ne_588144)
    # Assigning a type to the variable 'if_condition_588145' (line 5127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5127, 8), 'if_condition_588145', if_condition_588145)
    # SSA begins for if statement (line 5127)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 5128)
    # Processing the call arguments (line 5128)
    str_588147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5128, 29), 'str', 'Unequal N in friedmanchisquare.  Aborting.')
    # Processing the call keyword arguments (line 5128)
    kwargs_588148 = {}
    # Getting the type of 'ValueError' (line 5128)
    ValueError_588146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5128, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 5128)
    ValueError_call_result_588149 = invoke(stypy.reporting.localization.Localization(__file__, 5128, 18), ValueError_588146, *[str_588147], **kwargs_588148)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5128, 12), ValueError_call_result_588149, 'raise parameter', BaseException)
    # SSA join for if statement (line 5127)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 5131):
    
    # Assigning a Attribute to a Name (line 5131):
    
    # Call to vstack(...): (line 5131)
    # Processing the call arguments (line 5131)
    # Getting the type of 'args' (line 5131)
    args_588152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5131, 21), 'args', False)
    # Processing the call keyword arguments (line 5131)
    kwargs_588153 = {}
    # Getting the type of 'np' (line 5131)
    np_588150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5131, 11), 'np', False)
    # Obtaining the member 'vstack' of a type (line 5131)
    vstack_588151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5131, 11), np_588150, 'vstack')
    # Calling vstack(args, kwargs) (line 5131)
    vstack_call_result_588154 = invoke(stypy.reporting.localization.Localization(__file__, 5131, 11), vstack_588151, *[args_588152], **kwargs_588153)
    
    # Obtaining the member 'T' of a type (line 5131)
    T_588155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5131, 11), vstack_call_result_588154, 'T')
    # Assigning a type to the variable 'data' (line 5131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5131, 4), 'data', T_588155)
    
    # Assigning a Call to a Name (line 5132):
    
    # Assigning a Call to a Name (line 5132):
    
    # Call to astype(...): (line 5132)
    # Processing the call arguments (line 5132)
    # Getting the type of 'float' (line 5132)
    float_588158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5132, 23), 'float', False)
    # Processing the call keyword arguments (line 5132)
    kwargs_588159 = {}
    # Getting the type of 'data' (line 5132)
    data_588156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5132, 11), 'data', False)
    # Obtaining the member 'astype' of a type (line 5132)
    astype_588157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5132, 11), data_588156, 'astype')
    # Calling astype(args, kwargs) (line 5132)
    astype_call_result_588160 = invoke(stypy.reporting.localization.Localization(__file__, 5132, 11), astype_588157, *[float_588158], **kwargs_588159)
    
    # Assigning a type to the variable 'data' (line 5132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5132, 4), 'data', astype_call_result_588160)
    
    
    # Call to range(...): (line 5133)
    # Processing the call arguments (line 5133)
    
    # Call to len(...): (line 5133)
    # Processing the call arguments (line 5133)
    # Getting the type of 'data' (line 5133)
    data_588163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5133, 23), 'data', False)
    # Processing the call keyword arguments (line 5133)
    kwargs_588164 = {}
    # Getting the type of 'len' (line 5133)
    len_588162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5133, 19), 'len', False)
    # Calling len(args, kwargs) (line 5133)
    len_call_result_588165 = invoke(stypy.reporting.localization.Localization(__file__, 5133, 19), len_588162, *[data_588163], **kwargs_588164)
    
    # Processing the call keyword arguments (line 5133)
    kwargs_588166 = {}
    # Getting the type of 'range' (line 5133)
    range_588161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5133, 13), 'range', False)
    # Calling range(args, kwargs) (line 5133)
    range_call_result_588167 = invoke(stypy.reporting.localization.Localization(__file__, 5133, 13), range_588161, *[len_call_result_588165], **kwargs_588166)
    
    # Testing the type of a for loop iterable (line 5133)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5133, 4), range_call_result_588167)
    # Getting the type of the for loop variable (line 5133)
    for_loop_var_588168 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5133, 4), range_call_result_588167)
    # Assigning a type to the variable 'i' (line 5133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5133, 4), 'i', for_loop_var_588168)
    # SSA begins for a for statement (line 5133)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 5134):
    
    # Assigning a Call to a Subscript (line 5134):
    
    # Call to rankdata(...): (line 5134)
    # Processing the call arguments (line 5134)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 5134)
    i_588170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5134, 32), 'i', False)
    # Getting the type of 'data' (line 5134)
    data_588171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5134, 27), 'data', False)
    # Obtaining the member '__getitem__' of a type (line 5134)
    getitem___588172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5134, 27), data_588171, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5134)
    subscript_call_result_588173 = invoke(stypy.reporting.localization.Localization(__file__, 5134, 27), getitem___588172, i_588170)
    
    # Processing the call keyword arguments (line 5134)
    kwargs_588174 = {}
    # Getting the type of 'rankdata' (line 5134)
    rankdata_588169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5134, 18), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 5134)
    rankdata_call_result_588175 = invoke(stypy.reporting.localization.Localization(__file__, 5134, 18), rankdata_588169, *[subscript_call_result_588173], **kwargs_588174)
    
    # Getting the type of 'data' (line 5134)
    data_588176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5134, 8), 'data')
    # Getting the type of 'i' (line 5134)
    i_588177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5134, 13), 'i')
    # Storing an element on a container (line 5134)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5134, 8), data_588176, (i_588177, rankdata_call_result_588175))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 5137):
    
    # Assigning a Num to a Name (line 5137):
    int_588178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5137, 11), 'int')
    # Assigning a type to the variable 'ties' (line 5137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5137, 4), 'ties', int_588178)
    
    
    # Call to range(...): (line 5138)
    # Processing the call arguments (line 5138)
    
    # Call to len(...): (line 5138)
    # Processing the call arguments (line 5138)
    # Getting the type of 'data' (line 5138)
    data_588181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5138, 23), 'data', False)
    # Processing the call keyword arguments (line 5138)
    kwargs_588182 = {}
    # Getting the type of 'len' (line 5138)
    len_588180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5138, 19), 'len', False)
    # Calling len(args, kwargs) (line 5138)
    len_call_result_588183 = invoke(stypy.reporting.localization.Localization(__file__, 5138, 19), len_588180, *[data_588181], **kwargs_588182)
    
    # Processing the call keyword arguments (line 5138)
    kwargs_588184 = {}
    # Getting the type of 'range' (line 5138)
    range_588179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5138, 13), 'range', False)
    # Calling range(args, kwargs) (line 5138)
    range_call_result_588185 = invoke(stypy.reporting.localization.Localization(__file__, 5138, 13), range_588179, *[len_call_result_588183], **kwargs_588184)
    
    # Testing the type of a for loop iterable (line 5138)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5138, 4), range_call_result_588185)
    # Getting the type of the for loop variable (line 5138)
    for_loop_var_588186 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5138, 4), range_call_result_588185)
    # Assigning a type to the variable 'i' (line 5138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5138, 4), 'i', for_loop_var_588186)
    # SSA begins for a for statement (line 5138)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Tuple (line 5139):
    
    # Assigning a Subscript to a Name (line 5139):
    
    # Obtaining the type of the subscript
    int_588187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5139, 8), 'int')
    
    # Call to find_repeats(...): (line 5139)
    # Processing the call arguments (line 5139)
    
    # Call to array(...): (line 5139)
    # Processing the call arguments (line 5139)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 5139)
    i_588190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5139, 50), 'i', False)
    # Getting the type of 'data' (line 5139)
    data_588191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5139, 45), 'data', False)
    # Obtaining the member '__getitem__' of a type (line 5139)
    getitem___588192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5139, 45), data_588191, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5139)
    subscript_call_result_588193 = invoke(stypy.reporting.localization.Localization(__file__, 5139, 45), getitem___588192, i_588190)
    
    # Processing the call keyword arguments (line 5139)
    kwargs_588194 = {}
    # Getting the type of 'array' (line 5139)
    array_588189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5139, 39), 'array', False)
    # Calling array(args, kwargs) (line 5139)
    array_call_result_588195 = invoke(stypy.reporting.localization.Localization(__file__, 5139, 39), array_588189, *[subscript_call_result_588193], **kwargs_588194)
    
    # Processing the call keyword arguments (line 5139)
    kwargs_588196 = {}
    # Getting the type of 'find_repeats' (line 5139)
    find_repeats_588188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5139, 26), 'find_repeats', False)
    # Calling find_repeats(args, kwargs) (line 5139)
    find_repeats_call_result_588197 = invoke(stypy.reporting.localization.Localization(__file__, 5139, 26), find_repeats_588188, *[array_call_result_588195], **kwargs_588196)
    
    # Obtaining the member '__getitem__' of a type (line 5139)
    getitem___588198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5139, 8), find_repeats_call_result_588197, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5139)
    subscript_call_result_588199 = invoke(stypy.reporting.localization.Localization(__file__, 5139, 8), getitem___588198, int_588187)
    
    # Assigning a type to the variable 'tuple_var_assignment_579979' (line 5139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5139, 8), 'tuple_var_assignment_579979', subscript_call_result_588199)
    
    # Assigning a Subscript to a Name (line 5139):
    
    # Obtaining the type of the subscript
    int_588200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5139, 8), 'int')
    
    # Call to find_repeats(...): (line 5139)
    # Processing the call arguments (line 5139)
    
    # Call to array(...): (line 5139)
    # Processing the call arguments (line 5139)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 5139)
    i_588203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5139, 50), 'i', False)
    # Getting the type of 'data' (line 5139)
    data_588204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5139, 45), 'data', False)
    # Obtaining the member '__getitem__' of a type (line 5139)
    getitem___588205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5139, 45), data_588204, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5139)
    subscript_call_result_588206 = invoke(stypy.reporting.localization.Localization(__file__, 5139, 45), getitem___588205, i_588203)
    
    # Processing the call keyword arguments (line 5139)
    kwargs_588207 = {}
    # Getting the type of 'array' (line 5139)
    array_588202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5139, 39), 'array', False)
    # Calling array(args, kwargs) (line 5139)
    array_call_result_588208 = invoke(stypy.reporting.localization.Localization(__file__, 5139, 39), array_588202, *[subscript_call_result_588206], **kwargs_588207)
    
    # Processing the call keyword arguments (line 5139)
    kwargs_588209 = {}
    # Getting the type of 'find_repeats' (line 5139)
    find_repeats_588201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5139, 26), 'find_repeats', False)
    # Calling find_repeats(args, kwargs) (line 5139)
    find_repeats_call_result_588210 = invoke(stypy.reporting.localization.Localization(__file__, 5139, 26), find_repeats_588201, *[array_call_result_588208], **kwargs_588209)
    
    # Obtaining the member '__getitem__' of a type (line 5139)
    getitem___588211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5139, 8), find_repeats_call_result_588210, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5139)
    subscript_call_result_588212 = invoke(stypy.reporting.localization.Localization(__file__, 5139, 8), getitem___588211, int_588200)
    
    # Assigning a type to the variable 'tuple_var_assignment_579980' (line 5139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5139, 8), 'tuple_var_assignment_579980', subscript_call_result_588212)
    
    # Assigning a Name to a Name (line 5139):
    # Getting the type of 'tuple_var_assignment_579979' (line 5139)
    tuple_var_assignment_579979_588213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5139, 8), 'tuple_var_assignment_579979')
    # Assigning a type to the variable 'replist' (line 5139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5139, 8), 'replist', tuple_var_assignment_579979_588213)
    
    # Assigning a Name to a Name (line 5139):
    # Getting the type of 'tuple_var_assignment_579980' (line 5139)
    tuple_var_assignment_579980_588214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5139, 8), 'tuple_var_assignment_579980')
    # Assigning a type to the variable 'repnum' (line 5139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5139, 17), 'repnum', tuple_var_assignment_579980_588214)
    
    # Getting the type of 'repnum' (line 5140)
    repnum_588215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5140, 17), 'repnum')
    # Testing the type of a for loop iterable (line 5140)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5140, 8), repnum_588215)
    # Getting the type of the for loop variable (line 5140)
    for_loop_var_588216 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5140, 8), repnum_588215)
    # Assigning a type to the variable 't' (line 5140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5140, 8), 't', for_loop_var_588216)
    # SSA begins for a for statement (line 5140)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'ties' (line 5141)
    ties_588217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5141, 12), 'ties')
    # Getting the type of 't' (line 5141)
    t_588218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5141, 20), 't')
    # Getting the type of 't' (line 5141)
    t_588219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5141, 25), 't')
    # Getting the type of 't' (line 5141)
    t_588220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5141, 27), 't')
    # Applying the binary operator '*' (line 5141)
    result_mul_588221 = python_operator(stypy.reporting.localization.Localization(__file__, 5141, 25), '*', t_588219, t_588220)
    
    int_588222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5141, 31), 'int')
    # Applying the binary operator '-' (line 5141)
    result_sub_588223 = python_operator(stypy.reporting.localization.Localization(__file__, 5141, 25), '-', result_mul_588221, int_588222)
    
    # Applying the binary operator '*' (line 5141)
    result_mul_588224 = python_operator(stypy.reporting.localization.Localization(__file__, 5141, 20), '*', t_588218, result_sub_588223)
    
    # Applying the binary operator '+=' (line 5141)
    result_iadd_588225 = python_operator(stypy.reporting.localization.Localization(__file__, 5141, 12), '+=', ties_588217, result_mul_588224)
    # Assigning a type to the variable 'ties' (line 5141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5141, 12), 'ties', result_iadd_588225)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 5142):
    
    # Assigning a BinOp to a Name (line 5142):
    int_588226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5142, 8), 'int')
    # Getting the type of 'ties' (line 5142)
    ties_588227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5142, 12), 'ties')
    
    # Call to float(...): (line 5142)
    # Processing the call arguments (line 5142)
    # Getting the type of 'k' (line 5142)
    k_588229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5142, 25), 'k', False)
    # Getting the type of 'k' (line 5142)
    k_588230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5142, 28), 'k', False)
    # Getting the type of 'k' (line 5142)
    k_588231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5142, 30), 'k', False)
    # Applying the binary operator '*' (line 5142)
    result_mul_588232 = python_operator(stypy.reporting.localization.Localization(__file__, 5142, 28), '*', k_588230, k_588231)
    
    int_588233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5142, 34), 'int')
    # Applying the binary operator '-' (line 5142)
    result_sub_588234 = python_operator(stypy.reporting.localization.Localization(__file__, 5142, 28), '-', result_mul_588232, int_588233)
    
    # Applying the binary operator '*' (line 5142)
    result_mul_588235 = python_operator(stypy.reporting.localization.Localization(__file__, 5142, 25), '*', k_588229, result_sub_588234)
    
    # Getting the type of 'n' (line 5142)
    n_588236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5142, 37), 'n', False)
    # Applying the binary operator '*' (line 5142)
    result_mul_588237 = python_operator(stypy.reporting.localization.Localization(__file__, 5142, 36), '*', result_mul_588235, n_588236)
    
    # Processing the call keyword arguments (line 5142)
    kwargs_588238 = {}
    # Getting the type of 'float' (line 5142)
    float_588228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5142, 19), 'float', False)
    # Calling float(args, kwargs) (line 5142)
    float_call_result_588239 = invoke(stypy.reporting.localization.Localization(__file__, 5142, 19), float_588228, *[result_mul_588237], **kwargs_588238)
    
    # Applying the binary operator 'div' (line 5142)
    result_div_588240 = python_operator(stypy.reporting.localization.Localization(__file__, 5142, 12), 'div', ties_588227, float_call_result_588239)
    
    # Applying the binary operator '-' (line 5142)
    result_sub_588241 = python_operator(stypy.reporting.localization.Localization(__file__, 5142, 8), '-', int_588226, result_div_588240)
    
    # Assigning a type to the variable 'c' (line 5142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5142, 4), 'c', result_sub_588241)
    
    # Assigning a Call to a Name (line 5144):
    
    # Assigning a Call to a Name (line 5144):
    
    # Call to sum(...): (line 5144)
    # Processing the call arguments (line 5144)
    
    # Call to sum(...): (line 5144)
    # Processing the call keyword arguments (line 5144)
    int_588246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5144, 32), 'int')
    keyword_588247 = int_588246
    kwargs_588248 = {'axis': keyword_588247}
    # Getting the type of 'data' (line 5144)
    data_588244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5144, 18), 'data', False)
    # Obtaining the member 'sum' of a type (line 5144)
    sum_588245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5144, 18), data_588244, 'sum')
    # Calling sum(args, kwargs) (line 5144)
    sum_call_result_588249 = invoke(stypy.reporting.localization.Localization(__file__, 5144, 18), sum_588245, *[], **kwargs_588248)
    
    int_588250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5144, 36), 'int')
    # Applying the binary operator '**' (line 5144)
    result_pow_588251 = python_operator(stypy.reporting.localization.Localization(__file__, 5144, 18), '**', sum_call_result_588249, int_588250)
    
    # Processing the call keyword arguments (line 5144)
    kwargs_588252 = {}
    # Getting the type of 'np' (line 5144)
    np_588242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5144, 11), 'np', False)
    # Obtaining the member 'sum' of a type (line 5144)
    sum_588243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5144, 11), np_588242, 'sum')
    # Calling sum(args, kwargs) (line 5144)
    sum_call_result_588253 = invoke(stypy.reporting.localization.Localization(__file__, 5144, 11), sum_588243, *[result_pow_588251], **kwargs_588252)
    
    # Assigning a type to the variable 'ssbn' (line 5144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5144, 4), 'ssbn', sum_call_result_588253)
    
    # Assigning a BinOp to a Name (line 5145):
    
    # Assigning a BinOp to a Name (line 5145):
    float_588254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5145, 13), 'float')
    # Getting the type of 'k' (line 5145)
    k_588255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5145, 21), 'k')
    # Getting the type of 'n' (line 5145)
    n_588256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5145, 23), 'n')
    # Applying the binary operator '*' (line 5145)
    result_mul_588257 = python_operator(stypy.reporting.localization.Localization(__file__, 5145, 21), '*', k_588255, n_588256)
    
    # Getting the type of 'k' (line 5145)
    k_588258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5145, 26), 'k')
    int_588259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5145, 28), 'int')
    # Applying the binary operator '+' (line 5145)
    result_add_588260 = python_operator(stypy.reporting.localization.Localization(__file__, 5145, 26), '+', k_588258, int_588259)
    
    # Applying the binary operator '*' (line 5145)
    result_mul_588261 = python_operator(stypy.reporting.localization.Localization(__file__, 5145, 24), '*', result_mul_588257, result_add_588260)
    
    # Applying the binary operator 'div' (line 5145)
    result_div_588262 = python_operator(stypy.reporting.localization.Localization(__file__, 5145, 13), 'div', float_588254, result_mul_588261)
    
    # Getting the type of 'ssbn' (line 5145)
    ssbn_588263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5145, 34), 'ssbn')
    # Applying the binary operator '*' (line 5145)
    result_mul_588264 = python_operator(stypy.reporting.localization.Localization(__file__, 5145, 32), '*', result_div_588262, ssbn_588263)
    
    int_588265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5145, 41), 'int')
    # Getting the type of 'n' (line 5145)
    n_588266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5145, 43), 'n')
    # Applying the binary operator '*' (line 5145)
    result_mul_588267 = python_operator(stypy.reporting.localization.Localization(__file__, 5145, 41), '*', int_588265, n_588266)
    
    # Getting the type of 'k' (line 5145)
    k_588268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5145, 46), 'k')
    int_588269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5145, 48), 'int')
    # Applying the binary operator '+' (line 5145)
    result_add_588270 = python_operator(stypy.reporting.localization.Localization(__file__, 5145, 46), '+', k_588268, int_588269)
    
    # Applying the binary operator '*' (line 5145)
    result_mul_588271 = python_operator(stypy.reporting.localization.Localization(__file__, 5145, 44), '*', result_mul_588267, result_add_588270)
    
    # Applying the binary operator '-' (line 5145)
    result_sub_588272 = python_operator(stypy.reporting.localization.Localization(__file__, 5145, 13), '-', result_mul_588264, result_mul_588271)
    
    # Getting the type of 'c' (line 5145)
    c_588273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5145, 54), 'c')
    # Applying the binary operator 'div' (line 5145)
    result_div_588274 = python_operator(stypy.reporting.localization.Localization(__file__, 5145, 12), 'div', result_sub_588272, c_588273)
    
    # Assigning a type to the variable 'chisq' (line 5145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5145, 4), 'chisq', result_div_588274)
    
    # Call to FriedmanchisquareResult(...): (line 5147)
    # Processing the call arguments (line 5147)
    # Getting the type of 'chisq' (line 5147)
    chisq_588276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5147, 35), 'chisq', False)
    
    # Call to sf(...): (line 5147)
    # Processing the call arguments (line 5147)
    # Getting the type of 'chisq' (line 5147)
    chisq_588280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5147, 64), 'chisq', False)
    # Getting the type of 'k' (line 5147)
    k_588281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5147, 71), 'k', False)
    int_588282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5147, 75), 'int')
    # Applying the binary operator '-' (line 5147)
    result_sub_588283 = python_operator(stypy.reporting.localization.Localization(__file__, 5147, 71), '-', k_588281, int_588282)
    
    # Processing the call keyword arguments (line 5147)
    kwargs_588284 = {}
    # Getting the type of 'distributions' (line 5147)
    distributions_588277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5147, 42), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 5147)
    chi2_588278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5147, 42), distributions_588277, 'chi2')
    # Obtaining the member 'sf' of a type (line 5147)
    sf_588279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5147, 42), chi2_588278, 'sf')
    # Calling sf(args, kwargs) (line 5147)
    sf_call_result_588285 = invoke(stypy.reporting.localization.Localization(__file__, 5147, 42), sf_588279, *[chisq_588280, result_sub_588283], **kwargs_588284)
    
    # Processing the call keyword arguments (line 5147)
    kwargs_588286 = {}
    # Getting the type of 'FriedmanchisquareResult' (line 5147)
    FriedmanchisquareResult_588275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5147, 11), 'FriedmanchisquareResult', False)
    # Calling FriedmanchisquareResult(args, kwargs) (line 5147)
    FriedmanchisquareResult_call_result_588287 = invoke(stypy.reporting.localization.Localization(__file__, 5147, 11), FriedmanchisquareResult_588275, *[chisq_588276, sf_call_result_588285], **kwargs_588286)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5147, 4), 'stypy_return_type', FriedmanchisquareResult_call_result_588287)
    
    # ################# End of 'friedmanchisquare(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'friedmanchisquare' in the type store
    # Getting the type of 'stypy_return_type' (line 5085)
    stypy_return_type_588288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5085, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_588288)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'friedmanchisquare'
    return stypy_return_type_588288

# Assigning a type to the variable 'friedmanchisquare' (line 5085)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5085, 0), 'friedmanchisquare', friedmanchisquare)

@norecursion
def combine_pvalues(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_588289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5150, 36), 'str', 'fisher')
    # Getting the type of 'None' (line 5150)
    None_588290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5150, 54), 'None')
    defaults = [str_588289, None_588290]
    # Create a new context for function 'combine_pvalues'
    module_type_store = module_type_store.open_function_context('combine_pvalues', 5150, 0, False)
    
    # Passed parameters checking function
    combine_pvalues.stypy_localization = localization
    combine_pvalues.stypy_type_of_self = None
    combine_pvalues.stypy_type_store = module_type_store
    combine_pvalues.stypy_function_name = 'combine_pvalues'
    combine_pvalues.stypy_param_names_list = ['pvalues', 'method', 'weights']
    combine_pvalues.stypy_varargs_param_name = None
    combine_pvalues.stypy_kwargs_param_name = None
    combine_pvalues.stypy_call_defaults = defaults
    combine_pvalues.stypy_call_varargs = varargs
    combine_pvalues.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'combine_pvalues', ['pvalues', 'method', 'weights'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'combine_pvalues', localization, ['pvalues', 'method', 'weights'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'combine_pvalues(...)' code ##################

    str_588291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5205, (-1)), 'str', '\n    Methods for combining the p-values of independent tests bearing upon the\n    same hypothesis.\n\n    Parameters\n    ----------\n    pvalues : array_like, 1-D\n        Array of p-values assumed to come from independent tests.\n    method : {\'fisher\', \'stouffer\'}, optional\n        Name of method to use to combine p-values. The following methods are\n        available:\n\n        - "fisher": Fisher\'s method (Fisher\'s combined probability test),\n          the default.\n        - "stouffer": Stouffer\'s Z-score method.\n    weights : array_like, 1-D, optional\n        Optional array of weights used only for Stouffer\'s Z-score method.\n\n    Returns\n    -------\n    statistic: float\n        The statistic calculated by the specified method:\n        - "fisher": The chi-squared statistic\n        - "stouffer": The Z-score\n    pval: float\n        The combined p-value.\n\n    Notes\n    -----\n    Fisher\'s method (also known as Fisher\'s combined probability test) [1]_ uses\n    a chi-squared statistic to compute a combined p-value. The closely related\n    Stouffer\'s Z-score method [2]_ uses Z-scores rather than p-values. The\n    advantage of Stouffer\'s method is that it is straightforward to introduce\n    weights, which can make Stouffer\'s method more powerful than Fisher\'s\n    method when the p-values are from studies of different size [3]_ [4]_.\n\n    Fisher\'s method may be extended to combine p-values from dependent tests\n    [5]_. Extensions such as Brown\'s method and Kost\'s method are not currently\n    implemented.\n\n    .. versionadded:: 0.15.0\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Fisher%27s_method\n    .. [2] http://en.wikipedia.org/wiki/Fisher\'s_method#Relation_to_Stouffer.27s_Z-score_method\n    .. [3] Whitlock, M. C. "Combining probability from independent tests: the\n           weighted Z-method is superior to Fisher\'s approach." Journal of\n           Evolutionary Biology 18, no. 5 (2005): 1368-1373.\n    .. [4] Zaykin, Dmitri V. "Optimally weighted Z-test is a powerful method\n           for combining probabilities in meta-analysis." Journal of\n           Evolutionary Biology 24, no. 8 (2011): 1836-1841.\n    .. [5] https://en.wikipedia.org/wiki/Extensions_of_Fisher%27s_method\n\n    ')
    
    # Assigning a Call to a Name (line 5206):
    
    # Assigning a Call to a Name (line 5206):
    
    # Call to asarray(...): (line 5206)
    # Processing the call arguments (line 5206)
    # Getting the type of 'pvalues' (line 5206)
    pvalues_588294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5206, 25), 'pvalues', False)
    # Processing the call keyword arguments (line 5206)
    kwargs_588295 = {}
    # Getting the type of 'np' (line 5206)
    np_588292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5206, 14), 'np', False)
    # Obtaining the member 'asarray' of a type (line 5206)
    asarray_588293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5206, 14), np_588292, 'asarray')
    # Calling asarray(args, kwargs) (line 5206)
    asarray_call_result_588296 = invoke(stypy.reporting.localization.Localization(__file__, 5206, 14), asarray_588293, *[pvalues_588294], **kwargs_588295)
    
    # Assigning a type to the variable 'pvalues' (line 5206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5206, 4), 'pvalues', asarray_call_result_588296)
    
    
    # Getting the type of 'pvalues' (line 5207)
    pvalues_588297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5207, 7), 'pvalues')
    # Obtaining the member 'ndim' of a type (line 5207)
    ndim_588298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5207, 7), pvalues_588297, 'ndim')
    int_588299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5207, 23), 'int')
    # Applying the binary operator '!=' (line 5207)
    result_ne_588300 = python_operator(stypy.reporting.localization.Localization(__file__, 5207, 7), '!=', ndim_588298, int_588299)
    
    # Testing the type of an if condition (line 5207)
    if_condition_588301 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5207, 4), result_ne_588300)
    # Assigning a type to the variable 'if_condition_588301' (line 5207)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5207, 4), 'if_condition_588301', if_condition_588301)
    # SSA begins for if statement (line 5207)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 5208)
    # Processing the call arguments (line 5208)
    str_588303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5208, 25), 'str', 'pvalues is not 1-D')
    # Processing the call keyword arguments (line 5208)
    kwargs_588304 = {}
    # Getting the type of 'ValueError' (line 5208)
    ValueError_588302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5208, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 5208)
    ValueError_call_result_588305 = invoke(stypy.reporting.localization.Localization(__file__, 5208, 14), ValueError_588302, *[str_588303], **kwargs_588304)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5208, 8), ValueError_call_result_588305, 'raise parameter', BaseException)
    # SSA join for if statement (line 5207)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'method' (line 5210)
    method_588306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5210, 7), 'method')
    str_588307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5210, 17), 'str', 'fisher')
    # Applying the binary operator '==' (line 5210)
    result_eq_588308 = python_operator(stypy.reporting.localization.Localization(__file__, 5210, 7), '==', method_588306, str_588307)
    
    # Testing the type of an if condition (line 5210)
    if_condition_588309 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5210, 4), result_eq_588308)
    # Assigning a type to the variable 'if_condition_588309' (line 5210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5210, 4), 'if_condition_588309', if_condition_588309)
    # SSA begins for if statement (line 5210)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 5211):
    
    # Assigning a BinOp to a Name (line 5211):
    int_588310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5211, 14), 'int')
    
    # Call to sum(...): (line 5211)
    # Processing the call arguments (line 5211)
    
    # Call to log(...): (line 5211)
    # Processing the call arguments (line 5211)
    # Getting the type of 'pvalues' (line 5211)
    pvalues_588315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5211, 33), 'pvalues', False)
    # Processing the call keyword arguments (line 5211)
    kwargs_588316 = {}
    # Getting the type of 'np' (line 5211)
    np_588313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5211, 26), 'np', False)
    # Obtaining the member 'log' of a type (line 5211)
    log_588314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5211, 26), np_588313, 'log')
    # Calling log(args, kwargs) (line 5211)
    log_call_result_588317 = invoke(stypy.reporting.localization.Localization(__file__, 5211, 26), log_588314, *[pvalues_588315], **kwargs_588316)
    
    # Processing the call keyword arguments (line 5211)
    kwargs_588318 = {}
    # Getting the type of 'np' (line 5211)
    np_588311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5211, 19), 'np', False)
    # Obtaining the member 'sum' of a type (line 5211)
    sum_588312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5211, 19), np_588311, 'sum')
    # Calling sum(args, kwargs) (line 5211)
    sum_call_result_588319 = invoke(stypy.reporting.localization.Localization(__file__, 5211, 19), sum_588312, *[log_call_result_588317], **kwargs_588318)
    
    # Applying the binary operator '*' (line 5211)
    result_mul_588320 = python_operator(stypy.reporting.localization.Localization(__file__, 5211, 14), '*', int_588310, sum_call_result_588319)
    
    # Assigning a type to the variable 'Xsq' (line 5211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5211, 8), 'Xsq', result_mul_588320)
    
    # Assigning a Call to a Name (line 5212):
    
    # Assigning a Call to a Name (line 5212):
    
    # Call to sf(...): (line 5212)
    # Processing the call arguments (line 5212)
    # Getting the type of 'Xsq' (line 5212)
    Xsq_588324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5212, 37), 'Xsq', False)
    int_588325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5212, 42), 'int')
    
    # Call to len(...): (line 5212)
    # Processing the call arguments (line 5212)
    # Getting the type of 'pvalues' (line 5212)
    pvalues_588327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5212, 50), 'pvalues', False)
    # Processing the call keyword arguments (line 5212)
    kwargs_588328 = {}
    # Getting the type of 'len' (line 5212)
    len_588326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5212, 46), 'len', False)
    # Calling len(args, kwargs) (line 5212)
    len_call_result_588329 = invoke(stypy.reporting.localization.Localization(__file__, 5212, 46), len_588326, *[pvalues_588327], **kwargs_588328)
    
    # Applying the binary operator '*' (line 5212)
    result_mul_588330 = python_operator(stypy.reporting.localization.Localization(__file__, 5212, 42), '*', int_588325, len_call_result_588329)
    
    # Processing the call keyword arguments (line 5212)
    kwargs_588331 = {}
    # Getting the type of 'distributions' (line 5212)
    distributions_588321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5212, 15), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 5212)
    chi2_588322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5212, 15), distributions_588321, 'chi2')
    # Obtaining the member 'sf' of a type (line 5212)
    sf_588323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5212, 15), chi2_588322, 'sf')
    # Calling sf(args, kwargs) (line 5212)
    sf_call_result_588332 = invoke(stypy.reporting.localization.Localization(__file__, 5212, 15), sf_588323, *[Xsq_588324, result_mul_588330], **kwargs_588331)
    
    # Assigning a type to the variable 'pval' (line 5212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5212, 8), 'pval', sf_call_result_588332)
    
    # Obtaining an instance of the builtin type 'tuple' (line 5213)
    tuple_588333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5213, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 5213)
    # Adding element type (line 5213)
    # Getting the type of 'Xsq' (line 5213)
    Xsq_588334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5213, 16), 'Xsq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5213, 16), tuple_588333, Xsq_588334)
    # Adding element type (line 5213)
    # Getting the type of 'pval' (line 5213)
    pval_588335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5213, 21), 'pval')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5213, 16), tuple_588333, pval_588335)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5213, 8), 'stypy_return_type', tuple_588333)
    # SSA branch for the else part of an if statement (line 5210)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'method' (line 5214)
    method_588336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5214, 9), 'method')
    str_588337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5214, 19), 'str', 'stouffer')
    # Applying the binary operator '==' (line 5214)
    result_eq_588338 = python_operator(stypy.reporting.localization.Localization(__file__, 5214, 9), '==', method_588336, str_588337)
    
    # Testing the type of an if condition (line 5214)
    if_condition_588339 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5214, 9), result_eq_588338)
    # Assigning a type to the variable 'if_condition_588339' (line 5214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5214, 9), 'if_condition_588339', if_condition_588339)
    # SSA begins for if statement (line 5214)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 5215)
    # Getting the type of 'weights' (line 5215)
    weights_588340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5215, 11), 'weights')
    # Getting the type of 'None' (line 5215)
    None_588341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5215, 22), 'None')
    
    (may_be_588342, more_types_in_union_588343) = may_be_none(weights_588340, None_588341)

    if may_be_588342:

        if more_types_in_union_588343:
            # Runtime conditional SSA (line 5215)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 5216):
        
        # Assigning a Call to a Name (line 5216):
        
        # Call to ones_like(...): (line 5216)
        # Processing the call arguments (line 5216)
        # Getting the type of 'pvalues' (line 5216)
        pvalues_588346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5216, 35), 'pvalues', False)
        # Processing the call keyword arguments (line 5216)
        kwargs_588347 = {}
        # Getting the type of 'np' (line 5216)
        np_588344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5216, 22), 'np', False)
        # Obtaining the member 'ones_like' of a type (line 5216)
        ones_like_588345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5216, 22), np_588344, 'ones_like')
        # Calling ones_like(args, kwargs) (line 5216)
        ones_like_call_result_588348 = invoke(stypy.reporting.localization.Localization(__file__, 5216, 22), ones_like_588345, *[pvalues_588346], **kwargs_588347)
        
        # Assigning a type to the variable 'weights' (line 5216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5216, 12), 'weights', ones_like_call_result_588348)

        if more_types_in_union_588343:
            # Runtime conditional SSA for else branch (line 5215)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_588342) or more_types_in_union_588343):
        
        
        
        # Call to len(...): (line 5217)
        # Processing the call arguments (line 5217)
        # Getting the type of 'weights' (line 5217)
        weights_588350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5217, 17), 'weights', False)
        # Processing the call keyword arguments (line 5217)
        kwargs_588351 = {}
        # Getting the type of 'len' (line 5217)
        len_588349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5217, 13), 'len', False)
        # Calling len(args, kwargs) (line 5217)
        len_call_result_588352 = invoke(stypy.reporting.localization.Localization(__file__, 5217, 13), len_588349, *[weights_588350], **kwargs_588351)
        
        
        # Call to len(...): (line 5217)
        # Processing the call arguments (line 5217)
        # Getting the type of 'pvalues' (line 5217)
        pvalues_588354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5217, 33), 'pvalues', False)
        # Processing the call keyword arguments (line 5217)
        kwargs_588355 = {}
        # Getting the type of 'len' (line 5217)
        len_588353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5217, 29), 'len', False)
        # Calling len(args, kwargs) (line 5217)
        len_call_result_588356 = invoke(stypy.reporting.localization.Localization(__file__, 5217, 29), len_588353, *[pvalues_588354], **kwargs_588355)
        
        # Applying the binary operator '!=' (line 5217)
        result_ne_588357 = python_operator(stypy.reporting.localization.Localization(__file__, 5217, 13), '!=', len_call_result_588352, len_call_result_588356)
        
        # Testing the type of an if condition (line 5217)
        if_condition_588358 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5217, 13), result_ne_588357)
        # Assigning a type to the variable 'if_condition_588358' (line 5217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5217, 13), 'if_condition_588358', if_condition_588358)
        # SSA begins for if statement (line 5217)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 5218)
        # Processing the call arguments (line 5218)
        str_588360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5218, 29), 'str', 'pvalues and weights must be of the same size.')
        # Processing the call keyword arguments (line 5218)
        kwargs_588361 = {}
        # Getting the type of 'ValueError' (line 5218)
        ValueError_588359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5218, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 5218)
        ValueError_call_result_588362 = invoke(stypy.reporting.localization.Localization(__file__, 5218, 18), ValueError_588359, *[str_588360], **kwargs_588361)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5218, 12), ValueError_call_result_588362, 'raise parameter', BaseException)
        # SSA join for if statement (line 5217)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_588342 and more_types_in_union_588343):
            # SSA join for if statement (line 5215)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 5220):
    
    # Assigning a Call to a Name (line 5220):
    
    # Call to asarray(...): (line 5220)
    # Processing the call arguments (line 5220)
    # Getting the type of 'weights' (line 5220)
    weights_588365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5220, 29), 'weights', False)
    # Processing the call keyword arguments (line 5220)
    kwargs_588366 = {}
    # Getting the type of 'np' (line 5220)
    np_588363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5220, 18), 'np', False)
    # Obtaining the member 'asarray' of a type (line 5220)
    asarray_588364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5220, 18), np_588363, 'asarray')
    # Calling asarray(args, kwargs) (line 5220)
    asarray_call_result_588367 = invoke(stypy.reporting.localization.Localization(__file__, 5220, 18), asarray_588364, *[weights_588365], **kwargs_588366)
    
    # Assigning a type to the variable 'weights' (line 5220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5220, 8), 'weights', asarray_call_result_588367)
    
    
    # Getting the type of 'weights' (line 5221)
    weights_588368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5221, 11), 'weights')
    # Obtaining the member 'ndim' of a type (line 5221)
    ndim_588369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5221, 11), weights_588368, 'ndim')
    int_588370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5221, 27), 'int')
    # Applying the binary operator '!=' (line 5221)
    result_ne_588371 = python_operator(stypy.reporting.localization.Localization(__file__, 5221, 11), '!=', ndim_588369, int_588370)
    
    # Testing the type of an if condition (line 5221)
    if_condition_588372 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5221, 8), result_ne_588371)
    # Assigning a type to the variable 'if_condition_588372' (line 5221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5221, 8), 'if_condition_588372', if_condition_588372)
    # SSA begins for if statement (line 5221)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 5222)
    # Processing the call arguments (line 5222)
    str_588374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5222, 29), 'str', 'weights is not 1-D')
    # Processing the call keyword arguments (line 5222)
    kwargs_588375 = {}
    # Getting the type of 'ValueError' (line 5222)
    ValueError_588373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5222, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 5222)
    ValueError_call_result_588376 = invoke(stypy.reporting.localization.Localization(__file__, 5222, 18), ValueError_588373, *[str_588374], **kwargs_588375)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5222, 12), ValueError_call_result_588376, 'raise parameter', BaseException)
    # SSA join for if statement (line 5221)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 5224):
    
    # Assigning a Call to a Name (line 5224):
    
    # Call to isf(...): (line 5224)
    # Processing the call arguments (line 5224)
    # Getting the type of 'pvalues' (line 5224)
    pvalues_588380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5224, 36), 'pvalues', False)
    # Processing the call keyword arguments (line 5224)
    kwargs_588381 = {}
    # Getting the type of 'distributions' (line 5224)
    distributions_588377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5224, 13), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 5224)
    norm_588378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5224, 13), distributions_588377, 'norm')
    # Obtaining the member 'isf' of a type (line 5224)
    isf_588379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5224, 13), norm_588378, 'isf')
    # Calling isf(args, kwargs) (line 5224)
    isf_call_result_588382 = invoke(stypy.reporting.localization.Localization(__file__, 5224, 13), isf_588379, *[pvalues_588380], **kwargs_588381)
    
    # Assigning a type to the variable 'Zi' (line 5224)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5224, 8), 'Zi', isf_call_result_588382)
    
    # Assigning a BinOp to a Name (line 5225):
    
    # Assigning a BinOp to a Name (line 5225):
    
    # Call to dot(...): (line 5225)
    # Processing the call arguments (line 5225)
    # Getting the type of 'weights' (line 5225)
    weights_588385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5225, 19), 'weights', False)
    # Getting the type of 'Zi' (line 5225)
    Zi_588386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5225, 28), 'Zi', False)
    # Processing the call keyword arguments (line 5225)
    kwargs_588387 = {}
    # Getting the type of 'np' (line 5225)
    np_588383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5225, 12), 'np', False)
    # Obtaining the member 'dot' of a type (line 5225)
    dot_588384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5225, 12), np_588383, 'dot')
    # Calling dot(args, kwargs) (line 5225)
    dot_call_result_588388 = invoke(stypy.reporting.localization.Localization(__file__, 5225, 12), dot_588384, *[weights_588385, Zi_588386], **kwargs_588387)
    
    
    # Call to norm(...): (line 5225)
    # Processing the call arguments (line 5225)
    # Getting the type of 'weights' (line 5225)
    weights_588392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5225, 49), 'weights', False)
    # Processing the call keyword arguments (line 5225)
    kwargs_588393 = {}
    # Getting the type of 'np' (line 5225)
    np_588389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5225, 34), 'np', False)
    # Obtaining the member 'linalg' of a type (line 5225)
    linalg_588390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5225, 34), np_588389, 'linalg')
    # Obtaining the member 'norm' of a type (line 5225)
    norm_588391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5225, 34), linalg_588390, 'norm')
    # Calling norm(args, kwargs) (line 5225)
    norm_call_result_588394 = invoke(stypy.reporting.localization.Localization(__file__, 5225, 34), norm_588391, *[weights_588392], **kwargs_588393)
    
    # Applying the binary operator 'div' (line 5225)
    result_div_588395 = python_operator(stypy.reporting.localization.Localization(__file__, 5225, 12), 'div', dot_call_result_588388, norm_call_result_588394)
    
    # Assigning a type to the variable 'Z' (line 5225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5225, 8), 'Z', result_div_588395)
    
    # Assigning a Call to a Name (line 5226):
    
    # Assigning a Call to a Name (line 5226):
    
    # Call to sf(...): (line 5226)
    # Processing the call arguments (line 5226)
    # Getting the type of 'Z' (line 5226)
    Z_588399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5226, 37), 'Z', False)
    # Processing the call keyword arguments (line 5226)
    kwargs_588400 = {}
    # Getting the type of 'distributions' (line 5226)
    distributions_588396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5226, 15), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 5226)
    norm_588397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5226, 15), distributions_588396, 'norm')
    # Obtaining the member 'sf' of a type (line 5226)
    sf_588398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5226, 15), norm_588397, 'sf')
    # Calling sf(args, kwargs) (line 5226)
    sf_call_result_588401 = invoke(stypy.reporting.localization.Localization(__file__, 5226, 15), sf_588398, *[Z_588399], **kwargs_588400)
    
    # Assigning a type to the variable 'pval' (line 5226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5226, 8), 'pval', sf_call_result_588401)
    
    # Obtaining an instance of the builtin type 'tuple' (line 5228)
    tuple_588402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5228, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 5228)
    # Adding element type (line 5228)
    # Getting the type of 'Z' (line 5228)
    Z_588403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5228, 16), 'Z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5228, 16), tuple_588402, Z_588403)
    # Adding element type (line 5228)
    # Getting the type of 'pval' (line 5228)
    pval_588404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5228, 19), 'pval')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5228, 16), tuple_588402, pval_588404)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5228)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5228, 8), 'stypy_return_type', tuple_588402)
    # SSA branch for the else part of an if statement (line 5214)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 5230)
    # Processing the call arguments (line 5230)
    str_588406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5231, 12), 'str', "Invalid method '%s'. Options are 'fisher' or 'stouffer'")
    # Getting the type of 'method' (line 5231)
    method_588407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5231, 71), 'method', False)
    # Processing the call keyword arguments (line 5230)
    kwargs_588408 = {}
    # Getting the type of 'ValueError' (line 5230)
    ValueError_588405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5230, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 5230)
    ValueError_call_result_588409 = invoke(stypy.reporting.localization.Localization(__file__, 5230, 14), ValueError_588405, *[str_588406, method_588407], **kwargs_588408)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5230, 8), ValueError_call_result_588409, 'raise parameter', BaseException)
    # SSA join for if statement (line 5214)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 5210)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'combine_pvalues(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'combine_pvalues' in the type store
    # Getting the type of 'stypy_return_type' (line 5150)
    stypy_return_type_588410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5150, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_588410)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'combine_pvalues'
    return stypy_return_type_588410

# Assigning a type to the variable 'combine_pvalues' (line 5150)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5150, 0), 'combine_pvalues', combine_pvalues)

@norecursion
def _betai(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_betai'
    module_type_store = module_type_store.open_function_context('_betai', 5238, 0, False)
    
    # Passed parameters checking function
    _betai.stypy_localization = localization
    _betai.stypy_type_of_self = None
    _betai.stypy_type_store = module_type_store
    _betai.stypy_function_name = '_betai'
    _betai.stypy_param_names_list = ['a', 'b', 'x']
    _betai.stypy_varargs_param_name = None
    _betai.stypy_kwargs_param_name = None
    _betai.stypy_call_defaults = defaults
    _betai.stypy_call_varargs = varargs
    _betai.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_betai', ['a', 'b', 'x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_betai', localization, ['a', 'b', 'x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_betai(...)' code ##################

    
    # Assigning a Call to a Name (line 5239):
    
    # Assigning a Call to a Name (line 5239):
    
    # Call to asarray(...): (line 5239)
    # Processing the call arguments (line 5239)
    # Getting the type of 'x' (line 5239)
    x_588413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5239, 19), 'x', False)
    # Processing the call keyword arguments (line 5239)
    kwargs_588414 = {}
    # Getting the type of 'np' (line 5239)
    np_588411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5239, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 5239)
    asarray_588412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5239, 8), np_588411, 'asarray')
    # Calling asarray(args, kwargs) (line 5239)
    asarray_call_result_588415 = invoke(stypy.reporting.localization.Localization(__file__, 5239, 8), asarray_588412, *[x_588413], **kwargs_588414)
    
    # Assigning a type to the variable 'x' (line 5239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5239, 4), 'x', asarray_call_result_588415)
    
    # Assigning a Call to a Name (line 5240):
    
    # Assigning a Call to a Name (line 5240):
    
    # Call to where(...): (line 5240)
    # Processing the call arguments (line 5240)
    
    # Getting the type of 'x' (line 5240)
    x_588418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5240, 17), 'x', False)
    float_588419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5240, 21), 'float')
    # Applying the binary operator '<' (line 5240)
    result_lt_588420 = python_operator(stypy.reporting.localization.Localization(__file__, 5240, 17), '<', x_588418, float_588419)
    
    # Getting the type of 'x' (line 5240)
    x_588421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5240, 26), 'x', False)
    float_588422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5240, 29), 'float')
    # Processing the call keyword arguments (line 5240)
    kwargs_588423 = {}
    # Getting the type of 'np' (line 5240)
    np_588416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5240, 8), 'np', False)
    # Obtaining the member 'where' of a type (line 5240)
    where_588417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5240, 8), np_588416, 'where')
    # Calling where(args, kwargs) (line 5240)
    where_call_result_588424 = invoke(stypy.reporting.localization.Localization(__file__, 5240, 8), where_588417, *[result_lt_588420, x_588421, float_588422], **kwargs_588423)
    
    # Assigning a type to the variable 'x' (line 5240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5240, 4), 'x', where_call_result_588424)
    
    # Call to betainc(...): (line 5241)
    # Processing the call arguments (line 5241)
    # Getting the type of 'a' (line 5241)
    a_588427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5241, 27), 'a', False)
    # Getting the type of 'b' (line 5241)
    b_588428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5241, 30), 'b', False)
    # Getting the type of 'x' (line 5241)
    x_588429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5241, 33), 'x', False)
    # Processing the call keyword arguments (line 5241)
    kwargs_588430 = {}
    # Getting the type of 'special' (line 5241)
    special_588425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5241, 11), 'special', False)
    # Obtaining the member 'betainc' of a type (line 5241)
    betainc_588426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5241, 11), special_588425, 'betainc')
    # Calling betainc(args, kwargs) (line 5241)
    betainc_call_result_588431 = invoke(stypy.reporting.localization.Localization(__file__, 5241, 11), betainc_588426, *[a_588427, b_588428, x_588429], **kwargs_588430)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5241, 4), 'stypy_return_type', betainc_call_result_588431)
    
    # ################# End of '_betai(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_betai' in the type store
    # Getting the type of 'stypy_return_type' (line 5238)
    stypy_return_type_588432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5238, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_588432)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_betai'
    return stypy_return_type_588432

# Assigning a type to the variable '_betai' (line 5238)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5238, 0), '_betai', _betai)

@norecursion
def wasserstein_distance(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 5248)
    None_588433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5248, 55), 'None')
    # Getting the type of 'None' (line 5248)
    None_588434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5248, 71), 'None')
    defaults = [None_588433, None_588434]
    # Create a new context for function 'wasserstein_distance'
    module_type_store = module_type_store.open_function_context('wasserstein_distance', 5248, 0, False)
    
    # Passed parameters checking function
    wasserstein_distance.stypy_localization = localization
    wasserstein_distance.stypy_type_of_self = None
    wasserstein_distance.stypy_type_store = module_type_store
    wasserstein_distance.stypy_function_name = 'wasserstein_distance'
    wasserstein_distance.stypy_param_names_list = ['u_values', 'v_values', 'u_weights', 'v_weights']
    wasserstein_distance.stypy_varargs_param_name = None
    wasserstein_distance.stypy_kwargs_param_name = None
    wasserstein_distance.stypy_call_defaults = defaults
    wasserstein_distance.stypy_call_varargs = varargs
    wasserstein_distance.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'wasserstein_distance', ['u_values', 'v_values', 'u_weights', 'v_weights'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'wasserstein_distance', localization, ['u_values', 'v_values', 'u_weights', 'v_weights'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'wasserstein_distance(...)' code ##################

    str_588435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5320, (-1)), 'str', '\n    Compute the first Wasserstein distance between two 1D distributions.\n\n    This distance is also known as the earth mover\'s distance, since it can be\n    seen as the minimum amount of "work" required to transform :math:`u` into\n    :math:`v`, where "work" is measured as the amount of distribution weight\n    that must be moved, multiplied by the distance it has to be moved.\n\n    .. versionadded:: 1.0.0\n\n    Parameters\n    ----------\n    u_values, v_values : array_like\n        Values observed in the (empirical) distribution.\n    u_weights, v_weights : array_like, optional\n        Weight for each value. If unspecified, each value is assigned the same\n        weight.\n        `u_weights` (resp. `v_weights`) must have the same length as\n        `u_values` (resp. `v_values`). If the weight sum differs from 1, it\n        must still be positive and finite so that the weights can be normalized\n        to sum to 1.\n\n    Returns\n    -------\n    distance : float\n        The computed distance between the distributions.\n\n    Notes\n    -----\n    The first Wasserstein distance between the distributions :math:`u` and\n    :math:`v` is:\n\n    .. math::\n\n        l_1 (u, v) = \\inf_{\\pi \\in \\Gamma (u, v)} \\int_{\\mathbb{R} \\times\n        \\mathbb{R}} |x-y| \\mathrm{d} \\pi (x, y)\n\n    where :math:`\\Gamma (u, v)` is the set of (probability) distributions on\n    :math:`\\mathbb{R} \\times \\mathbb{R}` whose marginals are :math:`u` and\n    :math:`v` on the first and second factors respectively.\n\n    If :math:`U` and :math:`V` are the respective CDFs of :math:`u` and\n    :math:`v`, this distance also equals to:\n\n    .. math::\n\n        l_1(u, v) = \\int_{-\\infty}^{+\\infty} |U-V|\n\n    See [2]_ for a proof of the equivalence of both definitions.\n\n    The input distributions can be empirical, therefore coming from samples\n    whose values are effectively inputs of the function, or they can be seen as\n    generalized functions, in which case they are weighted sums of Dirac delta\n    functions located at the specified values.\n\n    References\n    ----------\n    .. [1] "Wasserstein metric", http://en.wikipedia.org/wiki/Wasserstein_metric\n    .. [2] Ramdas, Garcia, Cuturi "On Wasserstein Two Sample Testing and Related\n           Families of Nonparametric Tests" (2015). :arXiv:`1509.02237`.\n\n    Examples\n    --------\n    >>> from scipy.stats import wasserstein_distance\n    >>> wasserstein_distance([0, 1, 3], [5, 6, 8])\n    5.0\n    >>> wasserstein_distance([0, 1], [0, 1], [3, 1], [2, 2])\n    0.25\n    >>> wasserstein_distance([3.4, 3.9, 7.5, 7.8], [4.5, 1.4],\n    ...                      [1.4, 0.9, 3.1, 7.2], [3.2, 3.5])\n    4.0781331438047861\n    ')
    
    # Call to _cdf_distance(...): (line 5321)
    # Processing the call arguments (line 5321)
    int_588437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5321, 25), 'int')
    # Getting the type of 'u_values' (line 5321)
    u_values_588438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5321, 28), 'u_values', False)
    # Getting the type of 'v_values' (line 5321)
    v_values_588439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5321, 38), 'v_values', False)
    # Getting the type of 'u_weights' (line 5321)
    u_weights_588440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5321, 48), 'u_weights', False)
    # Getting the type of 'v_weights' (line 5321)
    v_weights_588441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5321, 59), 'v_weights', False)
    # Processing the call keyword arguments (line 5321)
    kwargs_588442 = {}
    # Getting the type of '_cdf_distance' (line 5321)
    _cdf_distance_588436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5321, 11), '_cdf_distance', False)
    # Calling _cdf_distance(args, kwargs) (line 5321)
    _cdf_distance_call_result_588443 = invoke(stypy.reporting.localization.Localization(__file__, 5321, 11), _cdf_distance_588436, *[int_588437, u_values_588438, v_values_588439, u_weights_588440, v_weights_588441], **kwargs_588442)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5321)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5321, 4), 'stypy_return_type', _cdf_distance_call_result_588443)
    
    # ################# End of 'wasserstein_distance(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'wasserstein_distance' in the type store
    # Getting the type of 'stypy_return_type' (line 5248)
    stypy_return_type_588444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5248, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_588444)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'wasserstein_distance'
    return stypy_return_type_588444

# Assigning a type to the variable 'wasserstein_distance' (line 5248)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5248, 0), 'wasserstein_distance', wasserstein_distance)

@norecursion
def energy_distance(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 5324)
    None_588445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5324, 50), 'None')
    # Getting the type of 'None' (line 5324)
    None_588446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5324, 66), 'None')
    defaults = [None_588445, None_588446]
    # Create a new context for function 'energy_distance'
    module_type_store = module_type_store.open_function_context('energy_distance', 5324, 0, False)
    
    # Passed parameters checking function
    energy_distance.stypy_localization = localization
    energy_distance.stypy_type_of_self = None
    energy_distance.stypy_type_store = module_type_store
    energy_distance.stypy_function_name = 'energy_distance'
    energy_distance.stypy_param_names_list = ['u_values', 'v_values', 'u_weights', 'v_weights']
    energy_distance.stypy_varargs_param_name = None
    energy_distance.stypy_kwargs_param_name = None
    energy_distance.stypy_call_defaults = defaults
    energy_distance.stypy_call_varargs = varargs
    energy_distance.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'energy_distance', ['u_values', 'v_values', 'u_weights', 'v_weights'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'energy_distance', localization, ['u_values', 'v_values', 'u_weights', 'v_weights'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'energy_distance(...)' code ##################

    str_588447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5401, (-1)), 'str', '\n    Compute the energy distance between two 1D distributions.\n\n    .. versionadded:: 1.0.0\n\n    Parameters\n    ----------\n    u_values, v_values : array_like\n        Values observed in the (empirical) distribution.\n    u_weights, v_weights : array_like, optional\n        Weight for each value. If unspecified, each value is assigned the same\n        weight.\n        `u_weights` (resp. `v_weights`) must have the same length as\n        `u_values` (resp. `v_values`). If the weight sum differs from 1, it\n        must still be positive and finite so that the weights can be normalized\n        to sum to 1.\n\n    Returns\n    -------\n    distance : float\n        The computed distance between the distributions.\n\n    Notes\n    -----\n    The energy distance between two distributions :math:`u` and :math:`v`, whose\n    respective CDFs are :math:`U` and :math:`V`, equals to:\n\n    .. math::\n\n        D(u, v) = \\left( 2\\mathbb E|X - Y| - \\mathbb E|X - X\'| -\n        \\mathbb E|Y - Y\'| \\right)^{1/2}\n\n    where :math:`X` and :math:`X\'` (resp. :math:`Y` and :math:`Y\'`) are\n    independent random variables whose probability distribution is :math:`u`\n    (resp. :math:`v`).\n\n    As shown in [2]_, for one-dimensional real-valued variables, the energy\n    distance is linked to the non-distribution-free version of the Cramer-von\n    Mises distance:\n\n    .. math::\n\n        D(u, v) = \\sqrt{2} l_2(u, v) = \\left( 2 \\int_{-\\infty}^{+\\infty} (U-V)^2\n        \\right)^{1/2}\n\n    Note that the common Cramer-von Mises criterion uses the distribution-free\n    version of the distance. See [2]_ (section 2), for more details about both\n    versions of the distance.\n\n    The input distributions can be empirical, therefore coming from samples\n    whose values are effectively inputs of the function, or they can be seen as\n    generalized functions, in which case they are weighted sums of Dirac delta\n    functions located at the specified values.\n\n    References\n    ----------\n    .. [1] "Energy distance", https://en.wikipedia.org/wiki/Energy_distance\n    .. [2] Szekely "E-statistics: The energy of statistical samples." Bowling\n           Green State University, Department of Mathematics and Statistics,\n           Technical Report 02-16 (2002).\n    .. [3] Rizzo, Szekely "Energy distance." Wiley Interdisciplinary Reviews:\n           Computational Statistics, 8(1):27-38 (2015).\n    .. [4] Bellemare, Danihelka, Dabney, Mohamed, Lakshminarayanan, Hoyer,\n           Munos "The Cramer Distance as a Solution to Biased Wasserstein\n           Gradients" (2017). :arXiv:`1705.10743`.\n\n    Examples\n    --------\n    >>> from scipy.stats import energy_distance\n    >>> energy_distance([0], [2])\n    2.0000000000000004\n    >>> energy_distance([0, 8], [0, 8], [3, 1], [2, 2])\n    1.0000000000000002\n    >>> energy_distance([0.7, 7.4, 2.4, 6.8], [1.4, 8. ],\n    ...                 [2.1, 4.2, 7.4, 8. ], [7.6, 8.8])\n    0.88003340976158217\n    ')
    
    # Call to sqrt(...): (line 5402)
    # Processing the call arguments (line 5402)
    int_588450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5402, 19), 'int')
    # Processing the call keyword arguments (line 5402)
    kwargs_588451 = {}
    # Getting the type of 'np' (line 5402)
    np_588448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5402, 11), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 5402)
    sqrt_588449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5402, 11), np_588448, 'sqrt')
    # Calling sqrt(args, kwargs) (line 5402)
    sqrt_call_result_588452 = invoke(stypy.reporting.localization.Localization(__file__, 5402, 11), sqrt_588449, *[int_588450], **kwargs_588451)
    
    
    # Call to _cdf_distance(...): (line 5402)
    # Processing the call arguments (line 5402)
    int_588454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5402, 38), 'int')
    # Getting the type of 'u_values' (line 5402)
    u_values_588455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5402, 41), 'u_values', False)
    # Getting the type of 'v_values' (line 5402)
    v_values_588456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5402, 51), 'v_values', False)
    # Getting the type of 'u_weights' (line 5403)
    u_weights_588457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5403, 38), 'u_weights', False)
    # Getting the type of 'v_weights' (line 5403)
    v_weights_588458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5403, 49), 'v_weights', False)
    # Processing the call keyword arguments (line 5402)
    kwargs_588459 = {}
    # Getting the type of '_cdf_distance' (line 5402)
    _cdf_distance_588453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5402, 24), '_cdf_distance', False)
    # Calling _cdf_distance(args, kwargs) (line 5402)
    _cdf_distance_call_result_588460 = invoke(stypy.reporting.localization.Localization(__file__, 5402, 24), _cdf_distance_588453, *[int_588454, u_values_588455, v_values_588456, u_weights_588457, v_weights_588458], **kwargs_588459)
    
    # Applying the binary operator '*' (line 5402)
    result_mul_588461 = python_operator(stypy.reporting.localization.Localization(__file__, 5402, 11), '*', sqrt_call_result_588452, _cdf_distance_call_result_588460)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5402, 4), 'stypy_return_type', result_mul_588461)
    
    # ################# End of 'energy_distance(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'energy_distance' in the type store
    # Getting the type of 'stypy_return_type' (line 5324)
    stypy_return_type_588462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5324, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_588462)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'energy_distance'
    return stypy_return_type_588462

# Assigning a type to the variable 'energy_distance' (line 5324)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5324, 0), 'energy_distance', energy_distance)

@norecursion
def _cdf_distance(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 5406)
    None_588463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5406, 51), 'None')
    # Getting the type of 'None' (line 5406)
    None_588464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5406, 67), 'None')
    defaults = [None_588463, None_588464]
    # Create a new context for function '_cdf_distance'
    module_type_store = module_type_store.open_function_context('_cdf_distance', 5406, 0, False)
    
    # Passed parameters checking function
    _cdf_distance.stypy_localization = localization
    _cdf_distance.stypy_type_of_self = None
    _cdf_distance.stypy_type_store = module_type_store
    _cdf_distance.stypy_function_name = '_cdf_distance'
    _cdf_distance.stypy_param_names_list = ['p', 'u_values', 'v_values', 'u_weights', 'v_weights']
    _cdf_distance.stypy_varargs_param_name = None
    _cdf_distance.stypy_kwargs_param_name = None
    _cdf_distance.stypy_call_defaults = defaults
    _cdf_distance.stypy_call_varargs = varargs
    _cdf_distance.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_cdf_distance', ['p', 'u_values', 'v_values', 'u_weights', 'v_weights'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_cdf_distance', localization, ['p', 'u_values', 'v_values', 'u_weights', 'v_weights'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_cdf_distance(...)' code ##################

    str_588465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5448, (-1)), 'str', '\n    Compute, between two one-dimensional distributions :math:`u` and\n    :math:`v`, whose respective CDFs are :math:`U` and :math:`V`, the\n    statistical distance that is defined as:\n\n    .. math::\n\n        l_p(u, v) = \\left( \\int_{-\\infty}^{+\\infty} |U-V|^p \\right)^{1/p}\n\n    p is a positive parameter; p = 1 gives the Wasserstein distance, p = 2\n    gives the energy distance.\n\n    Parameters\n    ----------\n    u_values, v_values : array_like\n        Values observed in the (empirical) distribution.\n    u_weights, v_weights : array_like, optional\n        Weight for each value. If unspecified, each value is assigned the same\n        weight.\n        `u_weights` (resp. `v_weights`) must have the same length as\n        `u_values` (resp. `v_values`). If the weight sum differs from 1, it\n        must still be positive and finite so that the weights can be normalized\n        to sum to 1.\n\n    Returns\n    -------\n    distance : float\n        The computed distance between the distributions.\n\n    Notes\n    -----\n    The input distributions can be empirical, therefore coming from samples\n    whose values are effectively inputs of the function, or they can be seen as\n    generalized functions, in which case they are weighted sums of Dirac delta\n    functions located at the specified values.\n\n    References\n    ----------\n    .. [1] Bellemare, Danihelka, Dabney, Mohamed, Lakshminarayanan, Hoyer,\n           Munos "The Cramer Distance as a Solution to Biased Wasserstein\n           Gradients" (2017). :arXiv:`1705.10743`.\n    ')
    
    # Assigning a Call to a Tuple (line 5449):
    
    # Assigning a Subscript to a Name (line 5449):
    
    # Obtaining the type of the subscript
    int_588466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5449, 4), 'int')
    
    # Call to _validate_distribution(...): (line 5449)
    # Processing the call arguments (line 5449)
    # Getting the type of 'u_values' (line 5449)
    u_values_588468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5449, 49), 'u_values', False)
    # Getting the type of 'u_weights' (line 5449)
    u_weights_588469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5449, 59), 'u_weights', False)
    # Processing the call keyword arguments (line 5449)
    kwargs_588470 = {}
    # Getting the type of '_validate_distribution' (line 5449)
    _validate_distribution_588467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5449, 26), '_validate_distribution', False)
    # Calling _validate_distribution(args, kwargs) (line 5449)
    _validate_distribution_call_result_588471 = invoke(stypy.reporting.localization.Localization(__file__, 5449, 26), _validate_distribution_588467, *[u_values_588468, u_weights_588469], **kwargs_588470)
    
    # Obtaining the member '__getitem__' of a type (line 5449)
    getitem___588472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5449, 4), _validate_distribution_call_result_588471, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5449)
    subscript_call_result_588473 = invoke(stypy.reporting.localization.Localization(__file__, 5449, 4), getitem___588472, int_588466)
    
    # Assigning a type to the variable 'tuple_var_assignment_579981' (line 5449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5449, 4), 'tuple_var_assignment_579981', subscript_call_result_588473)
    
    # Assigning a Subscript to a Name (line 5449):
    
    # Obtaining the type of the subscript
    int_588474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5449, 4), 'int')
    
    # Call to _validate_distribution(...): (line 5449)
    # Processing the call arguments (line 5449)
    # Getting the type of 'u_values' (line 5449)
    u_values_588476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5449, 49), 'u_values', False)
    # Getting the type of 'u_weights' (line 5449)
    u_weights_588477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5449, 59), 'u_weights', False)
    # Processing the call keyword arguments (line 5449)
    kwargs_588478 = {}
    # Getting the type of '_validate_distribution' (line 5449)
    _validate_distribution_588475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5449, 26), '_validate_distribution', False)
    # Calling _validate_distribution(args, kwargs) (line 5449)
    _validate_distribution_call_result_588479 = invoke(stypy.reporting.localization.Localization(__file__, 5449, 26), _validate_distribution_588475, *[u_values_588476, u_weights_588477], **kwargs_588478)
    
    # Obtaining the member '__getitem__' of a type (line 5449)
    getitem___588480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5449, 4), _validate_distribution_call_result_588479, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5449)
    subscript_call_result_588481 = invoke(stypy.reporting.localization.Localization(__file__, 5449, 4), getitem___588480, int_588474)
    
    # Assigning a type to the variable 'tuple_var_assignment_579982' (line 5449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5449, 4), 'tuple_var_assignment_579982', subscript_call_result_588481)
    
    # Assigning a Name to a Name (line 5449):
    # Getting the type of 'tuple_var_assignment_579981' (line 5449)
    tuple_var_assignment_579981_588482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5449, 4), 'tuple_var_assignment_579981')
    # Assigning a type to the variable 'u_values' (line 5449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5449, 4), 'u_values', tuple_var_assignment_579981_588482)
    
    # Assigning a Name to a Name (line 5449):
    # Getting the type of 'tuple_var_assignment_579982' (line 5449)
    tuple_var_assignment_579982_588483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5449, 4), 'tuple_var_assignment_579982')
    # Assigning a type to the variable 'u_weights' (line 5449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5449, 14), 'u_weights', tuple_var_assignment_579982_588483)
    
    # Assigning a Call to a Tuple (line 5450):
    
    # Assigning a Subscript to a Name (line 5450):
    
    # Obtaining the type of the subscript
    int_588484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5450, 4), 'int')
    
    # Call to _validate_distribution(...): (line 5450)
    # Processing the call arguments (line 5450)
    # Getting the type of 'v_values' (line 5450)
    v_values_588486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5450, 49), 'v_values', False)
    # Getting the type of 'v_weights' (line 5450)
    v_weights_588487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5450, 59), 'v_weights', False)
    # Processing the call keyword arguments (line 5450)
    kwargs_588488 = {}
    # Getting the type of '_validate_distribution' (line 5450)
    _validate_distribution_588485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5450, 26), '_validate_distribution', False)
    # Calling _validate_distribution(args, kwargs) (line 5450)
    _validate_distribution_call_result_588489 = invoke(stypy.reporting.localization.Localization(__file__, 5450, 26), _validate_distribution_588485, *[v_values_588486, v_weights_588487], **kwargs_588488)
    
    # Obtaining the member '__getitem__' of a type (line 5450)
    getitem___588490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5450, 4), _validate_distribution_call_result_588489, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5450)
    subscript_call_result_588491 = invoke(stypy.reporting.localization.Localization(__file__, 5450, 4), getitem___588490, int_588484)
    
    # Assigning a type to the variable 'tuple_var_assignment_579983' (line 5450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5450, 4), 'tuple_var_assignment_579983', subscript_call_result_588491)
    
    # Assigning a Subscript to a Name (line 5450):
    
    # Obtaining the type of the subscript
    int_588492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5450, 4), 'int')
    
    # Call to _validate_distribution(...): (line 5450)
    # Processing the call arguments (line 5450)
    # Getting the type of 'v_values' (line 5450)
    v_values_588494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5450, 49), 'v_values', False)
    # Getting the type of 'v_weights' (line 5450)
    v_weights_588495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5450, 59), 'v_weights', False)
    # Processing the call keyword arguments (line 5450)
    kwargs_588496 = {}
    # Getting the type of '_validate_distribution' (line 5450)
    _validate_distribution_588493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5450, 26), '_validate_distribution', False)
    # Calling _validate_distribution(args, kwargs) (line 5450)
    _validate_distribution_call_result_588497 = invoke(stypy.reporting.localization.Localization(__file__, 5450, 26), _validate_distribution_588493, *[v_values_588494, v_weights_588495], **kwargs_588496)
    
    # Obtaining the member '__getitem__' of a type (line 5450)
    getitem___588498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5450, 4), _validate_distribution_call_result_588497, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5450)
    subscript_call_result_588499 = invoke(stypy.reporting.localization.Localization(__file__, 5450, 4), getitem___588498, int_588492)
    
    # Assigning a type to the variable 'tuple_var_assignment_579984' (line 5450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5450, 4), 'tuple_var_assignment_579984', subscript_call_result_588499)
    
    # Assigning a Name to a Name (line 5450):
    # Getting the type of 'tuple_var_assignment_579983' (line 5450)
    tuple_var_assignment_579983_588500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5450, 4), 'tuple_var_assignment_579983')
    # Assigning a type to the variable 'v_values' (line 5450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5450, 4), 'v_values', tuple_var_assignment_579983_588500)
    
    # Assigning a Name to a Name (line 5450):
    # Getting the type of 'tuple_var_assignment_579984' (line 5450)
    tuple_var_assignment_579984_588501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5450, 4), 'tuple_var_assignment_579984')
    # Assigning a type to the variable 'v_weights' (line 5450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5450, 14), 'v_weights', tuple_var_assignment_579984_588501)
    
    # Assigning a Call to a Name (line 5452):
    
    # Assigning a Call to a Name (line 5452):
    
    # Call to argsort(...): (line 5452)
    # Processing the call arguments (line 5452)
    # Getting the type of 'u_values' (line 5452)
    u_values_588504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5452, 26), 'u_values', False)
    # Processing the call keyword arguments (line 5452)
    kwargs_588505 = {}
    # Getting the type of 'np' (line 5452)
    np_588502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5452, 15), 'np', False)
    # Obtaining the member 'argsort' of a type (line 5452)
    argsort_588503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5452, 15), np_588502, 'argsort')
    # Calling argsort(args, kwargs) (line 5452)
    argsort_call_result_588506 = invoke(stypy.reporting.localization.Localization(__file__, 5452, 15), argsort_588503, *[u_values_588504], **kwargs_588505)
    
    # Assigning a type to the variable 'u_sorter' (line 5452)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5452, 4), 'u_sorter', argsort_call_result_588506)
    
    # Assigning a Call to a Name (line 5453):
    
    # Assigning a Call to a Name (line 5453):
    
    # Call to argsort(...): (line 5453)
    # Processing the call arguments (line 5453)
    # Getting the type of 'v_values' (line 5453)
    v_values_588509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5453, 26), 'v_values', False)
    # Processing the call keyword arguments (line 5453)
    kwargs_588510 = {}
    # Getting the type of 'np' (line 5453)
    np_588507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5453, 15), 'np', False)
    # Obtaining the member 'argsort' of a type (line 5453)
    argsort_588508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5453, 15), np_588507, 'argsort')
    # Calling argsort(args, kwargs) (line 5453)
    argsort_call_result_588511 = invoke(stypy.reporting.localization.Localization(__file__, 5453, 15), argsort_588508, *[v_values_588509], **kwargs_588510)
    
    # Assigning a type to the variable 'v_sorter' (line 5453)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5453, 4), 'v_sorter', argsort_call_result_588511)
    
    # Assigning a Call to a Name (line 5455):
    
    # Assigning a Call to a Name (line 5455):
    
    # Call to concatenate(...): (line 5455)
    # Processing the call arguments (line 5455)
    
    # Obtaining an instance of the builtin type 'tuple' (line 5455)
    tuple_588514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5455, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 5455)
    # Adding element type (line 5455)
    # Getting the type of 'u_values' (line 5455)
    u_values_588515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5455, 33), 'u_values', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5455, 33), tuple_588514, u_values_588515)
    # Adding element type (line 5455)
    # Getting the type of 'v_values' (line 5455)
    v_values_588516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5455, 43), 'v_values', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5455, 33), tuple_588514, v_values_588516)
    
    # Processing the call keyword arguments (line 5455)
    kwargs_588517 = {}
    # Getting the type of 'np' (line 5455)
    np_588512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5455, 17), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 5455)
    concatenate_588513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5455, 17), np_588512, 'concatenate')
    # Calling concatenate(args, kwargs) (line 5455)
    concatenate_call_result_588518 = invoke(stypy.reporting.localization.Localization(__file__, 5455, 17), concatenate_588513, *[tuple_588514], **kwargs_588517)
    
    # Assigning a type to the variable 'all_values' (line 5455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5455, 4), 'all_values', concatenate_call_result_588518)
    
    # Call to sort(...): (line 5456)
    # Processing the call keyword arguments (line 5456)
    str_588521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5456, 25), 'str', 'mergesort')
    keyword_588522 = str_588521
    kwargs_588523 = {'kind': keyword_588522}
    # Getting the type of 'all_values' (line 5456)
    all_values_588519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5456, 4), 'all_values', False)
    # Obtaining the member 'sort' of a type (line 5456)
    sort_588520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5456, 4), all_values_588519, 'sort')
    # Calling sort(args, kwargs) (line 5456)
    sort_call_result_588524 = invoke(stypy.reporting.localization.Localization(__file__, 5456, 4), sort_588520, *[], **kwargs_588523)
    
    
    # Assigning a Call to a Name (line 5459):
    
    # Assigning a Call to a Name (line 5459):
    
    # Call to diff(...): (line 5459)
    # Processing the call arguments (line 5459)
    # Getting the type of 'all_values' (line 5459)
    all_values_588527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5459, 21), 'all_values', False)
    # Processing the call keyword arguments (line 5459)
    kwargs_588528 = {}
    # Getting the type of 'np' (line 5459)
    np_588525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5459, 13), 'np', False)
    # Obtaining the member 'diff' of a type (line 5459)
    diff_588526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5459, 13), np_588525, 'diff')
    # Calling diff(args, kwargs) (line 5459)
    diff_call_result_588529 = invoke(stypy.reporting.localization.Localization(__file__, 5459, 13), diff_588526, *[all_values_588527], **kwargs_588528)
    
    # Assigning a type to the variable 'deltas' (line 5459)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5459, 4), 'deltas', diff_call_result_588529)
    
    # Assigning a Call to a Name (line 5463):
    
    # Assigning a Call to a Name (line 5463):
    
    # Call to searchsorted(...): (line 5463)
    # Processing the call arguments (line 5463)
    
    # Obtaining the type of the subscript
    int_588535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5463, 64), 'int')
    slice_588536 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 5463, 52), None, int_588535, None)
    # Getting the type of 'all_values' (line 5463)
    all_values_588537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5463, 52), 'all_values', False)
    # Obtaining the member '__getitem__' of a type (line 5463)
    getitem___588538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5463, 52), all_values_588537, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5463)
    subscript_call_result_588539 = invoke(stypy.reporting.localization.Localization(__file__, 5463, 52), getitem___588538, slice_588536)
    
    str_588540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5463, 69), 'str', 'right')
    # Processing the call keyword arguments (line 5463)
    kwargs_588541 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'u_sorter' (line 5463)
    u_sorter_588530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5463, 29), 'u_sorter', False)
    # Getting the type of 'u_values' (line 5463)
    u_values_588531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5463, 20), 'u_values', False)
    # Obtaining the member '__getitem__' of a type (line 5463)
    getitem___588532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5463, 20), u_values_588531, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5463)
    subscript_call_result_588533 = invoke(stypy.reporting.localization.Localization(__file__, 5463, 20), getitem___588532, u_sorter_588530)
    
    # Obtaining the member 'searchsorted' of a type (line 5463)
    searchsorted_588534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5463, 20), subscript_call_result_588533, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 5463)
    searchsorted_call_result_588542 = invoke(stypy.reporting.localization.Localization(__file__, 5463, 20), searchsorted_588534, *[subscript_call_result_588539, str_588540], **kwargs_588541)
    
    # Assigning a type to the variable 'u_cdf_indices' (line 5463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5463, 4), 'u_cdf_indices', searchsorted_call_result_588542)
    
    # Assigning a Call to a Name (line 5464):
    
    # Assigning a Call to a Name (line 5464):
    
    # Call to searchsorted(...): (line 5464)
    # Processing the call arguments (line 5464)
    
    # Obtaining the type of the subscript
    int_588548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5464, 64), 'int')
    slice_588549 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 5464, 52), None, int_588548, None)
    # Getting the type of 'all_values' (line 5464)
    all_values_588550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5464, 52), 'all_values', False)
    # Obtaining the member '__getitem__' of a type (line 5464)
    getitem___588551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5464, 52), all_values_588550, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5464)
    subscript_call_result_588552 = invoke(stypy.reporting.localization.Localization(__file__, 5464, 52), getitem___588551, slice_588549)
    
    str_588553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5464, 69), 'str', 'right')
    # Processing the call keyword arguments (line 5464)
    kwargs_588554 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'v_sorter' (line 5464)
    v_sorter_588543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5464, 29), 'v_sorter', False)
    # Getting the type of 'v_values' (line 5464)
    v_values_588544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5464, 20), 'v_values', False)
    # Obtaining the member '__getitem__' of a type (line 5464)
    getitem___588545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5464, 20), v_values_588544, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5464)
    subscript_call_result_588546 = invoke(stypy.reporting.localization.Localization(__file__, 5464, 20), getitem___588545, v_sorter_588543)
    
    # Obtaining the member 'searchsorted' of a type (line 5464)
    searchsorted_588547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5464, 20), subscript_call_result_588546, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 5464)
    searchsorted_call_result_588555 = invoke(stypy.reporting.localization.Localization(__file__, 5464, 20), searchsorted_588547, *[subscript_call_result_588552, str_588553], **kwargs_588554)
    
    # Assigning a type to the variable 'v_cdf_indices' (line 5464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5464, 4), 'v_cdf_indices', searchsorted_call_result_588555)
    
    # Type idiom detected: calculating its left and rigth part (line 5467)
    # Getting the type of 'u_weights' (line 5467)
    u_weights_588556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5467, 7), 'u_weights')
    # Getting the type of 'None' (line 5467)
    None_588557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5467, 20), 'None')
    
    (may_be_588558, more_types_in_union_588559) = may_be_none(u_weights_588556, None_588557)

    if may_be_588558:

        if more_types_in_union_588559:
            # Runtime conditional SSA (line 5467)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 5468):
        
        # Assigning a BinOp to a Name (line 5468):
        # Getting the type of 'u_cdf_indices' (line 5468)
        u_cdf_indices_588560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5468, 16), 'u_cdf_indices')
        # Getting the type of 'u_values' (line 5468)
        u_values_588561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5468, 32), 'u_values')
        # Obtaining the member 'size' of a type (line 5468)
        size_588562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5468, 32), u_values_588561, 'size')
        # Applying the binary operator 'div' (line 5468)
        result_div_588563 = python_operator(stypy.reporting.localization.Localization(__file__, 5468, 16), 'div', u_cdf_indices_588560, size_588562)
        
        # Assigning a type to the variable 'u_cdf' (line 5468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5468, 8), 'u_cdf', result_div_588563)

        if more_types_in_union_588559:
            # Runtime conditional SSA for else branch (line 5467)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_588558) or more_types_in_union_588559):
        
        # Assigning a Call to a Name (line 5470):
        
        # Assigning a Call to a Name (line 5470):
        
        # Call to concatenate(...): (line 5470)
        # Processing the call arguments (line 5470)
        
        # Obtaining an instance of the builtin type 'tuple' (line 5470)
        tuple_588566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5470, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5470)
        # Adding element type (line 5470)
        
        # Obtaining an instance of the builtin type 'list' (line 5470)
        list_588567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5470, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 5470)
        # Adding element type (line 5470)
        int_588568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5470, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5470, 46), list_588567, int_588568)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5470, 46), tuple_588566, list_588567)
        # Adding element type (line 5470)
        
        # Call to cumsum(...): (line 5471)
        # Processing the call arguments (line 5471)
        
        # Obtaining the type of the subscript
        # Getting the type of 'u_sorter' (line 5471)
        u_sorter_588571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5471, 66), 'u_sorter', False)
        # Getting the type of 'u_weights' (line 5471)
        u_weights_588572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5471, 56), 'u_weights', False)
        # Obtaining the member '__getitem__' of a type (line 5471)
        getitem___588573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5471, 56), u_weights_588572, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5471)
        subscript_call_result_588574 = invoke(stypy.reporting.localization.Localization(__file__, 5471, 56), getitem___588573, u_sorter_588571)
        
        # Processing the call keyword arguments (line 5471)
        kwargs_588575 = {}
        # Getting the type of 'np' (line 5471)
        np_588569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5471, 46), 'np', False)
        # Obtaining the member 'cumsum' of a type (line 5471)
        cumsum_588570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5471, 46), np_588569, 'cumsum')
        # Calling cumsum(args, kwargs) (line 5471)
        cumsum_call_result_588576 = invoke(stypy.reporting.localization.Localization(__file__, 5471, 46), cumsum_588570, *[subscript_call_result_588574], **kwargs_588575)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5470, 46), tuple_588566, cumsum_call_result_588576)
        
        # Processing the call keyword arguments (line 5470)
        kwargs_588577 = {}
        # Getting the type of 'np' (line 5470)
        np_588564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5470, 30), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 5470)
        concatenate_588565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5470, 30), np_588564, 'concatenate')
        # Calling concatenate(args, kwargs) (line 5470)
        concatenate_call_result_588578 = invoke(stypy.reporting.localization.Localization(__file__, 5470, 30), concatenate_588565, *[tuple_588566], **kwargs_588577)
        
        # Assigning a type to the variable 'u_sorted_cumweights' (line 5470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5470, 8), 'u_sorted_cumweights', concatenate_call_result_588578)
        
        # Assigning a BinOp to a Name (line 5472):
        
        # Assigning a BinOp to a Name (line 5472):
        
        # Obtaining the type of the subscript
        # Getting the type of 'u_cdf_indices' (line 5472)
        u_cdf_indices_588579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5472, 36), 'u_cdf_indices')
        # Getting the type of 'u_sorted_cumweights' (line 5472)
        u_sorted_cumweights_588580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5472, 16), 'u_sorted_cumweights')
        # Obtaining the member '__getitem__' of a type (line 5472)
        getitem___588581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5472, 16), u_sorted_cumweights_588580, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5472)
        subscript_call_result_588582 = invoke(stypy.reporting.localization.Localization(__file__, 5472, 16), getitem___588581, u_cdf_indices_588579)
        
        
        # Obtaining the type of the subscript
        int_588583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5472, 73), 'int')
        # Getting the type of 'u_sorted_cumweights' (line 5472)
        u_sorted_cumweights_588584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5472, 53), 'u_sorted_cumweights')
        # Obtaining the member '__getitem__' of a type (line 5472)
        getitem___588585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5472, 53), u_sorted_cumweights_588584, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5472)
        subscript_call_result_588586 = invoke(stypy.reporting.localization.Localization(__file__, 5472, 53), getitem___588585, int_588583)
        
        # Applying the binary operator 'div' (line 5472)
        result_div_588587 = python_operator(stypy.reporting.localization.Localization(__file__, 5472, 16), 'div', subscript_call_result_588582, subscript_call_result_588586)
        
        # Assigning a type to the variable 'u_cdf' (line 5472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5472, 8), 'u_cdf', result_div_588587)

        if (may_be_588558 and more_types_in_union_588559):
            # SSA join for if statement (line 5467)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 5474)
    # Getting the type of 'v_weights' (line 5474)
    v_weights_588588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5474, 7), 'v_weights')
    # Getting the type of 'None' (line 5474)
    None_588589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5474, 20), 'None')
    
    (may_be_588590, more_types_in_union_588591) = may_be_none(v_weights_588588, None_588589)

    if may_be_588590:

        if more_types_in_union_588591:
            # Runtime conditional SSA (line 5474)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 5475):
        
        # Assigning a BinOp to a Name (line 5475):
        # Getting the type of 'v_cdf_indices' (line 5475)
        v_cdf_indices_588592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5475, 16), 'v_cdf_indices')
        # Getting the type of 'v_values' (line 5475)
        v_values_588593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5475, 32), 'v_values')
        # Obtaining the member 'size' of a type (line 5475)
        size_588594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5475, 32), v_values_588593, 'size')
        # Applying the binary operator 'div' (line 5475)
        result_div_588595 = python_operator(stypy.reporting.localization.Localization(__file__, 5475, 16), 'div', v_cdf_indices_588592, size_588594)
        
        # Assigning a type to the variable 'v_cdf' (line 5475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5475, 8), 'v_cdf', result_div_588595)

        if more_types_in_union_588591:
            # Runtime conditional SSA for else branch (line 5474)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_588590) or more_types_in_union_588591):
        
        # Assigning a Call to a Name (line 5477):
        
        # Assigning a Call to a Name (line 5477):
        
        # Call to concatenate(...): (line 5477)
        # Processing the call arguments (line 5477)
        
        # Obtaining an instance of the builtin type 'tuple' (line 5477)
        tuple_588598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5477, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5477)
        # Adding element type (line 5477)
        
        # Obtaining an instance of the builtin type 'list' (line 5477)
        list_588599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5477, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 5477)
        # Adding element type (line 5477)
        int_588600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5477, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5477, 46), list_588599, int_588600)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5477, 46), tuple_588598, list_588599)
        # Adding element type (line 5477)
        
        # Call to cumsum(...): (line 5478)
        # Processing the call arguments (line 5478)
        
        # Obtaining the type of the subscript
        # Getting the type of 'v_sorter' (line 5478)
        v_sorter_588603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5478, 66), 'v_sorter', False)
        # Getting the type of 'v_weights' (line 5478)
        v_weights_588604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5478, 56), 'v_weights', False)
        # Obtaining the member '__getitem__' of a type (line 5478)
        getitem___588605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5478, 56), v_weights_588604, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5478)
        subscript_call_result_588606 = invoke(stypy.reporting.localization.Localization(__file__, 5478, 56), getitem___588605, v_sorter_588603)
        
        # Processing the call keyword arguments (line 5478)
        kwargs_588607 = {}
        # Getting the type of 'np' (line 5478)
        np_588601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5478, 46), 'np', False)
        # Obtaining the member 'cumsum' of a type (line 5478)
        cumsum_588602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5478, 46), np_588601, 'cumsum')
        # Calling cumsum(args, kwargs) (line 5478)
        cumsum_call_result_588608 = invoke(stypy.reporting.localization.Localization(__file__, 5478, 46), cumsum_588602, *[subscript_call_result_588606], **kwargs_588607)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5477, 46), tuple_588598, cumsum_call_result_588608)
        
        # Processing the call keyword arguments (line 5477)
        kwargs_588609 = {}
        # Getting the type of 'np' (line 5477)
        np_588596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5477, 30), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 5477)
        concatenate_588597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5477, 30), np_588596, 'concatenate')
        # Calling concatenate(args, kwargs) (line 5477)
        concatenate_call_result_588610 = invoke(stypy.reporting.localization.Localization(__file__, 5477, 30), concatenate_588597, *[tuple_588598], **kwargs_588609)
        
        # Assigning a type to the variable 'v_sorted_cumweights' (line 5477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5477, 8), 'v_sorted_cumweights', concatenate_call_result_588610)
        
        # Assigning a BinOp to a Name (line 5479):
        
        # Assigning a BinOp to a Name (line 5479):
        
        # Obtaining the type of the subscript
        # Getting the type of 'v_cdf_indices' (line 5479)
        v_cdf_indices_588611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5479, 36), 'v_cdf_indices')
        # Getting the type of 'v_sorted_cumweights' (line 5479)
        v_sorted_cumweights_588612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5479, 16), 'v_sorted_cumweights')
        # Obtaining the member '__getitem__' of a type (line 5479)
        getitem___588613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5479, 16), v_sorted_cumweights_588612, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5479)
        subscript_call_result_588614 = invoke(stypy.reporting.localization.Localization(__file__, 5479, 16), getitem___588613, v_cdf_indices_588611)
        
        
        # Obtaining the type of the subscript
        int_588615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5479, 73), 'int')
        # Getting the type of 'v_sorted_cumweights' (line 5479)
        v_sorted_cumweights_588616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5479, 53), 'v_sorted_cumweights')
        # Obtaining the member '__getitem__' of a type (line 5479)
        getitem___588617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5479, 53), v_sorted_cumweights_588616, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5479)
        subscript_call_result_588618 = invoke(stypy.reporting.localization.Localization(__file__, 5479, 53), getitem___588617, int_588615)
        
        # Applying the binary operator 'div' (line 5479)
        result_div_588619 = python_operator(stypy.reporting.localization.Localization(__file__, 5479, 16), 'div', subscript_call_result_588614, subscript_call_result_588618)
        
        # Assigning a type to the variable 'v_cdf' (line 5479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5479, 8), 'v_cdf', result_div_588619)

        if (may_be_588590 and more_types_in_union_588591):
            # SSA join for if statement (line 5474)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'p' (line 5484)
    p_588620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5484, 7), 'p')
    int_588621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5484, 12), 'int')
    # Applying the binary operator '==' (line 5484)
    result_eq_588622 = python_operator(stypy.reporting.localization.Localization(__file__, 5484, 7), '==', p_588620, int_588621)
    
    # Testing the type of an if condition (line 5484)
    if_condition_588623 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5484, 4), result_eq_588622)
    # Assigning a type to the variable 'if_condition_588623' (line 5484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5484, 4), 'if_condition_588623', if_condition_588623)
    # SSA begins for if statement (line 5484)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sum(...): (line 5485)
    # Processing the call arguments (line 5485)
    
    # Call to multiply(...): (line 5485)
    # Processing the call arguments (line 5485)
    
    # Call to abs(...): (line 5485)
    # Processing the call arguments (line 5485)
    # Getting the type of 'u_cdf' (line 5485)
    u_cdf_588630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5485, 41), 'u_cdf', False)
    # Getting the type of 'v_cdf' (line 5485)
    v_cdf_588631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5485, 49), 'v_cdf', False)
    # Applying the binary operator '-' (line 5485)
    result_sub_588632 = python_operator(stypy.reporting.localization.Localization(__file__, 5485, 41), '-', u_cdf_588630, v_cdf_588631)
    
    # Processing the call keyword arguments (line 5485)
    kwargs_588633 = {}
    # Getting the type of 'np' (line 5485)
    np_588628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5485, 34), 'np', False)
    # Obtaining the member 'abs' of a type (line 5485)
    abs_588629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5485, 34), np_588628, 'abs')
    # Calling abs(args, kwargs) (line 5485)
    abs_call_result_588634 = invoke(stypy.reporting.localization.Localization(__file__, 5485, 34), abs_588629, *[result_sub_588632], **kwargs_588633)
    
    # Getting the type of 'deltas' (line 5485)
    deltas_588635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5485, 57), 'deltas', False)
    # Processing the call keyword arguments (line 5485)
    kwargs_588636 = {}
    # Getting the type of 'np' (line 5485)
    np_588626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5485, 22), 'np', False)
    # Obtaining the member 'multiply' of a type (line 5485)
    multiply_588627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5485, 22), np_588626, 'multiply')
    # Calling multiply(args, kwargs) (line 5485)
    multiply_call_result_588637 = invoke(stypy.reporting.localization.Localization(__file__, 5485, 22), multiply_588627, *[abs_call_result_588634, deltas_588635], **kwargs_588636)
    
    # Processing the call keyword arguments (line 5485)
    kwargs_588638 = {}
    # Getting the type of 'np' (line 5485)
    np_588624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5485, 15), 'np', False)
    # Obtaining the member 'sum' of a type (line 5485)
    sum_588625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5485, 15), np_588624, 'sum')
    # Calling sum(args, kwargs) (line 5485)
    sum_call_result_588639 = invoke(stypy.reporting.localization.Localization(__file__, 5485, 15), sum_588625, *[multiply_call_result_588637], **kwargs_588638)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5485, 8), 'stypy_return_type', sum_call_result_588639)
    # SSA join for if statement (line 5484)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'p' (line 5486)
    p_588640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5486, 7), 'p')
    int_588641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5486, 12), 'int')
    # Applying the binary operator '==' (line 5486)
    result_eq_588642 = python_operator(stypy.reporting.localization.Localization(__file__, 5486, 7), '==', p_588640, int_588641)
    
    # Testing the type of an if condition (line 5486)
    if_condition_588643 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5486, 4), result_eq_588642)
    # Assigning a type to the variable 'if_condition_588643' (line 5486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5486, 4), 'if_condition_588643', if_condition_588643)
    # SSA begins for if statement (line 5486)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sqrt(...): (line 5487)
    # Processing the call arguments (line 5487)
    
    # Call to sum(...): (line 5487)
    # Processing the call arguments (line 5487)
    
    # Call to multiply(...): (line 5487)
    # Processing the call arguments (line 5487)
    
    # Call to square(...): (line 5487)
    # Processing the call arguments (line 5487)
    # Getting the type of 'u_cdf' (line 5487)
    u_cdf_588652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5487, 52), 'u_cdf', False)
    # Getting the type of 'v_cdf' (line 5487)
    v_cdf_588653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5487, 60), 'v_cdf', False)
    # Applying the binary operator '-' (line 5487)
    result_sub_588654 = python_operator(stypy.reporting.localization.Localization(__file__, 5487, 52), '-', u_cdf_588652, v_cdf_588653)
    
    # Processing the call keyword arguments (line 5487)
    kwargs_588655 = {}
    # Getting the type of 'np' (line 5487)
    np_588650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5487, 42), 'np', False)
    # Obtaining the member 'square' of a type (line 5487)
    square_588651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5487, 42), np_588650, 'square')
    # Calling square(args, kwargs) (line 5487)
    square_call_result_588656 = invoke(stypy.reporting.localization.Localization(__file__, 5487, 42), square_588651, *[result_sub_588654], **kwargs_588655)
    
    # Getting the type of 'deltas' (line 5487)
    deltas_588657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5487, 68), 'deltas', False)
    # Processing the call keyword arguments (line 5487)
    kwargs_588658 = {}
    # Getting the type of 'np' (line 5487)
    np_588648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5487, 30), 'np', False)
    # Obtaining the member 'multiply' of a type (line 5487)
    multiply_588649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5487, 30), np_588648, 'multiply')
    # Calling multiply(args, kwargs) (line 5487)
    multiply_call_result_588659 = invoke(stypy.reporting.localization.Localization(__file__, 5487, 30), multiply_588649, *[square_call_result_588656, deltas_588657], **kwargs_588658)
    
    # Processing the call keyword arguments (line 5487)
    kwargs_588660 = {}
    # Getting the type of 'np' (line 5487)
    np_588646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5487, 23), 'np', False)
    # Obtaining the member 'sum' of a type (line 5487)
    sum_588647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5487, 23), np_588646, 'sum')
    # Calling sum(args, kwargs) (line 5487)
    sum_call_result_588661 = invoke(stypy.reporting.localization.Localization(__file__, 5487, 23), sum_588647, *[multiply_call_result_588659], **kwargs_588660)
    
    # Processing the call keyword arguments (line 5487)
    kwargs_588662 = {}
    # Getting the type of 'np' (line 5487)
    np_588644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5487, 15), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 5487)
    sqrt_588645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5487, 15), np_588644, 'sqrt')
    # Calling sqrt(args, kwargs) (line 5487)
    sqrt_call_result_588663 = invoke(stypy.reporting.localization.Localization(__file__, 5487, 15), sqrt_588645, *[sum_call_result_588661], **kwargs_588662)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5487, 8), 'stypy_return_type', sqrt_call_result_588663)
    # SSA join for if statement (line 5486)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to power(...): (line 5488)
    # Processing the call arguments (line 5488)
    
    # Call to sum(...): (line 5488)
    # Processing the call arguments (line 5488)
    
    # Call to multiply(...): (line 5488)
    # Processing the call arguments (line 5488)
    
    # Call to power(...): (line 5488)
    # Processing the call arguments (line 5488)
    
    # Call to abs(...): (line 5488)
    # Processing the call arguments (line 5488)
    # Getting the type of 'u_cdf' (line 5488)
    u_cdf_588674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5488, 55), 'u_cdf', False)
    # Getting the type of 'v_cdf' (line 5488)
    v_cdf_588675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5488, 63), 'v_cdf', False)
    # Applying the binary operator '-' (line 5488)
    result_sub_588676 = python_operator(stypy.reporting.localization.Localization(__file__, 5488, 55), '-', u_cdf_588674, v_cdf_588675)
    
    # Processing the call keyword arguments (line 5488)
    kwargs_588677 = {}
    # Getting the type of 'np' (line 5488)
    np_588672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5488, 48), 'np', False)
    # Obtaining the member 'abs' of a type (line 5488)
    abs_588673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5488, 48), np_588672, 'abs')
    # Calling abs(args, kwargs) (line 5488)
    abs_call_result_588678 = invoke(stypy.reporting.localization.Localization(__file__, 5488, 48), abs_588673, *[result_sub_588676], **kwargs_588677)
    
    # Getting the type of 'p' (line 5488)
    p_588679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5488, 71), 'p', False)
    # Processing the call keyword arguments (line 5488)
    kwargs_588680 = {}
    # Getting the type of 'np' (line 5488)
    np_588670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5488, 39), 'np', False)
    # Obtaining the member 'power' of a type (line 5488)
    power_588671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5488, 39), np_588670, 'power')
    # Calling power(args, kwargs) (line 5488)
    power_call_result_588681 = invoke(stypy.reporting.localization.Localization(__file__, 5488, 39), power_588671, *[abs_call_result_588678, p_588679], **kwargs_588680)
    
    # Getting the type of 'deltas' (line 5489)
    deltas_588682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5489, 39), 'deltas', False)
    # Processing the call keyword arguments (line 5488)
    kwargs_588683 = {}
    # Getting the type of 'np' (line 5488)
    np_588668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5488, 27), 'np', False)
    # Obtaining the member 'multiply' of a type (line 5488)
    multiply_588669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5488, 27), np_588668, 'multiply')
    # Calling multiply(args, kwargs) (line 5488)
    multiply_call_result_588684 = invoke(stypy.reporting.localization.Localization(__file__, 5488, 27), multiply_588669, *[power_call_result_588681, deltas_588682], **kwargs_588683)
    
    # Processing the call keyword arguments (line 5488)
    kwargs_588685 = {}
    # Getting the type of 'np' (line 5488)
    np_588666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5488, 20), 'np', False)
    # Obtaining the member 'sum' of a type (line 5488)
    sum_588667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5488, 20), np_588666, 'sum')
    # Calling sum(args, kwargs) (line 5488)
    sum_call_result_588686 = invoke(stypy.reporting.localization.Localization(__file__, 5488, 20), sum_588667, *[multiply_call_result_588684], **kwargs_588685)
    
    int_588687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5489, 49), 'int')
    # Getting the type of 'p' (line 5489)
    p_588688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5489, 51), 'p', False)
    # Applying the binary operator 'div' (line 5489)
    result_div_588689 = python_operator(stypy.reporting.localization.Localization(__file__, 5489, 49), 'div', int_588687, p_588688)
    
    # Processing the call keyword arguments (line 5488)
    kwargs_588690 = {}
    # Getting the type of 'np' (line 5488)
    np_588664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5488, 11), 'np', False)
    # Obtaining the member 'power' of a type (line 5488)
    power_588665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5488, 11), np_588664, 'power')
    # Calling power(args, kwargs) (line 5488)
    power_call_result_588691 = invoke(stypy.reporting.localization.Localization(__file__, 5488, 11), power_588665, *[sum_call_result_588686, result_div_588689], **kwargs_588690)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5488, 4), 'stypy_return_type', power_call_result_588691)
    
    # ################# End of '_cdf_distance(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_cdf_distance' in the type store
    # Getting the type of 'stypy_return_type' (line 5406)
    stypy_return_type_588692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5406, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_588692)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_cdf_distance'
    return stypy_return_type_588692

# Assigning a type to the variable '_cdf_distance' (line 5406)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5406, 0), '_cdf_distance', _cdf_distance)

@norecursion
def _validate_distribution(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_validate_distribution'
    module_type_store = module_type_store.open_function_context('_validate_distribution', 5492, 0, False)
    
    # Passed parameters checking function
    _validate_distribution.stypy_localization = localization
    _validate_distribution.stypy_type_of_self = None
    _validate_distribution.stypy_type_store = module_type_store
    _validate_distribution.stypy_function_name = '_validate_distribution'
    _validate_distribution.stypy_param_names_list = ['values', 'weights']
    _validate_distribution.stypy_varargs_param_name = None
    _validate_distribution.stypy_kwargs_param_name = None
    _validate_distribution.stypy_call_defaults = defaults
    _validate_distribution.stypy_call_varargs = varargs
    _validate_distribution.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_validate_distribution', ['values', 'weights'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_validate_distribution', localization, ['values', 'weights'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_validate_distribution(...)' code ##################

    str_588693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5510, (-1)), 'str', '\n    Validate the values and weights from a distribution input of `cdf_distance`\n    and return them as ndarray objects.\n\n    Parameters\n    ----------\n    values : array_like\n        Values observed in the (empirical) distribution.\n    weights : array_like\n        Weight for each value.\n\n    Returns\n    -------\n    values : ndarray\n        Values as ndarray.\n    weights : ndarray\n        Weights as ndarray.\n    ')
    
    # Assigning a Call to a Name (line 5512):
    
    # Assigning a Call to a Name (line 5512):
    
    # Call to asarray(...): (line 5512)
    # Processing the call arguments (line 5512)
    # Getting the type of 'values' (line 5512)
    values_588696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5512, 24), 'values', False)
    # Processing the call keyword arguments (line 5512)
    # Getting the type of 'float' (line 5512)
    float_588697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5512, 38), 'float', False)
    keyword_588698 = float_588697
    kwargs_588699 = {'dtype': keyword_588698}
    # Getting the type of 'np' (line 5512)
    np_588694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5512, 13), 'np', False)
    # Obtaining the member 'asarray' of a type (line 5512)
    asarray_588695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5512, 13), np_588694, 'asarray')
    # Calling asarray(args, kwargs) (line 5512)
    asarray_call_result_588700 = invoke(stypy.reporting.localization.Localization(__file__, 5512, 13), asarray_588695, *[values_588696], **kwargs_588699)
    
    # Assigning a type to the variable 'values' (line 5512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5512, 4), 'values', asarray_call_result_588700)
    
    
    
    # Call to len(...): (line 5513)
    # Processing the call arguments (line 5513)
    # Getting the type of 'values' (line 5513)
    values_588702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5513, 11), 'values', False)
    # Processing the call keyword arguments (line 5513)
    kwargs_588703 = {}
    # Getting the type of 'len' (line 5513)
    len_588701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5513, 7), 'len', False)
    # Calling len(args, kwargs) (line 5513)
    len_call_result_588704 = invoke(stypy.reporting.localization.Localization(__file__, 5513, 7), len_588701, *[values_588702], **kwargs_588703)
    
    int_588705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5513, 22), 'int')
    # Applying the binary operator '==' (line 5513)
    result_eq_588706 = python_operator(stypy.reporting.localization.Localization(__file__, 5513, 7), '==', len_call_result_588704, int_588705)
    
    # Testing the type of an if condition (line 5513)
    if_condition_588707 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5513, 4), result_eq_588706)
    # Assigning a type to the variable 'if_condition_588707' (line 5513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5513, 4), 'if_condition_588707', if_condition_588707)
    # SSA begins for if statement (line 5513)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 5514)
    # Processing the call arguments (line 5514)
    str_588709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5514, 25), 'str', "Distribution can't be empty.")
    # Processing the call keyword arguments (line 5514)
    kwargs_588710 = {}
    # Getting the type of 'ValueError' (line 5514)
    ValueError_588708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5514, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 5514)
    ValueError_call_result_588711 = invoke(stypy.reporting.localization.Localization(__file__, 5514, 14), ValueError_588708, *[str_588709], **kwargs_588710)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5514, 8), ValueError_call_result_588711, 'raise parameter', BaseException)
    # SSA join for if statement (line 5513)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 5517)
    # Getting the type of 'weights' (line 5517)
    weights_588712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5517, 4), 'weights')
    # Getting the type of 'None' (line 5517)
    None_588713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5517, 22), 'None')
    
    (may_be_588714, more_types_in_union_588715) = may_not_be_none(weights_588712, None_588713)

    if may_be_588714:

        if more_types_in_union_588715:
            # Runtime conditional SSA (line 5517)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 5518):
        
        # Assigning a Call to a Name (line 5518):
        
        # Call to asarray(...): (line 5518)
        # Processing the call arguments (line 5518)
        # Getting the type of 'weights' (line 5518)
        weights_588718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5518, 29), 'weights', False)
        # Processing the call keyword arguments (line 5518)
        # Getting the type of 'float' (line 5518)
        float_588719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5518, 44), 'float', False)
        keyword_588720 = float_588719
        kwargs_588721 = {'dtype': keyword_588720}
        # Getting the type of 'np' (line 5518)
        np_588716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5518, 18), 'np', False)
        # Obtaining the member 'asarray' of a type (line 5518)
        asarray_588717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5518, 18), np_588716, 'asarray')
        # Calling asarray(args, kwargs) (line 5518)
        asarray_call_result_588722 = invoke(stypy.reporting.localization.Localization(__file__, 5518, 18), asarray_588717, *[weights_588718], **kwargs_588721)
        
        # Assigning a type to the variable 'weights' (line 5518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5518, 8), 'weights', asarray_call_result_588722)
        
        
        
        # Call to len(...): (line 5519)
        # Processing the call arguments (line 5519)
        # Getting the type of 'weights' (line 5519)
        weights_588724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5519, 15), 'weights', False)
        # Processing the call keyword arguments (line 5519)
        kwargs_588725 = {}
        # Getting the type of 'len' (line 5519)
        len_588723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5519, 11), 'len', False)
        # Calling len(args, kwargs) (line 5519)
        len_call_result_588726 = invoke(stypy.reporting.localization.Localization(__file__, 5519, 11), len_588723, *[weights_588724], **kwargs_588725)
        
        
        # Call to len(...): (line 5519)
        # Processing the call arguments (line 5519)
        # Getting the type of 'values' (line 5519)
        values_588728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5519, 31), 'values', False)
        # Processing the call keyword arguments (line 5519)
        kwargs_588729 = {}
        # Getting the type of 'len' (line 5519)
        len_588727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5519, 27), 'len', False)
        # Calling len(args, kwargs) (line 5519)
        len_call_result_588730 = invoke(stypy.reporting.localization.Localization(__file__, 5519, 27), len_588727, *[values_588728], **kwargs_588729)
        
        # Applying the binary operator '!=' (line 5519)
        result_ne_588731 = python_operator(stypy.reporting.localization.Localization(__file__, 5519, 11), '!=', len_call_result_588726, len_call_result_588730)
        
        # Testing the type of an if condition (line 5519)
        if_condition_588732 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5519, 8), result_ne_588731)
        # Assigning a type to the variable 'if_condition_588732' (line 5519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5519, 8), 'if_condition_588732', if_condition_588732)
        # SSA begins for if statement (line 5519)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 5520)
        # Processing the call arguments (line 5520)
        str_588734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5520, 29), 'str', 'Value and weight array-likes for the same empirical distribution must be of the same size.')
        # Processing the call keyword arguments (line 5520)
        kwargs_588735 = {}
        # Getting the type of 'ValueError' (line 5520)
        ValueError_588733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5520, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 5520)
        ValueError_call_result_588736 = invoke(stypy.reporting.localization.Localization(__file__, 5520, 18), ValueError_588733, *[str_588734], **kwargs_588735)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5520, 12), ValueError_call_result_588736, 'raise parameter', BaseException)
        # SSA join for if statement (line 5519)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to any(...): (line 5522)
        # Processing the call arguments (line 5522)
        
        # Getting the type of 'weights' (line 5522)
        weights_588739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5522, 18), 'weights', False)
        int_588740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5522, 28), 'int')
        # Applying the binary operator '<' (line 5522)
        result_lt_588741 = python_operator(stypy.reporting.localization.Localization(__file__, 5522, 18), '<', weights_588739, int_588740)
        
        # Processing the call keyword arguments (line 5522)
        kwargs_588742 = {}
        # Getting the type of 'np' (line 5522)
        np_588737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5522, 11), 'np', False)
        # Obtaining the member 'any' of a type (line 5522)
        any_588738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5522, 11), np_588737, 'any')
        # Calling any(args, kwargs) (line 5522)
        any_call_result_588743 = invoke(stypy.reporting.localization.Localization(__file__, 5522, 11), any_588738, *[result_lt_588741], **kwargs_588742)
        
        # Testing the type of an if condition (line 5522)
        if_condition_588744 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5522, 8), any_call_result_588743)
        # Assigning a type to the variable 'if_condition_588744' (line 5522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5522, 8), 'if_condition_588744', if_condition_588744)
        # SSA begins for if statement (line 5522)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 5523)
        # Processing the call arguments (line 5523)
        str_588746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5523, 29), 'str', 'All weights must be non-negative.')
        # Processing the call keyword arguments (line 5523)
        kwargs_588747 = {}
        # Getting the type of 'ValueError' (line 5523)
        ValueError_588745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5523, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 5523)
        ValueError_call_result_588748 = invoke(stypy.reporting.localization.Localization(__file__, 5523, 18), ValueError_588745, *[str_588746], **kwargs_588747)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5523, 12), ValueError_call_result_588748, 'raise parameter', BaseException)
        # SSA join for if statement (line 5522)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        int_588749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5524, 15), 'int')
        
        # Call to sum(...): (line 5524)
        # Processing the call arguments (line 5524)
        # Getting the type of 'weights' (line 5524)
        weights_588752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5524, 26), 'weights', False)
        # Processing the call keyword arguments (line 5524)
        kwargs_588753 = {}
        # Getting the type of 'np' (line 5524)
        np_588750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5524, 19), 'np', False)
        # Obtaining the member 'sum' of a type (line 5524)
        sum_588751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5524, 19), np_588750, 'sum')
        # Calling sum(args, kwargs) (line 5524)
        sum_call_result_588754 = invoke(stypy.reporting.localization.Localization(__file__, 5524, 19), sum_588751, *[weights_588752], **kwargs_588753)
        
        # Applying the binary operator '<' (line 5524)
        result_lt_588755 = python_operator(stypy.reporting.localization.Localization(__file__, 5524, 15), '<', int_588749, sum_call_result_588754)
        # Getting the type of 'np' (line 5524)
        np_588756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5524, 37), 'np')
        # Obtaining the member 'inf' of a type (line 5524)
        inf_588757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5524, 37), np_588756, 'inf')
        # Applying the binary operator '<' (line 5524)
        result_lt_588758 = python_operator(stypy.reporting.localization.Localization(__file__, 5524, 15), '<', sum_call_result_588754, inf_588757)
        # Applying the binary operator '&' (line 5524)
        result_and__588759 = python_operator(stypy.reporting.localization.Localization(__file__, 5524, 15), '&', result_lt_588755, result_lt_588758)
        
        # Applying the 'not' unary operator (line 5524)
        result_not__588760 = python_operator(stypy.reporting.localization.Localization(__file__, 5524, 11), 'not', result_and__588759)
        
        # Testing the type of an if condition (line 5524)
        if_condition_588761 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5524, 8), result_not__588760)
        # Assigning a type to the variable 'if_condition_588761' (line 5524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5524, 8), 'if_condition_588761', if_condition_588761)
        # SSA begins for if statement (line 5524)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 5525)
        # Processing the call arguments (line 5525)
        str_588763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5525, 29), 'str', 'Weight array-like sum must be positive and finite. Set as None for an equal distribution of weight.')
        # Processing the call keyword arguments (line 5525)
        kwargs_588764 = {}
        # Getting the type of 'ValueError' (line 5525)
        ValueError_588762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5525, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 5525)
        ValueError_call_result_588765 = invoke(stypy.reporting.localization.Localization(__file__, 5525, 18), ValueError_588762, *[str_588763], **kwargs_588764)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5525, 12), ValueError_call_result_588765, 'raise parameter', BaseException)
        # SSA join for if statement (line 5524)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 5529)
        tuple_588766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5529, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5529)
        # Adding element type (line 5529)
        # Getting the type of 'values' (line 5529)
        values_588767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5529, 15), 'values')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5529, 15), tuple_588766, values_588767)
        # Adding element type (line 5529)
        # Getting the type of 'weights' (line 5529)
        weights_588768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5529, 23), 'weights')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5529, 15), tuple_588766, weights_588768)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5529, 8), 'stypy_return_type', tuple_588766)

        if more_types_in_union_588715:
            # SSA join for if statement (line 5517)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 5531)
    tuple_588769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5531, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 5531)
    # Adding element type (line 5531)
    # Getting the type of 'values' (line 5531)
    values_588770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5531, 11), 'values')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5531, 11), tuple_588769, values_588770)
    # Adding element type (line 5531)
    # Getting the type of 'None' (line 5531)
    None_588771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5531, 19), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5531, 11), tuple_588769, None_588771)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5531, 4), 'stypy_return_type', tuple_588769)
    
    # ################# End of '_validate_distribution(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_validate_distribution' in the type store
    # Getting the type of 'stypy_return_type' (line 5492)
    stypy_return_type_588772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5492, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_588772)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_validate_distribution'
    return stypy_return_type_588772

# Assigning a type to the variable '_validate_distribution' (line 5492)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5492, 0), '_validate_distribution', _validate_distribution)

# Assigning a Call to a Name (line 5538):

# Assigning a Call to a Name (line 5538):

# Call to namedtuple(...): (line 5538)
# Processing the call arguments (line 5538)
str_588774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5538, 29), 'str', 'RepeatedResults')

# Obtaining an instance of the builtin type 'tuple' (line 5538)
tuple_588775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5538, 49), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 5538)
# Adding element type (line 5538)
str_588776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5538, 49), 'str', 'values')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5538, 49), tuple_588775, str_588776)
# Adding element type (line 5538)
str_588777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5538, 59), 'str', 'counts')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5538, 49), tuple_588775, str_588777)

# Processing the call keyword arguments (line 5538)
kwargs_588778 = {}
# Getting the type of 'namedtuple' (line 5538)
namedtuple_588773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5538, 18), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 5538)
namedtuple_call_result_588779 = invoke(stypy.reporting.localization.Localization(__file__, 5538, 18), namedtuple_588773, *[str_588774, tuple_588775], **kwargs_588778)

# Assigning a type to the variable 'RepeatedResults' (line 5538)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5538, 0), 'RepeatedResults', namedtuple_call_result_588779)

@norecursion
def find_repeats(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'find_repeats'
    module_type_store = module_type_store.open_function_context('find_repeats', 5541, 0, False)
    
    # Passed parameters checking function
    find_repeats.stypy_localization = localization
    find_repeats.stypy_type_of_self = None
    find_repeats.stypy_type_store = module_type_store
    find_repeats.stypy_function_name = 'find_repeats'
    find_repeats.stypy_param_names_list = ['arr']
    find_repeats.stypy_varargs_param_name = None
    find_repeats.stypy_kwargs_param_name = None
    find_repeats.stypy_call_defaults = defaults
    find_repeats.stypy_call_varargs = varargs
    find_repeats.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'find_repeats', ['arr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'find_repeats', localization, ['arr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'find_repeats(...)' code ##################

    str_588780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5572, (-1)), 'str', "\n    Find repeats and repeat counts.\n\n    Parameters\n    ----------\n    arr : array_like\n        Input array. This is cast to float64.\n\n    Returns\n    -------\n    values : ndarray\n        The unique values from the (flattened) input that are repeated.\n\n    counts : ndarray\n        Number of times the corresponding 'value' is repeated.\n\n    Notes\n    -----\n    In numpy >= 1.9 `numpy.unique` provides similar functionality. The main\n    difference is that `find_repeats` only returns repeated values.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> stats.find_repeats([2, 1, 2, 3, 2, 2, 5])\n    RepeatedResults(values=array([ 2.]), counts=array([4]))\n\n    >>> stats.find_repeats([[10, 20, 1, 2], [5, 5, 4, 4]])\n    RepeatedResults(values=array([ 4.,  5.]), counts=array([2, 2]))\n\n    ")
    
    # Call to RepeatedResults(...): (line 5574)
    
    # Call to _find_repeats(...): (line 5574)
    # Processing the call arguments (line 5574)
    
    # Call to array(...): (line 5574)
    # Processing the call arguments (line 5574)
    # Getting the type of 'arr' (line 5574)
    arr_588785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5574, 51), 'arr', False)
    # Processing the call keyword arguments (line 5574)
    # Getting the type of 'np' (line 5574)
    np_588786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5574, 62), 'np', False)
    # Obtaining the member 'float64' of a type (line 5574)
    float64_588787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5574, 62), np_588786, 'float64')
    keyword_588788 = float64_588787
    kwargs_588789 = {'dtype': keyword_588788}
    # Getting the type of 'np' (line 5574)
    np_588783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5574, 42), 'np', False)
    # Obtaining the member 'array' of a type (line 5574)
    array_588784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5574, 42), np_588783, 'array')
    # Calling array(args, kwargs) (line 5574)
    array_call_result_588790 = invoke(stypy.reporting.localization.Localization(__file__, 5574, 42), array_588784, *[arr_588785], **kwargs_588789)
    
    # Processing the call keyword arguments (line 5574)
    kwargs_588791 = {}
    # Getting the type of '_find_repeats' (line 5574)
    _find_repeats_588782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5574, 28), '_find_repeats', False)
    # Calling _find_repeats(args, kwargs) (line 5574)
    _find_repeats_call_result_588792 = invoke(stypy.reporting.localization.Localization(__file__, 5574, 28), _find_repeats_588782, *[array_call_result_588790], **kwargs_588791)
    
    # Processing the call keyword arguments (line 5574)
    kwargs_588793 = {}
    # Getting the type of 'RepeatedResults' (line 5574)
    RepeatedResults_588781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5574, 11), 'RepeatedResults', False)
    # Calling RepeatedResults(args, kwargs) (line 5574)
    RepeatedResults_call_result_588794 = invoke(stypy.reporting.localization.Localization(__file__, 5574, 11), RepeatedResults_588781, *[_find_repeats_call_result_588792], **kwargs_588793)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5574, 4), 'stypy_return_type', RepeatedResults_call_result_588794)
    
    # ################# End of 'find_repeats(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'find_repeats' in the type store
    # Getting the type of 'stypy_return_type' (line 5541)
    stypy_return_type_588795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5541, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_588795)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'find_repeats'
    return stypy_return_type_588795

# Assigning a type to the variable 'find_repeats' (line 5541)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5541, 0), 'find_repeats', find_repeats)

@norecursion
def _sum_of_squares(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_588796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5577, 28), 'int')
    defaults = [int_588796]
    # Create a new context for function '_sum_of_squares'
    module_type_store = module_type_store.open_function_context('_sum_of_squares', 5577, 0, False)
    
    # Passed parameters checking function
    _sum_of_squares.stypy_localization = localization
    _sum_of_squares.stypy_type_of_self = None
    _sum_of_squares.stypy_type_store = module_type_store
    _sum_of_squares.stypy_function_name = '_sum_of_squares'
    _sum_of_squares.stypy_param_names_list = ['a', 'axis']
    _sum_of_squares.stypy_varargs_param_name = None
    _sum_of_squares.stypy_kwargs_param_name = None
    _sum_of_squares.stypy_call_defaults = defaults
    _sum_of_squares.stypy_call_varargs = varargs
    _sum_of_squares.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_sum_of_squares', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_sum_of_squares', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_sum_of_squares(...)' code ##################

    str_588797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5598, (-1)), 'str', '\n    Square each element of the input array, and return the sum(s) of that.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis : int or None, optional\n        Axis along which to calculate. Default is 0. If None, compute over\n        the whole array `a`.\n\n    Returns\n    -------\n    sum_of_squares : ndarray\n        The sum along the given axis for (a**2).\n\n    See also\n    --------\n    _square_of_sums : The square(s) of the sum(s) (the opposite of\n    `_sum_of_squares`).\n    ')
    
    # Assigning a Call to a Tuple (line 5599):
    
    # Assigning a Subscript to a Name (line 5599):
    
    # Obtaining the type of the subscript
    int_588798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5599, 4), 'int')
    
    # Call to _chk_asarray(...): (line 5599)
    # Processing the call arguments (line 5599)
    # Getting the type of 'a' (line 5599)
    a_588800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5599, 27), 'a', False)
    # Getting the type of 'axis' (line 5599)
    axis_588801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5599, 30), 'axis', False)
    # Processing the call keyword arguments (line 5599)
    kwargs_588802 = {}
    # Getting the type of '_chk_asarray' (line 5599)
    _chk_asarray_588799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5599, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 5599)
    _chk_asarray_call_result_588803 = invoke(stypy.reporting.localization.Localization(__file__, 5599, 14), _chk_asarray_588799, *[a_588800, axis_588801], **kwargs_588802)
    
    # Obtaining the member '__getitem__' of a type (line 5599)
    getitem___588804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5599, 4), _chk_asarray_call_result_588803, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5599)
    subscript_call_result_588805 = invoke(stypy.reporting.localization.Localization(__file__, 5599, 4), getitem___588804, int_588798)
    
    # Assigning a type to the variable 'tuple_var_assignment_579985' (line 5599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5599, 4), 'tuple_var_assignment_579985', subscript_call_result_588805)
    
    # Assigning a Subscript to a Name (line 5599):
    
    # Obtaining the type of the subscript
    int_588806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5599, 4), 'int')
    
    # Call to _chk_asarray(...): (line 5599)
    # Processing the call arguments (line 5599)
    # Getting the type of 'a' (line 5599)
    a_588808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5599, 27), 'a', False)
    # Getting the type of 'axis' (line 5599)
    axis_588809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5599, 30), 'axis', False)
    # Processing the call keyword arguments (line 5599)
    kwargs_588810 = {}
    # Getting the type of '_chk_asarray' (line 5599)
    _chk_asarray_588807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5599, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 5599)
    _chk_asarray_call_result_588811 = invoke(stypy.reporting.localization.Localization(__file__, 5599, 14), _chk_asarray_588807, *[a_588808, axis_588809], **kwargs_588810)
    
    # Obtaining the member '__getitem__' of a type (line 5599)
    getitem___588812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5599, 4), _chk_asarray_call_result_588811, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5599)
    subscript_call_result_588813 = invoke(stypy.reporting.localization.Localization(__file__, 5599, 4), getitem___588812, int_588806)
    
    # Assigning a type to the variable 'tuple_var_assignment_579986' (line 5599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5599, 4), 'tuple_var_assignment_579986', subscript_call_result_588813)
    
    # Assigning a Name to a Name (line 5599):
    # Getting the type of 'tuple_var_assignment_579985' (line 5599)
    tuple_var_assignment_579985_588814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5599, 4), 'tuple_var_assignment_579985')
    # Assigning a type to the variable 'a' (line 5599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5599, 4), 'a', tuple_var_assignment_579985_588814)
    
    # Assigning a Name to a Name (line 5599):
    # Getting the type of 'tuple_var_assignment_579986' (line 5599)
    tuple_var_assignment_579986_588815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5599, 4), 'tuple_var_assignment_579986')
    # Assigning a type to the variable 'axis' (line 5599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5599, 7), 'axis', tuple_var_assignment_579986_588815)
    
    # Call to sum(...): (line 5600)
    # Processing the call arguments (line 5600)
    # Getting the type of 'a' (line 5600)
    a_588818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5600, 18), 'a', False)
    # Getting the type of 'a' (line 5600)
    a_588819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5600, 20), 'a', False)
    # Applying the binary operator '*' (line 5600)
    result_mul_588820 = python_operator(stypy.reporting.localization.Localization(__file__, 5600, 18), '*', a_588818, a_588819)
    
    # Getting the type of 'axis' (line 5600)
    axis_588821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5600, 23), 'axis', False)
    # Processing the call keyword arguments (line 5600)
    kwargs_588822 = {}
    # Getting the type of 'np' (line 5600)
    np_588816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5600, 11), 'np', False)
    # Obtaining the member 'sum' of a type (line 5600)
    sum_588817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5600, 11), np_588816, 'sum')
    # Calling sum(args, kwargs) (line 5600)
    sum_call_result_588823 = invoke(stypy.reporting.localization.Localization(__file__, 5600, 11), sum_588817, *[result_mul_588820, axis_588821], **kwargs_588822)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5600)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5600, 4), 'stypy_return_type', sum_call_result_588823)
    
    # ################# End of '_sum_of_squares(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_sum_of_squares' in the type store
    # Getting the type of 'stypy_return_type' (line 5577)
    stypy_return_type_588824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5577, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_588824)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_sum_of_squares'
    return stypy_return_type_588824

# Assigning a type to the variable '_sum_of_squares' (line 5577)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5577, 0), '_sum_of_squares', _sum_of_squares)

@norecursion
def _square_of_sums(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_588825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5603, 28), 'int')
    defaults = [int_588825]
    # Create a new context for function '_square_of_sums'
    module_type_store = module_type_store.open_function_context('_square_of_sums', 5603, 0, False)
    
    # Passed parameters checking function
    _square_of_sums.stypy_localization = localization
    _square_of_sums.stypy_type_of_self = None
    _square_of_sums.stypy_type_store = module_type_store
    _square_of_sums.stypy_function_name = '_square_of_sums'
    _square_of_sums.stypy_param_names_list = ['a', 'axis']
    _square_of_sums.stypy_varargs_param_name = None
    _square_of_sums.stypy_kwargs_param_name = None
    _square_of_sums.stypy_call_defaults = defaults
    _square_of_sums.stypy_call_varargs = varargs
    _square_of_sums.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_square_of_sums', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_square_of_sums', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_square_of_sums(...)' code ##################

    str_588826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5623, (-1)), 'str', '\n    Sum elements of the input array, and return the square(s) of that sum.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis : int or None, optional\n        Axis along which to calculate. Default is 0. If None, compute over\n        the whole array `a`.\n\n    Returns\n    -------\n    square_of_sums : float or ndarray\n        The square of the sum over `axis`.\n\n    See also\n    --------\n    _sum_of_squares : The sum of squares (the opposite of `square_of_sums`).\n    ')
    
    # Assigning a Call to a Tuple (line 5624):
    
    # Assigning a Subscript to a Name (line 5624):
    
    # Obtaining the type of the subscript
    int_588827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5624, 4), 'int')
    
    # Call to _chk_asarray(...): (line 5624)
    # Processing the call arguments (line 5624)
    # Getting the type of 'a' (line 5624)
    a_588829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5624, 27), 'a', False)
    # Getting the type of 'axis' (line 5624)
    axis_588830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5624, 30), 'axis', False)
    # Processing the call keyword arguments (line 5624)
    kwargs_588831 = {}
    # Getting the type of '_chk_asarray' (line 5624)
    _chk_asarray_588828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5624, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 5624)
    _chk_asarray_call_result_588832 = invoke(stypy.reporting.localization.Localization(__file__, 5624, 14), _chk_asarray_588828, *[a_588829, axis_588830], **kwargs_588831)
    
    # Obtaining the member '__getitem__' of a type (line 5624)
    getitem___588833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5624, 4), _chk_asarray_call_result_588832, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5624)
    subscript_call_result_588834 = invoke(stypy.reporting.localization.Localization(__file__, 5624, 4), getitem___588833, int_588827)
    
    # Assigning a type to the variable 'tuple_var_assignment_579987' (line 5624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5624, 4), 'tuple_var_assignment_579987', subscript_call_result_588834)
    
    # Assigning a Subscript to a Name (line 5624):
    
    # Obtaining the type of the subscript
    int_588835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5624, 4), 'int')
    
    # Call to _chk_asarray(...): (line 5624)
    # Processing the call arguments (line 5624)
    # Getting the type of 'a' (line 5624)
    a_588837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5624, 27), 'a', False)
    # Getting the type of 'axis' (line 5624)
    axis_588838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5624, 30), 'axis', False)
    # Processing the call keyword arguments (line 5624)
    kwargs_588839 = {}
    # Getting the type of '_chk_asarray' (line 5624)
    _chk_asarray_588836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5624, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 5624)
    _chk_asarray_call_result_588840 = invoke(stypy.reporting.localization.Localization(__file__, 5624, 14), _chk_asarray_588836, *[a_588837, axis_588838], **kwargs_588839)
    
    # Obtaining the member '__getitem__' of a type (line 5624)
    getitem___588841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5624, 4), _chk_asarray_call_result_588840, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5624)
    subscript_call_result_588842 = invoke(stypy.reporting.localization.Localization(__file__, 5624, 4), getitem___588841, int_588835)
    
    # Assigning a type to the variable 'tuple_var_assignment_579988' (line 5624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5624, 4), 'tuple_var_assignment_579988', subscript_call_result_588842)
    
    # Assigning a Name to a Name (line 5624):
    # Getting the type of 'tuple_var_assignment_579987' (line 5624)
    tuple_var_assignment_579987_588843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5624, 4), 'tuple_var_assignment_579987')
    # Assigning a type to the variable 'a' (line 5624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5624, 4), 'a', tuple_var_assignment_579987_588843)
    
    # Assigning a Name to a Name (line 5624):
    # Getting the type of 'tuple_var_assignment_579988' (line 5624)
    tuple_var_assignment_579988_588844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5624, 4), 'tuple_var_assignment_579988')
    # Assigning a type to the variable 'axis' (line 5624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5624, 7), 'axis', tuple_var_assignment_579988_588844)
    
    # Assigning a Call to a Name (line 5625):
    
    # Assigning a Call to a Name (line 5625):
    
    # Call to sum(...): (line 5625)
    # Processing the call arguments (line 5625)
    # Getting the type of 'a' (line 5625)
    a_588847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5625, 15), 'a', False)
    # Getting the type of 'axis' (line 5625)
    axis_588848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5625, 18), 'axis', False)
    # Processing the call keyword arguments (line 5625)
    kwargs_588849 = {}
    # Getting the type of 'np' (line 5625)
    np_588845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5625, 8), 'np', False)
    # Obtaining the member 'sum' of a type (line 5625)
    sum_588846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5625, 8), np_588845, 'sum')
    # Calling sum(args, kwargs) (line 5625)
    sum_call_result_588850 = invoke(stypy.reporting.localization.Localization(__file__, 5625, 8), sum_588846, *[a_588847, axis_588848], **kwargs_588849)
    
    # Assigning a type to the variable 's' (line 5625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5625, 4), 's', sum_call_result_588850)
    
    
    
    # Call to isscalar(...): (line 5626)
    # Processing the call arguments (line 5626)
    # Getting the type of 's' (line 5626)
    s_588853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5626, 23), 's', False)
    # Processing the call keyword arguments (line 5626)
    kwargs_588854 = {}
    # Getting the type of 'np' (line 5626)
    np_588851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5626, 11), 'np', False)
    # Obtaining the member 'isscalar' of a type (line 5626)
    isscalar_588852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5626, 11), np_588851, 'isscalar')
    # Calling isscalar(args, kwargs) (line 5626)
    isscalar_call_result_588855 = invoke(stypy.reporting.localization.Localization(__file__, 5626, 11), isscalar_588852, *[s_588853], **kwargs_588854)
    
    # Applying the 'not' unary operator (line 5626)
    result_not__588856 = python_operator(stypy.reporting.localization.Localization(__file__, 5626, 7), 'not', isscalar_call_result_588855)
    
    # Testing the type of an if condition (line 5626)
    if_condition_588857 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5626, 4), result_not__588856)
    # Assigning a type to the variable 'if_condition_588857' (line 5626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5626, 4), 'if_condition_588857', if_condition_588857)
    # SSA begins for if statement (line 5626)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to astype(...): (line 5627)
    # Processing the call arguments (line 5627)
    # Getting the type of 'float' (line 5627)
    float_588860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5627, 24), 'float', False)
    # Processing the call keyword arguments (line 5627)
    kwargs_588861 = {}
    # Getting the type of 's' (line 5627)
    s_588858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5627, 15), 's', False)
    # Obtaining the member 'astype' of a type (line 5627)
    astype_588859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5627, 15), s_588858, 'astype')
    # Calling astype(args, kwargs) (line 5627)
    astype_call_result_588862 = invoke(stypy.reporting.localization.Localization(__file__, 5627, 15), astype_588859, *[float_588860], **kwargs_588861)
    
    # Getting the type of 's' (line 5627)
    s_588863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5627, 33), 's')
    # Applying the binary operator '*' (line 5627)
    result_mul_588864 = python_operator(stypy.reporting.localization.Localization(__file__, 5627, 15), '*', astype_call_result_588862, s_588863)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5627, 8), 'stypy_return_type', result_mul_588864)
    # SSA branch for the else part of an if statement (line 5626)
    module_type_store.open_ssa_branch('else')
    
    # Call to float(...): (line 5629)
    # Processing the call arguments (line 5629)
    # Getting the type of 's' (line 5629)
    s_588866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5629, 21), 's', False)
    # Processing the call keyword arguments (line 5629)
    kwargs_588867 = {}
    # Getting the type of 'float' (line 5629)
    float_588865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5629, 15), 'float', False)
    # Calling float(args, kwargs) (line 5629)
    float_call_result_588868 = invoke(stypy.reporting.localization.Localization(__file__, 5629, 15), float_588865, *[s_588866], **kwargs_588867)
    
    # Getting the type of 's' (line 5629)
    s_588869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5629, 26), 's')
    # Applying the binary operator '*' (line 5629)
    result_mul_588870 = python_operator(stypy.reporting.localization.Localization(__file__, 5629, 15), '*', float_call_result_588868, s_588869)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5629, 8), 'stypy_return_type', result_mul_588870)
    # SSA join for if statement (line 5626)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_square_of_sums(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_square_of_sums' in the type store
    # Getting the type of 'stypy_return_type' (line 5603)
    stypy_return_type_588871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5603, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_588871)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_square_of_sums'
    return stypy_return_type_588871

# Assigning a type to the variable '_square_of_sums' (line 5603)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5603, 0), '_square_of_sums', _square_of_sums)

@norecursion
def rankdata(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_588872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5632, 23), 'str', 'average')
    defaults = [str_588872]
    # Create a new context for function 'rankdata'
    module_type_store = module_type_store.open_function_context('rankdata', 5632, 0, False)
    
    # Passed parameters checking function
    rankdata.stypy_localization = localization
    rankdata.stypy_type_of_self = None
    rankdata.stypy_type_store = module_type_store
    rankdata.stypy_function_name = 'rankdata'
    rankdata.stypy_param_names_list = ['a', 'method']
    rankdata.stypy_varargs_param_name = None
    rankdata.stypy_kwargs_param_name = None
    rankdata.stypy_call_defaults = defaults
    rankdata.stypy_call_varargs = varargs
    rankdata.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rankdata', ['a', 'method'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rankdata', localization, ['a', 'method'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rankdata(...)' code ##################

    str_588873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5689, (-1)), 'str', '\n    Assign ranks to data, dealing with ties appropriately.\n\n    Ranks begin at 1.  The `method` argument controls how ranks are assigned\n    to equal values.  See [1]_ for further discussion of ranking methods.\n\n    Parameters\n    ----------\n    a : array_like\n        The array of values to be ranked.  The array is first flattened.\n    method : str, optional\n        The method used to assign ranks to tied elements.\n        The options are \'average\', \'min\', \'max\', \'dense\' and \'ordinal\'.\n\n        \'average\':\n            The average of the ranks that would have been assigned to\n            all the tied values is assigned to each value.\n        \'min\':\n            The minimum of the ranks that would have been assigned to all\n            the tied values is assigned to each value.  (This is also\n            referred to as "competition" ranking.)\n        \'max\':\n            The maximum of the ranks that would have been assigned to all\n            the tied values is assigned to each value.\n        \'dense\':\n            Like \'min\', but the rank of the next highest element is assigned\n            the rank immediately after those assigned to the tied elements.\n        \'ordinal\':\n            All values are given a distinct rank, corresponding to the order\n            that the values occur in `a`.\n\n        The default is \'average\'.\n\n    Returns\n    -------\n    ranks : ndarray\n         An array of length equal to the size of `a`, containing rank\n         scores.\n\n    References\n    ----------\n    .. [1] "Ranking", http://en.wikipedia.org/wiki/Ranking\n\n    Examples\n    --------\n    >>> from scipy.stats import rankdata\n    >>> rankdata([0, 2, 3, 2])\n    array([ 1. ,  2.5,  4. ,  2.5])\n    >>> rankdata([0, 2, 3, 2], method=\'min\')\n    array([ 1,  2,  4,  2])\n    >>> rankdata([0, 2, 3, 2], method=\'max\')\n    array([ 1,  3,  4,  3])\n    >>> rankdata([0, 2, 3, 2], method=\'dense\')\n    array([ 1,  2,  3,  2])\n    >>> rankdata([0, 2, 3, 2], method=\'ordinal\')\n    array([ 1,  2,  4,  3])\n    ')
    
    
    # Getting the type of 'method' (line 5690)
    method_588874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5690, 7), 'method')
    
    # Obtaining an instance of the builtin type 'tuple' (line 5690)
    tuple_588875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5690, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 5690)
    # Adding element type (line 5690)
    str_588876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5690, 22), 'str', 'average')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5690, 22), tuple_588875, str_588876)
    # Adding element type (line 5690)
    str_588877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5690, 33), 'str', 'min')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5690, 22), tuple_588875, str_588877)
    # Adding element type (line 5690)
    str_588878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5690, 40), 'str', 'max')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5690, 22), tuple_588875, str_588878)
    # Adding element type (line 5690)
    str_588879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5690, 47), 'str', 'dense')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5690, 22), tuple_588875, str_588879)
    # Adding element type (line 5690)
    str_588880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5690, 56), 'str', 'ordinal')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5690, 22), tuple_588875, str_588880)
    
    # Applying the binary operator 'notin' (line 5690)
    result_contains_588881 = python_operator(stypy.reporting.localization.Localization(__file__, 5690, 7), 'notin', method_588874, tuple_588875)
    
    # Testing the type of an if condition (line 5690)
    if_condition_588882 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5690, 4), result_contains_588881)
    # Assigning a type to the variable 'if_condition_588882' (line 5690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5690, 4), 'if_condition_588882', if_condition_588882)
    # SSA begins for if statement (line 5690)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 5691)
    # Processing the call arguments (line 5691)
    
    # Call to format(...): (line 5691)
    # Processing the call arguments (line 5691)
    # Getting the type of 'method' (line 5691)
    method_588886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5691, 55), 'method', False)
    # Processing the call keyword arguments (line 5691)
    kwargs_588887 = {}
    str_588884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5691, 25), 'str', 'unknown method "{0}"')
    # Obtaining the member 'format' of a type (line 5691)
    format_588885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5691, 25), str_588884, 'format')
    # Calling format(args, kwargs) (line 5691)
    format_call_result_588888 = invoke(stypy.reporting.localization.Localization(__file__, 5691, 25), format_588885, *[method_588886], **kwargs_588887)
    
    # Processing the call keyword arguments (line 5691)
    kwargs_588889 = {}
    # Getting the type of 'ValueError' (line 5691)
    ValueError_588883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5691, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 5691)
    ValueError_call_result_588890 = invoke(stypy.reporting.localization.Localization(__file__, 5691, 14), ValueError_588883, *[format_call_result_588888], **kwargs_588889)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5691, 8), ValueError_call_result_588890, 'raise parameter', BaseException)
    # SSA join for if statement (line 5690)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 5693):
    
    # Assigning a Call to a Name (line 5693):
    
    # Call to ravel(...): (line 5693)
    # Processing the call arguments (line 5693)
    
    # Call to asarray(...): (line 5693)
    # Processing the call arguments (line 5693)
    # Getting the type of 'a' (line 5693)
    a_588895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5693, 30), 'a', False)
    # Processing the call keyword arguments (line 5693)
    kwargs_588896 = {}
    # Getting the type of 'np' (line 5693)
    np_588893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5693, 19), 'np', False)
    # Obtaining the member 'asarray' of a type (line 5693)
    asarray_588894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5693, 19), np_588893, 'asarray')
    # Calling asarray(args, kwargs) (line 5693)
    asarray_call_result_588897 = invoke(stypy.reporting.localization.Localization(__file__, 5693, 19), asarray_588894, *[a_588895], **kwargs_588896)
    
    # Processing the call keyword arguments (line 5693)
    kwargs_588898 = {}
    # Getting the type of 'np' (line 5693)
    np_588891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5693, 10), 'np', False)
    # Obtaining the member 'ravel' of a type (line 5693)
    ravel_588892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5693, 10), np_588891, 'ravel')
    # Calling ravel(args, kwargs) (line 5693)
    ravel_call_result_588899 = invoke(stypy.reporting.localization.Localization(__file__, 5693, 10), ravel_588892, *[asarray_call_result_588897], **kwargs_588898)
    
    # Assigning a type to the variable 'arr' (line 5693)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5693, 4), 'arr', ravel_call_result_588899)
    
    # Assigning a IfExp to a Name (line 5694):
    
    # Assigning a IfExp to a Name (line 5694):
    
    
    # Getting the type of 'method' (line 5694)
    method_588900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5694, 26), 'method')
    str_588901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5694, 36), 'str', 'ordinal')
    # Applying the binary operator '==' (line 5694)
    result_eq_588902 = python_operator(stypy.reporting.localization.Localization(__file__, 5694, 26), '==', method_588900, str_588901)
    
    # Testing the type of an if expression (line 5694)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5694, 11), result_eq_588902)
    # SSA begins for if expression (line 5694)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_588903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5694, 11), 'str', 'mergesort')
    # SSA branch for the else part of an if expression (line 5694)
    module_type_store.open_ssa_branch('if expression else')
    str_588904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5694, 51), 'str', 'quicksort')
    # SSA join for if expression (line 5694)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_588905 = union_type.UnionType.add(str_588903, str_588904)
    
    # Assigning a type to the variable 'algo' (line 5694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5694, 4), 'algo', if_exp_588905)
    
    # Assigning a Call to a Name (line 5695):
    
    # Assigning a Call to a Name (line 5695):
    
    # Call to argsort(...): (line 5695)
    # Processing the call arguments (line 5695)
    # Getting the type of 'arr' (line 5695)
    arr_588908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5695, 24), 'arr', False)
    # Processing the call keyword arguments (line 5695)
    # Getting the type of 'algo' (line 5695)
    algo_588909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5695, 34), 'algo', False)
    keyword_588910 = algo_588909
    kwargs_588911 = {'kind': keyword_588910}
    # Getting the type of 'np' (line 5695)
    np_588906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5695, 13), 'np', False)
    # Obtaining the member 'argsort' of a type (line 5695)
    argsort_588907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5695, 13), np_588906, 'argsort')
    # Calling argsort(args, kwargs) (line 5695)
    argsort_call_result_588912 = invoke(stypy.reporting.localization.Localization(__file__, 5695, 13), argsort_588907, *[arr_588908], **kwargs_588911)
    
    # Assigning a type to the variable 'sorter' (line 5695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5695, 4), 'sorter', argsort_call_result_588912)
    
    # Assigning a Call to a Name (line 5697):
    
    # Assigning a Call to a Name (line 5697):
    
    # Call to empty(...): (line 5697)
    # Processing the call arguments (line 5697)
    # Getting the type of 'sorter' (line 5697)
    sorter_588915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5697, 19), 'sorter', False)
    # Obtaining the member 'size' of a type (line 5697)
    size_588916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5697, 19), sorter_588915, 'size')
    # Processing the call keyword arguments (line 5697)
    # Getting the type of 'np' (line 5697)
    np_588917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5697, 38), 'np', False)
    # Obtaining the member 'intp' of a type (line 5697)
    intp_588918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5697, 38), np_588917, 'intp')
    keyword_588919 = intp_588918
    kwargs_588920 = {'dtype': keyword_588919}
    # Getting the type of 'np' (line 5697)
    np_588913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5697, 10), 'np', False)
    # Obtaining the member 'empty' of a type (line 5697)
    empty_588914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5697, 10), np_588913, 'empty')
    # Calling empty(args, kwargs) (line 5697)
    empty_call_result_588921 = invoke(stypy.reporting.localization.Localization(__file__, 5697, 10), empty_588914, *[size_588916], **kwargs_588920)
    
    # Assigning a type to the variable 'inv' (line 5697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5697, 4), 'inv', empty_call_result_588921)
    
    # Assigning a Call to a Subscript (line 5698):
    
    # Assigning a Call to a Subscript (line 5698):
    
    # Call to arange(...): (line 5698)
    # Processing the call arguments (line 5698)
    # Getting the type of 'sorter' (line 5698)
    sorter_588924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5698, 28), 'sorter', False)
    # Obtaining the member 'size' of a type (line 5698)
    size_588925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5698, 28), sorter_588924, 'size')
    # Processing the call keyword arguments (line 5698)
    # Getting the type of 'np' (line 5698)
    np_588926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5698, 47), 'np', False)
    # Obtaining the member 'intp' of a type (line 5698)
    intp_588927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5698, 47), np_588926, 'intp')
    keyword_588928 = intp_588927
    kwargs_588929 = {'dtype': keyword_588928}
    # Getting the type of 'np' (line 5698)
    np_588922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5698, 18), 'np', False)
    # Obtaining the member 'arange' of a type (line 5698)
    arange_588923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5698, 18), np_588922, 'arange')
    # Calling arange(args, kwargs) (line 5698)
    arange_call_result_588930 = invoke(stypy.reporting.localization.Localization(__file__, 5698, 18), arange_588923, *[size_588925], **kwargs_588929)
    
    # Getting the type of 'inv' (line 5698)
    inv_588931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5698, 4), 'inv')
    # Getting the type of 'sorter' (line 5698)
    sorter_588932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5698, 8), 'sorter')
    # Storing an element on a container (line 5698)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5698, 4), inv_588931, (sorter_588932, arange_call_result_588930))
    
    
    # Getting the type of 'method' (line 5700)
    method_588933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5700, 7), 'method')
    str_588934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5700, 17), 'str', 'ordinal')
    # Applying the binary operator '==' (line 5700)
    result_eq_588935 = python_operator(stypy.reporting.localization.Localization(__file__, 5700, 7), '==', method_588933, str_588934)
    
    # Testing the type of an if condition (line 5700)
    if_condition_588936 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5700, 4), result_eq_588935)
    # Assigning a type to the variable 'if_condition_588936' (line 5700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5700, 4), 'if_condition_588936', if_condition_588936)
    # SSA begins for if statement (line 5700)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'inv' (line 5701)
    inv_588937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5701, 15), 'inv')
    int_588938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5701, 21), 'int')
    # Applying the binary operator '+' (line 5701)
    result_add_588939 = python_operator(stypy.reporting.localization.Localization(__file__, 5701, 15), '+', inv_588937, int_588938)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5701)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5701, 8), 'stypy_return_type', result_add_588939)
    # SSA join for if statement (line 5700)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 5703):
    
    # Assigning a Subscript to a Name (line 5703):
    
    # Obtaining the type of the subscript
    # Getting the type of 'sorter' (line 5703)
    sorter_588940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5703, 14), 'sorter')
    # Getting the type of 'arr' (line 5703)
    arr_588941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5703, 10), 'arr')
    # Obtaining the member '__getitem__' of a type (line 5703)
    getitem___588942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5703, 10), arr_588941, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5703)
    subscript_call_result_588943 = invoke(stypy.reporting.localization.Localization(__file__, 5703, 10), getitem___588942, sorter_588940)
    
    # Assigning a type to the variable 'arr' (line 5703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5703, 4), 'arr', subscript_call_result_588943)
    
    # Assigning a Subscript to a Name (line 5704):
    
    # Assigning a Subscript to a Name (line 5704):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 5704)
    tuple_588944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5704, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 5704)
    # Adding element type (line 5704)
    # Getting the type of 'True' (line 5704)
    True_588945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5704, 16), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5704, 16), tuple_588944, True_588945)
    # Adding element type (line 5704)
    
    
    # Obtaining the type of the subscript
    int_588946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5704, 26), 'int')
    slice_588947 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 5704, 22), int_588946, None, None)
    # Getting the type of 'arr' (line 5704)
    arr_588948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5704, 22), 'arr')
    # Obtaining the member '__getitem__' of a type (line 5704)
    getitem___588949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5704, 22), arr_588948, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5704)
    subscript_call_result_588950 = invoke(stypy.reporting.localization.Localization(__file__, 5704, 22), getitem___588949, slice_588947)
    
    
    # Obtaining the type of the subscript
    int_588951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5704, 38), 'int')
    slice_588952 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 5704, 33), None, int_588951, None)
    # Getting the type of 'arr' (line 5704)
    arr_588953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5704, 33), 'arr')
    # Obtaining the member '__getitem__' of a type (line 5704)
    getitem___588954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5704, 33), arr_588953, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5704)
    subscript_call_result_588955 = invoke(stypy.reporting.localization.Localization(__file__, 5704, 33), getitem___588954, slice_588952)
    
    # Applying the binary operator '!=' (line 5704)
    result_ne_588956 = python_operator(stypy.reporting.localization.Localization(__file__, 5704, 22), '!=', subscript_call_result_588950, subscript_call_result_588955)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5704, 16), tuple_588944, result_ne_588956)
    
    # Getting the type of 'np' (line 5704)
    np_588957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5704, 10), 'np')
    # Obtaining the member 'r_' of a type (line 5704)
    r__588958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5704, 10), np_588957, 'r_')
    # Obtaining the member '__getitem__' of a type (line 5704)
    getitem___588959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5704, 10), r__588958, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5704)
    subscript_call_result_588960 = invoke(stypy.reporting.localization.Localization(__file__, 5704, 10), getitem___588959, tuple_588944)
    
    # Assigning a type to the variable 'obs' (line 5704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5704, 4), 'obs', subscript_call_result_588960)
    
    # Assigning a Subscript to a Name (line 5705):
    
    # Assigning a Subscript to a Name (line 5705):
    
    # Obtaining the type of the subscript
    # Getting the type of 'inv' (line 5705)
    inv_588961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5705, 25), 'inv')
    
    # Call to cumsum(...): (line 5705)
    # Processing the call keyword arguments (line 5705)
    kwargs_588964 = {}
    # Getting the type of 'obs' (line 5705)
    obs_588962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5705, 12), 'obs', False)
    # Obtaining the member 'cumsum' of a type (line 5705)
    cumsum_588963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5705, 12), obs_588962, 'cumsum')
    # Calling cumsum(args, kwargs) (line 5705)
    cumsum_call_result_588965 = invoke(stypy.reporting.localization.Localization(__file__, 5705, 12), cumsum_588963, *[], **kwargs_588964)
    
    # Obtaining the member '__getitem__' of a type (line 5705)
    getitem___588966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5705, 12), cumsum_call_result_588965, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5705)
    subscript_call_result_588967 = invoke(stypy.reporting.localization.Localization(__file__, 5705, 12), getitem___588966, inv_588961)
    
    # Assigning a type to the variable 'dense' (line 5705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5705, 4), 'dense', subscript_call_result_588967)
    
    
    # Getting the type of 'method' (line 5707)
    method_588968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5707, 7), 'method')
    str_588969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5707, 17), 'str', 'dense')
    # Applying the binary operator '==' (line 5707)
    result_eq_588970 = python_operator(stypy.reporting.localization.Localization(__file__, 5707, 7), '==', method_588968, str_588969)
    
    # Testing the type of an if condition (line 5707)
    if_condition_588971 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5707, 4), result_eq_588970)
    # Assigning a type to the variable 'if_condition_588971' (line 5707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5707, 4), 'if_condition_588971', if_condition_588971)
    # SSA begins for if statement (line 5707)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'dense' (line 5708)
    dense_588972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5708, 15), 'dense')
    # Assigning a type to the variable 'stypy_return_type' (line 5708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5708, 8), 'stypy_return_type', dense_588972)
    # SSA join for if statement (line 5707)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 5711):
    
    # Assigning a Subscript to a Name (line 5711):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 5711)
    tuple_588973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5711, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 5711)
    # Adding element type (line 5711)
    
    # Obtaining the type of the subscript
    int_588974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5711, 34), 'int')
    
    # Call to nonzero(...): (line 5711)
    # Processing the call arguments (line 5711)
    # Getting the type of 'obs' (line 5711)
    obs_588977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5711, 29), 'obs', False)
    # Processing the call keyword arguments (line 5711)
    kwargs_588978 = {}
    # Getting the type of 'np' (line 5711)
    np_588975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5711, 18), 'np', False)
    # Obtaining the member 'nonzero' of a type (line 5711)
    nonzero_588976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5711, 18), np_588975, 'nonzero')
    # Calling nonzero(args, kwargs) (line 5711)
    nonzero_call_result_588979 = invoke(stypy.reporting.localization.Localization(__file__, 5711, 18), nonzero_588976, *[obs_588977], **kwargs_588978)
    
    # Obtaining the member '__getitem__' of a type (line 5711)
    getitem___588980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5711, 18), nonzero_call_result_588979, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5711)
    subscript_call_result_588981 = invoke(stypy.reporting.localization.Localization(__file__, 5711, 18), getitem___588980, int_588974)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5711, 18), tuple_588973, subscript_call_result_588981)
    # Adding element type (line 5711)
    
    # Call to len(...): (line 5711)
    # Processing the call arguments (line 5711)
    # Getting the type of 'obs' (line 5711)
    obs_588983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5711, 42), 'obs', False)
    # Processing the call keyword arguments (line 5711)
    kwargs_588984 = {}
    # Getting the type of 'len' (line 5711)
    len_588982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5711, 38), 'len', False)
    # Calling len(args, kwargs) (line 5711)
    len_call_result_588985 = invoke(stypy.reporting.localization.Localization(__file__, 5711, 38), len_588982, *[obs_588983], **kwargs_588984)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5711, 18), tuple_588973, len_call_result_588985)
    
    # Getting the type of 'np' (line 5711)
    np_588986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5711, 12), 'np')
    # Obtaining the member 'r_' of a type (line 5711)
    r__588987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5711, 12), np_588986, 'r_')
    # Obtaining the member '__getitem__' of a type (line 5711)
    getitem___588988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5711, 12), r__588987, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5711)
    subscript_call_result_588989 = invoke(stypy.reporting.localization.Localization(__file__, 5711, 12), getitem___588988, tuple_588973)
    
    # Assigning a type to the variable 'count' (line 5711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5711, 4), 'count', subscript_call_result_588989)
    
    
    # Getting the type of 'method' (line 5713)
    method_588990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5713, 7), 'method')
    str_588991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5713, 17), 'str', 'max')
    # Applying the binary operator '==' (line 5713)
    result_eq_588992 = python_operator(stypy.reporting.localization.Localization(__file__, 5713, 7), '==', method_588990, str_588991)
    
    # Testing the type of an if condition (line 5713)
    if_condition_588993 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5713, 4), result_eq_588992)
    # Assigning a type to the variable 'if_condition_588993' (line 5713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5713, 4), 'if_condition_588993', if_condition_588993)
    # SSA begins for if statement (line 5713)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    # Getting the type of 'dense' (line 5714)
    dense_588994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5714, 21), 'dense')
    # Getting the type of 'count' (line 5714)
    count_588995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5714, 15), 'count')
    # Obtaining the member '__getitem__' of a type (line 5714)
    getitem___588996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5714, 15), count_588995, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5714)
    subscript_call_result_588997 = invoke(stypy.reporting.localization.Localization(__file__, 5714, 15), getitem___588996, dense_588994)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5714, 8), 'stypy_return_type', subscript_call_result_588997)
    # SSA join for if statement (line 5713)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'method' (line 5716)
    method_588998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5716, 7), 'method')
    str_588999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5716, 17), 'str', 'min')
    # Applying the binary operator '==' (line 5716)
    result_eq_589000 = python_operator(stypy.reporting.localization.Localization(__file__, 5716, 7), '==', method_588998, str_588999)
    
    # Testing the type of an if condition (line 5716)
    if_condition_589001 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5716, 4), result_eq_589000)
    # Assigning a type to the variable 'if_condition_589001' (line 5716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5716, 4), 'if_condition_589001', if_condition_589001)
    # SSA begins for if statement (line 5716)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    # Getting the type of 'dense' (line 5717)
    dense_589002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5717, 21), 'dense')
    int_589003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5717, 29), 'int')
    # Applying the binary operator '-' (line 5717)
    result_sub_589004 = python_operator(stypy.reporting.localization.Localization(__file__, 5717, 21), '-', dense_589002, int_589003)
    
    # Getting the type of 'count' (line 5717)
    count_589005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5717, 15), 'count')
    # Obtaining the member '__getitem__' of a type (line 5717)
    getitem___589006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5717, 15), count_589005, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5717)
    subscript_call_result_589007 = invoke(stypy.reporting.localization.Localization(__file__, 5717, 15), getitem___589006, result_sub_589004)
    
    int_589008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5717, 34), 'int')
    # Applying the binary operator '+' (line 5717)
    result_add_589009 = python_operator(stypy.reporting.localization.Localization(__file__, 5717, 15), '+', subscript_call_result_589007, int_589008)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5717, 8), 'stypy_return_type', result_add_589009)
    # SSA join for if statement (line 5716)
    module_type_store = module_type_store.join_ssa_context()
    
    float_589010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5720, 11), 'float')
    
    # Obtaining the type of the subscript
    # Getting the type of 'dense' (line 5720)
    dense_589011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5720, 23), 'dense')
    # Getting the type of 'count' (line 5720)
    count_589012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5720, 17), 'count')
    # Obtaining the member '__getitem__' of a type (line 5720)
    getitem___589013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5720, 17), count_589012, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5720)
    subscript_call_result_589014 = invoke(stypy.reporting.localization.Localization(__file__, 5720, 17), getitem___589013, dense_589011)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'dense' (line 5720)
    dense_589015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5720, 38), 'dense')
    int_589016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5720, 46), 'int')
    # Applying the binary operator '-' (line 5720)
    result_sub_589017 = python_operator(stypy.reporting.localization.Localization(__file__, 5720, 38), '-', dense_589015, int_589016)
    
    # Getting the type of 'count' (line 5720)
    count_589018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5720, 32), 'count')
    # Obtaining the member '__getitem__' of a type (line 5720)
    getitem___589019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5720, 32), count_589018, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 5720)
    subscript_call_result_589020 = invoke(stypy.reporting.localization.Localization(__file__, 5720, 32), getitem___589019, result_sub_589017)
    
    # Applying the binary operator '+' (line 5720)
    result_add_589021 = python_operator(stypy.reporting.localization.Localization(__file__, 5720, 17), '+', subscript_call_result_589014, subscript_call_result_589020)
    
    int_589022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5720, 51), 'int')
    # Applying the binary operator '+' (line 5720)
    result_add_589023 = python_operator(stypy.reporting.localization.Localization(__file__, 5720, 49), '+', result_add_589021, int_589022)
    
    # Applying the binary operator '*' (line 5720)
    result_mul_589024 = python_operator(stypy.reporting.localization.Localization(__file__, 5720, 11), '*', float_589010, result_add_589023)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5720, 4), 'stypy_return_type', result_mul_589024)
    
    # ################# End of 'rankdata(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rankdata' in the type store
    # Getting the type of 'stypy_return_type' (line 5632)
    stypy_return_type_589025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5632, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_589025)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rankdata'
    return stypy_return_type_589025

# Assigning a type to the variable 'rankdata' (line 5632)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5632, 0), 'rankdata', rankdata)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
