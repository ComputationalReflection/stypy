
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: #
2: # Author: Joris Vankerschaver 2013
3: #
4: from __future__ import division, print_function, absolute_import
5: 
6: import math
7: import numpy as np
8: import scipy.linalg
9: from scipy.misc import doccer
10: from scipy.special import gammaln, psi, multigammaln, xlogy, entr
11: from scipy._lib._util import check_random_state
12: from scipy.linalg.blas import drot
13: 
14: from ._discrete_distns import binom
15: from . import mvn
16: 
17: __all__ = ['multivariate_normal',
18:            'matrix_normal',
19:            'dirichlet',
20:            'wishart',
21:            'invwishart',
22:            'multinomial',
23:            'special_ortho_group',
24:            'ortho_group',
25:            'random_correlation',
26:            'unitary_group']
27: 
28: _LOG_2PI = np.log(2 * np.pi)
29: _LOG_2 = np.log(2)
30: _LOG_PI = np.log(np.pi)
31: 
32: 
33: _doc_random_state = '''\
34: random_state : None or int or np.random.RandomState instance, optional
35:     If int or RandomState, use it for drawing the random variates.
36:     If None (or np.random), the global np.random state is used.
37:     Default is None.
38: '''
39: 
40: def _squeeze_output(out):
41:     '''
42:     Remove single-dimensional entries from array and convert to scalar,
43:     if necessary.
44: 
45:     '''
46:     out = out.squeeze()
47:     if out.ndim == 0:
48:         out = out[()]
49:     return out
50: 
51: 
52: def _eigvalsh_to_eps(spectrum, cond=None, rcond=None):
53:     '''
54:     Determine which eigenvalues are "small" given the spectrum.
55: 
56:     This is for compatibility across various linear algebra functions
57:     that should agree about whether or not a Hermitian matrix is numerically
58:     singular and what is its numerical matrix rank.
59:     This is designed to be compatible with scipy.linalg.pinvh.
60: 
61:     Parameters
62:     ----------
63:     spectrum : 1d ndarray
64:         Array of eigenvalues of a Hermitian matrix.
65:     cond, rcond : float, optional
66:         Cutoff for small eigenvalues.
67:         Singular values smaller than rcond * largest_eigenvalue are
68:         considered zero.
69:         If None or -1, suitable machine precision is used.
70: 
71:     Returns
72:     -------
73:     eps : float
74:         Magnitude cutoff for numerical negligibility.
75: 
76:     '''
77:     if rcond is not None:
78:         cond = rcond
79:     if cond in [None, -1]:
80:         t = spectrum.dtype.char.lower()
81:         factor = {'f': 1E3, 'd': 1E6}
82:         cond = factor[t] * np.finfo(t).eps
83:     eps = cond * np.max(abs(spectrum))
84:     return eps
85: 
86: 
87: def _pinv_1d(v, eps=1e-5):
88:     '''
89:     A helper function for computing the pseudoinverse.
90: 
91:     Parameters
92:     ----------
93:     v : iterable of numbers
94:         This may be thought of as a vector of eigenvalues or singular values.
95:     eps : float
96:         Values with magnitude no greater than eps are considered negligible.
97: 
98:     Returns
99:     -------
100:     v_pinv : 1d float ndarray
101:         A vector of pseudo-inverted numbers.
102: 
103:     '''
104:     return np.array([0 if abs(x) <= eps else 1/x for x in v], dtype=float)
105: 
106: 
107: class _PSD(object):
108:     '''
109:     Compute coordinated functions of a symmetric positive semidefinite matrix.
110: 
111:     This class addresses two issues.  Firstly it allows the pseudoinverse,
112:     the logarithm of the pseudo-determinant, and the rank of the matrix
113:     to be computed using one call to eigh instead of three.
114:     Secondly it allows these functions to be computed in a way
115:     that gives mutually compatible results.
116:     All of the functions are computed with a common understanding as to
117:     which of the eigenvalues are to be considered negligibly small.
118:     The functions are designed to coordinate with scipy.linalg.pinvh()
119:     but not necessarily with np.linalg.det() or with np.linalg.matrix_rank().
120: 
121:     Parameters
122:     ----------
123:     M : array_like
124:         Symmetric positive semidefinite matrix (2-D).
125:     cond, rcond : float, optional
126:         Cutoff for small eigenvalues.
127:         Singular values smaller than rcond * largest_eigenvalue are
128:         considered zero.
129:         If None or -1, suitable machine precision is used.
130:     lower : bool, optional
131:         Whether the pertinent array data is taken from the lower
132:         or upper triangle of M. (Default: lower)
133:     check_finite : bool, optional
134:         Whether to check that the input matrices contain only finite
135:         numbers. Disabling may give a performance gain, but may result
136:         in problems (crashes, non-termination) if the inputs do contain
137:         infinities or NaNs.
138:     allow_singular : bool, optional
139:         Whether to allow a singular matrix.  (Default: True)
140: 
141:     Notes
142:     -----
143:     The arguments are similar to those of scipy.linalg.pinvh().
144: 
145:     '''
146: 
147:     def __init__(self, M, cond=None, rcond=None, lower=True,
148:                  check_finite=True, allow_singular=True):
149:         # Compute the symmetric eigendecomposition.
150:         # Note that eigh takes care of array conversion, chkfinite,
151:         # and assertion that the matrix is square.
152:         s, u = scipy.linalg.eigh(M, lower=lower, check_finite=check_finite)
153: 
154:         eps = _eigvalsh_to_eps(s, cond, rcond)
155:         if np.min(s) < -eps:
156:             raise ValueError('the input matrix must be positive semidefinite')
157:         d = s[s > eps]
158:         if len(d) < len(s) and not allow_singular:
159:             raise np.linalg.LinAlgError('singular matrix')
160:         s_pinv = _pinv_1d(s, eps)
161:         U = np.multiply(u, np.sqrt(s_pinv))
162: 
163:         # Initialize the eagerly precomputed attributes.
164:         self.rank = len(d)
165:         self.U = U
166:         self.log_pdet = np.sum(np.log(d))
167: 
168:         # Initialize an attribute to be lazily computed.
169:         self._pinv = None
170: 
171:     @property
172:     def pinv(self):
173:         if self._pinv is None:
174:             self._pinv = np.dot(self.U, self.U.T)
175:         return self._pinv
176: 
177: 
178: class multi_rv_generic(object):
179:     '''
180:     Class which encapsulates common functionality between all multivariate
181:     distributions.
182: 
183:     '''
184:     def __init__(self, seed=None):
185:         super(multi_rv_generic, self).__init__()
186:         self._random_state = check_random_state(seed)
187: 
188:     @property
189:     def random_state(self):
190:         ''' Get or set the RandomState object for generating random variates.
191: 
192:         This can be either None or an existing RandomState object.
193: 
194:         If None (or np.random), use the RandomState singleton used by np.random.
195:         If already a RandomState instance, use it.
196:         If an int, use a new RandomState instance seeded with seed.
197: 
198:         '''
199:         return self._random_state
200: 
201:     @random_state.setter
202:     def random_state(self, seed):
203:         self._random_state = check_random_state(seed)
204: 
205:     def _get_random_state(self, random_state):
206:         if random_state is not None:
207:             return check_random_state(random_state)
208:         else:
209:             return self._random_state
210: 
211: 
212: class multi_rv_frozen(object):
213:     '''
214:     Class which encapsulates common functionality between all frozen
215:     multivariate distributions.
216:     '''
217:     @property
218:     def random_state(self):
219:         return self._dist._random_state
220: 
221:     @random_state.setter
222:     def random_state(self, seed):
223:         self._dist._random_state = check_random_state(seed)
224: 
225: _mvn_doc_default_callparams = '''\
226: mean : array_like, optional
227:     Mean of the distribution (default zero)
228: cov : array_like, optional
229:     Covariance matrix of the distribution (default one)
230: allow_singular : bool, optional
231:     Whether to allow a singular covariance matrix.  (Default: False)
232: '''
233: 
234: _mvn_doc_callparams_note = \
235:     '''Setting the parameter `mean` to `None` is equivalent to having `mean`
236:     be the zero-vector. The parameter `cov` can be a scalar, in which case
237:     the covariance matrix is the identity times that value, a vector of
238:     diagonal entries for the covariance matrix, or a two-dimensional
239:     array_like.
240:     '''
241: 
242: _mvn_doc_frozen_callparams = ""
243: 
244: _mvn_doc_frozen_callparams_note = \
245:     '''See class definition for a detailed description of parameters.'''
246: 
247: mvn_docdict_params = {
248:     '_mvn_doc_default_callparams': _mvn_doc_default_callparams,
249:     '_mvn_doc_callparams_note': _mvn_doc_callparams_note,
250:     '_doc_random_state': _doc_random_state
251: }
252: 
253: mvn_docdict_noparams = {
254:     '_mvn_doc_default_callparams': _mvn_doc_frozen_callparams,
255:     '_mvn_doc_callparams_note': _mvn_doc_frozen_callparams_note,
256:     '_doc_random_state': _doc_random_state
257: }
258: 
259: class multivariate_normal_gen(multi_rv_generic):
260:     r'''
261:     A multivariate normal random variable.
262: 
263:     The `mean` keyword specifies the mean. The `cov` keyword specifies the
264:     covariance matrix.
265: 
266:     Methods
267:     -------
268:     ``pdf(x, mean=None, cov=1, allow_singular=False)``
269:         Probability density function.
270:     ``logpdf(x, mean=None, cov=1, allow_singular=False)``
271:         Log of the probability density function.
272:     ``cdf(x, mean=None, cov=1, allow_singular=False, maxpts=1000000*dim, abseps=1e-5, releps=1e-5)``
273:         Cumulative distribution function.
274:     ``logcdf(x, mean=None, cov=1, allow_singular=False, maxpts=1000000*dim, abseps=1e-5, releps=1e-5)``
275:         Log of the cumulative distribution function.
276:     ``rvs(mean=None, cov=1, size=1, random_state=None)``
277:         Draw random samples from a multivariate normal distribution.
278:     ``entropy()``
279:         Compute the differential entropy of the multivariate normal.
280: 
281:     Parameters
282:     ----------
283:     x : array_like
284:         Quantiles, with the last axis of `x` denoting the components.
285:     %(_mvn_doc_default_callparams)s
286:     %(_doc_random_state)s
287: 
288:     Alternatively, the object may be called (as a function) to fix the mean
289:     and covariance parameters, returning a "frozen" multivariate normal
290:     random variable:
291: 
292:     rv = multivariate_normal(mean=None, cov=1, allow_singular=False)
293:         - Frozen object with the same methods but holding the given
294:           mean and covariance fixed.
295: 
296:     Notes
297:     -----
298:     %(_mvn_doc_callparams_note)s
299: 
300:     The covariance matrix `cov` must be a (symmetric) positive
301:     semi-definite matrix. The determinant and inverse of `cov` are computed
302:     as the pseudo-determinant and pseudo-inverse, respectively, so
303:     that `cov` does not need to have full rank.
304: 
305:     The probability density function for `multivariate_normal` is
306: 
307:     .. math::
308: 
309:         f(x) = \frac{1}{\sqrt{(2 \pi)^k \det \Sigma}}
310:                \exp\left( -\frac{1}{2} (x - \mu)^T \Sigma^{-1} (x - \mu) \right),
311: 
312:     where :math:`\mu` is the mean, :math:`\Sigma` the covariance matrix,
313:     and :math:`k` is the dimension of the space where :math:`x` takes values.
314: 
315:     .. versionadded:: 0.14.0
316: 
317:     Examples
318:     --------
319:     >>> import matplotlib.pyplot as plt
320:     >>> from scipy.stats import multivariate_normal
321: 
322:     >>> x = np.linspace(0, 5, 10, endpoint=False)
323:     >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y
324:     array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,
325:             0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])
326:     >>> fig1 = plt.figure()
327:     >>> ax = fig1.add_subplot(111)
328:     >>> ax.plot(x, y)
329: 
330:     The input quantiles can be any shape of array, as long as the last
331:     axis labels the components.  This allows us for instance to
332:     display the frozen pdf for a non-isotropic random variable in 2D as
333:     follows:
334: 
335:     >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]
336:     >>> pos = np.dstack((x, y))
337:     >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])
338:     >>> fig2 = plt.figure()
339:     >>> ax2 = fig2.add_subplot(111)
340:     >>> ax2.contourf(x, y, rv.pdf(pos))
341: 
342:     '''
343: 
344:     def __init__(self, seed=None):
345:         super(multivariate_normal_gen, self).__init__(seed)
346:         self.__doc__ = doccer.docformat(self.__doc__, mvn_docdict_params)
347: 
348:     def __call__(self, mean=None, cov=1, allow_singular=False, seed=None):
349:         '''
350:         Create a frozen multivariate normal distribution.
351: 
352:         See `multivariate_normal_frozen` for more information.
353: 
354:         '''
355:         return multivariate_normal_frozen(mean, cov,
356:                                           allow_singular=allow_singular,
357:                                           seed=seed)
358: 
359:     def _process_parameters(self, dim, mean, cov):
360:         '''
361:         Infer dimensionality from mean or covariance matrix, ensure that
362:         mean and covariance are full vector resp. matrix.
363: 
364:         '''
365: 
366:         # Try to infer dimensionality
367:         if dim is None:
368:             if mean is None:
369:                 if cov is None:
370:                     dim = 1
371:                 else:
372:                     cov = np.asarray(cov, dtype=float)
373:                     if cov.ndim < 2:
374:                         dim = 1
375:                     else:
376:                         dim = cov.shape[0]
377:             else:
378:                 mean = np.asarray(mean, dtype=float)
379:                 dim = mean.size
380:         else:
381:             if not np.isscalar(dim):
382:                 raise ValueError("Dimension of random variable must be a scalar.")
383: 
384:         # Check input sizes and return full arrays for mean and cov if necessary
385:         if mean is None:
386:             mean = np.zeros(dim)
387:         mean = np.asarray(mean, dtype=float)
388: 
389:         if cov is None:
390:             cov = 1.0
391:         cov = np.asarray(cov, dtype=float)
392: 
393:         if dim == 1:
394:             mean.shape = (1,)
395:             cov.shape = (1, 1)
396: 
397:         if mean.ndim != 1 or mean.shape[0] != dim:
398:             raise ValueError("Array 'mean' must be a vector of length %d." % dim)
399:         if cov.ndim == 0:
400:             cov = cov * np.eye(dim)
401:         elif cov.ndim == 1:
402:             cov = np.diag(cov)
403:         elif cov.ndim == 2 and cov.shape != (dim, dim):
404:             rows, cols = cov.shape
405:             if rows != cols:
406:                 msg = ("Array 'cov' must be square if it is two dimensional,"
407:                        " but cov.shape = %s." % str(cov.shape))
408:             else:
409:                 msg = ("Dimension mismatch: array 'cov' is of shape %s,"
410:                        " but 'mean' is a vector of length %d.")
411:                 msg = msg % (str(cov.shape), len(mean))
412:             raise ValueError(msg)
413:         elif cov.ndim > 2:
414:             raise ValueError("Array 'cov' must be at most two-dimensional,"
415:                              " but cov.ndim = %d" % cov.ndim)
416: 
417:         return dim, mean, cov
418: 
419:     def _process_quantiles(self, x, dim):
420:         '''
421:         Adjust quantiles array so that last axis labels the components of
422:         each data point.
423: 
424:         '''
425:         x = np.asarray(x, dtype=float)
426: 
427:         if x.ndim == 0:
428:             x = x[np.newaxis]
429:         elif x.ndim == 1:
430:             if dim == 1:
431:                 x = x[:, np.newaxis]
432:             else:
433:                 x = x[np.newaxis, :]
434: 
435:         return x
436: 
437:     def _logpdf(self, x, mean, prec_U, log_det_cov, rank):
438:         '''
439:         Parameters
440:         ----------
441:         x : ndarray
442:             Points at which to evaluate the log of the probability
443:             density function
444:         mean : ndarray
445:             Mean of the distribution
446:         prec_U : ndarray
447:             A decomposition such that np.dot(prec_U, prec_U.T)
448:             is the precision matrix, i.e. inverse of the covariance matrix.
449:         log_det_cov : float
450:             Logarithm of the determinant of the covariance matrix
451:         rank : int
452:             Rank of the covariance matrix.
453: 
454:         Notes
455:         -----
456:         As this function does no argument checking, it should not be
457:         called directly; use 'logpdf' instead.
458: 
459:         '''
460:         dev = x - mean
461:         maha = np.sum(np.square(np.dot(dev, prec_U)), axis=-1)
462:         return -0.5 * (rank * _LOG_2PI + log_det_cov + maha)
463: 
464:     def logpdf(self, x, mean=None, cov=1, allow_singular=False):
465:         '''
466:         Log of the multivariate normal probability density function.
467: 
468:         Parameters
469:         ----------
470:         x : array_like
471:             Quantiles, with the last axis of `x` denoting the components.
472:         %(_mvn_doc_default_callparams)s
473: 
474:         Returns
475:         -------
476:         pdf : ndarray or scalar
477:             Log of the probability density function evaluated at `x`
478: 
479:         Notes
480:         -----
481:         %(_mvn_doc_callparams_note)s
482: 
483:         '''
484:         dim, mean, cov = self._process_parameters(None, mean, cov)
485:         x = self._process_quantiles(x, dim)
486:         psd = _PSD(cov, allow_singular=allow_singular)
487:         out = self._logpdf(x, mean, psd.U, psd.log_pdet, psd.rank)
488:         return _squeeze_output(out)
489: 
490:     def pdf(self, x, mean=None, cov=1, allow_singular=False):
491:         '''
492:         Multivariate normal probability density function.
493: 
494:         Parameters
495:         ----------
496:         x : array_like
497:             Quantiles, with the last axis of `x` denoting the components.
498:         %(_mvn_doc_default_callparams)s
499: 
500:         Returns
501:         -------
502:         pdf : ndarray or scalar
503:             Probability density function evaluated at `x`
504: 
505:         Notes
506:         -----
507:         %(_mvn_doc_callparams_note)s
508: 
509:         '''
510:         dim, mean, cov = self._process_parameters(None, mean, cov)
511:         x = self._process_quantiles(x, dim)
512:         psd = _PSD(cov, allow_singular=allow_singular)
513:         out = np.exp(self._logpdf(x, mean, psd.U, psd.log_pdet, psd.rank))
514:         return _squeeze_output(out)
515: 
516:     def _cdf(self, x, mean, cov, maxpts, abseps, releps):
517:         '''
518:         Parameters
519:         ----------
520:         x : ndarray
521:             Points at which to evaluate the cumulative distribution function.
522:         mean : ndarray
523:             Mean of the distribution
524:         cov : array_like
525:             Covariance matrix of the distribution
526:         maxpts: integer
527:             The maximum number of points to use for integration
528:         abseps: float
529:             Absolute error tolerance
530:         releps: float
531:             Relative error tolerance
532: 
533:         Notes
534:         -----
535:         As this function does no argument checking, it should not be
536:         called directly; use 'cdf' instead.
537: 
538:         .. versionadded:: 1.0.0
539: 
540:         '''
541:         lower = np.full(mean.shape, -np.inf)
542:         # mvnun expects 1-d arguments, so process points sequentially
543:         func1d = lambda x_slice: mvn.mvnun(lower, x_slice, mean, cov,
544:                                            maxpts, abseps, releps)[0]
545:         out = np.apply_along_axis(func1d, -1, x)
546:         return _squeeze_output(out)
547: 
548:     def logcdf(self, x, mean=None, cov=1, allow_singular=False, maxpts=None,
549:                abseps=1e-5, releps=1e-5):
550:         '''
551:         Log of the multivariate normal cumulative distribution function.
552: 
553:         Parameters
554:         ----------
555:         x : array_like
556:             Quantiles, with the last axis of `x` denoting the components.
557:         %(_mvn_doc_default_callparams)s
558:         maxpts: integer, optional
559:             The maximum number of points to use for integration
560:             (default `1000000*dim`)
561:         abseps: float, optional
562:             Absolute error tolerance (default 1e-5)
563:         releps: float, optional
564:             Relative error tolerance (default 1e-5)
565: 
566:         Returns
567:         -------
568:         cdf : ndarray or scalar
569:             Log of the cumulative distribution function evaluated at `x`
570: 
571:         Notes
572:         -----
573:         %(_mvn_doc_callparams_note)s
574: 
575:         .. versionadded:: 1.0.0
576: 
577:         '''
578:         dim, mean, cov = self._process_parameters(None, mean, cov)
579:         x = self._process_quantiles(x, dim)
580:         # Use _PSD to check covariance matrix
581:         _PSD(cov, allow_singular=allow_singular)
582:         if not maxpts:
583:             maxpts = 1000000 * dim
584:         out = np.log(self._cdf(x, mean, cov, maxpts, abseps, releps))
585:         return out
586: 
587:     def cdf(self, x, mean=None, cov=1, allow_singular=False, maxpts=None,
588:             abseps=1e-5, releps=1e-5):
589:         '''
590:         Multivariate normal cumulative distribution function.
591: 
592:         Parameters
593:         ----------
594:         x : array_like
595:             Quantiles, with the last axis of `x` denoting the components.
596:         %(_mvn_doc_default_callparams)s
597:         maxpts: integer, optional
598:             The maximum number of points to use for integration
599:             (default `1000000*dim`)
600:         abseps: float, optional
601:             Absolute error tolerance (default 1e-5)
602:         releps: float, optional
603:             Relative error tolerance (default 1e-5)
604: 
605:         Returns
606:         -------
607:         cdf : ndarray or scalar
608:             Cumulative distribution function evaluated at `x`
609: 
610:         Notes
611:         -----
612:         %(_mvn_doc_callparams_note)s
613: 
614:         .. versionadded:: 1.0.0
615: 
616:         '''
617:         dim, mean, cov = self._process_parameters(None, mean, cov)
618:         x = self._process_quantiles(x, dim)
619:         # Use _PSD to check covariance matrix
620:         _PSD(cov, allow_singular=allow_singular)
621:         if not maxpts:
622:             maxpts = 1000000 * dim
623:         out = self._cdf(x, mean, cov, maxpts, abseps, releps)
624:         return out
625: 
626:     def rvs(self, mean=None, cov=1, size=1, random_state=None):
627:         '''
628:         Draw random samples from a multivariate normal distribution.
629: 
630:         Parameters
631:         ----------
632:         %(_mvn_doc_default_callparams)s
633:         size : integer, optional
634:             Number of samples to draw (default 1).
635:         %(_doc_random_state)s
636: 
637:         Returns
638:         -------
639:         rvs : ndarray or scalar
640:             Random variates of size (`size`, `N`), where `N` is the
641:             dimension of the random variable.
642: 
643:         Notes
644:         -----
645:         %(_mvn_doc_callparams_note)s
646: 
647:         '''
648:         dim, mean, cov = self._process_parameters(None, mean, cov)
649: 
650:         random_state = self._get_random_state(random_state)
651:         out = random_state.multivariate_normal(mean, cov, size)
652:         return _squeeze_output(out)
653: 
654:     def entropy(self, mean=None, cov=1):
655:         '''
656:         Compute the differential entropy of the multivariate normal.
657: 
658:         Parameters
659:         ----------
660:         %(_mvn_doc_default_callparams)s
661: 
662:         Returns
663:         -------
664:         h : scalar
665:             Entropy of the multivariate normal distribution
666: 
667:         Notes
668:         -----
669:         %(_mvn_doc_callparams_note)s
670: 
671:         '''
672:         dim, mean, cov = self._process_parameters(None, mean, cov)
673:         _, logdet = np.linalg.slogdet(2 * np.pi * np.e * cov)
674:         return 0.5 * logdet
675: 
676: 
677: multivariate_normal = multivariate_normal_gen()
678: 
679: 
680: class multivariate_normal_frozen(multi_rv_frozen):
681:     def __init__(self, mean=None, cov=1, allow_singular=False, seed=None,
682:                  maxpts=None, abseps=1e-5, releps=1e-5):
683:         '''
684:         Create a frozen multivariate normal distribution.
685: 
686:         Parameters
687:         ----------
688:         mean : array_like, optional
689:             Mean of the distribution (default zero)
690:         cov : array_like, optional
691:             Covariance matrix of the distribution (default one)
692:         allow_singular : bool, optional
693:             If this flag is True then tolerate a singular
694:             covariance matrix (default False).
695:         seed : None or int or np.random.RandomState instance, optional
696:             This parameter defines the RandomState object to use for drawing
697:             random variates.
698:             If None (or np.random), the global np.random state is used.
699:             If integer, it is used to seed the local RandomState instance
700:             Default is None.
701:         maxpts: integer, optional
702:             The maximum number of points to use for integration of the
703:             cumulative distribution function (default `1000000*dim`)
704:         abseps: float, optional
705:             Absolute error tolerance for the cumulative distribution function
706:             (default 1e-5)
707:         releps: float, optional
708:             Relative error tolerance for the cumulative distribution function
709:             (default 1e-5)
710: 
711:         Examples
712:         --------
713:         When called with the default parameters, this will create a 1D random
714:         variable with mean 0 and covariance 1:
715: 
716:         >>> from scipy.stats import multivariate_normal
717:         >>> r = multivariate_normal()
718:         >>> r.mean
719:         array([ 0.])
720:         >>> r.cov
721:         array([[1.]])
722: 
723:         '''
724:         self._dist = multivariate_normal_gen(seed)
725:         self.dim, self.mean, self.cov = self._dist._process_parameters(
726:                                                             None, mean, cov)
727:         self.cov_info = _PSD(self.cov, allow_singular=allow_singular)
728:         if not maxpts:
729:             maxpts = 1000000 * self.dim
730:         self.maxpts = maxpts
731:         self.abseps = abseps
732:         self.releps = releps
733: 
734:     def logpdf(self, x):
735:         x = self._dist._process_quantiles(x, self.dim)
736:         out = self._dist._logpdf(x, self.mean, self.cov_info.U,
737:                                  self.cov_info.log_pdet, self.cov_info.rank)
738:         return _squeeze_output(out)
739: 
740:     def pdf(self, x):
741:         return np.exp(self.logpdf(x))
742: 
743:     def logcdf(self, x):
744:         return np.log(self.cdf(x))
745: 
746:     def cdf(self, x):
747:         x = self._dist._process_quantiles(x, self.dim)
748:         out = self._dist._cdf(x, self.mean, self.cov, self.maxpts, self.abseps,
749:                               self.releps)
750:         return _squeeze_output(out)
751: 
752:     def rvs(self, size=1, random_state=None):
753:         return self._dist.rvs(self.mean, self.cov, size, random_state)
754: 
755:     def entropy(self):
756:         '''
757:         Computes the differential entropy of the multivariate normal.
758: 
759:         Returns
760:         -------
761:         h : scalar
762:             Entropy of the multivariate normal distribution
763: 
764:         '''
765:         log_pdet = self.cov_info.log_pdet
766:         rank = self.cov_info.rank
767:         return 0.5 * (rank * (_LOG_2PI + 1) + log_pdet)
768: 
769: # Set frozen generator docstrings from corresponding docstrings in
770: # multivariate_normal_gen and fill in default strings in class docstrings
771: for name in ['logpdf', 'pdf', 'logcdf', 'cdf', 'rvs']:
772:     method = multivariate_normal_gen.__dict__[name]
773:     method_frozen = multivariate_normal_frozen.__dict__[name]
774:     method_frozen.__doc__ = doccer.docformat(method.__doc__, mvn_docdict_noparams)
775:     method.__doc__ = doccer.docformat(method.__doc__, mvn_docdict_params)
776: 
777: _matnorm_doc_default_callparams = '''\
778: mean : array_like, optional
779:     Mean of the distribution (default: `None`)
780: rowcov : array_like, optional
781:     Among-row covariance matrix of the distribution (default: `1`)
782: colcov : array_like, optional
783:     Among-column covariance matrix of the distribution (default: `1`)
784: '''
785: 
786: _matnorm_doc_callparams_note = \
787:     '''If `mean` is set to `None` then a matrix of zeros is used for the mean.
788:     The dimensions of this matrix are inferred from the shape of `rowcov` and
789:     `colcov`, if these are provided, or set to `1` if ambiguous.
790: 
791:     `rowcov` and `colcov` can be two-dimensional array_likes specifying the
792:     covariance matrices directly. Alternatively, a one-dimensional array will
793:     be be interpreted as the entries of a diagonal matrix, and a scalar or
794:     zero-dimensional array will be interpreted as this value times the
795:     identity matrix.
796:     '''
797: 
798: _matnorm_doc_frozen_callparams = ""
799: 
800: _matnorm_doc_frozen_callparams_note = \
801:     '''See class definition for a detailed description of parameters.'''
802: 
803: matnorm_docdict_params = {
804:     '_matnorm_doc_default_callparams': _matnorm_doc_default_callparams,
805:     '_matnorm_doc_callparams_note': _matnorm_doc_callparams_note,
806:     '_doc_random_state': _doc_random_state
807: }
808: 
809: matnorm_docdict_noparams = {
810:     '_matnorm_doc_default_callparams': _matnorm_doc_frozen_callparams,
811:     '_matnorm_doc_callparams_note': _matnorm_doc_frozen_callparams_note,
812:     '_doc_random_state': _doc_random_state
813: }
814: class matrix_normal_gen(multi_rv_generic):
815:     r'''
816:     A matrix normal random variable.
817: 
818:     The `mean` keyword specifies the mean. The `rowcov` keyword specifies the
819:     among-row covariance matrix. The 'colcov' keyword specifies the
820:     among-column covariance matrix.
821: 
822:     Methods
823:     -------
824:     ``pdf(X, mean=None, rowcov=1, colcov=1)``
825:         Probability density function.
826:     ``logpdf(X, mean=None, rowcov=1, colcov=1)``
827:         Log of the probability density function.
828:     ``rvs(mean=None, rowcov=1, colcov=1, size=1, random_state=None)``
829:         Draw random samples.
830: 
831:     Parameters
832:     ----------
833:     X : array_like
834:         Quantiles, with the last two axes of `X` denoting the components.
835:     %(_matnorm_doc_default_callparams)s
836:     %(_doc_random_state)s
837: 
838:     Alternatively, the object may be called (as a function) to fix the mean
839:     and covariance parameters, returning a "frozen" matrix normal
840:     random variable:
841: 
842:     rv = matrix_normal(mean=None, rowcov=1, colcov=1)
843:         - Frozen object with the same methods but holding the given
844:           mean and covariance fixed.
845: 
846:     Notes
847:     -----
848:     %(_matnorm_doc_callparams_note)s
849: 
850:     The covariance matrices specified by `rowcov` and `colcov` must be
851:     (symmetric) positive definite. If the samples in `X` are
852:     :math:`m \times n`, then `rowcov` must be :math:`m \times m` and
853:     `colcov` must be :math:`n \times n`. `mean` must be the same shape as `X`.
854: 
855:     The probability density function for `matrix_normal` is
856: 
857:     .. math::
858: 
859:         f(X) = (2 \pi)^{-\frac{mn}{2}}|U|^{-\frac{n}{2}} |V|^{-\frac{m}{2}}
860:                \exp\left( -\frac{1}{2} \mathrm{Tr}\left[ U^{-1} (X-M) V^{-1}
861:                (X-M)^T \right] \right),
862: 
863:     where :math:`M` is the mean, :math:`U` the among-row covariance matrix,
864:     :math:`V` the among-column covariance matrix.
865: 
866:     The `allow_singular` behaviour of the `multivariate_normal`
867:     distribution is not currently supported. Covariance matrices must be
868:     full rank.
869: 
870:     The `matrix_normal` distribution is closely related to the
871:     `multivariate_normal` distribution. Specifically, :math:`\mathrm{Vec}(X)`
872:     (the vector formed by concatenating the columns  of :math:`X`) has a
873:     multivariate normal distribution with mean :math:`\mathrm{Vec}(M)`
874:     and covariance :math:`V \otimes U` (where :math:`\otimes` is the Kronecker
875:     product). Sampling and pdf evaluation are
876:     :math:`\mathcal{O}(m^3 + n^3 + m^2 n + m n^2)` for the matrix normal, but
877:     :math:`\mathcal{O}(m^3 n^3)` for the equivalent multivariate normal,
878:     making this equivalent form algorithmically inefficient.
879: 
880:     .. versionadded:: 0.17.0
881: 
882:     Examples
883:     --------
884: 
885:     >>> from scipy.stats import matrix_normal
886: 
887:     >>> M = np.arange(6).reshape(3,2); M
888:     array([[0, 1],
889:            [2, 3],
890:            [4, 5]])
891:     >>> U = np.diag([1,2,3]); U
892:     array([[1, 0, 0],
893:            [0, 2, 0],
894:            [0, 0, 3]])
895:     >>> V = 0.3*np.identity(2); V
896:     array([[ 0.3,  0. ],
897:            [ 0. ,  0.3]])
898:     >>> X = M + 0.1; X
899:     array([[ 0.1,  1.1],
900:            [ 2.1,  3.1],
901:            [ 4.1,  5.1]])
902:     >>> matrix_normal.pdf(X, mean=M, rowcov=U, colcov=V)
903:     0.023410202050005054
904: 
905:     >>> # Equivalent multivariate normal
906:     >>> from scipy.stats import multivariate_normal
907:     >>> vectorised_X = X.T.flatten()
908:     >>> equiv_mean = M.T.flatten()
909:     >>> equiv_cov = np.kron(V,U)
910:     >>> multivariate_normal.pdf(vectorised_X, mean=equiv_mean, cov=equiv_cov)
911:     0.023410202050005054
912:     '''
913: 
914:     def __init__(self, seed=None):
915:         super(matrix_normal_gen, self).__init__(seed)
916:         self.__doc__ = doccer.docformat(self.__doc__, matnorm_docdict_params)
917: 
918:     def __call__(self, mean=None, rowcov=1, colcov=1, seed=None):
919:         '''
920:         Create a frozen matrix normal distribution.
921: 
922:         See `matrix_normal_frozen` for more information.
923: 
924:         '''
925:         return matrix_normal_frozen(mean, rowcov, colcov, seed=seed)
926: 
927:     def _process_parameters(self, mean, rowcov, colcov):
928:         '''
929:         Infer dimensionality from mean or covariance matrices. Handle
930:         defaults. Ensure compatible dimensions.
931: 
932:         '''
933: 
934:         # Process mean
935:         if mean is not None:
936:             mean = np.asarray(mean, dtype=float)
937:             meanshape = mean.shape
938:             if len(meanshape) != 2:
939:                 raise ValueError("Array `mean` must be two dimensional.")
940:             if np.any(meanshape == 0):
941:                 raise ValueError("Array `mean` has invalid shape.")
942: 
943:         # Process among-row covariance
944:         rowcov = np.asarray(rowcov, dtype=float)
945:         if rowcov.ndim == 0:
946:             if mean is not None:
947:                 rowcov = rowcov * np.identity(meanshape[0])
948:             else:
949:                 rowcov = rowcov * np.identity(1)
950:         elif rowcov.ndim == 1:
951:             rowcov = np.diag(rowcov)
952:         rowshape = rowcov.shape
953:         if len(rowshape) != 2:
954:             raise ValueError("`rowcov` must be a scalar or a 2D array.")
955:         if rowshape[0] != rowshape[1]:
956:             raise ValueError("Array `rowcov` must be square.")
957:         if rowshape[0] == 0:
958:             raise ValueError("Array `rowcov` has invalid shape.")
959:         numrows = rowshape[0]
960: 
961:         # Process among-column covariance
962:         colcov = np.asarray(colcov, dtype=float)
963:         if colcov.ndim == 0:
964:             if mean is not None:
965:                 colcov = colcov * np.identity(meanshape[1])
966:             else:
967:                 colcov = colcov * np.identity(1)
968:         elif colcov.ndim == 1:
969:             colcov = np.diag(colcov)
970:         colshape = colcov.shape
971:         if len(colshape) != 2:
972:             raise ValueError("`colcov` must be a scalar or a 2D array.")
973:         if colshape[0] != colshape[1]:
974:             raise ValueError("Array `colcov` must be square.")
975:         if colshape[0] == 0:
976:             raise ValueError("Array `colcov` has invalid shape.")
977:         numcols = colshape[0]
978: 
979:         # Ensure mean and covariances compatible
980:         if mean is not None:
981:             if meanshape[0] != numrows:
982:                 raise ValueError("Arrays `mean` and `rowcov` must have the"
983:                                   "same number of rows.")
984:             if meanshape[1] != numcols:
985:                 raise ValueError("Arrays `mean` and `colcov` must have the"
986:                                   "same number of columns.")
987:         else:
988:             mean = np.zeros((numrows,numcols))
989: 
990:         dims = (numrows, numcols)
991: 
992:         return dims, mean, rowcov, colcov
993: 
994:     def _process_quantiles(self, X, dims):
995:         '''
996:         Adjust quantiles array so that last two axes labels the components of
997:         each data point.
998: 
999:         '''
1000:         X = np.asarray(X, dtype=float)
1001:         if X.ndim == 2:
1002:             X = X[np.newaxis, :]
1003:         if X.shape[-2:] != dims:
1004:             raise ValueError("The shape of array `X` is not compatible "
1005:                               "with the distribution parameters.")
1006:         return X
1007: 
1008:     def _logpdf(self, dims, X, mean, row_prec_rt, log_det_rowcov,
1009:                 col_prec_rt, log_det_colcov):
1010:         '''
1011:         Parameters
1012:         ----------
1013:         dims : tuple
1014:             Dimensions of the matrix variates
1015:         X : ndarray
1016:             Points at which to evaluate the log of the probability
1017:             density function
1018:         mean : ndarray
1019:             Mean of the distribution
1020:         row_prec_rt : ndarray
1021:             A decomposition such that np.dot(row_prec_rt, row_prec_rt.T)
1022:             is the inverse of the among-row covariance matrix
1023:         log_det_rowcov : float
1024:             Logarithm of the determinant of the among-row covariance matrix
1025:         col_prec_rt : ndarray
1026:             A decomposition such that np.dot(col_prec_rt, col_prec_rt.T)
1027:             is the inverse of the among-column covariance matrix
1028:         log_det_colcov : float
1029:             Logarithm of the determinant of the among-column covariance matrix
1030: 
1031:         Notes
1032:         -----
1033:         As this function does no argument checking, it should not be
1034:         called directly; use 'logpdf' instead.
1035: 
1036:         '''
1037:         numrows, numcols = dims
1038:         roll_dev = np.rollaxis(X-mean, axis=-1, start=0)
1039:         scale_dev = np.tensordot(col_prec_rt.T,
1040:                                  np.dot(roll_dev, row_prec_rt), 1)
1041:         maha = np.sum(np.sum(np.square(scale_dev), axis=-1), axis=0)
1042:         return -0.5 * (numrows*numcols*_LOG_2PI + numcols*log_det_rowcov
1043:                        + numrows*log_det_colcov + maha)
1044: 
1045:     def logpdf(self, X, mean=None, rowcov=1, colcov=1):
1046:         '''
1047:         Log of the matrix normal probability density function.
1048: 
1049:         Parameters
1050:         ----------
1051:         X : array_like
1052:             Quantiles, with the last two axes of `X` denoting the components.
1053:         %(_matnorm_doc_default_callparams)s
1054: 
1055:         Returns
1056:         -------
1057:         logpdf : ndarray
1058:             Log of the probability density function evaluated at `X`
1059: 
1060:         Notes
1061:         -----
1062:         %(_matnorm_doc_callparams_note)s
1063: 
1064:         '''
1065:         dims, mean, rowcov, colcov = self._process_parameters(mean, rowcov,
1066:                                                               colcov)
1067:         X = self._process_quantiles(X, dims)
1068:         rowpsd = _PSD(rowcov, allow_singular=False)
1069:         colpsd = _PSD(colcov, allow_singular=False)
1070:         out = self._logpdf(dims, X, mean, rowpsd.U, rowpsd.log_pdet, colpsd.U,
1071:                            colpsd.log_pdet)
1072:         return _squeeze_output(out)
1073: 
1074:     def pdf(self, X, mean=None, rowcov=1, colcov=1):
1075:         '''
1076:         Matrix normal probability density function.
1077: 
1078:         Parameters
1079:         ----------
1080:         X : array_like
1081:             Quantiles, with the last two axes of `X` denoting the components.
1082:         %(_matnorm_doc_default_callparams)s
1083: 
1084:         Returns
1085:         -------
1086:         pdf : ndarray
1087:             Probability density function evaluated at `X`
1088: 
1089:         Notes
1090:         -----
1091:         %(_matnorm_doc_callparams_note)s
1092: 
1093:         '''
1094:         return np.exp(self.logpdf(X, mean, rowcov, colcov))
1095: 
1096:     def rvs(self, mean=None, rowcov=1, colcov=1, size=1, random_state=None):
1097:         '''
1098:         Draw random samples from a matrix normal distribution.
1099: 
1100:         Parameters
1101:         ----------
1102:         %(_matnorm_doc_default_callparams)s
1103:         size : integer, optional
1104:             Number of samples to draw (default 1).
1105:         %(_doc_random_state)s
1106: 
1107:         Returns
1108:         -------
1109:         rvs : ndarray or scalar
1110:             Random variates of size (`size`, `dims`), where `dims` is the
1111:             dimension of the random matrices.
1112: 
1113:         Notes
1114:         -----
1115:         %(_matnorm_doc_callparams_note)s
1116: 
1117:         '''
1118:         size = int(size)
1119:         dims, mean, rowcov, colcov = self._process_parameters(mean, rowcov,
1120:                                                               colcov)
1121:         rowchol = scipy.linalg.cholesky(rowcov, lower=True)
1122:         colchol = scipy.linalg.cholesky(colcov, lower=True)
1123:         random_state = self._get_random_state(random_state)
1124:         std_norm = random_state.standard_normal(size=(dims[1],size,dims[0]))
1125:         roll_rvs = np.tensordot(colchol, np.dot(std_norm, rowchol.T), 1)
1126:         out = np.rollaxis(roll_rvs.T, axis=1, start=0) + mean[np.newaxis,:,:]
1127:         if size == 1:
1128:             #out = np.squeeze(out, axis=0)
1129:             out = out.reshape(mean.shape)
1130:         return out
1131: 
1132: matrix_normal = matrix_normal_gen()
1133: 
1134: 
1135: class matrix_normal_frozen(multi_rv_frozen):
1136:     def __init__(self, mean=None, rowcov=1, colcov=1, seed=None):
1137:         '''
1138:         Create a frozen matrix normal distribution.
1139: 
1140:         Parameters
1141:         ----------
1142:         %(_matnorm_doc_default_callparams)s
1143:         seed : None or int or np.random.RandomState instance, optional
1144:             If int or RandomState, use it for drawing the random variates.
1145:             If None (or np.random), the global np.random state is used.
1146:             Default is None.
1147: 
1148:         Examples
1149:         --------
1150:         >>> from scipy.stats import matrix_normal
1151: 
1152:         >>> distn = matrix_normal(mean=np.zeros((3,3)))
1153:         >>> X = distn.rvs(); X
1154:         array([[-0.02976962,  0.93339138, -0.09663178],
1155:                [ 0.67405524,  0.28250467, -0.93308929],
1156:                [-0.31144782,  0.74535536,  1.30412916]])
1157:         >>> distn.pdf(X)
1158:         2.5160642368346784e-05
1159:         >>> distn.logpdf(X)
1160:         -10.590229595124615
1161:         '''
1162:         self._dist = matrix_normal_gen(seed)
1163:         self.dims, self.mean, self.rowcov, self.colcov = \
1164:             self._dist._process_parameters(mean, rowcov, colcov)
1165:         self.rowpsd = _PSD(self.rowcov, allow_singular=False)
1166:         self.colpsd = _PSD(self.colcov, allow_singular=False)
1167: 
1168:     def logpdf(self, X):
1169:         X = self._dist._process_quantiles(X, self.dims)
1170:         out = self._dist._logpdf(self.dims, X, self.mean, self.rowpsd.U,
1171:                                  self.rowpsd.log_pdet, self.colpsd.U,
1172:                                  self.colpsd.log_pdet)
1173:         return _squeeze_output(out)
1174: 
1175:     def pdf(self, X):
1176:         return np.exp(self.logpdf(X))
1177: 
1178:     def rvs(self, size=1, random_state=None):
1179:         return self._dist.rvs(self.mean, self.rowcov, self.colcov, size,
1180:                               random_state)
1181: 
1182: 
1183: # Set frozen generator docstrings from corresponding docstrings in
1184: # matrix_normal_gen and fill in default strings in class docstrings
1185: for name in ['logpdf', 'pdf', 'rvs']:
1186:     method = matrix_normal_gen.__dict__[name]
1187:     method_frozen = matrix_normal_frozen.__dict__[name]
1188:     method_frozen.__doc__ = doccer.docformat(method.__doc__, matnorm_docdict_noparams)
1189:     method.__doc__ = doccer.docformat(method.__doc__, matnorm_docdict_params)
1190: 
1191: _dirichlet_doc_default_callparams = '''\
1192: alpha : array_like
1193:     The concentration parameters. The number of entries determines the
1194:     dimensionality of the distribution.
1195: '''
1196: _dirichlet_doc_frozen_callparams = ""
1197: 
1198: _dirichlet_doc_frozen_callparams_note = \
1199:     '''See class definition for a detailed description of parameters.'''
1200: 
1201: dirichlet_docdict_params = {
1202:     '_dirichlet_doc_default_callparams': _dirichlet_doc_default_callparams,
1203:     '_doc_random_state': _doc_random_state
1204: }
1205: 
1206: dirichlet_docdict_noparams = {
1207:     '_dirichlet_doc_default_callparams': _dirichlet_doc_frozen_callparams,
1208:     '_doc_random_state': _doc_random_state
1209: }
1210: 
1211: def _dirichlet_check_parameters(alpha):
1212:     alpha = np.asarray(alpha)
1213:     if np.min(alpha) <= 0:
1214:         raise ValueError("All parameters must be greater than 0")
1215:     elif alpha.ndim != 1:
1216:         raise ValueError("Parameter vector 'a' must be one dimensional, "
1217:                        "but a.shape = %s." % (alpha.shape, ))
1218:     return alpha
1219: 
1220: 
1221: def _dirichlet_check_input(alpha, x):
1222:     x = np.asarray(x)
1223: 
1224:     if x.shape[0] + 1 != alpha.shape[0] and x.shape[0] != alpha.shape[0]:
1225:         raise ValueError("Vector 'x' must have either the same number "
1226:                          "of entries as, or one entry fewer than, "
1227:                          "parameter vector 'a', but alpha.shape = %s "
1228:                          "and x.shape = %s." % (alpha.shape, x.shape))
1229: 
1230:     if x.shape[0] != alpha.shape[0]:
1231:         xk = np.array([1 - np.sum(x, 0)])
1232:         if xk.ndim == 1:
1233:             x = np.append(x, xk)
1234:         elif xk.ndim == 2:
1235:             x = np.vstack((x, xk))
1236:         else:
1237:             raise ValueError("The input must be one dimensional or a two "
1238:                              "dimensional matrix containing the entries.")
1239: 
1240:     if np.min(x) <= 0:
1241:         raise ValueError("Each entry in 'x' must be greater than zero.")
1242: 
1243:     if np.max(x) > 1:
1244:         raise ValueError("Each entry in 'x' must be smaller or equal one.")
1245: 
1246:     if (np.abs(np.sum(x, 0) - 1.0) > 10e-10).any():
1247:         raise ValueError("The input vector 'x' must lie within the normal "
1248:                        "simplex. but np.sum(x, 0) = %s." % np.sum(x, 0))
1249: 
1250:     return x
1251: 
1252: 
1253: def _lnB(alpha):
1254:     r'''
1255:     Internal helper function to compute the log of the useful quotient
1256: 
1257:     .. math::
1258: 
1259:         B(\alpha) = \frac{\prod_{i=1}{K}\Gamma(\alpha_i)}{\Gamma\left(\sum_{i=1}^{K}\alpha_i\right)}
1260: 
1261:     Parameters
1262:     ----------
1263:     %(_dirichlet_doc_default_callparams)s
1264: 
1265:     Returns
1266:     -------
1267:     B : scalar
1268:         Helper quotient, internal use only
1269: 
1270:     '''
1271:     return np.sum(gammaln(alpha)) - gammaln(np.sum(alpha))
1272: 
1273: 
1274: class dirichlet_gen(multi_rv_generic):
1275:     r'''
1276:     A Dirichlet random variable.
1277: 
1278:     The `alpha` keyword specifies the concentration parameters of the
1279:     distribution.
1280: 
1281:     .. versionadded:: 0.15.0
1282: 
1283:     Methods
1284:     -------
1285:     ``pdf(x, alpha)``
1286:         Probability density function.
1287:     ``logpdf(x, alpha)``
1288:         Log of the probability density function.
1289:     ``rvs(alpha, size=1, random_state=None)``
1290:         Draw random samples from a Dirichlet distribution.
1291:     ``mean(alpha)``
1292:         The mean of the Dirichlet distribution
1293:     ``var(alpha)``
1294:         The variance of the Dirichlet distribution
1295:     ``entropy(alpha)``
1296:         Compute the differential entropy of the Dirichlet distribution.
1297: 
1298:     Parameters
1299:     ----------
1300:     x : array_like
1301:         Quantiles, with the last axis of `x` denoting the components.
1302:     %(_dirichlet_doc_default_callparams)s
1303:     %(_doc_random_state)s
1304: 
1305:     Alternatively, the object may be called (as a function) to fix
1306:     concentration parameters, returning a "frozen" Dirichlet
1307:     random variable:
1308: 
1309:     rv = dirichlet(alpha)
1310:         - Frozen object with the same methods but holding the given
1311:           concentration parameters fixed.
1312: 
1313:     Notes
1314:     -----
1315:     Each :math:`\alpha` entry must be positive. The distribution has only
1316:     support on the simplex defined by
1317: 
1318:     .. math::
1319:         \sum_{i=1}^{K} x_i \le 1
1320: 
1321: 
1322:     The probability density function for `dirichlet` is
1323: 
1324:     .. math::
1325: 
1326:         f(x) = \frac{1}{\mathrm{B}(\boldsymbol\alpha)} \prod_{i=1}^K x_i^{\alpha_i - 1}
1327: 
1328:     where
1329: 
1330:     .. math::
1331: 
1332:         \mathrm{B}(\boldsymbol\alpha) = \frac{\prod_{i=1}^K \Gamma(\alpha_i)}
1333:                                      {\Gamma\bigl(\sum_{i=1}^K \alpha_i\bigr)}
1334: 
1335:     and :math:`\boldsymbol\alpha=(\alpha_1,\ldots,\alpha_K)`, the
1336:     concentration parameters and :math:`K` is the dimension of the space
1337:     where :math:`x` takes values.
1338: 
1339:     Note that the dirichlet interface is somewhat inconsistent.
1340:     The array returned by the rvs function is transposed
1341:     with respect to the format expected by the pdf and logpdf.
1342: 
1343:     '''
1344: 
1345:     def __init__(self, seed=None):
1346:         super(dirichlet_gen, self).__init__(seed)
1347:         self.__doc__ = doccer.docformat(self.__doc__, dirichlet_docdict_params)
1348: 
1349:     def __call__(self, alpha, seed=None):
1350:         return dirichlet_frozen(alpha, seed=seed)
1351: 
1352:     def _logpdf(self, x, alpha):
1353:         '''
1354:         Parameters
1355:         ----------
1356:         x : ndarray
1357:             Points at which to evaluate the log of the probability
1358:             density function
1359:         %(_dirichlet_doc_default_callparams)s
1360: 
1361:         Notes
1362:         -----
1363:         As this function does no argument checking, it should not be
1364:         called directly; use 'logpdf' instead.
1365: 
1366:         '''
1367:         lnB = _lnB(alpha)
1368:         return - lnB + np.sum((np.log(x.T) * (alpha - 1)).T, 0)
1369: 
1370:     def logpdf(self, x, alpha):
1371:         '''
1372:         Log of the Dirichlet probability density function.
1373: 
1374:         Parameters
1375:         ----------
1376:         x : array_like
1377:             Quantiles, with the last axis of `x` denoting the components.
1378:         %(_dirichlet_doc_default_callparams)s
1379: 
1380:         Returns
1381:         -------
1382:         pdf : ndarray or scalar
1383:             Log of the probability density function evaluated at `x`.
1384: 
1385:         '''
1386:         alpha = _dirichlet_check_parameters(alpha)
1387:         x = _dirichlet_check_input(alpha, x)
1388: 
1389:         out = self._logpdf(x, alpha)
1390:         return _squeeze_output(out)
1391: 
1392:     def pdf(self, x, alpha):
1393:         '''
1394:         The Dirichlet probability density function.
1395: 
1396:         Parameters
1397:         ----------
1398:         x : array_like
1399:             Quantiles, with the last axis of `x` denoting the components.
1400:         %(_dirichlet_doc_default_callparams)s
1401: 
1402:         Returns
1403:         -------
1404:         pdf : ndarray or scalar
1405:             The probability density function evaluated at `x`.
1406: 
1407:         '''
1408:         alpha = _dirichlet_check_parameters(alpha)
1409:         x = _dirichlet_check_input(alpha, x)
1410: 
1411:         out = np.exp(self._logpdf(x, alpha))
1412:         return _squeeze_output(out)
1413: 
1414:     def mean(self, alpha):
1415:         '''
1416:         Compute the mean of the dirichlet distribution.
1417: 
1418:         Parameters
1419:         ----------
1420:         %(_dirichlet_doc_default_callparams)s
1421: 
1422:         Returns
1423:         -------
1424:         mu : ndarray or scalar
1425:             Mean of the Dirichlet distribution.
1426: 
1427:         '''
1428:         alpha = _dirichlet_check_parameters(alpha)
1429: 
1430:         out = alpha / (np.sum(alpha))
1431:         return _squeeze_output(out)
1432: 
1433:     def var(self, alpha):
1434:         '''
1435:         Compute the variance of the dirichlet distribution.
1436: 
1437:         Parameters
1438:         ----------
1439:         %(_dirichlet_doc_default_callparams)s
1440: 
1441:         Returns
1442:         -------
1443:         v : ndarray or scalar
1444:             Variance of the Dirichlet distribution.
1445: 
1446:         '''
1447: 
1448:         alpha = _dirichlet_check_parameters(alpha)
1449: 
1450:         alpha0 = np.sum(alpha)
1451:         out = (alpha * (alpha0 - alpha)) / ((alpha0 * alpha0) * (alpha0 + 1))
1452:         return _squeeze_output(out)
1453: 
1454:     def entropy(self, alpha):
1455:         '''
1456:         Compute the differential entropy of the dirichlet distribution.
1457: 
1458:         Parameters
1459:         ----------
1460:         %(_dirichlet_doc_default_callparams)s
1461: 
1462:         Returns
1463:         -------
1464:         h : scalar
1465:             Entropy of the Dirichlet distribution
1466: 
1467:         '''
1468: 
1469:         alpha = _dirichlet_check_parameters(alpha)
1470: 
1471:         alpha0 = np.sum(alpha)
1472:         lnB = _lnB(alpha)
1473:         K = alpha.shape[0]
1474: 
1475:         out = lnB + (alpha0 - K) * scipy.special.psi(alpha0) - np.sum(
1476:             (alpha - 1) * scipy.special.psi(alpha))
1477:         return _squeeze_output(out)
1478: 
1479:     def rvs(self, alpha, size=1, random_state=None):
1480:         '''
1481:         Draw random samples from a Dirichlet distribution.
1482: 
1483:         Parameters
1484:         ----------
1485:         %(_dirichlet_doc_default_callparams)s
1486:         size : int, optional
1487:             Number of samples to draw (default 1).
1488:         %(_doc_random_state)s
1489: 
1490:         Returns
1491:         -------
1492:         rvs : ndarray or scalar
1493:             Random variates of size (`size`, `N`), where `N` is the
1494:             dimension of the random variable.
1495: 
1496:         '''
1497:         alpha = _dirichlet_check_parameters(alpha)
1498:         random_state = self._get_random_state(random_state)
1499:         return random_state.dirichlet(alpha, size=size)
1500: 
1501: 
1502: dirichlet = dirichlet_gen()
1503: 
1504: 
1505: class dirichlet_frozen(multi_rv_frozen):
1506:     def __init__(self, alpha, seed=None):
1507:         self.alpha = _dirichlet_check_parameters(alpha)
1508:         self._dist = dirichlet_gen(seed)
1509: 
1510:     def logpdf(self, x):
1511:         return self._dist.logpdf(x, self.alpha)
1512: 
1513:     def pdf(self, x):
1514:         return self._dist.pdf(x, self.alpha)
1515: 
1516:     def mean(self):
1517:         return self._dist.mean(self.alpha)
1518: 
1519:     def var(self):
1520:         return self._dist.var(self.alpha)
1521: 
1522:     def entropy(self):
1523:         return self._dist.entropy(self.alpha)
1524: 
1525:     def rvs(self, size=1, random_state=None):
1526:         return self._dist.rvs(self.alpha, size, random_state)
1527: 
1528: 
1529: # Set frozen generator docstrings from corresponding docstrings in
1530: # multivariate_normal_gen and fill in default strings in class docstrings
1531: for name in ['logpdf', 'pdf', 'rvs', 'mean', 'var', 'entropy']:
1532:     method = dirichlet_gen.__dict__[name]
1533:     method_frozen = dirichlet_frozen.__dict__[name]
1534:     method_frozen.__doc__ = doccer.docformat(
1535:         method.__doc__, dirichlet_docdict_noparams)
1536:     method.__doc__ = doccer.docformat(method.__doc__, dirichlet_docdict_params)
1537: 
1538: 
1539: _wishart_doc_default_callparams = '''\
1540: df : int
1541:     Degrees of freedom, must be greater than or equal to dimension of the
1542:     scale matrix
1543: scale : array_like
1544:     Symmetric positive definite scale matrix of the distribution
1545: '''
1546: 
1547: _wishart_doc_callparams_note = ""
1548: 
1549: _wishart_doc_frozen_callparams = ""
1550: 
1551: _wishart_doc_frozen_callparams_note = \
1552:     '''See class definition for a detailed description of parameters.'''
1553: 
1554: wishart_docdict_params = {
1555:     '_doc_default_callparams': _wishart_doc_default_callparams,
1556:     '_doc_callparams_note': _wishart_doc_callparams_note,
1557:     '_doc_random_state': _doc_random_state
1558: }
1559: 
1560: wishart_docdict_noparams = {
1561:     '_doc_default_callparams': _wishart_doc_frozen_callparams,
1562:     '_doc_callparams_note': _wishart_doc_frozen_callparams_note,
1563:     '_doc_random_state': _doc_random_state
1564: }
1565: 
1566: 
1567: class wishart_gen(multi_rv_generic):
1568:     r'''
1569:     A Wishart random variable.
1570: 
1571:     The `df` keyword specifies the degrees of freedom. The `scale` keyword
1572:     specifies the scale matrix, which must be symmetric and positive definite.
1573:     In this context, the scale matrix is often interpreted in terms of a
1574:     multivariate normal precision matrix (the inverse of the covariance
1575:     matrix).
1576: 
1577:     Methods
1578:     -------
1579:     ``pdf(x, df, scale)``
1580:         Probability density function.
1581:     ``logpdf(x, df, scale)``
1582:         Log of the probability density function.
1583:     ``rvs(df, scale, size=1, random_state=None)``
1584:         Draw random samples from a Wishart distribution.
1585:     ``entropy()``
1586:         Compute the differential entropy of the Wishart distribution.
1587: 
1588:     Parameters
1589:     ----------
1590:     x : array_like
1591:         Quantiles, with the last axis of `x` denoting the components.
1592:     %(_doc_default_callparams)s
1593:     %(_doc_random_state)s
1594: 
1595:     Alternatively, the object may be called (as a function) to fix the degrees
1596:     of freedom and scale parameters, returning a "frozen" Wishart random
1597:     variable:
1598: 
1599:     rv = wishart(df=1, scale=1)
1600:         - Frozen object with the same methods but holding the given
1601:           degrees of freedom and scale fixed.
1602: 
1603:     See Also
1604:     --------
1605:     invwishart, chi2
1606: 
1607:     Notes
1608:     -----
1609:     %(_doc_callparams_note)s
1610: 
1611:     The scale matrix `scale` must be a symmetric positive definite
1612:     matrix. Singular matrices, including the symmetric positive semi-definite
1613:     case, are not supported.
1614: 
1615:     The Wishart distribution is often denoted
1616: 
1617:     .. math::
1618: 
1619:         W_p(\nu, \Sigma)
1620: 
1621:     where :math:`\nu` is the degrees of freedom and :math:`\Sigma` is the
1622:     :math:`p \times p` scale matrix.
1623: 
1624:     The probability density function for `wishart` has support over positive
1625:     definite matrices :math:`S`; if :math:`S \sim W_p(\nu, \Sigma)`, then
1626:     its PDF is given by:
1627: 
1628:     .. math::
1629: 
1630:         f(S) = \frac{|S|^{\frac{\nu - p - 1}{2}}}{2^{ \frac{\nu p}{2} }
1631:                |\Sigma|^\frac{\nu}{2} \Gamma_p \left ( \frac{\nu}{2} \right )}
1632:                \exp\left( -tr(\Sigma^{-1} S) / 2 \right)
1633: 
1634:     If :math:`S \sim W_p(\nu, \Sigma)` (Wishart) then
1635:     :math:`S^{-1} \sim W_p^{-1}(\nu, \Sigma^{-1})` (inverse Wishart).
1636: 
1637:     If the scale matrix is 1-dimensional and equal to one, then the Wishart
1638:     distribution :math:`W_1(\nu, 1)` collapses to the :math:`\chi^2(\nu)`
1639:     distribution.
1640: 
1641:     .. versionadded:: 0.16.0
1642: 
1643:     References
1644:     ----------
1645:     .. [1] M.L. Eaton, "Multivariate Statistics: A Vector Space Approach",
1646:            Wiley, 1983.
1647:     .. [2] W.B. Smith and R.R. Hocking, "Algorithm AS 53: Wishart Variate
1648:            Generator", Applied Statistics, vol. 21, pp. 341-345, 1972.
1649: 
1650:     Examples
1651:     --------
1652:     >>> import matplotlib.pyplot as plt
1653:     >>> from scipy.stats import wishart, chi2
1654:     >>> x = np.linspace(1e-5, 8, 100)
1655:     >>> w = wishart.pdf(x, df=3, scale=1); w[:5]
1656:     array([ 0.00126156,  0.10892176,  0.14793434,  0.17400548,  0.1929669 ])
1657:     >>> c = chi2.pdf(x, 3); c[:5]
1658:     array([ 0.00126156,  0.10892176,  0.14793434,  0.17400548,  0.1929669 ])
1659:     >>> plt.plot(x, w)
1660: 
1661:     The input quantiles can be any shape of array, as long as the last
1662:     axis labels the components.
1663: 
1664:     '''
1665: 
1666:     def __init__(self, seed=None):
1667:         super(wishart_gen, self).__init__(seed)
1668:         self.__doc__ = doccer.docformat(self.__doc__, wishart_docdict_params)
1669: 
1670:     def __call__(self, df=None, scale=None, seed=None):
1671:         '''
1672:         Create a frozen Wishart distribution.
1673: 
1674:         See `wishart_frozen` for more information.
1675: 
1676:         '''
1677:         return wishart_frozen(df, scale, seed)
1678: 
1679:     def _process_parameters(self, df, scale):
1680:         if scale is None:
1681:             scale = 1.0
1682:         scale = np.asarray(scale, dtype=float)
1683: 
1684:         if scale.ndim == 0:
1685:             scale = scale[np.newaxis,np.newaxis]
1686:         elif scale.ndim == 1:
1687:             scale = np.diag(scale)
1688:         elif scale.ndim == 2 and not scale.shape[0] == scale.shape[1]:
1689:             raise ValueError("Array 'scale' must be square if it is two"
1690:                              " dimensional, but scale.scale = %s."
1691:                              % str(scale.shape))
1692:         elif scale.ndim > 2:
1693:             raise ValueError("Array 'scale' must be at most two-dimensional,"
1694:                              " but scale.ndim = %d" % scale.ndim)
1695: 
1696:         dim = scale.shape[0]
1697: 
1698:         if df is None:
1699:             df = dim
1700:         elif not np.isscalar(df):
1701:             raise ValueError("Degrees of freedom must be a scalar.")
1702:         elif df < dim:
1703:             raise ValueError("Degrees of freedom cannot be less than dimension"
1704:                              " of scale matrix, but df = %d" % df)
1705: 
1706:         return dim, df, scale
1707: 
1708:     def _process_quantiles(self, x, dim):
1709:         '''
1710:         Adjust quantiles array so that last axis labels the components of
1711:         each data point.
1712:         '''
1713:         x = np.asarray(x, dtype=float)
1714: 
1715:         if x.ndim == 0:
1716:             x = x * np.eye(dim)[:, :, np.newaxis]
1717:         if x.ndim == 1:
1718:             if dim == 1:
1719:                 x = x[np.newaxis, np.newaxis, :]
1720:             else:
1721:                 x = np.diag(x)[:, :, np.newaxis]
1722:         elif x.ndim == 2:
1723:             if not x.shape[0] == x.shape[1]:
1724:                 raise ValueError("Quantiles must be square if they are two"
1725:                                  " dimensional, but x.shape = %s."
1726:                                  % str(x.shape))
1727:             x = x[:, :, np.newaxis]
1728:         elif x.ndim == 3:
1729:             if not x.shape[0] == x.shape[1]:
1730:                 raise ValueError("Quantiles must be square in the first two"
1731:                                  " dimensions if they are three dimensional"
1732:                                  ", but x.shape = %s." % str(x.shape))
1733:         elif x.ndim > 3:
1734:             raise ValueError("Quantiles must be at most two-dimensional with"
1735:                              " an additional dimension for multiple"
1736:                              "components, but x.ndim = %d" % x.ndim)
1737: 
1738:         # Now we have 3-dim array; should have shape [dim, dim, *]
1739:         if not x.shape[0:2] == (dim, dim):
1740:             raise ValueError('Quantiles have incompatible dimensions: should'
1741:                              ' be %s, got %s.' % ((dim, dim), x.shape[0:2]))
1742: 
1743:         return x
1744: 
1745:     def _process_size(self, size):
1746:         size = np.asarray(size)
1747: 
1748:         if size.ndim == 0:
1749:             size = size[np.newaxis]
1750:         elif size.ndim > 1:
1751:             raise ValueError('Size must be an integer or tuple of integers;'
1752:                              ' thus must have dimension <= 1.'
1753:                              ' Got size.ndim = %s' % str(tuple(size)))
1754:         n = size.prod()
1755:         shape = tuple(size)
1756: 
1757:         return n, shape
1758: 
1759:     def _logpdf(self, x, dim, df, scale, log_det_scale, C):
1760:         '''
1761:         Parameters
1762:         ----------
1763:         x : ndarray
1764:             Points at which to evaluate the log of the probability
1765:             density function
1766:         dim : int
1767:             Dimension of the scale matrix
1768:         df : int
1769:             Degrees of freedom
1770:         scale : ndarray
1771:             Scale matrix
1772:         log_det_scale : float
1773:             Logarithm of the determinant of the scale matrix
1774:         C : ndarray
1775:             Cholesky factorization of the scale matrix, lower triagular.
1776: 
1777:         Notes
1778:         -----
1779:         As this function does no argument checking, it should not be
1780:         called directly; use 'logpdf' instead.
1781: 
1782:         '''
1783:         # log determinant of x
1784:         # Note: x has components along the last axis, so that x.T has
1785:         # components alone the 0-th axis. Then since det(A) = det(A'), this
1786:         # gives us a 1-dim vector of determinants
1787: 
1788:         # Retrieve tr(scale^{-1} x)
1789:         log_det_x = np.zeros(x.shape[-1])
1790:         scale_inv_x = np.zeros(x.shape)
1791:         tr_scale_inv_x = np.zeros(x.shape[-1])
1792:         for i in range(x.shape[-1]):
1793:             _, log_det_x[i] = self._cholesky_logdet(x[:,:,i])
1794:             scale_inv_x[:,:,i] = scipy.linalg.cho_solve((C, True), x[:,:,i])
1795:             tr_scale_inv_x[i] = scale_inv_x[:,:,i].trace()
1796: 
1797:         # Log PDF
1798:         out = ((0.5 * (df - dim - 1) * log_det_x - 0.5 * tr_scale_inv_x) -
1799:                (0.5 * df * dim * _LOG_2 + 0.5 * df * log_det_scale +
1800:                 multigammaln(0.5*df, dim)))
1801: 
1802:         return out
1803: 
1804:     def logpdf(self, x, df, scale):
1805:         '''
1806:         Log of the Wishart probability density function.
1807: 
1808:         Parameters
1809:         ----------
1810:         x : array_like
1811:             Quantiles, with the last axis of `x` denoting the components.
1812:             Each quantile must be a symmetric positive definite matrix.
1813:         %(_doc_default_callparams)s
1814: 
1815:         Returns
1816:         -------
1817:         pdf : ndarray
1818:             Log of the probability density function evaluated at `x`
1819: 
1820:         Notes
1821:         -----
1822:         %(_doc_callparams_note)s
1823: 
1824:         '''
1825:         dim, df, scale = self._process_parameters(df, scale)
1826:         x = self._process_quantiles(x, dim)
1827: 
1828:         # Cholesky decomposition of scale, get log(det(scale))
1829:         C, log_det_scale = self._cholesky_logdet(scale)
1830: 
1831:         out = self._logpdf(x, dim, df, scale, log_det_scale, C)
1832:         return _squeeze_output(out)
1833: 
1834:     def pdf(self, x, df, scale):
1835:         '''
1836:         Wishart probability density function.
1837: 
1838:         Parameters
1839:         ----------
1840:         x : array_like
1841:             Quantiles, with the last axis of `x` denoting the components.
1842:             Each quantile must be a symmetric positive definite matrix.
1843:         %(_doc_default_callparams)s
1844: 
1845:         Returns
1846:         -------
1847:         pdf : ndarray
1848:             Probability density function evaluated at `x`
1849: 
1850:         Notes
1851:         -----
1852:         %(_doc_callparams_note)s
1853: 
1854:         '''
1855:         return np.exp(self.logpdf(x, df, scale))
1856: 
1857:     def _mean(self, dim, df, scale):
1858:         '''
1859:         Parameters
1860:         ----------
1861:         dim : int
1862:             Dimension of the scale matrix
1863:         %(_doc_default_callparams)s
1864: 
1865:         Notes
1866:         -----
1867:         As this function does no argument checking, it should not be
1868:         called directly; use 'mean' instead.
1869: 
1870:         '''
1871:         return df * scale
1872: 
1873:     def mean(self, df, scale):
1874:         '''
1875:         Mean of the Wishart distribution
1876: 
1877:         Parameters
1878:         ----------
1879:         %(_doc_default_callparams)s
1880: 
1881:         Returns
1882:         -------
1883:         mean : float
1884:             The mean of the distribution
1885:         '''
1886:         dim, df, scale = self._process_parameters(df, scale)
1887:         out = self._mean(dim, df, scale)
1888:         return _squeeze_output(out)
1889: 
1890:     def _mode(self, dim, df, scale):
1891:         '''
1892:         Parameters
1893:         ----------
1894:         dim : int
1895:             Dimension of the scale matrix
1896:         %(_doc_default_callparams)s
1897: 
1898:         Notes
1899:         -----
1900:         As this function does no argument checking, it should not be
1901:         called directly; use 'mode' instead.
1902: 
1903:         '''
1904:         if df >= dim + 1:
1905:             out = (df-dim-1) * scale
1906:         else:
1907:             out = None
1908:         return out
1909: 
1910:     def mode(self, df, scale):
1911:         '''
1912:         Mode of the Wishart distribution
1913: 
1914:         Only valid if the degrees of freedom are greater than the dimension of
1915:         the scale matrix.
1916: 
1917:         Parameters
1918:         ----------
1919:         %(_doc_default_callparams)s
1920: 
1921:         Returns
1922:         -------
1923:         mode : float or None
1924:             The Mode of the distribution
1925:         '''
1926:         dim, df, scale = self._process_parameters(df, scale)
1927:         out = self._mode(dim, df, scale)
1928:         return _squeeze_output(out) if out is not None else out
1929: 
1930:     def _var(self, dim, df, scale):
1931:         '''
1932:         Parameters
1933:         ----------
1934:         dim : int
1935:             Dimension of the scale matrix
1936:         %(_doc_default_callparams)s
1937: 
1938:         Notes
1939:         -----
1940:         As this function does no argument checking, it should not be
1941:         called directly; use 'var' instead.
1942: 
1943:         '''
1944:         var = scale**2
1945:         diag = scale.diagonal()  # 1 x dim array
1946:         var += np.outer(diag, diag)
1947:         var *= df
1948:         return var
1949: 
1950:     def var(self, df, scale):
1951:         '''
1952:         Variance of the Wishart distribution
1953: 
1954:         Parameters
1955:         ----------
1956:         %(_doc_default_callparams)s
1957: 
1958:         Returns
1959:         -------
1960:         var : float
1961:             The variance of the distribution
1962:         '''
1963:         dim, df, scale = self._process_parameters(df, scale)
1964:         out = self._var(dim, df, scale)
1965:         return _squeeze_output(out)
1966: 
1967:     def _standard_rvs(self, n, shape, dim, df, random_state):
1968:         '''
1969:         Parameters
1970:         ----------
1971:         n : integer
1972:             Number of variates to generate
1973:         shape : iterable
1974:             Shape of the variates to generate
1975:         dim : int
1976:             Dimension of the scale matrix
1977:         df : int
1978:             Degrees of freedom
1979:         random_state : np.random.RandomState instance
1980:             RandomState used for drawing the random variates.
1981: 
1982:         Notes
1983:         -----
1984:         As this function does no argument checking, it should not be
1985:         called directly; use 'rvs' instead.
1986: 
1987:         '''
1988:         # Random normal variates for off-diagonal elements
1989:         n_tril = dim * (dim-1) // 2
1990:         covariances = random_state.normal(
1991:             size=n*n_tril).reshape(shape+(n_tril,))
1992: 
1993:         # Random chi-square variates for diagonal elements
1994:         variances = np.r_[[random_state.chisquare(df-(i+1)+1, size=n)**0.5
1995:              for i in range(dim)]].reshape((dim,) + shape[::-1]).T
1996: 
1997:         # Create the A matri(ces) - lower triangular
1998:         A = np.zeros(shape + (dim, dim))
1999: 
2000:         # Input the covariances
2001:         size_idx = tuple([slice(None,None,None)]*len(shape))
2002:         tril_idx = np.tril_indices(dim, k=-1)
2003:         A[size_idx + tril_idx] = covariances
2004: 
2005:         # Input the variances
2006:         diag_idx = np.diag_indices(dim)
2007:         A[size_idx + diag_idx] = variances
2008: 
2009:         return A
2010: 
2011:     def _rvs(self, n, shape, dim, df, C, random_state):
2012:         '''
2013:         Parameters
2014:         ----------
2015:         n : integer
2016:             Number of variates to generate
2017:         shape : iterable
2018:             Shape of the variates to generate
2019:         dim : int
2020:             Dimension of the scale matrix
2021:         df : int
2022:             Degrees of freedom
2023:         scale : ndarray
2024:             Scale matrix
2025:         C : ndarray
2026:             Cholesky factorization of the scale matrix, lower triangular.
2027:         %(_doc_random_state)s
2028: 
2029:         Notes
2030:         -----
2031:         As this function does no argument checking, it should not be
2032:         called directly; use 'rvs' instead.
2033: 
2034:         '''
2035:         random_state = self._get_random_state(random_state)
2036:         # Calculate the matrices A, which are actually lower triangular
2037:         # Cholesky factorizations of a matrix B such that B ~ W(df, I)
2038:         A = self._standard_rvs(n, shape, dim, df, random_state)
2039: 
2040:         # Calculate SA = C A A' C', where SA ~ W(df, scale)
2041:         # Note: this is the product of a (lower) (lower) (lower)' (lower)'
2042:         #       or, denoting B = AA', it is C B C' where C is the lower
2043:         #       triangular Cholesky factorization of the scale matrix.
2044:         #       this appears to conflict with the instructions in [1]_, which
2045:         #       suggest that it should be D' B D where D is the lower
2046:         #       triangular factorization of the scale matrix. However, it is
2047:         #       meant to refer to the Bartlett (1933) representation of a
2048:         #       Wishart random variate as L A A' L' where L is lower triangular
2049:         #       so it appears that understanding D' to be upper triangular
2050:         #       is either a typo in or misreading of [1]_.
2051:         for index in np.ndindex(shape):
2052:             CA = np.dot(C, A[index])
2053:             A[index] = np.dot(CA, CA.T)
2054: 
2055:         return A
2056: 
2057:     def rvs(self, df, scale, size=1, random_state=None):
2058:         '''
2059:         Draw random samples from a Wishart distribution.
2060: 
2061:         Parameters
2062:         ----------
2063:         %(_doc_default_callparams)s
2064:         size : integer or iterable of integers, optional
2065:             Number of samples to draw (default 1).
2066:         %(_doc_random_state)s
2067: 
2068:         Returns
2069:         -------
2070:         rvs : ndarray
2071:             Random variates of shape (`size`) + (`dim`, `dim), where `dim` is
2072:             the dimension of the scale matrix.
2073: 
2074:         Notes
2075:         -----
2076:         %(_doc_callparams_note)s
2077: 
2078:         '''
2079:         n, shape = self._process_size(size)
2080:         dim, df, scale = self._process_parameters(df, scale)
2081: 
2082:         # Cholesky decomposition of scale
2083:         C = scipy.linalg.cholesky(scale, lower=True)
2084: 
2085:         out = self._rvs(n, shape, dim, df, C, random_state)
2086: 
2087:         return _squeeze_output(out)
2088: 
2089:     def _entropy(self, dim, df, log_det_scale):
2090:         '''
2091:         Parameters
2092:         ----------
2093:         dim : int
2094:             Dimension of the scale matrix
2095:         df : int
2096:             Degrees of freedom
2097:         log_det_scale : float
2098:             Logarithm of the determinant of the scale matrix
2099: 
2100:         Notes
2101:         -----
2102:         As this function does no argument checking, it should not be
2103:         called directly; use 'entropy' instead.
2104: 
2105:         '''
2106:         return (
2107:             0.5 * (dim+1) * log_det_scale +
2108:             0.5 * dim * (dim+1) * _LOG_2 +
2109:             multigammaln(0.5*df, dim) -
2110:             0.5 * (df - dim - 1) * np.sum(
2111:                 [psi(0.5*(df + 1 - (i+1))) for i in range(dim)]
2112:             ) +
2113:             0.5 * df * dim
2114:         )
2115: 
2116:     def entropy(self, df, scale):
2117:         '''
2118:         Compute the differential entropy of the Wishart.
2119: 
2120:         Parameters
2121:         ----------
2122:         %(_doc_default_callparams)s
2123: 
2124:         Returns
2125:         -------
2126:         h : scalar
2127:             Entropy of the Wishart distribution
2128: 
2129:         Notes
2130:         -----
2131:         %(_doc_callparams_note)s
2132: 
2133:         '''
2134:         dim, df, scale = self._process_parameters(df, scale)
2135:         _, log_det_scale = self._cholesky_logdet(scale)
2136:         return self._entropy(dim, df, log_det_scale)
2137: 
2138:     def _cholesky_logdet(self, scale):
2139:         '''
2140:         Compute Cholesky decomposition and determine (log(det(scale)).
2141: 
2142:         Parameters
2143:         ----------
2144:         scale : ndarray
2145:             Scale matrix.
2146: 
2147:         Returns
2148:         -------
2149:         c_decomp : ndarray
2150:             The Cholesky decomposition of `scale`.
2151:         logdet : scalar
2152:             The log of the determinant of `scale`.
2153: 
2154:         Notes
2155:         -----
2156:         This computation of ``logdet`` is equivalent to
2157:         ``np.linalg.slogdet(scale)``.  It is ~2x faster though.
2158: 
2159:         '''
2160:         c_decomp = scipy.linalg.cholesky(scale, lower=True)
2161:         logdet = 2 * np.sum(np.log(c_decomp.diagonal()))
2162:         return c_decomp, logdet
2163: wishart = wishart_gen()
2164: 
2165: 
2166: class wishart_frozen(multi_rv_frozen):
2167:     '''
2168:     Create a frozen Wishart distribution.
2169: 
2170:     Parameters
2171:     ----------
2172:     df : array_like
2173:         Degrees of freedom of the distribution
2174:     scale : array_like
2175:         Scale matrix of the distribution
2176:     seed : None or int or np.random.RandomState instance, optional
2177:         This parameter defines the RandomState object to use for drawing
2178:         random variates.
2179:         If None (or np.random), the global np.random state is used.
2180:         If integer, it is used to seed the local RandomState instance
2181:         Default is None.
2182: 
2183:     '''
2184:     def __init__(self, df, scale, seed=None):
2185:         self._dist = wishart_gen(seed)
2186:         self.dim, self.df, self.scale = self._dist._process_parameters(
2187:             df, scale)
2188:         self.C, self.log_det_scale = self._dist._cholesky_logdet(self.scale)
2189: 
2190:     def logpdf(self, x):
2191:         x = self._dist._process_quantiles(x, self.dim)
2192: 
2193:         out = self._dist._logpdf(x, self.dim, self.df, self.scale,
2194:                                  self.log_det_scale, self.C)
2195:         return _squeeze_output(out)
2196: 
2197:     def pdf(self, x):
2198:         return np.exp(self.logpdf(x))
2199: 
2200:     def mean(self):
2201:         out = self._dist._mean(self.dim, self.df, self.scale)
2202:         return _squeeze_output(out)
2203: 
2204:     def mode(self):
2205:         out = self._dist._mode(self.dim, self.df, self.scale)
2206:         return _squeeze_output(out) if out is not None else out
2207: 
2208:     def var(self):
2209:         out = self._dist._var(self.dim, self.df, self.scale)
2210:         return _squeeze_output(out)
2211: 
2212:     def rvs(self, size=1, random_state=None):
2213:         n, shape = self._dist._process_size(size)
2214:         out = self._dist._rvs(n, shape, self.dim, self.df,
2215:                               self.C, random_state)
2216:         return _squeeze_output(out)
2217: 
2218:     def entropy(self):
2219:         return self._dist._entropy(self.dim, self.df, self.log_det_scale)
2220: 
2221: # Set frozen generator docstrings from corresponding docstrings in
2222: # Wishart and fill in default strings in class docstrings
2223: for name in ['logpdf', 'pdf', 'mean', 'mode', 'var', 'rvs', 'entropy']:
2224:     method = wishart_gen.__dict__[name]
2225:     method_frozen = wishart_frozen.__dict__[name]
2226:     method_frozen.__doc__ = doccer.docformat(
2227:         method.__doc__, wishart_docdict_noparams)
2228:     method.__doc__ = doccer.docformat(method.__doc__, wishart_docdict_params)
2229: 
2230: 
2231: from numpy import asarray_chkfinite, asarray
2232: from scipy.linalg.misc import LinAlgError
2233: from scipy.linalg.lapack import get_lapack_funcs
2234: def _cho_inv_batch(a, check_finite=True):
2235:     '''
2236:     Invert the matrices a_i, using a Cholesky factorization of A, where
2237:     a_i resides in the last two dimensions of a and the other indices describe
2238:     the index i.
2239: 
2240:     Overwrites the data in a.
2241: 
2242:     Parameters
2243:     ----------
2244:     a : array
2245:         Array of matrices to invert, where the matrices themselves are stored
2246:         in the last two dimensions.
2247:     check_finite : bool, optional
2248:         Whether to check that the input matrices contain only finite numbers.
2249:         Disabling may give a performance gain, but may result in problems
2250:         (crashes, non-termination) if the inputs do contain infinities or NaNs.
2251: 
2252:     Returns
2253:     -------
2254:     x : array
2255:         Array of inverses of the matrices ``a_i``.
2256: 
2257:     See also
2258:     --------
2259:     scipy.linalg.cholesky : Cholesky factorization of a matrix
2260: 
2261:     '''
2262:     if check_finite:
2263:         a1 = asarray_chkfinite(a)
2264:     else:
2265:         a1 = asarray(a)
2266:     if len(a1.shape) < 2 or a1.shape[-2] != a1.shape[-1]:
2267:         raise ValueError('expected square matrix in last two dimensions')
2268: 
2269:     potrf, potri = get_lapack_funcs(('potrf','potri'), (a1,))
2270: 
2271:     tril_idx = np.tril_indices(a.shape[-2], k=-1)
2272:     triu_idx = np.triu_indices(a.shape[-2], k=1)
2273:     for index in np.ndindex(a1.shape[:-2]):
2274: 
2275:         # Cholesky decomposition
2276:         a1[index], info = potrf(a1[index], lower=True, overwrite_a=False,
2277:                                 clean=False)
2278:         if info > 0:
2279:             raise LinAlgError("%d-th leading minor not positive definite"
2280:                               % info)
2281:         if info < 0:
2282:             raise ValueError('illegal value in %d-th argument of internal'
2283:                              ' potrf' % -info)
2284:         # Inversion
2285:         a1[index], info = potri(a1[index], lower=True, overwrite_c=False)
2286:         if info > 0:
2287:             raise LinAlgError("the inverse could not be computed")
2288:         if info < 0:
2289:             raise ValueError('illegal value in %d-th argument of internal'
2290:                              ' potrf' % -info)
2291: 
2292:         # Make symmetric (dpotri only fills in the lower triangle)
2293:         a1[index][triu_idx] = a1[index][tril_idx]
2294: 
2295:     return a1
2296: 
2297: 
2298: class invwishart_gen(wishart_gen):
2299:     r'''
2300:     An inverse Wishart random variable.
2301: 
2302:     The `df` keyword specifies the degrees of freedom. The `scale` keyword
2303:     specifies the scale matrix, which must be symmetric and positive definite.
2304:     In this context, the scale matrix is often interpreted in terms of a
2305:     multivariate normal covariance matrix.
2306: 
2307:     Methods
2308:     -------
2309:     ``pdf(x, df, scale)``
2310:         Probability density function.
2311:     ``logpdf(x, df, scale)``
2312:         Log of the probability density function.
2313:     ``rvs(df, scale, size=1, random_state=None)``
2314:         Draw random samples from an inverse Wishart distribution.
2315: 
2316:     Parameters
2317:     ----------
2318:     x : array_like
2319:         Quantiles, with the last axis of `x` denoting the components.
2320:     %(_doc_default_callparams)s
2321:     %(_doc_random_state)s
2322: 
2323:     Alternatively, the object may be called (as a function) to fix the degrees
2324:     of freedom and scale parameters, returning a "frozen" inverse Wishart
2325:     random variable:
2326: 
2327:     rv = invwishart(df=1, scale=1)
2328:         - Frozen object with the same methods but holding the given
2329:           degrees of freedom and scale fixed.
2330: 
2331:     See Also
2332:     --------
2333:     wishart
2334: 
2335:     Notes
2336:     -----
2337:     %(_doc_callparams_note)s
2338: 
2339:     The scale matrix `scale` must be a symmetric positive definite
2340:     matrix. Singular matrices, including the symmetric positive semi-definite
2341:     case, are not supported.
2342: 
2343:     The inverse Wishart distribution is often denoted
2344: 
2345:     .. math::
2346: 
2347:         W_p^{-1}(\nu, \Psi)
2348: 
2349:     where :math:`\nu` is the degrees of freedom and :math:`\Psi` is the
2350:     :math:`p \times p` scale matrix.
2351: 
2352:     The probability density function for `invwishart` has support over positive
2353:     definite matrices :math:`S`; if :math:`S \sim W^{-1}_p(\nu, \Sigma)`,
2354:     then its PDF is given by:
2355: 
2356:     .. math::
2357: 
2358:         f(S) = \frac{|\Sigma|^\frac{\nu}{2}}{2^{ \frac{\nu p}{2} }
2359:                |S|^{\frac{\nu + p + 1}{2}} \Gamma_p \left(\frac{\nu}{2} \right)}
2360:                \exp\left( -tr(\Sigma S^{-1}) / 2 \right)
2361: 
2362:     If :math:`S \sim W_p^{-1}(\nu, \Psi)` (inverse Wishart) then
2363:     :math:`S^{-1} \sim W_p(\nu, \Psi^{-1})` (Wishart).
2364: 
2365:     If the scale matrix is 1-dimensional and equal to one, then the inverse
2366:     Wishart distribution :math:`W_1(\nu, 1)` collapses to the
2367:     inverse Gamma distribution with parameters shape = :math:`\frac{\nu}{2}`
2368:     and scale = :math:`\frac{1}{2}`.
2369: 
2370:     .. versionadded:: 0.16.0
2371: 
2372:     References
2373:     ----------
2374:     .. [1] M.L. Eaton, "Multivariate Statistics: A Vector Space Approach",
2375:            Wiley, 1983.
2376:     .. [2] M.C. Jones, "Generating Inverse Wishart Matrices", Communications in
2377:            Statistics - Simulation and Computation, vol. 14.2, pp.511-514, 1985.
2378: 
2379:     Examples
2380:     --------
2381:     >>> import matplotlib.pyplot as plt
2382:     >>> from scipy.stats import invwishart, invgamma
2383:     >>> x = np.linspace(0.01, 1, 100)
2384:     >>> iw = invwishart.pdf(x, df=6, scale=1)
2385:     >>> iw[:3]
2386:     array([  1.20546865e-15,   5.42497807e-06,   4.45813929e-03])
2387:     >>> ig = invgamma.pdf(x, 6/2., scale=1./2)
2388:     >>> ig[:3]
2389:     array([  1.20546865e-15,   5.42497807e-06,   4.45813929e-03])
2390:     >>> plt.plot(x, iw)
2391: 
2392:     The input quantiles can be any shape of array, as long as the last
2393:     axis labels the components.
2394: 
2395:     '''
2396: 
2397:     def __init__(self, seed=None):
2398:         super(invwishart_gen, self).__init__(seed)
2399:         self.__doc__ = doccer.docformat(self.__doc__, wishart_docdict_params)
2400: 
2401:     def __call__(self, df=None, scale=None, seed=None):
2402:         '''
2403:         Create a frozen inverse Wishart distribution.
2404: 
2405:         See `invwishart_frozen` for more information.
2406: 
2407:         '''
2408:         return invwishart_frozen(df, scale, seed)
2409: 
2410:     def _logpdf(self, x, dim, df, scale, log_det_scale):
2411:         '''
2412:         Parameters
2413:         ----------
2414:         x : ndarray
2415:             Points at which to evaluate the log of the probability
2416:             density function.
2417:         dim : int
2418:             Dimension of the scale matrix
2419:         df : int
2420:             Degrees of freedom
2421:         scale : ndarray
2422:             Scale matrix
2423:         log_det_scale : float
2424:             Logarithm of the determinant of the scale matrix
2425: 
2426:         Notes
2427:         -----
2428:         As this function does no argument checking, it should not be
2429:         called directly; use 'logpdf' instead.
2430: 
2431:         '''
2432:         log_det_x = np.zeros(x.shape[-1])
2433:         #scale_x_inv = np.zeros(x.shape)
2434:         x_inv = np.copy(x).T
2435:         if dim > 1:
2436:             _cho_inv_batch(x_inv)  # works in-place
2437:         else:
2438:             x_inv = 1./x_inv
2439:         tr_scale_x_inv = np.zeros(x.shape[-1])
2440: 
2441:         for i in range(x.shape[-1]):
2442:             C, lower = scipy.linalg.cho_factor(x[:,:,i], lower=True)
2443: 
2444:             log_det_x[i] = 2 * np.sum(np.log(C.diagonal()))
2445: 
2446:             #scale_x_inv[:,:,i] = scipy.linalg.cho_solve((C, True), scale).T
2447:             tr_scale_x_inv[i] = np.dot(scale, x_inv[i]).trace()
2448: 
2449:         # Log PDF
2450:         out = ((0.5 * df * log_det_scale - 0.5 * tr_scale_x_inv) -
2451:                (0.5 * df * dim * _LOG_2 + 0.5 * (df + dim + 1) * log_det_x) -
2452:                multigammaln(0.5*df, dim))
2453: 
2454:         return out
2455: 
2456:     def logpdf(self, x, df, scale):
2457:         '''
2458:         Log of the inverse Wishart probability density function.
2459: 
2460:         Parameters
2461:         ----------
2462:         x : array_like
2463:             Quantiles, with the last axis of `x` denoting the components.
2464:             Each quantile must be a symmetric positive definite matrix.
2465:         %(_doc_default_callparams)s
2466: 
2467:         Returns
2468:         -------
2469:         pdf : ndarray
2470:             Log of the probability density function evaluated at `x`
2471: 
2472:         Notes
2473:         -----
2474:         %(_doc_callparams_note)s
2475: 
2476:         '''
2477:         dim, df, scale = self._process_parameters(df, scale)
2478:         x = self._process_quantiles(x, dim)
2479:         _, log_det_scale = self._cholesky_logdet(scale)
2480:         out = self._logpdf(x, dim, df, scale, log_det_scale)
2481:         return _squeeze_output(out)
2482: 
2483:     def pdf(self, x, df, scale):
2484:         '''
2485:         Inverse Wishart probability density function.
2486: 
2487:         Parameters
2488:         ----------
2489:         x : array_like
2490:             Quantiles, with the last axis of `x` denoting the components.
2491:             Each quantile must be a symmetric positive definite matrix.
2492: 
2493:         %(_doc_default_callparams)s
2494: 
2495:         Returns
2496:         -------
2497:         pdf : ndarray
2498:             Probability density function evaluated at `x`
2499: 
2500:         Notes
2501:         -----
2502:         %(_doc_callparams_note)s
2503: 
2504:         '''
2505:         return np.exp(self.logpdf(x, df, scale))
2506: 
2507:     def _mean(self, dim, df, scale):
2508:         '''
2509:         Parameters
2510:         ----------
2511:         dim : int
2512:             Dimension of the scale matrix
2513:         %(_doc_default_callparams)s
2514: 
2515:         Notes
2516:         -----
2517:         As this function does no argument checking, it should not be
2518:         called directly; use 'mean' instead.
2519: 
2520:         '''
2521:         if df > dim + 1:
2522:             out = scale / (df - dim - 1)
2523:         else:
2524:             out = None
2525:         return out
2526: 
2527:     def mean(self, df, scale):
2528:         '''
2529:         Mean of the inverse Wishart distribution
2530: 
2531:         Only valid if the degrees of freedom are greater than the dimension of
2532:         the scale matrix plus one.
2533: 
2534:         Parameters
2535:         ----------
2536:         %(_doc_default_callparams)s
2537: 
2538:         Returns
2539:         -------
2540:         mean : float or None
2541:             The mean of the distribution
2542: 
2543:         '''
2544:         dim, df, scale = self._process_parameters(df, scale)
2545:         out = self._mean(dim, df, scale)
2546:         return _squeeze_output(out) if out is not None else out
2547: 
2548:     def _mode(self, dim, df, scale):
2549:         '''
2550:         Parameters
2551:         ----------
2552:         dim : int
2553:             Dimension of the scale matrix
2554:         %(_doc_default_callparams)s
2555: 
2556:         Notes
2557:         -----
2558:         As this function does no argument checking, it should not be
2559:         called directly; use 'mode' instead.
2560: 
2561:         '''
2562:         return scale / (df + dim + 1)
2563: 
2564:     def mode(self, df, scale):
2565:         '''
2566:         Mode of the inverse Wishart distribution
2567: 
2568:         Parameters
2569:         ----------
2570:         %(_doc_default_callparams)s
2571: 
2572:         Returns
2573:         -------
2574:         mode : float
2575:             The Mode of the distribution
2576: 
2577:         '''
2578:         dim, df, scale = self._process_parameters(df, scale)
2579:         out = self._mode(dim, df, scale)
2580:         return _squeeze_output(out)
2581: 
2582:     def _var(self, dim, df, scale):
2583:         '''
2584:         Parameters
2585:         ----------
2586:         dim : int
2587:             Dimension of the scale matrix
2588:         %(_doc_default_callparams)s
2589: 
2590:         Notes
2591:         -----
2592:         As this function does no argument checking, it should not be
2593:         called directly; use 'var' instead.
2594: 
2595:         '''
2596:         if df > dim + 3:
2597:             var = (df - dim + 1) * scale**2
2598:             diag = scale.diagonal()  # 1 x dim array
2599:             var += (df - dim - 1) * np.outer(diag, diag)
2600:             var /= (df - dim) * (df - dim - 1)**2 * (df - dim - 3)
2601:         else:
2602:             var = None
2603:         return var
2604: 
2605:     def var(self, df, scale):
2606:         '''
2607:         Variance of the inverse Wishart distribution
2608: 
2609:         Only valid if the degrees of freedom are greater than the dimension of
2610:         the scale matrix plus three.
2611: 
2612:         Parameters
2613:         ----------
2614:         %(_doc_default_callparams)s
2615: 
2616:         Returns
2617:         -------
2618:         var : float
2619:             The variance of the distribution
2620:         '''
2621:         dim, df, scale = self._process_parameters(df, scale)
2622:         out = self._var(dim, df, scale)
2623:         return _squeeze_output(out) if out is not None else out
2624: 
2625:     def _rvs(self, n, shape, dim, df, C, random_state):
2626:         '''
2627:         Parameters
2628:         ----------
2629:         n : integer
2630:             Number of variates to generate
2631:         shape : iterable
2632:             Shape of the variates to generate
2633:         dim : int
2634:             Dimension of the scale matrix
2635:         df : int
2636:             Degrees of freedom
2637:         C : ndarray
2638:             Cholesky factorization of the scale matrix, lower triagular.
2639:         %(_doc_random_state)s
2640: 
2641:         Notes
2642:         -----
2643:         As this function does no argument checking, it should not be
2644:         called directly; use 'rvs' instead.
2645: 
2646:         '''
2647:         random_state = self._get_random_state(random_state)
2648:         # Get random draws A such that A ~ W(df, I)
2649:         A = super(invwishart_gen, self)._standard_rvs(n, shape, dim,
2650:                                                       df, random_state)
2651: 
2652:         # Calculate SA = (CA)'^{-1} (CA)^{-1} ~ iW(df, scale)
2653:         eye = np.eye(dim)
2654:         trtrs = get_lapack_funcs(('trtrs'), (A,))
2655: 
2656:         for index in np.ndindex(A.shape[:-2]):
2657:             # Calculate CA
2658:             CA = np.dot(C, A[index])
2659:             # Get (C A)^{-1} via triangular solver
2660:             if dim > 1:
2661:                 CA, info = trtrs(CA, eye, lower=True)
2662:                 if info > 0:
2663:                     raise LinAlgError("Singular matrix.")
2664:                 if info < 0:
2665:                     raise ValueError('Illegal value in %d-th argument of'
2666:                                      ' internal trtrs' % -info)
2667:             else:
2668:                 CA = 1. / CA
2669:             # Get SA
2670:             A[index] = np.dot(CA.T, CA)
2671: 
2672:         return A
2673: 
2674:     def rvs(self, df, scale, size=1, random_state=None):
2675:         '''
2676:         Draw random samples from an inverse Wishart distribution.
2677: 
2678:         Parameters
2679:         ----------
2680:         %(_doc_default_callparams)s
2681:         size : integer or iterable of integers, optional
2682:             Number of samples to draw (default 1).
2683:         %(_doc_random_state)s
2684: 
2685:         Returns
2686:         -------
2687:         rvs : ndarray
2688:             Random variates of shape (`size`) + (`dim`, `dim), where `dim` is
2689:             the dimension of the scale matrix.
2690: 
2691:         Notes
2692:         -----
2693:         %(_doc_callparams_note)s
2694: 
2695:         '''
2696:         n, shape = self._process_size(size)
2697:         dim, df, scale = self._process_parameters(df, scale)
2698: 
2699:         # Invert the scale
2700:         eye = np.eye(dim)
2701:         L, lower = scipy.linalg.cho_factor(scale, lower=True)
2702:         inv_scale = scipy.linalg.cho_solve((L, lower), eye)
2703:         # Cholesky decomposition of inverted scale
2704:         C = scipy.linalg.cholesky(inv_scale, lower=True)
2705: 
2706:         out = self._rvs(n, shape, dim, df, C, random_state)
2707: 
2708:         return _squeeze_output(out)
2709: 
2710:     def entropy(self):
2711:         # Need to find reference for inverse Wishart entropy
2712:         raise AttributeError
2713: 
2714: invwishart = invwishart_gen()
2715: 
2716: class invwishart_frozen(multi_rv_frozen):
2717:     def __init__(self, df, scale, seed=None):
2718:         '''
2719:         Create a frozen inverse Wishart distribution.
2720: 
2721:         Parameters
2722:         ----------
2723:         df : array_like
2724:             Degrees of freedom of the distribution
2725:         scale : array_like
2726:             Scale matrix of the distribution
2727:         seed : None or int or np.random.RandomState instance, optional
2728:             This parameter defines the RandomState object to use for drawing
2729:             random variates.
2730:             If None (or np.random), the global np.random state is used.
2731:             If integer, it is used to seed the local RandomState instance
2732:             Default is None.
2733: 
2734:         '''
2735:         self._dist = invwishart_gen(seed)
2736:         self.dim, self.df, self.scale = self._dist._process_parameters(
2737:             df, scale
2738:         )
2739: 
2740:         # Get the determinant via Cholesky factorization
2741:         C, lower = scipy.linalg.cho_factor(self.scale, lower=True)
2742:         self.log_det_scale = 2 * np.sum(np.log(C.diagonal()))
2743: 
2744:         # Get the inverse using the Cholesky factorization
2745:         eye = np.eye(self.dim)
2746:         self.inv_scale = scipy.linalg.cho_solve((C, lower), eye)
2747: 
2748:         # Get the Cholesky factorization of the inverse scale
2749:         self.C = scipy.linalg.cholesky(self.inv_scale, lower=True)
2750: 
2751:     def logpdf(self, x):
2752:         x = self._dist._process_quantiles(x, self.dim)
2753:         out = self._dist._logpdf(x, self.dim, self.df, self.scale,
2754:                                  self.log_det_scale)
2755:         return _squeeze_output(out)
2756: 
2757:     def pdf(self, x):
2758:         return np.exp(self.logpdf(x))
2759: 
2760:     def mean(self):
2761:         out = self._dist._mean(self.dim, self.df, self.scale)
2762:         return _squeeze_output(out) if out is not None else out
2763: 
2764:     def mode(self):
2765:         out = self._dist._mode(self.dim, self.df, self.scale)
2766:         return _squeeze_output(out)
2767: 
2768:     def var(self):
2769:         out = self._dist._var(self.dim, self.df, self.scale)
2770:         return _squeeze_output(out) if out is not None else out
2771: 
2772:     def rvs(self, size=1, random_state=None):
2773:         n, shape = self._dist._process_size(size)
2774: 
2775:         out = self._dist._rvs(n, shape, self.dim, self.df,
2776:                               self.C, random_state)
2777: 
2778:         return _squeeze_output(out)
2779: 
2780:     def entropy(self):
2781:         # Need to find reference for inverse Wishart entropy
2782:         raise AttributeError
2783: 
2784: # Set frozen generator docstrings from corresponding docstrings in
2785: # inverse Wishart and fill in default strings in class docstrings
2786: for name in ['logpdf', 'pdf', 'mean', 'mode', 'var', 'rvs']:
2787:     method = invwishart_gen.__dict__[name]
2788:     method_frozen = wishart_frozen.__dict__[name]
2789:     method_frozen.__doc__ = doccer.docformat(
2790:         method.__doc__, wishart_docdict_noparams)
2791:     method.__doc__ = doccer.docformat(method.__doc__, wishart_docdict_params)
2792: 
2793: _multinomial_doc_default_callparams = '''\
2794: n : int
2795:     Number of trials
2796: p : array_like
2797:     Probability of a trial falling into each category; should sum to 1
2798: '''
2799: 
2800: _multinomial_doc_callparams_note = \
2801: '''`n` should be a positive integer. Each element of `p` should be in the
2802: interval :math:`[0,1]` and the elements should sum to 1. If they do not sum to
2803: 1, the last element of the `p` array is not used and is replaced with the
2804: remaining probability left over from the earlier elements.
2805: '''
2806: 
2807: _multinomial_doc_frozen_callparams = ""
2808: 
2809: _multinomial_doc_frozen_callparams_note = \
2810:     '''See class definition for a detailed description of parameters.'''
2811: 
2812: multinomial_docdict_params = {
2813:     '_doc_default_callparams': _multinomial_doc_default_callparams,
2814:     '_doc_callparams_note': _multinomial_doc_callparams_note,
2815:     '_doc_random_state': _doc_random_state
2816: }
2817: 
2818: multinomial_docdict_noparams = {
2819:     '_doc_default_callparams': _multinomial_doc_frozen_callparams,
2820:     '_doc_callparams_note': _multinomial_doc_frozen_callparams_note,
2821:     '_doc_random_state': _doc_random_state
2822: }
2823: 
2824: class multinomial_gen(multi_rv_generic):
2825:     r'''
2826:     A multinomial random variable.
2827: 
2828:     Methods
2829:     -------
2830:     ``pmf(x, n, p)``
2831:         Probability mass function.
2832:     ``logpmf(x, n, p)``
2833:         Log of the probability mass function.
2834:     ``rvs(n, p, size=1, random_state=None)``
2835:         Draw random samples from a multinomial distribution.
2836:     ``entropy(n, p)``
2837:         Compute the entropy of the multinomial distribution.
2838:     ``cov(n, p)``
2839:         Compute the covariance matrix of the multinomial distribution.
2840: 
2841:     Parameters
2842:     ----------
2843:     x : array_like
2844:         Quantiles, with the last axis of `x` denoting the components.
2845:     %(_doc_default_callparams)s
2846:     %(_doc_random_state)s
2847: 
2848:     Notes
2849:     -----
2850:     %(_doc_callparams_note)s
2851: 
2852:     Alternatively, the object may be called (as a function) to fix the `n` and
2853:     `p` parameters, returning a "frozen" multinomial random variable:
2854: 
2855:     The probability mass function for `multinomial` is
2856: 
2857:     .. math::
2858: 
2859:         f(x) = \frac{n!}{x_1! \cdots x_k!} p_1^{x_1} \cdots p_k^{x_k},
2860: 
2861:     supported on :math:`x=(x_1, \ldots, x_k)` where each :math:`x_i` is a
2862:     nonnegative integer and their sum is :math:`n`.
2863: 
2864:     .. versionadded:: 0.19.0
2865: 
2866:     Examples
2867:     --------
2868: 
2869:     >>> from scipy.stats import multinomial
2870:     >>> rv = multinomial(8, [0.3, 0.2, 0.5])
2871:     >>> rv.pmf([1, 3, 4])
2872:     0.042000000000000072
2873: 
2874:     The multinomial distribution for :math:`k=2` is identical to the
2875:     corresponding binomial distribution (tiny numerical differences
2876:     notwithstanding):
2877: 
2878:     >>> from scipy.stats import binom
2879:     >>> multinomial.pmf([3, 4], n=7, p=[0.4, 0.6])
2880:     0.29030399999999973
2881:     >>> binom.pmf(3, 7, 0.4)
2882:     0.29030400000000012
2883: 
2884:     The functions ``pmf``, ``logpmf``, ``entropy``, and ``cov`` support
2885:     broadcasting, under the convention that the vector parameters (``x`` and
2886:     ``p``) are interpreted as if each row along the last axis is a single
2887:     object. For instance:
2888: 
2889:     >>> multinomial.pmf([[3, 4], [3, 5]], n=[7, 8], p=[.3, .7])
2890:     array([0.2268945,  0.25412184])
2891: 
2892:     Here, ``x.shape == (2, 2)``, ``n.shape == (2,)``, and ``p.shape == (2,)``,
2893:     but following the rules mentioned above they behave as if the rows
2894:     ``[3, 4]`` and ``[3, 5]`` in ``x`` and ``[.3, .7]`` in ``p`` were a single
2895:     object, and as if we had ``x.shape = (2,)``, ``n.shape = (2,)``, and
2896:     ``p.shape = ()``. To obtain the individual elements without broadcasting,
2897:     we would do this:
2898: 
2899:     >>> multinomial.pmf([3, 4], n=7, p=[.3, .7])
2900:     0.2268945
2901:     >>> multinomial.pmf([3, 5], 8, p=[.3, .7])
2902:     0.25412184
2903: 
2904:     This broadcasting also works for ``cov``, where the output objects are
2905:     square matrices of size ``p.shape[-1]``. For example:
2906: 
2907:     >>> multinomial.cov([4, 5], [[.3, .7], [.4, .6]])
2908:     array([[[ 0.84, -0.84],
2909:             [-0.84,  0.84]],
2910:            [[ 1.2 , -1.2 ],
2911:             [-1.2 ,  1.2 ]]])
2912: 
2913:     In this example, ``n.shape == (2,)`` and ``p.shape == (2, 2)``, and
2914:     following the rules above, these broadcast as if ``p.shape == (2,)``.
2915:     Thus the result should also be of shape ``(2,)``, but since each output is
2916:     a :math:`2 \times 2` matrix, the result in fact has shape ``(2, 2, 2)``,
2917:     where ``result[0]`` is equal to ``multinomial.cov(n=4, p=[.3, .7])`` and
2918:     ``result[1]`` is equal to ``multinomial.cov(n=5, p=[.4, .6])``.
2919: 
2920:     See also
2921:     --------
2922:     scipy.stats.binom : The binomial distribution.
2923:     numpy.random.multinomial : Sampling from the multinomial distribution.
2924:     '''
2925: 
2926:     def __init__(self, seed=None):
2927:         super(multinomial_gen, self).__init__(seed)
2928:         self.__doc__ = \
2929:             doccer.docformat(self.__doc__, multinomial_docdict_params)
2930: 
2931:     def __call__(self, n, p, seed=None):
2932:         '''
2933:         Create a frozen multinomial distribution.
2934: 
2935:         See `multinomial_frozen` for more information.
2936:         '''
2937:         return multinomial_frozen(n, p, seed)
2938: 
2939:     def _process_parameters(self, n, p):
2940:         '''
2941:         Return: n_, p_, npcond.
2942: 
2943:         n_ and p_ are arrays of the correct shape; npcond is a boolean array
2944:         flagging values out of the domain.
2945:        '''
2946:         p = np.array(p, dtype=np.float64, copy=True)
2947:         p[...,-1] = 1. - p[...,:-1].sum(axis=-1)
2948: 
2949:         # true for bad p
2950:         pcond = np.any(p <= 0, axis=-1)
2951:         pcond |= np.any(p > 1, axis=-1)
2952: 
2953:         n = np.array(n, dtype=np.int, copy=True)
2954: 
2955:         # true for bad n
2956:         ncond = n <= 0
2957: 
2958:         return n, p, ncond | pcond
2959: 
2960:     def _process_quantiles(self, x, n, p):
2961:         '''
2962:         Return: x_, xcond.
2963: 
2964:         x_ is an int array; xcond is a boolean array flagging values out of the
2965:         domain.
2966:         '''
2967:         xx = np.asarray(x, dtype=np.int)
2968: 
2969:         if xx.ndim == 0:
2970:             raise ValueError("x must be an array.")
2971: 
2972:         if xx.size != 0 and not xx.shape[-1] == p.shape[-1]:
2973:             raise ValueError("Size of each quantile should be size of p: "
2974:                 "received %d, but expected %d." % (xx.shape[-1], p.shape[-1]))
2975: 
2976:         # true for x out of the domain
2977:         cond = np.any(xx != x, axis=-1)
2978:         cond |= np.any(xx < 0, axis=-1)
2979:         cond = cond | (np.sum(xx, axis=-1) != n)
2980: 
2981:         return xx, cond
2982: 
2983:     def _checkresult(self, result, cond, bad_value):
2984:         result = np.asarray(result)
2985: 
2986:         if cond.ndim != 0:
2987:             result[cond] = bad_value
2988:         elif cond:
2989:             if result.ndim == 0:
2990:                 return bad_value
2991:             result[...] = bad_value
2992:         return result
2993: 
2994:     def _logpmf(self, x, n, p):
2995:         return gammaln(n+1) + np.sum(xlogy(x, p) - gammaln(x+1), axis=-1)
2996: 
2997:     def logpmf(self, x, n, p):
2998:         '''
2999:         Log of the Multinomial probability mass function.
3000: 
3001:         Parameters
3002:         ----------
3003:         x : array_like
3004:             Quantiles, with the last axis of `x` denoting the components.
3005:             Each quantile must be a symmetric positive definite matrix.
3006:         %(_doc_default_callparams)s
3007: 
3008:         Returns
3009:         -------
3010:         logpmf : ndarray or scalar
3011:             Log of the probability mass function evaluated at `x`
3012: 
3013:         Notes
3014:         -----
3015:         %(_doc_callparams_note)s
3016:         '''
3017:         n, p, npcond = self._process_parameters(n, p)
3018:         x, xcond = self._process_quantiles(x, n, p)
3019: 
3020:         result = self._logpmf(x, n, p)
3021: 
3022:         # replace values for which x was out of the domain; broadcast
3023:         # xcond to the right shape
3024:         xcond_ = xcond | np.zeros(npcond.shape, dtype=np.bool_)
3025:         result = self._checkresult(result, xcond_, np.NINF)
3026: 
3027:         # replace values bad for n or p; broadcast npcond to the right shape
3028:         npcond_ = npcond | np.zeros(xcond.shape, dtype=np.bool_)
3029:         return self._checkresult(result, npcond_, np.NAN)
3030: 
3031:     def pmf(self, x, n, p):
3032:         '''
3033:         Multinomial probability mass function.
3034: 
3035:         Parameters
3036:         ----------
3037:         x : array_like
3038:             Quantiles, with the last axis of `x` denoting the components.
3039:             Each quantile must be a symmetric positive definite matrix.
3040:         %(_doc_default_callparams)s
3041: 
3042:         Returns
3043:         -------
3044:         pmf : ndarray or scalar
3045:             Probability density function evaluated at `x`
3046: 
3047:         Notes
3048:         -----
3049:         %(_doc_callparams_note)s
3050:         '''
3051:         return np.exp(self.logpmf(x, n, p))
3052: 
3053:     def mean(self, n, p):
3054:         '''
3055:         Mean of the Multinomial distribution
3056: 
3057:         Parameters
3058:         ----------
3059:         %(_doc_default_callparams)s
3060: 
3061:         Returns
3062:         -------
3063:         mean : float
3064:             The mean of the distribution
3065:         '''
3066:         n, p, npcond = self._process_parameters(n, p)
3067:         result = n[..., np.newaxis]*p
3068:         return self._checkresult(result, npcond, np.NAN)
3069: 
3070:     def cov(self, n, p):
3071:         '''
3072:         Covariance matrix of the multinomial distribution.
3073: 
3074:         Parameters
3075:         ----------
3076:         %(_doc_default_callparams)s
3077: 
3078:         Returns
3079:         -------
3080:         cov : ndarray
3081:             The covariance matrix of the distribution
3082:         '''
3083:         n, p, npcond = self._process_parameters(n, p)
3084: 
3085:         nn = n[..., np.newaxis, np.newaxis]
3086:         result = nn * np.einsum('...j,...k->...jk', -p, p)
3087: 
3088:         # change the diagonal
3089:         for i in range(p.shape[-1]):
3090:             result[...,i, i] += n*p[..., i]
3091: 
3092:         return self._checkresult(result, npcond, np.nan)
3093: 
3094:     def entropy(self, n, p):
3095:         r'''
3096:         Compute the entropy of the multinomial distribution.
3097: 
3098:         The entropy is computed using this expression:
3099: 
3100:         .. math::
3101: 
3102:             f(x) = - \log n! - n\sum_{i=1}^k p_i \log p_i +
3103:             \sum_{i=1}^k \sum_{x=0}^n \binom n x p_i^x(1-p_i)^{n-x} \log x!
3104: 
3105:         Parameters
3106:         ----------
3107:         %(_doc_default_callparams)s
3108: 
3109:         Returns
3110:         -------
3111:         h : scalar
3112:             Entropy of the Multinomial distribution
3113: 
3114:         Notes
3115:         -----
3116:         %(_doc_callparams_note)s
3117:         '''
3118:         n, p, npcond = self._process_parameters(n, p)
3119: 
3120:         x = np.r_[1:np.max(n)+1]
3121: 
3122:         term1 = n*np.sum(entr(p), axis=-1)
3123:         term1 -= gammaln(n+1)
3124: 
3125:         n = n[..., np.newaxis]
3126:         new_axes_needed = max(p.ndim, n.ndim) - x.ndim + 1
3127:         x.shape += (1,)*new_axes_needed
3128: 
3129:         term2 = np.sum(binom.pmf(x, n, p)*gammaln(x+1),
3130:             axis=(-1, -1-new_axes_needed))
3131: 
3132:         return self._checkresult(term1 + term2, npcond, np.nan)
3133: 
3134:     def rvs(self, n, p, size=None, random_state=None):
3135:         '''
3136:         Draw random samples from a Multinomial distribution.
3137: 
3138:         Parameters
3139:         ----------
3140:         %(_doc_default_callparams)s
3141:         size : integer or iterable of integers, optional
3142:             Number of samples to draw (default 1).
3143:         %(_doc_random_state)s
3144: 
3145:         Returns
3146:         -------
3147:         rvs : ndarray or scalar
3148:             Random variates of shape (`size`, `len(p)`)
3149: 
3150:         Notes
3151:         -----
3152:         %(_doc_callparams_note)s
3153:         '''
3154:         n, p, npcond = self._process_parameters(n, p)
3155:         random_state = self._get_random_state(random_state)
3156:         return random_state.multinomial(n, p, size)
3157: 
3158: 
3159: multinomial = multinomial_gen()
3160: 
3161: class multinomial_frozen(multi_rv_frozen):
3162:     r'''
3163:     Create a frozen Multinomial distribution.
3164: 
3165:     Parameters
3166:     ----------
3167:     n : int
3168:         number of trials
3169:     p: array_like
3170:         probability of a trial falling into each category; should sum to 1
3171:     seed : None or int or np.random.RandomState instance, optional
3172:         This parameter defines the RandomState object to use for drawing
3173:         random variates.
3174:         If None (or np.random), the global np.random state is used.
3175:         If integer, it is used to seed the local RandomState instance
3176:         Default is None.
3177:     '''
3178:     def __init__(self, n, p, seed=None):
3179:         self._dist = multinomial_gen(seed)
3180:         self.n, self.p, self.npcond = self._dist._process_parameters(n, p)
3181: 
3182:         # monkey patch self._dist
3183:         def _process_parameters(n, p):
3184:             return self.n, self.p, self.npcond
3185: 
3186:         self._dist._process_parameters = _process_parameters
3187: 
3188:     def logpmf(self, x):
3189:         return self._dist.logpmf(x, self.n, self.p)
3190: 
3191:     def pmf(self, x):
3192:         return self._dist.pmf(x, self.n, self.p)
3193: 
3194:     def mean(self):
3195:         return self._dist.mean(self.n, self.p)
3196: 
3197:     def cov(self):
3198:         return self._dist.cov(self.n, self.p)
3199: 
3200:     def entropy(self):
3201:         return self._dist.entropy(self.n, self.p)
3202: 
3203:     def rvs(self, size=1, random_state=None):
3204:         return self._dist.rvs(self.n, self.p, size, random_state)
3205: 
3206: # Set frozen generator docstrings from corresponding docstrings in
3207: # multinomial and fill in default strings in class docstrings
3208: for name in ['logpmf', 'pmf', 'mean', 'cov', 'rvs']:
3209:     method = multinomial_gen.__dict__[name]
3210:     method_frozen = multinomial_frozen.__dict__[name]
3211:     method_frozen.__doc__ = doccer.docformat(
3212:         method.__doc__, multinomial_docdict_noparams)
3213:     method.__doc__ = doccer.docformat(method.__doc__,
3214:             multinomial_docdict_params)
3215: 
3216: class special_ortho_group_gen(multi_rv_generic):
3217:     r'''
3218:     A matrix-valued SO(N) random variable.
3219: 
3220:     Return a random rotation matrix, drawn from the Haar distribution
3221:     (the only uniform distribution on SO(n)).
3222: 
3223:     The `dim` keyword specifies the dimension N.
3224: 
3225:     Methods
3226:     -------
3227:     ``rvs(dim=None, size=1, random_state=None)``
3228:         Draw random samples from SO(N).
3229: 
3230:     Parameters
3231:     ----------
3232:     dim : scalar
3233:         Dimension of matrices
3234: 
3235:     Notes
3236:     ----------
3237:     This class is wrapping the random_rot code from the MDP Toolkit,
3238:     https://github.com/mdp-toolkit/mdp-toolkit
3239: 
3240:     Return a random rotation matrix, drawn from the Haar distribution
3241:     (the only uniform distribution on SO(n)).
3242:     The algorithm is described in the paper
3243:     Stewart, G.W., "The efficient generation of random orthogonal
3244:     matrices with an application to condition estimators", SIAM Journal
3245:     on Numerical Analysis, 17(3), pp. 403-409, 1980.
3246:     For more information see
3247:     http://en.wikipedia.org/wiki/Orthogonal_matrix#Randomization
3248: 
3249:     See also the similar `ortho_group`.
3250: 
3251:     Examples
3252:     --------
3253:     >>> from scipy.stats import special_ortho_group
3254:     >>> x = special_ortho_group.rvs(3)
3255: 
3256:     >>> np.dot(x, x.T)
3257:     array([[  1.00000000e+00,   1.13231364e-17,  -2.86852790e-16],
3258:            [  1.13231364e-17,   1.00000000e+00,  -1.46845020e-16],
3259:            [ -2.86852790e-16,  -1.46845020e-16,   1.00000000e+00]])
3260: 
3261:     >>> import scipy.linalg
3262:     >>> scipy.linalg.det(x)
3263:     1.0
3264: 
3265:     This generates one random matrix from SO(3). It is orthogonal and
3266:     has a determinant of 1.
3267: 
3268:     '''
3269: 
3270:     def __init__(self, seed=None):
3271:         super(special_ortho_group_gen, self).__init__(seed)
3272:         self.__doc__ = doccer.docformat(self.__doc__)
3273: 
3274:     def __call__(self, dim=None, seed=None):
3275:         '''
3276:         Create a frozen SO(N) distribution.
3277: 
3278:         See `special_ortho_group_frozen` for more information.
3279: 
3280:         '''
3281:         return special_ortho_group_frozen(dim, seed=seed)
3282: 
3283:     def _process_parameters(self, dim):
3284:         '''
3285:         Dimension N must be specified; it cannot be inferred.
3286:         '''
3287: 
3288:         if dim is None or not np.isscalar(dim) or dim <= 1 or dim != int(dim):
3289:             raise ValueError('''Dimension of rotation must be specified,
3290:                                 and must be a scalar greater than 1.''')
3291: 
3292:         return dim
3293: 
3294:     def rvs(self, dim, size=1, random_state=None):
3295:         '''
3296:         Draw random samples from SO(N).
3297: 
3298:         Parameters
3299:         ----------
3300:         dim : integer
3301:             Dimension of rotation space (N).
3302:         size : integer, optional
3303:             Number of samples to draw (default 1).
3304: 
3305:         Returns
3306:         -------
3307:         rvs : ndarray or scalar
3308:             Random size N-dimensional matrices, dimension (size, dim, dim)
3309: 
3310:         '''
3311:         size = int(size)
3312:         if size > 1:
3313:             return np.array([self.rvs(dim, size=1, random_state=random_state)
3314:                              for i in range(size)])
3315: 
3316:         dim = self._process_parameters(dim)
3317: 
3318:         random_state = self._get_random_state(random_state)
3319: 
3320:         H = np.eye(dim)
3321:         D = np.ones((dim,))
3322:         for n in range(1, dim):
3323:             x = random_state.normal(size=(dim-n+1,))
3324: 
3325:             D[n-1] = np.sign(x[0])
3326:             x[0] -= D[n-1]*np.sqrt((x*x).sum())
3327:             # Householder transformation
3328:             Hx = (np.eye(dim-n+1)
3329:                   - 2.*np.outer(x, x)/(x*x).sum())
3330:             mat = np.eye(dim)
3331:             mat[n-1:, n-1:] = Hx
3332:             H = np.dot(H, mat)
3333:             # Fix the last sign such that the determinant is 1
3334:         D[-1] = (-1)**(1-(dim % 2))*D.prod()
3335:         # Equivalent to np.dot(np.diag(D), H) but faster, apparently
3336:         H = (D*H.T).T
3337:         return H
3338: 
3339: special_ortho_group = special_ortho_group_gen()
3340: 
3341: class special_ortho_group_frozen(multi_rv_frozen):
3342:     def __init__(self, dim=None, seed=None):
3343:         '''
3344:         Create a frozen SO(N) distribution.
3345: 
3346:         Parameters
3347:         ----------
3348:         dim : scalar
3349:             Dimension of matrices
3350:         seed : None or int or np.random.RandomState instance, optional
3351:             This parameter defines the RandomState object to use for drawing
3352:             random variates.
3353:             If None (or np.random), the global np.random state is used.
3354:             If integer, it is used to seed the local RandomState instance
3355:             Default is None.
3356: 
3357:         Examples
3358:         --------
3359:         >>> from scipy.stats import special_ortho_group
3360:         >>> g = special_ortho_group(5)
3361:         >>> x = g.rvs()
3362: 
3363:         '''
3364:         self._dist = special_ortho_group_gen(seed)
3365:         self.dim = self._dist._process_parameters(dim)
3366: 
3367:     def rvs(self, size=1, random_state=None):
3368:         return self._dist.rvs(self.dim, size, random_state)
3369: 
3370: class ortho_group_gen(multi_rv_generic):
3371:     r'''
3372:     A matrix-valued O(N) random variable.
3373: 
3374:     Return a random orthogonal matrix, drawn from the O(N) Haar
3375:     distribution (the only uniform distribution on O(N)).
3376: 
3377:     The `dim` keyword specifies the dimension N.
3378: 
3379:     Methods
3380:     -------
3381:     ``rvs(dim=None, size=1, random_state=None)``
3382:         Draw random samples from O(N).
3383: 
3384:     Parameters
3385:     ----------
3386:     dim : scalar
3387:         Dimension of matrices
3388: 
3389:     Notes
3390:     ----------
3391:     This class is closely related to `special_ortho_group`.
3392: 
3393:     Some care is taken to avoid numerical error, as per the paper by Mezzadri.
3394: 
3395:     References
3396:     ----------
3397:     .. [1] F. Mezzadri, "How to generate random matrices from the classical
3398:            compact groups", :arXiv:`math-ph/0609050v2`.
3399: 
3400:     Examples
3401:     --------
3402:     >>> from scipy.stats import ortho_group
3403:     >>> x = ortho_group.rvs(3)
3404: 
3405:     >>> np.dot(x, x.T)
3406:     array([[  1.00000000e+00,   1.13231364e-17,  -2.86852790e-16],
3407:            [  1.13231364e-17,   1.00000000e+00,  -1.46845020e-16],
3408:            [ -2.86852790e-16,  -1.46845020e-16,   1.00000000e+00]])
3409: 
3410:     >>> import scipy.linalg
3411:     >>> np.fabs(scipy.linalg.det(x))
3412:     1.0
3413: 
3414:     This generates one random matrix from O(3). It is orthogonal and
3415:     has a determinant of +1 or -1.
3416: 
3417:     '''
3418: 
3419:     def __init__(self, seed=None):
3420:         super(ortho_group_gen, self).__init__(seed)
3421:         self.__doc__ = doccer.docformat(self.__doc__)
3422: 
3423:     def _process_parameters(self, dim):
3424:         '''
3425:         Dimension N must be specified; it cannot be inferred.
3426:         '''
3427: 
3428:         if dim is None or not np.isscalar(dim) or dim <= 1 or dim != int(dim):
3429:             raise ValueError("Dimension of rotation must be specified,"
3430:                              "and must be a scalar greater than 1.")
3431: 
3432:         return dim
3433: 
3434:     def rvs(self, dim, size=1, random_state=None):
3435:         '''
3436:         Draw random samples from O(N).
3437: 
3438:         Parameters
3439:         ----------
3440:         dim : integer
3441:             Dimension of rotation space (N).
3442:         size : integer, optional
3443:             Number of samples to draw (default 1).
3444: 
3445:         Returns
3446:         -------
3447:         rvs : ndarray or scalar
3448:             Random size N-dimensional matrices, dimension (size, dim, dim)
3449: 
3450:         '''
3451:         size = int(size)
3452:         if size > 1:
3453:             return np.array([self.rvs(dim, size=1, random_state=random_state)
3454:                              for i in range(size)])
3455: 
3456:         dim = self._process_parameters(dim)
3457: 
3458:         random_state = self._get_random_state(random_state)
3459: 
3460:         H = np.eye(dim)
3461:         for n in range(1, dim):
3462:             x = random_state.normal(size=(dim-n+1,))
3463:             # random sign, 50/50, but chosen carefully to avoid roundoff error
3464:             D = np.sign(x[0])
3465:             x[0] += D*np.sqrt((x*x).sum())
3466:             # Householder transformation
3467:             Hx = -D*(np.eye(dim-n+1)
3468:                      - 2.*np.outer(x, x)/(x*x).sum())
3469:             mat = np.eye(dim)
3470:             mat[n-1:, n-1:] = Hx
3471:             H = np.dot(H, mat)
3472:         return H
3473: 
3474: ortho_group = ortho_group_gen()
3475: 
3476: class random_correlation_gen(multi_rv_generic):
3477:     r'''
3478:     A random correlation matrix.
3479: 
3480:     Return a random correlation matrix, given a vector of eigenvalues.
3481: 
3482:     The `eigs` keyword specifies the eigenvalues of the correlation matrix,
3483:     and implies the dimension.
3484: 
3485:     Methods
3486:     -------
3487:     ``rvs(eigs=None, random_state=None)``
3488:         Draw random correlation matrices, all with eigenvalues eigs.
3489: 
3490:     Parameters
3491:     ----------
3492:     eigs : 1d ndarray
3493:         Eigenvalues of correlation matrix.
3494: 
3495:     Notes
3496:     ----------
3497: 
3498:     Generates a random correlation matrix following a numerically stable
3499:     algorithm spelled out by Davies & Higham. This algorithm uses a single O(N)
3500:     similarity transformation to construct a symmetric positive semi-definite
3501:     matrix, and applies a series of Givens rotations to scale it to have ones
3502:     on the diagonal.
3503: 
3504:     References
3505:     ----------
3506: 
3507:     .. [1] Davies, Philip I; Higham, Nicholas J; "Numerically stable generation
3508:            of correlation matrices and their factors", BIT 2000, Vol. 40,
3509:            No. 4, pp. 640 651
3510: 
3511:     Examples
3512:     --------
3513:     >>> from scipy.stats import random_correlation
3514:     >>> np.random.seed(514)
3515:     >>> x = random_correlation.rvs((.5, .8, 1.2, 1.5))
3516:     >>> x
3517:     array([[ 1.        , -0.20387311,  0.18366501, -0.04953711],
3518:            [-0.20387311,  1.        , -0.24351129,  0.06703474],
3519:            [ 0.18366501, -0.24351129,  1.        ,  0.38530195],
3520:            [-0.04953711,  0.06703474,  0.38530195,  1.        ]])
3521: 
3522:     >>> import scipy.linalg
3523:     >>> e, v = scipy.linalg.eigh(x)
3524:     >>> e
3525:     array([ 0.5,  0.8,  1.2,  1.5])
3526: 
3527:     '''
3528: 
3529:     def __init__(self, seed=None):
3530:         super(random_correlation_gen, self).__init__(seed)
3531:         self.__doc__ = doccer.docformat(self.__doc__)
3532: 
3533:     def _process_parameters(self, eigs, tol):
3534:         eigs = np.asarray(eigs, dtype=float)
3535:         dim = eigs.size
3536: 
3537:         if eigs.ndim != 1 or eigs.shape[0] != dim or dim <= 1:
3538:             raise ValueError("Array 'eigs' must be a vector of length greater than 1.")
3539: 
3540:         if np.fabs(np.sum(eigs) - dim) > tol:
3541:             raise ValueError("Sum of eigenvalues must equal dimensionality.")
3542: 
3543:         for x in eigs:
3544:             if x < -tol:
3545:                 raise ValueError("All eigenvalues must be non-negative.")
3546: 
3547:         return dim, eigs
3548: 
3549:     def _givens_to_1(self, aii, ajj, aij):
3550:         '''Computes a 2x2 Givens matrix to put 1's on the diagonal for the input matrix.
3551: 
3552:         The input matrix is a 2x2 symmetric matrix M = [ aii aij ; aij ajj ].
3553: 
3554:         The output matrix g is a 2x2 anti-symmetric matrix of the form [ c s ; -s c ];
3555:         the elements c and s are returned.
3556: 
3557:         Applying the output matrix to the input matrix (as b=g.T M g)
3558:         results in a matrix with bii=1, provided tr(M) - det(M) >= 1
3559:         and floating point issues do not occur. Otherwise, some other
3560:         valid rotation is returned. When tr(M)==2, also bjj=1.
3561: 
3562:         '''
3563:         aiid = aii - 1.
3564:         ajjd = ajj - 1.
3565: 
3566:         if ajjd == 0:
3567:             # ajj==1, so swap aii and ajj to avoid division by zero
3568:             return 0., 1.
3569: 
3570:         dd = math.sqrt(max(aij**2 - aiid*ajjd, 0))
3571: 
3572:         # The choice of t should be chosen to avoid cancellation [1]
3573:         t = (aij + math.copysign(dd, aij)) / ajjd
3574:         c = 1. / math.sqrt(1. + t*t)
3575:         if c == 0:
3576:             # Underflow
3577:             s = 1.0
3578:         else:
3579:             s = c*t
3580:         return c, s
3581: 
3582:     def _to_corr(self, m):
3583:         '''
3584:         Given a psd matrix m, rotate to put one's on the diagonal, turning it
3585:         into a correlation matrix.  This also requires the trace equal the
3586:         dimensionality. Note: modifies input matrix
3587:         '''
3588:         # Check requirements for in-place Givens
3589:         if not (m.flags.c_contiguous and m.dtype == np.float64 and m.shape[0] == m.shape[1]):
3590:             raise ValueError()
3591: 
3592:         d = m.shape[0]
3593:         for i in range(d-1):
3594:             if m[i,i] == 1:
3595:                 continue
3596:             elif m[i, i] > 1:
3597:                 for j in range(i+1, d):
3598:                     if m[j, j] < 1:
3599:                         break
3600:             else:
3601:                 for j in range(i+1, d):
3602:                     if m[j, j] > 1:
3603:                         break
3604: 
3605:             c, s = self._givens_to_1(m[i,i], m[j,j], m[i,j])
3606: 
3607:             # Use BLAS to apply Givens rotations in-place. Equivalent to:
3608:             # g = np.eye(d)
3609:             # g[i, i] = g[j,j] = c
3610:             # g[j, i] = -s; g[i, j] = s
3611:             # m = np.dot(g.T, np.dot(m, g))
3612:             mv = m.ravel()
3613:             drot(mv, mv, c, -s, n=d,
3614:                  offx=i*d, incx=1, offy=j*d, incy=1,
3615:                  overwrite_x=True, overwrite_y=True)
3616:             drot(mv, mv, c, -s, n=d,
3617:                  offx=i, incx=d, offy=j, incy=d,
3618:                  overwrite_x=True, overwrite_y=True)
3619: 
3620:         return m
3621: 
3622:     def rvs(self, eigs, random_state=None, tol=1e-13, diag_tol=1e-7):
3623:         '''
3624:         Draw random correlation matrices
3625: 
3626:         Parameters
3627:         ----------
3628:         eigs : 1d ndarray
3629:             Eigenvalues of correlation matrix
3630:         tol : float, optional
3631:             Tolerance for input parameter checks
3632:         diag_tol : float, optional
3633:             Tolerance for deviation of the diagonal of the resulting
3634:             matrix. Default: 1e-7
3635: 
3636:         Raises
3637:         ------
3638:         RuntimeError
3639:             Floating point error prevented generating a valid correlation
3640:             matrix.
3641: 
3642:         Returns
3643:         -------
3644:         rvs : ndarray or scalar
3645:             Random size N-dimensional matrices, dimension (size, dim, dim),
3646:             each having eigenvalues eigs.
3647: 
3648:         '''
3649:         dim, eigs = self._process_parameters(eigs, tol=tol)
3650: 
3651:         random_state = self._get_random_state(random_state)
3652: 
3653:         m = ortho_group.rvs(dim, random_state=random_state)
3654:         m = np.dot(np.dot(m, np.diag(eigs)), m.T)  # Set the trace of m
3655:         m = self._to_corr(m)  # Carefully rotate to unit diagonal
3656: 
3657:         # Check diagonal
3658:         if abs(m.diagonal() - 1).max() > diag_tol:
3659:             raise RuntimeError("Failed to generate a valid correlation matrix")
3660: 
3661:         return m
3662: 
3663: random_correlation = random_correlation_gen()
3664: 
3665: class unitary_group_gen(multi_rv_generic):
3666:     r'''
3667:     A matrix-valued U(N) random variable.
3668: 
3669:     Return a random unitary matrix.
3670: 
3671:     The `dim` keyword specifies the dimension N.
3672: 
3673:     Methods
3674:     -------
3675:     ``rvs(dim=None, size=1, random_state=None)``
3676:         Draw random samples from U(N).
3677: 
3678:     Parameters
3679:     ----------
3680:     dim : scalar
3681:         Dimension of matrices
3682: 
3683:     Notes
3684:     ----------
3685:     This class is similar to `ortho_group`.
3686: 
3687:     References
3688:     ----------
3689:     .. [1] F. Mezzadri, "How to generate random matrices from the classical
3690:            compact groups", arXiv:math-ph/0609050v2.
3691: 
3692:     Examples
3693:     --------
3694:     >>> from scipy.stats import unitary_group
3695:     >>> x = unitary_group.rvs(3)
3696: 
3697:     >>> np.dot(x, x.conj().T)
3698:     array([[  1.00000000e+00,   1.13231364e-17,  -2.86852790e-16],
3699:            [  1.13231364e-17,   1.00000000e+00,  -1.46845020e-16],
3700:            [ -2.86852790e-16,  -1.46845020e-16,   1.00000000e+00]])
3701: 
3702:     This generates one random matrix from U(3). The dot product confirms that it is unitary up to machine precision.
3703: 
3704:     '''
3705: 
3706:     def __init__(self, seed=None):
3707:         super(unitary_group_gen, self).__init__(seed)
3708:         self.__doc__ = doccer.docformat(self.__doc__)
3709: 
3710:     def _process_parameters(self, dim):
3711:         '''
3712:         Dimension N must be specified; it cannot be inferred.
3713:         '''
3714: 
3715:         if dim is None or not np.isscalar(dim) or dim <= 1 or dim != int(dim):
3716:             raise ValueError("Dimension of rotation must be specified,"
3717:                              "and must be a scalar greater than 1.")
3718: 
3719:         return dim
3720: 
3721:     def rvs(self, dim, size=1, random_state=None):
3722:         '''
3723:         Draw random samples from U(N).
3724: 
3725:         Parameters
3726:         ----------
3727:         dim : integer
3728:             Dimension of space (N).
3729:         size : integer, optional
3730:             Number of samples to draw (default 1).
3731: 
3732:         Returns
3733:         -------
3734:         rvs : ndarray or scalar
3735:             Random size N-dimensional matrices, dimension (size, dim, dim)
3736: 
3737:         '''
3738:         size = int(size)
3739:         if size > 1:
3740:             return np.array([self.rvs(dim, size=1, random_state=random_state)
3741:                              for i in range(size)])
3742: 
3743:         dim = self._process_parameters(dim)
3744: 
3745:         random_state = self._get_random_state(random_state)
3746: 
3747:         z = 1/math.sqrt(2)*(random_state.normal(size=(dim,dim)) +
3748:                             1j*random_state.normal(size=(dim,dim)))
3749:         q, r = scipy.linalg.qr(z)
3750:         d = r.diagonal()
3751:         q *= d/abs(d)
3752:         return q
3753: 
3754: unitary_group = unitary_group_gen()
3755: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'import math' statement (line 6)
import math

import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import numpy' statement (line 7)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_618704 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'numpy')

if (type(import_618704) is not StypyTypeError):

    if (import_618704 != 'pyd_module'):
        __import__(import_618704)
        sys_modules_618705 = sys.modules[import_618704]
        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'np', sys_modules_618705.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'numpy', import_618704)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import scipy.linalg' statement (line 8)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_618706 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'scipy.linalg')

if (type(import_618706) is not StypyTypeError):

    if (import_618706 != 'pyd_module'):
        __import__(import_618706)
        sys_modules_618707 = sys.modules[import_618706]
        import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'scipy.linalg', sys_modules_618707.module_type_store, module_type_store)
    else:
        import scipy.linalg

        import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'scipy.linalg', scipy.linalg, module_type_store)

else:
    # Assigning a type to the variable 'scipy.linalg' (line 8)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'scipy.linalg', import_618706)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'from scipy.misc import doccer' statement (line 9)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_618708 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'scipy.misc')

if (type(import_618708) is not StypyTypeError):

    if (import_618708 != 'pyd_module'):
        __import__(import_618708)
        sys_modules_618709 = sys.modules[import_618708]
        import_from_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'scipy.misc', sys_modules_618709.module_type_store, module_type_store, ['doccer'])
        nest_module(stypy.reporting.localization.Localization(__file__, 9, 0), __file__, sys_modules_618709, sys_modules_618709.module_type_store, module_type_store)
    else:
        from scipy.misc import doccer

        import_from_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'scipy.misc', None, module_type_store, ['doccer'], [doccer])

else:
    # Assigning a type to the variable 'scipy.misc' (line 9)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 9, 0), 'scipy.misc', import_618708)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'from scipy.special import gammaln, psi, multigammaln, xlogy, entr' statement (line 10)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_618710 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'scipy.special')

if (type(import_618710) is not StypyTypeError):

    if (import_618710 != 'pyd_module'):
        __import__(import_618710)
        sys_modules_618711 = sys.modules[import_618710]
        import_from_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'scipy.special', sys_modules_618711.module_type_store, module_type_store, ['gammaln', 'psi', 'multigammaln', 'xlogy', 'entr'])
        nest_module(stypy.reporting.localization.Localization(__file__, 10, 0), __file__, sys_modules_618711, sys_modules_618711.module_type_store, module_type_store)
    else:
        from scipy.special import gammaln, psi, multigammaln, xlogy, entr

        import_from_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'scipy.special', None, module_type_store, ['gammaln', 'psi', 'multigammaln', 'xlogy', 'entr'], [gammaln, psi, multigammaln, xlogy, entr])

else:
    # Assigning a type to the variable 'scipy.special' (line 10)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 10, 0), 'scipy.special', import_618710)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'from scipy._lib._util import check_random_state' statement (line 11)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_618712 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy._lib._util')

if (type(import_618712) is not StypyTypeError):

    if (import_618712 != 'pyd_module'):
        __import__(import_618712)
        sys_modules_618713 = sys.modules[import_618712]
        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy._lib._util', sys_modules_618713.module_type_store, module_type_store, ['check_random_state'])
        nest_module(stypy.reporting.localization.Localization(__file__, 11, 0), __file__, sys_modules_618713, sys_modules_618713.module_type_store, module_type_store)
    else:
        from scipy._lib._util import check_random_state

        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy._lib._util', None, module_type_store, ['check_random_state'], [check_random_state])

else:
    # Assigning a type to the variable 'scipy._lib._util' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy._lib._util', import_618712)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'from scipy.linalg.blas import drot' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_618714 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.linalg.blas')

if (type(import_618714) is not StypyTypeError):

    if (import_618714 != 'pyd_module'):
        __import__(import_618714)
        sys_modules_618715 = sys.modules[import_618714]
        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.linalg.blas', sys_modules_618715.module_type_store, module_type_store, ['drot'])
        nest_module(stypy.reporting.localization.Localization(__file__, 12, 0), __file__, sys_modules_618715, sys_modules_618715.module_type_store, module_type_store)
    else:
        from scipy.linalg.blas import drot

        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.linalg.blas', None, module_type_store, ['drot'], [drot])

else:
    # Assigning a type to the variable 'scipy.linalg.blas' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.linalg.blas', import_618714)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from scipy.stats._discrete_distns import binom' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_618716 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.stats._discrete_distns')

if (type(import_618716) is not StypyTypeError):

    if (import_618716 != 'pyd_module'):
        __import__(import_618716)
        sys_modules_618717 = sys.modules[import_618716]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.stats._discrete_distns', sys_modules_618717.module_type_store, module_type_store, ['binom'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_618717, sys_modules_618717.module_type_store, module_type_store)
    else:
        from scipy.stats._discrete_distns import binom

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.stats._discrete_distns', None, module_type_store, ['binom'], [binom])

else:
    # Assigning a type to the variable 'scipy.stats._discrete_distns' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.stats._discrete_distns', import_618716)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from scipy.stats import mvn' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_618718 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.stats')

if (type(import_618718) is not StypyTypeError):

    if (import_618718 != 'pyd_module'):
        __import__(import_618718)
        sys_modules_618719 = sys.modules[import_618718]
        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.stats', sys_modules_618719.module_type_store, module_type_store, ['mvn'])
        nest_module(stypy.reporting.localization.Localization(__file__, 15, 0), __file__, sys_modules_618719, sys_modules_618719.module_type_store, module_type_store)
    else:
        from scipy.stats import mvn

        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.stats', None, module_type_store, ['mvn'], [mvn])

else:
    # Assigning a type to the variable 'scipy.stats' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.stats', import_618718)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')


# Assigning a List to a Name (line 17):

# Assigning a List to a Name (line 17):
__all__ = ['multivariate_normal', 'matrix_normal', 'dirichlet', 'wishart', 'invwishart', 'multinomial', 'special_ortho_group', 'ortho_group', 'random_correlation', 'unitary_group']
module_type_store.set_exportable_members(['multivariate_normal', 'matrix_normal', 'dirichlet', 'wishart', 'invwishart', 'multinomial', 'special_ortho_group', 'ortho_group', 'random_correlation', 'unitary_group'])

# Obtaining an instance of the builtin type 'list' (line 17)
list_618720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 17)
# Adding element type (line 17)
str_618721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 11), 'str', 'multivariate_normal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 17, 10), list_618720, str_618721)
# Adding element type (line 17)
str_618722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 18, 11), 'str', 'matrix_normal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 17, 10), list_618720, str_618722)
# Adding element type (line 17)
str_618723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 11), 'str', 'dirichlet')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 17, 10), list_618720, str_618723)
# Adding element type (line 17)
str_618724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 20, 11), 'str', 'wishart')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 17, 10), list_618720, str_618724)
# Adding element type (line 17)
str_618725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 11), 'str', 'invwishart')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 17, 10), list_618720, str_618725)
# Adding element type (line 17)
str_618726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 11), 'str', 'multinomial')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 17, 10), list_618720, str_618726)
# Adding element type (line 17)
str_618727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 11), 'str', 'special_ortho_group')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 17, 10), list_618720, str_618727)
# Adding element type (line 17)
str_618728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 11), 'str', 'ortho_group')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 17, 10), list_618720, str_618728)
# Adding element type (line 17)
str_618729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 11), 'str', 'random_correlation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 17, 10), list_618720, str_618729)
# Adding element type (line 17)
str_618730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 11), 'str', 'unitary_group')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 17, 10), list_618720, str_618730)

# Assigning a type to the variable '__all__' (line 17)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), '__all__', list_618720)

# Assigning a Call to a Name (line 28):

# Assigning a Call to a Name (line 28):

# Call to log(...): (line 28)
# Processing the call arguments (line 28)
int_618733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 18), 'int')
# Getting the type of 'np' (line 28)
np_618734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 22), 'np', False)
# Obtaining the member 'pi' of a type (line 28)
pi_618735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 22), np_618734, 'pi')
# Applying the binary operator '*' (line 28)
result_mul_618736 = python_operator(stypy.reporting.localization.Localization(__file__, 28, 18), '*', int_618733, pi_618735)

# Processing the call keyword arguments (line 28)
kwargs_618737 = {}
# Getting the type of 'np' (line 28)
np_618731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 11), 'np', False)
# Obtaining the member 'log' of a type (line 28)
log_618732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 11), np_618731, 'log')
# Calling log(args, kwargs) (line 28)
log_call_result_618738 = invoke(stypy.reporting.localization.Localization(__file__, 28, 11), log_618732, *[result_mul_618736], **kwargs_618737)

# Assigning a type to the variable '_LOG_2PI' (line 28)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), '_LOG_2PI', log_call_result_618738)

# Assigning a Call to a Name (line 29):

# Assigning a Call to a Name (line 29):

# Call to log(...): (line 29)
# Processing the call arguments (line 29)
int_618741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 16), 'int')
# Processing the call keyword arguments (line 29)
kwargs_618742 = {}
# Getting the type of 'np' (line 29)
np_618739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 29, 9), 'np', False)
# Obtaining the member 'log' of a type (line 29)
log_618740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 29, 9), np_618739, 'log')
# Calling log(args, kwargs) (line 29)
log_call_result_618743 = invoke(stypy.reporting.localization.Localization(__file__, 29, 9), log_618740, *[int_618741], **kwargs_618742)

# Assigning a type to the variable '_LOG_2' (line 29)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), '_LOG_2', log_call_result_618743)

# Assigning a Call to a Name (line 30):

# Assigning a Call to a Name (line 30):

# Call to log(...): (line 30)
# Processing the call arguments (line 30)
# Getting the type of 'np' (line 30)
np_618746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 30, 17), 'np', False)
# Obtaining the member 'pi' of a type (line 30)
pi_618747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 30, 17), np_618746, 'pi')
# Processing the call keyword arguments (line 30)
kwargs_618748 = {}
# Getting the type of 'np' (line 30)
np_618744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 30, 10), 'np', False)
# Obtaining the member 'log' of a type (line 30)
log_618745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 30, 10), np_618744, 'log')
# Calling log(args, kwargs) (line 30)
log_call_result_618749 = invoke(stypy.reporting.localization.Localization(__file__, 30, 10), log_618745, *[pi_618747], **kwargs_618748)

# Assigning a type to the variable '_LOG_PI' (line 30)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), '_LOG_PI', log_call_result_618749)

# Assigning a Str to a Name (line 33):

# Assigning a Str to a Name (line 33):
str_618750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, (-1)), 'str', 'random_state : None or int or np.random.RandomState instance, optional\n    If int or RandomState, use it for drawing the random variates.\n    If None (or np.random), the global np.random state is used.\n    Default is None.\n')
# Assigning a type to the variable '_doc_random_state' (line 33)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), '_doc_random_state', str_618750)

@norecursion
def _squeeze_output(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_squeeze_output'
    module_type_store = module_type_store.open_function_context('_squeeze_output', 40, 0, False)
    
    # Passed parameters checking function
    _squeeze_output.stypy_localization = localization
    _squeeze_output.stypy_type_of_self = None
    _squeeze_output.stypy_type_store = module_type_store
    _squeeze_output.stypy_function_name = '_squeeze_output'
    _squeeze_output.stypy_param_names_list = ['out']
    _squeeze_output.stypy_varargs_param_name = None
    _squeeze_output.stypy_kwargs_param_name = None
    _squeeze_output.stypy_call_defaults = defaults
    _squeeze_output.stypy_call_varargs = varargs
    _squeeze_output.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_squeeze_output', ['out'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_squeeze_output', localization, ['out'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_squeeze_output(...)' code ##################

    str_618751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, (-1)), 'str', '\n    Remove single-dimensional entries from array and convert to scalar,\n    if necessary.\n\n    ')
    
    # Assigning a Call to a Name (line 46):
    
    # Assigning a Call to a Name (line 46):
    
    # Call to squeeze(...): (line 46)
    # Processing the call keyword arguments (line 46)
    kwargs_618754 = {}
    # Getting the type of 'out' (line 46)
    out_618752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 10), 'out', False)
    # Obtaining the member 'squeeze' of a type (line 46)
    squeeze_618753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 46, 10), out_618752, 'squeeze')
    # Calling squeeze(args, kwargs) (line 46)
    squeeze_call_result_618755 = invoke(stypy.reporting.localization.Localization(__file__, 46, 10), squeeze_618753, *[], **kwargs_618754)
    
    # Assigning a type to the variable 'out' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 4), 'out', squeeze_call_result_618755)
    
    
    # Getting the type of 'out' (line 47)
    out_618756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 7), 'out')
    # Obtaining the member 'ndim' of a type (line 47)
    ndim_618757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 47, 7), out_618756, 'ndim')
    int_618758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 19), 'int')
    # Applying the binary operator '==' (line 47)
    result_eq_618759 = python_operator(stypy.reporting.localization.Localization(__file__, 47, 7), '==', ndim_618757, int_618758)
    
    # Testing the type of an if condition (line 47)
    if_condition_618760 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 47, 4), result_eq_618759)
    # Assigning a type to the variable 'if_condition_618760' (line 47)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 4), 'if_condition_618760', if_condition_618760)
    # SSA begins for if statement (line 47)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 48):
    
    # Assigning a Subscript to a Name (line 48):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 48)
    tuple_618761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 48)
    
    # Getting the type of 'out' (line 48)
    out_618762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 14), 'out')
    # Obtaining the member '__getitem__' of a type (line 48)
    getitem___618763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 48, 14), out_618762, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 48)
    subscript_call_result_618764 = invoke(stypy.reporting.localization.Localization(__file__, 48, 14), getitem___618763, tuple_618761)
    
    # Assigning a type to the variable 'out' (line 48)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 8), 'out', subscript_call_result_618764)
    # SSA join for if statement (line 47)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'out' (line 49)
    out_618765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 11), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 49)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 4), 'stypy_return_type', out_618765)
    
    # ################# End of '_squeeze_output(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_squeeze_output' in the type store
    # Getting the type of 'stypy_return_type' (line 40)
    stypy_return_type_618766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_618766)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_squeeze_output'
    return stypy_return_type_618766

# Assigning a type to the variable '_squeeze_output' (line 40)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), '_squeeze_output', _squeeze_output)

@norecursion
def _eigvalsh_to_eps(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 52)
    None_618767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 36), 'None')
    # Getting the type of 'None' (line 52)
    None_618768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 48), 'None')
    defaults = [None_618767, None_618768]
    # Create a new context for function '_eigvalsh_to_eps'
    module_type_store = module_type_store.open_function_context('_eigvalsh_to_eps', 52, 0, False)
    
    # Passed parameters checking function
    _eigvalsh_to_eps.stypy_localization = localization
    _eigvalsh_to_eps.stypy_type_of_self = None
    _eigvalsh_to_eps.stypy_type_store = module_type_store
    _eigvalsh_to_eps.stypy_function_name = '_eigvalsh_to_eps'
    _eigvalsh_to_eps.stypy_param_names_list = ['spectrum', 'cond', 'rcond']
    _eigvalsh_to_eps.stypy_varargs_param_name = None
    _eigvalsh_to_eps.stypy_kwargs_param_name = None
    _eigvalsh_to_eps.stypy_call_defaults = defaults
    _eigvalsh_to_eps.stypy_call_varargs = varargs
    _eigvalsh_to_eps.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_eigvalsh_to_eps', ['spectrum', 'cond', 'rcond'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_eigvalsh_to_eps', localization, ['spectrum', 'cond', 'rcond'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_eigvalsh_to_eps(...)' code ##################

    str_618769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, (-1)), 'str', '\n    Determine which eigenvalues are "small" given the spectrum.\n\n    This is for compatibility across various linear algebra functions\n    that should agree about whether or not a Hermitian matrix is numerically\n    singular and what is its numerical matrix rank.\n    This is designed to be compatible with scipy.linalg.pinvh.\n\n    Parameters\n    ----------\n    spectrum : 1d ndarray\n        Array of eigenvalues of a Hermitian matrix.\n    cond, rcond : float, optional\n        Cutoff for small eigenvalues.\n        Singular values smaller than rcond * largest_eigenvalue are\n        considered zero.\n        If None or -1, suitable machine precision is used.\n\n    Returns\n    -------\n    eps : float\n        Magnitude cutoff for numerical negligibility.\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 77)
    # Getting the type of 'rcond' (line 77)
    rcond_618770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 4), 'rcond')
    # Getting the type of 'None' (line 77)
    None_618771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 20), 'None')
    
    (may_be_618772, more_types_in_union_618773) = may_not_be_none(rcond_618770, None_618771)

    if may_be_618772:

        if more_types_in_union_618773:
            # Runtime conditional SSA (line 77)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 78):
        
        # Assigning a Name to a Name (line 78):
        # Getting the type of 'rcond' (line 78)
        rcond_618774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 15), 'rcond')
        # Assigning a type to the variable 'cond' (line 78)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 8), 'cond', rcond_618774)

        if more_types_in_union_618773:
            # SSA join for if statement (line 77)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'cond' (line 79)
    cond_618775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 7), 'cond')
    
    # Obtaining an instance of the builtin type 'list' (line 79)
    list_618776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 79)
    # Adding element type (line 79)
    # Getting the type of 'None' (line 79)
    None_618777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 16), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 79, 15), list_618776, None_618777)
    # Adding element type (line 79)
    int_618778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 79, 15), list_618776, int_618778)
    
    # Applying the binary operator 'in' (line 79)
    result_contains_618779 = python_operator(stypy.reporting.localization.Localization(__file__, 79, 7), 'in', cond_618775, list_618776)
    
    # Testing the type of an if condition (line 79)
    if_condition_618780 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 79, 4), result_contains_618779)
    # Assigning a type to the variable 'if_condition_618780' (line 79)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 79, 4), 'if_condition_618780', if_condition_618780)
    # SSA begins for if statement (line 79)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 80):
    
    # Assigning a Call to a Name (line 80):
    
    # Call to lower(...): (line 80)
    # Processing the call keyword arguments (line 80)
    kwargs_618785 = {}
    # Getting the type of 'spectrum' (line 80)
    spectrum_618781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 12), 'spectrum', False)
    # Obtaining the member 'dtype' of a type (line 80)
    dtype_618782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 12), spectrum_618781, 'dtype')
    # Obtaining the member 'char' of a type (line 80)
    char_618783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 12), dtype_618782, 'char')
    # Obtaining the member 'lower' of a type (line 80)
    lower_618784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 12), char_618783, 'lower')
    # Calling lower(args, kwargs) (line 80)
    lower_call_result_618786 = invoke(stypy.reporting.localization.Localization(__file__, 80, 12), lower_618784, *[], **kwargs_618785)
    
    # Assigning a type to the variable 't' (line 80)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 8), 't', lower_call_result_618786)
    
    # Assigning a Dict to a Name (line 81):
    
    # Assigning a Dict to a Name (line 81):
    
    # Obtaining an instance of the builtin type 'dict' (line 81)
    dict_618787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 17), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 81)
    # Adding element type (key, value) (line 81)
    str_618788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 18), 'str', 'f')
    float_618789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 23), 'float')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 81, 17), dict_618787, (str_618788, float_618789))
    # Adding element type (key, value) (line 81)
    str_618790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 28), 'str', 'd')
    float_618791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 33), 'float')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 81, 17), dict_618787, (str_618790, float_618791))
    
    # Assigning a type to the variable 'factor' (line 81)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 81, 8), 'factor', dict_618787)
    
    # Assigning a BinOp to a Name (line 82):
    
    # Assigning a BinOp to a Name (line 82):
    
    # Obtaining the type of the subscript
    # Getting the type of 't' (line 82)
    t_618792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 22), 't')
    # Getting the type of 'factor' (line 82)
    factor_618793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 15), 'factor')
    # Obtaining the member '__getitem__' of a type (line 82)
    getitem___618794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 15), factor_618793, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 82)
    subscript_call_result_618795 = invoke(stypy.reporting.localization.Localization(__file__, 82, 15), getitem___618794, t_618792)
    
    
    # Call to finfo(...): (line 82)
    # Processing the call arguments (line 82)
    # Getting the type of 't' (line 82)
    t_618798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 36), 't', False)
    # Processing the call keyword arguments (line 82)
    kwargs_618799 = {}
    # Getting the type of 'np' (line 82)
    np_618796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 27), 'np', False)
    # Obtaining the member 'finfo' of a type (line 82)
    finfo_618797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 27), np_618796, 'finfo')
    # Calling finfo(args, kwargs) (line 82)
    finfo_call_result_618800 = invoke(stypy.reporting.localization.Localization(__file__, 82, 27), finfo_618797, *[t_618798], **kwargs_618799)
    
    # Obtaining the member 'eps' of a type (line 82)
    eps_618801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 27), finfo_call_result_618800, 'eps')
    # Applying the binary operator '*' (line 82)
    result_mul_618802 = python_operator(stypy.reporting.localization.Localization(__file__, 82, 15), '*', subscript_call_result_618795, eps_618801)
    
    # Assigning a type to the variable 'cond' (line 82)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 8), 'cond', result_mul_618802)
    # SSA join for if statement (line 79)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 83):
    
    # Assigning a BinOp to a Name (line 83):
    # Getting the type of 'cond' (line 83)
    cond_618803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 10), 'cond')
    
    # Call to max(...): (line 83)
    # Processing the call arguments (line 83)
    
    # Call to abs(...): (line 83)
    # Processing the call arguments (line 83)
    # Getting the type of 'spectrum' (line 83)
    spectrum_618807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 28), 'spectrum', False)
    # Processing the call keyword arguments (line 83)
    kwargs_618808 = {}
    # Getting the type of 'abs' (line 83)
    abs_618806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 24), 'abs', False)
    # Calling abs(args, kwargs) (line 83)
    abs_call_result_618809 = invoke(stypy.reporting.localization.Localization(__file__, 83, 24), abs_618806, *[spectrum_618807], **kwargs_618808)
    
    # Processing the call keyword arguments (line 83)
    kwargs_618810 = {}
    # Getting the type of 'np' (line 83)
    np_618804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 17), 'np', False)
    # Obtaining the member 'max' of a type (line 83)
    max_618805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 83, 17), np_618804, 'max')
    # Calling max(args, kwargs) (line 83)
    max_call_result_618811 = invoke(stypy.reporting.localization.Localization(__file__, 83, 17), max_618805, *[abs_call_result_618809], **kwargs_618810)
    
    # Applying the binary operator '*' (line 83)
    result_mul_618812 = python_operator(stypy.reporting.localization.Localization(__file__, 83, 10), '*', cond_618803, max_call_result_618811)
    
    # Assigning a type to the variable 'eps' (line 83)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 83, 4), 'eps', result_mul_618812)
    # Getting the type of 'eps' (line 84)
    eps_618813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 11), 'eps')
    # Assigning a type to the variable 'stypy_return_type' (line 84)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 4), 'stypy_return_type', eps_618813)
    
    # ################# End of '_eigvalsh_to_eps(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_eigvalsh_to_eps' in the type store
    # Getting the type of 'stypy_return_type' (line 52)
    stypy_return_type_618814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_618814)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_eigvalsh_to_eps'
    return stypy_return_type_618814

# Assigning a type to the variable '_eigvalsh_to_eps' (line 52)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), '_eigvalsh_to_eps', _eigvalsh_to_eps)

@norecursion
def _pinv_1d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_618815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 20), 'float')
    defaults = [float_618815]
    # Create a new context for function '_pinv_1d'
    module_type_store = module_type_store.open_function_context('_pinv_1d', 87, 0, False)
    
    # Passed parameters checking function
    _pinv_1d.stypy_localization = localization
    _pinv_1d.stypy_type_of_self = None
    _pinv_1d.stypy_type_store = module_type_store
    _pinv_1d.stypy_function_name = '_pinv_1d'
    _pinv_1d.stypy_param_names_list = ['v', 'eps']
    _pinv_1d.stypy_varargs_param_name = None
    _pinv_1d.stypy_kwargs_param_name = None
    _pinv_1d.stypy_call_defaults = defaults
    _pinv_1d.stypy_call_varargs = varargs
    _pinv_1d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_pinv_1d', ['v', 'eps'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_pinv_1d', localization, ['v', 'eps'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_pinv_1d(...)' code ##################

    str_618816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, (-1)), 'str', '\n    A helper function for computing the pseudoinverse.\n\n    Parameters\n    ----------\n    v : iterable of numbers\n        This may be thought of as a vector of eigenvalues or singular values.\n    eps : float\n        Values with magnitude no greater than eps are considered negligible.\n\n    Returns\n    -------\n    v_pinv : 1d float ndarray\n        A vector of pseudo-inverted numbers.\n\n    ')
    
    # Call to array(...): (line 104)
    # Processing the call arguments (line 104)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'v' (line 104)
    v_618830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 58), 'v', False)
    comprehension_618831 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 21), v_618830)
    # Assigning a type to the variable 'x' (line 104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 21), 'x', comprehension_618831)
    
    
    
    # Call to abs(...): (line 104)
    # Processing the call arguments (line 104)
    # Getting the type of 'x' (line 104)
    x_618820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 30), 'x', False)
    # Processing the call keyword arguments (line 104)
    kwargs_618821 = {}
    # Getting the type of 'abs' (line 104)
    abs_618819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 26), 'abs', False)
    # Calling abs(args, kwargs) (line 104)
    abs_call_result_618822 = invoke(stypy.reporting.localization.Localization(__file__, 104, 26), abs_618819, *[x_618820], **kwargs_618821)
    
    # Getting the type of 'eps' (line 104)
    eps_618823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 36), 'eps', False)
    # Applying the binary operator '<=' (line 104)
    result_le_618824 = python_operator(stypy.reporting.localization.Localization(__file__, 104, 26), '<=', abs_call_result_618822, eps_618823)
    
    # Testing the type of an if expression (line 104)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 104, 21), result_le_618824)
    # SSA begins for if expression (line 104)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    int_618825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 21), 'int')
    # SSA branch for the else part of an if expression (line 104)
    module_type_store.open_ssa_branch('if expression else')
    int_618826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 45), 'int')
    # Getting the type of 'x' (line 104)
    x_618827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 47), 'x', False)
    # Applying the binary operator 'div' (line 104)
    result_div_618828 = python_operator(stypy.reporting.localization.Localization(__file__, 104, 45), 'div', int_618826, x_618827)
    
    # SSA join for if expression (line 104)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_618829 = union_type.UnionType.add(int_618825, result_div_618828)
    
    list_618832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 21), list_618832, if_exp_618829)
    # Processing the call keyword arguments (line 104)
    # Getting the type of 'float' (line 104)
    float_618833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 68), 'float', False)
    keyword_618834 = float_618833
    kwargs_618835 = {'dtype': keyword_618834}
    # Getting the type of 'np' (line 104)
    np_618817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 11), 'np', False)
    # Obtaining the member 'array' of a type (line 104)
    array_618818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 11), np_618817, 'array')
    # Calling array(args, kwargs) (line 104)
    array_call_result_618836 = invoke(stypy.reporting.localization.Localization(__file__, 104, 11), array_618818, *[list_618832], **kwargs_618835)
    
    # Assigning a type to the variable 'stypy_return_type' (line 104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'stypy_return_type', array_call_result_618836)
    
    # ################# End of '_pinv_1d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_pinv_1d' in the type store
    # Getting the type of 'stypy_return_type' (line 87)
    stypy_return_type_618837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_618837)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_pinv_1d'
    return stypy_return_type_618837

# Assigning a type to the variable '_pinv_1d' (line 87)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 0), '_pinv_1d', _pinv_1d)
# Declaration of the '_PSD' class

class _PSD(object, ):
    str_618838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 145, (-1)), 'str', '\n    Compute coordinated functions of a symmetric positive semidefinite matrix.\n\n    This class addresses two issues.  Firstly it allows the pseudoinverse,\n    the logarithm of the pseudo-determinant, and the rank of the matrix\n    to be computed using one call to eigh instead of three.\n    Secondly it allows these functions to be computed in a way\n    that gives mutually compatible results.\n    All of the functions are computed with a common understanding as to\n    which of the eigenvalues are to be considered negligibly small.\n    The functions are designed to coordinate with scipy.linalg.pinvh()\n    but not necessarily with np.linalg.det() or with np.linalg.matrix_rank().\n\n    Parameters\n    ----------\n    M : array_like\n        Symmetric positive semidefinite matrix (2-D).\n    cond, rcond : float, optional\n        Cutoff for small eigenvalues.\n        Singular values smaller than rcond * largest_eigenvalue are\n        considered zero.\n        If None or -1, suitable machine precision is used.\n    lower : bool, optional\n        Whether the pertinent array data is taken from the lower\n        or upper triangle of M. (Default: lower)\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite\n        numbers. Disabling may give a performance gain, but may result\n        in problems (crashes, non-termination) if the inputs do contain\n        infinities or NaNs.\n    allow_singular : bool, optional\n        Whether to allow a singular matrix.  (Default: True)\n\n    Notes\n    -----\n    The arguments are similar to those of scipy.linalg.pinvh().\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 147)
        None_618839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 31), 'None')
        # Getting the type of 'None' (line 147)
        None_618840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 43), 'None')
        # Getting the type of 'True' (line 147)
        True_618841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 55), 'True')
        # Getting the type of 'True' (line 148)
        True_618842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 30), 'True')
        # Getting the type of 'True' (line 148)
        True_618843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 51), 'True')
        defaults = [None_618839, None_618840, True_618841, True_618842, True_618843]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 147, 4, False)
        # Assigning a type to the variable 'self' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_PSD.__init__', ['M', 'cond', 'rcond', 'lower', 'check_finite', 'allow_singular'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['M', 'cond', 'rcond', 'lower', 'check_finite', 'allow_singular'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Tuple (line 152):
        
        # Assigning a Subscript to a Name (line 152):
        
        # Obtaining the type of the subscript
        int_618844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 8), 'int')
        
        # Call to eigh(...): (line 152)
        # Processing the call arguments (line 152)
        # Getting the type of 'M' (line 152)
        M_618848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 33), 'M', False)
        # Processing the call keyword arguments (line 152)
        # Getting the type of 'lower' (line 152)
        lower_618849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 42), 'lower', False)
        keyword_618850 = lower_618849
        # Getting the type of 'check_finite' (line 152)
        check_finite_618851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 62), 'check_finite', False)
        keyword_618852 = check_finite_618851
        kwargs_618853 = {'lower': keyword_618850, 'check_finite': keyword_618852}
        # Getting the type of 'scipy' (line 152)
        scipy_618845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 15), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 152)
        linalg_618846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 15), scipy_618845, 'linalg')
        # Obtaining the member 'eigh' of a type (line 152)
        eigh_618847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 15), linalg_618846, 'eigh')
        # Calling eigh(args, kwargs) (line 152)
        eigh_call_result_618854 = invoke(stypy.reporting.localization.Localization(__file__, 152, 15), eigh_618847, *[M_618848], **kwargs_618853)
        
        # Obtaining the member '__getitem__' of a type (line 152)
        getitem___618855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 8), eigh_call_result_618854, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 152)
        subscript_call_result_618856 = invoke(stypy.reporting.localization.Localization(__file__, 152, 8), getitem___618855, int_618844)
        
        # Assigning a type to the variable 'tuple_var_assignment_618566' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'tuple_var_assignment_618566', subscript_call_result_618856)
        
        # Assigning a Subscript to a Name (line 152):
        
        # Obtaining the type of the subscript
        int_618857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 8), 'int')
        
        # Call to eigh(...): (line 152)
        # Processing the call arguments (line 152)
        # Getting the type of 'M' (line 152)
        M_618861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 33), 'M', False)
        # Processing the call keyword arguments (line 152)
        # Getting the type of 'lower' (line 152)
        lower_618862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 42), 'lower', False)
        keyword_618863 = lower_618862
        # Getting the type of 'check_finite' (line 152)
        check_finite_618864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 62), 'check_finite', False)
        keyword_618865 = check_finite_618864
        kwargs_618866 = {'lower': keyword_618863, 'check_finite': keyword_618865}
        # Getting the type of 'scipy' (line 152)
        scipy_618858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 15), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 152)
        linalg_618859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 15), scipy_618858, 'linalg')
        # Obtaining the member 'eigh' of a type (line 152)
        eigh_618860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 15), linalg_618859, 'eigh')
        # Calling eigh(args, kwargs) (line 152)
        eigh_call_result_618867 = invoke(stypy.reporting.localization.Localization(__file__, 152, 15), eigh_618860, *[M_618861], **kwargs_618866)
        
        # Obtaining the member '__getitem__' of a type (line 152)
        getitem___618868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 8), eigh_call_result_618867, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 152)
        subscript_call_result_618869 = invoke(stypy.reporting.localization.Localization(__file__, 152, 8), getitem___618868, int_618857)
        
        # Assigning a type to the variable 'tuple_var_assignment_618567' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'tuple_var_assignment_618567', subscript_call_result_618869)
        
        # Assigning a Name to a Name (line 152):
        # Getting the type of 'tuple_var_assignment_618566' (line 152)
        tuple_var_assignment_618566_618870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'tuple_var_assignment_618566')
        # Assigning a type to the variable 's' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 's', tuple_var_assignment_618566_618870)
        
        # Assigning a Name to a Name (line 152):
        # Getting the type of 'tuple_var_assignment_618567' (line 152)
        tuple_var_assignment_618567_618871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'tuple_var_assignment_618567')
        # Assigning a type to the variable 'u' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 11), 'u', tuple_var_assignment_618567_618871)
        
        # Assigning a Call to a Name (line 154):
        
        # Assigning a Call to a Name (line 154):
        
        # Call to _eigvalsh_to_eps(...): (line 154)
        # Processing the call arguments (line 154)
        # Getting the type of 's' (line 154)
        s_618873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 31), 's', False)
        # Getting the type of 'cond' (line 154)
        cond_618874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 34), 'cond', False)
        # Getting the type of 'rcond' (line 154)
        rcond_618875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 40), 'rcond', False)
        # Processing the call keyword arguments (line 154)
        kwargs_618876 = {}
        # Getting the type of '_eigvalsh_to_eps' (line 154)
        _eigvalsh_to_eps_618872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 14), '_eigvalsh_to_eps', False)
        # Calling _eigvalsh_to_eps(args, kwargs) (line 154)
        _eigvalsh_to_eps_call_result_618877 = invoke(stypy.reporting.localization.Localization(__file__, 154, 14), _eigvalsh_to_eps_618872, *[s_618873, cond_618874, rcond_618875], **kwargs_618876)
        
        # Assigning a type to the variable 'eps' (line 154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'eps', _eigvalsh_to_eps_call_result_618877)
        
        
        
        # Call to min(...): (line 155)
        # Processing the call arguments (line 155)
        # Getting the type of 's' (line 155)
        s_618880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 18), 's', False)
        # Processing the call keyword arguments (line 155)
        kwargs_618881 = {}
        # Getting the type of 'np' (line 155)
        np_618878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 11), 'np', False)
        # Obtaining the member 'min' of a type (line 155)
        min_618879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 11), np_618878, 'min')
        # Calling min(args, kwargs) (line 155)
        min_call_result_618882 = invoke(stypy.reporting.localization.Localization(__file__, 155, 11), min_618879, *[s_618880], **kwargs_618881)
        
        
        # Getting the type of 'eps' (line 155)
        eps_618883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 24), 'eps')
        # Applying the 'usub' unary operator (line 155)
        result___neg___618884 = python_operator(stypy.reporting.localization.Localization(__file__, 155, 23), 'usub', eps_618883)
        
        # Applying the binary operator '<' (line 155)
        result_lt_618885 = python_operator(stypy.reporting.localization.Localization(__file__, 155, 11), '<', min_call_result_618882, result___neg___618884)
        
        # Testing the type of an if condition (line 155)
        if_condition_618886 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 155, 8), result_lt_618885)
        # Assigning a type to the variable 'if_condition_618886' (line 155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 8), 'if_condition_618886', if_condition_618886)
        # SSA begins for if statement (line 155)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 156)
        # Processing the call arguments (line 156)
        str_618888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 29), 'str', 'the input matrix must be positive semidefinite')
        # Processing the call keyword arguments (line 156)
        kwargs_618889 = {}
        # Getting the type of 'ValueError' (line 156)
        ValueError_618887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 156)
        ValueError_call_result_618890 = invoke(stypy.reporting.localization.Localization(__file__, 156, 18), ValueError_618887, *[str_618888], **kwargs_618889)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 156, 12), ValueError_call_result_618890, 'raise parameter', BaseException)
        # SSA join for if statement (line 155)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 157):
        
        # Assigning a Subscript to a Name (line 157):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 's' (line 157)
        s_618891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 14), 's')
        # Getting the type of 'eps' (line 157)
        eps_618892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 18), 'eps')
        # Applying the binary operator '>' (line 157)
        result_gt_618893 = python_operator(stypy.reporting.localization.Localization(__file__, 157, 14), '>', s_618891, eps_618892)
        
        # Getting the type of 's' (line 157)
        s_618894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 12), 's')
        # Obtaining the member '__getitem__' of a type (line 157)
        getitem___618895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 12), s_618894, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 157)
        subscript_call_result_618896 = invoke(stypy.reporting.localization.Localization(__file__, 157, 12), getitem___618895, result_gt_618893)
        
        # Assigning a type to the variable 'd' (line 157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 8), 'd', subscript_call_result_618896)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 158)
        # Processing the call arguments (line 158)
        # Getting the type of 'd' (line 158)
        d_618898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 15), 'd', False)
        # Processing the call keyword arguments (line 158)
        kwargs_618899 = {}
        # Getting the type of 'len' (line 158)
        len_618897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 11), 'len', False)
        # Calling len(args, kwargs) (line 158)
        len_call_result_618900 = invoke(stypy.reporting.localization.Localization(__file__, 158, 11), len_618897, *[d_618898], **kwargs_618899)
        
        
        # Call to len(...): (line 158)
        # Processing the call arguments (line 158)
        # Getting the type of 's' (line 158)
        s_618902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 24), 's', False)
        # Processing the call keyword arguments (line 158)
        kwargs_618903 = {}
        # Getting the type of 'len' (line 158)
        len_618901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 20), 'len', False)
        # Calling len(args, kwargs) (line 158)
        len_call_result_618904 = invoke(stypy.reporting.localization.Localization(__file__, 158, 20), len_618901, *[s_618902], **kwargs_618903)
        
        # Applying the binary operator '<' (line 158)
        result_lt_618905 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 11), '<', len_call_result_618900, len_call_result_618904)
        
        
        # Getting the type of 'allow_singular' (line 158)
        allow_singular_618906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 35), 'allow_singular')
        # Applying the 'not' unary operator (line 158)
        result_not__618907 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 31), 'not', allow_singular_618906)
        
        # Applying the binary operator 'and' (line 158)
        result_and_keyword_618908 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 11), 'and', result_lt_618905, result_not__618907)
        
        # Testing the type of an if condition (line 158)
        if_condition_618909 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 158, 8), result_and_keyword_618908)
        # Assigning a type to the variable 'if_condition_618909' (line 158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 8), 'if_condition_618909', if_condition_618909)
        # SSA begins for if statement (line 158)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to LinAlgError(...): (line 159)
        # Processing the call arguments (line 159)
        str_618913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 40), 'str', 'singular matrix')
        # Processing the call keyword arguments (line 159)
        kwargs_618914 = {}
        # Getting the type of 'np' (line 159)
        np_618910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 18), 'np', False)
        # Obtaining the member 'linalg' of a type (line 159)
        linalg_618911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 18), np_618910, 'linalg')
        # Obtaining the member 'LinAlgError' of a type (line 159)
        LinAlgError_618912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 18), linalg_618911, 'LinAlgError')
        # Calling LinAlgError(args, kwargs) (line 159)
        LinAlgError_call_result_618915 = invoke(stypy.reporting.localization.Localization(__file__, 159, 18), LinAlgError_618912, *[str_618913], **kwargs_618914)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 159, 12), LinAlgError_call_result_618915, 'raise parameter', BaseException)
        # SSA join for if statement (line 158)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 160):
        
        # Assigning a Call to a Name (line 160):
        
        # Call to _pinv_1d(...): (line 160)
        # Processing the call arguments (line 160)
        # Getting the type of 's' (line 160)
        s_618917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 26), 's', False)
        # Getting the type of 'eps' (line 160)
        eps_618918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 29), 'eps', False)
        # Processing the call keyword arguments (line 160)
        kwargs_618919 = {}
        # Getting the type of '_pinv_1d' (line 160)
        _pinv_1d_618916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 17), '_pinv_1d', False)
        # Calling _pinv_1d(args, kwargs) (line 160)
        _pinv_1d_call_result_618920 = invoke(stypy.reporting.localization.Localization(__file__, 160, 17), _pinv_1d_618916, *[s_618917, eps_618918], **kwargs_618919)
        
        # Assigning a type to the variable 's_pinv' (line 160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 's_pinv', _pinv_1d_call_result_618920)
        
        # Assigning a Call to a Name (line 161):
        
        # Assigning a Call to a Name (line 161):
        
        # Call to multiply(...): (line 161)
        # Processing the call arguments (line 161)
        # Getting the type of 'u' (line 161)
        u_618923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 24), 'u', False)
        
        # Call to sqrt(...): (line 161)
        # Processing the call arguments (line 161)
        # Getting the type of 's_pinv' (line 161)
        s_pinv_618926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 35), 's_pinv', False)
        # Processing the call keyword arguments (line 161)
        kwargs_618927 = {}
        # Getting the type of 'np' (line 161)
        np_618924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 27), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 161)
        sqrt_618925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 27), np_618924, 'sqrt')
        # Calling sqrt(args, kwargs) (line 161)
        sqrt_call_result_618928 = invoke(stypy.reporting.localization.Localization(__file__, 161, 27), sqrt_618925, *[s_pinv_618926], **kwargs_618927)
        
        # Processing the call keyword arguments (line 161)
        kwargs_618929 = {}
        # Getting the type of 'np' (line 161)
        np_618921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 12), 'np', False)
        # Obtaining the member 'multiply' of a type (line 161)
        multiply_618922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 12), np_618921, 'multiply')
        # Calling multiply(args, kwargs) (line 161)
        multiply_call_result_618930 = invoke(stypy.reporting.localization.Localization(__file__, 161, 12), multiply_618922, *[u_618923, sqrt_call_result_618928], **kwargs_618929)
        
        # Assigning a type to the variable 'U' (line 161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'U', multiply_call_result_618930)
        
        # Assigning a Call to a Attribute (line 164):
        
        # Assigning a Call to a Attribute (line 164):
        
        # Call to len(...): (line 164)
        # Processing the call arguments (line 164)
        # Getting the type of 'd' (line 164)
        d_618932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 24), 'd', False)
        # Processing the call keyword arguments (line 164)
        kwargs_618933 = {}
        # Getting the type of 'len' (line 164)
        len_618931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 20), 'len', False)
        # Calling len(args, kwargs) (line 164)
        len_call_result_618934 = invoke(stypy.reporting.localization.Localization(__file__, 164, 20), len_618931, *[d_618932], **kwargs_618933)
        
        # Getting the type of 'self' (line 164)
        self_618935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 8), 'self')
        # Setting the type of the member 'rank' of a type (line 164)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 8), self_618935, 'rank', len_call_result_618934)
        
        # Assigning a Name to a Attribute (line 165):
        
        # Assigning a Name to a Attribute (line 165):
        # Getting the type of 'U' (line 165)
        U_618936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 17), 'U')
        # Getting the type of 'self' (line 165)
        self_618937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 8), 'self')
        # Setting the type of the member 'U' of a type (line 165)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 8), self_618937, 'U', U_618936)
        
        # Assigning a Call to a Attribute (line 166):
        
        # Assigning a Call to a Attribute (line 166):
        
        # Call to sum(...): (line 166)
        # Processing the call arguments (line 166)
        
        # Call to log(...): (line 166)
        # Processing the call arguments (line 166)
        # Getting the type of 'd' (line 166)
        d_618942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 38), 'd', False)
        # Processing the call keyword arguments (line 166)
        kwargs_618943 = {}
        # Getting the type of 'np' (line 166)
        np_618940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 31), 'np', False)
        # Obtaining the member 'log' of a type (line 166)
        log_618941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 31), np_618940, 'log')
        # Calling log(args, kwargs) (line 166)
        log_call_result_618944 = invoke(stypy.reporting.localization.Localization(__file__, 166, 31), log_618941, *[d_618942], **kwargs_618943)
        
        # Processing the call keyword arguments (line 166)
        kwargs_618945 = {}
        # Getting the type of 'np' (line 166)
        np_618938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 24), 'np', False)
        # Obtaining the member 'sum' of a type (line 166)
        sum_618939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 24), np_618938, 'sum')
        # Calling sum(args, kwargs) (line 166)
        sum_call_result_618946 = invoke(stypy.reporting.localization.Localization(__file__, 166, 24), sum_618939, *[log_call_result_618944], **kwargs_618945)
        
        # Getting the type of 'self' (line 166)
        self_618947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 8), 'self')
        # Setting the type of the member 'log_pdet' of a type (line 166)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 8), self_618947, 'log_pdet', sum_call_result_618946)
        
        # Assigning a Name to a Attribute (line 169):
        
        # Assigning a Name to a Attribute (line 169):
        # Getting the type of 'None' (line 169)
        None_618948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 21), 'None')
        # Getting the type of 'self' (line 169)
        self_618949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 8), 'self')
        # Setting the type of the member '_pinv' of a type (line 169)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 8), self_618949, '_pinv', None_618948)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def pinv(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pinv'
        module_type_store = module_type_store.open_function_context('pinv', 171, 4, False)
        # Assigning a type to the variable 'self' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _PSD.pinv.__dict__.__setitem__('stypy_localization', localization)
        _PSD.pinv.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _PSD.pinv.__dict__.__setitem__('stypy_type_store', module_type_store)
        _PSD.pinv.__dict__.__setitem__('stypy_function_name', '_PSD.pinv')
        _PSD.pinv.__dict__.__setitem__('stypy_param_names_list', [])
        _PSD.pinv.__dict__.__setitem__('stypy_varargs_param_name', None)
        _PSD.pinv.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _PSD.pinv.__dict__.__setitem__('stypy_call_defaults', defaults)
        _PSD.pinv.__dict__.__setitem__('stypy_call_varargs', varargs)
        _PSD.pinv.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _PSD.pinv.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_PSD.pinv', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pinv', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pinv(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 173)
        # Getting the type of 'self' (line 173)
        self_618950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 11), 'self')
        # Obtaining the member '_pinv' of a type (line 173)
        _pinv_618951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 11), self_618950, '_pinv')
        # Getting the type of 'None' (line 173)
        None_618952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 25), 'None')
        
        (may_be_618953, more_types_in_union_618954) = may_be_none(_pinv_618951, None_618952)

        if may_be_618953:

            if more_types_in_union_618954:
                # Runtime conditional SSA (line 173)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 174):
            
            # Assigning a Call to a Attribute (line 174):
            
            # Call to dot(...): (line 174)
            # Processing the call arguments (line 174)
            # Getting the type of 'self' (line 174)
            self_618957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 32), 'self', False)
            # Obtaining the member 'U' of a type (line 174)
            U_618958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 32), self_618957, 'U')
            # Getting the type of 'self' (line 174)
            self_618959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 40), 'self', False)
            # Obtaining the member 'U' of a type (line 174)
            U_618960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 40), self_618959, 'U')
            # Obtaining the member 'T' of a type (line 174)
            T_618961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 40), U_618960, 'T')
            # Processing the call keyword arguments (line 174)
            kwargs_618962 = {}
            # Getting the type of 'np' (line 174)
            np_618955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 25), 'np', False)
            # Obtaining the member 'dot' of a type (line 174)
            dot_618956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 25), np_618955, 'dot')
            # Calling dot(args, kwargs) (line 174)
            dot_call_result_618963 = invoke(stypy.reporting.localization.Localization(__file__, 174, 25), dot_618956, *[U_618958, T_618961], **kwargs_618962)
            
            # Getting the type of 'self' (line 174)
            self_618964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 12), 'self')
            # Setting the type of the member '_pinv' of a type (line 174)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 12), self_618964, '_pinv', dot_call_result_618963)

            if more_types_in_union_618954:
                # SSA join for if statement (line 173)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 175)
        self_618965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 15), 'self')
        # Obtaining the member '_pinv' of a type (line 175)
        _pinv_618966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 15), self_618965, '_pinv')
        # Assigning a type to the variable 'stypy_return_type' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 8), 'stypy_return_type', _pinv_618966)
        
        # ################# End of 'pinv(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pinv' in the type store
        # Getting the type of 'stypy_return_type' (line 171)
        stypy_return_type_618967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_618967)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pinv'
        return stypy_return_type_618967


# Assigning a type to the variable '_PSD' (line 107)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 0), '_PSD', _PSD)
# Declaration of the 'multi_rv_generic' class

class multi_rv_generic(object, ):
    str_618968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, (-1)), 'str', '\n    Class which encapsulates common functionality between all multivariate\n    distributions.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 184)
        None_618969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 28), 'None')
        defaults = [None_618969]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 184, 4, False)
        # Assigning a type to the variable 'self' (line 185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multi_rv_generic.__init__', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 185)
        # Processing the call keyword arguments (line 185)
        kwargs_618976 = {}
        
        # Call to super(...): (line 185)
        # Processing the call arguments (line 185)
        # Getting the type of 'multi_rv_generic' (line 185)
        multi_rv_generic_618971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 14), 'multi_rv_generic', False)
        # Getting the type of 'self' (line 185)
        self_618972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 32), 'self', False)
        # Processing the call keyword arguments (line 185)
        kwargs_618973 = {}
        # Getting the type of 'super' (line 185)
        super_618970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 8), 'super', False)
        # Calling super(args, kwargs) (line 185)
        super_call_result_618974 = invoke(stypy.reporting.localization.Localization(__file__, 185, 8), super_618970, *[multi_rv_generic_618971, self_618972], **kwargs_618973)
        
        # Obtaining the member '__init__' of a type (line 185)
        init___618975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 8), super_call_result_618974, '__init__')
        # Calling __init__(args, kwargs) (line 185)
        init___call_result_618977 = invoke(stypy.reporting.localization.Localization(__file__, 185, 8), init___618975, *[], **kwargs_618976)
        
        
        # Assigning a Call to a Attribute (line 186):
        
        # Assigning a Call to a Attribute (line 186):
        
        # Call to check_random_state(...): (line 186)
        # Processing the call arguments (line 186)
        # Getting the type of 'seed' (line 186)
        seed_618979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 48), 'seed', False)
        # Processing the call keyword arguments (line 186)
        kwargs_618980 = {}
        # Getting the type of 'check_random_state' (line 186)
        check_random_state_618978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 29), 'check_random_state', False)
        # Calling check_random_state(args, kwargs) (line 186)
        check_random_state_call_result_618981 = invoke(stypy.reporting.localization.Localization(__file__, 186, 29), check_random_state_618978, *[seed_618979], **kwargs_618980)
        
        # Getting the type of 'self' (line 186)
        self_618982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 8), 'self')
        # Setting the type of the member '_random_state' of a type (line 186)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 8), self_618982, '_random_state', check_random_state_call_result_618981)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def random_state(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'random_state'
        module_type_store = module_type_store.open_function_context('random_state', 188, 4, False)
        # Assigning a type to the variable 'self' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_localization', localization)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_type_store', module_type_store)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_function_name', 'multi_rv_generic.random_state')
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_param_names_list', [])
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_varargs_param_name', None)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_call_defaults', defaults)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_call_varargs', varargs)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multi_rv_generic.random_state', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'random_state', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'random_state(...)' code ##################

        str_618983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, (-1)), 'str', ' Get or set the RandomState object for generating random variates.\n\n        This can be either None or an existing RandomState object.\n\n        If None (or np.random), use the RandomState singleton used by np.random.\n        If already a RandomState instance, use it.\n        If an int, use a new RandomState instance seeded with seed.\n\n        ')
        # Getting the type of 'self' (line 199)
        self_618984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 15), 'self')
        # Obtaining the member '_random_state' of a type (line 199)
        _random_state_618985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 15), self_618984, '_random_state')
        # Assigning a type to the variable 'stypy_return_type' (line 199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 8), 'stypy_return_type', _random_state_618985)
        
        # ################# End of 'random_state(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'random_state' in the type store
        # Getting the type of 'stypy_return_type' (line 188)
        stypy_return_type_618986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_618986)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'random_state'
        return stypy_return_type_618986


    @norecursion
    def random_state(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'random_state'
        module_type_store = module_type_store.open_function_context('random_state', 201, 4, False)
        # Assigning a type to the variable 'self' (line 202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_localization', localization)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_type_store', module_type_store)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_function_name', 'multi_rv_generic.random_state')
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_param_names_list', ['seed'])
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_varargs_param_name', None)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_call_defaults', defaults)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_call_varargs', varargs)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multi_rv_generic.random_state.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multi_rv_generic.random_state', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'random_state', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'random_state(...)' code ##################

        
        # Assigning a Call to a Attribute (line 203):
        
        # Assigning a Call to a Attribute (line 203):
        
        # Call to check_random_state(...): (line 203)
        # Processing the call arguments (line 203)
        # Getting the type of 'seed' (line 203)
        seed_618988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 48), 'seed', False)
        # Processing the call keyword arguments (line 203)
        kwargs_618989 = {}
        # Getting the type of 'check_random_state' (line 203)
        check_random_state_618987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 29), 'check_random_state', False)
        # Calling check_random_state(args, kwargs) (line 203)
        check_random_state_call_result_618990 = invoke(stypy.reporting.localization.Localization(__file__, 203, 29), check_random_state_618987, *[seed_618988], **kwargs_618989)
        
        # Getting the type of 'self' (line 203)
        self_618991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 8), 'self')
        # Setting the type of the member '_random_state' of a type (line 203)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 8), self_618991, '_random_state', check_random_state_call_result_618990)
        
        # ################# End of 'random_state(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'random_state' in the type store
        # Getting the type of 'stypy_return_type' (line 201)
        stypy_return_type_618992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_618992)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'random_state'
        return stypy_return_type_618992


    @norecursion
    def _get_random_state(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_random_state'
        module_type_store = module_type_store.open_function_context('_get_random_state', 205, 4, False)
        # Assigning a type to the variable 'self' (line 206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multi_rv_generic._get_random_state.__dict__.__setitem__('stypy_localization', localization)
        multi_rv_generic._get_random_state.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multi_rv_generic._get_random_state.__dict__.__setitem__('stypy_type_store', module_type_store)
        multi_rv_generic._get_random_state.__dict__.__setitem__('stypy_function_name', 'multi_rv_generic._get_random_state')
        multi_rv_generic._get_random_state.__dict__.__setitem__('stypy_param_names_list', ['random_state'])
        multi_rv_generic._get_random_state.__dict__.__setitem__('stypy_varargs_param_name', None)
        multi_rv_generic._get_random_state.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multi_rv_generic._get_random_state.__dict__.__setitem__('stypy_call_defaults', defaults)
        multi_rv_generic._get_random_state.__dict__.__setitem__('stypy_call_varargs', varargs)
        multi_rv_generic._get_random_state.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multi_rv_generic._get_random_state.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multi_rv_generic._get_random_state', ['random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_random_state', localization, ['random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_random_state(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 206)
        # Getting the type of 'random_state' (line 206)
        random_state_618993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 8), 'random_state')
        # Getting the type of 'None' (line 206)
        None_618994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 31), 'None')
        
        (may_be_618995, more_types_in_union_618996) = may_not_be_none(random_state_618993, None_618994)

        if may_be_618995:

            if more_types_in_union_618996:
                # Runtime conditional SSA (line 206)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to check_random_state(...): (line 207)
            # Processing the call arguments (line 207)
            # Getting the type of 'random_state' (line 207)
            random_state_618998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 38), 'random_state', False)
            # Processing the call keyword arguments (line 207)
            kwargs_618999 = {}
            # Getting the type of 'check_random_state' (line 207)
            check_random_state_618997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 19), 'check_random_state', False)
            # Calling check_random_state(args, kwargs) (line 207)
            check_random_state_call_result_619000 = invoke(stypy.reporting.localization.Localization(__file__, 207, 19), check_random_state_618997, *[random_state_618998], **kwargs_618999)
            
            # Assigning a type to the variable 'stypy_return_type' (line 207)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 12), 'stypy_return_type', check_random_state_call_result_619000)

            if more_types_in_union_618996:
                # Runtime conditional SSA for else branch (line 206)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_618995) or more_types_in_union_618996):
            # Getting the type of 'self' (line 209)
            self_619001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 19), 'self')
            # Obtaining the member '_random_state' of a type (line 209)
            _random_state_619002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 19), self_619001, '_random_state')
            # Assigning a type to the variable 'stypy_return_type' (line 209)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 209, 12), 'stypy_return_type', _random_state_619002)

            if (may_be_618995 and more_types_in_union_618996):
                # SSA join for if statement (line 206)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '_get_random_state(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_random_state' in the type store
        # Getting the type of 'stypy_return_type' (line 205)
        stypy_return_type_619003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619003)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_random_state'
        return stypy_return_type_619003


# Assigning a type to the variable 'multi_rv_generic' (line 178)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 0), 'multi_rv_generic', multi_rv_generic)
# Declaration of the 'multi_rv_frozen' class

class multi_rv_frozen(object, ):
    str_619004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 216, (-1)), 'str', '\n    Class which encapsulates common functionality between all frozen\n    multivariate distributions.\n    ')

    @norecursion
    def random_state(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'random_state'
        module_type_store = module_type_store.open_function_context('random_state', 217, 4, False)
        # Assigning a type to the variable 'self' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_localization', localization)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_type_store', module_type_store)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_function_name', 'multi_rv_frozen.random_state')
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_param_names_list', [])
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_varargs_param_name', None)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_call_defaults', defaults)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_call_varargs', varargs)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multi_rv_frozen.random_state', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'random_state', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'random_state(...)' code ##################

        # Getting the type of 'self' (line 219)
        self_619005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 15), 'self')
        # Obtaining the member '_dist' of a type (line 219)
        _dist_619006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 15), self_619005, '_dist')
        # Obtaining the member '_random_state' of a type (line 219)
        _random_state_619007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 15), _dist_619006, '_random_state')
        # Assigning a type to the variable 'stypy_return_type' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 8), 'stypy_return_type', _random_state_619007)
        
        # ################# End of 'random_state(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'random_state' in the type store
        # Getting the type of 'stypy_return_type' (line 217)
        stypy_return_type_619008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619008)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'random_state'
        return stypy_return_type_619008


    @norecursion
    def random_state(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'random_state'
        module_type_store = module_type_store.open_function_context('random_state', 221, 4, False)
        # Assigning a type to the variable 'self' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_localization', localization)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_type_store', module_type_store)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_function_name', 'multi_rv_frozen.random_state')
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_param_names_list', ['seed'])
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_varargs_param_name', None)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_call_defaults', defaults)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_call_varargs', varargs)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multi_rv_frozen.random_state.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multi_rv_frozen.random_state', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'random_state', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'random_state(...)' code ##################

        
        # Assigning a Call to a Attribute (line 223):
        
        # Assigning a Call to a Attribute (line 223):
        
        # Call to check_random_state(...): (line 223)
        # Processing the call arguments (line 223)
        # Getting the type of 'seed' (line 223)
        seed_619010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 54), 'seed', False)
        # Processing the call keyword arguments (line 223)
        kwargs_619011 = {}
        # Getting the type of 'check_random_state' (line 223)
        check_random_state_619009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 35), 'check_random_state', False)
        # Calling check_random_state(args, kwargs) (line 223)
        check_random_state_call_result_619012 = invoke(stypy.reporting.localization.Localization(__file__, 223, 35), check_random_state_619009, *[seed_619010], **kwargs_619011)
        
        # Getting the type of 'self' (line 223)
        self_619013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 8), 'self')
        # Obtaining the member '_dist' of a type (line 223)
        _dist_619014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 8), self_619013, '_dist')
        # Setting the type of the member '_random_state' of a type (line 223)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 8), _dist_619014, '_random_state', check_random_state_call_result_619012)
        
        # ################# End of 'random_state(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'random_state' in the type store
        # Getting the type of 'stypy_return_type' (line 221)
        stypy_return_type_619015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619015)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'random_state'
        return stypy_return_type_619015


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 212, 0, False)
        # Assigning a type to the variable 'self' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multi_rv_frozen.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'multi_rv_frozen' (line 212)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 0), 'multi_rv_frozen', multi_rv_frozen)

# Assigning a Str to a Name (line 225):

# Assigning a Str to a Name (line 225):
str_619016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, (-1)), 'str', 'mean : array_like, optional\n    Mean of the distribution (default zero)\ncov : array_like, optional\n    Covariance matrix of the distribution (default one)\nallow_singular : bool, optional\n    Whether to allow a singular covariance matrix.  (Default: False)\n')
# Assigning a type to the variable '_mvn_doc_default_callparams' (line 225)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 0), '_mvn_doc_default_callparams', str_619016)

# Assigning a Str to a Name (line 234):

# Assigning a Str to a Name (line 234):
str_619017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, (-1)), 'str', 'Setting the parameter `mean` to `None` is equivalent to having `mean`\n    be the zero-vector. The parameter `cov` can be a scalar, in which case\n    the covariance matrix is the identity times that value, a vector of\n    diagonal entries for the covariance matrix, or a two-dimensional\n    array_like.\n    ')
# Assigning a type to the variable '_mvn_doc_callparams_note' (line 234)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 0), '_mvn_doc_callparams_note', str_619017)

# Assigning a Str to a Name (line 242):

# Assigning a Str to a Name (line 242):
str_619018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 242, 29), 'str', '')
# Assigning a type to the variable '_mvn_doc_frozen_callparams' (line 242)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 0), '_mvn_doc_frozen_callparams', str_619018)

# Assigning a Str to a Name (line 244):

# Assigning a Str to a Name (line 244):
str_619019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, 4), 'str', 'See class definition for a detailed description of parameters.')
# Assigning a type to the variable '_mvn_doc_frozen_callparams_note' (line 244)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 0), '_mvn_doc_frozen_callparams_note', str_619019)

# Assigning a Dict to a Name (line 247):

# Assigning a Dict to a Name (line 247):

# Obtaining an instance of the builtin type 'dict' (line 247)
dict_619020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 21), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 247)
# Adding element type (key, value) (line 247)
str_619021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 4), 'str', '_mvn_doc_default_callparams')
# Getting the type of '_mvn_doc_default_callparams' (line 248)
_mvn_doc_default_callparams_619022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 35), '_mvn_doc_default_callparams')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 247, 21), dict_619020, (str_619021, _mvn_doc_default_callparams_619022))
# Adding element type (key, value) (line 247)
str_619023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 4), 'str', '_mvn_doc_callparams_note')
# Getting the type of '_mvn_doc_callparams_note' (line 249)
_mvn_doc_callparams_note_619024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 32), '_mvn_doc_callparams_note')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 247, 21), dict_619020, (str_619023, _mvn_doc_callparams_note_619024))
# Adding element type (key, value) (line 247)
str_619025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 4), 'str', '_doc_random_state')
# Getting the type of '_doc_random_state' (line 250)
_doc_random_state_619026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 25), '_doc_random_state')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 247, 21), dict_619020, (str_619025, _doc_random_state_619026))

# Assigning a type to the variable 'mvn_docdict_params' (line 247)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 0), 'mvn_docdict_params', dict_619020)

# Assigning a Dict to a Name (line 253):

# Assigning a Dict to a Name (line 253):

# Obtaining an instance of the builtin type 'dict' (line 253)
dict_619027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 23), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 253)
# Adding element type (key, value) (line 253)
str_619028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 4), 'str', '_mvn_doc_default_callparams')
# Getting the type of '_mvn_doc_frozen_callparams' (line 254)
_mvn_doc_frozen_callparams_619029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 35), '_mvn_doc_frozen_callparams')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 253, 23), dict_619027, (str_619028, _mvn_doc_frozen_callparams_619029))
# Adding element type (key, value) (line 253)
str_619030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 4), 'str', '_mvn_doc_callparams_note')
# Getting the type of '_mvn_doc_frozen_callparams_note' (line 255)
_mvn_doc_frozen_callparams_note_619031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 32), '_mvn_doc_frozen_callparams_note')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 253, 23), dict_619027, (str_619030, _mvn_doc_frozen_callparams_note_619031))
# Adding element type (key, value) (line 253)
str_619032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 4), 'str', '_doc_random_state')
# Getting the type of '_doc_random_state' (line 256)
_doc_random_state_619033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 25), '_doc_random_state')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 253, 23), dict_619027, (str_619032, _doc_random_state_619033))

# Assigning a type to the variable 'mvn_docdict_noparams' (line 253)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 0), 'mvn_docdict_noparams', dict_619027)
# Declaration of the 'multivariate_normal_gen' class
# Getting the type of 'multi_rv_generic' (line 259)
multi_rv_generic_619034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 30), 'multi_rv_generic')

class multivariate_normal_gen(multi_rv_generic_619034, ):
    str_619035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, (-1)), 'str', '\n    A multivariate normal random variable.\n\n    The `mean` keyword specifies the mean. The `cov` keyword specifies the\n    covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, mean=None, cov=1, allow_singular=False)``\n        Probability density function.\n    ``logpdf(x, mean=None, cov=1, allow_singular=False)``\n        Log of the probability density function.\n    ``cdf(x, mean=None, cov=1, allow_singular=False, maxpts=1000000*dim, abseps=1e-5, releps=1e-5)``\n        Cumulative distribution function.\n    ``logcdf(x, mean=None, cov=1, allow_singular=False, maxpts=1000000*dim, abseps=1e-5, releps=1e-5)``\n        Log of the cumulative distribution function.\n    ``rvs(mean=None, cov=1, size=1, random_state=None)``\n        Draw random samples from a multivariate normal distribution.\n    ``entropy()``\n        Compute the differential entropy of the multivariate normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    %(_mvn_doc_default_callparams)s\n    %(_doc_random_state)s\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" multivariate normal\n    random variable:\n\n    rv = multivariate_normal(mean=None, cov=1, allow_singular=False)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    %(_mvn_doc_callparams_note)s\n\n    The covariance matrix `cov` must be a (symmetric) positive\n    semi-definite matrix. The determinant and inverse of `cov` are computed\n    as the pseudo-determinant and pseudo-inverse, respectively, so\n    that `cov` does not need to have full rank.\n\n    The probability density function for `multivariate_normal` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\sqrt{(2 \\pi)^k \\det \\Sigma}}\n               \\exp\\left( -\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu) \\right),\n\n    where :math:`\\mu` is the mean, :math:`\\Sigma` the covariance matrix,\n    and :math:`k` is the dimension of the space where :math:`x` takes values.\n\n    .. versionadded:: 0.14.0\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import multivariate_normal\n\n    >>> x = np.linspace(0, 5, 10, endpoint=False)\n    >>> y = multivariate_normal.pdf(x, mean=2.5, cov=0.5); y\n    array([ 0.00108914,  0.01033349,  0.05946514,  0.20755375,  0.43939129,\n            0.56418958,  0.43939129,  0.20755375,  0.05946514,  0.01033349])\n    >>> fig1 = plt.figure()\n    >>> ax = fig1.add_subplot(111)\n    >>> ax.plot(x, y)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.  This allows us for instance to\n    display the frozen pdf for a non-isotropic random variable in 2D as\n    follows:\n\n    >>> x, y = np.mgrid[-1:1:.01, -1:1:.01]\n    >>> pos = np.dstack((x, y))\n    >>> rv = multivariate_normal([0.5, -0.2], [[2.0, 0.3], [0.3, 0.5]])\n    >>> fig2 = plt.figure()\n    >>> ax2 = fig2.add_subplot(111)\n    >>> ax2.contourf(x, y, rv.pdf(pos))\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 344)
        None_619036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 28), 'None')
        defaults = [None_619036]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 344, 4, False)
        # Assigning a type to the variable 'self' (line 345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen.__init__', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 345)
        # Processing the call arguments (line 345)
        # Getting the type of 'seed' (line 345)
        seed_619043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 54), 'seed', False)
        # Processing the call keyword arguments (line 345)
        kwargs_619044 = {}
        
        # Call to super(...): (line 345)
        # Processing the call arguments (line 345)
        # Getting the type of 'multivariate_normal_gen' (line 345)
        multivariate_normal_gen_619038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 14), 'multivariate_normal_gen', False)
        # Getting the type of 'self' (line 345)
        self_619039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 39), 'self', False)
        # Processing the call keyword arguments (line 345)
        kwargs_619040 = {}
        # Getting the type of 'super' (line 345)
        super_619037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'super', False)
        # Calling super(args, kwargs) (line 345)
        super_call_result_619041 = invoke(stypy.reporting.localization.Localization(__file__, 345, 8), super_619037, *[multivariate_normal_gen_619038, self_619039], **kwargs_619040)
        
        # Obtaining the member '__init__' of a type (line 345)
        init___619042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 8), super_call_result_619041, '__init__')
        # Calling __init__(args, kwargs) (line 345)
        init___call_result_619045 = invoke(stypy.reporting.localization.Localization(__file__, 345, 8), init___619042, *[seed_619043], **kwargs_619044)
        
        
        # Assigning a Call to a Attribute (line 346):
        
        # Assigning a Call to a Attribute (line 346):
        
        # Call to docformat(...): (line 346)
        # Processing the call arguments (line 346)
        # Getting the type of 'self' (line 346)
        self_619048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 40), 'self', False)
        # Obtaining the member '__doc__' of a type (line 346)
        doc___619049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 40), self_619048, '__doc__')
        # Getting the type of 'mvn_docdict_params' (line 346)
        mvn_docdict_params_619050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 54), 'mvn_docdict_params', False)
        # Processing the call keyword arguments (line 346)
        kwargs_619051 = {}
        # Getting the type of 'doccer' (line 346)
        doccer_619046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 23), 'doccer', False)
        # Obtaining the member 'docformat' of a type (line 346)
        docformat_619047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 23), doccer_619046, 'docformat')
        # Calling docformat(args, kwargs) (line 346)
        docformat_call_result_619052 = invoke(stypy.reporting.localization.Localization(__file__, 346, 23), docformat_619047, *[doc___619049, mvn_docdict_params_619050], **kwargs_619051)
        
        # Getting the type of 'self' (line 346)
        self_619053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 346)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 8), self_619053, '__doc__', docformat_call_result_619052)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 348)
        None_619054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 28), 'None')
        int_619055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 38), 'int')
        # Getting the type of 'False' (line 348)
        False_619056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 56), 'False')
        # Getting the type of 'None' (line 348)
        None_619057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 68), 'None')
        defaults = [None_619054, int_619055, False_619056, None_619057]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 348, 4, False)
        # Assigning a type to the variable 'self' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_gen.__call__.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_gen.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_gen.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_gen.__call__.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_gen.__call__')
        multivariate_normal_gen.__call__.__dict__.__setitem__('stypy_param_names_list', ['mean', 'cov', 'allow_singular', 'seed'])
        multivariate_normal_gen.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_gen.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_gen.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_gen.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_gen.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_gen.__call__.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen.__call__', ['mean', 'cov', 'allow_singular', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['mean', 'cov', 'allow_singular', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_619058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, (-1)), 'str', '\n        Create a frozen multivariate normal distribution.\n\n        See `multivariate_normal_frozen` for more information.\n\n        ')
        
        # Call to multivariate_normal_frozen(...): (line 355)
        # Processing the call arguments (line 355)
        # Getting the type of 'mean' (line 355)
        mean_619060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 42), 'mean', False)
        # Getting the type of 'cov' (line 355)
        cov_619061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 48), 'cov', False)
        # Processing the call keyword arguments (line 355)
        # Getting the type of 'allow_singular' (line 356)
        allow_singular_619062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 57), 'allow_singular', False)
        keyword_619063 = allow_singular_619062
        # Getting the type of 'seed' (line 357)
        seed_619064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 47), 'seed', False)
        keyword_619065 = seed_619064
        kwargs_619066 = {'allow_singular': keyword_619063, 'seed': keyword_619065}
        # Getting the type of 'multivariate_normal_frozen' (line 355)
        multivariate_normal_frozen_619059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 15), 'multivariate_normal_frozen', False)
        # Calling multivariate_normal_frozen(args, kwargs) (line 355)
        multivariate_normal_frozen_call_result_619067 = invoke(stypy.reporting.localization.Localization(__file__, 355, 15), multivariate_normal_frozen_619059, *[mean_619060, cov_619061], **kwargs_619066)
        
        # Assigning a type to the variable 'stypy_return_type' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'stypy_return_type', multivariate_normal_frozen_call_result_619067)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 348)
        stypy_return_type_619068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619068)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_619068


    @norecursion
    def _process_parameters(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_parameters'
        module_type_store = module_type_store.open_function_context('_process_parameters', 359, 4, False)
        # Assigning a type to the variable 'self' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_gen._process_parameters.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_gen._process_parameters.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_gen._process_parameters.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_gen._process_parameters.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_gen._process_parameters')
        multivariate_normal_gen._process_parameters.__dict__.__setitem__('stypy_param_names_list', ['dim', 'mean', 'cov'])
        multivariate_normal_gen._process_parameters.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_gen._process_parameters.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_gen._process_parameters.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_gen._process_parameters.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_gen._process_parameters.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_gen._process_parameters.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen._process_parameters', ['dim', 'mean', 'cov'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_parameters', localization, ['dim', 'mean', 'cov'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_parameters(...)' code ##################

        str_619069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, (-1)), 'str', '\n        Infer dimensionality from mean or covariance matrix, ensure that\n        mean and covariance are full vector resp. matrix.\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 367)
        # Getting the type of 'dim' (line 367)
        dim_619070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 11), 'dim')
        # Getting the type of 'None' (line 367)
        None_619071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 18), 'None')
        
        (may_be_619072, more_types_in_union_619073) = may_be_none(dim_619070, None_619071)

        if may_be_619072:

            if more_types_in_union_619073:
                # Runtime conditional SSA (line 367)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Type idiom detected: calculating its left and rigth part (line 368)
            # Getting the type of 'mean' (line 368)
            mean_619074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 15), 'mean')
            # Getting the type of 'None' (line 368)
            None_619075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 23), 'None')
            
            (may_be_619076, more_types_in_union_619077) = may_be_none(mean_619074, None_619075)

            if may_be_619076:

                if more_types_in_union_619077:
                    # Runtime conditional SSA (line 368)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Type idiom detected: calculating its left and rigth part (line 369)
                # Getting the type of 'cov' (line 369)
                cov_619078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 19), 'cov')
                # Getting the type of 'None' (line 369)
                None_619079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 26), 'None')
                
                (may_be_619080, more_types_in_union_619081) = may_be_none(cov_619078, None_619079)

                if may_be_619080:

                    if more_types_in_union_619081:
                        # Runtime conditional SSA (line 369)
                        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                    else:
                        module_type_store = module_type_store

                    
                    # Assigning a Num to a Name (line 370):
                    
                    # Assigning a Num to a Name (line 370):
                    int_619082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 26), 'int')
                    # Assigning a type to the variable 'dim' (line 370)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 20), 'dim', int_619082)

                    if more_types_in_union_619081:
                        # Runtime conditional SSA for else branch (line 369)
                        module_type_store.open_ssa_branch('idiom else')



                if ((not may_be_619080) or more_types_in_union_619081):
                    
                    # Assigning a Call to a Name (line 372):
                    
                    # Assigning a Call to a Name (line 372):
                    
                    # Call to asarray(...): (line 372)
                    # Processing the call arguments (line 372)
                    # Getting the type of 'cov' (line 372)
                    cov_619085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 37), 'cov', False)
                    # Processing the call keyword arguments (line 372)
                    # Getting the type of 'float' (line 372)
                    float_619086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 48), 'float', False)
                    keyword_619087 = float_619086
                    kwargs_619088 = {'dtype': keyword_619087}
                    # Getting the type of 'np' (line 372)
                    np_619083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 26), 'np', False)
                    # Obtaining the member 'asarray' of a type (line 372)
                    asarray_619084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 26), np_619083, 'asarray')
                    # Calling asarray(args, kwargs) (line 372)
                    asarray_call_result_619089 = invoke(stypy.reporting.localization.Localization(__file__, 372, 26), asarray_619084, *[cov_619085], **kwargs_619088)
                    
                    # Assigning a type to the variable 'cov' (line 372)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 20), 'cov', asarray_call_result_619089)
                    
                    
                    # Getting the type of 'cov' (line 373)
                    cov_619090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 23), 'cov')
                    # Obtaining the member 'ndim' of a type (line 373)
                    ndim_619091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 23), cov_619090, 'ndim')
                    int_619092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 34), 'int')
                    # Applying the binary operator '<' (line 373)
                    result_lt_619093 = python_operator(stypy.reporting.localization.Localization(__file__, 373, 23), '<', ndim_619091, int_619092)
                    
                    # Testing the type of an if condition (line 373)
                    if_condition_619094 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 373, 20), result_lt_619093)
                    # Assigning a type to the variable 'if_condition_619094' (line 373)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 20), 'if_condition_619094', if_condition_619094)
                    # SSA begins for if statement (line 373)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                    
                    # Assigning a Num to a Name (line 374):
                    
                    # Assigning a Num to a Name (line 374):
                    int_619095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 30), 'int')
                    # Assigning a type to the variable 'dim' (line 374)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 24), 'dim', int_619095)
                    # SSA branch for the else part of an if statement (line 373)
                    module_type_store.open_ssa_branch('else')
                    
                    # Assigning a Subscript to a Name (line 376):
                    
                    # Assigning a Subscript to a Name (line 376):
                    
                    # Obtaining the type of the subscript
                    int_619096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 40), 'int')
                    # Getting the type of 'cov' (line 376)
                    cov_619097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 30), 'cov')
                    # Obtaining the member 'shape' of a type (line 376)
                    shape_619098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 30), cov_619097, 'shape')
                    # Obtaining the member '__getitem__' of a type (line 376)
                    getitem___619099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 30), shape_619098, '__getitem__')
                    # Calling the subscript (__getitem__) to obtain the elements type (line 376)
                    subscript_call_result_619100 = invoke(stypy.reporting.localization.Localization(__file__, 376, 30), getitem___619099, int_619096)
                    
                    # Assigning a type to the variable 'dim' (line 376)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 24), 'dim', subscript_call_result_619100)
                    # SSA join for if statement (line 373)
                    module_type_store = module_type_store.join_ssa_context()
                    

                    if (may_be_619080 and more_types_in_union_619081):
                        # SSA join for if statement (line 369)
                        module_type_store = module_type_store.join_ssa_context()


                

                if more_types_in_union_619077:
                    # Runtime conditional SSA for else branch (line 368)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_619076) or more_types_in_union_619077):
                
                # Assigning a Call to a Name (line 378):
                
                # Assigning a Call to a Name (line 378):
                
                # Call to asarray(...): (line 378)
                # Processing the call arguments (line 378)
                # Getting the type of 'mean' (line 378)
                mean_619103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 34), 'mean', False)
                # Processing the call keyword arguments (line 378)
                # Getting the type of 'float' (line 378)
                float_619104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 46), 'float', False)
                keyword_619105 = float_619104
                kwargs_619106 = {'dtype': keyword_619105}
                # Getting the type of 'np' (line 378)
                np_619101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 23), 'np', False)
                # Obtaining the member 'asarray' of a type (line 378)
                asarray_619102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 23), np_619101, 'asarray')
                # Calling asarray(args, kwargs) (line 378)
                asarray_call_result_619107 = invoke(stypy.reporting.localization.Localization(__file__, 378, 23), asarray_619102, *[mean_619103], **kwargs_619106)
                
                # Assigning a type to the variable 'mean' (line 378)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 16), 'mean', asarray_call_result_619107)
                
                # Assigning a Attribute to a Name (line 379):
                
                # Assigning a Attribute to a Name (line 379):
                # Getting the type of 'mean' (line 379)
                mean_619108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 22), 'mean')
                # Obtaining the member 'size' of a type (line 379)
                size_619109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 22), mean_619108, 'size')
                # Assigning a type to the variable 'dim' (line 379)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 16), 'dim', size_619109)

                if (may_be_619076 and more_types_in_union_619077):
                    # SSA join for if statement (line 368)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_619073:
                # Runtime conditional SSA for else branch (line 367)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_619072) or more_types_in_union_619073):
            
            
            
            # Call to isscalar(...): (line 381)
            # Processing the call arguments (line 381)
            # Getting the type of 'dim' (line 381)
            dim_619112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 31), 'dim', False)
            # Processing the call keyword arguments (line 381)
            kwargs_619113 = {}
            # Getting the type of 'np' (line 381)
            np_619110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 19), 'np', False)
            # Obtaining the member 'isscalar' of a type (line 381)
            isscalar_619111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 19), np_619110, 'isscalar')
            # Calling isscalar(args, kwargs) (line 381)
            isscalar_call_result_619114 = invoke(stypy.reporting.localization.Localization(__file__, 381, 19), isscalar_619111, *[dim_619112], **kwargs_619113)
            
            # Applying the 'not' unary operator (line 381)
            result_not__619115 = python_operator(stypy.reporting.localization.Localization(__file__, 381, 15), 'not', isscalar_call_result_619114)
            
            # Testing the type of an if condition (line 381)
            if_condition_619116 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 381, 12), result_not__619115)
            # Assigning a type to the variable 'if_condition_619116' (line 381)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 12), 'if_condition_619116', if_condition_619116)
            # SSA begins for if statement (line 381)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 382)
            # Processing the call arguments (line 382)
            str_619118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 33), 'str', 'Dimension of random variable must be a scalar.')
            # Processing the call keyword arguments (line 382)
            kwargs_619119 = {}
            # Getting the type of 'ValueError' (line 382)
            ValueError_619117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 382)
            ValueError_call_result_619120 = invoke(stypy.reporting.localization.Localization(__file__, 382, 22), ValueError_619117, *[str_619118], **kwargs_619119)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 382, 16), ValueError_call_result_619120, 'raise parameter', BaseException)
            # SSA join for if statement (line 381)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_619072 and more_types_in_union_619073):
                # SSA join for if statement (line 367)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 385)
        # Getting the type of 'mean' (line 385)
        mean_619121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 11), 'mean')
        # Getting the type of 'None' (line 385)
        None_619122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 19), 'None')
        
        (may_be_619123, more_types_in_union_619124) = may_be_none(mean_619121, None_619122)

        if may_be_619123:

            if more_types_in_union_619124:
                # Runtime conditional SSA (line 385)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 386):
            
            # Assigning a Call to a Name (line 386):
            
            # Call to zeros(...): (line 386)
            # Processing the call arguments (line 386)
            # Getting the type of 'dim' (line 386)
            dim_619127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 28), 'dim', False)
            # Processing the call keyword arguments (line 386)
            kwargs_619128 = {}
            # Getting the type of 'np' (line 386)
            np_619125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 19), 'np', False)
            # Obtaining the member 'zeros' of a type (line 386)
            zeros_619126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 19), np_619125, 'zeros')
            # Calling zeros(args, kwargs) (line 386)
            zeros_call_result_619129 = invoke(stypy.reporting.localization.Localization(__file__, 386, 19), zeros_619126, *[dim_619127], **kwargs_619128)
            
            # Assigning a type to the variable 'mean' (line 386)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'mean', zeros_call_result_619129)

            if more_types_in_union_619124:
                # SSA join for if statement (line 385)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 387):
        
        # Assigning a Call to a Name (line 387):
        
        # Call to asarray(...): (line 387)
        # Processing the call arguments (line 387)
        # Getting the type of 'mean' (line 387)
        mean_619132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 26), 'mean', False)
        # Processing the call keyword arguments (line 387)
        # Getting the type of 'float' (line 387)
        float_619133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 38), 'float', False)
        keyword_619134 = float_619133
        kwargs_619135 = {'dtype': keyword_619134}
        # Getting the type of 'np' (line 387)
        np_619130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 15), 'np', False)
        # Obtaining the member 'asarray' of a type (line 387)
        asarray_619131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 15), np_619130, 'asarray')
        # Calling asarray(args, kwargs) (line 387)
        asarray_call_result_619136 = invoke(stypy.reporting.localization.Localization(__file__, 387, 15), asarray_619131, *[mean_619132], **kwargs_619135)
        
        # Assigning a type to the variable 'mean' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 8), 'mean', asarray_call_result_619136)
        
        # Type idiom detected: calculating its left and rigth part (line 389)
        # Getting the type of 'cov' (line 389)
        cov_619137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 11), 'cov')
        # Getting the type of 'None' (line 389)
        None_619138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 18), 'None')
        
        (may_be_619139, more_types_in_union_619140) = may_be_none(cov_619137, None_619138)

        if may_be_619139:

            if more_types_in_union_619140:
                # Runtime conditional SSA (line 389)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Num to a Name (line 390):
            
            # Assigning a Num to a Name (line 390):
            float_619141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 18), 'float')
            # Assigning a type to the variable 'cov' (line 390)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'cov', float_619141)

            if more_types_in_union_619140:
                # SSA join for if statement (line 389)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 391):
        
        # Assigning a Call to a Name (line 391):
        
        # Call to asarray(...): (line 391)
        # Processing the call arguments (line 391)
        # Getting the type of 'cov' (line 391)
        cov_619144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 25), 'cov', False)
        # Processing the call keyword arguments (line 391)
        # Getting the type of 'float' (line 391)
        float_619145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 36), 'float', False)
        keyword_619146 = float_619145
        kwargs_619147 = {'dtype': keyword_619146}
        # Getting the type of 'np' (line 391)
        np_619142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 14), 'np', False)
        # Obtaining the member 'asarray' of a type (line 391)
        asarray_619143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 14), np_619142, 'asarray')
        # Calling asarray(args, kwargs) (line 391)
        asarray_call_result_619148 = invoke(stypy.reporting.localization.Localization(__file__, 391, 14), asarray_619143, *[cov_619144], **kwargs_619147)
        
        # Assigning a type to the variable 'cov' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'cov', asarray_call_result_619148)
        
        
        # Getting the type of 'dim' (line 393)
        dim_619149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 11), 'dim')
        int_619150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 18), 'int')
        # Applying the binary operator '==' (line 393)
        result_eq_619151 = python_operator(stypy.reporting.localization.Localization(__file__, 393, 11), '==', dim_619149, int_619150)
        
        # Testing the type of an if condition (line 393)
        if_condition_619152 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 393, 8), result_eq_619151)
        # Assigning a type to the variable 'if_condition_619152' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'if_condition_619152', if_condition_619152)
        # SSA begins for if statement (line 393)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 394):
        
        # Assigning a Tuple to a Attribute (line 394):
        
        # Obtaining an instance of the builtin type 'tuple' (line 394)
        tuple_619153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 394)
        # Adding element type (line 394)
        int_619154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 394, 26), tuple_619153, int_619154)
        
        # Getting the type of 'mean' (line 394)
        mean_619155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 12), 'mean')
        # Setting the type of the member 'shape' of a type (line 394)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 12), mean_619155, 'shape', tuple_619153)
        
        # Assigning a Tuple to a Attribute (line 395):
        
        # Assigning a Tuple to a Attribute (line 395):
        
        # Obtaining an instance of the builtin type 'tuple' (line 395)
        tuple_619156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 395)
        # Adding element type (line 395)
        int_619157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 395, 25), tuple_619156, int_619157)
        # Adding element type (line 395)
        int_619158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 395, 25), tuple_619156, int_619158)
        
        # Getting the type of 'cov' (line 395)
        cov_619159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 12), 'cov')
        # Setting the type of the member 'shape' of a type (line 395)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 395, 12), cov_619159, 'shape', tuple_619156)
        # SSA join for if statement (line 393)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'mean' (line 397)
        mean_619160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 11), 'mean')
        # Obtaining the member 'ndim' of a type (line 397)
        ndim_619161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 11), mean_619160, 'ndim')
        int_619162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 24), 'int')
        # Applying the binary operator '!=' (line 397)
        result_ne_619163 = python_operator(stypy.reporting.localization.Localization(__file__, 397, 11), '!=', ndim_619161, int_619162)
        
        
        
        # Obtaining the type of the subscript
        int_619164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 40), 'int')
        # Getting the type of 'mean' (line 397)
        mean_619165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 29), 'mean')
        # Obtaining the member 'shape' of a type (line 397)
        shape_619166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 29), mean_619165, 'shape')
        # Obtaining the member '__getitem__' of a type (line 397)
        getitem___619167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 29), shape_619166, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 397)
        subscript_call_result_619168 = invoke(stypy.reporting.localization.Localization(__file__, 397, 29), getitem___619167, int_619164)
        
        # Getting the type of 'dim' (line 397)
        dim_619169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 46), 'dim')
        # Applying the binary operator '!=' (line 397)
        result_ne_619170 = python_operator(stypy.reporting.localization.Localization(__file__, 397, 29), '!=', subscript_call_result_619168, dim_619169)
        
        # Applying the binary operator 'or' (line 397)
        result_or_keyword_619171 = python_operator(stypy.reporting.localization.Localization(__file__, 397, 11), 'or', result_ne_619163, result_ne_619170)
        
        # Testing the type of an if condition (line 397)
        if_condition_619172 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 397, 8), result_or_keyword_619171)
        # Assigning a type to the variable 'if_condition_619172' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 8), 'if_condition_619172', if_condition_619172)
        # SSA begins for if statement (line 397)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 398)
        # Processing the call arguments (line 398)
        str_619174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 29), 'str', "Array 'mean' must be a vector of length %d.")
        # Getting the type of 'dim' (line 398)
        dim_619175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 77), 'dim', False)
        # Applying the binary operator '%' (line 398)
        result_mod_619176 = python_operator(stypy.reporting.localization.Localization(__file__, 398, 29), '%', str_619174, dim_619175)
        
        # Processing the call keyword arguments (line 398)
        kwargs_619177 = {}
        # Getting the type of 'ValueError' (line 398)
        ValueError_619173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 398)
        ValueError_call_result_619178 = invoke(stypy.reporting.localization.Localization(__file__, 398, 18), ValueError_619173, *[result_mod_619176], **kwargs_619177)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 398, 12), ValueError_call_result_619178, 'raise parameter', BaseException)
        # SSA join for if statement (line 397)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'cov' (line 399)
        cov_619179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 11), 'cov')
        # Obtaining the member 'ndim' of a type (line 399)
        ndim_619180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 11), cov_619179, 'ndim')
        int_619181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 23), 'int')
        # Applying the binary operator '==' (line 399)
        result_eq_619182 = python_operator(stypy.reporting.localization.Localization(__file__, 399, 11), '==', ndim_619180, int_619181)
        
        # Testing the type of an if condition (line 399)
        if_condition_619183 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 399, 8), result_eq_619182)
        # Assigning a type to the variable 'if_condition_619183' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 8), 'if_condition_619183', if_condition_619183)
        # SSA begins for if statement (line 399)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 400):
        
        # Assigning a BinOp to a Name (line 400):
        # Getting the type of 'cov' (line 400)
        cov_619184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 18), 'cov')
        
        # Call to eye(...): (line 400)
        # Processing the call arguments (line 400)
        # Getting the type of 'dim' (line 400)
        dim_619187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 31), 'dim', False)
        # Processing the call keyword arguments (line 400)
        kwargs_619188 = {}
        # Getting the type of 'np' (line 400)
        np_619185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 24), 'np', False)
        # Obtaining the member 'eye' of a type (line 400)
        eye_619186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 24), np_619185, 'eye')
        # Calling eye(args, kwargs) (line 400)
        eye_call_result_619189 = invoke(stypy.reporting.localization.Localization(__file__, 400, 24), eye_619186, *[dim_619187], **kwargs_619188)
        
        # Applying the binary operator '*' (line 400)
        result_mul_619190 = python_operator(stypy.reporting.localization.Localization(__file__, 400, 18), '*', cov_619184, eye_call_result_619189)
        
        # Assigning a type to the variable 'cov' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 12), 'cov', result_mul_619190)
        # SSA branch for the else part of an if statement (line 399)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'cov' (line 401)
        cov_619191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 13), 'cov')
        # Obtaining the member 'ndim' of a type (line 401)
        ndim_619192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 13), cov_619191, 'ndim')
        int_619193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 25), 'int')
        # Applying the binary operator '==' (line 401)
        result_eq_619194 = python_operator(stypy.reporting.localization.Localization(__file__, 401, 13), '==', ndim_619192, int_619193)
        
        # Testing the type of an if condition (line 401)
        if_condition_619195 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 401, 13), result_eq_619194)
        # Assigning a type to the variable 'if_condition_619195' (line 401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 13), 'if_condition_619195', if_condition_619195)
        # SSA begins for if statement (line 401)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 402):
        
        # Assigning a Call to a Name (line 402):
        
        # Call to diag(...): (line 402)
        # Processing the call arguments (line 402)
        # Getting the type of 'cov' (line 402)
        cov_619198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 26), 'cov', False)
        # Processing the call keyword arguments (line 402)
        kwargs_619199 = {}
        # Getting the type of 'np' (line 402)
        np_619196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 18), 'np', False)
        # Obtaining the member 'diag' of a type (line 402)
        diag_619197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 18), np_619196, 'diag')
        # Calling diag(args, kwargs) (line 402)
        diag_call_result_619200 = invoke(stypy.reporting.localization.Localization(__file__, 402, 18), diag_619197, *[cov_619198], **kwargs_619199)
        
        # Assigning a type to the variable 'cov' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 12), 'cov', diag_call_result_619200)
        # SSA branch for the else part of an if statement (line 401)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'cov' (line 403)
        cov_619201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 13), 'cov')
        # Obtaining the member 'ndim' of a type (line 403)
        ndim_619202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 13), cov_619201, 'ndim')
        int_619203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 25), 'int')
        # Applying the binary operator '==' (line 403)
        result_eq_619204 = python_operator(stypy.reporting.localization.Localization(__file__, 403, 13), '==', ndim_619202, int_619203)
        
        
        # Getting the type of 'cov' (line 403)
        cov_619205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 31), 'cov')
        # Obtaining the member 'shape' of a type (line 403)
        shape_619206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 31), cov_619205, 'shape')
        
        # Obtaining an instance of the builtin type 'tuple' (line 403)
        tuple_619207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 403)
        # Adding element type (line 403)
        # Getting the type of 'dim' (line 403)
        dim_619208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 45), 'dim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 45), tuple_619207, dim_619208)
        # Adding element type (line 403)
        # Getting the type of 'dim' (line 403)
        dim_619209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 50), 'dim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 45), tuple_619207, dim_619209)
        
        # Applying the binary operator '!=' (line 403)
        result_ne_619210 = python_operator(stypy.reporting.localization.Localization(__file__, 403, 31), '!=', shape_619206, tuple_619207)
        
        # Applying the binary operator 'and' (line 403)
        result_and_keyword_619211 = python_operator(stypy.reporting.localization.Localization(__file__, 403, 13), 'and', result_eq_619204, result_ne_619210)
        
        # Testing the type of an if condition (line 403)
        if_condition_619212 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 403, 13), result_and_keyword_619211)
        # Assigning a type to the variable 'if_condition_619212' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 13), 'if_condition_619212', if_condition_619212)
        # SSA begins for if statement (line 403)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 404):
        
        # Assigning a Subscript to a Name (line 404):
        
        # Obtaining the type of the subscript
        int_619213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 12), 'int')
        # Getting the type of 'cov' (line 404)
        cov_619214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 25), 'cov')
        # Obtaining the member 'shape' of a type (line 404)
        shape_619215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 25), cov_619214, 'shape')
        # Obtaining the member '__getitem__' of a type (line 404)
        getitem___619216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 12), shape_619215, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 404)
        subscript_call_result_619217 = invoke(stypy.reporting.localization.Localization(__file__, 404, 12), getitem___619216, int_619213)
        
        # Assigning a type to the variable 'tuple_var_assignment_618568' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 12), 'tuple_var_assignment_618568', subscript_call_result_619217)
        
        # Assigning a Subscript to a Name (line 404):
        
        # Obtaining the type of the subscript
        int_619218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 12), 'int')
        # Getting the type of 'cov' (line 404)
        cov_619219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 25), 'cov')
        # Obtaining the member 'shape' of a type (line 404)
        shape_619220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 25), cov_619219, 'shape')
        # Obtaining the member '__getitem__' of a type (line 404)
        getitem___619221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 12), shape_619220, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 404)
        subscript_call_result_619222 = invoke(stypy.reporting.localization.Localization(__file__, 404, 12), getitem___619221, int_619218)
        
        # Assigning a type to the variable 'tuple_var_assignment_618569' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 12), 'tuple_var_assignment_618569', subscript_call_result_619222)
        
        # Assigning a Name to a Name (line 404):
        # Getting the type of 'tuple_var_assignment_618568' (line 404)
        tuple_var_assignment_618568_619223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 12), 'tuple_var_assignment_618568')
        # Assigning a type to the variable 'rows' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 12), 'rows', tuple_var_assignment_618568_619223)
        
        # Assigning a Name to a Name (line 404):
        # Getting the type of 'tuple_var_assignment_618569' (line 404)
        tuple_var_assignment_618569_619224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 12), 'tuple_var_assignment_618569')
        # Assigning a type to the variable 'cols' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 18), 'cols', tuple_var_assignment_618569_619224)
        
        
        # Getting the type of 'rows' (line 405)
        rows_619225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 15), 'rows')
        # Getting the type of 'cols' (line 405)
        cols_619226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 23), 'cols')
        # Applying the binary operator '!=' (line 405)
        result_ne_619227 = python_operator(stypy.reporting.localization.Localization(__file__, 405, 15), '!=', rows_619225, cols_619226)
        
        # Testing the type of an if condition (line 405)
        if_condition_619228 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 405, 12), result_ne_619227)
        # Assigning a type to the variable 'if_condition_619228' (line 405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 12), 'if_condition_619228', if_condition_619228)
        # SSA begins for if statement (line 405)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 406):
        
        # Assigning a BinOp to a Name (line 406):
        str_619229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 23), 'str', "Array 'cov' must be square if it is two dimensional, but cov.shape = %s.")
        
        # Call to str(...): (line 407)
        # Processing the call arguments (line 407)
        # Getting the type of 'cov' (line 407)
        cov_619231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 52), 'cov', False)
        # Obtaining the member 'shape' of a type (line 407)
        shape_619232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 407, 52), cov_619231, 'shape')
        # Processing the call keyword arguments (line 407)
        kwargs_619233 = {}
        # Getting the type of 'str' (line 407)
        str_619230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 48), 'str', False)
        # Calling str(args, kwargs) (line 407)
        str_call_result_619234 = invoke(stypy.reporting.localization.Localization(__file__, 407, 48), str_619230, *[shape_619232], **kwargs_619233)
        
        # Applying the binary operator '%' (line 406)
        result_mod_619235 = python_operator(stypy.reporting.localization.Localization(__file__, 406, 23), '%', str_619229, str_call_result_619234)
        
        # Assigning a type to the variable 'msg' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 16), 'msg', result_mod_619235)
        # SSA branch for the else part of an if statement (line 405)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 409):
        
        # Assigning a Str to a Name (line 409):
        str_619236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 409, 23), 'str', "Dimension mismatch: array 'cov' is of shape %s, but 'mean' is a vector of length %d.")
        # Assigning a type to the variable 'msg' (line 409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 16), 'msg', str_619236)
        
        # Assigning a BinOp to a Name (line 411):
        
        # Assigning a BinOp to a Name (line 411):
        # Getting the type of 'msg' (line 411)
        msg_619237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 22), 'msg')
        
        # Obtaining an instance of the builtin type 'tuple' (line 411)
        tuple_619238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 411)
        # Adding element type (line 411)
        
        # Call to str(...): (line 411)
        # Processing the call arguments (line 411)
        # Getting the type of 'cov' (line 411)
        cov_619240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 33), 'cov', False)
        # Obtaining the member 'shape' of a type (line 411)
        shape_619241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 33), cov_619240, 'shape')
        # Processing the call keyword arguments (line 411)
        kwargs_619242 = {}
        # Getting the type of 'str' (line 411)
        str_619239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 29), 'str', False)
        # Calling str(args, kwargs) (line 411)
        str_call_result_619243 = invoke(stypy.reporting.localization.Localization(__file__, 411, 29), str_619239, *[shape_619241], **kwargs_619242)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 411, 29), tuple_619238, str_call_result_619243)
        # Adding element type (line 411)
        
        # Call to len(...): (line 411)
        # Processing the call arguments (line 411)
        # Getting the type of 'mean' (line 411)
        mean_619245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 49), 'mean', False)
        # Processing the call keyword arguments (line 411)
        kwargs_619246 = {}
        # Getting the type of 'len' (line 411)
        len_619244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 45), 'len', False)
        # Calling len(args, kwargs) (line 411)
        len_call_result_619247 = invoke(stypy.reporting.localization.Localization(__file__, 411, 45), len_619244, *[mean_619245], **kwargs_619246)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 411, 29), tuple_619238, len_call_result_619247)
        
        # Applying the binary operator '%' (line 411)
        result_mod_619248 = python_operator(stypy.reporting.localization.Localization(__file__, 411, 22), '%', msg_619237, tuple_619238)
        
        # Assigning a type to the variable 'msg' (line 411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 16), 'msg', result_mod_619248)
        # SSA join for if statement (line 405)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to ValueError(...): (line 412)
        # Processing the call arguments (line 412)
        # Getting the type of 'msg' (line 412)
        msg_619250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 29), 'msg', False)
        # Processing the call keyword arguments (line 412)
        kwargs_619251 = {}
        # Getting the type of 'ValueError' (line 412)
        ValueError_619249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 412)
        ValueError_call_result_619252 = invoke(stypy.reporting.localization.Localization(__file__, 412, 18), ValueError_619249, *[msg_619250], **kwargs_619251)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 412, 12), ValueError_call_result_619252, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 403)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'cov' (line 413)
        cov_619253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 13), 'cov')
        # Obtaining the member 'ndim' of a type (line 413)
        ndim_619254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 13), cov_619253, 'ndim')
        int_619255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 24), 'int')
        # Applying the binary operator '>' (line 413)
        result_gt_619256 = python_operator(stypy.reporting.localization.Localization(__file__, 413, 13), '>', ndim_619254, int_619255)
        
        # Testing the type of an if condition (line 413)
        if_condition_619257 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 413, 13), result_gt_619256)
        # Assigning a type to the variable 'if_condition_619257' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 13), 'if_condition_619257', if_condition_619257)
        # SSA begins for if statement (line 413)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 414)
        # Processing the call arguments (line 414)
        str_619259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, 29), 'str', "Array 'cov' must be at most two-dimensional, but cov.ndim = %d")
        # Getting the type of 'cov' (line 415)
        cov_619260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 52), 'cov', False)
        # Obtaining the member 'ndim' of a type (line 415)
        ndim_619261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 415, 52), cov_619260, 'ndim')
        # Applying the binary operator '%' (line 414)
        result_mod_619262 = python_operator(stypy.reporting.localization.Localization(__file__, 414, 29), '%', str_619259, ndim_619261)
        
        # Processing the call keyword arguments (line 414)
        kwargs_619263 = {}
        # Getting the type of 'ValueError' (line 414)
        ValueError_619258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 414)
        ValueError_call_result_619264 = invoke(stypy.reporting.localization.Localization(__file__, 414, 18), ValueError_619258, *[result_mod_619262], **kwargs_619263)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 414, 12), ValueError_call_result_619264, 'raise parameter', BaseException)
        # SSA join for if statement (line 413)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 403)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 401)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 399)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 417)
        tuple_619265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 417)
        # Adding element type (line 417)
        # Getting the type of 'dim' (line 417)
        dim_619266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 15), 'dim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 417, 15), tuple_619265, dim_619266)
        # Adding element type (line 417)
        # Getting the type of 'mean' (line 417)
        mean_619267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 20), 'mean')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 417, 15), tuple_619265, mean_619267)
        # Adding element type (line 417)
        # Getting the type of 'cov' (line 417)
        cov_619268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 26), 'cov')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 417, 15), tuple_619265, cov_619268)
        
        # Assigning a type to the variable 'stypy_return_type' (line 417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'stypy_return_type', tuple_619265)
        
        # ################# End of '_process_parameters(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_parameters' in the type store
        # Getting the type of 'stypy_return_type' (line 359)
        stypy_return_type_619269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619269)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_parameters'
        return stypy_return_type_619269


    @norecursion
    def _process_quantiles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_quantiles'
        module_type_store = module_type_store.open_function_context('_process_quantiles', 419, 4, False)
        # Assigning a type to the variable 'self' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_gen._process_quantiles.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_gen._process_quantiles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_gen._process_quantiles.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_gen._process_quantiles.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_gen._process_quantiles')
        multivariate_normal_gen._process_quantiles.__dict__.__setitem__('stypy_param_names_list', ['x', 'dim'])
        multivariate_normal_gen._process_quantiles.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_gen._process_quantiles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_gen._process_quantiles.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_gen._process_quantiles.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_gen._process_quantiles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_gen._process_quantiles.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen._process_quantiles', ['x', 'dim'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_quantiles', localization, ['x', 'dim'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_quantiles(...)' code ##################

        str_619270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, (-1)), 'str', '\n        Adjust quantiles array so that last axis labels the components of\n        each data point.\n\n        ')
        
        # Assigning a Call to a Name (line 425):
        
        # Assigning a Call to a Name (line 425):
        
        # Call to asarray(...): (line 425)
        # Processing the call arguments (line 425)
        # Getting the type of 'x' (line 425)
        x_619273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 23), 'x', False)
        # Processing the call keyword arguments (line 425)
        # Getting the type of 'float' (line 425)
        float_619274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 32), 'float', False)
        keyword_619275 = float_619274
        kwargs_619276 = {'dtype': keyword_619275}
        # Getting the type of 'np' (line 425)
        np_619271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 425)
        asarray_619272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 12), np_619271, 'asarray')
        # Calling asarray(args, kwargs) (line 425)
        asarray_call_result_619277 = invoke(stypy.reporting.localization.Localization(__file__, 425, 12), asarray_619272, *[x_619273], **kwargs_619276)
        
        # Assigning a type to the variable 'x' (line 425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 8), 'x', asarray_call_result_619277)
        
        
        # Getting the type of 'x' (line 427)
        x_619278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 427)
        ndim_619279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 11), x_619278, 'ndim')
        int_619280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 21), 'int')
        # Applying the binary operator '==' (line 427)
        result_eq_619281 = python_operator(stypy.reporting.localization.Localization(__file__, 427, 11), '==', ndim_619279, int_619280)
        
        # Testing the type of an if condition (line 427)
        if_condition_619282 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 427, 8), result_eq_619281)
        # Assigning a type to the variable 'if_condition_619282' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'if_condition_619282', if_condition_619282)
        # SSA begins for if statement (line 427)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 428):
        
        # Assigning a Subscript to a Name (line 428):
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 428)
        np_619283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 18), 'np')
        # Obtaining the member 'newaxis' of a type (line 428)
        newaxis_619284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 18), np_619283, 'newaxis')
        # Getting the type of 'x' (line 428)
        x_619285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 16), 'x')
        # Obtaining the member '__getitem__' of a type (line 428)
        getitem___619286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 16), x_619285, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 428)
        subscript_call_result_619287 = invoke(stypy.reporting.localization.Localization(__file__, 428, 16), getitem___619286, newaxis_619284)
        
        # Assigning a type to the variable 'x' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 12), 'x', subscript_call_result_619287)
        # SSA branch for the else part of an if statement (line 427)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 429)
        x_619288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 13), 'x')
        # Obtaining the member 'ndim' of a type (line 429)
        ndim_619289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 13), x_619288, 'ndim')
        int_619290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 23), 'int')
        # Applying the binary operator '==' (line 429)
        result_eq_619291 = python_operator(stypy.reporting.localization.Localization(__file__, 429, 13), '==', ndim_619289, int_619290)
        
        # Testing the type of an if condition (line 429)
        if_condition_619292 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 429, 13), result_eq_619291)
        # Assigning a type to the variable 'if_condition_619292' (line 429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 13), 'if_condition_619292', if_condition_619292)
        # SSA begins for if statement (line 429)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'dim' (line 430)
        dim_619293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 15), 'dim')
        int_619294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 22), 'int')
        # Applying the binary operator '==' (line 430)
        result_eq_619295 = python_operator(stypy.reporting.localization.Localization(__file__, 430, 15), '==', dim_619293, int_619294)
        
        # Testing the type of an if condition (line 430)
        if_condition_619296 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 430, 12), result_eq_619295)
        # Assigning a type to the variable 'if_condition_619296' (line 430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 12), 'if_condition_619296', if_condition_619296)
        # SSA begins for if statement (line 430)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 431):
        
        # Assigning a Subscript to a Name (line 431):
        
        # Obtaining the type of the subscript
        slice_619297 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 431, 20), None, None, None)
        # Getting the type of 'np' (line 431)
        np_619298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 25), 'np')
        # Obtaining the member 'newaxis' of a type (line 431)
        newaxis_619299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 25), np_619298, 'newaxis')
        # Getting the type of 'x' (line 431)
        x_619300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 20), 'x')
        # Obtaining the member '__getitem__' of a type (line 431)
        getitem___619301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 20), x_619300, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 431)
        subscript_call_result_619302 = invoke(stypy.reporting.localization.Localization(__file__, 431, 20), getitem___619301, (slice_619297, newaxis_619299))
        
        # Assigning a type to the variable 'x' (line 431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 16), 'x', subscript_call_result_619302)
        # SSA branch for the else part of an if statement (line 430)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 433):
        
        # Assigning a Subscript to a Name (line 433):
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 433)
        np_619303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 22), 'np')
        # Obtaining the member 'newaxis' of a type (line 433)
        newaxis_619304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 22), np_619303, 'newaxis')
        slice_619305 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 433, 20), None, None, None)
        # Getting the type of 'x' (line 433)
        x_619306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 20), 'x')
        # Obtaining the member '__getitem__' of a type (line 433)
        getitem___619307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 20), x_619306, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 433)
        subscript_call_result_619308 = invoke(stypy.reporting.localization.Localization(__file__, 433, 20), getitem___619307, (newaxis_619304, slice_619305))
        
        # Assigning a type to the variable 'x' (line 433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 16), 'x', subscript_call_result_619308)
        # SSA join for if statement (line 430)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 429)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 427)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'x' (line 435)
        x_619309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 15), 'x')
        # Assigning a type to the variable 'stypy_return_type' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'stypy_return_type', x_619309)
        
        # ################# End of '_process_quantiles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_quantiles' in the type store
        # Getting the type of 'stypy_return_type' (line 419)
        stypy_return_type_619310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619310)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_quantiles'
        return stypy_return_type_619310


    @norecursion
    def _logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_logpdf'
        module_type_store = module_type_store.open_function_context('_logpdf', 437, 4, False)
        # Assigning a type to the variable 'self' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_gen._logpdf.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_gen._logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_gen._logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_gen._logpdf.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_gen._logpdf')
        multivariate_normal_gen._logpdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'mean', 'prec_U', 'log_det_cov', 'rank'])
        multivariate_normal_gen._logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_gen._logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_gen._logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_gen._logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_gen._logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_gen._logpdf.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen._logpdf', ['x', 'mean', 'prec_U', 'log_det_cov', 'rank'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_logpdf', localization, ['x', 'mean', 'prec_U', 'log_det_cov', 'rank'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_logpdf(...)' code ##################

        str_619311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, (-1)), 'str', "\n        Parameters\n        ----------\n        x : ndarray\n            Points at which to evaluate the log of the probability\n            density function\n        mean : ndarray\n            Mean of the distribution\n        prec_U : ndarray\n            A decomposition such that np.dot(prec_U, prec_U.T)\n            is the precision matrix, i.e. inverse of the covariance matrix.\n        log_det_cov : float\n            Logarithm of the determinant of the covariance matrix\n        rank : int\n            Rank of the covariance matrix.\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'logpdf' instead.\n\n        ")
        
        # Assigning a BinOp to a Name (line 460):
        
        # Assigning a BinOp to a Name (line 460):
        # Getting the type of 'x' (line 460)
        x_619312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 14), 'x')
        # Getting the type of 'mean' (line 460)
        mean_619313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 18), 'mean')
        # Applying the binary operator '-' (line 460)
        result_sub_619314 = python_operator(stypy.reporting.localization.Localization(__file__, 460, 14), '-', x_619312, mean_619313)
        
        # Assigning a type to the variable 'dev' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'dev', result_sub_619314)
        
        # Assigning a Call to a Name (line 461):
        
        # Assigning a Call to a Name (line 461):
        
        # Call to sum(...): (line 461)
        # Processing the call arguments (line 461)
        
        # Call to square(...): (line 461)
        # Processing the call arguments (line 461)
        
        # Call to dot(...): (line 461)
        # Processing the call arguments (line 461)
        # Getting the type of 'dev' (line 461)
        dev_619321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 39), 'dev', False)
        # Getting the type of 'prec_U' (line 461)
        prec_U_619322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 44), 'prec_U', False)
        # Processing the call keyword arguments (line 461)
        kwargs_619323 = {}
        # Getting the type of 'np' (line 461)
        np_619319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 32), 'np', False)
        # Obtaining the member 'dot' of a type (line 461)
        dot_619320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 32), np_619319, 'dot')
        # Calling dot(args, kwargs) (line 461)
        dot_call_result_619324 = invoke(stypy.reporting.localization.Localization(__file__, 461, 32), dot_619320, *[dev_619321, prec_U_619322], **kwargs_619323)
        
        # Processing the call keyword arguments (line 461)
        kwargs_619325 = {}
        # Getting the type of 'np' (line 461)
        np_619317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 22), 'np', False)
        # Obtaining the member 'square' of a type (line 461)
        square_619318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 22), np_619317, 'square')
        # Calling square(args, kwargs) (line 461)
        square_call_result_619326 = invoke(stypy.reporting.localization.Localization(__file__, 461, 22), square_619318, *[dot_call_result_619324], **kwargs_619325)
        
        # Processing the call keyword arguments (line 461)
        int_619327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 59), 'int')
        keyword_619328 = int_619327
        kwargs_619329 = {'axis': keyword_619328}
        # Getting the type of 'np' (line 461)
        np_619315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 15), 'np', False)
        # Obtaining the member 'sum' of a type (line 461)
        sum_619316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 15), np_619315, 'sum')
        # Calling sum(args, kwargs) (line 461)
        sum_call_result_619330 = invoke(stypy.reporting.localization.Localization(__file__, 461, 15), sum_619316, *[square_call_result_619326], **kwargs_619329)
        
        # Assigning a type to the variable 'maha' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 8), 'maha', sum_call_result_619330)
        float_619331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 15), 'float')
        # Getting the type of 'rank' (line 462)
        rank_619332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 23), 'rank')
        # Getting the type of '_LOG_2PI' (line 462)
        _LOG_2PI_619333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 30), '_LOG_2PI')
        # Applying the binary operator '*' (line 462)
        result_mul_619334 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 23), '*', rank_619332, _LOG_2PI_619333)
        
        # Getting the type of 'log_det_cov' (line 462)
        log_det_cov_619335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 41), 'log_det_cov')
        # Applying the binary operator '+' (line 462)
        result_add_619336 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 23), '+', result_mul_619334, log_det_cov_619335)
        
        # Getting the type of 'maha' (line 462)
        maha_619337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 55), 'maha')
        # Applying the binary operator '+' (line 462)
        result_add_619338 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 53), '+', result_add_619336, maha_619337)
        
        # Applying the binary operator '*' (line 462)
        result_mul_619339 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 15), '*', float_619331, result_add_619338)
        
        # Assigning a type to the variable 'stypy_return_type' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 8), 'stypy_return_type', result_mul_619339)
        
        # ################# End of '_logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 437)
        stypy_return_type_619340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619340)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_logpdf'
        return stypy_return_type_619340


    @norecursion
    def logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 464)
        None_619341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 29), 'None')
        int_619342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 39), 'int')
        # Getting the type of 'False' (line 464)
        False_619343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 57), 'False')
        defaults = [None_619341, int_619342, False_619343]
        # Create a new context for function 'logpdf'
        module_type_store = module_type_store.open_function_context('logpdf', 464, 4, False)
        # Assigning a type to the variable 'self' (line 465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_gen.logpdf.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_gen.logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_gen.logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_gen.logpdf.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_gen.logpdf')
        multivariate_normal_gen.logpdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'mean', 'cov', 'allow_singular'])
        multivariate_normal_gen.logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_gen.logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_gen.logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_gen.logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_gen.logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_gen.logpdf.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen.logpdf', ['x', 'mean', 'cov', 'allow_singular'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpdf', localization, ['x', 'mean', 'cov', 'allow_singular'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpdf(...)' code ##################

        str_619344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, (-1)), 'str', '\n        Log of the multivariate normal probability density function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n        %(_mvn_doc_default_callparams)s\n\n        Returns\n        -------\n        pdf : ndarray or scalar\n            Log of the probability density function evaluated at `x`\n\n        Notes\n        -----\n        %(_mvn_doc_callparams_note)s\n\n        ')
        
        # Assigning a Call to a Tuple (line 484):
        
        # Assigning a Subscript to a Name (line 484):
        
        # Obtaining the type of the subscript
        int_619345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 8), 'int')
        
        # Call to _process_parameters(...): (line 484)
        # Processing the call arguments (line 484)
        # Getting the type of 'None' (line 484)
        None_619348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 50), 'None', False)
        # Getting the type of 'mean' (line 484)
        mean_619349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 56), 'mean', False)
        # Getting the type of 'cov' (line 484)
        cov_619350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 62), 'cov', False)
        # Processing the call keyword arguments (line 484)
        kwargs_619351 = {}
        # Getting the type of 'self' (line 484)
        self_619346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 484)
        _process_parameters_619347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 25), self_619346, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 484)
        _process_parameters_call_result_619352 = invoke(stypy.reporting.localization.Localization(__file__, 484, 25), _process_parameters_619347, *[None_619348, mean_619349, cov_619350], **kwargs_619351)
        
        # Obtaining the member '__getitem__' of a type (line 484)
        getitem___619353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 8), _process_parameters_call_result_619352, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 484)
        subscript_call_result_619354 = invoke(stypy.reporting.localization.Localization(__file__, 484, 8), getitem___619353, int_619345)
        
        # Assigning a type to the variable 'tuple_var_assignment_618570' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'tuple_var_assignment_618570', subscript_call_result_619354)
        
        # Assigning a Subscript to a Name (line 484):
        
        # Obtaining the type of the subscript
        int_619355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 8), 'int')
        
        # Call to _process_parameters(...): (line 484)
        # Processing the call arguments (line 484)
        # Getting the type of 'None' (line 484)
        None_619358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 50), 'None', False)
        # Getting the type of 'mean' (line 484)
        mean_619359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 56), 'mean', False)
        # Getting the type of 'cov' (line 484)
        cov_619360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 62), 'cov', False)
        # Processing the call keyword arguments (line 484)
        kwargs_619361 = {}
        # Getting the type of 'self' (line 484)
        self_619356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 484)
        _process_parameters_619357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 25), self_619356, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 484)
        _process_parameters_call_result_619362 = invoke(stypy.reporting.localization.Localization(__file__, 484, 25), _process_parameters_619357, *[None_619358, mean_619359, cov_619360], **kwargs_619361)
        
        # Obtaining the member '__getitem__' of a type (line 484)
        getitem___619363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 8), _process_parameters_call_result_619362, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 484)
        subscript_call_result_619364 = invoke(stypy.reporting.localization.Localization(__file__, 484, 8), getitem___619363, int_619355)
        
        # Assigning a type to the variable 'tuple_var_assignment_618571' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'tuple_var_assignment_618571', subscript_call_result_619364)
        
        # Assigning a Subscript to a Name (line 484):
        
        # Obtaining the type of the subscript
        int_619365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 8), 'int')
        
        # Call to _process_parameters(...): (line 484)
        # Processing the call arguments (line 484)
        # Getting the type of 'None' (line 484)
        None_619368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 50), 'None', False)
        # Getting the type of 'mean' (line 484)
        mean_619369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 56), 'mean', False)
        # Getting the type of 'cov' (line 484)
        cov_619370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 62), 'cov', False)
        # Processing the call keyword arguments (line 484)
        kwargs_619371 = {}
        # Getting the type of 'self' (line 484)
        self_619366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 484)
        _process_parameters_619367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 25), self_619366, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 484)
        _process_parameters_call_result_619372 = invoke(stypy.reporting.localization.Localization(__file__, 484, 25), _process_parameters_619367, *[None_619368, mean_619369, cov_619370], **kwargs_619371)
        
        # Obtaining the member '__getitem__' of a type (line 484)
        getitem___619373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 8), _process_parameters_call_result_619372, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 484)
        subscript_call_result_619374 = invoke(stypy.reporting.localization.Localization(__file__, 484, 8), getitem___619373, int_619365)
        
        # Assigning a type to the variable 'tuple_var_assignment_618572' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'tuple_var_assignment_618572', subscript_call_result_619374)
        
        # Assigning a Name to a Name (line 484):
        # Getting the type of 'tuple_var_assignment_618570' (line 484)
        tuple_var_assignment_618570_619375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'tuple_var_assignment_618570')
        # Assigning a type to the variable 'dim' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'dim', tuple_var_assignment_618570_619375)
        
        # Assigning a Name to a Name (line 484):
        # Getting the type of 'tuple_var_assignment_618571' (line 484)
        tuple_var_assignment_618571_619376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'tuple_var_assignment_618571')
        # Assigning a type to the variable 'mean' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 13), 'mean', tuple_var_assignment_618571_619376)
        
        # Assigning a Name to a Name (line 484):
        # Getting the type of 'tuple_var_assignment_618572' (line 484)
        tuple_var_assignment_618572_619377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'tuple_var_assignment_618572')
        # Assigning a type to the variable 'cov' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 19), 'cov', tuple_var_assignment_618572_619377)
        
        # Assigning a Call to a Name (line 485):
        
        # Assigning a Call to a Name (line 485):
        
        # Call to _process_quantiles(...): (line 485)
        # Processing the call arguments (line 485)
        # Getting the type of 'x' (line 485)
        x_619380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 36), 'x', False)
        # Getting the type of 'dim' (line 485)
        dim_619381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 39), 'dim', False)
        # Processing the call keyword arguments (line 485)
        kwargs_619382 = {}
        # Getting the type of 'self' (line 485)
        self_619378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 12), 'self', False)
        # Obtaining the member '_process_quantiles' of a type (line 485)
        _process_quantiles_619379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 12), self_619378, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 485)
        _process_quantiles_call_result_619383 = invoke(stypy.reporting.localization.Localization(__file__, 485, 12), _process_quantiles_619379, *[x_619380, dim_619381], **kwargs_619382)
        
        # Assigning a type to the variable 'x' (line 485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 8), 'x', _process_quantiles_call_result_619383)
        
        # Assigning a Call to a Name (line 486):
        
        # Assigning a Call to a Name (line 486):
        
        # Call to _PSD(...): (line 486)
        # Processing the call arguments (line 486)
        # Getting the type of 'cov' (line 486)
        cov_619385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 19), 'cov', False)
        # Processing the call keyword arguments (line 486)
        # Getting the type of 'allow_singular' (line 486)
        allow_singular_619386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 39), 'allow_singular', False)
        keyword_619387 = allow_singular_619386
        kwargs_619388 = {'allow_singular': keyword_619387}
        # Getting the type of '_PSD' (line 486)
        _PSD_619384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 14), '_PSD', False)
        # Calling _PSD(args, kwargs) (line 486)
        _PSD_call_result_619389 = invoke(stypy.reporting.localization.Localization(__file__, 486, 14), _PSD_619384, *[cov_619385], **kwargs_619388)
        
        # Assigning a type to the variable 'psd' (line 486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 8), 'psd', _PSD_call_result_619389)
        
        # Assigning a Call to a Name (line 487):
        
        # Assigning a Call to a Name (line 487):
        
        # Call to _logpdf(...): (line 487)
        # Processing the call arguments (line 487)
        # Getting the type of 'x' (line 487)
        x_619392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 27), 'x', False)
        # Getting the type of 'mean' (line 487)
        mean_619393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 30), 'mean', False)
        # Getting the type of 'psd' (line 487)
        psd_619394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 36), 'psd', False)
        # Obtaining the member 'U' of a type (line 487)
        U_619395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 36), psd_619394, 'U')
        # Getting the type of 'psd' (line 487)
        psd_619396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 43), 'psd', False)
        # Obtaining the member 'log_pdet' of a type (line 487)
        log_pdet_619397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 43), psd_619396, 'log_pdet')
        # Getting the type of 'psd' (line 487)
        psd_619398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 57), 'psd', False)
        # Obtaining the member 'rank' of a type (line 487)
        rank_619399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 57), psd_619398, 'rank')
        # Processing the call keyword arguments (line 487)
        kwargs_619400 = {}
        # Getting the type of 'self' (line 487)
        self_619390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 14), 'self', False)
        # Obtaining the member '_logpdf' of a type (line 487)
        _logpdf_619391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 14), self_619390, '_logpdf')
        # Calling _logpdf(args, kwargs) (line 487)
        _logpdf_call_result_619401 = invoke(stypy.reporting.localization.Localization(__file__, 487, 14), _logpdf_619391, *[x_619392, mean_619393, U_619395, log_pdet_619397, rank_619399], **kwargs_619400)
        
        # Assigning a type to the variable 'out' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 8), 'out', _logpdf_call_result_619401)
        
        # Call to _squeeze_output(...): (line 488)
        # Processing the call arguments (line 488)
        # Getting the type of 'out' (line 488)
        out_619403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 31), 'out', False)
        # Processing the call keyword arguments (line 488)
        kwargs_619404 = {}
        # Getting the type of '_squeeze_output' (line 488)
        _squeeze_output_619402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 488)
        _squeeze_output_call_result_619405 = invoke(stypy.reporting.localization.Localization(__file__, 488, 15), _squeeze_output_619402, *[out_619403], **kwargs_619404)
        
        # Assigning a type to the variable 'stypy_return_type' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 8), 'stypy_return_type', _squeeze_output_call_result_619405)
        
        # ################# End of 'logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 464)
        stypy_return_type_619406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619406)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpdf'
        return stypy_return_type_619406


    @norecursion
    def pdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 490)
        None_619407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 26), 'None')
        int_619408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 36), 'int')
        # Getting the type of 'False' (line 490)
        False_619409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 54), 'False')
        defaults = [None_619407, int_619408, False_619409]
        # Create a new context for function 'pdf'
        module_type_store = module_type_store.open_function_context('pdf', 490, 4, False)
        # Assigning a type to the variable 'self' (line 491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_gen.pdf.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_gen.pdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_gen.pdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_gen.pdf.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_gen.pdf')
        multivariate_normal_gen.pdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'mean', 'cov', 'allow_singular'])
        multivariate_normal_gen.pdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_gen.pdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_gen.pdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_gen.pdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_gen.pdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_gen.pdf.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen.pdf', ['x', 'mean', 'cov', 'allow_singular'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pdf', localization, ['x', 'mean', 'cov', 'allow_singular'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pdf(...)' code ##################

        str_619410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, (-1)), 'str', '\n        Multivariate normal probability density function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n        %(_mvn_doc_default_callparams)s\n\n        Returns\n        -------\n        pdf : ndarray or scalar\n            Probability density function evaluated at `x`\n\n        Notes\n        -----\n        %(_mvn_doc_callparams_note)s\n\n        ')
        
        # Assigning a Call to a Tuple (line 510):
        
        # Assigning a Subscript to a Name (line 510):
        
        # Obtaining the type of the subscript
        int_619411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 8), 'int')
        
        # Call to _process_parameters(...): (line 510)
        # Processing the call arguments (line 510)
        # Getting the type of 'None' (line 510)
        None_619414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 50), 'None', False)
        # Getting the type of 'mean' (line 510)
        mean_619415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 56), 'mean', False)
        # Getting the type of 'cov' (line 510)
        cov_619416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 62), 'cov', False)
        # Processing the call keyword arguments (line 510)
        kwargs_619417 = {}
        # Getting the type of 'self' (line 510)
        self_619412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 510)
        _process_parameters_619413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 25), self_619412, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 510)
        _process_parameters_call_result_619418 = invoke(stypy.reporting.localization.Localization(__file__, 510, 25), _process_parameters_619413, *[None_619414, mean_619415, cov_619416], **kwargs_619417)
        
        # Obtaining the member '__getitem__' of a type (line 510)
        getitem___619419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 8), _process_parameters_call_result_619418, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 510)
        subscript_call_result_619420 = invoke(stypy.reporting.localization.Localization(__file__, 510, 8), getitem___619419, int_619411)
        
        # Assigning a type to the variable 'tuple_var_assignment_618573' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_618573', subscript_call_result_619420)
        
        # Assigning a Subscript to a Name (line 510):
        
        # Obtaining the type of the subscript
        int_619421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 8), 'int')
        
        # Call to _process_parameters(...): (line 510)
        # Processing the call arguments (line 510)
        # Getting the type of 'None' (line 510)
        None_619424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 50), 'None', False)
        # Getting the type of 'mean' (line 510)
        mean_619425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 56), 'mean', False)
        # Getting the type of 'cov' (line 510)
        cov_619426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 62), 'cov', False)
        # Processing the call keyword arguments (line 510)
        kwargs_619427 = {}
        # Getting the type of 'self' (line 510)
        self_619422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 510)
        _process_parameters_619423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 25), self_619422, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 510)
        _process_parameters_call_result_619428 = invoke(stypy.reporting.localization.Localization(__file__, 510, 25), _process_parameters_619423, *[None_619424, mean_619425, cov_619426], **kwargs_619427)
        
        # Obtaining the member '__getitem__' of a type (line 510)
        getitem___619429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 8), _process_parameters_call_result_619428, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 510)
        subscript_call_result_619430 = invoke(stypy.reporting.localization.Localization(__file__, 510, 8), getitem___619429, int_619421)
        
        # Assigning a type to the variable 'tuple_var_assignment_618574' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_618574', subscript_call_result_619430)
        
        # Assigning a Subscript to a Name (line 510):
        
        # Obtaining the type of the subscript
        int_619431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 8), 'int')
        
        # Call to _process_parameters(...): (line 510)
        # Processing the call arguments (line 510)
        # Getting the type of 'None' (line 510)
        None_619434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 50), 'None', False)
        # Getting the type of 'mean' (line 510)
        mean_619435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 56), 'mean', False)
        # Getting the type of 'cov' (line 510)
        cov_619436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 62), 'cov', False)
        # Processing the call keyword arguments (line 510)
        kwargs_619437 = {}
        # Getting the type of 'self' (line 510)
        self_619432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 510)
        _process_parameters_619433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 25), self_619432, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 510)
        _process_parameters_call_result_619438 = invoke(stypy.reporting.localization.Localization(__file__, 510, 25), _process_parameters_619433, *[None_619434, mean_619435, cov_619436], **kwargs_619437)
        
        # Obtaining the member '__getitem__' of a type (line 510)
        getitem___619439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 8), _process_parameters_call_result_619438, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 510)
        subscript_call_result_619440 = invoke(stypy.reporting.localization.Localization(__file__, 510, 8), getitem___619439, int_619431)
        
        # Assigning a type to the variable 'tuple_var_assignment_618575' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_618575', subscript_call_result_619440)
        
        # Assigning a Name to a Name (line 510):
        # Getting the type of 'tuple_var_assignment_618573' (line 510)
        tuple_var_assignment_618573_619441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_618573')
        # Assigning a type to the variable 'dim' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'dim', tuple_var_assignment_618573_619441)
        
        # Assigning a Name to a Name (line 510):
        # Getting the type of 'tuple_var_assignment_618574' (line 510)
        tuple_var_assignment_618574_619442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_618574')
        # Assigning a type to the variable 'mean' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 13), 'mean', tuple_var_assignment_618574_619442)
        
        # Assigning a Name to a Name (line 510):
        # Getting the type of 'tuple_var_assignment_618575' (line 510)
        tuple_var_assignment_618575_619443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'tuple_var_assignment_618575')
        # Assigning a type to the variable 'cov' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 19), 'cov', tuple_var_assignment_618575_619443)
        
        # Assigning a Call to a Name (line 511):
        
        # Assigning a Call to a Name (line 511):
        
        # Call to _process_quantiles(...): (line 511)
        # Processing the call arguments (line 511)
        # Getting the type of 'x' (line 511)
        x_619446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 36), 'x', False)
        # Getting the type of 'dim' (line 511)
        dim_619447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 39), 'dim', False)
        # Processing the call keyword arguments (line 511)
        kwargs_619448 = {}
        # Getting the type of 'self' (line 511)
        self_619444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 12), 'self', False)
        # Obtaining the member '_process_quantiles' of a type (line 511)
        _process_quantiles_619445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 12), self_619444, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 511)
        _process_quantiles_call_result_619449 = invoke(stypy.reporting.localization.Localization(__file__, 511, 12), _process_quantiles_619445, *[x_619446, dim_619447], **kwargs_619448)
        
        # Assigning a type to the variable 'x' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'x', _process_quantiles_call_result_619449)
        
        # Assigning a Call to a Name (line 512):
        
        # Assigning a Call to a Name (line 512):
        
        # Call to _PSD(...): (line 512)
        # Processing the call arguments (line 512)
        # Getting the type of 'cov' (line 512)
        cov_619451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 19), 'cov', False)
        # Processing the call keyword arguments (line 512)
        # Getting the type of 'allow_singular' (line 512)
        allow_singular_619452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 39), 'allow_singular', False)
        keyword_619453 = allow_singular_619452
        kwargs_619454 = {'allow_singular': keyword_619453}
        # Getting the type of '_PSD' (line 512)
        _PSD_619450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 14), '_PSD', False)
        # Calling _PSD(args, kwargs) (line 512)
        _PSD_call_result_619455 = invoke(stypy.reporting.localization.Localization(__file__, 512, 14), _PSD_619450, *[cov_619451], **kwargs_619454)
        
        # Assigning a type to the variable 'psd' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 8), 'psd', _PSD_call_result_619455)
        
        # Assigning a Call to a Name (line 513):
        
        # Assigning a Call to a Name (line 513):
        
        # Call to exp(...): (line 513)
        # Processing the call arguments (line 513)
        
        # Call to _logpdf(...): (line 513)
        # Processing the call arguments (line 513)
        # Getting the type of 'x' (line 513)
        x_619460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 34), 'x', False)
        # Getting the type of 'mean' (line 513)
        mean_619461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 37), 'mean', False)
        # Getting the type of 'psd' (line 513)
        psd_619462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 43), 'psd', False)
        # Obtaining the member 'U' of a type (line 513)
        U_619463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 43), psd_619462, 'U')
        # Getting the type of 'psd' (line 513)
        psd_619464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 50), 'psd', False)
        # Obtaining the member 'log_pdet' of a type (line 513)
        log_pdet_619465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 50), psd_619464, 'log_pdet')
        # Getting the type of 'psd' (line 513)
        psd_619466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 64), 'psd', False)
        # Obtaining the member 'rank' of a type (line 513)
        rank_619467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 64), psd_619466, 'rank')
        # Processing the call keyword arguments (line 513)
        kwargs_619468 = {}
        # Getting the type of 'self' (line 513)
        self_619458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 21), 'self', False)
        # Obtaining the member '_logpdf' of a type (line 513)
        _logpdf_619459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 21), self_619458, '_logpdf')
        # Calling _logpdf(args, kwargs) (line 513)
        _logpdf_call_result_619469 = invoke(stypy.reporting.localization.Localization(__file__, 513, 21), _logpdf_619459, *[x_619460, mean_619461, U_619463, log_pdet_619465, rank_619467], **kwargs_619468)
        
        # Processing the call keyword arguments (line 513)
        kwargs_619470 = {}
        # Getting the type of 'np' (line 513)
        np_619456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 14), 'np', False)
        # Obtaining the member 'exp' of a type (line 513)
        exp_619457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 14), np_619456, 'exp')
        # Calling exp(args, kwargs) (line 513)
        exp_call_result_619471 = invoke(stypy.reporting.localization.Localization(__file__, 513, 14), exp_619457, *[_logpdf_call_result_619469], **kwargs_619470)
        
        # Assigning a type to the variable 'out' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'out', exp_call_result_619471)
        
        # Call to _squeeze_output(...): (line 514)
        # Processing the call arguments (line 514)
        # Getting the type of 'out' (line 514)
        out_619473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 31), 'out', False)
        # Processing the call keyword arguments (line 514)
        kwargs_619474 = {}
        # Getting the type of '_squeeze_output' (line 514)
        _squeeze_output_619472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 514)
        _squeeze_output_call_result_619475 = invoke(stypy.reporting.localization.Localization(__file__, 514, 15), _squeeze_output_619472, *[out_619473], **kwargs_619474)
        
        # Assigning a type to the variable 'stypy_return_type' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 8), 'stypy_return_type', _squeeze_output_call_result_619475)
        
        # ################# End of 'pdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pdf' in the type store
        # Getting the type of 'stypy_return_type' (line 490)
        stypy_return_type_619476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619476)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pdf'
        return stypy_return_type_619476


    @norecursion
    def _cdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_cdf'
        module_type_store = module_type_store.open_function_context('_cdf', 516, 4, False)
        # Assigning a type to the variable 'self' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_gen._cdf.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_gen._cdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_gen._cdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_gen._cdf.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_gen._cdf')
        multivariate_normal_gen._cdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'mean', 'cov', 'maxpts', 'abseps', 'releps'])
        multivariate_normal_gen._cdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_gen._cdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_gen._cdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_gen._cdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_gen._cdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_gen._cdf.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen._cdf', ['x', 'mean', 'cov', 'maxpts', 'abseps', 'releps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_cdf', localization, ['x', 'mean', 'cov', 'maxpts', 'abseps', 'releps'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_cdf(...)' code ##################

        str_619477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, (-1)), 'str', "\n        Parameters\n        ----------\n        x : ndarray\n            Points at which to evaluate the cumulative distribution function.\n        mean : ndarray\n            Mean of the distribution\n        cov : array_like\n            Covariance matrix of the distribution\n        maxpts: integer\n            The maximum number of points to use for integration\n        abseps: float\n            Absolute error tolerance\n        releps: float\n            Relative error tolerance\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'cdf' instead.\n\n        .. versionadded:: 1.0.0\n\n        ")
        
        # Assigning a Call to a Name (line 541):
        
        # Assigning a Call to a Name (line 541):
        
        # Call to full(...): (line 541)
        # Processing the call arguments (line 541)
        # Getting the type of 'mean' (line 541)
        mean_619480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 24), 'mean', False)
        # Obtaining the member 'shape' of a type (line 541)
        shape_619481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 24), mean_619480, 'shape')
        
        # Getting the type of 'np' (line 541)
        np_619482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 37), 'np', False)
        # Obtaining the member 'inf' of a type (line 541)
        inf_619483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 37), np_619482, 'inf')
        # Applying the 'usub' unary operator (line 541)
        result___neg___619484 = python_operator(stypy.reporting.localization.Localization(__file__, 541, 36), 'usub', inf_619483)
        
        # Processing the call keyword arguments (line 541)
        kwargs_619485 = {}
        # Getting the type of 'np' (line 541)
        np_619478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 16), 'np', False)
        # Obtaining the member 'full' of a type (line 541)
        full_619479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 16), np_619478, 'full')
        # Calling full(args, kwargs) (line 541)
        full_call_result_619486 = invoke(stypy.reporting.localization.Localization(__file__, 541, 16), full_619479, *[shape_619481, result___neg___619484], **kwargs_619485)
        
        # Assigning a type to the variable 'lower' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'lower', full_call_result_619486)
        
        # Assigning a Lambda to a Name (line 543):
        
        # Assigning a Lambda to a Name (line 543):

        @norecursion
        def _stypy_temp_lambda_530(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_530'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_530', 543, 17, True)
            # Passed parameters checking function
            _stypy_temp_lambda_530.stypy_localization = localization
            _stypy_temp_lambda_530.stypy_type_of_self = None
            _stypy_temp_lambda_530.stypy_type_store = module_type_store
            _stypy_temp_lambda_530.stypy_function_name = '_stypy_temp_lambda_530'
            _stypy_temp_lambda_530.stypy_param_names_list = ['x_slice']
            _stypy_temp_lambda_530.stypy_varargs_param_name = None
            _stypy_temp_lambda_530.stypy_kwargs_param_name = None
            _stypy_temp_lambda_530.stypy_call_defaults = defaults
            _stypy_temp_lambda_530.stypy_call_varargs = varargs
            _stypy_temp_lambda_530.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_530', ['x_slice'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_530', ['x_slice'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Obtaining the type of the subscript
            int_619487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 67), 'int')
            
            # Call to mvnun(...): (line 543)
            # Processing the call arguments (line 543)
            # Getting the type of 'lower' (line 543)
            lower_619490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 43), 'lower', False)
            # Getting the type of 'x_slice' (line 543)
            x_slice_619491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 50), 'x_slice', False)
            # Getting the type of 'mean' (line 543)
            mean_619492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 59), 'mean', False)
            # Getting the type of 'cov' (line 543)
            cov_619493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 65), 'cov', False)
            # Getting the type of 'maxpts' (line 544)
            maxpts_619494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 43), 'maxpts', False)
            # Getting the type of 'abseps' (line 544)
            abseps_619495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 51), 'abseps', False)
            # Getting the type of 'releps' (line 544)
            releps_619496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 59), 'releps', False)
            # Processing the call keyword arguments (line 543)
            kwargs_619497 = {}
            # Getting the type of 'mvn' (line 543)
            mvn_619488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 33), 'mvn', False)
            # Obtaining the member 'mvnun' of a type (line 543)
            mvnun_619489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 33), mvn_619488, 'mvnun')
            # Calling mvnun(args, kwargs) (line 543)
            mvnun_call_result_619498 = invoke(stypy.reporting.localization.Localization(__file__, 543, 33), mvnun_619489, *[lower_619490, x_slice_619491, mean_619492, cov_619493, maxpts_619494, abseps_619495, releps_619496], **kwargs_619497)
            
            # Obtaining the member '__getitem__' of a type (line 543)
            getitem___619499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 33), mvnun_call_result_619498, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 543)
            subscript_call_result_619500 = invoke(stypy.reporting.localization.Localization(__file__, 543, 33), getitem___619499, int_619487)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 543)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 17), 'stypy_return_type', subscript_call_result_619500)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_530' in the type store
            # Getting the type of 'stypy_return_type' (line 543)
            stypy_return_type_619501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 17), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_619501)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_530'
            return stypy_return_type_619501

        # Assigning a type to the variable '_stypy_temp_lambda_530' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 17), '_stypy_temp_lambda_530', _stypy_temp_lambda_530)
        # Getting the type of '_stypy_temp_lambda_530' (line 543)
        _stypy_temp_lambda_530_619502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 17), '_stypy_temp_lambda_530')
        # Assigning a type to the variable 'func1d' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 8), 'func1d', _stypy_temp_lambda_530_619502)
        
        # Assigning a Call to a Name (line 545):
        
        # Assigning a Call to a Name (line 545):
        
        # Call to apply_along_axis(...): (line 545)
        # Processing the call arguments (line 545)
        # Getting the type of 'func1d' (line 545)
        func1d_619505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 34), 'func1d', False)
        int_619506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 42), 'int')
        # Getting the type of 'x' (line 545)
        x_619507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 46), 'x', False)
        # Processing the call keyword arguments (line 545)
        kwargs_619508 = {}
        # Getting the type of 'np' (line 545)
        np_619503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 14), 'np', False)
        # Obtaining the member 'apply_along_axis' of a type (line 545)
        apply_along_axis_619504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 14), np_619503, 'apply_along_axis')
        # Calling apply_along_axis(args, kwargs) (line 545)
        apply_along_axis_call_result_619509 = invoke(stypy.reporting.localization.Localization(__file__, 545, 14), apply_along_axis_619504, *[func1d_619505, int_619506, x_619507], **kwargs_619508)
        
        # Assigning a type to the variable 'out' (line 545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 8), 'out', apply_along_axis_call_result_619509)
        
        # Call to _squeeze_output(...): (line 546)
        # Processing the call arguments (line 546)
        # Getting the type of 'out' (line 546)
        out_619511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 31), 'out', False)
        # Processing the call keyword arguments (line 546)
        kwargs_619512 = {}
        # Getting the type of '_squeeze_output' (line 546)
        _squeeze_output_619510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 546)
        _squeeze_output_call_result_619513 = invoke(stypy.reporting.localization.Localization(__file__, 546, 15), _squeeze_output_619510, *[out_619511], **kwargs_619512)
        
        # Assigning a type to the variable 'stypy_return_type' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'stypy_return_type', _squeeze_output_call_result_619513)
        
        # ################# End of '_cdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_cdf' in the type store
        # Getting the type of 'stypy_return_type' (line 516)
        stypy_return_type_619514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619514)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_cdf'
        return stypy_return_type_619514


    @norecursion
    def logcdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 548)
        None_619515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 29), 'None')
        int_619516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 39), 'int')
        # Getting the type of 'False' (line 548)
        False_619517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 57), 'False')
        # Getting the type of 'None' (line 548)
        None_619518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 71), 'None')
        float_619519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 22), 'float')
        float_619520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 35), 'float')
        defaults = [None_619515, int_619516, False_619517, None_619518, float_619519, float_619520]
        # Create a new context for function 'logcdf'
        module_type_store = module_type_store.open_function_context('logcdf', 548, 4, False)
        # Assigning a type to the variable 'self' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_gen.logcdf.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_gen.logcdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_gen.logcdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_gen.logcdf.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_gen.logcdf')
        multivariate_normal_gen.logcdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'mean', 'cov', 'allow_singular', 'maxpts', 'abseps', 'releps'])
        multivariate_normal_gen.logcdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_gen.logcdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_gen.logcdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_gen.logcdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_gen.logcdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_gen.logcdf.__dict__.__setitem__('stypy_declared_arg_number', 8)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen.logcdf', ['x', 'mean', 'cov', 'allow_singular', 'maxpts', 'abseps', 'releps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logcdf', localization, ['x', 'mean', 'cov', 'allow_singular', 'maxpts', 'abseps', 'releps'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logcdf(...)' code ##################

        str_619521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, (-1)), 'str', '\n        Log of the multivariate normal cumulative distribution function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n        %(_mvn_doc_default_callparams)s\n        maxpts: integer, optional\n            The maximum number of points to use for integration\n            (default `1000000*dim`)\n        abseps: float, optional\n            Absolute error tolerance (default 1e-5)\n        releps: float, optional\n            Relative error tolerance (default 1e-5)\n\n        Returns\n        -------\n        cdf : ndarray or scalar\n            Log of the cumulative distribution function evaluated at `x`\n\n        Notes\n        -----\n        %(_mvn_doc_callparams_note)s\n\n        .. versionadded:: 1.0.0\n\n        ')
        
        # Assigning a Call to a Tuple (line 578):
        
        # Assigning a Subscript to a Name (line 578):
        
        # Obtaining the type of the subscript
        int_619522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 8), 'int')
        
        # Call to _process_parameters(...): (line 578)
        # Processing the call arguments (line 578)
        # Getting the type of 'None' (line 578)
        None_619525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 50), 'None', False)
        # Getting the type of 'mean' (line 578)
        mean_619526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 56), 'mean', False)
        # Getting the type of 'cov' (line 578)
        cov_619527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 62), 'cov', False)
        # Processing the call keyword arguments (line 578)
        kwargs_619528 = {}
        # Getting the type of 'self' (line 578)
        self_619523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 578)
        _process_parameters_619524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 25), self_619523, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 578)
        _process_parameters_call_result_619529 = invoke(stypy.reporting.localization.Localization(__file__, 578, 25), _process_parameters_619524, *[None_619525, mean_619526, cov_619527], **kwargs_619528)
        
        # Obtaining the member '__getitem__' of a type (line 578)
        getitem___619530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 8), _process_parameters_call_result_619529, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 578)
        subscript_call_result_619531 = invoke(stypy.reporting.localization.Localization(__file__, 578, 8), getitem___619530, int_619522)
        
        # Assigning a type to the variable 'tuple_var_assignment_618576' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'tuple_var_assignment_618576', subscript_call_result_619531)
        
        # Assigning a Subscript to a Name (line 578):
        
        # Obtaining the type of the subscript
        int_619532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 8), 'int')
        
        # Call to _process_parameters(...): (line 578)
        # Processing the call arguments (line 578)
        # Getting the type of 'None' (line 578)
        None_619535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 50), 'None', False)
        # Getting the type of 'mean' (line 578)
        mean_619536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 56), 'mean', False)
        # Getting the type of 'cov' (line 578)
        cov_619537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 62), 'cov', False)
        # Processing the call keyword arguments (line 578)
        kwargs_619538 = {}
        # Getting the type of 'self' (line 578)
        self_619533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 578)
        _process_parameters_619534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 25), self_619533, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 578)
        _process_parameters_call_result_619539 = invoke(stypy.reporting.localization.Localization(__file__, 578, 25), _process_parameters_619534, *[None_619535, mean_619536, cov_619537], **kwargs_619538)
        
        # Obtaining the member '__getitem__' of a type (line 578)
        getitem___619540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 8), _process_parameters_call_result_619539, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 578)
        subscript_call_result_619541 = invoke(stypy.reporting.localization.Localization(__file__, 578, 8), getitem___619540, int_619532)
        
        # Assigning a type to the variable 'tuple_var_assignment_618577' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'tuple_var_assignment_618577', subscript_call_result_619541)
        
        # Assigning a Subscript to a Name (line 578):
        
        # Obtaining the type of the subscript
        int_619542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 8), 'int')
        
        # Call to _process_parameters(...): (line 578)
        # Processing the call arguments (line 578)
        # Getting the type of 'None' (line 578)
        None_619545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 50), 'None', False)
        # Getting the type of 'mean' (line 578)
        mean_619546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 56), 'mean', False)
        # Getting the type of 'cov' (line 578)
        cov_619547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 62), 'cov', False)
        # Processing the call keyword arguments (line 578)
        kwargs_619548 = {}
        # Getting the type of 'self' (line 578)
        self_619543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 578)
        _process_parameters_619544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 25), self_619543, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 578)
        _process_parameters_call_result_619549 = invoke(stypy.reporting.localization.Localization(__file__, 578, 25), _process_parameters_619544, *[None_619545, mean_619546, cov_619547], **kwargs_619548)
        
        # Obtaining the member '__getitem__' of a type (line 578)
        getitem___619550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 8), _process_parameters_call_result_619549, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 578)
        subscript_call_result_619551 = invoke(stypy.reporting.localization.Localization(__file__, 578, 8), getitem___619550, int_619542)
        
        # Assigning a type to the variable 'tuple_var_assignment_618578' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'tuple_var_assignment_618578', subscript_call_result_619551)
        
        # Assigning a Name to a Name (line 578):
        # Getting the type of 'tuple_var_assignment_618576' (line 578)
        tuple_var_assignment_618576_619552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'tuple_var_assignment_618576')
        # Assigning a type to the variable 'dim' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'dim', tuple_var_assignment_618576_619552)
        
        # Assigning a Name to a Name (line 578):
        # Getting the type of 'tuple_var_assignment_618577' (line 578)
        tuple_var_assignment_618577_619553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'tuple_var_assignment_618577')
        # Assigning a type to the variable 'mean' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 13), 'mean', tuple_var_assignment_618577_619553)
        
        # Assigning a Name to a Name (line 578):
        # Getting the type of 'tuple_var_assignment_618578' (line 578)
        tuple_var_assignment_618578_619554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'tuple_var_assignment_618578')
        # Assigning a type to the variable 'cov' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 19), 'cov', tuple_var_assignment_618578_619554)
        
        # Assigning a Call to a Name (line 579):
        
        # Assigning a Call to a Name (line 579):
        
        # Call to _process_quantiles(...): (line 579)
        # Processing the call arguments (line 579)
        # Getting the type of 'x' (line 579)
        x_619557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 36), 'x', False)
        # Getting the type of 'dim' (line 579)
        dim_619558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 39), 'dim', False)
        # Processing the call keyword arguments (line 579)
        kwargs_619559 = {}
        # Getting the type of 'self' (line 579)
        self_619555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 12), 'self', False)
        # Obtaining the member '_process_quantiles' of a type (line 579)
        _process_quantiles_619556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 579, 12), self_619555, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 579)
        _process_quantiles_call_result_619560 = invoke(stypy.reporting.localization.Localization(__file__, 579, 12), _process_quantiles_619556, *[x_619557, dim_619558], **kwargs_619559)
        
        # Assigning a type to the variable 'x' (line 579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 8), 'x', _process_quantiles_call_result_619560)
        
        # Call to _PSD(...): (line 581)
        # Processing the call arguments (line 581)
        # Getting the type of 'cov' (line 581)
        cov_619562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 13), 'cov', False)
        # Processing the call keyword arguments (line 581)
        # Getting the type of 'allow_singular' (line 581)
        allow_singular_619563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 33), 'allow_singular', False)
        keyword_619564 = allow_singular_619563
        kwargs_619565 = {'allow_singular': keyword_619564}
        # Getting the type of '_PSD' (line 581)
        _PSD_619561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 8), '_PSD', False)
        # Calling _PSD(args, kwargs) (line 581)
        _PSD_call_result_619566 = invoke(stypy.reporting.localization.Localization(__file__, 581, 8), _PSD_619561, *[cov_619562], **kwargs_619565)
        
        
        
        # Getting the type of 'maxpts' (line 582)
        maxpts_619567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 15), 'maxpts')
        # Applying the 'not' unary operator (line 582)
        result_not__619568 = python_operator(stypy.reporting.localization.Localization(__file__, 582, 11), 'not', maxpts_619567)
        
        # Testing the type of an if condition (line 582)
        if_condition_619569 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 582, 8), result_not__619568)
        # Assigning a type to the variable 'if_condition_619569' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'if_condition_619569', if_condition_619569)
        # SSA begins for if statement (line 582)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 583):
        
        # Assigning a BinOp to a Name (line 583):
        int_619570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 583, 21), 'int')
        # Getting the type of 'dim' (line 583)
        dim_619571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 31), 'dim')
        # Applying the binary operator '*' (line 583)
        result_mul_619572 = python_operator(stypy.reporting.localization.Localization(__file__, 583, 21), '*', int_619570, dim_619571)
        
        # Assigning a type to the variable 'maxpts' (line 583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 12), 'maxpts', result_mul_619572)
        # SSA join for if statement (line 582)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 584):
        
        # Assigning a Call to a Name (line 584):
        
        # Call to log(...): (line 584)
        # Processing the call arguments (line 584)
        
        # Call to _cdf(...): (line 584)
        # Processing the call arguments (line 584)
        # Getting the type of 'x' (line 584)
        x_619577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 31), 'x', False)
        # Getting the type of 'mean' (line 584)
        mean_619578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 34), 'mean', False)
        # Getting the type of 'cov' (line 584)
        cov_619579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 40), 'cov', False)
        # Getting the type of 'maxpts' (line 584)
        maxpts_619580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 45), 'maxpts', False)
        # Getting the type of 'abseps' (line 584)
        abseps_619581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 53), 'abseps', False)
        # Getting the type of 'releps' (line 584)
        releps_619582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 61), 'releps', False)
        # Processing the call keyword arguments (line 584)
        kwargs_619583 = {}
        # Getting the type of 'self' (line 584)
        self_619575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 21), 'self', False)
        # Obtaining the member '_cdf' of a type (line 584)
        _cdf_619576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 21), self_619575, '_cdf')
        # Calling _cdf(args, kwargs) (line 584)
        _cdf_call_result_619584 = invoke(stypy.reporting.localization.Localization(__file__, 584, 21), _cdf_619576, *[x_619577, mean_619578, cov_619579, maxpts_619580, abseps_619581, releps_619582], **kwargs_619583)
        
        # Processing the call keyword arguments (line 584)
        kwargs_619585 = {}
        # Getting the type of 'np' (line 584)
        np_619573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 14), 'np', False)
        # Obtaining the member 'log' of a type (line 584)
        log_619574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 14), np_619573, 'log')
        # Calling log(args, kwargs) (line 584)
        log_call_result_619586 = invoke(stypy.reporting.localization.Localization(__file__, 584, 14), log_619574, *[_cdf_call_result_619584], **kwargs_619585)
        
        # Assigning a type to the variable 'out' (line 584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 8), 'out', log_call_result_619586)
        # Getting the type of 'out' (line 585)
        out_619587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 8), 'stypy_return_type', out_619587)
        
        # ################# End of 'logcdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logcdf' in the type store
        # Getting the type of 'stypy_return_type' (line 548)
        stypy_return_type_619588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619588)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logcdf'
        return stypy_return_type_619588


    @norecursion
    def cdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 587)
        None_619589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 26), 'None')
        int_619590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 587, 36), 'int')
        # Getting the type of 'False' (line 587)
        False_619591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 54), 'False')
        # Getting the type of 'None' (line 587)
        None_619592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 68), 'None')
        float_619593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 19), 'float')
        float_619594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 32), 'float')
        defaults = [None_619589, int_619590, False_619591, None_619592, float_619593, float_619594]
        # Create a new context for function 'cdf'
        module_type_store = module_type_store.open_function_context('cdf', 587, 4, False)
        # Assigning a type to the variable 'self' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_gen.cdf.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_gen.cdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_gen.cdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_gen.cdf.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_gen.cdf')
        multivariate_normal_gen.cdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'mean', 'cov', 'allow_singular', 'maxpts', 'abseps', 'releps'])
        multivariate_normal_gen.cdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_gen.cdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_gen.cdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_gen.cdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_gen.cdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_gen.cdf.__dict__.__setitem__('stypy_declared_arg_number', 8)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen.cdf', ['x', 'mean', 'cov', 'allow_singular', 'maxpts', 'abseps', 'releps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cdf', localization, ['x', 'mean', 'cov', 'allow_singular', 'maxpts', 'abseps', 'releps'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cdf(...)' code ##################

        str_619595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, (-1)), 'str', '\n        Multivariate normal cumulative distribution function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n        %(_mvn_doc_default_callparams)s\n        maxpts: integer, optional\n            The maximum number of points to use for integration\n            (default `1000000*dim`)\n        abseps: float, optional\n            Absolute error tolerance (default 1e-5)\n        releps: float, optional\n            Relative error tolerance (default 1e-5)\n\n        Returns\n        -------\n        cdf : ndarray or scalar\n            Cumulative distribution function evaluated at `x`\n\n        Notes\n        -----\n        %(_mvn_doc_callparams_note)s\n\n        .. versionadded:: 1.0.0\n\n        ')
        
        # Assigning a Call to a Tuple (line 617):
        
        # Assigning a Subscript to a Name (line 617):
        
        # Obtaining the type of the subscript
        int_619596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 8), 'int')
        
        # Call to _process_parameters(...): (line 617)
        # Processing the call arguments (line 617)
        # Getting the type of 'None' (line 617)
        None_619599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 50), 'None', False)
        # Getting the type of 'mean' (line 617)
        mean_619600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 56), 'mean', False)
        # Getting the type of 'cov' (line 617)
        cov_619601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 62), 'cov', False)
        # Processing the call keyword arguments (line 617)
        kwargs_619602 = {}
        # Getting the type of 'self' (line 617)
        self_619597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 617)
        _process_parameters_619598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 25), self_619597, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 617)
        _process_parameters_call_result_619603 = invoke(stypy.reporting.localization.Localization(__file__, 617, 25), _process_parameters_619598, *[None_619599, mean_619600, cov_619601], **kwargs_619602)
        
        # Obtaining the member '__getitem__' of a type (line 617)
        getitem___619604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 8), _process_parameters_call_result_619603, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 617)
        subscript_call_result_619605 = invoke(stypy.reporting.localization.Localization(__file__, 617, 8), getitem___619604, int_619596)
        
        # Assigning a type to the variable 'tuple_var_assignment_618579' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'tuple_var_assignment_618579', subscript_call_result_619605)
        
        # Assigning a Subscript to a Name (line 617):
        
        # Obtaining the type of the subscript
        int_619606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 8), 'int')
        
        # Call to _process_parameters(...): (line 617)
        # Processing the call arguments (line 617)
        # Getting the type of 'None' (line 617)
        None_619609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 50), 'None', False)
        # Getting the type of 'mean' (line 617)
        mean_619610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 56), 'mean', False)
        # Getting the type of 'cov' (line 617)
        cov_619611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 62), 'cov', False)
        # Processing the call keyword arguments (line 617)
        kwargs_619612 = {}
        # Getting the type of 'self' (line 617)
        self_619607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 617)
        _process_parameters_619608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 25), self_619607, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 617)
        _process_parameters_call_result_619613 = invoke(stypy.reporting.localization.Localization(__file__, 617, 25), _process_parameters_619608, *[None_619609, mean_619610, cov_619611], **kwargs_619612)
        
        # Obtaining the member '__getitem__' of a type (line 617)
        getitem___619614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 8), _process_parameters_call_result_619613, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 617)
        subscript_call_result_619615 = invoke(stypy.reporting.localization.Localization(__file__, 617, 8), getitem___619614, int_619606)
        
        # Assigning a type to the variable 'tuple_var_assignment_618580' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'tuple_var_assignment_618580', subscript_call_result_619615)
        
        # Assigning a Subscript to a Name (line 617):
        
        # Obtaining the type of the subscript
        int_619616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 8), 'int')
        
        # Call to _process_parameters(...): (line 617)
        # Processing the call arguments (line 617)
        # Getting the type of 'None' (line 617)
        None_619619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 50), 'None', False)
        # Getting the type of 'mean' (line 617)
        mean_619620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 56), 'mean', False)
        # Getting the type of 'cov' (line 617)
        cov_619621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 62), 'cov', False)
        # Processing the call keyword arguments (line 617)
        kwargs_619622 = {}
        # Getting the type of 'self' (line 617)
        self_619617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 617)
        _process_parameters_619618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 25), self_619617, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 617)
        _process_parameters_call_result_619623 = invoke(stypy.reporting.localization.Localization(__file__, 617, 25), _process_parameters_619618, *[None_619619, mean_619620, cov_619621], **kwargs_619622)
        
        # Obtaining the member '__getitem__' of a type (line 617)
        getitem___619624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 8), _process_parameters_call_result_619623, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 617)
        subscript_call_result_619625 = invoke(stypy.reporting.localization.Localization(__file__, 617, 8), getitem___619624, int_619616)
        
        # Assigning a type to the variable 'tuple_var_assignment_618581' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'tuple_var_assignment_618581', subscript_call_result_619625)
        
        # Assigning a Name to a Name (line 617):
        # Getting the type of 'tuple_var_assignment_618579' (line 617)
        tuple_var_assignment_618579_619626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'tuple_var_assignment_618579')
        # Assigning a type to the variable 'dim' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'dim', tuple_var_assignment_618579_619626)
        
        # Assigning a Name to a Name (line 617):
        # Getting the type of 'tuple_var_assignment_618580' (line 617)
        tuple_var_assignment_618580_619627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'tuple_var_assignment_618580')
        # Assigning a type to the variable 'mean' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 13), 'mean', tuple_var_assignment_618580_619627)
        
        # Assigning a Name to a Name (line 617):
        # Getting the type of 'tuple_var_assignment_618581' (line 617)
        tuple_var_assignment_618581_619628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'tuple_var_assignment_618581')
        # Assigning a type to the variable 'cov' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 19), 'cov', tuple_var_assignment_618581_619628)
        
        # Assigning a Call to a Name (line 618):
        
        # Assigning a Call to a Name (line 618):
        
        # Call to _process_quantiles(...): (line 618)
        # Processing the call arguments (line 618)
        # Getting the type of 'x' (line 618)
        x_619631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 36), 'x', False)
        # Getting the type of 'dim' (line 618)
        dim_619632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 39), 'dim', False)
        # Processing the call keyword arguments (line 618)
        kwargs_619633 = {}
        # Getting the type of 'self' (line 618)
        self_619629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 12), 'self', False)
        # Obtaining the member '_process_quantiles' of a type (line 618)
        _process_quantiles_619630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 12), self_619629, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 618)
        _process_quantiles_call_result_619634 = invoke(stypy.reporting.localization.Localization(__file__, 618, 12), _process_quantiles_619630, *[x_619631, dim_619632], **kwargs_619633)
        
        # Assigning a type to the variable 'x' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'x', _process_quantiles_call_result_619634)
        
        # Call to _PSD(...): (line 620)
        # Processing the call arguments (line 620)
        # Getting the type of 'cov' (line 620)
        cov_619636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 13), 'cov', False)
        # Processing the call keyword arguments (line 620)
        # Getting the type of 'allow_singular' (line 620)
        allow_singular_619637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 33), 'allow_singular', False)
        keyword_619638 = allow_singular_619637
        kwargs_619639 = {'allow_singular': keyword_619638}
        # Getting the type of '_PSD' (line 620)
        _PSD_619635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), '_PSD', False)
        # Calling _PSD(args, kwargs) (line 620)
        _PSD_call_result_619640 = invoke(stypy.reporting.localization.Localization(__file__, 620, 8), _PSD_619635, *[cov_619636], **kwargs_619639)
        
        
        
        # Getting the type of 'maxpts' (line 621)
        maxpts_619641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 15), 'maxpts')
        # Applying the 'not' unary operator (line 621)
        result_not__619642 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 11), 'not', maxpts_619641)
        
        # Testing the type of an if condition (line 621)
        if_condition_619643 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 621, 8), result_not__619642)
        # Assigning a type to the variable 'if_condition_619643' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 8), 'if_condition_619643', if_condition_619643)
        # SSA begins for if statement (line 621)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 622):
        
        # Assigning a BinOp to a Name (line 622):
        int_619644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 21), 'int')
        # Getting the type of 'dim' (line 622)
        dim_619645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 31), 'dim')
        # Applying the binary operator '*' (line 622)
        result_mul_619646 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 21), '*', int_619644, dim_619645)
        
        # Assigning a type to the variable 'maxpts' (line 622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 12), 'maxpts', result_mul_619646)
        # SSA join for if statement (line 621)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 623):
        
        # Assigning a Call to a Name (line 623):
        
        # Call to _cdf(...): (line 623)
        # Processing the call arguments (line 623)
        # Getting the type of 'x' (line 623)
        x_619649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 24), 'x', False)
        # Getting the type of 'mean' (line 623)
        mean_619650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 27), 'mean', False)
        # Getting the type of 'cov' (line 623)
        cov_619651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 33), 'cov', False)
        # Getting the type of 'maxpts' (line 623)
        maxpts_619652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 38), 'maxpts', False)
        # Getting the type of 'abseps' (line 623)
        abseps_619653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 46), 'abseps', False)
        # Getting the type of 'releps' (line 623)
        releps_619654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 54), 'releps', False)
        # Processing the call keyword arguments (line 623)
        kwargs_619655 = {}
        # Getting the type of 'self' (line 623)
        self_619647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 14), 'self', False)
        # Obtaining the member '_cdf' of a type (line 623)
        _cdf_619648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 14), self_619647, '_cdf')
        # Calling _cdf(args, kwargs) (line 623)
        _cdf_call_result_619656 = invoke(stypy.reporting.localization.Localization(__file__, 623, 14), _cdf_619648, *[x_619649, mean_619650, cov_619651, maxpts_619652, abseps_619653, releps_619654], **kwargs_619655)
        
        # Assigning a type to the variable 'out' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 8), 'out', _cdf_call_result_619656)
        # Getting the type of 'out' (line 624)
        out_619657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 8), 'stypy_return_type', out_619657)
        
        # ################# End of 'cdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cdf' in the type store
        # Getting the type of 'stypy_return_type' (line 587)
        stypy_return_type_619658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619658)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cdf'
        return stypy_return_type_619658


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 626)
        None_619659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 23), 'None')
        int_619660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 33), 'int')
        int_619661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 41), 'int')
        # Getting the type of 'None' (line 626)
        None_619662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 57), 'None')
        defaults = [None_619659, int_619660, int_619661, None_619662]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 626, 4, False)
        # Assigning a type to the variable 'self' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_gen.rvs.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_gen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_gen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_gen.rvs.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_gen.rvs')
        multivariate_normal_gen.rvs.__dict__.__setitem__('stypy_param_names_list', ['mean', 'cov', 'size', 'random_state'])
        multivariate_normal_gen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_gen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_gen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_gen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_gen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_gen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen.rvs', ['mean', 'cov', 'size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['mean', 'cov', 'size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        str_619663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, (-1)), 'str', '\n        Draw random samples from a multivariate normal distribution.\n\n        Parameters\n        ----------\n        %(_mvn_doc_default_callparams)s\n        size : integer, optional\n            Number of samples to draw (default 1).\n        %(_doc_random_state)s\n\n        Returns\n        -------\n        rvs : ndarray or scalar\n            Random variates of size (`size`, `N`), where `N` is the\n            dimension of the random variable.\n\n        Notes\n        -----\n        %(_mvn_doc_callparams_note)s\n\n        ')
        
        # Assigning a Call to a Tuple (line 648):
        
        # Assigning a Subscript to a Name (line 648):
        
        # Obtaining the type of the subscript
        int_619664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 8), 'int')
        
        # Call to _process_parameters(...): (line 648)
        # Processing the call arguments (line 648)
        # Getting the type of 'None' (line 648)
        None_619667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 50), 'None', False)
        # Getting the type of 'mean' (line 648)
        mean_619668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 56), 'mean', False)
        # Getting the type of 'cov' (line 648)
        cov_619669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 62), 'cov', False)
        # Processing the call keyword arguments (line 648)
        kwargs_619670 = {}
        # Getting the type of 'self' (line 648)
        self_619665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 648)
        _process_parameters_619666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 25), self_619665, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 648)
        _process_parameters_call_result_619671 = invoke(stypy.reporting.localization.Localization(__file__, 648, 25), _process_parameters_619666, *[None_619667, mean_619668, cov_619669], **kwargs_619670)
        
        # Obtaining the member '__getitem__' of a type (line 648)
        getitem___619672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 8), _process_parameters_call_result_619671, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 648)
        subscript_call_result_619673 = invoke(stypy.reporting.localization.Localization(__file__, 648, 8), getitem___619672, int_619664)
        
        # Assigning a type to the variable 'tuple_var_assignment_618582' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'tuple_var_assignment_618582', subscript_call_result_619673)
        
        # Assigning a Subscript to a Name (line 648):
        
        # Obtaining the type of the subscript
        int_619674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 8), 'int')
        
        # Call to _process_parameters(...): (line 648)
        # Processing the call arguments (line 648)
        # Getting the type of 'None' (line 648)
        None_619677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 50), 'None', False)
        # Getting the type of 'mean' (line 648)
        mean_619678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 56), 'mean', False)
        # Getting the type of 'cov' (line 648)
        cov_619679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 62), 'cov', False)
        # Processing the call keyword arguments (line 648)
        kwargs_619680 = {}
        # Getting the type of 'self' (line 648)
        self_619675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 648)
        _process_parameters_619676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 25), self_619675, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 648)
        _process_parameters_call_result_619681 = invoke(stypy.reporting.localization.Localization(__file__, 648, 25), _process_parameters_619676, *[None_619677, mean_619678, cov_619679], **kwargs_619680)
        
        # Obtaining the member '__getitem__' of a type (line 648)
        getitem___619682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 8), _process_parameters_call_result_619681, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 648)
        subscript_call_result_619683 = invoke(stypy.reporting.localization.Localization(__file__, 648, 8), getitem___619682, int_619674)
        
        # Assigning a type to the variable 'tuple_var_assignment_618583' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'tuple_var_assignment_618583', subscript_call_result_619683)
        
        # Assigning a Subscript to a Name (line 648):
        
        # Obtaining the type of the subscript
        int_619684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 8), 'int')
        
        # Call to _process_parameters(...): (line 648)
        # Processing the call arguments (line 648)
        # Getting the type of 'None' (line 648)
        None_619687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 50), 'None', False)
        # Getting the type of 'mean' (line 648)
        mean_619688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 56), 'mean', False)
        # Getting the type of 'cov' (line 648)
        cov_619689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 62), 'cov', False)
        # Processing the call keyword arguments (line 648)
        kwargs_619690 = {}
        # Getting the type of 'self' (line 648)
        self_619685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 648)
        _process_parameters_619686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 25), self_619685, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 648)
        _process_parameters_call_result_619691 = invoke(stypy.reporting.localization.Localization(__file__, 648, 25), _process_parameters_619686, *[None_619687, mean_619688, cov_619689], **kwargs_619690)
        
        # Obtaining the member '__getitem__' of a type (line 648)
        getitem___619692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 8), _process_parameters_call_result_619691, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 648)
        subscript_call_result_619693 = invoke(stypy.reporting.localization.Localization(__file__, 648, 8), getitem___619692, int_619684)
        
        # Assigning a type to the variable 'tuple_var_assignment_618584' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'tuple_var_assignment_618584', subscript_call_result_619693)
        
        # Assigning a Name to a Name (line 648):
        # Getting the type of 'tuple_var_assignment_618582' (line 648)
        tuple_var_assignment_618582_619694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'tuple_var_assignment_618582')
        # Assigning a type to the variable 'dim' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'dim', tuple_var_assignment_618582_619694)
        
        # Assigning a Name to a Name (line 648):
        # Getting the type of 'tuple_var_assignment_618583' (line 648)
        tuple_var_assignment_618583_619695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'tuple_var_assignment_618583')
        # Assigning a type to the variable 'mean' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 13), 'mean', tuple_var_assignment_618583_619695)
        
        # Assigning a Name to a Name (line 648):
        # Getting the type of 'tuple_var_assignment_618584' (line 648)
        tuple_var_assignment_618584_619696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'tuple_var_assignment_618584')
        # Assigning a type to the variable 'cov' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 19), 'cov', tuple_var_assignment_618584_619696)
        
        # Assigning a Call to a Name (line 650):
        
        # Assigning a Call to a Name (line 650):
        
        # Call to _get_random_state(...): (line 650)
        # Processing the call arguments (line 650)
        # Getting the type of 'random_state' (line 650)
        random_state_619699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 46), 'random_state', False)
        # Processing the call keyword arguments (line 650)
        kwargs_619700 = {}
        # Getting the type of 'self' (line 650)
        self_619697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 23), 'self', False)
        # Obtaining the member '_get_random_state' of a type (line 650)
        _get_random_state_619698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 23), self_619697, '_get_random_state')
        # Calling _get_random_state(args, kwargs) (line 650)
        _get_random_state_call_result_619701 = invoke(stypy.reporting.localization.Localization(__file__, 650, 23), _get_random_state_619698, *[random_state_619699], **kwargs_619700)
        
        # Assigning a type to the variable 'random_state' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'random_state', _get_random_state_call_result_619701)
        
        # Assigning a Call to a Name (line 651):
        
        # Assigning a Call to a Name (line 651):
        
        # Call to multivariate_normal(...): (line 651)
        # Processing the call arguments (line 651)
        # Getting the type of 'mean' (line 651)
        mean_619704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 47), 'mean', False)
        # Getting the type of 'cov' (line 651)
        cov_619705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 53), 'cov', False)
        # Getting the type of 'size' (line 651)
        size_619706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 58), 'size', False)
        # Processing the call keyword arguments (line 651)
        kwargs_619707 = {}
        # Getting the type of 'random_state' (line 651)
        random_state_619702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 14), 'random_state', False)
        # Obtaining the member 'multivariate_normal' of a type (line 651)
        multivariate_normal_619703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 14), random_state_619702, 'multivariate_normal')
        # Calling multivariate_normal(args, kwargs) (line 651)
        multivariate_normal_call_result_619708 = invoke(stypy.reporting.localization.Localization(__file__, 651, 14), multivariate_normal_619703, *[mean_619704, cov_619705, size_619706], **kwargs_619707)
        
        # Assigning a type to the variable 'out' (line 651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 8), 'out', multivariate_normal_call_result_619708)
        
        # Call to _squeeze_output(...): (line 652)
        # Processing the call arguments (line 652)
        # Getting the type of 'out' (line 652)
        out_619710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 31), 'out', False)
        # Processing the call keyword arguments (line 652)
        kwargs_619711 = {}
        # Getting the type of '_squeeze_output' (line 652)
        _squeeze_output_619709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 652)
        _squeeze_output_call_result_619712 = invoke(stypy.reporting.localization.Localization(__file__, 652, 15), _squeeze_output_619709, *[out_619710], **kwargs_619711)
        
        # Assigning a type to the variable 'stypy_return_type' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'stypy_return_type', _squeeze_output_call_result_619712)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 626)
        stypy_return_type_619713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619713)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_619713


    @norecursion
    def entropy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 654)
        None_619714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 27), 'None')
        int_619715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 37), 'int')
        defaults = [None_619714, int_619715]
        # Create a new context for function 'entropy'
        module_type_store = module_type_store.open_function_context('entropy', 654, 4, False)
        # Assigning a type to the variable 'self' (line 655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_gen.entropy.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_gen.entropy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_gen.entropy.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_gen.entropy.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_gen.entropy')
        multivariate_normal_gen.entropy.__dict__.__setitem__('stypy_param_names_list', ['mean', 'cov'])
        multivariate_normal_gen.entropy.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_gen.entropy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_gen.entropy.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_gen.entropy.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_gen.entropy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_gen.entropy.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_gen.entropy', ['mean', 'cov'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'entropy', localization, ['mean', 'cov'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'entropy(...)' code ##################

        str_619716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, (-1)), 'str', '\n        Compute the differential entropy of the multivariate normal.\n\n        Parameters\n        ----------\n        %(_mvn_doc_default_callparams)s\n\n        Returns\n        -------\n        h : scalar\n            Entropy of the multivariate normal distribution\n\n        Notes\n        -----\n        %(_mvn_doc_callparams_note)s\n\n        ')
        
        # Assigning a Call to a Tuple (line 672):
        
        # Assigning a Subscript to a Name (line 672):
        
        # Obtaining the type of the subscript
        int_619717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 8), 'int')
        
        # Call to _process_parameters(...): (line 672)
        # Processing the call arguments (line 672)
        # Getting the type of 'None' (line 672)
        None_619720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 50), 'None', False)
        # Getting the type of 'mean' (line 672)
        mean_619721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 56), 'mean', False)
        # Getting the type of 'cov' (line 672)
        cov_619722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 62), 'cov', False)
        # Processing the call keyword arguments (line 672)
        kwargs_619723 = {}
        # Getting the type of 'self' (line 672)
        self_619718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 672)
        _process_parameters_619719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 25), self_619718, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 672)
        _process_parameters_call_result_619724 = invoke(stypy.reporting.localization.Localization(__file__, 672, 25), _process_parameters_619719, *[None_619720, mean_619721, cov_619722], **kwargs_619723)
        
        # Obtaining the member '__getitem__' of a type (line 672)
        getitem___619725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 8), _process_parameters_call_result_619724, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 672)
        subscript_call_result_619726 = invoke(stypy.reporting.localization.Localization(__file__, 672, 8), getitem___619725, int_619717)
        
        # Assigning a type to the variable 'tuple_var_assignment_618585' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'tuple_var_assignment_618585', subscript_call_result_619726)
        
        # Assigning a Subscript to a Name (line 672):
        
        # Obtaining the type of the subscript
        int_619727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 8), 'int')
        
        # Call to _process_parameters(...): (line 672)
        # Processing the call arguments (line 672)
        # Getting the type of 'None' (line 672)
        None_619730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 50), 'None', False)
        # Getting the type of 'mean' (line 672)
        mean_619731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 56), 'mean', False)
        # Getting the type of 'cov' (line 672)
        cov_619732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 62), 'cov', False)
        # Processing the call keyword arguments (line 672)
        kwargs_619733 = {}
        # Getting the type of 'self' (line 672)
        self_619728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 672)
        _process_parameters_619729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 25), self_619728, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 672)
        _process_parameters_call_result_619734 = invoke(stypy.reporting.localization.Localization(__file__, 672, 25), _process_parameters_619729, *[None_619730, mean_619731, cov_619732], **kwargs_619733)
        
        # Obtaining the member '__getitem__' of a type (line 672)
        getitem___619735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 8), _process_parameters_call_result_619734, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 672)
        subscript_call_result_619736 = invoke(stypy.reporting.localization.Localization(__file__, 672, 8), getitem___619735, int_619727)
        
        # Assigning a type to the variable 'tuple_var_assignment_618586' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'tuple_var_assignment_618586', subscript_call_result_619736)
        
        # Assigning a Subscript to a Name (line 672):
        
        # Obtaining the type of the subscript
        int_619737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 8), 'int')
        
        # Call to _process_parameters(...): (line 672)
        # Processing the call arguments (line 672)
        # Getting the type of 'None' (line 672)
        None_619740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 50), 'None', False)
        # Getting the type of 'mean' (line 672)
        mean_619741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 56), 'mean', False)
        # Getting the type of 'cov' (line 672)
        cov_619742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 62), 'cov', False)
        # Processing the call keyword arguments (line 672)
        kwargs_619743 = {}
        # Getting the type of 'self' (line 672)
        self_619738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 672)
        _process_parameters_619739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 25), self_619738, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 672)
        _process_parameters_call_result_619744 = invoke(stypy.reporting.localization.Localization(__file__, 672, 25), _process_parameters_619739, *[None_619740, mean_619741, cov_619742], **kwargs_619743)
        
        # Obtaining the member '__getitem__' of a type (line 672)
        getitem___619745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 8), _process_parameters_call_result_619744, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 672)
        subscript_call_result_619746 = invoke(stypy.reporting.localization.Localization(__file__, 672, 8), getitem___619745, int_619737)
        
        # Assigning a type to the variable 'tuple_var_assignment_618587' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'tuple_var_assignment_618587', subscript_call_result_619746)
        
        # Assigning a Name to a Name (line 672):
        # Getting the type of 'tuple_var_assignment_618585' (line 672)
        tuple_var_assignment_618585_619747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'tuple_var_assignment_618585')
        # Assigning a type to the variable 'dim' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'dim', tuple_var_assignment_618585_619747)
        
        # Assigning a Name to a Name (line 672):
        # Getting the type of 'tuple_var_assignment_618586' (line 672)
        tuple_var_assignment_618586_619748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'tuple_var_assignment_618586')
        # Assigning a type to the variable 'mean' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 13), 'mean', tuple_var_assignment_618586_619748)
        
        # Assigning a Name to a Name (line 672):
        # Getting the type of 'tuple_var_assignment_618587' (line 672)
        tuple_var_assignment_618587_619749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'tuple_var_assignment_618587')
        # Assigning a type to the variable 'cov' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 19), 'cov', tuple_var_assignment_618587_619749)
        
        # Assigning a Call to a Tuple (line 673):
        
        # Assigning a Subscript to a Name (line 673):
        
        # Obtaining the type of the subscript
        int_619750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 673, 8), 'int')
        
        # Call to slogdet(...): (line 673)
        # Processing the call arguments (line 673)
        int_619754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 673, 38), 'int')
        # Getting the type of 'np' (line 673)
        np_619755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 42), 'np', False)
        # Obtaining the member 'pi' of a type (line 673)
        pi_619756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 42), np_619755, 'pi')
        # Applying the binary operator '*' (line 673)
        result_mul_619757 = python_operator(stypy.reporting.localization.Localization(__file__, 673, 38), '*', int_619754, pi_619756)
        
        # Getting the type of 'np' (line 673)
        np_619758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 50), 'np', False)
        # Obtaining the member 'e' of a type (line 673)
        e_619759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 50), np_619758, 'e')
        # Applying the binary operator '*' (line 673)
        result_mul_619760 = python_operator(stypy.reporting.localization.Localization(__file__, 673, 48), '*', result_mul_619757, e_619759)
        
        # Getting the type of 'cov' (line 673)
        cov_619761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 57), 'cov', False)
        # Applying the binary operator '*' (line 673)
        result_mul_619762 = python_operator(stypy.reporting.localization.Localization(__file__, 673, 55), '*', result_mul_619760, cov_619761)
        
        # Processing the call keyword arguments (line 673)
        kwargs_619763 = {}
        # Getting the type of 'np' (line 673)
        np_619751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 20), 'np', False)
        # Obtaining the member 'linalg' of a type (line 673)
        linalg_619752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 20), np_619751, 'linalg')
        # Obtaining the member 'slogdet' of a type (line 673)
        slogdet_619753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 20), linalg_619752, 'slogdet')
        # Calling slogdet(args, kwargs) (line 673)
        slogdet_call_result_619764 = invoke(stypy.reporting.localization.Localization(__file__, 673, 20), slogdet_619753, *[result_mul_619762], **kwargs_619763)
        
        # Obtaining the member '__getitem__' of a type (line 673)
        getitem___619765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 8), slogdet_call_result_619764, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 673)
        subscript_call_result_619766 = invoke(stypy.reporting.localization.Localization(__file__, 673, 8), getitem___619765, int_619750)
        
        # Assigning a type to the variable 'tuple_var_assignment_618588' (line 673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'tuple_var_assignment_618588', subscript_call_result_619766)
        
        # Assigning a Subscript to a Name (line 673):
        
        # Obtaining the type of the subscript
        int_619767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 673, 8), 'int')
        
        # Call to slogdet(...): (line 673)
        # Processing the call arguments (line 673)
        int_619771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 673, 38), 'int')
        # Getting the type of 'np' (line 673)
        np_619772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 42), 'np', False)
        # Obtaining the member 'pi' of a type (line 673)
        pi_619773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 42), np_619772, 'pi')
        # Applying the binary operator '*' (line 673)
        result_mul_619774 = python_operator(stypy.reporting.localization.Localization(__file__, 673, 38), '*', int_619771, pi_619773)
        
        # Getting the type of 'np' (line 673)
        np_619775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 50), 'np', False)
        # Obtaining the member 'e' of a type (line 673)
        e_619776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 50), np_619775, 'e')
        # Applying the binary operator '*' (line 673)
        result_mul_619777 = python_operator(stypy.reporting.localization.Localization(__file__, 673, 48), '*', result_mul_619774, e_619776)
        
        # Getting the type of 'cov' (line 673)
        cov_619778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 57), 'cov', False)
        # Applying the binary operator '*' (line 673)
        result_mul_619779 = python_operator(stypy.reporting.localization.Localization(__file__, 673, 55), '*', result_mul_619777, cov_619778)
        
        # Processing the call keyword arguments (line 673)
        kwargs_619780 = {}
        # Getting the type of 'np' (line 673)
        np_619768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 20), 'np', False)
        # Obtaining the member 'linalg' of a type (line 673)
        linalg_619769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 20), np_619768, 'linalg')
        # Obtaining the member 'slogdet' of a type (line 673)
        slogdet_619770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 20), linalg_619769, 'slogdet')
        # Calling slogdet(args, kwargs) (line 673)
        slogdet_call_result_619781 = invoke(stypy.reporting.localization.Localization(__file__, 673, 20), slogdet_619770, *[result_mul_619779], **kwargs_619780)
        
        # Obtaining the member '__getitem__' of a type (line 673)
        getitem___619782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 8), slogdet_call_result_619781, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 673)
        subscript_call_result_619783 = invoke(stypy.reporting.localization.Localization(__file__, 673, 8), getitem___619782, int_619767)
        
        # Assigning a type to the variable 'tuple_var_assignment_618589' (line 673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'tuple_var_assignment_618589', subscript_call_result_619783)
        
        # Assigning a Name to a Name (line 673):
        # Getting the type of 'tuple_var_assignment_618588' (line 673)
        tuple_var_assignment_618588_619784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'tuple_var_assignment_618588')
        # Assigning a type to the variable '_' (line 673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), '_', tuple_var_assignment_618588_619784)
        
        # Assigning a Name to a Name (line 673):
        # Getting the type of 'tuple_var_assignment_618589' (line 673)
        tuple_var_assignment_618589_619785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'tuple_var_assignment_618589')
        # Assigning a type to the variable 'logdet' (line 673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 11), 'logdet', tuple_var_assignment_618589_619785)
        float_619786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 15), 'float')
        # Getting the type of 'logdet' (line 674)
        logdet_619787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 21), 'logdet')
        # Applying the binary operator '*' (line 674)
        result_mul_619788 = python_operator(stypy.reporting.localization.Localization(__file__, 674, 15), '*', float_619786, logdet_619787)
        
        # Assigning a type to the variable 'stypy_return_type' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'stypy_return_type', result_mul_619788)
        
        # ################# End of 'entropy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'entropy' in the type store
        # Getting the type of 'stypy_return_type' (line 654)
        stypy_return_type_619789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619789)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'entropy'
        return stypy_return_type_619789


# Assigning a type to the variable 'multivariate_normal_gen' (line 259)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 0), 'multivariate_normal_gen', multivariate_normal_gen)

# Assigning a Call to a Name (line 677):

# Assigning a Call to a Name (line 677):

# Call to multivariate_normal_gen(...): (line 677)
# Processing the call keyword arguments (line 677)
kwargs_619791 = {}
# Getting the type of 'multivariate_normal_gen' (line 677)
multivariate_normal_gen_619790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 22), 'multivariate_normal_gen', False)
# Calling multivariate_normal_gen(args, kwargs) (line 677)
multivariate_normal_gen_call_result_619792 = invoke(stypy.reporting.localization.Localization(__file__, 677, 22), multivariate_normal_gen_619790, *[], **kwargs_619791)

# Assigning a type to the variable 'multivariate_normal' (line 677)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 0), 'multivariate_normal', multivariate_normal_gen_call_result_619792)
# Declaration of the 'multivariate_normal_frozen' class
# Getting the type of 'multi_rv_frozen' (line 680)
multi_rv_frozen_619793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 33), 'multi_rv_frozen')

class multivariate_normal_frozen(multi_rv_frozen_619793, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 681)
        None_619794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 28), 'None')
        int_619795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, 38), 'int')
        # Getting the type of 'False' (line 681)
        False_619796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 56), 'False')
        # Getting the type of 'None' (line 681)
        None_619797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 68), 'None')
        # Getting the type of 'None' (line 682)
        None_619798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 24), 'None')
        float_619799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 37), 'float')
        float_619800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 50), 'float')
        defaults = [None_619794, int_619795, False_619796, None_619797, None_619798, float_619799, float_619800]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 681, 4, False)
        # Assigning a type to the variable 'self' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_frozen.__init__', ['mean', 'cov', 'allow_singular', 'seed', 'maxpts', 'abseps', 'releps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['mean', 'cov', 'allow_singular', 'seed', 'maxpts', 'abseps', 'releps'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_619801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, (-1)), 'str', '\n        Create a frozen multivariate normal distribution.\n\n        Parameters\n        ----------\n        mean : array_like, optional\n            Mean of the distribution (default zero)\n        cov : array_like, optional\n            Covariance matrix of the distribution (default one)\n        allow_singular : bool, optional\n            If this flag is True then tolerate a singular\n            covariance matrix (default False).\n        seed : None or int or np.random.RandomState instance, optional\n            This parameter defines the RandomState object to use for drawing\n            random variates.\n            If None (or np.random), the global np.random state is used.\n            If integer, it is used to seed the local RandomState instance\n            Default is None.\n        maxpts: integer, optional\n            The maximum number of points to use for integration of the\n            cumulative distribution function (default `1000000*dim`)\n        abseps: float, optional\n            Absolute error tolerance for the cumulative distribution function\n            (default 1e-5)\n        releps: float, optional\n            Relative error tolerance for the cumulative distribution function\n            (default 1e-5)\n\n        Examples\n        --------\n        When called with the default parameters, this will create a 1D random\n        variable with mean 0 and covariance 1:\n\n        >>> from scipy.stats import multivariate_normal\n        >>> r = multivariate_normal()\n        >>> r.mean\n        array([ 0.])\n        >>> r.cov\n        array([[1.]])\n\n        ')
        
        # Assigning a Call to a Attribute (line 724):
        
        # Assigning a Call to a Attribute (line 724):
        
        # Call to multivariate_normal_gen(...): (line 724)
        # Processing the call arguments (line 724)
        # Getting the type of 'seed' (line 724)
        seed_619803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 45), 'seed', False)
        # Processing the call keyword arguments (line 724)
        kwargs_619804 = {}
        # Getting the type of 'multivariate_normal_gen' (line 724)
        multivariate_normal_gen_619802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 21), 'multivariate_normal_gen', False)
        # Calling multivariate_normal_gen(args, kwargs) (line 724)
        multivariate_normal_gen_call_result_619805 = invoke(stypy.reporting.localization.Localization(__file__, 724, 21), multivariate_normal_gen_619802, *[seed_619803], **kwargs_619804)
        
        # Getting the type of 'self' (line 724)
        self_619806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 8), 'self')
        # Setting the type of the member '_dist' of a type (line 724)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 8), self_619806, '_dist', multivariate_normal_gen_call_result_619805)
        
        # Assigning a Call to a Tuple (line 725):
        
        # Assigning a Subscript to a Name (line 725):
        
        # Obtaining the type of the subscript
        int_619807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 8), 'int')
        
        # Call to _process_parameters(...): (line 725)
        # Processing the call arguments (line 725)
        # Getting the type of 'None' (line 726)
        None_619811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 60), 'None', False)
        # Getting the type of 'mean' (line 726)
        mean_619812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 66), 'mean', False)
        # Getting the type of 'cov' (line 726)
        cov_619813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 72), 'cov', False)
        # Processing the call keyword arguments (line 725)
        kwargs_619814 = {}
        # Getting the type of 'self' (line 725)
        self_619808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 40), 'self', False)
        # Obtaining the member '_dist' of a type (line 725)
        _dist_619809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 40), self_619808, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 725)
        _process_parameters_619810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 40), _dist_619809, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 725)
        _process_parameters_call_result_619815 = invoke(stypy.reporting.localization.Localization(__file__, 725, 40), _process_parameters_619810, *[None_619811, mean_619812, cov_619813], **kwargs_619814)
        
        # Obtaining the member '__getitem__' of a type (line 725)
        getitem___619816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 8), _process_parameters_call_result_619815, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 725)
        subscript_call_result_619817 = invoke(stypy.reporting.localization.Localization(__file__, 725, 8), getitem___619816, int_619807)
        
        # Assigning a type to the variable 'tuple_var_assignment_618590' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'tuple_var_assignment_618590', subscript_call_result_619817)
        
        # Assigning a Subscript to a Name (line 725):
        
        # Obtaining the type of the subscript
        int_619818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 8), 'int')
        
        # Call to _process_parameters(...): (line 725)
        # Processing the call arguments (line 725)
        # Getting the type of 'None' (line 726)
        None_619822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 60), 'None', False)
        # Getting the type of 'mean' (line 726)
        mean_619823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 66), 'mean', False)
        # Getting the type of 'cov' (line 726)
        cov_619824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 72), 'cov', False)
        # Processing the call keyword arguments (line 725)
        kwargs_619825 = {}
        # Getting the type of 'self' (line 725)
        self_619819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 40), 'self', False)
        # Obtaining the member '_dist' of a type (line 725)
        _dist_619820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 40), self_619819, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 725)
        _process_parameters_619821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 40), _dist_619820, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 725)
        _process_parameters_call_result_619826 = invoke(stypy.reporting.localization.Localization(__file__, 725, 40), _process_parameters_619821, *[None_619822, mean_619823, cov_619824], **kwargs_619825)
        
        # Obtaining the member '__getitem__' of a type (line 725)
        getitem___619827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 8), _process_parameters_call_result_619826, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 725)
        subscript_call_result_619828 = invoke(stypy.reporting.localization.Localization(__file__, 725, 8), getitem___619827, int_619818)
        
        # Assigning a type to the variable 'tuple_var_assignment_618591' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'tuple_var_assignment_618591', subscript_call_result_619828)
        
        # Assigning a Subscript to a Name (line 725):
        
        # Obtaining the type of the subscript
        int_619829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 8), 'int')
        
        # Call to _process_parameters(...): (line 725)
        # Processing the call arguments (line 725)
        # Getting the type of 'None' (line 726)
        None_619833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 60), 'None', False)
        # Getting the type of 'mean' (line 726)
        mean_619834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 66), 'mean', False)
        # Getting the type of 'cov' (line 726)
        cov_619835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 72), 'cov', False)
        # Processing the call keyword arguments (line 725)
        kwargs_619836 = {}
        # Getting the type of 'self' (line 725)
        self_619830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 40), 'self', False)
        # Obtaining the member '_dist' of a type (line 725)
        _dist_619831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 40), self_619830, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 725)
        _process_parameters_619832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 40), _dist_619831, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 725)
        _process_parameters_call_result_619837 = invoke(stypy.reporting.localization.Localization(__file__, 725, 40), _process_parameters_619832, *[None_619833, mean_619834, cov_619835], **kwargs_619836)
        
        # Obtaining the member '__getitem__' of a type (line 725)
        getitem___619838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 8), _process_parameters_call_result_619837, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 725)
        subscript_call_result_619839 = invoke(stypy.reporting.localization.Localization(__file__, 725, 8), getitem___619838, int_619829)
        
        # Assigning a type to the variable 'tuple_var_assignment_618592' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'tuple_var_assignment_618592', subscript_call_result_619839)
        
        # Assigning a Name to a Attribute (line 725):
        # Getting the type of 'tuple_var_assignment_618590' (line 725)
        tuple_var_assignment_618590_619840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'tuple_var_assignment_618590')
        # Getting the type of 'self' (line 725)
        self_619841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'self')
        # Setting the type of the member 'dim' of a type (line 725)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 8), self_619841, 'dim', tuple_var_assignment_618590_619840)
        
        # Assigning a Name to a Attribute (line 725):
        # Getting the type of 'tuple_var_assignment_618591' (line 725)
        tuple_var_assignment_618591_619842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'tuple_var_assignment_618591')
        # Getting the type of 'self' (line 725)
        self_619843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 18), 'self')
        # Setting the type of the member 'mean' of a type (line 725)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 18), self_619843, 'mean', tuple_var_assignment_618591_619842)
        
        # Assigning a Name to a Attribute (line 725):
        # Getting the type of 'tuple_var_assignment_618592' (line 725)
        tuple_var_assignment_618592_619844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'tuple_var_assignment_618592')
        # Getting the type of 'self' (line 725)
        self_619845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 29), 'self')
        # Setting the type of the member 'cov' of a type (line 725)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 29), self_619845, 'cov', tuple_var_assignment_618592_619844)
        
        # Assigning a Call to a Attribute (line 727):
        
        # Assigning a Call to a Attribute (line 727):
        
        # Call to _PSD(...): (line 727)
        # Processing the call arguments (line 727)
        # Getting the type of 'self' (line 727)
        self_619847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 29), 'self', False)
        # Obtaining the member 'cov' of a type (line 727)
        cov_619848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 29), self_619847, 'cov')
        # Processing the call keyword arguments (line 727)
        # Getting the type of 'allow_singular' (line 727)
        allow_singular_619849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 54), 'allow_singular', False)
        keyword_619850 = allow_singular_619849
        kwargs_619851 = {'allow_singular': keyword_619850}
        # Getting the type of '_PSD' (line 727)
        _PSD_619846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 24), '_PSD', False)
        # Calling _PSD(args, kwargs) (line 727)
        _PSD_call_result_619852 = invoke(stypy.reporting.localization.Localization(__file__, 727, 24), _PSD_619846, *[cov_619848], **kwargs_619851)
        
        # Getting the type of 'self' (line 727)
        self_619853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'self')
        # Setting the type of the member 'cov_info' of a type (line 727)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 8), self_619853, 'cov_info', _PSD_call_result_619852)
        
        
        # Getting the type of 'maxpts' (line 728)
        maxpts_619854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 15), 'maxpts')
        # Applying the 'not' unary operator (line 728)
        result_not__619855 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 11), 'not', maxpts_619854)
        
        # Testing the type of an if condition (line 728)
        if_condition_619856 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 728, 8), result_not__619855)
        # Assigning a type to the variable 'if_condition_619856' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 8), 'if_condition_619856', if_condition_619856)
        # SSA begins for if statement (line 728)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 729):
        
        # Assigning a BinOp to a Name (line 729):
        int_619857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 21), 'int')
        # Getting the type of 'self' (line 729)
        self_619858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 31), 'self')
        # Obtaining the member 'dim' of a type (line 729)
        dim_619859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 31), self_619858, 'dim')
        # Applying the binary operator '*' (line 729)
        result_mul_619860 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 21), '*', int_619857, dim_619859)
        
        # Assigning a type to the variable 'maxpts' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 12), 'maxpts', result_mul_619860)
        # SSA join for if statement (line 728)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 730):
        
        # Assigning a Name to a Attribute (line 730):
        # Getting the type of 'maxpts' (line 730)
        maxpts_619861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 22), 'maxpts')
        # Getting the type of 'self' (line 730)
        self_619862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 8), 'self')
        # Setting the type of the member 'maxpts' of a type (line 730)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 8), self_619862, 'maxpts', maxpts_619861)
        
        # Assigning a Name to a Attribute (line 731):
        
        # Assigning a Name to a Attribute (line 731):
        # Getting the type of 'abseps' (line 731)
        abseps_619863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 22), 'abseps')
        # Getting the type of 'self' (line 731)
        self_619864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 8), 'self')
        # Setting the type of the member 'abseps' of a type (line 731)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 8), self_619864, 'abseps', abseps_619863)
        
        # Assigning a Name to a Attribute (line 732):
        
        # Assigning a Name to a Attribute (line 732):
        # Getting the type of 'releps' (line 732)
        releps_619865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 22), 'releps')
        # Getting the type of 'self' (line 732)
        self_619866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'self')
        # Setting the type of the member 'releps' of a type (line 732)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 8), self_619866, 'releps', releps_619865)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'logpdf'
        module_type_store = module_type_store.open_function_context('logpdf', 734, 4, False)
        # Assigning a type to the variable 'self' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_frozen.logpdf.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_frozen.logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_frozen.logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_frozen.logpdf.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_frozen.logpdf')
        multivariate_normal_frozen.logpdf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        multivariate_normal_frozen.logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_frozen.logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_frozen.logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_frozen.logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_frozen.logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_frozen.logpdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_frozen.logpdf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpdf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpdf(...)' code ##################

        
        # Assigning a Call to a Name (line 735):
        
        # Assigning a Call to a Name (line 735):
        
        # Call to _process_quantiles(...): (line 735)
        # Processing the call arguments (line 735)
        # Getting the type of 'x' (line 735)
        x_619870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 42), 'x', False)
        # Getting the type of 'self' (line 735)
        self_619871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 45), 'self', False)
        # Obtaining the member 'dim' of a type (line 735)
        dim_619872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 45), self_619871, 'dim')
        # Processing the call keyword arguments (line 735)
        kwargs_619873 = {}
        # Getting the type of 'self' (line 735)
        self_619867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 12), 'self', False)
        # Obtaining the member '_dist' of a type (line 735)
        _dist_619868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 12), self_619867, '_dist')
        # Obtaining the member '_process_quantiles' of a type (line 735)
        _process_quantiles_619869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 12), _dist_619868, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 735)
        _process_quantiles_call_result_619874 = invoke(stypy.reporting.localization.Localization(__file__, 735, 12), _process_quantiles_619869, *[x_619870, dim_619872], **kwargs_619873)
        
        # Assigning a type to the variable 'x' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'x', _process_quantiles_call_result_619874)
        
        # Assigning a Call to a Name (line 736):
        
        # Assigning a Call to a Name (line 736):
        
        # Call to _logpdf(...): (line 736)
        # Processing the call arguments (line 736)
        # Getting the type of 'x' (line 736)
        x_619878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 33), 'x', False)
        # Getting the type of 'self' (line 736)
        self_619879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 36), 'self', False)
        # Obtaining the member 'mean' of a type (line 736)
        mean_619880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 36), self_619879, 'mean')
        # Getting the type of 'self' (line 736)
        self_619881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 47), 'self', False)
        # Obtaining the member 'cov_info' of a type (line 736)
        cov_info_619882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 47), self_619881, 'cov_info')
        # Obtaining the member 'U' of a type (line 736)
        U_619883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 47), cov_info_619882, 'U')
        # Getting the type of 'self' (line 737)
        self_619884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 33), 'self', False)
        # Obtaining the member 'cov_info' of a type (line 737)
        cov_info_619885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 33), self_619884, 'cov_info')
        # Obtaining the member 'log_pdet' of a type (line 737)
        log_pdet_619886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 33), cov_info_619885, 'log_pdet')
        # Getting the type of 'self' (line 737)
        self_619887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 57), 'self', False)
        # Obtaining the member 'cov_info' of a type (line 737)
        cov_info_619888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 57), self_619887, 'cov_info')
        # Obtaining the member 'rank' of a type (line 737)
        rank_619889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 57), cov_info_619888, 'rank')
        # Processing the call keyword arguments (line 736)
        kwargs_619890 = {}
        # Getting the type of 'self' (line 736)
        self_619875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 736)
        _dist_619876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 14), self_619875, '_dist')
        # Obtaining the member '_logpdf' of a type (line 736)
        _logpdf_619877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 14), _dist_619876, '_logpdf')
        # Calling _logpdf(args, kwargs) (line 736)
        _logpdf_call_result_619891 = invoke(stypy.reporting.localization.Localization(__file__, 736, 14), _logpdf_619877, *[x_619878, mean_619880, U_619883, log_pdet_619886, rank_619889], **kwargs_619890)
        
        # Assigning a type to the variable 'out' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'out', _logpdf_call_result_619891)
        
        # Call to _squeeze_output(...): (line 738)
        # Processing the call arguments (line 738)
        # Getting the type of 'out' (line 738)
        out_619893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 31), 'out', False)
        # Processing the call keyword arguments (line 738)
        kwargs_619894 = {}
        # Getting the type of '_squeeze_output' (line 738)
        _squeeze_output_619892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 738)
        _squeeze_output_call_result_619895 = invoke(stypy.reporting.localization.Localization(__file__, 738, 15), _squeeze_output_619892, *[out_619893], **kwargs_619894)
        
        # Assigning a type to the variable 'stypy_return_type' (line 738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 8), 'stypy_return_type', _squeeze_output_call_result_619895)
        
        # ################# End of 'logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 734)
        stypy_return_type_619896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619896)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpdf'
        return stypy_return_type_619896


    @norecursion
    def pdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pdf'
        module_type_store = module_type_store.open_function_context('pdf', 740, 4, False)
        # Assigning a type to the variable 'self' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_frozen.pdf.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_frozen.pdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_frozen.pdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_frozen.pdf.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_frozen.pdf')
        multivariate_normal_frozen.pdf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        multivariate_normal_frozen.pdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_frozen.pdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_frozen.pdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_frozen.pdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_frozen.pdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_frozen.pdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_frozen.pdf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pdf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pdf(...)' code ##################

        
        # Call to exp(...): (line 741)
        # Processing the call arguments (line 741)
        
        # Call to logpdf(...): (line 741)
        # Processing the call arguments (line 741)
        # Getting the type of 'x' (line 741)
        x_619901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 34), 'x', False)
        # Processing the call keyword arguments (line 741)
        kwargs_619902 = {}
        # Getting the type of 'self' (line 741)
        self_619899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 22), 'self', False)
        # Obtaining the member 'logpdf' of a type (line 741)
        logpdf_619900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 22), self_619899, 'logpdf')
        # Calling logpdf(args, kwargs) (line 741)
        logpdf_call_result_619903 = invoke(stypy.reporting.localization.Localization(__file__, 741, 22), logpdf_619900, *[x_619901], **kwargs_619902)
        
        # Processing the call keyword arguments (line 741)
        kwargs_619904 = {}
        # Getting the type of 'np' (line 741)
        np_619897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 15), 'np', False)
        # Obtaining the member 'exp' of a type (line 741)
        exp_619898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 15), np_619897, 'exp')
        # Calling exp(args, kwargs) (line 741)
        exp_call_result_619905 = invoke(stypy.reporting.localization.Localization(__file__, 741, 15), exp_619898, *[logpdf_call_result_619903], **kwargs_619904)
        
        # Assigning a type to the variable 'stypy_return_type' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'stypy_return_type', exp_call_result_619905)
        
        # ################# End of 'pdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pdf' in the type store
        # Getting the type of 'stypy_return_type' (line 740)
        stypy_return_type_619906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619906)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pdf'
        return stypy_return_type_619906


    @norecursion
    def logcdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'logcdf'
        module_type_store = module_type_store.open_function_context('logcdf', 743, 4, False)
        # Assigning a type to the variable 'self' (line 744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_frozen.logcdf.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_frozen.logcdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_frozen.logcdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_frozen.logcdf.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_frozen.logcdf')
        multivariate_normal_frozen.logcdf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        multivariate_normal_frozen.logcdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_frozen.logcdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_frozen.logcdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_frozen.logcdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_frozen.logcdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_frozen.logcdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_frozen.logcdf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logcdf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logcdf(...)' code ##################

        
        # Call to log(...): (line 744)
        # Processing the call arguments (line 744)
        
        # Call to cdf(...): (line 744)
        # Processing the call arguments (line 744)
        # Getting the type of 'x' (line 744)
        x_619911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 31), 'x', False)
        # Processing the call keyword arguments (line 744)
        kwargs_619912 = {}
        # Getting the type of 'self' (line 744)
        self_619909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 22), 'self', False)
        # Obtaining the member 'cdf' of a type (line 744)
        cdf_619910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 22), self_619909, 'cdf')
        # Calling cdf(args, kwargs) (line 744)
        cdf_call_result_619913 = invoke(stypy.reporting.localization.Localization(__file__, 744, 22), cdf_619910, *[x_619911], **kwargs_619912)
        
        # Processing the call keyword arguments (line 744)
        kwargs_619914 = {}
        # Getting the type of 'np' (line 744)
        np_619907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 15), 'np', False)
        # Obtaining the member 'log' of a type (line 744)
        log_619908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 15), np_619907, 'log')
        # Calling log(args, kwargs) (line 744)
        log_call_result_619915 = invoke(stypy.reporting.localization.Localization(__file__, 744, 15), log_619908, *[cdf_call_result_619913], **kwargs_619914)
        
        # Assigning a type to the variable 'stypy_return_type' (line 744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 8), 'stypy_return_type', log_call_result_619915)
        
        # ################# End of 'logcdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logcdf' in the type store
        # Getting the type of 'stypy_return_type' (line 743)
        stypy_return_type_619916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619916)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logcdf'
        return stypy_return_type_619916


    @norecursion
    def cdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cdf'
        module_type_store = module_type_store.open_function_context('cdf', 746, 4, False)
        # Assigning a type to the variable 'self' (line 747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_frozen.cdf.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_frozen.cdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_frozen.cdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_frozen.cdf.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_frozen.cdf')
        multivariate_normal_frozen.cdf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        multivariate_normal_frozen.cdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_frozen.cdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_frozen.cdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_frozen.cdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_frozen.cdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_frozen.cdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_frozen.cdf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cdf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cdf(...)' code ##################

        
        # Assigning a Call to a Name (line 747):
        
        # Assigning a Call to a Name (line 747):
        
        # Call to _process_quantiles(...): (line 747)
        # Processing the call arguments (line 747)
        # Getting the type of 'x' (line 747)
        x_619920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 42), 'x', False)
        # Getting the type of 'self' (line 747)
        self_619921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 45), 'self', False)
        # Obtaining the member 'dim' of a type (line 747)
        dim_619922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 45), self_619921, 'dim')
        # Processing the call keyword arguments (line 747)
        kwargs_619923 = {}
        # Getting the type of 'self' (line 747)
        self_619917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 12), 'self', False)
        # Obtaining the member '_dist' of a type (line 747)
        _dist_619918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 12), self_619917, '_dist')
        # Obtaining the member '_process_quantiles' of a type (line 747)
        _process_quantiles_619919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 12), _dist_619918, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 747)
        _process_quantiles_call_result_619924 = invoke(stypy.reporting.localization.Localization(__file__, 747, 12), _process_quantiles_619919, *[x_619920, dim_619922], **kwargs_619923)
        
        # Assigning a type to the variable 'x' (line 747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 8), 'x', _process_quantiles_call_result_619924)
        
        # Assigning a Call to a Name (line 748):
        
        # Assigning a Call to a Name (line 748):
        
        # Call to _cdf(...): (line 748)
        # Processing the call arguments (line 748)
        # Getting the type of 'x' (line 748)
        x_619928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 30), 'x', False)
        # Getting the type of 'self' (line 748)
        self_619929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 33), 'self', False)
        # Obtaining the member 'mean' of a type (line 748)
        mean_619930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 33), self_619929, 'mean')
        # Getting the type of 'self' (line 748)
        self_619931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 44), 'self', False)
        # Obtaining the member 'cov' of a type (line 748)
        cov_619932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 44), self_619931, 'cov')
        # Getting the type of 'self' (line 748)
        self_619933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 54), 'self', False)
        # Obtaining the member 'maxpts' of a type (line 748)
        maxpts_619934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 54), self_619933, 'maxpts')
        # Getting the type of 'self' (line 748)
        self_619935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 67), 'self', False)
        # Obtaining the member 'abseps' of a type (line 748)
        abseps_619936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 67), self_619935, 'abseps')
        # Getting the type of 'self' (line 749)
        self_619937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 30), 'self', False)
        # Obtaining the member 'releps' of a type (line 749)
        releps_619938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 749, 30), self_619937, 'releps')
        # Processing the call keyword arguments (line 748)
        kwargs_619939 = {}
        # Getting the type of 'self' (line 748)
        self_619925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 748)
        _dist_619926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 14), self_619925, '_dist')
        # Obtaining the member '_cdf' of a type (line 748)
        _cdf_619927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 14), _dist_619926, '_cdf')
        # Calling _cdf(args, kwargs) (line 748)
        _cdf_call_result_619940 = invoke(stypy.reporting.localization.Localization(__file__, 748, 14), _cdf_619927, *[x_619928, mean_619930, cov_619932, maxpts_619934, abseps_619936, releps_619938], **kwargs_619939)
        
        # Assigning a type to the variable 'out' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'out', _cdf_call_result_619940)
        
        # Call to _squeeze_output(...): (line 750)
        # Processing the call arguments (line 750)
        # Getting the type of 'out' (line 750)
        out_619942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 31), 'out', False)
        # Processing the call keyword arguments (line 750)
        kwargs_619943 = {}
        # Getting the type of '_squeeze_output' (line 750)
        _squeeze_output_619941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 750)
        _squeeze_output_call_result_619944 = invoke(stypy.reporting.localization.Localization(__file__, 750, 15), _squeeze_output_619941, *[out_619942], **kwargs_619943)
        
        # Assigning a type to the variable 'stypy_return_type' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'stypy_return_type', _squeeze_output_call_result_619944)
        
        # ################# End of 'cdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cdf' in the type store
        # Getting the type of 'stypy_return_type' (line 746)
        stypy_return_type_619945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619945)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cdf'
        return stypy_return_type_619945


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_619946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 23), 'int')
        # Getting the type of 'None' (line 752)
        None_619947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 39), 'None')
        defaults = [int_619946, None_619947]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 752, 4, False)
        # Assigning a type to the variable 'self' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_frozen.rvs.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_frozen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_frozen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_frozen.rvs.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_frozen.rvs')
        multivariate_normal_frozen.rvs.__dict__.__setitem__('stypy_param_names_list', ['size', 'random_state'])
        multivariate_normal_frozen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_frozen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_frozen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_frozen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_frozen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_frozen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_frozen.rvs', ['size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        
        # Call to rvs(...): (line 753)
        # Processing the call arguments (line 753)
        # Getting the type of 'self' (line 753)
        self_619951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 30), 'self', False)
        # Obtaining the member 'mean' of a type (line 753)
        mean_619952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 30), self_619951, 'mean')
        # Getting the type of 'self' (line 753)
        self_619953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 41), 'self', False)
        # Obtaining the member 'cov' of a type (line 753)
        cov_619954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 41), self_619953, 'cov')
        # Getting the type of 'size' (line 753)
        size_619955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 51), 'size', False)
        # Getting the type of 'random_state' (line 753)
        random_state_619956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 57), 'random_state', False)
        # Processing the call keyword arguments (line 753)
        kwargs_619957 = {}
        # Getting the type of 'self' (line 753)
        self_619948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 753)
        _dist_619949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 15), self_619948, '_dist')
        # Obtaining the member 'rvs' of a type (line 753)
        rvs_619950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 15), _dist_619949, 'rvs')
        # Calling rvs(args, kwargs) (line 753)
        rvs_call_result_619958 = invoke(stypy.reporting.localization.Localization(__file__, 753, 15), rvs_619950, *[mean_619952, cov_619954, size_619955, random_state_619956], **kwargs_619957)
        
        # Assigning a type to the variable 'stypy_return_type' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 8), 'stypy_return_type', rvs_call_result_619958)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 752)
        stypy_return_type_619959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619959)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_619959


    @norecursion
    def entropy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'entropy'
        module_type_store = module_type_store.open_function_context('entropy', 755, 4, False)
        # Assigning a type to the variable 'self' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multivariate_normal_frozen.entropy.__dict__.__setitem__('stypy_localization', localization)
        multivariate_normal_frozen.entropy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multivariate_normal_frozen.entropy.__dict__.__setitem__('stypy_type_store', module_type_store)
        multivariate_normal_frozen.entropy.__dict__.__setitem__('stypy_function_name', 'multivariate_normal_frozen.entropy')
        multivariate_normal_frozen.entropy.__dict__.__setitem__('stypy_param_names_list', [])
        multivariate_normal_frozen.entropy.__dict__.__setitem__('stypy_varargs_param_name', None)
        multivariate_normal_frozen.entropy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multivariate_normal_frozen.entropy.__dict__.__setitem__('stypy_call_defaults', defaults)
        multivariate_normal_frozen.entropy.__dict__.__setitem__('stypy_call_varargs', varargs)
        multivariate_normal_frozen.entropy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multivariate_normal_frozen.entropy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multivariate_normal_frozen.entropy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'entropy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'entropy(...)' code ##################

        str_619960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, (-1)), 'str', '\n        Computes the differential entropy of the multivariate normal.\n\n        Returns\n        -------\n        h : scalar\n            Entropy of the multivariate normal distribution\n\n        ')
        
        # Assigning a Attribute to a Name (line 765):
        
        # Assigning a Attribute to a Name (line 765):
        # Getting the type of 'self' (line 765)
        self_619961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 19), 'self')
        # Obtaining the member 'cov_info' of a type (line 765)
        cov_info_619962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 19), self_619961, 'cov_info')
        # Obtaining the member 'log_pdet' of a type (line 765)
        log_pdet_619963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 19), cov_info_619962, 'log_pdet')
        # Assigning a type to the variable 'log_pdet' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 8), 'log_pdet', log_pdet_619963)
        
        # Assigning a Attribute to a Name (line 766):
        
        # Assigning a Attribute to a Name (line 766):
        # Getting the type of 'self' (line 766)
        self_619964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 15), 'self')
        # Obtaining the member 'cov_info' of a type (line 766)
        cov_info_619965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 15), self_619964, 'cov_info')
        # Obtaining the member 'rank' of a type (line 766)
        rank_619966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 15), cov_info_619965, 'rank')
        # Assigning a type to the variable 'rank' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 8), 'rank', rank_619966)
        float_619967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 15), 'float')
        # Getting the type of 'rank' (line 767)
        rank_619968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 22), 'rank')
        # Getting the type of '_LOG_2PI' (line 767)
        _LOG_2PI_619969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 30), '_LOG_2PI')
        int_619970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 41), 'int')
        # Applying the binary operator '+' (line 767)
        result_add_619971 = python_operator(stypy.reporting.localization.Localization(__file__, 767, 30), '+', _LOG_2PI_619969, int_619970)
        
        # Applying the binary operator '*' (line 767)
        result_mul_619972 = python_operator(stypy.reporting.localization.Localization(__file__, 767, 22), '*', rank_619968, result_add_619971)
        
        # Getting the type of 'log_pdet' (line 767)
        log_pdet_619973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 46), 'log_pdet')
        # Applying the binary operator '+' (line 767)
        result_add_619974 = python_operator(stypy.reporting.localization.Localization(__file__, 767, 22), '+', result_mul_619972, log_pdet_619973)
        
        # Applying the binary operator '*' (line 767)
        result_mul_619975 = python_operator(stypy.reporting.localization.Localization(__file__, 767, 15), '*', float_619967, result_add_619974)
        
        # Assigning a type to the variable 'stypy_return_type' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'stypy_return_type', result_mul_619975)
        
        # ################# End of 'entropy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'entropy' in the type store
        # Getting the type of 'stypy_return_type' (line 755)
        stypy_return_type_619976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_619976)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'entropy'
        return stypy_return_type_619976


# Assigning a type to the variable 'multivariate_normal_frozen' (line 680)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 0), 'multivariate_normal_frozen', multivariate_normal_frozen)


# Obtaining an instance of the builtin type 'list' (line 771)
list_619977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 12), 'list')
# Adding type elements to the builtin type 'list' instance (line 771)
# Adding element type (line 771)
str_619978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 13), 'str', 'logpdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 771, 12), list_619977, str_619978)
# Adding element type (line 771)
str_619979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 23), 'str', 'pdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 771, 12), list_619977, str_619979)
# Adding element type (line 771)
str_619980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 30), 'str', 'logcdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 771, 12), list_619977, str_619980)
# Adding element type (line 771)
str_619981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 40), 'str', 'cdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 771, 12), list_619977, str_619981)
# Adding element type (line 771)
str_619982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 47), 'str', 'rvs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 771, 12), list_619977, str_619982)

# Testing the type of a for loop iterable (line 771)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 771, 0), list_619977)
# Getting the type of the for loop variable (line 771)
for_loop_var_619983 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 771, 0), list_619977)
# Assigning a type to the variable 'name' (line 771)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 0), 'name', for_loop_var_619983)
# SSA begins for a for statement (line 771)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')

# Assigning a Subscript to a Name (line 772):

# Assigning a Subscript to a Name (line 772):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 772)
name_619984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 46), 'name')
# Getting the type of 'multivariate_normal_gen' (line 772)
multivariate_normal_gen_619985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 13), 'multivariate_normal_gen')
# Obtaining the member '__dict__' of a type (line 772)
dict___619986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 13), multivariate_normal_gen_619985, '__dict__')
# Obtaining the member '__getitem__' of a type (line 772)
getitem___619987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 13), dict___619986, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 772)
subscript_call_result_619988 = invoke(stypy.reporting.localization.Localization(__file__, 772, 13), getitem___619987, name_619984)

# Assigning a type to the variable 'method' (line 772)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 4), 'method', subscript_call_result_619988)

# Assigning a Subscript to a Name (line 773):

# Assigning a Subscript to a Name (line 773):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 773)
name_619989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 56), 'name')
# Getting the type of 'multivariate_normal_frozen' (line 773)
multivariate_normal_frozen_619990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 20), 'multivariate_normal_frozen')
# Obtaining the member '__dict__' of a type (line 773)
dict___619991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 20), multivariate_normal_frozen_619990, '__dict__')
# Obtaining the member '__getitem__' of a type (line 773)
getitem___619992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 20), dict___619991, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 773)
subscript_call_result_619993 = invoke(stypy.reporting.localization.Localization(__file__, 773, 20), getitem___619992, name_619989)

# Assigning a type to the variable 'method_frozen' (line 773)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 4), 'method_frozen', subscript_call_result_619993)

# Assigning a Call to a Attribute (line 774):

# Assigning a Call to a Attribute (line 774):

# Call to docformat(...): (line 774)
# Processing the call arguments (line 774)
# Getting the type of 'method' (line 774)
method_619996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 45), 'method', False)
# Obtaining the member '__doc__' of a type (line 774)
doc___619997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 45), method_619996, '__doc__')
# Getting the type of 'mvn_docdict_noparams' (line 774)
mvn_docdict_noparams_619998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 61), 'mvn_docdict_noparams', False)
# Processing the call keyword arguments (line 774)
kwargs_619999 = {}
# Getting the type of 'doccer' (line 774)
doccer_619994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 28), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 774)
docformat_619995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 28), doccer_619994, 'docformat')
# Calling docformat(args, kwargs) (line 774)
docformat_call_result_620000 = invoke(stypy.reporting.localization.Localization(__file__, 774, 28), docformat_619995, *[doc___619997, mvn_docdict_noparams_619998], **kwargs_619999)

# Getting the type of 'method_frozen' (line 774)
method_frozen_620001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 4), 'method_frozen')
# Setting the type of the member '__doc__' of a type (line 774)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 4), method_frozen_620001, '__doc__', docformat_call_result_620000)

# Assigning a Call to a Attribute (line 775):

# Assigning a Call to a Attribute (line 775):

# Call to docformat(...): (line 775)
# Processing the call arguments (line 775)
# Getting the type of 'method' (line 775)
method_620004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 38), 'method', False)
# Obtaining the member '__doc__' of a type (line 775)
doc___620005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 38), method_620004, '__doc__')
# Getting the type of 'mvn_docdict_params' (line 775)
mvn_docdict_params_620006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 54), 'mvn_docdict_params', False)
# Processing the call keyword arguments (line 775)
kwargs_620007 = {}
# Getting the type of 'doccer' (line 775)
doccer_620002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 21), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 775)
docformat_620003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 21), doccer_620002, 'docformat')
# Calling docformat(args, kwargs) (line 775)
docformat_call_result_620008 = invoke(stypy.reporting.localization.Localization(__file__, 775, 21), docformat_620003, *[doc___620005, mvn_docdict_params_620006], **kwargs_620007)

# Getting the type of 'method' (line 775)
method_620009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 4), 'method')
# Setting the type of the member '__doc__' of a type (line 775)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 4), method_620009, '__doc__', docformat_call_result_620008)
# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()


# Assigning a Str to a Name (line 777):

# Assigning a Str to a Name (line 777):
str_620010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 784, (-1)), 'str', 'mean : array_like, optional\n    Mean of the distribution (default: `None`)\nrowcov : array_like, optional\n    Among-row covariance matrix of the distribution (default: `1`)\ncolcov : array_like, optional\n    Among-column covariance matrix of the distribution (default: `1`)\n')
# Assigning a type to the variable '_matnorm_doc_default_callparams' (line 777)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 0), '_matnorm_doc_default_callparams', str_620010)

# Assigning a Str to a Name (line 786):

# Assigning a Str to a Name (line 786):
str_620011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, (-1)), 'str', 'If `mean` is set to `None` then a matrix of zeros is used for the mean.\n    The dimensions of this matrix are inferred from the shape of `rowcov` and\n    `colcov`, if these are provided, or set to `1` if ambiguous.\n\n    `rowcov` and `colcov` can be two-dimensional array_likes specifying the\n    covariance matrices directly. Alternatively, a one-dimensional array will\n    be be interpreted as the entries of a diagonal matrix, and a scalar or\n    zero-dimensional array will be interpreted as this value times the\n    identity matrix.\n    ')
# Assigning a type to the variable '_matnorm_doc_callparams_note' (line 786)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 0), '_matnorm_doc_callparams_note', str_620011)

# Assigning a Str to a Name (line 798):

# Assigning a Str to a Name (line 798):
str_620012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 33), 'str', '')
# Assigning a type to the variable '_matnorm_doc_frozen_callparams' (line 798)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 0), '_matnorm_doc_frozen_callparams', str_620012)

# Assigning a Str to a Name (line 800):

# Assigning a Str to a Name (line 800):
str_620013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 801, 4), 'str', 'See class definition for a detailed description of parameters.')
# Assigning a type to the variable '_matnorm_doc_frozen_callparams_note' (line 800)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 0), '_matnorm_doc_frozen_callparams_note', str_620013)

# Assigning a Dict to a Name (line 803):

# Assigning a Dict to a Name (line 803):

# Obtaining an instance of the builtin type 'dict' (line 803)
dict_620014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 25), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 803)
# Adding element type (key, value) (line 803)
str_620015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 4), 'str', '_matnorm_doc_default_callparams')
# Getting the type of '_matnorm_doc_default_callparams' (line 804)
_matnorm_doc_default_callparams_620016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 39), '_matnorm_doc_default_callparams')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 25), dict_620014, (str_620015, _matnorm_doc_default_callparams_620016))
# Adding element type (key, value) (line 803)
str_620017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 4), 'str', '_matnorm_doc_callparams_note')
# Getting the type of '_matnorm_doc_callparams_note' (line 805)
_matnorm_doc_callparams_note_620018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 36), '_matnorm_doc_callparams_note')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 25), dict_620014, (str_620017, _matnorm_doc_callparams_note_620018))
# Adding element type (key, value) (line 803)
str_620019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 4), 'str', '_doc_random_state')
# Getting the type of '_doc_random_state' (line 806)
_doc_random_state_620020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 25), '_doc_random_state')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 25), dict_620014, (str_620019, _doc_random_state_620020))

# Assigning a type to the variable 'matnorm_docdict_params' (line 803)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 0), 'matnorm_docdict_params', dict_620014)

# Assigning a Dict to a Name (line 809):

# Assigning a Dict to a Name (line 809):

# Obtaining an instance of the builtin type 'dict' (line 809)
dict_620021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 27), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 809)
# Adding element type (key, value) (line 809)
str_620022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 4), 'str', '_matnorm_doc_default_callparams')
# Getting the type of '_matnorm_doc_frozen_callparams' (line 810)
_matnorm_doc_frozen_callparams_620023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 39), '_matnorm_doc_frozen_callparams')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 809, 27), dict_620021, (str_620022, _matnorm_doc_frozen_callparams_620023))
# Adding element type (key, value) (line 809)
str_620024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 4), 'str', '_matnorm_doc_callparams_note')
# Getting the type of '_matnorm_doc_frozen_callparams_note' (line 811)
_matnorm_doc_frozen_callparams_note_620025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 36), '_matnorm_doc_frozen_callparams_note')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 809, 27), dict_620021, (str_620024, _matnorm_doc_frozen_callparams_note_620025))
# Adding element type (key, value) (line 809)
str_620026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 4), 'str', '_doc_random_state')
# Getting the type of '_doc_random_state' (line 812)
_doc_random_state_620027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 25), '_doc_random_state')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 809, 27), dict_620021, (str_620026, _doc_random_state_620027))

# Assigning a type to the variable 'matnorm_docdict_noparams' (line 809)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 0), 'matnorm_docdict_noparams', dict_620021)
# Declaration of the 'matrix_normal_gen' class
# Getting the type of 'multi_rv_generic' (line 814)
multi_rv_generic_620028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 24), 'multi_rv_generic')

class matrix_normal_gen(multi_rv_generic_620028, ):
    str_620029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, (-1)), 'str', '\n    A matrix normal random variable.\n\n    The `mean` keyword specifies the mean. The `rowcov` keyword specifies the\n    among-row covariance matrix. The \'colcov\' keyword specifies the\n    among-column covariance matrix.\n\n    Methods\n    -------\n    ``pdf(X, mean=None, rowcov=1, colcov=1)``\n        Probability density function.\n    ``logpdf(X, mean=None, rowcov=1, colcov=1)``\n        Log of the probability density function.\n    ``rvs(mean=None, rowcov=1, colcov=1, size=1, random_state=None)``\n        Draw random samples.\n\n    Parameters\n    ----------\n    X : array_like\n        Quantiles, with the last two axes of `X` denoting the components.\n    %(_matnorm_doc_default_callparams)s\n    %(_doc_random_state)s\n\n    Alternatively, the object may be called (as a function) to fix the mean\n    and covariance parameters, returning a "frozen" matrix normal\n    random variable:\n\n    rv = matrix_normal(mean=None, rowcov=1, colcov=1)\n        - Frozen object with the same methods but holding the given\n          mean and covariance fixed.\n\n    Notes\n    -----\n    %(_matnorm_doc_callparams_note)s\n\n    The covariance matrices specified by `rowcov` and `colcov` must be\n    (symmetric) positive definite. If the samples in `X` are\n    :math:`m \\times n`, then `rowcov` must be :math:`m \\times m` and\n    `colcov` must be :math:`n \\times n`. `mean` must be the same shape as `X`.\n\n    The probability density function for `matrix_normal` is\n\n    .. math::\n\n        f(X) = (2 \\pi)^{-\\frac{mn}{2}}|U|^{-\\frac{n}{2}} |V|^{-\\frac{m}{2}}\n               \\exp\\left( -\\frac{1}{2} \\mathrm{Tr}\\left[ U^{-1} (X-M) V^{-1}\n               (X-M)^T \\right] \\right),\n\n    where :math:`M` is the mean, :math:`U` the among-row covariance matrix,\n    :math:`V` the among-column covariance matrix.\n\n    The `allow_singular` behaviour of the `multivariate_normal`\n    distribution is not currently supported. Covariance matrices must be\n    full rank.\n\n    The `matrix_normal` distribution is closely related to the\n    `multivariate_normal` distribution. Specifically, :math:`\\mathrm{Vec}(X)`\n    (the vector formed by concatenating the columns  of :math:`X`) has a\n    multivariate normal distribution with mean :math:`\\mathrm{Vec}(M)`\n    and covariance :math:`V \\otimes U` (where :math:`\\otimes` is the Kronecker\n    product). Sampling and pdf evaluation are\n    :math:`\\mathcal{O}(m^3 + n^3 + m^2 n + m n^2)` for the matrix normal, but\n    :math:`\\mathcal{O}(m^3 n^3)` for the equivalent multivariate normal,\n    making this equivalent form algorithmically inefficient.\n\n    .. versionadded:: 0.17.0\n\n    Examples\n    --------\n\n    >>> from scipy.stats import matrix_normal\n\n    >>> M = np.arange(6).reshape(3,2); M\n    array([[0, 1],\n           [2, 3],\n           [4, 5]])\n    >>> U = np.diag([1,2,3]); U\n    array([[1, 0, 0],\n           [0, 2, 0],\n           [0, 0, 3]])\n    >>> V = 0.3*np.identity(2); V\n    array([[ 0.3,  0. ],\n           [ 0. ,  0.3]])\n    >>> X = M + 0.1; X\n    array([[ 0.1,  1.1],\n           [ 2.1,  3.1],\n           [ 4.1,  5.1]])\n    >>> matrix_normal.pdf(X, mean=M, rowcov=U, colcov=V)\n    0.023410202050005054\n\n    >>> # Equivalent multivariate normal\n    >>> from scipy.stats import multivariate_normal\n    >>> vectorised_X = X.T.flatten()\n    >>> equiv_mean = M.T.flatten()\n    >>> equiv_cov = np.kron(V,U)\n    >>> multivariate_normal.pdf(vectorised_X, mean=equiv_mean, cov=equiv_cov)\n    0.023410202050005054\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 914)
        None_620030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 28), 'None')
        defaults = [None_620030]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 914, 4, False)
        # Assigning a type to the variable 'self' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_gen.__init__', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 915)
        # Processing the call arguments (line 915)
        # Getting the type of 'seed' (line 915)
        seed_620037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 48), 'seed', False)
        # Processing the call keyword arguments (line 915)
        kwargs_620038 = {}
        
        # Call to super(...): (line 915)
        # Processing the call arguments (line 915)
        # Getting the type of 'matrix_normal_gen' (line 915)
        matrix_normal_gen_620032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 14), 'matrix_normal_gen', False)
        # Getting the type of 'self' (line 915)
        self_620033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 33), 'self', False)
        # Processing the call keyword arguments (line 915)
        kwargs_620034 = {}
        # Getting the type of 'super' (line 915)
        super_620031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 8), 'super', False)
        # Calling super(args, kwargs) (line 915)
        super_call_result_620035 = invoke(stypy.reporting.localization.Localization(__file__, 915, 8), super_620031, *[matrix_normal_gen_620032, self_620033], **kwargs_620034)
        
        # Obtaining the member '__init__' of a type (line 915)
        init___620036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 8), super_call_result_620035, '__init__')
        # Calling __init__(args, kwargs) (line 915)
        init___call_result_620039 = invoke(stypy.reporting.localization.Localization(__file__, 915, 8), init___620036, *[seed_620037], **kwargs_620038)
        
        
        # Assigning a Call to a Attribute (line 916):
        
        # Assigning a Call to a Attribute (line 916):
        
        # Call to docformat(...): (line 916)
        # Processing the call arguments (line 916)
        # Getting the type of 'self' (line 916)
        self_620042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 40), 'self', False)
        # Obtaining the member '__doc__' of a type (line 916)
        doc___620043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 40), self_620042, '__doc__')
        # Getting the type of 'matnorm_docdict_params' (line 916)
        matnorm_docdict_params_620044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 54), 'matnorm_docdict_params', False)
        # Processing the call keyword arguments (line 916)
        kwargs_620045 = {}
        # Getting the type of 'doccer' (line 916)
        doccer_620040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 23), 'doccer', False)
        # Obtaining the member 'docformat' of a type (line 916)
        docformat_620041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 23), doccer_620040, 'docformat')
        # Calling docformat(args, kwargs) (line 916)
        docformat_call_result_620046 = invoke(stypy.reporting.localization.Localization(__file__, 916, 23), docformat_620041, *[doc___620043, matnorm_docdict_params_620044], **kwargs_620045)
        
        # Getting the type of 'self' (line 916)
        self_620047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 916)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 8), self_620047, '__doc__', docformat_call_result_620046)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 918)
        None_620048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 28), 'None')
        int_620049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 41), 'int')
        int_620050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 51), 'int')
        # Getting the type of 'None' (line 918)
        None_620051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 59), 'None')
        defaults = [None_620048, int_620049, int_620050, None_620051]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 918, 4, False)
        # Assigning a type to the variable 'self' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        matrix_normal_gen.__call__.__dict__.__setitem__('stypy_localization', localization)
        matrix_normal_gen.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        matrix_normal_gen.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        matrix_normal_gen.__call__.__dict__.__setitem__('stypy_function_name', 'matrix_normal_gen.__call__')
        matrix_normal_gen.__call__.__dict__.__setitem__('stypy_param_names_list', ['mean', 'rowcov', 'colcov', 'seed'])
        matrix_normal_gen.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        matrix_normal_gen.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        matrix_normal_gen.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        matrix_normal_gen.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        matrix_normal_gen.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        matrix_normal_gen.__call__.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_gen.__call__', ['mean', 'rowcov', 'colcov', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['mean', 'rowcov', 'colcov', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_620052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, (-1)), 'str', '\n        Create a frozen matrix normal distribution.\n\n        See `matrix_normal_frozen` for more information.\n\n        ')
        
        # Call to matrix_normal_frozen(...): (line 925)
        # Processing the call arguments (line 925)
        # Getting the type of 'mean' (line 925)
        mean_620054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 36), 'mean', False)
        # Getting the type of 'rowcov' (line 925)
        rowcov_620055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 42), 'rowcov', False)
        # Getting the type of 'colcov' (line 925)
        colcov_620056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 50), 'colcov', False)
        # Processing the call keyword arguments (line 925)
        # Getting the type of 'seed' (line 925)
        seed_620057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 63), 'seed', False)
        keyword_620058 = seed_620057
        kwargs_620059 = {'seed': keyword_620058}
        # Getting the type of 'matrix_normal_frozen' (line 925)
        matrix_normal_frozen_620053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 15), 'matrix_normal_frozen', False)
        # Calling matrix_normal_frozen(args, kwargs) (line 925)
        matrix_normal_frozen_call_result_620060 = invoke(stypy.reporting.localization.Localization(__file__, 925, 15), matrix_normal_frozen_620053, *[mean_620054, rowcov_620055, colcov_620056], **kwargs_620059)
        
        # Assigning a type to the variable 'stypy_return_type' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 8), 'stypy_return_type', matrix_normal_frozen_call_result_620060)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 918)
        stypy_return_type_620061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_620061)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_620061


    @norecursion
    def _process_parameters(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_parameters'
        module_type_store = module_type_store.open_function_context('_process_parameters', 927, 4, False)
        # Assigning a type to the variable 'self' (line 928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        matrix_normal_gen._process_parameters.__dict__.__setitem__('stypy_localization', localization)
        matrix_normal_gen._process_parameters.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        matrix_normal_gen._process_parameters.__dict__.__setitem__('stypy_type_store', module_type_store)
        matrix_normal_gen._process_parameters.__dict__.__setitem__('stypy_function_name', 'matrix_normal_gen._process_parameters')
        matrix_normal_gen._process_parameters.__dict__.__setitem__('stypy_param_names_list', ['mean', 'rowcov', 'colcov'])
        matrix_normal_gen._process_parameters.__dict__.__setitem__('stypy_varargs_param_name', None)
        matrix_normal_gen._process_parameters.__dict__.__setitem__('stypy_kwargs_param_name', None)
        matrix_normal_gen._process_parameters.__dict__.__setitem__('stypy_call_defaults', defaults)
        matrix_normal_gen._process_parameters.__dict__.__setitem__('stypy_call_varargs', varargs)
        matrix_normal_gen._process_parameters.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        matrix_normal_gen._process_parameters.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_gen._process_parameters', ['mean', 'rowcov', 'colcov'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_parameters', localization, ['mean', 'rowcov', 'colcov'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_parameters(...)' code ##################

        str_620062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 932, (-1)), 'str', '\n        Infer dimensionality from mean or covariance matrices. Handle\n        defaults. Ensure compatible dimensions.\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 935)
        # Getting the type of 'mean' (line 935)
        mean_620063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 8), 'mean')
        # Getting the type of 'None' (line 935)
        None_620064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 23), 'None')
        
        (may_be_620065, more_types_in_union_620066) = may_not_be_none(mean_620063, None_620064)

        if may_be_620065:

            if more_types_in_union_620066:
                # Runtime conditional SSA (line 935)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 936):
            
            # Assigning a Call to a Name (line 936):
            
            # Call to asarray(...): (line 936)
            # Processing the call arguments (line 936)
            # Getting the type of 'mean' (line 936)
            mean_620069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 30), 'mean', False)
            # Processing the call keyword arguments (line 936)
            # Getting the type of 'float' (line 936)
            float_620070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 42), 'float', False)
            keyword_620071 = float_620070
            kwargs_620072 = {'dtype': keyword_620071}
            # Getting the type of 'np' (line 936)
            np_620067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 19), 'np', False)
            # Obtaining the member 'asarray' of a type (line 936)
            asarray_620068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 19), np_620067, 'asarray')
            # Calling asarray(args, kwargs) (line 936)
            asarray_call_result_620073 = invoke(stypy.reporting.localization.Localization(__file__, 936, 19), asarray_620068, *[mean_620069], **kwargs_620072)
            
            # Assigning a type to the variable 'mean' (line 936)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 12), 'mean', asarray_call_result_620073)
            
            # Assigning a Attribute to a Name (line 937):
            
            # Assigning a Attribute to a Name (line 937):
            # Getting the type of 'mean' (line 937)
            mean_620074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 24), 'mean')
            # Obtaining the member 'shape' of a type (line 937)
            shape_620075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 937, 24), mean_620074, 'shape')
            # Assigning a type to the variable 'meanshape' (line 937)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'meanshape', shape_620075)
            
            
            
            # Call to len(...): (line 938)
            # Processing the call arguments (line 938)
            # Getting the type of 'meanshape' (line 938)
            meanshape_620077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 19), 'meanshape', False)
            # Processing the call keyword arguments (line 938)
            kwargs_620078 = {}
            # Getting the type of 'len' (line 938)
            len_620076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 15), 'len', False)
            # Calling len(args, kwargs) (line 938)
            len_call_result_620079 = invoke(stypy.reporting.localization.Localization(__file__, 938, 15), len_620076, *[meanshape_620077], **kwargs_620078)
            
            int_620080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 33), 'int')
            # Applying the binary operator '!=' (line 938)
            result_ne_620081 = python_operator(stypy.reporting.localization.Localization(__file__, 938, 15), '!=', len_call_result_620079, int_620080)
            
            # Testing the type of an if condition (line 938)
            if_condition_620082 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 938, 12), result_ne_620081)
            # Assigning a type to the variable 'if_condition_620082' (line 938)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 12), 'if_condition_620082', if_condition_620082)
            # SSA begins for if statement (line 938)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 939)
            # Processing the call arguments (line 939)
            str_620084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 33), 'str', 'Array `mean` must be two dimensional.')
            # Processing the call keyword arguments (line 939)
            kwargs_620085 = {}
            # Getting the type of 'ValueError' (line 939)
            ValueError_620083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 939)
            ValueError_call_result_620086 = invoke(stypy.reporting.localization.Localization(__file__, 939, 22), ValueError_620083, *[str_620084], **kwargs_620085)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 939, 16), ValueError_call_result_620086, 'raise parameter', BaseException)
            # SSA join for if statement (line 938)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Call to any(...): (line 940)
            # Processing the call arguments (line 940)
            
            # Getting the type of 'meanshape' (line 940)
            meanshape_620089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 22), 'meanshape', False)
            int_620090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 35), 'int')
            # Applying the binary operator '==' (line 940)
            result_eq_620091 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 22), '==', meanshape_620089, int_620090)
            
            # Processing the call keyword arguments (line 940)
            kwargs_620092 = {}
            # Getting the type of 'np' (line 940)
            np_620087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 15), 'np', False)
            # Obtaining the member 'any' of a type (line 940)
            any_620088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 15), np_620087, 'any')
            # Calling any(args, kwargs) (line 940)
            any_call_result_620093 = invoke(stypy.reporting.localization.Localization(__file__, 940, 15), any_620088, *[result_eq_620091], **kwargs_620092)
            
            # Testing the type of an if condition (line 940)
            if_condition_620094 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 940, 12), any_call_result_620093)
            # Assigning a type to the variable 'if_condition_620094' (line 940)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 12), 'if_condition_620094', if_condition_620094)
            # SSA begins for if statement (line 940)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 941)
            # Processing the call arguments (line 941)
            str_620096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 33), 'str', 'Array `mean` has invalid shape.')
            # Processing the call keyword arguments (line 941)
            kwargs_620097 = {}
            # Getting the type of 'ValueError' (line 941)
            ValueError_620095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 941)
            ValueError_call_result_620098 = invoke(stypy.reporting.localization.Localization(__file__, 941, 22), ValueError_620095, *[str_620096], **kwargs_620097)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 941, 16), ValueError_call_result_620098, 'raise parameter', BaseException)
            # SSA join for if statement (line 940)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_620066:
                # SSA join for if statement (line 935)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 944):
        
        # Assigning a Call to a Name (line 944):
        
        # Call to asarray(...): (line 944)
        # Processing the call arguments (line 944)
        # Getting the type of 'rowcov' (line 944)
        rowcov_620101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 28), 'rowcov', False)
        # Processing the call keyword arguments (line 944)
        # Getting the type of 'float' (line 944)
        float_620102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 42), 'float', False)
        keyword_620103 = float_620102
        kwargs_620104 = {'dtype': keyword_620103}
        # Getting the type of 'np' (line 944)
        np_620099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 17), 'np', False)
        # Obtaining the member 'asarray' of a type (line 944)
        asarray_620100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 17), np_620099, 'asarray')
        # Calling asarray(args, kwargs) (line 944)
        asarray_call_result_620105 = invoke(stypy.reporting.localization.Localization(__file__, 944, 17), asarray_620100, *[rowcov_620101], **kwargs_620104)
        
        # Assigning a type to the variable 'rowcov' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'rowcov', asarray_call_result_620105)
        
        
        # Getting the type of 'rowcov' (line 945)
        rowcov_620106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 11), 'rowcov')
        # Obtaining the member 'ndim' of a type (line 945)
        ndim_620107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 11), rowcov_620106, 'ndim')
        int_620108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 26), 'int')
        # Applying the binary operator '==' (line 945)
        result_eq_620109 = python_operator(stypy.reporting.localization.Localization(__file__, 945, 11), '==', ndim_620107, int_620108)
        
        # Testing the type of an if condition (line 945)
        if_condition_620110 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 945, 8), result_eq_620109)
        # Assigning a type to the variable 'if_condition_620110' (line 945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 8), 'if_condition_620110', if_condition_620110)
        # SSA begins for if statement (line 945)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 946)
        # Getting the type of 'mean' (line 946)
        mean_620111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 12), 'mean')
        # Getting the type of 'None' (line 946)
        None_620112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 27), 'None')
        
        (may_be_620113, more_types_in_union_620114) = may_not_be_none(mean_620111, None_620112)

        if may_be_620113:

            if more_types_in_union_620114:
                # Runtime conditional SSA (line 946)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 947):
            
            # Assigning a BinOp to a Name (line 947):
            # Getting the type of 'rowcov' (line 947)
            rowcov_620115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 25), 'rowcov')
            
            # Call to identity(...): (line 947)
            # Processing the call arguments (line 947)
            
            # Obtaining the type of the subscript
            int_620118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 56), 'int')
            # Getting the type of 'meanshape' (line 947)
            meanshape_620119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 46), 'meanshape', False)
            # Obtaining the member '__getitem__' of a type (line 947)
            getitem___620120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 46), meanshape_620119, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 947)
            subscript_call_result_620121 = invoke(stypy.reporting.localization.Localization(__file__, 947, 46), getitem___620120, int_620118)
            
            # Processing the call keyword arguments (line 947)
            kwargs_620122 = {}
            # Getting the type of 'np' (line 947)
            np_620116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 34), 'np', False)
            # Obtaining the member 'identity' of a type (line 947)
            identity_620117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 34), np_620116, 'identity')
            # Calling identity(args, kwargs) (line 947)
            identity_call_result_620123 = invoke(stypy.reporting.localization.Localization(__file__, 947, 34), identity_620117, *[subscript_call_result_620121], **kwargs_620122)
            
            # Applying the binary operator '*' (line 947)
            result_mul_620124 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 25), '*', rowcov_620115, identity_call_result_620123)
            
            # Assigning a type to the variable 'rowcov' (line 947)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 16), 'rowcov', result_mul_620124)

            if more_types_in_union_620114:
                # Runtime conditional SSA for else branch (line 946)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_620113) or more_types_in_union_620114):
            
            # Assigning a BinOp to a Name (line 949):
            
            # Assigning a BinOp to a Name (line 949):
            # Getting the type of 'rowcov' (line 949)
            rowcov_620125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 25), 'rowcov')
            
            # Call to identity(...): (line 949)
            # Processing the call arguments (line 949)
            int_620128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 46), 'int')
            # Processing the call keyword arguments (line 949)
            kwargs_620129 = {}
            # Getting the type of 'np' (line 949)
            np_620126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 34), 'np', False)
            # Obtaining the member 'identity' of a type (line 949)
            identity_620127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 34), np_620126, 'identity')
            # Calling identity(args, kwargs) (line 949)
            identity_call_result_620130 = invoke(stypy.reporting.localization.Localization(__file__, 949, 34), identity_620127, *[int_620128], **kwargs_620129)
            
            # Applying the binary operator '*' (line 949)
            result_mul_620131 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 25), '*', rowcov_620125, identity_call_result_620130)
            
            # Assigning a type to the variable 'rowcov' (line 949)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 16), 'rowcov', result_mul_620131)

            if (may_be_620113 and more_types_in_union_620114):
                # SSA join for if statement (line 946)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA branch for the else part of an if statement (line 945)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'rowcov' (line 950)
        rowcov_620132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 13), 'rowcov')
        # Obtaining the member 'ndim' of a type (line 950)
        ndim_620133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 13), rowcov_620132, 'ndim')
        int_620134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 28), 'int')
        # Applying the binary operator '==' (line 950)
        result_eq_620135 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 13), '==', ndim_620133, int_620134)
        
        # Testing the type of an if condition (line 950)
        if_condition_620136 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 950, 13), result_eq_620135)
        # Assigning a type to the variable 'if_condition_620136' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 13), 'if_condition_620136', if_condition_620136)
        # SSA begins for if statement (line 950)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 951):
        
        # Assigning a Call to a Name (line 951):
        
        # Call to diag(...): (line 951)
        # Processing the call arguments (line 951)
        # Getting the type of 'rowcov' (line 951)
        rowcov_620139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 29), 'rowcov', False)
        # Processing the call keyword arguments (line 951)
        kwargs_620140 = {}
        # Getting the type of 'np' (line 951)
        np_620137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 21), 'np', False)
        # Obtaining the member 'diag' of a type (line 951)
        diag_620138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 21), np_620137, 'diag')
        # Calling diag(args, kwargs) (line 951)
        diag_call_result_620141 = invoke(stypy.reporting.localization.Localization(__file__, 951, 21), diag_620138, *[rowcov_620139], **kwargs_620140)
        
        # Assigning a type to the variable 'rowcov' (line 951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 12), 'rowcov', diag_call_result_620141)
        # SSA join for if statement (line 950)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 945)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 952):
        
        # Assigning a Attribute to a Name (line 952):
        # Getting the type of 'rowcov' (line 952)
        rowcov_620142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 19), 'rowcov')
        # Obtaining the member 'shape' of a type (line 952)
        shape_620143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 19), rowcov_620142, 'shape')
        # Assigning a type to the variable 'rowshape' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'rowshape', shape_620143)
        
        
        
        # Call to len(...): (line 953)
        # Processing the call arguments (line 953)
        # Getting the type of 'rowshape' (line 953)
        rowshape_620145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 15), 'rowshape', False)
        # Processing the call keyword arguments (line 953)
        kwargs_620146 = {}
        # Getting the type of 'len' (line 953)
        len_620144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 11), 'len', False)
        # Calling len(args, kwargs) (line 953)
        len_call_result_620147 = invoke(stypy.reporting.localization.Localization(__file__, 953, 11), len_620144, *[rowshape_620145], **kwargs_620146)
        
        int_620148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 953, 28), 'int')
        # Applying the binary operator '!=' (line 953)
        result_ne_620149 = python_operator(stypy.reporting.localization.Localization(__file__, 953, 11), '!=', len_call_result_620147, int_620148)
        
        # Testing the type of an if condition (line 953)
        if_condition_620150 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 953, 8), result_ne_620149)
        # Assigning a type to the variable 'if_condition_620150' (line 953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'if_condition_620150', if_condition_620150)
        # SSA begins for if statement (line 953)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 954)
        # Processing the call arguments (line 954)
        str_620152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 29), 'str', '`rowcov` must be a scalar or a 2D array.')
        # Processing the call keyword arguments (line 954)
        kwargs_620153 = {}
        # Getting the type of 'ValueError' (line 954)
        ValueError_620151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 954)
        ValueError_call_result_620154 = invoke(stypy.reporting.localization.Localization(__file__, 954, 18), ValueError_620151, *[str_620152], **kwargs_620153)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 954, 12), ValueError_call_result_620154, 'raise parameter', BaseException)
        # SSA join for if statement (line 953)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_620155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 955, 20), 'int')
        # Getting the type of 'rowshape' (line 955)
        rowshape_620156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 11), 'rowshape')
        # Obtaining the member '__getitem__' of a type (line 955)
        getitem___620157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 11), rowshape_620156, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 955)
        subscript_call_result_620158 = invoke(stypy.reporting.localization.Localization(__file__, 955, 11), getitem___620157, int_620155)
        
        
        # Obtaining the type of the subscript
        int_620159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 955, 35), 'int')
        # Getting the type of 'rowshape' (line 955)
        rowshape_620160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 26), 'rowshape')
        # Obtaining the member '__getitem__' of a type (line 955)
        getitem___620161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 26), rowshape_620160, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 955)
        subscript_call_result_620162 = invoke(stypy.reporting.localization.Localization(__file__, 955, 26), getitem___620161, int_620159)
        
        # Applying the binary operator '!=' (line 955)
        result_ne_620163 = python_operator(stypy.reporting.localization.Localization(__file__, 955, 11), '!=', subscript_call_result_620158, subscript_call_result_620162)
        
        # Testing the type of an if condition (line 955)
        if_condition_620164 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 955, 8), result_ne_620163)
        # Assigning a type to the variable 'if_condition_620164' (line 955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 8), 'if_condition_620164', if_condition_620164)
        # SSA begins for if statement (line 955)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 956)
        # Processing the call arguments (line 956)
        str_620166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 29), 'str', 'Array `rowcov` must be square.')
        # Processing the call keyword arguments (line 956)
        kwargs_620167 = {}
        # Getting the type of 'ValueError' (line 956)
        ValueError_620165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 956)
        ValueError_call_result_620168 = invoke(stypy.reporting.localization.Localization(__file__, 956, 18), ValueError_620165, *[str_620166], **kwargs_620167)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 956, 12), ValueError_call_result_620168, 'raise parameter', BaseException)
        # SSA join for if statement (line 955)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_620169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 20), 'int')
        # Getting the type of 'rowshape' (line 957)
        rowshape_620170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 11), 'rowshape')
        # Obtaining the member '__getitem__' of a type (line 957)
        getitem___620171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 11), rowshape_620170, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 957)
        subscript_call_result_620172 = invoke(stypy.reporting.localization.Localization(__file__, 957, 11), getitem___620171, int_620169)
        
        int_620173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 26), 'int')
        # Applying the binary operator '==' (line 957)
        result_eq_620174 = python_operator(stypy.reporting.localization.Localization(__file__, 957, 11), '==', subscript_call_result_620172, int_620173)
        
        # Testing the type of an if condition (line 957)
        if_condition_620175 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 957, 8), result_eq_620174)
        # Assigning a type to the variable 'if_condition_620175' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'if_condition_620175', if_condition_620175)
        # SSA begins for if statement (line 957)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 958)
        # Processing the call arguments (line 958)
        str_620177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 29), 'str', 'Array `rowcov` has invalid shape.')
        # Processing the call keyword arguments (line 958)
        kwargs_620178 = {}
        # Getting the type of 'ValueError' (line 958)
        ValueError_620176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 958)
        ValueError_call_result_620179 = invoke(stypy.reporting.localization.Localization(__file__, 958, 18), ValueError_620176, *[str_620177], **kwargs_620178)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 958, 12), ValueError_call_result_620179, 'raise parameter', BaseException)
        # SSA join for if statement (line 957)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 959):
        
        # Assigning a Subscript to a Name (line 959):
        
        # Obtaining the type of the subscript
        int_620180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 27), 'int')
        # Getting the type of 'rowshape' (line 959)
        rowshape_620181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 18), 'rowshape')
        # Obtaining the member '__getitem__' of a type (line 959)
        getitem___620182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 18), rowshape_620181, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 959)
        subscript_call_result_620183 = invoke(stypy.reporting.localization.Localization(__file__, 959, 18), getitem___620182, int_620180)
        
        # Assigning a type to the variable 'numrows' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 8), 'numrows', subscript_call_result_620183)
        
        # Assigning a Call to a Name (line 962):
        
        # Assigning a Call to a Name (line 962):
        
        # Call to asarray(...): (line 962)
        # Processing the call arguments (line 962)
        # Getting the type of 'colcov' (line 962)
        colcov_620186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 28), 'colcov', False)
        # Processing the call keyword arguments (line 962)
        # Getting the type of 'float' (line 962)
        float_620187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 42), 'float', False)
        keyword_620188 = float_620187
        kwargs_620189 = {'dtype': keyword_620188}
        # Getting the type of 'np' (line 962)
        np_620184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 17), 'np', False)
        # Obtaining the member 'asarray' of a type (line 962)
        asarray_620185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 17), np_620184, 'asarray')
        # Calling asarray(args, kwargs) (line 962)
        asarray_call_result_620190 = invoke(stypy.reporting.localization.Localization(__file__, 962, 17), asarray_620185, *[colcov_620186], **kwargs_620189)
        
        # Assigning a type to the variable 'colcov' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 8), 'colcov', asarray_call_result_620190)
        
        
        # Getting the type of 'colcov' (line 963)
        colcov_620191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 11), 'colcov')
        # Obtaining the member 'ndim' of a type (line 963)
        ndim_620192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 11), colcov_620191, 'ndim')
        int_620193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 26), 'int')
        # Applying the binary operator '==' (line 963)
        result_eq_620194 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 11), '==', ndim_620192, int_620193)
        
        # Testing the type of an if condition (line 963)
        if_condition_620195 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 963, 8), result_eq_620194)
        # Assigning a type to the variable 'if_condition_620195' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 8), 'if_condition_620195', if_condition_620195)
        # SSA begins for if statement (line 963)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 964)
        # Getting the type of 'mean' (line 964)
        mean_620196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 12), 'mean')
        # Getting the type of 'None' (line 964)
        None_620197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 27), 'None')
        
        (may_be_620198, more_types_in_union_620199) = may_not_be_none(mean_620196, None_620197)

        if may_be_620198:

            if more_types_in_union_620199:
                # Runtime conditional SSA (line 964)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 965):
            
            # Assigning a BinOp to a Name (line 965):
            # Getting the type of 'colcov' (line 965)
            colcov_620200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 25), 'colcov')
            
            # Call to identity(...): (line 965)
            # Processing the call arguments (line 965)
            
            # Obtaining the type of the subscript
            int_620203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 965, 56), 'int')
            # Getting the type of 'meanshape' (line 965)
            meanshape_620204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 46), 'meanshape', False)
            # Obtaining the member '__getitem__' of a type (line 965)
            getitem___620205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 46), meanshape_620204, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 965)
            subscript_call_result_620206 = invoke(stypy.reporting.localization.Localization(__file__, 965, 46), getitem___620205, int_620203)
            
            # Processing the call keyword arguments (line 965)
            kwargs_620207 = {}
            # Getting the type of 'np' (line 965)
            np_620201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 34), 'np', False)
            # Obtaining the member 'identity' of a type (line 965)
            identity_620202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 34), np_620201, 'identity')
            # Calling identity(args, kwargs) (line 965)
            identity_call_result_620208 = invoke(stypy.reporting.localization.Localization(__file__, 965, 34), identity_620202, *[subscript_call_result_620206], **kwargs_620207)
            
            # Applying the binary operator '*' (line 965)
            result_mul_620209 = python_operator(stypy.reporting.localization.Localization(__file__, 965, 25), '*', colcov_620200, identity_call_result_620208)
            
            # Assigning a type to the variable 'colcov' (line 965)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 965, 16), 'colcov', result_mul_620209)

            if more_types_in_union_620199:
                # Runtime conditional SSA for else branch (line 964)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_620198) or more_types_in_union_620199):
            
            # Assigning a BinOp to a Name (line 967):
            
            # Assigning a BinOp to a Name (line 967):
            # Getting the type of 'colcov' (line 967)
            colcov_620210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 25), 'colcov')
            
            # Call to identity(...): (line 967)
            # Processing the call arguments (line 967)
            int_620213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 46), 'int')
            # Processing the call keyword arguments (line 967)
            kwargs_620214 = {}
            # Getting the type of 'np' (line 967)
            np_620211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 34), 'np', False)
            # Obtaining the member 'identity' of a type (line 967)
            identity_620212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 34), np_620211, 'identity')
            # Calling identity(args, kwargs) (line 967)
            identity_call_result_620215 = invoke(stypy.reporting.localization.Localization(__file__, 967, 34), identity_620212, *[int_620213], **kwargs_620214)
            
            # Applying the binary operator '*' (line 967)
            result_mul_620216 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 25), '*', colcov_620210, identity_call_result_620215)
            
            # Assigning a type to the variable 'colcov' (line 967)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 16), 'colcov', result_mul_620216)

            if (may_be_620198 and more_types_in_union_620199):
                # SSA join for if statement (line 964)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA branch for the else part of an if statement (line 963)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'colcov' (line 968)
        colcov_620217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 13), 'colcov')
        # Obtaining the member 'ndim' of a type (line 968)
        ndim_620218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 13), colcov_620217, 'ndim')
        int_620219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 28), 'int')
        # Applying the binary operator '==' (line 968)
        result_eq_620220 = python_operator(stypy.reporting.localization.Localization(__file__, 968, 13), '==', ndim_620218, int_620219)
        
        # Testing the type of an if condition (line 968)
        if_condition_620221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 968, 13), result_eq_620220)
        # Assigning a type to the variable 'if_condition_620221' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 13), 'if_condition_620221', if_condition_620221)
        # SSA begins for if statement (line 968)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 969):
        
        # Assigning a Call to a Name (line 969):
        
        # Call to diag(...): (line 969)
        # Processing the call arguments (line 969)
        # Getting the type of 'colcov' (line 969)
        colcov_620224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 29), 'colcov', False)
        # Processing the call keyword arguments (line 969)
        kwargs_620225 = {}
        # Getting the type of 'np' (line 969)
        np_620222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 21), 'np', False)
        # Obtaining the member 'diag' of a type (line 969)
        diag_620223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 969, 21), np_620222, 'diag')
        # Calling diag(args, kwargs) (line 969)
        diag_call_result_620226 = invoke(stypy.reporting.localization.Localization(__file__, 969, 21), diag_620223, *[colcov_620224], **kwargs_620225)
        
        # Assigning a type to the variable 'colcov' (line 969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 969, 12), 'colcov', diag_call_result_620226)
        # SSA join for if statement (line 968)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 963)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 970):
        
        # Assigning a Attribute to a Name (line 970):
        # Getting the type of 'colcov' (line 970)
        colcov_620227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 19), 'colcov')
        # Obtaining the member 'shape' of a type (line 970)
        shape_620228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 19), colcov_620227, 'shape')
        # Assigning a type to the variable 'colshape' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'colshape', shape_620228)
        
        
        
        # Call to len(...): (line 971)
        # Processing the call arguments (line 971)
        # Getting the type of 'colshape' (line 971)
        colshape_620230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 15), 'colshape', False)
        # Processing the call keyword arguments (line 971)
        kwargs_620231 = {}
        # Getting the type of 'len' (line 971)
        len_620229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 11), 'len', False)
        # Calling len(args, kwargs) (line 971)
        len_call_result_620232 = invoke(stypy.reporting.localization.Localization(__file__, 971, 11), len_620229, *[colshape_620230], **kwargs_620231)
        
        int_620233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 28), 'int')
        # Applying the binary operator '!=' (line 971)
        result_ne_620234 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 11), '!=', len_call_result_620232, int_620233)
        
        # Testing the type of an if condition (line 971)
        if_condition_620235 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 971, 8), result_ne_620234)
        # Assigning a type to the variable 'if_condition_620235' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'if_condition_620235', if_condition_620235)
        # SSA begins for if statement (line 971)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 972)
        # Processing the call arguments (line 972)
        str_620237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 29), 'str', '`colcov` must be a scalar or a 2D array.')
        # Processing the call keyword arguments (line 972)
        kwargs_620238 = {}
        # Getting the type of 'ValueError' (line 972)
        ValueError_620236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 972)
        ValueError_call_result_620239 = invoke(stypy.reporting.localization.Localization(__file__, 972, 18), ValueError_620236, *[str_620237], **kwargs_620238)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 972, 12), ValueError_call_result_620239, 'raise parameter', BaseException)
        # SSA join for if statement (line 971)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_620240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 20), 'int')
        # Getting the type of 'colshape' (line 973)
        colshape_620241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 11), 'colshape')
        # Obtaining the member '__getitem__' of a type (line 973)
        getitem___620242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 11), colshape_620241, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 973)
        subscript_call_result_620243 = invoke(stypy.reporting.localization.Localization(__file__, 973, 11), getitem___620242, int_620240)
        
        
        # Obtaining the type of the subscript
        int_620244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 35), 'int')
        # Getting the type of 'colshape' (line 973)
        colshape_620245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 26), 'colshape')
        # Obtaining the member '__getitem__' of a type (line 973)
        getitem___620246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 26), colshape_620245, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 973)
        subscript_call_result_620247 = invoke(stypy.reporting.localization.Localization(__file__, 973, 26), getitem___620246, int_620244)
        
        # Applying the binary operator '!=' (line 973)
        result_ne_620248 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 11), '!=', subscript_call_result_620243, subscript_call_result_620247)
        
        # Testing the type of an if condition (line 973)
        if_condition_620249 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 973, 8), result_ne_620248)
        # Assigning a type to the variable 'if_condition_620249' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 8), 'if_condition_620249', if_condition_620249)
        # SSA begins for if statement (line 973)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 974)
        # Processing the call arguments (line 974)
        str_620251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 29), 'str', 'Array `colcov` must be square.')
        # Processing the call keyword arguments (line 974)
        kwargs_620252 = {}
        # Getting the type of 'ValueError' (line 974)
        ValueError_620250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 974)
        ValueError_call_result_620253 = invoke(stypy.reporting.localization.Localization(__file__, 974, 18), ValueError_620250, *[str_620251], **kwargs_620252)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 974, 12), ValueError_call_result_620253, 'raise parameter', BaseException)
        # SSA join for if statement (line 973)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_620254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 975, 20), 'int')
        # Getting the type of 'colshape' (line 975)
        colshape_620255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 11), 'colshape')
        # Obtaining the member '__getitem__' of a type (line 975)
        getitem___620256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 11), colshape_620255, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 975)
        subscript_call_result_620257 = invoke(stypy.reporting.localization.Localization(__file__, 975, 11), getitem___620256, int_620254)
        
        int_620258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 975, 26), 'int')
        # Applying the binary operator '==' (line 975)
        result_eq_620259 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 11), '==', subscript_call_result_620257, int_620258)
        
        # Testing the type of an if condition (line 975)
        if_condition_620260 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 975, 8), result_eq_620259)
        # Assigning a type to the variable 'if_condition_620260' (line 975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 8), 'if_condition_620260', if_condition_620260)
        # SSA begins for if statement (line 975)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 976)
        # Processing the call arguments (line 976)
        str_620262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 976, 29), 'str', 'Array `colcov` has invalid shape.')
        # Processing the call keyword arguments (line 976)
        kwargs_620263 = {}
        # Getting the type of 'ValueError' (line 976)
        ValueError_620261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 976)
        ValueError_call_result_620264 = invoke(stypy.reporting.localization.Localization(__file__, 976, 18), ValueError_620261, *[str_620262], **kwargs_620263)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 976, 12), ValueError_call_result_620264, 'raise parameter', BaseException)
        # SSA join for if statement (line 975)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 977):
        
        # Assigning a Subscript to a Name (line 977):
        
        # Obtaining the type of the subscript
        int_620265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 27), 'int')
        # Getting the type of 'colshape' (line 977)
        colshape_620266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 18), 'colshape')
        # Obtaining the member '__getitem__' of a type (line 977)
        getitem___620267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 18), colshape_620266, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 977)
        subscript_call_result_620268 = invoke(stypy.reporting.localization.Localization(__file__, 977, 18), getitem___620267, int_620265)
        
        # Assigning a type to the variable 'numcols' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 8), 'numcols', subscript_call_result_620268)
        
        # Type idiom detected: calculating its left and rigth part (line 980)
        # Getting the type of 'mean' (line 980)
        mean_620269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 8), 'mean')
        # Getting the type of 'None' (line 980)
        None_620270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 23), 'None')
        
        (may_be_620271, more_types_in_union_620272) = may_not_be_none(mean_620269, None_620270)

        if may_be_620271:

            if more_types_in_union_620272:
                # Runtime conditional SSA (line 980)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            
            # Obtaining the type of the subscript
            int_620273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 981, 25), 'int')
            # Getting the type of 'meanshape' (line 981)
            meanshape_620274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 15), 'meanshape')
            # Obtaining the member '__getitem__' of a type (line 981)
            getitem___620275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 15), meanshape_620274, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 981)
            subscript_call_result_620276 = invoke(stypy.reporting.localization.Localization(__file__, 981, 15), getitem___620275, int_620273)
            
            # Getting the type of 'numrows' (line 981)
            numrows_620277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 31), 'numrows')
            # Applying the binary operator '!=' (line 981)
            result_ne_620278 = python_operator(stypy.reporting.localization.Localization(__file__, 981, 15), '!=', subscript_call_result_620276, numrows_620277)
            
            # Testing the type of an if condition (line 981)
            if_condition_620279 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 981, 12), result_ne_620278)
            # Assigning a type to the variable 'if_condition_620279' (line 981)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 981, 12), 'if_condition_620279', if_condition_620279)
            # SSA begins for if statement (line 981)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 982)
            # Processing the call arguments (line 982)
            str_620281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 982, 33), 'str', 'Arrays `mean` and `rowcov` must have thesame number of rows.')
            # Processing the call keyword arguments (line 982)
            kwargs_620282 = {}
            # Getting the type of 'ValueError' (line 982)
            ValueError_620280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 982)
            ValueError_call_result_620283 = invoke(stypy.reporting.localization.Localization(__file__, 982, 22), ValueError_620280, *[str_620281], **kwargs_620282)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 982, 16), ValueError_call_result_620283, 'raise parameter', BaseException)
            # SSA join for if statement (line 981)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            
            # Obtaining the type of the subscript
            int_620284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 25), 'int')
            # Getting the type of 'meanshape' (line 984)
            meanshape_620285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 15), 'meanshape')
            # Obtaining the member '__getitem__' of a type (line 984)
            getitem___620286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 15), meanshape_620285, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 984)
            subscript_call_result_620287 = invoke(stypy.reporting.localization.Localization(__file__, 984, 15), getitem___620286, int_620284)
            
            # Getting the type of 'numcols' (line 984)
            numcols_620288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 31), 'numcols')
            # Applying the binary operator '!=' (line 984)
            result_ne_620289 = python_operator(stypy.reporting.localization.Localization(__file__, 984, 15), '!=', subscript_call_result_620287, numcols_620288)
            
            # Testing the type of an if condition (line 984)
            if_condition_620290 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 984, 12), result_ne_620289)
            # Assigning a type to the variable 'if_condition_620290' (line 984)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 12), 'if_condition_620290', if_condition_620290)
            # SSA begins for if statement (line 984)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 985)
            # Processing the call arguments (line 985)
            str_620292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 33), 'str', 'Arrays `mean` and `colcov` must have thesame number of columns.')
            # Processing the call keyword arguments (line 985)
            kwargs_620293 = {}
            # Getting the type of 'ValueError' (line 985)
            ValueError_620291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 985)
            ValueError_call_result_620294 = invoke(stypy.reporting.localization.Localization(__file__, 985, 22), ValueError_620291, *[str_620292], **kwargs_620293)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 985, 16), ValueError_call_result_620294, 'raise parameter', BaseException)
            # SSA join for if statement (line 984)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_620272:
                # Runtime conditional SSA for else branch (line 980)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_620271) or more_types_in_union_620272):
            
            # Assigning a Call to a Name (line 988):
            
            # Assigning a Call to a Name (line 988):
            
            # Call to zeros(...): (line 988)
            # Processing the call arguments (line 988)
            
            # Obtaining an instance of the builtin type 'tuple' (line 988)
            tuple_620297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 988)
            # Adding element type (line 988)
            # Getting the type of 'numrows' (line 988)
            numrows_620298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 29), 'numrows', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 988, 29), tuple_620297, numrows_620298)
            # Adding element type (line 988)
            # Getting the type of 'numcols' (line 988)
            numcols_620299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 37), 'numcols', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 988, 29), tuple_620297, numcols_620299)
            
            # Processing the call keyword arguments (line 988)
            kwargs_620300 = {}
            # Getting the type of 'np' (line 988)
            np_620295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 19), 'np', False)
            # Obtaining the member 'zeros' of a type (line 988)
            zeros_620296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 19), np_620295, 'zeros')
            # Calling zeros(args, kwargs) (line 988)
            zeros_call_result_620301 = invoke(stypy.reporting.localization.Localization(__file__, 988, 19), zeros_620296, *[tuple_620297], **kwargs_620300)
            
            # Assigning a type to the variable 'mean' (line 988)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 12), 'mean', zeros_call_result_620301)

            if (may_be_620271 and more_types_in_union_620272):
                # SSA join for if statement (line 980)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Tuple to a Name (line 990):
        
        # Assigning a Tuple to a Name (line 990):
        
        # Obtaining an instance of the builtin type 'tuple' (line 990)
        tuple_620302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 990)
        # Adding element type (line 990)
        # Getting the type of 'numrows' (line 990)
        numrows_620303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 16), 'numrows')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 990, 16), tuple_620302, numrows_620303)
        # Adding element type (line 990)
        # Getting the type of 'numcols' (line 990)
        numcols_620304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 25), 'numcols')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 990, 16), tuple_620302, numcols_620304)
        
        # Assigning a type to the variable 'dims' (line 990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 8), 'dims', tuple_620302)
        
        # Obtaining an instance of the builtin type 'tuple' (line 992)
        tuple_620305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 992)
        # Adding element type (line 992)
        # Getting the type of 'dims' (line 992)
        dims_620306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 15), 'dims')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 992, 15), tuple_620305, dims_620306)
        # Adding element type (line 992)
        # Getting the type of 'mean' (line 992)
        mean_620307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 21), 'mean')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 992, 15), tuple_620305, mean_620307)
        # Adding element type (line 992)
        # Getting the type of 'rowcov' (line 992)
        rowcov_620308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 27), 'rowcov')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 992, 15), tuple_620305, rowcov_620308)
        # Adding element type (line 992)
        # Getting the type of 'colcov' (line 992)
        colcov_620309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 35), 'colcov')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 992, 15), tuple_620305, colcov_620309)
        
        # Assigning a type to the variable 'stypy_return_type' (line 992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 8), 'stypy_return_type', tuple_620305)
        
        # ################# End of '_process_parameters(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_parameters' in the type store
        # Getting the type of 'stypy_return_type' (line 927)
        stypy_return_type_620310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_620310)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_parameters'
        return stypy_return_type_620310


    @norecursion
    def _process_quantiles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_quantiles'
        module_type_store = module_type_store.open_function_context('_process_quantiles', 994, 4, False)
        # Assigning a type to the variable 'self' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        matrix_normal_gen._process_quantiles.__dict__.__setitem__('stypy_localization', localization)
        matrix_normal_gen._process_quantiles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        matrix_normal_gen._process_quantiles.__dict__.__setitem__('stypy_type_store', module_type_store)
        matrix_normal_gen._process_quantiles.__dict__.__setitem__('stypy_function_name', 'matrix_normal_gen._process_quantiles')
        matrix_normal_gen._process_quantiles.__dict__.__setitem__('stypy_param_names_list', ['X', 'dims'])
        matrix_normal_gen._process_quantiles.__dict__.__setitem__('stypy_varargs_param_name', None)
        matrix_normal_gen._process_quantiles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        matrix_normal_gen._process_quantiles.__dict__.__setitem__('stypy_call_defaults', defaults)
        matrix_normal_gen._process_quantiles.__dict__.__setitem__('stypy_call_varargs', varargs)
        matrix_normal_gen._process_quantiles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        matrix_normal_gen._process_quantiles.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_gen._process_quantiles', ['X', 'dims'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_quantiles', localization, ['X', 'dims'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_quantiles(...)' code ##################

        str_620311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 999, (-1)), 'str', '\n        Adjust quantiles array so that last two axes labels the components of\n        each data point.\n\n        ')
        
        # Assigning a Call to a Name (line 1000):
        
        # Assigning a Call to a Name (line 1000):
        
        # Call to asarray(...): (line 1000)
        # Processing the call arguments (line 1000)
        # Getting the type of 'X' (line 1000)
        X_620314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 23), 'X', False)
        # Processing the call keyword arguments (line 1000)
        # Getting the type of 'float' (line 1000)
        float_620315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 32), 'float', False)
        keyword_620316 = float_620315
        kwargs_620317 = {'dtype': keyword_620316}
        # Getting the type of 'np' (line 1000)
        np_620312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1000)
        asarray_620313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 12), np_620312, 'asarray')
        # Calling asarray(args, kwargs) (line 1000)
        asarray_call_result_620318 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 12), asarray_620313, *[X_620314], **kwargs_620317)
        
        # Assigning a type to the variable 'X' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'X', asarray_call_result_620318)
        
        
        # Getting the type of 'X' (line 1001)
        X_620319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 11), 'X')
        # Obtaining the member 'ndim' of a type (line 1001)
        ndim_620320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 11), X_620319, 'ndim')
        int_620321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 21), 'int')
        # Applying the binary operator '==' (line 1001)
        result_eq_620322 = python_operator(stypy.reporting.localization.Localization(__file__, 1001, 11), '==', ndim_620320, int_620321)
        
        # Testing the type of an if condition (line 1001)
        if_condition_620323 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1001, 8), result_eq_620322)
        # Assigning a type to the variable 'if_condition_620323' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'if_condition_620323', if_condition_620323)
        # SSA begins for if statement (line 1001)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1002):
        
        # Assigning a Subscript to a Name (line 1002):
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 1002)
        np_620324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 18), 'np')
        # Obtaining the member 'newaxis' of a type (line 1002)
        newaxis_620325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 18), np_620324, 'newaxis')
        slice_620326 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1002, 16), None, None, None)
        # Getting the type of 'X' (line 1002)
        X_620327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 16), 'X')
        # Obtaining the member '__getitem__' of a type (line 1002)
        getitem___620328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 16), X_620327, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1002)
        subscript_call_result_620329 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 16), getitem___620328, (newaxis_620325, slice_620326))
        
        # Assigning a type to the variable 'X' (line 1002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 12), 'X', subscript_call_result_620329)
        # SSA join for if statement (line 1001)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_620330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 19), 'int')
        slice_620331 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1003, 11), int_620330, None, None)
        # Getting the type of 'X' (line 1003)
        X_620332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 11), 'X')
        # Obtaining the member 'shape' of a type (line 1003)
        shape_620333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 11), X_620332, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1003)
        getitem___620334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 11), shape_620333, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1003)
        subscript_call_result_620335 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 11), getitem___620334, slice_620331)
        
        # Getting the type of 'dims' (line 1003)
        dims_620336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 27), 'dims')
        # Applying the binary operator '!=' (line 1003)
        result_ne_620337 = python_operator(stypy.reporting.localization.Localization(__file__, 1003, 11), '!=', subscript_call_result_620335, dims_620336)
        
        # Testing the type of an if condition (line 1003)
        if_condition_620338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1003, 8), result_ne_620337)
        # Assigning a type to the variable 'if_condition_620338' (line 1003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 8), 'if_condition_620338', if_condition_620338)
        # SSA begins for if statement (line 1003)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1004)
        # Processing the call arguments (line 1004)
        str_620340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1004, 29), 'str', 'The shape of array `X` is not compatible with the distribution parameters.')
        # Processing the call keyword arguments (line 1004)
        kwargs_620341 = {}
        # Getting the type of 'ValueError' (line 1004)
        ValueError_620339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1004)
        ValueError_call_result_620342 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 18), ValueError_620339, *[str_620340], **kwargs_620341)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1004, 12), ValueError_call_result_620342, 'raise parameter', BaseException)
        # SSA join for if statement (line 1003)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'X' (line 1006)
        X_620343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 15), 'X')
        # Assigning a type to the variable 'stypy_return_type' (line 1006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 8), 'stypy_return_type', X_620343)
        
        # ################# End of '_process_quantiles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_quantiles' in the type store
        # Getting the type of 'stypy_return_type' (line 994)
        stypy_return_type_620344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_620344)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_quantiles'
        return stypy_return_type_620344


    @norecursion
    def _logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_logpdf'
        module_type_store = module_type_store.open_function_context('_logpdf', 1008, 4, False)
        # Assigning a type to the variable 'self' (line 1009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        matrix_normal_gen._logpdf.__dict__.__setitem__('stypy_localization', localization)
        matrix_normal_gen._logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        matrix_normal_gen._logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        matrix_normal_gen._logpdf.__dict__.__setitem__('stypy_function_name', 'matrix_normal_gen._logpdf')
        matrix_normal_gen._logpdf.__dict__.__setitem__('stypy_param_names_list', ['dims', 'X', 'mean', 'row_prec_rt', 'log_det_rowcov', 'col_prec_rt', 'log_det_colcov'])
        matrix_normal_gen._logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        matrix_normal_gen._logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        matrix_normal_gen._logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        matrix_normal_gen._logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        matrix_normal_gen._logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        matrix_normal_gen._logpdf.__dict__.__setitem__('stypy_declared_arg_number', 8)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_gen._logpdf', ['dims', 'X', 'mean', 'row_prec_rt', 'log_det_rowcov', 'col_prec_rt', 'log_det_colcov'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_logpdf', localization, ['dims', 'X', 'mean', 'row_prec_rt', 'log_det_rowcov', 'col_prec_rt', 'log_det_colcov'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_logpdf(...)' code ##################

        str_620345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1036, (-1)), 'str', "\n        Parameters\n        ----------\n        dims : tuple\n            Dimensions of the matrix variates\n        X : ndarray\n            Points at which to evaluate the log of the probability\n            density function\n        mean : ndarray\n            Mean of the distribution\n        row_prec_rt : ndarray\n            A decomposition such that np.dot(row_prec_rt, row_prec_rt.T)\n            is the inverse of the among-row covariance matrix\n        log_det_rowcov : float\n            Logarithm of the determinant of the among-row covariance matrix\n        col_prec_rt : ndarray\n            A decomposition such that np.dot(col_prec_rt, col_prec_rt.T)\n            is the inverse of the among-column covariance matrix\n        log_det_colcov : float\n            Logarithm of the determinant of the among-column covariance matrix\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'logpdf' instead.\n\n        ")
        
        # Assigning a Name to a Tuple (line 1037):
        
        # Assigning a Subscript to a Name (line 1037):
        
        # Obtaining the type of the subscript
        int_620346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 8), 'int')
        # Getting the type of 'dims' (line 1037)
        dims_620347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 27), 'dims')
        # Obtaining the member '__getitem__' of a type (line 1037)
        getitem___620348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 8), dims_620347, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1037)
        subscript_call_result_620349 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 8), getitem___620348, int_620346)
        
        # Assigning a type to the variable 'tuple_var_assignment_618593' (line 1037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'tuple_var_assignment_618593', subscript_call_result_620349)
        
        # Assigning a Subscript to a Name (line 1037):
        
        # Obtaining the type of the subscript
        int_620350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 8), 'int')
        # Getting the type of 'dims' (line 1037)
        dims_620351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 27), 'dims')
        # Obtaining the member '__getitem__' of a type (line 1037)
        getitem___620352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 8), dims_620351, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1037)
        subscript_call_result_620353 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 8), getitem___620352, int_620350)
        
        # Assigning a type to the variable 'tuple_var_assignment_618594' (line 1037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'tuple_var_assignment_618594', subscript_call_result_620353)
        
        # Assigning a Name to a Name (line 1037):
        # Getting the type of 'tuple_var_assignment_618593' (line 1037)
        tuple_var_assignment_618593_620354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'tuple_var_assignment_618593')
        # Assigning a type to the variable 'numrows' (line 1037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'numrows', tuple_var_assignment_618593_620354)
        
        # Assigning a Name to a Name (line 1037):
        # Getting the type of 'tuple_var_assignment_618594' (line 1037)
        tuple_var_assignment_618594_620355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'tuple_var_assignment_618594')
        # Assigning a type to the variable 'numcols' (line 1037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 17), 'numcols', tuple_var_assignment_618594_620355)
        
        # Assigning a Call to a Name (line 1038):
        
        # Assigning a Call to a Name (line 1038):
        
        # Call to rollaxis(...): (line 1038)
        # Processing the call arguments (line 1038)
        # Getting the type of 'X' (line 1038)
        X_620358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 31), 'X', False)
        # Getting the type of 'mean' (line 1038)
        mean_620359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 33), 'mean', False)
        # Applying the binary operator '-' (line 1038)
        result_sub_620360 = python_operator(stypy.reporting.localization.Localization(__file__, 1038, 31), '-', X_620358, mean_620359)
        
        # Processing the call keyword arguments (line 1038)
        int_620361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 44), 'int')
        keyword_620362 = int_620361
        int_620363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 54), 'int')
        keyword_620364 = int_620363
        kwargs_620365 = {'start': keyword_620364, 'axis': keyword_620362}
        # Getting the type of 'np' (line 1038)
        np_620356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 19), 'np', False)
        # Obtaining the member 'rollaxis' of a type (line 1038)
        rollaxis_620357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 19), np_620356, 'rollaxis')
        # Calling rollaxis(args, kwargs) (line 1038)
        rollaxis_call_result_620366 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 19), rollaxis_620357, *[result_sub_620360], **kwargs_620365)
        
        # Assigning a type to the variable 'roll_dev' (line 1038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'roll_dev', rollaxis_call_result_620366)
        
        # Assigning a Call to a Name (line 1039):
        
        # Assigning a Call to a Name (line 1039):
        
        # Call to tensordot(...): (line 1039)
        # Processing the call arguments (line 1039)
        # Getting the type of 'col_prec_rt' (line 1039)
        col_prec_rt_620369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 33), 'col_prec_rt', False)
        # Obtaining the member 'T' of a type (line 1039)
        T_620370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 33), col_prec_rt_620369, 'T')
        
        # Call to dot(...): (line 1040)
        # Processing the call arguments (line 1040)
        # Getting the type of 'roll_dev' (line 1040)
        roll_dev_620373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 40), 'roll_dev', False)
        # Getting the type of 'row_prec_rt' (line 1040)
        row_prec_rt_620374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 50), 'row_prec_rt', False)
        # Processing the call keyword arguments (line 1040)
        kwargs_620375 = {}
        # Getting the type of 'np' (line 1040)
        np_620371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 33), 'np', False)
        # Obtaining the member 'dot' of a type (line 1040)
        dot_620372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 33), np_620371, 'dot')
        # Calling dot(args, kwargs) (line 1040)
        dot_call_result_620376 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 33), dot_620372, *[roll_dev_620373, row_prec_rt_620374], **kwargs_620375)
        
        int_620377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 64), 'int')
        # Processing the call keyword arguments (line 1039)
        kwargs_620378 = {}
        # Getting the type of 'np' (line 1039)
        np_620367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 20), 'np', False)
        # Obtaining the member 'tensordot' of a type (line 1039)
        tensordot_620368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 20), np_620367, 'tensordot')
        # Calling tensordot(args, kwargs) (line 1039)
        tensordot_call_result_620379 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 20), tensordot_620368, *[T_620370, dot_call_result_620376, int_620377], **kwargs_620378)
        
        # Assigning a type to the variable 'scale_dev' (line 1039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'scale_dev', tensordot_call_result_620379)
        
        # Assigning a Call to a Name (line 1041):
        
        # Assigning a Call to a Name (line 1041):
        
        # Call to sum(...): (line 1041)
        # Processing the call arguments (line 1041)
        
        # Call to sum(...): (line 1041)
        # Processing the call arguments (line 1041)
        
        # Call to square(...): (line 1041)
        # Processing the call arguments (line 1041)
        # Getting the type of 'scale_dev' (line 1041)
        scale_dev_620386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 39), 'scale_dev', False)
        # Processing the call keyword arguments (line 1041)
        kwargs_620387 = {}
        # Getting the type of 'np' (line 1041)
        np_620384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 29), 'np', False)
        # Obtaining the member 'square' of a type (line 1041)
        square_620385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 29), np_620384, 'square')
        # Calling square(args, kwargs) (line 1041)
        square_call_result_620388 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 29), square_620385, *[scale_dev_620386], **kwargs_620387)
        
        # Processing the call keyword arguments (line 1041)
        int_620389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 56), 'int')
        keyword_620390 = int_620389
        kwargs_620391 = {'axis': keyword_620390}
        # Getting the type of 'np' (line 1041)
        np_620382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 22), 'np', False)
        # Obtaining the member 'sum' of a type (line 1041)
        sum_620383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 22), np_620382, 'sum')
        # Calling sum(args, kwargs) (line 1041)
        sum_call_result_620392 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 22), sum_620383, *[square_call_result_620388], **kwargs_620391)
        
        # Processing the call keyword arguments (line 1041)
        int_620393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 66), 'int')
        keyword_620394 = int_620393
        kwargs_620395 = {'axis': keyword_620394}
        # Getting the type of 'np' (line 1041)
        np_620380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 15), 'np', False)
        # Obtaining the member 'sum' of a type (line 1041)
        sum_620381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 15), np_620380, 'sum')
        # Calling sum(args, kwargs) (line 1041)
        sum_call_result_620396 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 15), sum_620381, *[sum_call_result_620392], **kwargs_620395)
        
        # Assigning a type to the variable 'maha' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'maha', sum_call_result_620396)
        float_620397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 15), 'float')
        # Getting the type of 'numrows' (line 1042)
        numrows_620398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 23), 'numrows')
        # Getting the type of 'numcols' (line 1042)
        numcols_620399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 31), 'numcols')
        # Applying the binary operator '*' (line 1042)
        result_mul_620400 = python_operator(stypy.reporting.localization.Localization(__file__, 1042, 23), '*', numrows_620398, numcols_620399)
        
        # Getting the type of '_LOG_2PI' (line 1042)
        _LOG_2PI_620401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 39), '_LOG_2PI')
        # Applying the binary operator '*' (line 1042)
        result_mul_620402 = python_operator(stypy.reporting.localization.Localization(__file__, 1042, 38), '*', result_mul_620400, _LOG_2PI_620401)
        
        # Getting the type of 'numcols' (line 1042)
        numcols_620403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 50), 'numcols')
        # Getting the type of 'log_det_rowcov' (line 1042)
        log_det_rowcov_620404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 58), 'log_det_rowcov')
        # Applying the binary operator '*' (line 1042)
        result_mul_620405 = python_operator(stypy.reporting.localization.Localization(__file__, 1042, 50), '*', numcols_620403, log_det_rowcov_620404)
        
        # Applying the binary operator '+' (line 1042)
        result_add_620406 = python_operator(stypy.reporting.localization.Localization(__file__, 1042, 23), '+', result_mul_620402, result_mul_620405)
        
        # Getting the type of 'numrows' (line 1043)
        numrows_620407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 25), 'numrows')
        # Getting the type of 'log_det_colcov' (line 1043)
        log_det_colcov_620408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 33), 'log_det_colcov')
        # Applying the binary operator '*' (line 1043)
        result_mul_620409 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 25), '*', numrows_620407, log_det_colcov_620408)
        
        # Applying the binary operator '+' (line 1043)
        result_add_620410 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 23), '+', result_add_620406, result_mul_620409)
        
        # Getting the type of 'maha' (line 1043)
        maha_620411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 50), 'maha')
        # Applying the binary operator '+' (line 1043)
        result_add_620412 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 48), '+', result_add_620410, maha_620411)
        
        # Applying the binary operator '*' (line 1042)
        result_mul_620413 = python_operator(stypy.reporting.localization.Localization(__file__, 1042, 15), '*', float_620397, result_add_620412)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 8), 'stypy_return_type', result_mul_620413)
        
        # ################# End of '_logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1008)
        stypy_return_type_620414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_620414)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_logpdf'
        return stypy_return_type_620414


    @norecursion
    def logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1045)
        None_620415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 29), 'None')
        int_620416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 42), 'int')
        int_620417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 52), 'int')
        defaults = [None_620415, int_620416, int_620417]
        # Create a new context for function 'logpdf'
        module_type_store = module_type_store.open_function_context('logpdf', 1045, 4, False)
        # Assigning a type to the variable 'self' (line 1046)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        matrix_normal_gen.logpdf.__dict__.__setitem__('stypy_localization', localization)
        matrix_normal_gen.logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        matrix_normal_gen.logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        matrix_normal_gen.logpdf.__dict__.__setitem__('stypy_function_name', 'matrix_normal_gen.logpdf')
        matrix_normal_gen.logpdf.__dict__.__setitem__('stypy_param_names_list', ['X', 'mean', 'rowcov', 'colcov'])
        matrix_normal_gen.logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        matrix_normal_gen.logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        matrix_normal_gen.logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        matrix_normal_gen.logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        matrix_normal_gen.logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        matrix_normal_gen.logpdf.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_gen.logpdf', ['X', 'mean', 'rowcov', 'colcov'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpdf', localization, ['X', 'mean', 'rowcov', 'colcov'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpdf(...)' code ##################

        str_620418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1064, (-1)), 'str', '\n        Log of the matrix normal probability density function.\n\n        Parameters\n        ----------\n        X : array_like\n            Quantiles, with the last two axes of `X` denoting the components.\n        %(_matnorm_doc_default_callparams)s\n\n        Returns\n        -------\n        logpdf : ndarray\n            Log of the probability density function evaluated at `X`\n\n        Notes\n        -----\n        %(_matnorm_doc_callparams_note)s\n\n        ')
        
        # Assigning a Call to a Tuple (line 1065):
        
        # Assigning a Subscript to a Name (line 1065):
        
        # Obtaining the type of the subscript
        int_620419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 8), 'int')
        
        # Call to _process_parameters(...): (line 1065)
        # Processing the call arguments (line 1065)
        # Getting the type of 'mean' (line 1065)
        mean_620422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 62), 'mean', False)
        # Getting the type of 'rowcov' (line 1065)
        rowcov_620423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 68), 'rowcov', False)
        # Getting the type of 'colcov' (line 1066)
        colcov_620424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 62), 'colcov', False)
        # Processing the call keyword arguments (line 1065)
        kwargs_620425 = {}
        # Getting the type of 'self' (line 1065)
        self_620420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 37), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1065)
        _process_parameters_620421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 37), self_620420, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1065)
        _process_parameters_call_result_620426 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 37), _process_parameters_620421, *[mean_620422, rowcov_620423, colcov_620424], **kwargs_620425)
        
        # Obtaining the member '__getitem__' of a type (line 1065)
        getitem___620427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 8), _process_parameters_call_result_620426, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1065)
        subscript_call_result_620428 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 8), getitem___620427, int_620419)
        
        # Assigning a type to the variable 'tuple_var_assignment_618595' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'tuple_var_assignment_618595', subscript_call_result_620428)
        
        # Assigning a Subscript to a Name (line 1065):
        
        # Obtaining the type of the subscript
        int_620429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 8), 'int')
        
        # Call to _process_parameters(...): (line 1065)
        # Processing the call arguments (line 1065)
        # Getting the type of 'mean' (line 1065)
        mean_620432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 62), 'mean', False)
        # Getting the type of 'rowcov' (line 1065)
        rowcov_620433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 68), 'rowcov', False)
        # Getting the type of 'colcov' (line 1066)
        colcov_620434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 62), 'colcov', False)
        # Processing the call keyword arguments (line 1065)
        kwargs_620435 = {}
        # Getting the type of 'self' (line 1065)
        self_620430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 37), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1065)
        _process_parameters_620431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 37), self_620430, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1065)
        _process_parameters_call_result_620436 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 37), _process_parameters_620431, *[mean_620432, rowcov_620433, colcov_620434], **kwargs_620435)
        
        # Obtaining the member '__getitem__' of a type (line 1065)
        getitem___620437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 8), _process_parameters_call_result_620436, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1065)
        subscript_call_result_620438 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 8), getitem___620437, int_620429)
        
        # Assigning a type to the variable 'tuple_var_assignment_618596' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'tuple_var_assignment_618596', subscript_call_result_620438)
        
        # Assigning a Subscript to a Name (line 1065):
        
        # Obtaining the type of the subscript
        int_620439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 8), 'int')
        
        # Call to _process_parameters(...): (line 1065)
        # Processing the call arguments (line 1065)
        # Getting the type of 'mean' (line 1065)
        mean_620442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 62), 'mean', False)
        # Getting the type of 'rowcov' (line 1065)
        rowcov_620443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 68), 'rowcov', False)
        # Getting the type of 'colcov' (line 1066)
        colcov_620444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 62), 'colcov', False)
        # Processing the call keyword arguments (line 1065)
        kwargs_620445 = {}
        # Getting the type of 'self' (line 1065)
        self_620440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 37), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1065)
        _process_parameters_620441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 37), self_620440, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1065)
        _process_parameters_call_result_620446 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 37), _process_parameters_620441, *[mean_620442, rowcov_620443, colcov_620444], **kwargs_620445)
        
        # Obtaining the member '__getitem__' of a type (line 1065)
        getitem___620447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 8), _process_parameters_call_result_620446, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1065)
        subscript_call_result_620448 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 8), getitem___620447, int_620439)
        
        # Assigning a type to the variable 'tuple_var_assignment_618597' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'tuple_var_assignment_618597', subscript_call_result_620448)
        
        # Assigning a Subscript to a Name (line 1065):
        
        # Obtaining the type of the subscript
        int_620449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 8), 'int')
        
        # Call to _process_parameters(...): (line 1065)
        # Processing the call arguments (line 1065)
        # Getting the type of 'mean' (line 1065)
        mean_620452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 62), 'mean', False)
        # Getting the type of 'rowcov' (line 1065)
        rowcov_620453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 68), 'rowcov', False)
        # Getting the type of 'colcov' (line 1066)
        colcov_620454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 62), 'colcov', False)
        # Processing the call keyword arguments (line 1065)
        kwargs_620455 = {}
        # Getting the type of 'self' (line 1065)
        self_620450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 37), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1065)
        _process_parameters_620451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 37), self_620450, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1065)
        _process_parameters_call_result_620456 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 37), _process_parameters_620451, *[mean_620452, rowcov_620453, colcov_620454], **kwargs_620455)
        
        # Obtaining the member '__getitem__' of a type (line 1065)
        getitem___620457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 8), _process_parameters_call_result_620456, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1065)
        subscript_call_result_620458 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 8), getitem___620457, int_620449)
        
        # Assigning a type to the variable 'tuple_var_assignment_618598' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'tuple_var_assignment_618598', subscript_call_result_620458)
        
        # Assigning a Name to a Name (line 1065):
        # Getting the type of 'tuple_var_assignment_618595' (line 1065)
        tuple_var_assignment_618595_620459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'tuple_var_assignment_618595')
        # Assigning a type to the variable 'dims' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'dims', tuple_var_assignment_618595_620459)
        
        # Assigning a Name to a Name (line 1065):
        # Getting the type of 'tuple_var_assignment_618596' (line 1065)
        tuple_var_assignment_618596_620460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'tuple_var_assignment_618596')
        # Assigning a type to the variable 'mean' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 14), 'mean', tuple_var_assignment_618596_620460)
        
        # Assigning a Name to a Name (line 1065):
        # Getting the type of 'tuple_var_assignment_618597' (line 1065)
        tuple_var_assignment_618597_620461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'tuple_var_assignment_618597')
        # Assigning a type to the variable 'rowcov' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 20), 'rowcov', tuple_var_assignment_618597_620461)
        
        # Assigning a Name to a Name (line 1065):
        # Getting the type of 'tuple_var_assignment_618598' (line 1065)
        tuple_var_assignment_618598_620462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'tuple_var_assignment_618598')
        # Assigning a type to the variable 'colcov' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 28), 'colcov', tuple_var_assignment_618598_620462)
        
        # Assigning a Call to a Name (line 1067):
        
        # Assigning a Call to a Name (line 1067):
        
        # Call to _process_quantiles(...): (line 1067)
        # Processing the call arguments (line 1067)
        # Getting the type of 'X' (line 1067)
        X_620465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 36), 'X', False)
        # Getting the type of 'dims' (line 1067)
        dims_620466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 39), 'dims', False)
        # Processing the call keyword arguments (line 1067)
        kwargs_620467 = {}
        # Getting the type of 'self' (line 1067)
        self_620463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 12), 'self', False)
        # Obtaining the member '_process_quantiles' of a type (line 1067)
        _process_quantiles_620464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 12), self_620463, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 1067)
        _process_quantiles_call_result_620468 = invoke(stypy.reporting.localization.Localization(__file__, 1067, 12), _process_quantiles_620464, *[X_620465, dims_620466], **kwargs_620467)
        
        # Assigning a type to the variable 'X' (line 1067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 8), 'X', _process_quantiles_call_result_620468)
        
        # Assigning a Call to a Name (line 1068):
        
        # Assigning a Call to a Name (line 1068):
        
        # Call to _PSD(...): (line 1068)
        # Processing the call arguments (line 1068)
        # Getting the type of 'rowcov' (line 1068)
        rowcov_620470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 22), 'rowcov', False)
        # Processing the call keyword arguments (line 1068)
        # Getting the type of 'False' (line 1068)
        False_620471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 45), 'False', False)
        keyword_620472 = False_620471
        kwargs_620473 = {'allow_singular': keyword_620472}
        # Getting the type of '_PSD' (line 1068)
        _PSD_620469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 17), '_PSD', False)
        # Calling _PSD(args, kwargs) (line 1068)
        _PSD_call_result_620474 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 17), _PSD_620469, *[rowcov_620470], **kwargs_620473)
        
        # Assigning a type to the variable 'rowpsd' (line 1068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'rowpsd', _PSD_call_result_620474)
        
        # Assigning a Call to a Name (line 1069):
        
        # Assigning a Call to a Name (line 1069):
        
        # Call to _PSD(...): (line 1069)
        # Processing the call arguments (line 1069)
        # Getting the type of 'colcov' (line 1069)
        colcov_620476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 22), 'colcov', False)
        # Processing the call keyword arguments (line 1069)
        # Getting the type of 'False' (line 1069)
        False_620477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 45), 'False', False)
        keyword_620478 = False_620477
        kwargs_620479 = {'allow_singular': keyword_620478}
        # Getting the type of '_PSD' (line 1069)
        _PSD_620475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 17), '_PSD', False)
        # Calling _PSD(args, kwargs) (line 1069)
        _PSD_call_result_620480 = invoke(stypy.reporting.localization.Localization(__file__, 1069, 17), _PSD_620475, *[colcov_620476], **kwargs_620479)
        
        # Assigning a type to the variable 'colpsd' (line 1069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1069, 8), 'colpsd', _PSD_call_result_620480)
        
        # Assigning a Call to a Name (line 1070):
        
        # Assigning a Call to a Name (line 1070):
        
        # Call to _logpdf(...): (line 1070)
        # Processing the call arguments (line 1070)
        # Getting the type of 'dims' (line 1070)
        dims_620483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 27), 'dims', False)
        # Getting the type of 'X' (line 1070)
        X_620484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 33), 'X', False)
        # Getting the type of 'mean' (line 1070)
        mean_620485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 36), 'mean', False)
        # Getting the type of 'rowpsd' (line 1070)
        rowpsd_620486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 42), 'rowpsd', False)
        # Obtaining the member 'U' of a type (line 1070)
        U_620487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 42), rowpsd_620486, 'U')
        # Getting the type of 'rowpsd' (line 1070)
        rowpsd_620488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 52), 'rowpsd', False)
        # Obtaining the member 'log_pdet' of a type (line 1070)
        log_pdet_620489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 52), rowpsd_620488, 'log_pdet')
        # Getting the type of 'colpsd' (line 1070)
        colpsd_620490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 69), 'colpsd', False)
        # Obtaining the member 'U' of a type (line 1070)
        U_620491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 69), colpsd_620490, 'U')
        # Getting the type of 'colpsd' (line 1071)
        colpsd_620492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 27), 'colpsd', False)
        # Obtaining the member 'log_pdet' of a type (line 1071)
        log_pdet_620493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 27), colpsd_620492, 'log_pdet')
        # Processing the call keyword arguments (line 1070)
        kwargs_620494 = {}
        # Getting the type of 'self' (line 1070)
        self_620481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 14), 'self', False)
        # Obtaining the member '_logpdf' of a type (line 1070)
        _logpdf_620482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 14), self_620481, '_logpdf')
        # Calling _logpdf(args, kwargs) (line 1070)
        _logpdf_call_result_620495 = invoke(stypy.reporting.localization.Localization(__file__, 1070, 14), _logpdf_620482, *[dims_620483, X_620484, mean_620485, U_620487, log_pdet_620489, U_620491, log_pdet_620493], **kwargs_620494)
        
        # Assigning a type to the variable 'out' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'out', _logpdf_call_result_620495)
        
        # Call to _squeeze_output(...): (line 1072)
        # Processing the call arguments (line 1072)
        # Getting the type of 'out' (line 1072)
        out_620497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 31), 'out', False)
        # Processing the call keyword arguments (line 1072)
        kwargs_620498 = {}
        # Getting the type of '_squeeze_output' (line 1072)
        _squeeze_output_620496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 1072)
        _squeeze_output_call_result_620499 = invoke(stypy.reporting.localization.Localization(__file__, 1072, 15), _squeeze_output_620496, *[out_620497], **kwargs_620498)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1072, 8), 'stypy_return_type', _squeeze_output_call_result_620499)
        
        # ################# End of 'logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1045)
        stypy_return_type_620500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_620500)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpdf'
        return stypy_return_type_620500


    @norecursion
    def pdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1074)
        None_620501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 26), 'None')
        int_620502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, 39), 'int')
        int_620503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, 49), 'int')
        defaults = [None_620501, int_620502, int_620503]
        # Create a new context for function 'pdf'
        module_type_store = module_type_store.open_function_context('pdf', 1074, 4, False)
        # Assigning a type to the variable 'self' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        matrix_normal_gen.pdf.__dict__.__setitem__('stypy_localization', localization)
        matrix_normal_gen.pdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        matrix_normal_gen.pdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        matrix_normal_gen.pdf.__dict__.__setitem__('stypy_function_name', 'matrix_normal_gen.pdf')
        matrix_normal_gen.pdf.__dict__.__setitem__('stypy_param_names_list', ['X', 'mean', 'rowcov', 'colcov'])
        matrix_normal_gen.pdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        matrix_normal_gen.pdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        matrix_normal_gen.pdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        matrix_normal_gen.pdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        matrix_normal_gen.pdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        matrix_normal_gen.pdf.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_gen.pdf', ['X', 'mean', 'rowcov', 'colcov'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pdf', localization, ['X', 'mean', 'rowcov', 'colcov'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pdf(...)' code ##################

        str_620504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, (-1)), 'str', '\n        Matrix normal probability density function.\n\n        Parameters\n        ----------\n        X : array_like\n            Quantiles, with the last two axes of `X` denoting the components.\n        %(_matnorm_doc_default_callparams)s\n\n        Returns\n        -------\n        pdf : ndarray\n            Probability density function evaluated at `X`\n\n        Notes\n        -----\n        %(_matnorm_doc_callparams_note)s\n\n        ')
        
        # Call to exp(...): (line 1094)
        # Processing the call arguments (line 1094)
        
        # Call to logpdf(...): (line 1094)
        # Processing the call arguments (line 1094)
        # Getting the type of 'X' (line 1094)
        X_620509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 34), 'X', False)
        # Getting the type of 'mean' (line 1094)
        mean_620510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 37), 'mean', False)
        # Getting the type of 'rowcov' (line 1094)
        rowcov_620511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 43), 'rowcov', False)
        # Getting the type of 'colcov' (line 1094)
        colcov_620512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 51), 'colcov', False)
        # Processing the call keyword arguments (line 1094)
        kwargs_620513 = {}
        # Getting the type of 'self' (line 1094)
        self_620507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 22), 'self', False)
        # Obtaining the member 'logpdf' of a type (line 1094)
        logpdf_620508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 22), self_620507, 'logpdf')
        # Calling logpdf(args, kwargs) (line 1094)
        logpdf_call_result_620514 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 22), logpdf_620508, *[X_620509, mean_620510, rowcov_620511, colcov_620512], **kwargs_620513)
        
        # Processing the call keyword arguments (line 1094)
        kwargs_620515 = {}
        # Getting the type of 'np' (line 1094)
        np_620505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 15), 'np', False)
        # Obtaining the member 'exp' of a type (line 1094)
        exp_620506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 15), np_620505, 'exp')
        # Calling exp(args, kwargs) (line 1094)
        exp_call_result_620516 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 15), exp_620506, *[logpdf_call_result_620514], **kwargs_620515)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1094, 8), 'stypy_return_type', exp_call_result_620516)
        
        # ################# End of 'pdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1074)
        stypy_return_type_620517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_620517)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pdf'
        return stypy_return_type_620517


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1096)
        None_620518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 23), 'None')
        int_620519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 36), 'int')
        int_620520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 46), 'int')
        int_620521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 54), 'int')
        # Getting the type of 'None' (line 1096)
        None_620522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 70), 'None')
        defaults = [None_620518, int_620519, int_620520, int_620521, None_620522]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 1096, 4, False)
        # Assigning a type to the variable 'self' (line 1097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1097, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        matrix_normal_gen.rvs.__dict__.__setitem__('stypy_localization', localization)
        matrix_normal_gen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        matrix_normal_gen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        matrix_normal_gen.rvs.__dict__.__setitem__('stypy_function_name', 'matrix_normal_gen.rvs')
        matrix_normal_gen.rvs.__dict__.__setitem__('stypy_param_names_list', ['mean', 'rowcov', 'colcov', 'size', 'random_state'])
        matrix_normal_gen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        matrix_normal_gen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        matrix_normal_gen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        matrix_normal_gen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        matrix_normal_gen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        matrix_normal_gen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_gen.rvs', ['mean', 'rowcov', 'colcov', 'size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['mean', 'rowcov', 'colcov', 'size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        str_620523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1117, (-1)), 'str', '\n        Draw random samples from a matrix normal distribution.\n\n        Parameters\n        ----------\n        %(_matnorm_doc_default_callparams)s\n        size : integer, optional\n            Number of samples to draw (default 1).\n        %(_doc_random_state)s\n\n        Returns\n        -------\n        rvs : ndarray or scalar\n            Random variates of size (`size`, `dims`), where `dims` is the\n            dimension of the random matrices.\n\n        Notes\n        -----\n        %(_matnorm_doc_callparams_note)s\n\n        ')
        
        # Assigning a Call to a Name (line 1118):
        
        # Assigning a Call to a Name (line 1118):
        
        # Call to int(...): (line 1118)
        # Processing the call arguments (line 1118)
        # Getting the type of 'size' (line 1118)
        size_620525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 19), 'size', False)
        # Processing the call keyword arguments (line 1118)
        kwargs_620526 = {}
        # Getting the type of 'int' (line 1118)
        int_620524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 15), 'int', False)
        # Calling int(args, kwargs) (line 1118)
        int_call_result_620527 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 15), int_620524, *[size_620525], **kwargs_620526)
        
        # Assigning a type to the variable 'size' (line 1118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 8), 'size', int_call_result_620527)
        
        # Assigning a Call to a Tuple (line 1119):
        
        # Assigning a Subscript to a Name (line 1119):
        
        # Obtaining the type of the subscript
        int_620528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 8), 'int')
        
        # Call to _process_parameters(...): (line 1119)
        # Processing the call arguments (line 1119)
        # Getting the type of 'mean' (line 1119)
        mean_620531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 62), 'mean', False)
        # Getting the type of 'rowcov' (line 1119)
        rowcov_620532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 68), 'rowcov', False)
        # Getting the type of 'colcov' (line 1120)
        colcov_620533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 62), 'colcov', False)
        # Processing the call keyword arguments (line 1119)
        kwargs_620534 = {}
        # Getting the type of 'self' (line 1119)
        self_620529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 37), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1119)
        _process_parameters_620530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 37), self_620529, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1119)
        _process_parameters_call_result_620535 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 37), _process_parameters_620530, *[mean_620531, rowcov_620532, colcov_620533], **kwargs_620534)
        
        # Obtaining the member '__getitem__' of a type (line 1119)
        getitem___620536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 8), _process_parameters_call_result_620535, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1119)
        subscript_call_result_620537 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 8), getitem___620536, int_620528)
        
        # Assigning a type to the variable 'tuple_var_assignment_618599' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'tuple_var_assignment_618599', subscript_call_result_620537)
        
        # Assigning a Subscript to a Name (line 1119):
        
        # Obtaining the type of the subscript
        int_620538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 8), 'int')
        
        # Call to _process_parameters(...): (line 1119)
        # Processing the call arguments (line 1119)
        # Getting the type of 'mean' (line 1119)
        mean_620541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 62), 'mean', False)
        # Getting the type of 'rowcov' (line 1119)
        rowcov_620542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 68), 'rowcov', False)
        # Getting the type of 'colcov' (line 1120)
        colcov_620543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 62), 'colcov', False)
        # Processing the call keyword arguments (line 1119)
        kwargs_620544 = {}
        # Getting the type of 'self' (line 1119)
        self_620539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 37), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1119)
        _process_parameters_620540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 37), self_620539, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1119)
        _process_parameters_call_result_620545 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 37), _process_parameters_620540, *[mean_620541, rowcov_620542, colcov_620543], **kwargs_620544)
        
        # Obtaining the member '__getitem__' of a type (line 1119)
        getitem___620546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 8), _process_parameters_call_result_620545, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1119)
        subscript_call_result_620547 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 8), getitem___620546, int_620538)
        
        # Assigning a type to the variable 'tuple_var_assignment_618600' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'tuple_var_assignment_618600', subscript_call_result_620547)
        
        # Assigning a Subscript to a Name (line 1119):
        
        # Obtaining the type of the subscript
        int_620548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 8), 'int')
        
        # Call to _process_parameters(...): (line 1119)
        # Processing the call arguments (line 1119)
        # Getting the type of 'mean' (line 1119)
        mean_620551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 62), 'mean', False)
        # Getting the type of 'rowcov' (line 1119)
        rowcov_620552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 68), 'rowcov', False)
        # Getting the type of 'colcov' (line 1120)
        colcov_620553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 62), 'colcov', False)
        # Processing the call keyword arguments (line 1119)
        kwargs_620554 = {}
        # Getting the type of 'self' (line 1119)
        self_620549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 37), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1119)
        _process_parameters_620550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 37), self_620549, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1119)
        _process_parameters_call_result_620555 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 37), _process_parameters_620550, *[mean_620551, rowcov_620552, colcov_620553], **kwargs_620554)
        
        # Obtaining the member '__getitem__' of a type (line 1119)
        getitem___620556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 8), _process_parameters_call_result_620555, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1119)
        subscript_call_result_620557 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 8), getitem___620556, int_620548)
        
        # Assigning a type to the variable 'tuple_var_assignment_618601' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'tuple_var_assignment_618601', subscript_call_result_620557)
        
        # Assigning a Subscript to a Name (line 1119):
        
        # Obtaining the type of the subscript
        int_620558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 8), 'int')
        
        # Call to _process_parameters(...): (line 1119)
        # Processing the call arguments (line 1119)
        # Getting the type of 'mean' (line 1119)
        mean_620561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 62), 'mean', False)
        # Getting the type of 'rowcov' (line 1119)
        rowcov_620562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 68), 'rowcov', False)
        # Getting the type of 'colcov' (line 1120)
        colcov_620563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 62), 'colcov', False)
        # Processing the call keyword arguments (line 1119)
        kwargs_620564 = {}
        # Getting the type of 'self' (line 1119)
        self_620559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 37), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1119)
        _process_parameters_620560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 37), self_620559, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1119)
        _process_parameters_call_result_620565 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 37), _process_parameters_620560, *[mean_620561, rowcov_620562, colcov_620563], **kwargs_620564)
        
        # Obtaining the member '__getitem__' of a type (line 1119)
        getitem___620566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 8), _process_parameters_call_result_620565, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1119)
        subscript_call_result_620567 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 8), getitem___620566, int_620558)
        
        # Assigning a type to the variable 'tuple_var_assignment_618602' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'tuple_var_assignment_618602', subscript_call_result_620567)
        
        # Assigning a Name to a Name (line 1119):
        # Getting the type of 'tuple_var_assignment_618599' (line 1119)
        tuple_var_assignment_618599_620568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'tuple_var_assignment_618599')
        # Assigning a type to the variable 'dims' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'dims', tuple_var_assignment_618599_620568)
        
        # Assigning a Name to a Name (line 1119):
        # Getting the type of 'tuple_var_assignment_618600' (line 1119)
        tuple_var_assignment_618600_620569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'tuple_var_assignment_618600')
        # Assigning a type to the variable 'mean' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 14), 'mean', tuple_var_assignment_618600_620569)
        
        # Assigning a Name to a Name (line 1119):
        # Getting the type of 'tuple_var_assignment_618601' (line 1119)
        tuple_var_assignment_618601_620570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'tuple_var_assignment_618601')
        # Assigning a type to the variable 'rowcov' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 20), 'rowcov', tuple_var_assignment_618601_620570)
        
        # Assigning a Name to a Name (line 1119):
        # Getting the type of 'tuple_var_assignment_618602' (line 1119)
        tuple_var_assignment_618602_620571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'tuple_var_assignment_618602')
        # Assigning a type to the variable 'colcov' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 28), 'colcov', tuple_var_assignment_618602_620571)
        
        # Assigning a Call to a Name (line 1121):
        
        # Assigning a Call to a Name (line 1121):
        
        # Call to cholesky(...): (line 1121)
        # Processing the call arguments (line 1121)
        # Getting the type of 'rowcov' (line 1121)
        rowcov_620575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 40), 'rowcov', False)
        # Processing the call keyword arguments (line 1121)
        # Getting the type of 'True' (line 1121)
        True_620576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 54), 'True', False)
        keyword_620577 = True_620576
        kwargs_620578 = {'lower': keyword_620577}
        # Getting the type of 'scipy' (line 1121)
        scipy_620572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 18), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 1121)
        linalg_620573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 18), scipy_620572, 'linalg')
        # Obtaining the member 'cholesky' of a type (line 1121)
        cholesky_620574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 18), linalg_620573, 'cholesky')
        # Calling cholesky(args, kwargs) (line 1121)
        cholesky_call_result_620579 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 18), cholesky_620574, *[rowcov_620575], **kwargs_620578)
        
        # Assigning a type to the variable 'rowchol' (line 1121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 8), 'rowchol', cholesky_call_result_620579)
        
        # Assigning a Call to a Name (line 1122):
        
        # Assigning a Call to a Name (line 1122):
        
        # Call to cholesky(...): (line 1122)
        # Processing the call arguments (line 1122)
        # Getting the type of 'colcov' (line 1122)
        colcov_620583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 40), 'colcov', False)
        # Processing the call keyword arguments (line 1122)
        # Getting the type of 'True' (line 1122)
        True_620584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 54), 'True', False)
        keyword_620585 = True_620584
        kwargs_620586 = {'lower': keyword_620585}
        # Getting the type of 'scipy' (line 1122)
        scipy_620580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 18), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 1122)
        linalg_620581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 18), scipy_620580, 'linalg')
        # Obtaining the member 'cholesky' of a type (line 1122)
        cholesky_620582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 18), linalg_620581, 'cholesky')
        # Calling cholesky(args, kwargs) (line 1122)
        cholesky_call_result_620587 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 18), cholesky_620582, *[colcov_620583], **kwargs_620586)
        
        # Assigning a type to the variable 'colchol' (line 1122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 8), 'colchol', cholesky_call_result_620587)
        
        # Assigning a Call to a Name (line 1123):
        
        # Assigning a Call to a Name (line 1123):
        
        # Call to _get_random_state(...): (line 1123)
        # Processing the call arguments (line 1123)
        # Getting the type of 'random_state' (line 1123)
        random_state_620590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 46), 'random_state', False)
        # Processing the call keyword arguments (line 1123)
        kwargs_620591 = {}
        # Getting the type of 'self' (line 1123)
        self_620588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 23), 'self', False)
        # Obtaining the member '_get_random_state' of a type (line 1123)
        _get_random_state_620589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 23), self_620588, '_get_random_state')
        # Calling _get_random_state(args, kwargs) (line 1123)
        _get_random_state_call_result_620592 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 23), _get_random_state_620589, *[random_state_620590], **kwargs_620591)
        
        # Assigning a type to the variable 'random_state' (line 1123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 8), 'random_state', _get_random_state_call_result_620592)
        
        # Assigning a Call to a Name (line 1124):
        
        # Assigning a Call to a Name (line 1124):
        
        # Call to standard_normal(...): (line 1124)
        # Processing the call keyword arguments (line 1124)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1124)
        tuple_620595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1124)
        # Adding element type (line 1124)
        
        # Obtaining the type of the subscript
        int_620596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 59), 'int')
        # Getting the type of 'dims' (line 1124)
        dims_620597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 54), 'dims', False)
        # Obtaining the member '__getitem__' of a type (line 1124)
        getitem___620598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 54), dims_620597, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1124)
        subscript_call_result_620599 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 54), getitem___620598, int_620596)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 54), tuple_620595, subscript_call_result_620599)
        # Adding element type (line 1124)
        # Getting the type of 'size' (line 1124)
        size_620600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 62), 'size', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 54), tuple_620595, size_620600)
        # Adding element type (line 1124)
        
        # Obtaining the type of the subscript
        int_620601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 72), 'int')
        # Getting the type of 'dims' (line 1124)
        dims_620602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 67), 'dims', False)
        # Obtaining the member '__getitem__' of a type (line 1124)
        getitem___620603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 67), dims_620602, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1124)
        subscript_call_result_620604 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 67), getitem___620603, int_620601)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 54), tuple_620595, subscript_call_result_620604)
        
        keyword_620605 = tuple_620595
        kwargs_620606 = {'size': keyword_620605}
        # Getting the type of 'random_state' (line 1124)
        random_state_620593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 19), 'random_state', False)
        # Obtaining the member 'standard_normal' of a type (line 1124)
        standard_normal_620594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 19), random_state_620593, 'standard_normal')
        # Calling standard_normal(args, kwargs) (line 1124)
        standard_normal_call_result_620607 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 19), standard_normal_620594, *[], **kwargs_620606)
        
        # Assigning a type to the variable 'std_norm' (line 1124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 8), 'std_norm', standard_normal_call_result_620607)
        
        # Assigning a Call to a Name (line 1125):
        
        # Assigning a Call to a Name (line 1125):
        
        # Call to tensordot(...): (line 1125)
        # Processing the call arguments (line 1125)
        # Getting the type of 'colchol' (line 1125)
        colchol_620610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 32), 'colchol', False)
        
        # Call to dot(...): (line 1125)
        # Processing the call arguments (line 1125)
        # Getting the type of 'std_norm' (line 1125)
        std_norm_620613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 48), 'std_norm', False)
        # Getting the type of 'rowchol' (line 1125)
        rowchol_620614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 58), 'rowchol', False)
        # Obtaining the member 'T' of a type (line 1125)
        T_620615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 58), rowchol_620614, 'T')
        # Processing the call keyword arguments (line 1125)
        kwargs_620616 = {}
        # Getting the type of 'np' (line 1125)
        np_620611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 41), 'np', False)
        # Obtaining the member 'dot' of a type (line 1125)
        dot_620612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 41), np_620611, 'dot')
        # Calling dot(args, kwargs) (line 1125)
        dot_call_result_620617 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 41), dot_620612, *[std_norm_620613, T_620615], **kwargs_620616)
        
        int_620618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1125, 70), 'int')
        # Processing the call keyword arguments (line 1125)
        kwargs_620619 = {}
        # Getting the type of 'np' (line 1125)
        np_620608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 19), 'np', False)
        # Obtaining the member 'tensordot' of a type (line 1125)
        tensordot_620609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 19), np_620608, 'tensordot')
        # Calling tensordot(args, kwargs) (line 1125)
        tensordot_call_result_620620 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 19), tensordot_620609, *[colchol_620610, dot_call_result_620617, int_620618], **kwargs_620619)
        
        # Assigning a type to the variable 'roll_rvs' (line 1125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1125, 8), 'roll_rvs', tensordot_call_result_620620)
        
        # Assigning a BinOp to a Name (line 1126):
        
        # Assigning a BinOp to a Name (line 1126):
        
        # Call to rollaxis(...): (line 1126)
        # Processing the call arguments (line 1126)
        # Getting the type of 'roll_rvs' (line 1126)
        roll_rvs_620623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 26), 'roll_rvs', False)
        # Obtaining the member 'T' of a type (line 1126)
        T_620624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 26), roll_rvs_620623, 'T')
        # Processing the call keyword arguments (line 1126)
        int_620625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 43), 'int')
        keyword_620626 = int_620625
        int_620627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 52), 'int')
        keyword_620628 = int_620627
        kwargs_620629 = {'start': keyword_620628, 'axis': keyword_620626}
        # Getting the type of 'np' (line 1126)
        np_620621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 14), 'np', False)
        # Obtaining the member 'rollaxis' of a type (line 1126)
        rollaxis_620622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 14), np_620621, 'rollaxis')
        # Calling rollaxis(args, kwargs) (line 1126)
        rollaxis_call_result_620630 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 14), rollaxis_620622, *[T_620624], **kwargs_620629)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 1126)
        np_620631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 62), 'np')
        # Obtaining the member 'newaxis' of a type (line 1126)
        newaxis_620632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 62), np_620631, 'newaxis')
        slice_620633 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1126, 57), None, None, None)
        slice_620634 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1126, 57), None, None, None)
        # Getting the type of 'mean' (line 1126)
        mean_620635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 57), 'mean')
        # Obtaining the member '__getitem__' of a type (line 1126)
        getitem___620636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 57), mean_620635, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
        subscript_call_result_620637 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 57), getitem___620636, (newaxis_620632, slice_620633, slice_620634))
        
        # Applying the binary operator '+' (line 1126)
        result_add_620638 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 14), '+', rollaxis_call_result_620630, subscript_call_result_620637)
        
        # Assigning a type to the variable 'out' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 8), 'out', result_add_620638)
        
        
        # Getting the type of 'size' (line 1127)
        size_620639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 11), 'size')
        int_620640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 19), 'int')
        # Applying the binary operator '==' (line 1127)
        result_eq_620641 = python_operator(stypy.reporting.localization.Localization(__file__, 1127, 11), '==', size_620639, int_620640)
        
        # Testing the type of an if condition (line 1127)
        if_condition_620642 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1127, 8), result_eq_620641)
        # Assigning a type to the variable 'if_condition_620642' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'if_condition_620642', if_condition_620642)
        # SSA begins for if statement (line 1127)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1129):
        
        # Assigning a Call to a Name (line 1129):
        
        # Call to reshape(...): (line 1129)
        # Processing the call arguments (line 1129)
        # Getting the type of 'mean' (line 1129)
        mean_620645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 30), 'mean', False)
        # Obtaining the member 'shape' of a type (line 1129)
        shape_620646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 30), mean_620645, 'shape')
        # Processing the call keyword arguments (line 1129)
        kwargs_620647 = {}
        # Getting the type of 'out' (line 1129)
        out_620643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 18), 'out', False)
        # Obtaining the member 'reshape' of a type (line 1129)
        reshape_620644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 18), out_620643, 'reshape')
        # Calling reshape(args, kwargs) (line 1129)
        reshape_call_result_620648 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 18), reshape_620644, *[shape_620646], **kwargs_620647)
        
        # Assigning a type to the variable 'out' (line 1129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 12), 'out', reshape_call_result_620648)
        # SSA join for if statement (line 1127)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 1130)
        out_620649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'stypy_return_type', out_620649)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 1096)
        stypy_return_type_620650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_620650)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_620650


# Assigning a type to the variable 'matrix_normal_gen' (line 814)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 0), 'matrix_normal_gen', matrix_normal_gen)

# Assigning a Call to a Name (line 1132):

# Assigning a Call to a Name (line 1132):

# Call to matrix_normal_gen(...): (line 1132)
# Processing the call keyword arguments (line 1132)
kwargs_620652 = {}
# Getting the type of 'matrix_normal_gen' (line 1132)
matrix_normal_gen_620651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 16), 'matrix_normal_gen', False)
# Calling matrix_normal_gen(args, kwargs) (line 1132)
matrix_normal_gen_call_result_620653 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 16), matrix_normal_gen_620651, *[], **kwargs_620652)

# Assigning a type to the variable 'matrix_normal' (line 1132)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 0), 'matrix_normal', matrix_normal_gen_call_result_620653)
# Declaration of the 'matrix_normal_frozen' class
# Getting the type of 'multi_rv_frozen' (line 1135)
multi_rv_frozen_620654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 27), 'multi_rv_frozen')

class matrix_normal_frozen(multi_rv_frozen_620654, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1136)
        None_620655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 28), 'None')
        int_620656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 41), 'int')
        int_620657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 51), 'int')
        # Getting the type of 'None' (line 1136)
        None_620658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 59), 'None')
        defaults = [None_620655, int_620656, int_620657, None_620658]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1136, 4, False)
        # Assigning a type to the variable 'self' (line 1137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_frozen.__init__', ['mean', 'rowcov', 'colcov', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['mean', 'rowcov', 'colcov', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_620659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1161, (-1)), 'str', '\n        Create a frozen matrix normal distribution.\n\n        Parameters\n        ----------\n        %(_matnorm_doc_default_callparams)s\n        seed : None or int or np.random.RandomState instance, optional\n            If int or RandomState, use it for drawing the random variates.\n            If None (or np.random), the global np.random state is used.\n            Default is None.\n\n        Examples\n        --------\n        >>> from scipy.stats import matrix_normal\n\n        >>> distn = matrix_normal(mean=np.zeros((3,3)))\n        >>> X = distn.rvs(); X\n        array([[-0.02976962,  0.93339138, -0.09663178],\n               [ 0.67405524,  0.28250467, -0.93308929],\n               [-0.31144782,  0.74535536,  1.30412916]])\n        >>> distn.pdf(X)\n        2.5160642368346784e-05\n        >>> distn.logpdf(X)\n        -10.590229595124615\n        ')
        
        # Assigning a Call to a Attribute (line 1162):
        
        # Assigning a Call to a Attribute (line 1162):
        
        # Call to matrix_normal_gen(...): (line 1162)
        # Processing the call arguments (line 1162)
        # Getting the type of 'seed' (line 1162)
        seed_620661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 39), 'seed', False)
        # Processing the call keyword arguments (line 1162)
        kwargs_620662 = {}
        # Getting the type of 'matrix_normal_gen' (line 1162)
        matrix_normal_gen_620660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 21), 'matrix_normal_gen', False)
        # Calling matrix_normal_gen(args, kwargs) (line 1162)
        matrix_normal_gen_call_result_620663 = invoke(stypy.reporting.localization.Localization(__file__, 1162, 21), matrix_normal_gen_620660, *[seed_620661], **kwargs_620662)
        
        # Getting the type of 'self' (line 1162)
        self_620664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 8), 'self')
        # Setting the type of the member '_dist' of a type (line 1162)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1162, 8), self_620664, '_dist', matrix_normal_gen_call_result_620663)
        
        # Assigning a Call to a Tuple (line 1163):
        
        # Assigning a Subscript to a Name (line 1163):
        
        # Obtaining the type of the subscript
        int_620665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 8), 'int')
        
        # Call to _process_parameters(...): (line 1164)
        # Processing the call arguments (line 1164)
        # Getting the type of 'mean' (line 1164)
        mean_620669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 43), 'mean', False)
        # Getting the type of 'rowcov' (line 1164)
        rowcov_620670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 49), 'rowcov', False)
        # Getting the type of 'colcov' (line 1164)
        colcov_620671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 57), 'colcov', False)
        # Processing the call keyword arguments (line 1164)
        kwargs_620672 = {}
        # Getting the type of 'self' (line 1164)
        self_620666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 12), 'self', False)
        # Obtaining the member '_dist' of a type (line 1164)
        _dist_620667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 12), self_620666, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 1164)
        _process_parameters_620668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 12), _dist_620667, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1164)
        _process_parameters_call_result_620673 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 12), _process_parameters_620668, *[mean_620669, rowcov_620670, colcov_620671], **kwargs_620672)
        
        # Obtaining the member '__getitem__' of a type (line 1163)
        getitem___620674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 8), _process_parameters_call_result_620673, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1163)
        subscript_call_result_620675 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 8), getitem___620674, int_620665)
        
        # Assigning a type to the variable 'tuple_var_assignment_618603' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'tuple_var_assignment_618603', subscript_call_result_620675)
        
        # Assigning a Subscript to a Name (line 1163):
        
        # Obtaining the type of the subscript
        int_620676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 8), 'int')
        
        # Call to _process_parameters(...): (line 1164)
        # Processing the call arguments (line 1164)
        # Getting the type of 'mean' (line 1164)
        mean_620680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 43), 'mean', False)
        # Getting the type of 'rowcov' (line 1164)
        rowcov_620681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 49), 'rowcov', False)
        # Getting the type of 'colcov' (line 1164)
        colcov_620682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 57), 'colcov', False)
        # Processing the call keyword arguments (line 1164)
        kwargs_620683 = {}
        # Getting the type of 'self' (line 1164)
        self_620677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 12), 'self', False)
        # Obtaining the member '_dist' of a type (line 1164)
        _dist_620678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 12), self_620677, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 1164)
        _process_parameters_620679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 12), _dist_620678, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1164)
        _process_parameters_call_result_620684 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 12), _process_parameters_620679, *[mean_620680, rowcov_620681, colcov_620682], **kwargs_620683)
        
        # Obtaining the member '__getitem__' of a type (line 1163)
        getitem___620685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 8), _process_parameters_call_result_620684, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1163)
        subscript_call_result_620686 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 8), getitem___620685, int_620676)
        
        # Assigning a type to the variable 'tuple_var_assignment_618604' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'tuple_var_assignment_618604', subscript_call_result_620686)
        
        # Assigning a Subscript to a Name (line 1163):
        
        # Obtaining the type of the subscript
        int_620687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 8), 'int')
        
        # Call to _process_parameters(...): (line 1164)
        # Processing the call arguments (line 1164)
        # Getting the type of 'mean' (line 1164)
        mean_620691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 43), 'mean', False)
        # Getting the type of 'rowcov' (line 1164)
        rowcov_620692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 49), 'rowcov', False)
        # Getting the type of 'colcov' (line 1164)
        colcov_620693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 57), 'colcov', False)
        # Processing the call keyword arguments (line 1164)
        kwargs_620694 = {}
        # Getting the type of 'self' (line 1164)
        self_620688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 12), 'self', False)
        # Obtaining the member '_dist' of a type (line 1164)
        _dist_620689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 12), self_620688, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 1164)
        _process_parameters_620690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 12), _dist_620689, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1164)
        _process_parameters_call_result_620695 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 12), _process_parameters_620690, *[mean_620691, rowcov_620692, colcov_620693], **kwargs_620694)
        
        # Obtaining the member '__getitem__' of a type (line 1163)
        getitem___620696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 8), _process_parameters_call_result_620695, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1163)
        subscript_call_result_620697 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 8), getitem___620696, int_620687)
        
        # Assigning a type to the variable 'tuple_var_assignment_618605' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'tuple_var_assignment_618605', subscript_call_result_620697)
        
        # Assigning a Subscript to a Name (line 1163):
        
        # Obtaining the type of the subscript
        int_620698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 8), 'int')
        
        # Call to _process_parameters(...): (line 1164)
        # Processing the call arguments (line 1164)
        # Getting the type of 'mean' (line 1164)
        mean_620702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 43), 'mean', False)
        # Getting the type of 'rowcov' (line 1164)
        rowcov_620703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 49), 'rowcov', False)
        # Getting the type of 'colcov' (line 1164)
        colcov_620704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 57), 'colcov', False)
        # Processing the call keyword arguments (line 1164)
        kwargs_620705 = {}
        # Getting the type of 'self' (line 1164)
        self_620699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 12), 'self', False)
        # Obtaining the member '_dist' of a type (line 1164)
        _dist_620700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 12), self_620699, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 1164)
        _process_parameters_620701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 12), _dist_620700, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1164)
        _process_parameters_call_result_620706 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 12), _process_parameters_620701, *[mean_620702, rowcov_620703, colcov_620704], **kwargs_620705)
        
        # Obtaining the member '__getitem__' of a type (line 1163)
        getitem___620707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 8), _process_parameters_call_result_620706, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1163)
        subscript_call_result_620708 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 8), getitem___620707, int_620698)
        
        # Assigning a type to the variable 'tuple_var_assignment_618606' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'tuple_var_assignment_618606', subscript_call_result_620708)
        
        # Assigning a Name to a Attribute (line 1163):
        # Getting the type of 'tuple_var_assignment_618603' (line 1163)
        tuple_var_assignment_618603_620709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'tuple_var_assignment_618603')
        # Getting the type of 'self' (line 1163)
        self_620710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'self')
        # Setting the type of the member 'dims' of a type (line 1163)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 8), self_620710, 'dims', tuple_var_assignment_618603_620709)
        
        # Assigning a Name to a Attribute (line 1163):
        # Getting the type of 'tuple_var_assignment_618604' (line 1163)
        tuple_var_assignment_618604_620711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'tuple_var_assignment_618604')
        # Getting the type of 'self' (line 1163)
        self_620712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 19), 'self')
        # Setting the type of the member 'mean' of a type (line 1163)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 19), self_620712, 'mean', tuple_var_assignment_618604_620711)
        
        # Assigning a Name to a Attribute (line 1163):
        # Getting the type of 'tuple_var_assignment_618605' (line 1163)
        tuple_var_assignment_618605_620713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'tuple_var_assignment_618605')
        # Getting the type of 'self' (line 1163)
        self_620714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 30), 'self')
        # Setting the type of the member 'rowcov' of a type (line 1163)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 30), self_620714, 'rowcov', tuple_var_assignment_618605_620713)
        
        # Assigning a Name to a Attribute (line 1163):
        # Getting the type of 'tuple_var_assignment_618606' (line 1163)
        tuple_var_assignment_618606_620715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'tuple_var_assignment_618606')
        # Getting the type of 'self' (line 1163)
        self_620716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 43), 'self')
        # Setting the type of the member 'colcov' of a type (line 1163)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 43), self_620716, 'colcov', tuple_var_assignment_618606_620715)
        
        # Assigning a Call to a Attribute (line 1165):
        
        # Assigning a Call to a Attribute (line 1165):
        
        # Call to _PSD(...): (line 1165)
        # Processing the call arguments (line 1165)
        # Getting the type of 'self' (line 1165)
        self_620718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 27), 'self', False)
        # Obtaining the member 'rowcov' of a type (line 1165)
        rowcov_620719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 27), self_620718, 'rowcov')
        # Processing the call keyword arguments (line 1165)
        # Getting the type of 'False' (line 1165)
        False_620720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 55), 'False', False)
        keyword_620721 = False_620720
        kwargs_620722 = {'allow_singular': keyword_620721}
        # Getting the type of '_PSD' (line 1165)
        _PSD_620717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 22), '_PSD', False)
        # Calling _PSD(args, kwargs) (line 1165)
        _PSD_call_result_620723 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 22), _PSD_620717, *[rowcov_620719], **kwargs_620722)
        
        # Getting the type of 'self' (line 1165)
        self_620724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 8), 'self')
        # Setting the type of the member 'rowpsd' of a type (line 1165)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 8), self_620724, 'rowpsd', _PSD_call_result_620723)
        
        # Assigning a Call to a Attribute (line 1166):
        
        # Assigning a Call to a Attribute (line 1166):
        
        # Call to _PSD(...): (line 1166)
        # Processing the call arguments (line 1166)
        # Getting the type of 'self' (line 1166)
        self_620726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 27), 'self', False)
        # Obtaining the member 'colcov' of a type (line 1166)
        colcov_620727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 27), self_620726, 'colcov')
        # Processing the call keyword arguments (line 1166)
        # Getting the type of 'False' (line 1166)
        False_620728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 55), 'False', False)
        keyword_620729 = False_620728
        kwargs_620730 = {'allow_singular': keyword_620729}
        # Getting the type of '_PSD' (line 1166)
        _PSD_620725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 22), '_PSD', False)
        # Calling _PSD(args, kwargs) (line 1166)
        _PSD_call_result_620731 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 22), _PSD_620725, *[colcov_620727], **kwargs_620730)
        
        # Getting the type of 'self' (line 1166)
        self_620732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 8), 'self')
        # Setting the type of the member 'colpsd' of a type (line 1166)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 8), self_620732, 'colpsd', _PSD_call_result_620731)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'logpdf'
        module_type_store = module_type_store.open_function_context('logpdf', 1168, 4, False)
        # Assigning a type to the variable 'self' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        matrix_normal_frozen.logpdf.__dict__.__setitem__('stypy_localization', localization)
        matrix_normal_frozen.logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        matrix_normal_frozen.logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        matrix_normal_frozen.logpdf.__dict__.__setitem__('stypy_function_name', 'matrix_normal_frozen.logpdf')
        matrix_normal_frozen.logpdf.__dict__.__setitem__('stypy_param_names_list', ['X'])
        matrix_normal_frozen.logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        matrix_normal_frozen.logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        matrix_normal_frozen.logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        matrix_normal_frozen.logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        matrix_normal_frozen.logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        matrix_normal_frozen.logpdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_frozen.logpdf', ['X'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpdf', localization, ['X'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpdf(...)' code ##################

        
        # Assigning a Call to a Name (line 1169):
        
        # Assigning a Call to a Name (line 1169):
        
        # Call to _process_quantiles(...): (line 1169)
        # Processing the call arguments (line 1169)
        # Getting the type of 'X' (line 1169)
        X_620736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 42), 'X', False)
        # Getting the type of 'self' (line 1169)
        self_620737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 45), 'self', False)
        # Obtaining the member 'dims' of a type (line 1169)
        dims_620738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 45), self_620737, 'dims')
        # Processing the call keyword arguments (line 1169)
        kwargs_620739 = {}
        # Getting the type of 'self' (line 1169)
        self_620733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 12), 'self', False)
        # Obtaining the member '_dist' of a type (line 1169)
        _dist_620734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 12), self_620733, '_dist')
        # Obtaining the member '_process_quantiles' of a type (line 1169)
        _process_quantiles_620735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 12), _dist_620734, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 1169)
        _process_quantiles_call_result_620740 = invoke(stypy.reporting.localization.Localization(__file__, 1169, 12), _process_quantiles_620735, *[X_620736, dims_620738], **kwargs_620739)
        
        # Assigning a type to the variable 'X' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 8), 'X', _process_quantiles_call_result_620740)
        
        # Assigning a Call to a Name (line 1170):
        
        # Assigning a Call to a Name (line 1170):
        
        # Call to _logpdf(...): (line 1170)
        # Processing the call arguments (line 1170)
        # Getting the type of 'self' (line 1170)
        self_620744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 33), 'self', False)
        # Obtaining the member 'dims' of a type (line 1170)
        dims_620745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 33), self_620744, 'dims')
        # Getting the type of 'X' (line 1170)
        X_620746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 44), 'X', False)
        # Getting the type of 'self' (line 1170)
        self_620747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 47), 'self', False)
        # Obtaining the member 'mean' of a type (line 1170)
        mean_620748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 47), self_620747, 'mean')
        # Getting the type of 'self' (line 1170)
        self_620749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 58), 'self', False)
        # Obtaining the member 'rowpsd' of a type (line 1170)
        rowpsd_620750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 58), self_620749, 'rowpsd')
        # Obtaining the member 'U' of a type (line 1170)
        U_620751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 58), rowpsd_620750, 'U')
        # Getting the type of 'self' (line 1171)
        self_620752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 33), 'self', False)
        # Obtaining the member 'rowpsd' of a type (line 1171)
        rowpsd_620753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 33), self_620752, 'rowpsd')
        # Obtaining the member 'log_pdet' of a type (line 1171)
        log_pdet_620754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 33), rowpsd_620753, 'log_pdet')
        # Getting the type of 'self' (line 1171)
        self_620755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 55), 'self', False)
        # Obtaining the member 'colpsd' of a type (line 1171)
        colpsd_620756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 55), self_620755, 'colpsd')
        # Obtaining the member 'U' of a type (line 1171)
        U_620757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 55), colpsd_620756, 'U')
        # Getting the type of 'self' (line 1172)
        self_620758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 33), 'self', False)
        # Obtaining the member 'colpsd' of a type (line 1172)
        colpsd_620759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 33), self_620758, 'colpsd')
        # Obtaining the member 'log_pdet' of a type (line 1172)
        log_pdet_620760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 33), colpsd_620759, 'log_pdet')
        # Processing the call keyword arguments (line 1170)
        kwargs_620761 = {}
        # Getting the type of 'self' (line 1170)
        self_620741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 1170)
        _dist_620742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 14), self_620741, '_dist')
        # Obtaining the member '_logpdf' of a type (line 1170)
        _logpdf_620743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 14), _dist_620742, '_logpdf')
        # Calling _logpdf(args, kwargs) (line 1170)
        _logpdf_call_result_620762 = invoke(stypy.reporting.localization.Localization(__file__, 1170, 14), _logpdf_620743, *[dims_620745, X_620746, mean_620748, U_620751, log_pdet_620754, U_620757, log_pdet_620760], **kwargs_620761)
        
        # Assigning a type to the variable 'out' (line 1170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1170, 8), 'out', _logpdf_call_result_620762)
        
        # Call to _squeeze_output(...): (line 1173)
        # Processing the call arguments (line 1173)
        # Getting the type of 'out' (line 1173)
        out_620764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 31), 'out', False)
        # Processing the call keyword arguments (line 1173)
        kwargs_620765 = {}
        # Getting the type of '_squeeze_output' (line 1173)
        _squeeze_output_620763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 1173)
        _squeeze_output_call_result_620766 = invoke(stypy.reporting.localization.Localization(__file__, 1173, 15), _squeeze_output_620763, *[out_620764], **kwargs_620765)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1173, 8), 'stypy_return_type', _squeeze_output_call_result_620766)
        
        # ################# End of 'logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1168)
        stypy_return_type_620767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_620767)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpdf'
        return stypy_return_type_620767


    @norecursion
    def pdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pdf'
        module_type_store = module_type_store.open_function_context('pdf', 1175, 4, False)
        # Assigning a type to the variable 'self' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        matrix_normal_frozen.pdf.__dict__.__setitem__('stypy_localization', localization)
        matrix_normal_frozen.pdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        matrix_normal_frozen.pdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        matrix_normal_frozen.pdf.__dict__.__setitem__('stypy_function_name', 'matrix_normal_frozen.pdf')
        matrix_normal_frozen.pdf.__dict__.__setitem__('stypy_param_names_list', ['X'])
        matrix_normal_frozen.pdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        matrix_normal_frozen.pdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        matrix_normal_frozen.pdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        matrix_normal_frozen.pdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        matrix_normal_frozen.pdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        matrix_normal_frozen.pdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_frozen.pdf', ['X'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pdf', localization, ['X'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pdf(...)' code ##################

        
        # Call to exp(...): (line 1176)
        # Processing the call arguments (line 1176)
        
        # Call to logpdf(...): (line 1176)
        # Processing the call arguments (line 1176)
        # Getting the type of 'X' (line 1176)
        X_620772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 34), 'X', False)
        # Processing the call keyword arguments (line 1176)
        kwargs_620773 = {}
        # Getting the type of 'self' (line 1176)
        self_620770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 22), 'self', False)
        # Obtaining the member 'logpdf' of a type (line 1176)
        logpdf_620771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 22), self_620770, 'logpdf')
        # Calling logpdf(args, kwargs) (line 1176)
        logpdf_call_result_620774 = invoke(stypy.reporting.localization.Localization(__file__, 1176, 22), logpdf_620771, *[X_620772], **kwargs_620773)
        
        # Processing the call keyword arguments (line 1176)
        kwargs_620775 = {}
        # Getting the type of 'np' (line 1176)
        np_620768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 15), 'np', False)
        # Obtaining the member 'exp' of a type (line 1176)
        exp_620769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 15), np_620768, 'exp')
        # Calling exp(args, kwargs) (line 1176)
        exp_call_result_620776 = invoke(stypy.reporting.localization.Localization(__file__, 1176, 15), exp_620769, *[logpdf_call_result_620774], **kwargs_620775)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'stypy_return_type', exp_call_result_620776)
        
        # ################# End of 'pdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1175)
        stypy_return_type_620777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_620777)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pdf'
        return stypy_return_type_620777


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_620778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1178, 23), 'int')
        # Getting the type of 'None' (line 1178)
        None_620779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 39), 'None')
        defaults = [int_620778, None_620779]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 1178, 4, False)
        # Assigning a type to the variable 'self' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        matrix_normal_frozen.rvs.__dict__.__setitem__('stypy_localization', localization)
        matrix_normal_frozen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        matrix_normal_frozen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        matrix_normal_frozen.rvs.__dict__.__setitem__('stypy_function_name', 'matrix_normal_frozen.rvs')
        matrix_normal_frozen.rvs.__dict__.__setitem__('stypy_param_names_list', ['size', 'random_state'])
        matrix_normal_frozen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        matrix_normal_frozen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        matrix_normal_frozen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        matrix_normal_frozen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        matrix_normal_frozen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        matrix_normal_frozen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'matrix_normal_frozen.rvs', ['size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        
        # Call to rvs(...): (line 1179)
        # Processing the call arguments (line 1179)
        # Getting the type of 'self' (line 1179)
        self_620783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 30), 'self', False)
        # Obtaining the member 'mean' of a type (line 1179)
        mean_620784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 30), self_620783, 'mean')
        # Getting the type of 'self' (line 1179)
        self_620785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 41), 'self', False)
        # Obtaining the member 'rowcov' of a type (line 1179)
        rowcov_620786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 41), self_620785, 'rowcov')
        # Getting the type of 'self' (line 1179)
        self_620787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 54), 'self', False)
        # Obtaining the member 'colcov' of a type (line 1179)
        colcov_620788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 54), self_620787, 'colcov')
        # Getting the type of 'size' (line 1179)
        size_620789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 67), 'size', False)
        # Getting the type of 'random_state' (line 1180)
        random_state_620790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 30), 'random_state', False)
        # Processing the call keyword arguments (line 1179)
        kwargs_620791 = {}
        # Getting the type of 'self' (line 1179)
        self_620780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 1179)
        _dist_620781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 15), self_620780, '_dist')
        # Obtaining the member 'rvs' of a type (line 1179)
        rvs_620782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 15), _dist_620781, 'rvs')
        # Calling rvs(args, kwargs) (line 1179)
        rvs_call_result_620792 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 15), rvs_620782, *[mean_620784, rowcov_620786, colcov_620788, size_620789, random_state_620790], **kwargs_620791)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 8), 'stypy_return_type', rvs_call_result_620792)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 1178)
        stypy_return_type_620793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_620793)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_620793


# Assigning a type to the variable 'matrix_normal_frozen' (line 1135)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 0), 'matrix_normal_frozen', matrix_normal_frozen)


# Obtaining an instance of the builtin type 'list' (line 1185)
list_620794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1185, 12), 'list')
# Adding type elements to the builtin type 'list' instance (line 1185)
# Adding element type (line 1185)
str_620795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1185, 13), 'str', 'logpdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1185, 12), list_620794, str_620795)
# Adding element type (line 1185)
str_620796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1185, 23), 'str', 'pdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1185, 12), list_620794, str_620796)
# Adding element type (line 1185)
str_620797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1185, 30), 'str', 'rvs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1185, 12), list_620794, str_620797)

# Testing the type of a for loop iterable (line 1185)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1185, 0), list_620794)
# Getting the type of the for loop variable (line 1185)
for_loop_var_620798 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1185, 0), list_620794)
# Assigning a type to the variable 'name' (line 1185)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 0), 'name', for_loop_var_620798)
# SSA begins for a for statement (line 1185)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')

# Assigning a Subscript to a Name (line 1186):

# Assigning a Subscript to a Name (line 1186):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 1186)
name_620799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 40), 'name')
# Getting the type of 'matrix_normal_gen' (line 1186)
matrix_normal_gen_620800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 13), 'matrix_normal_gen')
# Obtaining the member '__dict__' of a type (line 1186)
dict___620801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 13), matrix_normal_gen_620800, '__dict__')
# Obtaining the member '__getitem__' of a type (line 1186)
getitem___620802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 13), dict___620801, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1186)
subscript_call_result_620803 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 13), getitem___620802, name_620799)

# Assigning a type to the variable 'method' (line 1186)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 4), 'method', subscript_call_result_620803)

# Assigning a Subscript to a Name (line 1187):

# Assigning a Subscript to a Name (line 1187):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 1187)
name_620804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 50), 'name')
# Getting the type of 'matrix_normal_frozen' (line 1187)
matrix_normal_frozen_620805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 20), 'matrix_normal_frozen')
# Obtaining the member '__dict__' of a type (line 1187)
dict___620806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 20), matrix_normal_frozen_620805, '__dict__')
# Obtaining the member '__getitem__' of a type (line 1187)
getitem___620807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 20), dict___620806, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1187)
subscript_call_result_620808 = invoke(stypy.reporting.localization.Localization(__file__, 1187, 20), getitem___620807, name_620804)

# Assigning a type to the variable 'method_frozen' (line 1187)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 4), 'method_frozen', subscript_call_result_620808)

# Assigning a Call to a Attribute (line 1188):

# Assigning a Call to a Attribute (line 1188):

# Call to docformat(...): (line 1188)
# Processing the call arguments (line 1188)
# Getting the type of 'method' (line 1188)
method_620811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 45), 'method', False)
# Obtaining the member '__doc__' of a type (line 1188)
doc___620812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 45), method_620811, '__doc__')
# Getting the type of 'matnorm_docdict_noparams' (line 1188)
matnorm_docdict_noparams_620813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 61), 'matnorm_docdict_noparams', False)
# Processing the call keyword arguments (line 1188)
kwargs_620814 = {}
# Getting the type of 'doccer' (line 1188)
doccer_620809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 28), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 1188)
docformat_620810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 28), doccer_620809, 'docformat')
# Calling docformat(args, kwargs) (line 1188)
docformat_call_result_620815 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 28), docformat_620810, *[doc___620812, matnorm_docdict_noparams_620813], **kwargs_620814)

# Getting the type of 'method_frozen' (line 1188)
method_frozen_620816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 4), 'method_frozen')
# Setting the type of the member '__doc__' of a type (line 1188)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 4), method_frozen_620816, '__doc__', docformat_call_result_620815)

# Assigning a Call to a Attribute (line 1189):

# Assigning a Call to a Attribute (line 1189):

# Call to docformat(...): (line 1189)
# Processing the call arguments (line 1189)
# Getting the type of 'method' (line 1189)
method_620819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 38), 'method', False)
# Obtaining the member '__doc__' of a type (line 1189)
doc___620820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 38), method_620819, '__doc__')
# Getting the type of 'matnorm_docdict_params' (line 1189)
matnorm_docdict_params_620821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 54), 'matnorm_docdict_params', False)
# Processing the call keyword arguments (line 1189)
kwargs_620822 = {}
# Getting the type of 'doccer' (line 1189)
doccer_620817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 21), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 1189)
docformat_620818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 21), doccer_620817, 'docformat')
# Calling docformat(args, kwargs) (line 1189)
docformat_call_result_620823 = invoke(stypy.reporting.localization.Localization(__file__, 1189, 21), docformat_620818, *[doc___620820, matnorm_docdict_params_620821], **kwargs_620822)

# Getting the type of 'method' (line 1189)
method_620824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 4), 'method')
# Setting the type of the member '__doc__' of a type (line 1189)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 4), method_620824, '__doc__', docformat_call_result_620823)
# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()


# Assigning a Str to a Name (line 1191):

# Assigning a Str to a Name (line 1191):
str_620825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, (-1)), 'str', 'alpha : array_like\n    The concentration parameters. The number of entries determines the\n    dimensionality of the distribution.\n')
# Assigning a type to the variable '_dirichlet_doc_default_callparams' (line 1191)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 0), '_dirichlet_doc_default_callparams', str_620825)

# Assigning a Str to a Name (line 1196):

# Assigning a Str to a Name (line 1196):
str_620826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 35), 'str', '')
# Assigning a type to the variable '_dirichlet_doc_frozen_callparams' (line 1196)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 0), '_dirichlet_doc_frozen_callparams', str_620826)

# Assigning a Str to a Name (line 1198):

# Assigning a Str to a Name (line 1198):
str_620827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 4), 'str', 'See class definition for a detailed description of parameters.')
# Assigning a type to the variable '_dirichlet_doc_frozen_callparams_note' (line 1198)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1198, 0), '_dirichlet_doc_frozen_callparams_note', str_620827)

# Assigning a Dict to a Name (line 1201):

# Assigning a Dict to a Name (line 1201):

# Obtaining an instance of the builtin type 'dict' (line 1201)
dict_620828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 27), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1201)
# Adding element type (key, value) (line 1201)
str_620829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 4), 'str', '_dirichlet_doc_default_callparams')
# Getting the type of '_dirichlet_doc_default_callparams' (line 1202)
_dirichlet_doc_default_callparams_620830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 41), '_dirichlet_doc_default_callparams')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1201, 27), dict_620828, (str_620829, _dirichlet_doc_default_callparams_620830))
# Adding element type (key, value) (line 1201)
str_620831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 4), 'str', '_doc_random_state')
# Getting the type of '_doc_random_state' (line 1203)
_doc_random_state_620832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 25), '_doc_random_state')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1201, 27), dict_620828, (str_620831, _doc_random_state_620832))

# Assigning a type to the variable 'dirichlet_docdict_params' (line 1201)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 0), 'dirichlet_docdict_params', dict_620828)

# Assigning a Dict to a Name (line 1206):

# Assigning a Dict to a Name (line 1206):

# Obtaining an instance of the builtin type 'dict' (line 1206)
dict_620833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 29), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1206)
# Adding element type (key, value) (line 1206)
str_620834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1207, 4), 'str', '_dirichlet_doc_default_callparams')
# Getting the type of '_dirichlet_doc_frozen_callparams' (line 1207)
_dirichlet_doc_frozen_callparams_620835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 41), '_dirichlet_doc_frozen_callparams')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1206, 29), dict_620833, (str_620834, _dirichlet_doc_frozen_callparams_620835))
# Adding element type (key, value) (line 1206)
str_620836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1208, 4), 'str', '_doc_random_state')
# Getting the type of '_doc_random_state' (line 1208)
_doc_random_state_620837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 25), '_doc_random_state')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1206, 29), dict_620833, (str_620836, _doc_random_state_620837))

# Assigning a type to the variable 'dirichlet_docdict_noparams' (line 1206)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 0), 'dirichlet_docdict_noparams', dict_620833)

@norecursion
def _dirichlet_check_parameters(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_dirichlet_check_parameters'
    module_type_store = module_type_store.open_function_context('_dirichlet_check_parameters', 1211, 0, False)
    
    # Passed parameters checking function
    _dirichlet_check_parameters.stypy_localization = localization
    _dirichlet_check_parameters.stypy_type_of_self = None
    _dirichlet_check_parameters.stypy_type_store = module_type_store
    _dirichlet_check_parameters.stypy_function_name = '_dirichlet_check_parameters'
    _dirichlet_check_parameters.stypy_param_names_list = ['alpha']
    _dirichlet_check_parameters.stypy_varargs_param_name = None
    _dirichlet_check_parameters.stypy_kwargs_param_name = None
    _dirichlet_check_parameters.stypy_call_defaults = defaults
    _dirichlet_check_parameters.stypy_call_varargs = varargs
    _dirichlet_check_parameters.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_dirichlet_check_parameters', ['alpha'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_dirichlet_check_parameters', localization, ['alpha'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_dirichlet_check_parameters(...)' code ##################

    
    # Assigning a Call to a Name (line 1212):
    
    # Assigning a Call to a Name (line 1212):
    
    # Call to asarray(...): (line 1212)
    # Processing the call arguments (line 1212)
    # Getting the type of 'alpha' (line 1212)
    alpha_620840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 23), 'alpha', False)
    # Processing the call keyword arguments (line 1212)
    kwargs_620841 = {}
    # Getting the type of 'np' (line 1212)
    np_620838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1212)
    asarray_620839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1212, 12), np_620838, 'asarray')
    # Calling asarray(args, kwargs) (line 1212)
    asarray_call_result_620842 = invoke(stypy.reporting.localization.Localization(__file__, 1212, 12), asarray_620839, *[alpha_620840], **kwargs_620841)
    
    # Assigning a type to the variable 'alpha' (line 1212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 4), 'alpha', asarray_call_result_620842)
    
    
    
    # Call to min(...): (line 1213)
    # Processing the call arguments (line 1213)
    # Getting the type of 'alpha' (line 1213)
    alpha_620845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 14), 'alpha', False)
    # Processing the call keyword arguments (line 1213)
    kwargs_620846 = {}
    # Getting the type of 'np' (line 1213)
    np_620843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 7), 'np', False)
    # Obtaining the member 'min' of a type (line 1213)
    min_620844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 7), np_620843, 'min')
    # Calling min(args, kwargs) (line 1213)
    min_call_result_620847 = invoke(stypy.reporting.localization.Localization(__file__, 1213, 7), min_620844, *[alpha_620845], **kwargs_620846)
    
    int_620848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1213, 24), 'int')
    # Applying the binary operator '<=' (line 1213)
    result_le_620849 = python_operator(stypy.reporting.localization.Localization(__file__, 1213, 7), '<=', min_call_result_620847, int_620848)
    
    # Testing the type of an if condition (line 1213)
    if_condition_620850 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1213, 4), result_le_620849)
    # Assigning a type to the variable 'if_condition_620850' (line 1213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 4), 'if_condition_620850', if_condition_620850)
    # SSA begins for if statement (line 1213)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1214)
    # Processing the call arguments (line 1214)
    str_620852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 25), 'str', 'All parameters must be greater than 0')
    # Processing the call keyword arguments (line 1214)
    kwargs_620853 = {}
    # Getting the type of 'ValueError' (line 1214)
    ValueError_620851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1214)
    ValueError_call_result_620854 = invoke(stypy.reporting.localization.Localization(__file__, 1214, 14), ValueError_620851, *[str_620852], **kwargs_620853)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1214, 8), ValueError_call_result_620854, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 1213)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'alpha' (line 1215)
    alpha_620855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 9), 'alpha')
    # Obtaining the member 'ndim' of a type (line 1215)
    ndim_620856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 9), alpha_620855, 'ndim')
    int_620857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1215, 23), 'int')
    # Applying the binary operator '!=' (line 1215)
    result_ne_620858 = python_operator(stypy.reporting.localization.Localization(__file__, 1215, 9), '!=', ndim_620856, int_620857)
    
    # Testing the type of an if condition (line 1215)
    if_condition_620859 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1215, 9), result_ne_620858)
    # Assigning a type to the variable 'if_condition_620859' (line 1215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 9), 'if_condition_620859', if_condition_620859)
    # SSA begins for if statement (line 1215)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1216)
    # Processing the call arguments (line 1216)
    str_620861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 25), 'str', "Parameter vector 'a' must be one dimensional, but a.shape = %s.")
    
    # Obtaining an instance of the builtin type 'tuple' (line 1217)
    tuple_620862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1217, 46), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1217)
    # Adding element type (line 1217)
    # Getting the type of 'alpha' (line 1217)
    alpha_620863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 46), 'alpha', False)
    # Obtaining the member 'shape' of a type (line 1217)
    shape_620864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 46), alpha_620863, 'shape')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1217, 46), tuple_620862, shape_620864)
    
    # Applying the binary operator '%' (line 1216)
    result_mod_620865 = python_operator(stypy.reporting.localization.Localization(__file__, 1216, 25), '%', str_620861, tuple_620862)
    
    # Processing the call keyword arguments (line 1216)
    kwargs_620866 = {}
    # Getting the type of 'ValueError' (line 1216)
    ValueError_620860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1216)
    ValueError_call_result_620867 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 14), ValueError_620860, *[result_mod_620865], **kwargs_620866)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1216, 8), ValueError_call_result_620867, 'raise parameter', BaseException)
    # SSA join for if statement (line 1215)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1213)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'alpha' (line 1218)
    alpha_620868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 11), 'alpha')
    # Assigning a type to the variable 'stypy_return_type' (line 1218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 4), 'stypy_return_type', alpha_620868)
    
    # ################# End of '_dirichlet_check_parameters(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_dirichlet_check_parameters' in the type store
    # Getting the type of 'stypy_return_type' (line 1211)
    stypy_return_type_620869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_620869)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_dirichlet_check_parameters'
    return stypy_return_type_620869

# Assigning a type to the variable '_dirichlet_check_parameters' (line 1211)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 0), '_dirichlet_check_parameters', _dirichlet_check_parameters)

@norecursion
def _dirichlet_check_input(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_dirichlet_check_input'
    module_type_store = module_type_store.open_function_context('_dirichlet_check_input', 1221, 0, False)
    
    # Passed parameters checking function
    _dirichlet_check_input.stypy_localization = localization
    _dirichlet_check_input.stypy_type_of_self = None
    _dirichlet_check_input.stypy_type_store = module_type_store
    _dirichlet_check_input.stypy_function_name = '_dirichlet_check_input'
    _dirichlet_check_input.stypy_param_names_list = ['alpha', 'x']
    _dirichlet_check_input.stypy_varargs_param_name = None
    _dirichlet_check_input.stypy_kwargs_param_name = None
    _dirichlet_check_input.stypy_call_defaults = defaults
    _dirichlet_check_input.stypy_call_varargs = varargs
    _dirichlet_check_input.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_dirichlet_check_input', ['alpha', 'x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_dirichlet_check_input', localization, ['alpha', 'x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_dirichlet_check_input(...)' code ##################

    
    # Assigning a Call to a Name (line 1222):
    
    # Assigning a Call to a Name (line 1222):
    
    # Call to asarray(...): (line 1222)
    # Processing the call arguments (line 1222)
    # Getting the type of 'x' (line 1222)
    x_620872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 19), 'x', False)
    # Processing the call keyword arguments (line 1222)
    kwargs_620873 = {}
    # Getting the type of 'np' (line 1222)
    np_620870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1222)
    asarray_620871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 8), np_620870, 'asarray')
    # Calling asarray(args, kwargs) (line 1222)
    asarray_call_result_620874 = invoke(stypy.reporting.localization.Localization(__file__, 1222, 8), asarray_620871, *[x_620872], **kwargs_620873)
    
    # Assigning a type to the variable 'x' (line 1222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 4), 'x', asarray_call_result_620874)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_620875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 15), 'int')
    # Getting the type of 'x' (line 1224)
    x_620876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 7), 'x')
    # Obtaining the member 'shape' of a type (line 1224)
    shape_620877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 7), x_620876, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1224)
    getitem___620878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 7), shape_620877, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1224)
    subscript_call_result_620879 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 7), getitem___620878, int_620875)
    
    int_620880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 20), 'int')
    # Applying the binary operator '+' (line 1224)
    result_add_620881 = python_operator(stypy.reporting.localization.Localization(__file__, 1224, 7), '+', subscript_call_result_620879, int_620880)
    
    
    # Obtaining the type of the subscript
    int_620882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 37), 'int')
    # Getting the type of 'alpha' (line 1224)
    alpha_620883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 25), 'alpha')
    # Obtaining the member 'shape' of a type (line 1224)
    shape_620884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 25), alpha_620883, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1224)
    getitem___620885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 25), shape_620884, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1224)
    subscript_call_result_620886 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 25), getitem___620885, int_620882)
    
    # Applying the binary operator '!=' (line 1224)
    result_ne_620887 = python_operator(stypy.reporting.localization.Localization(__file__, 1224, 7), '!=', result_add_620881, subscript_call_result_620886)
    
    
    
    # Obtaining the type of the subscript
    int_620888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 52), 'int')
    # Getting the type of 'x' (line 1224)
    x_620889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 44), 'x')
    # Obtaining the member 'shape' of a type (line 1224)
    shape_620890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 44), x_620889, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1224)
    getitem___620891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 44), shape_620890, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1224)
    subscript_call_result_620892 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 44), getitem___620891, int_620888)
    
    
    # Obtaining the type of the subscript
    int_620893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 70), 'int')
    # Getting the type of 'alpha' (line 1224)
    alpha_620894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 58), 'alpha')
    # Obtaining the member 'shape' of a type (line 1224)
    shape_620895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 58), alpha_620894, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1224)
    getitem___620896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 58), shape_620895, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1224)
    subscript_call_result_620897 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 58), getitem___620896, int_620893)
    
    # Applying the binary operator '!=' (line 1224)
    result_ne_620898 = python_operator(stypy.reporting.localization.Localization(__file__, 1224, 44), '!=', subscript_call_result_620892, subscript_call_result_620897)
    
    # Applying the binary operator 'and' (line 1224)
    result_and_keyword_620899 = python_operator(stypy.reporting.localization.Localization(__file__, 1224, 7), 'and', result_ne_620887, result_ne_620898)
    
    # Testing the type of an if condition (line 1224)
    if_condition_620900 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1224, 4), result_and_keyword_620899)
    # Assigning a type to the variable 'if_condition_620900' (line 1224)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1224, 4), 'if_condition_620900', if_condition_620900)
    # SSA begins for if statement (line 1224)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1225)
    # Processing the call arguments (line 1225)
    str_620902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 25), 'str', "Vector 'x' must have either the same number of entries as, or one entry fewer than, parameter vector 'a', but alpha.shape = %s and x.shape = %s.")
    
    # Obtaining an instance of the builtin type 'tuple' (line 1228)
    tuple_620903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1228)
    # Adding element type (line 1228)
    # Getting the type of 'alpha' (line 1228)
    alpha_620904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 48), 'alpha', False)
    # Obtaining the member 'shape' of a type (line 1228)
    shape_620905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 48), alpha_620904, 'shape')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1228, 48), tuple_620903, shape_620905)
    # Adding element type (line 1228)
    # Getting the type of 'x' (line 1228)
    x_620906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 61), 'x', False)
    # Obtaining the member 'shape' of a type (line 1228)
    shape_620907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 61), x_620906, 'shape')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1228, 48), tuple_620903, shape_620907)
    
    # Applying the binary operator '%' (line 1225)
    result_mod_620908 = python_operator(stypy.reporting.localization.Localization(__file__, 1225, 25), '%', str_620902, tuple_620903)
    
    # Processing the call keyword arguments (line 1225)
    kwargs_620909 = {}
    # Getting the type of 'ValueError' (line 1225)
    ValueError_620901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1225)
    ValueError_call_result_620910 = invoke(stypy.reporting.localization.Localization(__file__, 1225, 14), ValueError_620901, *[result_mod_620908], **kwargs_620909)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1225, 8), ValueError_call_result_620910, 'raise parameter', BaseException)
    # SSA join for if statement (line 1224)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_620911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 15), 'int')
    # Getting the type of 'x' (line 1230)
    x_620912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 7), 'x')
    # Obtaining the member 'shape' of a type (line 1230)
    shape_620913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 7), x_620912, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1230)
    getitem___620914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 7), shape_620913, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1230)
    subscript_call_result_620915 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 7), getitem___620914, int_620911)
    
    
    # Obtaining the type of the subscript
    int_620916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 33), 'int')
    # Getting the type of 'alpha' (line 1230)
    alpha_620917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 21), 'alpha')
    # Obtaining the member 'shape' of a type (line 1230)
    shape_620918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 21), alpha_620917, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1230)
    getitem___620919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 21), shape_620918, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1230)
    subscript_call_result_620920 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 21), getitem___620919, int_620916)
    
    # Applying the binary operator '!=' (line 1230)
    result_ne_620921 = python_operator(stypy.reporting.localization.Localization(__file__, 1230, 7), '!=', subscript_call_result_620915, subscript_call_result_620920)
    
    # Testing the type of an if condition (line 1230)
    if_condition_620922 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1230, 4), result_ne_620921)
    # Assigning a type to the variable 'if_condition_620922' (line 1230)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1230, 4), 'if_condition_620922', if_condition_620922)
    # SSA begins for if statement (line 1230)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1231):
    
    # Assigning a Call to a Name (line 1231):
    
    # Call to array(...): (line 1231)
    # Processing the call arguments (line 1231)
    
    # Obtaining an instance of the builtin type 'list' (line 1231)
    list_620925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1231)
    # Adding element type (line 1231)
    int_620926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 23), 'int')
    
    # Call to sum(...): (line 1231)
    # Processing the call arguments (line 1231)
    # Getting the type of 'x' (line 1231)
    x_620929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 34), 'x', False)
    int_620930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 37), 'int')
    # Processing the call keyword arguments (line 1231)
    kwargs_620931 = {}
    # Getting the type of 'np' (line 1231)
    np_620927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 27), 'np', False)
    # Obtaining the member 'sum' of a type (line 1231)
    sum_620928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 27), np_620927, 'sum')
    # Calling sum(args, kwargs) (line 1231)
    sum_call_result_620932 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 27), sum_620928, *[x_620929, int_620930], **kwargs_620931)
    
    # Applying the binary operator '-' (line 1231)
    result_sub_620933 = python_operator(stypy.reporting.localization.Localization(__file__, 1231, 23), '-', int_620926, sum_call_result_620932)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1231, 22), list_620925, result_sub_620933)
    
    # Processing the call keyword arguments (line 1231)
    kwargs_620934 = {}
    # Getting the type of 'np' (line 1231)
    np_620923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 13), 'np', False)
    # Obtaining the member 'array' of a type (line 1231)
    array_620924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 13), np_620923, 'array')
    # Calling array(args, kwargs) (line 1231)
    array_call_result_620935 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 13), array_620924, *[list_620925], **kwargs_620934)
    
    # Assigning a type to the variable 'xk' (line 1231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 8), 'xk', array_call_result_620935)
    
    
    # Getting the type of 'xk' (line 1232)
    xk_620936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 11), 'xk')
    # Obtaining the member 'ndim' of a type (line 1232)
    ndim_620937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 11), xk_620936, 'ndim')
    int_620938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 22), 'int')
    # Applying the binary operator '==' (line 1232)
    result_eq_620939 = python_operator(stypy.reporting.localization.Localization(__file__, 1232, 11), '==', ndim_620937, int_620938)
    
    # Testing the type of an if condition (line 1232)
    if_condition_620940 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1232, 8), result_eq_620939)
    # Assigning a type to the variable 'if_condition_620940' (line 1232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'if_condition_620940', if_condition_620940)
    # SSA begins for if statement (line 1232)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1233):
    
    # Assigning a Call to a Name (line 1233):
    
    # Call to append(...): (line 1233)
    # Processing the call arguments (line 1233)
    # Getting the type of 'x' (line 1233)
    x_620943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 26), 'x', False)
    # Getting the type of 'xk' (line 1233)
    xk_620944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 29), 'xk', False)
    # Processing the call keyword arguments (line 1233)
    kwargs_620945 = {}
    # Getting the type of 'np' (line 1233)
    np_620941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 16), 'np', False)
    # Obtaining the member 'append' of a type (line 1233)
    append_620942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 16), np_620941, 'append')
    # Calling append(args, kwargs) (line 1233)
    append_call_result_620946 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 16), append_620942, *[x_620943, xk_620944], **kwargs_620945)
    
    # Assigning a type to the variable 'x' (line 1233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 12), 'x', append_call_result_620946)
    # SSA branch for the else part of an if statement (line 1232)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'xk' (line 1234)
    xk_620947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 13), 'xk')
    # Obtaining the member 'ndim' of a type (line 1234)
    ndim_620948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 13), xk_620947, 'ndim')
    int_620949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 24), 'int')
    # Applying the binary operator '==' (line 1234)
    result_eq_620950 = python_operator(stypy.reporting.localization.Localization(__file__, 1234, 13), '==', ndim_620948, int_620949)
    
    # Testing the type of an if condition (line 1234)
    if_condition_620951 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1234, 13), result_eq_620950)
    # Assigning a type to the variable 'if_condition_620951' (line 1234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 13), 'if_condition_620951', if_condition_620951)
    # SSA begins for if statement (line 1234)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1235):
    
    # Assigning a Call to a Name (line 1235):
    
    # Call to vstack(...): (line 1235)
    # Processing the call arguments (line 1235)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1235)
    tuple_620954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1235)
    # Adding element type (line 1235)
    # Getting the type of 'x' (line 1235)
    x_620955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 27), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1235, 27), tuple_620954, x_620955)
    # Adding element type (line 1235)
    # Getting the type of 'xk' (line 1235)
    xk_620956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 30), 'xk', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1235, 27), tuple_620954, xk_620956)
    
    # Processing the call keyword arguments (line 1235)
    kwargs_620957 = {}
    # Getting the type of 'np' (line 1235)
    np_620952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 16), 'np', False)
    # Obtaining the member 'vstack' of a type (line 1235)
    vstack_620953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 16), np_620952, 'vstack')
    # Calling vstack(args, kwargs) (line 1235)
    vstack_call_result_620958 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 16), vstack_620953, *[tuple_620954], **kwargs_620957)
    
    # Assigning a type to the variable 'x' (line 1235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 12), 'x', vstack_call_result_620958)
    # SSA branch for the else part of an if statement (line 1234)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1237)
    # Processing the call arguments (line 1237)
    str_620960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 29), 'str', 'The input must be one dimensional or a two dimensional matrix containing the entries.')
    # Processing the call keyword arguments (line 1237)
    kwargs_620961 = {}
    # Getting the type of 'ValueError' (line 1237)
    ValueError_620959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1237)
    ValueError_call_result_620962 = invoke(stypy.reporting.localization.Localization(__file__, 1237, 18), ValueError_620959, *[str_620960], **kwargs_620961)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1237, 12), ValueError_call_result_620962, 'raise parameter', BaseException)
    # SSA join for if statement (line 1234)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1232)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1230)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to min(...): (line 1240)
    # Processing the call arguments (line 1240)
    # Getting the type of 'x' (line 1240)
    x_620965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 14), 'x', False)
    # Processing the call keyword arguments (line 1240)
    kwargs_620966 = {}
    # Getting the type of 'np' (line 1240)
    np_620963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 7), 'np', False)
    # Obtaining the member 'min' of a type (line 1240)
    min_620964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 7), np_620963, 'min')
    # Calling min(args, kwargs) (line 1240)
    min_call_result_620967 = invoke(stypy.reporting.localization.Localization(__file__, 1240, 7), min_620964, *[x_620965], **kwargs_620966)
    
    int_620968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 20), 'int')
    # Applying the binary operator '<=' (line 1240)
    result_le_620969 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 7), '<=', min_call_result_620967, int_620968)
    
    # Testing the type of an if condition (line 1240)
    if_condition_620970 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1240, 4), result_le_620969)
    # Assigning a type to the variable 'if_condition_620970' (line 1240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 4), 'if_condition_620970', if_condition_620970)
    # SSA begins for if statement (line 1240)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1241)
    # Processing the call arguments (line 1241)
    str_620972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 25), 'str', "Each entry in 'x' must be greater than zero.")
    # Processing the call keyword arguments (line 1241)
    kwargs_620973 = {}
    # Getting the type of 'ValueError' (line 1241)
    ValueError_620971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1241)
    ValueError_call_result_620974 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 14), ValueError_620971, *[str_620972], **kwargs_620973)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1241, 8), ValueError_call_result_620974, 'raise parameter', BaseException)
    # SSA join for if statement (line 1240)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to max(...): (line 1243)
    # Processing the call arguments (line 1243)
    # Getting the type of 'x' (line 1243)
    x_620977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 14), 'x', False)
    # Processing the call keyword arguments (line 1243)
    kwargs_620978 = {}
    # Getting the type of 'np' (line 1243)
    np_620975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 7), 'np', False)
    # Obtaining the member 'max' of a type (line 1243)
    max_620976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 7), np_620975, 'max')
    # Calling max(args, kwargs) (line 1243)
    max_call_result_620979 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 7), max_620976, *[x_620977], **kwargs_620978)
    
    int_620980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 19), 'int')
    # Applying the binary operator '>' (line 1243)
    result_gt_620981 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 7), '>', max_call_result_620979, int_620980)
    
    # Testing the type of an if condition (line 1243)
    if_condition_620982 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1243, 4), result_gt_620981)
    # Assigning a type to the variable 'if_condition_620982' (line 1243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 4), 'if_condition_620982', if_condition_620982)
    # SSA begins for if statement (line 1243)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1244)
    # Processing the call arguments (line 1244)
    str_620984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 25), 'str', "Each entry in 'x' must be smaller or equal one.")
    # Processing the call keyword arguments (line 1244)
    kwargs_620985 = {}
    # Getting the type of 'ValueError' (line 1244)
    ValueError_620983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1244)
    ValueError_call_result_620986 = invoke(stypy.reporting.localization.Localization(__file__, 1244, 14), ValueError_620983, *[str_620984], **kwargs_620985)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1244, 8), ValueError_call_result_620986, 'raise parameter', BaseException)
    # SSA join for if statement (line 1243)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 1246)
    # Processing the call keyword arguments (line 1246)
    kwargs_621002 = {}
    
    
    # Call to abs(...): (line 1246)
    # Processing the call arguments (line 1246)
    
    # Call to sum(...): (line 1246)
    # Processing the call arguments (line 1246)
    # Getting the type of 'x' (line 1246)
    x_620991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 22), 'x', False)
    int_620992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 25), 'int')
    # Processing the call keyword arguments (line 1246)
    kwargs_620993 = {}
    # Getting the type of 'np' (line 1246)
    np_620989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 15), 'np', False)
    # Obtaining the member 'sum' of a type (line 1246)
    sum_620990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 15), np_620989, 'sum')
    # Calling sum(args, kwargs) (line 1246)
    sum_call_result_620994 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 15), sum_620990, *[x_620991, int_620992], **kwargs_620993)
    
    float_620995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 30), 'float')
    # Applying the binary operator '-' (line 1246)
    result_sub_620996 = python_operator(stypy.reporting.localization.Localization(__file__, 1246, 15), '-', sum_call_result_620994, float_620995)
    
    # Processing the call keyword arguments (line 1246)
    kwargs_620997 = {}
    # Getting the type of 'np' (line 1246)
    np_620987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 8), 'np', False)
    # Obtaining the member 'abs' of a type (line 1246)
    abs_620988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 8), np_620987, 'abs')
    # Calling abs(args, kwargs) (line 1246)
    abs_call_result_620998 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 8), abs_620988, *[result_sub_620996], **kwargs_620997)
    
    float_620999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 37), 'float')
    # Applying the binary operator '>' (line 1246)
    result_gt_621000 = python_operator(stypy.reporting.localization.Localization(__file__, 1246, 8), '>', abs_call_result_620998, float_620999)
    
    # Obtaining the member 'any' of a type (line 1246)
    any_621001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 8), result_gt_621000, 'any')
    # Calling any(args, kwargs) (line 1246)
    any_call_result_621003 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 8), any_621001, *[], **kwargs_621002)
    
    # Testing the type of an if condition (line 1246)
    if_condition_621004 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1246, 4), any_call_result_621003)
    # Assigning a type to the variable 'if_condition_621004' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'if_condition_621004', if_condition_621004)
    # SSA begins for if statement (line 1246)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1247)
    # Processing the call arguments (line 1247)
    str_621006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 25), 'str', "The input vector 'x' must lie within the normal simplex. but np.sum(x, 0) = %s.")
    
    # Call to sum(...): (line 1248)
    # Processing the call arguments (line 1248)
    # Getting the type of 'x' (line 1248)
    x_621009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 66), 'x', False)
    int_621010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1248, 69), 'int')
    # Processing the call keyword arguments (line 1248)
    kwargs_621011 = {}
    # Getting the type of 'np' (line 1248)
    np_621007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 59), 'np', False)
    # Obtaining the member 'sum' of a type (line 1248)
    sum_621008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 59), np_621007, 'sum')
    # Calling sum(args, kwargs) (line 1248)
    sum_call_result_621012 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 59), sum_621008, *[x_621009, int_621010], **kwargs_621011)
    
    # Applying the binary operator '%' (line 1247)
    result_mod_621013 = python_operator(stypy.reporting.localization.Localization(__file__, 1247, 25), '%', str_621006, sum_call_result_621012)
    
    # Processing the call keyword arguments (line 1247)
    kwargs_621014 = {}
    # Getting the type of 'ValueError' (line 1247)
    ValueError_621005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1247)
    ValueError_call_result_621015 = invoke(stypy.reporting.localization.Localization(__file__, 1247, 14), ValueError_621005, *[result_mod_621013], **kwargs_621014)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1247, 8), ValueError_call_result_621015, 'raise parameter', BaseException)
    # SSA join for if statement (line 1246)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'x' (line 1250)
    x_621016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 11), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 1250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 4), 'stypy_return_type', x_621016)
    
    # ################# End of '_dirichlet_check_input(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_dirichlet_check_input' in the type store
    # Getting the type of 'stypy_return_type' (line 1221)
    stypy_return_type_621017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_621017)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_dirichlet_check_input'
    return stypy_return_type_621017

# Assigning a type to the variable '_dirichlet_check_input' (line 1221)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 0), '_dirichlet_check_input', _dirichlet_check_input)

@norecursion
def _lnB(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_lnB'
    module_type_store = module_type_store.open_function_context('_lnB', 1253, 0, False)
    
    # Passed parameters checking function
    _lnB.stypy_localization = localization
    _lnB.stypy_type_of_self = None
    _lnB.stypy_type_store = module_type_store
    _lnB.stypy_function_name = '_lnB'
    _lnB.stypy_param_names_list = ['alpha']
    _lnB.stypy_varargs_param_name = None
    _lnB.stypy_kwargs_param_name = None
    _lnB.stypy_call_defaults = defaults
    _lnB.stypy_call_varargs = varargs
    _lnB.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_lnB', ['alpha'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_lnB', localization, ['alpha'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_lnB(...)' code ##################

    str_621018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, (-1)), 'str', '\n    Internal helper function to compute the log of the useful quotient\n\n    .. math::\n\n        B(\\alpha) = \\frac{\\prod_{i=1}{K}\\Gamma(\\alpha_i)}{\\Gamma\\left(\\sum_{i=1}^{K}\\alpha_i\\right)}\n\n    Parameters\n    ----------\n    %(_dirichlet_doc_default_callparams)s\n\n    Returns\n    -------\n    B : scalar\n        Helper quotient, internal use only\n\n    ')
    
    # Call to sum(...): (line 1271)
    # Processing the call arguments (line 1271)
    
    # Call to gammaln(...): (line 1271)
    # Processing the call arguments (line 1271)
    # Getting the type of 'alpha' (line 1271)
    alpha_621022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 26), 'alpha', False)
    # Processing the call keyword arguments (line 1271)
    kwargs_621023 = {}
    # Getting the type of 'gammaln' (line 1271)
    gammaln_621021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 18), 'gammaln', False)
    # Calling gammaln(args, kwargs) (line 1271)
    gammaln_call_result_621024 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 18), gammaln_621021, *[alpha_621022], **kwargs_621023)
    
    # Processing the call keyword arguments (line 1271)
    kwargs_621025 = {}
    # Getting the type of 'np' (line 1271)
    np_621019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 11), 'np', False)
    # Obtaining the member 'sum' of a type (line 1271)
    sum_621020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 11), np_621019, 'sum')
    # Calling sum(args, kwargs) (line 1271)
    sum_call_result_621026 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 11), sum_621020, *[gammaln_call_result_621024], **kwargs_621025)
    
    
    # Call to gammaln(...): (line 1271)
    # Processing the call arguments (line 1271)
    
    # Call to sum(...): (line 1271)
    # Processing the call arguments (line 1271)
    # Getting the type of 'alpha' (line 1271)
    alpha_621030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 51), 'alpha', False)
    # Processing the call keyword arguments (line 1271)
    kwargs_621031 = {}
    # Getting the type of 'np' (line 1271)
    np_621028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 44), 'np', False)
    # Obtaining the member 'sum' of a type (line 1271)
    sum_621029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 44), np_621028, 'sum')
    # Calling sum(args, kwargs) (line 1271)
    sum_call_result_621032 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 44), sum_621029, *[alpha_621030], **kwargs_621031)
    
    # Processing the call keyword arguments (line 1271)
    kwargs_621033 = {}
    # Getting the type of 'gammaln' (line 1271)
    gammaln_621027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 36), 'gammaln', False)
    # Calling gammaln(args, kwargs) (line 1271)
    gammaln_call_result_621034 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 36), gammaln_621027, *[sum_call_result_621032], **kwargs_621033)
    
    # Applying the binary operator '-' (line 1271)
    result_sub_621035 = python_operator(stypy.reporting.localization.Localization(__file__, 1271, 11), '-', sum_call_result_621026, gammaln_call_result_621034)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1271)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 4), 'stypy_return_type', result_sub_621035)
    
    # ################# End of '_lnB(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_lnB' in the type store
    # Getting the type of 'stypy_return_type' (line 1253)
    stypy_return_type_621036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_621036)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_lnB'
    return stypy_return_type_621036

# Assigning a type to the variable '_lnB' (line 1253)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 0), '_lnB', _lnB)
# Declaration of the 'dirichlet_gen' class
# Getting the type of 'multi_rv_generic' (line 1274)
multi_rv_generic_621037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 20), 'multi_rv_generic')

class dirichlet_gen(multi_rv_generic_621037, ):
    str_621038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, (-1)), 'str', '\n    A Dirichlet random variable.\n\n    The `alpha` keyword specifies the concentration parameters of the\n    distribution.\n\n    .. versionadded:: 0.15.0\n\n    Methods\n    -------\n    ``pdf(x, alpha)``\n        Probability density function.\n    ``logpdf(x, alpha)``\n        Log of the probability density function.\n    ``rvs(alpha, size=1, random_state=None)``\n        Draw random samples from a Dirichlet distribution.\n    ``mean(alpha)``\n        The mean of the Dirichlet distribution\n    ``var(alpha)``\n        The variance of the Dirichlet distribution\n    ``entropy(alpha)``\n        Compute the differential entropy of the Dirichlet distribution.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    %(_dirichlet_doc_default_callparams)s\n    %(_doc_random_state)s\n\n    Alternatively, the object may be called (as a function) to fix\n    concentration parameters, returning a "frozen" Dirichlet\n    random variable:\n\n    rv = dirichlet(alpha)\n        - Frozen object with the same methods but holding the given\n          concentration parameters fixed.\n\n    Notes\n    -----\n    Each :math:`\\alpha` entry must be positive. The distribution has only\n    support on the simplex defined by\n\n    .. math::\n        \\sum_{i=1}^{K} x_i \\le 1\n\n\n    The probability density function for `dirichlet` is\n\n    .. math::\n\n        f(x) = \\frac{1}{\\mathrm{B}(\\boldsymbol\\alpha)} \\prod_{i=1}^K x_i^{\\alpha_i - 1}\n\n    where\n\n    .. math::\n\n        \\mathrm{B}(\\boldsymbol\\alpha) = \\frac{\\prod_{i=1}^K \\Gamma(\\alpha_i)}\n                                     {\\Gamma\\bigl(\\sum_{i=1}^K \\alpha_i\\bigr)}\n\n    and :math:`\\boldsymbol\\alpha=(\\alpha_1,\\ldots,\\alpha_K)`, the\n    concentration parameters and :math:`K` is the dimension of the space\n    where :math:`x` takes values.\n\n    Note that the dirichlet interface is somewhat inconsistent.\n    The array returned by the rvs function is transposed\n    with respect to the format expected by the pdf and logpdf.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1345)
        None_621039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 28), 'None')
        defaults = [None_621039]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1345, 4, False)
        # Assigning a type to the variable 'self' (line 1346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_gen.__init__', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1346)
        # Processing the call arguments (line 1346)
        # Getting the type of 'seed' (line 1346)
        seed_621046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 44), 'seed', False)
        # Processing the call keyword arguments (line 1346)
        kwargs_621047 = {}
        
        # Call to super(...): (line 1346)
        # Processing the call arguments (line 1346)
        # Getting the type of 'dirichlet_gen' (line 1346)
        dirichlet_gen_621041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 14), 'dirichlet_gen', False)
        # Getting the type of 'self' (line 1346)
        self_621042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 29), 'self', False)
        # Processing the call keyword arguments (line 1346)
        kwargs_621043 = {}
        # Getting the type of 'super' (line 1346)
        super_621040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 8), 'super', False)
        # Calling super(args, kwargs) (line 1346)
        super_call_result_621044 = invoke(stypy.reporting.localization.Localization(__file__, 1346, 8), super_621040, *[dirichlet_gen_621041, self_621042], **kwargs_621043)
        
        # Obtaining the member '__init__' of a type (line 1346)
        init___621045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 8), super_call_result_621044, '__init__')
        # Calling __init__(args, kwargs) (line 1346)
        init___call_result_621048 = invoke(stypy.reporting.localization.Localization(__file__, 1346, 8), init___621045, *[seed_621046], **kwargs_621047)
        
        
        # Assigning a Call to a Attribute (line 1347):
        
        # Assigning a Call to a Attribute (line 1347):
        
        # Call to docformat(...): (line 1347)
        # Processing the call arguments (line 1347)
        # Getting the type of 'self' (line 1347)
        self_621051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 40), 'self', False)
        # Obtaining the member '__doc__' of a type (line 1347)
        doc___621052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 40), self_621051, '__doc__')
        # Getting the type of 'dirichlet_docdict_params' (line 1347)
        dirichlet_docdict_params_621053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 54), 'dirichlet_docdict_params', False)
        # Processing the call keyword arguments (line 1347)
        kwargs_621054 = {}
        # Getting the type of 'doccer' (line 1347)
        doccer_621049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 23), 'doccer', False)
        # Obtaining the member 'docformat' of a type (line 1347)
        docformat_621050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 23), doccer_621049, 'docformat')
        # Calling docformat(args, kwargs) (line 1347)
        docformat_call_result_621055 = invoke(stypy.reporting.localization.Localization(__file__, 1347, 23), docformat_621050, *[doc___621052, dirichlet_docdict_params_621053], **kwargs_621054)
        
        # Getting the type of 'self' (line 1347)
        self_621056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 1347)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 8), self_621056, '__doc__', docformat_call_result_621055)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1349)
        None_621057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 35), 'None')
        defaults = [None_621057]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1349, 4, False)
        # Assigning a type to the variable 'self' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_gen.__call__.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_gen.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_gen.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_gen.__call__.__dict__.__setitem__('stypy_function_name', 'dirichlet_gen.__call__')
        dirichlet_gen.__call__.__dict__.__setitem__('stypy_param_names_list', ['alpha', 'seed'])
        dirichlet_gen.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_gen.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_gen.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_gen.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_gen.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_gen.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_gen.__call__', ['alpha', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['alpha', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Call to dirichlet_frozen(...): (line 1350)
        # Processing the call arguments (line 1350)
        # Getting the type of 'alpha' (line 1350)
        alpha_621059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 32), 'alpha', False)
        # Processing the call keyword arguments (line 1350)
        # Getting the type of 'seed' (line 1350)
        seed_621060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 44), 'seed', False)
        keyword_621061 = seed_621060
        kwargs_621062 = {'seed': keyword_621061}
        # Getting the type of 'dirichlet_frozen' (line 1350)
        dirichlet_frozen_621058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 15), 'dirichlet_frozen', False)
        # Calling dirichlet_frozen(args, kwargs) (line 1350)
        dirichlet_frozen_call_result_621063 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 15), dirichlet_frozen_621058, *[alpha_621059], **kwargs_621062)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 8), 'stypy_return_type', dirichlet_frozen_call_result_621063)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1349)
        stypy_return_type_621064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621064)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_621064


    @norecursion
    def _logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_logpdf'
        module_type_store = module_type_store.open_function_context('_logpdf', 1352, 4, False)
        # Assigning a type to the variable 'self' (line 1353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_gen._logpdf.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_gen._logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_gen._logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_gen._logpdf.__dict__.__setitem__('stypy_function_name', 'dirichlet_gen._logpdf')
        dirichlet_gen._logpdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'alpha'])
        dirichlet_gen._logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_gen._logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_gen._logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_gen._logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_gen._logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_gen._logpdf.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_gen._logpdf', ['x', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_logpdf', localization, ['x', 'alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_logpdf(...)' code ##################

        str_621065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1366, (-1)), 'str', "\n        Parameters\n        ----------\n        x : ndarray\n            Points at which to evaluate the log of the probability\n            density function\n        %(_dirichlet_doc_default_callparams)s\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'logpdf' instead.\n\n        ")
        
        # Assigning a Call to a Name (line 1367):
        
        # Assigning a Call to a Name (line 1367):
        
        # Call to _lnB(...): (line 1367)
        # Processing the call arguments (line 1367)
        # Getting the type of 'alpha' (line 1367)
        alpha_621067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 19), 'alpha', False)
        # Processing the call keyword arguments (line 1367)
        kwargs_621068 = {}
        # Getting the type of '_lnB' (line 1367)
        _lnB_621066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 14), '_lnB', False)
        # Calling _lnB(args, kwargs) (line 1367)
        _lnB_call_result_621069 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 14), _lnB_621066, *[alpha_621067], **kwargs_621068)
        
        # Assigning a type to the variable 'lnB' (line 1367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 8), 'lnB', _lnB_call_result_621069)
        
        # Getting the type of 'lnB' (line 1368)
        lnB_621070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 17), 'lnB')
        # Applying the 'usub' unary operator (line 1368)
        result___neg___621071 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 15), 'usub', lnB_621070)
        
        
        # Call to sum(...): (line 1368)
        # Processing the call arguments (line 1368)
        
        # Call to log(...): (line 1368)
        # Processing the call arguments (line 1368)
        # Getting the type of 'x' (line 1368)
        x_621076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 38), 'x', False)
        # Obtaining the member 'T' of a type (line 1368)
        T_621077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 38), x_621076, 'T')
        # Processing the call keyword arguments (line 1368)
        kwargs_621078 = {}
        # Getting the type of 'np' (line 1368)
        np_621074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 31), 'np', False)
        # Obtaining the member 'log' of a type (line 1368)
        log_621075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 31), np_621074, 'log')
        # Calling log(args, kwargs) (line 1368)
        log_call_result_621079 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 31), log_621075, *[T_621077], **kwargs_621078)
        
        # Getting the type of 'alpha' (line 1368)
        alpha_621080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 46), 'alpha', False)
        int_621081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 54), 'int')
        # Applying the binary operator '-' (line 1368)
        result_sub_621082 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 46), '-', alpha_621080, int_621081)
        
        # Applying the binary operator '*' (line 1368)
        result_mul_621083 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 31), '*', log_call_result_621079, result_sub_621082)
        
        # Obtaining the member 'T' of a type (line 1368)
        T_621084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 31), result_mul_621083, 'T')
        int_621085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 61), 'int')
        # Processing the call keyword arguments (line 1368)
        kwargs_621086 = {}
        # Getting the type of 'np' (line 1368)
        np_621072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 23), 'np', False)
        # Obtaining the member 'sum' of a type (line 1368)
        sum_621073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 23), np_621072, 'sum')
        # Calling sum(args, kwargs) (line 1368)
        sum_call_result_621087 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 23), sum_621073, *[T_621084, int_621085], **kwargs_621086)
        
        # Applying the binary operator '+' (line 1368)
        result_add_621088 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 15), '+', result___neg___621071, sum_call_result_621087)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 8), 'stypy_return_type', result_add_621088)
        
        # ################# End of '_logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1352)
        stypy_return_type_621089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621089)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_logpdf'
        return stypy_return_type_621089


    @norecursion
    def logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'logpdf'
        module_type_store = module_type_store.open_function_context('logpdf', 1370, 4, False)
        # Assigning a type to the variable 'self' (line 1371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_gen.logpdf.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_gen.logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_gen.logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_gen.logpdf.__dict__.__setitem__('stypy_function_name', 'dirichlet_gen.logpdf')
        dirichlet_gen.logpdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'alpha'])
        dirichlet_gen.logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_gen.logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_gen.logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_gen.logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_gen.logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_gen.logpdf.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_gen.logpdf', ['x', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpdf', localization, ['x', 'alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpdf(...)' code ##################

        str_621090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, (-1)), 'str', '\n        Log of the Dirichlet probability density function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n        %(_dirichlet_doc_default_callparams)s\n\n        Returns\n        -------\n        pdf : ndarray or scalar\n            Log of the probability density function evaluated at `x`.\n\n        ')
        
        # Assigning a Call to a Name (line 1386):
        
        # Assigning a Call to a Name (line 1386):
        
        # Call to _dirichlet_check_parameters(...): (line 1386)
        # Processing the call arguments (line 1386)
        # Getting the type of 'alpha' (line 1386)
        alpha_621092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 44), 'alpha', False)
        # Processing the call keyword arguments (line 1386)
        kwargs_621093 = {}
        # Getting the type of '_dirichlet_check_parameters' (line 1386)
        _dirichlet_check_parameters_621091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 16), '_dirichlet_check_parameters', False)
        # Calling _dirichlet_check_parameters(args, kwargs) (line 1386)
        _dirichlet_check_parameters_call_result_621094 = invoke(stypy.reporting.localization.Localization(__file__, 1386, 16), _dirichlet_check_parameters_621091, *[alpha_621092], **kwargs_621093)
        
        # Assigning a type to the variable 'alpha' (line 1386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 8), 'alpha', _dirichlet_check_parameters_call_result_621094)
        
        # Assigning a Call to a Name (line 1387):
        
        # Assigning a Call to a Name (line 1387):
        
        # Call to _dirichlet_check_input(...): (line 1387)
        # Processing the call arguments (line 1387)
        # Getting the type of 'alpha' (line 1387)
        alpha_621096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 35), 'alpha', False)
        # Getting the type of 'x' (line 1387)
        x_621097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 42), 'x', False)
        # Processing the call keyword arguments (line 1387)
        kwargs_621098 = {}
        # Getting the type of '_dirichlet_check_input' (line 1387)
        _dirichlet_check_input_621095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 12), '_dirichlet_check_input', False)
        # Calling _dirichlet_check_input(args, kwargs) (line 1387)
        _dirichlet_check_input_call_result_621099 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 12), _dirichlet_check_input_621095, *[alpha_621096, x_621097], **kwargs_621098)
        
        # Assigning a type to the variable 'x' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), 'x', _dirichlet_check_input_call_result_621099)
        
        # Assigning a Call to a Name (line 1389):
        
        # Assigning a Call to a Name (line 1389):
        
        # Call to _logpdf(...): (line 1389)
        # Processing the call arguments (line 1389)
        # Getting the type of 'x' (line 1389)
        x_621102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 27), 'x', False)
        # Getting the type of 'alpha' (line 1389)
        alpha_621103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 30), 'alpha', False)
        # Processing the call keyword arguments (line 1389)
        kwargs_621104 = {}
        # Getting the type of 'self' (line 1389)
        self_621100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 14), 'self', False)
        # Obtaining the member '_logpdf' of a type (line 1389)
        _logpdf_621101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 14), self_621100, '_logpdf')
        # Calling _logpdf(args, kwargs) (line 1389)
        _logpdf_call_result_621105 = invoke(stypy.reporting.localization.Localization(__file__, 1389, 14), _logpdf_621101, *[x_621102, alpha_621103], **kwargs_621104)
        
        # Assigning a type to the variable 'out' (line 1389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 8), 'out', _logpdf_call_result_621105)
        
        # Call to _squeeze_output(...): (line 1390)
        # Processing the call arguments (line 1390)
        # Getting the type of 'out' (line 1390)
        out_621107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 31), 'out', False)
        # Processing the call keyword arguments (line 1390)
        kwargs_621108 = {}
        # Getting the type of '_squeeze_output' (line 1390)
        _squeeze_output_621106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 1390)
        _squeeze_output_call_result_621109 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 15), _squeeze_output_621106, *[out_621107], **kwargs_621108)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 8), 'stypy_return_type', _squeeze_output_call_result_621109)
        
        # ################# End of 'logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1370)
        stypy_return_type_621110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621110)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpdf'
        return stypy_return_type_621110


    @norecursion
    def pdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pdf'
        module_type_store = module_type_store.open_function_context('pdf', 1392, 4, False)
        # Assigning a type to the variable 'self' (line 1393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_gen.pdf.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_gen.pdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_gen.pdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_gen.pdf.__dict__.__setitem__('stypy_function_name', 'dirichlet_gen.pdf')
        dirichlet_gen.pdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'alpha'])
        dirichlet_gen.pdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_gen.pdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_gen.pdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_gen.pdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_gen.pdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_gen.pdf.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_gen.pdf', ['x', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pdf', localization, ['x', 'alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pdf(...)' code ##################

        str_621111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, (-1)), 'str', '\n        The Dirichlet probability density function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n        %(_dirichlet_doc_default_callparams)s\n\n        Returns\n        -------\n        pdf : ndarray or scalar\n            The probability density function evaluated at `x`.\n\n        ')
        
        # Assigning a Call to a Name (line 1408):
        
        # Assigning a Call to a Name (line 1408):
        
        # Call to _dirichlet_check_parameters(...): (line 1408)
        # Processing the call arguments (line 1408)
        # Getting the type of 'alpha' (line 1408)
        alpha_621113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 44), 'alpha', False)
        # Processing the call keyword arguments (line 1408)
        kwargs_621114 = {}
        # Getting the type of '_dirichlet_check_parameters' (line 1408)
        _dirichlet_check_parameters_621112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 16), '_dirichlet_check_parameters', False)
        # Calling _dirichlet_check_parameters(args, kwargs) (line 1408)
        _dirichlet_check_parameters_call_result_621115 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 16), _dirichlet_check_parameters_621112, *[alpha_621113], **kwargs_621114)
        
        # Assigning a type to the variable 'alpha' (line 1408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 8), 'alpha', _dirichlet_check_parameters_call_result_621115)
        
        # Assigning a Call to a Name (line 1409):
        
        # Assigning a Call to a Name (line 1409):
        
        # Call to _dirichlet_check_input(...): (line 1409)
        # Processing the call arguments (line 1409)
        # Getting the type of 'alpha' (line 1409)
        alpha_621117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 35), 'alpha', False)
        # Getting the type of 'x' (line 1409)
        x_621118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 42), 'x', False)
        # Processing the call keyword arguments (line 1409)
        kwargs_621119 = {}
        # Getting the type of '_dirichlet_check_input' (line 1409)
        _dirichlet_check_input_621116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 12), '_dirichlet_check_input', False)
        # Calling _dirichlet_check_input(args, kwargs) (line 1409)
        _dirichlet_check_input_call_result_621120 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 12), _dirichlet_check_input_621116, *[alpha_621117, x_621118], **kwargs_621119)
        
        # Assigning a type to the variable 'x' (line 1409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 8), 'x', _dirichlet_check_input_call_result_621120)
        
        # Assigning a Call to a Name (line 1411):
        
        # Assigning a Call to a Name (line 1411):
        
        # Call to exp(...): (line 1411)
        # Processing the call arguments (line 1411)
        
        # Call to _logpdf(...): (line 1411)
        # Processing the call arguments (line 1411)
        # Getting the type of 'x' (line 1411)
        x_621125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 34), 'x', False)
        # Getting the type of 'alpha' (line 1411)
        alpha_621126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 37), 'alpha', False)
        # Processing the call keyword arguments (line 1411)
        kwargs_621127 = {}
        # Getting the type of 'self' (line 1411)
        self_621123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 21), 'self', False)
        # Obtaining the member '_logpdf' of a type (line 1411)
        _logpdf_621124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 21), self_621123, '_logpdf')
        # Calling _logpdf(args, kwargs) (line 1411)
        _logpdf_call_result_621128 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 21), _logpdf_621124, *[x_621125, alpha_621126], **kwargs_621127)
        
        # Processing the call keyword arguments (line 1411)
        kwargs_621129 = {}
        # Getting the type of 'np' (line 1411)
        np_621121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 14), 'np', False)
        # Obtaining the member 'exp' of a type (line 1411)
        exp_621122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 14), np_621121, 'exp')
        # Calling exp(args, kwargs) (line 1411)
        exp_call_result_621130 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 14), exp_621122, *[_logpdf_call_result_621128], **kwargs_621129)
        
        # Assigning a type to the variable 'out' (line 1411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 8), 'out', exp_call_result_621130)
        
        # Call to _squeeze_output(...): (line 1412)
        # Processing the call arguments (line 1412)
        # Getting the type of 'out' (line 1412)
        out_621132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 31), 'out', False)
        # Processing the call keyword arguments (line 1412)
        kwargs_621133 = {}
        # Getting the type of '_squeeze_output' (line 1412)
        _squeeze_output_621131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 1412)
        _squeeze_output_call_result_621134 = invoke(stypy.reporting.localization.Localization(__file__, 1412, 15), _squeeze_output_621131, *[out_621132], **kwargs_621133)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 8), 'stypy_return_type', _squeeze_output_call_result_621134)
        
        # ################# End of 'pdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1392)
        stypy_return_type_621135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621135)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pdf'
        return stypy_return_type_621135


    @norecursion
    def mean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mean'
        module_type_store = module_type_store.open_function_context('mean', 1414, 4, False)
        # Assigning a type to the variable 'self' (line 1415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_gen.mean.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_gen.mean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_gen.mean.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_gen.mean.__dict__.__setitem__('stypy_function_name', 'dirichlet_gen.mean')
        dirichlet_gen.mean.__dict__.__setitem__('stypy_param_names_list', ['alpha'])
        dirichlet_gen.mean.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_gen.mean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_gen.mean.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_gen.mean.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_gen.mean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_gen.mean.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_gen.mean', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mean', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mean(...)' code ##################

        str_621136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1427, (-1)), 'str', '\n        Compute the mean of the dirichlet distribution.\n\n        Parameters\n        ----------\n        %(_dirichlet_doc_default_callparams)s\n\n        Returns\n        -------\n        mu : ndarray or scalar\n            Mean of the Dirichlet distribution.\n\n        ')
        
        # Assigning a Call to a Name (line 1428):
        
        # Assigning a Call to a Name (line 1428):
        
        # Call to _dirichlet_check_parameters(...): (line 1428)
        # Processing the call arguments (line 1428)
        # Getting the type of 'alpha' (line 1428)
        alpha_621138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 44), 'alpha', False)
        # Processing the call keyword arguments (line 1428)
        kwargs_621139 = {}
        # Getting the type of '_dirichlet_check_parameters' (line 1428)
        _dirichlet_check_parameters_621137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 16), '_dirichlet_check_parameters', False)
        # Calling _dirichlet_check_parameters(args, kwargs) (line 1428)
        _dirichlet_check_parameters_call_result_621140 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 16), _dirichlet_check_parameters_621137, *[alpha_621138], **kwargs_621139)
        
        # Assigning a type to the variable 'alpha' (line 1428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 8), 'alpha', _dirichlet_check_parameters_call_result_621140)
        
        # Assigning a BinOp to a Name (line 1430):
        
        # Assigning a BinOp to a Name (line 1430):
        # Getting the type of 'alpha' (line 1430)
        alpha_621141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 14), 'alpha')
        
        # Call to sum(...): (line 1430)
        # Processing the call arguments (line 1430)
        # Getting the type of 'alpha' (line 1430)
        alpha_621144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 30), 'alpha', False)
        # Processing the call keyword arguments (line 1430)
        kwargs_621145 = {}
        # Getting the type of 'np' (line 1430)
        np_621142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 23), 'np', False)
        # Obtaining the member 'sum' of a type (line 1430)
        sum_621143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1430, 23), np_621142, 'sum')
        # Calling sum(args, kwargs) (line 1430)
        sum_call_result_621146 = invoke(stypy.reporting.localization.Localization(__file__, 1430, 23), sum_621143, *[alpha_621144], **kwargs_621145)
        
        # Applying the binary operator 'div' (line 1430)
        result_div_621147 = python_operator(stypy.reporting.localization.Localization(__file__, 1430, 14), 'div', alpha_621141, sum_call_result_621146)
        
        # Assigning a type to the variable 'out' (line 1430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1430, 8), 'out', result_div_621147)
        
        # Call to _squeeze_output(...): (line 1431)
        # Processing the call arguments (line 1431)
        # Getting the type of 'out' (line 1431)
        out_621149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 31), 'out', False)
        # Processing the call keyword arguments (line 1431)
        kwargs_621150 = {}
        # Getting the type of '_squeeze_output' (line 1431)
        _squeeze_output_621148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 1431)
        _squeeze_output_call_result_621151 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 15), _squeeze_output_621148, *[out_621149], **kwargs_621150)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 8), 'stypy_return_type', _squeeze_output_call_result_621151)
        
        # ################# End of 'mean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mean' in the type store
        # Getting the type of 'stypy_return_type' (line 1414)
        stypy_return_type_621152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621152)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mean'
        return stypy_return_type_621152


    @norecursion
    def var(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'var'
        module_type_store = module_type_store.open_function_context('var', 1433, 4, False)
        # Assigning a type to the variable 'self' (line 1434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_gen.var.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_gen.var.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_gen.var.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_gen.var.__dict__.__setitem__('stypy_function_name', 'dirichlet_gen.var')
        dirichlet_gen.var.__dict__.__setitem__('stypy_param_names_list', ['alpha'])
        dirichlet_gen.var.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_gen.var.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_gen.var.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_gen.var.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_gen.var.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_gen.var.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_gen.var', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'var', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'var(...)' code ##################

        str_621153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, (-1)), 'str', '\n        Compute the variance of the dirichlet distribution.\n\n        Parameters\n        ----------\n        %(_dirichlet_doc_default_callparams)s\n\n        Returns\n        -------\n        v : ndarray or scalar\n            Variance of the Dirichlet distribution.\n\n        ')
        
        # Assigning a Call to a Name (line 1448):
        
        # Assigning a Call to a Name (line 1448):
        
        # Call to _dirichlet_check_parameters(...): (line 1448)
        # Processing the call arguments (line 1448)
        # Getting the type of 'alpha' (line 1448)
        alpha_621155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 44), 'alpha', False)
        # Processing the call keyword arguments (line 1448)
        kwargs_621156 = {}
        # Getting the type of '_dirichlet_check_parameters' (line 1448)
        _dirichlet_check_parameters_621154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 16), '_dirichlet_check_parameters', False)
        # Calling _dirichlet_check_parameters(args, kwargs) (line 1448)
        _dirichlet_check_parameters_call_result_621157 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 16), _dirichlet_check_parameters_621154, *[alpha_621155], **kwargs_621156)
        
        # Assigning a type to the variable 'alpha' (line 1448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 8), 'alpha', _dirichlet_check_parameters_call_result_621157)
        
        # Assigning a Call to a Name (line 1450):
        
        # Assigning a Call to a Name (line 1450):
        
        # Call to sum(...): (line 1450)
        # Processing the call arguments (line 1450)
        # Getting the type of 'alpha' (line 1450)
        alpha_621160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 24), 'alpha', False)
        # Processing the call keyword arguments (line 1450)
        kwargs_621161 = {}
        # Getting the type of 'np' (line 1450)
        np_621158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 17), 'np', False)
        # Obtaining the member 'sum' of a type (line 1450)
        sum_621159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 17), np_621158, 'sum')
        # Calling sum(args, kwargs) (line 1450)
        sum_call_result_621162 = invoke(stypy.reporting.localization.Localization(__file__, 1450, 17), sum_621159, *[alpha_621160], **kwargs_621161)
        
        # Assigning a type to the variable 'alpha0' (line 1450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 8), 'alpha0', sum_call_result_621162)
        
        # Assigning a BinOp to a Name (line 1451):
        
        # Assigning a BinOp to a Name (line 1451):
        # Getting the type of 'alpha' (line 1451)
        alpha_621163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 15), 'alpha')
        # Getting the type of 'alpha0' (line 1451)
        alpha0_621164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 24), 'alpha0')
        # Getting the type of 'alpha' (line 1451)
        alpha_621165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 33), 'alpha')
        # Applying the binary operator '-' (line 1451)
        result_sub_621166 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 24), '-', alpha0_621164, alpha_621165)
        
        # Applying the binary operator '*' (line 1451)
        result_mul_621167 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 15), '*', alpha_621163, result_sub_621166)
        
        # Getting the type of 'alpha0' (line 1451)
        alpha0_621168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 45), 'alpha0')
        # Getting the type of 'alpha0' (line 1451)
        alpha0_621169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 54), 'alpha0')
        # Applying the binary operator '*' (line 1451)
        result_mul_621170 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 45), '*', alpha0_621168, alpha0_621169)
        
        # Getting the type of 'alpha0' (line 1451)
        alpha0_621171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 65), 'alpha0')
        int_621172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 74), 'int')
        # Applying the binary operator '+' (line 1451)
        result_add_621173 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 65), '+', alpha0_621171, int_621172)
        
        # Applying the binary operator '*' (line 1451)
        result_mul_621174 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 44), '*', result_mul_621170, result_add_621173)
        
        # Applying the binary operator 'div' (line 1451)
        result_div_621175 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 14), 'div', result_mul_621167, result_mul_621174)
        
        # Assigning a type to the variable 'out' (line 1451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1451, 8), 'out', result_div_621175)
        
        # Call to _squeeze_output(...): (line 1452)
        # Processing the call arguments (line 1452)
        # Getting the type of 'out' (line 1452)
        out_621177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 31), 'out', False)
        # Processing the call keyword arguments (line 1452)
        kwargs_621178 = {}
        # Getting the type of '_squeeze_output' (line 1452)
        _squeeze_output_621176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 1452)
        _squeeze_output_call_result_621179 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 15), _squeeze_output_621176, *[out_621177], **kwargs_621178)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1452, 8), 'stypy_return_type', _squeeze_output_call_result_621179)
        
        # ################# End of 'var(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'var' in the type store
        # Getting the type of 'stypy_return_type' (line 1433)
        stypy_return_type_621180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621180)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'var'
        return stypy_return_type_621180


    @norecursion
    def entropy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'entropy'
        module_type_store = module_type_store.open_function_context('entropy', 1454, 4, False)
        # Assigning a type to the variable 'self' (line 1455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_gen.entropy.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_gen.entropy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_gen.entropy.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_gen.entropy.__dict__.__setitem__('stypy_function_name', 'dirichlet_gen.entropy')
        dirichlet_gen.entropy.__dict__.__setitem__('stypy_param_names_list', ['alpha'])
        dirichlet_gen.entropy.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_gen.entropy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_gen.entropy.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_gen.entropy.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_gen.entropy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_gen.entropy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_gen.entropy', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'entropy', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'entropy(...)' code ##################

        str_621181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, (-1)), 'str', '\n        Compute the differential entropy of the dirichlet distribution.\n\n        Parameters\n        ----------\n        %(_dirichlet_doc_default_callparams)s\n\n        Returns\n        -------\n        h : scalar\n            Entropy of the Dirichlet distribution\n\n        ')
        
        # Assigning a Call to a Name (line 1469):
        
        # Assigning a Call to a Name (line 1469):
        
        # Call to _dirichlet_check_parameters(...): (line 1469)
        # Processing the call arguments (line 1469)
        # Getting the type of 'alpha' (line 1469)
        alpha_621183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 44), 'alpha', False)
        # Processing the call keyword arguments (line 1469)
        kwargs_621184 = {}
        # Getting the type of '_dirichlet_check_parameters' (line 1469)
        _dirichlet_check_parameters_621182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 16), '_dirichlet_check_parameters', False)
        # Calling _dirichlet_check_parameters(args, kwargs) (line 1469)
        _dirichlet_check_parameters_call_result_621185 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 16), _dirichlet_check_parameters_621182, *[alpha_621183], **kwargs_621184)
        
        # Assigning a type to the variable 'alpha' (line 1469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1469, 8), 'alpha', _dirichlet_check_parameters_call_result_621185)
        
        # Assigning a Call to a Name (line 1471):
        
        # Assigning a Call to a Name (line 1471):
        
        # Call to sum(...): (line 1471)
        # Processing the call arguments (line 1471)
        # Getting the type of 'alpha' (line 1471)
        alpha_621188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 24), 'alpha', False)
        # Processing the call keyword arguments (line 1471)
        kwargs_621189 = {}
        # Getting the type of 'np' (line 1471)
        np_621186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 17), 'np', False)
        # Obtaining the member 'sum' of a type (line 1471)
        sum_621187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 17), np_621186, 'sum')
        # Calling sum(args, kwargs) (line 1471)
        sum_call_result_621190 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 17), sum_621187, *[alpha_621188], **kwargs_621189)
        
        # Assigning a type to the variable 'alpha0' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'alpha0', sum_call_result_621190)
        
        # Assigning a Call to a Name (line 1472):
        
        # Assigning a Call to a Name (line 1472):
        
        # Call to _lnB(...): (line 1472)
        # Processing the call arguments (line 1472)
        # Getting the type of 'alpha' (line 1472)
        alpha_621192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 19), 'alpha', False)
        # Processing the call keyword arguments (line 1472)
        kwargs_621193 = {}
        # Getting the type of '_lnB' (line 1472)
        _lnB_621191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 14), '_lnB', False)
        # Calling _lnB(args, kwargs) (line 1472)
        _lnB_call_result_621194 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 14), _lnB_621191, *[alpha_621192], **kwargs_621193)
        
        # Assigning a type to the variable 'lnB' (line 1472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 8), 'lnB', _lnB_call_result_621194)
        
        # Assigning a Subscript to a Name (line 1473):
        
        # Assigning a Subscript to a Name (line 1473):
        
        # Obtaining the type of the subscript
        int_621195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, 24), 'int')
        # Getting the type of 'alpha' (line 1473)
        alpha_621196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 12), 'alpha')
        # Obtaining the member 'shape' of a type (line 1473)
        shape_621197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 12), alpha_621196, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1473)
        getitem___621198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 12), shape_621197, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1473)
        subscript_call_result_621199 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 12), getitem___621198, int_621195)
        
        # Assigning a type to the variable 'K' (line 1473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 8), 'K', subscript_call_result_621199)
        
        # Assigning a BinOp to a Name (line 1475):
        
        # Assigning a BinOp to a Name (line 1475):
        # Getting the type of 'lnB' (line 1475)
        lnB_621200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 14), 'lnB')
        # Getting the type of 'alpha0' (line 1475)
        alpha0_621201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 21), 'alpha0')
        # Getting the type of 'K' (line 1475)
        K_621202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 30), 'K')
        # Applying the binary operator '-' (line 1475)
        result_sub_621203 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 21), '-', alpha0_621201, K_621202)
        
        
        # Call to psi(...): (line 1475)
        # Processing the call arguments (line 1475)
        # Getting the type of 'alpha0' (line 1475)
        alpha0_621207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 53), 'alpha0', False)
        # Processing the call keyword arguments (line 1475)
        kwargs_621208 = {}
        # Getting the type of 'scipy' (line 1475)
        scipy_621204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 35), 'scipy', False)
        # Obtaining the member 'special' of a type (line 1475)
        special_621205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 35), scipy_621204, 'special')
        # Obtaining the member 'psi' of a type (line 1475)
        psi_621206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 35), special_621205, 'psi')
        # Calling psi(args, kwargs) (line 1475)
        psi_call_result_621209 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 35), psi_621206, *[alpha0_621207], **kwargs_621208)
        
        # Applying the binary operator '*' (line 1475)
        result_mul_621210 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 20), '*', result_sub_621203, psi_call_result_621209)
        
        # Applying the binary operator '+' (line 1475)
        result_add_621211 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 14), '+', lnB_621200, result_mul_621210)
        
        
        # Call to sum(...): (line 1475)
        # Processing the call arguments (line 1475)
        # Getting the type of 'alpha' (line 1476)
        alpha_621214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 13), 'alpha', False)
        int_621215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1476, 21), 'int')
        # Applying the binary operator '-' (line 1476)
        result_sub_621216 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 13), '-', alpha_621214, int_621215)
        
        
        # Call to psi(...): (line 1476)
        # Processing the call arguments (line 1476)
        # Getting the type of 'alpha' (line 1476)
        alpha_621220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 44), 'alpha', False)
        # Processing the call keyword arguments (line 1476)
        kwargs_621221 = {}
        # Getting the type of 'scipy' (line 1476)
        scipy_621217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 26), 'scipy', False)
        # Obtaining the member 'special' of a type (line 1476)
        special_621218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1476, 26), scipy_621217, 'special')
        # Obtaining the member 'psi' of a type (line 1476)
        psi_621219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1476, 26), special_621218, 'psi')
        # Calling psi(args, kwargs) (line 1476)
        psi_call_result_621222 = invoke(stypy.reporting.localization.Localization(__file__, 1476, 26), psi_621219, *[alpha_621220], **kwargs_621221)
        
        # Applying the binary operator '*' (line 1476)
        result_mul_621223 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 12), '*', result_sub_621216, psi_call_result_621222)
        
        # Processing the call keyword arguments (line 1475)
        kwargs_621224 = {}
        # Getting the type of 'np' (line 1475)
        np_621212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 63), 'np', False)
        # Obtaining the member 'sum' of a type (line 1475)
        sum_621213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 63), np_621212, 'sum')
        # Calling sum(args, kwargs) (line 1475)
        sum_call_result_621225 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 63), sum_621213, *[result_mul_621223], **kwargs_621224)
        
        # Applying the binary operator '-' (line 1475)
        result_sub_621226 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 61), '-', result_add_621211, sum_call_result_621225)
        
        # Assigning a type to the variable 'out' (line 1475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1475, 8), 'out', result_sub_621226)
        
        # Call to _squeeze_output(...): (line 1477)
        # Processing the call arguments (line 1477)
        # Getting the type of 'out' (line 1477)
        out_621228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 31), 'out', False)
        # Processing the call keyword arguments (line 1477)
        kwargs_621229 = {}
        # Getting the type of '_squeeze_output' (line 1477)
        _squeeze_output_621227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 1477)
        _squeeze_output_call_result_621230 = invoke(stypy.reporting.localization.Localization(__file__, 1477, 15), _squeeze_output_621227, *[out_621228], **kwargs_621229)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'stypy_return_type', _squeeze_output_call_result_621230)
        
        # ################# End of 'entropy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'entropy' in the type store
        # Getting the type of 'stypy_return_type' (line 1454)
        stypy_return_type_621231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621231)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'entropy'
        return stypy_return_type_621231


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_621232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 30), 'int')
        # Getting the type of 'None' (line 1479)
        None_621233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 46), 'None')
        defaults = [int_621232, None_621233]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 1479, 4, False)
        # Assigning a type to the variable 'self' (line 1480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1480, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_gen.rvs.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_gen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_gen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_gen.rvs.__dict__.__setitem__('stypy_function_name', 'dirichlet_gen.rvs')
        dirichlet_gen.rvs.__dict__.__setitem__('stypy_param_names_list', ['alpha', 'size', 'random_state'])
        dirichlet_gen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_gen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_gen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_gen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_gen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_gen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_gen.rvs', ['alpha', 'size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['alpha', 'size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        str_621234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1496, (-1)), 'str', '\n        Draw random samples from a Dirichlet distribution.\n\n        Parameters\n        ----------\n        %(_dirichlet_doc_default_callparams)s\n        size : int, optional\n            Number of samples to draw (default 1).\n        %(_doc_random_state)s\n\n        Returns\n        -------\n        rvs : ndarray or scalar\n            Random variates of size (`size`, `N`), where `N` is the\n            dimension of the random variable.\n\n        ')
        
        # Assigning a Call to a Name (line 1497):
        
        # Assigning a Call to a Name (line 1497):
        
        # Call to _dirichlet_check_parameters(...): (line 1497)
        # Processing the call arguments (line 1497)
        # Getting the type of 'alpha' (line 1497)
        alpha_621236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 44), 'alpha', False)
        # Processing the call keyword arguments (line 1497)
        kwargs_621237 = {}
        # Getting the type of '_dirichlet_check_parameters' (line 1497)
        _dirichlet_check_parameters_621235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 16), '_dirichlet_check_parameters', False)
        # Calling _dirichlet_check_parameters(args, kwargs) (line 1497)
        _dirichlet_check_parameters_call_result_621238 = invoke(stypy.reporting.localization.Localization(__file__, 1497, 16), _dirichlet_check_parameters_621235, *[alpha_621236], **kwargs_621237)
        
        # Assigning a type to the variable 'alpha' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'alpha', _dirichlet_check_parameters_call_result_621238)
        
        # Assigning a Call to a Name (line 1498):
        
        # Assigning a Call to a Name (line 1498):
        
        # Call to _get_random_state(...): (line 1498)
        # Processing the call arguments (line 1498)
        # Getting the type of 'random_state' (line 1498)
        random_state_621241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 46), 'random_state', False)
        # Processing the call keyword arguments (line 1498)
        kwargs_621242 = {}
        # Getting the type of 'self' (line 1498)
        self_621239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 23), 'self', False)
        # Obtaining the member '_get_random_state' of a type (line 1498)
        _get_random_state_621240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 23), self_621239, '_get_random_state')
        # Calling _get_random_state(args, kwargs) (line 1498)
        _get_random_state_call_result_621243 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 23), _get_random_state_621240, *[random_state_621241], **kwargs_621242)
        
        # Assigning a type to the variable 'random_state' (line 1498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 8), 'random_state', _get_random_state_call_result_621243)
        
        # Call to dirichlet(...): (line 1499)
        # Processing the call arguments (line 1499)
        # Getting the type of 'alpha' (line 1499)
        alpha_621246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 38), 'alpha', False)
        # Processing the call keyword arguments (line 1499)
        # Getting the type of 'size' (line 1499)
        size_621247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 50), 'size', False)
        keyword_621248 = size_621247
        kwargs_621249 = {'size': keyword_621248}
        # Getting the type of 'random_state' (line 1499)
        random_state_621244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 15), 'random_state', False)
        # Obtaining the member 'dirichlet' of a type (line 1499)
        dirichlet_621245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1499, 15), random_state_621244, 'dirichlet')
        # Calling dirichlet(args, kwargs) (line 1499)
        dirichlet_call_result_621250 = invoke(stypy.reporting.localization.Localization(__file__, 1499, 15), dirichlet_621245, *[alpha_621246], **kwargs_621249)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1499, 8), 'stypy_return_type', dirichlet_call_result_621250)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 1479)
        stypy_return_type_621251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621251)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_621251


# Assigning a type to the variable 'dirichlet_gen' (line 1274)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1274, 0), 'dirichlet_gen', dirichlet_gen)

# Assigning a Call to a Name (line 1502):

# Assigning a Call to a Name (line 1502):

# Call to dirichlet_gen(...): (line 1502)
# Processing the call keyword arguments (line 1502)
kwargs_621253 = {}
# Getting the type of 'dirichlet_gen' (line 1502)
dirichlet_gen_621252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 12), 'dirichlet_gen', False)
# Calling dirichlet_gen(args, kwargs) (line 1502)
dirichlet_gen_call_result_621254 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 12), dirichlet_gen_621252, *[], **kwargs_621253)

# Assigning a type to the variable 'dirichlet' (line 1502)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 0), 'dirichlet', dirichlet_gen_call_result_621254)
# Declaration of the 'dirichlet_frozen' class
# Getting the type of 'multi_rv_frozen' (line 1505)
multi_rv_frozen_621255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 23), 'multi_rv_frozen')

class dirichlet_frozen(multi_rv_frozen_621255, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1506)
        None_621256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 35), 'None')
        defaults = [None_621256]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1506, 4, False)
        # Assigning a type to the variable 'self' (line 1507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_frozen.__init__', ['alpha', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['alpha', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1507):
        
        # Assigning a Call to a Attribute (line 1507):
        
        # Call to _dirichlet_check_parameters(...): (line 1507)
        # Processing the call arguments (line 1507)
        # Getting the type of 'alpha' (line 1507)
        alpha_621258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 49), 'alpha', False)
        # Processing the call keyword arguments (line 1507)
        kwargs_621259 = {}
        # Getting the type of '_dirichlet_check_parameters' (line 1507)
        _dirichlet_check_parameters_621257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 21), '_dirichlet_check_parameters', False)
        # Calling _dirichlet_check_parameters(args, kwargs) (line 1507)
        _dirichlet_check_parameters_call_result_621260 = invoke(stypy.reporting.localization.Localization(__file__, 1507, 21), _dirichlet_check_parameters_621257, *[alpha_621258], **kwargs_621259)
        
        # Getting the type of 'self' (line 1507)
        self_621261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 1507)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 8), self_621261, 'alpha', _dirichlet_check_parameters_call_result_621260)
        
        # Assigning a Call to a Attribute (line 1508):
        
        # Assigning a Call to a Attribute (line 1508):
        
        # Call to dirichlet_gen(...): (line 1508)
        # Processing the call arguments (line 1508)
        # Getting the type of 'seed' (line 1508)
        seed_621263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 35), 'seed', False)
        # Processing the call keyword arguments (line 1508)
        kwargs_621264 = {}
        # Getting the type of 'dirichlet_gen' (line 1508)
        dirichlet_gen_621262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 21), 'dirichlet_gen', False)
        # Calling dirichlet_gen(args, kwargs) (line 1508)
        dirichlet_gen_call_result_621265 = invoke(stypy.reporting.localization.Localization(__file__, 1508, 21), dirichlet_gen_621262, *[seed_621263], **kwargs_621264)
        
        # Getting the type of 'self' (line 1508)
        self_621266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 8), 'self')
        # Setting the type of the member '_dist' of a type (line 1508)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1508, 8), self_621266, '_dist', dirichlet_gen_call_result_621265)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'logpdf'
        module_type_store = module_type_store.open_function_context('logpdf', 1510, 4, False)
        # Assigning a type to the variable 'self' (line 1511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1511, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_frozen.logpdf.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_frozen.logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_frozen.logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_frozen.logpdf.__dict__.__setitem__('stypy_function_name', 'dirichlet_frozen.logpdf')
        dirichlet_frozen.logpdf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        dirichlet_frozen.logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_frozen.logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_frozen.logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_frozen.logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_frozen.logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_frozen.logpdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_frozen.logpdf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpdf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpdf(...)' code ##################

        
        # Call to logpdf(...): (line 1511)
        # Processing the call arguments (line 1511)
        # Getting the type of 'x' (line 1511)
        x_621270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 33), 'x', False)
        # Getting the type of 'self' (line 1511)
        self_621271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 36), 'self', False)
        # Obtaining the member 'alpha' of a type (line 1511)
        alpha_621272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1511, 36), self_621271, 'alpha')
        # Processing the call keyword arguments (line 1511)
        kwargs_621273 = {}
        # Getting the type of 'self' (line 1511)
        self_621267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 1511)
        _dist_621268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1511, 15), self_621267, '_dist')
        # Obtaining the member 'logpdf' of a type (line 1511)
        logpdf_621269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1511, 15), _dist_621268, 'logpdf')
        # Calling logpdf(args, kwargs) (line 1511)
        logpdf_call_result_621274 = invoke(stypy.reporting.localization.Localization(__file__, 1511, 15), logpdf_621269, *[x_621270, alpha_621272], **kwargs_621273)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1511, 8), 'stypy_return_type', logpdf_call_result_621274)
        
        # ################# End of 'logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1510)
        stypy_return_type_621275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621275)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpdf'
        return stypy_return_type_621275


    @norecursion
    def pdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pdf'
        module_type_store = module_type_store.open_function_context('pdf', 1513, 4, False)
        # Assigning a type to the variable 'self' (line 1514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_frozen.pdf.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_frozen.pdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_frozen.pdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_frozen.pdf.__dict__.__setitem__('stypy_function_name', 'dirichlet_frozen.pdf')
        dirichlet_frozen.pdf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        dirichlet_frozen.pdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_frozen.pdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_frozen.pdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_frozen.pdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_frozen.pdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_frozen.pdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_frozen.pdf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pdf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pdf(...)' code ##################

        
        # Call to pdf(...): (line 1514)
        # Processing the call arguments (line 1514)
        # Getting the type of 'x' (line 1514)
        x_621279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 30), 'x', False)
        # Getting the type of 'self' (line 1514)
        self_621280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 33), 'self', False)
        # Obtaining the member 'alpha' of a type (line 1514)
        alpha_621281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1514, 33), self_621280, 'alpha')
        # Processing the call keyword arguments (line 1514)
        kwargs_621282 = {}
        # Getting the type of 'self' (line 1514)
        self_621276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 1514)
        _dist_621277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1514, 15), self_621276, '_dist')
        # Obtaining the member 'pdf' of a type (line 1514)
        pdf_621278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1514, 15), _dist_621277, 'pdf')
        # Calling pdf(args, kwargs) (line 1514)
        pdf_call_result_621283 = invoke(stypy.reporting.localization.Localization(__file__, 1514, 15), pdf_621278, *[x_621279, alpha_621281], **kwargs_621282)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 8), 'stypy_return_type', pdf_call_result_621283)
        
        # ################# End of 'pdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1513)
        stypy_return_type_621284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621284)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pdf'
        return stypy_return_type_621284


    @norecursion
    def mean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mean'
        module_type_store = module_type_store.open_function_context('mean', 1516, 4, False)
        # Assigning a type to the variable 'self' (line 1517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_frozen.mean.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_frozen.mean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_frozen.mean.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_frozen.mean.__dict__.__setitem__('stypy_function_name', 'dirichlet_frozen.mean')
        dirichlet_frozen.mean.__dict__.__setitem__('stypy_param_names_list', [])
        dirichlet_frozen.mean.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_frozen.mean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_frozen.mean.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_frozen.mean.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_frozen.mean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_frozen.mean.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_frozen.mean', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mean', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mean(...)' code ##################

        
        # Call to mean(...): (line 1517)
        # Processing the call arguments (line 1517)
        # Getting the type of 'self' (line 1517)
        self_621288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 31), 'self', False)
        # Obtaining the member 'alpha' of a type (line 1517)
        alpha_621289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1517, 31), self_621288, 'alpha')
        # Processing the call keyword arguments (line 1517)
        kwargs_621290 = {}
        # Getting the type of 'self' (line 1517)
        self_621285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 1517)
        _dist_621286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1517, 15), self_621285, '_dist')
        # Obtaining the member 'mean' of a type (line 1517)
        mean_621287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1517, 15), _dist_621286, 'mean')
        # Calling mean(args, kwargs) (line 1517)
        mean_call_result_621291 = invoke(stypy.reporting.localization.Localization(__file__, 1517, 15), mean_621287, *[alpha_621289], **kwargs_621290)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 8), 'stypy_return_type', mean_call_result_621291)
        
        # ################# End of 'mean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mean' in the type store
        # Getting the type of 'stypy_return_type' (line 1516)
        stypy_return_type_621292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621292)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mean'
        return stypy_return_type_621292


    @norecursion
    def var(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'var'
        module_type_store = module_type_store.open_function_context('var', 1519, 4, False)
        # Assigning a type to the variable 'self' (line 1520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1520, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_frozen.var.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_frozen.var.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_frozen.var.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_frozen.var.__dict__.__setitem__('stypy_function_name', 'dirichlet_frozen.var')
        dirichlet_frozen.var.__dict__.__setitem__('stypy_param_names_list', [])
        dirichlet_frozen.var.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_frozen.var.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_frozen.var.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_frozen.var.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_frozen.var.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_frozen.var.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_frozen.var', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'var', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'var(...)' code ##################

        
        # Call to var(...): (line 1520)
        # Processing the call arguments (line 1520)
        # Getting the type of 'self' (line 1520)
        self_621296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 30), 'self', False)
        # Obtaining the member 'alpha' of a type (line 1520)
        alpha_621297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 30), self_621296, 'alpha')
        # Processing the call keyword arguments (line 1520)
        kwargs_621298 = {}
        # Getting the type of 'self' (line 1520)
        self_621293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 1520)
        _dist_621294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 15), self_621293, '_dist')
        # Obtaining the member 'var' of a type (line 1520)
        var_621295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 15), _dist_621294, 'var')
        # Calling var(args, kwargs) (line 1520)
        var_call_result_621299 = invoke(stypy.reporting.localization.Localization(__file__, 1520, 15), var_621295, *[alpha_621297], **kwargs_621298)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1520, 8), 'stypy_return_type', var_call_result_621299)
        
        # ################# End of 'var(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'var' in the type store
        # Getting the type of 'stypy_return_type' (line 1519)
        stypy_return_type_621300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621300)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'var'
        return stypy_return_type_621300


    @norecursion
    def entropy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'entropy'
        module_type_store = module_type_store.open_function_context('entropy', 1522, 4, False)
        # Assigning a type to the variable 'self' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_frozen.entropy.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_frozen.entropy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_frozen.entropy.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_frozen.entropy.__dict__.__setitem__('stypy_function_name', 'dirichlet_frozen.entropy')
        dirichlet_frozen.entropy.__dict__.__setitem__('stypy_param_names_list', [])
        dirichlet_frozen.entropy.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_frozen.entropy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_frozen.entropy.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_frozen.entropy.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_frozen.entropy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_frozen.entropy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_frozen.entropy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'entropy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'entropy(...)' code ##################

        
        # Call to entropy(...): (line 1523)
        # Processing the call arguments (line 1523)
        # Getting the type of 'self' (line 1523)
        self_621304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 34), 'self', False)
        # Obtaining the member 'alpha' of a type (line 1523)
        alpha_621305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 34), self_621304, 'alpha')
        # Processing the call keyword arguments (line 1523)
        kwargs_621306 = {}
        # Getting the type of 'self' (line 1523)
        self_621301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 1523)
        _dist_621302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 15), self_621301, '_dist')
        # Obtaining the member 'entropy' of a type (line 1523)
        entropy_621303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 15), _dist_621302, 'entropy')
        # Calling entropy(args, kwargs) (line 1523)
        entropy_call_result_621307 = invoke(stypy.reporting.localization.Localization(__file__, 1523, 15), entropy_621303, *[alpha_621305], **kwargs_621306)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 8), 'stypy_return_type', entropy_call_result_621307)
        
        # ################# End of 'entropy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'entropy' in the type store
        # Getting the type of 'stypy_return_type' (line 1522)
        stypy_return_type_621308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621308)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'entropy'
        return stypy_return_type_621308


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_621309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 23), 'int')
        # Getting the type of 'None' (line 1525)
        None_621310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 39), 'None')
        defaults = [int_621309, None_621310]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 1525, 4, False)
        # Assigning a type to the variable 'self' (line 1526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dirichlet_frozen.rvs.__dict__.__setitem__('stypy_localization', localization)
        dirichlet_frozen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dirichlet_frozen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        dirichlet_frozen.rvs.__dict__.__setitem__('stypy_function_name', 'dirichlet_frozen.rvs')
        dirichlet_frozen.rvs.__dict__.__setitem__('stypy_param_names_list', ['size', 'random_state'])
        dirichlet_frozen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        dirichlet_frozen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dirichlet_frozen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        dirichlet_frozen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        dirichlet_frozen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dirichlet_frozen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dirichlet_frozen.rvs', ['size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        
        # Call to rvs(...): (line 1526)
        # Processing the call arguments (line 1526)
        # Getting the type of 'self' (line 1526)
        self_621314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 30), 'self', False)
        # Obtaining the member 'alpha' of a type (line 1526)
        alpha_621315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 30), self_621314, 'alpha')
        # Getting the type of 'size' (line 1526)
        size_621316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 42), 'size', False)
        # Getting the type of 'random_state' (line 1526)
        random_state_621317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 48), 'random_state', False)
        # Processing the call keyword arguments (line 1526)
        kwargs_621318 = {}
        # Getting the type of 'self' (line 1526)
        self_621311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 1526)
        _dist_621312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 15), self_621311, '_dist')
        # Obtaining the member 'rvs' of a type (line 1526)
        rvs_621313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 15), _dist_621312, 'rvs')
        # Calling rvs(args, kwargs) (line 1526)
        rvs_call_result_621319 = invoke(stypy.reporting.localization.Localization(__file__, 1526, 15), rvs_621313, *[alpha_621315, size_621316, random_state_621317], **kwargs_621318)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 8), 'stypy_return_type', rvs_call_result_621319)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 1525)
        stypy_return_type_621320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621320)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_621320


# Assigning a type to the variable 'dirichlet_frozen' (line 1505)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1505, 0), 'dirichlet_frozen', dirichlet_frozen)


# Obtaining an instance of the builtin type 'list' (line 1531)
list_621321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 12), 'list')
# Adding type elements to the builtin type 'list' instance (line 1531)
# Adding element type (line 1531)
str_621322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 13), 'str', 'logpdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1531, 12), list_621321, str_621322)
# Adding element type (line 1531)
str_621323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 23), 'str', 'pdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1531, 12), list_621321, str_621323)
# Adding element type (line 1531)
str_621324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 30), 'str', 'rvs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1531, 12), list_621321, str_621324)
# Adding element type (line 1531)
str_621325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 37), 'str', 'mean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1531, 12), list_621321, str_621325)
# Adding element type (line 1531)
str_621326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 45), 'str', 'var')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1531, 12), list_621321, str_621326)
# Adding element type (line 1531)
str_621327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 52), 'str', 'entropy')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1531, 12), list_621321, str_621327)

# Testing the type of a for loop iterable (line 1531)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1531, 0), list_621321)
# Getting the type of the for loop variable (line 1531)
for_loop_var_621328 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1531, 0), list_621321)
# Assigning a type to the variable 'name' (line 1531)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 0), 'name', for_loop_var_621328)
# SSA begins for a for statement (line 1531)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')

# Assigning a Subscript to a Name (line 1532):

# Assigning a Subscript to a Name (line 1532):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 1532)
name_621329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 36), 'name')
# Getting the type of 'dirichlet_gen' (line 1532)
dirichlet_gen_621330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 13), 'dirichlet_gen')
# Obtaining the member '__dict__' of a type (line 1532)
dict___621331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 13), dirichlet_gen_621330, '__dict__')
# Obtaining the member '__getitem__' of a type (line 1532)
getitem___621332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 13), dict___621331, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1532)
subscript_call_result_621333 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 13), getitem___621332, name_621329)

# Assigning a type to the variable 'method' (line 1532)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 4), 'method', subscript_call_result_621333)

# Assigning a Subscript to a Name (line 1533):

# Assigning a Subscript to a Name (line 1533):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 1533)
name_621334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 46), 'name')
# Getting the type of 'dirichlet_frozen' (line 1533)
dirichlet_frozen_621335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 20), 'dirichlet_frozen')
# Obtaining the member '__dict__' of a type (line 1533)
dict___621336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 20), dirichlet_frozen_621335, '__dict__')
# Obtaining the member '__getitem__' of a type (line 1533)
getitem___621337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 20), dict___621336, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1533)
subscript_call_result_621338 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 20), getitem___621337, name_621334)

# Assigning a type to the variable 'method_frozen' (line 1533)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 4), 'method_frozen', subscript_call_result_621338)

# Assigning a Call to a Attribute (line 1534):

# Assigning a Call to a Attribute (line 1534):

# Call to docformat(...): (line 1534)
# Processing the call arguments (line 1534)
# Getting the type of 'method' (line 1535)
method_621341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 8), 'method', False)
# Obtaining the member '__doc__' of a type (line 1535)
doc___621342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 8), method_621341, '__doc__')
# Getting the type of 'dirichlet_docdict_noparams' (line 1535)
dirichlet_docdict_noparams_621343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 24), 'dirichlet_docdict_noparams', False)
# Processing the call keyword arguments (line 1534)
kwargs_621344 = {}
# Getting the type of 'doccer' (line 1534)
doccer_621339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 28), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 1534)
docformat_621340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 28), doccer_621339, 'docformat')
# Calling docformat(args, kwargs) (line 1534)
docformat_call_result_621345 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 28), docformat_621340, *[doc___621342, dirichlet_docdict_noparams_621343], **kwargs_621344)

# Getting the type of 'method_frozen' (line 1534)
method_frozen_621346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 4), 'method_frozen')
# Setting the type of the member '__doc__' of a type (line 1534)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 4), method_frozen_621346, '__doc__', docformat_call_result_621345)

# Assigning a Call to a Attribute (line 1536):

# Assigning a Call to a Attribute (line 1536):

# Call to docformat(...): (line 1536)
# Processing the call arguments (line 1536)
# Getting the type of 'method' (line 1536)
method_621349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 38), 'method', False)
# Obtaining the member '__doc__' of a type (line 1536)
doc___621350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 38), method_621349, '__doc__')
# Getting the type of 'dirichlet_docdict_params' (line 1536)
dirichlet_docdict_params_621351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 54), 'dirichlet_docdict_params', False)
# Processing the call keyword arguments (line 1536)
kwargs_621352 = {}
# Getting the type of 'doccer' (line 1536)
doccer_621347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 21), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 1536)
docformat_621348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 21), doccer_621347, 'docformat')
# Calling docformat(args, kwargs) (line 1536)
docformat_call_result_621353 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 21), docformat_621348, *[doc___621350, dirichlet_docdict_params_621351], **kwargs_621352)

# Getting the type of 'method' (line 1536)
method_621354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'method')
# Setting the type of the member '__doc__' of a type (line 1536)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 4), method_621354, '__doc__', docformat_call_result_621353)
# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()


# Assigning a Str to a Name (line 1539):

# Assigning a Str to a Name (line 1539):
str_621355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1545, (-1)), 'str', 'df : int\n    Degrees of freedom, must be greater than or equal to dimension of the\n    scale matrix\nscale : array_like\n    Symmetric positive definite scale matrix of the distribution\n')
# Assigning a type to the variable '_wishart_doc_default_callparams' (line 1539)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 0), '_wishart_doc_default_callparams', str_621355)

# Assigning a Str to a Name (line 1547):

# Assigning a Str to a Name (line 1547):
str_621356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1547, 31), 'str', '')
# Assigning a type to the variable '_wishart_doc_callparams_note' (line 1547)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 0), '_wishart_doc_callparams_note', str_621356)

# Assigning a Str to a Name (line 1549):

# Assigning a Str to a Name (line 1549):
str_621357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1549, 33), 'str', '')
# Assigning a type to the variable '_wishart_doc_frozen_callparams' (line 1549)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 0), '_wishart_doc_frozen_callparams', str_621357)

# Assigning a Str to a Name (line 1551):

# Assigning a Str to a Name (line 1551):
str_621358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1552, 4), 'str', 'See class definition for a detailed description of parameters.')
# Assigning a type to the variable '_wishart_doc_frozen_callparams_note' (line 1551)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 0), '_wishart_doc_frozen_callparams_note', str_621358)

# Assigning a Dict to a Name (line 1554):

# Assigning a Dict to a Name (line 1554):

# Obtaining an instance of the builtin type 'dict' (line 1554)
dict_621359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1554, 25), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1554)
# Adding element type (key, value) (line 1554)
str_621360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1555, 4), 'str', '_doc_default_callparams')
# Getting the type of '_wishart_doc_default_callparams' (line 1555)
_wishart_doc_default_callparams_621361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 31), '_wishart_doc_default_callparams')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1554, 25), dict_621359, (str_621360, _wishart_doc_default_callparams_621361))
# Adding element type (key, value) (line 1554)
str_621362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1556, 4), 'str', '_doc_callparams_note')
# Getting the type of '_wishart_doc_callparams_note' (line 1556)
_wishart_doc_callparams_note_621363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 28), '_wishart_doc_callparams_note')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1554, 25), dict_621359, (str_621362, _wishart_doc_callparams_note_621363))
# Adding element type (key, value) (line 1554)
str_621364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1557, 4), 'str', '_doc_random_state')
# Getting the type of '_doc_random_state' (line 1557)
_doc_random_state_621365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 25), '_doc_random_state')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1554, 25), dict_621359, (str_621364, _doc_random_state_621365))

# Assigning a type to the variable 'wishart_docdict_params' (line 1554)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1554, 0), 'wishart_docdict_params', dict_621359)

# Assigning a Dict to a Name (line 1560):

# Assigning a Dict to a Name (line 1560):

# Obtaining an instance of the builtin type 'dict' (line 1560)
dict_621366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1560, 27), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1560)
# Adding element type (key, value) (line 1560)
str_621367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1561, 4), 'str', '_doc_default_callparams')
# Getting the type of '_wishart_doc_frozen_callparams' (line 1561)
_wishart_doc_frozen_callparams_621368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 31), '_wishart_doc_frozen_callparams')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1560, 27), dict_621366, (str_621367, _wishart_doc_frozen_callparams_621368))
# Adding element type (key, value) (line 1560)
str_621369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, 4), 'str', '_doc_callparams_note')
# Getting the type of '_wishart_doc_frozen_callparams_note' (line 1562)
_wishart_doc_frozen_callparams_note_621370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 28), '_wishart_doc_frozen_callparams_note')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1560, 27), dict_621366, (str_621369, _wishart_doc_frozen_callparams_note_621370))
# Adding element type (key, value) (line 1560)
str_621371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1563, 4), 'str', '_doc_random_state')
# Getting the type of '_doc_random_state' (line 1563)
_doc_random_state_621372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 25), '_doc_random_state')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1560, 27), dict_621366, (str_621371, _doc_random_state_621372))

# Assigning a type to the variable 'wishart_docdict_noparams' (line 1560)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1560, 0), 'wishart_docdict_noparams', dict_621366)
# Declaration of the 'wishart_gen' class
# Getting the type of 'multi_rv_generic' (line 1567)
multi_rv_generic_621373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 18), 'multi_rv_generic')

class wishart_gen(multi_rv_generic_621373, ):
    str_621374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1664, (-1)), 'str', '\n    A Wishart random variable.\n\n    The `df` keyword specifies the degrees of freedom. The `scale` keyword\n    specifies the scale matrix, which must be symmetric and positive definite.\n    In this context, the scale matrix is often interpreted in terms of a\n    multivariate normal precision matrix (the inverse of the covariance\n    matrix).\n\n    Methods\n    -------\n    ``pdf(x, df, scale)``\n        Probability density function.\n    ``logpdf(x, df, scale)``\n        Log of the probability density function.\n    ``rvs(df, scale, size=1, random_state=None)``\n        Draw random samples from a Wishart distribution.\n    ``entropy()``\n        Compute the differential entropy of the Wishart distribution.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    %(_doc_default_callparams)s\n    %(_doc_random_state)s\n\n    Alternatively, the object may be called (as a function) to fix the degrees\n    of freedom and scale parameters, returning a "frozen" Wishart random\n    variable:\n\n    rv = wishart(df=1, scale=1)\n        - Frozen object with the same methods but holding the given\n          degrees of freedom and scale fixed.\n\n    See Also\n    --------\n    invwishart, chi2\n\n    Notes\n    -----\n    %(_doc_callparams_note)s\n\n    The scale matrix `scale` must be a symmetric positive definite\n    matrix. Singular matrices, including the symmetric positive semi-definite\n    case, are not supported.\n\n    The Wishart distribution is often denoted\n\n    .. math::\n\n        W_p(\\nu, \\Sigma)\n\n    where :math:`\\nu` is the degrees of freedom and :math:`\\Sigma` is the\n    :math:`p \\times p` scale matrix.\n\n    The probability density function for `wishart` has support over positive\n    definite matrices :math:`S`; if :math:`S \\sim W_p(\\nu, \\Sigma)`, then\n    its PDF is given by:\n\n    .. math::\n\n        f(S) = \\frac{|S|^{\\frac{\\nu - p - 1}{2}}}{2^{ \\frac{\\nu p}{2} }\n               |\\Sigma|^\\frac{\\nu}{2} \\Gamma_p \\left ( \\frac{\\nu}{2} \\right )}\n               \\exp\\left( -tr(\\Sigma^{-1} S) / 2 \\right)\n\n    If :math:`S \\sim W_p(\\nu, \\Sigma)` (Wishart) then\n    :math:`S^{-1} \\sim W_p^{-1}(\\nu, \\Sigma^{-1})` (inverse Wishart).\n\n    If the scale matrix is 1-dimensional and equal to one, then the Wishart\n    distribution :math:`W_1(\\nu, 1)` collapses to the :math:`\\chi^2(\\nu)`\n    distribution.\n\n    .. versionadded:: 0.16.0\n\n    References\n    ----------\n    .. [1] M.L. Eaton, "Multivariate Statistics: A Vector Space Approach",\n           Wiley, 1983.\n    .. [2] W.B. Smith and R.R. Hocking, "Algorithm AS 53: Wishart Variate\n           Generator", Applied Statistics, vol. 21, pp. 341-345, 1972.\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import wishart, chi2\n    >>> x = np.linspace(1e-5, 8, 100)\n    >>> w = wishart.pdf(x, df=3, scale=1); w[:5]\n    array([ 0.00126156,  0.10892176,  0.14793434,  0.17400548,  0.1929669 ])\n    >>> c = chi2.pdf(x, 3); c[:5]\n    array([ 0.00126156,  0.10892176,  0.14793434,  0.17400548,  0.1929669 ])\n    >>> plt.plot(x, w)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1666)
        None_621375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 28), 'None')
        defaults = [None_621375]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1666, 4, False)
        # Assigning a type to the variable 'self' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen.__init__', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1667)
        # Processing the call arguments (line 1667)
        # Getting the type of 'seed' (line 1667)
        seed_621382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 42), 'seed', False)
        # Processing the call keyword arguments (line 1667)
        kwargs_621383 = {}
        
        # Call to super(...): (line 1667)
        # Processing the call arguments (line 1667)
        # Getting the type of 'wishart_gen' (line 1667)
        wishart_gen_621377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 14), 'wishart_gen', False)
        # Getting the type of 'self' (line 1667)
        self_621378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 27), 'self', False)
        # Processing the call keyword arguments (line 1667)
        kwargs_621379 = {}
        # Getting the type of 'super' (line 1667)
        super_621376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'super', False)
        # Calling super(args, kwargs) (line 1667)
        super_call_result_621380 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 8), super_621376, *[wishart_gen_621377, self_621378], **kwargs_621379)
        
        # Obtaining the member '__init__' of a type (line 1667)
        init___621381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 8), super_call_result_621380, '__init__')
        # Calling __init__(args, kwargs) (line 1667)
        init___call_result_621384 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 8), init___621381, *[seed_621382], **kwargs_621383)
        
        
        # Assigning a Call to a Attribute (line 1668):
        
        # Assigning a Call to a Attribute (line 1668):
        
        # Call to docformat(...): (line 1668)
        # Processing the call arguments (line 1668)
        # Getting the type of 'self' (line 1668)
        self_621387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 40), 'self', False)
        # Obtaining the member '__doc__' of a type (line 1668)
        doc___621388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 40), self_621387, '__doc__')
        # Getting the type of 'wishart_docdict_params' (line 1668)
        wishart_docdict_params_621389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 54), 'wishart_docdict_params', False)
        # Processing the call keyword arguments (line 1668)
        kwargs_621390 = {}
        # Getting the type of 'doccer' (line 1668)
        doccer_621385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 23), 'doccer', False)
        # Obtaining the member 'docformat' of a type (line 1668)
        docformat_621386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 23), doccer_621385, 'docformat')
        # Calling docformat(args, kwargs) (line 1668)
        docformat_call_result_621391 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 23), docformat_621386, *[doc___621388, wishart_docdict_params_621389], **kwargs_621390)
        
        # Getting the type of 'self' (line 1668)
        self_621392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 1668)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 8), self_621392, '__doc__', docformat_call_result_621391)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1670)
        None_621393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 26), 'None')
        # Getting the type of 'None' (line 1670)
        None_621394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 38), 'None')
        # Getting the type of 'None' (line 1670)
        None_621395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 49), 'None')
        defaults = [None_621393, None_621394, None_621395]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1670, 4, False)
        # Assigning a type to the variable 'self' (line 1671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen.__call__.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen.__call__.__dict__.__setitem__('stypy_function_name', 'wishart_gen.__call__')
        wishart_gen.__call__.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale', 'seed'])
        wishart_gen.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen.__call__.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen.__call__', ['df', 'scale', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['df', 'scale', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_621396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, (-1)), 'str', '\n        Create a frozen Wishart distribution.\n\n        See `wishart_frozen` for more information.\n\n        ')
        
        # Call to wishart_frozen(...): (line 1677)
        # Processing the call arguments (line 1677)
        # Getting the type of 'df' (line 1677)
        df_621398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 30), 'df', False)
        # Getting the type of 'scale' (line 1677)
        scale_621399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 34), 'scale', False)
        # Getting the type of 'seed' (line 1677)
        seed_621400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 41), 'seed', False)
        # Processing the call keyword arguments (line 1677)
        kwargs_621401 = {}
        # Getting the type of 'wishart_frozen' (line 1677)
        wishart_frozen_621397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 15), 'wishart_frozen', False)
        # Calling wishart_frozen(args, kwargs) (line 1677)
        wishart_frozen_call_result_621402 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 15), wishart_frozen_621397, *[df_621398, scale_621399, seed_621400], **kwargs_621401)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 8), 'stypy_return_type', wishart_frozen_call_result_621402)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1670)
        stypy_return_type_621403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621403)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_621403


    @norecursion
    def _process_parameters(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_parameters'
        module_type_store = module_type_store.open_function_context('_process_parameters', 1679, 4, False)
        # Assigning a type to the variable 'self' (line 1680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen._process_parameters.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen._process_parameters.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen._process_parameters.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen._process_parameters.__dict__.__setitem__('stypy_function_name', 'wishart_gen._process_parameters')
        wishart_gen._process_parameters.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale'])
        wishart_gen._process_parameters.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen._process_parameters.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen._process_parameters.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen._process_parameters.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen._process_parameters.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen._process_parameters.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen._process_parameters', ['df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_parameters', localization, ['df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_parameters(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1680)
        # Getting the type of 'scale' (line 1680)
        scale_621404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 11), 'scale')
        # Getting the type of 'None' (line 1680)
        None_621405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 20), 'None')
        
        (may_be_621406, more_types_in_union_621407) = may_be_none(scale_621404, None_621405)

        if may_be_621406:

            if more_types_in_union_621407:
                # Runtime conditional SSA (line 1680)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Num to a Name (line 1681):
            
            # Assigning a Num to a Name (line 1681):
            float_621408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 20), 'float')
            # Assigning a type to the variable 'scale' (line 1681)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 12), 'scale', float_621408)

            if more_types_in_union_621407:
                # SSA join for if statement (line 1680)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1682):
        
        # Assigning a Call to a Name (line 1682):
        
        # Call to asarray(...): (line 1682)
        # Processing the call arguments (line 1682)
        # Getting the type of 'scale' (line 1682)
        scale_621411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 27), 'scale', False)
        # Processing the call keyword arguments (line 1682)
        # Getting the type of 'float' (line 1682)
        float_621412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 40), 'float', False)
        keyword_621413 = float_621412
        kwargs_621414 = {'dtype': keyword_621413}
        # Getting the type of 'np' (line 1682)
        np_621409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 16), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1682)
        asarray_621410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 16), np_621409, 'asarray')
        # Calling asarray(args, kwargs) (line 1682)
        asarray_call_result_621415 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 16), asarray_621410, *[scale_621411], **kwargs_621414)
        
        # Assigning a type to the variable 'scale' (line 1682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 8), 'scale', asarray_call_result_621415)
        
        
        # Getting the type of 'scale' (line 1684)
        scale_621416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 11), 'scale')
        # Obtaining the member 'ndim' of a type (line 1684)
        ndim_621417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 11), scale_621416, 'ndim')
        int_621418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, 25), 'int')
        # Applying the binary operator '==' (line 1684)
        result_eq_621419 = python_operator(stypy.reporting.localization.Localization(__file__, 1684, 11), '==', ndim_621417, int_621418)
        
        # Testing the type of an if condition (line 1684)
        if_condition_621420 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1684, 8), result_eq_621419)
        # Assigning a type to the variable 'if_condition_621420' (line 1684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1684, 8), 'if_condition_621420', if_condition_621420)
        # SSA begins for if statement (line 1684)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1685):
        
        # Assigning a Subscript to a Name (line 1685):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1685)
        tuple_621421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1685, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1685)
        # Adding element type (line 1685)
        # Getting the type of 'np' (line 1685)
        np_621422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 26), 'np')
        # Obtaining the member 'newaxis' of a type (line 1685)
        newaxis_621423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 26), np_621422, 'newaxis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1685, 26), tuple_621421, newaxis_621423)
        # Adding element type (line 1685)
        # Getting the type of 'np' (line 1685)
        np_621424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 37), 'np')
        # Obtaining the member 'newaxis' of a type (line 1685)
        newaxis_621425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 37), np_621424, 'newaxis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1685, 26), tuple_621421, newaxis_621425)
        
        # Getting the type of 'scale' (line 1685)
        scale_621426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 20), 'scale')
        # Obtaining the member '__getitem__' of a type (line 1685)
        getitem___621427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 20), scale_621426, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1685)
        subscript_call_result_621428 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 20), getitem___621427, tuple_621421)
        
        # Assigning a type to the variable 'scale' (line 1685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 12), 'scale', subscript_call_result_621428)
        # SSA branch for the else part of an if statement (line 1684)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'scale' (line 1686)
        scale_621429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 13), 'scale')
        # Obtaining the member 'ndim' of a type (line 1686)
        ndim_621430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 13), scale_621429, 'ndim')
        int_621431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 27), 'int')
        # Applying the binary operator '==' (line 1686)
        result_eq_621432 = python_operator(stypy.reporting.localization.Localization(__file__, 1686, 13), '==', ndim_621430, int_621431)
        
        # Testing the type of an if condition (line 1686)
        if_condition_621433 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1686, 13), result_eq_621432)
        # Assigning a type to the variable 'if_condition_621433' (line 1686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 13), 'if_condition_621433', if_condition_621433)
        # SSA begins for if statement (line 1686)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1687):
        
        # Assigning a Call to a Name (line 1687):
        
        # Call to diag(...): (line 1687)
        # Processing the call arguments (line 1687)
        # Getting the type of 'scale' (line 1687)
        scale_621436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 28), 'scale', False)
        # Processing the call keyword arguments (line 1687)
        kwargs_621437 = {}
        # Getting the type of 'np' (line 1687)
        np_621434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 20), 'np', False)
        # Obtaining the member 'diag' of a type (line 1687)
        diag_621435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 20), np_621434, 'diag')
        # Calling diag(args, kwargs) (line 1687)
        diag_call_result_621438 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 20), diag_621435, *[scale_621436], **kwargs_621437)
        
        # Assigning a type to the variable 'scale' (line 1687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 12), 'scale', diag_call_result_621438)
        # SSA branch for the else part of an if statement (line 1686)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'scale' (line 1688)
        scale_621439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 13), 'scale')
        # Obtaining the member 'ndim' of a type (line 1688)
        ndim_621440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 13), scale_621439, 'ndim')
        int_621441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 27), 'int')
        # Applying the binary operator '==' (line 1688)
        result_eq_621442 = python_operator(stypy.reporting.localization.Localization(__file__, 1688, 13), '==', ndim_621440, int_621441)
        
        
        
        
        # Obtaining the type of the subscript
        int_621443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 49), 'int')
        # Getting the type of 'scale' (line 1688)
        scale_621444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 37), 'scale')
        # Obtaining the member 'shape' of a type (line 1688)
        shape_621445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 37), scale_621444, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1688)
        getitem___621446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 37), shape_621445, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1688)
        subscript_call_result_621447 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 37), getitem___621446, int_621443)
        
        
        # Obtaining the type of the subscript
        int_621448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 67), 'int')
        # Getting the type of 'scale' (line 1688)
        scale_621449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 55), 'scale')
        # Obtaining the member 'shape' of a type (line 1688)
        shape_621450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 55), scale_621449, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1688)
        getitem___621451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 55), shape_621450, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1688)
        subscript_call_result_621452 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 55), getitem___621451, int_621448)
        
        # Applying the binary operator '==' (line 1688)
        result_eq_621453 = python_operator(stypy.reporting.localization.Localization(__file__, 1688, 37), '==', subscript_call_result_621447, subscript_call_result_621452)
        
        # Applying the 'not' unary operator (line 1688)
        result_not__621454 = python_operator(stypy.reporting.localization.Localization(__file__, 1688, 33), 'not', result_eq_621453)
        
        # Applying the binary operator 'and' (line 1688)
        result_and_keyword_621455 = python_operator(stypy.reporting.localization.Localization(__file__, 1688, 13), 'and', result_eq_621442, result_not__621454)
        
        # Testing the type of an if condition (line 1688)
        if_condition_621456 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1688, 13), result_and_keyword_621455)
        # Assigning a type to the variable 'if_condition_621456' (line 1688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 13), 'if_condition_621456', if_condition_621456)
        # SSA begins for if statement (line 1688)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1689)
        # Processing the call arguments (line 1689)
        str_621458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1689, 29), 'str', "Array 'scale' must be square if it is two dimensional, but scale.scale = %s.")
        
        # Call to str(...): (line 1691)
        # Processing the call arguments (line 1691)
        # Getting the type of 'scale' (line 1691)
        scale_621460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 35), 'scale', False)
        # Obtaining the member 'shape' of a type (line 1691)
        shape_621461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 35), scale_621460, 'shape')
        # Processing the call keyword arguments (line 1691)
        kwargs_621462 = {}
        # Getting the type of 'str' (line 1691)
        str_621459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 31), 'str', False)
        # Calling str(args, kwargs) (line 1691)
        str_call_result_621463 = invoke(stypy.reporting.localization.Localization(__file__, 1691, 31), str_621459, *[shape_621461], **kwargs_621462)
        
        # Applying the binary operator '%' (line 1689)
        result_mod_621464 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 29), '%', str_621458, str_call_result_621463)
        
        # Processing the call keyword arguments (line 1689)
        kwargs_621465 = {}
        # Getting the type of 'ValueError' (line 1689)
        ValueError_621457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1689)
        ValueError_call_result_621466 = invoke(stypy.reporting.localization.Localization(__file__, 1689, 18), ValueError_621457, *[result_mod_621464], **kwargs_621465)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1689, 12), ValueError_call_result_621466, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1688)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'scale' (line 1692)
        scale_621467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 13), 'scale')
        # Obtaining the member 'ndim' of a type (line 1692)
        ndim_621468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1692, 13), scale_621467, 'ndim')
        int_621469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1692, 26), 'int')
        # Applying the binary operator '>' (line 1692)
        result_gt_621470 = python_operator(stypy.reporting.localization.Localization(__file__, 1692, 13), '>', ndim_621468, int_621469)
        
        # Testing the type of an if condition (line 1692)
        if_condition_621471 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1692, 13), result_gt_621470)
        # Assigning a type to the variable 'if_condition_621471' (line 1692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 13), 'if_condition_621471', if_condition_621471)
        # SSA begins for if statement (line 1692)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1693)
        # Processing the call arguments (line 1693)
        str_621473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 29), 'str', "Array 'scale' must be at most two-dimensional, but scale.ndim = %d")
        # Getting the type of 'scale' (line 1694)
        scale_621474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 54), 'scale', False)
        # Obtaining the member 'ndim' of a type (line 1694)
        ndim_621475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 54), scale_621474, 'ndim')
        # Applying the binary operator '%' (line 1693)
        result_mod_621476 = python_operator(stypy.reporting.localization.Localization(__file__, 1693, 29), '%', str_621473, ndim_621475)
        
        # Processing the call keyword arguments (line 1693)
        kwargs_621477 = {}
        # Getting the type of 'ValueError' (line 1693)
        ValueError_621472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1693)
        ValueError_call_result_621478 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 18), ValueError_621472, *[result_mod_621476], **kwargs_621477)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1693, 12), ValueError_call_result_621478, 'raise parameter', BaseException)
        # SSA join for if statement (line 1692)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1688)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1686)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1684)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 1696):
        
        # Assigning a Subscript to a Name (line 1696):
        
        # Obtaining the type of the subscript
        int_621479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1696, 26), 'int')
        # Getting the type of 'scale' (line 1696)
        scale_621480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 14), 'scale')
        # Obtaining the member 'shape' of a type (line 1696)
        shape_621481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1696, 14), scale_621480, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1696)
        getitem___621482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1696, 14), shape_621481, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1696)
        subscript_call_result_621483 = invoke(stypy.reporting.localization.Localization(__file__, 1696, 14), getitem___621482, int_621479)
        
        # Assigning a type to the variable 'dim' (line 1696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1696, 8), 'dim', subscript_call_result_621483)
        
        # Type idiom detected: calculating its left and rigth part (line 1698)
        # Getting the type of 'df' (line 1698)
        df_621484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 11), 'df')
        # Getting the type of 'None' (line 1698)
        None_621485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 17), 'None')
        
        (may_be_621486, more_types_in_union_621487) = may_be_none(df_621484, None_621485)

        if may_be_621486:

            if more_types_in_union_621487:
                # Runtime conditional SSA (line 1698)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 1699):
            
            # Assigning a Name to a Name (line 1699):
            # Getting the type of 'dim' (line 1699)
            dim_621488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 17), 'dim')
            # Assigning a type to the variable 'df' (line 1699)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1699, 12), 'df', dim_621488)

            if more_types_in_union_621487:
                # Runtime conditional SSA for else branch (line 1698)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_621486) or more_types_in_union_621487):
            
            
            
            # Call to isscalar(...): (line 1700)
            # Processing the call arguments (line 1700)
            # Getting the type of 'df' (line 1700)
            df_621491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 29), 'df', False)
            # Processing the call keyword arguments (line 1700)
            kwargs_621492 = {}
            # Getting the type of 'np' (line 1700)
            np_621489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 17), 'np', False)
            # Obtaining the member 'isscalar' of a type (line 1700)
            isscalar_621490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 17), np_621489, 'isscalar')
            # Calling isscalar(args, kwargs) (line 1700)
            isscalar_call_result_621493 = invoke(stypy.reporting.localization.Localization(__file__, 1700, 17), isscalar_621490, *[df_621491], **kwargs_621492)
            
            # Applying the 'not' unary operator (line 1700)
            result_not__621494 = python_operator(stypy.reporting.localization.Localization(__file__, 1700, 13), 'not', isscalar_call_result_621493)
            
            # Testing the type of an if condition (line 1700)
            if_condition_621495 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1700, 13), result_not__621494)
            # Assigning a type to the variable 'if_condition_621495' (line 1700)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 13), 'if_condition_621495', if_condition_621495)
            # SSA begins for if statement (line 1700)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1701)
            # Processing the call arguments (line 1701)
            str_621497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1701, 29), 'str', 'Degrees of freedom must be a scalar.')
            # Processing the call keyword arguments (line 1701)
            kwargs_621498 = {}
            # Getting the type of 'ValueError' (line 1701)
            ValueError_621496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1701)
            ValueError_call_result_621499 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 18), ValueError_621496, *[str_621497], **kwargs_621498)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1701, 12), ValueError_call_result_621499, 'raise parameter', BaseException)
            # SSA branch for the else part of an if statement (line 1700)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'df' (line 1702)
            df_621500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 13), 'df')
            # Getting the type of 'dim' (line 1702)
            dim_621501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 18), 'dim')
            # Applying the binary operator '<' (line 1702)
            result_lt_621502 = python_operator(stypy.reporting.localization.Localization(__file__, 1702, 13), '<', df_621500, dim_621501)
            
            # Testing the type of an if condition (line 1702)
            if_condition_621503 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1702, 13), result_lt_621502)
            # Assigning a type to the variable 'if_condition_621503' (line 1702)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 13), 'if_condition_621503', if_condition_621503)
            # SSA begins for if statement (line 1702)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1703)
            # Processing the call arguments (line 1703)
            str_621505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 29), 'str', 'Degrees of freedom cannot be less than dimension of scale matrix, but df = %d')
            # Getting the type of 'df' (line 1704)
            df_621506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 63), 'df', False)
            # Applying the binary operator '%' (line 1703)
            result_mod_621507 = python_operator(stypy.reporting.localization.Localization(__file__, 1703, 29), '%', str_621505, df_621506)
            
            # Processing the call keyword arguments (line 1703)
            kwargs_621508 = {}
            # Getting the type of 'ValueError' (line 1703)
            ValueError_621504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1703)
            ValueError_call_result_621509 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 18), ValueError_621504, *[result_mod_621507], **kwargs_621508)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1703, 12), ValueError_call_result_621509, 'raise parameter', BaseException)
            # SSA join for if statement (line 1702)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1700)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_621486 and more_types_in_union_621487):
                # SSA join for if statement (line 1698)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1706)
        tuple_621510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1706, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1706)
        # Adding element type (line 1706)
        # Getting the type of 'dim' (line 1706)
        dim_621511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 15), 'dim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1706, 15), tuple_621510, dim_621511)
        # Adding element type (line 1706)
        # Getting the type of 'df' (line 1706)
        df_621512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 20), 'df')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1706, 15), tuple_621510, df_621512)
        # Adding element type (line 1706)
        # Getting the type of 'scale' (line 1706)
        scale_621513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 24), 'scale')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1706, 15), tuple_621510, scale_621513)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1706, 8), 'stypy_return_type', tuple_621510)
        
        # ################# End of '_process_parameters(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_parameters' in the type store
        # Getting the type of 'stypy_return_type' (line 1679)
        stypy_return_type_621514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621514)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_parameters'
        return stypy_return_type_621514


    @norecursion
    def _process_quantiles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_quantiles'
        module_type_store = module_type_store.open_function_context('_process_quantiles', 1708, 4, False)
        # Assigning a type to the variable 'self' (line 1709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen._process_quantiles.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen._process_quantiles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen._process_quantiles.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen._process_quantiles.__dict__.__setitem__('stypy_function_name', 'wishart_gen._process_quantiles')
        wishart_gen._process_quantiles.__dict__.__setitem__('stypy_param_names_list', ['x', 'dim'])
        wishart_gen._process_quantiles.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen._process_quantiles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen._process_quantiles.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen._process_quantiles.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen._process_quantiles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen._process_quantiles.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen._process_quantiles', ['x', 'dim'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_quantiles', localization, ['x', 'dim'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_quantiles(...)' code ##################

        str_621515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, (-1)), 'str', '\n        Adjust quantiles array so that last axis labels the components of\n        each data point.\n        ')
        
        # Assigning a Call to a Name (line 1713):
        
        # Assigning a Call to a Name (line 1713):
        
        # Call to asarray(...): (line 1713)
        # Processing the call arguments (line 1713)
        # Getting the type of 'x' (line 1713)
        x_621518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 23), 'x', False)
        # Processing the call keyword arguments (line 1713)
        # Getting the type of 'float' (line 1713)
        float_621519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 32), 'float', False)
        keyword_621520 = float_621519
        kwargs_621521 = {'dtype': keyword_621520}
        # Getting the type of 'np' (line 1713)
        np_621516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1713)
        asarray_621517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1713, 12), np_621516, 'asarray')
        # Calling asarray(args, kwargs) (line 1713)
        asarray_call_result_621522 = invoke(stypy.reporting.localization.Localization(__file__, 1713, 12), asarray_621517, *[x_621518], **kwargs_621521)
        
        # Assigning a type to the variable 'x' (line 1713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1713, 8), 'x', asarray_call_result_621522)
        
        
        # Getting the type of 'x' (line 1715)
        x_621523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 1715)
        ndim_621524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1715, 11), x_621523, 'ndim')
        int_621525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 21), 'int')
        # Applying the binary operator '==' (line 1715)
        result_eq_621526 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 11), '==', ndim_621524, int_621525)
        
        # Testing the type of an if condition (line 1715)
        if_condition_621527 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1715, 8), result_eq_621526)
        # Assigning a type to the variable 'if_condition_621527' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 8), 'if_condition_621527', if_condition_621527)
        # SSA begins for if statement (line 1715)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1716):
        
        # Assigning a BinOp to a Name (line 1716):
        # Getting the type of 'x' (line 1716)
        x_621528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 16), 'x')
        
        # Obtaining the type of the subscript
        slice_621529 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1716, 20), None, None, None)
        slice_621530 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1716, 20), None, None, None)
        # Getting the type of 'np' (line 1716)
        np_621531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 38), 'np')
        # Obtaining the member 'newaxis' of a type (line 1716)
        newaxis_621532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 38), np_621531, 'newaxis')
        
        # Call to eye(...): (line 1716)
        # Processing the call arguments (line 1716)
        # Getting the type of 'dim' (line 1716)
        dim_621535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 27), 'dim', False)
        # Processing the call keyword arguments (line 1716)
        kwargs_621536 = {}
        # Getting the type of 'np' (line 1716)
        np_621533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 20), 'np', False)
        # Obtaining the member 'eye' of a type (line 1716)
        eye_621534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 20), np_621533, 'eye')
        # Calling eye(args, kwargs) (line 1716)
        eye_call_result_621537 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 20), eye_621534, *[dim_621535], **kwargs_621536)
        
        # Obtaining the member '__getitem__' of a type (line 1716)
        getitem___621538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 20), eye_call_result_621537, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1716)
        subscript_call_result_621539 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 20), getitem___621538, (slice_621529, slice_621530, newaxis_621532))
        
        # Applying the binary operator '*' (line 1716)
        result_mul_621540 = python_operator(stypy.reporting.localization.Localization(__file__, 1716, 16), '*', x_621528, subscript_call_result_621539)
        
        # Assigning a type to the variable 'x' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 12), 'x', result_mul_621540)
        # SSA join for if statement (line 1715)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x' (line 1717)
        x_621541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 1717)
        ndim_621542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1717, 11), x_621541, 'ndim')
        int_621543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, 21), 'int')
        # Applying the binary operator '==' (line 1717)
        result_eq_621544 = python_operator(stypy.reporting.localization.Localization(__file__, 1717, 11), '==', ndim_621542, int_621543)
        
        # Testing the type of an if condition (line 1717)
        if_condition_621545 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1717, 8), result_eq_621544)
        # Assigning a type to the variable 'if_condition_621545' (line 1717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 8), 'if_condition_621545', if_condition_621545)
        # SSA begins for if statement (line 1717)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'dim' (line 1718)
        dim_621546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 15), 'dim')
        int_621547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1718, 22), 'int')
        # Applying the binary operator '==' (line 1718)
        result_eq_621548 = python_operator(stypy.reporting.localization.Localization(__file__, 1718, 15), '==', dim_621546, int_621547)
        
        # Testing the type of an if condition (line 1718)
        if_condition_621549 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1718, 12), result_eq_621548)
        # Assigning a type to the variable 'if_condition_621549' (line 1718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 12), 'if_condition_621549', if_condition_621549)
        # SSA begins for if statement (line 1718)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1719):
        
        # Assigning a Subscript to a Name (line 1719):
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 1719)
        np_621550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 22), 'np')
        # Obtaining the member 'newaxis' of a type (line 1719)
        newaxis_621551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 22), np_621550, 'newaxis')
        # Getting the type of 'np' (line 1719)
        np_621552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 34), 'np')
        # Obtaining the member 'newaxis' of a type (line 1719)
        newaxis_621553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 34), np_621552, 'newaxis')
        slice_621554 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1719, 20), None, None, None)
        # Getting the type of 'x' (line 1719)
        x_621555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 20), 'x')
        # Obtaining the member '__getitem__' of a type (line 1719)
        getitem___621556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 20), x_621555, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1719)
        subscript_call_result_621557 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 20), getitem___621556, (newaxis_621551, newaxis_621553, slice_621554))
        
        # Assigning a type to the variable 'x' (line 1719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 16), 'x', subscript_call_result_621557)
        # SSA branch for the else part of an if statement (line 1718)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 1721):
        
        # Assigning a Subscript to a Name (line 1721):
        
        # Obtaining the type of the subscript
        slice_621558 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1721, 20), None, None, None)
        slice_621559 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1721, 20), None, None, None)
        # Getting the type of 'np' (line 1721)
        np_621560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 37), 'np')
        # Obtaining the member 'newaxis' of a type (line 1721)
        newaxis_621561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 37), np_621560, 'newaxis')
        
        # Call to diag(...): (line 1721)
        # Processing the call arguments (line 1721)
        # Getting the type of 'x' (line 1721)
        x_621564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 28), 'x', False)
        # Processing the call keyword arguments (line 1721)
        kwargs_621565 = {}
        # Getting the type of 'np' (line 1721)
        np_621562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 20), 'np', False)
        # Obtaining the member 'diag' of a type (line 1721)
        diag_621563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 20), np_621562, 'diag')
        # Calling diag(args, kwargs) (line 1721)
        diag_call_result_621566 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 20), diag_621563, *[x_621564], **kwargs_621565)
        
        # Obtaining the member '__getitem__' of a type (line 1721)
        getitem___621567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 20), diag_call_result_621566, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1721)
        subscript_call_result_621568 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 20), getitem___621567, (slice_621558, slice_621559, newaxis_621561))
        
        # Assigning a type to the variable 'x' (line 1721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 16), 'x', subscript_call_result_621568)
        # SSA join for if statement (line 1718)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1717)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 1722)
        x_621569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 13), 'x')
        # Obtaining the member 'ndim' of a type (line 1722)
        ndim_621570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1722, 13), x_621569, 'ndim')
        int_621571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 23), 'int')
        # Applying the binary operator '==' (line 1722)
        result_eq_621572 = python_operator(stypy.reporting.localization.Localization(__file__, 1722, 13), '==', ndim_621570, int_621571)
        
        # Testing the type of an if condition (line 1722)
        if_condition_621573 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1722, 13), result_eq_621572)
        # Assigning a type to the variable 'if_condition_621573' (line 1722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 13), 'if_condition_621573', if_condition_621573)
        # SSA begins for if statement (line 1722)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        
        # Obtaining the type of the subscript
        int_621574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 27), 'int')
        # Getting the type of 'x' (line 1723)
        x_621575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 19), 'x')
        # Obtaining the member 'shape' of a type (line 1723)
        shape_621576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 19), x_621575, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1723)
        getitem___621577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 19), shape_621576, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1723)
        subscript_call_result_621578 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 19), getitem___621577, int_621574)
        
        
        # Obtaining the type of the subscript
        int_621579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 41), 'int')
        # Getting the type of 'x' (line 1723)
        x_621580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 33), 'x')
        # Obtaining the member 'shape' of a type (line 1723)
        shape_621581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 33), x_621580, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1723)
        getitem___621582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 33), shape_621581, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1723)
        subscript_call_result_621583 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 33), getitem___621582, int_621579)
        
        # Applying the binary operator '==' (line 1723)
        result_eq_621584 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 19), '==', subscript_call_result_621578, subscript_call_result_621583)
        
        # Applying the 'not' unary operator (line 1723)
        result_not__621585 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 15), 'not', result_eq_621584)
        
        # Testing the type of an if condition (line 1723)
        if_condition_621586 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1723, 12), result_not__621585)
        # Assigning a type to the variable 'if_condition_621586' (line 1723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 12), 'if_condition_621586', if_condition_621586)
        # SSA begins for if statement (line 1723)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1724)
        # Processing the call arguments (line 1724)
        str_621588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1724, 33), 'str', 'Quantiles must be square if they are two dimensional, but x.shape = %s.')
        
        # Call to str(...): (line 1726)
        # Processing the call arguments (line 1726)
        # Getting the type of 'x' (line 1726)
        x_621590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 39), 'x', False)
        # Obtaining the member 'shape' of a type (line 1726)
        shape_621591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 39), x_621590, 'shape')
        # Processing the call keyword arguments (line 1726)
        kwargs_621592 = {}
        # Getting the type of 'str' (line 1726)
        str_621589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 35), 'str', False)
        # Calling str(args, kwargs) (line 1726)
        str_call_result_621593 = invoke(stypy.reporting.localization.Localization(__file__, 1726, 35), str_621589, *[shape_621591], **kwargs_621592)
        
        # Applying the binary operator '%' (line 1724)
        result_mod_621594 = python_operator(stypy.reporting.localization.Localization(__file__, 1724, 33), '%', str_621588, str_call_result_621593)
        
        # Processing the call keyword arguments (line 1724)
        kwargs_621595 = {}
        # Getting the type of 'ValueError' (line 1724)
        ValueError_621587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1724)
        ValueError_call_result_621596 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 22), ValueError_621587, *[result_mod_621594], **kwargs_621595)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1724, 16), ValueError_call_result_621596, 'raise parameter', BaseException)
        # SSA join for if statement (line 1723)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 1727):
        
        # Assigning a Subscript to a Name (line 1727):
        
        # Obtaining the type of the subscript
        slice_621597 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1727, 16), None, None, None)
        slice_621598 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1727, 16), None, None, None)
        # Getting the type of 'np' (line 1727)
        np_621599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 24), 'np')
        # Obtaining the member 'newaxis' of a type (line 1727)
        newaxis_621600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1727, 24), np_621599, 'newaxis')
        # Getting the type of 'x' (line 1727)
        x_621601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 16), 'x')
        # Obtaining the member '__getitem__' of a type (line 1727)
        getitem___621602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1727, 16), x_621601, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1727)
        subscript_call_result_621603 = invoke(stypy.reporting.localization.Localization(__file__, 1727, 16), getitem___621602, (slice_621597, slice_621598, newaxis_621600))
        
        # Assigning a type to the variable 'x' (line 1727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 12), 'x', subscript_call_result_621603)
        # SSA branch for the else part of an if statement (line 1722)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 1728)
        x_621604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 13), 'x')
        # Obtaining the member 'ndim' of a type (line 1728)
        ndim_621605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 13), x_621604, 'ndim')
        int_621606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 23), 'int')
        # Applying the binary operator '==' (line 1728)
        result_eq_621607 = python_operator(stypy.reporting.localization.Localization(__file__, 1728, 13), '==', ndim_621605, int_621606)
        
        # Testing the type of an if condition (line 1728)
        if_condition_621608 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1728, 13), result_eq_621607)
        # Assigning a type to the variable 'if_condition_621608' (line 1728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 13), 'if_condition_621608', if_condition_621608)
        # SSA begins for if statement (line 1728)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        
        # Obtaining the type of the subscript
        int_621609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1729, 27), 'int')
        # Getting the type of 'x' (line 1729)
        x_621610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 19), 'x')
        # Obtaining the member 'shape' of a type (line 1729)
        shape_621611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1729, 19), x_621610, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1729)
        getitem___621612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1729, 19), shape_621611, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1729)
        subscript_call_result_621613 = invoke(stypy.reporting.localization.Localization(__file__, 1729, 19), getitem___621612, int_621609)
        
        
        # Obtaining the type of the subscript
        int_621614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1729, 41), 'int')
        # Getting the type of 'x' (line 1729)
        x_621615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 33), 'x')
        # Obtaining the member 'shape' of a type (line 1729)
        shape_621616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1729, 33), x_621615, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1729)
        getitem___621617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1729, 33), shape_621616, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1729)
        subscript_call_result_621618 = invoke(stypy.reporting.localization.Localization(__file__, 1729, 33), getitem___621617, int_621614)
        
        # Applying the binary operator '==' (line 1729)
        result_eq_621619 = python_operator(stypy.reporting.localization.Localization(__file__, 1729, 19), '==', subscript_call_result_621613, subscript_call_result_621618)
        
        # Applying the 'not' unary operator (line 1729)
        result_not__621620 = python_operator(stypy.reporting.localization.Localization(__file__, 1729, 15), 'not', result_eq_621619)
        
        # Testing the type of an if condition (line 1729)
        if_condition_621621 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1729, 12), result_not__621620)
        # Assigning a type to the variable 'if_condition_621621' (line 1729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1729, 12), 'if_condition_621621', if_condition_621621)
        # SSA begins for if statement (line 1729)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1730)
        # Processing the call arguments (line 1730)
        str_621623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1730, 33), 'str', 'Quantiles must be square in the first two dimensions if they are three dimensional, but x.shape = %s.')
        
        # Call to str(...): (line 1732)
        # Processing the call arguments (line 1732)
        # Getting the type of 'x' (line 1732)
        x_621625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 61), 'x', False)
        # Obtaining the member 'shape' of a type (line 1732)
        shape_621626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 61), x_621625, 'shape')
        # Processing the call keyword arguments (line 1732)
        kwargs_621627 = {}
        # Getting the type of 'str' (line 1732)
        str_621624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 57), 'str', False)
        # Calling str(args, kwargs) (line 1732)
        str_call_result_621628 = invoke(stypy.reporting.localization.Localization(__file__, 1732, 57), str_621624, *[shape_621626], **kwargs_621627)
        
        # Applying the binary operator '%' (line 1730)
        result_mod_621629 = python_operator(stypy.reporting.localization.Localization(__file__, 1730, 33), '%', str_621623, str_call_result_621628)
        
        # Processing the call keyword arguments (line 1730)
        kwargs_621630 = {}
        # Getting the type of 'ValueError' (line 1730)
        ValueError_621622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1730)
        ValueError_call_result_621631 = invoke(stypy.reporting.localization.Localization(__file__, 1730, 22), ValueError_621622, *[result_mod_621629], **kwargs_621630)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1730, 16), ValueError_call_result_621631, 'raise parameter', BaseException)
        # SSA join for if statement (line 1729)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1728)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 1733)
        x_621632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 13), 'x')
        # Obtaining the member 'ndim' of a type (line 1733)
        ndim_621633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1733, 13), x_621632, 'ndim')
        int_621634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1733, 22), 'int')
        # Applying the binary operator '>' (line 1733)
        result_gt_621635 = python_operator(stypy.reporting.localization.Localization(__file__, 1733, 13), '>', ndim_621633, int_621634)
        
        # Testing the type of an if condition (line 1733)
        if_condition_621636 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1733, 13), result_gt_621635)
        # Assigning a type to the variable 'if_condition_621636' (line 1733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 13), 'if_condition_621636', if_condition_621636)
        # SSA begins for if statement (line 1733)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1734)
        # Processing the call arguments (line 1734)
        str_621638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1734, 29), 'str', 'Quantiles must be at most two-dimensional with an additional dimension for multiplecomponents, but x.ndim = %d')
        # Getting the type of 'x' (line 1736)
        x_621639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 61), 'x', False)
        # Obtaining the member 'ndim' of a type (line 1736)
        ndim_621640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 61), x_621639, 'ndim')
        # Applying the binary operator '%' (line 1734)
        result_mod_621641 = python_operator(stypy.reporting.localization.Localization(__file__, 1734, 29), '%', str_621638, ndim_621640)
        
        # Processing the call keyword arguments (line 1734)
        kwargs_621642 = {}
        # Getting the type of 'ValueError' (line 1734)
        ValueError_621637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1734)
        ValueError_call_result_621643 = invoke(stypy.reporting.localization.Localization(__file__, 1734, 18), ValueError_621637, *[result_mod_621641], **kwargs_621642)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1734, 12), ValueError_call_result_621643, 'raise parameter', BaseException)
        # SSA join for if statement (line 1733)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1728)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1722)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1717)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        
        # Obtaining the type of the subscript
        int_621644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 23), 'int')
        int_621645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 25), 'int')
        slice_621646 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1739, 15), int_621644, int_621645, None)
        # Getting the type of 'x' (line 1739)
        x_621647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 15), 'x')
        # Obtaining the member 'shape' of a type (line 1739)
        shape_621648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1739, 15), x_621647, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1739)
        getitem___621649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1739, 15), shape_621648, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1739)
        subscript_call_result_621650 = invoke(stypy.reporting.localization.Localization(__file__, 1739, 15), getitem___621649, slice_621646)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1739)
        tuple_621651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1739)
        # Adding element type (line 1739)
        # Getting the type of 'dim' (line 1739)
        dim_621652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 32), 'dim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1739, 32), tuple_621651, dim_621652)
        # Adding element type (line 1739)
        # Getting the type of 'dim' (line 1739)
        dim_621653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 37), 'dim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1739, 32), tuple_621651, dim_621653)
        
        # Applying the binary operator '==' (line 1739)
        result_eq_621654 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 15), '==', subscript_call_result_621650, tuple_621651)
        
        # Applying the 'not' unary operator (line 1739)
        result_not__621655 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 11), 'not', result_eq_621654)
        
        # Testing the type of an if condition (line 1739)
        if_condition_621656 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1739, 8), result_not__621655)
        # Assigning a type to the variable 'if_condition_621656' (line 1739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1739, 8), 'if_condition_621656', if_condition_621656)
        # SSA begins for if statement (line 1739)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1740)
        # Processing the call arguments (line 1740)
        str_621658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 29), 'str', 'Quantiles have incompatible dimensions: should be %s, got %s.')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1741)
        tuple_621659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1741)
        # Adding element type (line 1741)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1741)
        tuple_621660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 51), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1741)
        # Adding element type (line 1741)
        # Getting the type of 'dim' (line 1741)
        dim_621661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 51), 'dim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1741, 51), tuple_621660, dim_621661)
        # Adding element type (line 1741)
        # Getting the type of 'dim' (line 1741)
        dim_621662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 56), 'dim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1741, 51), tuple_621660, dim_621662)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1741, 50), tuple_621659, tuple_621660)
        # Adding element type (line 1741)
        
        # Obtaining the type of the subscript
        int_621663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 70), 'int')
        int_621664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 72), 'int')
        slice_621665 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1741, 62), int_621663, int_621664, None)
        # Getting the type of 'x' (line 1741)
        x_621666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 62), 'x', False)
        # Obtaining the member 'shape' of a type (line 1741)
        shape_621667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 62), x_621666, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1741)
        getitem___621668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 62), shape_621667, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1741)
        subscript_call_result_621669 = invoke(stypy.reporting.localization.Localization(__file__, 1741, 62), getitem___621668, slice_621665)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1741, 50), tuple_621659, subscript_call_result_621669)
        
        # Applying the binary operator '%' (line 1740)
        result_mod_621670 = python_operator(stypy.reporting.localization.Localization(__file__, 1740, 29), '%', str_621658, tuple_621659)
        
        # Processing the call keyword arguments (line 1740)
        kwargs_621671 = {}
        # Getting the type of 'ValueError' (line 1740)
        ValueError_621657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1740)
        ValueError_call_result_621672 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 18), ValueError_621657, *[result_mod_621670], **kwargs_621671)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1740, 12), ValueError_call_result_621672, 'raise parameter', BaseException)
        # SSA join for if statement (line 1739)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'x' (line 1743)
        x_621673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 15), 'x')
        # Assigning a type to the variable 'stypy_return_type' (line 1743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'stypy_return_type', x_621673)
        
        # ################# End of '_process_quantiles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_quantiles' in the type store
        # Getting the type of 'stypy_return_type' (line 1708)
        stypy_return_type_621674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621674)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_quantiles'
        return stypy_return_type_621674


    @norecursion
    def _process_size(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_size'
        module_type_store = module_type_store.open_function_context('_process_size', 1745, 4, False)
        # Assigning a type to the variable 'self' (line 1746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen._process_size.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen._process_size.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen._process_size.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen._process_size.__dict__.__setitem__('stypy_function_name', 'wishart_gen._process_size')
        wishart_gen._process_size.__dict__.__setitem__('stypy_param_names_list', ['size'])
        wishart_gen._process_size.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen._process_size.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen._process_size.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen._process_size.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen._process_size.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen._process_size.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen._process_size', ['size'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_size', localization, ['size'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_size(...)' code ##################

        
        # Assigning a Call to a Name (line 1746):
        
        # Assigning a Call to a Name (line 1746):
        
        # Call to asarray(...): (line 1746)
        # Processing the call arguments (line 1746)
        # Getting the type of 'size' (line 1746)
        size_621677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 26), 'size', False)
        # Processing the call keyword arguments (line 1746)
        kwargs_621678 = {}
        # Getting the type of 'np' (line 1746)
        np_621675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 15), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1746)
        asarray_621676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1746, 15), np_621675, 'asarray')
        # Calling asarray(args, kwargs) (line 1746)
        asarray_call_result_621679 = invoke(stypy.reporting.localization.Localization(__file__, 1746, 15), asarray_621676, *[size_621677], **kwargs_621678)
        
        # Assigning a type to the variable 'size' (line 1746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 8), 'size', asarray_call_result_621679)
        
        
        # Getting the type of 'size' (line 1748)
        size_621680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 11), 'size')
        # Obtaining the member 'ndim' of a type (line 1748)
        ndim_621681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 11), size_621680, 'ndim')
        int_621682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 24), 'int')
        # Applying the binary operator '==' (line 1748)
        result_eq_621683 = python_operator(stypy.reporting.localization.Localization(__file__, 1748, 11), '==', ndim_621681, int_621682)
        
        # Testing the type of an if condition (line 1748)
        if_condition_621684 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1748, 8), result_eq_621683)
        # Assigning a type to the variable 'if_condition_621684' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'if_condition_621684', if_condition_621684)
        # SSA begins for if statement (line 1748)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1749):
        
        # Assigning a Subscript to a Name (line 1749):
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 1749)
        np_621685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 24), 'np')
        # Obtaining the member 'newaxis' of a type (line 1749)
        newaxis_621686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 24), np_621685, 'newaxis')
        # Getting the type of 'size' (line 1749)
        size_621687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 19), 'size')
        # Obtaining the member '__getitem__' of a type (line 1749)
        getitem___621688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 19), size_621687, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1749)
        subscript_call_result_621689 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 19), getitem___621688, newaxis_621686)
        
        # Assigning a type to the variable 'size' (line 1749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 12), 'size', subscript_call_result_621689)
        # SSA branch for the else part of an if statement (line 1748)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'size' (line 1750)
        size_621690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 13), 'size')
        # Obtaining the member 'ndim' of a type (line 1750)
        ndim_621691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1750, 13), size_621690, 'ndim')
        int_621692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1750, 25), 'int')
        # Applying the binary operator '>' (line 1750)
        result_gt_621693 = python_operator(stypy.reporting.localization.Localization(__file__, 1750, 13), '>', ndim_621691, int_621692)
        
        # Testing the type of an if condition (line 1750)
        if_condition_621694 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1750, 13), result_gt_621693)
        # Assigning a type to the variable 'if_condition_621694' (line 1750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1750, 13), 'if_condition_621694', if_condition_621694)
        # SSA begins for if statement (line 1750)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1751)
        # Processing the call arguments (line 1751)
        str_621696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1751, 29), 'str', 'Size must be an integer or tuple of integers; thus must have dimension <= 1. Got size.ndim = %s')
        
        # Call to str(...): (line 1753)
        # Processing the call arguments (line 1753)
        
        # Call to tuple(...): (line 1753)
        # Processing the call arguments (line 1753)
        # Getting the type of 'size' (line 1753)
        size_621699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 63), 'size', False)
        # Processing the call keyword arguments (line 1753)
        kwargs_621700 = {}
        # Getting the type of 'tuple' (line 1753)
        tuple_621698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 57), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1753)
        tuple_call_result_621701 = invoke(stypy.reporting.localization.Localization(__file__, 1753, 57), tuple_621698, *[size_621699], **kwargs_621700)
        
        # Processing the call keyword arguments (line 1753)
        kwargs_621702 = {}
        # Getting the type of 'str' (line 1753)
        str_621697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 53), 'str', False)
        # Calling str(args, kwargs) (line 1753)
        str_call_result_621703 = invoke(stypy.reporting.localization.Localization(__file__, 1753, 53), str_621697, *[tuple_call_result_621701], **kwargs_621702)
        
        # Applying the binary operator '%' (line 1751)
        result_mod_621704 = python_operator(stypy.reporting.localization.Localization(__file__, 1751, 29), '%', str_621696, str_call_result_621703)
        
        # Processing the call keyword arguments (line 1751)
        kwargs_621705 = {}
        # Getting the type of 'ValueError' (line 1751)
        ValueError_621695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1751)
        ValueError_call_result_621706 = invoke(stypy.reporting.localization.Localization(__file__, 1751, 18), ValueError_621695, *[result_mod_621704], **kwargs_621705)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1751, 12), ValueError_call_result_621706, 'raise parameter', BaseException)
        # SSA join for if statement (line 1750)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1748)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1754):
        
        # Assigning a Call to a Name (line 1754):
        
        # Call to prod(...): (line 1754)
        # Processing the call keyword arguments (line 1754)
        kwargs_621709 = {}
        # Getting the type of 'size' (line 1754)
        size_621707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 12), 'size', False)
        # Obtaining the member 'prod' of a type (line 1754)
        prod_621708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1754, 12), size_621707, 'prod')
        # Calling prod(args, kwargs) (line 1754)
        prod_call_result_621710 = invoke(stypy.reporting.localization.Localization(__file__, 1754, 12), prod_621708, *[], **kwargs_621709)
        
        # Assigning a type to the variable 'n' (line 1754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 8), 'n', prod_call_result_621710)
        
        # Assigning a Call to a Name (line 1755):
        
        # Assigning a Call to a Name (line 1755):
        
        # Call to tuple(...): (line 1755)
        # Processing the call arguments (line 1755)
        # Getting the type of 'size' (line 1755)
        size_621712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 22), 'size', False)
        # Processing the call keyword arguments (line 1755)
        kwargs_621713 = {}
        # Getting the type of 'tuple' (line 1755)
        tuple_621711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 16), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1755)
        tuple_call_result_621714 = invoke(stypy.reporting.localization.Localization(__file__, 1755, 16), tuple_621711, *[size_621712], **kwargs_621713)
        
        # Assigning a type to the variable 'shape' (line 1755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1755, 8), 'shape', tuple_call_result_621714)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1757)
        tuple_621715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1757)
        # Adding element type (line 1757)
        # Getting the type of 'n' (line 1757)
        n_621716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 15), 'n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1757, 15), tuple_621715, n_621716)
        # Adding element type (line 1757)
        # Getting the type of 'shape' (line 1757)
        shape_621717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 18), 'shape')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1757, 15), tuple_621715, shape_621717)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1757, 8), 'stypy_return_type', tuple_621715)
        
        # ################# End of '_process_size(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_size' in the type store
        # Getting the type of 'stypy_return_type' (line 1745)
        stypy_return_type_621718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621718)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_size'
        return stypy_return_type_621718


    @norecursion
    def _logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_logpdf'
        module_type_store = module_type_store.open_function_context('_logpdf', 1759, 4, False)
        # Assigning a type to the variable 'self' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen._logpdf.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen._logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen._logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen._logpdf.__dict__.__setitem__('stypy_function_name', 'wishart_gen._logpdf')
        wishart_gen._logpdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'dim', 'df', 'scale', 'log_det_scale', 'C'])
        wishart_gen._logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen._logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen._logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen._logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen._logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen._logpdf.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen._logpdf', ['x', 'dim', 'df', 'scale', 'log_det_scale', 'C'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_logpdf', localization, ['x', 'dim', 'df', 'scale', 'log_det_scale', 'C'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_logpdf(...)' code ##################

        str_621719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1782, (-1)), 'str', "\n        Parameters\n        ----------\n        x : ndarray\n            Points at which to evaluate the log of the probability\n            density function\n        dim : int\n            Dimension of the scale matrix\n        df : int\n            Degrees of freedom\n        scale : ndarray\n            Scale matrix\n        log_det_scale : float\n            Logarithm of the determinant of the scale matrix\n        C : ndarray\n            Cholesky factorization of the scale matrix, lower triagular.\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'logpdf' instead.\n\n        ")
        
        # Assigning a Call to a Name (line 1789):
        
        # Assigning a Call to a Name (line 1789):
        
        # Call to zeros(...): (line 1789)
        # Processing the call arguments (line 1789)
        
        # Obtaining the type of the subscript
        int_621722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1789, 37), 'int')
        # Getting the type of 'x' (line 1789)
        x_621723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 29), 'x', False)
        # Obtaining the member 'shape' of a type (line 1789)
        shape_621724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 29), x_621723, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1789)
        getitem___621725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 29), shape_621724, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1789)
        subscript_call_result_621726 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 29), getitem___621725, int_621722)
        
        # Processing the call keyword arguments (line 1789)
        kwargs_621727 = {}
        # Getting the type of 'np' (line 1789)
        np_621720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 20), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1789)
        zeros_621721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 20), np_621720, 'zeros')
        # Calling zeros(args, kwargs) (line 1789)
        zeros_call_result_621728 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 20), zeros_621721, *[subscript_call_result_621726], **kwargs_621727)
        
        # Assigning a type to the variable 'log_det_x' (line 1789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'log_det_x', zeros_call_result_621728)
        
        # Assigning a Call to a Name (line 1790):
        
        # Assigning a Call to a Name (line 1790):
        
        # Call to zeros(...): (line 1790)
        # Processing the call arguments (line 1790)
        # Getting the type of 'x' (line 1790)
        x_621731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 31), 'x', False)
        # Obtaining the member 'shape' of a type (line 1790)
        shape_621732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 31), x_621731, 'shape')
        # Processing the call keyword arguments (line 1790)
        kwargs_621733 = {}
        # Getting the type of 'np' (line 1790)
        np_621729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 22), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1790)
        zeros_621730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 22), np_621729, 'zeros')
        # Calling zeros(args, kwargs) (line 1790)
        zeros_call_result_621734 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 22), zeros_621730, *[shape_621732], **kwargs_621733)
        
        # Assigning a type to the variable 'scale_inv_x' (line 1790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 8), 'scale_inv_x', zeros_call_result_621734)
        
        # Assigning a Call to a Name (line 1791):
        
        # Assigning a Call to a Name (line 1791):
        
        # Call to zeros(...): (line 1791)
        # Processing the call arguments (line 1791)
        
        # Obtaining the type of the subscript
        int_621737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1791, 42), 'int')
        # Getting the type of 'x' (line 1791)
        x_621738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 34), 'x', False)
        # Obtaining the member 'shape' of a type (line 1791)
        shape_621739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 34), x_621738, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1791)
        getitem___621740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 34), shape_621739, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1791)
        subscript_call_result_621741 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 34), getitem___621740, int_621737)
        
        # Processing the call keyword arguments (line 1791)
        kwargs_621742 = {}
        # Getting the type of 'np' (line 1791)
        np_621735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 25), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1791)
        zeros_621736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 25), np_621735, 'zeros')
        # Calling zeros(args, kwargs) (line 1791)
        zeros_call_result_621743 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 25), zeros_621736, *[subscript_call_result_621741], **kwargs_621742)
        
        # Assigning a type to the variable 'tr_scale_inv_x' (line 1791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1791, 8), 'tr_scale_inv_x', zeros_call_result_621743)
        
        
        # Call to range(...): (line 1792)
        # Processing the call arguments (line 1792)
        
        # Obtaining the type of the subscript
        int_621745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1792, 31), 'int')
        # Getting the type of 'x' (line 1792)
        x_621746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 23), 'x', False)
        # Obtaining the member 'shape' of a type (line 1792)
        shape_621747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 23), x_621746, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1792)
        getitem___621748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 23), shape_621747, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1792)
        subscript_call_result_621749 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 23), getitem___621748, int_621745)
        
        # Processing the call keyword arguments (line 1792)
        kwargs_621750 = {}
        # Getting the type of 'range' (line 1792)
        range_621744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 17), 'range', False)
        # Calling range(args, kwargs) (line 1792)
        range_call_result_621751 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 17), range_621744, *[subscript_call_result_621749], **kwargs_621750)
        
        # Testing the type of a for loop iterable (line 1792)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1792, 8), range_call_result_621751)
        # Getting the type of the for loop variable (line 1792)
        for_loop_var_621752 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1792, 8), range_call_result_621751)
        # Assigning a type to the variable 'i' (line 1792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 8), 'i', for_loop_var_621752)
        # SSA begins for a for statement (line 1792)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Tuple (line 1793):
        
        # Assigning a Subscript to a Name (line 1793):
        
        # Obtaining the type of the subscript
        int_621753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, 12), 'int')
        
        # Call to _cholesky_logdet(...): (line 1793)
        # Processing the call arguments (line 1793)
        
        # Obtaining the type of the subscript
        slice_621756 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1793, 52), None, None, None)
        slice_621757 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1793, 52), None, None, None)
        # Getting the type of 'i' (line 1793)
        i_621758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 58), 'i', False)
        # Getting the type of 'x' (line 1793)
        x_621759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 52), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 1793)
        getitem___621760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 52), x_621759, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1793)
        subscript_call_result_621761 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 52), getitem___621760, (slice_621756, slice_621757, i_621758))
        
        # Processing the call keyword arguments (line 1793)
        kwargs_621762 = {}
        # Getting the type of 'self' (line 1793)
        self_621754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 30), 'self', False)
        # Obtaining the member '_cholesky_logdet' of a type (line 1793)
        _cholesky_logdet_621755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 30), self_621754, '_cholesky_logdet')
        # Calling _cholesky_logdet(args, kwargs) (line 1793)
        _cholesky_logdet_call_result_621763 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 30), _cholesky_logdet_621755, *[subscript_call_result_621761], **kwargs_621762)
        
        # Obtaining the member '__getitem__' of a type (line 1793)
        getitem___621764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 12), _cholesky_logdet_call_result_621763, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1793)
        subscript_call_result_621765 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 12), getitem___621764, int_621753)
        
        # Assigning a type to the variable 'tuple_var_assignment_618607' (line 1793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 12), 'tuple_var_assignment_618607', subscript_call_result_621765)
        
        # Assigning a Subscript to a Name (line 1793):
        
        # Obtaining the type of the subscript
        int_621766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, 12), 'int')
        
        # Call to _cholesky_logdet(...): (line 1793)
        # Processing the call arguments (line 1793)
        
        # Obtaining the type of the subscript
        slice_621769 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1793, 52), None, None, None)
        slice_621770 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1793, 52), None, None, None)
        # Getting the type of 'i' (line 1793)
        i_621771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 58), 'i', False)
        # Getting the type of 'x' (line 1793)
        x_621772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 52), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 1793)
        getitem___621773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 52), x_621772, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1793)
        subscript_call_result_621774 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 52), getitem___621773, (slice_621769, slice_621770, i_621771))
        
        # Processing the call keyword arguments (line 1793)
        kwargs_621775 = {}
        # Getting the type of 'self' (line 1793)
        self_621767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 30), 'self', False)
        # Obtaining the member '_cholesky_logdet' of a type (line 1793)
        _cholesky_logdet_621768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 30), self_621767, '_cholesky_logdet')
        # Calling _cholesky_logdet(args, kwargs) (line 1793)
        _cholesky_logdet_call_result_621776 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 30), _cholesky_logdet_621768, *[subscript_call_result_621774], **kwargs_621775)
        
        # Obtaining the member '__getitem__' of a type (line 1793)
        getitem___621777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 12), _cholesky_logdet_call_result_621776, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1793)
        subscript_call_result_621778 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 12), getitem___621777, int_621766)
        
        # Assigning a type to the variable 'tuple_var_assignment_618608' (line 1793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 12), 'tuple_var_assignment_618608', subscript_call_result_621778)
        
        # Assigning a Name to a Name (line 1793):
        # Getting the type of 'tuple_var_assignment_618607' (line 1793)
        tuple_var_assignment_618607_621779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 12), 'tuple_var_assignment_618607')
        # Assigning a type to the variable '_' (line 1793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 12), '_', tuple_var_assignment_618607_621779)
        
        # Assigning a Name to a Subscript (line 1793):
        # Getting the type of 'tuple_var_assignment_618608' (line 1793)
        tuple_var_assignment_618608_621780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 12), 'tuple_var_assignment_618608')
        # Getting the type of 'log_det_x' (line 1793)
        log_det_x_621781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 15), 'log_det_x')
        # Getting the type of 'i' (line 1793)
        i_621782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 25), 'i')
        # Storing an element on a container (line 1793)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1793, 15), log_det_x_621781, (i_621782, tuple_var_assignment_618608_621780))
        
        # Assigning a Call to a Subscript (line 1794):
        
        # Assigning a Call to a Subscript (line 1794):
        
        # Call to cho_solve(...): (line 1794)
        # Processing the call arguments (line 1794)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1794)
        tuple_621786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1794, 57), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1794)
        # Adding element type (line 1794)
        # Getting the type of 'C' (line 1794)
        C_621787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 57), 'C', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1794, 57), tuple_621786, C_621787)
        # Adding element type (line 1794)
        # Getting the type of 'True' (line 1794)
        True_621788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 60), 'True', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1794, 57), tuple_621786, True_621788)
        
        
        # Obtaining the type of the subscript
        slice_621789 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1794, 67), None, None, None)
        slice_621790 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1794, 67), None, None, None)
        # Getting the type of 'i' (line 1794)
        i_621791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 73), 'i', False)
        # Getting the type of 'x' (line 1794)
        x_621792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 67), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 1794)
        getitem___621793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 67), x_621792, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1794)
        subscript_call_result_621794 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 67), getitem___621793, (slice_621789, slice_621790, i_621791))
        
        # Processing the call keyword arguments (line 1794)
        kwargs_621795 = {}
        # Getting the type of 'scipy' (line 1794)
        scipy_621783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 33), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 1794)
        linalg_621784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 33), scipy_621783, 'linalg')
        # Obtaining the member 'cho_solve' of a type (line 1794)
        cho_solve_621785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 33), linalg_621784, 'cho_solve')
        # Calling cho_solve(args, kwargs) (line 1794)
        cho_solve_call_result_621796 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 33), cho_solve_621785, *[tuple_621786, subscript_call_result_621794], **kwargs_621795)
        
        # Getting the type of 'scale_inv_x' (line 1794)
        scale_inv_x_621797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 12), 'scale_inv_x')
        slice_621798 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1794, 12), None, None, None)
        slice_621799 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1794, 12), None, None, None)
        # Getting the type of 'i' (line 1794)
        i_621800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 28), 'i')
        # Storing an element on a container (line 1794)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1794, 12), scale_inv_x_621797, ((slice_621798, slice_621799, i_621800), cho_solve_call_result_621796))
        
        # Assigning a Call to a Subscript (line 1795):
        
        # Assigning a Call to a Subscript (line 1795):
        
        # Call to trace(...): (line 1795)
        # Processing the call keyword arguments (line 1795)
        kwargs_621808 = {}
        
        # Obtaining the type of the subscript
        slice_621801 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1795, 32), None, None, None)
        slice_621802 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1795, 32), None, None, None)
        # Getting the type of 'i' (line 1795)
        i_621803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 48), 'i', False)
        # Getting the type of 'scale_inv_x' (line 1795)
        scale_inv_x_621804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 32), 'scale_inv_x', False)
        # Obtaining the member '__getitem__' of a type (line 1795)
        getitem___621805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 32), scale_inv_x_621804, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1795)
        subscript_call_result_621806 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 32), getitem___621805, (slice_621801, slice_621802, i_621803))
        
        # Obtaining the member 'trace' of a type (line 1795)
        trace_621807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 32), subscript_call_result_621806, 'trace')
        # Calling trace(args, kwargs) (line 1795)
        trace_call_result_621809 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 32), trace_621807, *[], **kwargs_621808)
        
        # Getting the type of 'tr_scale_inv_x' (line 1795)
        tr_scale_inv_x_621810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 12), 'tr_scale_inv_x')
        # Getting the type of 'i' (line 1795)
        i_621811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 27), 'i')
        # Storing an element on a container (line 1795)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1795, 12), tr_scale_inv_x_621810, (i_621811, trace_call_result_621809))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1798):
        
        # Assigning a BinOp to a Name (line 1798):
        float_621812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 16), 'float')
        # Getting the type of 'df' (line 1798)
        df_621813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 23), 'df')
        # Getting the type of 'dim' (line 1798)
        dim_621814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 28), 'dim')
        # Applying the binary operator '-' (line 1798)
        result_sub_621815 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 23), '-', df_621813, dim_621814)
        
        int_621816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 34), 'int')
        # Applying the binary operator '-' (line 1798)
        result_sub_621817 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 32), '-', result_sub_621815, int_621816)
        
        # Applying the binary operator '*' (line 1798)
        result_mul_621818 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 16), '*', float_621812, result_sub_621817)
        
        # Getting the type of 'log_det_x' (line 1798)
        log_det_x_621819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 39), 'log_det_x')
        # Applying the binary operator '*' (line 1798)
        result_mul_621820 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 37), '*', result_mul_621818, log_det_x_621819)
        
        float_621821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 51), 'float')
        # Getting the type of 'tr_scale_inv_x' (line 1798)
        tr_scale_inv_x_621822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 57), 'tr_scale_inv_x')
        # Applying the binary operator '*' (line 1798)
        result_mul_621823 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 51), '*', float_621821, tr_scale_inv_x_621822)
        
        # Applying the binary operator '-' (line 1798)
        result_sub_621824 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 16), '-', result_mul_621820, result_mul_621823)
        
        float_621825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 16), 'float')
        # Getting the type of 'df' (line 1799)
        df_621826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 22), 'df')
        # Applying the binary operator '*' (line 1799)
        result_mul_621827 = python_operator(stypy.reporting.localization.Localization(__file__, 1799, 16), '*', float_621825, df_621826)
        
        # Getting the type of 'dim' (line 1799)
        dim_621828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 27), 'dim')
        # Applying the binary operator '*' (line 1799)
        result_mul_621829 = python_operator(stypy.reporting.localization.Localization(__file__, 1799, 25), '*', result_mul_621827, dim_621828)
        
        # Getting the type of '_LOG_2' (line 1799)
        _LOG_2_621830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 33), '_LOG_2')
        # Applying the binary operator '*' (line 1799)
        result_mul_621831 = python_operator(stypy.reporting.localization.Localization(__file__, 1799, 31), '*', result_mul_621829, _LOG_2_621830)
        
        float_621832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 42), 'float')
        # Getting the type of 'df' (line 1799)
        df_621833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 48), 'df')
        # Applying the binary operator '*' (line 1799)
        result_mul_621834 = python_operator(stypy.reporting.localization.Localization(__file__, 1799, 42), '*', float_621832, df_621833)
        
        # Getting the type of 'log_det_scale' (line 1799)
        log_det_scale_621835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 53), 'log_det_scale')
        # Applying the binary operator '*' (line 1799)
        result_mul_621836 = python_operator(stypy.reporting.localization.Localization(__file__, 1799, 51), '*', result_mul_621834, log_det_scale_621835)
        
        # Applying the binary operator '+' (line 1799)
        result_add_621837 = python_operator(stypy.reporting.localization.Localization(__file__, 1799, 16), '+', result_mul_621831, result_mul_621836)
        
        
        # Call to multigammaln(...): (line 1800)
        # Processing the call arguments (line 1800)
        float_621839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 29), 'float')
        # Getting the type of 'df' (line 1800)
        df_621840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 33), 'df', False)
        # Applying the binary operator '*' (line 1800)
        result_mul_621841 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 29), '*', float_621839, df_621840)
        
        # Getting the type of 'dim' (line 1800)
        dim_621842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 37), 'dim', False)
        # Processing the call keyword arguments (line 1800)
        kwargs_621843 = {}
        # Getting the type of 'multigammaln' (line 1800)
        multigammaln_621838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 16), 'multigammaln', False)
        # Calling multigammaln(args, kwargs) (line 1800)
        multigammaln_call_result_621844 = invoke(stypy.reporting.localization.Localization(__file__, 1800, 16), multigammaln_621838, *[result_mul_621841, dim_621842], **kwargs_621843)
        
        # Applying the binary operator '+' (line 1799)
        result_add_621845 = python_operator(stypy.reporting.localization.Localization(__file__, 1799, 67), '+', result_add_621837, multigammaln_call_result_621844)
        
        # Applying the binary operator '-' (line 1798)
        result_sub_621846 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 15), '-', result_sub_621824, result_add_621845)
        
        # Assigning a type to the variable 'out' (line 1798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 8), 'out', result_sub_621846)
        # Getting the type of 'out' (line 1802)
        out_621847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 1802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1802, 8), 'stypy_return_type', out_621847)
        
        # ################# End of '_logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1759)
        stypy_return_type_621848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621848)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_logpdf'
        return stypy_return_type_621848


    @norecursion
    def logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'logpdf'
        module_type_store = module_type_store.open_function_context('logpdf', 1804, 4, False)
        # Assigning a type to the variable 'self' (line 1805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen.logpdf.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen.logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen.logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen.logpdf.__dict__.__setitem__('stypy_function_name', 'wishart_gen.logpdf')
        wishart_gen.logpdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'df', 'scale'])
        wishart_gen.logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen.logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen.logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen.logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen.logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen.logpdf.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen.logpdf', ['x', 'df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpdf', localization, ['x', 'df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpdf(...)' code ##################

        str_621849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1824, (-1)), 'str', '\n        Log of the Wishart probability density function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n            Each quantile must be a symmetric positive definite matrix.\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        pdf : ndarray\n            Log of the probability density function evaluated at `x`\n\n        Notes\n        -----\n        %(_doc_callparams_note)s\n\n        ')
        
        # Assigning a Call to a Tuple (line 1825):
        
        # Assigning a Subscript to a Name (line 1825):
        
        # Obtaining the type of the subscript
        int_621850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 8), 'int')
        
        # Call to _process_parameters(...): (line 1825)
        # Processing the call arguments (line 1825)
        # Getting the type of 'df' (line 1825)
        df_621853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 50), 'df', False)
        # Getting the type of 'scale' (line 1825)
        scale_621854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 54), 'scale', False)
        # Processing the call keyword arguments (line 1825)
        kwargs_621855 = {}
        # Getting the type of 'self' (line 1825)
        self_621851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1825)
        _process_parameters_621852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 25), self_621851, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1825)
        _process_parameters_call_result_621856 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 25), _process_parameters_621852, *[df_621853, scale_621854], **kwargs_621855)
        
        # Obtaining the member '__getitem__' of a type (line 1825)
        getitem___621857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 8), _process_parameters_call_result_621856, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1825)
        subscript_call_result_621858 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 8), getitem___621857, int_621850)
        
        # Assigning a type to the variable 'tuple_var_assignment_618609' (line 1825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 8), 'tuple_var_assignment_618609', subscript_call_result_621858)
        
        # Assigning a Subscript to a Name (line 1825):
        
        # Obtaining the type of the subscript
        int_621859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 8), 'int')
        
        # Call to _process_parameters(...): (line 1825)
        # Processing the call arguments (line 1825)
        # Getting the type of 'df' (line 1825)
        df_621862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 50), 'df', False)
        # Getting the type of 'scale' (line 1825)
        scale_621863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 54), 'scale', False)
        # Processing the call keyword arguments (line 1825)
        kwargs_621864 = {}
        # Getting the type of 'self' (line 1825)
        self_621860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1825)
        _process_parameters_621861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 25), self_621860, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1825)
        _process_parameters_call_result_621865 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 25), _process_parameters_621861, *[df_621862, scale_621863], **kwargs_621864)
        
        # Obtaining the member '__getitem__' of a type (line 1825)
        getitem___621866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 8), _process_parameters_call_result_621865, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1825)
        subscript_call_result_621867 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 8), getitem___621866, int_621859)
        
        # Assigning a type to the variable 'tuple_var_assignment_618610' (line 1825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 8), 'tuple_var_assignment_618610', subscript_call_result_621867)
        
        # Assigning a Subscript to a Name (line 1825):
        
        # Obtaining the type of the subscript
        int_621868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 8), 'int')
        
        # Call to _process_parameters(...): (line 1825)
        # Processing the call arguments (line 1825)
        # Getting the type of 'df' (line 1825)
        df_621871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 50), 'df', False)
        # Getting the type of 'scale' (line 1825)
        scale_621872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 54), 'scale', False)
        # Processing the call keyword arguments (line 1825)
        kwargs_621873 = {}
        # Getting the type of 'self' (line 1825)
        self_621869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1825)
        _process_parameters_621870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 25), self_621869, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1825)
        _process_parameters_call_result_621874 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 25), _process_parameters_621870, *[df_621871, scale_621872], **kwargs_621873)
        
        # Obtaining the member '__getitem__' of a type (line 1825)
        getitem___621875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 8), _process_parameters_call_result_621874, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1825)
        subscript_call_result_621876 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 8), getitem___621875, int_621868)
        
        # Assigning a type to the variable 'tuple_var_assignment_618611' (line 1825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 8), 'tuple_var_assignment_618611', subscript_call_result_621876)
        
        # Assigning a Name to a Name (line 1825):
        # Getting the type of 'tuple_var_assignment_618609' (line 1825)
        tuple_var_assignment_618609_621877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 8), 'tuple_var_assignment_618609')
        # Assigning a type to the variable 'dim' (line 1825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 8), 'dim', tuple_var_assignment_618609_621877)
        
        # Assigning a Name to a Name (line 1825):
        # Getting the type of 'tuple_var_assignment_618610' (line 1825)
        tuple_var_assignment_618610_621878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 8), 'tuple_var_assignment_618610')
        # Assigning a type to the variable 'df' (line 1825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 13), 'df', tuple_var_assignment_618610_621878)
        
        # Assigning a Name to a Name (line 1825):
        # Getting the type of 'tuple_var_assignment_618611' (line 1825)
        tuple_var_assignment_618611_621879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 8), 'tuple_var_assignment_618611')
        # Assigning a type to the variable 'scale' (line 1825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 17), 'scale', tuple_var_assignment_618611_621879)
        
        # Assigning a Call to a Name (line 1826):
        
        # Assigning a Call to a Name (line 1826):
        
        # Call to _process_quantiles(...): (line 1826)
        # Processing the call arguments (line 1826)
        # Getting the type of 'x' (line 1826)
        x_621882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 36), 'x', False)
        # Getting the type of 'dim' (line 1826)
        dim_621883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 39), 'dim', False)
        # Processing the call keyword arguments (line 1826)
        kwargs_621884 = {}
        # Getting the type of 'self' (line 1826)
        self_621880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 12), 'self', False)
        # Obtaining the member '_process_quantiles' of a type (line 1826)
        _process_quantiles_621881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1826, 12), self_621880, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 1826)
        _process_quantiles_call_result_621885 = invoke(stypy.reporting.localization.Localization(__file__, 1826, 12), _process_quantiles_621881, *[x_621882, dim_621883], **kwargs_621884)
        
        # Assigning a type to the variable 'x' (line 1826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1826, 8), 'x', _process_quantiles_call_result_621885)
        
        # Assigning a Call to a Tuple (line 1829):
        
        # Assigning a Subscript to a Name (line 1829):
        
        # Obtaining the type of the subscript
        int_621886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, 8), 'int')
        
        # Call to _cholesky_logdet(...): (line 1829)
        # Processing the call arguments (line 1829)
        # Getting the type of 'scale' (line 1829)
        scale_621889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 49), 'scale', False)
        # Processing the call keyword arguments (line 1829)
        kwargs_621890 = {}
        # Getting the type of 'self' (line 1829)
        self_621887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 27), 'self', False)
        # Obtaining the member '_cholesky_logdet' of a type (line 1829)
        _cholesky_logdet_621888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1829, 27), self_621887, '_cholesky_logdet')
        # Calling _cholesky_logdet(args, kwargs) (line 1829)
        _cholesky_logdet_call_result_621891 = invoke(stypy.reporting.localization.Localization(__file__, 1829, 27), _cholesky_logdet_621888, *[scale_621889], **kwargs_621890)
        
        # Obtaining the member '__getitem__' of a type (line 1829)
        getitem___621892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1829, 8), _cholesky_logdet_call_result_621891, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1829)
        subscript_call_result_621893 = invoke(stypy.reporting.localization.Localization(__file__, 1829, 8), getitem___621892, int_621886)
        
        # Assigning a type to the variable 'tuple_var_assignment_618612' (line 1829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1829, 8), 'tuple_var_assignment_618612', subscript_call_result_621893)
        
        # Assigning a Subscript to a Name (line 1829):
        
        # Obtaining the type of the subscript
        int_621894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, 8), 'int')
        
        # Call to _cholesky_logdet(...): (line 1829)
        # Processing the call arguments (line 1829)
        # Getting the type of 'scale' (line 1829)
        scale_621897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 49), 'scale', False)
        # Processing the call keyword arguments (line 1829)
        kwargs_621898 = {}
        # Getting the type of 'self' (line 1829)
        self_621895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 27), 'self', False)
        # Obtaining the member '_cholesky_logdet' of a type (line 1829)
        _cholesky_logdet_621896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1829, 27), self_621895, '_cholesky_logdet')
        # Calling _cholesky_logdet(args, kwargs) (line 1829)
        _cholesky_logdet_call_result_621899 = invoke(stypy.reporting.localization.Localization(__file__, 1829, 27), _cholesky_logdet_621896, *[scale_621897], **kwargs_621898)
        
        # Obtaining the member '__getitem__' of a type (line 1829)
        getitem___621900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1829, 8), _cholesky_logdet_call_result_621899, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1829)
        subscript_call_result_621901 = invoke(stypy.reporting.localization.Localization(__file__, 1829, 8), getitem___621900, int_621894)
        
        # Assigning a type to the variable 'tuple_var_assignment_618613' (line 1829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1829, 8), 'tuple_var_assignment_618613', subscript_call_result_621901)
        
        # Assigning a Name to a Name (line 1829):
        # Getting the type of 'tuple_var_assignment_618612' (line 1829)
        tuple_var_assignment_618612_621902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 8), 'tuple_var_assignment_618612')
        # Assigning a type to the variable 'C' (line 1829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1829, 8), 'C', tuple_var_assignment_618612_621902)
        
        # Assigning a Name to a Name (line 1829):
        # Getting the type of 'tuple_var_assignment_618613' (line 1829)
        tuple_var_assignment_618613_621903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 8), 'tuple_var_assignment_618613')
        # Assigning a type to the variable 'log_det_scale' (line 1829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1829, 11), 'log_det_scale', tuple_var_assignment_618613_621903)
        
        # Assigning a Call to a Name (line 1831):
        
        # Assigning a Call to a Name (line 1831):
        
        # Call to _logpdf(...): (line 1831)
        # Processing the call arguments (line 1831)
        # Getting the type of 'x' (line 1831)
        x_621906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 27), 'x', False)
        # Getting the type of 'dim' (line 1831)
        dim_621907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 30), 'dim', False)
        # Getting the type of 'df' (line 1831)
        df_621908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 35), 'df', False)
        # Getting the type of 'scale' (line 1831)
        scale_621909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 39), 'scale', False)
        # Getting the type of 'log_det_scale' (line 1831)
        log_det_scale_621910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 46), 'log_det_scale', False)
        # Getting the type of 'C' (line 1831)
        C_621911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 61), 'C', False)
        # Processing the call keyword arguments (line 1831)
        kwargs_621912 = {}
        # Getting the type of 'self' (line 1831)
        self_621904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 14), 'self', False)
        # Obtaining the member '_logpdf' of a type (line 1831)
        _logpdf_621905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1831, 14), self_621904, '_logpdf')
        # Calling _logpdf(args, kwargs) (line 1831)
        _logpdf_call_result_621913 = invoke(stypy.reporting.localization.Localization(__file__, 1831, 14), _logpdf_621905, *[x_621906, dim_621907, df_621908, scale_621909, log_det_scale_621910, C_621911], **kwargs_621912)
        
        # Assigning a type to the variable 'out' (line 1831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1831, 8), 'out', _logpdf_call_result_621913)
        
        # Call to _squeeze_output(...): (line 1832)
        # Processing the call arguments (line 1832)
        # Getting the type of 'out' (line 1832)
        out_621915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 31), 'out', False)
        # Processing the call keyword arguments (line 1832)
        kwargs_621916 = {}
        # Getting the type of '_squeeze_output' (line 1832)
        _squeeze_output_621914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 1832)
        _squeeze_output_call_result_621917 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 15), _squeeze_output_621914, *[out_621915], **kwargs_621916)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'stypy_return_type', _squeeze_output_call_result_621917)
        
        # ################# End of 'logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1804)
        stypy_return_type_621918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621918)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpdf'
        return stypy_return_type_621918


    @norecursion
    def pdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pdf'
        module_type_store = module_type_store.open_function_context('pdf', 1834, 4, False)
        # Assigning a type to the variable 'self' (line 1835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1835, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen.pdf.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen.pdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen.pdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen.pdf.__dict__.__setitem__('stypy_function_name', 'wishart_gen.pdf')
        wishart_gen.pdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'df', 'scale'])
        wishart_gen.pdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen.pdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen.pdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen.pdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen.pdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen.pdf.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen.pdf', ['x', 'df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pdf', localization, ['x', 'df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pdf(...)' code ##################

        str_621919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, (-1)), 'str', '\n        Wishart probability density function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n            Each quantile must be a symmetric positive definite matrix.\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        pdf : ndarray\n            Probability density function evaluated at `x`\n\n        Notes\n        -----\n        %(_doc_callparams_note)s\n\n        ')
        
        # Call to exp(...): (line 1855)
        # Processing the call arguments (line 1855)
        
        # Call to logpdf(...): (line 1855)
        # Processing the call arguments (line 1855)
        # Getting the type of 'x' (line 1855)
        x_621924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 34), 'x', False)
        # Getting the type of 'df' (line 1855)
        df_621925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 37), 'df', False)
        # Getting the type of 'scale' (line 1855)
        scale_621926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 41), 'scale', False)
        # Processing the call keyword arguments (line 1855)
        kwargs_621927 = {}
        # Getting the type of 'self' (line 1855)
        self_621922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 22), 'self', False)
        # Obtaining the member 'logpdf' of a type (line 1855)
        logpdf_621923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 22), self_621922, 'logpdf')
        # Calling logpdf(args, kwargs) (line 1855)
        logpdf_call_result_621928 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 22), logpdf_621923, *[x_621924, df_621925, scale_621926], **kwargs_621927)
        
        # Processing the call keyword arguments (line 1855)
        kwargs_621929 = {}
        # Getting the type of 'np' (line 1855)
        np_621920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 15), 'np', False)
        # Obtaining the member 'exp' of a type (line 1855)
        exp_621921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 15), np_621920, 'exp')
        # Calling exp(args, kwargs) (line 1855)
        exp_call_result_621930 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 15), exp_621921, *[logpdf_call_result_621928], **kwargs_621929)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 8), 'stypy_return_type', exp_call_result_621930)
        
        # ################# End of 'pdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pdf' in the type store
        # Getting the type of 'stypy_return_type' (line 1834)
        stypy_return_type_621931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621931)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pdf'
        return stypy_return_type_621931


    @norecursion
    def _mean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_mean'
        module_type_store = module_type_store.open_function_context('_mean', 1857, 4, False)
        # Assigning a type to the variable 'self' (line 1858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1858, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen._mean.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen._mean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen._mean.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen._mean.__dict__.__setitem__('stypy_function_name', 'wishart_gen._mean')
        wishart_gen._mean.__dict__.__setitem__('stypy_param_names_list', ['dim', 'df', 'scale'])
        wishart_gen._mean.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen._mean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen._mean.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen._mean.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen._mean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen._mean.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen._mean', ['dim', 'df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_mean', localization, ['dim', 'df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_mean(...)' code ##################

        str_621932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1870, (-1)), 'str', "\n        Parameters\n        ----------\n        dim : int\n            Dimension of the scale matrix\n        %(_doc_default_callparams)s\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'mean' instead.\n\n        ")
        # Getting the type of 'df' (line 1871)
        df_621933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 15), 'df')
        # Getting the type of 'scale' (line 1871)
        scale_621934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 20), 'scale')
        # Applying the binary operator '*' (line 1871)
        result_mul_621935 = python_operator(stypy.reporting.localization.Localization(__file__, 1871, 15), '*', df_621933, scale_621934)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 8), 'stypy_return_type', result_mul_621935)
        
        # ################# End of '_mean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_mean' in the type store
        # Getting the type of 'stypy_return_type' (line 1857)
        stypy_return_type_621936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621936)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_mean'
        return stypy_return_type_621936


    @norecursion
    def mean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mean'
        module_type_store = module_type_store.open_function_context('mean', 1873, 4, False)
        # Assigning a type to the variable 'self' (line 1874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1874, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen.mean.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen.mean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen.mean.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen.mean.__dict__.__setitem__('stypy_function_name', 'wishart_gen.mean')
        wishart_gen.mean.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale'])
        wishart_gen.mean.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen.mean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen.mean.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen.mean.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen.mean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen.mean.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen.mean', ['df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mean', localization, ['df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mean(...)' code ##################

        str_621937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, (-1)), 'str', '\n        Mean of the Wishart distribution\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        mean : float\n            The mean of the distribution\n        ')
        
        # Assigning a Call to a Tuple (line 1886):
        
        # Assigning a Subscript to a Name (line 1886):
        
        # Obtaining the type of the subscript
        int_621938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 8), 'int')
        
        # Call to _process_parameters(...): (line 1886)
        # Processing the call arguments (line 1886)
        # Getting the type of 'df' (line 1886)
        df_621941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 50), 'df', False)
        # Getting the type of 'scale' (line 1886)
        scale_621942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 54), 'scale', False)
        # Processing the call keyword arguments (line 1886)
        kwargs_621943 = {}
        # Getting the type of 'self' (line 1886)
        self_621939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1886)
        _process_parameters_621940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 25), self_621939, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1886)
        _process_parameters_call_result_621944 = invoke(stypy.reporting.localization.Localization(__file__, 1886, 25), _process_parameters_621940, *[df_621941, scale_621942], **kwargs_621943)
        
        # Obtaining the member '__getitem__' of a type (line 1886)
        getitem___621945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 8), _process_parameters_call_result_621944, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1886)
        subscript_call_result_621946 = invoke(stypy.reporting.localization.Localization(__file__, 1886, 8), getitem___621945, int_621938)
        
        # Assigning a type to the variable 'tuple_var_assignment_618614' (line 1886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 8), 'tuple_var_assignment_618614', subscript_call_result_621946)
        
        # Assigning a Subscript to a Name (line 1886):
        
        # Obtaining the type of the subscript
        int_621947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 8), 'int')
        
        # Call to _process_parameters(...): (line 1886)
        # Processing the call arguments (line 1886)
        # Getting the type of 'df' (line 1886)
        df_621950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 50), 'df', False)
        # Getting the type of 'scale' (line 1886)
        scale_621951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 54), 'scale', False)
        # Processing the call keyword arguments (line 1886)
        kwargs_621952 = {}
        # Getting the type of 'self' (line 1886)
        self_621948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1886)
        _process_parameters_621949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 25), self_621948, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1886)
        _process_parameters_call_result_621953 = invoke(stypy.reporting.localization.Localization(__file__, 1886, 25), _process_parameters_621949, *[df_621950, scale_621951], **kwargs_621952)
        
        # Obtaining the member '__getitem__' of a type (line 1886)
        getitem___621954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 8), _process_parameters_call_result_621953, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1886)
        subscript_call_result_621955 = invoke(stypy.reporting.localization.Localization(__file__, 1886, 8), getitem___621954, int_621947)
        
        # Assigning a type to the variable 'tuple_var_assignment_618615' (line 1886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 8), 'tuple_var_assignment_618615', subscript_call_result_621955)
        
        # Assigning a Subscript to a Name (line 1886):
        
        # Obtaining the type of the subscript
        int_621956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 8), 'int')
        
        # Call to _process_parameters(...): (line 1886)
        # Processing the call arguments (line 1886)
        # Getting the type of 'df' (line 1886)
        df_621959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 50), 'df', False)
        # Getting the type of 'scale' (line 1886)
        scale_621960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 54), 'scale', False)
        # Processing the call keyword arguments (line 1886)
        kwargs_621961 = {}
        # Getting the type of 'self' (line 1886)
        self_621957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1886)
        _process_parameters_621958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 25), self_621957, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1886)
        _process_parameters_call_result_621962 = invoke(stypy.reporting.localization.Localization(__file__, 1886, 25), _process_parameters_621958, *[df_621959, scale_621960], **kwargs_621961)
        
        # Obtaining the member '__getitem__' of a type (line 1886)
        getitem___621963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 8), _process_parameters_call_result_621962, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1886)
        subscript_call_result_621964 = invoke(stypy.reporting.localization.Localization(__file__, 1886, 8), getitem___621963, int_621956)
        
        # Assigning a type to the variable 'tuple_var_assignment_618616' (line 1886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 8), 'tuple_var_assignment_618616', subscript_call_result_621964)
        
        # Assigning a Name to a Name (line 1886):
        # Getting the type of 'tuple_var_assignment_618614' (line 1886)
        tuple_var_assignment_618614_621965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 8), 'tuple_var_assignment_618614')
        # Assigning a type to the variable 'dim' (line 1886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 8), 'dim', tuple_var_assignment_618614_621965)
        
        # Assigning a Name to a Name (line 1886):
        # Getting the type of 'tuple_var_assignment_618615' (line 1886)
        tuple_var_assignment_618615_621966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 8), 'tuple_var_assignment_618615')
        # Assigning a type to the variable 'df' (line 1886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 13), 'df', tuple_var_assignment_618615_621966)
        
        # Assigning a Name to a Name (line 1886):
        # Getting the type of 'tuple_var_assignment_618616' (line 1886)
        tuple_var_assignment_618616_621967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 8), 'tuple_var_assignment_618616')
        # Assigning a type to the variable 'scale' (line 1886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 17), 'scale', tuple_var_assignment_618616_621967)
        
        # Assigning a Call to a Name (line 1887):
        
        # Assigning a Call to a Name (line 1887):
        
        # Call to _mean(...): (line 1887)
        # Processing the call arguments (line 1887)
        # Getting the type of 'dim' (line 1887)
        dim_621970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 25), 'dim', False)
        # Getting the type of 'df' (line 1887)
        df_621971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 30), 'df', False)
        # Getting the type of 'scale' (line 1887)
        scale_621972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 34), 'scale', False)
        # Processing the call keyword arguments (line 1887)
        kwargs_621973 = {}
        # Getting the type of 'self' (line 1887)
        self_621968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 14), 'self', False)
        # Obtaining the member '_mean' of a type (line 1887)
        _mean_621969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 14), self_621968, '_mean')
        # Calling _mean(args, kwargs) (line 1887)
        _mean_call_result_621974 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 14), _mean_621969, *[dim_621970, df_621971, scale_621972], **kwargs_621973)
        
        # Assigning a type to the variable 'out' (line 1887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 8), 'out', _mean_call_result_621974)
        
        # Call to _squeeze_output(...): (line 1888)
        # Processing the call arguments (line 1888)
        # Getting the type of 'out' (line 1888)
        out_621976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 31), 'out', False)
        # Processing the call keyword arguments (line 1888)
        kwargs_621977 = {}
        # Getting the type of '_squeeze_output' (line 1888)
        _squeeze_output_621975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 1888)
        _squeeze_output_call_result_621978 = invoke(stypy.reporting.localization.Localization(__file__, 1888, 15), _squeeze_output_621975, *[out_621976], **kwargs_621977)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1888, 8), 'stypy_return_type', _squeeze_output_call_result_621978)
        
        # ################# End of 'mean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mean' in the type store
        # Getting the type of 'stypy_return_type' (line 1873)
        stypy_return_type_621979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621979)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mean'
        return stypy_return_type_621979


    @norecursion
    def _mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_mode'
        module_type_store = module_type_store.open_function_context('_mode', 1890, 4, False)
        # Assigning a type to the variable 'self' (line 1891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1891, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen._mode.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen._mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen._mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen._mode.__dict__.__setitem__('stypy_function_name', 'wishart_gen._mode')
        wishart_gen._mode.__dict__.__setitem__('stypy_param_names_list', ['dim', 'df', 'scale'])
        wishart_gen._mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen._mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen._mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen._mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen._mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen._mode.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen._mode', ['dim', 'df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_mode', localization, ['dim', 'df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_mode(...)' code ##################

        str_621980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1903, (-1)), 'str', "\n        Parameters\n        ----------\n        dim : int\n            Dimension of the scale matrix\n        %(_doc_default_callparams)s\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'mode' instead.\n\n        ")
        
        
        # Getting the type of 'df' (line 1904)
        df_621981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 11), 'df')
        # Getting the type of 'dim' (line 1904)
        dim_621982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 17), 'dim')
        int_621983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1904, 23), 'int')
        # Applying the binary operator '+' (line 1904)
        result_add_621984 = python_operator(stypy.reporting.localization.Localization(__file__, 1904, 17), '+', dim_621982, int_621983)
        
        # Applying the binary operator '>=' (line 1904)
        result_ge_621985 = python_operator(stypy.reporting.localization.Localization(__file__, 1904, 11), '>=', df_621981, result_add_621984)
        
        # Testing the type of an if condition (line 1904)
        if_condition_621986 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1904, 8), result_ge_621985)
        # Assigning a type to the variable 'if_condition_621986' (line 1904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 8), 'if_condition_621986', if_condition_621986)
        # SSA begins for if statement (line 1904)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1905):
        
        # Assigning a BinOp to a Name (line 1905):
        # Getting the type of 'df' (line 1905)
        df_621987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 19), 'df')
        # Getting the type of 'dim' (line 1905)
        dim_621988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 22), 'dim')
        # Applying the binary operator '-' (line 1905)
        result_sub_621989 = python_operator(stypy.reporting.localization.Localization(__file__, 1905, 19), '-', df_621987, dim_621988)
        
        int_621990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1905, 26), 'int')
        # Applying the binary operator '-' (line 1905)
        result_sub_621991 = python_operator(stypy.reporting.localization.Localization(__file__, 1905, 25), '-', result_sub_621989, int_621990)
        
        # Getting the type of 'scale' (line 1905)
        scale_621992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 31), 'scale')
        # Applying the binary operator '*' (line 1905)
        result_mul_621993 = python_operator(stypy.reporting.localization.Localization(__file__, 1905, 18), '*', result_sub_621991, scale_621992)
        
        # Assigning a type to the variable 'out' (line 1905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1905, 12), 'out', result_mul_621993)
        # SSA branch for the else part of an if statement (line 1904)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1907):
        
        # Assigning a Name to a Name (line 1907):
        # Getting the type of 'None' (line 1907)
        None_621994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 18), 'None')
        # Assigning a type to the variable 'out' (line 1907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 12), 'out', None_621994)
        # SSA join for if statement (line 1904)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 1908)
        out_621995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 1908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1908, 8), 'stypy_return_type', out_621995)
        
        # ################# End of '_mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_mode' in the type store
        # Getting the type of 'stypy_return_type' (line 1890)
        stypy_return_type_621996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_621996)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_mode'
        return stypy_return_type_621996


    @norecursion
    def mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mode'
        module_type_store = module_type_store.open_function_context('mode', 1910, 4, False)
        # Assigning a type to the variable 'self' (line 1911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1911, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen.mode.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen.mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen.mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen.mode.__dict__.__setitem__('stypy_function_name', 'wishart_gen.mode')
        wishart_gen.mode.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale'])
        wishart_gen.mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen.mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen.mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen.mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen.mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen.mode.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen.mode', ['df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mode', localization, ['df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mode(...)' code ##################

        str_621997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1925, (-1)), 'str', '\n        Mode of the Wishart distribution\n\n        Only valid if the degrees of freedom are greater than the dimension of\n        the scale matrix.\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        mode : float or None\n            The Mode of the distribution\n        ')
        
        # Assigning a Call to a Tuple (line 1926):
        
        # Assigning a Subscript to a Name (line 1926):
        
        # Obtaining the type of the subscript
        int_621998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1926, 8), 'int')
        
        # Call to _process_parameters(...): (line 1926)
        # Processing the call arguments (line 1926)
        # Getting the type of 'df' (line 1926)
        df_622001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 50), 'df', False)
        # Getting the type of 'scale' (line 1926)
        scale_622002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 54), 'scale', False)
        # Processing the call keyword arguments (line 1926)
        kwargs_622003 = {}
        # Getting the type of 'self' (line 1926)
        self_621999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1926)
        _process_parameters_622000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 25), self_621999, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1926)
        _process_parameters_call_result_622004 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 25), _process_parameters_622000, *[df_622001, scale_622002], **kwargs_622003)
        
        # Obtaining the member '__getitem__' of a type (line 1926)
        getitem___622005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 8), _process_parameters_call_result_622004, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1926)
        subscript_call_result_622006 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 8), getitem___622005, int_621998)
        
        # Assigning a type to the variable 'tuple_var_assignment_618617' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'tuple_var_assignment_618617', subscript_call_result_622006)
        
        # Assigning a Subscript to a Name (line 1926):
        
        # Obtaining the type of the subscript
        int_622007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1926, 8), 'int')
        
        # Call to _process_parameters(...): (line 1926)
        # Processing the call arguments (line 1926)
        # Getting the type of 'df' (line 1926)
        df_622010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 50), 'df', False)
        # Getting the type of 'scale' (line 1926)
        scale_622011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 54), 'scale', False)
        # Processing the call keyword arguments (line 1926)
        kwargs_622012 = {}
        # Getting the type of 'self' (line 1926)
        self_622008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1926)
        _process_parameters_622009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 25), self_622008, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1926)
        _process_parameters_call_result_622013 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 25), _process_parameters_622009, *[df_622010, scale_622011], **kwargs_622012)
        
        # Obtaining the member '__getitem__' of a type (line 1926)
        getitem___622014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 8), _process_parameters_call_result_622013, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1926)
        subscript_call_result_622015 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 8), getitem___622014, int_622007)
        
        # Assigning a type to the variable 'tuple_var_assignment_618618' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'tuple_var_assignment_618618', subscript_call_result_622015)
        
        # Assigning a Subscript to a Name (line 1926):
        
        # Obtaining the type of the subscript
        int_622016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1926, 8), 'int')
        
        # Call to _process_parameters(...): (line 1926)
        # Processing the call arguments (line 1926)
        # Getting the type of 'df' (line 1926)
        df_622019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 50), 'df', False)
        # Getting the type of 'scale' (line 1926)
        scale_622020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 54), 'scale', False)
        # Processing the call keyword arguments (line 1926)
        kwargs_622021 = {}
        # Getting the type of 'self' (line 1926)
        self_622017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1926)
        _process_parameters_622018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 25), self_622017, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1926)
        _process_parameters_call_result_622022 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 25), _process_parameters_622018, *[df_622019, scale_622020], **kwargs_622021)
        
        # Obtaining the member '__getitem__' of a type (line 1926)
        getitem___622023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 8), _process_parameters_call_result_622022, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1926)
        subscript_call_result_622024 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 8), getitem___622023, int_622016)
        
        # Assigning a type to the variable 'tuple_var_assignment_618619' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'tuple_var_assignment_618619', subscript_call_result_622024)
        
        # Assigning a Name to a Name (line 1926):
        # Getting the type of 'tuple_var_assignment_618617' (line 1926)
        tuple_var_assignment_618617_622025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'tuple_var_assignment_618617')
        # Assigning a type to the variable 'dim' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'dim', tuple_var_assignment_618617_622025)
        
        # Assigning a Name to a Name (line 1926):
        # Getting the type of 'tuple_var_assignment_618618' (line 1926)
        tuple_var_assignment_618618_622026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'tuple_var_assignment_618618')
        # Assigning a type to the variable 'df' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 13), 'df', tuple_var_assignment_618618_622026)
        
        # Assigning a Name to a Name (line 1926):
        # Getting the type of 'tuple_var_assignment_618619' (line 1926)
        tuple_var_assignment_618619_622027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'tuple_var_assignment_618619')
        # Assigning a type to the variable 'scale' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 17), 'scale', tuple_var_assignment_618619_622027)
        
        # Assigning a Call to a Name (line 1927):
        
        # Assigning a Call to a Name (line 1927):
        
        # Call to _mode(...): (line 1927)
        # Processing the call arguments (line 1927)
        # Getting the type of 'dim' (line 1927)
        dim_622030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 25), 'dim', False)
        # Getting the type of 'df' (line 1927)
        df_622031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 30), 'df', False)
        # Getting the type of 'scale' (line 1927)
        scale_622032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 34), 'scale', False)
        # Processing the call keyword arguments (line 1927)
        kwargs_622033 = {}
        # Getting the type of 'self' (line 1927)
        self_622028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 14), 'self', False)
        # Obtaining the member '_mode' of a type (line 1927)
        _mode_622029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1927, 14), self_622028, '_mode')
        # Calling _mode(args, kwargs) (line 1927)
        _mode_call_result_622034 = invoke(stypy.reporting.localization.Localization(__file__, 1927, 14), _mode_622029, *[dim_622030, df_622031, scale_622032], **kwargs_622033)
        
        # Assigning a type to the variable 'out' (line 1927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1927, 8), 'out', _mode_call_result_622034)
        
        
        # Getting the type of 'out' (line 1928)
        out_622035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 39), 'out')
        # Getting the type of 'None' (line 1928)
        None_622036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 50), 'None')
        # Applying the binary operator 'isnot' (line 1928)
        result_is_not_622037 = python_operator(stypy.reporting.localization.Localization(__file__, 1928, 39), 'isnot', out_622035, None_622036)
        
        # Testing the type of an if expression (line 1928)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1928, 15), result_is_not_622037)
        # SSA begins for if expression (line 1928)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to _squeeze_output(...): (line 1928)
        # Processing the call arguments (line 1928)
        # Getting the type of 'out' (line 1928)
        out_622039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 31), 'out', False)
        # Processing the call keyword arguments (line 1928)
        kwargs_622040 = {}
        # Getting the type of '_squeeze_output' (line 1928)
        _squeeze_output_622038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 1928)
        _squeeze_output_call_result_622041 = invoke(stypy.reporting.localization.Localization(__file__, 1928, 15), _squeeze_output_622038, *[out_622039], **kwargs_622040)
        
        # SSA branch for the else part of an if expression (line 1928)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'out' (line 1928)
        out_622042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 60), 'out')
        # SSA join for if expression (line 1928)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_622043 = union_type.UnionType.add(_squeeze_output_call_result_622041, out_622042)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1928, 8), 'stypy_return_type', if_exp_622043)
        
        # ################# End of 'mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mode' in the type store
        # Getting the type of 'stypy_return_type' (line 1910)
        stypy_return_type_622044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622044)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mode'
        return stypy_return_type_622044


    @norecursion
    def _var(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_var'
        module_type_store = module_type_store.open_function_context('_var', 1930, 4, False)
        # Assigning a type to the variable 'self' (line 1931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1931, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen._var.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen._var.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen._var.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen._var.__dict__.__setitem__('stypy_function_name', 'wishart_gen._var')
        wishart_gen._var.__dict__.__setitem__('stypy_param_names_list', ['dim', 'df', 'scale'])
        wishart_gen._var.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen._var.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen._var.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen._var.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen._var.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen._var.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen._var', ['dim', 'df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_var', localization, ['dim', 'df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_var(...)' code ##################

        str_622045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1943, (-1)), 'str', "\n        Parameters\n        ----------\n        dim : int\n            Dimension of the scale matrix\n        %(_doc_default_callparams)s\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'var' instead.\n\n        ")
        
        # Assigning a BinOp to a Name (line 1944):
        
        # Assigning a BinOp to a Name (line 1944):
        # Getting the type of 'scale' (line 1944)
        scale_622046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 14), 'scale')
        int_622047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1944, 21), 'int')
        # Applying the binary operator '**' (line 1944)
        result_pow_622048 = python_operator(stypy.reporting.localization.Localization(__file__, 1944, 14), '**', scale_622046, int_622047)
        
        # Assigning a type to the variable 'var' (line 1944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1944, 8), 'var', result_pow_622048)
        
        # Assigning a Call to a Name (line 1945):
        
        # Assigning a Call to a Name (line 1945):
        
        # Call to diagonal(...): (line 1945)
        # Processing the call keyword arguments (line 1945)
        kwargs_622051 = {}
        # Getting the type of 'scale' (line 1945)
        scale_622049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 15), 'scale', False)
        # Obtaining the member 'diagonal' of a type (line 1945)
        diagonal_622050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1945, 15), scale_622049, 'diagonal')
        # Calling diagonal(args, kwargs) (line 1945)
        diagonal_call_result_622052 = invoke(stypy.reporting.localization.Localization(__file__, 1945, 15), diagonal_622050, *[], **kwargs_622051)
        
        # Assigning a type to the variable 'diag' (line 1945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1945, 8), 'diag', diagonal_call_result_622052)
        
        # Getting the type of 'var' (line 1946)
        var_622053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 8), 'var')
        
        # Call to outer(...): (line 1946)
        # Processing the call arguments (line 1946)
        # Getting the type of 'diag' (line 1946)
        diag_622056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 24), 'diag', False)
        # Getting the type of 'diag' (line 1946)
        diag_622057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 30), 'diag', False)
        # Processing the call keyword arguments (line 1946)
        kwargs_622058 = {}
        # Getting the type of 'np' (line 1946)
        np_622054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 15), 'np', False)
        # Obtaining the member 'outer' of a type (line 1946)
        outer_622055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1946, 15), np_622054, 'outer')
        # Calling outer(args, kwargs) (line 1946)
        outer_call_result_622059 = invoke(stypy.reporting.localization.Localization(__file__, 1946, 15), outer_622055, *[diag_622056, diag_622057], **kwargs_622058)
        
        # Applying the binary operator '+=' (line 1946)
        result_iadd_622060 = python_operator(stypy.reporting.localization.Localization(__file__, 1946, 8), '+=', var_622053, outer_call_result_622059)
        # Assigning a type to the variable 'var' (line 1946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1946, 8), 'var', result_iadd_622060)
        
        
        # Getting the type of 'var' (line 1947)
        var_622061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 8), 'var')
        # Getting the type of 'df' (line 1947)
        df_622062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 15), 'df')
        # Applying the binary operator '*=' (line 1947)
        result_imul_622063 = python_operator(stypy.reporting.localization.Localization(__file__, 1947, 8), '*=', var_622061, df_622062)
        # Assigning a type to the variable 'var' (line 1947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 8), 'var', result_imul_622063)
        
        # Getting the type of 'var' (line 1948)
        var_622064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 15), 'var')
        # Assigning a type to the variable 'stypy_return_type' (line 1948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1948, 8), 'stypy_return_type', var_622064)
        
        # ################# End of '_var(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_var' in the type store
        # Getting the type of 'stypy_return_type' (line 1930)
        stypy_return_type_622065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622065)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_var'
        return stypy_return_type_622065


    @norecursion
    def var(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'var'
        module_type_store = module_type_store.open_function_context('var', 1950, 4, False)
        # Assigning a type to the variable 'self' (line 1951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1951, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen.var.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen.var.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen.var.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen.var.__dict__.__setitem__('stypy_function_name', 'wishart_gen.var')
        wishart_gen.var.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale'])
        wishart_gen.var.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen.var.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen.var.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen.var.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen.var.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen.var.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen.var', ['df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'var', localization, ['df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'var(...)' code ##################

        str_622066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1962, (-1)), 'str', '\n        Variance of the Wishart distribution\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        var : float\n            The variance of the distribution\n        ')
        
        # Assigning a Call to a Tuple (line 1963):
        
        # Assigning a Subscript to a Name (line 1963):
        
        # Obtaining the type of the subscript
        int_622067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1963, 8), 'int')
        
        # Call to _process_parameters(...): (line 1963)
        # Processing the call arguments (line 1963)
        # Getting the type of 'df' (line 1963)
        df_622070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 50), 'df', False)
        # Getting the type of 'scale' (line 1963)
        scale_622071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 54), 'scale', False)
        # Processing the call keyword arguments (line 1963)
        kwargs_622072 = {}
        # Getting the type of 'self' (line 1963)
        self_622068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1963)
        _process_parameters_622069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 25), self_622068, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1963)
        _process_parameters_call_result_622073 = invoke(stypy.reporting.localization.Localization(__file__, 1963, 25), _process_parameters_622069, *[df_622070, scale_622071], **kwargs_622072)
        
        # Obtaining the member '__getitem__' of a type (line 1963)
        getitem___622074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 8), _process_parameters_call_result_622073, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1963)
        subscript_call_result_622075 = invoke(stypy.reporting.localization.Localization(__file__, 1963, 8), getitem___622074, int_622067)
        
        # Assigning a type to the variable 'tuple_var_assignment_618620' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'tuple_var_assignment_618620', subscript_call_result_622075)
        
        # Assigning a Subscript to a Name (line 1963):
        
        # Obtaining the type of the subscript
        int_622076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1963, 8), 'int')
        
        # Call to _process_parameters(...): (line 1963)
        # Processing the call arguments (line 1963)
        # Getting the type of 'df' (line 1963)
        df_622079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 50), 'df', False)
        # Getting the type of 'scale' (line 1963)
        scale_622080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 54), 'scale', False)
        # Processing the call keyword arguments (line 1963)
        kwargs_622081 = {}
        # Getting the type of 'self' (line 1963)
        self_622077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1963)
        _process_parameters_622078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 25), self_622077, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1963)
        _process_parameters_call_result_622082 = invoke(stypy.reporting.localization.Localization(__file__, 1963, 25), _process_parameters_622078, *[df_622079, scale_622080], **kwargs_622081)
        
        # Obtaining the member '__getitem__' of a type (line 1963)
        getitem___622083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 8), _process_parameters_call_result_622082, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1963)
        subscript_call_result_622084 = invoke(stypy.reporting.localization.Localization(__file__, 1963, 8), getitem___622083, int_622076)
        
        # Assigning a type to the variable 'tuple_var_assignment_618621' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'tuple_var_assignment_618621', subscript_call_result_622084)
        
        # Assigning a Subscript to a Name (line 1963):
        
        # Obtaining the type of the subscript
        int_622085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1963, 8), 'int')
        
        # Call to _process_parameters(...): (line 1963)
        # Processing the call arguments (line 1963)
        # Getting the type of 'df' (line 1963)
        df_622088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 50), 'df', False)
        # Getting the type of 'scale' (line 1963)
        scale_622089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 54), 'scale', False)
        # Processing the call keyword arguments (line 1963)
        kwargs_622090 = {}
        # Getting the type of 'self' (line 1963)
        self_622086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 1963)
        _process_parameters_622087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 25), self_622086, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 1963)
        _process_parameters_call_result_622091 = invoke(stypy.reporting.localization.Localization(__file__, 1963, 25), _process_parameters_622087, *[df_622088, scale_622089], **kwargs_622090)
        
        # Obtaining the member '__getitem__' of a type (line 1963)
        getitem___622092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 8), _process_parameters_call_result_622091, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1963)
        subscript_call_result_622093 = invoke(stypy.reporting.localization.Localization(__file__, 1963, 8), getitem___622092, int_622085)
        
        # Assigning a type to the variable 'tuple_var_assignment_618622' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'tuple_var_assignment_618622', subscript_call_result_622093)
        
        # Assigning a Name to a Name (line 1963):
        # Getting the type of 'tuple_var_assignment_618620' (line 1963)
        tuple_var_assignment_618620_622094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'tuple_var_assignment_618620')
        # Assigning a type to the variable 'dim' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'dim', tuple_var_assignment_618620_622094)
        
        # Assigning a Name to a Name (line 1963):
        # Getting the type of 'tuple_var_assignment_618621' (line 1963)
        tuple_var_assignment_618621_622095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'tuple_var_assignment_618621')
        # Assigning a type to the variable 'df' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 13), 'df', tuple_var_assignment_618621_622095)
        
        # Assigning a Name to a Name (line 1963):
        # Getting the type of 'tuple_var_assignment_618622' (line 1963)
        tuple_var_assignment_618622_622096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'tuple_var_assignment_618622')
        # Assigning a type to the variable 'scale' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 17), 'scale', tuple_var_assignment_618622_622096)
        
        # Assigning a Call to a Name (line 1964):
        
        # Assigning a Call to a Name (line 1964):
        
        # Call to _var(...): (line 1964)
        # Processing the call arguments (line 1964)
        # Getting the type of 'dim' (line 1964)
        dim_622099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 24), 'dim', False)
        # Getting the type of 'df' (line 1964)
        df_622100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 29), 'df', False)
        # Getting the type of 'scale' (line 1964)
        scale_622101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 33), 'scale', False)
        # Processing the call keyword arguments (line 1964)
        kwargs_622102 = {}
        # Getting the type of 'self' (line 1964)
        self_622097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 14), 'self', False)
        # Obtaining the member '_var' of a type (line 1964)
        _var_622098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1964, 14), self_622097, '_var')
        # Calling _var(args, kwargs) (line 1964)
        _var_call_result_622103 = invoke(stypy.reporting.localization.Localization(__file__, 1964, 14), _var_622098, *[dim_622099, df_622100, scale_622101], **kwargs_622102)
        
        # Assigning a type to the variable 'out' (line 1964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1964, 8), 'out', _var_call_result_622103)
        
        # Call to _squeeze_output(...): (line 1965)
        # Processing the call arguments (line 1965)
        # Getting the type of 'out' (line 1965)
        out_622105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 31), 'out', False)
        # Processing the call keyword arguments (line 1965)
        kwargs_622106 = {}
        # Getting the type of '_squeeze_output' (line 1965)
        _squeeze_output_622104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 1965)
        _squeeze_output_call_result_622107 = invoke(stypy.reporting.localization.Localization(__file__, 1965, 15), _squeeze_output_622104, *[out_622105], **kwargs_622106)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1965, 8), 'stypy_return_type', _squeeze_output_call_result_622107)
        
        # ################# End of 'var(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'var' in the type store
        # Getting the type of 'stypy_return_type' (line 1950)
        stypy_return_type_622108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622108)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'var'
        return stypy_return_type_622108


    @norecursion
    def _standard_rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_standard_rvs'
        module_type_store = module_type_store.open_function_context('_standard_rvs', 1967, 4, False)
        # Assigning a type to the variable 'self' (line 1968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen._standard_rvs.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen._standard_rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen._standard_rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen._standard_rvs.__dict__.__setitem__('stypy_function_name', 'wishart_gen._standard_rvs')
        wishart_gen._standard_rvs.__dict__.__setitem__('stypy_param_names_list', ['n', 'shape', 'dim', 'df', 'random_state'])
        wishart_gen._standard_rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen._standard_rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen._standard_rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen._standard_rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen._standard_rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen._standard_rvs.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen._standard_rvs', ['n', 'shape', 'dim', 'df', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_standard_rvs', localization, ['n', 'shape', 'dim', 'df', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_standard_rvs(...)' code ##################

        str_622109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1987, (-1)), 'str', "\n        Parameters\n        ----------\n        n : integer\n            Number of variates to generate\n        shape : iterable\n            Shape of the variates to generate\n        dim : int\n            Dimension of the scale matrix\n        df : int\n            Degrees of freedom\n        random_state : np.random.RandomState instance\n            RandomState used for drawing the random variates.\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'rvs' instead.\n\n        ")
        
        # Assigning a BinOp to a Name (line 1989):
        
        # Assigning a BinOp to a Name (line 1989):
        # Getting the type of 'dim' (line 1989)
        dim_622110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 17), 'dim')
        # Getting the type of 'dim' (line 1989)
        dim_622111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 24), 'dim')
        int_622112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1989, 28), 'int')
        # Applying the binary operator '-' (line 1989)
        result_sub_622113 = python_operator(stypy.reporting.localization.Localization(__file__, 1989, 24), '-', dim_622111, int_622112)
        
        # Applying the binary operator '*' (line 1989)
        result_mul_622114 = python_operator(stypy.reporting.localization.Localization(__file__, 1989, 17), '*', dim_622110, result_sub_622113)
        
        int_622115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1989, 34), 'int')
        # Applying the binary operator '//' (line 1989)
        result_floordiv_622116 = python_operator(stypy.reporting.localization.Localization(__file__, 1989, 31), '//', result_mul_622114, int_622115)
        
        # Assigning a type to the variable 'n_tril' (line 1989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1989, 8), 'n_tril', result_floordiv_622116)
        
        # Assigning a Call to a Name (line 1990):
        
        # Assigning a Call to a Name (line 1990):
        
        # Call to reshape(...): (line 1990)
        # Processing the call arguments (line 1990)
        # Getting the type of 'shape' (line 1991)
        shape_622126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 35), 'shape', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1991)
        tuple_622127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1991, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1991)
        # Adding element type (line 1991)
        # Getting the type of 'n_tril' (line 1991)
        n_tril_622128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 42), 'n_tril', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1991, 42), tuple_622127, n_tril_622128)
        
        # Applying the binary operator '+' (line 1991)
        result_add_622129 = python_operator(stypy.reporting.localization.Localization(__file__, 1991, 35), '+', shape_622126, tuple_622127)
        
        # Processing the call keyword arguments (line 1990)
        kwargs_622130 = {}
        
        # Call to normal(...): (line 1990)
        # Processing the call keyword arguments (line 1990)
        # Getting the type of 'n' (line 1991)
        n_622119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 17), 'n', False)
        # Getting the type of 'n_tril' (line 1991)
        n_tril_622120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 19), 'n_tril', False)
        # Applying the binary operator '*' (line 1991)
        result_mul_622121 = python_operator(stypy.reporting.localization.Localization(__file__, 1991, 17), '*', n_622119, n_tril_622120)
        
        keyword_622122 = result_mul_622121
        kwargs_622123 = {'size': keyword_622122}
        # Getting the type of 'random_state' (line 1990)
        random_state_622117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 22), 'random_state', False)
        # Obtaining the member 'normal' of a type (line 1990)
        normal_622118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1990, 22), random_state_622117, 'normal')
        # Calling normal(args, kwargs) (line 1990)
        normal_call_result_622124 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 22), normal_622118, *[], **kwargs_622123)
        
        # Obtaining the member 'reshape' of a type (line 1990)
        reshape_622125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1990, 22), normal_call_result_622124, 'reshape')
        # Calling reshape(args, kwargs) (line 1990)
        reshape_call_result_622131 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 22), reshape_622125, *[result_add_622129], **kwargs_622130)
        
        # Assigning a type to the variable 'covariances' (line 1990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1990, 8), 'covariances', reshape_call_result_622131)
        
        # Assigning a Attribute to a Name (line 1994):
        
        # Assigning a Attribute to a Name (line 1994):
        
        # Call to reshape(...): (line 1994)
        # Processing the call arguments (line 1994)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1995)
        tuple_622158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1995)
        # Adding element type (line 1995)
        # Getting the type of 'dim' (line 1995)
        dim_622159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 44), 'dim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1995, 44), tuple_622158, dim_622159)
        
        
        # Obtaining the type of the subscript
        int_622160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 60), 'int')
        slice_622161 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1995, 52), None, None, int_622160)
        # Getting the type of 'shape' (line 1995)
        shape_622162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 52), 'shape', False)
        # Obtaining the member '__getitem__' of a type (line 1995)
        getitem___622163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1995, 52), shape_622162, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1995)
        subscript_call_result_622164 = invoke(stypy.reporting.localization.Localization(__file__, 1995, 52), getitem___622163, slice_622161)
        
        # Applying the binary operator '+' (line 1995)
        result_add_622165 = python_operator(stypy.reporting.localization.Localization(__file__, 1995, 43), '+', tuple_622158, subscript_call_result_622164)
        
        # Processing the call keyword arguments (line 1994)
        kwargs_622166 = {}
        
        # Obtaining the type of the subscript
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to range(...): (line 1995)
        # Processing the call arguments (line 1995)
        # Getting the type of 'dim' (line 1995)
        dim_622148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 28), 'dim', False)
        # Processing the call keyword arguments (line 1995)
        kwargs_622149 = {}
        # Getting the type of 'range' (line 1995)
        range_622147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 22), 'range', False)
        # Calling range(args, kwargs) (line 1995)
        range_call_result_622150 = invoke(stypy.reporting.localization.Localization(__file__, 1995, 22), range_622147, *[dim_622148], **kwargs_622149)
        
        comprehension_622151 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1994, 27), range_call_result_622150)
        # Assigning a type to the variable 'i' (line 1994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 27), 'i', comprehension_622151)
        
        # Call to chisquare(...): (line 1994)
        # Processing the call arguments (line 1994)
        # Getting the type of 'df' (line 1994)
        df_622134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 50), 'df', False)
        # Getting the type of 'i' (line 1994)
        i_622135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 54), 'i', False)
        int_622136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 56), 'int')
        # Applying the binary operator '+' (line 1994)
        result_add_622137 = python_operator(stypy.reporting.localization.Localization(__file__, 1994, 54), '+', i_622135, int_622136)
        
        # Applying the binary operator '-' (line 1994)
        result_sub_622138 = python_operator(stypy.reporting.localization.Localization(__file__, 1994, 50), '-', df_622134, result_add_622137)
        
        int_622139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 59), 'int')
        # Applying the binary operator '+' (line 1994)
        result_add_622140 = python_operator(stypy.reporting.localization.Localization(__file__, 1994, 58), '+', result_sub_622138, int_622139)
        
        # Processing the call keyword arguments (line 1994)
        # Getting the type of 'n' (line 1994)
        n_622141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 67), 'n', False)
        keyword_622142 = n_622141
        kwargs_622143 = {'size': keyword_622142}
        # Getting the type of 'random_state' (line 1994)
        random_state_622132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 27), 'random_state', False)
        # Obtaining the member 'chisquare' of a type (line 1994)
        chisquare_622133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 27), random_state_622132, 'chisquare')
        # Calling chisquare(args, kwargs) (line 1994)
        chisquare_call_result_622144 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 27), chisquare_622133, *[result_add_622140], **kwargs_622143)
        
        float_622145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 71), 'float')
        # Applying the binary operator '**' (line 1994)
        result_pow_622146 = python_operator(stypy.reporting.localization.Localization(__file__, 1994, 27), '**', chisquare_call_result_622144, float_622145)
        
        list_622152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 27), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1994, 27), list_622152, result_pow_622146)
        # Getting the type of 'np' (line 1994)
        np_622153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 20), 'np', False)
        # Obtaining the member 'r_' of a type (line 1994)
        r__622154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 20), np_622153, 'r_')
        # Obtaining the member '__getitem__' of a type (line 1994)
        getitem___622155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 20), r__622154, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1994)
        subscript_call_result_622156 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 20), getitem___622155, list_622152)
        
        # Obtaining the member 'reshape' of a type (line 1994)
        reshape_622157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 20), subscript_call_result_622156, 'reshape')
        # Calling reshape(args, kwargs) (line 1994)
        reshape_call_result_622167 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 20), reshape_622157, *[result_add_622165], **kwargs_622166)
        
        # Obtaining the member 'T' of a type (line 1994)
        T_622168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 20), reshape_call_result_622167, 'T')
        # Assigning a type to the variable 'variances' (line 1994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 8), 'variances', T_622168)
        
        # Assigning a Call to a Name (line 1998):
        
        # Assigning a Call to a Name (line 1998):
        
        # Call to zeros(...): (line 1998)
        # Processing the call arguments (line 1998)
        # Getting the type of 'shape' (line 1998)
        shape_622171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 21), 'shape', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1998)
        tuple_622172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1998, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1998)
        # Adding element type (line 1998)
        # Getting the type of 'dim' (line 1998)
        dim_622173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 30), 'dim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1998, 30), tuple_622172, dim_622173)
        # Adding element type (line 1998)
        # Getting the type of 'dim' (line 1998)
        dim_622174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 35), 'dim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1998, 30), tuple_622172, dim_622174)
        
        # Applying the binary operator '+' (line 1998)
        result_add_622175 = python_operator(stypy.reporting.localization.Localization(__file__, 1998, 21), '+', shape_622171, tuple_622172)
        
        # Processing the call keyword arguments (line 1998)
        kwargs_622176 = {}
        # Getting the type of 'np' (line 1998)
        np_622169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 12), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1998)
        zeros_622170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1998, 12), np_622169, 'zeros')
        # Calling zeros(args, kwargs) (line 1998)
        zeros_call_result_622177 = invoke(stypy.reporting.localization.Localization(__file__, 1998, 12), zeros_622170, *[result_add_622175], **kwargs_622176)
        
        # Assigning a type to the variable 'A' (line 1998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1998, 8), 'A', zeros_call_result_622177)
        
        # Assigning a Call to a Name (line 2001):
        
        # Assigning a Call to a Name (line 2001):
        
        # Call to tuple(...): (line 2001)
        # Processing the call arguments (line 2001)
        
        # Obtaining an instance of the builtin type 'list' (line 2001)
        list_622179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2001, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2001)
        # Adding element type (line 2001)
        
        # Call to slice(...): (line 2001)
        # Processing the call arguments (line 2001)
        # Getting the type of 'None' (line 2001)
        None_622181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 32), 'None', False)
        # Getting the type of 'None' (line 2001)
        None_622182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 37), 'None', False)
        # Getting the type of 'None' (line 2001)
        None_622183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 42), 'None', False)
        # Processing the call keyword arguments (line 2001)
        kwargs_622184 = {}
        # Getting the type of 'slice' (line 2001)
        slice_622180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 26), 'slice', False)
        # Calling slice(args, kwargs) (line 2001)
        slice_call_result_622185 = invoke(stypy.reporting.localization.Localization(__file__, 2001, 26), slice_622180, *[None_622181, None_622182, None_622183], **kwargs_622184)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2001, 25), list_622179, slice_call_result_622185)
        
        
        # Call to len(...): (line 2001)
        # Processing the call arguments (line 2001)
        # Getting the type of 'shape' (line 2001)
        shape_622187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 53), 'shape', False)
        # Processing the call keyword arguments (line 2001)
        kwargs_622188 = {}
        # Getting the type of 'len' (line 2001)
        len_622186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 49), 'len', False)
        # Calling len(args, kwargs) (line 2001)
        len_call_result_622189 = invoke(stypy.reporting.localization.Localization(__file__, 2001, 49), len_622186, *[shape_622187], **kwargs_622188)
        
        # Applying the binary operator '*' (line 2001)
        result_mul_622190 = python_operator(stypy.reporting.localization.Localization(__file__, 2001, 25), '*', list_622179, len_call_result_622189)
        
        # Processing the call keyword arguments (line 2001)
        kwargs_622191 = {}
        # Getting the type of 'tuple' (line 2001)
        tuple_622178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 19), 'tuple', False)
        # Calling tuple(args, kwargs) (line 2001)
        tuple_call_result_622192 = invoke(stypy.reporting.localization.Localization(__file__, 2001, 19), tuple_622178, *[result_mul_622190], **kwargs_622191)
        
        # Assigning a type to the variable 'size_idx' (line 2001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2001, 8), 'size_idx', tuple_call_result_622192)
        
        # Assigning a Call to a Name (line 2002):
        
        # Assigning a Call to a Name (line 2002):
        
        # Call to tril_indices(...): (line 2002)
        # Processing the call arguments (line 2002)
        # Getting the type of 'dim' (line 2002)
        dim_622195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 35), 'dim', False)
        # Processing the call keyword arguments (line 2002)
        int_622196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2002, 42), 'int')
        keyword_622197 = int_622196
        kwargs_622198 = {'k': keyword_622197}
        # Getting the type of 'np' (line 2002)
        np_622193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 19), 'np', False)
        # Obtaining the member 'tril_indices' of a type (line 2002)
        tril_indices_622194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2002, 19), np_622193, 'tril_indices')
        # Calling tril_indices(args, kwargs) (line 2002)
        tril_indices_call_result_622199 = invoke(stypy.reporting.localization.Localization(__file__, 2002, 19), tril_indices_622194, *[dim_622195], **kwargs_622198)
        
        # Assigning a type to the variable 'tril_idx' (line 2002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2002, 8), 'tril_idx', tril_indices_call_result_622199)
        
        # Assigning a Name to a Subscript (line 2003):
        
        # Assigning a Name to a Subscript (line 2003):
        # Getting the type of 'covariances' (line 2003)
        covariances_622200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 33), 'covariances')
        # Getting the type of 'A' (line 2003)
        A_622201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 8), 'A')
        # Getting the type of 'size_idx' (line 2003)
        size_idx_622202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 10), 'size_idx')
        # Getting the type of 'tril_idx' (line 2003)
        tril_idx_622203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 21), 'tril_idx')
        # Applying the binary operator '+' (line 2003)
        result_add_622204 = python_operator(stypy.reporting.localization.Localization(__file__, 2003, 10), '+', size_idx_622202, tril_idx_622203)
        
        # Storing an element on a container (line 2003)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2003, 8), A_622201, (result_add_622204, covariances_622200))
        
        # Assigning a Call to a Name (line 2006):
        
        # Assigning a Call to a Name (line 2006):
        
        # Call to diag_indices(...): (line 2006)
        # Processing the call arguments (line 2006)
        # Getting the type of 'dim' (line 2006)
        dim_622207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 35), 'dim', False)
        # Processing the call keyword arguments (line 2006)
        kwargs_622208 = {}
        # Getting the type of 'np' (line 2006)
        np_622205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 19), 'np', False)
        # Obtaining the member 'diag_indices' of a type (line 2006)
        diag_indices_622206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2006, 19), np_622205, 'diag_indices')
        # Calling diag_indices(args, kwargs) (line 2006)
        diag_indices_call_result_622209 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 19), diag_indices_622206, *[dim_622207], **kwargs_622208)
        
        # Assigning a type to the variable 'diag_idx' (line 2006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2006, 8), 'diag_idx', diag_indices_call_result_622209)
        
        # Assigning a Name to a Subscript (line 2007):
        
        # Assigning a Name to a Subscript (line 2007):
        # Getting the type of 'variances' (line 2007)
        variances_622210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 33), 'variances')
        # Getting the type of 'A' (line 2007)
        A_622211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 8), 'A')
        # Getting the type of 'size_idx' (line 2007)
        size_idx_622212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 10), 'size_idx')
        # Getting the type of 'diag_idx' (line 2007)
        diag_idx_622213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 21), 'diag_idx')
        # Applying the binary operator '+' (line 2007)
        result_add_622214 = python_operator(stypy.reporting.localization.Localization(__file__, 2007, 10), '+', size_idx_622212, diag_idx_622213)
        
        # Storing an element on a container (line 2007)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2007, 8), A_622211, (result_add_622214, variances_622210))
        # Getting the type of 'A' (line 2009)
        A_622215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 15), 'A')
        # Assigning a type to the variable 'stypy_return_type' (line 2009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2009, 8), 'stypy_return_type', A_622215)
        
        # ################# End of '_standard_rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_standard_rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 1967)
        stypy_return_type_622216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622216)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_standard_rvs'
        return stypy_return_type_622216


    @norecursion
    def _rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_rvs'
        module_type_store = module_type_store.open_function_context('_rvs', 2011, 4, False)
        # Assigning a type to the variable 'self' (line 2012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2012, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen._rvs.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen._rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen._rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen._rvs.__dict__.__setitem__('stypy_function_name', 'wishart_gen._rvs')
        wishart_gen._rvs.__dict__.__setitem__('stypy_param_names_list', ['n', 'shape', 'dim', 'df', 'C', 'random_state'])
        wishart_gen._rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen._rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen._rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen._rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen._rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen._rvs.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen._rvs', ['n', 'shape', 'dim', 'df', 'C', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_rvs', localization, ['n', 'shape', 'dim', 'df', 'C', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_rvs(...)' code ##################

        str_622217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2034, (-1)), 'str', "\n        Parameters\n        ----------\n        n : integer\n            Number of variates to generate\n        shape : iterable\n            Shape of the variates to generate\n        dim : int\n            Dimension of the scale matrix\n        df : int\n            Degrees of freedom\n        scale : ndarray\n            Scale matrix\n        C : ndarray\n            Cholesky factorization of the scale matrix, lower triangular.\n        %(_doc_random_state)s\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'rvs' instead.\n\n        ")
        
        # Assigning a Call to a Name (line 2035):
        
        # Assigning a Call to a Name (line 2035):
        
        # Call to _get_random_state(...): (line 2035)
        # Processing the call arguments (line 2035)
        # Getting the type of 'random_state' (line 2035)
        random_state_622220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 46), 'random_state', False)
        # Processing the call keyword arguments (line 2035)
        kwargs_622221 = {}
        # Getting the type of 'self' (line 2035)
        self_622218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 23), 'self', False)
        # Obtaining the member '_get_random_state' of a type (line 2035)
        _get_random_state_622219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2035, 23), self_622218, '_get_random_state')
        # Calling _get_random_state(args, kwargs) (line 2035)
        _get_random_state_call_result_622222 = invoke(stypy.reporting.localization.Localization(__file__, 2035, 23), _get_random_state_622219, *[random_state_622220], **kwargs_622221)
        
        # Assigning a type to the variable 'random_state' (line 2035)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2035, 8), 'random_state', _get_random_state_call_result_622222)
        
        # Assigning a Call to a Name (line 2038):
        
        # Assigning a Call to a Name (line 2038):
        
        # Call to _standard_rvs(...): (line 2038)
        # Processing the call arguments (line 2038)
        # Getting the type of 'n' (line 2038)
        n_622225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 31), 'n', False)
        # Getting the type of 'shape' (line 2038)
        shape_622226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 34), 'shape', False)
        # Getting the type of 'dim' (line 2038)
        dim_622227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 41), 'dim', False)
        # Getting the type of 'df' (line 2038)
        df_622228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 46), 'df', False)
        # Getting the type of 'random_state' (line 2038)
        random_state_622229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 50), 'random_state', False)
        # Processing the call keyword arguments (line 2038)
        kwargs_622230 = {}
        # Getting the type of 'self' (line 2038)
        self_622223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 12), 'self', False)
        # Obtaining the member '_standard_rvs' of a type (line 2038)
        _standard_rvs_622224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 12), self_622223, '_standard_rvs')
        # Calling _standard_rvs(args, kwargs) (line 2038)
        _standard_rvs_call_result_622231 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 12), _standard_rvs_622224, *[n_622225, shape_622226, dim_622227, df_622228, random_state_622229], **kwargs_622230)
        
        # Assigning a type to the variable 'A' (line 2038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2038, 8), 'A', _standard_rvs_call_result_622231)
        
        
        # Call to ndindex(...): (line 2051)
        # Processing the call arguments (line 2051)
        # Getting the type of 'shape' (line 2051)
        shape_622234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 32), 'shape', False)
        # Processing the call keyword arguments (line 2051)
        kwargs_622235 = {}
        # Getting the type of 'np' (line 2051)
        np_622232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 21), 'np', False)
        # Obtaining the member 'ndindex' of a type (line 2051)
        ndindex_622233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2051, 21), np_622232, 'ndindex')
        # Calling ndindex(args, kwargs) (line 2051)
        ndindex_call_result_622236 = invoke(stypy.reporting.localization.Localization(__file__, 2051, 21), ndindex_622233, *[shape_622234], **kwargs_622235)
        
        # Testing the type of a for loop iterable (line 2051)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2051, 8), ndindex_call_result_622236)
        # Getting the type of the for loop variable (line 2051)
        for_loop_var_622237 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2051, 8), ndindex_call_result_622236)
        # Assigning a type to the variable 'index' (line 2051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 8), 'index', for_loop_var_622237)
        # SSA begins for a for statement (line 2051)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 2052):
        
        # Assigning a Call to a Name (line 2052):
        
        # Call to dot(...): (line 2052)
        # Processing the call arguments (line 2052)
        # Getting the type of 'C' (line 2052)
        C_622240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 24), 'C', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'index' (line 2052)
        index_622241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 29), 'index', False)
        # Getting the type of 'A' (line 2052)
        A_622242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 27), 'A', False)
        # Obtaining the member '__getitem__' of a type (line 2052)
        getitem___622243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 27), A_622242, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2052)
        subscript_call_result_622244 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 27), getitem___622243, index_622241)
        
        # Processing the call keyword arguments (line 2052)
        kwargs_622245 = {}
        # Getting the type of 'np' (line 2052)
        np_622238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 17), 'np', False)
        # Obtaining the member 'dot' of a type (line 2052)
        dot_622239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 17), np_622238, 'dot')
        # Calling dot(args, kwargs) (line 2052)
        dot_call_result_622246 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 17), dot_622239, *[C_622240, subscript_call_result_622244], **kwargs_622245)
        
        # Assigning a type to the variable 'CA' (line 2052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2052, 12), 'CA', dot_call_result_622246)
        
        # Assigning a Call to a Subscript (line 2053):
        
        # Assigning a Call to a Subscript (line 2053):
        
        # Call to dot(...): (line 2053)
        # Processing the call arguments (line 2053)
        # Getting the type of 'CA' (line 2053)
        CA_622249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 30), 'CA', False)
        # Getting the type of 'CA' (line 2053)
        CA_622250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 34), 'CA', False)
        # Obtaining the member 'T' of a type (line 2053)
        T_622251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2053, 34), CA_622250, 'T')
        # Processing the call keyword arguments (line 2053)
        kwargs_622252 = {}
        # Getting the type of 'np' (line 2053)
        np_622247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 23), 'np', False)
        # Obtaining the member 'dot' of a type (line 2053)
        dot_622248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2053, 23), np_622247, 'dot')
        # Calling dot(args, kwargs) (line 2053)
        dot_call_result_622253 = invoke(stypy.reporting.localization.Localization(__file__, 2053, 23), dot_622248, *[CA_622249, T_622251], **kwargs_622252)
        
        # Getting the type of 'A' (line 2053)
        A_622254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 12), 'A')
        # Getting the type of 'index' (line 2053)
        index_622255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 14), 'index')
        # Storing an element on a container (line 2053)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2053, 12), A_622254, (index_622255, dot_call_result_622253))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'A' (line 2055)
        A_622256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 15), 'A')
        # Assigning a type to the variable 'stypy_return_type' (line 2055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 8), 'stypy_return_type', A_622256)
        
        # ################# End of '_rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 2011)
        stypy_return_type_622257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622257)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_rvs'
        return stypy_return_type_622257


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_622258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 34), 'int')
        # Getting the type of 'None' (line 2057)
        None_622259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 50), 'None')
        defaults = [int_622258, None_622259]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 2057, 4, False)
        # Assigning a type to the variable 'self' (line 2058)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2058, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen.rvs.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen.rvs.__dict__.__setitem__('stypy_function_name', 'wishart_gen.rvs')
        wishart_gen.rvs.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale', 'size', 'random_state'])
        wishart_gen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen.rvs', ['df', 'scale', 'size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['df', 'scale', 'size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        str_622260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, (-1)), 'str', '\n        Draw random samples from a Wishart distribution.\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n        size : integer or iterable of integers, optional\n            Number of samples to draw (default 1).\n        %(_doc_random_state)s\n\n        Returns\n        -------\n        rvs : ndarray\n            Random variates of shape (`size`) + (`dim`, `dim), where `dim` is\n            the dimension of the scale matrix.\n\n        Notes\n        -----\n        %(_doc_callparams_note)s\n\n        ')
        
        # Assigning a Call to a Tuple (line 2079):
        
        # Assigning a Subscript to a Name (line 2079):
        
        # Obtaining the type of the subscript
        int_622261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2079, 8), 'int')
        
        # Call to _process_size(...): (line 2079)
        # Processing the call arguments (line 2079)
        # Getting the type of 'size' (line 2079)
        size_622264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 38), 'size', False)
        # Processing the call keyword arguments (line 2079)
        kwargs_622265 = {}
        # Getting the type of 'self' (line 2079)
        self_622262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 19), 'self', False)
        # Obtaining the member '_process_size' of a type (line 2079)
        _process_size_622263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2079, 19), self_622262, '_process_size')
        # Calling _process_size(args, kwargs) (line 2079)
        _process_size_call_result_622266 = invoke(stypy.reporting.localization.Localization(__file__, 2079, 19), _process_size_622263, *[size_622264], **kwargs_622265)
        
        # Obtaining the member '__getitem__' of a type (line 2079)
        getitem___622267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2079, 8), _process_size_call_result_622266, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2079)
        subscript_call_result_622268 = invoke(stypy.reporting.localization.Localization(__file__, 2079, 8), getitem___622267, int_622261)
        
        # Assigning a type to the variable 'tuple_var_assignment_618623' (line 2079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 8), 'tuple_var_assignment_618623', subscript_call_result_622268)
        
        # Assigning a Subscript to a Name (line 2079):
        
        # Obtaining the type of the subscript
        int_622269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2079, 8), 'int')
        
        # Call to _process_size(...): (line 2079)
        # Processing the call arguments (line 2079)
        # Getting the type of 'size' (line 2079)
        size_622272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 38), 'size', False)
        # Processing the call keyword arguments (line 2079)
        kwargs_622273 = {}
        # Getting the type of 'self' (line 2079)
        self_622270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 19), 'self', False)
        # Obtaining the member '_process_size' of a type (line 2079)
        _process_size_622271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2079, 19), self_622270, '_process_size')
        # Calling _process_size(args, kwargs) (line 2079)
        _process_size_call_result_622274 = invoke(stypy.reporting.localization.Localization(__file__, 2079, 19), _process_size_622271, *[size_622272], **kwargs_622273)
        
        # Obtaining the member '__getitem__' of a type (line 2079)
        getitem___622275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2079, 8), _process_size_call_result_622274, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2079)
        subscript_call_result_622276 = invoke(stypy.reporting.localization.Localization(__file__, 2079, 8), getitem___622275, int_622269)
        
        # Assigning a type to the variable 'tuple_var_assignment_618624' (line 2079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 8), 'tuple_var_assignment_618624', subscript_call_result_622276)
        
        # Assigning a Name to a Name (line 2079):
        # Getting the type of 'tuple_var_assignment_618623' (line 2079)
        tuple_var_assignment_618623_622277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 8), 'tuple_var_assignment_618623')
        # Assigning a type to the variable 'n' (line 2079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 8), 'n', tuple_var_assignment_618623_622277)
        
        # Assigning a Name to a Name (line 2079):
        # Getting the type of 'tuple_var_assignment_618624' (line 2079)
        tuple_var_assignment_618624_622278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 8), 'tuple_var_assignment_618624')
        # Assigning a type to the variable 'shape' (line 2079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 11), 'shape', tuple_var_assignment_618624_622278)
        
        # Assigning a Call to a Tuple (line 2080):
        
        # Assigning a Subscript to a Name (line 2080):
        
        # Obtaining the type of the subscript
        int_622279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2080, 8), 'int')
        
        # Call to _process_parameters(...): (line 2080)
        # Processing the call arguments (line 2080)
        # Getting the type of 'df' (line 2080)
        df_622282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 50), 'df', False)
        # Getting the type of 'scale' (line 2080)
        scale_622283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 54), 'scale', False)
        # Processing the call keyword arguments (line 2080)
        kwargs_622284 = {}
        # Getting the type of 'self' (line 2080)
        self_622280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2080)
        _process_parameters_622281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 25), self_622280, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2080)
        _process_parameters_call_result_622285 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 25), _process_parameters_622281, *[df_622282, scale_622283], **kwargs_622284)
        
        # Obtaining the member '__getitem__' of a type (line 2080)
        getitem___622286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 8), _process_parameters_call_result_622285, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2080)
        subscript_call_result_622287 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 8), getitem___622286, int_622279)
        
        # Assigning a type to the variable 'tuple_var_assignment_618625' (line 2080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'tuple_var_assignment_618625', subscript_call_result_622287)
        
        # Assigning a Subscript to a Name (line 2080):
        
        # Obtaining the type of the subscript
        int_622288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2080, 8), 'int')
        
        # Call to _process_parameters(...): (line 2080)
        # Processing the call arguments (line 2080)
        # Getting the type of 'df' (line 2080)
        df_622291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 50), 'df', False)
        # Getting the type of 'scale' (line 2080)
        scale_622292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 54), 'scale', False)
        # Processing the call keyword arguments (line 2080)
        kwargs_622293 = {}
        # Getting the type of 'self' (line 2080)
        self_622289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2080)
        _process_parameters_622290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 25), self_622289, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2080)
        _process_parameters_call_result_622294 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 25), _process_parameters_622290, *[df_622291, scale_622292], **kwargs_622293)
        
        # Obtaining the member '__getitem__' of a type (line 2080)
        getitem___622295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 8), _process_parameters_call_result_622294, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2080)
        subscript_call_result_622296 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 8), getitem___622295, int_622288)
        
        # Assigning a type to the variable 'tuple_var_assignment_618626' (line 2080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'tuple_var_assignment_618626', subscript_call_result_622296)
        
        # Assigning a Subscript to a Name (line 2080):
        
        # Obtaining the type of the subscript
        int_622297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2080, 8), 'int')
        
        # Call to _process_parameters(...): (line 2080)
        # Processing the call arguments (line 2080)
        # Getting the type of 'df' (line 2080)
        df_622300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 50), 'df', False)
        # Getting the type of 'scale' (line 2080)
        scale_622301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 54), 'scale', False)
        # Processing the call keyword arguments (line 2080)
        kwargs_622302 = {}
        # Getting the type of 'self' (line 2080)
        self_622298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2080)
        _process_parameters_622299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 25), self_622298, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2080)
        _process_parameters_call_result_622303 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 25), _process_parameters_622299, *[df_622300, scale_622301], **kwargs_622302)
        
        # Obtaining the member '__getitem__' of a type (line 2080)
        getitem___622304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 8), _process_parameters_call_result_622303, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2080)
        subscript_call_result_622305 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 8), getitem___622304, int_622297)
        
        # Assigning a type to the variable 'tuple_var_assignment_618627' (line 2080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'tuple_var_assignment_618627', subscript_call_result_622305)
        
        # Assigning a Name to a Name (line 2080):
        # Getting the type of 'tuple_var_assignment_618625' (line 2080)
        tuple_var_assignment_618625_622306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'tuple_var_assignment_618625')
        # Assigning a type to the variable 'dim' (line 2080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'dim', tuple_var_assignment_618625_622306)
        
        # Assigning a Name to a Name (line 2080):
        # Getting the type of 'tuple_var_assignment_618626' (line 2080)
        tuple_var_assignment_618626_622307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'tuple_var_assignment_618626')
        # Assigning a type to the variable 'df' (line 2080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 13), 'df', tuple_var_assignment_618626_622307)
        
        # Assigning a Name to a Name (line 2080):
        # Getting the type of 'tuple_var_assignment_618627' (line 2080)
        tuple_var_assignment_618627_622308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'tuple_var_assignment_618627')
        # Assigning a type to the variable 'scale' (line 2080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 17), 'scale', tuple_var_assignment_618627_622308)
        
        # Assigning a Call to a Name (line 2083):
        
        # Assigning a Call to a Name (line 2083):
        
        # Call to cholesky(...): (line 2083)
        # Processing the call arguments (line 2083)
        # Getting the type of 'scale' (line 2083)
        scale_622312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 34), 'scale', False)
        # Processing the call keyword arguments (line 2083)
        # Getting the type of 'True' (line 2083)
        True_622313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 47), 'True', False)
        keyword_622314 = True_622313
        kwargs_622315 = {'lower': keyword_622314}
        # Getting the type of 'scipy' (line 2083)
        scipy_622309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 12), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2083)
        linalg_622310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 12), scipy_622309, 'linalg')
        # Obtaining the member 'cholesky' of a type (line 2083)
        cholesky_622311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 12), linalg_622310, 'cholesky')
        # Calling cholesky(args, kwargs) (line 2083)
        cholesky_call_result_622316 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 12), cholesky_622311, *[scale_622312], **kwargs_622315)
        
        # Assigning a type to the variable 'C' (line 2083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'C', cholesky_call_result_622316)
        
        # Assigning a Call to a Name (line 2085):
        
        # Assigning a Call to a Name (line 2085):
        
        # Call to _rvs(...): (line 2085)
        # Processing the call arguments (line 2085)
        # Getting the type of 'n' (line 2085)
        n_622319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 24), 'n', False)
        # Getting the type of 'shape' (line 2085)
        shape_622320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 27), 'shape', False)
        # Getting the type of 'dim' (line 2085)
        dim_622321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 34), 'dim', False)
        # Getting the type of 'df' (line 2085)
        df_622322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 39), 'df', False)
        # Getting the type of 'C' (line 2085)
        C_622323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 43), 'C', False)
        # Getting the type of 'random_state' (line 2085)
        random_state_622324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 46), 'random_state', False)
        # Processing the call keyword arguments (line 2085)
        kwargs_622325 = {}
        # Getting the type of 'self' (line 2085)
        self_622317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 14), 'self', False)
        # Obtaining the member '_rvs' of a type (line 2085)
        _rvs_622318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2085, 14), self_622317, '_rvs')
        # Calling _rvs(args, kwargs) (line 2085)
        _rvs_call_result_622326 = invoke(stypy.reporting.localization.Localization(__file__, 2085, 14), _rvs_622318, *[n_622319, shape_622320, dim_622321, df_622322, C_622323, random_state_622324], **kwargs_622325)
        
        # Assigning a type to the variable 'out' (line 2085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2085, 8), 'out', _rvs_call_result_622326)
        
        # Call to _squeeze_output(...): (line 2087)
        # Processing the call arguments (line 2087)
        # Getting the type of 'out' (line 2087)
        out_622328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2087, 31), 'out', False)
        # Processing the call keyword arguments (line 2087)
        kwargs_622329 = {}
        # Getting the type of '_squeeze_output' (line 2087)
        _squeeze_output_622327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2087, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2087)
        _squeeze_output_call_result_622330 = invoke(stypy.reporting.localization.Localization(__file__, 2087, 15), _squeeze_output_622327, *[out_622328], **kwargs_622329)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2087, 8), 'stypy_return_type', _squeeze_output_call_result_622330)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 2057)
        stypy_return_type_622331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622331)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_622331


    @norecursion
    def _entropy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_entropy'
        module_type_store = module_type_store.open_function_context('_entropy', 2089, 4, False)
        # Assigning a type to the variable 'self' (line 2090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2090, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen._entropy.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen._entropy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen._entropy.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen._entropy.__dict__.__setitem__('stypy_function_name', 'wishart_gen._entropy')
        wishart_gen._entropy.__dict__.__setitem__('stypy_param_names_list', ['dim', 'df', 'log_det_scale'])
        wishart_gen._entropy.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen._entropy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen._entropy.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen._entropy.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen._entropy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen._entropy.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen._entropy', ['dim', 'df', 'log_det_scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_entropy', localization, ['dim', 'df', 'log_det_scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_entropy(...)' code ##################

        str_622332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, (-1)), 'str', "\n        Parameters\n        ----------\n        dim : int\n            Dimension of the scale matrix\n        df : int\n            Degrees of freedom\n        log_det_scale : float\n            Logarithm of the determinant of the scale matrix\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'entropy' instead.\n\n        ")
        float_622333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 12), 'float')
        # Getting the type of 'dim' (line 2107)
        dim_622334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 19), 'dim')
        int_622335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 23), 'int')
        # Applying the binary operator '+' (line 2107)
        result_add_622336 = python_operator(stypy.reporting.localization.Localization(__file__, 2107, 19), '+', dim_622334, int_622335)
        
        # Applying the binary operator '*' (line 2107)
        result_mul_622337 = python_operator(stypy.reporting.localization.Localization(__file__, 2107, 12), '*', float_622333, result_add_622336)
        
        # Getting the type of 'log_det_scale' (line 2107)
        log_det_scale_622338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 28), 'log_det_scale')
        # Applying the binary operator '*' (line 2107)
        result_mul_622339 = python_operator(stypy.reporting.localization.Localization(__file__, 2107, 26), '*', result_mul_622337, log_det_scale_622338)
        
        float_622340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2108, 12), 'float')
        # Getting the type of 'dim' (line 2108)
        dim_622341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 18), 'dim')
        # Applying the binary operator '*' (line 2108)
        result_mul_622342 = python_operator(stypy.reporting.localization.Localization(__file__, 2108, 12), '*', float_622340, dim_622341)
        
        # Getting the type of 'dim' (line 2108)
        dim_622343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 25), 'dim')
        int_622344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2108, 29), 'int')
        # Applying the binary operator '+' (line 2108)
        result_add_622345 = python_operator(stypy.reporting.localization.Localization(__file__, 2108, 25), '+', dim_622343, int_622344)
        
        # Applying the binary operator '*' (line 2108)
        result_mul_622346 = python_operator(stypy.reporting.localization.Localization(__file__, 2108, 22), '*', result_mul_622342, result_add_622345)
        
        # Getting the type of '_LOG_2' (line 2108)
        _LOG_2_622347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 34), '_LOG_2')
        # Applying the binary operator '*' (line 2108)
        result_mul_622348 = python_operator(stypy.reporting.localization.Localization(__file__, 2108, 32), '*', result_mul_622346, _LOG_2_622347)
        
        # Applying the binary operator '+' (line 2107)
        result_add_622349 = python_operator(stypy.reporting.localization.Localization(__file__, 2107, 12), '+', result_mul_622339, result_mul_622348)
        
        
        # Call to multigammaln(...): (line 2109)
        # Processing the call arguments (line 2109)
        float_622351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 25), 'float')
        # Getting the type of 'df' (line 2109)
        df_622352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 29), 'df', False)
        # Applying the binary operator '*' (line 2109)
        result_mul_622353 = python_operator(stypy.reporting.localization.Localization(__file__, 2109, 25), '*', float_622351, df_622352)
        
        # Getting the type of 'dim' (line 2109)
        dim_622354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 33), 'dim', False)
        # Processing the call keyword arguments (line 2109)
        kwargs_622355 = {}
        # Getting the type of 'multigammaln' (line 2109)
        multigammaln_622350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 12), 'multigammaln', False)
        # Calling multigammaln(args, kwargs) (line 2109)
        multigammaln_call_result_622356 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 12), multigammaln_622350, *[result_mul_622353, dim_622354], **kwargs_622355)
        
        # Applying the binary operator '+' (line 2108)
        result_add_622357 = python_operator(stypy.reporting.localization.Localization(__file__, 2108, 41), '+', result_add_622349, multigammaln_call_result_622356)
        
        float_622358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2110, 12), 'float')
        # Getting the type of 'df' (line 2110)
        df_622359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 19), 'df')
        # Getting the type of 'dim' (line 2110)
        dim_622360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 24), 'dim')
        # Applying the binary operator '-' (line 2110)
        result_sub_622361 = python_operator(stypy.reporting.localization.Localization(__file__, 2110, 19), '-', df_622359, dim_622360)
        
        int_622362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2110, 30), 'int')
        # Applying the binary operator '-' (line 2110)
        result_sub_622363 = python_operator(stypy.reporting.localization.Localization(__file__, 2110, 28), '-', result_sub_622361, int_622362)
        
        # Applying the binary operator '*' (line 2110)
        result_mul_622364 = python_operator(stypy.reporting.localization.Localization(__file__, 2110, 12), '*', float_622358, result_sub_622363)
        
        
        # Call to sum(...): (line 2110)
        # Processing the call arguments (line 2110)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to range(...): (line 2111)
        # Processing the call arguments (line 2111)
        # Getting the type of 'dim' (line 2111)
        dim_622380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 58), 'dim', False)
        # Processing the call keyword arguments (line 2111)
        kwargs_622381 = {}
        # Getting the type of 'range' (line 2111)
        range_622379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 52), 'range', False)
        # Calling range(args, kwargs) (line 2111)
        range_call_result_622382 = invoke(stypy.reporting.localization.Localization(__file__, 2111, 52), range_622379, *[dim_622380], **kwargs_622381)
        
        comprehension_622383 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2111, 17), range_call_result_622382)
        # Assigning a type to the variable 'i' (line 2111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2111, 17), 'i', comprehension_622383)
        
        # Call to psi(...): (line 2111)
        # Processing the call arguments (line 2111)
        float_622368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2111, 21), 'float')
        # Getting the type of 'df' (line 2111)
        df_622369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 26), 'df', False)
        int_622370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2111, 31), 'int')
        # Applying the binary operator '+' (line 2111)
        result_add_622371 = python_operator(stypy.reporting.localization.Localization(__file__, 2111, 26), '+', df_622369, int_622370)
        
        # Getting the type of 'i' (line 2111)
        i_622372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 36), 'i', False)
        int_622373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2111, 38), 'int')
        # Applying the binary operator '+' (line 2111)
        result_add_622374 = python_operator(stypy.reporting.localization.Localization(__file__, 2111, 36), '+', i_622372, int_622373)
        
        # Applying the binary operator '-' (line 2111)
        result_sub_622375 = python_operator(stypy.reporting.localization.Localization(__file__, 2111, 33), '-', result_add_622371, result_add_622374)
        
        # Applying the binary operator '*' (line 2111)
        result_mul_622376 = python_operator(stypy.reporting.localization.Localization(__file__, 2111, 21), '*', float_622368, result_sub_622375)
        
        # Processing the call keyword arguments (line 2111)
        kwargs_622377 = {}
        # Getting the type of 'psi' (line 2111)
        psi_622367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 17), 'psi', False)
        # Calling psi(args, kwargs) (line 2111)
        psi_call_result_622378 = invoke(stypy.reporting.localization.Localization(__file__, 2111, 17), psi_622367, *[result_mul_622376], **kwargs_622377)
        
        list_622384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2111, 17), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2111, 17), list_622384, psi_call_result_622378)
        # Processing the call keyword arguments (line 2110)
        kwargs_622385 = {}
        # Getting the type of 'np' (line 2110)
        np_622365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 35), 'np', False)
        # Obtaining the member 'sum' of a type (line 2110)
        sum_622366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2110, 35), np_622365, 'sum')
        # Calling sum(args, kwargs) (line 2110)
        sum_call_result_622386 = invoke(stypy.reporting.localization.Localization(__file__, 2110, 35), sum_622366, *[list_622384], **kwargs_622385)
        
        # Applying the binary operator '*' (line 2110)
        result_mul_622387 = python_operator(stypy.reporting.localization.Localization(__file__, 2110, 33), '*', result_mul_622364, sum_call_result_622386)
        
        # Applying the binary operator '-' (line 2109)
        result_sub_622388 = python_operator(stypy.reporting.localization.Localization(__file__, 2109, 38), '-', result_add_622357, result_mul_622387)
        
        float_622389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2113, 12), 'float')
        # Getting the type of 'df' (line 2113)
        df_622390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 18), 'df')
        # Applying the binary operator '*' (line 2113)
        result_mul_622391 = python_operator(stypy.reporting.localization.Localization(__file__, 2113, 12), '*', float_622389, df_622390)
        
        # Getting the type of 'dim' (line 2113)
        dim_622392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 23), 'dim')
        # Applying the binary operator '*' (line 2113)
        result_mul_622393 = python_operator(stypy.reporting.localization.Localization(__file__, 2113, 21), '*', result_mul_622391, dim_622392)
        
        # Applying the binary operator '+' (line 2112)
        result_add_622394 = python_operator(stypy.reporting.localization.Localization(__file__, 2112, 14), '+', result_sub_622388, result_mul_622393)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2106, 8), 'stypy_return_type', result_add_622394)
        
        # ################# End of '_entropy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_entropy' in the type store
        # Getting the type of 'stypy_return_type' (line 2089)
        stypy_return_type_622395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622395)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_entropy'
        return stypy_return_type_622395


    @norecursion
    def entropy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'entropy'
        module_type_store = module_type_store.open_function_context('entropy', 2116, 4, False)
        # Assigning a type to the variable 'self' (line 2117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2117, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen.entropy.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen.entropy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen.entropy.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen.entropy.__dict__.__setitem__('stypy_function_name', 'wishart_gen.entropy')
        wishart_gen.entropy.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale'])
        wishart_gen.entropy.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen.entropy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen.entropy.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen.entropy.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen.entropy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen.entropy.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen.entropy', ['df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'entropy', localization, ['df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'entropy(...)' code ##################

        str_622396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2133, (-1)), 'str', '\n        Compute the differential entropy of the Wishart.\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        h : scalar\n            Entropy of the Wishart distribution\n\n        Notes\n        -----\n        %(_doc_callparams_note)s\n\n        ')
        
        # Assigning a Call to a Tuple (line 2134):
        
        # Assigning a Subscript to a Name (line 2134):
        
        # Obtaining the type of the subscript
        int_622397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2134, 8), 'int')
        
        # Call to _process_parameters(...): (line 2134)
        # Processing the call arguments (line 2134)
        # Getting the type of 'df' (line 2134)
        df_622400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 50), 'df', False)
        # Getting the type of 'scale' (line 2134)
        scale_622401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 54), 'scale', False)
        # Processing the call keyword arguments (line 2134)
        kwargs_622402 = {}
        # Getting the type of 'self' (line 2134)
        self_622398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2134)
        _process_parameters_622399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 25), self_622398, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2134)
        _process_parameters_call_result_622403 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 25), _process_parameters_622399, *[df_622400, scale_622401], **kwargs_622402)
        
        # Obtaining the member '__getitem__' of a type (line 2134)
        getitem___622404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 8), _process_parameters_call_result_622403, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2134)
        subscript_call_result_622405 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 8), getitem___622404, int_622397)
        
        # Assigning a type to the variable 'tuple_var_assignment_618628' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'tuple_var_assignment_618628', subscript_call_result_622405)
        
        # Assigning a Subscript to a Name (line 2134):
        
        # Obtaining the type of the subscript
        int_622406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2134, 8), 'int')
        
        # Call to _process_parameters(...): (line 2134)
        # Processing the call arguments (line 2134)
        # Getting the type of 'df' (line 2134)
        df_622409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 50), 'df', False)
        # Getting the type of 'scale' (line 2134)
        scale_622410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 54), 'scale', False)
        # Processing the call keyword arguments (line 2134)
        kwargs_622411 = {}
        # Getting the type of 'self' (line 2134)
        self_622407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2134)
        _process_parameters_622408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 25), self_622407, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2134)
        _process_parameters_call_result_622412 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 25), _process_parameters_622408, *[df_622409, scale_622410], **kwargs_622411)
        
        # Obtaining the member '__getitem__' of a type (line 2134)
        getitem___622413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 8), _process_parameters_call_result_622412, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2134)
        subscript_call_result_622414 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 8), getitem___622413, int_622406)
        
        # Assigning a type to the variable 'tuple_var_assignment_618629' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'tuple_var_assignment_618629', subscript_call_result_622414)
        
        # Assigning a Subscript to a Name (line 2134):
        
        # Obtaining the type of the subscript
        int_622415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2134, 8), 'int')
        
        # Call to _process_parameters(...): (line 2134)
        # Processing the call arguments (line 2134)
        # Getting the type of 'df' (line 2134)
        df_622418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 50), 'df', False)
        # Getting the type of 'scale' (line 2134)
        scale_622419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 54), 'scale', False)
        # Processing the call keyword arguments (line 2134)
        kwargs_622420 = {}
        # Getting the type of 'self' (line 2134)
        self_622416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2134)
        _process_parameters_622417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 25), self_622416, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2134)
        _process_parameters_call_result_622421 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 25), _process_parameters_622417, *[df_622418, scale_622419], **kwargs_622420)
        
        # Obtaining the member '__getitem__' of a type (line 2134)
        getitem___622422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 8), _process_parameters_call_result_622421, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2134)
        subscript_call_result_622423 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 8), getitem___622422, int_622415)
        
        # Assigning a type to the variable 'tuple_var_assignment_618630' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'tuple_var_assignment_618630', subscript_call_result_622423)
        
        # Assigning a Name to a Name (line 2134):
        # Getting the type of 'tuple_var_assignment_618628' (line 2134)
        tuple_var_assignment_618628_622424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'tuple_var_assignment_618628')
        # Assigning a type to the variable 'dim' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'dim', tuple_var_assignment_618628_622424)
        
        # Assigning a Name to a Name (line 2134):
        # Getting the type of 'tuple_var_assignment_618629' (line 2134)
        tuple_var_assignment_618629_622425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'tuple_var_assignment_618629')
        # Assigning a type to the variable 'df' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 13), 'df', tuple_var_assignment_618629_622425)
        
        # Assigning a Name to a Name (line 2134):
        # Getting the type of 'tuple_var_assignment_618630' (line 2134)
        tuple_var_assignment_618630_622426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'tuple_var_assignment_618630')
        # Assigning a type to the variable 'scale' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 17), 'scale', tuple_var_assignment_618630_622426)
        
        # Assigning a Call to a Tuple (line 2135):
        
        # Assigning a Subscript to a Name (line 2135):
        
        # Obtaining the type of the subscript
        int_622427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2135, 8), 'int')
        
        # Call to _cholesky_logdet(...): (line 2135)
        # Processing the call arguments (line 2135)
        # Getting the type of 'scale' (line 2135)
        scale_622430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 49), 'scale', False)
        # Processing the call keyword arguments (line 2135)
        kwargs_622431 = {}
        # Getting the type of 'self' (line 2135)
        self_622428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 27), 'self', False)
        # Obtaining the member '_cholesky_logdet' of a type (line 2135)
        _cholesky_logdet_622429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 27), self_622428, '_cholesky_logdet')
        # Calling _cholesky_logdet(args, kwargs) (line 2135)
        _cholesky_logdet_call_result_622432 = invoke(stypy.reporting.localization.Localization(__file__, 2135, 27), _cholesky_logdet_622429, *[scale_622430], **kwargs_622431)
        
        # Obtaining the member '__getitem__' of a type (line 2135)
        getitem___622433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 8), _cholesky_logdet_call_result_622432, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2135)
        subscript_call_result_622434 = invoke(stypy.reporting.localization.Localization(__file__, 2135, 8), getitem___622433, int_622427)
        
        # Assigning a type to the variable 'tuple_var_assignment_618631' (line 2135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2135, 8), 'tuple_var_assignment_618631', subscript_call_result_622434)
        
        # Assigning a Subscript to a Name (line 2135):
        
        # Obtaining the type of the subscript
        int_622435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2135, 8), 'int')
        
        # Call to _cholesky_logdet(...): (line 2135)
        # Processing the call arguments (line 2135)
        # Getting the type of 'scale' (line 2135)
        scale_622438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 49), 'scale', False)
        # Processing the call keyword arguments (line 2135)
        kwargs_622439 = {}
        # Getting the type of 'self' (line 2135)
        self_622436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 27), 'self', False)
        # Obtaining the member '_cholesky_logdet' of a type (line 2135)
        _cholesky_logdet_622437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 27), self_622436, '_cholesky_logdet')
        # Calling _cholesky_logdet(args, kwargs) (line 2135)
        _cholesky_logdet_call_result_622440 = invoke(stypy.reporting.localization.Localization(__file__, 2135, 27), _cholesky_logdet_622437, *[scale_622438], **kwargs_622439)
        
        # Obtaining the member '__getitem__' of a type (line 2135)
        getitem___622441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 8), _cholesky_logdet_call_result_622440, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2135)
        subscript_call_result_622442 = invoke(stypy.reporting.localization.Localization(__file__, 2135, 8), getitem___622441, int_622435)
        
        # Assigning a type to the variable 'tuple_var_assignment_618632' (line 2135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2135, 8), 'tuple_var_assignment_618632', subscript_call_result_622442)
        
        # Assigning a Name to a Name (line 2135):
        # Getting the type of 'tuple_var_assignment_618631' (line 2135)
        tuple_var_assignment_618631_622443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 8), 'tuple_var_assignment_618631')
        # Assigning a type to the variable '_' (line 2135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2135, 8), '_', tuple_var_assignment_618631_622443)
        
        # Assigning a Name to a Name (line 2135):
        # Getting the type of 'tuple_var_assignment_618632' (line 2135)
        tuple_var_assignment_618632_622444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 8), 'tuple_var_assignment_618632')
        # Assigning a type to the variable 'log_det_scale' (line 2135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2135, 11), 'log_det_scale', tuple_var_assignment_618632_622444)
        
        # Call to _entropy(...): (line 2136)
        # Processing the call arguments (line 2136)
        # Getting the type of 'dim' (line 2136)
        dim_622447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 29), 'dim', False)
        # Getting the type of 'df' (line 2136)
        df_622448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 34), 'df', False)
        # Getting the type of 'log_det_scale' (line 2136)
        log_det_scale_622449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 38), 'log_det_scale', False)
        # Processing the call keyword arguments (line 2136)
        kwargs_622450 = {}
        # Getting the type of 'self' (line 2136)
        self_622445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 15), 'self', False)
        # Obtaining the member '_entropy' of a type (line 2136)
        _entropy_622446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2136, 15), self_622445, '_entropy')
        # Calling _entropy(args, kwargs) (line 2136)
        _entropy_call_result_622451 = invoke(stypy.reporting.localization.Localization(__file__, 2136, 15), _entropy_622446, *[dim_622447, df_622448, log_det_scale_622449], **kwargs_622450)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2136, 8), 'stypy_return_type', _entropy_call_result_622451)
        
        # ################# End of 'entropy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'entropy' in the type store
        # Getting the type of 'stypy_return_type' (line 2116)
        stypy_return_type_622452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622452)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'entropy'
        return stypy_return_type_622452


    @norecursion
    def _cholesky_logdet(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_cholesky_logdet'
        module_type_store = module_type_store.open_function_context('_cholesky_logdet', 2138, 4, False)
        # Assigning a type to the variable 'self' (line 2139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2139, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_gen._cholesky_logdet.__dict__.__setitem__('stypy_localization', localization)
        wishart_gen._cholesky_logdet.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_gen._cholesky_logdet.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_gen._cholesky_logdet.__dict__.__setitem__('stypy_function_name', 'wishart_gen._cholesky_logdet')
        wishart_gen._cholesky_logdet.__dict__.__setitem__('stypy_param_names_list', ['scale'])
        wishart_gen._cholesky_logdet.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_gen._cholesky_logdet.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_gen._cholesky_logdet.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_gen._cholesky_logdet.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_gen._cholesky_logdet.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_gen._cholesky_logdet.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_gen._cholesky_logdet', ['scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_cholesky_logdet', localization, ['scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_cholesky_logdet(...)' code ##################

        str_622453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2159, (-1)), 'str', '\n        Compute Cholesky decomposition and determine (log(det(scale)).\n\n        Parameters\n        ----------\n        scale : ndarray\n            Scale matrix.\n\n        Returns\n        -------\n        c_decomp : ndarray\n            The Cholesky decomposition of `scale`.\n        logdet : scalar\n            The log of the determinant of `scale`.\n\n        Notes\n        -----\n        This computation of ``logdet`` is equivalent to\n        ``np.linalg.slogdet(scale)``.  It is ~2x faster though.\n\n        ')
        
        # Assigning a Call to a Name (line 2160):
        
        # Assigning a Call to a Name (line 2160):
        
        # Call to cholesky(...): (line 2160)
        # Processing the call arguments (line 2160)
        # Getting the type of 'scale' (line 2160)
        scale_622457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 41), 'scale', False)
        # Processing the call keyword arguments (line 2160)
        # Getting the type of 'True' (line 2160)
        True_622458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 54), 'True', False)
        keyword_622459 = True_622458
        kwargs_622460 = {'lower': keyword_622459}
        # Getting the type of 'scipy' (line 2160)
        scipy_622454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 19), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2160)
        linalg_622455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2160, 19), scipy_622454, 'linalg')
        # Obtaining the member 'cholesky' of a type (line 2160)
        cholesky_622456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2160, 19), linalg_622455, 'cholesky')
        # Calling cholesky(args, kwargs) (line 2160)
        cholesky_call_result_622461 = invoke(stypy.reporting.localization.Localization(__file__, 2160, 19), cholesky_622456, *[scale_622457], **kwargs_622460)
        
        # Assigning a type to the variable 'c_decomp' (line 2160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 8), 'c_decomp', cholesky_call_result_622461)
        
        # Assigning a BinOp to a Name (line 2161):
        
        # Assigning a BinOp to a Name (line 2161):
        int_622462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2161, 17), 'int')
        
        # Call to sum(...): (line 2161)
        # Processing the call arguments (line 2161)
        
        # Call to log(...): (line 2161)
        # Processing the call arguments (line 2161)
        
        # Call to diagonal(...): (line 2161)
        # Processing the call keyword arguments (line 2161)
        kwargs_622469 = {}
        # Getting the type of 'c_decomp' (line 2161)
        c_decomp_622467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 35), 'c_decomp', False)
        # Obtaining the member 'diagonal' of a type (line 2161)
        diagonal_622468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2161, 35), c_decomp_622467, 'diagonal')
        # Calling diagonal(args, kwargs) (line 2161)
        diagonal_call_result_622470 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 35), diagonal_622468, *[], **kwargs_622469)
        
        # Processing the call keyword arguments (line 2161)
        kwargs_622471 = {}
        # Getting the type of 'np' (line 2161)
        np_622465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 28), 'np', False)
        # Obtaining the member 'log' of a type (line 2161)
        log_622466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2161, 28), np_622465, 'log')
        # Calling log(args, kwargs) (line 2161)
        log_call_result_622472 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 28), log_622466, *[diagonal_call_result_622470], **kwargs_622471)
        
        # Processing the call keyword arguments (line 2161)
        kwargs_622473 = {}
        # Getting the type of 'np' (line 2161)
        np_622463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 21), 'np', False)
        # Obtaining the member 'sum' of a type (line 2161)
        sum_622464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2161, 21), np_622463, 'sum')
        # Calling sum(args, kwargs) (line 2161)
        sum_call_result_622474 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 21), sum_622464, *[log_call_result_622472], **kwargs_622473)
        
        # Applying the binary operator '*' (line 2161)
        result_mul_622475 = python_operator(stypy.reporting.localization.Localization(__file__, 2161, 17), '*', int_622462, sum_call_result_622474)
        
        # Assigning a type to the variable 'logdet' (line 2161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2161, 8), 'logdet', result_mul_622475)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2162)
        tuple_622476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2162, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2162)
        # Adding element type (line 2162)
        # Getting the type of 'c_decomp' (line 2162)
        c_decomp_622477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 15), 'c_decomp')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2162, 15), tuple_622476, c_decomp_622477)
        # Adding element type (line 2162)
        # Getting the type of 'logdet' (line 2162)
        logdet_622478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 25), 'logdet')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2162, 15), tuple_622476, logdet_622478)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2162, 8), 'stypy_return_type', tuple_622476)
        
        # ################# End of '_cholesky_logdet(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_cholesky_logdet' in the type store
        # Getting the type of 'stypy_return_type' (line 2138)
        stypy_return_type_622479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622479)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_cholesky_logdet'
        return stypy_return_type_622479


# Assigning a type to the variable 'wishart_gen' (line 1567)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 0), 'wishart_gen', wishart_gen)

# Assigning a Call to a Name (line 2163):

# Assigning a Call to a Name (line 2163):

# Call to wishart_gen(...): (line 2163)
# Processing the call keyword arguments (line 2163)
kwargs_622481 = {}
# Getting the type of 'wishart_gen' (line 2163)
wishart_gen_622480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 10), 'wishart_gen', False)
# Calling wishart_gen(args, kwargs) (line 2163)
wishart_gen_call_result_622482 = invoke(stypy.reporting.localization.Localization(__file__, 2163, 10), wishart_gen_622480, *[], **kwargs_622481)

# Assigning a type to the variable 'wishart' (line 2163)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2163, 0), 'wishart', wishart_gen_call_result_622482)
# Declaration of the 'wishart_frozen' class
# Getting the type of 'multi_rv_frozen' (line 2166)
multi_rv_frozen_622483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 21), 'multi_rv_frozen')

class wishart_frozen(multi_rv_frozen_622483, ):
    str_622484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2183, (-1)), 'str', '\n    Create a frozen Wishart distribution.\n\n    Parameters\n    ----------\n    df : array_like\n        Degrees of freedom of the distribution\n    scale : array_like\n        Scale matrix of the distribution\n    seed : None or int or np.random.RandomState instance, optional\n        This parameter defines the RandomState object to use for drawing\n        random variates.\n        If None (or np.random), the global np.random state is used.\n        If integer, it is used to seed the local RandomState instance\n        Default is None.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2184)
        None_622485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 39), 'None')
        defaults = [None_622485]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2184, 4, False)
        # Assigning a type to the variable 'self' (line 2185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_frozen.__init__', ['df', 'scale', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['df', 'scale', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 2185):
        
        # Assigning a Call to a Attribute (line 2185):
        
        # Call to wishart_gen(...): (line 2185)
        # Processing the call arguments (line 2185)
        # Getting the type of 'seed' (line 2185)
        seed_622487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 33), 'seed', False)
        # Processing the call keyword arguments (line 2185)
        kwargs_622488 = {}
        # Getting the type of 'wishart_gen' (line 2185)
        wishart_gen_622486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 21), 'wishart_gen', False)
        # Calling wishart_gen(args, kwargs) (line 2185)
        wishart_gen_call_result_622489 = invoke(stypy.reporting.localization.Localization(__file__, 2185, 21), wishart_gen_622486, *[seed_622487], **kwargs_622488)
        
        # Getting the type of 'self' (line 2185)
        self_622490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 8), 'self')
        # Setting the type of the member '_dist' of a type (line 2185)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2185, 8), self_622490, '_dist', wishart_gen_call_result_622489)
        
        # Assigning a Call to a Tuple (line 2186):
        
        # Assigning a Subscript to a Name (line 2186):
        
        # Obtaining the type of the subscript
        int_622491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 8), 'int')
        
        # Call to _process_parameters(...): (line 2186)
        # Processing the call arguments (line 2186)
        # Getting the type of 'df' (line 2187)
        df_622495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 12), 'df', False)
        # Getting the type of 'scale' (line 2187)
        scale_622496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 16), 'scale', False)
        # Processing the call keyword arguments (line 2186)
        kwargs_622497 = {}
        # Getting the type of 'self' (line 2186)
        self_622492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 40), 'self', False)
        # Obtaining the member '_dist' of a type (line 2186)
        _dist_622493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 40), self_622492, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 2186)
        _process_parameters_622494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 40), _dist_622493, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2186)
        _process_parameters_call_result_622498 = invoke(stypy.reporting.localization.Localization(__file__, 2186, 40), _process_parameters_622494, *[df_622495, scale_622496], **kwargs_622497)
        
        # Obtaining the member '__getitem__' of a type (line 2186)
        getitem___622499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 8), _process_parameters_call_result_622498, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2186)
        subscript_call_result_622500 = invoke(stypy.reporting.localization.Localization(__file__, 2186, 8), getitem___622499, int_622491)
        
        # Assigning a type to the variable 'tuple_var_assignment_618633' (line 2186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'tuple_var_assignment_618633', subscript_call_result_622500)
        
        # Assigning a Subscript to a Name (line 2186):
        
        # Obtaining the type of the subscript
        int_622501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 8), 'int')
        
        # Call to _process_parameters(...): (line 2186)
        # Processing the call arguments (line 2186)
        # Getting the type of 'df' (line 2187)
        df_622505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 12), 'df', False)
        # Getting the type of 'scale' (line 2187)
        scale_622506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 16), 'scale', False)
        # Processing the call keyword arguments (line 2186)
        kwargs_622507 = {}
        # Getting the type of 'self' (line 2186)
        self_622502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 40), 'self', False)
        # Obtaining the member '_dist' of a type (line 2186)
        _dist_622503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 40), self_622502, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 2186)
        _process_parameters_622504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 40), _dist_622503, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2186)
        _process_parameters_call_result_622508 = invoke(stypy.reporting.localization.Localization(__file__, 2186, 40), _process_parameters_622504, *[df_622505, scale_622506], **kwargs_622507)
        
        # Obtaining the member '__getitem__' of a type (line 2186)
        getitem___622509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 8), _process_parameters_call_result_622508, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2186)
        subscript_call_result_622510 = invoke(stypy.reporting.localization.Localization(__file__, 2186, 8), getitem___622509, int_622501)
        
        # Assigning a type to the variable 'tuple_var_assignment_618634' (line 2186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'tuple_var_assignment_618634', subscript_call_result_622510)
        
        # Assigning a Subscript to a Name (line 2186):
        
        # Obtaining the type of the subscript
        int_622511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 8), 'int')
        
        # Call to _process_parameters(...): (line 2186)
        # Processing the call arguments (line 2186)
        # Getting the type of 'df' (line 2187)
        df_622515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 12), 'df', False)
        # Getting the type of 'scale' (line 2187)
        scale_622516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 16), 'scale', False)
        # Processing the call keyword arguments (line 2186)
        kwargs_622517 = {}
        # Getting the type of 'self' (line 2186)
        self_622512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 40), 'self', False)
        # Obtaining the member '_dist' of a type (line 2186)
        _dist_622513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 40), self_622512, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 2186)
        _process_parameters_622514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 40), _dist_622513, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2186)
        _process_parameters_call_result_622518 = invoke(stypy.reporting.localization.Localization(__file__, 2186, 40), _process_parameters_622514, *[df_622515, scale_622516], **kwargs_622517)
        
        # Obtaining the member '__getitem__' of a type (line 2186)
        getitem___622519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 8), _process_parameters_call_result_622518, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2186)
        subscript_call_result_622520 = invoke(stypy.reporting.localization.Localization(__file__, 2186, 8), getitem___622519, int_622511)
        
        # Assigning a type to the variable 'tuple_var_assignment_618635' (line 2186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'tuple_var_assignment_618635', subscript_call_result_622520)
        
        # Assigning a Name to a Attribute (line 2186):
        # Getting the type of 'tuple_var_assignment_618633' (line 2186)
        tuple_var_assignment_618633_622521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'tuple_var_assignment_618633')
        # Getting the type of 'self' (line 2186)
        self_622522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'self')
        # Setting the type of the member 'dim' of a type (line 2186)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 8), self_622522, 'dim', tuple_var_assignment_618633_622521)
        
        # Assigning a Name to a Attribute (line 2186):
        # Getting the type of 'tuple_var_assignment_618634' (line 2186)
        tuple_var_assignment_618634_622523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'tuple_var_assignment_618634')
        # Getting the type of 'self' (line 2186)
        self_622524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 18), 'self')
        # Setting the type of the member 'df' of a type (line 2186)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 18), self_622524, 'df', tuple_var_assignment_618634_622523)
        
        # Assigning a Name to a Attribute (line 2186):
        # Getting the type of 'tuple_var_assignment_618635' (line 2186)
        tuple_var_assignment_618635_622525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'tuple_var_assignment_618635')
        # Getting the type of 'self' (line 2186)
        self_622526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 27), 'self')
        # Setting the type of the member 'scale' of a type (line 2186)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 27), self_622526, 'scale', tuple_var_assignment_618635_622525)
        
        # Assigning a Call to a Tuple (line 2188):
        
        # Assigning a Subscript to a Name (line 2188):
        
        # Obtaining the type of the subscript
        int_622527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 8), 'int')
        
        # Call to _cholesky_logdet(...): (line 2188)
        # Processing the call arguments (line 2188)
        # Getting the type of 'self' (line 2188)
        self_622531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 65), 'self', False)
        # Obtaining the member 'scale' of a type (line 2188)
        scale_622532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 65), self_622531, 'scale')
        # Processing the call keyword arguments (line 2188)
        kwargs_622533 = {}
        # Getting the type of 'self' (line 2188)
        self_622528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 37), 'self', False)
        # Obtaining the member '_dist' of a type (line 2188)
        _dist_622529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 37), self_622528, '_dist')
        # Obtaining the member '_cholesky_logdet' of a type (line 2188)
        _cholesky_logdet_622530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 37), _dist_622529, '_cholesky_logdet')
        # Calling _cholesky_logdet(args, kwargs) (line 2188)
        _cholesky_logdet_call_result_622534 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 37), _cholesky_logdet_622530, *[scale_622532], **kwargs_622533)
        
        # Obtaining the member '__getitem__' of a type (line 2188)
        getitem___622535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 8), _cholesky_logdet_call_result_622534, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2188)
        subscript_call_result_622536 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 8), getitem___622535, int_622527)
        
        # Assigning a type to the variable 'tuple_var_assignment_618636' (line 2188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'tuple_var_assignment_618636', subscript_call_result_622536)
        
        # Assigning a Subscript to a Name (line 2188):
        
        # Obtaining the type of the subscript
        int_622537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 8), 'int')
        
        # Call to _cholesky_logdet(...): (line 2188)
        # Processing the call arguments (line 2188)
        # Getting the type of 'self' (line 2188)
        self_622541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 65), 'self', False)
        # Obtaining the member 'scale' of a type (line 2188)
        scale_622542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 65), self_622541, 'scale')
        # Processing the call keyword arguments (line 2188)
        kwargs_622543 = {}
        # Getting the type of 'self' (line 2188)
        self_622538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 37), 'self', False)
        # Obtaining the member '_dist' of a type (line 2188)
        _dist_622539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 37), self_622538, '_dist')
        # Obtaining the member '_cholesky_logdet' of a type (line 2188)
        _cholesky_logdet_622540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 37), _dist_622539, '_cholesky_logdet')
        # Calling _cholesky_logdet(args, kwargs) (line 2188)
        _cholesky_logdet_call_result_622544 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 37), _cholesky_logdet_622540, *[scale_622542], **kwargs_622543)
        
        # Obtaining the member '__getitem__' of a type (line 2188)
        getitem___622545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 8), _cholesky_logdet_call_result_622544, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2188)
        subscript_call_result_622546 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 8), getitem___622545, int_622537)
        
        # Assigning a type to the variable 'tuple_var_assignment_618637' (line 2188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'tuple_var_assignment_618637', subscript_call_result_622546)
        
        # Assigning a Name to a Attribute (line 2188):
        # Getting the type of 'tuple_var_assignment_618636' (line 2188)
        tuple_var_assignment_618636_622547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'tuple_var_assignment_618636')
        # Getting the type of 'self' (line 2188)
        self_622548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'self')
        # Setting the type of the member 'C' of a type (line 2188)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 8), self_622548, 'C', tuple_var_assignment_618636_622547)
        
        # Assigning a Name to a Attribute (line 2188):
        # Getting the type of 'tuple_var_assignment_618637' (line 2188)
        tuple_var_assignment_618637_622549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'tuple_var_assignment_618637')
        # Getting the type of 'self' (line 2188)
        self_622550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 16), 'self')
        # Setting the type of the member 'log_det_scale' of a type (line 2188)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 16), self_622550, 'log_det_scale', tuple_var_assignment_618637_622549)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'logpdf'
        module_type_store = module_type_store.open_function_context('logpdf', 2190, 4, False)
        # Assigning a type to the variable 'self' (line 2191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2191, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_frozen.logpdf.__dict__.__setitem__('stypy_localization', localization)
        wishart_frozen.logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_frozen.logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_frozen.logpdf.__dict__.__setitem__('stypy_function_name', 'wishart_frozen.logpdf')
        wishart_frozen.logpdf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        wishart_frozen.logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_frozen.logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_frozen.logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_frozen.logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_frozen.logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_frozen.logpdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_frozen.logpdf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpdf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpdf(...)' code ##################

        
        # Assigning a Call to a Name (line 2191):
        
        # Assigning a Call to a Name (line 2191):
        
        # Call to _process_quantiles(...): (line 2191)
        # Processing the call arguments (line 2191)
        # Getting the type of 'x' (line 2191)
        x_622554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 42), 'x', False)
        # Getting the type of 'self' (line 2191)
        self_622555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 45), 'self', False)
        # Obtaining the member 'dim' of a type (line 2191)
        dim_622556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2191, 45), self_622555, 'dim')
        # Processing the call keyword arguments (line 2191)
        kwargs_622557 = {}
        # Getting the type of 'self' (line 2191)
        self_622551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 12), 'self', False)
        # Obtaining the member '_dist' of a type (line 2191)
        _dist_622552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2191, 12), self_622551, '_dist')
        # Obtaining the member '_process_quantiles' of a type (line 2191)
        _process_quantiles_622553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2191, 12), _dist_622552, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 2191)
        _process_quantiles_call_result_622558 = invoke(stypy.reporting.localization.Localization(__file__, 2191, 12), _process_quantiles_622553, *[x_622554, dim_622556], **kwargs_622557)
        
        # Assigning a type to the variable 'x' (line 2191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2191, 8), 'x', _process_quantiles_call_result_622558)
        
        # Assigning a Call to a Name (line 2193):
        
        # Assigning a Call to a Name (line 2193):
        
        # Call to _logpdf(...): (line 2193)
        # Processing the call arguments (line 2193)
        # Getting the type of 'x' (line 2193)
        x_622562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 33), 'x', False)
        # Getting the type of 'self' (line 2193)
        self_622563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 36), 'self', False)
        # Obtaining the member 'dim' of a type (line 2193)
        dim_622564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2193, 36), self_622563, 'dim')
        # Getting the type of 'self' (line 2193)
        self_622565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 46), 'self', False)
        # Obtaining the member 'df' of a type (line 2193)
        df_622566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2193, 46), self_622565, 'df')
        # Getting the type of 'self' (line 2193)
        self_622567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 55), 'self', False)
        # Obtaining the member 'scale' of a type (line 2193)
        scale_622568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2193, 55), self_622567, 'scale')
        # Getting the type of 'self' (line 2194)
        self_622569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 33), 'self', False)
        # Obtaining the member 'log_det_scale' of a type (line 2194)
        log_det_scale_622570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2194, 33), self_622569, 'log_det_scale')
        # Getting the type of 'self' (line 2194)
        self_622571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 53), 'self', False)
        # Obtaining the member 'C' of a type (line 2194)
        C_622572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2194, 53), self_622571, 'C')
        # Processing the call keyword arguments (line 2193)
        kwargs_622573 = {}
        # Getting the type of 'self' (line 2193)
        self_622559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 2193)
        _dist_622560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2193, 14), self_622559, '_dist')
        # Obtaining the member '_logpdf' of a type (line 2193)
        _logpdf_622561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2193, 14), _dist_622560, '_logpdf')
        # Calling _logpdf(args, kwargs) (line 2193)
        _logpdf_call_result_622574 = invoke(stypy.reporting.localization.Localization(__file__, 2193, 14), _logpdf_622561, *[x_622562, dim_622564, df_622566, scale_622568, log_det_scale_622570, C_622572], **kwargs_622573)
        
        # Assigning a type to the variable 'out' (line 2193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2193, 8), 'out', _logpdf_call_result_622574)
        
        # Call to _squeeze_output(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'out' (line 2195)
        out_622576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 31), 'out', False)
        # Processing the call keyword arguments (line 2195)
        kwargs_622577 = {}
        # Getting the type of '_squeeze_output' (line 2195)
        _squeeze_output_622575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2195)
        _squeeze_output_call_result_622578 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 15), _squeeze_output_622575, *[out_622576], **kwargs_622577)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'stypy_return_type', _squeeze_output_call_result_622578)
        
        # ################# End of 'logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 2190)
        stypy_return_type_622579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622579)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpdf'
        return stypy_return_type_622579


    @norecursion
    def pdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pdf'
        module_type_store = module_type_store.open_function_context('pdf', 2197, 4, False)
        # Assigning a type to the variable 'self' (line 2198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2198, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_frozen.pdf.__dict__.__setitem__('stypy_localization', localization)
        wishart_frozen.pdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_frozen.pdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_frozen.pdf.__dict__.__setitem__('stypy_function_name', 'wishart_frozen.pdf')
        wishart_frozen.pdf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        wishart_frozen.pdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_frozen.pdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_frozen.pdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_frozen.pdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_frozen.pdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_frozen.pdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_frozen.pdf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pdf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pdf(...)' code ##################

        
        # Call to exp(...): (line 2198)
        # Processing the call arguments (line 2198)
        
        # Call to logpdf(...): (line 2198)
        # Processing the call arguments (line 2198)
        # Getting the type of 'x' (line 2198)
        x_622584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 34), 'x', False)
        # Processing the call keyword arguments (line 2198)
        kwargs_622585 = {}
        # Getting the type of 'self' (line 2198)
        self_622582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 22), 'self', False)
        # Obtaining the member 'logpdf' of a type (line 2198)
        logpdf_622583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 22), self_622582, 'logpdf')
        # Calling logpdf(args, kwargs) (line 2198)
        logpdf_call_result_622586 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 22), logpdf_622583, *[x_622584], **kwargs_622585)
        
        # Processing the call keyword arguments (line 2198)
        kwargs_622587 = {}
        # Getting the type of 'np' (line 2198)
        np_622580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 15), 'np', False)
        # Obtaining the member 'exp' of a type (line 2198)
        exp_622581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 15), np_622580, 'exp')
        # Calling exp(args, kwargs) (line 2198)
        exp_call_result_622588 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 15), exp_622581, *[logpdf_call_result_622586], **kwargs_622587)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2198, 8), 'stypy_return_type', exp_call_result_622588)
        
        # ################# End of 'pdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pdf' in the type store
        # Getting the type of 'stypy_return_type' (line 2197)
        stypy_return_type_622589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622589)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pdf'
        return stypy_return_type_622589


    @norecursion
    def mean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mean'
        module_type_store = module_type_store.open_function_context('mean', 2200, 4, False)
        # Assigning a type to the variable 'self' (line 2201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2201, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_frozen.mean.__dict__.__setitem__('stypy_localization', localization)
        wishart_frozen.mean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_frozen.mean.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_frozen.mean.__dict__.__setitem__('stypy_function_name', 'wishart_frozen.mean')
        wishart_frozen.mean.__dict__.__setitem__('stypy_param_names_list', [])
        wishart_frozen.mean.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_frozen.mean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_frozen.mean.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_frozen.mean.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_frozen.mean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_frozen.mean.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_frozen.mean', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mean', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mean(...)' code ##################

        
        # Assigning a Call to a Name (line 2201):
        
        # Assigning a Call to a Name (line 2201):
        
        # Call to _mean(...): (line 2201)
        # Processing the call arguments (line 2201)
        # Getting the type of 'self' (line 2201)
        self_622593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 31), 'self', False)
        # Obtaining the member 'dim' of a type (line 2201)
        dim_622594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2201, 31), self_622593, 'dim')
        # Getting the type of 'self' (line 2201)
        self_622595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 41), 'self', False)
        # Obtaining the member 'df' of a type (line 2201)
        df_622596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2201, 41), self_622595, 'df')
        # Getting the type of 'self' (line 2201)
        self_622597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 50), 'self', False)
        # Obtaining the member 'scale' of a type (line 2201)
        scale_622598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2201, 50), self_622597, 'scale')
        # Processing the call keyword arguments (line 2201)
        kwargs_622599 = {}
        # Getting the type of 'self' (line 2201)
        self_622590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 2201)
        _dist_622591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2201, 14), self_622590, '_dist')
        # Obtaining the member '_mean' of a type (line 2201)
        _mean_622592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2201, 14), _dist_622591, '_mean')
        # Calling _mean(args, kwargs) (line 2201)
        _mean_call_result_622600 = invoke(stypy.reporting.localization.Localization(__file__, 2201, 14), _mean_622592, *[dim_622594, df_622596, scale_622598], **kwargs_622599)
        
        # Assigning a type to the variable 'out' (line 2201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2201, 8), 'out', _mean_call_result_622600)
        
        # Call to _squeeze_output(...): (line 2202)
        # Processing the call arguments (line 2202)
        # Getting the type of 'out' (line 2202)
        out_622602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 31), 'out', False)
        # Processing the call keyword arguments (line 2202)
        kwargs_622603 = {}
        # Getting the type of '_squeeze_output' (line 2202)
        _squeeze_output_622601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2202)
        _squeeze_output_call_result_622604 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 15), _squeeze_output_622601, *[out_622602], **kwargs_622603)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 8), 'stypy_return_type', _squeeze_output_call_result_622604)
        
        # ################# End of 'mean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mean' in the type store
        # Getting the type of 'stypy_return_type' (line 2200)
        stypy_return_type_622605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622605)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mean'
        return stypy_return_type_622605


    @norecursion
    def mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mode'
        module_type_store = module_type_store.open_function_context('mode', 2204, 4, False)
        # Assigning a type to the variable 'self' (line 2205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_frozen.mode.__dict__.__setitem__('stypy_localization', localization)
        wishart_frozen.mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_frozen.mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_frozen.mode.__dict__.__setitem__('stypy_function_name', 'wishart_frozen.mode')
        wishart_frozen.mode.__dict__.__setitem__('stypy_param_names_list', [])
        wishart_frozen.mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_frozen.mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_frozen.mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_frozen.mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_frozen.mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_frozen.mode.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_frozen.mode', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mode', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mode(...)' code ##################

        
        # Assigning a Call to a Name (line 2205):
        
        # Assigning a Call to a Name (line 2205):
        
        # Call to _mode(...): (line 2205)
        # Processing the call arguments (line 2205)
        # Getting the type of 'self' (line 2205)
        self_622609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 31), 'self', False)
        # Obtaining the member 'dim' of a type (line 2205)
        dim_622610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 31), self_622609, 'dim')
        # Getting the type of 'self' (line 2205)
        self_622611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 41), 'self', False)
        # Obtaining the member 'df' of a type (line 2205)
        df_622612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 41), self_622611, 'df')
        # Getting the type of 'self' (line 2205)
        self_622613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 50), 'self', False)
        # Obtaining the member 'scale' of a type (line 2205)
        scale_622614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 50), self_622613, 'scale')
        # Processing the call keyword arguments (line 2205)
        kwargs_622615 = {}
        # Getting the type of 'self' (line 2205)
        self_622606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 2205)
        _dist_622607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 14), self_622606, '_dist')
        # Obtaining the member '_mode' of a type (line 2205)
        _mode_622608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 14), _dist_622607, '_mode')
        # Calling _mode(args, kwargs) (line 2205)
        _mode_call_result_622616 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 14), _mode_622608, *[dim_622610, df_622612, scale_622614], **kwargs_622615)
        
        # Assigning a type to the variable 'out' (line 2205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 8), 'out', _mode_call_result_622616)
        
        
        # Getting the type of 'out' (line 2206)
        out_622617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 39), 'out')
        # Getting the type of 'None' (line 2206)
        None_622618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 50), 'None')
        # Applying the binary operator 'isnot' (line 2206)
        result_is_not_622619 = python_operator(stypy.reporting.localization.Localization(__file__, 2206, 39), 'isnot', out_622617, None_622618)
        
        # Testing the type of an if expression (line 2206)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2206, 15), result_is_not_622619)
        # SSA begins for if expression (line 2206)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to _squeeze_output(...): (line 2206)
        # Processing the call arguments (line 2206)
        # Getting the type of 'out' (line 2206)
        out_622621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 31), 'out', False)
        # Processing the call keyword arguments (line 2206)
        kwargs_622622 = {}
        # Getting the type of '_squeeze_output' (line 2206)
        _squeeze_output_622620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2206)
        _squeeze_output_call_result_622623 = invoke(stypy.reporting.localization.Localization(__file__, 2206, 15), _squeeze_output_622620, *[out_622621], **kwargs_622622)
        
        # SSA branch for the else part of an if expression (line 2206)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'out' (line 2206)
        out_622624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 60), 'out')
        # SSA join for if expression (line 2206)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_622625 = union_type.UnionType.add(_squeeze_output_call_result_622623, out_622624)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2206, 8), 'stypy_return_type', if_exp_622625)
        
        # ################# End of 'mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mode' in the type store
        # Getting the type of 'stypy_return_type' (line 2204)
        stypy_return_type_622626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622626)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mode'
        return stypy_return_type_622626


    @norecursion
    def var(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'var'
        module_type_store = module_type_store.open_function_context('var', 2208, 4, False)
        # Assigning a type to the variable 'self' (line 2209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2209, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_frozen.var.__dict__.__setitem__('stypy_localization', localization)
        wishart_frozen.var.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_frozen.var.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_frozen.var.__dict__.__setitem__('stypy_function_name', 'wishart_frozen.var')
        wishart_frozen.var.__dict__.__setitem__('stypy_param_names_list', [])
        wishart_frozen.var.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_frozen.var.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_frozen.var.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_frozen.var.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_frozen.var.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_frozen.var.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_frozen.var', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'var', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'var(...)' code ##################

        
        # Assigning a Call to a Name (line 2209):
        
        # Assigning a Call to a Name (line 2209):
        
        # Call to _var(...): (line 2209)
        # Processing the call arguments (line 2209)
        # Getting the type of 'self' (line 2209)
        self_622630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 30), 'self', False)
        # Obtaining the member 'dim' of a type (line 2209)
        dim_622631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 30), self_622630, 'dim')
        # Getting the type of 'self' (line 2209)
        self_622632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 40), 'self', False)
        # Obtaining the member 'df' of a type (line 2209)
        df_622633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 40), self_622632, 'df')
        # Getting the type of 'self' (line 2209)
        self_622634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 49), 'self', False)
        # Obtaining the member 'scale' of a type (line 2209)
        scale_622635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 49), self_622634, 'scale')
        # Processing the call keyword arguments (line 2209)
        kwargs_622636 = {}
        # Getting the type of 'self' (line 2209)
        self_622627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 2209)
        _dist_622628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 14), self_622627, '_dist')
        # Obtaining the member '_var' of a type (line 2209)
        _var_622629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 14), _dist_622628, '_var')
        # Calling _var(args, kwargs) (line 2209)
        _var_call_result_622637 = invoke(stypy.reporting.localization.Localization(__file__, 2209, 14), _var_622629, *[dim_622631, df_622633, scale_622635], **kwargs_622636)
        
        # Assigning a type to the variable 'out' (line 2209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2209, 8), 'out', _var_call_result_622637)
        
        # Call to _squeeze_output(...): (line 2210)
        # Processing the call arguments (line 2210)
        # Getting the type of 'out' (line 2210)
        out_622639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 31), 'out', False)
        # Processing the call keyword arguments (line 2210)
        kwargs_622640 = {}
        # Getting the type of '_squeeze_output' (line 2210)
        _squeeze_output_622638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2210)
        _squeeze_output_call_result_622641 = invoke(stypy.reporting.localization.Localization(__file__, 2210, 15), _squeeze_output_622638, *[out_622639], **kwargs_622640)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2210, 8), 'stypy_return_type', _squeeze_output_call_result_622641)
        
        # ################# End of 'var(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'var' in the type store
        # Getting the type of 'stypy_return_type' (line 2208)
        stypy_return_type_622642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622642)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'var'
        return stypy_return_type_622642


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_622643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2212, 23), 'int')
        # Getting the type of 'None' (line 2212)
        None_622644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 39), 'None')
        defaults = [int_622643, None_622644]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 2212, 4, False)
        # Assigning a type to the variable 'self' (line 2213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2213, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_frozen.rvs.__dict__.__setitem__('stypy_localization', localization)
        wishart_frozen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_frozen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_frozen.rvs.__dict__.__setitem__('stypy_function_name', 'wishart_frozen.rvs')
        wishart_frozen.rvs.__dict__.__setitem__('stypy_param_names_list', ['size', 'random_state'])
        wishart_frozen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_frozen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_frozen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_frozen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_frozen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_frozen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_frozen.rvs', ['size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        
        # Assigning a Call to a Tuple (line 2213):
        
        # Assigning a Subscript to a Name (line 2213):
        
        # Obtaining the type of the subscript
        int_622645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2213, 8), 'int')
        
        # Call to _process_size(...): (line 2213)
        # Processing the call arguments (line 2213)
        # Getting the type of 'size' (line 2213)
        size_622649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 44), 'size', False)
        # Processing the call keyword arguments (line 2213)
        kwargs_622650 = {}
        # Getting the type of 'self' (line 2213)
        self_622646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 19), 'self', False)
        # Obtaining the member '_dist' of a type (line 2213)
        _dist_622647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2213, 19), self_622646, '_dist')
        # Obtaining the member '_process_size' of a type (line 2213)
        _process_size_622648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2213, 19), _dist_622647, '_process_size')
        # Calling _process_size(args, kwargs) (line 2213)
        _process_size_call_result_622651 = invoke(stypy.reporting.localization.Localization(__file__, 2213, 19), _process_size_622648, *[size_622649], **kwargs_622650)
        
        # Obtaining the member '__getitem__' of a type (line 2213)
        getitem___622652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2213, 8), _process_size_call_result_622651, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2213)
        subscript_call_result_622653 = invoke(stypy.reporting.localization.Localization(__file__, 2213, 8), getitem___622652, int_622645)
        
        # Assigning a type to the variable 'tuple_var_assignment_618638' (line 2213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2213, 8), 'tuple_var_assignment_618638', subscript_call_result_622653)
        
        # Assigning a Subscript to a Name (line 2213):
        
        # Obtaining the type of the subscript
        int_622654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2213, 8), 'int')
        
        # Call to _process_size(...): (line 2213)
        # Processing the call arguments (line 2213)
        # Getting the type of 'size' (line 2213)
        size_622658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 44), 'size', False)
        # Processing the call keyword arguments (line 2213)
        kwargs_622659 = {}
        # Getting the type of 'self' (line 2213)
        self_622655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 19), 'self', False)
        # Obtaining the member '_dist' of a type (line 2213)
        _dist_622656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2213, 19), self_622655, '_dist')
        # Obtaining the member '_process_size' of a type (line 2213)
        _process_size_622657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2213, 19), _dist_622656, '_process_size')
        # Calling _process_size(args, kwargs) (line 2213)
        _process_size_call_result_622660 = invoke(stypy.reporting.localization.Localization(__file__, 2213, 19), _process_size_622657, *[size_622658], **kwargs_622659)
        
        # Obtaining the member '__getitem__' of a type (line 2213)
        getitem___622661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2213, 8), _process_size_call_result_622660, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2213)
        subscript_call_result_622662 = invoke(stypy.reporting.localization.Localization(__file__, 2213, 8), getitem___622661, int_622654)
        
        # Assigning a type to the variable 'tuple_var_assignment_618639' (line 2213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2213, 8), 'tuple_var_assignment_618639', subscript_call_result_622662)
        
        # Assigning a Name to a Name (line 2213):
        # Getting the type of 'tuple_var_assignment_618638' (line 2213)
        tuple_var_assignment_618638_622663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 8), 'tuple_var_assignment_618638')
        # Assigning a type to the variable 'n' (line 2213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2213, 8), 'n', tuple_var_assignment_618638_622663)
        
        # Assigning a Name to a Name (line 2213):
        # Getting the type of 'tuple_var_assignment_618639' (line 2213)
        tuple_var_assignment_618639_622664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 8), 'tuple_var_assignment_618639')
        # Assigning a type to the variable 'shape' (line 2213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2213, 11), 'shape', tuple_var_assignment_618639_622664)
        
        # Assigning a Call to a Name (line 2214):
        
        # Assigning a Call to a Name (line 2214):
        
        # Call to _rvs(...): (line 2214)
        # Processing the call arguments (line 2214)
        # Getting the type of 'n' (line 2214)
        n_622668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 30), 'n', False)
        # Getting the type of 'shape' (line 2214)
        shape_622669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 33), 'shape', False)
        # Getting the type of 'self' (line 2214)
        self_622670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 40), 'self', False)
        # Obtaining the member 'dim' of a type (line 2214)
        dim_622671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 40), self_622670, 'dim')
        # Getting the type of 'self' (line 2214)
        self_622672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 50), 'self', False)
        # Obtaining the member 'df' of a type (line 2214)
        df_622673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 50), self_622672, 'df')
        # Getting the type of 'self' (line 2215)
        self_622674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 30), 'self', False)
        # Obtaining the member 'C' of a type (line 2215)
        C_622675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2215, 30), self_622674, 'C')
        # Getting the type of 'random_state' (line 2215)
        random_state_622676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 38), 'random_state', False)
        # Processing the call keyword arguments (line 2214)
        kwargs_622677 = {}
        # Getting the type of 'self' (line 2214)
        self_622665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 2214)
        _dist_622666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 14), self_622665, '_dist')
        # Obtaining the member '_rvs' of a type (line 2214)
        _rvs_622667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 14), _dist_622666, '_rvs')
        # Calling _rvs(args, kwargs) (line 2214)
        _rvs_call_result_622678 = invoke(stypy.reporting.localization.Localization(__file__, 2214, 14), _rvs_622667, *[n_622668, shape_622669, dim_622671, df_622673, C_622675, random_state_622676], **kwargs_622677)
        
        # Assigning a type to the variable 'out' (line 2214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2214, 8), 'out', _rvs_call_result_622678)
        
        # Call to _squeeze_output(...): (line 2216)
        # Processing the call arguments (line 2216)
        # Getting the type of 'out' (line 2216)
        out_622680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 31), 'out', False)
        # Processing the call keyword arguments (line 2216)
        kwargs_622681 = {}
        # Getting the type of '_squeeze_output' (line 2216)
        _squeeze_output_622679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2216)
        _squeeze_output_call_result_622682 = invoke(stypy.reporting.localization.Localization(__file__, 2216, 15), _squeeze_output_622679, *[out_622680], **kwargs_622681)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 8), 'stypy_return_type', _squeeze_output_call_result_622682)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 2212)
        stypy_return_type_622683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622683)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_622683


    @norecursion
    def entropy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'entropy'
        module_type_store = module_type_store.open_function_context('entropy', 2218, 4, False)
        # Assigning a type to the variable 'self' (line 2219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2219, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        wishart_frozen.entropy.__dict__.__setitem__('stypy_localization', localization)
        wishart_frozen.entropy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        wishart_frozen.entropy.__dict__.__setitem__('stypy_type_store', module_type_store)
        wishart_frozen.entropy.__dict__.__setitem__('stypy_function_name', 'wishart_frozen.entropy')
        wishart_frozen.entropy.__dict__.__setitem__('stypy_param_names_list', [])
        wishart_frozen.entropy.__dict__.__setitem__('stypy_varargs_param_name', None)
        wishart_frozen.entropy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        wishart_frozen.entropy.__dict__.__setitem__('stypy_call_defaults', defaults)
        wishart_frozen.entropy.__dict__.__setitem__('stypy_call_varargs', varargs)
        wishart_frozen.entropy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        wishart_frozen.entropy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wishart_frozen.entropy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'entropy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'entropy(...)' code ##################

        
        # Call to _entropy(...): (line 2219)
        # Processing the call arguments (line 2219)
        # Getting the type of 'self' (line 2219)
        self_622687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 35), 'self', False)
        # Obtaining the member 'dim' of a type (line 2219)
        dim_622688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 35), self_622687, 'dim')
        # Getting the type of 'self' (line 2219)
        self_622689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 45), 'self', False)
        # Obtaining the member 'df' of a type (line 2219)
        df_622690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 45), self_622689, 'df')
        # Getting the type of 'self' (line 2219)
        self_622691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 54), 'self', False)
        # Obtaining the member 'log_det_scale' of a type (line 2219)
        log_det_scale_622692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 54), self_622691, 'log_det_scale')
        # Processing the call keyword arguments (line 2219)
        kwargs_622693 = {}
        # Getting the type of 'self' (line 2219)
        self_622684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 2219)
        _dist_622685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 15), self_622684, '_dist')
        # Obtaining the member '_entropy' of a type (line 2219)
        _entropy_622686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 15), _dist_622685, '_entropy')
        # Calling _entropy(args, kwargs) (line 2219)
        _entropy_call_result_622694 = invoke(stypy.reporting.localization.Localization(__file__, 2219, 15), _entropy_622686, *[dim_622688, df_622690, log_det_scale_622692], **kwargs_622693)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2219, 8), 'stypy_return_type', _entropy_call_result_622694)
        
        # ################# End of 'entropy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'entropy' in the type store
        # Getting the type of 'stypy_return_type' (line 2218)
        stypy_return_type_622695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622695)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'entropy'
        return stypy_return_type_622695


# Assigning a type to the variable 'wishart_frozen' (line 2166)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 0), 'wishart_frozen', wishart_frozen)


# Obtaining an instance of the builtin type 'list' (line 2223)
list_622696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 12), 'list')
# Adding type elements to the builtin type 'list' instance (line 2223)
# Adding element type (line 2223)
str_622697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 13), 'str', 'logpdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2223, 12), list_622696, str_622697)
# Adding element type (line 2223)
str_622698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 23), 'str', 'pdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2223, 12), list_622696, str_622698)
# Adding element type (line 2223)
str_622699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 30), 'str', 'mean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2223, 12), list_622696, str_622699)
# Adding element type (line 2223)
str_622700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 38), 'str', 'mode')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2223, 12), list_622696, str_622700)
# Adding element type (line 2223)
str_622701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 46), 'str', 'var')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2223, 12), list_622696, str_622701)
# Adding element type (line 2223)
str_622702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 53), 'str', 'rvs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2223, 12), list_622696, str_622702)
# Adding element type (line 2223)
str_622703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 60), 'str', 'entropy')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2223, 12), list_622696, str_622703)

# Testing the type of a for loop iterable (line 2223)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2223, 0), list_622696)
# Getting the type of the for loop variable (line 2223)
for_loop_var_622704 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2223, 0), list_622696)
# Assigning a type to the variable 'name' (line 2223)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2223, 0), 'name', for_loop_var_622704)
# SSA begins for a for statement (line 2223)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')

# Assigning a Subscript to a Name (line 2224):

# Assigning a Subscript to a Name (line 2224):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 2224)
name_622705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 34), 'name')
# Getting the type of 'wishart_gen' (line 2224)
wishart_gen_622706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 13), 'wishart_gen')
# Obtaining the member '__dict__' of a type (line 2224)
dict___622707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2224, 13), wishart_gen_622706, '__dict__')
# Obtaining the member '__getitem__' of a type (line 2224)
getitem___622708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2224, 13), dict___622707, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 2224)
subscript_call_result_622709 = invoke(stypy.reporting.localization.Localization(__file__, 2224, 13), getitem___622708, name_622705)

# Assigning a type to the variable 'method' (line 2224)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2224, 4), 'method', subscript_call_result_622709)

# Assigning a Subscript to a Name (line 2225):

# Assigning a Subscript to a Name (line 2225):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 2225)
name_622710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 44), 'name')
# Getting the type of 'wishart_frozen' (line 2225)
wishart_frozen_622711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 20), 'wishart_frozen')
# Obtaining the member '__dict__' of a type (line 2225)
dict___622712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2225, 20), wishart_frozen_622711, '__dict__')
# Obtaining the member '__getitem__' of a type (line 2225)
getitem___622713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2225, 20), dict___622712, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 2225)
subscript_call_result_622714 = invoke(stypy.reporting.localization.Localization(__file__, 2225, 20), getitem___622713, name_622710)

# Assigning a type to the variable 'method_frozen' (line 2225)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2225, 4), 'method_frozen', subscript_call_result_622714)

# Assigning a Call to a Attribute (line 2226):

# Assigning a Call to a Attribute (line 2226):

# Call to docformat(...): (line 2226)
# Processing the call arguments (line 2226)
# Getting the type of 'method' (line 2227)
method_622717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 8), 'method', False)
# Obtaining the member '__doc__' of a type (line 2227)
doc___622718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2227, 8), method_622717, '__doc__')
# Getting the type of 'wishart_docdict_noparams' (line 2227)
wishart_docdict_noparams_622719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 24), 'wishart_docdict_noparams', False)
# Processing the call keyword arguments (line 2226)
kwargs_622720 = {}
# Getting the type of 'doccer' (line 2226)
doccer_622715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 28), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 2226)
docformat_622716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2226, 28), doccer_622715, 'docformat')
# Calling docformat(args, kwargs) (line 2226)
docformat_call_result_622721 = invoke(stypy.reporting.localization.Localization(__file__, 2226, 28), docformat_622716, *[doc___622718, wishart_docdict_noparams_622719], **kwargs_622720)

# Getting the type of 'method_frozen' (line 2226)
method_frozen_622722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 4), 'method_frozen')
# Setting the type of the member '__doc__' of a type (line 2226)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2226, 4), method_frozen_622722, '__doc__', docformat_call_result_622721)

# Assigning a Call to a Attribute (line 2228):

# Assigning a Call to a Attribute (line 2228):

# Call to docformat(...): (line 2228)
# Processing the call arguments (line 2228)
# Getting the type of 'method' (line 2228)
method_622725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 38), 'method', False)
# Obtaining the member '__doc__' of a type (line 2228)
doc___622726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 38), method_622725, '__doc__')
# Getting the type of 'wishart_docdict_params' (line 2228)
wishart_docdict_params_622727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 54), 'wishart_docdict_params', False)
# Processing the call keyword arguments (line 2228)
kwargs_622728 = {}
# Getting the type of 'doccer' (line 2228)
doccer_622723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 21), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 2228)
docformat_622724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 21), doccer_622723, 'docformat')
# Calling docformat(args, kwargs) (line 2228)
docformat_call_result_622729 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 21), docformat_622724, *[doc___622726, wishart_docdict_params_622727], **kwargs_622728)

# Getting the type of 'method' (line 2228)
method_622730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 4), 'method')
# Setting the type of the member '__doc__' of a type (line 2228)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 4), method_622730, '__doc__', docformat_call_result_622729)
# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2231, 0))

# 'from numpy import asarray_chkfinite, asarray' statement (line 2231)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_622731 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2231, 0), 'numpy')

if (type(import_622731) is not StypyTypeError):

    if (import_622731 != 'pyd_module'):
        __import__(import_622731)
        sys_modules_622732 = sys.modules[import_622731]
        import_from_module(stypy.reporting.localization.Localization(__file__, 2231, 0), 'numpy', sys_modules_622732.module_type_store, module_type_store, ['asarray_chkfinite', 'asarray'])
        nest_module(stypy.reporting.localization.Localization(__file__, 2231, 0), __file__, sys_modules_622732, sys_modules_622732.module_type_store, module_type_store)
    else:
        from numpy import asarray_chkfinite, asarray

        import_from_module(stypy.reporting.localization.Localization(__file__, 2231, 0), 'numpy', None, module_type_store, ['asarray_chkfinite', 'asarray'], [asarray_chkfinite, asarray])

else:
    # Assigning a type to the variable 'numpy' (line 2231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 0), 'numpy', import_622731)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2232, 0))

# 'from scipy.linalg.misc import LinAlgError' statement (line 2232)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_622733 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2232, 0), 'scipy.linalg.misc')

if (type(import_622733) is not StypyTypeError):

    if (import_622733 != 'pyd_module'):
        __import__(import_622733)
        sys_modules_622734 = sys.modules[import_622733]
        import_from_module(stypy.reporting.localization.Localization(__file__, 2232, 0), 'scipy.linalg.misc', sys_modules_622734.module_type_store, module_type_store, ['LinAlgError'])
        nest_module(stypy.reporting.localization.Localization(__file__, 2232, 0), __file__, sys_modules_622734, sys_modules_622734.module_type_store, module_type_store)
    else:
        from scipy.linalg.misc import LinAlgError

        import_from_module(stypy.reporting.localization.Localization(__file__, 2232, 0), 'scipy.linalg.misc', None, module_type_store, ['LinAlgError'], [LinAlgError])

else:
    # Assigning a type to the variable 'scipy.linalg.misc' (line 2232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 0), 'scipy.linalg.misc', import_622733)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2233, 0))

# 'from scipy.linalg.lapack import get_lapack_funcs' statement (line 2233)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_622735 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2233, 0), 'scipy.linalg.lapack')

if (type(import_622735) is not StypyTypeError):

    if (import_622735 != 'pyd_module'):
        __import__(import_622735)
        sys_modules_622736 = sys.modules[import_622735]
        import_from_module(stypy.reporting.localization.Localization(__file__, 2233, 0), 'scipy.linalg.lapack', sys_modules_622736.module_type_store, module_type_store, ['get_lapack_funcs'])
        nest_module(stypy.reporting.localization.Localization(__file__, 2233, 0), __file__, sys_modules_622736, sys_modules_622736.module_type_store, module_type_store)
    else:
        from scipy.linalg.lapack import get_lapack_funcs

        import_from_module(stypy.reporting.localization.Localization(__file__, 2233, 0), 'scipy.linalg.lapack', None, module_type_store, ['get_lapack_funcs'], [get_lapack_funcs])

else:
    # Assigning a type to the variable 'scipy.linalg.lapack' (line 2233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2233, 0), 'scipy.linalg.lapack', import_622735)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')


@norecursion
def _cho_inv_batch(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 2234)
    True_622737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 35), 'True')
    defaults = [True_622737]
    # Create a new context for function '_cho_inv_batch'
    module_type_store = module_type_store.open_function_context('_cho_inv_batch', 2234, 0, False)
    
    # Passed parameters checking function
    _cho_inv_batch.stypy_localization = localization
    _cho_inv_batch.stypy_type_of_self = None
    _cho_inv_batch.stypy_type_store = module_type_store
    _cho_inv_batch.stypy_function_name = '_cho_inv_batch'
    _cho_inv_batch.stypy_param_names_list = ['a', 'check_finite']
    _cho_inv_batch.stypy_varargs_param_name = None
    _cho_inv_batch.stypy_kwargs_param_name = None
    _cho_inv_batch.stypy_call_defaults = defaults
    _cho_inv_batch.stypy_call_varargs = varargs
    _cho_inv_batch.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_cho_inv_batch', ['a', 'check_finite'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_cho_inv_batch', localization, ['a', 'check_finite'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_cho_inv_batch(...)' code ##################

    str_622738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2261, (-1)), 'str', '\n    Invert the matrices a_i, using a Cholesky factorization of A, where\n    a_i resides in the last two dimensions of a and the other indices describe\n    the index i.\n\n    Overwrites the data in a.\n\n    Parameters\n    ----------\n    a : array\n        Array of matrices to invert, where the matrices themselves are stored\n        in the last two dimensions.\n    check_finite : bool, optional\n        Whether to check that the input matrices contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n\n    Returns\n    -------\n    x : array\n        Array of inverses of the matrices ``a_i``.\n\n    See also\n    --------\n    scipy.linalg.cholesky : Cholesky factorization of a matrix\n\n    ')
    
    # Getting the type of 'check_finite' (line 2262)
    check_finite_622739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 7), 'check_finite')
    # Testing the type of an if condition (line 2262)
    if_condition_622740 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2262, 4), check_finite_622739)
    # Assigning a type to the variable 'if_condition_622740' (line 2262)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2262, 4), 'if_condition_622740', if_condition_622740)
    # SSA begins for if statement (line 2262)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2263):
    
    # Assigning a Call to a Name (line 2263):
    
    # Call to asarray_chkfinite(...): (line 2263)
    # Processing the call arguments (line 2263)
    # Getting the type of 'a' (line 2263)
    a_622742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 31), 'a', False)
    # Processing the call keyword arguments (line 2263)
    kwargs_622743 = {}
    # Getting the type of 'asarray_chkfinite' (line 2263)
    asarray_chkfinite_622741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 13), 'asarray_chkfinite', False)
    # Calling asarray_chkfinite(args, kwargs) (line 2263)
    asarray_chkfinite_call_result_622744 = invoke(stypy.reporting.localization.Localization(__file__, 2263, 13), asarray_chkfinite_622741, *[a_622742], **kwargs_622743)
    
    # Assigning a type to the variable 'a1' (line 2263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 8), 'a1', asarray_chkfinite_call_result_622744)
    # SSA branch for the else part of an if statement (line 2262)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2265):
    
    # Assigning a Call to a Name (line 2265):
    
    # Call to asarray(...): (line 2265)
    # Processing the call arguments (line 2265)
    # Getting the type of 'a' (line 2265)
    a_622746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 21), 'a', False)
    # Processing the call keyword arguments (line 2265)
    kwargs_622747 = {}
    # Getting the type of 'asarray' (line 2265)
    asarray_622745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 13), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2265)
    asarray_call_result_622748 = invoke(stypy.reporting.localization.Localization(__file__, 2265, 13), asarray_622745, *[a_622746], **kwargs_622747)
    
    # Assigning a type to the variable 'a1' (line 2265)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2265, 8), 'a1', asarray_call_result_622748)
    # SSA join for if statement (line 2262)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 2266)
    # Processing the call arguments (line 2266)
    # Getting the type of 'a1' (line 2266)
    a1_622750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 11), 'a1', False)
    # Obtaining the member 'shape' of a type (line 2266)
    shape_622751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2266, 11), a1_622750, 'shape')
    # Processing the call keyword arguments (line 2266)
    kwargs_622752 = {}
    # Getting the type of 'len' (line 2266)
    len_622749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 7), 'len', False)
    # Calling len(args, kwargs) (line 2266)
    len_call_result_622753 = invoke(stypy.reporting.localization.Localization(__file__, 2266, 7), len_622749, *[shape_622751], **kwargs_622752)
    
    int_622754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 23), 'int')
    # Applying the binary operator '<' (line 2266)
    result_lt_622755 = python_operator(stypy.reporting.localization.Localization(__file__, 2266, 7), '<', len_call_result_622753, int_622754)
    
    
    
    # Obtaining the type of the subscript
    int_622756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 37), 'int')
    # Getting the type of 'a1' (line 2266)
    a1_622757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 28), 'a1')
    # Obtaining the member 'shape' of a type (line 2266)
    shape_622758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2266, 28), a1_622757, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2266)
    getitem___622759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2266, 28), shape_622758, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2266)
    subscript_call_result_622760 = invoke(stypy.reporting.localization.Localization(__file__, 2266, 28), getitem___622759, int_622756)
    
    
    # Obtaining the type of the subscript
    int_622761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 53), 'int')
    # Getting the type of 'a1' (line 2266)
    a1_622762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 44), 'a1')
    # Obtaining the member 'shape' of a type (line 2266)
    shape_622763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2266, 44), a1_622762, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2266)
    getitem___622764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2266, 44), shape_622763, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2266)
    subscript_call_result_622765 = invoke(stypy.reporting.localization.Localization(__file__, 2266, 44), getitem___622764, int_622761)
    
    # Applying the binary operator '!=' (line 2266)
    result_ne_622766 = python_operator(stypy.reporting.localization.Localization(__file__, 2266, 28), '!=', subscript_call_result_622760, subscript_call_result_622765)
    
    # Applying the binary operator 'or' (line 2266)
    result_or_keyword_622767 = python_operator(stypy.reporting.localization.Localization(__file__, 2266, 7), 'or', result_lt_622755, result_ne_622766)
    
    # Testing the type of an if condition (line 2266)
    if_condition_622768 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2266, 4), result_or_keyword_622767)
    # Assigning a type to the variable 'if_condition_622768' (line 2266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2266, 4), 'if_condition_622768', if_condition_622768)
    # SSA begins for if statement (line 2266)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2267)
    # Processing the call arguments (line 2267)
    str_622770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 25), 'str', 'expected square matrix in last two dimensions')
    # Processing the call keyword arguments (line 2267)
    kwargs_622771 = {}
    # Getting the type of 'ValueError' (line 2267)
    ValueError_622769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2267)
    ValueError_call_result_622772 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 14), ValueError_622769, *[str_622770], **kwargs_622771)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2267, 8), ValueError_call_result_622772, 'raise parameter', BaseException)
    # SSA join for if statement (line 2266)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 2269):
    
    # Assigning a Subscript to a Name (line 2269):
    
    # Obtaining the type of the subscript
    int_622773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 4), 'int')
    
    # Call to get_lapack_funcs(...): (line 2269)
    # Processing the call arguments (line 2269)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2269)
    tuple_622775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2269)
    # Adding element type (line 2269)
    str_622776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 37), 'str', 'potrf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 37), tuple_622775, str_622776)
    # Adding element type (line 2269)
    str_622777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 45), 'str', 'potri')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 37), tuple_622775, str_622777)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2269)
    tuple_622778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 56), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2269)
    # Adding element type (line 2269)
    # Getting the type of 'a1' (line 2269)
    a1_622779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 56), 'a1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 56), tuple_622778, a1_622779)
    
    # Processing the call keyword arguments (line 2269)
    kwargs_622780 = {}
    # Getting the type of 'get_lapack_funcs' (line 2269)
    get_lapack_funcs_622774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 19), 'get_lapack_funcs', False)
    # Calling get_lapack_funcs(args, kwargs) (line 2269)
    get_lapack_funcs_call_result_622781 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 19), get_lapack_funcs_622774, *[tuple_622775, tuple_622778], **kwargs_622780)
    
    # Obtaining the member '__getitem__' of a type (line 2269)
    getitem___622782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 4), get_lapack_funcs_call_result_622781, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2269)
    subscript_call_result_622783 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 4), getitem___622782, int_622773)
    
    # Assigning a type to the variable 'tuple_var_assignment_618640' (line 2269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 4), 'tuple_var_assignment_618640', subscript_call_result_622783)
    
    # Assigning a Subscript to a Name (line 2269):
    
    # Obtaining the type of the subscript
    int_622784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 4), 'int')
    
    # Call to get_lapack_funcs(...): (line 2269)
    # Processing the call arguments (line 2269)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2269)
    tuple_622786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2269)
    # Adding element type (line 2269)
    str_622787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 37), 'str', 'potrf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 37), tuple_622786, str_622787)
    # Adding element type (line 2269)
    str_622788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 45), 'str', 'potri')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 37), tuple_622786, str_622788)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2269)
    tuple_622789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 56), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2269)
    # Adding element type (line 2269)
    # Getting the type of 'a1' (line 2269)
    a1_622790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 56), 'a1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 56), tuple_622789, a1_622790)
    
    # Processing the call keyword arguments (line 2269)
    kwargs_622791 = {}
    # Getting the type of 'get_lapack_funcs' (line 2269)
    get_lapack_funcs_622785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 19), 'get_lapack_funcs', False)
    # Calling get_lapack_funcs(args, kwargs) (line 2269)
    get_lapack_funcs_call_result_622792 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 19), get_lapack_funcs_622785, *[tuple_622786, tuple_622789], **kwargs_622791)
    
    # Obtaining the member '__getitem__' of a type (line 2269)
    getitem___622793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 4), get_lapack_funcs_call_result_622792, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2269)
    subscript_call_result_622794 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 4), getitem___622793, int_622784)
    
    # Assigning a type to the variable 'tuple_var_assignment_618641' (line 2269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 4), 'tuple_var_assignment_618641', subscript_call_result_622794)
    
    # Assigning a Name to a Name (line 2269):
    # Getting the type of 'tuple_var_assignment_618640' (line 2269)
    tuple_var_assignment_618640_622795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 4), 'tuple_var_assignment_618640')
    # Assigning a type to the variable 'potrf' (line 2269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 4), 'potrf', tuple_var_assignment_618640_622795)
    
    # Assigning a Name to a Name (line 2269):
    # Getting the type of 'tuple_var_assignment_618641' (line 2269)
    tuple_var_assignment_618641_622796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 4), 'tuple_var_assignment_618641')
    # Assigning a type to the variable 'potri' (line 2269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 11), 'potri', tuple_var_assignment_618641_622796)
    
    # Assigning a Call to a Name (line 2271):
    
    # Assigning a Call to a Name (line 2271):
    
    # Call to tril_indices(...): (line 2271)
    # Processing the call arguments (line 2271)
    
    # Obtaining the type of the subscript
    int_622799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2271, 39), 'int')
    # Getting the type of 'a' (line 2271)
    a_622800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2271, 31), 'a', False)
    # Obtaining the member 'shape' of a type (line 2271)
    shape_622801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2271, 31), a_622800, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2271)
    getitem___622802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2271, 31), shape_622801, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2271)
    subscript_call_result_622803 = invoke(stypy.reporting.localization.Localization(__file__, 2271, 31), getitem___622802, int_622799)
    
    # Processing the call keyword arguments (line 2271)
    int_622804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2271, 46), 'int')
    keyword_622805 = int_622804
    kwargs_622806 = {'k': keyword_622805}
    # Getting the type of 'np' (line 2271)
    np_622797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2271, 15), 'np', False)
    # Obtaining the member 'tril_indices' of a type (line 2271)
    tril_indices_622798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2271, 15), np_622797, 'tril_indices')
    # Calling tril_indices(args, kwargs) (line 2271)
    tril_indices_call_result_622807 = invoke(stypy.reporting.localization.Localization(__file__, 2271, 15), tril_indices_622798, *[subscript_call_result_622803], **kwargs_622806)
    
    # Assigning a type to the variable 'tril_idx' (line 2271)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2271, 4), 'tril_idx', tril_indices_call_result_622807)
    
    # Assigning a Call to a Name (line 2272):
    
    # Assigning a Call to a Name (line 2272):
    
    # Call to triu_indices(...): (line 2272)
    # Processing the call arguments (line 2272)
    
    # Obtaining the type of the subscript
    int_622810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2272, 39), 'int')
    # Getting the type of 'a' (line 2272)
    a_622811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 31), 'a', False)
    # Obtaining the member 'shape' of a type (line 2272)
    shape_622812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2272, 31), a_622811, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2272)
    getitem___622813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2272, 31), shape_622812, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2272)
    subscript_call_result_622814 = invoke(stypy.reporting.localization.Localization(__file__, 2272, 31), getitem___622813, int_622810)
    
    # Processing the call keyword arguments (line 2272)
    int_622815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2272, 46), 'int')
    keyword_622816 = int_622815
    kwargs_622817 = {'k': keyword_622816}
    # Getting the type of 'np' (line 2272)
    np_622808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 15), 'np', False)
    # Obtaining the member 'triu_indices' of a type (line 2272)
    triu_indices_622809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2272, 15), np_622808, 'triu_indices')
    # Calling triu_indices(args, kwargs) (line 2272)
    triu_indices_call_result_622818 = invoke(stypy.reporting.localization.Localization(__file__, 2272, 15), triu_indices_622809, *[subscript_call_result_622814], **kwargs_622817)
    
    # Assigning a type to the variable 'triu_idx' (line 2272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2272, 4), 'triu_idx', triu_indices_call_result_622818)
    
    
    # Call to ndindex(...): (line 2273)
    # Processing the call arguments (line 2273)
    
    # Obtaining the type of the subscript
    int_622821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2273, 38), 'int')
    slice_622822 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2273, 28), None, int_622821, None)
    # Getting the type of 'a1' (line 2273)
    a1_622823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 28), 'a1', False)
    # Obtaining the member 'shape' of a type (line 2273)
    shape_622824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2273, 28), a1_622823, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2273)
    getitem___622825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2273, 28), shape_622824, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2273)
    subscript_call_result_622826 = invoke(stypy.reporting.localization.Localization(__file__, 2273, 28), getitem___622825, slice_622822)
    
    # Processing the call keyword arguments (line 2273)
    kwargs_622827 = {}
    # Getting the type of 'np' (line 2273)
    np_622819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 17), 'np', False)
    # Obtaining the member 'ndindex' of a type (line 2273)
    ndindex_622820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2273, 17), np_622819, 'ndindex')
    # Calling ndindex(args, kwargs) (line 2273)
    ndindex_call_result_622828 = invoke(stypy.reporting.localization.Localization(__file__, 2273, 17), ndindex_622820, *[subscript_call_result_622826], **kwargs_622827)
    
    # Testing the type of a for loop iterable (line 2273)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2273, 4), ndindex_call_result_622828)
    # Getting the type of the for loop variable (line 2273)
    for_loop_var_622829 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2273, 4), ndindex_call_result_622828)
    # Assigning a type to the variable 'index' (line 2273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2273, 4), 'index', for_loop_var_622829)
    # SSA begins for a for statement (line 2273)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Tuple (line 2276):
    
    # Assigning a Subscript to a Name (line 2276):
    
    # Obtaining the type of the subscript
    int_622830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2276, 8), 'int')
    
    # Call to potrf(...): (line 2276)
    # Processing the call arguments (line 2276)
    
    # Obtaining the type of the subscript
    # Getting the type of 'index' (line 2276)
    index_622832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 35), 'index', False)
    # Getting the type of 'a1' (line 2276)
    a1_622833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 32), 'a1', False)
    # Obtaining the member '__getitem__' of a type (line 2276)
    getitem___622834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 32), a1_622833, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2276)
    subscript_call_result_622835 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 32), getitem___622834, index_622832)
    
    # Processing the call keyword arguments (line 2276)
    # Getting the type of 'True' (line 2276)
    True_622836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 49), 'True', False)
    keyword_622837 = True_622836
    # Getting the type of 'False' (line 2276)
    False_622838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 67), 'False', False)
    keyword_622839 = False_622838
    # Getting the type of 'False' (line 2277)
    False_622840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 38), 'False', False)
    keyword_622841 = False_622840
    kwargs_622842 = {'lower': keyword_622837, 'overwrite_a': keyword_622839, 'clean': keyword_622841}
    # Getting the type of 'potrf' (line 2276)
    potrf_622831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 26), 'potrf', False)
    # Calling potrf(args, kwargs) (line 2276)
    potrf_call_result_622843 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 26), potrf_622831, *[subscript_call_result_622835], **kwargs_622842)
    
    # Obtaining the member '__getitem__' of a type (line 2276)
    getitem___622844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 8), potrf_call_result_622843, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2276)
    subscript_call_result_622845 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 8), getitem___622844, int_622830)
    
    # Assigning a type to the variable 'tuple_var_assignment_618642' (line 2276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 8), 'tuple_var_assignment_618642', subscript_call_result_622845)
    
    # Assigning a Subscript to a Name (line 2276):
    
    # Obtaining the type of the subscript
    int_622846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2276, 8), 'int')
    
    # Call to potrf(...): (line 2276)
    # Processing the call arguments (line 2276)
    
    # Obtaining the type of the subscript
    # Getting the type of 'index' (line 2276)
    index_622848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 35), 'index', False)
    # Getting the type of 'a1' (line 2276)
    a1_622849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 32), 'a1', False)
    # Obtaining the member '__getitem__' of a type (line 2276)
    getitem___622850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 32), a1_622849, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2276)
    subscript_call_result_622851 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 32), getitem___622850, index_622848)
    
    # Processing the call keyword arguments (line 2276)
    # Getting the type of 'True' (line 2276)
    True_622852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 49), 'True', False)
    keyword_622853 = True_622852
    # Getting the type of 'False' (line 2276)
    False_622854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 67), 'False', False)
    keyword_622855 = False_622854
    # Getting the type of 'False' (line 2277)
    False_622856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 38), 'False', False)
    keyword_622857 = False_622856
    kwargs_622858 = {'lower': keyword_622853, 'overwrite_a': keyword_622855, 'clean': keyword_622857}
    # Getting the type of 'potrf' (line 2276)
    potrf_622847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 26), 'potrf', False)
    # Calling potrf(args, kwargs) (line 2276)
    potrf_call_result_622859 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 26), potrf_622847, *[subscript_call_result_622851], **kwargs_622858)
    
    # Obtaining the member '__getitem__' of a type (line 2276)
    getitem___622860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 8), potrf_call_result_622859, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2276)
    subscript_call_result_622861 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 8), getitem___622860, int_622846)
    
    # Assigning a type to the variable 'tuple_var_assignment_618643' (line 2276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 8), 'tuple_var_assignment_618643', subscript_call_result_622861)
    
    # Assigning a Name to a Subscript (line 2276):
    # Getting the type of 'tuple_var_assignment_618642' (line 2276)
    tuple_var_assignment_618642_622862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 8), 'tuple_var_assignment_618642')
    # Getting the type of 'a1' (line 2276)
    a1_622863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 8), 'a1')
    # Getting the type of 'index' (line 2276)
    index_622864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 11), 'index')
    # Storing an element on a container (line 2276)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2276, 8), a1_622863, (index_622864, tuple_var_assignment_618642_622862))
    
    # Assigning a Name to a Name (line 2276):
    # Getting the type of 'tuple_var_assignment_618643' (line 2276)
    tuple_var_assignment_618643_622865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 8), 'tuple_var_assignment_618643')
    # Assigning a type to the variable 'info' (line 2276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 19), 'info', tuple_var_assignment_618643_622865)
    
    
    # Getting the type of 'info' (line 2278)
    info_622866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2278, 11), 'info')
    int_622867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2278, 18), 'int')
    # Applying the binary operator '>' (line 2278)
    result_gt_622868 = python_operator(stypy.reporting.localization.Localization(__file__, 2278, 11), '>', info_622866, int_622867)
    
    # Testing the type of an if condition (line 2278)
    if_condition_622869 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2278, 8), result_gt_622868)
    # Assigning a type to the variable 'if_condition_622869' (line 2278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2278, 8), 'if_condition_622869', if_condition_622869)
    # SSA begins for if statement (line 2278)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 2279)
    # Processing the call arguments (line 2279)
    str_622871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2279, 30), 'str', '%d-th leading minor not positive definite')
    # Getting the type of 'info' (line 2280)
    info_622872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2280, 32), 'info', False)
    # Applying the binary operator '%' (line 2279)
    result_mod_622873 = python_operator(stypy.reporting.localization.Localization(__file__, 2279, 30), '%', str_622871, info_622872)
    
    # Processing the call keyword arguments (line 2279)
    kwargs_622874 = {}
    # Getting the type of 'LinAlgError' (line 2279)
    LinAlgError_622870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 18), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 2279)
    LinAlgError_call_result_622875 = invoke(stypy.reporting.localization.Localization(__file__, 2279, 18), LinAlgError_622870, *[result_mod_622873], **kwargs_622874)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2279, 12), LinAlgError_call_result_622875, 'raise parameter', BaseException)
    # SSA join for if statement (line 2278)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'info' (line 2281)
    info_622876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2281, 11), 'info')
    int_622877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2281, 18), 'int')
    # Applying the binary operator '<' (line 2281)
    result_lt_622878 = python_operator(stypy.reporting.localization.Localization(__file__, 2281, 11), '<', info_622876, int_622877)
    
    # Testing the type of an if condition (line 2281)
    if_condition_622879 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2281, 8), result_lt_622878)
    # Assigning a type to the variable 'if_condition_622879' (line 2281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2281, 8), 'if_condition_622879', if_condition_622879)
    # SSA begins for if statement (line 2281)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2282)
    # Processing the call arguments (line 2282)
    str_622881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2282, 29), 'str', 'illegal value in %d-th argument of internal potrf')
    
    # Getting the type of 'info' (line 2283)
    info_622882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 41), 'info', False)
    # Applying the 'usub' unary operator (line 2283)
    result___neg___622883 = python_operator(stypy.reporting.localization.Localization(__file__, 2283, 40), 'usub', info_622882)
    
    # Applying the binary operator '%' (line 2282)
    result_mod_622884 = python_operator(stypy.reporting.localization.Localization(__file__, 2282, 29), '%', str_622881, result___neg___622883)
    
    # Processing the call keyword arguments (line 2282)
    kwargs_622885 = {}
    # Getting the type of 'ValueError' (line 2282)
    ValueError_622880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2282)
    ValueError_call_result_622886 = invoke(stypy.reporting.localization.Localization(__file__, 2282, 18), ValueError_622880, *[result_mod_622884], **kwargs_622885)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2282, 12), ValueError_call_result_622886, 'raise parameter', BaseException)
    # SSA join for if statement (line 2281)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 2285):
    
    # Assigning a Subscript to a Name (line 2285):
    
    # Obtaining the type of the subscript
    int_622887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2285, 8), 'int')
    
    # Call to potri(...): (line 2285)
    # Processing the call arguments (line 2285)
    
    # Obtaining the type of the subscript
    # Getting the type of 'index' (line 2285)
    index_622889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 35), 'index', False)
    # Getting the type of 'a1' (line 2285)
    a1_622890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 32), 'a1', False)
    # Obtaining the member '__getitem__' of a type (line 2285)
    getitem___622891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 32), a1_622890, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2285)
    subscript_call_result_622892 = invoke(stypy.reporting.localization.Localization(__file__, 2285, 32), getitem___622891, index_622889)
    
    # Processing the call keyword arguments (line 2285)
    # Getting the type of 'True' (line 2285)
    True_622893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 49), 'True', False)
    keyword_622894 = True_622893
    # Getting the type of 'False' (line 2285)
    False_622895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 67), 'False', False)
    keyword_622896 = False_622895
    kwargs_622897 = {'lower': keyword_622894, 'overwrite_c': keyword_622896}
    # Getting the type of 'potri' (line 2285)
    potri_622888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 26), 'potri', False)
    # Calling potri(args, kwargs) (line 2285)
    potri_call_result_622898 = invoke(stypy.reporting.localization.Localization(__file__, 2285, 26), potri_622888, *[subscript_call_result_622892], **kwargs_622897)
    
    # Obtaining the member '__getitem__' of a type (line 2285)
    getitem___622899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 8), potri_call_result_622898, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2285)
    subscript_call_result_622900 = invoke(stypy.reporting.localization.Localization(__file__, 2285, 8), getitem___622899, int_622887)
    
    # Assigning a type to the variable 'tuple_var_assignment_618644' (line 2285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'tuple_var_assignment_618644', subscript_call_result_622900)
    
    # Assigning a Subscript to a Name (line 2285):
    
    # Obtaining the type of the subscript
    int_622901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2285, 8), 'int')
    
    # Call to potri(...): (line 2285)
    # Processing the call arguments (line 2285)
    
    # Obtaining the type of the subscript
    # Getting the type of 'index' (line 2285)
    index_622903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 35), 'index', False)
    # Getting the type of 'a1' (line 2285)
    a1_622904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 32), 'a1', False)
    # Obtaining the member '__getitem__' of a type (line 2285)
    getitem___622905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 32), a1_622904, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2285)
    subscript_call_result_622906 = invoke(stypy.reporting.localization.Localization(__file__, 2285, 32), getitem___622905, index_622903)
    
    # Processing the call keyword arguments (line 2285)
    # Getting the type of 'True' (line 2285)
    True_622907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 49), 'True', False)
    keyword_622908 = True_622907
    # Getting the type of 'False' (line 2285)
    False_622909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 67), 'False', False)
    keyword_622910 = False_622909
    kwargs_622911 = {'lower': keyword_622908, 'overwrite_c': keyword_622910}
    # Getting the type of 'potri' (line 2285)
    potri_622902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 26), 'potri', False)
    # Calling potri(args, kwargs) (line 2285)
    potri_call_result_622912 = invoke(stypy.reporting.localization.Localization(__file__, 2285, 26), potri_622902, *[subscript_call_result_622906], **kwargs_622911)
    
    # Obtaining the member '__getitem__' of a type (line 2285)
    getitem___622913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 8), potri_call_result_622912, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2285)
    subscript_call_result_622914 = invoke(stypy.reporting.localization.Localization(__file__, 2285, 8), getitem___622913, int_622901)
    
    # Assigning a type to the variable 'tuple_var_assignment_618645' (line 2285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'tuple_var_assignment_618645', subscript_call_result_622914)
    
    # Assigning a Name to a Subscript (line 2285):
    # Getting the type of 'tuple_var_assignment_618644' (line 2285)
    tuple_var_assignment_618644_622915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'tuple_var_assignment_618644')
    # Getting the type of 'a1' (line 2285)
    a1_622916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'a1')
    # Getting the type of 'index' (line 2285)
    index_622917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 11), 'index')
    # Storing an element on a container (line 2285)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2285, 8), a1_622916, (index_622917, tuple_var_assignment_618644_622915))
    
    # Assigning a Name to a Name (line 2285):
    # Getting the type of 'tuple_var_assignment_618645' (line 2285)
    tuple_var_assignment_618645_622918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'tuple_var_assignment_618645')
    # Assigning a type to the variable 'info' (line 2285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 19), 'info', tuple_var_assignment_618645_622918)
    
    
    # Getting the type of 'info' (line 2286)
    info_622919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 11), 'info')
    int_622920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2286, 18), 'int')
    # Applying the binary operator '>' (line 2286)
    result_gt_622921 = python_operator(stypy.reporting.localization.Localization(__file__, 2286, 11), '>', info_622919, int_622920)
    
    # Testing the type of an if condition (line 2286)
    if_condition_622922 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2286, 8), result_gt_622921)
    # Assigning a type to the variable 'if_condition_622922' (line 2286)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2286, 8), 'if_condition_622922', if_condition_622922)
    # SSA begins for if statement (line 2286)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 2287)
    # Processing the call arguments (line 2287)
    str_622924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2287, 30), 'str', 'the inverse could not be computed')
    # Processing the call keyword arguments (line 2287)
    kwargs_622925 = {}
    # Getting the type of 'LinAlgError' (line 2287)
    LinAlgError_622923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 18), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 2287)
    LinAlgError_call_result_622926 = invoke(stypy.reporting.localization.Localization(__file__, 2287, 18), LinAlgError_622923, *[str_622924], **kwargs_622925)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2287, 12), LinAlgError_call_result_622926, 'raise parameter', BaseException)
    # SSA join for if statement (line 2286)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'info' (line 2288)
    info_622927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2288, 11), 'info')
    int_622928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2288, 18), 'int')
    # Applying the binary operator '<' (line 2288)
    result_lt_622929 = python_operator(stypy.reporting.localization.Localization(__file__, 2288, 11), '<', info_622927, int_622928)
    
    # Testing the type of an if condition (line 2288)
    if_condition_622930 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2288, 8), result_lt_622929)
    # Assigning a type to the variable 'if_condition_622930' (line 2288)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2288, 8), 'if_condition_622930', if_condition_622930)
    # SSA begins for if statement (line 2288)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2289)
    # Processing the call arguments (line 2289)
    str_622932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2289, 29), 'str', 'illegal value in %d-th argument of internal potrf')
    
    # Getting the type of 'info' (line 2290)
    info_622933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 41), 'info', False)
    # Applying the 'usub' unary operator (line 2290)
    result___neg___622934 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 40), 'usub', info_622933)
    
    # Applying the binary operator '%' (line 2289)
    result_mod_622935 = python_operator(stypy.reporting.localization.Localization(__file__, 2289, 29), '%', str_622932, result___neg___622934)
    
    # Processing the call keyword arguments (line 2289)
    kwargs_622936 = {}
    # Getting the type of 'ValueError' (line 2289)
    ValueError_622931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2289)
    ValueError_call_result_622937 = invoke(stypy.reporting.localization.Localization(__file__, 2289, 18), ValueError_622931, *[result_mod_622935], **kwargs_622936)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2289, 12), ValueError_call_result_622937, 'raise parameter', BaseException)
    # SSA join for if statement (line 2288)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Subscript (line 2293):
    
    # Assigning a Subscript to a Subscript (line 2293):
    
    # Obtaining the type of the subscript
    # Getting the type of 'tril_idx' (line 2293)
    tril_idx_622938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 40), 'tril_idx')
    
    # Obtaining the type of the subscript
    # Getting the type of 'index' (line 2293)
    index_622939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 33), 'index')
    # Getting the type of 'a1' (line 2293)
    a1_622940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 30), 'a1')
    # Obtaining the member '__getitem__' of a type (line 2293)
    getitem___622941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 30), a1_622940, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2293)
    subscript_call_result_622942 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 30), getitem___622941, index_622939)
    
    # Obtaining the member '__getitem__' of a type (line 2293)
    getitem___622943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 30), subscript_call_result_622942, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2293)
    subscript_call_result_622944 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 30), getitem___622943, tril_idx_622938)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'index' (line 2293)
    index_622945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 11), 'index')
    # Getting the type of 'a1' (line 2293)
    a1_622946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 8), 'a1')
    # Obtaining the member '__getitem__' of a type (line 2293)
    getitem___622947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 8), a1_622946, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2293)
    subscript_call_result_622948 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 8), getitem___622947, index_622945)
    
    # Getting the type of 'triu_idx' (line 2293)
    triu_idx_622949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 18), 'triu_idx')
    # Storing an element on a container (line 2293)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2293, 8), subscript_call_result_622948, (triu_idx_622949, subscript_call_result_622944))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'a1' (line 2295)
    a1_622950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 11), 'a1')
    # Assigning a type to the variable 'stypy_return_type' (line 2295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 4), 'stypy_return_type', a1_622950)
    
    # ################# End of '_cho_inv_batch(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_cho_inv_batch' in the type store
    # Getting the type of 'stypy_return_type' (line 2234)
    stypy_return_type_622951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_622951)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_cho_inv_batch'
    return stypy_return_type_622951

# Assigning a type to the variable '_cho_inv_batch' (line 2234)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 0), '_cho_inv_batch', _cho_inv_batch)
# Declaration of the 'invwishart_gen' class
# Getting the type of 'wishart_gen' (line 2298)
wishart_gen_622952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 21), 'wishart_gen')

class invwishart_gen(wishart_gen_622952, ):
    str_622953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2395, (-1)), 'str', '\n    An inverse Wishart random variable.\n\n    The `df` keyword specifies the degrees of freedom. The `scale` keyword\n    specifies the scale matrix, which must be symmetric and positive definite.\n    In this context, the scale matrix is often interpreted in terms of a\n    multivariate normal covariance matrix.\n\n    Methods\n    -------\n    ``pdf(x, df, scale)``\n        Probability density function.\n    ``logpdf(x, df, scale)``\n        Log of the probability density function.\n    ``rvs(df, scale, size=1, random_state=None)``\n        Draw random samples from an inverse Wishart distribution.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    %(_doc_default_callparams)s\n    %(_doc_random_state)s\n\n    Alternatively, the object may be called (as a function) to fix the degrees\n    of freedom and scale parameters, returning a "frozen" inverse Wishart\n    random variable:\n\n    rv = invwishart(df=1, scale=1)\n        - Frozen object with the same methods but holding the given\n          degrees of freedom and scale fixed.\n\n    See Also\n    --------\n    wishart\n\n    Notes\n    -----\n    %(_doc_callparams_note)s\n\n    The scale matrix `scale` must be a symmetric positive definite\n    matrix. Singular matrices, including the symmetric positive semi-definite\n    case, are not supported.\n\n    The inverse Wishart distribution is often denoted\n\n    .. math::\n\n        W_p^{-1}(\\nu, \\Psi)\n\n    where :math:`\\nu` is the degrees of freedom and :math:`\\Psi` is the\n    :math:`p \\times p` scale matrix.\n\n    The probability density function for `invwishart` has support over positive\n    definite matrices :math:`S`; if :math:`S \\sim W^{-1}_p(\\nu, \\Sigma)`,\n    then its PDF is given by:\n\n    .. math::\n\n        f(S) = \\frac{|\\Sigma|^\\frac{\\nu}{2}}{2^{ \\frac{\\nu p}{2} }\n               |S|^{\\frac{\\nu + p + 1}{2}} \\Gamma_p \\left(\\frac{\\nu}{2} \\right)}\n               \\exp\\left( -tr(\\Sigma S^{-1}) / 2 \\right)\n\n    If :math:`S \\sim W_p^{-1}(\\nu, \\Psi)` (inverse Wishart) then\n    :math:`S^{-1} \\sim W_p(\\nu, \\Psi^{-1})` (Wishart).\n\n    If the scale matrix is 1-dimensional and equal to one, then the inverse\n    Wishart distribution :math:`W_1(\\nu, 1)` collapses to the\n    inverse Gamma distribution with parameters shape = :math:`\\frac{\\nu}{2}`\n    and scale = :math:`\\frac{1}{2}`.\n\n    .. versionadded:: 0.16.0\n\n    References\n    ----------\n    .. [1] M.L. Eaton, "Multivariate Statistics: A Vector Space Approach",\n           Wiley, 1983.\n    .. [2] M.C. Jones, "Generating Inverse Wishart Matrices", Communications in\n           Statistics - Simulation and Computation, vol. 14.2, pp.511-514, 1985.\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.stats import invwishart, invgamma\n    >>> x = np.linspace(0.01, 1, 100)\n    >>> iw = invwishart.pdf(x, df=6, scale=1)\n    >>> iw[:3]\n    array([  1.20546865e-15,   5.42497807e-06,   4.45813929e-03])\n    >>> ig = invgamma.pdf(x, 6/2., scale=1./2)\n    >>> ig[:3]\n    array([  1.20546865e-15,   5.42497807e-06,   4.45813929e-03])\n    >>> plt.plot(x, iw)\n\n    The input quantiles can be any shape of array, as long as the last\n    axis labels the components.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2397)
        None_622954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 28), 'None')
        defaults = [None_622954]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2397, 4, False)
        # Assigning a type to the variable 'self' (line 2398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2398, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen.__init__', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 2398)
        # Processing the call arguments (line 2398)
        # Getting the type of 'seed' (line 2398)
        seed_622961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 45), 'seed', False)
        # Processing the call keyword arguments (line 2398)
        kwargs_622962 = {}
        
        # Call to super(...): (line 2398)
        # Processing the call arguments (line 2398)
        # Getting the type of 'invwishart_gen' (line 2398)
        invwishart_gen_622956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 14), 'invwishart_gen', False)
        # Getting the type of 'self' (line 2398)
        self_622957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 30), 'self', False)
        # Processing the call keyword arguments (line 2398)
        kwargs_622958 = {}
        # Getting the type of 'super' (line 2398)
        super_622955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 8), 'super', False)
        # Calling super(args, kwargs) (line 2398)
        super_call_result_622959 = invoke(stypy.reporting.localization.Localization(__file__, 2398, 8), super_622955, *[invwishart_gen_622956, self_622957], **kwargs_622958)
        
        # Obtaining the member '__init__' of a type (line 2398)
        init___622960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2398, 8), super_call_result_622959, '__init__')
        # Calling __init__(args, kwargs) (line 2398)
        init___call_result_622963 = invoke(stypy.reporting.localization.Localization(__file__, 2398, 8), init___622960, *[seed_622961], **kwargs_622962)
        
        
        # Assigning a Call to a Attribute (line 2399):
        
        # Assigning a Call to a Attribute (line 2399):
        
        # Call to docformat(...): (line 2399)
        # Processing the call arguments (line 2399)
        # Getting the type of 'self' (line 2399)
        self_622966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 40), 'self', False)
        # Obtaining the member '__doc__' of a type (line 2399)
        doc___622967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2399, 40), self_622966, '__doc__')
        # Getting the type of 'wishart_docdict_params' (line 2399)
        wishart_docdict_params_622968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 54), 'wishart_docdict_params', False)
        # Processing the call keyword arguments (line 2399)
        kwargs_622969 = {}
        # Getting the type of 'doccer' (line 2399)
        doccer_622964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 23), 'doccer', False)
        # Obtaining the member 'docformat' of a type (line 2399)
        docformat_622965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2399, 23), doccer_622964, 'docformat')
        # Calling docformat(args, kwargs) (line 2399)
        docformat_call_result_622970 = invoke(stypy.reporting.localization.Localization(__file__, 2399, 23), docformat_622965, *[doc___622967, wishart_docdict_params_622968], **kwargs_622969)
        
        # Getting the type of 'self' (line 2399)
        self_622971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 2399)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2399, 8), self_622971, '__doc__', docformat_call_result_622970)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2401)
        None_622972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 26), 'None')
        # Getting the type of 'None' (line 2401)
        None_622973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 38), 'None')
        # Getting the type of 'None' (line 2401)
        None_622974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 49), 'None')
        defaults = [None_622972, None_622973, None_622974]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 2401, 4, False)
        # Assigning a type to the variable 'self' (line 2402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2402, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen.__call__.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen.__call__.__dict__.__setitem__('stypy_function_name', 'invwishart_gen.__call__')
        invwishart_gen.__call__.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale', 'seed'])
        invwishart_gen.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen.__call__.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen.__call__', ['df', 'scale', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['df', 'scale', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_622975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2407, (-1)), 'str', '\n        Create a frozen inverse Wishart distribution.\n\n        See `invwishart_frozen` for more information.\n\n        ')
        
        # Call to invwishart_frozen(...): (line 2408)
        # Processing the call arguments (line 2408)
        # Getting the type of 'df' (line 2408)
        df_622977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 33), 'df', False)
        # Getting the type of 'scale' (line 2408)
        scale_622978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 37), 'scale', False)
        # Getting the type of 'seed' (line 2408)
        seed_622979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 44), 'seed', False)
        # Processing the call keyword arguments (line 2408)
        kwargs_622980 = {}
        # Getting the type of 'invwishart_frozen' (line 2408)
        invwishart_frozen_622976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 15), 'invwishart_frozen', False)
        # Calling invwishart_frozen(args, kwargs) (line 2408)
        invwishart_frozen_call_result_622981 = invoke(stypy.reporting.localization.Localization(__file__, 2408, 15), invwishart_frozen_622976, *[df_622977, scale_622978, seed_622979], **kwargs_622980)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2408, 8), 'stypy_return_type', invwishart_frozen_call_result_622981)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 2401)
        stypy_return_type_622982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_622982)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_622982


    @norecursion
    def _logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_logpdf'
        module_type_store = module_type_store.open_function_context('_logpdf', 2410, 4, False)
        # Assigning a type to the variable 'self' (line 2411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2411, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen._logpdf.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen._logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen._logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen._logpdf.__dict__.__setitem__('stypy_function_name', 'invwishart_gen._logpdf')
        invwishart_gen._logpdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'dim', 'df', 'scale', 'log_det_scale'])
        invwishart_gen._logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen._logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen._logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen._logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen._logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen._logpdf.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen._logpdf', ['x', 'dim', 'df', 'scale', 'log_det_scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_logpdf', localization, ['x', 'dim', 'df', 'scale', 'log_det_scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_logpdf(...)' code ##################

        str_622983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2431, (-1)), 'str', "\n        Parameters\n        ----------\n        x : ndarray\n            Points at which to evaluate the log of the probability\n            density function.\n        dim : int\n            Dimension of the scale matrix\n        df : int\n            Degrees of freedom\n        scale : ndarray\n            Scale matrix\n        log_det_scale : float\n            Logarithm of the determinant of the scale matrix\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'logpdf' instead.\n\n        ")
        
        # Assigning a Call to a Name (line 2432):
        
        # Assigning a Call to a Name (line 2432):
        
        # Call to zeros(...): (line 2432)
        # Processing the call arguments (line 2432)
        
        # Obtaining the type of the subscript
        int_622986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2432, 37), 'int')
        # Getting the type of 'x' (line 2432)
        x_622987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 29), 'x', False)
        # Obtaining the member 'shape' of a type (line 2432)
        shape_622988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 29), x_622987, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2432)
        getitem___622989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 29), shape_622988, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2432)
        subscript_call_result_622990 = invoke(stypy.reporting.localization.Localization(__file__, 2432, 29), getitem___622989, int_622986)
        
        # Processing the call keyword arguments (line 2432)
        kwargs_622991 = {}
        # Getting the type of 'np' (line 2432)
        np_622984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 20), 'np', False)
        # Obtaining the member 'zeros' of a type (line 2432)
        zeros_622985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 20), np_622984, 'zeros')
        # Calling zeros(args, kwargs) (line 2432)
        zeros_call_result_622992 = invoke(stypy.reporting.localization.Localization(__file__, 2432, 20), zeros_622985, *[subscript_call_result_622990], **kwargs_622991)
        
        # Assigning a type to the variable 'log_det_x' (line 2432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2432, 8), 'log_det_x', zeros_call_result_622992)
        
        # Assigning a Attribute to a Name (line 2434):
        
        # Assigning a Attribute to a Name (line 2434):
        
        # Call to copy(...): (line 2434)
        # Processing the call arguments (line 2434)
        # Getting the type of 'x' (line 2434)
        x_622995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 24), 'x', False)
        # Processing the call keyword arguments (line 2434)
        kwargs_622996 = {}
        # Getting the type of 'np' (line 2434)
        np_622993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 16), 'np', False)
        # Obtaining the member 'copy' of a type (line 2434)
        copy_622994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2434, 16), np_622993, 'copy')
        # Calling copy(args, kwargs) (line 2434)
        copy_call_result_622997 = invoke(stypy.reporting.localization.Localization(__file__, 2434, 16), copy_622994, *[x_622995], **kwargs_622996)
        
        # Obtaining the member 'T' of a type (line 2434)
        T_622998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2434, 16), copy_call_result_622997, 'T')
        # Assigning a type to the variable 'x_inv' (line 2434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2434, 8), 'x_inv', T_622998)
        
        
        # Getting the type of 'dim' (line 2435)
        dim_622999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 11), 'dim')
        int_623000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 17), 'int')
        # Applying the binary operator '>' (line 2435)
        result_gt_623001 = python_operator(stypy.reporting.localization.Localization(__file__, 2435, 11), '>', dim_622999, int_623000)
        
        # Testing the type of an if condition (line 2435)
        if_condition_623002 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2435, 8), result_gt_623001)
        # Assigning a type to the variable 'if_condition_623002' (line 2435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2435, 8), 'if_condition_623002', if_condition_623002)
        # SSA begins for if statement (line 2435)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _cho_inv_batch(...): (line 2436)
        # Processing the call arguments (line 2436)
        # Getting the type of 'x_inv' (line 2436)
        x_inv_623004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 27), 'x_inv', False)
        # Processing the call keyword arguments (line 2436)
        kwargs_623005 = {}
        # Getting the type of '_cho_inv_batch' (line 2436)
        _cho_inv_batch_623003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 12), '_cho_inv_batch', False)
        # Calling _cho_inv_batch(args, kwargs) (line 2436)
        _cho_inv_batch_call_result_623006 = invoke(stypy.reporting.localization.Localization(__file__, 2436, 12), _cho_inv_batch_623003, *[x_inv_623004], **kwargs_623005)
        
        # SSA branch for the else part of an if statement (line 2435)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 2438):
        
        # Assigning a BinOp to a Name (line 2438):
        float_623007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2438, 20), 'float')
        # Getting the type of 'x_inv' (line 2438)
        x_inv_623008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 23), 'x_inv')
        # Applying the binary operator 'div' (line 2438)
        result_div_623009 = python_operator(stypy.reporting.localization.Localization(__file__, 2438, 20), 'div', float_623007, x_inv_623008)
        
        # Assigning a type to the variable 'x_inv' (line 2438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2438, 12), 'x_inv', result_div_623009)
        # SSA join for if statement (line 2435)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2439):
        
        # Assigning a Call to a Name (line 2439):
        
        # Call to zeros(...): (line 2439)
        # Processing the call arguments (line 2439)
        
        # Obtaining the type of the subscript
        int_623012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2439, 42), 'int')
        # Getting the type of 'x' (line 2439)
        x_623013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 34), 'x', False)
        # Obtaining the member 'shape' of a type (line 2439)
        shape_623014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 34), x_623013, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2439)
        getitem___623015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 34), shape_623014, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2439)
        subscript_call_result_623016 = invoke(stypy.reporting.localization.Localization(__file__, 2439, 34), getitem___623015, int_623012)
        
        # Processing the call keyword arguments (line 2439)
        kwargs_623017 = {}
        # Getting the type of 'np' (line 2439)
        np_623010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 25), 'np', False)
        # Obtaining the member 'zeros' of a type (line 2439)
        zeros_623011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 25), np_623010, 'zeros')
        # Calling zeros(args, kwargs) (line 2439)
        zeros_call_result_623018 = invoke(stypy.reporting.localization.Localization(__file__, 2439, 25), zeros_623011, *[subscript_call_result_623016], **kwargs_623017)
        
        # Assigning a type to the variable 'tr_scale_x_inv' (line 2439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2439, 8), 'tr_scale_x_inv', zeros_call_result_623018)
        
        
        # Call to range(...): (line 2441)
        # Processing the call arguments (line 2441)
        
        # Obtaining the type of the subscript
        int_623020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2441, 31), 'int')
        # Getting the type of 'x' (line 2441)
        x_623021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 23), 'x', False)
        # Obtaining the member 'shape' of a type (line 2441)
        shape_623022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2441, 23), x_623021, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2441)
        getitem___623023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2441, 23), shape_623022, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2441)
        subscript_call_result_623024 = invoke(stypy.reporting.localization.Localization(__file__, 2441, 23), getitem___623023, int_623020)
        
        # Processing the call keyword arguments (line 2441)
        kwargs_623025 = {}
        # Getting the type of 'range' (line 2441)
        range_623019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 17), 'range', False)
        # Calling range(args, kwargs) (line 2441)
        range_call_result_623026 = invoke(stypy.reporting.localization.Localization(__file__, 2441, 17), range_623019, *[subscript_call_result_623024], **kwargs_623025)
        
        # Testing the type of a for loop iterable (line 2441)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2441, 8), range_call_result_623026)
        # Getting the type of the for loop variable (line 2441)
        for_loop_var_623027 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2441, 8), range_call_result_623026)
        # Assigning a type to the variable 'i' (line 2441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2441, 8), 'i', for_loop_var_623027)
        # SSA begins for a for statement (line 2441)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Tuple (line 2442):
        
        # Assigning a Subscript to a Name (line 2442):
        
        # Obtaining the type of the subscript
        int_623028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2442, 12), 'int')
        
        # Call to cho_factor(...): (line 2442)
        # Processing the call arguments (line 2442)
        
        # Obtaining the type of the subscript
        slice_623032 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2442, 47), None, None, None)
        slice_623033 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2442, 47), None, None, None)
        # Getting the type of 'i' (line 2442)
        i_623034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 53), 'i', False)
        # Getting the type of 'x' (line 2442)
        x_623035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 47), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 2442)
        getitem___623036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 47), x_623035, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2442)
        subscript_call_result_623037 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 47), getitem___623036, (slice_623032, slice_623033, i_623034))
        
        # Processing the call keyword arguments (line 2442)
        # Getting the type of 'True' (line 2442)
        True_623038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 63), 'True', False)
        keyword_623039 = True_623038
        kwargs_623040 = {'lower': keyword_623039}
        # Getting the type of 'scipy' (line 2442)
        scipy_623029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 23), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2442)
        linalg_623030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 23), scipy_623029, 'linalg')
        # Obtaining the member 'cho_factor' of a type (line 2442)
        cho_factor_623031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 23), linalg_623030, 'cho_factor')
        # Calling cho_factor(args, kwargs) (line 2442)
        cho_factor_call_result_623041 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 23), cho_factor_623031, *[subscript_call_result_623037], **kwargs_623040)
        
        # Obtaining the member '__getitem__' of a type (line 2442)
        getitem___623042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 12), cho_factor_call_result_623041, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2442)
        subscript_call_result_623043 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 12), getitem___623042, int_623028)
        
        # Assigning a type to the variable 'tuple_var_assignment_618646' (line 2442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 12), 'tuple_var_assignment_618646', subscript_call_result_623043)
        
        # Assigning a Subscript to a Name (line 2442):
        
        # Obtaining the type of the subscript
        int_623044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2442, 12), 'int')
        
        # Call to cho_factor(...): (line 2442)
        # Processing the call arguments (line 2442)
        
        # Obtaining the type of the subscript
        slice_623048 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2442, 47), None, None, None)
        slice_623049 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2442, 47), None, None, None)
        # Getting the type of 'i' (line 2442)
        i_623050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 53), 'i', False)
        # Getting the type of 'x' (line 2442)
        x_623051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 47), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 2442)
        getitem___623052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 47), x_623051, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2442)
        subscript_call_result_623053 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 47), getitem___623052, (slice_623048, slice_623049, i_623050))
        
        # Processing the call keyword arguments (line 2442)
        # Getting the type of 'True' (line 2442)
        True_623054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 63), 'True', False)
        keyword_623055 = True_623054
        kwargs_623056 = {'lower': keyword_623055}
        # Getting the type of 'scipy' (line 2442)
        scipy_623045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 23), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2442)
        linalg_623046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 23), scipy_623045, 'linalg')
        # Obtaining the member 'cho_factor' of a type (line 2442)
        cho_factor_623047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 23), linalg_623046, 'cho_factor')
        # Calling cho_factor(args, kwargs) (line 2442)
        cho_factor_call_result_623057 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 23), cho_factor_623047, *[subscript_call_result_623053], **kwargs_623056)
        
        # Obtaining the member '__getitem__' of a type (line 2442)
        getitem___623058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 12), cho_factor_call_result_623057, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2442)
        subscript_call_result_623059 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 12), getitem___623058, int_623044)
        
        # Assigning a type to the variable 'tuple_var_assignment_618647' (line 2442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 12), 'tuple_var_assignment_618647', subscript_call_result_623059)
        
        # Assigning a Name to a Name (line 2442):
        # Getting the type of 'tuple_var_assignment_618646' (line 2442)
        tuple_var_assignment_618646_623060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 12), 'tuple_var_assignment_618646')
        # Assigning a type to the variable 'C' (line 2442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 12), 'C', tuple_var_assignment_618646_623060)
        
        # Assigning a Name to a Name (line 2442):
        # Getting the type of 'tuple_var_assignment_618647' (line 2442)
        tuple_var_assignment_618647_623061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 12), 'tuple_var_assignment_618647')
        # Assigning a type to the variable 'lower' (line 2442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 15), 'lower', tuple_var_assignment_618647_623061)
        
        # Assigning a BinOp to a Subscript (line 2444):
        
        # Assigning a BinOp to a Subscript (line 2444):
        int_623062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2444, 27), 'int')
        
        # Call to sum(...): (line 2444)
        # Processing the call arguments (line 2444)
        
        # Call to log(...): (line 2444)
        # Processing the call arguments (line 2444)
        
        # Call to diagonal(...): (line 2444)
        # Processing the call keyword arguments (line 2444)
        kwargs_623069 = {}
        # Getting the type of 'C' (line 2444)
        C_623067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 45), 'C', False)
        # Obtaining the member 'diagonal' of a type (line 2444)
        diagonal_623068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2444, 45), C_623067, 'diagonal')
        # Calling diagonal(args, kwargs) (line 2444)
        diagonal_call_result_623070 = invoke(stypy.reporting.localization.Localization(__file__, 2444, 45), diagonal_623068, *[], **kwargs_623069)
        
        # Processing the call keyword arguments (line 2444)
        kwargs_623071 = {}
        # Getting the type of 'np' (line 2444)
        np_623065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 38), 'np', False)
        # Obtaining the member 'log' of a type (line 2444)
        log_623066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2444, 38), np_623065, 'log')
        # Calling log(args, kwargs) (line 2444)
        log_call_result_623072 = invoke(stypy.reporting.localization.Localization(__file__, 2444, 38), log_623066, *[diagonal_call_result_623070], **kwargs_623071)
        
        # Processing the call keyword arguments (line 2444)
        kwargs_623073 = {}
        # Getting the type of 'np' (line 2444)
        np_623063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 31), 'np', False)
        # Obtaining the member 'sum' of a type (line 2444)
        sum_623064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2444, 31), np_623063, 'sum')
        # Calling sum(args, kwargs) (line 2444)
        sum_call_result_623074 = invoke(stypy.reporting.localization.Localization(__file__, 2444, 31), sum_623064, *[log_call_result_623072], **kwargs_623073)
        
        # Applying the binary operator '*' (line 2444)
        result_mul_623075 = python_operator(stypy.reporting.localization.Localization(__file__, 2444, 27), '*', int_623062, sum_call_result_623074)
        
        # Getting the type of 'log_det_x' (line 2444)
        log_det_x_623076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 12), 'log_det_x')
        # Getting the type of 'i' (line 2444)
        i_623077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 22), 'i')
        # Storing an element on a container (line 2444)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2444, 12), log_det_x_623076, (i_623077, result_mul_623075))
        
        # Assigning a Call to a Subscript (line 2447):
        
        # Assigning a Call to a Subscript (line 2447):
        
        # Call to trace(...): (line 2447)
        # Processing the call keyword arguments (line 2447)
        kwargs_623088 = {}
        
        # Call to dot(...): (line 2447)
        # Processing the call arguments (line 2447)
        # Getting the type of 'scale' (line 2447)
        scale_623080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 39), 'scale', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 2447)
        i_623081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 52), 'i', False)
        # Getting the type of 'x_inv' (line 2447)
        x_inv_623082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 46), 'x_inv', False)
        # Obtaining the member '__getitem__' of a type (line 2447)
        getitem___623083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 46), x_inv_623082, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2447)
        subscript_call_result_623084 = invoke(stypy.reporting.localization.Localization(__file__, 2447, 46), getitem___623083, i_623081)
        
        # Processing the call keyword arguments (line 2447)
        kwargs_623085 = {}
        # Getting the type of 'np' (line 2447)
        np_623078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 32), 'np', False)
        # Obtaining the member 'dot' of a type (line 2447)
        dot_623079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 32), np_623078, 'dot')
        # Calling dot(args, kwargs) (line 2447)
        dot_call_result_623086 = invoke(stypy.reporting.localization.Localization(__file__, 2447, 32), dot_623079, *[scale_623080, subscript_call_result_623084], **kwargs_623085)
        
        # Obtaining the member 'trace' of a type (line 2447)
        trace_623087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 32), dot_call_result_623086, 'trace')
        # Calling trace(args, kwargs) (line 2447)
        trace_call_result_623089 = invoke(stypy.reporting.localization.Localization(__file__, 2447, 32), trace_623087, *[], **kwargs_623088)
        
        # Getting the type of 'tr_scale_x_inv' (line 2447)
        tr_scale_x_inv_623090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 12), 'tr_scale_x_inv')
        # Getting the type of 'i' (line 2447)
        i_623091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 27), 'i')
        # Storing an element on a container (line 2447)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2447, 12), tr_scale_x_inv_623090, (i_623091, trace_call_result_623089))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 2450):
        
        # Assigning a BinOp to a Name (line 2450):
        float_623092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2450, 16), 'float')
        # Getting the type of 'df' (line 2450)
        df_623093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 22), 'df')
        # Applying the binary operator '*' (line 2450)
        result_mul_623094 = python_operator(stypy.reporting.localization.Localization(__file__, 2450, 16), '*', float_623092, df_623093)
        
        # Getting the type of 'log_det_scale' (line 2450)
        log_det_scale_623095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 27), 'log_det_scale')
        # Applying the binary operator '*' (line 2450)
        result_mul_623096 = python_operator(stypy.reporting.localization.Localization(__file__, 2450, 25), '*', result_mul_623094, log_det_scale_623095)
        
        float_623097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2450, 43), 'float')
        # Getting the type of 'tr_scale_x_inv' (line 2450)
        tr_scale_x_inv_623098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 49), 'tr_scale_x_inv')
        # Applying the binary operator '*' (line 2450)
        result_mul_623099 = python_operator(stypy.reporting.localization.Localization(__file__, 2450, 43), '*', float_623097, tr_scale_x_inv_623098)
        
        # Applying the binary operator '-' (line 2450)
        result_sub_623100 = python_operator(stypy.reporting.localization.Localization(__file__, 2450, 16), '-', result_mul_623096, result_mul_623099)
        
        float_623101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 16), 'float')
        # Getting the type of 'df' (line 2451)
        df_623102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 22), 'df')
        # Applying the binary operator '*' (line 2451)
        result_mul_623103 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 16), '*', float_623101, df_623102)
        
        # Getting the type of 'dim' (line 2451)
        dim_623104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 27), 'dim')
        # Applying the binary operator '*' (line 2451)
        result_mul_623105 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 25), '*', result_mul_623103, dim_623104)
        
        # Getting the type of '_LOG_2' (line 2451)
        _LOG_2_623106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 33), '_LOG_2')
        # Applying the binary operator '*' (line 2451)
        result_mul_623107 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 31), '*', result_mul_623105, _LOG_2_623106)
        
        float_623108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 42), 'float')
        # Getting the type of 'df' (line 2451)
        df_623109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 49), 'df')
        # Getting the type of 'dim' (line 2451)
        dim_623110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 54), 'dim')
        # Applying the binary operator '+' (line 2451)
        result_add_623111 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 49), '+', df_623109, dim_623110)
        
        int_623112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 60), 'int')
        # Applying the binary operator '+' (line 2451)
        result_add_623113 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 58), '+', result_add_623111, int_623112)
        
        # Applying the binary operator '*' (line 2451)
        result_mul_623114 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 42), '*', float_623108, result_add_623113)
        
        # Getting the type of 'log_det_x' (line 2451)
        log_det_x_623115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 65), 'log_det_x')
        # Applying the binary operator '*' (line 2451)
        result_mul_623116 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 63), '*', result_mul_623114, log_det_x_623115)
        
        # Applying the binary operator '+' (line 2451)
        result_add_623117 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 16), '+', result_mul_623107, result_mul_623116)
        
        # Applying the binary operator '-' (line 2450)
        result_sub_623118 = python_operator(stypy.reporting.localization.Localization(__file__, 2450, 15), '-', result_sub_623100, result_add_623117)
        
        
        # Call to multigammaln(...): (line 2452)
        # Processing the call arguments (line 2452)
        float_623120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2452, 28), 'float')
        # Getting the type of 'df' (line 2452)
        df_623121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 32), 'df', False)
        # Applying the binary operator '*' (line 2452)
        result_mul_623122 = python_operator(stypy.reporting.localization.Localization(__file__, 2452, 28), '*', float_623120, df_623121)
        
        # Getting the type of 'dim' (line 2452)
        dim_623123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 36), 'dim', False)
        # Processing the call keyword arguments (line 2452)
        kwargs_623124 = {}
        # Getting the type of 'multigammaln' (line 2452)
        multigammaln_623119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 15), 'multigammaln', False)
        # Calling multigammaln(args, kwargs) (line 2452)
        multigammaln_call_result_623125 = invoke(stypy.reporting.localization.Localization(__file__, 2452, 15), multigammaln_623119, *[result_mul_623122, dim_623123], **kwargs_623124)
        
        # Applying the binary operator '-' (line 2451)
        result_sub_623126 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 76), '-', result_sub_623118, multigammaln_call_result_623125)
        
        # Assigning a type to the variable 'out' (line 2450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2450, 8), 'out', result_sub_623126)
        # Getting the type of 'out' (line 2454)
        out_623127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 2454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2454, 8), 'stypy_return_type', out_623127)
        
        # ################# End of '_logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 2410)
        stypy_return_type_623128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623128)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_logpdf'
        return stypy_return_type_623128


    @norecursion
    def logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'logpdf'
        module_type_store = module_type_store.open_function_context('logpdf', 2456, 4, False)
        # Assigning a type to the variable 'self' (line 2457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2457, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen.logpdf.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen.logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen.logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen.logpdf.__dict__.__setitem__('stypy_function_name', 'invwishart_gen.logpdf')
        invwishart_gen.logpdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'df', 'scale'])
        invwishart_gen.logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen.logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen.logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen.logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen.logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen.logpdf.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen.logpdf', ['x', 'df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpdf', localization, ['x', 'df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpdf(...)' code ##################

        str_623129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2476, (-1)), 'str', '\n        Log of the inverse Wishart probability density function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n            Each quantile must be a symmetric positive definite matrix.\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        pdf : ndarray\n            Log of the probability density function evaluated at `x`\n\n        Notes\n        -----\n        %(_doc_callparams_note)s\n\n        ')
        
        # Assigning a Call to a Tuple (line 2477):
        
        # Assigning a Subscript to a Name (line 2477):
        
        # Obtaining the type of the subscript
        int_623130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2477, 8), 'int')
        
        # Call to _process_parameters(...): (line 2477)
        # Processing the call arguments (line 2477)
        # Getting the type of 'df' (line 2477)
        df_623133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 50), 'df', False)
        # Getting the type of 'scale' (line 2477)
        scale_623134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 54), 'scale', False)
        # Processing the call keyword arguments (line 2477)
        kwargs_623135 = {}
        # Getting the type of 'self' (line 2477)
        self_623131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2477)
        _process_parameters_623132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 25), self_623131, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2477)
        _process_parameters_call_result_623136 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 25), _process_parameters_623132, *[df_623133, scale_623134], **kwargs_623135)
        
        # Obtaining the member '__getitem__' of a type (line 2477)
        getitem___623137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 8), _process_parameters_call_result_623136, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2477)
        subscript_call_result_623138 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 8), getitem___623137, int_623130)
        
        # Assigning a type to the variable 'tuple_var_assignment_618648' (line 2477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 8), 'tuple_var_assignment_618648', subscript_call_result_623138)
        
        # Assigning a Subscript to a Name (line 2477):
        
        # Obtaining the type of the subscript
        int_623139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2477, 8), 'int')
        
        # Call to _process_parameters(...): (line 2477)
        # Processing the call arguments (line 2477)
        # Getting the type of 'df' (line 2477)
        df_623142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 50), 'df', False)
        # Getting the type of 'scale' (line 2477)
        scale_623143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 54), 'scale', False)
        # Processing the call keyword arguments (line 2477)
        kwargs_623144 = {}
        # Getting the type of 'self' (line 2477)
        self_623140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2477)
        _process_parameters_623141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 25), self_623140, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2477)
        _process_parameters_call_result_623145 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 25), _process_parameters_623141, *[df_623142, scale_623143], **kwargs_623144)
        
        # Obtaining the member '__getitem__' of a type (line 2477)
        getitem___623146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 8), _process_parameters_call_result_623145, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2477)
        subscript_call_result_623147 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 8), getitem___623146, int_623139)
        
        # Assigning a type to the variable 'tuple_var_assignment_618649' (line 2477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 8), 'tuple_var_assignment_618649', subscript_call_result_623147)
        
        # Assigning a Subscript to a Name (line 2477):
        
        # Obtaining the type of the subscript
        int_623148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2477, 8), 'int')
        
        # Call to _process_parameters(...): (line 2477)
        # Processing the call arguments (line 2477)
        # Getting the type of 'df' (line 2477)
        df_623151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 50), 'df', False)
        # Getting the type of 'scale' (line 2477)
        scale_623152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 54), 'scale', False)
        # Processing the call keyword arguments (line 2477)
        kwargs_623153 = {}
        # Getting the type of 'self' (line 2477)
        self_623149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2477)
        _process_parameters_623150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 25), self_623149, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2477)
        _process_parameters_call_result_623154 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 25), _process_parameters_623150, *[df_623151, scale_623152], **kwargs_623153)
        
        # Obtaining the member '__getitem__' of a type (line 2477)
        getitem___623155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 8), _process_parameters_call_result_623154, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2477)
        subscript_call_result_623156 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 8), getitem___623155, int_623148)
        
        # Assigning a type to the variable 'tuple_var_assignment_618650' (line 2477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 8), 'tuple_var_assignment_618650', subscript_call_result_623156)
        
        # Assigning a Name to a Name (line 2477):
        # Getting the type of 'tuple_var_assignment_618648' (line 2477)
        tuple_var_assignment_618648_623157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 8), 'tuple_var_assignment_618648')
        # Assigning a type to the variable 'dim' (line 2477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 8), 'dim', tuple_var_assignment_618648_623157)
        
        # Assigning a Name to a Name (line 2477):
        # Getting the type of 'tuple_var_assignment_618649' (line 2477)
        tuple_var_assignment_618649_623158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 8), 'tuple_var_assignment_618649')
        # Assigning a type to the variable 'df' (line 2477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 13), 'df', tuple_var_assignment_618649_623158)
        
        # Assigning a Name to a Name (line 2477):
        # Getting the type of 'tuple_var_assignment_618650' (line 2477)
        tuple_var_assignment_618650_623159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 8), 'tuple_var_assignment_618650')
        # Assigning a type to the variable 'scale' (line 2477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 17), 'scale', tuple_var_assignment_618650_623159)
        
        # Assigning a Call to a Name (line 2478):
        
        # Assigning a Call to a Name (line 2478):
        
        # Call to _process_quantiles(...): (line 2478)
        # Processing the call arguments (line 2478)
        # Getting the type of 'x' (line 2478)
        x_623162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 36), 'x', False)
        # Getting the type of 'dim' (line 2478)
        dim_623163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 39), 'dim', False)
        # Processing the call keyword arguments (line 2478)
        kwargs_623164 = {}
        # Getting the type of 'self' (line 2478)
        self_623160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 12), 'self', False)
        # Obtaining the member '_process_quantiles' of a type (line 2478)
        _process_quantiles_623161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2478, 12), self_623160, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 2478)
        _process_quantiles_call_result_623165 = invoke(stypy.reporting.localization.Localization(__file__, 2478, 12), _process_quantiles_623161, *[x_623162, dim_623163], **kwargs_623164)
        
        # Assigning a type to the variable 'x' (line 2478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2478, 8), 'x', _process_quantiles_call_result_623165)
        
        # Assigning a Call to a Tuple (line 2479):
        
        # Assigning a Subscript to a Name (line 2479):
        
        # Obtaining the type of the subscript
        int_623166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2479, 8), 'int')
        
        # Call to _cholesky_logdet(...): (line 2479)
        # Processing the call arguments (line 2479)
        # Getting the type of 'scale' (line 2479)
        scale_623169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 49), 'scale', False)
        # Processing the call keyword arguments (line 2479)
        kwargs_623170 = {}
        # Getting the type of 'self' (line 2479)
        self_623167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 27), 'self', False)
        # Obtaining the member '_cholesky_logdet' of a type (line 2479)
        _cholesky_logdet_623168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 27), self_623167, '_cholesky_logdet')
        # Calling _cholesky_logdet(args, kwargs) (line 2479)
        _cholesky_logdet_call_result_623171 = invoke(stypy.reporting.localization.Localization(__file__, 2479, 27), _cholesky_logdet_623168, *[scale_623169], **kwargs_623170)
        
        # Obtaining the member '__getitem__' of a type (line 2479)
        getitem___623172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 8), _cholesky_logdet_call_result_623171, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2479)
        subscript_call_result_623173 = invoke(stypy.reporting.localization.Localization(__file__, 2479, 8), getitem___623172, int_623166)
        
        # Assigning a type to the variable 'tuple_var_assignment_618651' (line 2479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2479, 8), 'tuple_var_assignment_618651', subscript_call_result_623173)
        
        # Assigning a Subscript to a Name (line 2479):
        
        # Obtaining the type of the subscript
        int_623174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2479, 8), 'int')
        
        # Call to _cholesky_logdet(...): (line 2479)
        # Processing the call arguments (line 2479)
        # Getting the type of 'scale' (line 2479)
        scale_623177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 49), 'scale', False)
        # Processing the call keyword arguments (line 2479)
        kwargs_623178 = {}
        # Getting the type of 'self' (line 2479)
        self_623175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 27), 'self', False)
        # Obtaining the member '_cholesky_logdet' of a type (line 2479)
        _cholesky_logdet_623176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 27), self_623175, '_cholesky_logdet')
        # Calling _cholesky_logdet(args, kwargs) (line 2479)
        _cholesky_logdet_call_result_623179 = invoke(stypy.reporting.localization.Localization(__file__, 2479, 27), _cholesky_logdet_623176, *[scale_623177], **kwargs_623178)
        
        # Obtaining the member '__getitem__' of a type (line 2479)
        getitem___623180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 8), _cholesky_logdet_call_result_623179, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2479)
        subscript_call_result_623181 = invoke(stypy.reporting.localization.Localization(__file__, 2479, 8), getitem___623180, int_623174)
        
        # Assigning a type to the variable 'tuple_var_assignment_618652' (line 2479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2479, 8), 'tuple_var_assignment_618652', subscript_call_result_623181)
        
        # Assigning a Name to a Name (line 2479):
        # Getting the type of 'tuple_var_assignment_618651' (line 2479)
        tuple_var_assignment_618651_623182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 8), 'tuple_var_assignment_618651')
        # Assigning a type to the variable '_' (line 2479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2479, 8), '_', tuple_var_assignment_618651_623182)
        
        # Assigning a Name to a Name (line 2479):
        # Getting the type of 'tuple_var_assignment_618652' (line 2479)
        tuple_var_assignment_618652_623183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 8), 'tuple_var_assignment_618652')
        # Assigning a type to the variable 'log_det_scale' (line 2479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2479, 11), 'log_det_scale', tuple_var_assignment_618652_623183)
        
        # Assigning a Call to a Name (line 2480):
        
        # Assigning a Call to a Name (line 2480):
        
        # Call to _logpdf(...): (line 2480)
        # Processing the call arguments (line 2480)
        # Getting the type of 'x' (line 2480)
        x_623186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 27), 'x', False)
        # Getting the type of 'dim' (line 2480)
        dim_623187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 30), 'dim', False)
        # Getting the type of 'df' (line 2480)
        df_623188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 35), 'df', False)
        # Getting the type of 'scale' (line 2480)
        scale_623189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 39), 'scale', False)
        # Getting the type of 'log_det_scale' (line 2480)
        log_det_scale_623190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 46), 'log_det_scale', False)
        # Processing the call keyword arguments (line 2480)
        kwargs_623191 = {}
        # Getting the type of 'self' (line 2480)
        self_623184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 14), 'self', False)
        # Obtaining the member '_logpdf' of a type (line 2480)
        _logpdf_623185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2480, 14), self_623184, '_logpdf')
        # Calling _logpdf(args, kwargs) (line 2480)
        _logpdf_call_result_623192 = invoke(stypy.reporting.localization.Localization(__file__, 2480, 14), _logpdf_623185, *[x_623186, dim_623187, df_623188, scale_623189, log_det_scale_623190], **kwargs_623191)
        
        # Assigning a type to the variable 'out' (line 2480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2480, 8), 'out', _logpdf_call_result_623192)
        
        # Call to _squeeze_output(...): (line 2481)
        # Processing the call arguments (line 2481)
        # Getting the type of 'out' (line 2481)
        out_623194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 31), 'out', False)
        # Processing the call keyword arguments (line 2481)
        kwargs_623195 = {}
        # Getting the type of '_squeeze_output' (line 2481)
        _squeeze_output_623193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2481)
        _squeeze_output_call_result_623196 = invoke(stypy.reporting.localization.Localization(__file__, 2481, 15), _squeeze_output_623193, *[out_623194], **kwargs_623195)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2481, 8), 'stypy_return_type', _squeeze_output_call_result_623196)
        
        # ################# End of 'logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 2456)
        stypy_return_type_623197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623197)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpdf'
        return stypy_return_type_623197


    @norecursion
    def pdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pdf'
        module_type_store = module_type_store.open_function_context('pdf', 2483, 4, False)
        # Assigning a type to the variable 'self' (line 2484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2484, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen.pdf.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen.pdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen.pdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen.pdf.__dict__.__setitem__('stypy_function_name', 'invwishart_gen.pdf')
        invwishart_gen.pdf.__dict__.__setitem__('stypy_param_names_list', ['x', 'df', 'scale'])
        invwishart_gen.pdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen.pdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen.pdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen.pdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen.pdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen.pdf.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen.pdf', ['x', 'df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pdf', localization, ['x', 'df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pdf(...)' code ##################

        str_623198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2504, (-1)), 'str', '\n        Inverse Wishart probability density function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n            Each quantile must be a symmetric positive definite matrix.\n\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        pdf : ndarray\n            Probability density function evaluated at `x`\n\n        Notes\n        -----\n        %(_doc_callparams_note)s\n\n        ')
        
        # Call to exp(...): (line 2505)
        # Processing the call arguments (line 2505)
        
        # Call to logpdf(...): (line 2505)
        # Processing the call arguments (line 2505)
        # Getting the type of 'x' (line 2505)
        x_623203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 34), 'x', False)
        # Getting the type of 'df' (line 2505)
        df_623204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 37), 'df', False)
        # Getting the type of 'scale' (line 2505)
        scale_623205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 41), 'scale', False)
        # Processing the call keyword arguments (line 2505)
        kwargs_623206 = {}
        # Getting the type of 'self' (line 2505)
        self_623201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 22), 'self', False)
        # Obtaining the member 'logpdf' of a type (line 2505)
        logpdf_623202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2505, 22), self_623201, 'logpdf')
        # Calling logpdf(args, kwargs) (line 2505)
        logpdf_call_result_623207 = invoke(stypy.reporting.localization.Localization(__file__, 2505, 22), logpdf_623202, *[x_623203, df_623204, scale_623205], **kwargs_623206)
        
        # Processing the call keyword arguments (line 2505)
        kwargs_623208 = {}
        # Getting the type of 'np' (line 2505)
        np_623199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 15), 'np', False)
        # Obtaining the member 'exp' of a type (line 2505)
        exp_623200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2505, 15), np_623199, 'exp')
        # Calling exp(args, kwargs) (line 2505)
        exp_call_result_623209 = invoke(stypy.reporting.localization.Localization(__file__, 2505, 15), exp_623200, *[logpdf_call_result_623207], **kwargs_623208)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2505, 8), 'stypy_return_type', exp_call_result_623209)
        
        # ################# End of 'pdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pdf' in the type store
        # Getting the type of 'stypy_return_type' (line 2483)
        stypy_return_type_623210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623210)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pdf'
        return stypy_return_type_623210


    @norecursion
    def _mean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_mean'
        module_type_store = module_type_store.open_function_context('_mean', 2507, 4, False)
        # Assigning a type to the variable 'self' (line 2508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2508, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen._mean.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen._mean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen._mean.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen._mean.__dict__.__setitem__('stypy_function_name', 'invwishart_gen._mean')
        invwishart_gen._mean.__dict__.__setitem__('stypy_param_names_list', ['dim', 'df', 'scale'])
        invwishart_gen._mean.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen._mean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen._mean.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen._mean.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen._mean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen._mean.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen._mean', ['dim', 'df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_mean', localization, ['dim', 'df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_mean(...)' code ##################

        str_623211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2520, (-1)), 'str', "\n        Parameters\n        ----------\n        dim : int\n            Dimension of the scale matrix\n        %(_doc_default_callparams)s\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'mean' instead.\n\n        ")
        
        
        # Getting the type of 'df' (line 2521)
        df_623212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 11), 'df')
        # Getting the type of 'dim' (line 2521)
        dim_623213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 16), 'dim')
        int_623214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2521, 22), 'int')
        # Applying the binary operator '+' (line 2521)
        result_add_623215 = python_operator(stypy.reporting.localization.Localization(__file__, 2521, 16), '+', dim_623213, int_623214)
        
        # Applying the binary operator '>' (line 2521)
        result_gt_623216 = python_operator(stypy.reporting.localization.Localization(__file__, 2521, 11), '>', df_623212, result_add_623215)
        
        # Testing the type of an if condition (line 2521)
        if_condition_623217 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2521, 8), result_gt_623216)
        # Assigning a type to the variable 'if_condition_623217' (line 2521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2521, 8), 'if_condition_623217', if_condition_623217)
        # SSA begins for if statement (line 2521)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 2522):
        
        # Assigning a BinOp to a Name (line 2522):
        # Getting the type of 'scale' (line 2522)
        scale_623218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 18), 'scale')
        # Getting the type of 'df' (line 2522)
        df_623219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 27), 'df')
        # Getting the type of 'dim' (line 2522)
        dim_623220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 32), 'dim')
        # Applying the binary operator '-' (line 2522)
        result_sub_623221 = python_operator(stypy.reporting.localization.Localization(__file__, 2522, 27), '-', df_623219, dim_623220)
        
        int_623222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2522, 38), 'int')
        # Applying the binary operator '-' (line 2522)
        result_sub_623223 = python_operator(stypy.reporting.localization.Localization(__file__, 2522, 36), '-', result_sub_623221, int_623222)
        
        # Applying the binary operator 'div' (line 2522)
        result_div_623224 = python_operator(stypy.reporting.localization.Localization(__file__, 2522, 18), 'div', scale_623218, result_sub_623223)
        
        # Assigning a type to the variable 'out' (line 2522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2522, 12), 'out', result_div_623224)
        # SSA branch for the else part of an if statement (line 2521)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 2524):
        
        # Assigning a Name to a Name (line 2524):
        # Getting the type of 'None' (line 2524)
        None_623225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 18), 'None')
        # Assigning a type to the variable 'out' (line 2524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2524, 12), 'out', None_623225)
        # SSA join for if statement (line 2521)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 2525)
        out_623226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 2525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2525, 8), 'stypy_return_type', out_623226)
        
        # ################# End of '_mean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_mean' in the type store
        # Getting the type of 'stypy_return_type' (line 2507)
        stypy_return_type_623227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623227)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_mean'
        return stypy_return_type_623227


    @norecursion
    def mean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mean'
        module_type_store = module_type_store.open_function_context('mean', 2527, 4, False)
        # Assigning a type to the variable 'self' (line 2528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2528, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen.mean.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen.mean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen.mean.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen.mean.__dict__.__setitem__('stypy_function_name', 'invwishart_gen.mean')
        invwishart_gen.mean.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale'])
        invwishart_gen.mean.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen.mean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen.mean.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen.mean.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen.mean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen.mean.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen.mean', ['df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mean', localization, ['df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mean(...)' code ##################

        str_623228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2543, (-1)), 'str', '\n        Mean of the inverse Wishart distribution\n\n        Only valid if the degrees of freedom are greater than the dimension of\n        the scale matrix plus one.\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        mean : float or None\n            The mean of the distribution\n\n        ')
        
        # Assigning a Call to a Tuple (line 2544):
        
        # Assigning a Subscript to a Name (line 2544):
        
        # Obtaining the type of the subscript
        int_623229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2544, 8), 'int')
        
        # Call to _process_parameters(...): (line 2544)
        # Processing the call arguments (line 2544)
        # Getting the type of 'df' (line 2544)
        df_623232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 50), 'df', False)
        # Getting the type of 'scale' (line 2544)
        scale_623233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 54), 'scale', False)
        # Processing the call keyword arguments (line 2544)
        kwargs_623234 = {}
        # Getting the type of 'self' (line 2544)
        self_623230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2544)
        _process_parameters_623231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2544, 25), self_623230, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2544)
        _process_parameters_call_result_623235 = invoke(stypy.reporting.localization.Localization(__file__, 2544, 25), _process_parameters_623231, *[df_623232, scale_623233], **kwargs_623234)
        
        # Obtaining the member '__getitem__' of a type (line 2544)
        getitem___623236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2544, 8), _process_parameters_call_result_623235, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2544)
        subscript_call_result_623237 = invoke(stypy.reporting.localization.Localization(__file__, 2544, 8), getitem___623236, int_623229)
        
        # Assigning a type to the variable 'tuple_var_assignment_618653' (line 2544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 8), 'tuple_var_assignment_618653', subscript_call_result_623237)
        
        # Assigning a Subscript to a Name (line 2544):
        
        # Obtaining the type of the subscript
        int_623238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2544, 8), 'int')
        
        # Call to _process_parameters(...): (line 2544)
        # Processing the call arguments (line 2544)
        # Getting the type of 'df' (line 2544)
        df_623241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 50), 'df', False)
        # Getting the type of 'scale' (line 2544)
        scale_623242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 54), 'scale', False)
        # Processing the call keyword arguments (line 2544)
        kwargs_623243 = {}
        # Getting the type of 'self' (line 2544)
        self_623239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2544)
        _process_parameters_623240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2544, 25), self_623239, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2544)
        _process_parameters_call_result_623244 = invoke(stypy.reporting.localization.Localization(__file__, 2544, 25), _process_parameters_623240, *[df_623241, scale_623242], **kwargs_623243)
        
        # Obtaining the member '__getitem__' of a type (line 2544)
        getitem___623245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2544, 8), _process_parameters_call_result_623244, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2544)
        subscript_call_result_623246 = invoke(stypy.reporting.localization.Localization(__file__, 2544, 8), getitem___623245, int_623238)
        
        # Assigning a type to the variable 'tuple_var_assignment_618654' (line 2544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 8), 'tuple_var_assignment_618654', subscript_call_result_623246)
        
        # Assigning a Subscript to a Name (line 2544):
        
        # Obtaining the type of the subscript
        int_623247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2544, 8), 'int')
        
        # Call to _process_parameters(...): (line 2544)
        # Processing the call arguments (line 2544)
        # Getting the type of 'df' (line 2544)
        df_623250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 50), 'df', False)
        # Getting the type of 'scale' (line 2544)
        scale_623251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 54), 'scale', False)
        # Processing the call keyword arguments (line 2544)
        kwargs_623252 = {}
        # Getting the type of 'self' (line 2544)
        self_623248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2544)
        _process_parameters_623249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2544, 25), self_623248, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2544)
        _process_parameters_call_result_623253 = invoke(stypy.reporting.localization.Localization(__file__, 2544, 25), _process_parameters_623249, *[df_623250, scale_623251], **kwargs_623252)
        
        # Obtaining the member '__getitem__' of a type (line 2544)
        getitem___623254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2544, 8), _process_parameters_call_result_623253, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2544)
        subscript_call_result_623255 = invoke(stypy.reporting.localization.Localization(__file__, 2544, 8), getitem___623254, int_623247)
        
        # Assigning a type to the variable 'tuple_var_assignment_618655' (line 2544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 8), 'tuple_var_assignment_618655', subscript_call_result_623255)
        
        # Assigning a Name to a Name (line 2544):
        # Getting the type of 'tuple_var_assignment_618653' (line 2544)
        tuple_var_assignment_618653_623256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 8), 'tuple_var_assignment_618653')
        # Assigning a type to the variable 'dim' (line 2544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 8), 'dim', tuple_var_assignment_618653_623256)
        
        # Assigning a Name to a Name (line 2544):
        # Getting the type of 'tuple_var_assignment_618654' (line 2544)
        tuple_var_assignment_618654_623257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 8), 'tuple_var_assignment_618654')
        # Assigning a type to the variable 'df' (line 2544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 13), 'df', tuple_var_assignment_618654_623257)
        
        # Assigning a Name to a Name (line 2544):
        # Getting the type of 'tuple_var_assignment_618655' (line 2544)
        tuple_var_assignment_618655_623258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 8), 'tuple_var_assignment_618655')
        # Assigning a type to the variable 'scale' (line 2544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 17), 'scale', tuple_var_assignment_618655_623258)
        
        # Assigning a Call to a Name (line 2545):
        
        # Assigning a Call to a Name (line 2545):
        
        # Call to _mean(...): (line 2545)
        # Processing the call arguments (line 2545)
        # Getting the type of 'dim' (line 2545)
        dim_623261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 25), 'dim', False)
        # Getting the type of 'df' (line 2545)
        df_623262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 30), 'df', False)
        # Getting the type of 'scale' (line 2545)
        scale_623263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 34), 'scale', False)
        # Processing the call keyword arguments (line 2545)
        kwargs_623264 = {}
        # Getting the type of 'self' (line 2545)
        self_623259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 14), 'self', False)
        # Obtaining the member '_mean' of a type (line 2545)
        _mean_623260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2545, 14), self_623259, '_mean')
        # Calling _mean(args, kwargs) (line 2545)
        _mean_call_result_623265 = invoke(stypy.reporting.localization.Localization(__file__, 2545, 14), _mean_623260, *[dim_623261, df_623262, scale_623263], **kwargs_623264)
        
        # Assigning a type to the variable 'out' (line 2545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'out', _mean_call_result_623265)
        
        
        # Getting the type of 'out' (line 2546)
        out_623266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 39), 'out')
        # Getting the type of 'None' (line 2546)
        None_623267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 50), 'None')
        # Applying the binary operator 'isnot' (line 2546)
        result_is_not_623268 = python_operator(stypy.reporting.localization.Localization(__file__, 2546, 39), 'isnot', out_623266, None_623267)
        
        # Testing the type of an if expression (line 2546)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2546, 15), result_is_not_623268)
        # SSA begins for if expression (line 2546)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to _squeeze_output(...): (line 2546)
        # Processing the call arguments (line 2546)
        # Getting the type of 'out' (line 2546)
        out_623270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 31), 'out', False)
        # Processing the call keyword arguments (line 2546)
        kwargs_623271 = {}
        # Getting the type of '_squeeze_output' (line 2546)
        _squeeze_output_623269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2546)
        _squeeze_output_call_result_623272 = invoke(stypy.reporting.localization.Localization(__file__, 2546, 15), _squeeze_output_623269, *[out_623270], **kwargs_623271)
        
        # SSA branch for the else part of an if expression (line 2546)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'out' (line 2546)
        out_623273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 60), 'out')
        # SSA join for if expression (line 2546)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_623274 = union_type.UnionType.add(_squeeze_output_call_result_623272, out_623273)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2546, 8), 'stypy_return_type', if_exp_623274)
        
        # ################# End of 'mean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mean' in the type store
        # Getting the type of 'stypy_return_type' (line 2527)
        stypy_return_type_623275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623275)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mean'
        return stypy_return_type_623275


    @norecursion
    def _mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_mode'
        module_type_store = module_type_store.open_function_context('_mode', 2548, 4, False)
        # Assigning a type to the variable 'self' (line 2549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2549, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen._mode.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen._mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen._mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen._mode.__dict__.__setitem__('stypy_function_name', 'invwishart_gen._mode')
        invwishart_gen._mode.__dict__.__setitem__('stypy_param_names_list', ['dim', 'df', 'scale'])
        invwishart_gen._mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen._mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen._mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen._mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen._mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen._mode.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen._mode', ['dim', 'df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_mode', localization, ['dim', 'df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_mode(...)' code ##################

        str_623276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2561, (-1)), 'str', "\n        Parameters\n        ----------\n        dim : int\n            Dimension of the scale matrix\n        %(_doc_default_callparams)s\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'mode' instead.\n\n        ")
        # Getting the type of 'scale' (line 2562)
        scale_623277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 15), 'scale')
        # Getting the type of 'df' (line 2562)
        df_623278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 24), 'df')
        # Getting the type of 'dim' (line 2562)
        dim_623279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 29), 'dim')
        # Applying the binary operator '+' (line 2562)
        result_add_623280 = python_operator(stypy.reporting.localization.Localization(__file__, 2562, 24), '+', df_623278, dim_623279)
        
        int_623281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2562, 35), 'int')
        # Applying the binary operator '+' (line 2562)
        result_add_623282 = python_operator(stypy.reporting.localization.Localization(__file__, 2562, 33), '+', result_add_623280, int_623281)
        
        # Applying the binary operator 'div' (line 2562)
        result_div_623283 = python_operator(stypy.reporting.localization.Localization(__file__, 2562, 15), 'div', scale_623277, result_add_623282)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2562, 8), 'stypy_return_type', result_div_623283)
        
        # ################# End of '_mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_mode' in the type store
        # Getting the type of 'stypy_return_type' (line 2548)
        stypy_return_type_623284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623284)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_mode'
        return stypy_return_type_623284


    @norecursion
    def mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mode'
        module_type_store = module_type_store.open_function_context('mode', 2564, 4, False)
        # Assigning a type to the variable 'self' (line 2565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2565, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen.mode.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen.mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen.mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen.mode.__dict__.__setitem__('stypy_function_name', 'invwishart_gen.mode')
        invwishart_gen.mode.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale'])
        invwishart_gen.mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen.mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen.mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen.mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen.mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen.mode.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen.mode', ['df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mode', localization, ['df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mode(...)' code ##################

        str_623285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2577, (-1)), 'str', '\n        Mode of the inverse Wishart distribution\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        mode : float\n            The Mode of the distribution\n\n        ')
        
        # Assigning a Call to a Tuple (line 2578):
        
        # Assigning a Subscript to a Name (line 2578):
        
        # Obtaining the type of the subscript
        int_623286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2578, 8), 'int')
        
        # Call to _process_parameters(...): (line 2578)
        # Processing the call arguments (line 2578)
        # Getting the type of 'df' (line 2578)
        df_623289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 50), 'df', False)
        # Getting the type of 'scale' (line 2578)
        scale_623290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 54), 'scale', False)
        # Processing the call keyword arguments (line 2578)
        kwargs_623291 = {}
        # Getting the type of 'self' (line 2578)
        self_623287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2578)
        _process_parameters_623288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 25), self_623287, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2578)
        _process_parameters_call_result_623292 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 25), _process_parameters_623288, *[df_623289, scale_623290], **kwargs_623291)
        
        # Obtaining the member '__getitem__' of a type (line 2578)
        getitem___623293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 8), _process_parameters_call_result_623292, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2578)
        subscript_call_result_623294 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 8), getitem___623293, int_623286)
        
        # Assigning a type to the variable 'tuple_var_assignment_618656' (line 2578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 8), 'tuple_var_assignment_618656', subscript_call_result_623294)
        
        # Assigning a Subscript to a Name (line 2578):
        
        # Obtaining the type of the subscript
        int_623295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2578, 8), 'int')
        
        # Call to _process_parameters(...): (line 2578)
        # Processing the call arguments (line 2578)
        # Getting the type of 'df' (line 2578)
        df_623298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 50), 'df', False)
        # Getting the type of 'scale' (line 2578)
        scale_623299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 54), 'scale', False)
        # Processing the call keyword arguments (line 2578)
        kwargs_623300 = {}
        # Getting the type of 'self' (line 2578)
        self_623296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2578)
        _process_parameters_623297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 25), self_623296, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2578)
        _process_parameters_call_result_623301 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 25), _process_parameters_623297, *[df_623298, scale_623299], **kwargs_623300)
        
        # Obtaining the member '__getitem__' of a type (line 2578)
        getitem___623302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 8), _process_parameters_call_result_623301, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2578)
        subscript_call_result_623303 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 8), getitem___623302, int_623295)
        
        # Assigning a type to the variable 'tuple_var_assignment_618657' (line 2578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 8), 'tuple_var_assignment_618657', subscript_call_result_623303)
        
        # Assigning a Subscript to a Name (line 2578):
        
        # Obtaining the type of the subscript
        int_623304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2578, 8), 'int')
        
        # Call to _process_parameters(...): (line 2578)
        # Processing the call arguments (line 2578)
        # Getting the type of 'df' (line 2578)
        df_623307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 50), 'df', False)
        # Getting the type of 'scale' (line 2578)
        scale_623308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 54), 'scale', False)
        # Processing the call keyword arguments (line 2578)
        kwargs_623309 = {}
        # Getting the type of 'self' (line 2578)
        self_623305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2578)
        _process_parameters_623306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 25), self_623305, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2578)
        _process_parameters_call_result_623310 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 25), _process_parameters_623306, *[df_623307, scale_623308], **kwargs_623309)
        
        # Obtaining the member '__getitem__' of a type (line 2578)
        getitem___623311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 8), _process_parameters_call_result_623310, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2578)
        subscript_call_result_623312 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 8), getitem___623311, int_623304)
        
        # Assigning a type to the variable 'tuple_var_assignment_618658' (line 2578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 8), 'tuple_var_assignment_618658', subscript_call_result_623312)
        
        # Assigning a Name to a Name (line 2578):
        # Getting the type of 'tuple_var_assignment_618656' (line 2578)
        tuple_var_assignment_618656_623313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 8), 'tuple_var_assignment_618656')
        # Assigning a type to the variable 'dim' (line 2578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 8), 'dim', tuple_var_assignment_618656_623313)
        
        # Assigning a Name to a Name (line 2578):
        # Getting the type of 'tuple_var_assignment_618657' (line 2578)
        tuple_var_assignment_618657_623314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 8), 'tuple_var_assignment_618657')
        # Assigning a type to the variable 'df' (line 2578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 13), 'df', tuple_var_assignment_618657_623314)
        
        # Assigning a Name to a Name (line 2578):
        # Getting the type of 'tuple_var_assignment_618658' (line 2578)
        tuple_var_assignment_618658_623315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 8), 'tuple_var_assignment_618658')
        # Assigning a type to the variable 'scale' (line 2578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 17), 'scale', tuple_var_assignment_618658_623315)
        
        # Assigning a Call to a Name (line 2579):
        
        # Assigning a Call to a Name (line 2579):
        
        # Call to _mode(...): (line 2579)
        # Processing the call arguments (line 2579)
        # Getting the type of 'dim' (line 2579)
        dim_623318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 25), 'dim', False)
        # Getting the type of 'df' (line 2579)
        df_623319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 30), 'df', False)
        # Getting the type of 'scale' (line 2579)
        scale_623320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 34), 'scale', False)
        # Processing the call keyword arguments (line 2579)
        kwargs_623321 = {}
        # Getting the type of 'self' (line 2579)
        self_623316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 14), 'self', False)
        # Obtaining the member '_mode' of a type (line 2579)
        _mode_623317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2579, 14), self_623316, '_mode')
        # Calling _mode(args, kwargs) (line 2579)
        _mode_call_result_623322 = invoke(stypy.reporting.localization.Localization(__file__, 2579, 14), _mode_623317, *[dim_623318, df_623319, scale_623320], **kwargs_623321)
        
        # Assigning a type to the variable 'out' (line 2579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2579, 8), 'out', _mode_call_result_623322)
        
        # Call to _squeeze_output(...): (line 2580)
        # Processing the call arguments (line 2580)
        # Getting the type of 'out' (line 2580)
        out_623324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 31), 'out', False)
        # Processing the call keyword arguments (line 2580)
        kwargs_623325 = {}
        # Getting the type of '_squeeze_output' (line 2580)
        _squeeze_output_623323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2580)
        _squeeze_output_call_result_623326 = invoke(stypy.reporting.localization.Localization(__file__, 2580, 15), _squeeze_output_623323, *[out_623324], **kwargs_623325)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2580, 8), 'stypy_return_type', _squeeze_output_call_result_623326)
        
        # ################# End of 'mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mode' in the type store
        # Getting the type of 'stypy_return_type' (line 2564)
        stypy_return_type_623327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623327)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mode'
        return stypy_return_type_623327


    @norecursion
    def _var(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_var'
        module_type_store = module_type_store.open_function_context('_var', 2582, 4, False)
        # Assigning a type to the variable 'self' (line 2583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2583, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen._var.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen._var.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen._var.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen._var.__dict__.__setitem__('stypy_function_name', 'invwishart_gen._var')
        invwishart_gen._var.__dict__.__setitem__('stypy_param_names_list', ['dim', 'df', 'scale'])
        invwishart_gen._var.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen._var.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen._var.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen._var.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen._var.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen._var.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen._var', ['dim', 'df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_var', localization, ['dim', 'df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_var(...)' code ##################

        str_623328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2595, (-1)), 'str', "\n        Parameters\n        ----------\n        dim : int\n            Dimension of the scale matrix\n        %(_doc_default_callparams)s\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'var' instead.\n\n        ")
        
        
        # Getting the type of 'df' (line 2596)
        df_623329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 11), 'df')
        # Getting the type of 'dim' (line 2596)
        dim_623330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 16), 'dim')
        int_623331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2596, 22), 'int')
        # Applying the binary operator '+' (line 2596)
        result_add_623332 = python_operator(stypy.reporting.localization.Localization(__file__, 2596, 16), '+', dim_623330, int_623331)
        
        # Applying the binary operator '>' (line 2596)
        result_gt_623333 = python_operator(stypy.reporting.localization.Localization(__file__, 2596, 11), '>', df_623329, result_add_623332)
        
        # Testing the type of an if condition (line 2596)
        if_condition_623334 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2596, 8), result_gt_623333)
        # Assigning a type to the variable 'if_condition_623334' (line 2596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2596, 8), 'if_condition_623334', if_condition_623334)
        # SSA begins for if statement (line 2596)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 2597):
        
        # Assigning a BinOp to a Name (line 2597):
        # Getting the type of 'df' (line 2597)
        df_623335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 19), 'df')
        # Getting the type of 'dim' (line 2597)
        dim_623336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 24), 'dim')
        # Applying the binary operator '-' (line 2597)
        result_sub_623337 = python_operator(stypy.reporting.localization.Localization(__file__, 2597, 19), '-', df_623335, dim_623336)
        
        int_623338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2597, 30), 'int')
        # Applying the binary operator '+' (line 2597)
        result_add_623339 = python_operator(stypy.reporting.localization.Localization(__file__, 2597, 28), '+', result_sub_623337, int_623338)
        
        # Getting the type of 'scale' (line 2597)
        scale_623340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 35), 'scale')
        int_623341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2597, 42), 'int')
        # Applying the binary operator '**' (line 2597)
        result_pow_623342 = python_operator(stypy.reporting.localization.Localization(__file__, 2597, 35), '**', scale_623340, int_623341)
        
        # Applying the binary operator '*' (line 2597)
        result_mul_623343 = python_operator(stypy.reporting.localization.Localization(__file__, 2597, 18), '*', result_add_623339, result_pow_623342)
        
        # Assigning a type to the variable 'var' (line 2597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2597, 12), 'var', result_mul_623343)
        
        # Assigning a Call to a Name (line 2598):
        
        # Assigning a Call to a Name (line 2598):
        
        # Call to diagonal(...): (line 2598)
        # Processing the call keyword arguments (line 2598)
        kwargs_623346 = {}
        # Getting the type of 'scale' (line 2598)
        scale_623344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 19), 'scale', False)
        # Obtaining the member 'diagonal' of a type (line 2598)
        diagonal_623345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2598, 19), scale_623344, 'diagonal')
        # Calling diagonal(args, kwargs) (line 2598)
        diagonal_call_result_623347 = invoke(stypy.reporting.localization.Localization(__file__, 2598, 19), diagonal_623345, *[], **kwargs_623346)
        
        # Assigning a type to the variable 'diag' (line 2598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2598, 12), 'diag', diagonal_call_result_623347)
        
        # Getting the type of 'var' (line 2599)
        var_623348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 12), 'var')
        # Getting the type of 'df' (line 2599)
        df_623349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 20), 'df')
        # Getting the type of 'dim' (line 2599)
        dim_623350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 25), 'dim')
        # Applying the binary operator '-' (line 2599)
        result_sub_623351 = python_operator(stypy.reporting.localization.Localization(__file__, 2599, 20), '-', df_623349, dim_623350)
        
        int_623352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2599, 31), 'int')
        # Applying the binary operator '-' (line 2599)
        result_sub_623353 = python_operator(stypy.reporting.localization.Localization(__file__, 2599, 29), '-', result_sub_623351, int_623352)
        
        
        # Call to outer(...): (line 2599)
        # Processing the call arguments (line 2599)
        # Getting the type of 'diag' (line 2599)
        diag_623356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 45), 'diag', False)
        # Getting the type of 'diag' (line 2599)
        diag_623357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 51), 'diag', False)
        # Processing the call keyword arguments (line 2599)
        kwargs_623358 = {}
        # Getting the type of 'np' (line 2599)
        np_623354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 36), 'np', False)
        # Obtaining the member 'outer' of a type (line 2599)
        outer_623355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2599, 36), np_623354, 'outer')
        # Calling outer(args, kwargs) (line 2599)
        outer_call_result_623359 = invoke(stypy.reporting.localization.Localization(__file__, 2599, 36), outer_623355, *[diag_623356, diag_623357], **kwargs_623358)
        
        # Applying the binary operator '*' (line 2599)
        result_mul_623360 = python_operator(stypy.reporting.localization.Localization(__file__, 2599, 19), '*', result_sub_623353, outer_call_result_623359)
        
        # Applying the binary operator '+=' (line 2599)
        result_iadd_623361 = python_operator(stypy.reporting.localization.Localization(__file__, 2599, 12), '+=', var_623348, result_mul_623360)
        # Assigning a type to the variable 'var' (line 2599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2599, 12), 'var', result_iadd_623361)
        
        
        # Getting the type of 'var' (line 2600)
        var_623362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 12), 'var')
        # Getting the type of 'df' (line 2600)
        df_623363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 20), 'df')
        # Getting the type of 'dim' (line 2600)
        dim_623364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 25), 'dim')
        # Applying the binary operator '-' (line 2600)
        result_sub_623365 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 20), '-', df_623363, dim_623364)
        
        # Getting the type of 'df' (line 2600)
        df_623366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 33), 'df')
        # Getting the type of 'dim' (line 2600)
        dim_623367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 38), 'dim')
        # Applying the binary operator '-' (line 2600)
        result_sub_623368 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 33), '-', df_623366, dim_623367)
        
        int_623369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2600, 44), 'int')
        # Applying the binary operator '-' (line 2600)
        result_sub_623370 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 42), '-', result_sub_623368, int_623369)
        
        int_623371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2600, 48), 'int')
        # Applying the binary operator '**' (line 2600)
        result_pow_623372 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 32), '**', result_sub_623370, int_623371)
        
        # Applying the binary operator '*' (line 2600)
        result_mul_623373 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 19), '*', result_sub_623365, result_pow_623372)
        
        # Getting the type of 'df' (line 2600)
        df_623374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 53), 'df')
        # Getting the type of 'dim' (line 2600)
        dim_623375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 58), 'dim')
        # Applying the binary operator '-' (line 2600)
        result_sub_623376 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 53), '-', df_623374, dim_623375)
        
        int_623377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2600, 64), 'int')
        # Applying the binary operator '-' (line 2600)
        result_sub_623378 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 62), '-', result_sub_623376, int_623377)
        
        # Applying the binary operator '*' (line 2600)
        result_mul_623379 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 50), '*', result_mul_623373, result_sub_623378)
        
        # Applying the binary operator 'div=' (line 2600)
        result_div_623380 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 12), 'div=', var_623362, result_mul_623379)
        # Assigning a type to the variable 'var' (line 2600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2600, 12), 'var', result_div_623380)
        
        # SSA branch for the else part of an if statement (line 2596)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 2602):
        
        # Assigning a Name to a Name (line 2602):
        # Getting the type of 'None' (line 2602)
        None_623381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 18), 'None')
        # Assigning a type to the variable 'var' (line 2602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 12), 'var', None_623381)
        # SSA join for if statement (line 2596)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'var' (line 2603)
        var_623382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 15), 'var')
        # Assigning a type to the variable 'stypy_return_type' (line 2603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2603, 8), 'stypy_return_type', var_623382)
        
        # ################# End of '_var(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_var' in the type store
        # Getting the type of 'stypy_return_type' (line 2582)
        stypy_return_type_623383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623383)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_var'
        return stypy_return_type_623383


    @norecursion
    def var(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'var'
        module_type_store = module_type_store.open_function_context('var', 2605, 4, False)
        # Assigning a type to the variable 'self' (line 2606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2606, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen.var.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen.var.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen.var.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen.var.__dict__.__setitem__('stypy_function_name', 'invwishart_gen.var')
        invwishart_gen.var.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale'])
        invwishart_gen.var.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen.var.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen.var.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen.var.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen.var.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen.var.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen.var', ['df', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'var', localization, ['df', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'var(...)' code ##################

        str_623384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2620, (-1)), 'str', '\n        Variance of the inverse Wishart distribution\n\n        Only valid if the degrees of freedom are greater than the dimension of\n        the scale matrix plus three.\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        var : float\n            The variance of the distribution\n        ')
        
        # Assigning a Call to a Tuple (line 2621):
        
        # Assigning a Subscript to a Name (line 2621):
        
        # Obtaining the type of the subscript
        int_623385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2621, 8), 'int')
        
        # Call to _process_parameters(...): (line 2621)
        # Processing the call arguments (line 2621)
        # Getting the type of 'df' (line 2621)
        df_623388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 50), 'df', False)
        # Getting the type of 'scale' (line 2621)
        scale_623389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 54), 'scale', False)
        # Processing the call keyword arguments (line 2621)
        kwargs_623390 = {}
        # Getting the type of 'self' (line 2621)
        self_623386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2621)
        _process_parameters_623387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2621, 25), self_623386, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2621)
        _process_parameters_call_result_623391 = invoke(stypy.reporting.localization.Localization(__file__, 2621, 25), _process_parameters_623387, *[df_623388, scale_623389], **kwargs_623390)
        
        # Obtaining the member '__getitem__' of a type (line 2621)
        getitem___623392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2621, 8), _process_parameters_call_result_623391, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2621)
        subscript_call_result_623393 = invoke(stypy.reporting.localization.Localization(__file__, 2621, 8), getitem___623392, int_623385)
        
        # Assigning a type to the variable 'tuple_var_assignment_618659' (line 2621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2621, 8), 'tuple_var_assignment_618659', subscript_call_result_623393)
        
        # Assigning a Subscript to a Name (line 2621):
        
        # Obtaining the type of the subscript
        int_623394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2621, 8), 'int')
        
        # Call to _process_parameters(...): (line 2621)
        # Processing the call arguments (line 2621)
        # Getting the type of 'df' (line 2621)
        df_623397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 50), 'df', False)
        # Getting the type of 'scale' (line 2621)
        scale_623398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 54), 'scale', False)
        # Processing the call keyword arguments (line 2621)
        kwargs_623399 = {}
        # Getting the type of 'self' (line 2621)
        self_623395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2621)
        _process_parameters_623396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2621, 25), self_623395, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2621)
        _process_parameters_call_result_623400 = invoke(stypy.reporting.localization.Localization(__file__, 2621, 25), _process_parameters_623396, *[df_623397, scale_623398], **kwargs_623399)
        
        # Obtaining the member '__getitem__' of a type (line 2621)
        getitem___623401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2621, 8), _process_parameters_call_result_623400, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2621)
        subscript_call_result_623402 = invoke(stypy.reporting.localization.Localization(__file__, 2621, 8), getitem___623401, int_623394)
        
        # Assigning a type to the variable 'tuple_var_assignment_618660' (line 2621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2621, 8), 'tuple_var_assignment_618660', subscript_call_result_623402)
        
        # Assigning a Subscript to a Name (line 2621):
        
        # Obtaining the type of the subscript
        int_623403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2621, 8), 'int')
        
        # Call to _process_parameters(...): (line 2621)
        # Processing the call arguments (line 2621)
        # Getting the type of 'df' (line 2621)
        df_623406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 50), 'df', False)
        # Getting the type of 'scale' (line 2621)
        scale_623407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 54), 'scale', False)
        # Processing the call keyword arguments (line 2621)
        kwargs_623408 = {}
        # Getting the type of 'self' (line 2621)
        self_623404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2621)
        _process_parameters_623405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2621, 25), self_623404, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2621)
        _process_parameters_call_result_623409 = invoke(stypy.reporting.localization.Localization(__file__, 2621, 25), _process_parameters_623405, *[df_623406, scale_623407], **kwargs_623408)
        
        # Obtaining the member '__getitem__' of a type (line 2621)
        getitem___623410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2621, 8), _process_parameters_call_result_623409, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2621)
        subscript_call_result_623411 = invoke(stypy.reporting.localization.Localization(__file__, 2621, 8), getitem___623410, int_623403)
        
        # Assigning a type to the variable 'tuple_var_assignment_618661' (line 2621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2621, 8), 'tuple_var_assignment_618661', subscript_call_result_623411)
        
        # Assigning a Name to a Name (line 2621):
        # Getting the type of 'tuple_var_assignment_618659' (line 2621)
        tuple_var_assignment_618659_623412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 8), 'tuple_var_assignment_618659')
        # Assigning a type to the variable 'dim' (line 2621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2621, 8), 'dim', tuple_var_assignment_618659_623412)
        
        # Assigning a Name to a Name (line 2621):
        # Getting the type of 'tuple_var_assignment_618660' (line 2621)
        tuple_var_assignment_618660_623413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 8), 'tuple_var_assignment_618660')
        # Assigning a type to the variable 'df' (line 2621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2621, 13), 'df', tuple_var_assignment_618660_623413)
        
        # Assigning a Name to a Name (line 2621):
        # Getting the type of 'tuple_var_assignment_618661' (line 2621)
        tuple_var_assignment_618661_623414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 8), 'tuple_var_assignment_618661')
        # Assigning a type to the variable 'scale' (line 2621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2621, 17), 'scale', tuple_var_assignment_618661_623414)
        
        # Assigning a Call to a Name (line 2622):
        
        # Assigning a Call to a Name (line 2622):
        
        # Call to _var(...): (line 2622)
        # Processing the call arguments (line 2622)
        # Getting the type of 'dim' (line 2622)
        dim_623417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 24), 'dim', False)
        # Getting the type of 'df' (line 2622)
        df_623418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 29), 'df', False)
        # Getting the type of 'scale' (line 2622)
        scale_623419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 33), 'scale', False)
        # Processing the call keyword arguments (line 2622)
        kwargs_623420 = {}
        # Getting the type of 'self' (line 2622)
        self_623415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 14), 'self', False)
        # Obtaining the member '_var' of a type (line 2622)
        _var_623416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2622, 14), self_623415, '_var')
        # Calling _var(args, kwargs) (line 2622)
        _var_call_result_623421 = invoke(stypy.reporting.localization.Localization(__file__, 2622, 14), _var_623416, *[dim_623417, df_623418, scale_623419], **kwargs_623420)
        
        # Assigning a type to the variable 'out' (line 2622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2622, 8), 'out', _var_call_result_623421)
        
        
        # Getting the type of 'out' (line 2623)
        out_623422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 39), 'out')
        # Getting the type of 'None' (line 2623)
        None_623423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 50), 'None')
        # Applying the binary operator 'isnot' (line 2623)
        result_is_not_623424 = python_operator(stypy.reporting.localization.Localization(__file__, 2623, 39), 'isnot', out_623422, None_623423)
        
        # Testing the type of an if expression (line 2623)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2623, 15), result_is_not_623424)
        # SSA begins for if expression (line 2623)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to _squeeze_output(...): (line 2623)
        # Processing the call arguments (line 2623)
        # Getting the type of 'out' (line 2623)
        out_623426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 31), 'out', False)
        # Processing the call keyword arguments (line 2623)
        kwargs_623427 = {}
        # Getting the type of '_squeeze_output' (line 2623)
        _squeeze_output_623425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2623)
        _squeeze_output_call_result_623428 = invoke(stypy.reporting.localization.Localization(__file__, 2623, 15), _squeeze_output_623425, *[out_623426], **kwargs_623427)
        
        # SSA branch for the else part of an if expression (line 2623)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'out' (line 2623)
        out_623429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 60), 'out')
        # SSA join for if expression (line 2623)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_623430 = union_type.UnionType.add(_squeeze_output_call_result_623428, out_623429)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2623, 8), 'stypy_return_type', if_exp_623430)
        
        # ################# End of 'var(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'var' in the type store
        # Getting the type of 'stypy_return_type' (line 2605)
        stypy_return_type_623431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623431)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'var'
        return stypy_return_type_623431


    @norecursion
    def _rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_rvs'
        module_type_store = module_type_store.open_function_context('_rvs', 2625, 4, False)
        # Assigning a type to the variable 'self' (line 2626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2626, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen._rvs.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen._rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen._rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen._rvs.__dict__.__setitem__('stypy_function_name', 'invwishart_gen._rvs')
        invwishart_gen._rvs.__dict__.__setitem__('stypy_param_names_list', ['n', 'shape', 'dim', 'df', 'C', 'random_state'])
        invwishart_gen._rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen._rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen._rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen._rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen._rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen._rvs.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen._rvs', ['n', 'shape', 'dim', 'df', 'C', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_rvs', localization, ['n', 'shape', 'dim', 'df', 'C', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_rvs(...)' code ##################

        str_623432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2646, (-1)), 'str', "\n        Parameters\n        ----------\n        n : integer\n            Number of variates to generate\n        shape : iterable\n            Shape of the variates to generate\n        dim : int\n            Dimension of the scale matrix\n        df : int\n            Degrees of freedom\n        C : ndarray\n            Cholesky factorization of the scale matrix, lower triagular.\n        %(_doc_random_state)s\n\n        Notes\n        -----\n        As this function does no argument checking, it should not be\n        called directly; use 'rvs' instead.\n\n        ")
        
        # Assigning a Call to a Name (line 2647):
        
        # Assigning a Call to a Name (line 2647):
        
        # Call to _get_random_state(...): (line 2647)
        # Processing the call arguments (line 2647)
        # Getting the type of 'random_state' (line 2647)
        random_state_623435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 46), 'random_state', False)
        # Processing the call keyword arguments (line 2647)
        kwargs_623436 = {}
        # Getting the type of 'self' (line 2647)
        self_623433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 23), 'self', False)
        # Obtaining the member '_get_random_state' of a type (line 2647)
        _get_random_state_623434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2647, 23), self_623433, '_get_random_state')
        # Calling _get_random_state(args, kwargs) (line 2647)
        _get_random_state_call_result_623437 = invoke(stypy.reporting.localization.Localization(__file__, 2647, 23), _get_random_state_623434, *[random_state_623435], **kwargs_623436)
        
        # Assigning a type to the variable 'random_state' (line 2647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2647, 8), 'random_state', _get_random_state_call_result_623437)
        
        # Assigning a Call to a Name (line 2649):
        
        # Assigning a Call to a Name (line 2649):
        
        # Call to _standard_rvs(...): (line 2649)
        # Processing the call arguments (line 2649)
        # Getting the type of 'n' (line 2649)
        n_623444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 54), 'n', False)
        # Getting the type of 'shape' (line 2649)
        shape_623445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 57), 'shape', False)
        # Getting the type of 'dim' (line 2649)
        dim_623446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 64), 'dim', False)
        # Getting the type of 'df' (line 2650)
        df_623447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 54), 'df', False)
        # Getting the type of 'random_state' (line 2650)
        random_state_623448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 58), 'random_state', False)
        # Processing the call keyword arguments (line 2649)
        kwargs_623449 = {}
        
        # Call to super(...): (line 2649)
        # Processing the call arguments (line 2649)
        # Getting the type of 'invwishart_gen' (line 2649)
        invwishart_gen_623439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 18), 'invwishart_gen', False)
        # Getting the type of 'self' (line 2649)
        self_623440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 34), 'self', False)
        # Processing the call keyword arguments (line 2649)
        kwargs_623441 = {}
        # Getting the type of 'super' (line 2649)
        super_623438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 12), 'super', False)
        # Calling super(args, kwargs) (line 2649)
        super_call_result_623442 = invoke(stypy.reporting.localization.Localization(__file__, 2649, 12), super_623438, *[invwishart_gen_623439, self_623440], **kwargs_623441)
        
        # Obtaining the member '_standard_rvs' of a type (line 2649)
        _standard_rvs_623443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2649, 12), super_call_result_623442, '_standard_rvs')
        # Calling _standard_rvs(args, kwargs) (line 2649)
        _standard_rvs_call_result_623450 = invoke(stypy.reporting.localization.Localization(__file__, 2649, 12), _standard_rvs_623443, *[n_623444, shape_623445, dim_623446, df_623447, random_state_623448], **kwargs_623449)
        
        # Assigning a type to the variable 'A' (line 2649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2649, 8), 'A', _standard_rvs_call_result_623450)
        
        # Assigning a Call to a Name (line 2653):
        
        # Assigning a Call to a Name (line 2653):
        
        # Call to eye(...): (line 2653)
        # Processing the call arguments (line 2653)
        # Getting the type of 'dim' (line 2653)
        dim_623453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 21), 'dim', False)
        # Processing the call keyword arguments (line 2653)
        kwargs_623454 = {}
        # Getting the type of 'np' (line 2653)
        np_623451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 14), 'np', False)
        # Obtaining the member 'eye' of a type (line 2653)
        eye_623452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2653, 14), np_623451, 'eye')
        # Calling eye(args, kwargs) (line 2653)
        eye_call_result_623455 = invoke(stypy.reporting.localization.Localization(__file__, 2653, 14), eye_623452, *[dim_623453], **kwargs_623454)
        
        # Assigning a type to the variable 'eye' (line 2653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2653, 8), 'eye', eye_call_result_623455)
        
        # Assigning a Call to a Name (line 2654):
        
        # Assigning a Call to a Name (line 2654):
        
        # Call to get_lapack_funcs(...): (line 2654)
        # Processing the call arguments (line 2654)
        str_623457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2654, 34), 'str', 'trtrs')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2654)
        tuple_623458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2654, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2654)
        # Adding element type (line 2654)
        # Getting the type of 'A' (line 2654)
        A_623459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 45), 'A', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2654, 45), tuple_623458, A_623459)
        
        # Processing the call keyword arguments (line 2654)
        kwargs_623460 = {}
        # Getting the type of 'get_lapack_funcs' (line 2654)
        get_lapack_funcs_623456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 16), 'get_lapack_funcs', False)
        # Calling get_lapack_funcs(args, kwargs) (line 2654)
        get_lapack_funcs_call_result_623461 = invoke(stypy.reporting.localization.Localization(__file__, 2654, 16), get_lapack_funcs_623456, *[str_623457, tuple_623458], **kwargs_623460)
        
        # Assigning a type to the variable 'trtrs' (line 2654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2654, 8), 'trtrs', get_lapack_funcs_call_result_623461)
        
        
        # Call to ndindex(...): (line 2656)
        # Processing the call arguments (line 2656)
        
        # Obtaining the type of the subscript
        int_623464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2656, 41), 'int')
        slice_623465 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2656, 32), None, int_623464, None)
        # Getting the type of 'A' (line 2656)
        A_623466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2656, 32), 'A', False)
        # Obtaining the member 'shape' of a type (line 2656)
        shape_623467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2656, 32), A_623466, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2656)
        getitem___623468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2656, 32), shape_623467, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2656)
        subscript_call_result_623469 = invoke(stypy.reporting.localization.Localization(__file__, 2656, 32), getitem___623468, slice_623465)
        
        # Processing the call keyword arguments (line 2656)
        kwargs_623470 = {}
        # Getting the type of 'np' (line 2656)
        np_623462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2656, 21), 'np', False)
        # Obtaining the member 'ndindex' of a type (line 2656)
        ndindex_623463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2656, 21), np_623462, 'ndindex')
        # Calling ndindex(args, kwargs) (line 2656)
        ndindex_call_result_623471 = invoke(stypy.reporting.localization.Localization(__file__, 2656, 21), ndindex_623463, *[subscript_call_result_623469], **kwargs_623470)
        
        # Testing the type of a for loop iterable (line 2656)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2656, 8), ndindex_call_result_623471)
        # Getting the type of the for loop variable (line 2656)
        for_loop_var_623472 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2656, 8), ndindex_call_result_623471)
        # Assigning a type to the variable 'index' (line 2656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2656, 8), 'index', for_loop_var_623472)
        # SSA begins for a for statement (line 2656)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 2658):
        
        # Assigning a Call to a Name (line 2658):
        
        # Call to dot(...): (line 2658)
        # Processing the call arguments (line 2658)
        # Getting the type of 'C' (line 2658)
        C_623475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 24), 'C', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'index' (line 2658)
        index_623476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 29), 'index', False)
        # Getting the type of 'A' (line 2658)
        A_623477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 27), 'A', False)
        # Obtaining the member '__getitem__' of a type (line 2658)
        getitem___623478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 27), A_623477, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2658)
        subscript_call_result_623479 = invoke(stypy.reporting.localization.Localization(__file__, 2658, 27), getitem___623478, index_623476)
        
        # Processing the call keyword arguments (line 2658)
        kwargs_623480 = {}
        # Getting the type of 'np' (line 2658)
        np_623473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 17), 'np', False)
        # Obtaining the member 'dot' of a type (line 2658)
        dot_623474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 17), np_623473, 'dot')
        # Calling dot(args, kwargs) (line 2658)
        dot_call_result_623481 = invoke(stypy.reporting.localization.Localization(__file__, 2658, 17), dot_623474, *[C_623475, subscript_call_result_623479], **kwargs_623480)
        
        # Assigning a type to the variable 'CA' (line 2658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2658, 12), 'CA', dot_call_result_623481)
        
        
        # Getting the type of 'dim' (line 2660)
        dim_623482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 15), 'dim')
        int_623483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 21), 'int')
        # Applying the binary operator '>' (line 2660)
        result_gt_623484 = python_operator(stypy.reporting.localization.Localization(__file__, 2660, 15), '>', dim_623482, int_623483)
        
        # Testing the type of an if condition (line 2660)
        if_condition_623485 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2660, 12), result_gt_623484)
        # Assigning a type to the variable 'if_condition_623485' (line 2660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2660, 12), 'if_condition_623485', if_condition_623485)
        # SSA begins for if statement (line 2660)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 2661):
        
        # Assigning a Subscript to a Name (line 2661):
        
        # Obtaining the type of the subscript
        int_623486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2661, 16), 'int')
        
        # Call to trtrs(...): (line 2661)
        # Processing the call arguments (line 2661)
        # Getting the type of 'CA' (line 2661)
        CA_623488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 33), 'CA', False)
        # Getting the type of 'eye' (line 2661)
        eye_623489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 37), 'eye', False)
        # Processing the call keyword arguments (line 2661)
        # Getting the type of 'True' (line 2661)
        True_623490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 48), 'True', False)
        keyword_623491 = True_623490
        kwargs_623492 = {'lower': keyword_623491}
        # Getting the type of 'trtrs' (line 2661)
        trtrs_623487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 27), 'trtrs', False)
        # Calling trtrs(args, kwargs) (line 2661)
        trtrs_call_result_623493 = invoke(stypy.reporting.localization.Localization(__file__, 2661, 27), trtrs_623487, *[CA_623488, eye_623489], **kwargs_623492)
        
        # Obtaining the member '__getitem__' of a type (line 2661)
        getitem___623494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2661, 16), trtrs_call_result_623493, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2661)
        subscript_call_result_623495 = invoke(stypy.reporting.localization.Localization(__file__, 2661, 16), getitem___623494, int_623486)
        
        # Assigning a type to the variable 'tuple_var_assignment_618662' (line 2661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2661, 16), 'tuple_var_assignment_618662', subscript_call_result_623495)
        
        # Assigning a Subscript to a Name (line 2661):
        
        # Obtaining the type of the subscript
        int_623496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2661, 16), 'int')
        
        # Call to trtrs(...): (line 2661)
        # Processing the call arguments (line 2661)
        # Getting the type of 'CA' (line 2661)
        CA_623498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 33), 'CA', False)
        # Getting the type of 'eye' (line 2661)
        eye_623499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 37), 'eye', False)
        # Processing the call keyword arguments (line 2661)
        # Getting the type of 'True' (line 2661)
        True_623500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 48), 'True', False)
        keyword_623501 = True_623500
        kwargs_623502 = {'lower': keyword_623501}
        # Getting the type of 'trtrs' (line 2661)
        trtrs_623497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 27), 'trtrs', False)
        # Calling trtrs(args, kwargs) (line 2661)
        trtrs_call_result_623503 = invoke(stypy.reporting.localization.Localization(__file__, 2661, 27), trtrs_623497, *[CA_623498, eye_623499], **kwargs_623502)
        
        # Obtaining the member '__getitem__' of a type (line 2661)
        getitem___623504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2661, 16), trtrs_call_result_623503, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2661)
        subscript_call_result_623505 = invoke(stypy.reporting.localization.Localization(__file__, 2661, 16), getitem___623504, int_623496)
        
        # Assigning a type to the variable 'tuple_var_assignment_618663' (line 2661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2661, 16), 'tuple_var_assignment_618663', subscript_call_result_623505)
        
        # Assigning a Name to a Name (line 2661):
        # Getting the type of 'tuple_var_assignment_618662' (line 2661)
        tuple_var_assignment_618662_623506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 16), 'tuple_var_assignment_618662')
        # Assigning a type to the variable 'CA' (line 2661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2661, 16), 'CA', tuple_var_assignment_618662_623506)
        
        # Assigning a Name to a Name (line 2661):
        # Getting the type of 'tuple_var_assignment_618663' (line 2661)
        tuple_var_assignment_618663_623507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 16), 'tuple_var_assignment_618663')
        # Assigning a type to the variable 'info' (line 2661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2661, 20), 'info', tuple_var_assignment_618663_623507)
        
        
        # Getting the type of 'info' (line 2662)
        info_623508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 19), 'info')
        int_623509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2662, 26), 'int')
        # Applying the binary operator '>' (line 2662)
        result_gt_623510 = python_operator(stypy.reporting.localization.Localization(__file__, 2662, 19), '>', info_623508, int_623509)
        
        # Testing the type of an if condition (line 2662)
        if_condition_623511 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2662, 16), result_gt_623510)
        # Assigning a type to the variable 'if_condition_623511' (line 2662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2662, 16), 'if_condition_623511', if_condition_623511)
        # SSA begins for if statement (line 2662)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to LinAlgError(...): (line 2663)
        # Processing the call arguments (line 2663)
        str_623513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2663, 38), 'str', 'Singular matrix.')
        # Processing the call keyword arguments (line 2663)
        kwargs_623514 = {}
        # Getting the type of 'LinAlgError' (line 2663)
        LinAlgError_623512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 26), 'LinAlgError', False)
        # Calling LinAlgError(args, kwargs) (line 2663)
        LinAlgError_call_result_623515 = invoke(stypy.reporting.localization.Localization(__file__, 2663, 26), LinAlgError_623512, *[str_623513], **kwargs_623514)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2663, 20), LinAlgError_call_result_623515, 'raise parameter', BaseException)
        # SSA join for if statement (line 2662)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'info' (line 2664)
        info_623516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 19), 'info')
        int_623517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2664, 26), 'int')
        # Applying the binary operator '<' (line 2664)
        result_lt_623518 = python_operator(stypy.reporting.localization.Localization(__file__, 2664, 19), '<', info_623516, int_623517)
        
        # Testing the type of an if condition (line 2664)
        if_condition_623519 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2664, 16), result_lt_623518)
        # Assigning a type to the variable 'if_condition_623519' (line 2664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2664, 16), 'if_condition_623519', if_condition_623519)
        # SSA begins for if statement (line 2664)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2665)
        # Processing the call arguments (line 2665)
        str_623521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2665, 37), 'str', 'Illegal value in %d-th argument of internal trtrs')
        
        # Getting the type of 'info' (line 2666)
        info_623522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 58), 'info', False)
        # Applying the 'usub' unary operator (line 2666)
        result___neg___623523 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 57), 'usub', info_623522)
        
        # Applying the binary operator '%' (line 2665)
        result_mod_623524 = python_operator(stypy.reporting.localization.Localization(__file__, 2665, 37), '%', str_623521, result___neg___623523)
        
        # Processing the call keyword arguments (line 2665)
        kwargs_623525 = {}
        # Getting the type of 'ValueError' (line 2665)
        ValueError_623520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2665)
        ValueError_call_result_623526 = invoke(stypy.reporting.localization.Localization(__file__, 2665, 26), ValueError_623520, *[result_mod_623524], **kwargs_623525)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2665, 20), ValueError_call_result_623526, 'raise parameter', BaseException)
        # SSA join for if statement (line 2664)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2660)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 2668):
        
        # Assigning a BinOp to a Name (line 2668):
        float_623527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2668, 21), 'float')
        # Getting the type of 'CA' (line 2668)
        CA_623528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2668, 26), 'CA')
        # Applying the binary operator 'div' (line 2668)
        result_div_623529 = python_operator(stypy.reporting.localization.Localization(__file__, 2668, 21), 'div', float_623527, CA_623528)
        
        # Assigning a type to the variable 'CA' (line 2668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2668, 16), 'CA', result_div_623529)
        # SSA join for if statement (line 2660)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Subscript (line 2670):
        
        # Assigning a Call to a Subscript (line 2670):
        
        # Call to dot(...): (line 2670)
        # Processing the call arguments (line 2670)
        # Getting the type of 'CA' (line 2670)
        CA_623532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 30), 'CA', False)
        # Obtaining the member 'T' of a type (line 2670)
        T_623533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2670, 30), CA_623532, 'T')
        # Getting the type of 'CA' (line 2670)
        CA_623534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 36), 'CA', False)
        # Processing the call keyword arguments (line 2670)
        kwargs_623535 = {}
        # Getting the type of 'np' (line 2670)
        np_623530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 23), 'np', False)
        # Obtaining the member 'dot' of a type (line 2670)
        dot_623531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2670, 23), np_623530, 'dot')
        # Calling dot(args, kwargs) (line 2670)
        dot_call_result_623536 = invoke(stypy.reporting.localization.Localization(__file__, 2670, 23), dot_623531, *[T_623533, CA_623534], **kwargs_623535)
        
        # Getting the type of 'A' (line 2670)
        A_623537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 12), 'A')
        # Getting the type of 'index' (line 2670)
        index_623538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 14), 'index')
        # Storing an element on a container (line 2670)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2670, 12), A_623537, (index_623538, dot_call_result_623536))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'A' (line 2672)
        A_623539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2672, 15), 'A')
        # Assigning a type to the variable 'stypy_return_type' (line 2672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2672, 8), 'stypy_return_type', A_623539)
        
        # ################# End of '_rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 2625)
        stypy_return_type_623540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2625, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623540)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_rvs'
        return stypy_return_type_623540


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_623541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2674, 34), 'int')
        # Getting the type of 'None' (line 2674)
        None_623542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 50), 'None')
        defaults = [int_623541, None_623542]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 2674, 4, False)
        # Assigning a type to the variable 'self' (line 2675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2675, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen.rvs.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen.rvs.__dict__.__setitem__('stypy_function_name', 'invwishart_gen.rvs')
        invwishart_gen.rvs.__dict__.__setitem__('stypy_param_names_list', ['df', 'scale', 'size', 'random_state'])
        invwishart_gen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen.rvs', ['df', 'scale', 'size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['df', 'scale', 'size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        str_623543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2695, (-1)), 'str', '\n        Draw random samples from an inverse Wishart distribution.\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n        size : integer or iterable of integers, optional\n            Number of samples to draw (default 1).\n        %(_doc_random_state)s\n\n        Returns\n        -------\n        rvs : ndarray\n            Random variates of shape (`size`) + (`dim`, `dim), where `dim` is\n            the dimension of the scale matrix.\n\n        Notes\n        -----\n        %(_doc_callparams_note)s\n\n        ')
        
        # Assigning a Call to a Tuple (line 2696):
        
        # Assigning a Subscript to a Name (line 2696):
        
        # Obtaining the type of the subscript
        int_623544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2696, 8), 'int')
        
        # Call to _process_size(...): (line 2696)
        # Processing the call arguments (line 2696)
        # Getting the type of 'size' (line 2696)
        size_623547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 38), 'size', False)
        # Processing the call keyword arguments (line 2696)
        kwargs_623548 = {}
        # Getting the type of 'self' (line 2696)
        self_623545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 19), 'self', False)
        # Obtaining the member '_process_size' of a type (line 2696)
        _process_size_623546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2696, 19), self_623545, '_process_size')
        # Calling _process_size(args, kwargs) (line 2696)
        _process_size_call_result_623549 = invoke(stypy.reporting.localization.Localization(__file__, 2696, 19), _process_size_623546, *[size_623547], **kwargs_623548)
        
        # Obtaining the member '__getitem__' of a type (line 2696)
        getitem___623550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2696, 8), _process_size_call_result_623549, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2696)
        subscript_call_result_623551 = invoke(stypy.reporting.localization.Localization(__file__, 2696, 8), getitem___623550, int_623544)
        
        # Assigning a type to the variable 'tuple_var_assignment_618664' (line 2696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2696, 8), 'tuple_var_assignment_618664', subscript_call_result_623551)
        
        # Assigning a Subscript to a Name (line 2696):
        
        # Obtaining the type of the subscript
        int_623552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2696, 8), 'int')
        
        # Call to _process_size(...): (line 2696)
        # Processing the call arguments (line 2696)
        # Getting the type of 'size' (line 2696)
        size_623555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 38), 'size', False)
        # Processing the call keyword arguments (line 2696)
        kwargs_623556 = {}
        # Getting the type of 'self' (line 2696)
        self_623553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 19), 'self', False)
        # Obtaining the member '_process_size' of a type (line 2696)
        _process_size_623554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2696, 19), self_623553, '_process_size')
        # Calling _process_size(args, kwargs) (line 2696)
        _process_size_call_result_623557 = invoke(stypy.reporting.localization.Localization(__file__, 2696, 19), _process_size_623554, *[size_623555], **kwargs_623556)
        
        # Obtaining the member '__getitem__' of a type (line 2696)
        getitem___623558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2696, 8), _process_size_call_result_623557, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2696)
        subscript_call_result_623559 = invoke(stypy.reporting.localization.Localization(__file__, 2696, 8), getitem___623558, int_623552)
        
        # Assigning a type to the variable 'tuple_var_assignment_618665' (line 2696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2696, 8), 'tuple_var_assignment_618665', subscript_call_result_623559)
        
        # Assigning a Name to a Name (line 2696):
        # Getting the type of 'tuple_var_assignment_618664' (line 2696)
        tuple_var_assignment_618664_623560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 8), 'tuple_var_assignment_618664')
        # Assigning a type to the variable 'n' (line 2696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2696, 8), 'n', tuple_var_assignment_618664_623560)
        
        # Assigning a Name to a Name (line 2696):
        # Getting the type of 'tuple_var_assignment_618665' (line 2696)
        tuple_var_assignment_618665_623561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 8), 'tuple_var_assignment_618665')
        # Assigning a type to the variable 'shape' (line 2696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2696, 11), 'shape', tuple_var_assignment_618665_623561)
        
        # Assigning a Call to a Tuple (line 2697):
        
        # Assigning a Subscript to a Name (line 2697):
        
        # Obtaining the type of the subscript
        int_623562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2697, 8), 'int')
        
        # Call to _process_parameters(...): (line 2697)
        # Processing the call arguments (line 2697)
        # Getting the type of 'df' (line 2697)
        df_623565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 50), 'df', False)
        # Getting the type of 'scale' (line 2697)
        scale_623566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 54), 'scale', False)
        # Processing the call keyword arguments (line 2697)
        kwargs_623567 = {}
        # Getting the type of 'self' (line 2697)
        self_623563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2697)
        _process_parameters_623564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2697, 25), self_623563, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2697)
        _process_parameters_call_result_623568 = invoke(stypy.reporting.localization.Localization(__file__, 2697, 25), _process_parameters_623564, *[df_623565, scale_623566], **kwargs_623567)
        
        # Obtaining the member '__getitem__' of a type (line 2697)
        getitem___623569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2697, 8), _process_parameters_call_result_623568, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2697)
        subscript_call_result_623570 = invoke(stypy.reporting.localization.Localization(__file__, 2697, 8), getitem___623569, int_623562)
        
        # Assigning a type to the variable 'tuple_var_assignment_618666' (line 2697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2697, 8), 'tuple_var_assignment_618666', subscript_call_result_623570)
        
        # Assigning a Subscript to a Name (line 2697):
        
        # Obtaining the type of the subscript
        int_623571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2697, 8), 'int')
        
        # Call to _process_parameters(...): (line 2697)
        # Processing the call arguments (line 2697)
        # Getting the type of 'df' (line 2697)
        df_623574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 50), 'df', False)
        # Getting the type of 'scale' (line 2697)
        scale_623575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 54), 'scale', False)
        # Processing the call keyword arguments (line 2697)
        kwargs_623576 = {}
        # Getting the type of 'self' (line 2697)
        self_623572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2697)
        _process_parameters_623573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2697, 25), self_623572, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2697)
        _process_parameters_call_result_623577 = invoke(stypy.reporting.localization.Localization(__file__, 2697, 25), _process_parameters_623573, *[df_623574, scale_623575], **kwargs_623576)
        
        # Obtaining the member '__getitem__' of a type (line 2697)
        getitem___623578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2697, 8), _process_parameters_call_result_623577, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2697)
        subscript_call_result_623579 = invoke(stypy.reporting.localization.Localization(__file__, 2697, 8), getitem___623578, int_623571)
        
        # Assigning a type to the variable 'tuple_var_assignment_618667' (line 2697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2697, 8), 'tuple_var_assignment_618667', subscript_call_result_623579)
        
        # Assigning a Subscript to a Name (line 2697):
        
        # Obtaining the type of the subscript
        int_623580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2697, 8), 'int')
        
        # Call to _process_parameters(...): (line 2697)
        # Processing the call arguments (line 2697)
        # Getting the type of 'df' (line 2697)
        df_623583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 50), 'df', False)
        # Getting the type of 'scale' (line 2697)
        scale_623584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 54), 'scale', False)
        # Processing the call keyword arguments (line 2697)
        kwargs_623585 = {}
        # Getting the type of 'self' (line 2697)
        self_623581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 25), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 2697)
        _process_parameters_623582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2697, 25), self_623581, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2697)
        _process_parameters_call_result_623586 = invoke(stypy.reporting.localization.Localization(__file__, 2697, 25), _process_parameters_623582, *[df_623583, scale_623584], **kwargs_623585)
        
        # Obtaining the member '__getitem__' of a type (line 2697)
        getitem___623587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2697, 8), _process_parameters_call_result_623586, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2697)
        subscript_call_result_623588 = invoke(stypy.reporting.localization.Localization(__file__, 2697, 8), getitem___623587, int_623580)
        
        # Assigning a type to the variable 'tuple_var_assignment_618668' (line 2697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2697, 8), 'tuple_var_assignment_618668', subscript_call_result_623588)
        
        # Assigning a Name to a Name (line 2697):
        # Getting the type of 'tuple_var_assignment_618666' (line 2697)
        tuple_var_assignment_618666_623589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 8), 'tuple_var_assignment_618666')
        # Assigning a type to the variable 'dim' (line 2697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2697, 8), 'dim', tuple_var_assignment_618666_623589)
        
        # Assigning a Name to a Name (line 2697):
        # Getting the type of 'tuple_var_assignment_618667' (line 2697)
        tuple_var_assignment_618667_623590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 8), 'tuple_var_assignment_618667')
        # Assigning a type to the variable 'df' (line 2697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2697, 13), 'df', tuple_var_assignment_618667_623590)
        
        # Assigning a Name to a Name (line 2697):
        # Getting the type of 'tuple_var_assignment_618668' (line 2697)
        tuple_var_assignment_618668_623591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 8), 'tuple_var_assignment_618668')
        # Assigning a type to the variable 'scale' (line 2697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2697, 17), 'scale', tuple_var_assignment_618668_623591)
        
        # Assigning a Call to a Name (line 2700):
        
        # Assigning a Call to a Name (line 2700):
        
        # Call to eye(...): (line 2700)
        # Processing the call arguments (line 2700)
        # Getting the type of 'dim' (line 2700)
        dim_623594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 21), 'dim', False)
        # Processing the call keyword arguments (line 2700)
        kwargs_623595 = {}
        # Getting the type of 'np' (line 2700)
        np_623592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 14), 'np', False)
        # Obtaining the member 'eye' of a type (line 2700)
        eye_623593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2700, 14), np_623592, 'eye')
        # Calling eye(args, kwargs) (line 2700)
        eye_call_result_623596 = invoke(stypy.reporting.localization.Localization(__file__, 2700, 14), eye_623593, *[dim_623594], **kwargs_623595)
        
        # Assigning a type to the variable 'eye' (line 2700)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2700, 8), 'eye', eye_call_result_623596)
        
        # Assigning a Call to a Tuple (line 2701):
        
        # Assigning a Subscript to a Name (line 2701):
        
        # Obtaining the type of the subscript
        int_623597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2701, 8), 'int')
        
        # Call to cho_factor(...): (line 2701)
        # Processing the call arguments (line 2701)
        # Getting the type of 'scale' (line 2701)
        scale_623601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 43), 'scale', False)
        # Processing the call keyword arguments (line 2701)
        # Getting the type of 'True' (line 2701)
        True_623602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 56), 'True', False)
        keyword_623603 = True_623602
        kwargs_623604 = {'lower': keyword_623603}
        # Getting the type of 'scipy' (line 2701)
        scipy_623598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 19), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2701)
        linalg_623599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2701, 19), scipy_623598, 'linalg')
        # Obtaining the member 'cho_factor' of a type (line 2701)
        cho_factor_623600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2701, 19), linalg_623599, 'cho_factor')
        # Calling cho_factor(args, kwargs) (line 2701)
        cho_factor_call_result_623605 = invoke(stypy.reporting.localization.Localization(__file__, 2701, 19), cho_factor_623600, *[scale_623601], **kwargs_623604)
        
        # Obtaining the member '__getitem__' of a type (line 2701)
        getitem___623606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2701, 8), cho_factor_call_result_623605, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2701)
        subscript_call_result_623607 = invoke(stypy.reporting.localization.Localization(__file__, 2701, 8), getitem___623606, int_623597)
        
        # Assigning a type to the variable 'tuple_var_assignment_618669' (line 2701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2701, 8), 'tuple_var_assignment_618669', subscript_call_result_623607)
        
        # Assigning a Subscript to a Name (line 2701):
        
        # Obtaining the type of the subscript
        int_623608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2701, 8), 'int')
        
        # Call to cho_factor(...): (line 2701)
        # Processing the call arguments (line 2701)
        # Getting the type of 'scale' (line 2701)
        scale_623612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 43), 'scale', False)
        # Processing the call keyword arguments (line 2701)
        # Getting the type of 'True' (line 2701)
        True_623613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 56), 'True', False)
        keyword_623614 = True_623613
        kwargs_623615 = {'lower': keyword_623614}
        # Getting the type of 'scipy' (line 2701)
        scipy_623609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 19), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2701)
        linalg_623610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2701, 19), scipy_623609, 'linalg')
        # Obtaining the member 'cho_factor' of a type (line 2701)
        cho_factor_623611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2701, 19), linalg_623610, 'cho_factor')
        # Calling cho_factor(args, kwargs) (line 2701)
        cho_factor_call_result_623616 = invoke(stypy.reporting.localization.Localization(__file__, 2701, 19), cho_factor_623611, *[scale_623612], **kwargs_623615)
        
        # Obtaining the member '__getitem__' of a type (line 2701)
        getitem___623617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2701, 8), cho_factor_call_result_623616, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2701)
        subscript_call_result_623618 = invoke(stypy.reporting.localization.Localization(__file__, 2701, 8), getitem___623617, int_623608)
        
        # Assigning a type to the variable 'tuple_var_assignment_618670' (line 2701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2701, 8), 'tuple_var_assignment_618670', subscript_call_result_623618)
        
        # Assigning a Name to a Name (line 2701):
        # Getting the type of 'tuple_var_assignment_618669' (line 2701)
        tuple_var_assignment_618669_623619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 8), 'tuple_var_assignment_618669')
        # Assigning a type to the variable 'L' (line 2701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2701, 8), 'L', tuple_var_assignment_618669_623619)
        
        # Assigning a Name to a Name (line 2701):
        # Getting the type of 'tuple_var_assignment_618670' (line 2701)
        tuple_var_assignment_618670_623620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 8), 'tuple_var_assignment_618670')
        # Assigning a type to the variable 'lower' (line 2701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2701, 11), 'lower', tuple_var_assignment_618670_623620)
        
        # Assigning a Call to a Name (line 2702):
        
        # Assigning a Call to a Name (line 2702):
        
        # Call to cho_solve(...): (line 2702)
        # Processing the call arguments (line 2702)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2702)
        tuple_623624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2702, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2702)
        # Adding element type (line 2702)
        # Getting the type of 'L' (line 2702)
        L_623625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 44), 'L', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2702, 44), tuple_623624, L_623625)
        # Adding element type (line 2702)
        # Getting the type of 'lower' (line 2702)
        lower_623626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 47), 'lower', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2702, 44), tuple_623624, lower_623626)
        
        # Getting the type of 'eye' (line 2702)
        eye_623627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 55), 'eye', False)
        # Processing the call keyword arguments (line 2702)
        kwargs_623628 = {}
        # Getting the type of 'scipy' (line 2702)
        scipy_623621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 20), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2702)
        linalg_623622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2702, 20), scipy_623621, 'linalg')
        # Obtaining the member 'cho_solve' of a type (line 2702)
        cho_solve_623623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2702, 20), linalg_623622, 'cho_solve')
        # Calling cho_solve(args, kwargs) (line 2702)
        cho_solve_call_result_623629 = invoke(stypy.reporting.localization.Localization(__file__, 2702, 20), cho_solve_623623, *[tuple_623624, eye_623627], **kwargs_623628)
        
        # Assigning a type to the variable 'inv_scale' (line 2702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2702, 8), 'inv_scale', cho_solve_call_result_623629)
        
        # Assigning a Call to a Name (line 2704):
        
        # Assigning a Call to a Name (line 2704):
        
        # Call to cholesky(...): (line 2704)
        # Processing the call arguments (line 2704)
        # Getting the type of 'inv_scale' (line 2704)
        inv_scale_623633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 34), 'inv_scale', False)
        # Processing the call keyword arguments (line 2704)
        # Getting the type of 'True' (line 2704)
        True_623634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 51), 'True', False)
        keyword_623635 = True_623634
        kwargs_623636 = {'lower': keyword_623635}
        # Getting the type of 'scipy' (line 2704)
        scipy_623630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 12), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2704)
        linalg_623631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2704, 12), scipy_623630, 'linalg')
        # Obtaining the member 'cholesky' of a type (line 2704)
        cholesky_623632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2704, 12), linalg_623631, 'cholesky')
        # Calling cholesky(args, kwargs) (line 2704)
        cholesky_call_result_623637 = invoke(stypy.reporting.localization.Localization(__file__, 2704, 12), cholesky_623632, *[inv_scale_623633], **kwargs_623636)
        
        # Assigning a type to the variable 'C' (line 2704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2704, 8), 'C', cholesky_call_result_623637)
        
        # Assigning a Call to a Name (line 2706):
        
        # Assigning a Call to a Name (line 2706):
        
        # Call to _rvs(...): (line 2706)
        # Processing the call arguments (line 2706)
        # Getting the type of 'n' (line 2706)
        n_623640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 24), 'n', False)
        # Getting the type of 'shape' (line 2706)
        shape_623641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 27), 'shape', False)
        # Getting the type of 'dim' (line 2706)
        dim_623642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 34), 'dim', False)
        # Getting the type of 'df' (line 2706)
        df_623643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 39), 'df', False)
        # Getting the type of 'C' (line 2706)
        C_623644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 43), 'C', False)
        # Getting the type of 'random_state' (line 2706)
        random_state_623645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 46), 'random_state', False)
        # Processing the call keyword arguments (line 2706)
        kwargs_623646 = {}
        # Getting the type of 'self' (line 2706)
        self_623638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 14), 'self', False)
        # Obtaining the member '_rvs' of a type (line 2706)
        _rvs_623639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2706, 14), self_623638, '_rvs')
        # Calling _rvs(args, kwargs) (line 2706)
        _rvs_call_result_623647 = invoke(stypy.reporting.localization.Localization(__file__, 2706, 14), _rvs_623639, *[n_623640, shape_623641, dim_623642, df_623643, C_623644, random_state_623645], **kwargs_623646)
        
        # Assigning a type to the variable 'out' (line 2706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2706, 8), 'out', _rvs_call_result_623647)
        
        # Call to _squeeze_output(...): (line 2708)
        # Processing the call arguments (line 2708)
        # Getting the type of 'out' (line 2708)
        out_623649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 31), 'out', False)
        # Processing the call keyword arguments (line 2708)
        kwargs_623650 = {}
        # Getting the type of '_squeeze_output' (line 2708)
        _squeeze_output_623648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2708)
        _squeeze_output_call_result_623651 = invoke(stypy.reporting.localization.Localization(__file__, 2708, 15), _squeeze_output_623648, *[out_623649], **kwargs_623650)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2708, 8), 'stypy_return_type', _squeeze_output_call_result_623651)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 2674)
        stypy_return_type_623652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623652)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_623652


    @norecursion
    def entropy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'entropy'
        module_type_store = module_type_store.open_function_context('entropy', 2710, 4, False)
        # Assigning a type to the variable 'self' (line 2711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2711, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_gen.entropy.__dict__.__setitem__('stypy_localization', localization)
        invwishart_gen.entropy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_gen.entropy.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_gen.entropy.__dict__.__setitem__('stypy_function_name', 'invwishart_gen.entropy')
        invwishart_gen.entropy.__dict__.__setitem__('stypy_param_names_list', [])
        invwishart_gen.entropy.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_gen.entropy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_gen.entropy.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_gen.entropy.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_gen.entropy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_gen.entropy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_gen.entropy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'entropy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'entropy(...)' code ##################

        # Getting the type of 'AttributeError' (line 2712)
        AttributeError_623653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2712, 14), 'AttributeError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2712, 8), AttributeError_623653, 'raise parameter', BaseException)
        
        # ################# End of 'entropy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'entropy' in the type store
        # Getting the type of 'stypy_return_type' (line 2710)
        stypy_return_type_623654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623654)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'entropy'
        return stypy_return_type_623654


# Assigning a type to the variable 'invwishart_gen' (line 2298)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2298, 0), 'invwishart_gen', invwishart_gen)

# Assigning a Call to a Name (line 2714):

# Assigning a Call to a Name (line 2714):

# Call to invwishart_gen(...): (line 2714)
# Processing the call keyword arguments (line 2714)
kwargs_623656 = {}
# Getting the type of 'invwishart_gen' (line 2714)
invwishart_gen_623655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 13), 'invwishart_gen', False)
# Calling invwishart_gen(args, kwargs) (line 2714)
invwishart_gen_call_result_623657 = invoke(stypy.reporting.localization.Localization(__file__, 2714, 13), invwishart_gen_623655, *[], **kwargs_623656)

# Assigning a type to the variable 'invwishart' (line 2714)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2714, 0), 'invwishart', invwishart_gen_call_result_623657)
# Declaration of the 'invwishart_frozen' class
# Getting the type of 'multi_rv_frozen' (line 2716)
multi_rv_frozen_623658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 24), 'multi_rv_frozen')

class invwishart_frozen(multi_rv_frozen_623658, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2717)
        None_623659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 39), 'None')
        defaults = [None_623659]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2717, 4, False)
        # Assigning a type to the variable 'self' (line 2718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2718, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_frozen.__init__', ['df', 'scale', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['df', 'scale', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_623660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2734, (-1)), 'str', '\n        Create a frozen inverse Wishart distribution.\n\n        Parameters\n        ----------\n        df : array_like\n            Degrees of freedom of the distribution\n        scale : array_like\n            Scale matrix of the distribution\n        seed : None or int or np.random.RandomState instance, optional\n            This parameter defines the RandomState object to use for drawing\n            random variates.\n            If None (or np.random), the global np.random state is used.\n            If integer, it is used to seed the local RandomState instance\n            Default is None.\n\n        ')
        
        # Assigning a Call to a Attribute (line 2735):
        
        # Assigning a Call to a Attribute (line 2735):
        
        # Call to invwishart_gen(...): (line 2735)
        # Processing the call arguments (line 2735)
        # Getting the type of 'seed' (line 2735)
        seed_623662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 36), 'seed', False)
        # Processing the call keyword arguments (line 2735)
        kwargs_623663 = {}
        # Getting the type of 'invwishart_gen' (line 2735)
        invwishart_gen_623661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 21), 'invwishart_gen', False)
        # Calling invwishart_gen(args, kwargs) (line 2735)
        invwishart_gen_call_result_623664 = invoke(stypy.reporting.localization.Localization(__file__, 2735, 21), invwishart_gen_623661, *[seed_623662], **kwargs_623663)
        
        # Getting the type of 'self' (line 2735)
        self_623665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 8), 'self')
        # Setting the type of the member '_dist' of a type (line 2735)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2735, 8), self_623665, '_dist', invwishart_gen_call_result_623664)
        
        # Assigning a Call to a Tuple (line 2736):
        
        # Assigning a Subscript to a Name (line 2736):
        
        # Obtaining the type of the subscript
        int_623666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2736, 8), 'int')
        
        # Call to _process_parameters(...): (line 2736)
        # Processing the call arguments (line 2736)
        # Getting the type of 'df' (line 2737)
        df_623670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 12), 'df', False)
        # Getting the type of 'scale' (line 2737)
        scale_623671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 16), 'scale', False)
        # Processing the call keyword arguments (line 2736)
        kwargs_623672 = {}
        # Getting the type of 'self' (line 2736)
        self_623667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 40), 'self', False)
        # Obtaining the member '_dist' of a type (line 2736)
        _dist_623668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 40), self_623667, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 2736)
        _process_parameters_623669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 40), _dist_623668, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2736)
        _process_parameters_call_result_623673 = invoke(stypy.reporting.localization.Localization(__file__, 2736, 40), _process_parameters_623669, *[df_623670, scale_623671], **kwargs_623672)
        
        # Obtaining the member '__getitem__' of a type (line 2736)
        getitem___623674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 8), _process_parameters_call_result_623673, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2736)
        subscript_call_result_623675 = invoke(stypy.reporting.localization.Localization(__file__, 2736, 8), getitem___623674, int_623666)
        
        # Assigning a type to the variable 'tuple_var_assignment_618671' (line 2736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2736, 8), 'tuple_var_assignment_618671', subscript_call_result_623675)
        
        # Assigning a Subscript to a Name (line 2736):
        
        # Obtaining the type of the subscript
        int_623676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2736, 8), 'int')
        
        # Call to _process_parameters(...): (line 2736)
        # Processing the call arguments (line 2736)
        # Getting the type of 'df' (line 2737)
        df_623680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 12), 'df', False)
        # Getting the type of 'scale' (line 2737)
        scale_623681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 16), 'scale', False)
        # Processing the call keyword arguments (line 2736)
        kwargs_623682 = {}
        # Getting the type of 'self' (line 2736)
        self_623677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 40), 'self', False)
        # Obtaining the member '_dist' of a type (line 2736)
        _dist_623678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 40), self_623677, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 2736)
        _process_parameters_623679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 40), _dist_623678, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2736)
        _process_parameters_call_result_623683 = invoke(stypy.reporting.localization.Localization(__file__, 2736, 40), _process_parameters_623679, *[df_623680, scale_623681], **kwargs_623682)
        
        # Obtaining the member '__getitem__' of a type (line 2736)
        getitem___623684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 8), _process_parameters_call_result_623683, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2736)
        subscript_call_result_623685 = invoke(stypy.reporting.localization.Localization(__file__, 2736, 8), getitem___623684, int_623676)
        
        # Assigning a type to the variable 'tuple_var_assignment_618672' (line 2736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2736, 8), 'tuple_var_assignment_618672', subscript_call_result_623685)
        
        # Assigning a Subscript to a Name (line 2736):
        
        # Obtaining the type of the subscript
        int_623686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2736, 8), 'int')
        
        # Call to _process_parameters(...): (line 2736)
        # Processing the call arguments (line 2736)
        # Getting the type of 'df' (line 2737)
        df_623690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 12), 'df', False)
        # Getting the type of 'scale' (line 2737)
        scale_623691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 16), 'scale', False)
        # Processing the call keyword arguments (line 2736)
        kwargs_623692 = {}
        # Getting the type of 'self' (line 2736)
        self_623687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 40), 'self', False)
        # Obtaining the member '_dist' of a type (line 2736)
        _dist_623688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 40), self_623687, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 2736)
        _process_parameters_623689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 40), _dist_623688, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 2736)
        _process_parameters_call_result_623693 = invoke(stypy.reporting.localization.Localization(__file__, 2736, 40), _process_parameters_623689, *[df_623690, scale_623691], **kwargs_623692)
        
        # Obtaining the member '__getitem__' of a type (line 2736)
        getitem___623694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 8), _process_parameters_call_result_623693, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2736)
        subscript_call_result_623695 = invoke(stypy.reporting.localization.Localization(__file__, 2736, 8), getitem___623694, int_623686)
        
        # Assigning a type to the variable 'tuple_var_assignment_618673' (line 2736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2736, 8), 'tuple_var_assignment_618673', subscript_call_result_623695)
        
        # Assigning a Name to a Attribute (line 2736):
        # Getting the type of 'tuple_var_assignment_618671' (line 2736)
        tuple_var_assignment_618671_623696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 8), 'tuple_var_assignment_618671')
        # Getting the type of 'self' (line 2736)
        self_623697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 8), 'self')
        # Setting the type of the member 'dim' of a type (line 2736)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 8), self_623697, 'dim', tuple_var_assignment_618671_623696)
        
        # Assigning a Name to a Attribute (line 2736):
        # Getting the type of 'tuple_var_assignment_618672' (line 2736)
        tuple_var_assignment_618672_623698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 8), 'tuple_var_assignment_618672')
        # Getting the type of 'self' (line 2736)
        self_623699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 18), 'self')
        # Setting the type of the member 'df' of a type (line 2736)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 18), self_623699, 'df', tuple_var_assignment_618672_623698)
        
        # Assigning a Name to a Attribute (line 2736):
        # Getting the type of 'tuple_var_assignment_618673' (line 2736)
        tuple_var_assignment_618673_623700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 8), 'tuple_var_assignment_618673')
        # Getting the type of 'self' (line 2736)
        self_623701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 27), 'self')
        # Setting the type of the member 'scale' of a type (line 2736)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 27), self_623701, 'scale', tuple_var_assignment_618673_623700)
        
        # Assigning a Call to a Tuple (line 2741):
        
        # Assigning a Subscript to a Name (line 2741):
        
        # Obtaining the type of the subscript
        int_623702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2741, 8), 'int')
        
        # Call to cho_factor(...): (line 2741)
        # Processing the call arguments (line 2741)
        # Getting the type of 'self' (line 2741)
        self_623706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 43), 'self', False)
        # Obtaining the member 'scale' of a type (line 2741)
        scale_623707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 43), self_623706, 'scale')
        # Processing the call keyword arguments (line 2741)
        # Getting the type of 'True' (line 2741)
        True_623708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 61), 'True', False)
        keyword_623709 = True_623708
        kwargs_623710 = {'lower': keyword_623709}
        # Getting the type of 'scipy' (line 2741)
        scipy_623703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 19), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2741)
        linalg_623704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 19), scipy_623703, 'linalg')
        # Obtaining the member 'cho_factor' of a type (line 2741)
        cho_factor_623705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 19), linalg_623704, 'cho_factor')
        # Calling cho_factor(args, kwargs) (line 2741)
        cho_factor_call_result_623711 = invoke(stypy.reporting.localization.Localization(__file__, 2741, 19), cho_factor_623705, *[scale_623707], **kwargs_623710)
        
        # Obtaining the member '__getitem__' of a type (line 2741)
        getitem___623712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 8), cho_factor_call_result_623711, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2741)
        subscript_call_result_623713 = invoke(stypy.reporting.localization.Localization(__file__, 2741, 8), getitem___623712, int_623702)
        
        # Assigning a type to the variable 'tuple_var_assignment_618674' (line 2741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 8), 'tuple_var_assignment_618674', subscript_call_result_623713)
        
        # Assigning a Subscript to a Name (line 2741):
        
        # Obtaining the type of the subscript
        int_623714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2741, 8), 'int')
        
        # Call to cho_factor(...): (line 2741)
        # Processing the call arguments (line 2741)
        # Getting the type of 'self' (line 2741)
        self_623718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 43), 'self', False)
        # Obtaining the member 'scale' of a type (line 2741)
        scale_623719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 43), self_623718, 'scale')
        # Processing the call keyword arguments (line 2741)
        # Getting the type of 'True' (line 2741)
        True_623720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 61), 'True', False)
        keyword_623721 = True_623720
        kwargs_623722 = {'lower': keyword_623721}
        # Getting the type of 'scipy' (line 2741)
        scipy_623715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 19), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2741)
        linalg_623716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 19), scipy_623715, 'linalg')
        # Obtaining the member 'cho_factor' of a type (line 2741)
        cho_factor_623717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 19), linalg_623716, 'cho_factor')
        # Calling cho_factor(args, kwargs) (line 2741)
        cho_factor_call_result_623723 = invoke(stypy.reporting.localization.Localization(__file__, 2741, 19), cho_factor_623717, *[scale_623719], **kwargs_623722)
        
        # Obtaining the member '__getitem__' of a type (line 2741)
        getitem___623724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 8), cho_factor_call_result_623723, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2741)
        subscript_call_result_623725 = invoke(stypy.reporting.localization.Localization(__file__, 2741, 8), getitem___623724, int_623714)
        
        # Assigning a type to the variable 'tuple_var_assignment_618675' (line 2741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 8), 'tuple_var_assignment_618675', subscript_call_result_623725)
        
        # Assigning a Name to a Name (line 2741):
        # Getting the type of 'tuple_var_assignment_618674' (line 2741)
        tuple_var_assignment_618674_623726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 8), 'tuple_var_assignment_618674')
        # Assigning a type to the variable 'C' (line 2741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 8), 'C', tuple_var_assignment_618674_623726)
        
        # Assigning a Name to a Name (line 2741):
        # Getting the type of 'tuple_var_assignment_618675' (line 2741)
        tuple_var_assignment_618675_623727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 8), 'tuple_var_assignment_618675')
        # Assigning a type to the variable 'lower' (line 2741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 11), 'lower', tuple_var_assignment_618675_623727)
        
        # Assigning a BinOp to a Attribute (line 2742):
        
        # Assigning a BinOp to a Attribute (line 2742):
        int_623728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2742, 29), 'int')
        
        # Call to sum(...): (line 2742)
        # Processing the call arguments (line 2742)
        
        # Call to log(...): (line 2742)
        # Processing the call arguments (line 2742)
        
        # Call to diagonal(...): (line 2742)
        # Processing the call keyword arguments (line 2742)
        kwargs_623735 = {}
        # Getting the type of 'C' (line 2742)
        C_623733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 47), 'C', False)
        # Obtaining the member 'diagonal' of a type (line 2742)
        diagonal_623734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2742, 47), C_623733, 'diagonal')
        # Calling diagonal(args, kwargs) (line 2742)
        diagonal_call_result_623736 = invoke(stypy.reporting.localization.Localization(__file__, 2742, 47), diagonal_623734, *[], **kwargs_623735)
        
        # Processing the call keyword arguments (line 2742)
        kwargs_623737 = {}
        # Getting the type of 'np' (line 2742)
        np_623731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 40), 'np', False)
        # Obtaining the member 'log' of a type (line 2742)
        log_623732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2742, 40), np_623731, 'log')
        # Calling log(args, kwargs) (line 2742)
        log_call_result_623738 = invoke(stypy.reporting.localization.Localization(__file__, 2742, 40), log_623732, *[diagonal_call_result_623736], **kwargs_623737)
        
        # Processing the call keyword arguments (line 2742)
        kwargs_623739 = {}
        # Getting the type of 'np' (line 2742)
        np_623729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 33), 'np', False)
        # Obtaining the member 'sum' of a type (line 2742)
        sum_623730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2742, 33), np_623729, 'sum')
        # Calling sum(args, kwargs) (line 2742)
        sum_call_result_623740 = invoke(stypy.reporting.localization.Localization(__file__, 2742, 33), sum_623730, *[log_call_result_623738], **kwargs_623739)
        
        # Applying the binary operator '*' (line 2742)
        result_mul_623741 = python_operator(stypy.reporting.localization.Localization(__file__, 2742, 29), '*', int_623728, sum_call_result_623740)
        
        # Getting the type of 'self' (line 2742)
        self_623742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 8), 'self')
        # Setting the type of the member 'log_det_scale' of a type (line 2742)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2742, 8), self_623742, 'log_det_scale', result_mul_623741)
        
        # Assigning a Call to a Name (line 2745):
        
        # Assigning a Call to a Name (line 2745):
        
        # Call to eye(...): (line 2745)
        # Processing the call arguments (line 2745)
        # Getting the type of 'self' (line 2745)
        self_623745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 21), 'self', False)
        # Obtaining the member 'dim' of a type (line 2745)
        dim_623746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2745, 21), self_623745, 'dim')
        # Processing the call keyword arguments (line 2745)
        kwargs_623747 = {}
        # Getting the type of 'np' (line 2745)
        np_623743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 14), 'np', False)
        # Obtaining the member 'eye' of a type (line 2745)
        eye_623744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2745, 14), np_623743, 'eye')
        # Calling eye(args, kwargs) (line 2745)
        eye_call_result_623748 = invoke(stypy.reporting.localization.Localization(__file__, 2745, 14), eye_623744, *[dim_623746], **kwargs_623747)
        
        # Assigning a type to the variable 'eye' (line 2745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2745, 8), 'eye', eye_call_result_623748)
        
        # Assigning a Call to a Attribute (line 2746):
        
        # Assigning a Call to a Attribute (line 2746):
        
        # Call to cho_solve(...): (line 2746)
        # Processing the call arguments (line 2746)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2746)
        tuple_623752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2746, 49), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2746)
        # Adding element type (line 2746)
        # Getting the type of 'C' (line 2746)
        C_623753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 49), 'C', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2746, 49), tuple_623752, C_623753)
        # Adding element type (line 2746)
        # Getting the type of 'lower' (line 2746)
        lower_623754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 52), 'lower', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2746, 49), tuple_623752, lower_623754)
        
        # Getting the type of 'eye' (line 2746)
        eye_623755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 60), 'eye', False)
        # Processing the call keyword arguments (line 2746)
        kwargs_623756 = {}
        # Getting the type of 'scipy' (line 2746)
        scipy_623749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 25), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2746)
        linalg_623750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2746, 25), scipy_623749, 'linalg')
        # Obtaining the member 'cho_solve' of a type (line 2746)
        cho_solve_623751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2746, 25), linalg_623750, 'cho_solve')
        # Calling cho_solve(args, kwargs) (line 2746)
        cho_solve_call_result_623757 = invoke(stypy.reporting.localization.Localization(__file__, 2746, 25), cho_solve_623751, *[tuple_623752, eye_623755], **kwargs_623756)
        
        # Getting the type of 'self' (line 2746)
        self_623758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 8), 'self')
        # Setting the type of the member 'inv_scale' of a type (line 2746)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2746, 8), self_623758, 'inv_scale', cho_solve_call_result_623757)
        
        # Assigning a Call to a Attribute (line 2749):
        
        # Assigning a Call to a Attribute (line 2749):
        
        # Call to cholesky(...): (line 2749)
        # Processing the call arguments (line 2749)
        # Getting the type of 'self' (line 2749)
        self_623762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 39), 'self', False)
        # Obtaining the member 'inv_scale' of a type (line 2749)
        inv_scale_623763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 39), self_623762, 'inv_scale')
        # Processing the call keyword arguments (line 2749)
        # Getting the type of 'True' (line 2749)
        True_623764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 61), 'True', False)
        keyword_623765 = True_623764
        kwargs_623766 = {'lower': keyword_623765}
        # Getting the type of 'scipy' (line 2749)
        scipy_623759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 17), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 2749)
        linalg_623760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 17), scipy_623759, 'linalg')
        # Obtaining the member 'cholesky' of a type (line 2749)
        cholesky_623761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 17), linalg_623760, 'cholesky')
        # Calling cholesky(args, kwargs) (line 2749)
        cholesky_call_result_623767 = invoke(stypy.reporting.localization.Localization(__file__, 2749, 17), cholesky_623761, *[inv_scale_623763], **kwargs_623766)
        
        # Getting the type of 'self' (line 2749)
        self_623768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'self')
        # Setting the type of the member 'C' of a type (line 2749)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 8), self_623768, 'C', cholesky_call_result_623767)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def logpdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'logpdf'
        module_type_store = module_type_store.open_function_context('logpdf', 2751, 4, False)
        # Assigning a type to the variable 'self' (line 2752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2752, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_frozen.logpdf.__dict__.__setitem__('stypy_localization', localization)
        invwishart_frozen.logpdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_frozen.logpdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_frozen.logpdf.__dict__.__setitem__('stypy_function_name', 'invwishart_frozen.logpdf')
        invwishart_frozen.logpdf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        invwishart_frozen.logpdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_frozen.logpdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_frozen.logpdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_frozen.logpdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_frozen.logpdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_frozen.logpdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_frozen.logpdf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpdf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpdf(...)' code ##################

        
        # Assigning a Call to a Name (line 2752):
        
        # Assigning a Call to a Name (line 2752):
        
        # Call to _process_quantiles(...): (line 2752)
        # Processing the call arguments (line 2752)
        # Getting the type of 'x' (line 2752)
        x_623772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 42), 'x', False)
        # Getting the type of 'self' (line 2752)
        self_623773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 45), 'self', False)
        # Obtaining the member 'dim' of a type (line 2752)
        dim_623774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2752, 45), self_623773, 'dim')
        # Processing the call keyword arguments (line 2752)
        kwargs_623775 = {}
        # Getting the type of 'self' (line 2752)
        self_623769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 12), 'self', False)
        # Obtaining the member '_dist' of a type (line 2752)
        _dist_623770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2752, 12), self_623769, '_dist')
        # Obtaining the member '_process_quantiles' of a type (line 2752)
        _process_quantiles_623771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2752, 12), _dist_623770, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 2752)
        _process_quantiles_call_result_623776 = invoke(stypy.reporting.localization.Localization(__file__, 2752, 12), _process_quantiles_623771, *[x_623772, dim_623774], **kwargs_623775)
        
        # Assigning a type to the variable 'x' (line 2752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2752, 8), 'x', _process_quantiles_call_result_623776)
        
        # Assigning a Call to a Name (line 2753):
        
        # Assigning a Call to a Name (line 2753):
        
        # Call to _logpdf(...): (line 2753)
        # Processing the call arguments (line 2753)
        # Getting the type of 'x' (line 2753)
        x_623780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 33), 'x', False)
        # Getting the type of 'self' (line 2753)
        self_623781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 36), 'self', False)
        # Obtaining the member 'dim' of a type (line 2753)
        dim_623782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2753, 36), self_623781, 'dim')
        # Getting the type of 'self' (line 2753)
        self_623783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 46), 'self', False)
        # Obtaining the member 'df' of a type (line 2753)
        df_623784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2753, 46), self_623783, 'df')
        # Getting the type of 'self' (line 2753)
        self_623785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 55), 'self', False)
        # Obtaining the member 'scale' of a type (line 2753)
        scale_623786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2753, 55), self_623785, 'scale')
        # Getting the type of 'self' (line 2754)
        self_623787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 33), 'self', False)
        # Obtaining the member 'log_det_scale' of a type (line 2754)
        log_det_scale_623788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2754, 33), self_623787, 'log_det_scale')
        # Processing the call keyword arguments (line 2753)
        kwargs_623789 = {}
        # Getting the type of 'self' (line 2753)
        self_623777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 2753)
        _dist_623778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2753, 14), self_623777, '_dist')
        # Obtaining the member '_logpdf' of a type (line 2753)
        _logpdf_623779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2753, 14), _dist_623778, '_logpdf')
        # Calling _logpdf(args, kwargs) (line 2753)
        _logpdf_call_result_623790 = invoke(stypy.reporting.localization.Localization(__file__, 2753, 14), _logpdf_623779, *[x_623780, dim_623782, df_623784, scale_623786, log_det_scale_623788], **kwargs_623789)
        
        # Assigning a type to the variable 'out' (line 2753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2753, 8), 'out', _logpdf_call_result_623790)
        
        # Call to _squeeze_output(...): (line 2755)
        # Processing the call arguments (line 2755)
        # Getting the type of 'out' (line 2755)
        out_623792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 31), 'out', False)
        # Processing the call keyword arguments (line 2755)
        kwargs_623793 = {}
        # Getting the type of '_squeeze_output' (line 2755)
        _squeeze_output_623791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2755)
        _squeeze_output_call_result_623794 = invoke(stypy.reporting.localization.Localization(__file__, 2755, 15), _squeeze_output_623791, *[out_623792], **kwargs_623793)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 8), 'stypy_return_type', _squeeze_output_call_result_623794)
        
        # ################# End of 'logpdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpdf' in the type store
        # Getting the type of 'stypy_return_type' (line 2751)
        stypy_return_type_623795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2751, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623795)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpdf'
        return stypy_return_type_623795


    @norecursion
    def pdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pdf'
        module_type_store = module_type_store.open_function_context('pdf', 2757, 4, False)
        # Assigning a type to the variable 'self' (line 2758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2758, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_frozen.pdf.__dict__.__setitem__('stypy_localization', localization)
        invwishart_frozen.pdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_frozen.pdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_frozen.pdf.__dict__.__setitem__('stypy_function_name', 'invwishart_frozen.pdf')
        invwishart_frozen.pdf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        invwishart_frozen.pdf.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_frozen.pdf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_frozen.pdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_frozen.pdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_frozen.pdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_frozen.pdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_frozen.pdf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pdf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pdf(...)' code ##################

        
        # Call to exp(...): (line 2758)
        # Processing the call arguments (line 2758)
        
        # Call to logpdf(...): (line 2758)
        # Processing the call arguments (line 2758)
        # Getting the type of 'x' (line 2758)
        x_623800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2758, 34), 'x', False)
        # Processing the call keyword arguments (line 2758)
        kwargs_623801 = {}
        # Getting the type of 'self' (line 2758)
        self_623798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2758, 22), 'self', False)
        # Obtaining the member 'logpdf' of a type (line 2758)
        logpdf_623799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2758, 22), self_623798, 'logpdf')
        # Calling logpdf(args, kwargs) (line 2758)
        logpdf_call_result_623802 = invoke(stypy.reporting.localization.Localization(__file__, 2758, 22), logpdf_623799, *[x_623800], **kwargs_623801)
        
        # Processing the call keyword arguments (line 2758)
        kwargs_623803 = {}
        # Getting the type of 'np' (line 2758)
        np_623796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2758, 15), 'np', False)
        # Obtaining the member 'exp' of a type (line 2758)
        exp_623797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2758, 15), np_623796, 'exp')
        # Calling exp(args, kwargs) (line 2758)
        exp_call_result_623804 = invoke(stypy.reporting.localization.Localization(__file__, 2758, 15), exp_623797, *[logpdf_call_result_623802], **kwargs_623803)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2758, 8), 'stypy_return_type', exp_call_result_623804)
        
        # ################# End of 'pdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pdf' in the type store
        # Getting the type of 'stypy_return_type' (line 2757)
        stypy_return_type_623805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2757, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623805)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pdf'
        return stypy_return_type_623805


    @norecursion
    def mean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mean'
        module_type_store = module_type_store.open_function_context('mean', 2760, 4, False)
        # Assigning a type to the variable 'self' (line 2761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2761, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_frozen.mean.__dict__.__setitem__('stypy_localization', localization)
        invwishart_frozen.mean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_frozen.mean.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_frozen.mean.__dict__.__setitem__('stypy_function_name', 'invwishart_frozen.mean')
        invwishart_frozen.mean.__dict__.__setitem__('stypy_param_names_list', [])
        invwishart_frozen.mean.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_frozen.mean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_frozen.mean.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_frozen.mean.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_frozen.mean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_frozen.mean.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_frozen.mean', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mean', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mean(...)' code ##################

        
        # Assigning a Call to a Name (line 2761):
        
        # Assigning a Call to a Name (line 2761):
        
        # Call to _mean(...): (line 2761)
        # Processing the call arguments (line 2761)
        # Getting the type of 'self' (line 2761)
        self_623809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 31), 'self', False)
        # Obtaining the member 'dim' of a type (line 2761)
        dim_623810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2761, 31), self_623809, 'dim')
        # Getting the type of 'self' (line 2761)
        self_623811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 41), 'self', False)
        # Obtaining the member 'df' of a type (line 2761)
        df_623812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2761, 41), self_623811, 'df')
        # Getting the type of 'self' (line 2761)
        self_623813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 50), 'self', False)
        # Obtaining the member 'scale' of a type (line 2761)
        scale_623814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2761, 50), self_623813, 'scale')
        # Processing the call keyword arguments (line 2761)
        kwargs_623815 = {}
        # Getting the type of 'self' (line 2761)
        self_623806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 2761)
        _dist_623807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2761, 14), self_623806, '_dist')
        # Obtaining the member '_mean' of a type (line 2761)
        _mean_623808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2761, 14), _dist_623807, '_mean')
        # Calling _mean(args, kwargs) (line 2761)
        _mean_call_result_623816 = invoke(stypy.reporting.localization.Localization(__file__, 2761, 14), _mean_623808, *[dim_623810, df_623812, scale_623814], **kwargs_623815)
        
        # Assigning a type to the variable 'out' (line 2761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2761, 8), 'out', _mean_call_result_623816)
        
        
        # Getting the type of 'out' (line 2762)
        out_623817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 39), 'out')
        # Getting the type of 'None' (line 2762)
        None_623818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 50), 'None')
        # Applying the binary operator 'isnot' (line 2762)
        result_is_not_623819 = python_operator(stypy.reporting.localization.Localization(__file__, 2762, 39), 'isnot', out_623817, None_623818)
        
        # Testing the type of an if expression (line 2762)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2762, 15), result_is_not_623819)
        # SSA begins for if expression (line 2762)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to _squeeze_output(...): (line 2762)
        # Processing the call arguments (line 2762)
        # Getting the type of 'out' (line 2762)
        out_623821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 31), 'out', False)
        # Processing the call keyword arguments (line 2762)
        kwargs_623822 = {}
        # Getting the type of '_squeeze_output' (line 2762)
        _squeeze_output_623820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2762)
        _squeeze_output_call_result_623823 = invoke(stypy.reporting.localization.Localization(__file__, 2762, 15), _squeeze_output_623820, *[out_623821], **kwargs_623822)
        
        # SSA branch for the else part of an if expression (line 2762)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'out' (line 2762)
        out_623824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 60), 'out')
        # SSA join for if expression (line 2762)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_623825 = union_type.UnionType.add(_squeeze_output_call_result_623823, out_623824)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 8), 'stypy_return_type', if_exp_623825)
        
        # ################# End of 'mean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mean' in the type store
        # Getting the type of 'stypy_return_type' (line 2760)
        stypy_return_type_623826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2760, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623826)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mean'
        return stypy_return_type_623826


    @norecursion
    def mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mode'
        module_type_store = module_type_store.open_function_context('mode', 2764, 4, False)
        # Assigning a type to the variable 'self' (line 2765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2765, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_frozen.mode.__dict__.__setitem__('stypy_localization', localization)
        invwishart_frozen.mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_frozen.mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_frozen.mode.__dict__.__setitem__('stypy_function_name', 'invwishart_frozen.mode')
        invwishart_frozen.mode.__dict__.__setitem__('stypy_param_names_list', [])
        invwishart_frozen.mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_frozen.mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_frozen.mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_frozen.mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_frozen.mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_frozen.mode.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_frozen.mode', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mode', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mode(...)' code ##################

        
        # Assigning a Call to a Name (line 2765):
        
        # Assigning a Call to a Name (line 2765):
        
        # Call to _mode(...): (line 2765)
        # Processing the call arguments (line 2765)
        # Getting the type of 'self' (line 2765)
        self_623830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 31), 'self', False)
        # Obtaining the member 'dim' of a type (line 2765)
        dim_623831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2765, 31), self_623830, 'dim')
        # Getting the type of 'self' (line 2765)
        self_623832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 41), 'self', False)
        # Obtaining the member 'df' of a type (line 2765)
        df_623833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2765, 41), self_623832, 'df')
        # Getting the type of 'self' (line 2765)
        self_623834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 50), 'self', False)
        # Obtaining the member 'scale' of a type (line 2765)
        scale_623835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2765, 50), self_623834, 'scale')
        # Processing the call keyword arguments (line 2765)
        kwargs_623836 = {}
        # Getting the type of 'self' (line 2765)
        self_623827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 2765)
        _dist_623828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2765, 14), self_623827, '_dist')
        # Obtaining the member '_mode' of a type (line 2765)
        _mode_623829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2765, 14), _dist_623828, '_mode')
        # Calling _mode(args, kwargs) (line 2765)
        _mode_call_result_623837 = invoke(stypy.reporting.localization.Localization(__file__, 2765, 14), _mode_623829, *[dim_623831, df_623833, scale_623835], **kwargs_623836)
        
        # Assigning a type to the variable 'out' (line 2765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2765, 8), 'out', _mode_call_result_623837)
        
        # Call to _squeeze_output(...): (line 2766)
        # Processing the call arguments (line 2766)
        # Getting the type of 'out' (line 2766)
        out_623839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 31), 'out', False)
        # Processing the call keyword arguments (line 2766)
        kwargs_623840 = {}
        # Getting the type of '_squeeze_output' (line 2766)
        _squeeze_output_623838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2766)
        _squeeze_output_call_result_623841 = invoke(stypy.reporting.localization.Localization(__file__, 2766, 15), _squeeze_output_623838, *[out_623839], **kwargs_623840)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2766, 8), 'stypy_return_type', _squeeze_output_call_result_623841)
        
        # ################# End of 'mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mode' in the type store
        # Getting the type of 'stypy_return_type' (line 2764)
        stypy_return_type_623842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623842)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mode'
        return stypy_return_type_623842


    @norecursion
    def var(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'var'
        module_type_store = module_type_store.open_function_context('var', 2768, 4, False)
        # Assigning a type to the variable 'self' (line 2769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_frozen.var.__dict__.__setitem__('stypy_localization', localization)
        invwishart_frozen.var.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_frozen.var.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_frozen.var.__dict__.__setitem__('stypy_function_name', 'invwishart_frozen.var')
        invwishart_frozen.var.__dict__.__setitem__('stypy_param_names_list', [])
        invwishart_frozen.var.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_frozen.var.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_frozen.var.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_frozen.var.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_frozen.var.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_frozen.var.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_frozen.var', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'var', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'var(...)' code ##################

        
        # Assigning a Call to a Name (line 2769):
        
        # Assigning a Call to a Name (line 2769):
        
        # Call to _var(...): (line 2769)
        # Processing the call arguments (line 2769)
        # Getting the type of 'self' (line 2769)
        self_623846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 30), 'self', False)
        # Obtaining the member 'dim' of a type (line 2769)
        dim_623847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 30), self_623846, 'dim')
        # Getting the type of 'self' (line 2769)
        self_623848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 40), 'self', False)
        # Obtaining the member 'df' of a type (line 2769)
        df_623849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 40), self_623848, 'df')
        # Getting the type of 'self' (line 2769)
        self_623850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 49), 'self', False)
        # Obtaining the member 'scale' of a type (line 2769)
        scale_623851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 49), self_623850, 'scale')
        # Processing the call keyword arguments (line 2769)
        kwargs_623852 = {}
        # Getting the type of 'self' (line 2769)
        self_623843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 2769)
        _dist_623844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 14), self_623843, '_dist')
        # Obtaining the member '_var' of a type (line 2769)
        _var_623845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 14), _dist_623844, '_var')
        # Calling _var(args, kwargs) (line 2769)
        _var_call_result_623853 = invoke(stypy.reporting.localization.Localization(__file__, 2769, 14), _var_623845, *[dim_623847, df_623849, scale_623851], **kwargs_623852)
        
        # Assigning a type to the variable 'out' (line 2769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 8), 'out', _var_call_result_623853)
        
        
        # Getting the type of 'out' (line 2770)
        out_623854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 39), 'out')
        # Getting the type of 'None' (line 2770)
        None_623855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 50), 'None')
        # Applying the binary operator 'isnot' (line 2770)
        result_is_not_623856 = python_operator(stypy.reporting.localization.Localization(__file__, 2770, 39), 'isnot', out_623854, None_623855)
        
        # Testing the type of an if expression (line 2770)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2770, 15), result_is_not_623856)
        # SSA begins for if expression (line 2770)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to _squeeze_output(...): (line 2770)
        # Processing the call arguments (line 2770)
        # Getting the type of 'out' (line 2770)
        out_623858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 31), 'out', False)
        # Processing the call keyword arguments (line 2770)
        kwargs_623859 = {}
        # Getting the type of '_squeeze_output' (line 2770)
        _squeeze_output_623857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2770)
        _squeeze_output_call_result_623860 = invoke(stypy.reporting.localization.Localization(__file__, 2770, 15), _squeeze_output_623857, *[out_623858], **kwargs_623859)
        
        # SSA branch for the else part of an if expression (line 2770)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'out' (line 2770)
        out_623861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 60), 'out')
        # SSA join for if expression (line 2770)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_623862 = union_type.UnionType.add(_squeeze_output_call_result_623860, out_623861)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2770, 8), 'stypy_return_type', if_exp_623862)
        
        # ################# End of 'var(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'var' in the type store
        # Getting the type of 'stypy_return_type' (line 2768)
        stypy_return_type_623863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2768, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623863)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'var'
        return stypy_return_type_623863


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_623864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2772, 23), 'int')
        # Getting the type of 'None' (line 2772)
        None_623865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 39), 'None')
        defaults = [int_623864, None_623865]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 2772, 4, False)
        # Assigning a type to the variable 'self' (line 2773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2773, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_frozen.rvs.__dict__.__setitem__('stypy_localization', localization)
        invwishart_frozen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_frozen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_frozen.rvs.__dict__.__setitem__('stypy_function_name', 'invwishart_frozen.rvs')
        invwishart_frozen.rvs.__dict__.__setitem__('stypy_param_names_list', ['size', 'random_state'])
        invwishart_frozen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_frozen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_frozen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_frozen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_frozen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_frozen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_frozen.rvs', ['size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        
        # Assigning a Call to a Tuple (line 2773):
        
        # Assigning a Subscript to a Name (line 2773):
        
        # Obtaining the type of the subscript
        int_623866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 8), 'int')
        
        # Call to _process_size(...): (line 2773)
        # Processing the call arguments (line 2773)
        # Getting the type of 'size' (line 2773)
        size_623870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 44), 'size', False)
        # Processing the call keyword arguments (line 2773)
        kwargs_623871 = {}
        # Getting the type of 'self' (line 2773)
        self_623867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 19), 'self', False)
        # Obtaining the member '_dist' of a type (line 2773)
        _dist_623868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2773, 19), self_623867, '_dist')
        # Obtaining the member '_process_size' of a type (line 2773)
        _process_size_623869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2773, 19), _dist_623868, '_process_size')
        # Calling _process_size(args, kwargs) (line 2773)
        _process_size_call_result_623872 = invoke(stypy.reporting.localization.Localization(__file__, 2773, 19), _process_size_623869, *[size_623870], **kwargs_623871)
        
        # Obtaining the member '__getitem__' of a type (line 2773)
        getitem___623873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2773, 8), _process_size_call_result_623872, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2773)
        subscript_call_result_623874 = invoke(stypy.reporting.localization.Localization(__file__, 2773, 8), getitem___623873, int_623866)
        
        # Assigning a type to the variable 'tuple_var_assignment_618676' (line 2773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2773, 8), 'tuple_var_assignment_618676', subscript_call_result_623874)
        
        # Assigning a Subscript to a Name (line 2773):
        
        # Obtaining the type of the subscript
        int_623875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 8), 'int')
        
        # Call to _process_size(...): (line 2773)
        # Processing the call arguments (line 2773)
        # Getting the type of 'size' (line 2773)
        size_623879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 44), 'size', False)
        # Processing the call keyword arguments (line 2773)
        kwargs_623880 = {}
        # Getting the type of 'self' (line 2773)
        self_623876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 19), 'self', False)
        # Obtaining the member '_dist' of a type (line 2773)
        _dist_623877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2773, 19), self_623876, '_dist')
        # Obtaining the member '_process_size' of a type (line 2773)
        _process_size_623878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2773, 19), _dist_623877, '_process_size')
        # Calling _process_size(args, kwargs) (line 2773)
        _process_size_call_result_623881 = invoke(stypy.reporting.localization.Localization(__file__, 2773, 19), _process_size_623878, *[size_623879], **kwargs_623880)
        
        # Obtaining the member '__getitem__' of a type (line 2773)
        getitem___623882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2773, 8), _process_size_call_result_623881, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2773)
        subscript_call_result_623883 = invoke(stypy.reporting.localization.Localization(__file__, 2773, 8), getitem___623882, int_623875)
        
        # Assigning a type to the variable 'tuple_var_assignment_618677' (line 2773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2773, 8), 'tuple_var_assignment_618677', subscript_call_result_623883)
        
        # Assigning a Name to a Name (line 2773):
        # Getting the type of 'tuple_var_assignment_618676' (line 2773)
        tuple_var_assignment_618676_623884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 8), 'tuple_var_assignment_618676')
        # Assigning a type to the variable 'n' (line 2773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2773, 8), 'n', tuple_var_assignment_618676_623884)
        
        # Assigning a Name to a Name (line 2773):
        # Getting the type of 'tuple_var_assignment_618677' (line 2773)
        tuple_var_assignment_618677_623885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 8), 'tuple_var_assignment_618677')
        # Assigning a type to the variable 'shape' (line 2773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2773, 11), 'shape', tuple_var_assignment_618677_623885)
        
        # Assigning a Call to a Name (line 2775):
        
        # Assigning a Call to a Name (line 2775):
        
        # Call to _rvs(...): (line 2775)
        # Processing the call arguments (line 2775)
        # Getting the type of 'n' (line 2775)
        n_623889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 30), 'n', False)
        # Getting the type of 'shape' (line 2775)
        shape_623890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 33), 'shape', False)
        # Getting the type of 'self' (line 2775)
        self_623891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 40), 'self', False)
        # Obtaining the member 'dim' of a type (line 2775)
        dim_623892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2775, 40), self_623891, 'dim')
        # Getting the type of 'self' (line 2775)
        self_623893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 50), 'self', False)
        # Obtaining the member 'df' of a type (line 2775)
        df_623894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2775, 50), self_623893, 'df')
        # Getting the type of 'self' (line 2776)
        self_623895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 30), 'self', False)
        # Obtaining the member 'C' of a type (line 2776)
        C_623896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2776, 30), self_623895, 'C')
        # Getting the type of 'random_state' (line 2776)
        random_state_623897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 38), 'random_state', False)
        # Processing the call keyword arguments (line 2775)
        kwargs_623898 = {}
        # Getting the type of 'self' (line 2775)
        self_623886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 14), 'self', False)
        # Obtaining the member '_dist' of a type (line 2775)
        _dist_623887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2775, 14), self_623886, '_dist')
        # Obtaining the member '_rvs' of a type (line 2775)
        _rvs_623888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2775, 14), _dist_623887, '_rvs')
        # Calling _rvs(args, kwargs) (line 2775)
        _rvs_call_result_623899 = invoke(stypy.reporting.localization.Localization(__file__, 2775, 14), _rvs_623888, *[n_623889, shape_623890, dim_623892, df_623894, C_623896, random_state_623897], **kwargs_623898)
        
        # Assigning a type to the variable 'out' (line 2775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2775, 8), 'out', _rvs_call_result_623899)
        
        # Call to _squeeze_output(...): (line 2778)
        # Processing the call arguments (line 2778)
        # Getting the type of 'out' (line 2778)
        out_623901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 31), 'out', False)
        # Processing the call keyword arguments (line 2778)
        kwargs_623902 = {}
        # Getting the type of '_squeeze_output' (line 2778)
        _squeeze_output_623900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 15), '_squeeze_output', False)
        # Calling _squeeze_output(args, kwargs) (line 2778)
        _squeeze_output_call_result_623903 = invoke(stypy.reporting.localization.Localization(__file__, 2778, 15), _squeeze_output_623900, *[out_623901], **kwargs_623902)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2778, 8), 'stypy_return_type', _squeeze_output_call_result_623903)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 2772)
        stypy_return_type_623904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623904)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_623904


    @norecursion
    def entropy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'entropy'
        module_type_store = module_type_store.open_function_context('entropy', 2780, 4, False)
        # Assigning a type to the variable 'self' (line 2781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2781, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        invwishart_frozen.entropy.__dict__.__setitem__('stypy_localization', localization)
        invwishart_frozen.entropy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        invwishart_frozen.entropy.__dict__.__setitem__('stypy_type_store', module_type_store)
        invwishart_frozen.entropy.__dict__.__setitem__('stypy_function_name', 'invwishart_frozen.entropy')
        invwishart_frozen.entropy.__dict__.__setitem__('stypy_param_names_list', [])
        invwishart_frozen.entropy.__dict__.__setitem__('stypy_varargs_param_name', None)
        invwishart_frozen.entropy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        invwishart_frozen.entropy.__dict__.__setitem__('stypy_call_defaults', defaults)
        invwishart_frozen.entropy.__dict__.__setitem__('stypy_call_varargs', varargs)
        invwishart_frozen.entropy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        invwishart_frozen.entropy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'invwishart_frozen.entropy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'entropy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'entropy(...)' code ##################

        # Getting the type of 'AttributeError' (line 2782)
        AttributeError_623905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 14), 'AttributeError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2782, 8), AttributeError_623905, 'raise parameter', BaseException)
        
        # ################# End of 'entropy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'entropy' in the type store
        # Getting the type of 'stypy_return_type' (line 2780)
        stypy_return_type_623906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623906)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'entropy'
        return stypy_return_type_623906


# Assigning a type to the variable 'invwishart_frozen' (line 2716)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2716, 0), 'invwishart_frozen', invwishart_frozen)


# Obtaining an instance of the builtin type 'list' (line 2786)
list_623907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2786, 12), 'list')
# Adding type elements to the builtin type 'list' instance (line 2786)
# Adding element type (line 2786)
str_623908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2786, 13), 'str', 'logpdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 12), list_623907, str_623908)
# Adding element type (line 2786)
str_623909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2786, 23), 'str', 'pdf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 12), list_623907, str_623909)
# Adding element type (line 2786)
str_623910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2786, 30), 'str', 'mean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 12), list_623907, str_623910)
# Adding element type (line 2786)
str_623911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2786, 38), 'str', 'mode')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 12), list_623907, str_623911)
# Adding element type (line 2786)
str_623912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2786, 46), 'str', 'var')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 12), list_623907, str_623912)
# Adding element type (line 2786)
str_623913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2786, 53), 'str', 'rvs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 12), list_623907, str_623913)

# Testing the type of a for loop iterable (line 2786)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2786, 0), list_623907)
# Getting the type of the for loop variable (line 2786)
for_loop_var_623914 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2786, 0), list_623907)
# Assigning a type to the variable 'name' (line 2786)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2786, 0), 'name', for_loop_var_623914)
# SSA begins for a for statement (line 2786)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')

# Assigning a Subscript to a Name (line 2787):

# Assigning a Subscript to a Name (line 2787):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 2787)
name_623915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 37), 'name')
# Getting the type of 'invwishart_gen' (line 2787)
invwishart_gen_623916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 13), 'invwishart_gen')
# Obtaining the member '__dict__' of a type (line 2787)
dict___623917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2787, 13), invwishart_gen_623916, '__dict__')
# Obtaining the member '__getitem__' of a type (line 2787)
getitem___623918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2787, 13), dict___623917, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 2787)
subscript_call_result_623919 = invoke(stypy.reporting.localization.Localization(__file__, 2787, 13), getitem___623918, name_623915)

# Assigning a type to the variable 'method' (line 2787)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2787, 4), 'method', subscript_call_result_623919)

# Assigning a Subscript to a Name (line 2788):

# Assigning a Subscript to a Name (line 2788):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 2788)
name_623920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 44), 'name')
# Getting the type of 'wishart_frozen' (line 2788)
wishart_frozen_623921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 20), 'wishart_frozen')
# Obtaining the member '__dict__' of a type (line 2788)
dict___623922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2788, 20), wishart_frozen_623921, '__dict__')
# Obtaining the member '__getitem__' of a type (line 2788)
getitem___623923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2788, 20), dict___623922, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 2788)
subscript_call_result_623924 = invoke(stypy.reporting.localization.Localization(__file__, 2788, 20), getitem___623923, name_623920)

# Assigning a type to the variable 'method_frozen' (line 2788)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2788, 4), 'method_frozen', subscript_call_result_623924)

# Assigning a Call to a Attribute (line 2789):

# Assigning a Call to a Attribute (line 2789):

# Call to docformat(...): (line 2789)
# Processing the call arguments (line 2789)
# Getting the type of 'method' (line 2790)
method_623927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 8), 'method', False)
# Obtaining the member '__doc__' of a type (line 2790)
doc___623928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 8), method_623927, '__doc__')
# Getting the type of 'wishart_docdict_noparams' (line 2790)
wishart_docdict_noparams_623929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 24), 'wishart_docdict_noparams', False)
# Processing the call keyword arguments (line 2789)
kwargs_623930 = {}
# Getting the type of 'doccer' (line 2789)
doccer_623925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 28), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 2789)
docformat_623926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2789, 28), doccer_623925, 'docformat')
# Calling docformat(args, kwargs) (line 2789)
docformat_call_result_623931 = invoke(stypy.reporting.localization.Localization(__file__, 2789, 28), docformat_623926, *[doc___623928, wishart_docdict_noparams_623929], **kwargs_623930)

# Getting the type of 'method_frozen' (line 2789)
method_frozen_623932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 4), 'method_frozen')
# Setting the type of the member '__doc__' of a type (line 2789)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2789, 4), method_frozen_623932, '__doc__', docformat_call_result_623931)

# Assigning a Call to a Attribute (line 2791):

# Assigning a Call to a Attribute (line 2791):

# Call to docformat(...): (line 2791)
# Processing the call arguments (line 2791)
# Getting the type of 'method' (line 2791)
method_623935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 38), 'method', False)
# Obtaining the member '__doc__' of a type (line 2791)
doc___623936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2791, 38), method_623935, '__doc__')
# Getting the type of 'wishart_docdict_params' (line 2791)
wishart_docdict_params_623937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 54), 'wishart_docdict_params', False)
# Processing the call keyword arguments (line 2791)
kwargs_623938 = {}
# Getting the type of 'doccer' (line 2791)
doccer_623933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 21), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 2791)
docformat_623934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2791, 21), doccer_623933, 'docformat')
# Calling docformat(args, kwargs) (line 2791)
docformat_call_result_623939 = invoke(stypy.reporting.localization.Localization(__file__, 2791, 21), docformat_623934, *[doc___623936, wishart_docdict_params_623937], **kwargs_623938)

# Getting the type of 'method' (line 2791)
method_623940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 4), 'method')
# Setting the type of the member '__doc__' of a type (line 2791)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2791, 4), method_623940, '__doc__', docformat_call_result_623939)
# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()


# Assigning a Str to a Name (line 2793):

# Assigning a Str to a Name (line 2793):
str_623941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2798, (-1)), 'str', 'n : int\n    Number of trials\np : array_like\n    Probability of a trial falling into each category; should sum to 1\n')
# Assigning a type to the variable '_multinomial_doc_default_callparams' (line 2793)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2793, 0), '_multinomial_doc_default_callparams', str_623941)

# Assigning a Str to a Name (line 2800):

# Assigning a Str to a Name (line 2800):
str_623942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2805, (-1)), 'str', '`n` should be a positive integer. Each element of `p` should be in the\ninterval :math:`[0,1]` and the elements should sum to 1. If they do not sum to\n1, the last element of the `p` array is not used and is replaced with the\nremaining probability left over from the earlier elements.\n')
# Assigning a type to the variable '_multinomial_doc_callparams_note' (line 2800)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2800, 0), '_multinomial_doc_callparams_note', str_623942)

# Assigning a Str to a Name (line 2807):

# Assigning a Str to a Name (line 2807):
str_623943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2807, 37), 'str', '')
# Assigning a type to the variable '_multinomial_doc_frozen_callparams' (line 2807)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2807, 0), '_multinomial_doc_frozen_callparams', str_623943)

# Assigning a Str to a Name (line 2809):

# Assigning a Str to a Name (line 2809):
str_623944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2810, 4), 'str', 'See class definition for a detailed description of parameters.')
# Assigning a type to the variable '_multinomial_doc_frozen_callparams_note' (line 2809)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2809, 0), '_multinomial_doc_frozen_callparams_note', str_623944)

# Assigning a Dict to a Name (line 2812):

# Assigning a Dict to a Name (line 2812):

# Obtaining an instance of the builtin type 'dict' (line 2812)
dict_623945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2812, 29), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2812)
# Adding element type (key, value) (line 2812)
str_623946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2813, 4), 'str', '_doc_default_callparams')
# Getting the type of '_multinomial_doc_default_callparams' (line 2813)
_multinomial_doc_default_callparams_623947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 31), '_multinomial_doc_default_callparams')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2812, 29), dict_623945, (str_623946, _multinomial_doc_default_callparams_623947))
# Adding element type (key, value) (line 2812)
str_623948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2814, 4), 'str', '_doc_callparams_note')
# Getting the type of '_multinomial_doc_callparams_note' (line 2814)
_multinomial_doc_callparams_note_623949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2814, 28), '_multinomial_doc_callparams_note')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2812, 29), dict_623945, (str_623948, _multinomial_doc_callparams_note_623949))
# Adding element type (key, value) (line 2812)
str_623950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2815, 4), 'str', '_doc_random_state')
# Getting the type of '_doc_random_state' (line 2815)
_doc_random_state_623951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 25), '_doc_random_state')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2812, 29), dict_623945, (str_623950, _doc_random_state_623951))

# Assigning a type to the variable 'multinomial_docdict_params' (line 2812)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2812, 0), 'multinomial_docdict_params', dict_623945)

# Assigning a Dict to a Name (line 2818):

# Assigning a Dict to a Name (line 2818):

# Obtaining an instance of the builtin type 'dict' (line 2818)
dict_623952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2818, 31), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2818)
# Adding element type (key, value) (line 2818)
str_623953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2819, 4), 'str', '_doc_default_callparams')
# Getting the type of '_multinomial_doc_frozen_callparams' (line 2819)
_multinomial_doc_frozen_callparams_623954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 31), '_multinomial_doc_frozen_callparams')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2818, 31), dict_623952, (str_623953, _multinomial_doc_frozen_callparams_623954))
# Adding element type (key, value) (line 2818)
str_623955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2820, 4), 'str', '_doc_callparams_note')
# Getting the type of '_multinomial_doc_frozen_callparams_note' (line 2820)
_multinomial_doc_frozen_callparams_note_623956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 28), '_multinomial_doc_frozen_callparams_note')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2818, 31), dict_623952, (str_623955, _multinomial_doc_frozen_callparams_note_623956))
# Adding element type (key, value) (line 2818)
str_623957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2821, 4), 'str', '_doc_random_state')
# Getting the type of '_doc_random_state' (line 2821)
_doc_random_state_623958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 25), '_doc_random_state')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2818, 31), dict_623952, (str_623957, _doc_random_state_623958))

# Assigning a type to the variable 'multinomial_docdict_noparams' (line 2818)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2818, 0), 'multinomial_docdict_noparams', dict_623952)
# Declaration of the 'multinomial_gen' class
# Getting the type of 'multi_rv_generic' (line 2824)
multi_rv_generic_623959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 22), 'multi_rv_generic')

class multinomial_gen(multi_rv_generic_623959, ):
    str_623960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2924, (-1)), 'str', '\n    A multinomial random variable.\n\n    Methods\n    -------\n    ``pmf(x, n, p)``\n        Probability mass function.\n    ``logpmf(x, n, p)``\n        Log of the probability mass function.\n    ``rvs(n, p, size=1, random_state=None)``\n        Draw random samples from a multinomial distribution.\n    ``entropy(n, p)``\n        Compute the entropy of the multinomial distribution.\n    ``cov(n, p)``\n        Compute the covariance matrix of the multinomial distribution.\n\n    Parameters\n    ----------\n    x : array_like\n        Quantiles, with the last axis of `x` denoting the components.\n    %(_doc_default_callparams)s\n    %(_doc_random_state)s\n\n    Notes\n    -----\n    %(_doc_callparams_note)s\n\n    Alternatively, the object may be called (as a function) to fix the `n` and\n    `p` parameters, returning a "frozen" multinomial random variable:\n\n    The probability mass function for `multinomial` is\n\n    .. math::\n\n        f(x) = \\frac{n!}{x_1! \\cdots x_k!} p_1^{x_1} \\cdots p_k^{x_k},\n\n    supported on :math:`x=(x_1, \\ldots, x_k)` where each :math:`x_i` is a\n    nonnegative integer and their sum is :math:`n`.\n\n    .. versionadded:: 0.19.0\n\n    Examples\n    --------\n\n    >>> from scipy.stats import multinomial\n    >>> rv = multinomial(8, [0.3, 0.2, 0.5])\n    >>> rv.pmf([1, 3, 4])\n    0.042000000000000072\n\n    The multinomial distribution for :math:`k=2` is identical to the\n    corresponding binomial distribution (tiny numerical differences\n    notwithstanding):\n\n    >>> from scipy.stats import binom\n    >>> multinomial.pmf([3, 4], n=7, p=[0.4, 0.6])\n    0.29030399999999973\n    >>> binom.pmf(3, 7, 0.4)\n    0.29030400000000012\n\n    The functions ``pmf``, ``logpmf``, ``entropy``, and ``cov`` support\n    broadcasting, under the convention that the vector parameters (``x`` and\n    ``p``) are interpreted as if each row along the last axis is a single\n    object. For instance:\n\n    >>> multinomial.pmf([[3, 4], [3, 5]], n=[7, 8], p=[.3, .7])\n    array([0.2268945,  0.25412184])\n\n    Here, ``x.shape == (2, 2)``, ``n.shape == (2,)``, and ``p.shape == (2,)``,\n    but following the rules mentioned above they behave as if the rows\n    ``[3, 4]`` and ``[3, 5]`` in ``x`` and ``[.3, .7]`` in ``p`` were a single\n    object, and as if we had ``x.shape = (2,)``, ``n.shape = (2,)``, and\n    ``p.shape = ()``. To obtain the individual elements without broadcasting,\n    we would do this:\n\n    >>> multinomial.pmf([3, 4], n=7, p=[.3, .7])\n    0.2268945\n    >>> multinomial.pmf([3, 5], 8, p=[.3, .7])\n    0.25412184\n\n    This broadcasting also works for ``cov``, where the output objects are\n    square matrices of size ``p.shape[-1]``. For example:\n\n    >>> multinomial.cov([4, 5], [[.3, .7], [.4, .6]])\n    array([[[ 0.84, -0.84],\n            [-0.84,  0.84]],\n           [[ 1.2 , -1.2 ],\n            [-1.2 ,  1.2 ]]])\n\n    In this example, ``n.shape == (2,)`` and ``p.shape == (2, 2)``, and\n    following the rules above, these broadcast as if ``p.shape == (2,)``.\n    Thus the result should also be of shape ``(2,)``, but since each output is\n    a :math:`2 \\times 2` matrix, the result in fact has shape ``(2, 2, 2)``,\n    where ``result[0]`` is equal to ``multinomial.cov(n=4, p=[.3, .7])`` and\n    ``result[1]`` is equal to ``multinomial.cov(n=5, p=[.4, .6])``.\n\n    See also\n    --------\n    scipy.stats.binom : The binomial distribution.\n    numpy.random.multinomial : Sampling from the multinomial distribution.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2926)
        None_623961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 28), 'None')
        defaults = [None_623961]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2926, 4, False)
        # Assigning a type to the variable 'self' (line 2927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2927, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen.__init__', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 2927)
        # Processing the call arguments (line 2927)
        # Getting the type of 'seed' (line 2927)
        seed_623968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 46), 'seed', False)
        # Processing the call keyword arguments (line 2927)
        kwargs_623969 = {}
        
        # Call to super(...): (line 2927)
        # Processing the call arguments (line 2927)
        # Getting the type of 'multinomial_gen' (line 2927)
        multinomial_gen_623963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 14), 'multinomial_gen', False)
        # Getting the type of 'self' (line 2927)
        self_623964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 31), 'self', False)
        # Processing the call keyword arguments (line 2927)
        kwargs_623965 = {}
        # Getting the type of 'super' (line 2927)
        super_623962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 8), 'super', False)
        # Calling super(args, kwargs) (line 2927)
        super_call_result_623966 = invoke(stypy.reporting.localization.Localization(__file__, 2927, 8), super_623962, *[multinomial_gen_623963, self_623964], **kwargs_623965)
        
        # Obtaining the member '__init__' of a type (line 2927)
        init___623967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2927, 8), super_call_result_623966, '__init__')
        # Calling __init__(args, kwargs) (line 2927)
        init___call_result_623970 = invoke(stypy.reporting.localization.Localization(__file__, 2927, 8), init___623967, *[seed_623968], **kwargs_623969)
        
        
        # Assigning a Call to a Attribute (line 2928):
        
        # Assigning a Call to a Attribute (line 2928):
        
        # Call to docformat(...): (line 2929)
        # Processing the call arguments (line 2929)
        # Getting the type of 'self' (line 2929)
        self_623973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2929, 29), 'self', False)
        # Obtaining the member '__doc__' of a type (line 2929)
        doc___623974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2929, 29), self_623973, '__doc__')
        # Getting the type of 'multinomial_docdict_params' (line 2929)
        multinomial_docdict_params_623975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2929, 43), 'multinomial_docdict_params', False)
        # Processing the call keyword arguments (line 2929)
        kwargs_623976 = {}
        # Getting the type of 'doccer' (line 2929)
        doccer_623971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2929, 12), 'doccer', False)
        # Obtaining the member 'docformat' of a type (line 2929)
        docformat_623972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2929, 12), doccer_623971, 'docformat')
        # Calling docformat(args, kwargs) (line 2929)
        docformat_call_result_623977 = invoke(stypy.reporting.localization.Localization(__file__, 2929, 12), docformat_623972, *[doc___623974, multinomial_docdict_params_623975], **kwargs_623976)
        
        # Getting the type of 'self' (line 2928)
        self_623978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 2928)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2928, 8), self_623978, '__doc__', docformat_call_result_623977)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2931)
        None_623979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 34), 'None')
        defaults = [None_623979]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 2931, 4, False)
        # Assigning a type to the variable 'self' (line 2932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2932, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_gen.__call__.__dict__.__setitem__('stypy_localization', localization)
        multinomial_gen.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_gen.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_gen.__call__.__dict__.__setitem__('stypy_function_name', 'multinomial_gen.__call__')
        multinomial_gen.__call__.__dict__.__setitem__('stypy_param_names_list', ['n', 'p', 'seed'])
        multinomial_gen.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_gen.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_gen.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_gen.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_gen.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_gen.__call__.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen.__call__', ['n', 'p', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['n', 'p', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_623980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2936, (-1)), 'str', '\n        Create a frozen multinomial distribution.\n\n        See `multinomial_frozen` for more information.\n        ')
        
        # Call to multinomial_frozen(...): (line 2937)
        # Processing the call arguments (line 2937)
        # Getting the type of 'n' (line 2937)
        n_623982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2937, 34), 'n', False)
        # Getting the type of 'p' (line 2937)
        p_623983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2937, 37), 'p', False)
        # Getting the type of 'seed' (line 2937)
        seed_623984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2937, 40), 'seed', False)
        # Processing the call keyword arguments (line 2937)
        kwargs_623985 = {}
        # Getting the type of 'multinomial_frozen' (line 2937)
        multinomial_frozen_623981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2937, 15), 'multinomial_frozen', False)
        # Calling multinomial_frozen(args, kwargs) (line 2937)
        multinomial_frozen_call_result_623986 = invoke(stypy.reporting.localization.Localization(__file__, 2937, 15), multinomial_frozen_623981, *[n_623982, p_623983, seed_623984], **kwargs_623985)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2937, 8), 'stypy_return_type', multinomial_frozen_call_result_623986)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 2931)
        stypy_return_type_623987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_623987)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_623987


    @norecursion
    def _process_parameters(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_parameters'
        module_type_store = module_type_store.open_function_context('_process_parameters', 2939, 4, False)
        # Assigning a type to the variable 'self' (line 2940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2940, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_gen._process_parameters.__dict__.__setitem__('stypy_localization', localization)
        multinomial_gen._process_parameters.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_gen._process_parameters.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_gen._process_parameters.__dict__.__setitem__('stypy_function_name', 'multinomial_gen._process_parameters')
        multinomial_gen._process_parameters.__dict__.__setitem__('stypy_param_names_list', ['n', 'p'])
        multinomial_gen._process_parameters.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_gen._process_parameters.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_gen._process_parameters.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_gen._process_parameters.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_gen._process_parameters.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_gen._process_parameters.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen._process_parameters', ['n', 'p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_parameters', localization, ['n', 'p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_parameters(...)' code ##################

        str_623988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2945, (-1)), 'str', '\n        Return: n_, p_, npcond.\n\n        n_ and p_ are arrays of the correct shape; npcond is a boolean array\n        flagging values out of the domain.\n       ')
        
        # Assigning a Call to a Name (line 2946):
        
        # Assigning a Call to a Name (line 2946):
        
        # Call to array(...): (line 2946)
        # Processing the call arguments (line 2946)
        # Getting the type of 'p' (line 2946)
        p_623991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 21), 'p', False)
        # Processing the call keyword arguments (line 2946)
        # Getting the type of 'np' (line 2946)
        np_623992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 30), 'np', False)
        # Obtaining the member 'float64' of a type (line 2946)
        float64_623993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2946, 30), np_623992, 'float64')
        keyword_623994 = float64_623993
        # Getting the type of 'True' (line 2946)
        True_623995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 47), 'True', False)
        keyword_623996 = True_623995
        kwargs_623997 = {'dtype': keyword_623994, 'copy': keyword_623996}
        # Getting the type of 'np' (line 2946)
        np_623989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 2946)
        array_623990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2946, 12), np_623989, 'array')
        # Calling array(args, kwargs) (line 2946)
        array_call_result_623998 = invoke(stypy.reporting.localization.Localization(__file__, 2946, 12), array_623990, *[p_623991], **kwargs_623997)
        
        # Assigning a type to the variable 'p' (line 2946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2946, 8), 'p', array_call_result_623998)
        
        # Assigning a BinOp to a Subscript (line 2947):
        
        # Assigning a BinOp to a Subscript (line 2947):
        float_623999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 20), 'float')
        
        # Call to sum(...): (line 2947)
        # Processing the call keyword arguments (line 2947)
        int_624007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 45), 'int')
        keyword_624008 = int_624007
        kwargs_624009 = {'axis': keyword_624008}
        
        # Obtaining the type of the subscript
        Ellipsis_624000 = Ellipsis
        int_624001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 32), 'int')
        slice_624002 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2947, 25), None, int_624001, None)
        # Getting the type of 'p' (line 2947)
        p_624003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 25), 'p', False)
        # Obtaining the member '__getitem__' of a type (line 2947)
        getitem___624004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2947, 25), p_624003, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2947)
        subscript_call_result_624005 = invoke(stypy.reporting.localization.Localization(__file__, 2947, 25), getitem___624004, (Ellipsis_624000, slice_624002))
        
        # Obtaining the member 'sum' of a type (line 2947)
        sum_624006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2947, 25), subscript_call_result_624005, 'sum')
        # Calling sum(args, kwargs) (line 2947)
        sum_call_result_624010 = invoke(stypy.reporting.localization.Localization(__file__, 2947, 25), sum_624006, *[], **kwargs_624009)
        
        # Applying the binary operator '-' (line 2947)
        result_sub_624011 = python_operator(stypy.reporting.localization.Localization(__file__, 2947, 20), '-', float_623999, sum_call_result_624010)
        
        # Getting the type of 'p' (line 2947)
        p_624012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 8), 'p')
        Ellipsis_624013 = Ellipsis
        int_624014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 14), 'int')
        # Storing an element on a container (line 2947)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2947, 8), p_624012, ((Ellipsis_624013, int_624014), result_sub_624011))
        
        # Assigning a Call to a Name (line 2950):
        
        # Assigning a Call to a Name (line 2950):
        
        # Call to any(...): (line 2950)
        # Processing the call arguments (line 2950)
        
        # Getting the type of 'p' (line 2950)
        p_624017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 23), 'p', False)
        int_624018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2950, 28), 'int')
        # Applying the binary operator '<=' (line 2950)
        result_le_624019 = python_operator(stypy.reporting.localization.Localization(__file__, 2950, 23), '<=', p_624017, int_624018)
        
        # Processing the call keyword arguments (line 2950)
        int_624020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2950, 36), 'int')
        keyword_624021 = int_624020
        kwargs_624022 = {'axis': keyword_624021}
        # Getting the type of 'np' (line 2950)
        np_624015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 16), 'np', False)
        # Obtaining the member 'any' of a type (line 2950)
        any_624016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2950, 16), np_624015, 'any')
        # Calling any(args, kwargs) (line 2950)
        any_call_result_624023 = invoke(stypy.reporting.localization.Localization(__file__, 2950, 16), any_624016, *[result_le_624019], **kwargs_624022)
        
        # Assigning a type to the variable 'pcond' (line 2950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2950, 8), 'pcond', any_call_result_624023)
        
        # Getting the type of 'pcond' (line 2951)
        pcond_624024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 8), 'pcond')
        
        # Call to any(...): (line 2951)
        # Processing the call arguments (line 2951)
        
        # Getting the type of 'p' (line 2951)
        p_624027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 24), 'p', False)
        int_624028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2951, 28), 'int')
        # Applying the binary operator '>' (line 2951)
        result_gt_624029 = python_operator(stypy.reporting.localization.Localization(__file__, 2951, 24), '>', p_624027, int_624028)
        
        # Processing the call keyword arguments (line 2951)
        int_624030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2951, 36), 'int')
        keyword_624031 = int_624030
        kwargs_624032 = {'axis': keyword_624031}
        # Getting the type of 'np' (line 2951)
        np_624025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 17), 'np', False)
        # Obtaining the member 'any' of a type (line 2951)
        any_624026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2951, 17), np_624025, 'any')
        # Calling any(args, kwargs) (line 2951)
        any_call_result_624033 = invoke(stypy.reporting.localization.Localization(__file__, 2951, 17), any_624026, *[result_gt_624029], **kwargs_624032)
        
        # Applying the binary operator '|=' (line 2951)
        result_ior_624034 = python_operator(stypy.reporting.localization.Localization(__file__, 2951, 8), '|=', pcond_624024, any_call_result_624033)
        # Assigning a type to the variable 'pcond' (line 2951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2951, 8), 'pcond', result_ior_624034)
        
        
        # Assigning a Call to a Name (line 2953):
        
        # Assigning a Call to a Name (line 2953):
        
        # Call to array(...): (line 2953)
        # Processing the call arguments (line 2953)
        # Getting the type of 'n' (line 2953)
        n_624037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 21), 'n', False)
        # Processing the call keyword arguments (line 2953)
        # Getting the type of 'np' (line 2953)
        np_624038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 30), 'np', False)
        # Obtaining the member 'int' of a type (line 2953)
        int_624039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2953, 30), np_624038, 'int')
        keyword_624040 = int_624039
        # Getting the type of 'True' (line 2953)
        True_624041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 43), 'True', False)
        keyword_624042 = True_624041
        kwargs_624043 = {'dtype': keyword_624040, 'copy': keyword_624042}
        # Getting the type of 'np' (line 2953)
        np_624035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 2953)
        array_624036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2953, 12), np_624035, 'array')
        # Calling array(args, kwargs) (line 2953)
        array_call_result_624044 = invoke(stypy.reporting.localization.Localization(__file__, 2953, 12), array_624036, *[n_624037], **kwargs_624043)
        
        # Assigning a type to the variable 'n' (line 2953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2953, 8), 'n', array_call_result_624044)
        
        # Assigning a Compare to a Name (line 2956):
        
        # Assigning a Compare to a Name (line 2956):
        
        # Getting the type of 'n' (line 2956)
        n_624045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 16), 'n')
        int_624046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 21), 'int')
        # Applying the binary operator '<=' (line 2956)
        result_le_624047 = python_operator(stypy.reporting.localization.Localization(__file__, 2956, 16), '<=', n_624045, int_624046)
        
        # Assigning a type to the variable 'ncond' (line 2956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2956, 8), 'ncond', result_le_624047)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2958)
        tuple_624048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2958, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2958)
        # Adding element type (line 2958)
        # Getting the type of 'n' (line 2958)
        n_624049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 15), 'n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2958, 15), tuple_624048, n_624049)
        # Adding element type (line 2958)
        # Getting the type of 'p' (line 2958)
        p_624050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 18), 'p')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2958, 15), tuple_624048, p_624050)
        # Adding element type (line 2958)
        # Getting the type of 'ncond' (line 2958)
        ncond_624051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 21), 'ncond')
        # Getting the type of 'pcond' (line 2958)
        pcond_624052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 29), 'pcond')
        # Applying the binary operator '|' (line 2958)
        result_or__624053 = python_operator(stypy.reporting.localization.Localization(__file__, 2958, 21), '|', ncond_624051, pcond_624052)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2958, 15), tuple_624048, result_or__624053)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2958, 8), 'stypy_return_type', tuple_624048)
        
        # ################# End of '_process_parameters(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_parameters' in the type store
        # Getting the type of 'stypy_return_type' (line 2939)
        stypy_return_type_624054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2939, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624054)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_parameters'
        return stypy_return_type_624054


    @norecursion
    def _process_quantiles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_quantiles'
        module_type_store = module_type_store.open_function_context('_process_quantiles', 2960, 4, False)
        # Assigning a type to the variable 'self' (line 2961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2961, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_gen._process_quantiles.__dict__.__setitem__('stypy_localization', localization)
        multinomial_gen._process_quantiles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_gen._process_quantiles.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_gen._process_quantiles.__dict__.__setitem__('stypy_function_name', 'multinomial_gen._process_quantiles')
        multinomial_gen._process_quantiles.__dict__.__setitem__('stypy_param_names_list', ['x', 'n', 'p'])
        multinomial_gen._process_quantiles.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_gen._process_quantiles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_gen._process_quantiles.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_gen._process_quantiles.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_gen._process_quantiles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_gen._process_quantiles.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen._process_quantiles', ['x', 'n', 'p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_quantiles', localization, ['x', 'n', 'p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_quantiles(...)' code ##################

        str_624055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2966, (-1)), 'str', '\n        Return: x_, xcond.\n\n        x_ is an int array; xcond is a boolean array flagging values out of the\n        domain.\n        ')
        
        # Assigning a Call to a Name (line 2967):
        
        # Assigning a Call to a Name (line 2967):
        
        # Call to asarray(...): (line 2967)
        # Processing the call arguments (line 2967)
        # Getting the type of 'x' (line 2967)
        x_624058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 24), 'x', False)
        # Processing the call keyword arguments (line 2967)
        # Getting the type of 'np' (line 2967)
        np_624059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 33), 'np', False)
        # Obtaining the member 'int' of a type (line 2967)
        int_624060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2967, 33), np_624059, 'int')
        keyword_624061 = int_624060
        kwargs_624062 = {'dtype': keyword_624061}
        # Getting the type of 'np' (line 2967)
        np_624056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 13), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2967)
        asarray_624057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2967, 13), np_624056, 'asarray')
        # Calling asarray(args, kwargs) (line 2967)
        asarray_call_result_624063 = invoke(stypy.reporting.localization.Localization(__file__, 2967, 13), asarray_624057, *[x_624058], **kwargs_624062)
        
        # Assigning a type to the variable 'xx' (line 2967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2967, 8), 'xx', asarray_call_result_624063)
        
        
        # Getting the type of 'xx' (line 2969)
        xx_624064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2969, 11), 'xx')
        # Obtaining the member 'ndim' of a type (line 2969)
        ndim_624065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2969, 11), xx_624064, 'ndim')
        int_624066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2969, 22), 'int')
        # Applying the binary operator '==' (line 2969)
        result_eq_624067 = python_operator(stypy.reporting.localization.Localization(__file__, 2969, 11), '==', ndim_624065, int_624066)
        
        # Testing the type of an if condition (line 2969)
        if_condition_624068 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2969, 8), result_eq_624067)
        # Assigning a type to the variable 'if_condition_624068' (line 2969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2969, 8), 'if_condition_624068', if_condition_624068)
        # SSA begins for if statement (line 2969)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2970)
        # Processing the call arguments (line 2970)
        str_624070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2970, 29), 'str', 'x must be an array.')
        # Processing the call keyword arguments (line 2970)
        kwargs_624071 = {}
        # Getting the type of 'ValueError' (line 2970)
        ValueError_624069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2970, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2970)
        ValueError_call_result_624072 = invoke(stypy.reporting.localization.Localization(__file__, 2970, 18), ValueError_624069, *[str_624070], **kwargs_624071)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2970, 12), ValueError_call_result_624072, 'raise parameter', BaseException)
        # SSA join for if statement (line 2969)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xx' (line 2972)
        xx_624073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 11), 'xx')
        # Obtaining the member 'size' of a type (line 2972)
        size_624074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2972, 11), xx_624073, 'size')
        int_624075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2972, 22), 'int')
        # Applying the binary operator '!=' (line 2972)
        result_ne_624076 = python_operator(stypy.reporting.localization.Localization(__file__, 2972, 11), '!=', size_624074, int_624075)
        
        
        
        
        # Obtaining the type of the subscript
        int_624077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2972, 41), 'int')
        # Getting the type of 'xx' (line 2972)
        xx_624078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 32), 'xx')
        # Obtaining the member 'shape' of a type (line 2972)
        shape_624079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2972, 32), xx_624078, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2972)
        getitem___624080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2972, 32), shape_624079, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2972)
        subscript_call_result_624081 = invoke(stypy.reporting.localization.Localization(__file__, 2972, 32), getitem___624080, int_624077)
        
        
        # Obtaining the type of the subscript
        int_624082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2972, 56), 'int')
        # Getting the type of 'p' (line 2972)
        p_624083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 48), 'p')
        # Obtaining the member 'shape' of a type (line 2972)
        shape_624084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2972, 48), p_624083, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2972)
        getitem___624085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2972, 48), shape_624084, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2972)
        subscript_call_result_624086 = invoke(stypy.reporting.localization.Localization(__file__, 2972, 48), getitem___624085, int_624082)
        
        # Applying the binary operator '==' (line 2972)
        result_eq_624087 = python_operator(stypy.reporting.localization.Localization(__file__, 2972, 32), '==', subscript_call_result_624081, subscript_call_result_624086)
        
        # Applying the 'not' unary operator (line 2972)
        result_not__624088 = python_operator(stypy.reporting.localization.Localization(__file__, 2972, 28), 'not', result_eq_624087)
        
        # Applying the binary operator 'and' (line 2972)
        result_and_keyword_624089 = python_operator(stypy.reporting.localization.Localization(__file__, 2972, 11), 'and', result_ne_624076, result_not__624088)
        
        # Testing the type of an if condition (line 2972)
        if_condition_624090 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2972, 8), result_and_keyword_624089)
        # Assigning a type to the variable 'if_condition_624090' (line 2972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2972, 8), 'if_condition_624090', if_condition_624090)
        # SSA begins for if statement (line 2972)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2973)
        # Processing the call arguments (line 2973)
        str_624092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2973, 29), 'str', 'Size of each quantile should be size of p: received %d, but expected %d.')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2974)
        tuple_624093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2974, 51), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2974)
        # Adding element type (line 2974)
        
        # Obtaining the type of the subscript
        int_624094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2974, 60), 'int')
        # Getting the type of 'xx' (line 2974)
        xx_624095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2974, 51), 'xx', False)
        # Obtaining the member 'shape' of a type (line 2974)
        shape_624096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2974, 51), xx_624095, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2974)
        getitem___624097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2974, 51), shape_624096, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2974)
        subscript_call_result_624098 = invoke(stypy.reporting.localization.Localization(__file__, 2974, 51), getitem___624097, int_624094)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2974, 51), tuple_624093, subscript_call_result_624098)
        # Adding element type (line 2974)
        
        # Obtaining the type of the subscript
        int_624099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2974, 73), 'int')
        # Getting the type of 'p' (line 2974)
        p_624100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2974, 65), 'p', False)
        # Obtaining the member 'shape' of a type (line 2974)
        shape_624101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2974, 65), p_624100, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2974)
        getitem___624102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2974, 65), shape_624101, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2974)
        subscript_call_result_624103 = invoke(stypy.reporting.localization.Localization(__file__, 2974, 65), getitem___624102, int_624099)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2974, 51), tuple_624093, subscript_call_result_624103)
        
        # Applying the binary operator '%' (line 2973)
        result_mod_624104 = python_operator(stypy.reporting.localization.Localization(__file__, 2973, 29), '%', str_624092, tuple_624093)
        
        # Processing the call keyword arguments (line 2973)
        kwargs_624105 = {}
        # Getting the type of 'ValueError' (line 2973)
        ValueError_624091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2973, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2973)
        ValueError_call_result_624106 = invoke(stypy.reporting.localization.Localization(__file__, 2973, 18), ValueError_624091, *[result_mod_624104], **kwargs_624105)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2973, 12), ValueError_call_result_624106, 'raise parameter', BaseException)
        # SSA join for if statement (line 2972)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2977):
        
        # Assigning a Call to a Name (line 2977):
        
        # Call to any(...): (line 2977)
        # Processing the call arguments (line 2977)
        
        # Getting the type of 'xx' (line 2977)
        xx_624109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 22), 'xx', False)
        # Getting the type of 'x' (line 2977)
        x_624110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 28), 'x', False)
        # Applying the binary operator '!=' (line 2977)
        result_ne_624111 = python_operator(stypy.reporting.localization.Localization(__file__, 2977, 22), '!=', xx_624109, x_624110)
        
        # Processing the call keyword arguments (line 2977)
        int_624112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2977, 36), 'int')
        keyword_624113 = int_624112
        kwargs_624114 = {'axis': keyword_624113}
        # Getting the type of 'np' (line 2977)
        np_624107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 15), 'np', False)
        # Obtaining the member 'any' of a type (line 2977)
        any_624108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2977, 15), np_624107, 'any')
        # Calling any(args, kwargs) (line 2977)
        any_call_result_624115 = invoke(stypy.reporting.localization.Localization(__file__, 2977, 15), any_624108, *[result_ne_624111], **kwargs_624114)
        
        # Assigning a type to the variable 'cond' (line 2977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2977, 8), 'cond', any_call_result_624115)
        
        # Getting the type of 'cond' (line 2978)
        cond_624116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 8), 'cond')
        
        # Call to any(...): (line 2978)
        # Processing the call arguments (line 2978)
        
        # Getting the type of 'xx' (line 2978)
        xx_624119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 23), 'xx', False)
        int_624120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2978, 28), 'int')
        # Applying the binary operator '<' (line 2978)
        result_lt_624121 = python_operator(stypy.reporting.localization.Localization(__file__, 2978, 23), '<', xx_624119, int_624120)
        
        # Processing the call keyword arguments (line 2978)
        int_624122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2978, 36), 'int')
        keyword_624123 = int_624122
        kwargs_624124 = {'axis': keyword_624123}
        # Getting the type of 'np' (line 2978)
        np_624117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 16), 'np', False)
        # Obtaining the member 'any' of a type (line 2978)
        any_624118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2978, 16), np_624117, 'any')
        # Calling any(args, kwargs) (line 2978)
        any_call_result_624125 = invoke(stypy.reporting.localization.Localization(__file__, 2978, 16), any_624118, *[result_lt_624121], **kwargs_624124)
        
        # Applying the binary operator '|=' (line 2978)
        result_ior_624126 = python_operator(stypy.reporting.localization.Localization(__file__, 2978, 8), '|=', cond_624116, any_call_result_624125)
        # Assigning a type to the variable 'cond' (line 2978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2978, 8), 'cond', result_ior_624126)
        
        
        # Assigning a BinOp to a Name (line 2979):
        
        # Assigning a BinOp to a Name (line 2979):
        # Getting the type of 'cond' (line 2979)
        cond_624127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 15), 'cond')
        
        
        # Call to sum(...): (line 2979)
        # Processing the call arguments (line 2979)
        # Getting the type of 'xx' (line 2979)
        xx_624130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 30), 'xx', False)
        # Processing the call keyword arguments (line 2979)
        int_624131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2979, 39), 'int')
        keyword_624132 = int_624131
        kwargs_624133 = {'axis': keyword_624132}
        # Getting the type of 'np' (line 2979)
        np_624128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 23), 'np', False)
        # Obtaining the member 'sum' of a type (line 2979)
        sum_624129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2979, 23), np_624128, 'sum')
        # Calling sum(args, kwargs) (line 2979)
        sum_call_result_624134 = invoke(stypy.reporting.localization.Localization(__file__, 2979, 23), sum_624129, *[xx_624130], **kwargs_624133)
        
        # Getting the type of 'n' (line 2979)
        n_624135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 46), 'n')
        # Applying the binary operator '!=' (line 2979)
        result_ne_624136 = python_operator(stypy.reporting.localization.Localization(__file__, 2979, 23), '!=', sum_call_result_624134, n_624135)
        
        # Applying the binary operator '|' (line 2979)
        result_or__624137 = python_operator(stypy.reporting.localization.Localization(__file__, 2979, 15), '|', cond_624127, result_ne_624136)
        
        # Assigning a type to the variable 'cond' (line 2979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2979, 8), 'cond', result_or__624137)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2981)
        tuple_624138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2981, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2981)
        # Adding element type (line 2981)
        # Getting the type of 'xx' (line 2981)
        xx_624139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2981, 15), 'xx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2981, 15), tuple_624138, xx_624139)
        # Adding element type (line 2981)
        # Getting the type of 'cond' (line 2981)
        cond_624140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2981, 19), 'cond')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2981, 15), tuple_624138, cond_624140)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2981, 8), 'stypy_return_type', tuple_624138)
        
        # ################# End of '_process_quantiles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_quantiles' in the type store
        # Getting the type of 'stypy_return_type' (line 2960)
        stypy_return_type_624141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2960, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624141)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_quantiles'
        return stypy_return_type_624141


    @norecursion
    def _checkresult(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_checkresult'
        module_type_store = module_type_store.open_function_context('_checkresult', 2983, 4, False)
        # Assigning a type to the variable 'self' (line 2984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2984, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_gen._checkresult.__dict__.__setitem__('stypy_localization', localization)
        multinomial_gen._checkresult.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_gen._checkresult.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_gen._checkresult.__dict__.__setitem__('stypy_function_name', 'multinomial_gen._checkresult')
        multinomial_gen._checkresult.__dict__.__setitem__('stypy_param_names_list', ['result', 'cond', 'bad_value'])
        multinomial_gen._checkresult.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_gen._checkresult.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_gen._checkresult.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_gen._checkresult.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_gen._checkresult.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_gen._checkresult.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen._checkresult', ['result', 'cond', 'bad_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_checkresult', localization, ['result', 'cond', 'bad_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_checkresult(...)' code ##################

        
        # Assigning a Call to a Name (line 2984):
        
        # Assigning a Call to a Name (line 2984):
        
        # Call to asarray(...): (line 2984)
        # Processing the call arguments (line 2984)
        # Getting the type of 'result' (line 2984)
        result_624144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2984, 28), 'result', False)
        # Processing the call keyword arguments (line 2984)
        kwargs_624145 = {}
        # Getting the type of 'np' (line 2984)
        np_624142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2984, 17), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2984)
        asarray_624143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2984, 17), np_624142, 'asarray')
        # Calling asarray(args, kwargs) (line 2984)
        asarray_call_result_624146 = invoke(stypy.reporting.localization.Localization(__file__, 2984, 17), asarray_624143, *[result_624144], **kwargs_624145)
        
        # Assigning a type to the variable 'result' (line 2984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2984, 8), 'result', asarray_call_result_624146)
        
        
        # Getting the type of 'cond' (line 2986)
        cond_624147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 11), 'cond')
        # Obtaining the member 'ndim' of a type (line 2986)
        ndim_624148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2986, 11), cond_624147, 'ndim')
        int_624149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2986, 24), 'int')
        # Applying the binary operator '!=' (line 2986)
        result_ne_624150 = python_operator(stypy.reporting.localization.Localization(__file__, 2986, 11), '!=', ndim_624148, int_624149)
        
        # Testing the type of an if condition (line 2986)
        if_condition_624151 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2986, 8), result_ne_624150)
        # Assigning a type to the variable 'if_condition_624151' (line 2986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2986, 8), 'if_condition_624151', if_condition_624151)
        # SSA begins for if statement (line 2986)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 2987):
        
        # Assigning a Name to a Subscript (line 2987):
        # Getting the type of 'bad_value' (line 2987)
        bad_value_624152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 27), 'bad_value')
        # Getting the type of 'result' (line 2987)
        result_624153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 12), 'result')
        # Getting the type of 'cond' (line 2987)
        cond_624154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 19), 'cond')
        # Storing an element on a container (line 2987)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2987, 12), result_624153, (cond_624154, bad_value_624152))
        # SSA branch for the else part of an if statement (line 2986)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'cond' (line 2988)
        cond_624155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2988, 13), 'cond')
        # Testing the type of an if condition (line 2988)
        if_condition_624156 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2988, 13), cond_624155)
        # Assigning a type to the variable 'if_condition_624156' (line 2988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2988, 13), 'if_condition_624156', if_condition_624156)
        # SSA begins for if statement (line 2988)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'result' (line 2989)
        result_624157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2989, 15), 'result')
        # Obtaining the member 'ndim' of a type (line 2989)
        ndim_624158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2989, 15), result_624157, 'ndim')
        int_624159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2989, 30), 'int')
        # Applying the binary operator '==' (line 2989)
        result_eq_624160 = python_operator(stypy.reporting.localization.Localization(__file__, 2989, 15), '==', ndim_624158, int_624159)
        
        # Testing the type of an if condition (line 2989)
        if_condition_624161 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2989, 12), result_eq_624160)
        # Assigning a type to the variable 'if_condition_624161' (line 2989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2989, 12), 'if_condition_624161', if_condition_624161)
        # SSA begins for if statement (line 2989)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'bad_value' (line 2990)
        bad_value_624162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 23), 'bad_value')
        # Assigning a type to the variable 'stypy_return_type' (line 2990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2990, 16), 'stypy_return_type', bad_value_624162)
        # SSA join for if statement (line 2989)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 2991):
        
        # Assigning a Name to a Subscript (line 2991):
        # Getting the type of 'bad_value' (line 2991)
        bad_value_624163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2991, 26), 'bad_value')
        # Getting the type of 'result' (line 2991)
        result_624164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2991, 12), 'result')
        Ellipsis_624165 = Ellipsis
        # Storing an element on a container (line 2991)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2991, 12), result_624164, (Ellipsis_624165, bad_value_624163))
        # SSA join for if statement (line 2988)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2986)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 2992)
        result_624166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 2992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2992, 8), 'stypy_return_type', result_624166)
        
        # ################# End of '_checkresult(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_checkresult' in the type store
        # Getting the type of 'stypy_return_type' (line 2983)
        stypy_return_type_624167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2983, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624167)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_checkresult'
        return stypy_return_type_624167


    @norecursion
    def _logpmf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_logpmf'
        module_type_store = module_type_store.open_function_context('_logpmf', 2994, 4, False)
        # Assigning a type to the variable 'self' (line 2995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2995, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_gen._logpmf.__dict__.__setitem__('stypy_localization', localization)
        multinomial_gen._logpmf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_gen._logpmf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_gen._logpmf.__dict__.__setitem__('stypy_function_name', 'multinomial_gen._logpmf')
        multinomial_gen._logpmf.__dict__.__setitem__('stypy_param_names_list', ['x', 'n', 'p'])
        multinomial_gen._logpmf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_gen._logpmf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_gen._logpmf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_gen._logpmf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_gen._logpmf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_gen._logpmf.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen._logpmf', ['x', 'n', 'p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_logpmf', localization, ['x', 'n', 'p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_logpmf(...)' code ##################

        
        # Call to gammaln(...): (line 2995)
        # Processing the call arguments (line 2995)
        # Getting the type of 'n' (line 2995)
        n_624169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 23), 'n', False)
        int_624170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2995, 25), 'int')
        # Applying the binary operator '+' (line 2995)
        result_add_624171 = python_operator(stypy.reporting.localization.Localization(__file__, 2995, 23), '+', n_624169, int_624170)
        
        # Processing the call keyword arguments (line 2995)
        kwargs_624172 = {}
        # Getting the type of 'gammaln' (line 2995)
        gammaln_624168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 15), 'gammaln', False)
        # Calling gammaln(args, kwargs) (line 2995)
        gammaln_call_result_624173 = invoke(stypy.reporting.localization.Localization(__file__, 2995, 15), gammaln_624168, *[result_add_624171], **kwargs_624172)
        
        
        # Call to sum(...): (line 2995)
        # Processing the call arguments (line 2995)
        
        # Call to xlogy(...): (line 2995)
        # Processing the call arguments (line 2995)
        # Getting the type of 'x' (line 2995)
        x_624177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 43), 'x', False)
        # Getting the type of 'p' (line 2995)
        p_624178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 46), 'p', False)
        # Processing the call keyword arguments (line 2995)
        kwargs_624179 = {}
        # Getting the type of 'xlogy' (line 2995)
        xlogy_624176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 37), 'xlogy', False)
        # Calling xlogy(args, kwargs) (line 2995)
        xlogy_call_result_624180 = invoke(stypy.reporting.localization.Localization(__file__, 2995, 37), xlogy_624176, *[x_624177, p_624178], **kwargs_624179)
        
        
        # Call to gammaln(...): (line 2995)
        # Processing the call arguments (line 2995)
        # Getting the type of 'x' (line 2995)
        x_624182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 59), 'x', False)
        int_624183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2995, 61), 'int')
        # Applying the binary operator '+' (line 2995)
        result_add_624184 = python_operator(stypy.reporting.localization.Localization(__file__, 2995, 59), '+', x_624182, int_624183)
        
        # Processing the call keyword arguments (line 2995)
        kwargs_624185 = {}
        # Getting the type of 'gammaln' (line 2995)
        gammaln_624181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 51), 'gammaln', False)
        # Calling gammaln(args, kwargs) (line 2995)
        gammaln_call_result_624186 = invoke(stypy.reporting.localization.Localization(__file__, 2995, 51), gammaln_624181, *[result_add_624184], **kwargs_624185)
        
        # Applying the binary operator '-' (line 2995)
        result_sub_624187 = python_operator(stypy.reporting.localization.Localization(__file__, 2995, 37), '-', xlogy_call_result_624180, gammaln_call_result_624186)
        
        # Processing the call keyword arguments (line 2995)
        int_624188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2995, 70), 'int')
        keyword_624189 = int_624188
        kwargs_624190 = {'axis': keyword_624189}
        # Getting the type of 'np' (line 2995)
        np_624174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 30), 'np', False)
        # Obtaining the member 'sum' of a type (line 2995)
        sum_624175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2995, 30), np_624174, 'sum')
        # Calling sum(args, kwargs) (line 2995)
        sum_call_result_624191 = invoke(stypy.reporting.localization.Localization(__file__, 2995, 30), sum_624175, *[result_sub_624187], **kwargs_624190)
        
        # Applying the binary operator '+' (line 2995)
        result_add_624192 = python_operator(stypy.reporting.localization.Localization(__file__, 2995, 15), '+', gammaln_call_result_624173, sum_call_result_624191)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2995, 8), 'stypy_return_type', result_add_624192)
        
        # ################# End of '_logpmf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_logpmf' in the type store
        # Getting the type of 'stypy_return_type' (line 2994)
        stypy_return_type_624193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2994, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624193)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_logpmf'
        return stypy_return_type_624193


    @norecursion
    def logpmf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'logpmf'
        module_type_store = module_type_store.open_function_context('logpmf', 2997, 4, False)
        # Assigning a type to the variable 'self' (line 2998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2998, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_gen.logpmf.__dict__.__setitem__('stypy_localization', localization)
        multinomial_gen.logpmf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_gen.logpmf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_gen.logpmf.__dict__.__setitem__('stypy_function_name', 'multinomial_gen.logpmf')
        multinomial_gen.logpmf.__dict__.__setitem__('stypy_param_names_list', ['x', 'n', 'p'])
        multinomial_gen.logpmf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_gen.logpmf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_gen.logpmf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_gen.logpmf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_gen.logpmf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_gen.logpmf.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen.logpmf', ['x', 'n', 'p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpmf', localization, ['x', 'n', 'p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpmf(...)' code ##################

        str_624194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3016, (-1)), 'str', '\n        Log of the Multinomial probability mass function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n            Each quantile must be a symmetric positive definite matrix.\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        logpmf : ndarray or scalar\n            Log of the probability mass function evaluated at `x`\n\n        Notes\n        -----\n        %(_doc_callparams_note)s\n        ')
        
        # Assigning a Call to a Tuple (line 3017):
        
        # Assigning a Subscript to a Name (line 3017):
        
        # Obtaining the type of the subscript
        int_624195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3017, 8), 'int')
        
        # Call to _process_parameters(...): (line 3017)
        # Processing the call arguments (line 3017)
        # Getting the type of 'n' (line 3017)
        n_624198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 48), 'n', False)
        # Getting the type of 'p' (line 3017)
        p_624199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 51), 'p', False)
        # Processing the call keyword arguments (line 3017)
        kwargs_624200 = {}
        # Getting the type of 'self' (line 3017)
        self_624196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3017)
        _process_parameters_624197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 23), self_624196, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3017)
        _process_parameters_call_result_624201 = invoke(stypy.reporting.localization.Localization(__file__, 3017, 23), _process_parameters_624197, *[n_624198, p_624199], **kwargs_624200)
        
        # Obtaining the member '__getitem__' of a type (line 3017)
        getitem___624202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 8), _process_parameters_call_result_624201, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3017)
        subscript_call_result_624203 = invoke(stypy.reporting.localization.Localization(__file__, 3017, 8), getitem___624202, int_624195)
        
        # Assigning a type to the variable 'tuple_var_assignment_618678' (line 3017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 8), 'tuple_var_assignment_618678', subscript_call_result_624203)
        
        # Assigning a Subscript to a Name (line 3017):
        
        # Obtaining the type of the subscript
        int_624204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3017, 8), 'int')
        
        # Call to _process_parameters(...): (line 3017)
        # Processing the call arguments (line 3017)
        # Getting the type of 'n' (line 3017)
        n_624207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 48), 'n', False)
        # Getting the type of 'p' (line 3017)
        p_624208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 51), 'p', False)
        # Processing the call keyword arguments (line 3017)
        kwargs_624209 = {}
        # Getting the type of 'self' (line 3017)
        self_624205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3017)
        _process_parameters_624206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 23), self_624205, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3017)
        _process_parameters_call_result_624210 = invoke(stypy.reporting.localization.Localization(__file__, 3017, 23), _process_parameters_624206, *[n_624207, p_624208], **kwargs_624209)
        
        # Obtaining the member '__getitem__' of a type (line 3017)
        getitem___624211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 8), _process_parameters_call_result_624210, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3017)
        subscript_call_result_624212 = invoke(stypy.reporting.localization.Localization(__file__, 3017, 8), getitem___624211, int_624204)
        
        # Assigning a type to the variable 'tuple_var_assignment_618679' (line 3017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 8), 'tuple_var_assignment_618679', subscript_call_result_624212)
        
        # Assigning a Subscript to a Name (line 3017):
        
        # Obtaining the type of the subscript
        int_624213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3017, 8), 'int')
        
        # Call to _process_parameters(...): (line 3017)
        # Processing the call arguments (line 3017)
        # Getting the type of 'n' (line 3017)
        n_624216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 48), 'n', False)
        # Getting the type of 'p' (line 3017)
        p_624217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 51), 'p', False)
        # Processing the call keyword arguments (line 3017)
        kwargs_624218 = {}
        # Getting the type of 'self' (line 3017)
        self_624214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3017)
        _process_parameters_624215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 23), self_624214, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3017)
        _process_parameters_call_result_624219 = invoke(stypy.reporting.localization.Localization(__file__, 3017, 23), _process_parameters_624215, *[n_624216, p_624217], **kwargs_624218)
        
        # Obtaining the member '__getitem__' of a type (line 3017)
        getitem___624220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 8), _process_parameters_call_result_624219, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3017)
        subscript_call_result_624221 = invoke(stypy.reporting.localization.Localization(__file__, 3017, 8), getitem___624220, int_624213)
        
        # Assigning a type to the variable 'tuple_var_assignment_618680' (line 3017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 8), 'tuple_var_assignment_618680', subscript_call_result_624221)
        
        # Assigning a Name to a Name (line 3017):
        # Getting the type of 'tuple_var_assignment_618678' (line 3017)
        tuple_var_assignment_618678_624222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 8), 'tuple_var_assignment_618678')
        # Assigning a type to the variable 'n' (line 3017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 8), 'n', tuple_var_assignment_618678_624222)
        
        # Assigning a Name to a Name (line 3017):
        # Getting the type of 'tuple_var_assignment_618679' (line 3017)
        tuple_var_assignment_618679_624223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 8), 'tuple_var_assignment_618679')
        # Assigning a type to the variable 'p' (line 3017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 11), 'p', tuple_var_assignment_618679_624223)
        
        # Assigning a Name to a Name (line 3017):
        # Getting the type of 'tuple_var_assignment_618680' (line 3017)
        tuple_var_assignment_618680_624224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 8), 'tuple_var_assignment_618680')
        # Assigning a type to the variable 'npcond' (line 3017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 14), 'npcond', tuple_var_assignment_618680_624224)
        
        # Assigning a Call to a Tuple (line 3018):
        
        # Assigning a Subscript to a Name (line 3018):
        
        # Obtaining the type of the subscript
        int_624225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3018, 8), 'int')
        
        # Call to _process_quantiles(...): (line 3018)
        # Processing the call arguments (line 3018)
        # Getting the type of 'x' (line 3018)
        x_624228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 43), 'x', False)
        # Getting the type of 'n' (line 3018)
        n_624229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 46), 'n', False)
        # Getting the type of 'p' (line 3018)
        p_624230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 49), 'p', False)
        # Processing the call keyword arguments (line 3018)
        kwargs_624231 = {}
        # Getting the type of 'self' (line 3018)
        self_624226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 19), 'self', False)
        # Obtaining the member '_process_quantiles' of a type (line 3018)
        _process_quantiles_624227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3018, 19), self_624226, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 3018)
        _process_quantiles_call_result_624232 = invoke(stypy.reporting.localization.Localization(__file__, 3018, 19), _process_quantiles_624227, *[x_624228, n_624229, p_624230], **kwargs_624231)
        
        # Obtaining the member '__getitem__' of a type (line 3018)
        getitem___624233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3018, 8), _process_quantiles_call_result_624232, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3018)
        subscript_call_result_624234 = invoke(stypy.reporting.localization.Localization(__file__, 3018, 8), getitem___624233, int_624225)
        
        # Assigning a type to the variable 'tuple_var_assignment_618681' (line 3018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3018, 8), 'tuple_var_assignment_618681', subscript_call_result_624234)
        
        # Assigning a Subscript to a Name (line 3018):
        
        # Obtaining the type of the subscript
        int_624235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3018, 8), 'int')
        
        # Call to _process_quantiles(...): (line 3018)
        # Processing the call arguments (line 3018)
        # Getting the type of 'x' (line 3018)
        x_624238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 43), 'x', False)
        # Getting the type of 'n' (line 3018)
        n_624239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 46), 'n', False)
        # Getting the type of 'p' (line 3018)
        p_624240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 49), 'p', False)
        # Processing the call keyword arguments (line 3018)
        kwargs_624241 = {}
        # Getting the type of 'self' (line 3018)
        self_624236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 19), 'self', False)
        # Obtaining the member '_process_quantiles' of a type (line 3018)
        _process_quantiles_624237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3018, 19), self_624236, '_process_quantiles')
        # Calling _process_quantiles(args, kwargs) (line 3018)
        _process_quantiles_call_result_624242 = invoke(stypy.reporting.localization.Localization(__file__, 3018, 19), _process_quantiles_624237, *[x_624238, n_624239, p_624240], **kwargs_624241)
        
        # Obtaining the member '__getitem__' of a type (line 3018)
        getitem___624243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3018, 8), _process_quantiles_call_result_624242, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3018)
        subscript_call_result_624244 = invoke(stypy.reporting.localization.Localization(__file__, 3018, 8), getitem___624243, int_624235)
        
        # Assigning a type to the variable 'tuple_var_assignment_618682' (line 3018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3018, 8), 'tuple_var_assignment_618682', subscript_call_result_624244)
        
        # Assigning a Name to a Name (line 3018):
        # Getting the type of 'tuple_var_assignment_618681' (line 3018)
        tuple_var_assignment_618681_624245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 8), 'tuple_var_assignment_618681')
        # Assigning a type to the variable 'x' (line 3018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3018, 8), 'x', tuple_var_assignment_618681_624245)
        
        # Assigning a Name to a Name (line 3018):
        # Getting the type of 'tuple_var_assignment_618682' (line 3018)
        tuple_var_assignment_618682_624246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 8), 'tuple_var_assignment_618682')
        # Assigning a type to the variable 'xcond' (line 3018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3018, 11), 'xcond', tuple_var_assignment_618682_624246)
        
        # Assigning a Call to a Name (line 3020):
        
        # Assigning a Call to a Name (line 3020):
        
        # Call to _logpmf(...): (line 3020)
        # Processing the call arguments (line 3020)
        # Getting the type of 'x' (line 3020)
        x_624249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 30), 'x', False)
        # Getting the type of 'n' (line 3020)
        n_624250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 33), 'n', False)
        # Getting the type of 'p' (line 3020)
        p_624251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 36), 'p', False)
        # Processing the call keyword arguments (line 3020)
        kwargs_624252 = {}
        # Getting the type of 'self' (line 3020)
        self_624247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 17), 'self', False)
        # Obtaining the member '_logpmf' of a type (line 3020)
        _logpmf_624248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3020, 17), self_624247, '_logpmf')
        # Calling _logpmf(args, kwargs) (line 3020)
        _logpmf_call_result_624253 = invoke(stypy.reporting.localization.Localization(__file__, 3020, 17), _logpmf_624248, *[x_624249, n_624250, p_624251], **kwargs_624252)
        
        # Assigning a type to the variable 'result' (line 3020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3020, 8), 'result', _logpmf_call_result_624253)
        
        # Assigning a BinOp to a Name (line 3024):
        
        # Assigning a BinOp to a Name (line 3024):
        # Getting the type of 'xcond' (line 3024)
        xcond_624254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 17), 'xcond')
        
        # Call to zeros(...): (line 3024)
        # Processing the call arguments (line 3024)
        # Getting the type of 'npcond' (line 3024)
        npcond_624257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 34), 'npcond', False)
        # Obtaining the member 'shape' of a type (line 3024)
        shape_624258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3024, 34), npcond_624257, 'shape')
        # Processing the call keyword arguments (line 3024)
        # Getting the type of 'np' (line 3024)
        np_624259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 54), 'np', False)
        # Obtaining the member 'bool_' of a type (line 3024)
        bool__624260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3024, 54), np_624259, 'bool_')
        keyword_624261 = bool__624260
        kwargs_624262 = {'dtype': keyword_624261}
        # Getting the type of 'np' (line 3024)
        np_624255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 25), 'np', False)
        # Obtaining the member 'zeros' of a type (line 3024)
        zeros_624256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3024, 25), np_624255, 'zeros')
        # Calling zeros(args, kwargs) (line 3024)
        zeros_call_result_624263 = invoke(stypy.reporting.localization.Localization(__file__, 3024, 25), zeros_624256, *[shape_624258], **kwargs_624262)
        
        # Applying the binary operator '|' (line 3024)
        result_or__624264 = python_operator(stypy.reporting.localization.Localization(__file__, 3024, 17), '|', xcond_624254, zeros_call_result_624263)
        
        # Assigning a type to the variable 'xcond_' (line 3024)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3024, 8), 'xcond_', result_or__624264)
        
        # Assigning a Call to a Name (line 3025):
        
        # Assigning a Call to a Name (line 3025):
        
        # Call to _checkresult(...): (line 3025)
        # Processing the call arguments (line 3025)
        # Getting the type of 'result' (line 3025)
        result_624267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 35), 'result', False)
        # Getting the type of 'xcond_' (line 3025)
        xcond__624268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 43), 'xcond_', False)
        # Getting the type of 'np' (line 3025)
        np_624269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 51), 'np', False)
        # Obtaining the member 'NINF' of a type (line 3025)
        NINF_624270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3025, 51), np_624269, 'NINF')
        # Processing the call keyword arguments (line 3025)
        kwargs_624271 = {}
        # Getting the type of 'self' (line 3025)
        self_624265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 17), 'self', False)
        # Obtaining the member '_checkresult' of a type (line 3025)
        _checkresult_624266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3025, 17), self_624265, '_checkresult')
        # Calling _checkresult(args, kwargs) (line 3025)
        _checkresult_call_result_624272 = invoke(stypy.reporting.localization.Localization(__file__, 3025, 17), _checkresult_624266, *[result_624267, xcond__624268, NINF_624270], **kwargs_624271)
        
        # Assigning a type to the variable 'result' (line 3025)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3025, 8), 'result', _checkresult_call_result_624272)
        
        # Assigning a BinOp to a Name (line 3028):
        
        # Assigning a BinOp to a Name (line 3028):
        # Getting the type of 'npcond' (line 3028)
        npcond_624273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 18), 'npcond')
        
        # Call to zeros(...): (line 3028)
        # Processing the call arguments (line 3028)
        # Getting the type of 'xcond' (line 3028)
        xcond_624276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 36), 'xcond', False)
        # Obtaining the member 'shape' of a type (line 3028)
        shape_624277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3028, 36), xcond_624276, 'shape')
        # Processing the call keyword arguments (line 3028)
        # Getting the type of 'np' (line 3028)
        np_624278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 55), 'np', False)
        # Obtaining the member 'bool_' of a type (line 3028)
        bool__624279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3028, 55), np_624278, 'bool_')
        keyword_624280 = bool__624279
        kwargs_624281 = {'dtype': keyword_624280}
        # Getting the type of 'np' (line 3028)
        np_624274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 27), 'np', False)
        # Obtaining the member 'zeros' of a type (line 3028)
        zeros_624275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3028, 27), np_624274, 'zeros')
        # Calling zeros(args, kwargs) (line 3028)
        zeros_call_result_624282 = invoke(stypy.reporting.localization.Localization(__file__, 3028, 27), zeros_624275, *[shape_624277], **kwargs_624281)
        
        # Applying the binary operator '|' (line 3028)
        result_or__624283 = python_operator(stypy.reporting.localization.Localization(__file__, 3028, 18), '|', npcond_624273, zeros_call_result_624282)
        
        # Assigning a type to the variable 'npcond_' (line 3028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3028, 8), 'npcond_', result_or__624283)
        
        # Call to _checkresult(...): (line 3029)
        # Processing the call arguments (line 3029)
        # Getting the type of 'result' (line 3029)
        result_624286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3029, 33), 'result', False)
        # Getting the type of 'npcond_' (line 3029)
        npcond__624287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3029, 41), 'npcond_', False)
        # Getting the type of 'np' (line 3029)
        np_624288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3029, 50), 'np', False)
        # Obtaining the member 'NAN' of a type (line 3029)
        NAN_624289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3029, 50), np_624288, 'NAN')
        # Processing the call keyword arguments (line 3029)
        kwargs_624290 = {}
        # Getting the type of 'self' (line 3029)
        self_624284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3029, 15), 'self', False)
        # Obtaining the member '_checkresult' of a type (line 3029)
        _checkresult_624285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3029, 15), self_624284, '_checkresult')
        # Calling _checkresult(args, kwargs) (line 3029)
        _checkresult_call_result_624291 = invoke(stypy.reporting.localization.Localization(__file__, 3029, 15), _checkresult_624285, *[result_624286, npcond__624287, NAN_624289], **kwargs_624290)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3029, 8), 'stypy_return_type', _checkresult_call_result_624291)
        
        # ################# End of 'logpmf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpmf' in the type store
        # Getting the type of 'stypy_return_type' (line 2997)
        stypy_return_type_624292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2997, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624292)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpmf'
        return stypy_return_type_624292


    @norecursion
    def pmf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pmf'
        module_type_store = module_type_store.open_function_context('pmf', 3031, 4, False)
        # Assigning a type to the variable 'self' (line 3032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3032, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_gen.pmf.__dict__.__setitem__('stypy_localization', localization)
        multinomial_gen.pmf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_gen.pmf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_gen.pmf.__dict__.__setitem__('stypy_function_name', 'multinomial_gen.pmf')
        multinomial_gen.pmf.__dict__.__setitem__('stypy_param_names_list', ['x', 'n', 'p'])
        multinomial_gen.pmf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_gen.pmf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_gen.pmf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_gen.pmf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_gen.pmf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_gen.pmf.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen.pmf', ['x', 'n', 'p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pmf', localization, ['x', 'n', 'p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pmf(...)' code ##################

        str_624293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3050, (-1)), 'str', '\n        Multinomial probability mass function.\n\n        Parameters\n        ----------\n        x : array_like\n            Quantiles, with the last axis of `x` denoting the components.\n            Each quantile must be a symmetric positive definite matrix.\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        pmf : ndarray or scalar\n            Probability density function evaluated at `x`\n\n        Notes\n        -----\n        %(_doc_callparams_note)s\n        ')
        
        # Call to exp(...): (line 3051)
        # Processing the call arguments (line 3051)
        
        # Call to logpmf(...): (line 3051)
        # Processing the call arguments (line 3051)
        # Getting the type of 'x' (line 3051)
        x_624298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 34), 'x', False)
        # Getting the type of 'n' (line 3051)
        n_624299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 37), 'n', False)
        # Getting the type of 'p' (line 3051)
        p_624300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 40), 'p', False)
        # Processing the call keyword arguments (line 3051)
        kwargs_624301 = {}
        # Getting the type of 'self' (line 3051)
        self_624296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 22), 'self', False)
        # Obtaining the member 'logpmf' of a type (line 3051)
        logpmf_624297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3051, 22), self_624296, 'logpmf')
        # Calling logpmf(args, kwargs) (line 3051)
        logpmf_call_result_624302 = invoke(stypy.reporting.localization.Localization(__file__, 3051, 22), logpmf_624297, *[x_624298, n_624299, p_624300], **kwargs_624301)
        
        # Processing the call keyword arguments (line 3051)
        kwargs_624303 = {}
        # Getting the type of 'np' (line 3051)
        np_624294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 15), 'np', False)
        # Obtaining the member 'exp' of a type (line 3051)
        exp_624295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3051, 15), np_624294, 'exp')
        # Calling exp(args, kwargs) (line 3051)
        exp_call_result_624304 = invoke(stypy.reporting.localization.Localization(__file__, 3051, 15), exp_624295, *[logpmf_call_result_624302], **kwargs_624303)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3051, 8), 'stypy_return_type', exp_call_result_624304)
        
        # ################# End of 'pmf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pmf' in the type store
        # Getting the type of 'stypy_return_type' (line 3031)
        stypy_return_type_624305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624305)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pmf'
        return stypy_return_type_624305


    @norecursion
    def mean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mean'
        module_type_store = module_type_store.open_function_context('mean', 3053, 4, False)
        # Assigning a type to the variable 'self' (line 3054)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3054, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_gen.mean.__dict__.__setitem__('stypy_localization', localization)
        multinomial_gen.mean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_gen.mean.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_gen.mean.__dict__.__setitem__('stypy_function_name', 'multinomial_gen.mean')
        multinomial_gen.mean.__dict__.__setitem__('stypy_param_names_list', ['n', 'p'])
        multinomial_gen.mean.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_gen.mean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_gen.mean.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_gen.mean.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_gen.mean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_gen.mean.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen.mean', ['n', 'p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mean', localization, ['n', 'p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mean(...)' code ##################

        str_624306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3065, (-1)), 'str', '\n        Mean of the Multinomial distribution\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        mean : float\n            The mean of the distribution\n        ')
        
        # Assigning a Call to a Tuple (line 3066):
        
        # Assigning a Subscript to a Name (line 3066):
        
        # Obtaining the type of the subscript
        int_624307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3066, 8), 'int')
        
        # Call to _process_parameters(...): (line 3066)
        # Processing the call arguments (line 3066)
        # Getting the type of 'n' (line 3066)
        n_624310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 48), 'n', False)
        # Getting the type of 'p' (line 3066)
        p_624311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 51), 'p', False)
        # Processing the call keyword arguments (line 3066)
        kwargs_624312 = {}
        # Getting the type of 'self' (line 3066)
        self_624308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3066)
        _process_parameters_624309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3066, 23), self_624308, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3066)
        _process_parameters_call_result_624313 = invoke(stypy.reporting.localization.Localization(__file__, 3066, 23), _process_parameters_624309, *[n_624310, p_624311], **kwargs_624312)
        
        # Obtaining the member '__getitem__' of a type (line 3066)
        getitem___624314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3066, 8), _process_parameters_call_result_624313, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3066)
        subscript_call_result_624315 = invoke(stypy.reporting.localization.Localization(__file__, 3066, 8), getitem___624314, int_624307)
        
        # Assigning a type to the variable 'tuple_var_assignment_618683' (line 3066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3066, 8), 'tuple_var_assignment_618683', subscript_call_result_624315)
        
        # Assigning a Subscript to a Name (line 3066):
        
        # Obtaining the type of the subscript
        int_624316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3066, 8), 'int')
        
        # Call to _process_parameters(...): (line 3066)
        # Processing the call arguments (line 3066)
        # Getting the type of 'n' (line 3066)
        n_624319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 48), 'n', False)
        # Getting the type of 'p' (line 3066)
        p_624320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 51), 'p', False)
        # Processing the call keyword arguments (line 3066)
        kwargs_624321 = {}
        # Getting the type of 'self' (line 3066)
        self_624317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3066)
        _process_parameters_624318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3066, 23), self_624317, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3066)
        _process_parameters_call_result_624322 = invoke(stypy.reporting.localization.Localization(__file__, 3066, 23), _process_parameters_624318, *[n_624319, p_624320], **kwargs_624321)
        
        # Obtaining the member '__getitem__' of a type (line 3066)
        getitem___624323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3066, 8), _process_parameters_call_result_624322, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3066)
        subscript_call_result_624324 = invoke(stypy.reporting.localization.Localization(__file__, 3066, 8), getitem___624323, int_624316)
        
        # Assigning a type to the variable 'tuple_var_assignment_618684' (line 3066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3066, 8), 'tuple_var_assignment_618684', subscript_call_result_624324)
        
        # Assigning a Subscript to a Name (line 3066):
        
        # Obtaining the type of the subscript
        int_624325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3066, 8), 'int')
        
        # Call to _process_parameters(...): (line 3066)
        # Processing the call arguments (line 3066)
        # Getting the type of 'n' (line 3066)
        n_624328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 48), 'n', False)
        # Getting the type of 'p' (line 3066)
        p_624329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 51), 'p', False)
        # Processing the call keyword arguments (line 3066)
        kwargs_624330 = {}
        # Getting the type of 'self' (line 3066)
        self_624326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3066)
        _process_parameters_624327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3066, 23), self_624326, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3066)
        _process_parameters_call_result_624331 = invoke(stypy.reporting.localization.Localization(__file__, 3066, 23), _process_parameters_624327, *[n_624328, p_624329], **kwargs_624330)
        
        # Obtaining the member '__getitem__' of a type (line 3066)
        getitem___624332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3066, 8), _process_parameters_call_result_624331, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3066)
        subscript_call_result_624333 = invoke(stypy.reporting.localization.Localization(__file__, 3066, 8), getitem___624332, int_624325)
        
        # Assigning a type to the variable 'tuple_var_assignment_618685' (line 3066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3066, 8), 'tuple_var_assignment_618685', subscript_call_result_624333)
        
        # Assigning a Name to a Name (line 3066):
        # Getting the type of 'tuple_var_assignment_618683' (line 3066)
        tuple_var_assignment_618683_624334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 8), 'tuple_var_assignment_618683')
        # Assigning a type to the variable 'n' (line 3066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3066, 8), 'n', tuple_var_assignment_618683_624334)
        
        # Assigning a Name to a Name (line 3066):
        # Getting the type of 'tuple_var_assignment_618684' (line 3066)
        tuple_var_assignment_618684_624335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 8), 'tuple_var_assignment_618684')
        # Assigning a type to the variable 'p' (line 3066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3066, 11), 'p', tuple_var_assignment_618684_624335)
        
        # Assigning a Name to a Name (line 3066):
        # Getting the type of 'tuple_var_assignment_618685' (line 3066)
        tuple_var_assignment_618685_624336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 8), 'tuple_var_assignment_618685')
        # Assigning a type to the variable 'npcond' (line 3066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3066, 14), 'npcond', tuple_var_assignment_618685_624336)
        
        # Assigning a BinOp to a Name (line 3067):
        
        # Assigning a BinOp to a Name (line 3067):
        
        # Obtaining the type of the subscript
        Ellipsis_624337 = Ellipsis
        # Getting the type of 'np' (line 3067)
        np_624338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3067, 24), 'np')
        # Obtaining the member 'newaxis' of a type (line 3067)
        newaxis_624339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3067, 24), np_624338, 'newaxis')
        # Getting the type of 'n' (line 3067)
        n_624340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3067, 17), 'n')
        # Obtaining the member '__getitem__' of a type (line 3067)
        getitem___624341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3067, 17), n_624340, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3067)
        subscript_call_result_624342 = invoke(stypy.reporting.localization.Localization(__file__, 3067, 17), getitem___624341, (Ellipsis_624337, newaxis_624339))
        
        # Getting the type of 'p' (line 3067)
        p_624343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3067, 36), 'p')
        # Applying the binary operator '*' (line 3067)
        result_mul_624344 = python_operator(stypy.reporting.localization.Localization(__file__, 3067, 17), '*', subscript_call_result_624342, p_624343)
        
        # Assigning a type to the variable 'result' (line 3067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3067, 8), 'result', result_mul_624344)
        
        # Call to _checkresult(...): (line 3068)
        # Processing the call arguments (line 3068)
        # Getting the type of 'result' (line 3068)
        result_624347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3068, 33), 'result', False)
        # Getting the type of 'npcond' (line 3068)
        npcond_624348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3068, 41), 'npcond', False)
        # Getting the type of 'np' (line 3068)
        np_624349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3068, 49), 'np', False)
        # Obtaining the member 'NAN' of a type (line 3068)
        NAN_624350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3068, 49), np_624349, 'NAN')
        # Processing the call keyword arguments (line 3068)
        kwargs_624351 = {}
        # Getting the type of 'self' (line 3068)
        self_624345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3068, 15), 'self', False)
        # Obtaining the member '_checkresult' of a type (line 3068)
        _checkresult_624346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3068, 15), self_624345, '_checkresult')
        # Calling _checkresult(args, kwargs) (line 3068)
        _checkresult_call_result_624352 = invoke(stypy.reporting.localization.Localization(__file__, 3068, 15), _checkresult_624346, *[result_624347, npcond_624348, NAN_624350], **kwargs_624351)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3068, 8), 'stypy_return_type', _checkresult_call_result_624352)
        
        # ################# End of 'mean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mean' in the type store
        # Getting the type of 'stypy_return_type' (line 3053)
        stypy_return_type_624353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624353)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mean'
        return stypy_return_type_624353


    @norecursion
    def cov(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cov'
        module_type_store = module_type_store.open_function_context('cov', 3070, 4, False)
        # Assigning a type to the variable 'self' (line 3071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3071, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_gen.cov.__dict__.__setitem__('stypy_localization', localization)
        multinomial_gen.cov.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_gen.cov.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_gen.cov.__dict__.__setitem__('stypy_function_name', 'multinomial_gen.cov')
        multinomial_gen.cov.__dict__.__setitem__('stypy_param_names_list', ['n', 'p'])
        multinomial_gen.cov.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_gen.cov.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_gen.cov.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_gen.cov.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_gen.cov.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_gen.cov.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen.cov', ['n', 'p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cov', localization, ['n', 'p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cov(...)' code ##################

        str_624354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3082, (-1)), 'str', '\n        Covariance matrix of the multinomial distribution.\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        cov : ndarray\n            The covariance matrix of the distribution\n        ')
        
        # Assigning a Call to a Tuple (line 3083):
        
        # Assigning a Subscript to a Name (line 3083):
        
        # Obtaining the type of the subscript
        int_624355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3083, 8), 'int')
        
        # Call to _process_parameters(...): (line 3083)
        # Processing the call arguments (line 3083)
        # Getting the type of 'n' (line 3083)
        n_624358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 48), 'n', False)
        # Getting the type of 'p' (line 3083)
        p_624359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 51), 'p', False)
        # Processing the call keyword arguments (line 3083)
        kwargs_624360 = {}
        # Getting the type of 'self' (line 3083)
        self_624356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3083)
        _process_parameters_624357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3083, 23), self_624356, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3083)
        _process_parameters_call_result_624361 = invoke(stypy.reporting.localization.Localization(__file__, 3083, 23), _process_parameters_624357, *[n_624358, p_624359], **kwargs_624360)
        
        # Obtaining the member '__getitem__' of a type (line 3083)
        getitem___624362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3083, 8), _process_parameters_call_result_624361, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3083)
        subscript_call_result_624363 = invoke(stypy.reporting.localization.Localization(__file__, 3083, 8), getitem___624362, int_624355)
        
        # Assigning a type to the variable 'tuple_var_assignment_618686' (line 3083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3083, 8), 'tuple_var_assignment_618686', subscript_call_result_624363)
        
        # Assigning a Subscript to a Name (line 3083):
        
        # Obtaining the type of the subscript
        int_624364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3083, 8), 'int')
        
        # Call to _process_parameters(...): (line 3083)
        # Processing the call arguments (line 3083)
        # Getting the type of 'n' (line 3083)
        n_624367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 48), 'n', False)
        # Getting the type of 'p' (line 3083)
        p_624368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 51), 'p', False)
        # Processing the call keyword arguments (line 3083)
        kwargs_624369 = {}
        # Getting the type of 'self' (line 3083)
        self_624365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3083)
        _process_parameters_624366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3083, 23), self_624365, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3083)
        _process_parameters_call_result_624370 = invoke(stypy.reporting.localization.Localization(__file__, 3083, 23), _process_parameters_624366, *[n_624367, p_624368], **kwargs_624369)
        
        # Obtaining the member '__getitem__' of a type (line 3083)
        getitem___624371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3083, 8), _process_parameters_call_result_624370, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3083)
        subscript_call_result_624372 = invoke(stypy.reporting.localization.Localization(__file__, 3083, 8), getitem___624371, int_624364)
        
        # Assigning a type to the variable 'tuple_var_assignment_618687' (line 3083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3083, 8), 'tuple_var_assignment_618687', subscript_call_result_624372)
        
        # Assigning a Subscript to a Name (line 3083):
        
        # Obtaining the type of the subscript
        int_624373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3083, 8), 'int')
        
        # Call to _process_parameters(...): (line 3083)
        # Processing the call arguments (line 3083)
        # Getting the type of 'n' (line 3083)
        n_624376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 48), 'n', False)
        # Getting the type of 'p' (line 3083)
        p_624377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 51), 'p', False)
        # Processing the call keyword arguments (line 3083)
        kwargs_624378 = {}
        # Getting the type of 'self' (line 3083)
        self_624374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3083)
        _process_parameters_624375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3083, 23), self_624374, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3083)
        _process_parameters_call_result_624379 = invoke(stypy.reporting.localization.Localization(__file__, 3083, 23), _process_parameters_624375, *[n_624376, p_624377], **kwargs_624378)
        
        # Obtaining the member '__getitem__' of a type (line 3083)
        getitem___624380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3083, 8), _process_parameters_call_result_624379, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3083)
        subscript_call_result_624381 = invoke(stypy.reporting.localization.Localization(__file__, 3083, 8), getitem___624380, int_624373)
        
        # Assigning a type to the variable 'tuple_var_assignment_618688' (line 3083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3083, 8), 'tuple_var_assignment_618688', subscript_call_result_624381)
        
        # Assigning a Name to a Name (line 3083):
        # Getting the type of 'tuple_var_assignment_618686' (line 3083)
        tuple_var_assignment_618686_624382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 8), 'tuple_var_assignment_618686')
        # Assigning a type to the variable 'n' (line 3083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3083, 8), 'n', tuple_var_assignment_618686_624382)
        
        # Assigning a Name to a Name (line 3083):
        # Getting the type of 'tuple_var_assignment_618687' (line 3083)
        tuple_var_assignment_618687_624383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 8), 'tuple_var_assignment_618687')
        # Assigning a type to the variable 'p' (line 3083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3083, 11), 'p', tuple_var_assignment_618687_624383)
        
        # Assigning a Name to a Name (line 3083):
        # Getting the type of 'tuple_var_assignment_618688' (line 3083)
        tuple_var_assignment_618688_624384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 8), 'tuple_var_assignment_618688')
        # Assigning a type to the variable 'npcond' (line 3083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3083, 14), 'npcond', tuple_var_assignment_618688_624384)
        
        # Assigning a Subscript to a Name (line 3085):
        
        # Assigning a Subscript to a Name (line 3085):
        
        # Obtaining the type of the subscript
        Ellipsis_624385 = Ellipsis
        # Getting the type of 'np' (line 3085)
        np_624386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3085, 20), 'np')
        # Obtaining the member 'newaxis' of a type (line 3085)
        newaxis_624387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3085, 20), np_624386, 'newaxis')
        # Getting the type of 'np' (line 3085)
        np_624388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3085, 32), 'np')
        # Obtaining the member 'newaxis' of a type (line 3085)
        newaxis_624389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3085, 32), np_624388, 'newaxis')
        # Getting the type of 'n' (line 3085)
        n_624390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3085, 13), 'n')
        # Obtaining the member '__getitem__' of a type (line 3085)
        getitem___624391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3085, 13), n_624390, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3085)
        subscript_call_result_624392 = invoke(stypy.reporting.localization.Localization(__file__, 3085, 13), getitem___624391, (Ellipsis_624385, newaxis_624387, newaxis_624389))
        
        # Assigning a type to the variable 'nn' (line 3085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3085, 8), 'nn', subscript_call_result_624392)
        
        # Assigning a BinOp to a Name (line 3086):
        
        # Assigning a BinOp to a Name (line 3086):
        # Getting the type of 'nn' (line 3086)
        nn_624393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 17), 'nn')
        
        # Call to einsum(...): (line 3086)
        # Processing the call arguments (line 3086)
        str_624396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3086, 32), 'str', '...j,...k->...jk')
        
        # Getting the type of 'p' (line 3086)
        p_624397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 53), 'p', False)
        # Applying the 'usub' unary operator (line 3086)
        result___neg___624398 = python_operator(stypy.reporting.localization.Localization(__file__, 3086, 52), 'usub', p_624397)
        
        # Getting the type of 'p' (line 3086)
        p_624399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 56), 'p', False)
        # Processing the call keyword arguments (line 3086)
        kwargs_624400 = {}
        # Getting the type of 'np' (line 3086)
        np_624394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 22), 'np', False)
        # Obtaining the member 'einsum' of a type (line 3086)
        einsum_624395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3086, 22), np_624394, 'einsum')
        # Calling einsum(args, kwargs) (line 3086)
        einsum_call_result_624401 = invoke(stypy.reporting.localization.Localization(__file__, 3086, 22), einsum_624395, *[str_624396, result___neg___624398, p_624399], **kwargs_624400)
        
        # Applying the binary operator '*' (line 3086)
        result_mul_624402 = python_operator(stypy.reporting.localization.Localization(__file__, 3086, 17), '*', nn_624393, einsum_call_result_624401)
        
        # Assigning a type to the variable 'result' (line 3086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3086, 8), 'result', result_mul_624402)
        
        
        # Call to range(...): (line 3089)
        # Processing the call arguments (line 3089)
        
        # Obtaining the type of the subscript
        int_624404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3089, 31), 'int')
        # Getting the type of 'p' (line 3089)
        p_624405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3089, 23), 'p', False)
        # Obtaining the member 'shape' of a type (line 3089)
        shape_624406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3089, 23), p_624405, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3089)
        getitem___624407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3089, 23), shape_624406, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3089)
        subscript_call_result_624408 = invoke(stypy.reporting.localization.Localization(__file__, 3089, 23), getitem___624407, int_624404)
        
        # Processing the call keyword arguments (line 3089)
        kwargs_624409 = {}
        # Getting the type of 'range' (line 3089)
        range_624403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3089, 17), 'range', False)
        # Calling range(args, kwargs) (line 3089)
        range_call_result_624410 = invoke(stypy.reporting.localization.Localization(__file__, 3089, 17), range_624403, *[subscript_call_result_624408], **kwargs_624409)
        
        # Testing the type of a for loop iterable (line 3089)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3089, 8), range_call_result_624410)
        # Getting the type of the for loop variable (line 3089)
        for_loop_var_624411 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3089, 8), range_call_result_624410)
        # Assigning a type to the variable 'i' (line 3089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3089, 8), 'i', for_loop_var_624411)
        # SSA begins for a for statement (line 3089)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'result' (line 3090)
        result_624412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 12), 'result')
        
        # Obtaining the type of the subscript
        Ellipsis_624413 = Ellipsis
        # Getting the type of 'i' (line 3090)
        i_624414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 23), 'i')
        # Getting the type of 'i' (line 3090)
        i_624415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 26), 'i')
        # Getting the type of 'result' (line 3090)
        result_624416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 12), 'result')
        # Obtaining the member '__getitem__' of a type (line 3090)
        getitem___624417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3090, 12), result_624416, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3090)
        subscript_call_result_624418 = invoke(stypy.reporting.localization.Localization(__file__, 3090, 12), getitem___624417, (Ellipsis_624413, i_624414, i_624415))
        
        # Getting the type of 'n' (line 3090)
        n_624419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 32), 'n')
        
        # Obtaining the type of the subscript
        Ellipsis_624420 = Ellipsis
        # Getting the type of 'i' (line 3090)
        i_624421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 41), 'i')
        # Getting the type of 'p' (line 3090)
        p_624422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 34), 'p')
        # Obtaining the member '__getitem__' of a type (line 3090)
        getitem___624423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3090, 34), p_624422, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3090)
        subscript_call_result_624424 = invoke(stypy.reporting.localization.Localization(__file__, 3090, 34), getitem___624423, (Ellipsis_624420, i_624421))
        
        # Applying the binary operator '*' (line 3090)
        result_mul_624425 = python_operator(stypy.reporting.localization.Localization(__file__, 3090, 32), '*', n_624419, subscript_call_result_624424)
        
        # Applying the binary operator '+=' (line 3090)
        result_iadd_624426 = python_operator(stypy.reporting.localization.Localization(__file__, 3090, 12), '+=', subscript_call_result_624418, result_mul_624425)
        # Getting the type of 'result' (line 3090)
        result_624427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 12), 'result')
        Ellipsis_624428 = Ellipsis
        # Getting the type of 'i' (line 3090)
        i_624429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 23), 'i')
        # Getting the type of 'i' (line 3090)
        i_624430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 26), 'i')
        # Storing an element on a container (line 3090)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3090, 12), result_624427, ((Ellipsis_624428, i_624429, i_624430), result_iadd_624426))
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _checkresult(...): (line 3092)
        # Processing the call arguments (line 3092)
        # Getting the type of 'result' (line 3092)
        result_624433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 33), 'result', False)
        # Getting the type of 'npcond' (line 3092)
        npcond_624434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 41), 'npcond', False)
        # Getting the type of 'np' (line 3092)
        np_624435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 49), 'np', False)
        # Obtaining the member 'nan' of a type (line 3092)
        nan_624436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3092, 49), np_624435, 'nan')
        # Processing the call keyword arguments (line 3092)
        kwargs_624437 = {}
        # Getting the type of 'self' (line 3092)
        self_624431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 15), 'self', False)
        # Obtaining the member '_checkresult' of a type (line 3092)
        _checkresult_624432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3092, 15), self_624431, '_checkresult')
        # Calling _checkresult(args, kwargs) (line 3092)
        _checkresult_call_result_624438 = invoke(stypy.reporting.localization.Localization(__file__, 3092, 15), _checkresult_624432, *[result_624433, npcond_624434, nan_624436], **kwargs_624437)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3092, 8), 'stypy_return_type', _checkresult_call_result_624438)
        
        # ################# End of 'cov(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cov' in the type store
        # Getting the type of 'stypy_return_type' (line 3070)
        stypy_return_type_624439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624439)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cov'
        return stypy_return_type_624439


    @norecursion
    def entropy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'entropy'
        module_type_store = module_type_store.open_function_context('entropy', 3094, 4, False)
        # Assigning a type to the variable 'self' (line 3095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3095, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_gen.entropy.__dict__.__setitem__('stypy_localization', localization)
        multinomial_gen.entropy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_gen.entropy.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_gen.entropy.__dict__.__setitem__('stypy_function_name', 'multinomial_gen.entropy')
        multinomial_gen.entropy.__dict__.__setitem__('stypy_param_names_list', ['n', 'p'])
        multinomial_gen.entropy.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_gen.entropy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_gen.entropy.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_gen.entropy.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_gen.entropy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_gen.entropy.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen.entropy', ['n', 'p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'entropy', localization, ['n', 'p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'entropy(...)' code ##################

        str_624440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3117, (-1)), 'str', '\n        Compute the entropy of the multinomial distribution.\n\n        The entropy is computed using this expression:\n\n        .. math::\n\n            f(x) = - \\log n! - n\\sum_{i=1}^k p_i \\log p_i +\n            \\sum_{i=1}^k \\sum_{x=0}^n \\binom n x p_i^x(1-p_i)^{n-x} \\log x!\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n\n        Returns\n        -------\n        h : scalar\n            Entropy of the Multinomial distribution\n\n        Notes\n        -----\n        %(_doc_callparams_note)s\n        ')
        
        # Assigning a Call to a Tuple (line 3118):
        
        # Assigning a Subscript to a Name (line 3118):
        
        # Obtaining the type of the subscript
        int_624441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3118, 8), 'int')
        
        # Call to _process_parameters(...): (line 3118)
        # Processing the call arguments (line 3118)
        # Getting the type of 'n' (line 3118)
        n_624444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 48), 'n', False)
        # Getting the type of 'p' (line 3118)
        p_624445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 51), 'p', False)
        # Processing the call keyword arguments (line 3118)
        kwargs_624446 = {}
        # Getting the type of 'self' (line 3118)
        self_624442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3118)
        _process_parameters_624443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3118, 23), self_624442, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3118)
        _process_parameters_call_result_624447 = invoke(stypy.reporting.localization.Localization(__file__, 3118, 23), _process_parameters_624443, *[n_624444, p_624445], **kwargs_624446)
        
        # Obtaining the member '__getitem__' of a type (line 3118)
        getitem___624448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3118, 8), _process_parameters_call_result_624447, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3118)
        subscript_call_result_624449 = invoke(stypy.reporting.localization.Localization(__file__, 3118, 8), getitem___624448, int_624441)
        
        # Assigning a type to the variable 'tuple_var_assignment_618689' (line 3118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3118, 8), 'tuple_var_assignment_618689', subscript_call_result_624449)
        
        # Assigning a Subscript to a Name (line 3118):
        
        # Obtaining the type of the subscript
        int_624450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3118, 8), 'int')
        
        # Call to _process_parameters(...): (line 3118)
        # Processing the call arguments (line 3118)
        # Getting the type of 'n' (line 3118)
        n_624453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 48), 'n', False)
        # Getting the type of 'p' (line 3118)
        p_624454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 51), 'p', False)
        # Processing the call keyword arguments (line 3118)
        kwargs_624455 = {}
        # Getting the type of 'self' (line 3118)
        self_624451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3118)
        _process_parameters_624452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3118, 23), self_624451, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3118)
        _process_parameters_call_result_624456 = invoke(stypy.reporting.localization.Localization(__file__, 3118, 23), _process_parameters_624452, *[n_624453, p_624454], **kwargs_624455)
        
        # Obtaining the member '__getitem__' of a type (line 3118)
        getitem___624457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3118, 8), _process_parameters_call_result_624456, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3118)
        subscript_call_result_624458 = invoke(stypy.reporting.localization.Localization(__file__, 3118, 8), getitem___624457, int_624450)
        
        # Assigning a type to the variable 'tuple_var_assignment_618690' (line 3118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3118, 8), 'tuple_var_assignment_618690', subscript_call_result_624458)
        
        # Assigning a Subscript to a Name (line 3118):
        
        # Obtaining the type of the subscript
        int_624459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3118, 8), 'int')
        
        # Call to _process_parameters(...): (line 3118)
        # Processing the call arguments (line 3118)
        # Getting the type of 'n' (line 3118)
        n_624462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 48), 'n', False)
        # Getting the type of 'p' (line 3118)
        p_624463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 51), 'p', False)
        # Processing the call keyword arguments (line 3118)
        kwargs_624464 = {}
        # Getting the type of 'self' (line 3118)
        self_624460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3118)
        _process_parameters_624461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3118, 23), self_624460, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3118)
        _process_parameters_call_result_624465 = invoke(stypy.reporting.localization.Localization(__file__, 3118, 23), _process_parameters_624461, *[n_624462, p_624463], **kwargs_624464)
        
        # Obtaining the member '__getitem__' of a type (line 3118)
        getitem___624466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3118, 8), _process_parameters_call_result_624465, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3118)
        subscript_call_result_624467 = invoke(stypy.reporting.localization.Localization(__file__, 3118, 8), getitem___624466, int_624459)
        
        # Assigning a type to the variable 'tuple_var_assignment_618691' (line 3118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3118, 8), 'tuple_var_assignment_618691', subscript_call_result_624467)
        
        # Assigning a Name to a Name (line 3118):
        # Getting the type of 'tuple_var_assignment_618689' (line 3118)
        tuple_var_assignment_618689_624468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 8), 'tuple_var_assignment_618689')
        # Assigning a type to the variable 'n' (line 3118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3118, 8), 'n', tuple_var_assignment_618689_624468)
        
        # Assigning a Name to a Name (line 3118):
        # Getting the type of 'tuple_var_assignment_618690' (line 3118)
        tuple_var_assignment_618690_624469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 8), 'tuple_var_assignment_618690')
        # Assigning a type to the variable 'p' (line 3118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3118, 11), 'p', tuple_var_assignment_618690_624469)
        
        # Assigning a Name to a Name (line 3118):
        # Getting the type of 'tuple_var_assignment_618691' (line 3118)
        tuple_var_assignment_618691_624470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 8), 'tuple_var_assignment_618691')
        # Assigning a type to the variable 'npcond' (line 3118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3118, 14), 'npcond', tuple_var_assignment_618691_624470)
        
        # Assigning a Subscript to a Name (line 3120):
        
        # Assigning a Subscript to a Name (line 3120):
        
        # Obtaining the type of the subscript
        int_624471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3120, 18), 'int')
        
        # Call to max(...): (line 3120)
        # Processing the call arguments (line 3120)
        # Getting the type of 'n' (line 3120)
        n_624474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 27), 'n', False)
        # Processing the call keyword arguments (line 3120)
        kwargs_624475 = {}
        # Getting the type of 'np' (line 3120)
        np_624472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 20), 'np', False)
        # Obtaining the member 'max' of a type (line 3120)
        max_624473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3120, 20), np_624472, 'max')
        # Calling max(args, kwargs) (line 3120)
        max_call_result_624476 = invoke(stypy.reporting.localization.Localization(__file__, 3120, 20), max_624473, *[n_624474], **kwargs_624475)
        
        int_624477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3120, 30), 'int')
        # Applying the binary operator '+' (line 3120)
        result_add_624478 = python_operator(stypy.reporting.localization.Localization(__file__, 3120, 20), '+', max_call_result_624476, int_624477)
        
        slice_624479 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3120, 12), int_624471, result_add_624478, None)
        # Getting the type of 'np' (line 3120)
        np_624480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 12), 'np')
        # Obtaining the member 'r_' of a type (line 3120)
        r__624481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3120, 12), np_624480, 'r_')
        # Obtaining the member '__getitem__' of a type (line 3120)
        getitem___624482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3120, 12), r__624481, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3120)
        subscript_call_result_624483 = invoke(stypy.reporting.localization.Localization(__file__, 3120, 12), getitem___624482, slice_624479)
        
        # Assigning a type to the variable 'x' (line 3120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3120, 8), 'x', subscript_call_result_624483)
        
        # Assigning a BinOp to a Name (line 3122):
        
        # Assigning a BinOp to a Name (line 3122):
        # Getting the type of 'n' (line 3122)
        n_624484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 16), 'n')
        
        # Call to sum(...): (line 3122)
        # Processing the call arguments (line 3122)
        
        # Call to entr(...): (line 3122)
        # Processing the call arguments (line 3122)
        # Getting the type of 'p' (line 3122)
        p_624488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 30), 'p', False)
        # Processing the call keyword arguments (line 3122)
        kwargs_624489 = {}
        # Getting the type of 'entr' (line 3122)
        entr_624487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 25), 'entr', False)
        # Calling entr(args, kwargs) (line 3122)
        entr_call_result_624490 = invoke(stypy.reporting.localization.Localization(__file__, 3122, 25), entr_624487, *[p_624488], **kwargs_624489)
        
        # Processing the call keyword arguments (line 3122)
        int_624491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3122, 39), 'int')
        keyword_624492 = int_624491
        kwargs_624493 = {'axis': keyword_624492}
        # Getting the type of 'np' (line 3122)
        np_624485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 18), 'np', False)
        # Obtaining the member 'sum' of a type (line 3122)
        sum_624486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3122, 18), np_624485, 'sum')
        # Calling sum(args, kwargs) (line 3122)
        sum_call_result_624494 = invoke(stypy.reporting.localization.Localization(__file__, 3122, 18), sum_624486, *[entr_call_result_624490], **kwargs_624493)
        
        # Applying the binary operator '*' (line 3122)
        result_mul_624495 = python_operator(stypy.reporting.localization.Localization(__file__, 3122, 16), '*', n_624484, sum_call_result_624494)
        
        # Assigning a type to the variable 'term1' (line 3122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3122, 8), 'term1', result_mul_624495)
        
        # Getting the type of 'term1' (line 3123)
        term1_624496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 8), 'term1')
        
        # Call to gammaln(...): (line 3123)
        # Processing the call arguments (line 3123)
        # Getting the type of 'n' (line 3123)
        n_624498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 25), 'n', False)
        int_624499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3123, 27), 'int')
        # Applying the binary operator '+' (line 3123)
        result_add_624500 = python_operator(stypy.reporting.localization.Localization(__file__, 3123, 25), '+', n_624498, int_624499)
        
        # Processing the call keyword arguments (line 3123)
        kwargs_624501 = {}
        # Getting the type of 'gammaln' (line 3123)
        gammaln_624497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 17), 'gammaln', False)
        # Calling gammaln(args, kwargs) (line 3123)
        gammaln_call_result_624502 = invoke(stypy.reporting.localization.Localization(__file__, 3123, 17), gammaln_624497, *[result_add_624500], **kwargs_624501)
        
        # Applying the binary operator '-=' (line 3123)
        result_isub_624503 = python_operator(stypy.reporting.localization.Localization(__file__, 3123, 8), '-=', term1_624496, gammaln_call_result_624502)
        # Assigning a type to the variable 'term1' (line 3123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3123, 8), 'term1', result_isub_624503)
        
        
        # Assigning a Subscript to a Name (line 3125):
        
        # Assigning a Subscript to a Name (line 3125):
        
        # Obtaining the type of the subscript
        Ellipsis_624504 = Ellipsis
        # Getting the type of 'np' (line 3125)
        np_624505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 19), 'np')
        # Obtaining the member 'newaxis' of a type (line 3125)
        newaxis_624506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3125, 19), np_624505, 'newaxis')
        # Getting the type of 'n' (line 3125)
        n_624507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 12), 'n')
        # Obtaining the member '__getitem__' of a type (line 3125)
        getitem___624508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3125, 12), n_624507, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3125)
        subscript_call_result_624509 = invoke(stypy.reporting.localization.Localization(__file__, 3125, 12), getitem___624508, (Ellipsis_624504, newaxis_624506))
        
        # Assigning a type to the variable 'n' (line 3125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3125, 8), 'n', subscript_call_result_624509)
        
        # Assigning a BinOp to a Name (line 3126):
        
        # Assigning a BinOp to a Name (line 3126):
        
        # Call to max(...): (line 3126)
        # Processing the call arguments (line 3126)
        # Getting the type of 'p' (line 3126)
        p_624511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3126, 30), 'p', False)
        # Obtaining the member 'ndim' of a type (line 3126)
        ndim_624512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3126, 30), p_624511, 'ndim')
        # Getting the type of 'n' (line 3126)
        n_624513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3126, 38), 'n', False)
        # Obtaining the member 'ndim' of a type (line 3126)
        ndim_624514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3126, 38), n_624513, 'ndim')
        # Processing the call keyword arguments (line 3126)
        kwargs_624515 = {}
        # Getting the type of 'max' (line 3126)
        max_624510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3126, 26), 'max', False)
        # Calling max(args, kwargs) (line 3126)
        max_call_result_624516 = invoke(stypy.reporting.localization.Localization(__file__, 3126, 26), max_624510, *[ndim_624512, ndim_624514], **kwargs_624515)
        
        # Getting the type of 'x' (line 3126)
        x_624517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3126, 48), 'x')
        # Obtaining the member 'ndim' of a type (line 3126)
        ndim_624518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3126, 48), x_624517, 'ndim')
        # Applying the binary operator '-' (line 3126)
        result_sub_624519 = python_operator(stypy.reporting.localization.Localization(__file__, 3126, 26), '-', max_call_result_624516, ndim_624518)
        
        int_624520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3126, 57), 'int')
        # Applying the binary operator '+' (line 3126)
        result_add_624521 = python_operator(stypy.reporting.localization.Localization(__file__, 3126, 55), '+', result_sub_624519, int_624520)
        
        # Assigning a type to the variable 'new_axes_needed' (line 3126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3126, 8), 'new_axes_needed', result_add_624521)
        
        # Getting the type of 'x' (line 3127)
        x_624522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 8), 'x')
        # Obtaining the member 'shape' of a type (line 3127)
        shape_624523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3127, 8), x_624522, 'shape')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3127)
        tuple_624524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3127, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3127)
        # Adding element type (line 3127)
        int_624525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3127, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3127, 20), tuple_624524, int_624525)
        
        # Getting the type of 'new_axes_needed' (line 3127)
        new_axes_needed_624526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 24), 'new_axes_needed')
        # Applying the binary operator '*' (line 3127)
        result_mul_624527 = python_operator(stypy.reporting.localization.Localization(__file__, 3127, 19), '*', tuple_624524, new_axes_needed_624526)
        
        # Applying the binary operator '+=' (line 3127)
        result_iadd_624528 = python_operator(stypy.reporting.localization.Localization(__file__, 3127, 8), '+=', shape_624523, result_mul_624527)
        # Getting the type of 'x' (line 3127)
        x_624529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 8), 'x')
        # Setting the type of the member 'shape' of a type (line 3127)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3127, 8), x_624529, 'shape', result_iadd_624528)
        
        
        # Assigning a Call to a Name (line 3129):
        
        # Assigning a Call to a Name (line 3129):
        
        # Call to sum(...): (line 3129)
        # Processing the call arguments (line 3129)
        
        # Call to pmf(...): (line 3129)
        # Processing the call arguments (line 3129)
        # Getting the type of 'x' (line 3129)
        x_624534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 33), 'x', False)
        # Getting the type of 'n' (line 3129)
        n_624535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 36), 'n', False)
        # Getting the type of 'p' (line 3129)
        p_624536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 39), 'p', False)
        # Processing the call keyword arguments (line 3129)
        kwargs_624537 = {}
        # Getting the type of 'binom' (line 3129)
        binom_624532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 23), 'binom', False)
        # Obtaining the member 'pmf' of a type (line 3129)
        pmf_624533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 23), binom_624532, 'pmf')
        # Calling pmf(args, kwargs) (line 3129)
        pmf_call_result_624538 = invoke(stypy.reporting.localization.Localization(__file__, 3129, 23), pmf_624533, *[x_624534, n_624535, p_624536], **kwargs_624537)
        
        
        # Call to gammaln(...): (line 3129)
        # Processing the call arguments (line 3129)
        # Getting the type of 'x' (line 3129)
        x_624540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 50), 'x', False)
        int_624541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3129, 52), 'int')
        # Applying the binary operator '+' (line 3129)
        result_add_624542 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 50), '+', x_624540, int_624541)
        
        # Processing the call keyword arguments (line 3129)
        kwargs_624543 = {}
        # Getting the type of 'gammaln' (line 3129)
        gammaln_624539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 42), 'gammaln', False)
        # Calling gammaln(args, kwargs) (line 3129)
        gammaln_call_result_624544 = invoke(stypy.reporting.localization.Localization(__file__, 3129, 42), gammaln_624539, *[result_add_624542], **kwargs_624543)
        
        # Applying the binary operator '*' (line 3129)
        result_mul_624545 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 23), '*', pmf_call_result_624538, gammaln_call_result_624544)
        
        # Processing the call keyword arguments (line 3129)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3130)
        tuple_624546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3130, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3130)
        # Adding element type (line 3130)
        int_624547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3130, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3130, 18), tuple_624546, int_624547)
        # Adding element type (line 3130)
        int_624548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3130, 22), 'int')
        # Getting the type of 'new_axes_needed' (line 3130)
        new_axes_needed_624549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 25), 'new_axes_needed', False)
        # Applying the binary operator '-' (line 3130)
        result_sub_624550 = python_operator(stypy.reporting.localization.Localization(__file__, 3130, 22), '-', int_624548, new_axes_needed_624549)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3130, 18), tuple_624546, result_sub_624550)
        
        keyword_624551 = tuple_624546
        kwargs_624552 = {'axis': keyword_624551}
        # Getting the type of 'np' (line 3129)
        np_624530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 16), 'np', False)
        # Obtaining the member 'sum' of a type (line 3129)
        sum_624531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 16), np_624530, 'sum')
        # Calling sum(args, kwargs) (line 3129)
        sum_call_result_624553 = invoke(stypy.reporting.localization.Localization(__file__, 3129, 16), sum_624531, *[result_mul_624545], **kwargs_624552)
        
        # Assigning a type to the variable 'term2' (line 3129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3129, 8), 'term2', sum_call_result_624553)
        
        # Call to _checkresult(...): (line 3132)
        # Processing the call arguments (line 3132)
        # Getting the type of 'term1' (line 3132)
        term1_624556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 33), 'term1', False)
        # Getting the type of 'term2' (line 3132)
        term2_624557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 41), 'term2', False)
        # Applying the binary operator '+' (line 3132)
        result_add_624558 = python_operator(stypy.reporting.localization.Localization(__file__, 3132, 33), '+', term1_624556, term2_624557)
        
        # Getting the type of 'npcond' (line 3132)
        npcond_624559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 48), 'npcond', False)
        # Getting the type of 'np' (line 3132)
        np_624560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 56), 'np', False)
        # Obtaining the member 'nan' of a type (line 3132)
        nan_624561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3132, 56), np_624560, 'nan')
        # Processing the call keyword arguments (line 3132)
        kwargs_624562 = {}
        # Getting the type of 'self' (line 3132)
        self_624554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 15), 'self', False)
        # Obtaining the member '_checkresult' of a type (line 3132)
        _checkresult_624555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3132, 15), self_624554, '_checkresult')
        # Calling _checkresult(args, kwargs) (line 3132)
        _checkresult_call_result_624563 = invoke(stypy.reporting.localization.Localization(__file__, 3132, 15), _checkresult_624555, *[result_add_624558, npcond_624559, nan_624561], **kwargs_624562)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3132, 8), 'stypy_return_type', _checkresult_call_result_624563)
        
        # ################# End of 'entropy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'entropy' in the type store
        # Getting the type of 'stypy_return_type' (line 3094)
        stypy_return_type_624564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624564)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'entropy'
        return stypy_return_type_624564


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3134)
        None_624565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 29), 'None')
        # Getting the type of 'None' (line 3134)
        None_624566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 48), 'None')
        defaults = [None_624565, None_624566]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 3134, 4, False)
        # Assigning a type to the variable 'self' (line 3135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3135, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_gen.rvs.__dict__.__setitem__('stypy_localization', localization)
        multinomial_gen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_gen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_gen.rvs.__dict__.__setitem__('stypy_function_name', 'multinomial_gen.rvs')
        multinomial_gen.rvs.__dict__.__setitem__('stypy_param_names_list', ['n', 'p', 'size', 'random_state'])
        multinomial_gen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_gen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_gen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_gen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_gen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_gen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_gen.rvs', ['n', 'p', 'size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['n', 'p', 'size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        str_624567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3153, (-1)), 'str', '\n        Draw random samples from a Multinomial distribution.\n\n        Parameters\n        ----------\n        %(_doc_default_callparams)s\n        size : integer or iterable of integers, optional\n            Number of samples to draw (default 1).\n        %(_doc_random_state)s\n\n        Returns\n        -------\n        rvs : ndarray or scalar\n            Random variates of shape (`size`, `len(p)`)\n\n        Notes\n        -----\n        %(_doc_callparams_note)s\n        ')
        
        # Assigning a Call to a Tuple (line 3154):
        
        # Assigning a Subscript to a Name (line 3154):
        
        # Obtaining the type of the subscript
        int_624568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3154, 8), 'int')
        
        # Call to _process_parameters(...): (line 3154)
        # Processing the call arguments (line 3154)
        # Getting the type of 'n' (line 3154)
        n_624571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 48), 'n', False)
        # Getting the type of 'p' (line 3154)
        p_624572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 51), 'p', False)
        # Processing the call keyword arguments (line 3154)
        kwargs_624573 = {}
        # Getting the type of 'self' (line 3154)
        self_624569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3154)
        _process_parameters_624570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3154, 23), self_624569, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3154)
        _process_parameters_call_result_624574 = invoke(stypy.reporting.localization.Localization(__file__, 3154, 23), _process_parameters_624570, *[n_624571, p_624572], **kwargs_624573)
        
        # Obtaining the member '__getitem__' of a type (line 3154)
        getitem___624575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3154, 8), _process_parameters_call_result_624574, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3154)
        subscript_call_result_624576 = invoke(stypy.reporting.localization.Localization(__file__, 3154, 8), getitem___624575, int_624568)
        
        # Assigning a type to the variable 'tuple_var_assignment_618692' (line 3154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3154, 8), 'tuple_var_assignment_618692', subscript_call_result_624576)
        
        # Assigning a Subscript to a Name (line 3154):
        
        # Obtaining the type of the subscript
        int_624577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3154, 8), 'int')
        
        # Call to _process_parameters(...): (line 3154)
        # Processing the call arguments (line 3154)
        # Getting the type of 'n' (line 3154)
        n_624580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 48), 'n', False)
        # Getting the type of 'p' (line 3154)
        p_624581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 51), 'p', False)
        # Processing the call keyword arguments (line 3154)
        kwargs_624582 = {}
        # Getting the type of 'self' (line 3154)
        self_624578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3154)
        _process_parameters_624579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3154, 23), self_624578, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3154)
        _process_parameters_call_result_624583 = invoke(stypy.reporting.localization.Localization(__file__, 3154, 23), _process_parameters_624579, *[n_624580, p_624581], **kwargs_624582)
        
        # Obtaining the member '__getitem__' of a type (line 3154)
        getitem___624584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3154, 8), _process_parameters_call_result_624583, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3154)
        subscript_call_result_624585 = invoke(stypy.reporting.localization.Localization(__file__, 3154, 8), getitem___624584, int_624577)
        
        # Assigning a type to the variable 'tuple_var_assignment_618693' (line 3154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3154, 8), 'tuple_var_assignment_618693', subscript_call_result_624585)
        
        # Assigning a Subscript to a Name (line 3154):
        
        # Obtaining the type of the subscript
        int_624586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3154, 8), 'int')
        
        # Call to _process_parameters(...): (line 3154)
        # Processing the call arguments (line 3154)
        # Getting the type of 'n' (line 3154)
        n_624589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 48), 'n', False)
        # Getting the type of 'p' (line 3154)
        p_624590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 51), 'p', False)
        # Processing the call keyword arguments (line 3154)
        kwargs_624591 = {}
        # Getting the type of 'self' (line 3154)
        self_624587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 23), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3154)
        _process_parameters_624588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3154, 23), self_624587, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3154)
        _process_parameters_call_result_624592 = invoke(stypy.reporting.localization.Localization(__file__, 3154, 23), _process_parameters_624588, *[n_624589, p_624590], **kwargs_624591)
        
        # Obtaining the member '__getitem__' of a type (line 3154)
        getitem___624593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3154, 8), _process_parameters_call_result_624592, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3154)
        subscript_call_result_624594 = invoke(stypy.reporting.localization.Localization(__file__, 3154, 8), getitem___624593, int_624586)
        
        # Assigning a type to the variable 'tuple_var_assignment_618694' (line 3154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3154, 8), 'tuple_var_assignment_618694', subscript_call_result_624594)
        
        # Assigning a Name to a Name (line 3154):
        # Getting the type of 'tuple_var_assignment_618692' (line 3154)
        tuple_var_assignment_618692_624595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 8), 'tuple_var_assignment_618692')
        # Assigning a type to the variable 'n' (line 3154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3154, 8), 'n', tuple_var_assignment_618692_624595)
        
        # Assigning a Name to a Name (line 3154):
        # Getting the type of 'tuple_var_assignment_618693' (line 3154)
        tuple_var_assignment_618693_624596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 8), 'tuple_var_assignment_618693')
        # Assigning a type to the variable 'p' (line 3154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3154, 11), 'p', tuple_var_assignment_618693_624596)
        
        # Assigning a Name to a Name (line 3154):
        # Getting the type of 'tuple_var_assignment_618694' (line 3154)
        tuple_var_assignment_618694_624597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 8), 'tuple_var_assignment_618694')
        # Assigning a type to the variable 'npcond' (line 3154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3154, 14), 'npcond', tuple_var_assignment_618694_624597)
        
        # Assigning a Call to a Name (line 3155):
        
        # Assigning a Call to a Name (line 3155):
        
        # Call to _get_random_state(...): (line 3155)
        # Processing the call arguments (line 3155)
        # Getting the type of 'random_state' (line 3155)
        random_state_624600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 46), 'random_state', False)
        # Processing the call keyword arguments (line 3155)
        kwargs_624601 = {}
        # Getting the type of 'self' (line 3155)
        self_624598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 23), 'self', False)
        # Obtaining the member '_get_random_state' of a type (line 3155)
        _get_random_state_624599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3155, 23), self_624598, '_get_random_state')
        # Calling _get_random_state(args, kwargs) (line 3155)
        _get_random_state_call_result_624602 = invoke(stypy.reporting.localization.Localization(__file__, 3155, 23), _get_random_state_624599, *[random_state_624600], **kwargs_624601)
        
        # Assigning a type to the variable 'random_state' (line 3155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3155, 8), 'random_state', _get_random_state_call_result_624602)
        
        # Call to multinomial(...): (line 3156)
        # Processing the call arguments (line 3156)
        # Getting the type of 'n' (line 3156)
        n_624605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 40), 'n', False)
        # Getting the type of 'p' (line 3156)
        p_624606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 43), 'p', False)
        # Getting the type of 'size' (line 3156)
        size_624607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 46), 'size', False)
        # Processing the call keyword arguments (line 3156)
        kwargs_624608 = {}
        # Getting the type of 'random_state' (line 3156)
        random_state_624603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 15), 'random_state', False)
        # Obtaining the member 'multinomial' of a type (line 3156)
        multinomial_624604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3156, 15), random_state_624603, 'multinomial')
        # Calling multinomial(args, kwargs) (line 3156)
        multinomial_call_result_624609 = invoke(stypy.reporting.localization.Localization(__file__, 3156, 15), multinomial_624604, *[n_624605, p_624606, size_624607], **kwargs_624608)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3156)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3156, 8), 'stypy_return_type', multinomial_call_result_624609)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 3134)
        stypy_return_type_624610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624610)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_624610


# Assigning a type to the variable 'multinomial_gen' (line 2824)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2824, 0), 'multinomial_gen', multinomial_gen)

# Assigning a Call to a Name (line 3159):

# Assigning a Call to a Name (line 3159):

# Call to multinomial_gen(...): (line 3159)
# Processing the call keyword arguments (line 3159)
kwargs_624612 = {}
# Getting the type of 'multinomial_gen' (line 3159)
multinomial_gen_624611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 14), 'multinomial_gen', False)
# Calling multinomial_gen(args, kwargs) (line 3159)
multinomial_gen_call_result_624613 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 14), multinomial_gen_624611, *[], **kwargs_624612)

# Assigning a type to the variable 'multinomial' (line 3159)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3159, 0), 'multinomial', multinomial_gen_call_result_624613)
# Declaration of the 'multinomial_frozen' class
# Getting the type of 'multi_rv_frozen' (line 3161)
multi_rv_frozen_624614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3161, 25), 'multi_rv_frozen')

class multinomial_frozen(multi_rv_frozen_624614, ):
    str_624615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3177, (-1)), 'str', '\n    Create a frozen Multinomial distribution.\n\n    Parameters\n    ----------\n    n : int\n        number of trials\n    p: array_like\n        probability of a trial falling into each category; should sum to 1\n    seed : None or int or np.random.RandomState instance, optional\n        This parameter defines the RandomState object to use for drawing\n        random variates.\n        If None (or np.random), the global np.random state is used.\n        If integer, it is used to seed the local RandomState instance\n        Default is None.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3178)
        None_624616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3178, 34), 'None')
        defaults = [None_624616]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3178, 4, False)
        # Assigning a type to the variable 'self' (line 3179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3179, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_frozen.__init__', ['n', 'p', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['n', 'p', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 3179):
        
        # Assigning a Call to a Attribute (line 3179):
        
        # Call to multinomial_gen(...): (line 3179)
        # Processing the call arguments (line 3179)
        # Getting the type of 'seed' (line 3179)
        seed_624618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3179, 37), 'seed', False)
        # Processing the call keyword arguments (line 3179)
        kwargs_624619 = {}
        # Getting the type of 'multinomial_gen' (line 3179)
        multinomial_gen_624617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3179, 21), 'multinomial_gen', False)
        # Calling multinomial_gen(args, kwargs) (line 3179)
        multinomial_gen_call_result_624620 = invoke(stypy.reporting.localization.Localization(__file__, 3179, 21), multinomial_gen_624617, *[seed_624618], **kwargs_624619)
        
        # Getting the type of 'self' (line 3179)
        self_624621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3179, 8), 'self')
        # Setting the type of the member '_dist' of a type (line 3179)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3179, 8), self_624621, '_dist', multinomial_gen_call_result_624620)
        
        # Assigning a Call to a Tuple (line 3180):
        
        # Assigning a Subscript to a Name (line 3180):
        
        # Obtaining the type of the subscript
        int_624622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3180, 8), 'int')
        
        # Call to _process_parameters(...): (line 3180)
        # Processing the call arguments (line 3180)
        # Getting the type of 'n' (line 3180)
        n_624626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 69), 'n', False)
        # Getting the type of 'p' (line 3180)
        p_624627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 72), 'p', False)
        # Processing the call keyword arguments (line 3180)
        kwargs_624628 = {}
        # Getting the type of 'self' (line 3180)
        self_624623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 38), 'self', False)
        # Obtaining the member '_dist' of a type (line 3180)
        _dist_624624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 38), self_624623, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 3180)
        _process_parameters_624625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 38), _dist_624624, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3180)
        _process_parameters_call_result_624629 = invoke(stypy.reporting.localization.Localization(__file__, 3180, 38), _process_parameters_624625, *[n_624626, p_624627], **kwargs_624628)
        
        # Obtaining the member '__getitem__' of a type (line 3180)
        getitem___624630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 8), _process_parameters_call_result_624629, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3180)
        subscript_call_result_624631 = invoke(stypy.reporting.localization.Localization(__file__, 3180, 8), getitem___624630, int_624622)
        
        # Assigning a type to the variable 'tuple_var_assignment_618695' (line 3180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3180, 8), 'tuple_var_assignment_618695', subscript_call_result_624631)
        
        # Assigning a Subscript to a Name (line 3180):
        
        # Obtaining the type of the subscript
        int_624632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3180, 8), 'int')
        
        # Call to _process_parameters(...): (line 3180)
        # Processing the call arguments (line 3180)
        # Getting the type of 'n' (line 3180)
        n_624636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 69), 'n', False)
        # Getting the type of 'p' (line 3180)
        p_624637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 72), 'p', False)
        # Processing the call keyword arguments (line 3180)
        kwargs_624638 = {}
        # Getting the type of 'self' (line 3180)
        self_624633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 38), 'self', False)
        # Obtaining the member '_dist' of a type (line 3180)
        _dist_624634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 38), self_624633, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 3180)
        _process_parameters_624635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 38), _dist_624634, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3180)
        _process_parameters_call_result_624639 = invoke(stypy.reporting.localization.Localization(__file__, 3180, 38), _process_parameters_624635, *[n_624636, p_624637], **kwargs_624638)
        
        # Obtaining the member '__getitem__' of a type (line 3180)
        getitem___624640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 8), _process_parameters_call_result_624639, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3180)
        subscript_call_result_624641 = invoke(stypy.reporting.localization.Localization(__file__, 3180, 8), getitem___624640, int_624632)
        
        # Assigning a type to the variable 'tuple_var_assignment_618696' (line 3180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3180, 8), 'tuple_var_assignment_618696', subscript_call_result_624641)
        
        # Assigning a Subscript to a Name (line 3180):
        
        # Obtaining the type of the subscript
        int_624642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3180, 8), 'int')
        
        # Call to _process_parameters(...): (line 3180)
        # Processing the call arguments (line 3180)
        # Getting the type of 'n' (line 3180)
        n_624646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 69), 'n', False)
        # Getting the type of 'p' (line 3180)
        p_624647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 72), 'p', False)
        # Processing the call keyword arguments (line 3180)
        kwargs_624648 = {}
        # Getting the type of 'self' (line 3180)
        self_624643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 38), 'self', False)
        # Obtaining the member '_dist' of a type (line 3180)
        _dist_624644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 38), self_624643, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 3180)
        _process_parameters_624645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 38), _dist_624644, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3180)
        _process_parameters_call_result_624649 = invoke(stypy.reporting.localization.Localization(__file__, 3180, 38), _process_parameters_624645, *[n_624646, p_624647], **kwargs_624648)
        
        # Obtaining the member '__getitem__' of a type (line 3180)
        getitem___624650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 8), _process_parameters_call_result_624649, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3180)
        subscript_call_result_624651 = invoke(stypy.reporting.localization.Localization(__file__, 3180, 8), getitem___624650, int_624642)
        
        # Assigning a type to the variable 'tuple_var_assignment_618697' (line 3180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3180, 8), 'tuple_var_assignment_618697', subscript_call_result_624651)
        
        # Assigning a Name to a Attribute (line 3180):
        # Getting the type of 'tuple_var_assignment_618695' (line 3180)
        tuple_var_assignment_618695_624652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 8), 'tuple_var_assignment_618695')
        # Getting the type of 'self' (line 3180)
        self_624653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 8), 'self')
        # Setting the type of the member 'n' of a type (line 3180)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 8), self_624653, 'n', tuple_var_assignment_618695_624652)
        
        # Assigning a Name to a Attribute (line 3180):
        # Getting the type of 'tuple_var_assignment_618696' (line 3180)
        tuple_var_assignment_618696_624654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 8), 'tuple_var_assignment_618696')
        # Getting the type of 'self' (line 3180)
        self_624655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 16), 'self')
        # Setting the type of the member 'p' of a type (line 3180)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 16), self_624655, 'p', tuple_var_assignment_618696_624654)
        
        # Assigning a Name to a Attribute (line 3180):
        # Getting the type of 'tuple_var_assignment_618697' (line 3180)
        tuple_var_assignment_618697_624656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 8), 'tuple_var_assignment_618697')
        # Getting the type of 'self' (line 3180)
        self_624657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 24), 'self')
        # Setting the type of the member 'npcond' of a type (line 3180)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 24), self_624657, 'npcond', tuple_var_assignment_618697_624656)

        @norecursion
        def _process_parameters(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_process_parameters'
            module_type_store = module_type_store.open_function_context('_process_parameters', 3183, 8, False)
            
            # Passed parameters checking function
            _process_parameters.stypy_localization = localization
            _process_parameters.stypy_type_of_self = None
            _process_parameters.stypy_type_store = module_type_store
            _process_parameters.stypy_function_name = '_process_parameters'
            _process_parameters.stypy_param_names_list = ['n', 'p']
            _process_parameters.stypy_varargs_param_name = None
            _process_parameters.stypy_kwargs_param_name = None
            _process_parameters.stypy_call_defaults = defaults
            _process_parameters.stypy_call_varargs = varargs
            _process_parameters.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_process_parameters', ['n', 'p'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_process_parameters', localization, ['n', 'p'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_process_parameters(...)' code ##################

            
            # Obtaining an instance of the builtin type 'tuple' (line 3184)
            tuple_624658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3184, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3184)
            # Adding element type (line 3184)
            # Getting the type of 'self' (line 3184)
            self_624659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 19), 'self')
            # Obtaining the member 'n' of a type (line 3184)
            n_624660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3184, 19), self_624659, 'n')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3184, 19), tuple_624658, n_624660)
            # Adding element type (line 3184)
            # Getting the type of 'self' (line 3184)
            self_624661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 27), 'self')
            # Obtaining the member 'p' of a type (line 3184)
            p_624662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3184, 27), self_624661, 'p')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3184, 19), tuple_624658, p_624662)
            # Adding element type (line 3184)
            # Getting the type of 'self' (line 3184)
            self_624663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 35), 'self')
            # Obtaining the member 'npcond' of a type (line 3184)
            npcond_624664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3184, 35), self_624663, 'npcond')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3184, 19), tuple_624658, npcond_624664)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3184)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3184, 12), 'stypy_return_type', tuple_624658)
            
            # ################# End of '_process_parameters(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_process_parameters' in the type store
            # Getting the type of 'stypy_return_type' (line 3183)
            stypy_return_type_624665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3183, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_624665)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_process_parameters'
            return stypy_return_type_624665

        # Assigning a type to the variable '_process_parameters' (line 3183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3183, 8), '_process_parameters', _process_parameters)
        
        # Assigning a Name to a Attribute (line 3186):
        
        # Assigning a Name to a Attribute (line 3186):
        # Getting the type of '_process_parameters' (line 3186)
        _process_parameters_624666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3186, 41), '_process_parameters')
        # Getting the type of 'self' (line 3186)
        self_624667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3186, 8), 'self')
        # Obtaining the member '_dist' of a type (line 3186)
        _dist_624668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3186, 8), self_624667, '_dist')
        # Setting the type of the member '_process_parameters' of a type (line 3186)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3186, 8), _dist_624668, '_process_parameters', _process_parameters_624666)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def logpmf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'logpmf'
        module_type_store = module_type_store.open_function_context('logpmf', 3188, 4, False)
        # Assigning a type to the variable 'self' (line 3189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3189, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_frozen.logpmf.__dict__.__setitem__('stypy_localization', localization)
        multinomial_frozen.logpmf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_frozen.logpmf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_frozen.logpmf.__dict__.__setitem__('stypy_function_name', 'multinomial_frozen.logpmf')
        multinomial_frozen.logpmf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        multinomial_frozen.logpmf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_frozen.logpmf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_frozen.logpmf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_frozen.logpmf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_frozen.logpmf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_frozen.logpmf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_frozen.logpmf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'logpmf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'logpmf(...)' code ##################

        
        # Call to logpmf(...): (line 3189)
        # Processing the call arguments (line 3189)
        # Getting the type of 'x' (line 3189)
        x_624672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 33), 'x', False)
        # Getting the type of 'self' (line 3189)
        self_624673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 36), 'self', False)
        # Obtaining the member 'n' of a type (line 3189)
        n_624674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3189, 36), self_624673, 'n')
        # Getting the type of 'self' (line 3189)
        self_624675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 44), 'self', False)
        # Obtaining the member 'p' of a type (line 3189)
        p_624676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3189, 44), self_624675, 'p')
        # Processing the call keyword arguments (line 3189)
        kwargs_624677 = {}
        # Getting the type of 'self' (line 3189)
        self_624669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 3189)
        _dist_624670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3189, 15), self_624669, '_dist')
        # Obtaining the member 'logpmf' of a type (line 3189)
        logpmf_624671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3189, 15), _dist_624670, 'logpmf')
        # Calling logpmf(args, kwargs) (line 3189)
        logpmf_call_result_624678 = invoke(stypy.reporting.localization.Localization(__file__, 3189, 15), logpmf_624671, *[x_624672, n_624674, p_624676], **kwargs_624677)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3189, 8), 'stypy_return_type', logpmf_call_result_624678)
        
        # ################# End of 'logpmf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'logpmf' in the type store
        # Getting the type of 'stypy_return_type' (line 3188)
        stypy_return_type_624679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3188, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624679)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'logpmf'
        return stypy_return_type_624679


    @norecursion
    def pmf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pmf'
        module_type_store = module_type_store.open_function_context('pmf', 3191, 4, False)
        # Assigning a type to the variable 'self' (line 3192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3192, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_frozen.pmf.__dict__.__setitem__('stypy_localization', localization)
        multinomial_frozen.pmf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_frozen.pmf.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_frozen.pmf.__dict__.__setitem__('stypy_function_name', 'multinomial_frozen.pmf')
        multinomial_frozen.pmf.__dict__.__setitem__('stypy_param_names_list', ['x'])
        multinomial_frozen.pmf.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_frozen.pmf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_frozen.pmf.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_frozen.pmf.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_frozen.pmf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_frozen.pmf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_frozen.pmf', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pmf', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pmf(...)' code ##################

        
        # Call to pmf(...): (line 3192)
        # Processing the call arguments (line 3192)
        # Getting the type of 'x' (line 3192)
        x_624683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3192, 30), 'x', False)
        # Getting the type of 'self' (line 3192)
        self_624684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3192, 33), 'self', False)
        # Obtaining the member 'n' of a type (line 3192)
        n_624685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3192, 33), self_624684, 'n')
        # Getting the type of 'self' (line 3192)
        self_624686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3192, 41), 'self', False)
        # Obtaining the member 'p' of a type (line 3192)
        p_624687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3192, 41), self_624686, 'p')
        # Processing the call keyword arguments (line 3192)
        kwargs_624688 = {}
        # Getting the type of 'self' (line 3192)
        self_624680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3192, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 3192)
        _dist_624681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3192, 15), self_624680, '_dist')
        # Obtaining the member 'pmf' of a type (line 3192)
        pmf_624682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3192, 15), _dist_624681, 'pmf')
        # Calling pmf(args, kwargs) (line 3192)
        pmf_call_result_624689 = invoke(stypy.reporting.localization.Localization(__file__, 3192, 15), pmf_624682, *[x_624683, n_624685, p_624687], **kwargs_624688)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3192, 8), 'stypy_return_type', pmf_call_result_624689)
        
        # ################# End of 'pmf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pmf' in the type store
        # Getting the type of 'stypy_return_type' (line 3191)
        stypy_return_type_624690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3191, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624690)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pmf'
        return stypy_return_type_624690


    @norecursion
    def mean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mean'
        module_type_store = module_type_store.open_function_context('mean', 3194, 4, False)
        # Assigning a type to the variable 'self' (line 3195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3195, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_frozen.mean.__dict__.__setitem__('stypy_localization', localization)
        multinomial_frozen.mean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_frozen.mean.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_frozen.mean.__dict__.__setitem__('stypy_function_name', 'multinomial_frozen.mean')
        multinomial_frozen.mean.__dict__.__setitem__('stypy_param_names_list', [])
        multinomial_frozen.mean.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_frozen.mean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_frozen.mean.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_frozen.mean.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_frozen.mean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_frozen.mean.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_frozen.mean', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mean', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mean(...)' code ##################

        
        # Call to mean(...): (line 3195)
        # Processing the call arguments (line 3195)
        # Getting the type of 'self' (line 3195)
        self_624694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3195, 31), 'self', False)
        # Obtaining the member 'n' of a type (line 3195)
        n_624695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3195, 31), self_624694, 'n')
        # Getting the type of 'self' (line 3195)
        self_624696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3195, 39), 'self', False)
        # Obtaining the member 'p' of a type (line 3195)
        p_624697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3195, 39), self_624696, 'p')
        # Processing the call keyword arguments (line 3195)
        kwargs_624698 = {}
        # Getting the type of 'self' (line 3195)
        self_624691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3195, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 3195)
        _dist_624692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3195, 15), self_624691, '_dist')
        # Obtaining the member 'mean' of a type (line 3195)
        mean_624693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3195, 15), _dist_624692, 'mean')
        # Calling mean(args, kwargs) (line 3195)
        mean_call_result_624699 = invoke(stypy.reporting.localization.Localization(__file__, 3195, 15), mean_624693, *[n_624695, p_624697], **kwargs_624698)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3195, 8), 'stypy_return_type', mean_call_result_624699)
        
        # ################# End of 'mean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mean' in the type store
        # Getting the type of 'stypy_return_type' (line 3194)
        stypy_return_type_624700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3194, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624700)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mean'
        return stypy_return_type_624700


    @norecursion
    def cov(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cov'
        module_type_store = module_type_store.open_function_context('cov', 3197, 4, False)
        # Assigning a type to the variable 'self' (line 3198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3198, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_frozen.cov.__dict__.__setitem__('stypy_localization', localization)
        multinomial_frozen.cov.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_frozen.cov.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_frozen.cov.__dict__.__setitem__('stypy_function_name', 'multinomial_frozen.cov')
        multinomial_frozen.cov.__dict__.__setitem__('stypy_param_names_list', [])
        multinomial_frozen.cov.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_frozen.cov.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_frozen.cov.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_frozen.cov.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_frozen.cov.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_frozen.cov.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_frozen.cov', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cov', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cov(...)' code ##################

        
        # Call to cov(...): (line 3198)
        # Processing the call arguments (line 3198)
        # Getting the type of 'self' (line 3198)
        self_624704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3198, 30), 'self', False)
        # Obtaining the member 'n' of a type (line 3198)
        n_624705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3198, 30), self_624704, 'n')
        # Getting the type of 'self' (line 3198)
        self_624706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3198, 38), 'self', False)
        # Obtaining the member 'p' of a type (line 3198)
        p_624707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3198, 38), self_624706, 'p')
        # Processing the call keyword arguments (line 3198)
        kwargs_624708 = {}
        # Getting the type of 'self' (line 3198)
        self_624701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3198, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 3198)
        _dist_624702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3198, 15), self_624701, '_dist')
        # Obtaining the member 'cov' of a type (line 3198)
        cov_624703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3198, 15), _dist_624702, 'cov')
        # Calling cov(args, kwargs) (line 3198)
        cov_call_result_624709 = invoke(stypy.reporting.localization.Localization(__file__, 3198, 15), cov_624703, *[n_624705, p_624707], **kwargs_624708)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3198, 8), 'stypy_return_type', cov_call_result_624709)
        
        # ################# End of 'cov(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cov' in the type store
        # Getting the type of 'stypy_return_type' (line 3197)
        stypy_return_type_624710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3197, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624710)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cov'
        return stypy_return_type_624710


    @norecursion
    def entropy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'entropy'
        module_type_store = module_type_store.open_function_context('entropy', 3200, 4, False)
        # Assigning a type to the variable 'self' (line 3201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3201, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_frozen.entropy.__dict__.__setitem__('stypy_localization', localization)
        multinomial_frozen.entropy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_frozen.entropy.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_frozen.entropy.__dict__.__setitem__('stypy_function_name', 'multinomial_frozen.entropy')
        multinomial_frozen.entropy.__dict__.__setitem__('stypy_param_names_list', [])
        multinomial_frozen.entropy.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_frozen.entropy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_frozen.entropy.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_frozen.entropy.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_frozen.entropy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_frozen.entropy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_frozen.entropy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'entropy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'entropy(...)' code ##################

        
        # Call to entropy(...): (line 3201)
        # Processing the call arguments (line 3201)
        # Getting the type of 'self' (line 3201)
        self_624714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 34), 'self', False)
        # Obtaining the member 'n' of a type (line 3201)
        n_624715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3201, 34), self_624714, 'n')
        # Getting the type of 'self' (line 3201)
        self_624716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 42), 'self', False)
        # Obtaining the member 'p' of a type (line 3201)
        p_624717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3201, 42), self_624716, 'p')
        # Processing the call keyword arguments (line 3201)
        kwargs_624718 = {}
        # Getting the type of 'self' (line 3201)
        self_624711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 3201)
        _dist_624712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3201, 15), self_624711, '_dist')
        # Obtaining the member 'entropy' of a type (line 3201)
        entropy_624713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3201, 15), _dist_624712, 'entropy')
        # Calling entropy(args, kwargs) (line 3201)
        entropy_call_result_624719 = invoke(stypy.reporting.localization.Localization(__file__, 3201, 15), entropy_624713, *[n_624715, p_624717], **kwargs_624718)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3201, 8), 'stypy_return_type', entropy_call_result_624719)
        
        # ################# End of 'entropy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'entropy' in the type store
        # Getting the type of 'stypy_return_type' (line 3200)
        stypy_return_type_624720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3200, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624720)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'entropy'
        return stypy_return_type_624720


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_624721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3203, 23), 'int')
        # Getting the type of 'None' (line 3203)
        None_624722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3203, 39), 'None')
        defaults = [int_624721, None_624722]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 3203, 4, False)
        # Assigning a type to the variable 'self' (line 3204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3204, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        multinomial_frozen.rvs.__dict__.__setitem__('stypy_localization', localization)
        multinomial_frozen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        multinomial_frozen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        multinomial_frozen.rvs.__dict__.__setitem__('stypy_function_name', 'multinomial_frozen.rvs')
        multinomial_frozen.rvs.__dict__.__setitem__('stypy_param_names_list', ['size', 'random_state'])
        multinomial_frozen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        multinomial_frozen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        multinomial_frozen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        multinomial_frozen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        multinomial_frozen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        multinomial_frozen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'multinomial_frozen.rvs', ['size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        
        # Call to rvs(...): (line 3204)
        # Processing the call arguments (line 3204)
        # Getting the type of 'self' (line 3204)
        self_624726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 30), 'self', False)
        # Obtaining the member 'n' of a type (line 3204)
        n_624727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3204, 30), self_624726, 'n')
        # Getting the type of 'self' (line 3204)
        self_624728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 38), 'self', False)
        # Obtaining the member 'p' of a type (line 3204)
        p_624729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3204, 38), self_624728, 'p')
        # Getting the type of 'size' (line 3204)
        size_624730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 46), 'size', False)
        # Getting the type of 'random_state' (line 3204)
        random_state_624731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 52), 'random_state', False)
        # Processing the call keyword arguments (line 3204)
        kwargs_624732 = {}
        # Getting the type of 'self' (line 3204)
        self_624723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 3204)
        _dist_624724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3204, 15), self_624723, '_dist')
        # Obtaining the member 'rvs' of a type (line 3204)
        rvs_624725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3204, 15), _dist_624724, 'rvs')
        # Calling rvs(args, kwargs) (line 3204)
        rvs_call_result_624733 = invoke(stypy.reporting.localization.Localization(__file__, 3204, 15), rvs_624725, *[n_624727, p_624729, size_624730, random_state_624731], **kwargs_624732)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3204, 8), 'stypy_return_type', rvs_call_result_624733)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 3203)
        stypy_return_type_624734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3203, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624734)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_624734


# Assigning a type to the variable 'multinomial_frozen' (line 3161)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3161, 0), 'multinomial_frozen', multinomial_frozen)


# Obtaining an instance of the builtin type 'list' (line 3208)
list_624735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3208, 12), 'list')
# Adding type elements to the builtin type 'list' instance (line 3208)
# Adding element type (line 3208)
str_624736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3208, 13), 'str', 'logpmf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3208, 12), list_624735, str_624736)
# Adding element type (line 3208)
str_624737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3208, 23), 'str', 'pmf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3208, 12), list_624735, str_624737)
# Adding element type (line 3208)
str_624738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3208, 30), 'str', 'mean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3208, 12), list_624735, str_624738)
# Adding element type (line 3208)
str_624739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3208, 38), 'str', 'cov')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3208, 12), list_624735, str_624739)
# Adding element type (line 3208)
str_624740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3208, 45), 'str', 'rvs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3208, 12), list_624735, str_624740)

# Testing the type of a for loop iterable (line 3208)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3208, 0), list_624735)
# Getting the type of the for loop variable (line 3208)
for_loop_var_624741 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3208, 0), list_624735)
# Assigning a type to the variable 'name' (line 3208)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3208, 0), 'name', for_loop_var_624741)
# SSA begins for a for statement (line 3208)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')

# Assigning a Subscript to a Name (line 3209):

# Assigning a Subscript to a Name (line 3209):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 3209)
name_624742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3209, 38), 'name')
# Getting the type of 'multinomial_gen' (line 3209)
multinomial_gen_624743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3209, 13), 'multinomial_gen')
# Obtaining the member '__dict__' of a type (line 3209)
dict___624744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3209, 13), multinomial_gen_624743, '__dict__')
# Obtaining the member '__getitem__' of a type (line 3209)
getitem___624745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3209, 13), dict___624744, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 3209)
subscript_call_result_624746 = invoke(stypy.reporting.localization.Localization(__file__, 3209, 13), getitem___624745, name_624742)

# Assigning a type to the variable 'method' (line 3209)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3209, 4), 'method', subscript_call_result_624746)

# Assigning a Subscript to a Name (line 3210):

# Assigning a Subscript to a Name (line 3210):

# Obtaining the type of the subscript
# Getting the type of 'name' (line 3210)
name_624747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3210, 48), 'name')
# Getting the type of 'multinomial_frozen' (line 3210)
multinomial_frozen_624748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3210, 20), 'multinomial_frozen')
# Obtaining the member '__dict__' of a type (line 3210)
dict___624749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3210, 20), multinomial_frozen_624748, '__dict__')
# Obtaining the member '__getitem__' of a type (line 3210)
getitem___624750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3210, 20), dict___624749, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 3210)
subscript_call_result_624751 = invoke(stypy.reporting.localization.Localization(__file__, 3210, 20), getitem___624750, name_624747)

# Assigning a type to the variable 'method_frozen' (line 3210)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3210, 4), 'method_frozen', subscript_call_result_624751)

# Assigning a Call to a Attribute (line 3211):

# Assigning a Call to a Attribute (line 3211):

# Call to docformat(...): (line 3211)
# Processing the call arguments (line 3211)
# Getting the type of 'method' (line 3212)
method_624754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3212, 8), 'method', False)
# Obtaining the member '__doc__' of a type (line 3212)
doc___624755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3212, 8), method_624754, '__doc__')
# Getting the type of 'multinomial_docdict_noparams' (line 3212)
multinomial_docdict_noparams_624756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3212, 24), 'multinomial_docdict_noparams', False)
# Processing the call keyword arguments (line 3211)
kwargs_624757 = {}
# Getting the type of 'doccer' (line 3211)
doccer_624752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3211, 28), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 3211)
docformat_624753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3211, 28), doccer_624752, 'docformat')
# Calling docformat(args, kwargs) (line 3211)
docformat_call_result_624758 = invoke(stypy.reporting.localization.Localization(__file__, 3211, 28), docformat_624753, *[doc___624755, multinomial_docdict_noparams_624756], **kwargs_624757)

# Getting the type of 'method_frozen' (line 3211)
method_frozen_624759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3211, 4), 'method_frozen')
# Setting the type of the member '__doc__' of a type (line 3211)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3211, 4), method_frozen_624759, '__doc__', docformat_call_result_624758)

# Assigning a Call to a Attribute (line 3213):

# Assigning a Call to a Attribute (line 3213):

# Call to docformat(...): (line 3213)
# Processing the call arguments (line 3213)
# Getting the type of 'method' (line 3213)
method_624762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3213, 38), 'method', False)
# Obtaining the member '__doc__' of a type (line 3213)
doc___624763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3213, 38), method_624762, '__doc__')
# Getting the type of 'multinomial_docdict_params' (line 3214)
multinomial_docdict_params_624764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 12), 'multinomial_docdict_params', False)
# Processing the call keyword arguments (line 3213)
kwargs_624765 = {}
# Getting the type of 'doccer' (line 3213)
doccer_624760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3213, 21), 'doccer', False)
# Obtaining the member 'docformat' of a type (line 3213)
docformat_624761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3213, 21), doccer_624760, 'docformat')
# Calling docformat(args, kwargs) (line 3213)
docformat_call_result_624766 = invoke(stypy.reporting.localization.Localization(__file__, 3213, 21), docformat_624761, *[doc___624763, multinomial_docdict_params_624764], **kwargs_624765)

# Getting the type of 'method' (line 3213)
method_624767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3213, 4), 'method')
# Setting the type of the member '__doc__' of a type (line 3213)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3213, 4), method_624767, '__doc__', docformat_call_result_624766)
# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()

# Declaration of the 'special_ortho_group_gen' class
# Getting the type of 'multi_rv_generic' (line 3216)
multi_rv_generic_624768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3216, 30), 'multi_rv_generic')

class special_ortho_group_gen(multi_rv_generic_624768, ):
    str_624769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3268, (-1)), 'str', '\n    A matrix-valued SO(N) random variable.\n\n    Return a random rotation matrix, drawn from the Haar distribution\n    (the only uniform distribution on SO(n)).\n\n    The `dim` keyword specifies the dimension N.\n\n    Methods\n    -------\n    ``rvs(dim=None, size=1, random_state=None)``\n        Draw random samples from SO(N).\n\n    Parameters\n    ----------\n    dim : scalar\n        Dimension of matrices\n\n    Notes\n    ----------\n    This class is wrapping the random_rot code from the MDP Toolkit,\n    https://github.com/mdp-toolkit/mdp-toolkit\n\n    Return a random rotation matrix, drawn from the Haar distribution\n    (the only uniform distribution on SO(n)).\n    The algorithm is described in the paper\n    Stewart, G.W., "The efficient generation of random orthogonal\n    matrices with an application to condition estimators", SIAM Journal\n    on Numerical Analysis, 17(3), pp. 403-409, 1980.\n    For more information see\n    http://en.wikipedia.org/wiki/Orthogonal_matrix#Randomization\n\n    See also the similar `ortho_group`.\n\n    Examples\n    --------\n    >>> from scipy.stats import special_ortho_group\n    >>> x = special_ortho_group.rvs(3)\n\n    >>> np.dot(x, x.T)\n    array([[  1.00000000e+00,   1.13231364e-17,  -2.86852790e-16],\n           [  1.13231364e-17,   1.00000000e+00,  -1.46845020e-16],\n           [ -2.86852790e-16,  -1.46845020e-16,   1.00000000e+00]])\n\n    >>> import scipy.linalg\n    >>> scipy.linalg.det(x)\n    1.0\n\n    This generates one random matrix from SO(3). It is orthogonal and\n    has a determinant of 1.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3270)
        None_624770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3270, 28), 'None')
        defaults = [None_624770]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3270, 4, False)
        # Assigning a type to the variable 'self' (line 3271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3271, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'special_ortho_group_gen.__init__', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 3271)
        # Processing the call arguments (line 3271)
        # Getting the type of 'seed' (line 3271)
        seed_624777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3271, 54), 'seed', False)
        # Processing the call keyword arguments (line 3271)
        kwargs_624778 = {}
        
        # Call to super(...): (line 3271)
        # Processing the call arguments (line 3271)
        # Getting the type of 'special_ortho_group_gen' (line 3271)
        special_ortho_group_gen_624772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3271, 14), 'special_ortho_group_gen', False)
        # Getting the type of 'self' (line 3271)
        self_624773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3271, 39), 'self', False)
        # Processing the call keyword arguments (line 3271)
        kwargs_624774 = {}
        # Getting the type of 'super' (line 3271)
        super_624771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3271, 8), 'super', False)
        # Calling super(args, kwargs) (line 3271)
        super_call_result_624775 = invoke(stypy.reporting.localization.Localization(__file__, 3271, 8), super_624771, *[special_ortho_group_gen_624772, self_624773], **kwargs_624774)
        
        # Obtaining the member '__init__' of a type (line 3271)
        init___624776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3271, 8), super_call_result_624775, '__init__')
        # Calling __init__(args, kwargs) (line 3271)
        init___call_result_624779 = invoke(stypy.reporting.localization.Localization(__file__, 3271, 8), init___624776, *[seed_624777], **kwargs_624778)
        
        
        # Assigning a Call to a Attribute (line 3272):
        
        # Assigning a Call to a Attribute (line 3272):
        
        # Call to docformat(...): (line 3272)
        # Processing the call arguments (line 3272)
        # Getting the type of 'self' (line 3272)
        self_624782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 40), 'self', False)
        # Obtaining the member '__doc__' of a type (line 3272)
        doc___624783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3272, 40), self_624782, '__doc__')
        # Processing the call keyword arguments (line 3272)
        kwargs_624784 = {}
        # Getting the type of 'doccer' (line 3272)
        doccer_624780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 23), 'doccer', False)
        # Obtaining the member 'docformat' of a type (line 3272)
        docformat_624781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3272, 23), doccer_624780, 'docformat')
        # Calling docformat(args, kwargs) (line 3272)
        docformat_call_result_624785 = invoke(stypy.reporting.localization.Localization(__file__, 3272, 23), docformat_624781, *[doc___624783], **kwargs_624784)
        
        # Getting the type of 'self' (line 3272)
        self_624786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 3272)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3272, 8), self_624786, '__doc__', docformat_call_result_624785)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3274)
        None_624787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 27), 'None')
        # Getting the type of 'None' (line 3274)
        None_624788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 38), 'None')
        defaults = [None_624787, None_624788]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 3274, 4, False)
        # Assigning a type to the variable 'self' (line 3275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3275, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        special_ortho_group_gen.__call__.__dict__.__setitem__('stypy_localization', localization)
        special_ortho_group_gen.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        special_ortho_group_gen.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        special_ortho_group_gen.__call__.__dict__.__setitem__('stypy_function_name', 'special_ortho_group_gen.__call__')
        special_ortho_group_gen.__call__.__dict__.__setitem__('stypy_param_names_list', ['dim', 'seed'])
        special_ortho_group_gen.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        special_ortho_group_gen.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        special_ortho_group_gen.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        special_ortho_group_gen.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        special_ortho_group_gen.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        special_ortho_group_gen.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'special_ortho_group_gen.__call__', ['dim', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['dim', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_624789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3280, (-1)), 'str', '\n        Create a frozen SO(N) distribution.\n\n        See `special_ortho_group_frozen` for more information.\n\n        ')
        
        # Call to special_ortho_group_frozen(...): (line 3281)
        # Processing the call arguments (line 3281)
        # Getting the type of 'dim' (line 3281)
        dim_624791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 42), 'dim', False)
        # Processing the call keyword arguments (line 3281)
        # Getting the type of 'seed' (line 3281)
        seed_624792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 52), 'seed', False)
        keyword_624793 = seed_624792
        kwargs_624794 = {'seed': keyword_624793}
        # Getting the type of 'special_ortho_group_frozen' (line 3281)
        special_ortho_group_frozen_624790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 15), 'special_ortho_group_frozen', False)
        # Calling special_ortho_group_frozen(args, kwargs) (line 3281)
        special_ortho_group_frozen_call_result_624795 = invoke(stypy.reporting.localization.Localization(__file__, 3281, 15), special_ortho_group_frozen_624790, *[dim_624791], **kwargs_624794)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3281, 8), 'stypy_return_type', special_ortho_group_frozen_call_result_624795)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 3274)
        stypy_return_type_624796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624796)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_624796


    @norecursion
    def _process_parameters(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_parameters'
        module_type_store = module_type_store.open_function_context('_process_parameters', 3283, 4, False)
        # Assigning a type to the variable 'self' (line 3284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3284, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        special_ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_localization', localization)
        special_ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        special_ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_type_store', module_type_store)
        special_ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_function_name', 'special_ortho_group_gen._process_parameters')
        special_ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_param_names_list', ['dim'])
        special_ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_varargs_param_name', None)
        special_ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_kwargs_param_name', None)
        special_ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_call_defaults', defaults)
        special_ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_call_varargs', varargs)
        special_ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        special_ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'special_ortho_group_gen._process_parameters', ['dim'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_parameters', localization, ['dim'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_parameters(...)' code ##################

        str_624797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3286, (-1)), 'str', '\n        Dimension N must be specified; it cannot be inferred.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dim' (line 3288)
        dim_624798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 11), 'dim')
        # Getting the type of 'None' (line 3288)
        None_624799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 18), 'None')
        # Applying the binary operator 'is' (line 3288)
        result_is__624800 = python_operator(stypy.reporting.localization.Localization(__file__, 3288, 11), 'is', dim_624798, None_624799)
        
        
        
        # Call to isscalar(...): (line 3288)
        # Processing the call arguments (line 3288)
        # Getting the type of 'dim' (line 3288)
        dim_624803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 42), 'dim', False)
        # Processing the call keyword arguments (line 3288)
        kwargs_624804 = {}
        # Getting the type of 'np' (line 3288)
        np_624801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 30), 'np', False)
        # Obtaining the member 'isscalar' of a type (line 3288)
        isscalar_624802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3288, 30), np_624801, 'isscalar')
        # Calling isscalar(args, kwargs) (line 3288)
        isscalar_call_result_624805 = invoke(stypy.reporting.localization.Localization(__file__, 3288, 30), isscalar_624802, *[dim_624803], **kwargs_624804)
        
        # Applying the 'not' unary operator (line 3288)
        result_not__624806 = python_operator(stypy.reporting.localization.Localization(__file__, 3288, 26), 'not', isscalar_call_result_624805)
        
        # Applying the binary operator 'or' (line 3288)
        result_or_keyword_624807 = python_operator(stypy.reporting.localization.Localization(__file__, 3288, 11), 'or', result_is__624800, result_not__624806)
        
        # Getting the type of 'dim' (line 3288)
        dim_624808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 50), 'dim')
        int_624809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3288, 57), 'int')
        # Applying the binary operator '<=' (line 3288)
        result_le_624810 = python_operator(stypy.reporting.localization.Localization(__file__, 3288, 50), '<=', dim_624808, int_624809)
        
        # Applying the binary operator 'or' (line 3288)
        result_or_keyword_624811 = python_operator(stypy.reporting.localization.Localization(__file__, 3288, 11), 'or', result_or_keyword_624807, result_le_624810)
        
        # Getting the type of 'dim' (line 3288)
        dim_624812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 62), 'dim')
        
        # Call to int(...): (line 3288)
        # Processing the call arguments (line 3288)
        # Getting the type of 'dim' (line 3288)
        dim_624814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 73), 'dim', False)
        # Processing the call keyword arguments (line 3288)
        kwargs_624815 = {}
        # Getting the type of 'int' (line 3288)
        int_624813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 69), 'int', False)
        # Calling int(args, kwargs) (line 3288)
        int_call_result_624816 = invoke(stypy.reporting.localization.Localization(__file__, 3288, 69), int_624813, *[dim_624814], **kwargs_624815)
        
        # Applying the binary operator '!=' (line 3288)
        result_ne_624817 = python_operator(stypy.reporting.localization.Localization(__file__, 3288, 62), '!=', dim_624812, int_call_result_624816)
        
        # Applying the binary operator 'or' (line 3288)
        result_or_keyword_624818 = python_operator(stypy.reporting.localization.Localization(__file__, 3288, 11), 'or', result_or_keyword_624811, result_ne_624817)
        
        # Testing the type of an if condition (line 3288)
        if_condition_624819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3288, 8), result_or_keyword_624818)
        # Assigning a type to the variable 'if_condition_624819' (line 3288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3288, 8), 'if_condition_624819', if_condition_624819)
        # SSA begins for if statement (line 3288)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3289)
        # Processing the call arguments (line 3289)
        str_624821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3290, (-1)), 'str', 'Dimension of rotation must be specified,\n                                and must be a scalar greater than 1.')
        # Processing the call keyword arguments (line 3289)
        kwargs_624822 = {}
        # Getting the type of 'ValueError' (line 3289)
        ValueError_624820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3289)
        ValueError_call_result_624823 = invoke(stypy.reporting.localization.Localization(__file__, 3289, 18), ValueError_624820, *[str_624821], **kwargs_624822)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3289, 12), ValueError_call_result_624823, 'raise parameter', BaseException)
        # SSA join for if statement (line 3288)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'dim' (line 3292)
        dim_624824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3292, 15), 'dim')
        # Assigning a type to the variable 'stypy_return_type' (line 3292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3292, 8), 'stypy_return_type', dim_624824)
        
        # ################# End of '_process_parameters(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_parameters' in the type store
        # Getting the type of 'stypy_return_type' (line 3283)
        stypy_return_type_624825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3283, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624825)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_parameters'
        return stypy_return_type_624825


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_624826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3294, 28), 'int')
        # Getting the type of 'None' (line 3294)
        None_624827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3294, 44), 'None')
        defaults = [int_624826, None_624827]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 3294, 4, False)
        # Assigning a type to the variable 'self' (line 3295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3295, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        special_ortho_group_gen.rvs.__dict__.__setitem__('stypy_localization', localization)
        special_ortho_group_gen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        special_ortho_group_gen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        special_ortho_group_gen.rvs.__dict__.__setitem__('stypy_function_name', 'special_ortho_group_gen.rvs')
        special_ortho_group_gen.rvs.__dict__.__setitem__('stypy_param_names_list', ['dim', 'size', 'random_state'])
        special_ortho_group_gen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        special_ortho_group_gen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        special_ortho_group_gen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        special_ortho_group_gen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        special_ortho_group_gen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        special_ortho_group_gen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'special_ortho_group_gen.rvs', ['dim', 'size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['dim', 'size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        str_624828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3310, (-1)), 'str', '\n        Draw random samples from SO(N).\n\n        Parameters\n        ----------\n        dim : integer\n            Dimension of rotation space (N).\n        size : integer, optional\n            Number of samples to draw (default 1).\n\n        Returns\n        -------\n        rvs : ndarray or scalar\n            Random size N-dimensional matrices, dimension (size, dim, dim)\n\n        ')
        
        # Assigning a Call to a Name (line 3311):
        
        # Assigning a Call to a Name (line 3311):
        
        # Call to int(...): (line 3311)
        # Processing the call arguments (line 3311)
        # Getting the type of 'size' (line 3311)
        size_624830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3311, 19), 'size', False)
        # Processing the call keyword arguments (line 3311)
        kwargs_624831 = {}
        # Getting the type of 'int' (line 3311)
        int_624829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3311, 15), 'int', False)
        # Calling int(args, kwargs) (line 3311)
        int_call_result_624832 = invoke(stypy.reporting.localization.Localization(__file__, 3311, 15), int_624829, *[size_624830], **kwargs_624831)
        
        # Assigning a type to the variable 'size' (line 3311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3311, 8), 'size', int_call_result_624832)
        
        
        # Getting the type of 'size' (line 3312)
        size_624833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3312, 11), 'size')
        int_624834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3312, 18), 'int')
        # Applying the binary operator '>' (line 3312)
        result_gt_624835 = python_operator(stypy.reporting.localization.Localization(__file__, 3312, 11), '>', size_624833, int_624834)
        
        # Testing the type of an if condition (line 3312)
        if_condition_624836 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3312, 8), result_gt_624835)
        # Assigning a type to the variable 'if_condition_624836' (line 3312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3312, 8), 'if_condition_624836', if_condition_624836)
        # SSA begins for if statement (line 3312)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to array(...): (line 3313)
        # Processing the call arguments (line 3313)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to range(...): (line 3314)
        # Processing the call arguments (line 3314)
        # Getting the type of 'size' (line 3314)
        size_624849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3314, 44), 'size', False)
        # Processing the call keyword arguments (line 3314)
        kwargs_624850 = {}
        # Getting the type of 'range' (line 3314)
        range_624848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3314, 38), 'range', False)
        # Calling range(args, kwargs) (line 3314)
        range_call_result_624851 = invoke(stypy.reporting.localization.Localization(__file__, 3314, 38), range_624848, *[size_624849], **kwargs_624850)
        
        comprehension_624852 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3313, 29), range_call_result_624851)
        # Assigning a type to the variable 'i' (line 3313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3313, 29), 'i', comprehension_624852)
        
        # Call to rvs(...): (line 3313)
        # Processing the call arguments (line 3313)
        # Getting the type of 'dim' (line 3313)
        dim_624841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3313, 38), 'dim', False)
        # Processing the call keyword arguments (line 3313)
        int_624842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3313, 48), 'int')
        keyword_624843 = int_624842
        # Getting the type of 'random_state' (line 3313)
        random_state_624844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3313, 64), 'random_state', False)
        keyword_624845 = random_state_624844
        kwargs_624846 = {'random_state': keyword_624845, 'size': keyword_624843}
        # Getting the type of 'self' (line 3313)
        self_624839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3313, 29), 'self', False)
        # Obtaining the member 'rvs' of a type (line 3313)
        rvs_624840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3313, 29), self_624839, 'rvs')
        # Calling rvs(args, kwargs) (line 3313)
        rvs_call_result_624847 = invoke(stypy.reporting.localization.Localization(__file__, 3313, 29), rvs_624840, *[dim_624841], **kwargs_624846)
        
        list_624853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3313, 29), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3313, 29), list_624853, rvs_call_result_624847)
        # Processing the call keyword arguments (line 3313)
        kwargs_624854 = {}
        # Getting the type of 'np' (line 3313)
        np_624837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3313, 19), 'np', False)
        # Obtaining the member 'array' of a type (line 3313)
        array_624838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3313, 19), np_624837, 'array')
        # Calling array(args, kwargs) (line 3313)
        array_call_result_624855 = invoke(stypy.reporting.localization.Localization(__file__, 3313, 19), array_624838, *[list_624853], **kwargs_624854)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3313, 12), 'stypy_return_type', array_call_result_624855)
        # SSA join for if statement (line 3312)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3316):
        
        # Assigning a Call to a Name (line 3316):
        
        # Call to _process_parameters(...): (line 3316)
        # Processing the call arguments (line 3316)
        # Getting the type of 'dim' (line 3316)
        dim_624858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3316, 39), 'dim', False)
        # Processing the call keyword arguments (line 3316)
        kwargs_624859 = {}
        # Getting the type of 'self' (line 3316)
        self_624856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3316, 14), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3316)
        _process_parameters_624857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3316, 14), self_624856, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3316)
        _process_parameters_call_result_624860 = invoke(stypy.reporting.localization.Localization(__file__, 3316, 14), _process_parameters_624857, *[dim_624858], **kwargs_624859)
        
        # Assigning a type to the variable 'dim' (line 3316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3316, 8), 'dim', _process_parameters_call_result_624860)
        
        # Assigning a Call to a Name (line 3318):
        
        # Assigning a Call to a Name (line 3318):
        
        # Call to _get_random_state(...): (line 3318)
        # Processing the call arguments (line 3318)
        # Getting the type of 'random_state' (line 3318)
        random_state_624863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3318, 46), 'random_state', False)
        # Processing the call keyword arguments (line 3318)
        kwargs_624864 = {}
        # Getting the type of 'self' (line 3318)
        self_624861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3318, 23), 'self', False)
        # Obtaining the member '_get_random_state' of a type (line 3318)
        _get_random_state_624862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3318, 23), self_624861, '_get_random_state')
        # Calling _get_random_state(args, kwargs) (line 3318)
        _get_random_state_call_result_624865 = invoke(stypy.reporting.localization.Localization(__file__, 3318, 23), _get_random_state_624862, *[random_state_624863], **kwargs_624864)
        
        # Assigning a type to the variable 'random_state' (line 3318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3318, 8), 'random_state', _get_random_state_call_result_624865)
        
        # Assigning a Call to a Name (line 3320):
        
        # Assigning a Call to a Name (line 3320):
        
        # Call to eye(...): (line 3320)
        # Processing the call arguments (line 3320)
        # Getting the type of 'dim' (line 3320)
        dim_624868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3320, 19), 'dim', False)
        # Processing the call keyword arguments (line 3320)
        kwargs_624869 = {}
        # Getting the type of 'np' (line 3320)
        np_624866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3320, 12), 'np', False)
        # Obtaining the member 'eye' of a type (line 3320)
        eye_624867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3320, 12), np_624866, 'eye')
        # Calling eye(args, kwargs) (line 3320)
        eye_call_result_624870 = invoke(stypy.reporting.localization.Localization(__file__, 3320, 12), eye_624867, *[dim_624868], **kwargs_624869)
        
        # Assigning a type to the variable 'H' (line 3320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3320, 8), 'H', eye_call_result_624870)
        
        # Assigning a Call to a Name (line 3321):
        
        # Assigning a Call to a Name (line 3321):
        
        # Call to ones(...): (line 3321)
        # Processing the call arguments (line 3321)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3321)
        tuple_624873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3321, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3321)
        # Adding element type (line 3321)
        # Getting the type of 'dim' (line 3321)
        dim_624874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3321, 21), 'dim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3321, 21), tuple_624873, dim_624874)
        
        # Processing the call keyword arguments (line 3321)
        kwargs_624875 = {}
        # Getting the type of 'np' (line 3321)
        np_624871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3321, 12), 'np', False)
        # Obtaining the member 'ones' of a type (line 3321)
        ones_624872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3321, 12), np_624871, 'ones')
        # Calling ones(args, kwargs) (line 3321)
        ones_call_result_624876 = invoke(stypy.reporting.localization.Localization(__file__, 3321, 12), ones_624872, *[tuple_624873], **kwargs_624875)
        
        # Assigning a type to the variable 'D' (line 3321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3321, 8), 'D', ones_call_result_624876)
        
        
        # Call to range(...): (line 3322)
        # Processing the call arguments (line 3322)
        int_624878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3322, 23), 'int')
        # Getting the type of 'dim' (line 3322)
        dim_624879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3322, 26), 'dim', False)
        # Processing the call keyword arguments (line 3322)
        kwargs_624880 = {}
        # Getting the type of 'range' (line 3322)
        range_624877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3322, 17), 'range', False)
        # Calling range(args, kwargs) (line 3322)
        range_call_result_624881 = invoke(stypy.reporting.localization.Localization(__file__, 3322, 17), range_624877, *[int_624878, dim_624879], **kwargs_624880)
        
        # Testing the type of a for loop iterable (line 3322)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3322, 8), range_call_result_624881)
        # Getting the type of the for loop variable (line 3322)
        for_loop_var_624882 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3322, 8), range_call_result_624881)
        # Assigning a type to the variable 'n' (line 3322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3322, 8), 'n', for_loop_var_624882)
        # SSA begins for a for statement (line 3322)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 3323):
        
        # Assigning a Call to a Name (line 3323):
        
        # Call to normal(...): (line 3323)
        # Processing the call keyword arguments (line 3323)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3323)
        tuple_624885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3323, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3323)
        # Adding element type (line 3323)
        # Getting the type of 'dim' (line 3323)
        dim_624886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3323, 42), 'dim', False)
        # Getting the type of 'n' (line 3323)
        n_624887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3323, 46), 'n', False)
        # Applying the binary operator '-' (line 3323)
        result_sub_624888 = python_operator(stypy.reporting.localization.Localization(__file__, 3323, 42), '-', dim_624886, n_624887)
        
        int_624889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3323, 48), 'int')
        # Applying the binary operator '+' (line 3323)
        result_add_624890 = python_operator(stypy.reporting.localization.Localization(__file__, 3323, 47), '+', result_sub_624888, int_624889)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3323, 42), tuple_624885, result_add_624890)
        
        keyword_624891 = tuple_624885
        kwargs_624892 = {'size': keyword_624891}
        # Getting the type of 'random_state' (line 3323)
        random_state_624883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3323, 16), 'random_state', False)
        # Obtaining the member 'normal' of a type (line 3323)
        normal_624884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3323, 16), random_state_624883, 'normal')
        # Calling normal(args, kwargs) (line 3323)
        normal_call_result_624893 = invoke(stypy.reporting.localization.Localization(__file__, 3323, 16), normal_624884, *[], **kwargs_624892)
        
        # Assigning a type to the variable 'x' (line 3323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3323, 12), 'x', normal_call_result_624893)
        
        # Assigning a Call to a Subscript (line 3325):
        
        # Assigning a Call to a Subscript (line 3325):
        
        # Call to sign(...): (line 3325)
        # Processing the call arguments (line 3325)
        
        # Obtaining the type of the subscript
        int_624896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3325, 31), 'int')
        # Getting the type of 'x' (line 3325)
        x_624897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 29), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 3325)
        getitem___624898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3325, 29), x_624897, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3325)
        subscript_call_result_624899 = invoke(stypy.reporting.localization.Localization(__file__, 3325, 29), getitem___624898, int_624896)
        
        # Processing the call keyword arguments (line 3325)
        kwargs_624900 = {}
        # Getting the type of 'np' (line 3325)
        np_624894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 21), 'np', False)
        # Obtaining the member 'sign' of a type (line 3325)
        sign_624895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3325, 21), np_624894, 'sign')
        # Calling sign(args, kwargs) (line 3325)
        sign_call_result_624901 = invoke(stypy.reporting.localization.Localization(__file__, 3325, 21), sign_624895, *[subscript_call_result_624899], **kwargs_624900)
        
        # Getting the type of 'D' (line 3325)
        D_624902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 12), 'D')
        # Getting the type of 'n' (line 3325)
        n_624903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 14), 'n')
        int_624904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3325, 16), 'int')
        # Applying the binary operator '-' (line 3325)
        result_sub_624905 = python_operator(stypy.reporting.localization.Localization(__file__, 3325, 14), '-', n_624903, int_624904)
        
        # Storing an element on a container (line 3325)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3325, 12), D_624902, (result_sub_624905, sign_call_result_624901))
        
        # Getting the type of 'x' (line 3326)
        x_624906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 12), 'x')
        
        # Obtaining the type of the subscript
        int_624907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3326, 14), 'int')
        # Getting the type of 'x' (line 3326)
        x_624908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 12), 'x')
        # Obtaining the member '__getitem__' of a type (line 3326)
        getitem___624909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3326, 12), x_624908, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3326)
        subscript_call_result_624910 = invoke(stypy.reporting.localization.Localization(__file__, 3326, 12), getitem___624909, int_624907)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 3326)
        n_624911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 22), 'n')
        int_624912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3326, 24), 'int')
        # Applying the binary operator '-' (line 3326)
        result_sub_624913 = python_operator(stypy.reporting.localization.Localization(__file__, 3326, 22), '-', n_624911, int_624912)
        
        # Getting the type of 'D' (line 3326)
        D_624914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 20), 'D')
        # Obtaining the member '__getitem__' of a type (line 3326)
        getitem___624915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3326, 20), D_624914, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3326)
        subscript_call_result_624916 = invoke(stypy.reporting.localization.Localization(__file__, 3326, 20), getitem___624915, result_sub_624913)
        
        
        # Call to sqrt(...): (line 3326)
        # Processing the call arguments (line 3326)
        
        # Call to sum(...): (line 3326)
        # Processing the call keyword arguments (line 3326)
        kwargs_624923 = {}
        # Getting the type of 'x' (line 3326)
        x_624919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 36), 'x', False)
        # Getting the type of 'x' (line 3326)
        x_624920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 38), 'x', False)
        # Applying the binary operator '*' (line 3326)
        result_mul_624921 = python_operator(stypy.reporting.localization.Localization(__file__, 3326, 36), '*', x_624919, x_624920)
        
        # Obtaining the member 'sum' of a type (line 3326)
        sum_624922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3326, 36), result_mul_624921, 'sum')
        # Calling sum(args, kwargs) (line 3326)
        sum_call_result_624924 = invoke(stypy.reporting.localization.Localization(__file__, 3326, 36), sum_624922, *[], **kwargs_624923)
        
        # Processing the call keyword arguments (line 3326)
        kwargs_624925 = {}
        # Getting the type of 'np' (line 3326)
        np_624917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 27), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 3326)
        sqrt_624918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3326, 27), np_624917, 'sqrt')
        # Calling sqrt(args, kwargs) (line 3326)
        sqrt_call_result_624926 = invoke(stypy.reporting.localization.Localization(__file__, 3326, 27), sqrt_624918, *[sum_call_result_624924], **kwargs_624925)
        
        # Applying the binary operator '*' (line 3326)
        result_mul_624927 = python_operator(stypy.reporting.localization.Localization(__file__, 3326, 20), '*', subscript_call_result_624916, sqrt_call_result_624926)
        
        # Applying the binary operator '-=' (line 3326)
        result_isub_624928 = python_operator(stypy.reporting.localization.Localization(__file__, 3326, 12), '-=', subscript_call_result_624910, result_mul_624927)
        # Getting the type of 'x' (line 3326)
        x_624929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 12), 'x')
        int_624930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3326, 14), 'int')
        # Storing an element on a container (line 3326)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3326, 12), x_624929, (int_624930, result_isub_624928))
        
        
        # Assigning a BinOp to a Name (line 3328):
        
        # Assigning a BinOp to a Name (line 3328):
        
        # Call to eye(...): (line 3328)
        # Processing the call arguments (line 3328)
        # Getting the type of 'dim' (line 3328)
        dim_624933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3328, 25), 'dim', False)
        # Getting the type of 'n' (line 3328)
        n_624934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3328, 29), 'n', False)
        # Applying the binary operator '-' (line 3328)
        result_sub_624935 = python_operator(stypy.reporting.localization.Localization(__file__, 3328, 25), '-', dim_624933, n_624934)
        
        int_624936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3328, 31), 'int')
        # Applying the binary operator '+' (line 3328)
        result_add_624937 = python_operator(stypy.reporting.localization.Localization(__file__, 3328, 30), '+', result_sub_624935, int_624936)
        
        # Processing the call keyword arguments (line 3328)
        kwargs_624938 = {}
        # Getting the type of 'np' (line 3328)
        np_624931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3328, 18), 'np', False)
        # Obtaining the member 'eye' of a type (line 3328)
        eye_624932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3328, 18), np_624931, 'eye')
        # Calling eye(args, kwargs) (line 3328)
        eye_call_result_624939 = invoke(stypy.reporting.localization.Localization(__file__, 3328, 18), eye_624932, *[result_add_624937], **kwargs_624938)
        
        float_624940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3329, 20), 'float')
        
        # Call to outer(...): (line 3329)
        # Processing the call arguments (line 3329)
        # Getting the type of 'x' (line 3329)
        x_624943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3329, 32), 'x', False)
        # Getting the type of 'x' (line 3329)
        x_624944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3329, 35), 'x', False)
        # Processing the call keyword arguments (line 3329)
        kwargs_624945 = {}
        # Getting the type of 'np' (line 3329)
        np_624941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3329, 23), 'np', False)
        # Obtaining the member 'outer' of a type (line 3329)
        outer_624942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3329, 23), np_624941, 'outer')
        # Calling outer(args, kwargs) (line 3329)
        outer_call_result_624946 = invoke(stypy.reporting.localization.Localization(__file__, 3329, 23), outer_624942, *[x_624943, x_624944], **kwargs_624945)
        
        # Applying the binary operator '*' (line 3329)
        result_mul_624947 = python_operator(stypy.reporting.localization.Localization(__file__, 3329, 20), '*', float_624940, outer_call_result_624946)
        
        
        # Call to sum(...): (line 3329)
        # Processing the call keyword arguments (line 3329)
        kwargs_624952 = {}
        # Getting the type of 'x' (line 3329)
        x_624948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3329, 39), 'x', False)
        # Getting the type of 'x' (line 3329)
        x_624949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3329, 41), 'x', False)
        # Applying the binary operator '*' (line 3329)
        result_mul_624950 = python_operator(stypy.reporting.localization.Localization(__file__, 3329, 39), '*', x_624948, x_624949)
        
        # Obtaining the member 'sum' of a type (line 3329)
        sum_624951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3329, 39), result_mul_624950, 'sum')
        # Calling sum(args, kwargs) (line 3329)
        sum_call_result_624953 = invoke(stypy.reporting.localization.Localization(__file__, 3329, 39), sum_624951, *[], **kwargs_624952)
        
        # Applying the binary operator 'div' (line 3329)
        result_div_624954 = python_operator(stypy.reporting.localization.Localization(__file__, 3329, 37), 'div', result_mul_624947, sum_call_result_624953)
        
        # Applying the binary operator '-' (line 3328)
        result_sub_624955 = python_operator(stypy.reporting.localization.Localization(__file__, 3328, 18), '-', eye_call_result_624939, result_div_624954)
        
        # Assigning a type to the variable 'Hx' (line 3328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3328, 12), 'Hx', result_sub_624955)
        
        # Assigning a Call to a Name (line 3330):
        
        # Assigning a Call to a Name (line 3330):
        
        # Call to eye(...): (line 3330)
        # Processing the call arguments (line 3330)
        # Getting the type of 'dim' (line 3330)
        dim_624958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3330, 25), 'dim', False)
        # Processing the call keyword arguments (line 3330)
        kwargs_624959 = {}
        # Getting the type of 'np' (line 3330)
        np_624956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3330, 18), 'np', False)
        # Obtaining the member 'eye' of a type (line 3330)
        eye_624957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3330, 18), np_624956, 'eye')
        # Calling eye(args, kwargs) (line 3330)
        eye_call_result_624960 = invoke(stypy.reporting.localization.Localization(__file__, 3330, 18), eye_624957, *[dim_624958], **kwargs_624959)
        
        # Assigning a type to the variable 'mat' (line 3330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3330, 12), 'mat', eye_call_result_624960)
        
        # Assigning a Name to a Subscript (line 3331):
        
        # Assigning a Name to a Subscript (line 3331):
        # Getting the type of 'Hx' (line 3331)
        Hx_624961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 30), 'Hx')
        # Getting the type of 'mat' (line 3331)
        mat_624962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 12), 'mat')
        # Getting the type of 'n' (line 3331)
        n_624963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 16), 'n')
        int_624964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3331, 18), 'int')
        # Applying the binary operator '-' (line 3331)
        result_sub_624965 = python_operator(stypy.reporting.localization.Localization(__file__, 3331, 16), '-', n_624963, int_624964)
        
        slice_624966 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3331, 12), result_sub_624965, None, None)
        # Getting the type of 'n' (line 3331)
        n_624967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 22), 'n')
        int_624968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3331, 24), 'int')
        # Applying the binary operator '-' (line 3331)
        result_sub_624969 = python_operator(stypy.reporting.localization.Localization(__file__, 3331, 22), '-', n_624967, int_624968)
        
        slice_624970 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3331, 12), result_sub_624969, None, None)
        # Storing an element on a container (line 3331)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3331, 12), mat_624962, ((slice_624966, slice_624970), Hx_624961))
        
        # Assigning a Call to a Name (line 3332):
        
        # Assigning a Call to a Name (line 3332):
        
        # Call to dot(...): (line 3332)
        # Processing the call arguments (line 3332)
        # Getting the type of 'H' (line 3332)
        H_624973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3332, 23), 'H', False)
        # Getting the type of 'mat' (line 3332)
        mat_624974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3332, 26), 'mat', False)
        # Processing the call keyword arguments (line 3332)
        kwargs_624975 = {}
        # Getting the type of 'np' (line 3332)
        np_624971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3332, 16), 'np', False)
        # Obtaining the member 'dot' of a type (line 3332)
        dot_624972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3332, 16), np_624971, 'dot')
        # Calling dot(args, kwargs) (line 3332)
        dot_call_result_624976 = invoke(stypy.reporting.localization.Localization(__file__, 3332, 16), dot_624972, *[H_624973, mat_624974], **kwargs_624975)
        
        # Assigning a type to the variable 'H' (line 3332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3332, 12), 'H', dot_call_result_624976)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Subscript (line 3334):
        
        # Assigning a BinOp to a Subscript (line 3334):
        int_624977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3334, 17), 'int')
        int_624978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3334, 23), 'int')
        # Getting the type of 'dim' (line 3334)
        dim_624979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3334, 26), 'dim')
        int_624980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3334, 32), 'int')
        # Applying the binary operator '%' (line 3334)
        result_mod_624981 = python_operator(stypy.reporting.localization.Localization(__file__, 3334, 26), '%', dim_624979, int_624980)
        
        # Applying the binary operator '-' (line 3334)
        result_sub_624982 = python_operator(stypy.reporting.localization.Localization(__file__, 3334, 23), '-', int_624978, result_mod_624981)
        
        # Applying the binary operator '**' (line 3334)
        result_pow_624983 = python_operator(stypy.reporting.localization.Localization(__file__, 3334, 16), '**', int_624977, result_sub_624982)
        
        
        # Call to prod(...): (line 3334)
        # Processing the call keyword arguments (line 3334)
        kwargs_624986 = {}
        # Getting the type of 'D' (line 3334)
        D_624984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3334, 36), 'D', False)
        # Obtaining the member 'prod' of a type (line 3334)
        prod_624985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3334, 36), D_624984, 'prod')
        # Calling prod(args, kwargs) (line 3334)
        prod_call_result_624987 = invoke(stypy.reporting.localization.Localization(__file__, 3334, 36), prod_624985, *[], **kwargs_624986)
        
        # Applying the binary operator '*' (line 3334)
        result_mul_624988 = python_operator(stypy.reporting.localization.Localization(__file__, 3334, 16), '*', result_pow_624983, prod_call_result_624987)
        
        # Getting the type of 'D' (line 3334)
        D_624989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3334, 8), 'D')
        int_624990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3334, 10), 'int')
        # Storing an element on a container (line 3334)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3334, 8), D_624989, (int_624990, result_mul_624988))
        
        # Assigning a Attribute to a Name (line 3336):
        
        # Assigning a Attribute to a Name (line 3336):
        # Getting the type of 'D' (line 3336)
        D_624991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 13), 'D')
        # Getting the type of 'H' (line 3336)
        H_624992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 15), 'H')
        # Obtaining the member 'T' of a type (line 3336)
        T_624993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3336, 15), H_624992, 'T')
        # Applying the binary operator '*' (line 3336)
        result_mul_624994 = python_operator(stypy.reporting.localization.Localization(__file__, 3336, 13), '*', D_624991, T_624993)
        
        # Obtaining the member 'T' of a type (line 3336)
        T_624995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3336, 13), result_mul_624994, 'T')
        # Assigning a type to the variable 'H' (line 3336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3336, 8), 'H', T_624995)
        # Getting the type of 'H' (line 3337)
        H_624996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 15), 'H')
        # Assigning a type to the variable 'stypy_return_type' (line 3337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3337, 8), 'stypy_return_type', H_624996)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 3294)
        stypy_return_type_624997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3294, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_624997)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_624997


# Assigning a type to the variable 'special_ortho_group_gen' (line 3216)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3216, 0), 'special_ortho_group_gen', special_ortho_group_gen)

# Assigning a Call to a Name (line 3339):

# Assigning a Call to a Name (line 3339):

# Call to special_ortho_group_gen(...): (line 3339)
# Processing the call keyword arguments (line 3339)
kwargs_624999 = {}
# Getting the type of 'special_ortho_group_gen' (line 3339)
special_ortho_group_gen_624998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 22), 'special_ortho_group_gen', False)
# Calling special_ortho_group_gen(args, kwargs) (line 3339)
special_ortho_group_gen_call_result_625000 = invoke(stypy.reporting.localization.Localization(__file__, 3339, 22), special_ortho_group_gen_624998, *[], **kwargs_624999)

# Assigning a type to the variable 'special_ortho_group' (line 3339)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3339, 0), 'special_ortho_group', special_ortho_group_gen_call_result_625000)
# Declaration of the 'special_ortho_group_frozen' class
# Getting the type of 'multi_rv_frozen' (line 3341)
multi_rv_frozen_625001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3341, 33), 'multi_rv_frozen')

class special_ortho_group_frozen(multi_rv_frozen_625001, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3342)
        None_625002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 27), 'None')
        # Getting the type of 'None' (line 3342)
        None_625003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 38), 'None')
        defaults = [None_625002, None_625003]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3342, 4, False)
        # Assigning a type to the variable 'self' (line 3343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3343, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'special_ortho_group_frozen.__init__', ['dim', 'seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['dim', 'seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_625004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3363, (-1)), 'str', '\n        Create a frozen SO(N) distribution.\n\n        Parameters\n        ----------\n        dim : scalar\n            Dimension of matrices\n        seed : None or int or np.random.RandomState instance, optional\n            This parameter defines the RandomState object to use for drawing\n            random variates.\n            If None (or np.random), the global np.random state is used.\n            If integer, it is used to seed the local RandomState instance\n            Default is None.\n\n        Examples\n        --------\n        >>> from scipy.stats import special_ortho_group\n        >>> g = special_ortho_group(5)\n        >>> x = g.rvs()\n\n        ')
        
        # Assigning a Call to a Attribute (line 3364):
        
        # Assigning a Call to a Attribute (line 3364):
        
        # Call to special_ortho_group_gen(...): (line 3364)
        # Processing the call arguments (line 3364)
        # Getting the type of 'seed' (line 3364)
        seed_625006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3364, 45), 'seed', False)
        # Processing the call keyword arguments (line 3364)
        kwargs_625007 = {}
        # Getting the type of 'special_ortho_group_gen' (line 3364)
        special_ortho_group_gen_625005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3364, 21), 'special_ortho_group_gen', False)
        # Calling special_ortho_group_gen(args, kwargs) (line 3364)
        special_ortho_group_gen_call_result_625008 = invoke(stypy.reporting.localization.Localization(__file__, 3364, 21), special_ortho_group_gen_625005, *[seed_625006], **kwargs_625007)
        
        # Getting the type of 'self' (line 3364)
        self_625009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3364, 8), 'self')
        # Setting the type of the member '_dist' of a type (line 3364)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3364, 8), self_625009, '_dist', special_ortho_group_gen_call_result_625008)
        
        # Assigning a Call to a Attribute (line 3365):
        
        # Assigning a Call to a Attribute (line 3365):
        
        # Call to _process_parameters(...): (line 3365)
        # Processing the call arguments (line 3365)
        # Getting the type of 'dim' (line 3365)
        dim_625013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 50), 'dim', False)
        # Processing the call keyword arguments (line 3365)
        kwargs_625014 = {}
        # Getting the type of 'self' (line 3365)
        self_625010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 19), 'self', False)
        # Obtaining the member '_dist' of a type (line 3365)
        _dist_625011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3365, 19), self_625010, '_dist')
        # Obtaining the member '_process_parameters' of a type (line 3365)
        _process_parameters_625012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3365, 19), _dist_625011, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3365)
        _process_parameters_call_result_625015 = invoke(stypy.reporting.localization.Localization(__file__, 3365, 19), _process_parameters_625012, *[dim_625013], **kwargs_625014)
        
        # Getting the type of 'self' (line 3365)
        self_625016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 8), 'self')
        # Setting the type of the member 'dim' of a type (line 3365)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3365, 8), self_625016, 'dim', _process_parameters_call_result_625015)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_625017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3367, 23), 'int')
        # Getting the type of 'None' (line 3367)
        None_625018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3367, 39), 'None')
        defaults = [int_625017, None_625018]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 3367, 4, False)
        # Assigning a type to the variable 'self' (line 3368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3368, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        special_ortho_group_frozen.rvs.__dict__.__setitem__('stypy_localization', localization)
        special_ortho_group_frozen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        special_ortho_group_frozen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        special_ortho_group_frozen.rvs.__dict__.__setitem__('stypy_function_name', 'special_ortho_group_frozen.rvs')
        special_ortho_group_frozen.rvs.__dict__.__setitem__('stypy_param_names_list', ['size', 'random_state'])
        special_ortho_group_frozen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        special_ortho_group_frozen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        special_ortho_group_frozen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        special_ortho_group_frozen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        special_ortho_group_frozen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        special_ortho_group_frozen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'special_ortho_group_frozen.rvs', ['size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        
        # Call to rvs(...): (line 3368)
        # Processing the call arguments (line 3368)
        # Getting the type of 'self' (line 3368)
        self_625022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3368, 30), 'self', False)
        # Obtaining the member 'dim' of a type (line 3368)
        dim_625023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3368, 30), self_625022, 'dim')
        # Getting the type of 'size' (line 3368)
        size_625024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3368, 40), 'size', False)
        # Getting the type of 'random_state' (line 3368)
        random_state_625025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3368, 46), 'random_state', False)
        # Processing the call keyword arguments (line 3368)
        kwargs_625026 = {}
        # Getting the type of 'self' (line 3368)
        self_625019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3368, 15), 'self', False)
        # Obtaining the member '_dist' of a type (line 3368)
        _dist_625020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3368, 15), self_625019, '_dist')
        # Obtaining the member 'rvs' of a type (line 3368)
        rvs_625021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3368, 15), _dist_625020, 'rvs')
        # Calling rvs(args, kwargs) (line 3368)
        rvs_call_result_625027 = invoke(stypy.reporting.localization.Localization(__file__, 3368, 15), rvs_625021, *[dim_625023, size_625024, random_state_625025], **kwargs_625026)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3368, 8), 'stypy_return_type', rvs_call_result_625027)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 3367)
        stypy_return_type_625028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3367, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_625028)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_625028


# Assigning a type to the variable 'special_ortho_group_frozen' (line 3341)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3341, 0), 'special_ortho_group_frozen', special_ortho_group_frozen)
# Declaration of the 'ortho_group_gen' class
# Getting the type of 'multi_rv_generic' (line 3370)
multi_rv_generic_625029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3370, 22), 'multi_rv_generic')

class ortho_group_gen(multi_rv_generic_625029, ):
    str_625030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3417, (-1)), 'str', '\n    A matrix-valued O(N) random variable.\n\n    Return a random orthogonal matrix, drawn from the O(N) Haar\n    distribution (the only uniform distribution on O(N)).\n\n    The `dim` keyword specifies the dimension N.\n\n    Methods\n    -------\n    ``rvs(dim=None, size=1, random_state=None)``\n        Draw random samples from O(N).\n\n    Parameters\n    ----------\n    dim : scalar\n        Dimension of matrices\n\n    Notes\n    ----------\n    This class is closely related to `special_ortho_group`.\n\n    Some care is taken to avoid numerical error, as per the paper by Mezzadri.\n\n    References\n    ----------\n    .. [1] F. Mezzadri, "How to generate random matrices from the classical\n           compact groups", :arXiv:`math-ph/0609050v2`.\n\n    Examples\n    --------\n    >>> from scipy.stats import ortho_group\n    >>> x = ortho_group.rvs(3)\n\n    >>> np.dot(x, x.T)\n    array([[  1.00000000e+00,   1.13231364e-17,  -2.86852790e-16],\n           [  1.13231364e-17,   1.00000000e+00,  -1.46845020e-16],\n           [ -2.86852790e-16,  -1.46845020e-16,   1.00000000e+00]])\n\n    >>> import scipy.linalg\n    >>> np.fabs(scipy.linalg.det(x))\n    1.0\n\n    This generates one random matrix from O(3). It is orthogonal and\n    has a determinant of +1 or -1.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3419)
        None_625031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3419, 28), 'None')
        defaults = [None_625031]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3419, 4, False)
        # Assigning a type to the variable 'self' (line 3420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3420, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ortho_group_gen.__init__', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 3420)
        # Processing the call arguments (line 3420)
        # Getting the type of 'seed' (line 3420)
        seed_625038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 46), 'seed', False)
        # Processing the call keyword arguments (line 3420)
        kwargs_625039 = {}
        
        # Call to super(...): (line 3420)
        # Processing the call arguments (line 3420)
        # Getting the type of 'ortho_group_gen' (line 3420)
        ortho_group_gen_625033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 14), 'ortho_group_gen', False)
        # Getting the type of 'self' (line 3420)
        self_625034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 31), 'self', False)
        # Processing the call keyword arguments (line 3420)
        kwargs_625035 = {}
        # Getting the type of 'super' (line 3420)
        super_625032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 8), 'super', False)
        # Calling super(args, kwargs) (line 3420)
        super_call_result_625036 = invoke(stypy.reporting.localization.Localization(__file__, 3420, 8), super_625032, *[ortho_group_gen_625033, self_625034], **kwargs_625035)
        
        # Obtaining the member '__init__' of a type (line 3420)
        init___625037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3420, 8), super_call_result_625036, '__init__')
        # Calling __init__(args, kwargs) (line 3420)
        init___call_result_625040 = invoke(stypy.reporting.localization.Localization(__file__, 3420, 8), init___625037, *[seed_625038], **kwargs_625039)
        
        
        # Assigning a Call to a Attribute (line 3421):
        
        # Assigning a Call to a Attribute (line 3421):
        
        # Call to docformat(...): (line 3421)
        # Processing the call arguments (line 3421)
        # Getting the type of 'self' (line 3421)
        self_625043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3421, 40), 'self', False)
        # Obtaining the member '__doc__' of a type (line 3421)
        doc___625044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3421, 40), self_625043, '__doc__')
        # Processing the call keyword arguments (line 3421)
        kwargs_625045 = {}
        # Getting the type of 'doccer' (line 3421)
        doccer_625041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3421, 23), 'doccer', False)
        # Obtaining the member 'docformat' of a type (line 3421)
        docformat_625042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3421, 23), doccer_625041, 'docformat')
        # Calling docformat(args, kwargs) (line 3421)
        docformat_call_result_625046 = invoke(stypy.reporting.localization.Localization(__file__, 3421, 23), docformat_625042, *[doc___625044], **kwargs_625045)
        
        # Getting the type of 'self' (line 3421)
        self_625047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3421, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 3421)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3421, 8), self_625047, '__doc__', docformat_call_result_625046)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _process_parameters(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_parameters'
        module_type_store = module_type_store.open_function_context('_process_parameters', 3423, 4, False)
        # Assigning a type to the variable 'self' (line 3424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3424, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_localization', localization)
        ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_type_store', module_type_store)
        ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_function_name', 'ortho_group_gen._process_parameters')
        ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_param_names_list', ['dim'])
        ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_varargs_param_name', None)
        ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_call_defaults', defaults)
        ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_call_varargs', varargs)
        ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ortho_group_gen._process_parameters.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ortho_group_gen._process_parameters', ['dim'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_parameters', localization, ['dim'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_parameters(...)' code ##################

        str_625048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3426, (-1)), 'str', '\n        Dimension N must be specified; it cannot be inferred.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dim' (line 3428)
        dim_625049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 11), 'dim')
        # Getting the type of 'None' (line 3428)
        None_625050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 18), 'None')
        # Applying the binary operator 'is' (line 3428)
        result_is__625051 = python_operator(stypy.reporting.localization.Localization(__file__, 3428, 11), 'is', dim_625049, None_625050)
        
        
        
        # Call to isscalar(...): (line 3428)
        # Processing the call arguments (line 3428)
        # Getting the type of 'dim' (line 3428)
        dim_625054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 42), 'dim', False)
        # Processing the call keyword arguments (line 3428)
        kwargs_625055 = {}
        # Getting the type of 'np' (line 3428)
        np_625052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 30), 'np', False)
        # Obtaining the member 'isscalar' of a type (line 3428)
        isscalar_625053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3428, 30), np_625052, 'isscalar')
        # Calling isscalar(args, kwargs) (line 3428)
        isscalar_call_result_625056 = invoke(stypy.reporting.localization.Localization(__file__, 3428, 30), isscalar_625053, *[dim_625054], **kwargs_625055)
        
        # Applying the 'not' unary operator (line 3428)
        result_not__625057 = python_operator(stypy.reporting.localization.Localization(__file__, 3428, 26), 'not', isscalar_call_result_625056)
        
        # Applying the binary operator 'or' (line 3428)
        result_or_keyword_625058 = python_operator(stypy.reporting.localization.Localization(__file__, 3428, 11), 'or', result_is__625051, result_not__625057)
        
        # Getting the type of 'dim' (line 3428)
        dim_625059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 50), 'dim')
        int_625060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3428, 57), 'int')
        # Applying the binary operator '<=' (line 3428)
        result_le_625061 = python_operator(stypy.reporting.localization.Localization(__file__, 3428, 50), '<=', dim_625059, int_625060)
        
        # Applying the binary operator 'or' (line 3428)
        result_or_keyword_625062 = python_operator(stypy.reporting.localization.Localization(__file__, 3428, 11), 'or', result_or_keyword_625058, result_le_625061)
        
        # Getting the type of 'dim' (line 3428)
        dim_625063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 62), 'dim')
        
        # Call to int(...): (line 3428)
        # Processing the call arguments (line 3428)
        # Getting the type of 'dim' (line 3428)
        dim_625065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 73), 'dim', False)
        # Processing the call keyword arguments (line 3428)
        kwargs_625066 = {}
        # Getting the type of 'int' (line 3428)
        int_625064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 69), 'int', False)
        # Calling int(args, kwargs) (line 3428)
        int_call_result_625067 = invoke(stypy.reporting.localization.Localization(__file__, 3428, 69), int_625064, *[dim_625065], **kwargs_625066)
        
        # Applying the binary operator '!=' (line 3428)
        result_ne_625068 = python_operator(stypy.reporting.localization.Localization(__file__, 3428, 62), '!=', dim_625063, int_call_result_625067)
        
        # Applying the binary operator 'or' (line 3428)
        result_or_keyword_625069 = python_operator(stypy.reporting.localization.Localization(__file__, 3428, 11), 'or', result_or_keyword_625062, result_ne_625068)
        
        # Testing the type of an if condition (line 3428)
        if_condition_625070 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3428, 8), result_or_keyword_625069)
        # Assigning a type to the variable 'if_condition_625070' (line 3428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3428, 8), 'if_condition_625070', if_condition_625070)
        # SSA begins for if statement (line 3428)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3429)
        # Processing the call arguments (line 3429)
        str_625072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3429, 29), 'str', 'Dimension of rotation must be specified,and must be a scalar greater than 1.')
        # Processing the call keyword arguments (line 3429)
        kwargs_625073 = {}
        # Getting the type of 'ValueError' (line 3429)
        ValueError_625071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3429, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3429)
        ValueError_call_result_625074 = invoke(stypy.reporting.localization.Localization(__file__, 3429, 18), ValueError_625071, *[str_625072], **kwargs_625073)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3429, 12), ValueError_call_result_625074, 'raise parameter', BaseException)
        # SSA join for if statement (line 3428)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'dim' (line 3432)
        dim_625075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3432, 15), 'dim')
        # Assigning a type to the variable 'stypy_return_type' (line 3432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3432, 8), 'stypy_return_type', dim_625075)
        
        # ################# End of '_process_parameters(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_parameters' in the type store
        # Getting the type of 'stypy_return_type' (line 3423)
        stypy_return_type_625076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3423, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_625076)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_parameters'
        return stypy_return_type_625076


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_625077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3434, 28), 'int')
        # Getting the type of 'None' (line 3434)
        None_625078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 44), 'None')
        defaults = [int_625077, None_625078]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 3434, 4, False)
        # Assigning a type to the variable 'self' (line 3435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3435, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ortho_group_gen.rvs.__dict__.__setitem__('stypy_localization', localization)
        ortho_group_gen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ortho_group_gen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        ortho_group_gen.rvs.__dict__.__setitem__('stypy_function_name', 'ortho_group_gen.rvs')
        ortho_group_gen.rvs.__dict__.__setitem__('stypy_param_names_list', ['dim', 'size', 'random_state'])
        ortho_group_gen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        ortho_group_gen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ortho_group_gen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        ortho_group_gen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        ortho_group_gen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ortho_group_gen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ortho_group_gen.rvs', ['dim', 'size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['dim', 'size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        str_625079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3450, (-1)), 'str', '\n        Draw random samples from O(N).\n\n        Parameters\n        ----------\n        dim : integer\n            Dimension of rotation space (N).\n        size : integer, optional\n            Number of samples to draw (default 1).\n\n        Returns\n        -------\n        rvs : ndarray or scalar\n            Random size N-dimensional matrices, dimension (size, dim, dim)\n\n        ')
        
        # Assigning a Call to a Name (line 3451):
        
        # Assigning a Call to a Name (line 3451):
        
        # Call to int(...): (line 3451)
        # Processing the call arguments (line 3451)
        # Getting the type of 'size' (line 3451)
        size_625081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3451, 19), 'size', False)
        # Processing the call keyword arguments (line 3451)
        kwargs_625082 = {}
        # Getting the type of 'int' (line 3451)
        int_625080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3451, 15), 'int', False)
        # Calling int(args, kwargs) (line 3451)
        int_call_result_625083 = invoke(stypy.reporting.localization.Localization(__file__, 3451, 15), int_625080, *[size_625081], **kwargs_625082)
        
        # Assigning a type to the variable 'size' (line 3451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3451, 8), 'size', int_call_result_625083)
        
        
        # Getting the type of 'size' (line 3452)
        size_625084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3452, 11), 'size')
        int_625085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3452, 18), 'int')
        # Applying the binary operator '>' (line 3452)
        result_gt_625086 = python_operator(stypy.reporting.localization.Localization(__file__, 3452, 11), '>', size_625084, int_625085)
        
        # Testing the type of an if condition (line 3452)
        if_condition_625087 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3452, 8), result_gt_625086)
        # Assigning a type to the variable 'if_condition_625087' (line 3452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3452, 8), 'if_condition_625087', if_condition_625087)
        # SSA begins for if statement (line 3452)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to array(...): (line 3453)
        # Processing the call arguments (line 3453)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to range(...): (line 3454)
        # Processing the call arguments (line 3454)
        # Getting the type of 'size' (line 3454)
        size_625100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3454, 44), 'size', False)
        # Processing the call keyword arguments (line 3454)
        kwargs_625101 = {}
        # Getting the type of 'range' (line 3454)
        range_625099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3454, 38), 'range', False)
        # Calling range(args, kwargs) (line 3454)
        range_call_result_625102 = invoke(stypy.reporting.localization.Localization(__file__, 3454, 38), range_625099, *[size_625100], **kwargs_625101)
        
        comprehension_625103 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3453, 29), range_call_result_625102)
        # Assigning a type to the variable 'i' (line 3453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3453, 29), 'i', comprehension_625103)
        
        # Call to rvs(...): (line 3453)
        # Processing the call arguments (line 3453)
        # Getting the type of 'dim' (line 3453)
        dim_625092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3453, 38), 'dim', False)
        # Processing the call keyword arguments (line 3453)
        int_625093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3453, 48), 'int')
        keyword_625094 = int_625093
        # Getting the type of 'random_state' (line 3453)
        random_state_625095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3453, 64), 'random_state', False)
        keyword_625096 = random_state_625095
        kwargs_625097 = {'random_state': keyword_625096, 'size': keyword_625094}
        # Getting the type of 'self' (line 3453)
        self_625090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3453, 29), 'self', False)
        # Obtaining the member 'rvs' of a type (line 3453)
        rvs_625091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3453, 29), self_625090, 'rvs')
        # Calling rvs(args, kwargs) (line 3453)
        rvs_call_result_625098 = invoke(stypy.reporting.localization.Localization(__file__, 3453, 29), rvs_625091, *[dim_625092], **kwargs_625097)
        
        list_625104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3453, 29), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3453, 29), list_625104, rvs_call_result_625098)
        # Processing the call keyword arguments (line 3453)
        kwargs_625105 = {}
        # Getting the type of 'np' (line 3453)
        np_625088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3453, 19), 'np', False)
        # Obtaining the member 'array' of a type (line 3453)
        array_625089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3453, 19), np_625088, 'array')
        # Calling array(args, kwargs) (line 3453)
        array_call_result_625106 = invoke(stypy.reporting.localization.Localization(__file__, 3453, 19), array_625089, *[list_625104], **kwargs_625105)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3453, 12), 'stypy_return_type', array_call_result_625106)
        # SSA join for if statement (line 3452)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3456):
        
        # Assigning a Call to a Name (line 3456):
        
        # Call to _process_parameters(...): (line 3456)
        # Processing the call arguments (line 3456)
        # Getting the type of 'dim' (line 3456)
        dim_625109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3456, 39), 'dim', False)
        # Processing the call keyword arguments (line 3456)
        kwargs_625110 = {}
        # Getting the type of 'self' (line 3456)
        self_625107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3456, 14), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3456)
        _process_parameters_625108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3456, 14), self_625107, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3456)
        _process_parameters_call_result_625111 = invoke(stypy.reporting.localization.Localization(__file__, 3456, 14), _process_parameters_625108, *[dim_625109], **kwargs_625110)
        
        # Assigning a type to the variable 'dim' (line 3456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3456, 8), 'dim', _process_parameters_call_result_625111)
        
        # Assigning a Call to a Name (line 3458):
        
        # Assigning a Call to a Name (line 3458):
        
        # Call to _get_random_state(...): (line 3458)
        # Processing the call arguments (line 3458)
        # Getting the type of 'random_state' (line 3458)
        random_state_625114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3458, 46), 'random_state', False)
        # Processing the call keyword arguments (line 3458)
        kwargs_625115 = {}
        # Getting the type of 'self' (line 3458)
        self_625112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3458, 23), 'self', False)
        # Obtaining the member '_get_random_state' of a type (line 3458)
        _get_random_state_625113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3458, 23), self_625112, '_get_random_state')
        # Calling _get_random_state(args, kwargs) (line 3458)
        _get_random_state_call_result_625116 = invoke(stypy.reporting.localization.Localization(__file__, 3458, 23), _get_random_state_625113, *[random_state_625114], **kwargs_625115)
        
        # Assigning a type to the variable 'random_state' (line 3458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3458, 8), 'random_state', _get_random_state_call_result_625116)
        
        # Assigning a Call to a Name (line 3460):
        
        # Assigning a Call to a Name (line 3460):
        
        # Call to eye(...): (line 3460)
        # Processing the call arguments (line 3460)
        # Getting the type of 'dim' (line 3460)
        dim_625119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3460, 19), 'dim', False)
        # Processing the call keyword arguments (line 3460)
        kwargs_625120 = {}
        # Getting the type of 'np' (line 3460)
        np_625117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3460, 12), 'np', False)
        # Obtaining the member 'eye' of a type (line 3460)
        eye_625118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3460, 12), np_625117, 'eye')
        # Calling eye(args, kwargs) (line 3460)
        eye_call_result_625121 = invoke(stypy.reporting.localization.Localization(__file__, 3460, 12), eye_625118, *[dim_625119], **kwargs_625120)
        
        # Assigning a type to the variable 'H' (line 3460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3460, 8), 'H', eye_call_result_625121)
        
        
        # Call to range(...): (line 3461)
        # Processing the call arguments (line 3461)
        int_625123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3461, 23), 'int')
        # Getting the type of 'dim' (line 3461)
        dim_625124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3461, 26), 'dim', False)
        # Processing the call keyword arguments (line 3461)
        kwargs_625125 = {}
        # Getting the type of 'range' (line 3461)
        range_625122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3461, 17), 'range', False)
        # Calling range(args, kwargs) (line 3461)
        range_call_result_625126 = invoke(stypy.reporting.localization.Localization(__file__, 3461, 17), range_625122, *[int_625123, dim_625124], **kwargs_625125)
        
        # Testing the type of a for loop iterable (line 3461)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3461, 8), range_call_result_625126)
        # Getting the type of the for loop variable (line 3461)
        for_loop_var_625127 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3461, 8), range_call_result_625126)
        # Assigning a type to the variable 'n' (line 3461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3461, 8), 'n', for_loop_var_625127)
        # SSA begins for a for statement (line 3461)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 3462):
        
        # Assigning a Call to a Name (line 3462):
        
        # Call to normal(...): (line 3462)
        # Processing the call keyword arguments (line 3462)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3462)
        tuple_625130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3462, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3462)
        # Adding element type (line 3462)
        # Getting the type of 'dim' (line 3462)
        dim_625131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3462, 42), 'dim', False)
        # Getting the type of 'n' (line 3462)
        n_625132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3462, 46), 'n', False)
        # Applying the binary operator '-' (line 3462)
        result_sub_625133 = python_operator(stypy.reporting.localization.Localization(__file__, 3462, 42), '-', dim_625131, n_625132)
        
        int_625134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3462, 48), 'int')
        # Applying the binary operator '+' (line 3462)
        result_add_625135 = python_operator(stypy.reporting.localization.Localization(__file__, 3462, 47), '+', result_sub_625133, int_625134)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3462, 42), tuple_625130, result_add_625135)
        
        keyword_625136 = tuple_625130
        kwargs_625137 = {'size': keyword_625136}
        # Getting the type of 'random_state' (line 3462)
        random_state_625128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3462, 16), 'random_state', False)
        # Obtaining the member 'normal' of a type (line 3462)
        normal_625129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3462, 16), random_state_625128, 'normal')
        # Calling normal(args, kwargs) (line 3462)
        normal_call_result_625138 = invoke(stypy.reporting.localization.Localization(__file__, 3462, 16), normal_625129, *[], **kwargs_625137)
        
        # Assigning a type to the variable 'x' (line 3462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3462, 12), 'x', normal_call_result_625138)
        
        # Assigning a Call to a Name (line 3464):
        
        # Assigning a Call to a Name (line 3464):
        
        # Call to sign(...): (line 3464)
        # Processing the call arguments (line 3464)
        
        # Obtaining the type of the subscript
        int_625141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3464, 26), 'int')
        # Getting the type of 'x' (line 3464)
        x_625142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3464, 24), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 3464)
        getitem___625143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3464, 24), x_625142, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3464)
        subscript_call_result_625144 = invoke(stypy.reporting.localization.Localization(__file__, 3464, 24), getitem___625143, int_625141)
        
        # Processing the call keyword arguments (line 3464)
        kwargs_625145 = {}
        # Getting the type of 'np' (line 3464)
        np_625139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3464, 16), 'np', False)
        # Obtaining the member 'sign' of a type (line 3464)
        sign_625140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3464, 16), np_625139, 'sign')
        # Calling sign(args, kwargs) (line 3464)
        sign_call_result_625146 = invoke(stypy.reporting.localization.Localization(__file__, 3464, 16), sign_625140, *[subscript_call_result_625144], **kwargs_625145)
        
        # Assigning a type to the variable 'D' (line 3464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3464, 12), 'D', sign_call_result_625146)
        
        # Getting the type of 'x' (line 3465)
        x_625147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3465, 12), 'x')
        
        # Obtaining the type of the subscript
        int_625148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3465, 14), 'int')
        # Getting the type of 'x' (line 3465)
        x_625149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3465, 12), 'x')
        # Obtaining the member '__getitem__' of a type (line 3465)
        getitem___625150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3465, 12), x_625149, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3465)
        subscript_call_result_625151 = invoke(stypy.reporting.localization.Localization(__file__, 3465, 12), getitem___625150, int_625148)
        
        # Getting the type of 'D' (line 3465)
        D_625152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3465, 20), 'D')
        
        # Call to sqrt(...): (line 3465)
        # Processing the call arguments (line 3465)
        
        # Call to sum(...): (line 3465)
        # Processing the call keyword arguments (line 3465)
        kwargs_625159 = {}
        # Getting the type of 'x' (line 3465)
        x_625155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3465, 31), 'x', False)
        # Getting the type of 'x' (line 3465)
        x_625156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3465, 33), 'x', False)
        # Applying the binary operator '*' (line 3465)
        result_mul_625157 = python_operator(stypy.reporting.localization.Localization(__file__, 3465, 31), '*', x_625155, x_625156)
        
        # Obtaining the member 'sum' of a type (line 3465)
        sum_625158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3465, 31), result_mul_625157, 'sum')
        # Calling sum(args, kwargs) (line 3465)
        sum_call_result_625160 = invoke(stypy.reporting.localization.Localization(__file__, 3465, 31), sum_625158, *[], **kwargs_625159)
        
        # Processing the call keyword arguments (line 3465)
        kwargs_625161 = {}
        # Getting the type of 'np' (line 3465)
        np_625153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3465, 22), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 3465)
        sqrt_625154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3465, 22), np_625153, 'sqrt')
        # Calling sqrt(args, kwargs) (line 3465)
        sqrt_call_result_625162 = invoke(stypy.reporting.localization.Localization(__file__, 3465, 22), sqrt_625154, *[sum_call_result_625160], **kwargs_625161)
        
        # Applying the binary operator '*' (line 3465)
        result_mul_625163 = python_operator(stypy.reporting.localization.Localization(__file__, 3465, 20), '*', D_625152, sqrt_call_result_625162)
        
        # Applying the binary operator '+=' (line 3465)
        result_iadd_625164 = python_operator(stypy.reporting.localization.Localization(__file__, 3465, 12), '+=', subscript_call_result_625151, result_mul_625163)
        # Getting the type of 'x' (line 3465)
        x_625165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3465, 12), 'x')
        int_625166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3465, 14), 'int')
        # Storing an element on a container (line 3465)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3465, 12), x_625165, (int_625166, result_iadd_625164))
        
        
        # Assigning a BinOp to a Name (line 3467):
        
        # Assigning a BinOp to a Name (line 3467):
        
        # Getting the type of 'D' (line 3467)
        D_625167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3467, 18), 'D')
        # Applying the 'usub' unary operator (line 3467)
        result___neg___625168 = python_operator(stypy.reporting.localization.Localization(__file__, 3467, 17), 'usub', D_625167)
        
        
        # Call to eye(...): (line 3467)
        # Processing the call arguments (line 3467)
        # Getting the type of 'dim' (line 3467)
        dim_625171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3467, 28), 'dim', False)
        # Getting the type of 'n' (line 3467)
        n_625172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3467, 32), 'n', False)
        # Applying the binary operator '-' (line 3467)
        result_sub_625173 = python_operator(stypy.reporting.localization.Localization(__file__, 3467, 28), '-', dim_625171, n_625172)
        
        int_625174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3467, 34), 'int')
        # Applying the binary operator '+' (line 3467)
        result_add_625175 = python_operator(stypy.reporting.localization.Localization(__file__, 3467, 33), '+', result_sub_625173, int_625174)
        
        # Processing the call keyword arguments (line 3467)
        kwargs_625176 = {}
        # Getting the type of 'np' (line 3467)
        np_625169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3467, 21), 'np', False)
        # Obtaining the member 'eye' of a type (line 3467)
        eye_625170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3467, 21), np_625169, 'eye')
        # Calling eye(args, kwargs) (line 3467)
        eye_call_result_625177 = invoke(stypy.reporting.localization.Localization(__file__, 3467, 21), eye_625170, *[result_add_625175], **kwargs_625176)
        
        float_625178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3468, 23), 'float')
        
        # Call to outer(...): (line 3468)
        # Processing the call arguments (line 3468)
        # Getting the type of 'x' (line 3468)
        x_625181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3468, 35), 'x', False)
        # Getting the type of 'x' (line 3468)
        x_625182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3468, 38), 'x', False)
        # Processing the call keyword arguments (line 3468)
        kwargs_625183 = {}
        # Getting the type of 'np' (line 3468)
        np_625179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3468, 26), 'np', False)
        # Obtaining the member 'outer' of a type (line 3468)
        outer_625180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3468, 26), np_625179, 'outer')
        # Calling outer(args, kwargs) (line 3468)
        outer_call_result_625184 = invoke(stypy.reporting.localization.Localization(__file__, 3468, 26), outer_625180, *[x_625181, x_625182], **kwargs_625183)
        
        # Applying the binary operator '*' (line 3468)
        result_mul_625185 = python_operator(stypy.reporting.localization.Localization(__file__, 3468, 23), '*', float_625178, outer_call_result_625184)
        
        
        # Call to sum(...): (line 3468)
        # Processing the call keyword arguments (line 3468)
        kwargs_625190 = {}
        # Getting the type of 'x' (line 3468)
        x_625186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3468, 42), 'x', False)
        # Getting the type of 'x' (line 3468)
        x_625187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3468, 44), 'x', False)
        # Applying the binary operator '*' (line 3468)
        result_mul_625188 = python_operator(stypy.reporting.localization.Localization(__file__, 3468, 42), '*', x_625186, x_625187)
        
        # Obtaining the member 'sum' of a type (line 3468)
        sum_625189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3468, 42), result_mul_625188, 'sum')
        # Calling sum(args, kwargs) (line 3468)
        sum_call_result_625191 = invoke(stypy.reporting.localization.Localization(__file__, 3468, 42), sum_625189, *[], **kwargs_625190)
        
        # Applying the binary operator 'div' (line 3468)
        result_div_625192 = python_operator(stypy.reporting.localization.Localization(__file__, 3468, 40), 'div', result_mul_625185, sum_call_result_625191)
        
        # Applying the binary operator '-' (line 3467)
        result_sub_625193 = python_operator(stypy.reporting.localization.Localization(__file__, 3467, 21), '-', eye_call_result_625177, result_div_625192)
        
        # Applying the binary operator '*' (line 3467)
        result_mul_625194 = python_operator(stypy.reporting.localization.Localization(__file__, 3467, 17), '*', result___neg___625168, result_sub_625193)
        
        # Assigning a type to the variable 'Hx' (line 3467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3467, 12), 'Hx', result_mul_625194)
        
        # Assigning a Call to a Name (line 3469):
        
        # Assigning a Call to a Name (line 3469):
        
        # Call to eye(...): (line 3469)
        # Processing the call arguments (line 3469)
        # Getting the type of 'dim' (line 3469)
        dim_625197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3469, 25), 'dim', False)
        # Processing the call keyword arguments (line 3469)
        kwargs_625198 = {}
        # Getting the type of 'np' (line 3469)
        np_625195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3469, 18), 'np', False)
        # Obtaining the member 'eye' of a type (line 3469)
        eye_625196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3469, 18), np_625195, 'eye')
        # Calling eye(args, kwargs) (line 3469)
        eye_call_result_625199 = invoke(stypy.reporting.localization.Localization(__file__, 3469, 18), eye_625196, *[dim_625197], **kwargs_625198)
        
        # Assigning a type to the variable 'mat' (line 3469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3469, 12), 'mat', eye_call_result_625199)
        
        # Assigning a Name to a Subscript (line 3470):
        
        # Assigning a Name to a Subscript (line 3470):
        # Getting the type of 'Hx' (line 3470)
        Hx_625200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3470, 30), 'Hx')
        # Getting the type of 'mat' (line 3470)
        mat_625201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3470, 12), 'mat')
        # Getting the type of 'n' (line 3470)
        n_625202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3470, 16), 'n')
        int_625203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3470, 18), 'int')
        # Applying the binary operator '-' (line 3470)
        result_sub_625204 = python_operator(stypy.reporting.localization.Localization(__file__, 3470, 16), '-', n_625202, int_625203)
        
        slice_625205 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3470, 12), result_sub_625204, None, None)
        # Getting the type of 'n' (line 3470)
        n_625206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3470, 22), 'n')
        int_625207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3470, 24), 'int')
        # Applying the binary operator '-' (line 3470)
        result_sub_625208 = python_operator(stypy.reporting.localization.Localization(__file__, 3470, 22), '-', n_625206, int_625207)
        
        slice_625209 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3470, 12), result_sub_625208, None, None)
        # Storing an element on a container (line 3470)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3470, 12), mat_625201, ((slice_625205, slice_625209), Hx_625200))
        
        # Assigning a Call to a Name (line 3471):
        
        # Assigning a Call to a Name (line 3471):
        
        # Call to dot(...): (line 3471)
        # Processing the call arguments (line 3471)
        # Getting the type of 'H' (line 3471)
        H_625212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3471, 23), 'H', False)
        # Getting the type of 'mat' (line 3471)
        mat_625213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3471, 26), 'mat', False)
        # Processing the call keyword arguments (line 3471)
        kwargs_625214 = {}
        # Getting the type of 'np' (line 3471)
        np_625210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3471, 16), 'np', False)
        # Obtaining the member 'dot' of a type (line 3471)
        dot_625211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3471, 16), np_625210, 'dot')
        # Calling dot(args, kwargs) (line 3471)
        dot_call_result_625215 = invoke(stypy.reporting.localization.Localization(__file__, 3471, 16), dot_625211, *[H_625212, mat_625213], **kwargs_625214)
        
        # Assigning a type to the variable 'H' (line 3471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3471, 12), 'H', dot_call_result_625215)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'H' (line 3472)
        H_625216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3472, 15), 'H')
        # Assigning a type to the variable 'stypy_return_type' (line 3472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3472, 8), 'stypy_return_type', H_625216)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 3434)
        stypy_return_type_625217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_625217)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_625217


# Assigning a type to the variable 'ortho_group_gen' (line 3370)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3370, 0), 'ortho_group_gen', ortho_group_gen)

# Assigning a Call to a Name (line 3474):

# Assigning a Call to a Name (line 3474):

# Call to ortho_group_gen(...): (line 3474)
# Processing the call keyword arguments (line 3474)
kwargs_625219 = {}
# Getting the type of 'ortho_group_gen' (line 3474)
ortho_group_gen_625218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3474, 14), 'ortho_group_gen', False)
# Calling ortho_group_gen(args, kwargs) (line 3474)
ortho_group_gen_call_result_625220 = invoke(stypy.reporting.localization.Localization(__file__, 3474, 14), ortho_group_gen_625218, *[], **kwargs_625219)

# Assigning a type to the variable 'ortho_group' (line 3474)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3474, 0), 'ortho_group', ortho_group_gen_call_result_625220)
# Declaration of the 'random_correlation_gen' class
# Getting the type of 'multi_rv_generic' (line 3476)
multi_rv_generic_625221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3476, 29), 'multi_rv_generic')

class random_correlation_gen(multi_rv_generic_625221, ):
    str_625222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3527, (-1)), 'str', '\n    A random correlation matrix.\n\n    Return a random correlation matrix, given a vector of eigenvalues.\n\n    The `eigs` keyword specifies the eigenvalues of the correlation matrix,\n    and implies the dimension.\n\n    Methods\n    -------\n    ``rvs(eigs=None, random_state=None)``\n        Draw random correlation matrices, all with eigenvalues eigs.\n\n    Parameters\n    ----------\n    eigs : 1d ndarray\n        Eigenvalues of correlation matrix.\n\n    Notes\n    ----------\n\n    Generates a random correlation matrix following a numerically stable\n    algorithm spelled out by Davies & Higham. This algorithm uses a single O(N)\n    similarity transformation to construct a symmetric positive semi-definite\n    matrix, and applies a series of Givens rotations to scale it to have ones\n    on the diagonal.\n\n    References\n    ----------\n\n    .. [1] Davies, Philip I; Higham, Nicholas J; "Numerically stable generation\n           of correlation matrices and their factors", BIT 2000, Vol. 40,\n           No. 4, pp. 640 651\n\n    Examples\n    --------\n    >>> from scipy.stats import random_correlation\n    >>> np.random.seed(514)\n    >>> x = random_correlation.rvs((.5, .8, 1.2, 1.5))\n    >>> x\n    array([[ 1.        , -0.20387311,  0.18366501, -0.04953711],\n           [-0.20387311,  1.        , -0.24351129,  0.06703474],\n           [ 0.18366501, -0.24351129,  1.        ,  0.38530195],\n           [-0.04953711,  0.06703474,  0.38530195,  1.        ]])\n\n    >>> import scipy.linalg\n    >>> e, v = scipy.linalg.eigh(x)\n    >>> e\n    array([ 0.5,  0.8,  1.2,  1.5])\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3529)
        None_625223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3529, 28), 'None')
        defaults = [None_625223]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3529, 4, False)
        # Assigning a type to the variable 'self' (line 3530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3530, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'random_correlation_gen.__init__', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 3530)
        # Processing the call arguments (line 3530)
        # Getting the type of 'seed' (line 3530)
        seed_625230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3530, 53), 'seed', False)
        # Processing the call keyword arguments (line 3530)
        kwargs_625231 = {}
        
        # Call to super(...): (line 3530)
        # Processing the call arguments (line 3530)
        # Getting the type of 'random_correlation_gen' (line 3530)
        random_correlation_gen_625225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3530, 14), 'random_correlation_gen', False)
        # Getting the type of 'self' (line 3530)
        self_625226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3530, 38), 'self', False)
        # Processing the call keyword arguments (line 3530)
        kwargs_625227 = {}
        # Getting the type of 'super' (line 3530)
        super_625224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3530, 8), 'super', False)
        # Calling super(args, kwargs) (line 3530)
        super_call_result_625228 = invoke(stypy.reporting.localization.Localization(__file__, 3530, 8), super_625224, *[random_correlation_gen_625225, self_625226], **kwargs_625227)
        
        # Obtaining the member '__init__' of a type (line 3530)
        init___625229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3530, 8), super_call_result_625228, '__init__')
        # Calling __init__(args, kwargs) (line 3530)
        init___call_result_625232 = invoke(stypy.reporting.localization.Localization(__file__, 3530, 8), init___625229, *[seed_625230], **kwargs_625231)
        
        
        # Assigning a Call to a Attribute (line 3531):
        
        # Assigning a Call to a Attribute (line 3531):
        
        # Call to docformat(...): (line 3531)
        # Processing the call arguments (line 3531)
        # Getting the type of 'self' (line 3531)
        self_625235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 40), 'self', False)
        # Obtaining the member '__doc__' of a type (line 3531)
        doc___625236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3531, 40), self_625235, '__doc__')
        # Processing the call keyword arguments (line 3531)
        kwargs_625237 = {}
        # Getting the type of 'doccer' (line 3531)
        doccer_625233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 23), 'doccer', False)
        # Obtaining the member 'docformat' of a type (line 3531)
        docformat_625234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3531, 23), doccer_625233, 'docformat')
        # Calling docformat(args, kwargs) (line 3531)
        docformat_call_result_625238 = invoke(stypy.reporting.localization.Localization(__file__, 3531, 23), docformat_625234, *[doc___625236], **kwargs_625237)
        
        # Getting the type of 'self' (line 3531)
        self_625239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 3531)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3531, 8), self_625239, '__doc__', docformat_call_result_625238)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _process_parameters(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_parameters'
        module_type_store = module_type_store.open_function_context('_process_parameters', 3533, 4, False)
        # Assigning a type to the variable 'self' (line 3534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3534, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        random_correlation_gen._process_parameters.__dict__.__setitem__('stypy_localization', localization)
        random_correlation_gen._process_parameters.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        random_correlation_gen._process_parameters.__dict__.__setitem__('stypy_type_store', module_type_store)
        random_correlation_gen._process_parameters.__dict__.__setitem__('stypy_function_name', 'random_correlation_gen._process_parameters')
        random_correlation_gen._process_parameters.__dict__.__setitem__('stypy_param_names_list', ['eigs', 'tol'])
        random_correlation_gen._process_parameters.__dict__.__setitem__('stypy_varargs_param_name', None)
        random_correlation_gen._process_parameters.__dict__.__setitem__('stypy_kwargs_param_name', None)
        random_correlation_gen._process_parameters.__dict__.__setitem__('stypy_call_defaults', defaults)
        random_correlation_gen._process_parameters.__dict__.__setitem__('stypy_call_varargs', varargs)
        random_correlation_gen._process_parameters.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        random_correlation_gen._process_parameters.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'random_correlation_gen._process_parameters', ['eigs', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_parameters', localization, ['eigs', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_parameters(...)' code ##################

        
        # Assigning a Call to a Name (line 3534):
        
        # Assigning a Call to a Name (line 3534):
        
        # Call to asarray(...): (line 3534)
        # Processing the call arguments (line 3534)
        # Getting the type of 'eigs' (line 3534)
        eigs_625242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3534, 26), 'eigs', False)
        # Processing the call keyword arguments (line 3534)
        # Getting the type of 'float' (line 3534)
        float_625243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3534, 38), 'float', False)
        keyword_625244 = float_625243
        kwargs_625245 = {'dtype': keyword_625244}
        # Getting the type of 'np' (line 3534)
        np_625240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3534, 15), 'np', False)
        # Obtaining the member 'asarray' of a type (line 3534)
        asarray_625241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3534, 15), np_625240, 'asarray')
        # Calling asarray(args, kwargs) (line 3534)
        asarray_call_result_625246 = invoke(stypy.reporting.localization.Localization(__file__, 3534, 15), asarray_625241, *[eigs_625242], **kwargs_625245)
        
        # Assigning a type to the variable 'eigs' (line 3534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3534, 8), 'eigs', asarray_call_result_625246)
        
        # Assigning a Attribute to a Name (line 3535):
        
        # Assigning a Attribute to a Name (line 3535):
        # Getting the type of 'eigs' (line 3535)
        eigs_625247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3535, 14), 'eigs')
        # Obtaining the member 'size' of a type (line 3535)
        size_625248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3535, 14), eigs_625247, 'size')
        # Assigning a type to the variable 'dim' (line 3535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3535, 8), 'dim', size_625248)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'eigs' (line 3537)
        eigs_625249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 11), 'eigs')
        # Obtaining the member 'ndim' of a type (line 3537)
        ndim_625250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 11), eigs_625249, 'ndim')
        int_625251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3537, 24), 'int')
        # Applying the binary operator '!=' (line 3537)
        result_ne_625252 = python_operator(stypy.reporting.localization.Localization(__file__, 3537, 11), '!=', ndim_625250, int_625251)
        
        
        
        # Obtaining the type of the subscript
        int_625253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3537, 40), 'int')
        # Getting the type of 'eigs' (line 3537)
        eigs_625254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 29), 'eigs')
        # Obtaining the member 'shape' of a type (line 3537)
        shape_625255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 29), eigs_625254, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3537)
        getitem___625256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 29), shape_625255, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3537)
        subscript_call_result_625257 = invoke(stypy.reporting.localization.Localization(__file__, 3537, 29), getitem___625256, int_625253)
        
        # Getting the type of 'dim' (line 3537)
        dim_625258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 46), 'dim')
        # Applying the binary operator '!=' (line 3537)
        result_ne_625259 = python_operator(stypy.reporting.localization.Localization(__file__, 3537, 29), '!=', subscript_call_result_625257, dim_625258)
        
        # Applying the binary operator 'or' (line 3537)
        result_or_keyword_625260 = python_operator(stypy.reporting.localization.Localization(__file__, 3537, 11), 'or', result_ne_625252, result_ne_625259)
        
        # Getting the type of 'dim' (line 3537)
        dim_625261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 53), 'dim')
        int_625262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3537, 60), 'int')
        # Applying the binary operator '<=' (line 3537)
        result_le_625263 = python_operator(stypy.reporting.localization.Localization(__file__, 3537, 53), '<=', dim_625261, int_625262)
        
        # Applying the binary operator 'or' (line 3537)
        result_or_keyword_625264 = python_operator(stypy.reporting.localization.Localization(__file__, 3537, 11), 'or', result_or_keyword_625260, result_le_625263)
        
        # Testing the type of an if condition (line 3537)
        if_condition_625265 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3537, 8), result_or_keyword_625264)
        # Assigning a type to the variable 'if_condition_625265' (line 3537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3537, 8), 'if_condition_625265', if_condition_625265)
        # SSA begins for if statement (line 3537)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3538)
        # Processing the call arguments (line 3538)
        str_625267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3538, 29), 'str', "Array 'eigs' must be a vector of length greater than 1.")
        # Processing the call keyword arguments (line 3538)
        kwargs_625268 = {}
        # Getting the type of 'ValueError' (line 3538)
        ValueError_625266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3538)
        ValueError_call_result_625269 = invoke(stypy.reporting.localization.Localization(__file__, 3538, 18), ValueError_625266, *[str_625267], **kwargs_625268)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3538, 12), ValueError_call_result_625269, 'raise parameter', BaseException)
        # SSA join for if statement (line 3537)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to fabs(...): (line 3540)
        # Processing the call arguments (line 3540)
        
        # Call to sum(...): (line 3540)
        # Processing the call arguments (line 3540)
        # Getting the type of 'eigs' (line 3540)
        eigs_625274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3540, 26), 'eigs', False)
        # Processing the call keyword arguments (line 3540)
        kwargs_625275 = {}
        # Getting the type of 'np' (line 3540)
        np_625272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3540, 19), 'np', False)
        # Obtaining the member 'sum' of a type (line 3540)
        sum_625273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3540, 19), np_625272, 'sum')
        # Calling sum(args, kwargs) (line 3540)
        sum_call_result_625276 = invoke(stypy.reporting.localization.Localization(__file__, 3540, 19), sum_625273, *[eigs_625274], **kwargs_625275)
        
        # Getting the type of 'dim' (line 3540)
        dim_625277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3540, 34), 'dim', False)
        # Applying the binary operator '-' (line 3540)
        result_sub_625278 = python_operator(stypy.reporting.localization.Localization(__file__, 3540, 19), '-', sum_call_result_625276, dim_625277)
        
        # Processing the call keyword arguments (line 3540)
        kwargs_625279 = {}
        # Getting the type of 'np' (line 3540)
        np_625270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3540, 11), 'np', False)
        # Obtaining the member 'fabs' of a type (line 3540)
        fabs_625271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3540, 11), np_625270, 'fabs')
        # Calling fabs(args, kwargs) (line 3540)
        fabs_call_result_625280 = invoke(stypy.reporting.localization.Localization(__file__, 3540, 11), fabs_625271, *[result_sub_625278], **kwargs_625279)
        
        # Getting the type of 'tol' (line 3540)
        tol_625281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3540, 41), 'tol')
        # Applying the binary operator '>' (line 3540)
        result_gt_625282 = python_operator(stypy.reporting.localization.Localization(__file__, 3540, 11), '>', fabs_call_result_625280, tol_625281)
        
        # Testing the type of an if condition (line 3540)
        if_condition_625283 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3540, 8), result_gt_625282)
        # Assigning a type to the variable 'if_condition_625283' (line 3540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3540, 8), 'if_condition_625283', if_condition_625283)
        # SSA begins for if statement (line 3540)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3541)
        # Processing the call arguments (line 3541)
        str_625285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3541, 29), 'str', 'Sum of eigenvalues must equal dimensionality.')
        # Processing the call keyword arguments (line 3541)
        kwargs_625286 = {}
        # Getting the type of 'ValueError' (line 3541)
        ValueError_625284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3541)
        ValueError_call_result_625287 = invoke(stypy.reporting.localization.Localization(__file__, 3541, 18), ValueError_625284, *[str_625285], **kwargs_625286)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3541, 12), ValueError_call_result_625287, 'raise parameter', BaseException)
        # SSA join for if statement (line 3540)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'eigs' (line 3543)
        eigs_625288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3543, 17), 'eigs')
        # Testing the type of a for loop iterable (line 3543)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3543, 8), eigs_625288)
        # Getting the type of the for loop variable (line 3543)
        for_loop_var_625289 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3543, 8), eigs_625288)
        # Assigning a type to the variable 'x' (line 3543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3543, 8), 'x', for_loop_var_625289)
        # SSA begins for a for statement (line 3543)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'x' (line 3544)
        x_625290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3544, 15), 'x')
        
        # Getting the type of 'tol' (line 3544)
        tol_625291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3544, 20), 'tol')
        # Applying the 'usub' unary operator (line 3544)
        result___neg___625292 = python_operator(stypy.reporting.localization.Localization(__file__, 3544, 19), 'usub', tol_625291)
        
        # Applying the binary operator '<' (line 3544)
        result_lt_625293 = python_operator(stypy.reporting.localization.Localization(__file__, 3544, 15), '<', x_625290, result___neg___625292)
        
        # Testing the type of an if condition (line 3544)
        if_condition_625294 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3544, 12), result_lt_625293)
        # Assigning a type to the variable 'if_condition_625294' (line 3544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3544, 12), 'if_condition_625294', if_condition_625294)
        # SSA begins for if statement (line 3544)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3545)
        # Processing the call arguments (line 3545)
        str_625296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3545, 33), 'str', 'All eigenvalues must be non-negative.')
        # Processing the call keyword arguments (line 3545)
        kwargs_625297 = {}
        # Getting the type of 'ValueError' (line 3545)
        ValueError_625295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3545)
        ValueError_call_result_625298 = invoke(stypy.reporting.localization.Localization(__file__, 3545, 22), ValueError_625295, *[str_625296], **kwargs_625297)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3545, 16), ValueError_call_result_625298, 'raise parameter', BaseException)
        # SSA join for if statement (line 3544)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 3547)
        tuple_625299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3547, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3547)
        # Adding element type (line 3547)
        # Getting the type of 'dim' (line 3547)
        dim_625300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 15), 'dim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3547, 15), tuple_625299, dim_625300)
        # Adding element type (line 3547)
        # Getting the type of 'eigs' (line 3547)
        eigs_625301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 20), 'eigs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3547, 15), tuple_625299, eigs_625301)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3547, 8), 'stypy_return_type', tuple_625299)
        
        # ################# End of '_process_parameters(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_parameters' in the type store
        # Getting the type of 'stypy_return_type' (line 3533)
        stypy_return_type_625302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_625302)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_parameters'
        return stypy_return_type_625302


    @norecursion
    def _givens_to_1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_givens_to_1'
        module_type_store = module_type_store.open_function_context('_givens_to_1', 3549, 4, False)
        # Assigning a type to the variable 'self' (line 3550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3550, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        random_correlation_gen._givens_to_1.__dict__.__setitem__('stypy_localization', localization)
        random_correlation_gen._givens_to_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        random_correlation_gen._givens_to_1.__dict__.__setitem__('stypy_type_store', module_type_store)
        random_correlation_gen._givens_to_1.__dict__.__setitem__('stypy_function_name', 'random_correlation_gen._givens_to_1')
        random_correlation_gen._givens_to_1.__dict__.__setitem__('stypy_param_names_list', ['aii', 'ajj', 'aij'])
        random_correlation_gen._givens_to_1.__dict__.__setitem__('stypy_varargs_param_name', None)
        random_correlation_gen._givens_to_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        random_correlation_gen._givens_to_1.__dict__.__setitem__('stypy_call_defaults', defaults)
        random_correlation_gen._givens_to_1.__dict__.__setitem__('stypy_call_varargs', varargs)
        random_correlation_gen._givens_to_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        random_correlation_gen._givens_to_1.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'random_correlation_gen._givens_to_1', ['aii', 'ajj', 'aij'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_givens_to_1', localization, ['aii', 'ajj', 'aij'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_givens_to_1(...)' code ##################

        str_625303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3562, (-1)), 'str', "Computes a 2x2 Givens matrix to put 1's on the diagonal for the input matrix.\n\n        The input matrix is a 2x2 symmetric matrix M = [ aii aij ; aij ajj ].\n\n        The output matrix g is a 2x2 anti-symmetric matrix of the form [ c s ; -s c ];\n        the elements c and s are returned.\n\n        Applying the output matrix to the input matrix (as b=g.T M g)\n        results in a matrix with bii=1, provided tr(M) - det(M) >= 1\n        and floating point issues do not occur. Otherwise, some other\n        valid rotation is returned. When tr(M)==2, also bjj=1.\n\n        ")
        
        # Assigning a BinOp to a Name (line 3563):
        
        # Assigning a BinOp to a Name (line 3563):
        # Getting the type of 'aii' (line 3563)
        aii_625304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3563, 15), 'aii')
        float_625305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3563, 21), 'float')
        # Applying the binary operator '-' (line 3563)
        result_sub_625306 = python_operator(stypy.reporting.localization.Localization(__file__, 3563, 15), '-', aii_625304, float_625305)
        
        # Assigning a type to the variable 'aiid' (line 3563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3563, 8), 'aiid', result_sub_625306)
        
        # Assigning a BinOp to a Name (line 3564):
        
        # Assigning a BinOp to a Name (line 3564):
        # Getting the type of 'ajj' (line 3564)
        ajj_625307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3564, 15), 'ajj')
        float_625308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3564, 21), 'float')
        # Applying the binary operator '-' (line 3564)
        result_sub_625309 = python_operator(stypy.reporting.localization.Localization(__file__, 3564, 15), '-', ajj_625307, float_625308)
        
        # Assigning a type to the variable 'ajjd' (line 3564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3564, 8), 'ajjd', result_sub_625309)
        
        
        # Getting the type of 'ajjd' (line 3566)
        ajjd_625310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 11), 'ajjd')
        int_625311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3566, 19), 'int')
        # Applying the binary operator '==' (line 3566)
        result_eq_625312 = python_operator(stypy.reporting.localization.Localization(__file__, 3566, 11), '==', ajjd_625310, int_625311)
        
        # Testing the type of an if condition (line 3566)
        if_condition_625313 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3566, 8), result_eq_625312)
        # Assigning a type to the variable 'if_condition_625313' (line 3566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 8), 'if_condition_625313', if_condition_625313)
        # SSA begins for if statement (line 3566)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3568)
        tuple_625314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3568, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3568)
        # Adding element type (line 3568)
        float_625315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3568, 19), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3568, 19), tuple_625314, float_625315)
        # Adding element type (line 3568)
        float_625316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3568, 23), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3568, 19), tuple_625314, float_625316)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3568, 12), 'stypy_return_type', tuple_625314)
        # SSA join for if statement (line 3566)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3570):
        
        # Assigning a Call to a Name (line 3570):
        
        # Call to sqrt(...): (line 3570)
        # Processing the call arguments (line 3570)
        
        # Call to max(...): (line 3570)
        # Processing the call arguments (line 3570)
        # Getting the type of 'aij' (line 3570)
        aij_625320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3570, 27), 'aij', False)
        int_625321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3570, 32), 'int')
        # Applying the binary operator '**' (line 3570)
        result_pow_625322 = python_operator(stypy.reporting.localization.Localization(__file__, 3570, 27), '**', aij_625320, int_625321)
        
        # Getting the type of 'aiid' (line 3570)
        aiid_625323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3570, 36), 'aiid', False)
        # Getting the type of 'ajjd' (line 3570)
        ajjd_625324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3570, 41), 'ajjd', False)
        # Applying the binary operator '*' (line 3570)
        result_mul_625325 = python_operator(stypy.reporting.localization.Localization(__file__, 3570, 36), '*', aiid_625323, ajjd_625324)
        
        # Applying the binary operator '-' (line 3570)
        result_sub_625326 = python_operator(stypy.reporting.localization.Localization(__file__, 3570, 27), '-', result_pow_625322, result_mul_625325)
        
        int_625327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3570, 47), 'int')
        # Processing the call keyword arguments (line 3570)
        kwargs_625328 = {}
        # Getting the type of 'max' (line 3570)
        max_625319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3570, 23), 'max', False)
        # Calling max(args, kwargs) (line 3570)
        max_call_result_625329 = invoke(stypy.reporting.localization.Localization(__file__, 3570, 23), max_625319, *[result_sub_625326, int_625327], **kwargs_625328)
        
        # Processing the call keyword arguments (line 3570)
        kwargs_625330 = {}
        # Getting the type of 'math' (line 3570)
        math_625317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3570, 13), 'math', False)
        # Obtaining the member 'sqrt' of a type (line 3570)
        sqrt_625318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3570, 13), math_625317, 'sqrt')
        # Calling sqrt(args, kwargs) (line 3570)
        sqrt_call_result_625331 = invoke(stypy.reporting.localization.Localization(__file__, 3570, 13), sqrt_625318, *[max_call_result_625329], **kwargs_625330)
        
        # Assigning a type to the variable 'dd' (line 3570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3570, 8), 'dd', sqrt_call_result_625331)
        
        # Assigning a BinOp to a Name (line 3573):
        
        # Assigning a BinOp to a Name (line 3573):
        # Getting the type of 'aij' (line 3573)
        aij_625332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 13), 'aij')
        
        # Call to copysign(...): (line 3573)
        # Processing the call arguments (line 3573)
        # Getting the type of 'dd' (line 3573)
        dd_625335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 33), 'dd', False)
        # Getting the type of 'aij' (line 3573)
        aij_625336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 37), 'aij', False)
        # Processing the call keyword arguments (line 3573)
        kwargs_625337 = {}
        # Getting the type of 'math' (line 3573)
        math_625333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 19), 'math', False)
        # Obtaining the member 'copysign' of a type (line 3573)
        copysign_625334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3573, 19), math_625333, 'copysign')
        # Calling copysign(args, kwargs) (line 3573)
        copysign_call_result_625338 = invoke(stypy.reporting.localization.Localization(__file__, 3573, 19), copysign_625334, *[dd_625335, aij_625336], **kwargs_625337)
        
        # Applying the binary operator '+' (line 3573)
        result_add_625339 = python_operator(stypy.reporting.localization.Localization(__file__, 3573, 13), '+', aij_625332, copysign_call_result_625338)
        
        # Getting the type of 'ajjd' (line 3573)
        ajjd_625340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 45), 'ajjd')
        # Applying the binary operator 'div' (line 3573)
        result_div_625341 = python_operator(stypy.reporting.localization.Localization(__file__, 3573, 12), 'div', result_add_625339, ajjd_625340)
        
        # Assigning a type to the variable 't' (line 3573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3573, 8), 't', result_div_625341)
        
        # Assigning a BinOp to a Name (line 3574):
        
        # Assigning a BinOp to a Name (line 3574):
        float_625342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3574, 12), 'float')
        
        # Call to sqrt(...): (line 3574)
        # Processing the call arguments (line 3574)
        float_625345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3574, 27), 'float')
        # Getting the type of 't' (line 3574)
        t_625346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 32), 't', False)
        # Getting the type of 't' (line 3574)
        t_625347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 34), 't', False)
        # Applying the binary operator '*' (line 3574)
        result_mul_625348 = python_operator(stypy.reporting.localization.Localization(__file__, 3574, 32), '*', t_625346, t_625347)
        
        # Applying the binary operator '+' (line 3574)
        result_add_625349 = python_operator(stypy.reporting.localization.Localization(__file__, 3574, 27), '+', float_625345, result_mul_625348)
        
        # Processing the call keyword arguments (line 3574)
        kwargs_625350 = {}
        # Getting the type of 'math' (line 3574)
        math_625343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 17), 'math', False)
        # Obtaining the member 'sqrt' of a type (line 3574)
        sqrt_625344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3574, 17), math_625343, 'sqrt')
        # Calling sqrt(args, kwargs) (line 3574)
        sqrt_call_result_625351 = invoke(stypy.reporting.localization.Localization(__file__, 3574, 17), sqrt_625344, *[result_add_625349], **kwargs_625350)
        
        # Applying the binary operator 'div' (line 3574)
        result_div_625352 = python_operator(stypy.reporting.localization.Localization(__file__, 3574, 12), 'div', float_625342, sqrt_call_result_625351)
        
        # Assigning a type to the variable 'c' (line 3574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3574, 8), 'c', result_div_625352)
        
        
        # Getting the type of 'c' (line 3575)
        c_625353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 11), 'c')
        int_625354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3575, 16), 'int')
        # Applying the binary operator '==' (line 3575)
        result_eq_625355 = python_operator(stypy.reporting.localization.Localization(__file__, 3575, 11), '==', c_625353, int_625354)
        
        # Testing the type of an if condition (line 3575)
        if_condition_625356 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3575, 8), result_eq_625355)
        # Assigning a type to the variable 'if_condition_625356' (line 3575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3575, 8), 'if_condition_625356', if_condition_625356)
        # SSA begins for if statement (line 3575)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 3577):
        
        # Assigning a Num to a Name (line 3577):
        float_625357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3577, 16), 'float')
        # Assigning a type to the variable 's' (line 3577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3577, 12), 's', float_625357)
        # SSA branch for the else part of an if statement (line 3575)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 3579):
        
        # Assigning a BinOp to a Name (line 3579):
        # Getting the type of 'c' (line 3579)
        c_625358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3579, 16), 'c')
        # Getting the type of 't' (line 3579)
        t_625359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3579, 18), 't')
        # Applying the binary operator '*' (line 3579)
        result_mul_625360 = python_operator(stypy.reporting.localization.Localization(__file__, 3579, 16), '*', c_625358, t_625359)
        
        # Assigning a type to the variable 's' (line 3579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3579, 12), 's', result_mul_625360)
        # SSA join for if statement (line 3575)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 3580)
        tuple_625361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3580, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3580)
        # Adding element type (line 3580)
        # Getting the type of 'c' (line 3580)
        c_625362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3580, 15), 'c')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3580, 15), tuple_625361, c_625362)
        # Adding element type (line 3580)
        # Getting the type of 's' (line 3580)
        s_625363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3580, 18), 's')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3580, 15), tuple_625361, s_625363)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3580, 8), 'stypy_return_type', tuple_625361)
        
        # ################# End of '_givens_to_1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_givens_to_1' in the type store
        # Getting the type of 'stypy_return_type' (line 3549)
        stypy_return_type_625364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3549, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_625364)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_givens_to_1'
        return stypy_return_type_625364


    @norecursion
    def _to_corr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_to_corr'
        module_type_store = module_type_store.open_function_context('_to_corr', 3582, 4, False)
        # Assigning a type to the variable 'self' (line 3583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3583, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        random_correlation_gen._to_corr.__dict__.__setitem__('stypy_localization', localization)
        random_correlation_gen._to_corr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        random_correlation_gen._to_corr.__dict__.__setitem__('stypy_type_store', module_type_store)
        random_correlation_gen._to_corr.__dict__.__setitem__('stypy_function_name', 'random_correlation_gen._to_corr')
        random_correlation_gen._to_corr.__dict__.__setitem__('stypy_param_names_list', ['m'])
        random_correlation_gen._to_corr.__dict__.__setitem__('stypy_varargs_param_name', None)
        random_correlation_gen._to_corr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        random_correlation_gen._to_corr.__dict__.__setitem__('stypy_call_defaults', defaults)
        random_correlation_gen._to_corr.__dict__.__setitem__('stypy_call_varargs', varargs)
        random_correlation_gen._to_corr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        random_correlation_gen._to_corr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'random_correlation_gen._to_corr', ['m'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_to_corr', localization, ['m'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_to_corr(...)' code ##################

        str_625365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3587, (-1)), 'str', "\n        Given a psd matrix m, rotate to put one's on the diagonal, turning it\n        into a correlation matrix.  This also requires the trace equal the\n        dimensionality. Note: modifies input matrix\n        ")
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'm' (line 3589)
        m_625366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3589, 16), 'm')
        # Obtaining the member 'flags' of a type (line 3589)
        flags_625367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3589, 16), m_625366, 'flags')
        # Obtaining the member 'c_contiguous' of a type (line 3589)
        c_contiguous_625368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3589, 16), flags_625367, 'c_contiguous')
        
        # Getting the type of 'm' (line 3589)
        m_625369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3589, 41), 'm')
        # Obtaining the member 'dtype' of a type (line 3589)
        dtype_625370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3589, 41), m_625369, 'dtype')
        # Getting the type of 'np' (line 3589)
        np_625371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3589, 52), 'np')
        # Obtaining the member 'float64' of a type (line 3589)
        float64_625372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3589, 52), np_625371, 'float64')
        # Applying the binary operator '==' (line 3589)
        result_eq_625373 = python_operator(stypy.reporting.localization.Localization(__file__, 3589, 41), '==', dtype_625370, float64_625372)
        
        # Applying the binary operator 'and' (line 3589)
        result_and_keyword_625374 = python_operator(stypy.reporting.localization.Localization(__file__, 3589, 16), 'and', c_contiguous_625368, result_eq_625373)
        
        
        # Obtaining the type of the subscript
        int_625375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3589, 75), 'int')
        # Getting the type of 'm' (line 3589)
        m_625376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3589, 67), 'm')
        # Obtaining the member 'shape' of a type (line 3589)
        shape_625377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3589, 67), m_625376, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3589)
        getitem___625378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3589, 67), shape_625377, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3589)
        subscript_call_result_625379 = invoke(stypy.reporting.localization.Localization(__file__, 3589, 67), getitem___625378, int_625375)
        
        
        # Obtaining the type of the subscript
        int_625380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3589, 89), 'int')
        # Getting the type of 'm' (line 3589)
        m_625381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3589, 81), 'm')
        # Obtaining the member 'shape' of a type (line 3589)
        shape_625382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3589, 81), m_625381, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3589)
        getitem___625383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3589, 81), shape_625382, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3589)
        subscript_call_result_625384 = invoke(stypy.reporting.localization.Localization(__file__, 3589, 81), getitem___625383, int_625380)
        
        # Applying the binary operator '==' (line 3589)
        result_eq_625385 = python_operator(stypy.reporting.localization.Localization(__file__, 3589, 67), '==', subscript_call_result_625379, subscript_call_result_625384)
        
        # Applying the binary operator 'and' (line 3589)
        result_and_keyword_625386 = python_operator(stypy.reporting.localization.Localization(__file__, 3589, 16), 'and', result_and_keyword_625374, result_eq_625385)
        
        # Applying the 'not' unary operator (line 3589)
        result_not__625387 = python_operator(stypy.reporting.localization.Localization(__file__, 3589, 11), 'not', result_and_keyword_625386)
        
        # Testing the type of an if condition (line 3589)
        if_condition_625388 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3589, 8), result_not__625387)
        # Assigning a type to the variable 'if_condition_625388' (line 3589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3589, 8), 'if_condition_625388', if_condition_625388)
        # SSA begins for if statement (line 3589)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3590)
        # Processing the call keyword arguments (line 3590)
        kwargs_625390 = {}
        # Getting the type of 'ValueError' (line 3590)
        ValueError_625389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3590, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3590)
        ValueError_call_result_625391 = invoke(stypy.reporting.localization.Localization(__file__, 3590, 18), ValueError_625389, *[], **kwargs_625390)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3590, 12), ValueError_call_result_625391, 'raise parameter', BaseException)
        # SSA join for if statement (line 3589)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 3592):
        
        # Assigning a Subscript to a Name (line 3592):
        
        # Obtaining the type of the subscript
        int_625392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3592, 20), 'int')
        # Getting the type of 'm' (line 3592)
        m_625393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3592, 12), 'm')
        # Obtaining the member 'shape' of a type (line 3592)
        shape_625394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3592, 12), m_625393, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3592)
        getitem___625395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3592, 12), shape_625394, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3592)
        subscript_call_result_625396 = invoke(stypy.reporting.localization.Localization(__file__, 3592, 12), getitem___625395, int_625392)
        
        # Assigning a type to the variable 'd' (line 3592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3592, 8), 'd', subscript_call_result_625396)
        
        
        # Call to range(...): (line 3593)
        # Processing the call arguments (line 3593)
        # Getting the type of 'd' (line 3593)
        d_625398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3593, 23), 'd', False)
        int_625399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3593, 25), 'int')
        # Applying the binary operator '-' (line 3593)
        result_sub_625400 = python_operator(stypy.reporting.localization.Localization(__file__, 3593, 23), '-', d_625398, int_625399)
        
        # Processing the call keyword arguments (line 3593)
        kwargs_625401 = {}
        # Getting the type of 'range' (line 3593)
        range_625397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3593, 17), 'range', False)
        # Calling range(args, kwargs) (line 3593)
        range_call_result_625402 = invoke(stypy.reporting.localization.Localization(__file__, 3593, 17), range_625397, *[result_sub_625400], **kwargs_625401)
        
        # Testing the type of a for loop iterable (line 3593)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3593, 8), range_call_result_625402)
        # Getting the type of the for loop variable (line 3593)
        for_loop_var_625403 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3593, 8), range_call_result_625402)
        # Assigning a type to the variable 'i' (line 3593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3593, 8), 'i', for_loop_var_625403)
        # SSA begins for a for statement (line 3593)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 3594)
        tuple_625404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3594, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3594)
        # Adding element type (line 3594)
        # Getting the type of 'i' (line 3594)
        i_625405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3594, 17), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3594, 17), tuple_625404, i_625405)
        # Adding element type (line 3594)
        # Getting the type of 'i' (line 3594)
        i_625406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3594, 19), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3594, 17), tuple_625404, i_625406)
        
        # Getting the type of 'm' (line 3594)
        m_625407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3594, 15), 'm')
        # Obtaining the member '__getitem__' of a type (line 3594)
        getitem___625408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3594, 15), m_625407, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3594)
        subscript_call_result_625409 = invoke(stypy.reporting.localization.Localization(__file__, 3594, 15), getitem___625408, tuple_625404)
        
        int_625410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3594, 25), 'int')
        # Applying the binary operator '==' (line 3594)
        result_eq_625411 = python_operator(stypy.reporting.localization.Localization(__file__, 3594, 15), '==', subscript_call_result_625409, int_625410)
        
        # Testing the type of an if condition (line 3594)
        if_condition_625412 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3594, 12), result_eq_625411)
        # Assigning a type to the variable 'if_condition_625412' (line 3594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3594, 12), 'if_condition_625412', if_condition_625412)
        # SSA begins for if statement (line 3594)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA branch for the else part of an if statement (line 3594)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 3596)
        tuple_625413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3596, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3596)
        # Adding element type (line 3596)
        # Getting the type of 'i' (line 3596)
        i_625414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3596, 19), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3596, 19), tuple_625413, i_625414)
        # Adding element type (line 3596)
        # Getting the type of 'i' (line 3596)
        i_625415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3596, 22), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3596, 19), tuple_625413, i_625415)
        
        # Getting the type of 'm' (line 3596)
        m_625416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3596, 17), 'm')
        # Obtaining the member '__getitem__' of a type (line 3596)
        getitem___625417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3596, 17), m_625416, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3596)
        subscript_call_result_625418 = invoke(stypy.reporting.localization.Localization(__file__, 3596, 17), getitem___625417, tuple_625413)
        
        int_625419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3596, 27), 'int')
        # Applying the binary operator '>' (line 3596)
        result_gt_625420 = python_operator(stypy.reporting.localization.Localization(__file__, 3596, 17), '>', subscript_call_result_625418, int_625419)
        
        # Testing the type of an if condition (line 3596)
        if_condition_625421 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3596, 17), result_gt_625420)
        # Assigning a type to the variable 'if_condition_625421' (line 3596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3596, 17), 'if_condition_625421', if_condition_625421)
        # SSA begins for if statement (line 3596)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 3597)
        # Processing the call arguments (line 3597)
        # Getting the type of 'i' (line 3597)
        i_625423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3597, 31), 'i', False)
        int_625424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3597, 33), 'int')
        # Applying the binary operator '+' (line 3597)
        result_add_625425 = python_operator(stypy.reporting.localization.Localization(__file__, 3597, 31), '+', i_625423, int_625424)
        
        # Getting the type of 'd' (line 3597)
        d_625426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3597, 36), 'd', False)
        # Processing the call keyword arguments (line 3597)
        kwargs_625427 = {}
        # Getting the type of 'range' (line 3597)
        range_625422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3597, 25), 'range', False)
        # Calling range(args, kwargs) (line 3597)
        range_call_result_625428 = invoke(stypy.reporting.localization.Localization(__file__, 3597, 25), range_625422, *[result_add_625425, d_625426], **kwargs_625427)
        
        # Testing the type of a for loop iterable (line 3597)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3597, 16), range_call_result_625428)
        # Getting the type of the for loop variable (line 3597)
        for_loop_var_625429 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3597, 16), range_call_result_625428)
        # Assigning a type to the variable 'j' (line 3597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3597, 16), 'j', for_loop_var_625429)
        # SSA begins for a for statement (line 3597)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 3598)
        tuple_625430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3598, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3598)
        # Adding element type (line 3598)
        # Getting the type of 'j' (line 3598)
        j_625431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3598, 25), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3598, 25), tuple_625430, j_625431)
        # Adding element type (line 3598)
        # Getting the type of 'j' (line 3598)
        j_625432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3598, 28), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3598, 25), tuple_625430, j_625432)
        
        # Getting the type of 'm' (line 3598)
        m_625433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3598, 23), 'm')
        # Obtaining the member '__getitem__' of a type (line 3598)
        getitem___625434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3598, 23), m_625433, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3598)
        subscript_call_result_625435 = invoke(stypy.reporting.localization.Localization(__file__, 3598, 23), getitem___625434, tuple_625430)
        
        int_625436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3598, 33), 'int')
        # Applying the binary operator '<' (line 3598)
        result_lt_625437 = python_operator(stypy.reporting.localization.Localization(__file__, 3598, 23), '<', subscript_call_result_625435, int_625436)
        
        # Testing the type of an if condition (line 3598)
        if_condition_625438 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3598, 20), result_lt_625437)
        # Assigning a type to the variable 'if_condition_625438' (line 3598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3598, 20), 'if_condition_625438', if_condition_625438)
        # SSA begins for if statement (line 3598)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 3598)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3596)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to range(...): (line 3601)
        # Processing the call arguments (line 3601)
        # Getting the type of 'i' (line 3601)
        i_625440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 31), 'i', False)
        int_625441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3601, 33), 'int')
        # Applying the binary operator '+' (line 3601)
        result_add_625442 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 31), '+', i_625440, int_625441)
        
        # Getting the type of 'd' (line 3601)
        d_625443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 36), 'd', False)
        # Processing the call keyword arguments (line 3601)
        kwargs_625444 = {}
        # Getting the type of 'range' (line 3601)
        range_625439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 25), 'range', False)
        # Calling range(args, kwargs) (line 3601)
        range_call_result_625445 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 25), range_625439, *[result_add_625442, d_625443], **kwargs_625444)
        
        # Testing the type of a for loop iterable (line 3601)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3601, 16), range_call_result_625445)
        # Getting the type of the for loop variable (line 3601)
        for_loop_var_625446 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3601, 16), range_call_result_625445)
        # Assigning a type to the variable 'j' (line 3601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3601, 16), 'j', for_loop_var_625446)
        # SSA begins for a for statement (line 3601)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 3602)
        tuple_625447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3602, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3602)
        # Adding element type (line 3602)
        # Getting the type of 'j' (line 3602)
        j_625448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3602, 25), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3602, 25), tuple_625447, j_625448)
        # Adding element type (line 3602)
        # Getting the type of 'j' (line 3602)
        j_625449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3602, 28), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3602, 25), tuple_625447, j_625449)
        
        # Getting the type of 'm' (line 3602)
        m_625450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3602, 23), 'm')
        # Obtaining the member '__getitem__' of a type (line 3602)
        getitem___625451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3602, 23), m_625450, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3602)
        subscript_call_result_625452 = invoke(stypy.reporting.localization.Localization(__file__, 3602, 23), getitem___625451, tuple_625447)
        
        int_625453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3602, 33), 'int')
        # Applying the binary operator '>' (line 3602)
        result_gt_625454 = python_operator(stypy.reporting.localization.Localization(__file__, 3602, 23), '>', subscript_call_result_625452, int_625453)
        
        # Testing the type of an if condition (line 3602)
        if_condition_625455 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3602, 20), result_gt_625454)
        # Assigning a type to the variable 'if_condition_625455' (line 3602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3602, 20), 'if_condition_625455', if_condition_625455)
        # SSA begins for if statement (line 3602)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 3602)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3596)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3594)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 3605):
        
        # Assigning a Subscript to a Name (line 3605):
        
        # Obtaining the type of the subscript
        int_625456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3605, 12), 'int')
        
        # Call to _givens_to_1(...): (line 3605)
        # Processing the call arguments (line 3605)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 3605)
        tuple_625459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3605, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3605)
        # Adding element type (line 3605)
        # Getting the type of 'i' (line 3605)
        i_625460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 39), 'i', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 39), tuple_625459, i_625460)
        # Adding element type (line 3605)
        # Getting the type of 'i' (line 3605)
        i_625461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 41), 'i', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 39), tuple_625459, i_625461)
        
        # Getting the type of 'm' (line 3605)
        m_625462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 37), 'm', False)
        # Obtaining the member '__getitem__' of a type (line 3605)
        getitem___625463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 37), m_625462, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3605)
        subscript_call_result_625464 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 37), getitem___625463, tuple_625459)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 3605)
        tuple_625465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3605, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3605)
        # Adding element type (line 3605)
        # Getting the type of 'j' (line 3605)
        j_625466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 47), 'j', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 47), tuple_625465, j_625466)
        # Adding element type (line 3605)
        # Getting the type of 'j' (line 3605)
        j_625467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 49), 'j', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 47), tuple_625465, j_625467)
        
        # Getting the type of 'm' (line 3605)
        m_625468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 45), 'm', False)
        # Obtaining the member '__getitem__' of a type (line 3605)
        getitem___625469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 45), m_625468, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3605)
        subscript_call_result_625470 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 45), getitem___625469, tuple_625465)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 3605)
        tuple_625471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3605, 55), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3605)
        # Adding element type (line 3605)
        # Getting the type of 'i' (line 3605)
        i_625472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 55), 'i', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 55), tuple_625471, i_625472)
        # Adding element type (line 3605)
        # Getting the type of 'j' (line 3605)
        j_625473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 57), 'j', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 55), tuple_625471, j_625473)
        
        # Getting the type of 'm' (line 3605)
        m_625474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 53), 'm', False)
        # Obtaining the member '__getitem__' of a type (line 3605)
        getitem___625475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 53), m_625474, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3605)
        subscript_call_result_625476 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 53), getitem___625475, tuple_625471)
        
        # Processing the call keyword arguments (line 3605)
        kwargs_625477 = {}
        # Getting the type of 'self' (line 3605)
        self_625457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 19), 'self', False)
        # Obtaining the member '_givens_to_1' of a type (line 3605)
        _givens_to_1_625458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 19), self_625457, '_givens_to_1')
        # Calling _givens_to_1(args, kwargs) (line 3605)
        _givens_to_1_call_result_625478 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 19), _givens_to_1_625458, *[subscript_call_result_625464, subscript_call_result_625470, subscript_call_result_625476], **kwargs_625477)
        
        # Obtaining the member '__getitem__' of a type (line 3605)
        getitem___625479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 12), _givens_to_1_call_result_625478, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3605)
        subscript_call_result_625480 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 12), getitem___625479, int_625456)
        
        # Assigning a type to the variable 'tuple_var_assignment_618698' (line 3605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3605, 12), 'tuple_var_assignment_618698', subscript_call_result_625480)
        
        # Assigning a Subscript to a Name (line 3605):
        
        # Obtaining the type of the subscript
        int_625481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3605, 12), 'int')
        
        # Call to _givens_to_1(...): (line 3605)
        # Processing the call arguments (line 3605)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 3605)
        tuple_625484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3605, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3605)
        # Adding element type (line 3605)
        # Getting the type of 'i' (line 3605)
        i_625485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 39), 'i', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 39), tuple_625484, i_625485)
        # Adding element type (line 3605)
        # Getting the type of 'i' (line 3605)
        i_625486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 41), 'i', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 39), tuple_625484, i_625486)
        
        # Getting the type of 'm' (line 3605)
        m_625487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 37), 'm', False)
        # Obtaining the member '__getitem__' of a type (line 3605)
        getitem___625488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 37), m_625487, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3605)
        subscript_call_result_625489 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 37), getitem___625488, tuple_625484)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 3605)
        tuple_625490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3605, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3605)
        # Adding element type (line 3605)
        # Getting the type of 'j' (line 3605)
        j_625491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 47), 'j', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 47), tuple_625490, j_625491)
        # Adding element type (line 3605)
        # Getting the type of 'j' (line 3605)
        j_625492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 49), 'j', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 47), tuple_625490, j_625492)
        
        # Getting the type of 'm' (line 3605)
        m_625493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 45), 'm', False)
        # Obtaining the member '__getitem__' of a type (line 3605)
        getitem___625494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 45), m_625493, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3605)
        subscript_call_result_625495 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 45), getitem___625494, tuple_625490)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 3605)
        tuple_625496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3605, 55), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3605)
        # Adding element type (line 3605)
        # Getting the type of 'i' (line 3605)
        i_625497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 55), 'i', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 55), tuple_625496, i_625497)
        # Adding element type (line 3605)
        # Getting the type of 'j' (line 3605)
        j_625498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 57), 'j', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 55), tuple_625496, j_625498)
        
        # Getting the type of 'm' (line 3605)
        m_625499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 53), 'm', False)
        # Obtaining the member '__getitem__' of a type (line 3605)
        getitem___625500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 53), m_625499, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3605)
        subscript_call_result_625501 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 53), getitem___625500, tuple_625496)
        
        # Processing the call keyword arguments (line 3605)
        kwargs_625502 = {}
        # Getting the type of 'self' (line 3605)
        self_625482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 19), 'self', False)
        # Obtaining the member '_givens_to_1' of a type (line 3605)
        _givens_to_1_625483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 19), self_625482, '_givens_to_1')
        # Calling _givens_to_1(args, kwargs) (line 3605)
        _givens_to_1_call_result_625503 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 19), _givens_to_1_625483, *[subscript_call_result_625489, subscript_call_result_625495, subscript_call_result_625501], **kwargs_625502)
        
        # Obtaining the member '__getitem__' of a type (line 3605)
        getitem___625504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 12), _givens_to_1_call_result_625503, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3605)
        subscript_call_result_625505 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 12), getitem___625504, int_625481)
        
        # Assigning a type to the variable 'tuple_var_assignment_618699' (line 3605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3605, 12), 'tuple_var_assignment_618699', subscript_call_result_625505)
        
        # Assigning a Name to a Name (line 3605):
        # Getting the type of 'tuple_var_assignment_618698' (line 3605)
        tuple_var_assignment_618698_625506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 12), 'tuple_var_assignment_618698')
        # Assigning a type to the variable 'c' (line 3605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3605, 12), 'c', tuple_var_assignment_618698_625506)
        
        # Assigning a Name to a Name (line 3605):
        # Getting the type of 'tuple_var_assignment_618699' (line 3605)
        tuple_var_assignment_618699_625507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 12), 'tuple_var_assignment_618699')
        # Assigning a type to the variable 's' (line 3605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3605, 15), 's', tuple_var_assignment_618699_625507)
        
        # Assigning a Call to a Name (line 3612):
        
        # Assigning a Call to a Name (line 3612):
        
        # Call to ravel(...): (line 3612)
        # Processing the call keyword arguments (line 3612)
        kwargs_625510 = {}
        # Getting the type of 'm' (line 3612)
        m_625508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 17), 'm', False)
        # Obtaining the member 'ravel' of a type (line 3612)
        ravel_625509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3612, 17), m_625508, 'ravel')
        # Calling ravel(args, kwargs) (line 3612)
        ravel_call_result_625511 = invoke(stypy.reporting.localization.Localization(__file__, 3612, 17), ravel_625509, *[], **kwargs_625510)
        
        # Assigning a type to the variable 'mv' (line 3612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3612, 12), 'mv', ravel_call_result_625511)
        
        # Call to drot(...): (line 3613)
        # Processing the call arguments (line 3613)
        # Getting the type of 'mv' (line 3613)
        mv_625513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3613, 17), 'mv', False)
        # Getting the type of 'mv' (line 3613)
        mv_625514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3613, 21), 'mv', False)
        # Getting the type of 'c' (line 3613)
        c_625515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3613, 25), 'c', False)
        
        # Getting the type of 's' (line 3613)
        s_625516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3613, 29), 's', False)
        # Applying the 'usub' unary operator (line 3613)
        result___neg___625517 = python_operator(stypy.reporting.localization.Localization(__file__, 3613, 28), 'usub', s_625516)
        
        # Processing the call keyword arguments (line 3613)
        # Getting the type of 'd' (line 3613)
        d_625518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3613, 34), 'd', False)
        keyword_625519 = d_625518
        # Getting the type of 'i' (line 3614)
        i_625520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 22), 'i', False)
        # Getting the type of 'd' (line 3614)
        d_625521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 24), 'd', False)
        # Applying the binary operator '*' (line 3614)
        result_mul_625522 = python_operator(stypy.reporting.localization.Localization(__file__, 3614, 22), '*', i_625520, d_625521)
        
        keyword_625523 = result_mul_625522
        int_625524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3614, 32), 'int')
        keyword_625525 = int_625524
        # Getting the type of 'j' (line 3614)
        j_625526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 40), 'j', False)
        # Getting the type of 'd' (line 3614)
        d_625527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 42), 'd', False)
        # Applying the binary operator '*' (line 3614)
        result_mul_625528 = python_operator(stypy.reporting.localization.Localization(__file__, 3614, 40), '*', j_625526, d_625527)
        
        keyword_625529 = result_mul_625528
        int_625530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3614, 50), 'int')
        keyword_625531 = int_625530
        # Getting the type of 'True' (line 3615)
        True_625532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 29), 'True', False)
        keyword_625533 = True_625532
        # Getting the type of 'True' (line 3615)
        True_625534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 47), 'True', False)
        keyword_625535 = True_625534
        kwargs_625536 = {'incx': keyword_625525, 'offx': keyword_625523, 'n': keyword_625519, 'offy': keyword_625529, 'incy': keyword_625531, 'overwrite_y': keyword_625535, 'overwrite_x': keyword_625533}
        # Getting the type of 'drot' (line 3613)
        drot_625512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3613, 12), 'drot', False)
        # Calling drot(args, kwargs) (line 3613)
        drot_call_result_625537 = invoke(stypy.reporting.localization.Localization(__file__, 3613, 12), drot_625512, *[mv_625513, mv_625514, c_625515, result___neg___625517], **kwargs_625536)
        
        
        # Call to drot(...): (line 3616)
        # Processing the call arguments (line 3616)
        # Getting the type of 'mv' (line 3616)
        mv_625539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 17), 'mv', False)
        # Getting the type of 'mv' (line 3616)
        mv_625540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 21), 'mv', False)
        # Getting the type of 'c' (line 3616)
        c_625541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 25), 'c', False)
        
        # Getting the type of 's' (line 3616)
        s_625542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 29), 's', False)
        # Applying the 'usub' unary operator (line 3616)
        result___neg___625543 = python_operator(stypy.reporting.localization.Localization(__file__, 3616, 28), 'usub', s_625542)
        
        # Processing the call keyword arguments (line 3616)
        # Getting the type of 'd' (line 3616)
        d_625544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 34), 'd', False)
        keyword_625545 = d_625544
        # Getting the type of 'i' (line 3617)
        i_625546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 22), 'i', False)
        keyword_625547 = i_625546
        # Getting the type of 'd' (line 3617)
        d_625548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 30), 'd', False)
        keyword_625549 = d_625548
        # Getting the type of 'j' (line 3617)
        j_625550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 38), 'j', False)
        keyword_625551 = j_625550
        # Getting the type of 'd' (line 3617)
        d_625552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 46), 'd', False)
        keyword_625553 = d_625552
        # Getting the type of 'True' (line 3618)
        True_625554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3618, 29), 'True', False)
        keyword_625555 = True_625554
        # Getting the type of 'True' (line 3618)
        True_625556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3618, 47), 'True', False)
        keyword_625557 = True_625556
        kwargs_625558 = {'incx': keyword_625549, 'offx': keyword_625547, 'n': keyword_625545, 'offy': keyword_625551, 'incy': keyword_625553, 'overwrite_y': keyword_625557, 'overwrite_x': keyword_625555}
        # Getting the type of 'drot' (line 3616)
        drot_625538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 12), 'drot', False)
        # Calling drot(args, kwargs) (line 3616)
        drot_call_result_625559 = invoke(stypy.reporting.localization.Localization(__file__, 3616, 12), drot_625538, *[mv_625539, mv_625540, c_625541, result___neg___625543], **kwargs_625558)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'm' (line 3620)
        m_625560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3620, 15), 'm')
        # Assigning a type to the variable 'stypy_return_type' (line 3620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3620, 8), 'stypy_return_type', m_625560)
        
        # ################# End of '_to_corr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_to_corr' in the type store
        # Getting the type of 'stypy_return_type' (line 3582)
        stypy_return_type_625561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3582, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_625561)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_to_corr'
        return stypy_return_type_625561


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3622)
        None_625562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3622, 37), 'None')
        float_625563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3622, 47), 'float')
        float_625564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3622, 63), 'float')
        defaults = [None_625562, float_625563, float_625564]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 3622, 4, False)
        # Assigning a type to the variable 'self' (line 3623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3623, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        random_correlation_gen.rvs.__dict__.__setitem__('stypy_localization', localization)
        random_correlation_gen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        random_correlation_gen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        random_correlation_gen.rvs.__dict__.__setitem__('stypy_function_name', 'random_correlation_gen.rvs')
        random_correlation_gen.rvs.__dict__.__setitem__('stypy_param_names_list', ['eigs', 'random_state', 'tol', 'diag_tol'])
        random_correlation_gen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        random_correlation_gen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        random_correlation_gen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        random_correlation_gen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        random_correlation_gen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        random_correlation_gen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'random_correlation_gen.rvs', ['eigs', 'random_state', 'tol', 'diag_tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['eigs', 'random_state', 'tol', 'diag_tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        str_625565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3648, (-1)), 'str', '\n        Draw random correlation matrices\n\n        Parameters\n        ----------\n        eigs : 1d ndarray\n            Eigenvalues of correlation matrix\n        tol : float, optional\n            Tolerance for input parameter checks\n        diag_tol : float, optional\n            Tolerance for deviation of the diagonal of the resulting\n            matrix. Default: 1e-7\n\n        Raises\n        ------\n        RuntimeError\n            Floating point error prevented generating a valid correlation\n            matrix.\n\n        Returns\n        -------\n        rvs : ndarray or scalar\n            Random size N-dimensional matrices, dimension (size, dim, dim),\n            each having eigenvalues eigs.\n\n        ')
        
        # Assigning a Call to a Tuple (line 3649):
        
        # Assigning a Subscript to a Name (line 3649):
        
        # Obtaining the type of the subscript
        int_625566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3649, 8), 'int')
        
        # Call to _process_parameters(...): (line 3649)
        # Processing the call arguments (line 3649)
        # Getting the type of 'eigs' (line 3649)
        eigs_625569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3649, 45), 'eigs', False)
        # Processing the call keyword arguments (line 3649)
        # Getting the type of 'tol' (line 3649)
        tol_625570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3649, 55), 'tol', False)
        keyword_625571 = tol_625570
        kwargs_625572 = {'tol': keyword_625571}
        # Getting the type of 'self' (line 3649)
        self_625567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3649, 20), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3649)
        _process_parameters_625568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3649, 20), self_625567, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3649)
        _process_parameters_call_result_625573 = invoke(stypy.reporting.localization.Localization(__file__, 3649, 20), _process_parameters_625568, *[eigs_625569], **kwargs_625572)
        
        # Obtaining the member '__getitem__' of a type (line 3649)
        getitem___625574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3649, 8), _process_parameters_call_result_625573, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3649)
        subscript_call_result_625575 = invoke(stypy.reporting.localization.Localization(__file__, 3649, 8), getitem___625574, int_625566)
        
        # Assigning a type to the variable 'tuple_var_assignment_618700' (line 3649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3649, 8), 'tuple_var_assignment_618700', subscript_call_result_625575)
        
        # Assigning a Subscript to a Name (line 3649):
        
        # Obtaining the type of the subscript
        int_625576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3649, 8), 'int')
        
        # Call to _process_parameters(...): (line 3649)
        # Processing the call arguments (line 3649)
        # Getting the type of 'eigs' (line 3649)
        eigs_625579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3649, 45), 'eigs', False)
        # Processing the call keyword arguments (line 3649)
        # Getting the type of 'tol' (line 3649)
        tol_625580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3649, 55), 'tol', False)
        keyword_625581 = tol_625580
        kwargs_625582 = {'tol': keyword_625581}
        # Getting the type of 'self' (line 3649)
        self_625577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3649, 20), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3649)
        _process_parameters_625578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3649, 20), self_625577, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3649)
        _process_parameters_call_result_625583 = invoke(stypy.reporting.localization.Localization(__file__, 3649, 20), _process_parameters_625578, *[eigs_625579], **kwargs_625582)
        
        # Obtaining the member '__getitem__' of a type (line 3649)
        getitem___625584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3649, 8), _process_parameters_call_result_625583, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3649)
        subscript_call_result_625585 = invoke(stypy.reporting.localization.Localization(__file__, 3649, 8), getitem___625584, int_625576)
        
        # Assigning a type to the variable 'tuple_var_assignment_618701' (line 3649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3649, 8), 'tuple_var_assignment_618701', subscript_call_result_625585)
        
        # Assigning a Name to a Name (line 3649):
        # Getting the type of 'tuple_var_assignment_618700' (line 3649)
        tuple_var_assignment_618700_625586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3649, 8), 'tuple_var_assignment_618700')
        # Assigning a type to the variable 'dim' (line 3649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3649, 8), 'dim', tuple_var_assignment_618700_625586)
        
        # Assigning a Name to a Name (line 3649):
        # Getting the type of 'tuple_var_assignment_618701' (line 3649)
        tuple_var_assignment_618701_625587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3649, 8), 'tuple_var_assignment_618701')
        # Assigning a type to the variable 'eigs' (line 3649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3649, 13), 'eigs', tuple_var_assignment_618701_625587)
        
        # Assigning a Call to a Name (line 3651):
        
        # Assigning a Call to a Name (line 3651):
        
        # Call to _get_random_state(...): (line 3651)
        # Processing the call arguments (line 3651)
        # Getting the type of 'random_state' (line 3651)
        random_state_625590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 46), 'random_state', False)
        # Processing the call keyword arguments (line 3651)
        kwargs_625591 = {}
        # Getting the type of 'self' (line 3651)
        self_625588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 23), 'self', False)
        # Obtaining the member '_get_random_state' of a type (line 3651)
        _get_random_state_625589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3651, 23), self_625588, '_get_random_state')
        # Calling _get_random_state(args, kwargs) (line 3651)
        _get_random_state_call_result_625592 = invoke(stypy.reporting.localization.Localization(__file__, 3651, 23), _get_random_state_625589, *[random_state_625590], **kwargs_625591)
        
        # Assigning a type to the variable 'random_state' (line 3651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3651, 8), 'random_state', _get_random_state_call_result_625592)
        
        # Assigning a Call to a Name (line 3653):
        
        # Assigning a Call to a Name (line 3653):
        
        # Call to rvs(...): (line 3653)
        # Processing the call arguments (line 3653)
        # Getting the type of 'dim' (line 3653)
        dim_625595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 28), 'dim', False)
        # Processing the call keyword arguments (line 3653)
        # Getting the type of 'random_state' (line 3653)
        random_state_625596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 46), 'random_state', False)
        keyword_625597 = random_state_625596
        kwargs_625598 = {'random_state': keyword_625597}
        # Getting the type of 'ortho_group' (line 3653)
        ortho_group_625593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 12), 'ortho_group', False)
        # Obtaining the member 'rvs' of a type (line 3653)
        rvs_625594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3653, 12), ortho_group_625593, 'rvs')
        # Calling rvs(args, kwargs) (line 3653)
        rvs_call_result_625599 = invoke(stypy.reporting.localization.Localization(__file__, 3653, 12), rvs_625594, *[dim_625595], **kwargs_625598)
        
        # Assigning a type to the variable 'm' (line 3653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3653, 8), 'm', rvs_call_result_625599)
        
        # Assigning a Call to a Name (line 3654):
        
        # Assigning a Call to a Name (line 3654):
        
        # Call to dot(...): (line 3654)
        # Processing the call arguments (line 3654)
        
        # Call to dot(...): (line 3654)
        # Processing the call arguments (line 3654)
        # Getting the type of 'm' (line 3654)
        m_625604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3654, 26), 'm', False)
        
        # Call to diag(...): (line 3654)
        # Processing the call arguments (line 3654)
        # Getting the type of 'eigs' (line 3654)
        eigs_625607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3654, 37), 'eigs', False)
        # Processing the call keyword arguments (line 3654)
        kwargs_625608 = {}
        # Getting the type of 'np' (line 3654)
        np_625605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3654, 29), 'np', False)
        # Obtaining the member 'diag' of a type (line 3654)
        diag_625606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3654, 29), np_625605, 'diag')
        # Calling diag(args, kwargs) (line 3654)
        diag_call_result_625609 = invoke(stypy.reporting.localization.Localization(__file__, 3654, 29), diag_625606, *[eigs_625607], **kwargs_625608)
        
        # Processing the call keyword arguments (line 3654)
        kwargs_625610 = {}
        # Getting the type of 'np' (line 3654)
        np_625602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3654, 19), 'np', False)
        # Obtaining the member 'dot' of a type (line 3654)
        dot_625603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3654, 19), np_625602, 'dot')
        # Calling dot(args, kwargs) (line 3654)
        dot_call_result_625611 = invoke(stypy.reporting.localization.Localization(__file__, 3654, 19), dot_625603, *[m_625604, diag_call_result_625609], **kwargs_625610)
        
        # Getting the type of 'm' (line 3654)
        m_625612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3654, 45), 'm', False)
        # Obtaining the member 'T' of a type (line 3654)
        T_625613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3654, 45), m_625612, 'T')
        # Processing the call keyword arguments (line 3654)
        kwargs_625614 = {}
        # Getting the type of 'np' (line 3654)
        np_625600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3654, 12), 'np', False)
        # Obtaining the member 'dot' of a type (line 3654)
        dot_625601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3654, 12), np_625600, 'dot')
        # Calling dot(args, kwargs) (line 3654)
        dot_call_result_625615 = invoke(stypy.reporting.localization.Localization(__file__, 3654, 12), dot_625601, *[dot_call_result_625611, T_625613], **kwargs_625614)
        
        # Assigning a type to the variable 'm' (line 3654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3654, 8), 'm', dot_call_result_625615)
        
        # Assigning a Call to a Name (line 3655):
        
        # Assigning a Call to a Name (line 3655):
        
        # Call to _to_corr(...): (line 3655)
        # Processing the call arguments (line 3655)
        # Getting the type of 'm' (line 3655)
        m_625618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3655, 26), 'm', False)
        # Processing the call keyword arguments (line 3655)
        kwargs_625619 = {}
        # Getting the type of 'self' (line 3655)
        self_625616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3655, 12), 'self', False)
        # Obtaining the member '_to_corr' of a type (line 3655)
        _to_corr_625617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3655, 12), self_625616, '_to_corr')
        # Calling _to_corr(args, kwargs) (line 3655)
        _to_corr_call_result_625620 = invoke(stypy.reporting.localization.Localization(__file__, 3655, 12), _to_corr_625617, *[m_625618], **kwargs_625619)
        
        # Assigning a type to the variable 'm' (line 3655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3655, 8), 'm', _to_corr_call_result_625620)
        
        
        
        # Call to max(...): (line 3658)
        # Processing the call keyword arguments (line 3658)
        kwargs_625631 = {}
        
        # Call to abs(...): (line 3658)
        # Processing the call arguments (line 3658)
        
        # Call to diagonal(...): (line 3658)
        # Processing the call keyword arguments (line 3658)
        kwargs_625624 = {}
        # Getting the type of 'm' (line 3658)
        m_625622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3658, 15), 'm', False)
        # Obtaining the member 'diagonal' of a type (line 3658)
        diagonal_625623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3658, 15), m_625622, 'diagonal')
        # Calling diagonal(args, kwargs) (line 3658)
        diagonal_call_result_625625 = invoke(stypy.reporting.localization.Localization(__file__, 3658, 15), diagonal_625623, *[], **kwargs_625624)
        
        int_625626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3658, 30), 'int')
        # Applying the binary operator '-' (line 3658)
        result_sub_625627 = python_operator(stypy.reporting.localization.Localization(__file__, 3658, 15), '-', diagonal_call_result_625625, int_625626)
        
        # Processing the call keyword arguments (line 3658)
        kwargs_625628 = {}
        # Getting the type of 'abs' (line 3658)
        abs_625621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3658, 11), 'abs', False)
        # Calling abs(args, kwargs) (line 3658)
        abs_call_result_625629 = invoke(stypy.reporting.localization.Localization(__file__, 3658, 11), abs_625621, *[result_sub_625627], **kwargs_625628)
        
        # Obtaining the member 'max' of a type (line 3658)
        max_625630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3658, 11), abs_call_result_625629, 'max')
        # Calling max(args, kwargs) (line 3658)
        max_call_result_625632 = invoke(stypy.reporting.localization.Localization(__file__, 3658, 11), max_625630, *[], **kwargs_625631)
        
        # Getting the type of 'diag_tol' (line 3658)
        diag_tol_625633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3658, 41), 'diag_tol')
        # Applying the binary operator '>' (line 3658)
        result_gt_625634 = python_operator(stypy.reporting.localization.Localization(__file__, 3658, 11), '>', max_call_result_625632, diag_tol_625633)
        
        # Testing the type of an if condition (line 3658)
        if_condition_625635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3658, 8), result_gt_625634)
        # Assigning a type to the variable 'if_condition_625635' (line 3658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3658, 8), 'if_condition_625635', if_condition_625635)
        # SSA begins for if statement (line 3658)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 3659)
        # Processing the call arguments (line 3659)
        str_625637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3659, 31), 'str', 'Failed to generate a valid correlation matrix')
        # Processing the call keyword arguments (line 3659)
        kwargs_625638 = {}
        # Getting the type of 'RuntimeError' (line 3659)
        RuntimeError_625636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3659, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 3659)
        RuntimeError_call_result_625639 = invoke(stypy.reporting.localization.Localization(__file__, 3659, 18), RuntimeError_625636, *[str_625637], **kwargs_625638)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3659, 12), RuntimeError_call_result_625639, 'raise parameter', BaseException)
        # SSA join for if statement (line 3658)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'm' (line 3661)
        m_625640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3661, 15), 'm')
        # Assigning a type to the variable 'stypy_return_type' (line 3661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3661, 8), 'stypy_return_type', m_625640)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 3622)
        stypy_return_type_625641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3622, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_625641)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_625641


# Assigning a type to the variable 'random_correlation_gen' (line 3476)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3476, 0), 'random_correlation_gen', random_correlation_gen)

# Assigning a Call to a Name (line 3663):

# Assigning a Call to a Name (line 3663):

# Call to random_correlation_gen(...): (line 3663)
# Processing the call keyword arguments (line 3663)
kwargs_625643 = {}
# Getting the type of 'random_correlation_gen' (line 3663)
random_correlation_gen_625642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3663, 21), 'random_correlation_gen', False)
# Calling random_correlation_gen(args, kwargs) (line 3663)
random_correlation_gen_call_result_625644 = invoke(stypy.reporting.localization.Localization(__file__, 3663, 21), random_correlation_gen_625642, *[], **kwargs_625643)

# Assigning a type to the variable 'random_correlation' (line 3663)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3663, 0), 'random_correlation', random_correlation_gen_call_result_625644)
# Declaration of the 'unitary_group_gen' class
# Getting the type of 'multi_rv_generic' (line 3665)
multi_rv_generic_625645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3665, 24), 'multi_rv_generic')

class unitary_group_gen(multi_rv_generic_625645, ):
    str_625646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3704, (-1)), 'str', '\n    A matrix-valued U(N) random variable.\n\n    Return a random unitary matrix.\n\n    The `dim` keyword specifies the dimension N.\n\n    Methods\n    -------\n    ``rvs(dim=None, size=1, random_state=None)``\n        Draw random samples from U(N).\n\n    Parameters\n    ----------\n    dim : scalar\n        Dimension of matrices\n\n    Notes\n    ----------\n    This class is similar to `ortho_group`.\n\n    References\n    ----------\n    .. [1] F. Mezzadri, "How to generate random matrices from the classical\n           compact groups", arXiv:math-ph/0609050v2.\n\n    Examples\n    --------\n    >>> from scipy.stats import unitary_group\n    >>> x = unitary_group.rvs(3)\n\n    >>> np.dot(x, x.conj().T)\n    array([[  1.00000000e+00,   1.13231364e-17,  -2.86852790e-16],\n           [  1.13231364e-17,   1.00000000e+00,  -1.46845020e-16],\n           [ -2.86852790e-16,  -1.46845020e-16,   1.00000000e+00]])\n\n    This generates one random matrix from U(3). The dot product confirms that it is unitary up to machine precision.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3706)
        None_625647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3706, 28), 'None')
        defaults = [None_625647]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3706, 4, False)
        # Assigning a type to the variable 'self' (line 3707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3707, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'unitary_group_gen.__init__', ['seed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['seed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 3707)
        # Processing the call arguments (line 3707)
        # Getting the type of 'seed' (line 3707)
        seed_625654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3707, 48), 'seed', False)
        # Processing the call keyword arguments (line 3707)
        kwargs_625655 = {}
        
        # Call to super(...): (line 3707)
        # Processing the call arguments (line 3707)
        # Getting the type of 'unitary_group_gen' (line 3707)
        unitary_group_gen_625649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3707, 14), 'unitary_group_gen', False)
        # Getting the type of 'self' (line 3707)
        self_625650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3707, 33), 'self', False)
        # Processing the call keyword arguments (line 3707)
        kwargs_625651 = {}
        # Getting the type of 'super' (line 3707)
        super_625648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3707, 8), 'super', False)
        # Calling super(args, kwargs) (line 3707)
        super_call_result_625652 = invoke(stypy.reporting.localization.Localization(__file__, 3707, 8), super_625648, *[unitary_group_gen_625649, self_625650], **kwargs_625651)
        
        # Obtaining the member '__init__' of a type (line 3707)
        init___625653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3707, 8), super_call_result_625652, '__init__')
        # Calling __init__(args, kwargs) (line 3707)
        init___call_result_625656 = invoke(stypy.reporting.localization.Localization(__file__, 3707, 8), init___625653, *[seed_625654], **kwargs_625655)
        
        
        # Assigning a Call to a Attribute (line 3708):
        
        # Assigning a Call to a Attribute (line 3708):
        
        # Call to docformat(...): (line 3708)
        # Processing the call arguments (line 3708)
        # Getting the type of 'self' (line 3708)
        self_625659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 40), 'self', False)
        # Obtaining the member '__doc__' of a type (line 3708)
        doc___625660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3708, 40), self_625659, '__doc__')
        # Processing the call keyword arguments (line 3708)
        kwargs_625661 = {}
        # Getting the type of 'doccer' (line 3708)
        doccer_625657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 23), 'doccer', False)
        # Obtaining the member 'docformat' of a type (line 3708)
        docformat_625658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3708, 23), doccer_625657, 'docformat')
        # Calling docformat(args, kwargs) (line 3708)
        docformat_call_result_625662 = invoke(stypy.reporting.localization.Localization(__file__, 3708, 23), docformat_625658, *[doc___625660], **kwargs_625661)
        
        # Getting the type of 'self' (line 3708)
        self_625663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 3708)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3708, 8), self_625663, '__doc__', docformat_call_result_625662)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _process_parameters(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_parameters'
        module_type_store = module_type_store.open_function_context('_process_parameters', 3710, 4, False)
        # Assigning a type to the variable 'self' (line 3711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3711, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        unitary_group_gen._process_parameters.__dict__.__setitem__('stypy_localization', localization)
        unitary_group_gen._process_parameters.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        unitary_group_gen._process_parameters.__dict__.__setitem__('stypy_type_store', module_type_store)
        unitary_group_gen._process_parameters.__dict__.__setitem__('stypy_function_name', 'unitary_group_gen._process_parameters')
        unitary_group_gen._process_parameters.__dict__.__setitem__('stypy_param_names_list', ['dim'])
        unitary_group_gen._process_parameters.__dict__.__setitem__('stypy_varargs_param_name', None)
        unitary_group_gen._process_parameters.__dict__.__setitem__('stypy_kwargs_param_name', None)
        unitary_group_gen._process_parameters.__dict__.__setitem__('stypy_call_defaults', defaults)
        unitary_group_gen._process_parameters.__dict__.__setitem__('stypy_call_varargs', varargs)
        unitary_group_gen._process_parameters.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        unitary_group_gen._process_parameters.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'unitary_group_gen._process_parameters', ['dim'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_parameters', localization, ['dim'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_parameters(...)' code ##################

        str_625664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3713, (-1)), 'str', '\n        Dimension N must be specified; it cannot be inferred.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dim' (line 3715)
        dim_625665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3715, 11), 'dim')
        # Getting the type of 'None' (line 3715)
        None_625666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3715, 18), 'None')
        # Applying the binary operator 'is' (line 3715)
        result_is__625667 = python_operator(stypy.reporting.localization.Localization(__file__, 3715, 11), 'is', dim_625665, None_625666)
        
        
        
        # Call to isscalar(...): (line 3715)
        # Processing the call arguments (line 3715)
        # Getting the type of 'dim' (line 3715)
        dim_625670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3715, 42), 'dim', False)
        # Processing the call keyword arguments (line 3715)
        kwargs_625671 = {}
        # Getting the type of 'np' (line 3715)
        np_625668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3715, 30), 'np', False)
        # Obtaining the member 'isscalar' of a type (line 3715)
        isscalar_625669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3715, 30), np_625668, 'isscalar')
        # Calling isscalar(args, kwargs) (line 3715)
        isscalar_call_result_625672 = invoke(stypy.reporting.localization.Localization(__file__, 3715, 30), isscalar_625669, *[dim_625670], **kwargs_625671)
        
        # Applying the 'not' unary operator (line 3715)
        result_not__625673 = python_operator(stypy.reporting.localization.Localization(__file__, 3715, 26), 'not', isscalar_call_result_625672)
        
        # Applying the binary operator 'or' (line 3715)
        result_or_keyword_625674 = python_operator(stypy.reporting.localization.Localization(__file__, 3715, 11), 'or', result_is__625667, result_not__625673)
        
        # Getting the type of 'dim' (line 3715)
        dim_625675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3715, 50), 'dim')
        int_625676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3715, 57), 'int')
        # Applying the binary operator '<=' (line 3715)
        result_le_625677 = python_operator(stypy.reporting.localization.Localization(__file__, 3715, 50), '<=', dim_625675, int_625676)
        
        # Applying the binary operator 'or' (line 3715)
        result_or_keyword_625678 = python_operator(stypy.reporting.localization.Localization(__file__, 3715, 11), 'or', result_or_keyword_625674, result_le_625677)
        
        # Getting the type of 'dim' (line 3715)
        dim_625679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3715, 62), 'dim')
        
        # Call to int(...): (line 3715)
        # Processing the call arguments (line 3715)
        # Getting the type of 'dim' (line 3715)
        dim_625681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3715, 73), 'dim', False)
        # Processing the call keyword arguments (line 3715)
        kwargs_625682 = {}
        # Getting the type of 'int' (line 3715)
        int_625680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3715, 69), 'int', False)
        # Calling int(args, kwargs) (line 3715)
        int_call_result_625683 = invoke(stypy.reporting.localization.Localization(__file__, 3715, 69), int_625680, *[dim_625681], **kwargs_625682)
        
        # Applying the binary operator '!=' (line 3715)
        result_ne_625684 = python_operator(stypy.reporting.localization.Localization(__file__, 3715, 62), '!=', dim_625679, int_call_result_625683)
        
        # Applying the binary operator 'or' (line 3715)
        result_or_keyword_625685 = python_operator(stypy.reporting.localization.Localization(__file__, 3715, 11), 'or', result_or_keyword_625678, result_ne_625684)
        
        # Testing the type of an if condition (line 3715)
        if_condition_625686 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3715, 8), result_or_keyword_625685)
        # Assigning a type to the variable 'if_condition_625686' (line 3715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3715, 8), 'if_condition_625686', if_condition_625686)
        # SSA begins for if statement (line 3715)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3716)
        # Processing the call arguments (line 3716)
        str_625688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3716, 29), 'str', 'Dimension of rotation must be specified,and must be a scalar greater than 1.')
        # Processing the call keyword arguments (line 3716)
        kwargs_625689 = {}
        # Getting the type of 'ValueError' (line 3716)
        ValueError_625687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3716)
        ValueError_call_result_625690 = invoke(stypy.reporting.localization.Localization(__file__, 3716, 18), ValueError_625687, *[str_625688], **kwargs_625689)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3716, 12), ValueError_call_result_625690, 'raise parameter', BaseException)
        # SSA join for if statement (line 3715)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'dim' (line 3719)
        dim_625691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3719, 15), 'dim')
        # Assigning a type to the variable 'stypy_return_type' (line 3719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3719, 8), 'stypy_return_type', dim_625691)
        
        # ################# End of '_process_parameters(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_parameters' in the type store
        # Getting the type of 'stypy_return_type' (line 3710)
        stypy_return_type_625692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_625692)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_parameters'
        return stypy_return_type_625692


    @norecursion
    def rvs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_625693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3721, 28), 'int')
        # Getting the type of 'None' (line 3721)
        None_625694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 44), 'None')
        defaults = [int_625693, None_625694]
        # Create a new context for function 'rvs'
        module_type_store = module_type_store.open_function_context('rvs', 3721, 4, False)
        # Assigning a type to the variable 'self' (line 3722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3722, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        unitary_group_gen.rvs.__dict__.__setitem__('stypy_localization', localization)
        unitary_group_gen.rvs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        unitary_group_gen.rvs.__dict__.__setitem__('stypy_type_store', module_type_store)
        unitary_group_gen.rvs.__dict__.__setitem__('stypy_function_name', 'unitary_group_gen.rvs')
        unitary_group_gen.rvs.__dict__.__setitem__('stypy_param_names_list', ['dim', 'size', 'random_state'])
        unitary_group_gen.rvs.__dict__.__setitem__('stypy_varargs_param_name', None)
        unitary_group_gen.rvs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        unitary_group_gen.rvs.__dict__.__setitem__('stypy_call_defaults', defaults)
        unitary_group_gen.rvs.__dict__.__setitem__('stypy_call_varargs', varargs)
        unitary_group_gen.rvs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        unitary_group_gen.rvs.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'unitary_group_gen.rvs', ['dim', 'size', 'random_state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rvs', localization, ['dim', 'size', 'random_state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rvs(...)' code ##################

        str_625695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3737, (-1)), 'str', '\n        Draw random samples from U(N).\n\n        Parameters\n        ----------\n        dim : integer\n            Dimension of space (N).\n        size : integer, optional\n            Number of samples to draw (default 1).\n\n        Returns\n        -------\n        rvs : ndarray or scalar\n            Random size N-dimensional matrices, dimension (size, dim, dim)\n\n        ')
        
        # Assigning a Call to a Name (line 3738):
        
        # Assigning a Call to a Name (line 3738):
        
        # Call to int(...): (line 3738)
        # Processing the call arguments (line 3738)
        # Getting the type of 'size' (line 3738)
        size_625697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3738, 19), 'size', False)
        # Processing the call keyword arguments (line 3738)
        kwargs_625698 = {}
        # Getting the type of 'int' (line 3738)
        int_625696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3738, 15), 'int', False)
        # Calling int(args, kwargs) (line 3738)
        int_call_result_625699 = invoke(stypy.reporting.localization.Localization(__file__, 3738, 15), int_625696, *[size_625697], **kwargs_625698)
        
        # Assigning a type to the variable 'size' (line 3738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3738, 8), 'size', int_call_result_625699)
        
        
        # Getting the type of 'size' (line 3739)
        size_625700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3739, 11), 'size')
        int_625701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3739, 18), 'int')
        # Applying the binary operator '>' (line 3739)
        result_gt_625702 = python_operator(stypy.reporting.localization.Localization(__file__, 3739, 11), '>', size_625700, int_625701)
        
        # Testing the type of an if condition (line 3739)
        if_condition_625703 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3739, 8), result_gt_625702)
        # Assigning a type to the variable 'if_condition_625703' (line 3739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3739, 8), 'if_condition_625703', if_condition_625703)
        # SSA begins for if statement (line 3739)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to array(...): (line 3740)
        # Processing the call arguments (line 3740)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to range(...): (line 3741)
        # Processing the call arguments (line 3741)
        # Getting the type of 'size' (line 3741)
        size_625716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 44), 'size', False)
        # Processing the call keyword arguments (line 3741)
        kwargs_625717 = {}
        # Getting the type of 'range' (line 3741)
        range_625715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 38), 'range', False)
        # Calling range(args, kwargs) (line 3741)
        range_call_result_625718 = invoke(stypy.reporting.localization.Localization(__file__, 3741, 38), range_625715, *[size_625716], **kwargs_625717)
        
        comprehension_625719 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3740, 29), range_call_result_625718)
        # Assigning a type to the variable 'i' (line 3740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3740, 29), 'i', comprehension_625719)
        
        # Call to rvs(...): (line 3740)
        # Processing the call arguments (line 3740)
        # Getting the type of 'dim' (line 3740)
        dim_625708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3740, 38), 'dim', False)
        # Processing the call keyword arguments (line 3740)
        int_625709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3740, 48), 'int')
        keyword_625710 = int_625709
        # Getting the type of 'random_state' (line 3740)
        random_state_625711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3740, 64), 'random_state', False)
        keyword_625712 = random_state_625711
        kwargs_625713 = {'random_state': keyword_625712, 'size': keyword_625710}
        # Getting the type of 'self' (line 3740)
        self_625706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3740, 29), 'self', False)
        # Obtaining the member 'rvs' of a type (line 3740)
        rvs_625707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3740, 29), self_625706, 'rvs')
        # Calling rvs(args, kwargs) (line 3740)
        rvs_call_result_625714 = invoke(stypy.reporting.localization.Localization(__file__, 3740, 29), rvs_625707, *[dim_625708], **kwargs_625713)
        
        list_625720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3740, 29), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3740, 29), list_625720, rvs_call_result_625714)
        # Processing the call keyword arguments (line 3740)
        kwargs_625721 = {}
        # Getting the type of 'np' (line 3740)
        np_625704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3740, 19), 'np', False)
        # Obtaining the member 'array' of a type (line 3740)
        array_625705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3740, 19), np_625704, 'array')
        # Calling array(args, kwargs) (line 3740)
        array_call_result_625722 = invoke(stypy.reporting.localization.Localization(__file__, 3740, 19), array_625705, *[list_625720], **kwargs_625721)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3740, 12), 'stypy_return_type', array_call_result_625722)
        # SSA join for if statement (line 3739)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3743):
        
        # Assigning a Call to a Name (line 3743):
        
        # Call to _process_parameters(...): (line 3743)
        # Processing the call arguments (line 3743)
        # Getting the type of 'dim' (line 3743)
        dim_625725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3743, 39), 'dim', False)
        # Processing the call keyword arguments (line 3743)
        kwargs_625726 = {}
        # Getting the type of 'self' (line 3743)
        self_625723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3743, 14), 'self', False)
        # Obtaining the member '_process_parameters' of a type (line 3743)
        _process_parameters_625724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3743, 14), self_625723, '_process_parameters')
        # Calling _process_parameters(args, kwargs) (line 3743)
        _process_parameters_call_result_625727 = invoke(stypy.reporting.localization.Localization(__file__, 3743, 14), _process_parameters_625724, *[dim_625725], **kwargs_625726)
        
        # Assigning a type to the variable 'dim' (line 3743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3743, 8), 'dim', _process_parameters_call_result_625727)
        
        # Assigning a Call to a Name (line 3745):
        
        # Assigning a Call to a Name (line 3745):
        
        # Call to _get_random_state(...): (line 3745)
        # Processing the call arguments (line 3745)
        # Getting the type of 'random_state' (line 3745)
        random_state_625730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 46), 'random_state', False)
        # Processing the call keyword arguments (line 3745)
        kwargs_625731 = {}
        # Getting the type of 'self' (line 3745)
        self_625728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 23), 'self', False)
        # Obtaining the member '_get_random_state' of a type (line 3745)
        _get_random_state_625729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3745, 23), self_625728, '_get_random_state')
        # Calling _get_random_state(args, kwargs) (line 3745)
        _get_random_state_call_result_625732 = invoke(stypy.reporting.localization.Localization(__file__, 3745, 23), _get_random_state_625729, *[random_state_625730], **kwargs_625731)
        
        # Assigning a type to the variable 'random_state' (line 3745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3745, 8), 'random_state', _get_random_state_call_result_625732)
        
        # Assigning a BinOp to a Name (line 3747):
        
        # Assigning a BinOp to a Name (line 3747):
        int_625733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3747, 12), 'int')
        
        # Call to sqrt(...): (line 3747)
        # Processing the call arguments (line 3747)
        int_625736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3747, 24), 'int')
        # Processing the call keyword arguments (line 3747)
        kwargs_625737 = {}
        # Getting the type of 'math' (line 3747)
        math_625734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3747, 14), 'math', False)
        # Obtaining the member 'sqrt' of a type (line 3747)
        sqrt_625735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3747, 14), math_625734, 'sqrt')
        # Calling sqrt(args, kwargs) (line 3747)
        sqrt_call_result_625738 = invoke(stypy.reporting.localization.Localization(__file__, 3747, 14), sqrt_625735, *[int_625736], **kwargs_625737)
        
        # Applying the binary operator 'div' (line 3747)
        result_div_625739 = python_operator(stypy.reporting.localization.Localization(__file__, 3747, 12), 'div', int_625733, sqrt_call_result_625738)
        
        
        # Call to normal(...): (line 3747)
        # Processing the call keyword arguments (line 3747)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3747)
        tuple_625742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3747, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3747)
        # Adding element type (line 3747)
        # Getting the type of 'dim' (line 3747)
        dim_625743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3747, 54), 'dim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3747, 54), tuple_625742, dim_625743)
        # Adding element type (line 3747)
        # Getting the type of 'dim' (line 3747)
        dim_625744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3747, 58), 'dim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3747, 54), tuple_625742, dim_625744)
        
        keyword_625745 = tuple_625742
        kwargs_625746 = {'size': keyword_625745}
        # Getting the type of 'random_state' (line 3747)
        random_state_625740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3747, 28), 'random_state', False)
        # Obtaining the member 'normal' of a type (line 3747)
        normal_625741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3747, 28), random_state_625740, 'normal')
        # Calling normal(args, kwargs) (line 3747)
        normal_call_result_625747 = invoke(stypy.reporting.localization.Localization(__file__, 3747, 28), normal_625741, *[], **kwargs_625746)
        
        complex_625748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3748, 28), 'complex')
        
        # Call to normal(...): (line 3748)
        # Processing the call keyword arguments (line 3748)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3748)
        tuple_625751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3748, 57), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3748)
        # Adding element type (line 3748)
        # Getting the type of 'dim' (line 3748)
        dim_625752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3748, 57), 'dim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3748, 57), tuple_625751, dim_625752)
        # Adding element type (line 3748)
        # Getting the type of 'dim' (line 3748)
        dim_625753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3748, 61), 'dim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3748, 57), tuple_625751, dim_625753)
        
        keyword_625754 = tuple_625751
        kwargs_625755 = {'size': keyword_625754}
        # Getting the type of 'random_state' (line 3748)
        random_state_625749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3748, 31), 'random_state', False)
        # Obtaining the member 'normal' of a type (line 3748)
        normal_625750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3748, 31), random_state_625749, 'normal')
        # Calling normal(args, kwargs) (line 3748)
        normal_call_result_625756 = invoke(stypy.reporting.localization.Localization(__file__, 3748, 31), normal_625750, *[], **kwargs_625755)
        
        # Applying the binary operator '*' (line 3748)
        result_mul_625757 = python_operator(stypy.reporting.localization.Localization(__file__, 3748, 28), '*', complex_625748, normal_call_result_625756)
        
        # Applying the binary operator '+' (line 3747)
        result_add_625758 = python_operator(stypy.reporting.localization.Localization(__file__, 3747, 28), '+', normal_call_result_625747, result_mul_625757)
        
        # Applying the binary operator '*' (line 3747)
        result_mul_625759 = python_operator(stypy.reporting.localization.Localization(__file__, 3747, 26), '*', result_div_625739, result_add_625758)
        
        # Assigning a type to the variable 'z' (line 3747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3747, 8), 'z', result_mul_625759)
        
        # Assigning a Call to a Tuple (line 3749):
        
        # Assigning a Subscript to a Name (line 3749):
        
        # Obtaining the type of the subscript
        int_625760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3749, 8), 'int')
        
        # Call to qr(...): (line 3749)
        # Processing the call arguments (line 3749)
        # Getting the type of 'z' (line 3749)
        z_625764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3749, 31), 'z', False)
        # Processing the call keyword arguments (line 3749)
        kwargs_625765 = {}
        # Getting the type of 'scipy' (line 3749)
        scipy_625761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3749, 15), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 3749)
        linalg_625762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3749, 15), scipy_625761, 'linalg')
        # Obtaining the member 'qr' of a type (line 3749)
        qr_625763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3749, 15), linalg_625762, 'qr')
        # Calling qr(args, kwargs) (line 3749)
        qr_call_result_625766 = invoke(stypy.reporting.localization.Localization(__file__, 3749, 15), qr_625763, *[z_625764], **kwargs_625765)
        
        # Obtaining the member '__getitem__' of a type (line 3749)
        getitem___625767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3749, 8), qr_call_result_625766, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3749)
        subscript_call_result_625768 = invoke(stypy.reporting.localization.Localization(__file__, 3749, 8), getitem___625767, int_625760)
        
        # Assigning a type to the variable 'tuple_var_assignment_618702' (line 3749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3749, 8), 'tuple_var_assignment_618702', subscript_call_result_625768)
        
        # Assigning a Subscript to a Name (line 3749):
        
        # Obtaining the type of the subscript
        int_625769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3749, 8), 'int')
        
        # Call to qr(...): (line 3749)
        # Processing the call arguments (line 3749)
        # Getting the type of 'z' (line 3749)
        z_625773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3749, 31), 'z', False)
        # Processing the call keyword arguments (line 3749)
        kwargs_625774 = {}
        # Getting the type of 'scipy' (line 3749)
        scipy_625770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3749, 15), 'scipy', False)
        # Obtaining the member 'linalg' of a type (line 3749)
        linalg_625771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3749, 15), scipy_625770, 'linalg')
        # Obtaining the member 'qr' of a type (line 3749)
        qr_625772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3749, 15), linalg_625771, 'qr')
        # Calling qr(args, kwargs) (line 3749)
        qr_call_result_625775 = invoke(stypy.reporting.localization.Localization(__file__, 3749, 15), qr_625772, *[z_625773], **kwargs_625774)
        
        # Obtaining the member '__getitem__' of a type (line 3749)
        getitem___625776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3749, 8), qr_call_result_625775, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3749)
        subscript_call_result_625777 = invoke(stypy.reporting.localization.Localization(__file__, 3749, 8), getitem___625776, int_625769)
        
        # Assigning a type to the variable 'tuple_var_assignment_618703' (line 3749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3749, 8), 'tuple_var_assignment_618703', subscript_call_result_625777)
        
        # Assigning a Name to a Name (line 3749):
        # Getting the type of 'tuple_var_assignment_618702' (line 3749)
        tuple_var_assignment_618702_625778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3749, 8), 'tuple_var_assignment_618702')
        # Assigning a type to the variable 'q' (line 3749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3749, 8), 'q', tuple_var_assignment_618702_625778)
        
        # Assigning a Name to a Name (line 3749):
        # Getting the type of 'tuple_var_assignment_618703' (line 3749)
        tuple_var_assignment_618703_625779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3749, 8), 'tuple_var_assignment_618703')
        # Assigning a type to the variable 'r' (line 3749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3749, 11), 'r', tuple_var_assignment_618703_625779)
        
        # Assigning a Call to a Name (line 3750):
        
        # Assigning a Call to a Name (line 3750):
        
        # Call to diagonal(...): (line 3750)
        # Processing the call keyword arguments (line 3750)
        kwargs_625782 = {}
        # Getting the type of 'r' (line 3750)
        r_625780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3750, 12), 'r', False)
        # Obtaining the member 'diagonal' of a type (line 3750)
        diagonal_625781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3750, 12), r_625780, 'diagonal')
        # Calling diagonal(args, kwargs) (line 3750)
        diagonal_call_result_625783 = invoke(stypy.reporting.localization.Localization(__file__, 3750, 12), diagonal_625781, *[], **kwargs_625782)
        
        # Assigning a type to the variable 'd' (line 3750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3750, 8), 'd', diagonal_call_result_625783)
        
        # Getting the type of 'q' (line 3751)
        q_625784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3751, 8), 'q')
        # Getting the type of 'd' (line 3751)
        d_625785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3751, 13), 'd')
        
        # Call to abs(...): (line 3751)
        # Processing the call arguments (line 3751)
        # Getting the type of 'd' (line 3751)
        d_625787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3751, 19), 'd', False)
        # Processing the call keyword arguments (line 3751)
        kwargs_625788 = {}
        # Getting the type of 'abs' (line 3751)
        abs_625786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3751, 15), 'abs', False)
        # Calling abs(args, kwargs) (line 3751)
        abs_call_result_625789 = invoke(stypy.reporting.localization.Localization(__file__, 3751, 15), abs_625786, *[d_625787], **kwargs_625788)
        
        # Applying the binary operator 'div' (line 3751)
        result_div_625790 = python_operator(stypy.reporting.localization.Localization(__file__, 3751, 13), 'div', d_625785, abs_call_result_625789)
        
        # Applying the binary operator '*=' (line 3751)
        result_imul_625791 = python_operator(stypy.reporting.localization.Localization(__file__, 3751, 8), '*=', q_625784, result_div_625790)
        # Assigning a type to the variable 'q' (line 3751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3751, 8), 'q', result_imul_625791)
        
        # Getting the type of 'q' (line 3752)
        q_625792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3752, 15), 'q')
        # Assigning a type to the variable 'stypy_return_type' (line 3752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3752, 8), 'stypy_return_type', q_625792)
        
        # ################# End of 'rvs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rvs' in the type store
        # Getting the type of 'stypy_return_type' (line 3721)
        stypy_return_type_625793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_625793)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rvs'
        return stypy_return_type_625793


# Assigning a type to the variable 'unitary_group_gen' (line 3665)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3665, 0), 'unitary_group_gen', unitary_group_gen)

# Assigning a Call to a Name (line 3754):

# Assigning a Call to a Name (line 3754):

# Call to unitary_group_gen(...): (line 3754)
# Processing the call keyword arguments (line 3754)
kwargs_625795 = {}
# Getting the type of 'unitary_group_gen' (line 3754)
unitary_group_gen_625794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3754, 16), 'unitary_group_gen', False)
# Calling unitary_group_gen(args, kwargs) (line 3754)
unitary_group_gen_call_result_625796 = invoke(stypy.reporting.localization.Localization(__file__, 3754, 16), unitary_group_gen_625794, *[], **kwargs_625795)

# Assigning a type to the variable 'unitary_group' (line 3754)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3754, 0), 'unitary_group', unitary_group_gen_call_result_625796)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
