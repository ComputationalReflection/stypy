
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: An extension of scipy.stats.stats to support masked arrays
3: 
4: '''
5: # Original author (2007): Pierre GF Gerard-Marchant
6: 
7: # TODO : f_value_wilks_lambda looks botched... what are dfnum & dfden for ?
8: # TODO : ttest_rel looks botched:  what are x1,x2,v1,v2 for ?
9: # TODO : reimplement ksonesamp
10: 
11: from __future__ import division, print_function, absolute_import
12: 
13: 
14: __all__ = ['argstoarray',
15:            'count_tied_groups',
16:            'describe',
17:            'f_oneway', 'find_repeats','friedmanchisquare',
18:            'kendalltau','kendalltau_seasonal','kruskal','kruskalwallis',
19:            'ks_twosamp','ks_2samp','kurtosis','kurtosistest',
20:            'linregress',
21:            'mannwhitneyu', 'meppf','mode','moment','mquantiles','msign',
22:            'normaltest',
23:            'obrientransform',
24:            'pearsonr','plotting_positions','pointbiserialr',
25:            'rankdata',
26:            'scoreatpercentile','sem',
27:            'sen_seasonal_slopes','skew','skewtest','spearmanr',
28:            'theilslopes','tmax','tmean','tmin','trim','trimboth',
29:            'trimtail','trima','trimr','trimmed_mean','trimmed_std',
30:            'trimmed_stde','trimmed_var','tsem','ttest_1samp','ttest_onesamp',
31:            'ttest_ind','ttest_rel','tvar',
32:            'variation',
33:            'winsorize',
34:            ]
35: 
36: import numpy as np
37: from numpy import ndarray
38: import numpy.ma as ma
39: from numpy.ma import masked, nomask
40: 
41: from scipy._lib.six import iteritems
42: 
43: import itertools
44: import warnings
45: from collections import namedtuple
46: 
47: from . import distributions
48: import scipy.special as special
49: from ._stats_mstats_common import (
50:         _find_repeats,
51:         linregress as stats_linregress,
52:         theilslopes as stats_theilslopes
53:         )
54: 
55: 
56: genmissingvaldoc = '''
57: 
58:     Notes
59:     -----
60:     Missing values are considered pair-wise: if a value is missing in x,
61:     the corresponding value in y is masked.
62:     '''
63: 
64: 
65: def _chk_asarray(a, axis):
66:     # Always returns a masked array, raveled for axis=None
67:     a = ma.asanyarray(a)
68:     if axis is None:
69:         a = ma.ravel(a)
70:         outaxis = 0
71:     else:
72:         outaxis = axis
73:     return a, outaxis
74: 
75: 
76: def _chk2_asarray(a, b, axis):
77:     a = ma.asanyarray(a)
78:     b = ma.asanyarray(b)
79:     if axis is None:
80:         a = ma.ravel(a)
81:         b = ma.ravel(b)
82:         outaxis = 0
83:     else:
84:         outaxis = axis
85:     return a, b, outaxis
86: 
87: 
88: def _chk_size(a,b):
89:     a = ma.asanyarray(a)
90:     b = ma.asanyarray(b)
91:     (na, nb) = (a.size, b.size)
92:     if na != nb:
93:         raise ValueError("The size of the input array should match!"
94:                          " (%s <> %s)" % (na, nb))
95:     return (a, b, na)
96: 
97: 
98: def argstoarray(*args):
99:     '''
100:     Constructs a 2D array from a group of sequences.
101: 
102:     Sequences are filled with missing values to match the length of the longest
103:     sequence.
104: 
105:     Parameters
106:     ----------
107:     args : sequences
108:         Group of sequences.
109: 
110:     Returns
111:     -------
112:     argstoarray : MaskedArray
113:         A ( `m` x `n` ) masked array, where `m` is the number of arguments and
114:         `n` the length of the longest argument.
115: 
116:     Notes
117:     -----
118:     `numpy.ma.row_stack` has identical behavior, but is called with a sequence
119:     of sequences.
120: 
121:     '''
122:     if len(args) == 1 and not isinstance(args[0], ndarray):
123:         output = ma.asarray(args[0])
124:         if output.ndim != 2:
125:             raise ValueError("The input should be 2D")
126:     else:
127:         n = len(args)
128:         m = max([len(k) for k in args])
129:         output = ma.array(np.empty((n,m), dtype=float), mask=True)
130:         for (k,v) in enumerate(args):
131:             output[k,:len(v)] = v
132: 
133:     output[np.logical_not(np.isfinite(output._data))] = masked
134:     return output
135: 
136: 
137: def find_repeats(arr):
138:     '''Find repeats in arr and return a tuple (repeats, repeat_count).
139: 
140:     The input is cast to float64. Masked values are discarded.
141: 
142:     Parameters
143:     ----------
144:     arr : sequence
145:         Input array. The array is flattened if it is not 1D.
146: 
147:     Returns
148:     -------
149:     repeats : ndarray
150:         Array of repeated values.
151:     counts : ndarray
152:         Array of counts.
153: 
154:     '''
155:     # Make sure we get a copy. ma.compressed promises a "new array", but can
156:     # actually return a reference.
157:     compr = np.asarray(ma.compressed(arr), dtype=np.float64)
158:     try:
159:         need_copy = np.may_share_memory(compr, arr)
160:     except AttributeError:
161:         # numpy < 1.8.2 bug: np.may_share_memory([], []) raises,
162:         # while in numpy 1.8.2 and above it just (correctly) returns False.
163:         need_copy = False
164:     if need_copy:
165:         compr = compr.copy()
166:     return _find_repeats(compr)
167: 
168: 
169: def count_tied_groups(x, use_missing=False):
170:     '''
171:     Counts the number of tied values.
172: 
173:     Parameters
174:     ----------
175:     x : sequence
176:         Sequence of data on which to counts the ties
177:     use_missing : bool, optional
178:         Whether to consider missing values as tied.
179: 
180:     Returns
181:     -------
182:     count_tied_groups : dict
183:         Returns a dictionary (nb of ties: nb of groups).
184: 
185:     Examples
186:     --------
187:     >>> from scipy.stats import mstats
188:     >>> z = [0, 0, 0, 2, 2, 2, 3, 3, 4, 5, 6]
189:     >>> mstats.count_tied_groups(z)
190:     {2: 1, 3: 2}
191: 
192:     In the above example, the ties were 0 (3x), 2 (3x) and 3 (2x).
193: 
194:     >>> z = np.ma.array([0, 0, 1, 2, 2, 2, 3, 3, 4, 5, 6])
195:     >>> mstats.count_tied_groups(z)
196:     {2: 2, 3: 1}
197:     >>> z[[1,-1]] = np.ma.masked
198:     >>> mstats.count_tied_groups(z, use_missing=True)
199:     {2: 2, 3: 1}
200: 
201:     '''
202:     nmasked = ma.getmask(x).sum()
203:     # We need the copy as find_repeats will overwrite the initial data
204:     data = ma.compressed(x).copy()
205:     (ties, counts) = find_repeats(data)
206:     nties = {}
207:     if len(ties):
208:         nties = dict(zip(np.unique(counts), itertools.repeat(1)))
209:         nties.update(dict(zip(*find_repeats(counts))))
210: 
211:     if nmasked and use_missing:
212:         try:
213:             nties[nmasked] += 1
214:         except KeyError:
215:             nties[nmasked] = 1
216: 
217:     return nties
218: 
219: 
220: def rankdata(data, axis=None, use_missing=False):
221:     '''Returns the rank (also known as order statistics) of each data point
222:     along the given axis.
223: 
224:     If some values are tied, their rank is averaged.
225:     If some values are masked, their rank is set to 0 if use_missing is False,
226:     or set to the average rank of the unmasked values if use_missing is True.
227: 
228:     Parameters
229:     ----------
230:     data : sequence
231:         Input data. The data is transformed to a masked array
232:     axis : {None,int}, optional
233:         Axis along which to perform the ranking.
234:         If None, the array is first flattened. An exception is raised if
235:         the axis is specified for arrays with a dimension larger than 2
236:     use_missing : bool, optional
237:         Whether the masked values have a rank of 0 (False) or equal to the
238:         average rank of the unmasked values (True).
239: 
240:     '''
241:     def _rank1d(data, use_missing=False):
242:         n = data.count()
243:         rk = np.empty(data.size, dtype=float)
244:         idx = data.argsort()
245:         rk[idx[:n]] = np.arange(1,n+1)
246: 
247:         if use_missing:
248:             rk[idx[n:]] = (n+1)/2.
249:         else:
250:             rk[idx[n:]] = 0
251: 
252:         repeats = find_repeats(data.copy())
253:         for r in repeats[0]:
254:             condition = (data == r).filled(False)
255:             rk[condition] = rk[condition].mean()
256:         return rk
257: 
258:     data = ma.array(data, copy=False)
259:     if axis is None:
260:         if data.ndim > 1:
261:             return _rank1d(data.ravel(), use_missing).reshape(data.shape)
262:         else:
263:             return _rank1d(data, use_missing)
264:     else:
265:         return ma.apply_along_axis(_rank1d,axis,data,use_missing).view(ndarray)
266: 
267: 
268: ModeResult = namedtuple('ModeResult', ('mode', 'count'))
269: 
270: 
271: def mode(a, axis=0):
272:     '''
273:     Returns an array of the modal (most common) value in the passed array.
274: 
275:     Parameters
276:     ----------
277:     a : array_like
278:         n-dimensional array of which to find mode(s).
279:     axis : int or None, optional
280:         Axis along which to operate. Default is 0. If None, compute over
281:         the whole array `a`.
282: 
283:     Returns
284:     -------
285:     mode : ndarray
286:         Array of modal values.
287:     count : ndarray
288:         Array of counts for each mode.
289: 
290:     Notes
291:     -----
292:     For more details, see `stats.mode`.
293: 
294:     '''
295:     a, axis = _chk_asarray(a, axis)
296: 
297:     def _mode1D(a):
298:         (rep,cnt) = find_repeats(a)
299:         if not cnt.ndim:
300:             return (0, 0)
301:         elif cnt.size:
302:             return (rep[cnt.argmax()], cnt.max())
303:         else:
304:             not_masked_indices = ma.flatnotmasked_edges(a)
305:             first_not_masked_index = not_masked_indices[0]
306:             return (a[first_not_masked_index], 1)
307: 
308:     if axis is None:
309:         output = _mode1D(ma.ravel(a))
310:         output = (ma.array(output[0]), ma.array(output[1]))
311:     else:
312:         output = ma.apply_along_axis(_mode1D, axis, a)
313:         newshape = list(a.shape)
314:         newshape[axis] = 1
315:         slices = [slice(None)] * output.ndim
316:         slices[axis] = 0
317:         modes = output[tuple(slices)].reshape(newshape)
318:         slices[axis] = 1
319:         counts = output[tuple(slices)].reshape(newshape)
320:         output = (modes, counts)
321: 
322:     return ModeResult(*output)
323: 
324: 
325: def _betai(a, b, x):
326:     x = np.asanyarray(x)
327:     x = ma.where(x < 1.0, x, 1.0)  # if x > 1 then return 1.0
328:     return special.betainc(a, b, x)
329: 
330: 
331: def msign(x):
332:     '''Returns the sign of x, or 0 if x is masked.'''
333:     return ma.filled(np.sign(x), 0)
334: 
335: 
336: def pearsonr(x,y):
337:     '''
338:     Calculates a Pearson correlation coefficient and the p-value for testing
339:     non-correlation.
340: 
341:     The Pearson correlation coefficient measures the linear relationship
342:     between two datasets. Strictly speaking, Pearson's correlation requires
343:     that each dataset be normally distributed. Like other correlation
344:     coefficients, this one varies between -1 and +1 with 0 implying no
345:     correlation. Correlations of -1 or +1 imply an exact linear
346:     relationship. Positive correlations imply that as `x` increases, so does
347:     `y`. Negative correlations imply that as `x` increases, `y` decreases.
348: 
349:     The p-value roughly indicates the probability of an uncorrelated system
350:     producing datasets that have a Pearson correlation at least as extreme
351:     as the one computed from these datasets. The p-values are not entirely
352:     reliable but are probably reasonable for datasets larger than 500 or so.
353: 
354:     Parameters
355:     ----------
356:     x : 1-D array_like
357:         Input
358:     y : 1-D array_like
359:         Input
360: 
361:     Returns
362:     -------
363:     pearsonr : float
364:         Pearson's correlation coefficient, 2-tailed p-value.
365: 
366:     References
367:     ----------
368:     http://www.statsoft.com/textbook/glosp.html#Pearson%20Correlation
369: 
370:     '''
371:     (x, y, n) = _chk_size(x, y)
372:     (x, y) = (x.ravel(), y.ravel())
373:     # Get the common mask and the total nb of unmasked elements
374:     m = ma.mask_or(ma.getmask(x), ma.getmask(y))
375:     n -= m.sum()
376:     df = n-2
377:     if df < 0:
378:         return (masked, masked)
379: 
380:     (mx, my) = (x.mean(), y.mean())
381:     (xm, ym) = (x-mx, y-my)
382: 
383:     r_num = ma.add.reduce(xm*ym)
384:     r_den = ma.sqrt(ma.dot(xm,xm) * ma.dot(ym,ym))
385:     r = r_num / r_den
386:     # Presumably, if r > 1, then it is only some small artifact of floating
387:     # point arithmetic.
388:     r = min(r, 1.0)
389:     r = max(r, -1.0)
390: 
391:     if r is masked or abs(r) == 1.0:
392:         prob = 0.
393:     else:
394:         t_squared = (df / ((1.0 - r) * (1.0 + r))) * r * r
395:         prob = _betai(0.5*df, 0.5, df/(df + t_squared))
396: 
397:     return r, prob
398: 
399: 
400: SpearmanrResult = namedtuple('SpearmanrResult', ('correlation', 'pvalue'))
401: 
402: 
403: def spearmanr(x, y, use_ties=True):
404:     '''
405:     Calculates a Spearman rank-order correlation coefficient and the p-value
406:     to test for non-correlation.
407: 
408:     The Spearman correlation is a nonparametric measure of the linear
409:     relationship between two datasets. Unlike the Pearson correlation, the
410:     Spearman correlation does not assume that both datasets are normally
411:     distributed. Like other correlation coefficients, this one varies
412:     between -1 and +1 with 0 implying no correlation. Correlations of -1 or
413:     +1 imply a monotonic relationship. Positive correlations imply that
414:     as `x` increases, so does `y`. Negative correlations imply that as `x`
415:     increases, `y` decreases.
416: 
417:     Missing values are discarded pair-wise: if a value is missing in `x`, the
418:     corresponding value in `y` is masked.
419: 
420:     The p-value roughly indicates the probability of an uncorrelated system
421:     producing datasets that have a Spearman correlation at least as extreme
422:     as the one computed from these datasets. The p-values are not entirely
423:     reliable but are probably reasonable for datasets larger than 500 or so.
424: 
425:     Parameters
426:     ----------
427:     x : array_like
428:         The length of `x` must be > 2.
429:     y : array_like
430:         The length of `y` must be > 2.
431:     use_ties : bool, optional
432:         Whether the correction for ties should be computed.
433: 
434:     Returns
435:     -------
436:     correlation : float
437:         Spearman correlation coefficient
438:     pvalue : float
439:         2-tailed p-value.
440: 
441:     References
442:     ----------
443:     [CRCProbStat2000] section 14.7
444: 
445:     '''
446:     (x, y, n) = _chk_size(x, y)
447:     (x, y) = (x.ravel(), y.ravel())
448: 
449:     m = ma.mask_or(ma.getmask(x), ma.getmask(y))
450:     # need int() here, otherwise numpy defaults to 32 bit
451:     # integer on all Windows architectures, causing overflow.
452:     # int() will keep it infinite precision.
453:     n -= int(m.sum())
454:     if m is not nomask:
455:         x = ma.array(x, mask=m, copy=True)
456:         y = ma.array(y, mask=m, copy=True)
457:     df = n-2
458:     if df < 0:
459:         raise ValueError("The input must have at least 3 entries!")
460: 
461:     # Gets the ranks and rank differences
462:     rankx = rankdata(x)
463:     ranky = rankdata(y)
464:     dsq = np.add.reduce((rankx-ranky)**2)
465:     # Tie correction
466:     if use_ties:
467:         xties = count_tied_groups(x)
468:         yties = count_tied_groups(y)
469:         corr_x = np.sum(v*k*(k**2-1) for (k,v) in iteritems(xties))/12.
470:         corr_y = np.sum(v*k*(k**2-1) for (k,v) in iteritems(yties))/12.
471:     else:
472:         corr_x = corr_y = 0
473: 
474:     denom = n*(n**2 - 1)/6.
475:     if corr_x != 0 or corr_y != 0:
476:         rho = denom - dsq - corr_x - corr_y
477:         rho /= ma.sqrt((denom-2*corr_x)*(denom-2*corr_y))
478:     else:
479:         rho = 1. - dsq/denom
480: 
481:     t = ma.sqrt(ma.divide(df,(rho+1.0)*(1.0-rho))) * rho
482:     if t is masked:
483:         prob = 0.
484:     else:
485:         prob = _betai(0.5*df, 0.5, df/(df + t * t))
486: 
487:     return SpearmanrResult(rho, prob)
488: 
489: 
490: KendalltauResult = namedtuple('KendalltauResult', ('correlation', 'pvalue'))
491: 
492: 
493: def kendalltau(x, y, use_ties=True, use_missing=False):
494:     '''
495:     Computes Kendall's rank correlation tau on two variables *x* and *y*.
496: 
497:     Parameters
498:     ----------
499:     x : sequence
500:         First data list (for example, time).
501:     y : sequence
502:         Second data list.
503:     use_ties : {True, False}, optional
504:         Whether ties correction should be performed.
505:     use_missing : {False, True}, optional
506:         Whether missing data should be allocated a rank of 0 (False) or the
507:         average rank (True)
508: 
509:     Returns
510:     -------
511:     correlation : float
512:         Kendall tau
513:     pvalue : float
514:         Approximate 2-side p-value.
515: 
516:     '''
517:     (x, y, n) = _chk_size(x, y)
518:     (x, y) = (x.flatten(), y.flatten())
519:     m = ma.mask_or(ma.getmask(x), ma.getmask(y))
520:     if m is not nomask:
521:         x = ma.array(x, mask=m, copy=True)
522:         y = ma.array(y, mask=m, copy=True)
523:         # need int() here, otherwise numpy defaults to 32 bit
524:         # integer on all Windows architectures, causing overflow.
525:         # int() will keep it infinite precision.
526:         n -= int(m.sum())
527: 
528:     if n < 2:
529:         return KendalltauResult(np.nan, np.nan)
530: 
531:     rx = ma.masked_equal(rankdata(x, use_missing=use_missing), 0)
532:     ry = ma.masked_equal(rankdata(y, use_missing=use_missing), 0)
533:     idx = rx.argsort()
534:     (rx, ry) = (rx[idx], ry[idx])
535:     C = np.sum([((ry[i+1:] > ry[i]) * (rx[i+1:] > rx[i])).filled(0).sum()
536:                 for i in range(len(ry)-1)], dtype=float)
537:     D = np.sum([((ry[i+1:] < ry[i])*(rx[i+1:] > rx[i])).filled(0).sum()
538:                 for i in range(len(ry)-1)], dtype=float)
539:     if use_ties:
540:         xties = count_tied_groups(x)
541:         yties = count_tied_groups(y)
542:         corr_x = np.sum([v*k*(k-1) for (k,v) in iteritems(xties)], dtype=float)
543:         corr_y = np.sum([v*k*(k-1) for (k,v) in iteritems(yties)], dtype=float)
544:         denom = ma.sqrt((n*(n-1)-corr_x)/2. * (n*(n-1)-corr_y)/2.)
545:     else:
546:         denom = n*(n-1)/2.
547:     tau = (C-D) / denom
548: 
549:     var_s = n*(n-1)*(2*n+5)
550:     if use_ties:
551:         var_s -= np.sum(v*k*(k-1)*(2*k+5)*1. for (k,v) in iteritems(xties))
552:         var_s -= np.sum(v*k*(k-1)*(2*k+5)*1. for (k,v) in iteritems(yties))
553:         v1 = np.sum([v*k*(k-1) for (k, v) in iteritems(xties)], dtype=float) *\
554:              np.sum([v*k*(k-1) for (k, v) in iteritems(yties)], dtype=float)
555:         v1 /= 2.*n*(n-1)
556:         if n > 2:
557:             v2 = np.sum([v*k*(k-1)*(k-2) for (k,v) in iteritems(xties)],
558:                         dtype=float) * \
559:                  np.sum([v*k*(k-1)*(k-2) for (k,v) in iteritems(yties)],
560:                         dtype=float)
561:             v2 /= 9.*n*(n-1)*(n-2)
562:         else:
563:             v2 = 0
564:     else:
565:         v1 = v2 = 0
566: 
567:     var_s /= 18.
568:     var_s += (v1 + v2)
569:     z = (C-D)/np.sqrt(var_s)
570:     prob = special.erfc(abs(z)/np.sqrt(2))
571:     return KendalltauResult(tau, prob)
572: 
573: 
574: def kendalltau_seasonal(x):
575:     '''
576:     Computes a multivariate Kendall's rank correlation tau, for seasonal data.
577: 
578:     Parameters
579:     ----------
580:     x : 2-D ndarray
581:         Array of seasonal data, with seasons in columns.
582: 
583:     '''
584:     x = ma.array(x, subok=True, copy=False, ndmin=2)
585:     (n,m) = x.shape
586:     n_p = x.count(0)
587: 
588:     S_szn = np.sum(msign(x[i:]-x[i]).sum(0) for i in range(n))
589:     S_tot = S_szn.sum()
590: 
591:     n_tot = x.count()
592:     ties = count_tied_groups(x.compressed())
593:     corr_ties = np.sum(v*k*(k-1) for (k,v) in iteritems(ties))
594:     denom_tot = ma.sqrt(1.*n_tot*(n_tot-1)*(n_tot*(n_tot-1)-corr_ties))/2.
595: 
596:     R = rankdata(x, axis=0, use_missing=True)
597:     K = ma.empty((m,m), dtype=int)
598:     covmat = ma.empty((m,m), dtype=float)
599:     denom_szn = ma.empty(m, dtype=float)
600:     for j in range(m):
601:         ties_j = count_tied_groups(x[:,j].compressed())
602:         corr_j = np.sum(v*k*(k-1) for (k,v) in iteritems(ties_j))
603:         cmb = n_p[j]*(n_p[j]-1)
604:         for k in range(j,m,1):
605:             K[j,k] = np.sum(msign((x[i:,j]-x[i,j])*(x[i:,k]-x[i,k])).sum()
606:                                for i in range(n))
607:             covmat[j,k] = (K[j,k] + 4*(R[:,j]*R[:,k]).sum() -
608:                            n*(n_p[j]+1)*(n_p[k]+1))/3.
609:             K[k,j] = K[j,k]
610:             covmat[k,j] = covmat[j,k]
611: 
612:         denom_szn[j] = ma.sqrt(cmb*(cmb-corr_j)) / 2.
613: 
614:     var_szn = covmat.diagonal()
615: 
616:     z_szn = msign(S_szn) * (abs(S_szn)-1) / ma.sqrt(var_szn)
617:     z_tot_ind = msign(S_tot) * (abs(S_tot)-1) / ma.sqrt(var_szn.sum())
618:     z_tot_dep = msign(S_tot) * (abs(S_tot)-1) / ma.sqrt(covmat.sum())
619: 
620:     prob_szn = special.erfc(abs(z_szn)/np.sqrt(2))
621:     prob_tot_ind = special.erfc(abs(z_tot_ind)/np.sqrt(2))
622:     prob_tot_dep = special.erfc(abs(z_tot_dep)/np.sqrt(2))
623: 
624:     chi2_tot = (z_szn*z_szn).sum()
625:     chi2_trd = m * z_szn.mean()**2
626:     output = {'seasonal tau': S_szn/denom_szn,
627:               'global tau': S_tot/denom_tot,
628:               'global tau (alt)': S_tot/denom_szn.sum(),
629:               'seasonal p-value': prob_szn,
630:               'global p-value (indep)': prob_tot_ind,
631:               'global p-value (dep)': prob_tot_dep,
632:               'chi2 total': chi2_tot,
633:               'chi2 trend': chi2_trd,
634:               }
635:     return output
636: 
637: 
638: PointbiserialrResult = namedtuple('PointbiserialrResult', ('correlation',
639:                                                            'pvalue'))
640: 
641: 
642: def pointbiserialr(x, y):
643:     '''Calculates a point biserial correlation coefficient and its p-value.
644: 
645:     Parameters
646:     ----------
647:     x : array_like of bools
648:         Input array.
649:     y : array_like
650:         Input array.
651: 
652:     Returns
653:     -------
654:     correlation : float
655:         R value
656:     pvalue : float
657:         2-tailed p-value
658: 
659:     Notes
660:     -----
661:     Missing values are considered pair-wise: if a value is missing in x,
662:     the corresponding value in y is masked.
663: 
664:     For more details on `pointbiserialr`, see `stats.pointbiserialr`.
665: 
666:     '''
667:     x = ma.fix_invalid(x, copy=True).astype(bool)
668:     y = ma.fix_invalid(y, copy=True).astype(float)
669:     # Get rid of the missing data
670:     m = ma.mask_or(ma.getmask(x), ma.getmask(y))
671:     if m is not nomask:
672:         unmask = np.logical_not(m)
673:         x = x[unmask]
674:         y = y[unmask]
675: 
676:     n = len(x)
677:     # phat is the fraction of x values that are True
678:     phat = x.sum() / float(n)
679:     y0 = y[~x]  # y-values where x is False
680:     y1 = y[x]  # y-values where x is True
681:     y0m = y0.mean()
682:     y1m = y1.mean()
683: 
684:     rpb = (y1m - y0m)*np.sqrt(phat * (1-phat)) / y.std()
685: 
686:     df = n-2
687:     t = rpb*ma.sqrt(df/(1.0-rpb**2))
688:     prob = _betai(0.5*df, 0.5, df/(df+t*t))
689: 
690:     return PointbiserialrResult(rpb, prob)
691: 
692: 
693: LinregressResult = namedtuple('LinregressResult', ('slope', 'intercept',
694:                                                    'rvalue', 'pvalue',
695:                                                    'stderr'))
696: 
697: 
698: def linregress(x, y=None):
699:     '''
700:     Linear regression calculation
701: 
702:     Note that the non-masked version is used, and that this docstring is
703:     replaced by the non-masked docstring + some info on missing data.
704: 
705:     '''
706:     if y is None:
707:         x = ma.array(x)
708:         if x.shape[0] == 2:
709:             x, y = x
710:         elif x.shape[1] == 2:
711:             x, y = x.T
712:         else:
713:             msg = ("If only `x` is given as input, it has to be of shape "
714:                    "(2, N) or (N, 2), provided shape was %s" % str(x.shape))
715:             raise ValueError(msg)
716:     else:
717:         x = ma.array(x)
718:         y = ma.array(y)
719: 
720:     x = x.flatten()
721:     y = y.flatten()
722: 
723:     m = ma.mask_or(ma.getmask(x), ma.getmask(y), shrink=False)
724:     if m is not nomask:
725:         x = ma.array(x, mask=m)
726:         y = ma.array(y, mask=m)
727:         if np.any(~m):
728:             slope, intercept, r, prob, sterrest = stats_linregress(x.data[~m],
729:                                                                    y.data[~m])
730:         else:
731:             # All data is masked
732:             return None, None, None, None, None
733:     else:
734:         slope, intercept, r, prob, sterrest = stats_linregress(x.data, y.data)
735: 
736:     return LinregressResult(slope, intercept, r, prob, sterrest)
737: 
738: if stats_linregress.__doc__:
739:     linregress.__doc__ = stats_linregress.__doc__ + genmissingvaldoc
740: 
741: 
742: def theilslopes(y, x=None, alpha=0.95):
743:     r'''
744:     Computes the Theil-Sen estimator for a set of points (x, y).
745: 
746:     `theilslopes` implements a method for robust linear regression.  It
747:     computes the slope as the median of all slopes between paired values.
748: 
749:     Parameters
750:     ----------
751:     y : array_like
752:         Dependent variable.
753:     x : array_like or None, optional
754:         Independent variable. If None, use ``arange(len(y))`` instead.
755:     alpha : float, optional
756:         Confidence degree between 0 and 1. Default is 95% confidence.
757:         Note that `alpha` is symmetric around 0.5, i.e. both 0.1 and 0.9 are
758:         interpreted as "find the 90% confidence interval".
759: 
760:     Returns
761:     -------
762:     medslope : float
763:         Theil slope.
764:     medintercept : float
765:         Intercept of the Theil line, as ``median(y) - medslope*median(x)``.
766:     lo_slope : float
767:         Lower bound of the confidence interval on `medslope`.
768:     up_slope : float
769:         Upper bound of the confidence interval on `medslope`.
770: 
771:     Notes
772:     -----
773:     For more details on `theilslopes`, see `stats.theilslopes`.
774: 
775:     '''
776:     y = ma.asarray(y).flatten()
777:     if x is None:
778:         x = ma.arange(len(y), dtype=float)
779:     else:
780:         x = ma.asarray(x).flatten()
781:         if len(x) != len(y):
782:             raise ValueError("Incompatible lengths ! (%s<>%s)" % (len(y),len(x)))
783: 
784:     m = ma.mask_or(ma.getmask(x), ma.getmask(y))
785:     y._mask = x._mask = m
786:     # Disregard any masked elements of x or y
787:     y = y.compressed()
788:     x = x.compressed().astype(float)
789:     # We now have unmasked arrays so can use `stats.theilslopes`
790:     return stats_theilslopes(y, x, alpha=alpha)
791: 
792: 
793: def sen_seasonal_slopes(x):
794:     x = ma.array(x, subok=True, copy=False, ndmin=2)
795:     (n,_) = x.shape
796:     # Get list of slopes per season
797:     szn_slopes = ma.vstack([(x[i+1:]-x[i])/np.arange(1,n-i)[:,None]
798:                             for i in range(n)])
799:     szn_medslopes = ma.median(szn_slopes, axis=0)
800:     medslope = ma.median(szn_slopes, axis=None)
801:     return szn_medslopes, medslope
802: 
803: 
804: Ttest_1sampResult = namedtuple('Ttest_1sampResult', ('statistic', 'pvalue'))
805: 
806: 
807: def ttest_1samp(a, popmean, axis=0):
808:     '''
809:     Calculates the T-test for the mean of ONE group of scores.
810: 
811:     Parameters
812:     ----------
813:     a : array_like
814:         sample observation
815:     popmean : float or array_like
816:         expected value in null hypothesis, if array_like than it must have the
817:         same shape as `a` excluding the axis dimension
818:     axis : int or None, optional
819:         Axis along which to compute test. If None, compute over the whole
820:         array `a`.
821: 
822:     Returns
823:     -------
824:     statistic : float or array
825:         t-statistic
826:     pvalue : float or array
827:         two-tailed p-value
828: 
829:     Notes
830:     -----
831:     For more details on `ttest_1samp`, see `stats.ttest_1samp`.
832: 
833:     '''
834:     a, axis = _chk_asarray(a, axis)
835:     if a.size == 0:
836:         return (np.nan, np.nan)
837: 
838:     x = a.mean(axis=axis)
839:     v = a.var(axis=axis, ddof=1)
840:     n = a.count(axis=axis)
841:     # force df to be an array for masked division not to throw a warning
842:     df = ma.asanyarray(n - 1.0)
843:     svar = ((n - 1.0) * v) / df
844:     with np.errstate(divide='ignore', invalid='ignore'):
845:         t = (x - popmean) / ma.sqrt(svar / n)
846:     prob = special.betainc(0.5*df, 0.5, df/(df + t*t))
847: 
848:     return Ttest_1sampResult(t, prob)
849: ttest_onesamp = ttest_1samp
850: 
851: 
852: Ttest_indResult = namedtuple('Ttest_indResult', ('statistic', 'pvalue'))
853: 
854: 
855: def ttest_ind(a, b, axis=0, equal_var=True):
856:     '''
857:     Calculates the T-test for the means of TWO INDEPENDENT samples of scores.
858: 
859:     Parameters
860:     ----------
861:     a, b : array_like
862:         The arrays must have the same shape, except in the dimension
863:         corresponding to `axis` (the first, by default).
864:     axis : int or None, optional
865:         Axis along which to compute test. If None, compute over the whole
866:         arrays, `a`, and `b`.
867:     equal_var : bool, optional
868:         If True, perform a standard independent 2 sample test that assumes equal
869:         population variances.
870:         If False, perform Welch's t-test, which does not assume equal population
871:         variance.
872:         .. versionadded:: 0.17.0
873: 
874:     Returns
875:     -------
876:     statistic : float or array
877:         The calculated t-statistic.
878:     pvalue : float or array
879:         The two-tailed p-value.
880: 
881:     Notes
882:     -----
883:     For more details on `ttest_ind`, see `stats.ttest_ind`.
884: 
885:     '''
886:     a, b, axis = _chk2_asarray(a, b, axis)
887: 
888:     if a.size == 0 or b.size == 0:
889:         return Ttest_indResult(np.nan, np.nan)
890: 
891:     (x1, x2) = (a.mean(axis), b.mean(axis))
892:     (v1, v2) = (a.var(axis=axis, ddof=1), b.var(axis=axis, ddof=1))
893:     (n1, n2) = (a.count(axis), b.count(axis))
894: 
895:     if equal_var:
896:         # force df to be an array for masked division not to throw a warning
897:         df = ma.asanyarray(n1 + n2 - 2.0)
898:         svar = ((n1-1)*v1+(n2-1)*v2) / df
899:         denom = ma.sqrt(svar*(1.0/n1 + 1.0/n2))  # n-D computation here!
900:     else:
901:         vn1 = v1/n1
902:         vn2 = v2/n2
903:         with np.errstate(divide='ignore', invalid='ignore'):
904:             df = (vn1 + vn2)**2 / (vn1**2 / (n1 - 1) + vn2**2 / (n2 - 1))
905: 
906:         # If df is undefined, variances are zero.
907:         # It doesn't matter what df is as long as it is not NaN.
908:         df = np.where(np.isnan(df), 1, df)
909:         denom = ma.sqrt(vn1 + vn2)
910: 
911:     with np.errstate(divide='ignore', invalid='ignore'):
912:         t = (x1-x2) / denom
913:     probs = special.betainc(0.5*df, 0.5, df/(df + t*t)).reshape(t.shape)
914: 
915:     return Ttest_indResult(t, probs.squeeze())
916: 
917: 
918: Ttest_relResult = namedtuple('Ttest_relResult', ('statistic', 'pvalue'))
919: 
920: 
921: def ttest_rel(a, b, axis=0):
922:     '''
923:     Calculates the T-test on TWO RELATED samples of scores, a and b.
924: 
925:     Parameters
926:     ----------
927:     a, b : array_like
928:         The arrays must have the same shape.
929:     axis : int or None, optional
930:         Axis along which to compute test. If None, compute over the whole
931:         arrays, `a`, and `b`.
932: 
933:     Returns
934:     -------
935:     statistic : float or array
936:         t-statistic
937:     pvalue : float or array
938:         two-tailed p-value
939: 
940:     Notes
941:     -----
942:     For more details on `ttest_rel`, see `stats.ttest_rel`.
943: 
944:     '''
945:     a, b, axis = _chk2_asarray(a, b, axis)
946:     if len(a) != len(b):
947:         raise ValueError('unequal length arrays')
948: 
949:     if a.size == 0 or b.size == 0:
950:         return Ttest_relResult(np.nan, np.nan)
951: 
952:     n = a.count(axis)
953:     df = ma.asanyarray(n-1.0)
954:     d = (a-b).astype('d')
955:     dm = d.mean(axis)
956:     v = d.var(axis=axis, ddof=1)
957:     denom = ma.sqrt(v / n)
958:     with np.errstate(divide='ignore', invalid='ignore'):
959:         t = dm / denom
960: 
961:     probs = special.betainc(0.5*df, 0.5, df/(df + t*t)).reshape(t.shape).squeeze()
962: 
963:     return Ttest_relResult(t, probs)
964: 
965: 
966: MannwhitneyuResult = namedtuple('MannwhitneyuResult', ('statistic',
967:                                                        'pvalue'))
968: 
969: 
970: def mannwhitneyu(x,y, use_continuity=True):
971:     '''
972:     Computes the Mann-Whitney statistic
973: 
974:     Missing values in `x` and/or `y` are discarded.
975: 
976:     Parameters
977:     ----------
978:     x : sequence
979:         Input
980:     y : sequence
981:         Input
982:     use_continuity : {True, False}, optional
983:         Whether a continuity correction (1/2.) should be taken into account.
984: 
985:     Returns
986:     -------
987:     statistic : float
988:         The Mann-Whitney statistics
989:     pvalue : float
990:         Approximate p-value assuming a normal distribution.
991: 
992:     '''
993:     x = ma.asarray(x).compressed().view(ndarray)
994:     y = ma.asarray(y).compressed().view(ndarray)
995:     ranks = rankdata(np.concatenate([x,y]))
996:     (nx, ny) = (len(x), len(y))
997:     nt = nx + ny
998:     U = ranks[:nx].sum() - nx*(nx+1)/2.
999:     U = max(U, nx*ny - U)
1000:     u = nx*ny - U
1001: 
1002:     mu = (nx*ny)/2.
1003:     sigsq = (nt**3 - nt)/12.
1004:     ties = count_tied_groups(ranks)
1005:     sigsq -= np.sum(v*(k**3-k) for (k,v) in iteritems(ties))/12.
1006:     sigsq *= nx*ny/float(nt*(nt-1))
1007: 
1008:     if use_continuity:
1009:         z = (U - 1/2. - mu) / ma.sqrt(sigsq)
1010:     else:
1011:         z = (U - mu) / ma.sqrt(sigsq)
1012: 
1013:     prob = special.erfc(abs(z)/np.sqrt(2))
1014:     return MannwhitneyuResult(u, prob)
1015: 
1016: 
1017: KruskalResult = namedtuple('KruskalResult', ('statistic', 'pvalue'))
1018: 
1019: 
1020: def kruskal(*args):
1021:     '''
1022:     Compute the Kruskal-Wallis H-test for independent samples
1023: 
1024:     Parameters
1025:     ----------
1026:     sample1, sample2, ... : array_like
1027:        Two or more arrays with the sample measurements can be given as
1028:        arguments.
1029: 
1030:     Returns
1031:     -------
1032:     statistic : float
1033:        The Kruskal-Wallis H statistic, corrected for ties
1034:     pvalue : float
1035:        The p-value for the test using the assumption that H has a chi
1036:        square distribution
1037: 
1038:     Notes
1039:     -----
1040:     For more details on `kruskal`, see `stats.kruskal`.
1041: 
1042:     '''
1043:     output = argstoarray(*args)
1044:     ranks = ma.masked_equal(rankdata(output, use_missing=False), 0)
1045:     sumrk = ranks.sum(-1)
1046:     ngrp = ranks.count(-1)
1047:     ntot = ranks.count()
1048:     H = 12./(ntot*(ntot+1)) * (sumrk**2/ngrp).sum() - 3*(ntot+1)
1049:     # Tie correction
1050:     ties = count_tied_groups(ranks)
1051:     T = 1. - np.sum(v*(k**3-k) for (k,v) in iteritems(ties))/float(ntot**3-ntot)
1052:     if T == 0:
1053:         raise ValueError('All numbers are identical in kruskal')
1054: 
1055:     H /= T
1056:     df = len(output) - 1
1057:     prob = distributions.chi2.sf(H, df)
1058:     return KruskalResult(H, prob)
1059: kruskalwallis = kruskal
1060: 
1061: 
1062: def ks_twosamp(data1, data2, alternative="two-sided"):
1063:     '''
1064:     Computes the Kolmogorov-Smirnov test on two samples.
1065: 
1066:     Missing values are discarded.
1067: 
1068:     Parameters
1069:     ----------
1070:     data1 : array_like
1071:         First data set
1072:     data2 : array_like
1073:         Second data set
1074:     alternative : {'two-sided', 'less', 'greater'}, optional
1075:         Indicates the alternative hypothesis.  Default is 'two-sided'.
1076: 
1077:     Returns
1078:     -------
1079:     d : float
1080:         Value of the Kolmogorov Smirnov test
1081:     p : float
1082:         Corresponding p-value.
1083: 
1084:     '''
1085:     (data1, data2) = (ma.asarray(data1), ma.asarray(data2))
1086:     (n1, n2) = (data1.count(), data2.count())
1087:     n = (n1*n2/float(n1+n2))
1088:     mix = ma.concatenate((data1.compressed(), data2.compressed()))
1089:     mixsort = mix.argsort(kind='mergesort')
1090:     csum = np.where(mixsort < n1, 1./n1, -1./n2).cumsum()
1091:     # Check for ties
1092:     if len(np.unique(mix)) < (n1+n2):
1093:         csum = csum[np.r_[np.diff(mix[mixsort]).nonzero()[0],-1]]
1094: 
1095:     alternative = str(alternative).lower()[0]
1096:     if alternative == 't':
1097:         d = ma.abs(csum).max()
1098:         prob = special.kolmogorov(np.sqrt(n)*d)
1099:     elif alternative == 'l':
1100:         d = -csum.min()
1101:         prob = np.exp(-2*n*d**2)
1102:     elif alternative == 'g':
1103:         d = csum.max()
1104:         prob = np.exp(-2*n*d**2)
1105:     else:
1106:         raise ValueError("Invalid value for the alternative hypothesis: "
1107:                          "should be in 'two-sided', 'less' or 'greater'")
1108: 
1109:     return (d, prob)
1110: ks_2samp = ks_twosamp
1111: 
1112: 
1113: def trima(a, limits=None, inclusive=(True,True)):
1114:     '''
1115:     Trims an array by masking the data outside some given limits.
1116: 
1117:     Returns a masked version of the input array.
1118: 
1119:     Parameters
1120:     ----------
1121:     a : array_like
1122:         Input array.
1123:     limits : {None, tuple}, optional
1124:         Tuple of (lower limit, upper limit) in absolute values.
1125:         Values of the input array lower (greater) than the lower (upper) limit
1126:         will be masked.  A limit is None indicates an open interval.
1127:     inclusive : (bool, bool) tuple, optional
1128:         Tuple of (lower flag, upper flag), indicating whether values exactly
1129:         equal to the lower (upper) limit are allowed.
1130: 
1131:     '''
1132:     a = ma.asarray(a)
1133:     a.unshare_mask()
1134:     if (limits is None) or (limits == (None, None)):
1135:         return a
1136: 
1137:     (lower_lim, upper_lim) = limits
1138:     (lower_in, upper_in) = inclusive
1139:     condition = False
1140:     if lower_lim is not None:
1141:         if lower_in:
1142:             condition |= (a < lower_lim)
1143:         else:
1144:             condition |= (a <= lower_lim)
1145: 
1146:     if upper_lim is not None:
1147:         if upper_in:
1148:             condition |= (a > upper_lim)
1149:         else:
1150:             condition |= (a >= upper_lim)
1151: 
1152:     a[condition.filled(True)] = masked
1153:     return a
1154: 
1155: 
1156: def trimr(a, limits=None, inclusive=(True, True), axis=None):
1157:     '''
1158:     Trims an array by masking some proportion of the data on each end.
1159:     Returns a masked version of the input array.
1160: 
1161:     Parameters
1162:     ----------
1163:     a : sequence
1164:         Input array.
1165:     limits : {None, tuple}, optional
1166:         Tuple of the percentages to cut on each side of the array, with respect
1167:         to the number of unmasked data, as floats between 0. and 1.
1168:         Noting n the number of unmasked data before trimming, the
1169:         (n*limits[0])th smallest data and the (n*limits[1])th largest data are
1170:         masked, and the total number of unmasked data after trimming is
1171:         n*(1.-sum(limits)).  The value of one limit can be set to None to
1172:         indicate an open interval.
1173:     inclusive : {(True,True) tuple}, optional
1174:         Tuple of flags indicating whether the number of data being masked on
1175:         the left (right) end should be truncated (True) or rounded (False) to
1176:         integers.
1177:     axis : {None,int}, optional
1178:         Axis along which to trim. If None, the whole array is trimmed, but its
1179:         shape is maintained.
1180: 
1181:     '''
1182:     def _trimr1D(a, low_limit, up_limit, low_inclusive, up_inclusive):
1183:         n = a.count()
1184:         idx = a.argsort()
1185:         if low_limit:
1186:             if low_inclusive:
1187:                 lowidx = int(low_limit*n)
1188:             else:
1189:                 lowidx = np.round(low_limit*n)
1190:             a[idx[:lowidx]] = masked
1191:         if up_limit is not None:
1192:             if up_inclusive:
1193:                 upidx = n - int(n*up_limit)
1194:             else:
1195:                 upidx = n - np.round(n*up_limit)
1196:             a[idx[upidx:]] = masked
1197:         return a
1198: 
1199:     a = ma.asarray(a)
1200:     a.unshare_mask()
1201:     if limits is None:
1202:         return a
1203: 
1204:     # Check the limits
1205:     (lolim, uplim) = limits
1206:     errmsg = "The proportion to cut from the %s should be between 0. and 1."
1207:     if lolim is not None:
1208:         if lolim > 1. or lolim < 0:
1209:             raise ValueError(errmsg % 'beginning' + "(got %s)" % lolim)
1210:     if uplim is not None:
1211:         if uplim > 1. or uplim < 0:
1212:             raise ValueError(errmsg % 'end' + "(got %s)" % uplim)
1213: 
1214:     (loinc, upinc) = inclusive
1215: 
1216:     if axis is None:
1217:         shp = a.shape
1218:         return _trimr1D(a.ravel(),lolim,uplim,loinc,upinc).reshape(shp)
1219:     else:
1220:         return ma.apply_along_axis(_trimr1D, axis, a, lolim,uplim,loinc,upinc)
1221: 
1222: trimdoc = '''
1223:     Parameters
1224:     ----------
1225:     a : sequence
1226:         Input array
1227:     limits : {None, tuple}, optional
1228:         If `relative` is False, tuple (lower limit, upper limit) in absolute values.
1229:         Values of the input array lower (greater) than the lower (upper) limit are
1230:         masked.
1231: 
1232:         If `relative` is True, tuple (lower percentage, upper percentage) to cut
1233:         on each side of the  array, with respect to the number of unmasked data.
1234: 
1235:         Noting n the number of unmasked data before trimming, the (n*limits[0])th
1236:         smallest data and the (n*limits[1])th largest data are masked, and the
1237:         total number of unmasked data after trimming is n*(1.-sum(limits))
1238:         In each case, the value of one limit can be set to None to indicate an
1239:         open interval.
1240: 
1241:         If limits is None, no trimming is performed
1242:     inclusive : {(bool, bool) tuple}, optional
1243:         If `relative` is False, tuple indicating whether values exactly equal
1244:         to the absolute limits are allowed.
1245:         If `relative` is True, tuple indicating whether the number of data
1246:         being masked on each side should be rounded (True) or truncated
1247:         (False).
1248:     relative : bool, optional
1249:         Whether to consider the limits as absolute values (False) or proportions
1250:         to cut (True).
1251:     axis : int, optional
1252:         Axis along which to trim.
1253: '''
1254: 
1255: 
1256: def trim(a, limits=None, inclusive=(True,True), relative=False, axis=None):
1257:     '''
1258:     Trims an array by masking the data outside some given limits.
1259: 
1260:     Returns a masked version of the input array.
1261: 
1262:     %s
1263: 
1264:     Examples
1265:     --------
1266:     >>> from scipy.stats.mstats import trim
1267:     >>> z = [ 1, 2, 3, 4, 5, 6, 7, 8, 9,10]
1268:     >>> print(trim(z,(3,8)))
1269:     [-- -- 3 4 5 6 7 8 -- --]
1270:     >>> print(trim(z,(0.1,0.2),relative=True))
1271:     [-- 2 3 4 5 6 7 8 -- --]
1272: 
1273:     '''
1274:     if relative:
1275:         return trimr(a, limits=limits, inclusive=inclusive, axis=axis)
1276:     else:
1277:         return trima(a, limits=limits, inclusive=inclusive)
1278: 
1279: if trim.__doc__ is not None:
1280:     trim.__doc__ = trim.__doc__ % trimdoc
1281: 
1282: 
1283: def trimboth(data, proportiontocut=0.2, inclusive=(True,True), axis=None):
1284:     '''
1285:     Trims the smallest and largest data values.
1286: 
1287:     Trims the `data` by masking the ``int(proportiontocut * n)`` smallest and
1288:     ``int(proportiontocut * n)`` largest values of data along the given axis,
1289:     where n is the number of unmasked values before trimming.
1290: 
1291:     Parameters
1292:     ----------
1293:     data : ndarray
1294:         Data to trim.
1295:     proportiontocut : float, optional
1296:         Percentage of trimming (as a float between 0 and 1).
1297:         If n is the number of unmasked values before trimming, the number of
1298:         values after trimming is ``(1 - 2*proportiontocut) * n``.
1299:         Default is 0.2.
1300:     inclusive : {(bool, bool) tuple}, optional
1301:         Tuple indicating whether the number of data being masked on each side
1302:         should be rounded (True) or truncated (False).
1303:     axis : int, optional
1304:         Axis along which to perform the trimming.
1305:         If None, the input array is first flattened.
1306: 
1307:     '''
1308:     return trimr(data, limits=(proportiontocut,proportiontocut),
1309:                  inclusive=inclusive, axis=axis)
1310: 
1311: 
1312: def trimtail(data, proportiontocut=0.2, tail='left', inclusive=(True,True),
1313:              axis=None):
1314:     '''
1315:     Trims the data by masking values from one tail.
1316: 
1317:     Parameters
1318:     ----------
1319:     data : array_like
1320:         Data to trim.
1321:     proportiontocut : float, optional
1322:         Percentage of trimming. If n is the number of unmasked values
1323:         before trimming, the number of values after trimming is
1324:         ``(1 - proportiontocut) * n``.  Default is 0.2.
1325:     tail : {'left','right'}, optional
1326:         If 'left' the `proportiontocut` lowest values will be masked.
1327:         If 'right' the `proportiontocut` highest values will be masked.
1328:         Default is 'left'.
1329:     inclusive : {(bool, bool) tuple}, optional
1330:         Tuple indicating whether the number of data being masked on each side
1331:         should be rounded (True) or truncated (False).  Default is
1332:         (True, True).
1333:     axis : int, optional
1334:         Axis along which to perform the trimming.
1335:         If None, the input array is first flattened.  Default is None.
1336: 
1337:     Returns
1338:     -------
1339:     trimtail : ndarray
1340:         Returned array of same shape as `data` with masked tail values.
1341: 
1342:     '''
1343:     tail = str(tail).lower()[0]
1344:     if tail == 'l':
1345:         limits = (proportiontocut,None)
1346:     elif tail == 'r':
1347:         limits = (None, proportiontocut)
1348:     else:
1349:         raise TypeError("The tail argument should be in ('left','right')")
1350: 
1351:     return trimr(data, limits=limits, axis=axis, inclusive=inclusive)
1352: 
1353: trim1 = trimtail
1354: 
1355: 
1356: def trimmed_mean(a, limits=(0.1,0.1), inclusive=(1,1), relative=True,
1357:                  axis=None):
1358:     '''Returns the trimmed mean of the data along the given axis.
1359: 
1360:     %s
1361: 
1362:     ''' % trimdoc
1363:     if (not isinstance(limits,tuple)) and isinstance(limits,float):
1364:         limits = (limits, limits)
1365:     if relative:
1366:         return trimr(a,limits=limits,inclusive=inclusive,axis=axis).mean(axis=axis)
1367:     else:
1368:         return trima(a,limits=limits,inclusive=inclusive).mean(axis=axis)
1369: 
1370: 
1371: def trimmed_var(a, limits=(0.1,0.1), inclusive=(1,1), relative=True,
1372:                 axis=None, ddof=0):
1373:     '''Returns the trimmed variance of the data along the given axis.
1374: 
1375:     %s
1376:     ddof : {0,integer}, optional
1377:         Means Delta Degrees of Freedom. The denominator used during computations
1378:         is (n-ddof). DDOF=0 corresponds to a biased estimate, DDOF=1 to an un-
1379:         biased estimate of the variance.
1380: 
1381:     ''' % trimdoc
1382:     if (not isinstance(limits,tuple)) and isinstance(limits,float):
1383:         limits = (limits, limits)
1384:     if relative:
1385:         out = trimr(a,limits=limits, inclusive=inclusive,axis=axis)
1386:     else:
1387:         out = trima(a,limits=limits,inclusive=inclusive)
1388: 
1389:     return out.var(axis=axis, ddof=ddof)
1390: 
1391: 
1392: def trimmed_std(a, limits=(0.1,0.1), inclusive=(1,1), relative=True,
1393:                 axis=None, ddof=0):
1394:     '''Returns the trimmed standard deviation of the data along the given axis.
1395: 
1396:     %s
1397:     ddof : {0,integer}, optional
1398:         Means Delta Degrees of Freedom. The denominator used during computations
1399:         is (n-ddof). DDOF=0 corresponds to a biased estimate, DDOF=1 to an un-
1400:         biased estimate of the variance.
1401: 
1402:     ''' % trimdoc
1403:     if (not isinstance(limits,tuple)) and isinstance(limits,float):
1404:         limits = (limits, limits)
1405:     if relative:
1406:         out = trimr(a,limits=limits,inclusive=inclusive,axis=axis)
1407:     else:
1408:         out = trima(a,limits=limits,inclusive=inclusive)
1409:     return out.std(axis=axis,ddof=ddof)
1410: 
1411: 
1412: def trimmed_stde(a, limits=(0.1,0.1), inclusive=(1,1), axis=None):
1413:     '''
1414:     Returns the standard error of the trimmed mean along the given axis.
1415: 
1416:     Parameters
1417:     ----------
1418:     a : sequence
1419:         Input array
1420:     limits : {(0.1,0.1), tuple of float}, optional
1421:         tuple (lower percentage, upper percentage) to cut  on each side of the
1422:         array, with respect to the number of unmasked data.
1423: 
1424:         If n is the number of unmasked data before trimming, the values
1425:         smaller than ``n * limits[0]`` and the values larger than
1426:         ``n * `limits[1]`` are masked, and the total number of unmasked
1427:         data after trimming is ``n * (1.-sum(limits))``.  In each case,
1428:         the value of one limit can be set to None to indicate an open interval.
1429:         If `limits` is None, no trimming is performed.
1430:     inclusive : {(bool, bool) tuple} optional
1431:         Tuple indicating whether the number of data being masked on each side
1432:         should be rounded (True) or truncated (False).
1433:     axis : int, optional
1434:         Axis along which to trim.
1435: 
1436:     Returns
1437:     -------
1438:     trimmed_stde : scalar or ndarray
1439: 
1440:     '''
1441:     def _trimmed_stde_1D(a, low_limit, up_limit, low_inclusive, up_inclusive):
1442:         "Returns the standard error of the trimmed mean for a 1D input data."
1443:         n = a.count()
1444:         idx = a.argsort()
1445:         if low_limit:
1446:             if low_inclusive:
1447:                 lowidx = int(low_limit*n)
1448:             else:
1449:                 lowidx = np.round(low_limit*n)
1450:             a[idx[:lowidx]] = masked
1451:         if up_limit is not None:
1452:             if up_inclusive:
1453:                 upidx = n - int(n*up_limit)
1454:             else:
1455:                 upidx = n - np.round(n*up_limit)
1456:             a[idx[upidx:]] = masked
1457:         a[idx[:lowidx]] = a[idx[lowidx]]
1458:         a[idx[upidx:]] = a[idx[upidx-1]]
1459:         winstd = a.std(ddof=1)
1460:         return winstd / ((1-low_limit-up_limit)*np.sqrt(len(a)))
1461: 
1462:     a = ma.array(a, copy=True, subok=True)
1463:     a.unshare_mask()
1464:     if limits is None:
1465:         return a.std(axis=axis,ddof=1)/ma.sqrt(a.count(axis))
1466:     if (not isinstance(limits,tuple)) and isinstance(limits,float):
1467:         limits = (limits, limits)
1468: 
1469:     # Check the limits
1470:     (lolim, uplim) = limits
1471:     errmsg = "The proportion to cut from the %s should be between 0. and 1."
1472:     if lolim is not None:
1473:         if lolim > 1. or lolim < 0:
1474:             raise ValueError(errmsg % 'beginning' + "(got %s)" % lolim)
1475:     if uplim is not None:
1476:         if uplim > 1. or uplim < 0:
1477:             raise ValueError(errmsg % 'end' + "(got %s)" % uplim)
1478: 
1479:     (loinc, upinc) = inclusive
1480:     if (axis is None):
1481:         return _trimmed_stde_1D(a.ravel(),lolim,uplim,loinc,upinc)
1482:     else:
1483:         if a.ndim > 2:
1484:             raise ValueError("Array 'a' must be at most two dimensional, but got a.ndim = %d" % a.ndim)
1485:         return ma.apply_along_axis(_trimmed_stde_1D, axis, a,
1486:                                    lolim,uplim,loinc,upinc)
1487: 
1488: 
1489: def _mask_to_limits(a, limits, inclusive):
1490:     '''Mask an array for values outside of given limits.
1491: 
1492:     This is primarily a utility function.
1493: 
1494:     Parameters
1495:     ----------
1496:     a : array
1497:     limits : (float or None, float or None)
1498:     A tuple consisting of the (lower limit, upper limit).  Values in the
1499:     input array less than the lower limit or greater than the upper limit
1500:     will be masked out. None implies no limit.
1501:     inclusive : (bool, bool)
1502:     A tuple consisting of the (lower flag, upper flag).  These flags
1503:     determine whether values exactly equal to lower or upper are allowed.
1504: 
1505:     Returns
1506:     -------
1507:     A MaskedArray.
1508: 
1509:     Raises
1510:     ------
1511:     A ValueError if there are no values within the given limits.
1512:     '''
1513:     lower_limit, upper_limit = limits
1514:     lower_include, upper_include = inclusive
1515:     am = ma.MaskedArray(a)
1516:     if lower_limit is not None:
1517:         if lower_include:
1518:             am = ma.masked_less(am, lower_limit)
1519:         else:
1520:             am = ma.masked_less_equal(am, lower_limit)
1521: 
1522:     if upper_limit is not None:
1523:         if upper_include:
1524:             am = ma.masked_greater(am, upper_limit)
1525:         else:
1526:             am = ma.masked_greater_equal(am, upper_limit)
1527: 
1528:     if am.count() == 0:
1529:         raise ValueError("No array values within given limits")
1530: 
1531:     return am
1532: 
1533: 
1534: def tmean(a, limits=None, inclusive=(True, True), axis=None):
1535:     '''
1536:     Compute the trimmed mean.
1537: 
1538:     Parameters
1539:     ----------
1540:     a : array_like
1541:         Array of values.
1542:     limits : None or (lower limit, upper limit), optional
1543:         Values in the input array less than the lower limit or greater than the
1544:         upper limit will be ignored.  When limits is None (default), then all
1545:         values are used.  Either of the limit values in the tuple can also be
1546:         None representing a half-open interval.
1547:     inclusive : (bool, bool), optional
1548:         A tuple consisting of the (lower flag, upper flag).  These flags
1549:         determine whether values exactly equal to the lower or upper limits
1550:         are included.  The default value is (True, True).
1551:     axis : int or None, optional
1552:         Axis along which to operate. If None, compute over the
1553:         whole array. Default is None.
1554: 
1555:     Returns
1556:     -------
1557:     tmean : float
1558: 
1559:     Notes
1560:     -----
1561:     For more details on `tmean`, see `stats.tmean`.
1562: 
1563:     '''
1564:     return trima(a, limits=limits, inclusive=inclusive).mean(axis=axis)
1565: 
1566: 
1567: def tvar(a, limits=None, inclusive=(True, True), axis=0, ddof=1):
1568:     '''
1569:     Compute the trimmed variance
1570: 
1571:     This function computes the sample variance of an array of values,
1572:     while ignoring values which are outside of given `limits`.
1573: 
1574:     Parameters
1575:     ----------
1576:     a : array_like
1577:         Array of values.
1578:     limits : None or (lower limit, upper limit), optional
1579:         Values in the input array less than the lower limit or greater than the
1580:         upper limit will be ignored. When limits is None, then all values are
1581:         used. Either of the limit values in the tuple can also be None
1582:         representing a half-open interval.  The default value is None.
1583:     inclusive : (bool, bool), optional
1584:         A tuple consisting of the (lower flag, upper flag).  These flags
1585:         determine whether values exactly equal to the lower or upper limits
1586:         are included.  The default value is (True, True).
1587:     axis : int or None, optional
1588:         Axis along which to operate. If None, compute over the
1589:         whole array. Default is zero.
1590:     ddof : int, optional
1591:         Delta degrees of freedom. Default is 1.
1592: 
1593:     Returns
1594:     -------
1595:     tvar : float
1596:         Trimmed variance.
1597: 
1598:     Notes
1599:     -----
1600:     For more details on `tvar`, see `stats.tvar`.
1601: 
1602:     '''
1603:     a = a.astype(float).ravel()
1604:     if limits is None:
1605:         n = (~a.mask).sum()  # todo: better way to do that?
1606:         return np.ma.var(a) * n/(n-1.)
1607:     am = _mask_to_limits(a, limits=limits, inclusive=inclusive)
1608: 
1609:     return np.ma.var(am, axis=axis, ddof=ddof)
1610: 
1611: 
1612: def tmin(a, lowerlimit=None, axis=0, inclusive=True):
1613:     '''
1614:     Compute the trimmed minimum
1615: 
1616:     Parameters
1617:     ----------
1618:     a : array_like
1619:         array of values
1620:     lowerlimit : None or float, optional
1621:         Values in the input array less than the given limit will be ignored.
1622:         When lowerlimit is None, then all values are used. The default value
1623:         is None.
1624:     axis : int or None, optional
1625:         Axis along which to operate. Default is 0. If None, compute over the
1626:         whole array `a`.
1627:     inclusive : {True, False}, optional
1628:         This flag determines whether values exactly equal to the lower limit
1629:         are included.  The default value is True.
1630: 
1631:     Returns
1632:     -------
1633:     tmin : float, int or ndarray
1634: 
1635:     Notes
1636:     -----
1637:     For more details on `tmin`, see `stats.tmin`.
1638: 
1639:     '''
1640:     a, axis = _chk_asarray(a, axis)
1641:     am = trima(a, (lowerlimit, None), (inclusive, False))
1642:     return ma.minimum.reduce(am, axis)
1643: 
1644: 
1645: def tmax(a, upperlimit=None, axis=0, inclusive=True):
1646:     '''
1647:     Compute the trimmed maximum
1648: 
1649:     This function computes the maximum value of an array along a given axis,
1650:     while ignoring values larger than a specified upper limit.
1651: 
1652:     Parameters
1653:     ----------
1654:     a : array_like
1655:         array of values
1656:     upperlimit : None or float, optional
1657:         Values in the input array greater than the given limit will be ignored.
1658:         When upperlimit is None, then all values are used. The default value
1659:         is None.
1660:     axis : int or None, optional
1661:         Axis along which to operate. Default is 0. If None, compute over the
1662:         whole array `a`.
1663:     inclusive : {True, False}, optional
1664:         This flag determines whether values exactly equal to the upper limit
1665:         are included.  The default value is True.
1666: 
1667:     Returns
1668:     -------
1669:     tmax : float, int or ndarray
1670: 
1671:     Notes
1672:     -----
1673:     For more details on `tmax`, see `stats.tmax`.
1674: 
1675:     '''
1676:     a, axis = _chk_asarray(a, axis)
1677:     am = trima(a, (None, upperlimit), (False, inclusive))
1678:     return ma.maximum.reduce(am, axis)
1679: 
1680: 
1681: def tsem(a, limits=None, inclusive=(True, True), axis=0, ddof=1):
1682:     '''
1683:     Compute the trimmed standard error of the mean.
1684: 
1685:     This function finds the standard error of the mean for given
1686:     values, ignoring values outside the given `limits`.
1687: 
1688:     Parameters
1689:     ----------
1690:     a : array_like
1691:         array of values
1692:     limits : None or (lower limit, upper limit), optional
1693:         Values in the input array less than the lower limit or greater than the
1694:         upper limit will be ignored. When limits is None, then all values are
1695:         used. Either of the limit values in the tuple can also be None
1696:         representing a half-open interval.  The default value is None.
1697:     inclusive : (bool, bool), optional
1698:         A tuple consisting of the (lower flag, upper flag).  These flags
1699:         determine whether values exactly equal to the lower or upper limits
1700:         are included.  The default value is (True, True).
1701:     axis : int or None, optional
1702:         Axis along which to operate. If None, compute over the
1703:         whole array. Default is zero.
1704:     ddof : int, optional
1705:         Delta degrees of freedom. Default is 1.
1706: 
1707:     Returns
1708:     -------
1709:     tsem : float
1710: 
1711:     Notes
1712:     -----
1713:     For more details on `tsem`, see `stats.tsem`.
1714: 
1715:     '''
1716:     a = ma.asarray(a).ravel()
1717:     if limits is None:
1718:         n = float(a.count())
1719:         return a.std(axis=axis, ddof=ddof)/ma.sqrt(n)
1720: 
1721:     am = trima(a.ravel(), limits, inclusive)
1722:     sd = np.sqrt(am.var(axis=axis, ddof=ddof))
1723:     return sd / np.sqrt(am.count())
1724: 
1725: 
1726: def winsorize(a, limits=None, inclusive=(True, True), inplace=False,
1727:               axis=None):
1728:     '''Returns a Winsorized version of the input array.
1729: 
1730:     The (limits[0])th lowest values are set to the (limits[0])th percentile,
1731:     and the (limits[1])th highest values are set to the (1 - limits[1])th
1732:     percentile.
1733:     Masked values are skipped.
1734: 
1735: 
1736:     Parameters
1737:     ----------
1738:     a : sequence
1739:         Input array.
1740:     limits : {None, tuple of float}, optional
1741:         Tuple of the percentages to cut on each side of the array, with respect
1742:         to the number of unmasked data, as floats between 0. and 1.
1743:         Noting n the number of unmasked data before trimming, the
1744:         (n*limits[0])th smallest data and the (n*limits[1])th largest data are
1745:         masked, and the total number of unmasked data after trimming
1746:         is n*(1.-sum(limits)) The value of one limit can be set to None to
1747:         indicate an open interval.
1748:     inclusive : {(True, True) tuple}, optional
1749:         Tuple indicating whether the number of data being masked on each side
1750:         should be rounded (True) or truncated (False).
1751:     inplace : {False, True}, optional
1752:         Whether to winsorize in place (True) or to use a copy (False)
1753:     axis : {None, int}, optional
1754:         Axis along which to trim. If None, the whole array is trimmed, but its
1755:         shape is maintained.
1756: 
1757:     Notes
1758:     -----
1759:     This function is applied to reduce the effect of possibly spurious outliers
1760:     by limiting the extreme values.
1761: 
1762:     '''
1763:     def _winsorize1D(a, low_limit, up_limit, low_include, up_include):
1764:         n = a.count()
1765:         idx = a.argsort()
1766:         if low_limit:
1767:             if low_include:
1768:                 lowidx = int(low_limit * n)
1769:             else:
1770:                 lowidx = np.round(low_limit * n).astype(int)
1771:             a[idx[:lowidx]] = a[idx[lowidx]]
1772:         if up_limit is not None:
1773:             if up_include:
1774:                 upidx = n - int(n * up_limit)
1775:             else:
1776:                 upidx = n - np.round(n * up_limit).astype(int)
1777:             a[idx[upidx:]] = a[idx[upidx - 1]]
1778:         return a
1779: 
1780:     # We are going to modify a: better make a copy
1781:     a = ma.array(a, copy=np.logical_not(inplace))
1782: 
1783:     if limits is None:
1784:         return a
1785:     if (not isinstance(limits, tuple)) and isinstance(limits, float):
1786:         limits = (limits, limits)
1787: 
1788:     # Check the limits
1789:     (lolim, uplim) = limits
1790:     errmsg = "The proportion to cut from the %s should be between 0. and 1."
1791:     if lolim is not None:
1792:         if lolim > 1. or lolim < 0:
1793:             raise ValueError(errmsg % 'beginning' + "(got %s)" % lolim)
1794:     if uplim is not None:
1795:         if uplim > 1. or uplim < 0:
1796:             raise ValueError(errmsg % 'end' + "(got %s)" % uplim)
1797: 
1798:     (loinc, upinc) = inclusive
1799: 
1800:     if axis is None:
1801:         shp = a.shape
1802:         return _winsorize1D(a.ravel(), lolim, uplim, loinc, upinc).reshape(shp)
1803:     else:
1804:         return ma.apply_along_axis(_winsorize1D, axis, a, lolim, uplim, loinc,
1805:                                    upinc)
1806: 
1807: 
1808: def moment(a, moment=1, axis=0):
1809:     '''
1810:     Calculates the nth moment about the mean for a sample.
1811: 
1812:     Parameters
1813:     ----------
1814:     a : array_like
1815:        data
1816:     moment : int, optional
1817:        order of central moment that is returned
1818:     axis : int or None, optional
1819:        Axis along which the central moment is computed. Default is 0.
1820:        If None, compute over the whole array `a`.
1821: 
1822:     Returns
1823:     -------
1824:     n-th central moment : ndarray or float
1825:        The appropriate moment along the given axis or over all values if axis
1826:        is None. The denominator for the moment calculation is the number of
1827:        observations, no degrees of freedom correction is done.
1828: 
1829:     Notes
1830:     -----
1831:     For more details about `moment`, see `stats.moment`.
1832: 
1833:     '''
1834:     a, axis = _chk_asarray(a, axis)
1835:     if moment == 1:
1836:         # By definition the first moment about the mean is 0.
1837:         shape = list(a.shape)
1838:         del shape[axis]
1839:         if shape:
1840:             # return an actual array of the appropriate shape
1841:             return np.zeros(shape, dtype=float)
1842:         else:
1843:             # the input was 1D, so return a scalar instead of a rank-0 array
1844:             return np.float64(0.0)
1845:     else:
1846:         # Exponentiation by squares: form exponent sequence
1847:         n_list = [moment]
1848:         current_n = moment
1849:         while current_n > 2:
1850:             if current_n % 2:
1851:                 current_n = (current_n-1)/2
1852:             else:
1853:                 current_n /= 2
1854:             n_list.append(current_n)
1855: 
1856:         # Starting point for exponentiation by squares
1857:         a_zero_mean = a - ma.expand_dims(a.mean(axis), axis)
1858:         if n_list[-1] == 1:
1859:             s = a_zero_mean.copy()
1860:         else:
1861:             s = a_zero_mean**2
1862: 
1863:         # Perform multiplications
1864:         for n in n_list[-2::-1]:
1865:             s = s**2
1866:             if n % 2:
1867:                 s *= a_zero_mean
1868:         return s.mean(axis)
1869: 
1870: 
1871: def variation(a, axis=0):
1872:     '''
1873:     Computes the coefficient of variation, the ratio of the biased standard
1874:     deviation to the mean.
1875: 
1876:     Parameters
1877:     ----------
1878:     a : array_like
1879:         Input array.
1880:     axis : int or None, optional
1881:         Axis along which to calculate the coefficient of variation. Default
1882:         is 0. If None, compute over the whole array `a`.
1883: 
1884:     Returns
1885:     -------
1886:     variation : ndarray
1887:         The calculated variation along the requested axis.
1888: 
1889:     Notes
1890:     -----
1891:     For more details about `variation`, see `stats.variation`.
1892: 
1893:     '''
1894:     a, axis = _chk_asarray(a, axis)
1895:     return a.std(axis)/a.mean(axis)
1896: 
1897: 
1898: def skew(a, axis=0, bias=True):
1899:     '''
1900:     Computes the skewness of a data set.
1901: 
1902:     Parameters
1903:     ----------
1904:     a : ndarray
1905:         data
1906:     axis : int or None, optional
1907:         Axis along which skewness is calculated. Default is 0.
1908:         If None, compute over the whole array `a`.
1909:     bias : bool, optional
1910:         If False, then the calculations are corrected for statistical bias.
1911: 
1912:     Returns
1913:     -------
1914:     skewness : ndarray
1915:         The skewness of values along an axis, returning 0 where all values are
1916:         equal.
1917: 
1918:     Notes
1919:     -----
1920:     For more details about `skew`, see `stats.skew`.
1921: 
1922:     '''
1923:     a, axis = _chk_asarray(a,axis)
1924:     n = a.count(axis)
1925:     m2 = moment(a, 2, axis)
1926:     m3 = moment(a, 3, axis)
1927:     olderr = np.seterr(all='ignore')
1928:     try:
1929:         vals = ma.where(m2 == 0, 0, m3 / m2**1.5)
1930:     finally:
1931:         np.seterr(**olderr)
1932: 
1933:     if not bias:
1934:         can_correct = (n > 2) & (m2 > 0)
1935:         if can_correct.any():
1936:             m2 = np.extract(can_correct, m2)
1937:             m3 = np.extract(can_correct, m3)
1938:             nval = ma.sqrt((n-1.0)*n)/(n-2.0)*m3/m2**1.5
1939:             np.place(vals, can_correct, nval)
1940:     return vals
1941: 
1942: 
1943: def kurtosis(a, axis=0, fisher=True, bias=True):
1944:     '''
1945:     Computes the kurtosis (Fisher or Pearson) of a dataset.
1946: 
1947:     Kurtosis is the fourth central moment divided by the square of the
1948:     variance. If Fisher's definition is used, then 3.0 is subtracted from
1949:     the result to give 0.0 for a normal distribution.
1950: 
1951:     If bias is False then the kurtosis is calculated using k statistics to
1952:     eliminate bias coming from biased moment estimators
1953: 
1954:     Use `kurtosistest` to see if result is close enough to normal.
1955: 
1956:     Parameters
1957:     ----------
1958:     a : array
1959:         data for which the kurtosis is calculated
1960:     axis : int or None, optional
1961:         Axis along which the kurtosis is calculated. Default is 0.
1962:         If None, compute over the whole array `a`.
1963:     fisher : bool, optional
1964:         If True, Fisher's definition is used (normal ==> 0.0). If False,
1965:         Pearson's definition is used (normal ==> 3.0).
1966:     bias : bool, optional
1967:         If False, then the calculations are corrected for statistical bias.
1968: 
1969:     Returns
1970:     -------
1971:     kurtosis : array
1972:         The kurtosis of values along an axis. If all values are equal,
1973:         return -3 for Fisher's definition and 0 for Pearson's definition.
1974: 
1975:     Notes
1976:     -----
1977:     For more details about `kurtosis`, see `stats.kurtosis`.
1978: 
1979:     '''
1980:     a, axis = _chk_asarray(a, axis)
1981:     m2 = moment(a, 2, axis)
1982:     m4 = moment(a, 4, axis)
1983:     olderr = np.seterr(all='ignore')
1984:     try:
1985:         vals = ma.where(m2 == 0, 0, m4 / m2**2.0)
1986:     finally:
1987:         np.seterr(**olderr)
1988: 
1989:     if not bias:
1990:         n = a.count(axis)
1991:         can_correct = (n > 3) & (m2 is not ma.masked and m2 > 0)
1992:         if can_correct.any():
1993:             n = np.extract(can_correct, n)
1994:             m2 = np.extract(can_correct, m2)
1995:             m4 = np.extract(can_correct, m4)
1996:             nval = 1.0/(n-2)/(n-3)*((n*n-1.0)*m4/m2**2.0-3*(n-1)**2.0)
1997:             np.place(vals, can_correct, nval+3.0)
1998:     if fisher:
1999:         return vals - 3
2000:     else:
2001:         return vals
2002: 
2003: 
2004: DescribeResult = namedtuple('DescribeResult', ('nobs', 'minmax', 'mean',
2005:                                                'variance', 'skewness',
2006:                                                'kurtosis'))
2007: 
2008: 
2009: def describe(a, axis=0, ddof=0, bias=True):
2010:     '''
2011:     Computes several descriptive statistics of the passed array.
2012: 
2013:     Parameters
2014:     ----------
2015:     a : array_like
2016:         Data array
2017:     axis : int or None, optional
2018:         Axis along which to calculate statistics. Default 0. If None,
2019:         compute over the whole array `a`.
2020:     ddof : int, optional
2021:         degree of freedom (default 0); note that default ddof is different
2022:         from the same routine in stats.describe
2023:     bias : bool, optional
2024:         If False, then the skewness and kurtosis calculations are corrected for
2025:         statistical bias.
2026: 
2027:     Returns
2028:     -------
2029:     nobs : int
2030:         (size of the data (discarding missing values)
2031: 
2032:     minmax : (int, int)
2033:         min, max
2034: 
2035:     mean : float
2036:         arithmetic mean
2037: 
2038:     variance : float
2039:         unbiased variance
2040: 
2041:     skewness : float
2042:         biased skewness
2043: 
2044:     kurtosis : float
2045:         biased kurtosis
2046: 
2047:     Examples
2048:     --------
2049:     >>> from scipy.stats.mstats import describe
2050:     >>> ma = np.ma.array(range(6), mask=[0, 0, 0, 1, 1, 1])
2051:     >>> describe(ma)
2052:     DescribeResult(nobs=3, minmax=(masked_array(data = 0,
2053:                  mask = False,
2054:            fill_value = 999999)
2055:     , masked_array(data = 2,
2056:                  mask = False,
2057:            fill_value = 999999)
2058:     ), mean=1.0, variance=0.66666666666666663, skewness=masked_array(data = 0.0,
2059:                  mask = False,
2060:            fill_value = 1e+20)
2061:     , kurtosis=-1.5)
2062: 
2063:     '''
2064:     a, axis = _chk_asarray(a, axis)
2065:     n = a.count(axis)
2066:     mm = (ma.minimum.reduce(a), ma.maximum.reduce(a))
2067:     m = a.mean(axis)
2068:     v = a.var(axis, ddof=ddof)
2069:     sk = skew(a, axis, bias=bias)
2070:     kurt = kurtosis(a, axis, bias=bias)
2071: 
2072:     return DescribeResult(n, mm, m, v, sk, kurt)
2073: 
2074: 
2075: def stde_median(data, axis=None):
2076:     '''Returns the McKean-Schrader estimate of the standard error of the sample
2077:     median along the given axis. masked values are discarded.
2078: 
2079:     Parameters
2080:     ----------
2081:     data : ndarray
2082:         Data to trim.
2083:     axis : {None,int}, optional
2084:         Axis along which to perform the trimming.
2085:         If None, the input array is first flattened.
2086: 
2087:     '''
2088:     def _stdemed_1D(data):
2089:         data = np.sort(data.compressed())
2090:         n = len(data)
2091:         z = 2.5758293035489004
2092:         k = int(np.round((n+1)/2. - z * np.sqrt(n/4.),0))
2093:         return ((data[n-k] - data[k-1])/(2.*z))
2094: 
2095:     data = ma.array(data, copy=False, subok=True)
2096:     if (axis is None):
2097:         return _stdemed_1D(data)
2098:     else:
2099:         if data.ndim > 2:
2100:             raise ValueError("Array 'data' must be at most two dimensional, "
2101:                              "but got data.ndim = %d" % data.ndim)
2102:         return ma.apply_along_axis(_stdemed_1D, axis, data)
2103: 
2104: 
2105: SkewtestResult = namedtuple('SkewtestResult', ('statistic', 'pvalue'))
2106: 
2107: 
2108: def skewtest(a, axis=0):
2109:     '''
2110:     Tests whether the skew is different from the normal distribution.
2111: 
2112:     Parameters
2113:     ----------
2114:     a : array
2115:         The data to be tested
2116:     axis : int or None, optional
2117:        Axis along which statistics are calculated. Default is 0.
2118:        If None, compute over the whole array `a`.
2119: 
2120:     Returns
2121:     -------
2122:     statistic : float
2123:         The computed z-score for this test.
2124:     pvalue : float
2125:         a 2-sided p-value for the hypothesis test
2126: 
2127:     Notes
2128:     -----
2129:     For more details about `skewtest`, see `stats.skewtest`.
2130: 
2131:     '''
2132:     a, axis = _chk_asarray(a, axis)
2133:     if axis is None:
2134:         a = a.ravel()
2135:         axis = 0
2136:     b2 = skew(a,axis)
2137:     n = a.count(axis)
2138:     if np.min(n) < 8:
2139:         raise ValueError(
2140:             "skewtest is not valid with less than 8 samples; %i samples"
2141:             " were given." % np.min(n))
2142: 
2143:     y = b2 * ma.sqrt(((n+1)*(n+3)) / (6.0*(n-2)))
2144:     beta2 = (3.0*(n*n+27*n-70)*(n+1)*(n+3)) / ((n-2.0)*(n+5)*(n+7)*(n+9))
2145:     W2 = -1 + ma.sqrt(2*(beta2-1))
2146:     delta = 1/ma.sqrt(0.5*ma.log(W2))
2147:     alpha = ma.sqrt(2.0/(W2-1))
2148:     y = ma.where(y == 0, 1, y)
2149:     Z = delta*ma.log(y/alpha + ma.sqrt((y/alpha)**2+1))
2150: 
2151:     return SkewtestResult(Z, 2 * distributions.norm.sf(np.abs(Z)))
2152: 
2153: 
2154: KurtosistestResult = namedtuple('KurtosistestResult', ('statistic',
2155:                                                        'pvalue'))
2156: 
2157: 
2158: def kurtosistest(a, axis=0):
2159:     '''
2160:     Tests whether a dataset has normal kurtosis
2161: 
2162:     Parameters
2163:     ----------
2164:     a : array
2165:         array of the sample data
2166:     axis : int or None, optional
2167:        Axis along which to compute test. Default is 0. If None,
2168:        compute over the whole array `a`.
2169: 
2170:     Returns
2171:     -------
2172:     statistic : float
2173:         The computed z-score for this test.
2174:     pvalue : float
2175:         The 2-sided p-value for the hypothesis test
2176: 
2177:     Notes
2178:     -----
2179:     For more details about `kurtosistest`, see `stats.kurtosistest`.
2180: 
2181:     '''
2182:     a, axis = _chk_asarray(a, axis)
2183:     n = a.count(axis=axis)
2184:     if np.min(n) < 5:
2185:         raise ValueError(
2186:             "kurtosistest requires at least 5 observations; %i observations"
2187:             " were given." % np.min(n))
2188:     if np.min(n) < 20:
2189:         warnings.warn(
2190:             "kurtosistest only valid for n>=20 ... continuing anyway, n=%i" %
2191:             np.min(n))
2192: 
2193:     b2 = kurtosis(a, axis, fisher=False)
2194:     E = 3.0*(n-1) / (n+1)
2195:     varb2 = 24.0*n*(n-2.)*(n-3) / ((n+1)*(n+1.)*(n+3)*(n+5))
2196:     x = (b2-E)/ma.sqrt(varb2)
2197:     sqrtbeta1 = 6.0*(n*n-5*n+2)/((n+7)*(n+9)) * np.sqrt((6.0*(n+3)*(n+5)) /
2198:                                                         (n*(n-2)*(n-3)))
2199:     A = 6.0 + 8.0/sqrtbeta1 * (2.0/sqrtbeta1 + np.sqrt(1+4.0/(sqrtbeta1**2)))
2200:     term1 = 1 - 2./(9.0*A)
2201:     denom = 1 + x*ma.sqrt(2/(A-4.0))
2202:     if np.ma.isMaskedArray(denom):
2203:         # For multi-dimensional array input
2204:         denom[denom < 0] = masked
2205:     elif denom < 0:
2206:         denom = masked
2207: 
2208:     term2 = ma.power((1-2.0/A)/denom,1/3.0)
2209:     Z = (term1 - term2) / np.sqrt(2/(9.0*A))
2210: 
2211:     return KurtosistestResult(Z, 2 * distributions.norm.sf(np.abs(Z)))
2212: 
2213: 
2214: NormaltestResult = namedtuple('NormaltestResult', ('statistic', 'pvalue'))
2215: 
2216: 
2217: def normaltest(a, axis=0):
2218:     '''
2219:     Tests whether a sample differs from a normal distribution.
2220: 
2221:     Parameters
2222:     ----------
2223:     a : array_like
2224:         The array containing the data to be tested.
2225:     axis : int or None, optional
2226:         Axis along which to compute test. Default is 0. If None,
2227:         compute over the whole array `a`.
2228: 
2229:     Returns
2230:     -------
2231:     statistic : float or array
2232:         ``s^2 + k^2``, where ``s`` is the z-score returned by `skewtest` and
2233:         ``k`` is the z-score returned by `kurtosistest`.
2234:     pvalue : float or array
2235:        A 2-sided chi squared probability for the hypothesis test.
2236: 
2237:     Notes
2238:     -----
2239:     For more details about `normaltest`, see `stats.normaltest`.
2240: 
2241:     '''
2242:     a, axis = _chk_asarray(a, axis)
2243:     s, _ = skewtest(a, axis)
2244:     k, _ = kurtosistest(a, axis)
2245:     k2 = s*s + k*k
2246: 
2247:     return NormaltestResult(k2, distributions.chi2.sf(k2, 2))
2248: 
2249: 
2250: def mquantiles(a, prob=list([.25,.5,.75]), alphap=.4, betap=.4, axis=None,
2251:                limit=()):
2252:     '''
2253:     Computes empirical quantiles for a data array.
2254: 
2255:     Samples quantile are defined by ``Q(p) = (1-gamma)*x[j] + gamma*x[j+1]``,
2256:     where ``x[j]`` is the j-th order statistic, and gamma is a function of
2257:     ``j = floor(n*p + m)``, ``m = alphap + p*(1 - alphap - betap)`` and
2258:     ``g = n*p + m - j``.
2259: 
2260:     Reinterpreting the above equations to compare to **R** lead to the
2261:     equation: ``p(k) = (k - alphap)/(n + 1 - alphap - betap)``
2262: 
2263:     Typical values of (alphap,betap) are:
2264:         - (0,1)    : ``p(k) = k/n`` : linear interpolation of cdf
2265:           (**R** type 4)
2266:         - (.5,.5)  : ``p(k) = (k - 1/2.)/n`` : piecewise linear function
2267:           (**R** type 5)
2268:         - (0,0)    : ``p(k) = k/(n+1)`` :
2269:           (**R** type 6)
2270:         - (1,1)    : ``p(k) = (k-1)/(n-1)``: p(k) = mode[F(x[k])].
2271:           (**R** type 7, **R** default)
2272:         - (1/3,1/3): ``p(k) = (k-1/3)/(n+1/3)``: Then p(k) ~ median[F(x[k])].
2273:           The resulting quantile estimates are approximately median-unbiased
2274:           regardless of the distribution of x.
2275:           (**R** type 8)
2276:         - (3/8,3/8): ``p(k) = (k-3/8)/(n+1/4)``: Blom.
2277:           The resulting quantile estimates are approximately unbiased
2278:           if x is normally distributed
2279:           (**R** type 9)
2280:         - (.4,.4)  : approximately quantile unbiased (Cunnane)
2281:         - (.35,.35): APL, used with PWM
2282: 
2283:     Parameters
2284:     ----------
2285:     a : array_like
2286:         Input data, as a sequence or array of dimension at most 2.
2287:     prob : array_like, optional
2288:         List of quantiles to compute.
2289:     alphap : float, optional
2290:         Plotting positions parameter, default is 0.4.
2291:     betap : float, optional
2292:         Plotting positions parameter, default is 0.4.
2293:     axis : int, optional
2294:         Axis along which to perform the trimming.
2295:         If None (default), the input array is first flattened.
2296:     limit : tuple, optional
2297:         Tuple of (lower, upper) values.
2298:         Values of `a` outside this open interval are ignored.
2299: 
2300:     Returns
2301:     -------
2302:     mquantiles : MaskedArray
2303:         An array containing the calculated quantiles.
2304: 
2305:     Notes
2306:     -----
2307:     This formulation is very similar to **R** except the calculation of
2308:     ``m`` from ``alphap`` and ``betap``, where in **R** ``m`` is defined
2309:     with each type.
2310: 
2311:     References
2312:     ----------
2313:     .. [1] *R* statistical software: http://www.r-project.org/
2314:     .. [2] *R* ``quantile`` function:
2315:             http://stat.ethz.ch/R-manual/R-devel/library/stats/html/quantile.html
2316: 
2317:     Examples
2318:     --------
2319:     >>> from scipy.stats.mstats import mquantiles
2320:     >>> a = np.array([6., 47., 49., 15., 42., 41., 7., 39., 43., 40., 36.])
2321:     >>> mquantiles(a)
2322:     array([ 19.2,  40. ,  42.8])
2323: 
2324:     Using a 2D array, specifying axis and limit.
2325: 
2326:     >>> data = np.array([[   6.,    7.,    1.],
2327:     ...                  [  47.,   15.,    2.],
2328:     ...                  [  49.,   36.,    3.],
2329:     ...                  [  15.,   39.,    4.],
2330:     ...                  [  42.,   40., -999.],
2331:     ...                  [  41.,   41., -999.],
2332:     ...                  [   7., -999., -999.],
2333:     ...                  [  39., -999., -999.],
2334:     ...                  [  43., -999., -999.],
2335:     ...                  [  40., -999., -999.],
2336:     ...                  [  36., -999., -999.]])
2337:     >>> print(mquantiles(data, axis=0, limit=(0, 50)))
2338:     [[ 19.2   14.6    1.45]
2339:      [ 40.    37.5    2.5 ]
2340:      [ 42.8   40.05   3.55]]
2341: 
2342:     >>> data[:, 2] = -999.
2343:     >>> print(mquantiles(data, axis=0, limit=(0, 50)))
2344:     [[19.200000000000003 14.6 --]
2345:      [40.0 37.5 --]
2346:      [42.800000000000004 40.05 --]]
2347: 
2348:     '''
2349:     def _quantiles1D(data,m,p):
2350:         x = np.sort(data.compressed())
2351:         n = len(x)
2352:         if n == 0:
2353:             return ma.array(np.empty(len(p), dtype=float), mask=True)
2354:         elif n == 1:
2355:             return ma.array(np.resize(x, p.shape), mask=nomask)
2356:         aleph = (n*p + m)
2357:         k = np.floor(aleph.clip(1, n-1)).astype(int)
2358:         gamma = (aleph-k).clip(0,1)
2359:         return (1.-gamma)*x[(k-1).tolist()] + gamma*x[k.tolist()]
2360: 
2361:     data = ma.array(a, copy=False)
2362:     if data.ndim > 2:
2363:         raise TypeError("Array should be 2D at most !")
2364: 
2365:     if limit:
2366:         condition = (limit[0] < data) & (data < limit[1])
2367:         data[~condition.filled(True)] = masked
2368: 
2369:     p = np.array(prob, copy=False, ndmin=1)
2370:     m = alphap + p*(1.-alphap-betap)
2371:     # Computes quantiles along axis (or globally)
2372:     if (axis is None):
2373:         return _quantiles1D(data, m, p)
2374: 
2375:     return ma.apply_along_axis(_quantiles1D, axis, data, m, p)
2376: 
2377: 
2378: def scoreatpercentile(data, per, limit=(), alphap=.4, betap=.4):
2379:     '''Calculate the score at the given 'per' percentile of the
2380:     sequence a.  For example, the score at per=50 is the median.
2381: 
2382:     This function is a shortcut to mquantile
2383: 
2384:     '''
2385:     if (per < 0) or (per > 100.):
2386:         raise ValueError("The percentile should be between 0. and 100. !"
2387:                          " (got %s)" % per)
2388: 
2389:     return mquantiles(data, prob=[per/100.], alphap=alphap, betap=betap,
2390:                       limit=limit, axis=0).squeeze()
2391: 
2392: 
2393: def plotting_positions(data, alpha=0.4, beta=0.4):
2394:     '''
2395:     Returns plotting positions (or empirical percentile points) for the data.
2396: 
2397:     Plotting positions are defined as ``(i-alpha)/(n+1-alpha-beta)``, where:
2398:         - i is the rank order statistics
2399:         - n is the number of unmasked values along the given axis
2400:         - `alpha` and `beta` are two parameters.
2401: 
2402:     Typical values for `alpha` and `beta` are:
2403:         - (0,1)    : ``p(k) = k/n``, linear interpolation of cdf (R, type 4)
2404:         - (.5,.5)  : ``p(k) = (k-1/2.)/n``, piecewise linear function
2405:           (R, type 5)
2406:         - (0,0)    : ``p(k) = k/(n+1)``, Weibull (R type 6)
2407:         - (1,1)    : ``p(k) = (k-1)/(n-1)``, in this case,
2408:           ``p(k) = mode[F(x[k])]``. That's R default (R type 7)
2409:         - (1/3,1/3): ``p(k) = (k-1/3)/(n+1/3)``, then
2410:           ``p(k) ~ median[F(x[k])]``.
2411:           The resulting quantile estimates are approximately median-unbiased
2412:           regardless of the distribution of x. (R type 8)
2413:         - (3/8,3/8): ``p(k) = (k-3/8)/(n+1/4)``, Blom.
2414:           The resulting quantile estimates are approximately unbiased
2415:           if x is normally distributed (R type 9)
2416:         - (.4,.4)  : approximately quantile unbiased (Cunnane)
2417:         - (.35,.35): APL, used with PWM
2418:         - (.3175, .3175): used in scipy.stats.probplot
2419: 
2420:     Parameters
2421:     ----------
2422:     data : array_like
2423:         Input data, as a sequence or array of dimension at most 2.
2424:     alpha : float, optional
2425:         Plotting positions parameter. Default is 0.4.
2426:     beta : float, optional
2427:         Plotting positions parameter. Default is 0.4.
2428: 
2429:     Returns
2430:     -------
2431:     positions : MaskedArray
2432:         The calculated plotting positions.
2433: 
2434:     '''
2435:     data = ma.array(data, copy=False).reshape(1,-1)
2436:     n = data.count()
2437:     plpos = np.empty(data.size, dtype=float)
2438:     plpos[n:] = 0
2439:     plpos[data.argsort(axis=None)[:n]] = ((np.arange(1, n+1) - alpha) /
2440:                                           (n + 1.0 - alpha - beta))
2441:     return ma.array(plpos, mask=data._mask)
2442: 
2443: meppf = plotting_positions
2444: 
2445: 
2446: def obrientransform(*args):
2447:     '''
2448:     Computes a transform on input data (any number of columns).  Used to
2449:     test for homogeneity of variance prior to running one-way stats.  Each
2450:     array in ``*args`` is one level of a factor.  If an `f_oneway()` run on
2451:     the transformed data and found significant, variances are unequal.   From
2452:     Maxwell and Delaney, p.112.
2453: 
2454:     Returns: transformed data for use in an ANOVA
2455:     '''
2456:     data = argstoarray(*args).T
2457:     v = data.var(axis=0,ddof=1)
2458:     m = data.mean(0)
2459:     n = data.count(0).astype(float)
2460:     # result = ((N-1.5)*N*(a-m)**2 - 0.5*v*(n-1))/((n-1)*(n-2))
2461:     data -= m
2462:     data **= 2
2463:     data *= (n-1.5)*n
2464:     data -= 0.5*v*(n-1)
2465:     data /= (n-1.)*(n-2.)
2466:     if not ma.allclose(v,data.mean(0)):
2467:         raise ValueError("Lack of convergence in obrientransform.")
2468: 
2469:     return data
2470: 
2471: 
2472: def sem(a, axis=0, ddof=1):
2473:     '''
2474:     Calculates the standard error of the mean of the input array.
2475: 
2476:     Also sometimes called standard error of measurement.
2477: 
2478:     Parameters
2479:     ----------
2480:     a : array_like
2481:         An array containing the values for which the standard error is
2482:         returned.
2483:     axis : int or None, optional
2484:         If axis is None, ravel `a` first. If axis is an integer, this will be
2485:         the axis over which to operate. Defaults to 0.
2486:     ddof : int, optional
2487:         Delta degrees-of-freedom. How many degrees of freedom to adjust
2488:         for bias in limited samples relative to the population estimate
2489:         of variance. Defaults to 1.
2490: 
2491:     Returns
2492:     -------
2493:     s : ndarray or float
2494:         The standard error of the mean in the sample(s), along the input axis.
2495: 
2496:     Notes
2497:     -----
2498:     The default value for `ddof` changed in scipy 0.15.0 to be consistent with
2499:     `stats.sem` as well as with the most common definition used (like in the R
2500:     documentation).
2501: 
2502:     Examples
2503:     --------
2504:     Find standard error along the first axis:
2505: 
2506:     >>> from scipy import stats
2507:     >>> a = np.arange(20).reshape(5,4)
2508:     >>> print(stats.mstats.sem(a))
2509:     [2.8284271247461903 2.8284271247461903 2.8284271247461903
2510:      2.8284271247461903]
2511: 
2512:     Find standard error across the whole array, using n degrees of freedom:
2513: 
2514:     >>> print(stats.mstats.sem(a, axis=None, ddof=0))
2515:     1.2893796958227628
2516: 
2517:     '''
2518:     a, axis = _chk_asarray(a, axis)
2519:     n = a.count(axis=axis)
2520:     s = a.std(axis=axis, ddof=ddof) / ma.sqrt(n)
2521:     return s
2522: 
2523: 
2524: F_onewayResult = namedtuple('F_onewayResult', ('statistic', 'pvalue'))
2525: 
2526: 
2527: def f_oneway(*args):
2528:     '''
2529:     Performs a 1-way ANOVA, returning an F-value and probability given
2530:     any number of groups.  From Heiman, pp.394-7.
2531: 
2532:     Usage: ``f_oneway(*args)``, where ``*args`` is 2 or more arrays,
2533:     one per treatment group.
2534: 
2535:     Returns
2536:     -------
2537:     statistic : float
2538:         The computed F-value of the test.
2539:     pvalue : float
2540:         The associated p-value from the F-distribution.
2541: 
2542:     '''
2543:     # Construct a single array of arguments: each row is a group
2544:     data = argstoarray(*args)
2545:     ngroups = len(data)
2546:     ntot = data.count()
2547:     sstot = (data**2).sum() - (data.sum())**2/float(ntot)
2548:     ssbg = (data.count(-1) * (data.mean(-1)-data.mean())**2).sum()
2549:     sswg = sstot-ssbg
2550:     dfbg = ngroups-1
2551:     dfwg = ntot - ngroups
2552:     msb = ssbg/float(dfbg)
2553:     msw = sswg/float(dfwg)
2554:     f = msb/msw
2555:     prob = special.fdtrc(dfbg, dfwg, f)  # equivalent to stats.f.sf
2556: 
2557:     return F_onewayResult(f, prob)
2558: 
2559: 
2560: FriedmanchisquareResult = namedtuple('FriedmanchisquareResult',
2561:                                      ('statistic', 'pvalue'))
2562: 
2563: 
2564: def friedmanchisquare(*args):
2565:     '''Friedman Chi-Square is a non-parametric, one-way within-subjects ANOVA.
2566:     This function calculates the Friedman Chi-square test for repeated measures
2567:     and returns the result, along with the associated probability value.
2568: 
2569:     Each input is considered a given group. Ideally, the number of treatments
2570:     among each group should be equal. If this is not the case, only the first
2571:     n treatments are taken into account, where n is the number of treatments
2572:     of the smallest group.
2573:     If a group has some missing values, the corresponding treatments are masked
2574:     in the other groups.
2575:     The test statistic is corrected for ties.
2576: 
2577:     Masked values in one group are propagated to the other groups.
2578: 
2579:     Returns
2580:     -------
2581:     statistic : float
2582:         the test statistic.
2583:     pvalue : float
2584:         the associated p-value.
2585: 
2586:     '''
2587:     data = argstoarray(*args).astype(float)
2588:     k = len(data)
2589:     if k < 3:
2590:         raise ValueError("Less than 3 groups (%i): " % k +
2591:                          "the Friedman test is NOT appropriate.")
2592: 
2593:     ranked = ma.masked_values(rankdata(data, axis=0), 0)
2594:     if ranked._mask is not nomask:
2595:         ranked = ma.mask_cols(ranked)
2596:         ranked = ranked.compressed().reshape(k,-1).view(ndarray)
2597:     else:
2598:         ranked = ranked._data
2599:     (k,n) = ranked.shape
2600:     # Ties correction
2601:     repeats = [find_repeats(row) for row in ranked.T]
2602:     ties = np.array([y for x, y in repeats if x.size > 0])
2603:     tie_correction = 1 - (ties**3-ties).sum()/float(n*(k**3-k))
2604: 
2605:     ssbg = np.sum((ranked.sum(-1) - n*(k+1)/2.)**2)
2606:     chisq = ssbg * 12./(n*k*(k+1)) * 1./tie_correction
2607: 
2608:     return FriedmanchisquareResult(chisq,
2609:                                    distributions.chi2.sf(chisq, k-1))
2610: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_571539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4, (-1)), 'str', '\nAn extension of scipy.stats.stats to support masked arrays\n\n')

# Assigning a List to a Name (line 14):

# Assigning a List to a Name (line 14):
__all__ = ['argstoarray', 'count_tied_groups', 'describe', 'f_oneway', 'find_repeats', 'friedmanchisquare', 'kendalltau', 'kendalltau_seasonal', 'kruskal', 'kruskalwallis', 'ks_twosamp', 'ks_2samp', 'kurtosis', 'kurtosistest', 'linregress', 'mannwhitneyu', 'meppf', 'mode', 'moment', 'mquantiles', 'msign', 'normaltest', 'obrientransform', 'pearsonr', 'plotting_positions', 'pointbiserialr', 'rankdata', 'scoreatpercentile', 'sem', 'sen_seasonal_slopes', 'skew', 'skewtest', 'spearmanr', 'theilslopes', 'tmax', 'tmean', 'tmin', 'trim', 'trimboth', 'trimtail', 'trima', 'trimr', 'trimmed_mean', 'trimmed_std', 'trimmed_stde', 'trimmed_var', 'tsem', 'ttest_1samp', 'ttest_onesamp', 'ttest_ind', 'ttest_rel', 'tvar', 'variation', 'winsorize']
module_type_store.set_exportable_members(['argstoarray', 'count_tied_groups', 'describe', 'f_oneway', 'find_repeats', 'friedmanchisquare', 'kendalltau', 'kendalltau_seasonal', 'kruskal', 'kruskalwallis', 'ks_twosamp', 'ks_2samp', 'kurtosis', 'kurtosistest', 'linregress', 'mannwhitneyu', 'meppf', 'mode', 'moment', 'mquantiles', 'msign', 'normaltest', 'obrientransform', 'pearsonr', 'plotting_positions', 'pointbiserialr', 'rankdata', 'scoreatpercentile', 'sem', 'sen_seasonal_slopes', 'skew', 'skewtest', 'spearmanr', 'theilslopes', 'tmax', 'tmean', 'tmin', 'trim', 'trimboth', 'trimtail', 'trima', 'trimr', 'trimmed_mean', 'trimmed_std', 'trimmed_stde', 'trimmed_var', 'tsem', 'ttest_1samp', 'ttest_onesamp', 'ttest_ind', 'ttest_rel', 'tvar', 'variation', 'winsorize'])

# Obtaining an instance of the builtin type 'list' (line 14)
list_571540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 14)
# Adding element type (line 14)
str_571541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 11), 'str', 'argstoarray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571541)
# Adding element type (line 14)
str_571542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, 11), 'str', 'count_tied_groups')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571542)
# Adding element type (line 14)
str_571543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 11), 'str', 'describe')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571543)
# Adding element type (line 14)
str_571544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 11), 'str', 'f_oneway')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571544)
# Adding element type (line 14)
str_571545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 23), 'str', 'find_repeats')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571545)
# Adding element type (line 14)
str_571546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 38), 'str', 'friedmanchisquare')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571546)
# Adding element type (line 14)
str_571547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 18, 11), 'str', 'kendalltau')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571547)
# Adding element type (line 14)
str_571548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 18, 24), 'str', 'kendalltau_seasonal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571548)
# Adding element type (line 14)
str_571549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 18, 46), 'str', 'kruskal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571549)
# Adding element type (line 14)
str_571550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 18, 56), 'str', 'kruskalwallis')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571550)
# Adding element type (line 14)
str_571551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 11), 'str', 'ks_twosamp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571551)
# Adding element type (line 14)
str_571552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 24), 'str', 'ks_2samp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571552)
# Adding element type (line 14)
str_571553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 35), 'str', 'kurtosis')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571553)
# Adding element type (line 14)
str_571554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 46), 'str', 'kurtosistest')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571554)
# Adding element type (line 14)
str_571555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 20, 11), 'str', 'linregress')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571555)
# Adding element type (line 14)
str_571556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 11), 'str', 'mannwhitneyu')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571556)
# Adding element type (line 14)
str_571557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 27), 'str', 'meppf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571557)
# Adding element type (line 14)
str_571558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 35), 'str', 'mode')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571558)
# Adding element type (line 14)
str_571559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 42), 'str', 'moment')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571559)
# Adding element type (line 14)
str_571560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 51), 'str', 'mquantiles')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571560)
# Adding element type (line 14)
str_571561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 64), 'str', 'msign')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571561)
# Adding element type (line 14)
str_571562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 11), 'str', 'normaltest')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571562)
# Adding element type (line 14)
str_571563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 11), 'str', 'obrientransform')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571563)
# Adding element type (line 14)
str_571564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 11), 'str', 'pearsonr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571564)
# Adding element type (line 14)
str_571565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 22), 'str', 'plotting_positions')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571565)
# Adding element type (line 14)
str_571566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 43), 'str', 'pointbiserialr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571566)
# Adding element type (line 14)
str_571567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 11), 'str', 'rankdata')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571567)
# Adding element type (line 14)
str_571568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 11), 'str', 'scoreatpercentile')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571568)
# Adding element type (line 14)
str_571569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 31), 'str', 'sem')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571569)
# Adding element type (line 14)
str_571570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 11), 'str', 'sen_seasonal_slopes')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571570)
# Adding element type (line 14)
str_571571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 33), 'str', 'skew')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571571)
# Adding element type (line 14)
str_571572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 40), 'str', 'skewtest')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571572)
# Adding element type (line 14)
str_571573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 51), 'str', 'spearmanr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571573)
# Adding element type (line 14)
str_571574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 11), 'str', 'theilslopes')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571574)
# Adding element type (line 14)
str_571575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 25), 'str', 'tmax')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571575)
# Adding element type (line 14)
str_571576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 32), 'str', 'tmean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571576)
# Adding element type (line 14)
str_571577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 40), 'str', 'tmin')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571577)
# Adding element type (line 14)
str_571578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 47), 'str', 'trim')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571578)
# Adding element type (line 14)
str_571579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 54), 'str', 'trimboth')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571579)
# Adding element type (line 14)
str_571580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 11), 'str', 'trimtail')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571580)
# Adding element type (line 14)
str_571581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 22), 'str', 'trima')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571581)
# Adding element type (line 14)
str_571582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 30), 'str', 'trimr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571582)
# Adding element type (line 14)
str_571583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 38), 'str', 'trimmed_mean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571583)
# Adding element type (line 14)
str_571584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 53), 'str', 'trimmed_std')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571584)
# Adding element type (line 14)
str_571585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 11), 'str', 'trimmed_stde')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571585)
# Adding element type (line 14)
str_571586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 26), 'str', 'trimmed_var')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571586)
# Adding element type (line 14)
str_571587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 40), 'str', 'tsem')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571587)
# Adding element type (line 14)
str_571588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 47), 'str', 'ttest_1samp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571588)
# Adding element type (line 14)
str_571589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 61), 'str', 'ttest_onesamp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571589)
# Adding element type (line 14)
str_571590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 11), 'str', 'ttest_ind')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571590)
# Adding element type (line 14)
str_571591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 23), 'str', 'ttest_rel')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571591)
# Adding element type (line 14)
str_571592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 35), 'str', 'tvar')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571592)
# Adding element type (line 14)
str_571593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 11), 'str', 'variation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571593)
# Adding element type (line 14)
str_571594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 11), 'str', 'winsorize')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_571540, str_571594)

# Assigning a type to the variable '__all__' (line 14)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), '__all__', list_571540)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 36, 0))

# 'import numpy' statement (line 36)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_571595 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'numpy')

if (type(import_571595) is not StypyTypeError):

    if (import_571595 != 'pyd_module'):
        __import__(import_571595)
        sys_modules_571596 = sys.modules[import_571595]
        import_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'np', sys_modules_571596.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 36)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'numpy', import_571595)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 37, 0))

# 'from numpy import ndarray' statement (line 37)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_571597 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'numpy')

if (type(import_571597) is not StypyTypeError):

    if (import_571597 != 'pyd_module'):
        __import__(import_571597)
        sys_modules_571598 = sys.modules[import_571597]
        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'numpy', sys_modules_571598.module_type_store, module_type_store, ['ndarray'])
        nest_module(stypy.reporting.localization.Localization(__file__, 37, 0), __file__, sys_modules_571598, sys_modules_571598.module_type_store, module_type_store)
    else:
        from numpy import ndarray

        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'numpy', None, module_type_store, ['ndarray'], [ndarray])

else:
    # Assigning a type to the variable 'numpy' (line 37)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'numpy', import_571597)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'import numpy.ma' statement (line 38)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_571599 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy.ma')

if (type(import_571599) is not StypyTypeError):

    if (import_571599 != 'pyd_module'):
        __import__(import_571599)
        sys_modules_571600 = sys.modules[import_571599]
        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'ma', sys_modules_571600.module_type_store, module_type_store)
    else:
        import numpy.ma as ma

        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'ma', numpy.ma, module_type_store)

else:
    # Assigning a type to the variable 'numpy.ma' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy.ma', import_571599)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 0))

# 'from numpy.ma import masked, nomask' statement (line 39)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_571601 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy.ma')

if (type(import_571601) is not StypyTypeError):

    if (import_571601 != 'pyd_module'):
        __import__(import_571601)
        sys_modules_571602 = sys.modules[import_571601]
        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy.ma', sys_modules_571602.module_type_store, module_type_store, ['masked', 'nomask'])
        nest_module(stypy.reporting.localization.Localization(__file__, 39, 0), __file__, sys_modules_571602, sys_modules_571602.module_type_store, module_type_store)
    else:
        from numpy.ma import masked, nomask

        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy.ma', None, module_type_store, ['masked', 'nomask'], [masked, nomask])

else:
    # Assigning a type to the variable 'numpy.ma' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy.ma', import_571601)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 41, 0))

# 'from scipy._lib.six import iteritems' statement (line 41)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_571603 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'scipy._lib.six')

if (type(import_571603) is not StypyTypeError):

    if (import_571603 != 'pyd_module'):
        __import__(import_571603)
        sys_modules_571604 = sys.modules[import_571603]
        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'scipy._lib.six', sys_modules_571604.module_type_store, module_type_store, ['iteritems'])
        nest_module(stypy.reporting.localization.Localization(__file__, 41, 0), __file__, sys_modules_571604, sys_modules_571604.module_type_store, module_type_store)
    else:
        from scipy._lib.six import iteritems

        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'scipy._lib.six', None, module_type_store, ['iteritems'], [iteritems])

else:
    # Assigning a type to the variable 'scipy._lib.six' (line 41)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'scipy._lib.six', import_571603)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 43, 0))

# 'import itertools' statement (line 43)
import itertools

import_module(stypy.reporting.localization.Localization(__file__, 43, 0), 'itertools', itertools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 44, 0))

# 'import warnings' statement (line 44)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 45, 0))

# 'from collections import namedtuple' statement (line 45)
try:
    from collections import namedtuple

except:
    namedtuple = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 45, 0), 'collections', None, module_type_store, ['namedtuple'], [namedtuple])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 47, 0))

# 'from scipy.stats import distributions' statement (line 47)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_571605 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'scipy.stats')

if (type(import_571605) is not StypyTypeError):

    if (import_571605 != 'pyd_module'):
        __import__(import_571605)
        sys_modules_571606 = sys.modules[import_571605]
        import_from_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'scipy.stats', sys_modules_571606.module_type_store, module_type_store, ['distributions'])
        nest_module(stypy.reporting.localization.Localization(__file__, 47, 0), __file__, sys_modules_571606, sys_modules_571606.module_type_store, module_type_store)
    else:
        from scipy.stats import distributions

        import_from_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'scipy.stats', None, module_type_store, ['distributions'], [distributions])

else:
    # Assigning a type to the variable 'scipy.stats' (line 47)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 0), 'scipy.stats', import_571605)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 48, 0))

# 'import scipy.special' statement (line 48)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_571607 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 48, 0), 'scipy.special')

if (type(import_571607) is not StypyTypeError):

    if (import_571607 != 'pyd_module'):
        __import__(import_571607)
        sys_modules_571608 = sys.modules[import_571607]
        import_module(stypy.reporting.localization.Localization(__file__, 48, 0), 'special', sys_modules_571608.module_type_store, module_type_store)
    else:
        import scipy.special as special

        import_module(stypy.reporting.localization.Localization(__file__, 48, 0), 'special', scipy.special, module_type_store)

else:
    # Assigning a type to the variable 'scipy.special' (line 48)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 0), 'scipy.special', import_571607)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 49, 0))

# 'from scipy.stats._stats_mstats_common import _find_repeats, stats_linregress, stats_theilslopes' statement (line 49)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_571609 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'scipy.stats._stats_mstats_common')

if (type(import_571609) is not StypyTypeError):

    if (import_571609 != 'pyd_module'):
        __import__(import_571609)
        sys_modules_571610 = sys.modules[import_571609]
        import_from_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'scipy.stats._stats_mstats_common', sys_modules_571610.module_type_store, module_type_store, ['_find_repeats', 'linregress', 'theilslopes'])
        nest_module(stypy.reporting.localization.Localization(__file__, 49, 0), __file__, sys_modules_571610, sys_modules_571610.module_type_store, module_type_store)
    else:
        from scipy.stats._stats_mstats_common import _find_repeats, linregress as stats_linregress, theilslopes as stats_theilslopes

        import_from_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'scipy.stats._stats_mstats_common', None, module_type_store, ['_find_repeats', 'linregress', 'theilslopes'], [_find_repeats, stats_linregress, stats_theilslopes])

else:
    # Assigning a type to the variable 'scipy.stats._stats_mstats_common' (line 49)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 0), 'scipy.stats._stats_mstats_common', import_571609)

# Adding an alias
module_type_store.add_alias('stats_theilslopes', 'theilslopes')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')


# Assigning a Str to a Name (line 56):

# Assigning a Str to a Name (line 56):
str_571611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, (-1)), 'str', '\n\n    Notes\n    -----\n    Missing values are considered pair-wise: if a value is missing in x,\n    the corresponding value in y is masked.\n    ')
# Assigning a type to the variable 'genmissingvaldoc' (line 56)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 0), 'genmissingvaldoc', str_571611)

@norecursion
def _chk_asarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_chk_asarray'
    module_type_store = module_type_store.open_function_context('_chk_asarray', 65, 0, False)
    
    # Passed parameters checking function
    _chk_asarray.stypy_localization = localization
    _chk_asarray.stypy_type_of_self = None
    _chk_asarray.stypy_type_store = module_type_store
    _chk_asarray.stypy_function_name = '_chk_asarray'
    _chk_asarray.stypy_param_names_list = ['a', 'axis']
    _chk_asarray.stypy_varargs_param_name = None
    _chk_asarray.stypy_kwargs_param_name = None
    _chk_asarray.stypy_call_defaults = defaults
    _chk_asarray.stypy_call_varargs = varargs
    _chk_asarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_chk_asarray', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_chk_asarray', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_chk_asarray(...)' code ##################

    
    # Assigning a Call to a Name (line 67):
    
    # Assigning a Call to a Name (line 67):
    
    # Call to asanyarray(...): (line 67)
    # Processing the call arguments (line 67)
    # Getting the type of 'a' (line 67)
    a_571614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 22), 'a', False)
    # Processing the call keyword arguments (line 67)
    kwargs_571615 = {}
    # Getting the type of 'ma' (line 67)
    ma_571612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 8), 'ma', False)
    # Obtaining the member 'asanyarray' of a type (line 67)
    asanyarray_571613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 67, 8), ma_571612, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 67)
    asanyarray_call_result_571616 = invoke(stypy.reporting.localization.Localization(__file__, 67, 8), asanyarray_571613, *[a_571614], **kwargs_571615)
    
    # Assigning a type to the variable 'a' (line 67)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 4), 'a', asanyarray_call_result_571616)
    
    # Type idiom detected: calculating its left and rigth part (line 68)
    # Getting the type of 'axis' (line 68)
    axis_571617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 7), 'axis')
    # Getting the type of 'None' (line 68)
    None_571618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 15), 'None')
    
    (may_be_571619, more_types_in_union_571620) = may_be_none(axis_571617, None_571618)

    if may_be_571619:

        if more_types_in_union_571620:
            # Runtime conditional SSA (line 68)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 69):
        
        # Assigning a Call to a Name (line 69):
        
        # Call to ravel(...): (line 69)
        # Processing the call arguments (line 69)
        # Getting the type of 'a' (line 69)
        a_571623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 21), 'a', False)
        # Processing the call keyword arguments (line 69)
        kwargs_571624 = {}
        # Getting the type of 'ma' (line 69)
        ma_571621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 12), 'ma', False)
        # Obtaining the member 'ravel' of a type (line 69)
        ravel_571622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 69, 12), ma_571621, 'ravel')
        # Calling ravel(args, kwargs) (line 69)
        ravel_call_result_571625 = invoke(stypy.reporting.localization.Localization(__file__, 69, 12), ravel_571622, *[a_571623], **kwargs_571624)
        
        # Assigning a type to the variable 'a' (line 69)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 8), 'a', ravel_call_result_571625)
        
        # Assigning a Num to a Name (line 70):
        
        # Assigning a Num to a Name (line 70):
        int_571626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 18), 'int')
        # Assigning a type to the variable 'outaxis' (line 70)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 8), 'outaxis', int_571626)

        if more_types_in_union_571620:
            # Runtime conditional SSA for else branch (line 68)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_571619) or more_types_in_union_571620):
        
        # Assigning a Name to a Name (line 72):
        
        # Assigning a Name to a Name (line 72):
        # Getting the type of 'axis' (line 72)
        axis_571627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 18), 'axis')
        # Assigning a type to the variable 'outaxis' (line 72)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 72, 8), 'outaxis', axis_571627)

        if (may_be_571619 and more_types_in_union_571620):
            # SSA join for if statement (line 68)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 73)
    tuple_571628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 73)
    # Adding element type (line 73)
    # Getting the type of 'a' (line 73)
    a_571629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 11), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 73, 11), tuple_571628, a_571629)
    # Adding element type (line 73)
    # Getting the type of 'outaxis' (line 73)
    outaxis_571630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 14), 'outaxis')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 73, 11), tuple_571628, outaxis_571630)
    
    # Assigning a type to the variable 'stypy_return_type' (line 73)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 73, 4), 'stypy_return_type', tuple_571628)
    
    # ################# End of '_chk_asarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_chk_asarray' in the type store
    # Getting the type of 'stypy_return_type' (line 65)
    stypy_return_type_571631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_571631)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_chk_asarray'
    return stypy_return_type_571631

# Assigning a type to the variable '_chk_asarray' (line 65)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 65, 0), '_chk_asarray', _chk_asarray)

@norecursion
def _chk2_asarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_chk2_asarray'
    module_type_store = module_type_store.open_function_context('_chk2_asarray', 76, 0, False)
    
    # Passed parameters checking function
    _chk2_asarray.stypy_localization = localization
    _chk2_asarray.stypy_type_of_self = None
    _chk2_asarray.stypy_type_store = module_type_store
    _chk2_asarray.stypy_function_name = '_chk2_asarray'
    _chk2_asarray.stypy_param_names_list = ['a', 'b', 'axis']
    _chk2_asarray.stypy_varargs_param_name = None
    _chk2_asarray.stypy_kwargs_param_name = None
    _chk2_asarray.stypy_call_defaults = defaults
    _chk2_asarray.stypy_call_varargs = varargs
    _chk2_asarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_chk2_asarray', ['a', 'b', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_chk2_asarray', localization, ['a', 'b', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_chk2_asarray(...)' code ##################

    
    # Assigning a Call to a Name (line 77):
    
    # Assigning a Call to a Name (line 77):
    
    # Call to asanyarray(...): (line 77)
    # Processing the call arguments (line 77)
    # Getting the type of 'a' (line 77)
    a_571634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 22), 'a', False)
    # Processing the call keyword arguments (line 77)
    kwargs_571635 = {}
    # Getting the type of 'ma' (line 77)
    ma_571632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 8), 'ma', False)
    # Obtaining the member 'asanyarray' of a type (line 77)
    asanyarray_571633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 77, 8), ma_571632, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 77)
    asanyarray_call_result_571636 = invoke(stypy.reporting.localization.Localization(__file__, 77, 8), asanyarray_571633, *[a_571634], **kwargs_571635)
    
    # Assigning a type to the variable 'a' (line 77)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 4), 'a', asanyarray_call_result_571636)
    
    # Assigning a Call to a Name (line 78):
    
    # Assigning a Call to a Name (line 78):
    
    # Call to asanyarray(...): (line 78)
    # Processing the call arguments (line 78)
    # Getting the type of 'b' (line 78)
    b_571639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 22), 'b', False)
    # Processing the call keyword arguments (line 78)
    kwargs_571640 = {}
    # Getting the type of 'ma' (line 78)
    ma_571637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 8), 'ma', False)
    # Obtaining the member 'asanyarray' of a type (line 78)
    asanyarray_571638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 78, 8), ma_571637, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 78)
    asanyarray_call_result_571641 = invoke(stypy.reporting.localization.Localization(__file__, 78, 8), asanyarray_571638, *[b_571639], **kwargs_571640)
    
    # Assigning a type to the variable 'b' (line 78)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 4), 'b', asanyarray_call_result_571641)
    
    # Type idiom detected: calculating its left and rigth part (line 79)
    # Getting the type of 'axis' (line 79)
    axis_571642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 7), 'axis')
    # Getting the type of 'None' (line 79)
    None_571643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 15), 'None')
    
    (may_be_571644, more_types_in_union_571645) = may_be_none(axis_571642, None_571643)

    if may_be_571644:

        if more_types_in_union_571645:
            # Runtime conditional SSA (line 79)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 80):
        
        # Assigning a Call to a Name (line 80):
        
        # Call to ravel(...): (line 80)
        # Processing the call arguments (line 80)
        # Getting the type of 'a' (line 80)
        a_571648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 21), 'a', False)
        # Processing the call keyword arguments (line 80)
        kwargs_571649 = {}
        # Getting the type of 'ma' (line 80)
        ma_571646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 12), 'ma', False)
        # Obtaining the member 'ravel' of a type (line 80)
        ravel_571647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 12), ma_571646, 'ravel')
        # Calling ravel(args, kwargs) (line 80)
        ravel_call_result_571650 = invoke(stypy.reporting.localization.Localization(__file__, 80, 12), ravel_571647, *[a_571648], **kwargs_571649)
        
        # Assigning a type to the variable 'a' (line 80)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 8), 'a', ravel_call_result_571650)
        
        # Assigning a Call to a Name (line 81):
        
        # Assigning a Call to a Name (line 81):
        
        # Call to ravel(...): (line 81)
        # Processing the call arguments (line 81)
        # Getting the type of 'b' (line 81)
        b_571653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 21), 'b', False)
        # Processing the call keyword arguments (line 81)
        kwargs_571654 = {}
        # Getting the type of 'ma' (line 81)
        ma_571651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 12), 'ma', False)
        # Obtaining the member 'ravel' of a type (line 81)
        ravel_571652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 81, 12), ma_571651, 'ravel')
        # Calling ravel(args, kwargs) (line 81)
        ravel_call_result_571655 = invoke(stypy.reporting.localization.Localization(__file__, 81, 12), ravel_571652, *[b_571653], **kwargs_571654)
        
        # Assigning a type to the variable 'b' (line 81)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 81, 8), 'b', ravel_call_result_571655)
        
        # Assigning a Num to a Name (line 82):
        
        # Assigning a Num to a Name (line 82):
        int_571656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, 18), 'int')
        # Assigning a type to the variable 'outaxis' (line 82)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 8), 'outaxis', int_571656)

        if more_types_in_union_571645:
            # Runtime conditional SSA for else branch (line 79)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_571644) or more_types_in_union_571645):
        
        # Assigning a Name to a Name (line 84):
        
        # Assigning a Name to a Name (line 84):
        # Getting the type of 'axis' (line 84)
        axis_571657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 18), 'axis')
        # Assigning a type to the variable 'outaxis' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 8), 'outaxis', axis_571657)

        if (may_be_571644 and more_types_in_union_571645):
            # SSA join for if statement (line 79)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 85)
    tuple_571658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 85)
    # Adding element type (line 85)
    # Getting the type of 'a' (line 85)
    a_571659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 11), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 11), tuple_571658, a_571659)
    # Adding element type (line 85)
    # Getting the type of 'b' (line 85)
    b_571660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 14), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 11), tuple_571658, b_571660)
    # Adding element type (line 85)
    # Getting the type of 'outaxis' (line 85)
    outaxis_571661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 17), 'outaxis')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 11), tuple_571658, outaxis_571661)
    
    # Assigning a type to the variable 'stypy_return_type' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 4), 'stypy_return_type', tuple_571658)
    
    # ################# End of '_chk2_asarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_chk2_asarray' in the type store
    # Getting the type of 'stypy_return_type' (line 76)
    stypy_return_type_571662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_571662)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_chk2_asarray'
    return stypy_return_type_571662

# Assigning a type to the variable '_chk2_asarray' (line 76)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 0), '_chk2_asarray', _chk2_asarray)

@norecursion
def _chk_size(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_chk_size'
    module_type_store = module_type_store.open_function_context('_chk_size', 88, 0, False)
    
    # Passed parameters checking function
    _chk_size.stypy_localization = localization
    _chk_size.stypy_type_of_self = None
    _chk_size.stypy_type_store = module_type_store
    _chk_size.stypy_function_name = '_chk_size'
    _chk_size.stypy_param_names_list = ['a', 'b']
    _chk_size.stypy_varargs_param_name = None
    _chk_size.stypy_kwargs_param_name = None
    _chk_size.stypy_call_defaults = defaults
    _chk_size.stypy_call_varargs = varargs
    _chk_size.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_chk_size', ['a', 'b'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_chk_size', localization, ['a', 'b'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_chk_size(...)' code ##################

    
    # Assigning a Call to a Name (line 89):
    
    # Assigning a Call to a Name (line 89):
    
    # Call to asanyarray(...): (line 89)
    # Processing the call arguments (line 89)
    # Getting the type of 'a' (line 89)
    a_571665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 22), 'a', False)
    # Processing the call keyword arguments (line 89)
    kwargs_571666 = {}
    # Getting the type of 'ma' (line 89)
    ma_571663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 8), 'ma', False)
    # Obtaining the member 'asanyarray' of a type (line 89)
    asanyarray_571664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 89, 8), ma_571663, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 89)
    asanyarray_call_result_571667 = invoke(stypy.reporting.localization.Localization(__file__, 89, 8), asanyarray_571664, *[a_571665], **kwargs_571666)
    
    # Assigning a type to the variable 'a' (line 89)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 4), 'a', asanyarray_call_result_571667)
    
    # Assigning a Call to a Name (line 90):
    
    # Assigning a Call to a Name (line 90):
    
    # Call to asanyarray(...): (line 90)
    # Processing the call arguments (line 90)
    # Getting the type of 'b' (line 90)
    b_571670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 22), 'b', False)
    # Processing the call keyword arguments (line 90)
    kwargs_571671 = {}
    # Getting the type of 'ma' (line 90)
    ma_571668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 8), 'ma', False)
    # Obtaining the member 'asanyarray' of a type (line 90)
    asanyarray_571669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 90, 8), ma_571668, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 90)
    asanyarray_call_result_571672 = invoke(stypy.reporting.localization.Localization(__file__, 90, 8), asanyarray_571669, *[b_571670], **kwargs_571671)
    
    # Assigning a type to the variable 'b' (line 90)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 4), 'b', asanyarray_call_result_571672)
    
    # Assigning a Tuple to a Tuple (line 91):
    
    # Assigning a Attribute to a Name (line 91):
    # Getting the type of 'a' (line 91)
    a_571673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 16), 'a')
    # Obtaining the member 'size' of a type (line 91)
    size_571674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 16), a_571673, 'size')
    # Assigning a type to the variable 'tuple_assignment_571424' (line 91)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 4), 'tuple_assignment_571424', size_571674)
    
    # Assigning a Attribute to a Name (line 91):
    # Getting the type of 'b' (line 91)
    b_571675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 24), 'b')
    # Obtaining the member 'size' of a type (line 91)
    size_571676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 24), b_571675, 'size')
    # Assigning a type to the variable 'tuple_assignment_571425' (line 91)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 4), 'tuple_assignment_571425', size_571676)
    
    # Assigning a Name to a Name (line 91):
    # Getting the type of 'tuple_assignment_571424' (line 91)
    tuple_assignment_571424_571677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 4), 'tuple_assignment_571424')
    # Assigning a type to the variable 'na' (line 91)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 5), 'na', tuple_assignment_571424_571677)
    
    # Assigning a Name to a Name (line 91):
    # Getting the type of 'tuple_assignment_571425' (line 91)
    tuple_assignment_571425_571678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 4), 'tuple_assignment_571425')
    # Assigning a type to the variable 'nb' (line 91)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 9), 'nb', tuple_assignment_571425_571678)
    
    
    # Getting the type of 'na' (line 92)
    na_571679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 7), 'na')
    # Getting the type of 'nb' (line 92)
    nb_571680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 13), 'nb')
    # Applying the binary operator '!=' (line 92)
    result_ne_571681 = python_operator(stypy.reporting.localization.Localization(__file__, 92, 7), '!=', na_571679, nb_571680)
    
    # Testing the type of an if condition (line 92)
    if_condition_571682 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 92, 4), result_ne_571681)
    # Assigning a type to the variable 'if_condition_571682' (line 92)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 4), 'if_condition_571682', if_condition_571682)
    # SSA begins for if statement (line 92)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 93)
    # Processing the call arguments (line 93)
    str_571684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 25), 'str', 'The size of the input array should match! (%s <> %s)')
    
    # Obtaining an instance of the builtin type 'tuple' (line 94)
    tuple_571685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 94)
    # Adding element type (line 94)
    # Getting the type of 'na' (line 94)
    na_571686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 42), 'na', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 94, 42), tuple_571685, na_571686)
    # Adding element type (line 94)
    # Getting the type of 'nb' (line 94)
    nb_571687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 46), 'nb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 94, 42), tuple_571685, nb_571687)
    
    # Applying the binary operator '%' (line 93)
    result_mod_571688 = python_operator(stypy.reporting.localization.Localization(__file__, 93, 25), '%', str_571684, tuple_571685)
    
    # Processing the call keyword arguments (line 93)
    kwargs_571689 = {}
    # Getting the type of 'ValueError' (line 93)
    ValueError_571683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 93)
    ValueError_call_result_571690 = invoke(stypy.reporting.localization.Localization(__file__, 93, 14), ValueError_571683, *[result_mod_571688], **kwargs_571689)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 93, 8), ValueError_call_result_571690, 'raise parameter', BaseException)
    # SSA join for if statement (line 92)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 95)
    tuple_571691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 95)
    # Adding element type (line 95)
    # Getting the type of 'a' (line 95)
    a_571692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 12), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 95, 12), tuple_571691, a_571692)
    # Adding element type (line 95)
    # Getting the type of 'b' (line 95)
    b_571693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 15), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 95, 12), tuple_571691, b_571693)
    # Adding element type (line 95)
    # Getting the type of 'na' (line 95)
    na_571694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 18), 'na')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 95, 12), tuple_571691, na_571694)
    
    # Assigning a type to the variable 'stypy_return_type' (line 95)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 4), 'stypy_return_type', tuple_571691)
    
    # ################# End of '_chk_size(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_chk_size' in the type store
    # Getting the type of 'stypy_return_type' (line 88)
    stypy_return_type_571695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_571695)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_chk_size'
    return stypy_return_type_571695

# Assigning a type to the variable '_chk_size' (line 88)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 0), '_chk_size', _chk_size)

@norecursion
def argstoarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'argstoarray'
    module_type_store = module_type_store.open_function_context('argstoarray', 98, 0, False)
    
    # Passed parameters checking function
    argstoarray.stypy_localization = localization
    argstoarray.stypy_type_of_self = None
    argstoarray.stypy_type_store = module_type_store
    argstoarray.stypy_function_name = 'argstoarray'
    argstoarray.stypy_param_names_list = []
    argstoarray.stypy_varargs_param_name = 'args'
    argstoarray.stypy_kwargs_param_name = None
    argstoarray.stypy_call_defaults = defaults
    argstoarray.stypy_call_varargs = varargs
    argstoarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'argstoarray', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'argstoarray', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'argstoarray(...)' code ##################

    str_571696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, (-1)), 'str', '\n    Constructs a 2D array from a group of sequences.\n\n    Sequences are filled with missing values to match the length of the longest\n    sequence.\n\n    Parameters\n    ----------\n    args : sequences\n        Group of sequences.\n\n    Returns\n    -------\n    argstoarray : MaskedArray\n        A ( `m` x `n` ) masked array, where `m` is the number of arguments and\n        `n` the length of the longest argument.\n\n    Notes\n    -----\n    `numpy.ma.row_stack` has identical behavior, but is called with a sequence\n    of sequences.\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 122)
    # Processing the call arguments (line 122)
    # Getting the type of 'args' (line 122)
    args_571698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 11), 'args', False)
    # Processing the call keyword arguments (line 122)
    kwargs_571699 = {}
    # Getting the type of 'len' (line 122)
    len_571697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 7), 'len', False)
    # Calling len(args, kwargs) (line 122)
    len_call_result_571700 = invoke(stypy.reporting.localization.Localization(__file__, 122, 7), len_571697, *[args_571698], **kwargs_571699)
    
    int_571701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 20), 'int')
    # Applying the binary operator '==' (line 122)
    result_eq_571702 = python_operator(stypy.reporting.localization.Localization(__file__, 122, 7), '==', len_call_result_571700, int_571701)
    
    
    
    # Call to isinstance(...): (line 122)
    # Processing the call arguments (line 122)
    
    # Obtaining the type of the subscript
    int_571704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 46), 'int')
    # Getting the type of 'args' (line 122)
    args_571705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 41), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 122)
    getitem___571706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 122, 41), args_571705, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 122)
    subscript_call_result_571707 = invoke(stypy.reporting.localization.Localization(__file__, 122, 41), getitem___571706, int_571704)
    
    # Getting the type of 'ndarray' (line 122)
    ndarray_571708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 50), 'ndarray', False)
    # Processing the call keyword arguments (line 122)
    kwargs_571709 = {}
    # Getting the type of 'isinstance' (line 122)
    isinstance_571703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 30), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 122)
    isinstance_call_result_571710 = invoke(stypy.reporting.localization.Localization(__file__, 122, 30), isinstance_571703, *[subscript_call_result_571707, ndarray_571708], **kwargs_571709)
    
    # Applying the 'not' unary operator (line 122)
    result_not__571711 = python_operator(stypy.reporting.localization.Localization(__file__, 122, 26), 'not', isinstance_call_result_571710)
    
    # Applying the binary operator 'and' (line 122)
    result_and_keyword_571712 = python_operator(stypy.reporting.localization.Localization(__file__, 122, 7), 'and', result_eq_571702, result_not__571711)
    
    # Testing the type of an if condition (line 122)
    if_condition_571713 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 122, 4), result_and_keyword_571712)
    # Assigning a type to the variable 'if_condition_571713' (line 122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 4), 'if_condition_571713', if_condition_571713)
    # SSA begins for if statement (line 122)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 123):
    
    # Assigning a Call to a Name (line 123):
    
    # Call to asarray(...): (line 123)
    # Processing the call arguments (line 123)
    
    # Obtaining the type of the subscript
    int_571716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 33), 'int')
    # Getting the type of 'args' (line 123)
    args_571717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 28), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 123)
    getitem___571718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 28), args_571717, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 123)
    subscript_call_result_571719 = invoke(stypy.reporting.localization.Localization(__file__, 123, 28), getitem___571718, int_571716)
    
    # Processing the call keyword arguments (line 123)
    kwargs_571720 = {}
    # Getting the type of 'ma' (line 123)
    ma_571714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 17), 'ma', False)
    # Obtaining the member 'asarray' of a type (line 123)
    asarray_571715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 17), ma_571714, 'asarray')
    # Calling asarray(args, kwargs) (line 123)
    asarray_call_result_571721 = invoke(stypy.reporting.localization.Localization(__file__, 123, 17), asarray_571715, *[subscript_call_result_571719], **kwargs_571720)
    
    # Assigning a type to the variable 'output' (line 123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 8), 'output', asarray_call_result_571721)
    
    
    # Getting the type of 'output' (line 124)
    output_571722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 11), 'output')
    # Obtaining the member 'ndim' of a type (line 124)
    ndim_571723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 11), output_571722, 'ndim')
    int_571724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 26), 'int')
    # Applying the binary operator '!=' (line 124)
    result_ne_571725 = python_operator(stypy.reporting.localization.Localization(__file__, 124, 11), '!=', ndim_571723, int_571724)
    
    # Testing the type of an if condition (line 124)
    if_condition_571726 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 124, 8), result_ne_571725)
    # Assigning a type to the variable 'if_condition_571726' (line 124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 8), 'if_condition_571726', if_condition_571726)
    # SSA begins for if statement (line 124)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 125)
    # Processing the call arguments (line 125)
    str_571728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 29), 'str', 'The input should be 2D')
    # Processing the call keyword arguments (line 125)
    kwargs_571729 = {}
    # Getting the type of 'ValueError' (line 125)
    ValueError_571727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 125)
    ValueError_call_result_571730 = invoke(stypy.reporting.localization.Localization(__file__, 125, 18), ValueError_571727, *[str_571728], **kwargs_571729)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 125, 12), ValueError_call_result_571730, 'raise parameter', BaseException)
    # SSA join for if statement (line 124)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 122)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 127):
    
    # Assigning a Call to a Name (line 127):
    
    # Call to len(...): (line 127)
    # Processing the call arguments (line 127)
    # Getting the type of 'args' (line 127)
    args_571732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 16), 'args', False)
    # Processing the call keyword arguments (line 127)
    kwargs_571733 = {}
    # Getting the type of 'len' (line 127)
    len_571731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 12), 'len', False)
    # Calling len(args, kwargs) (line 127)
    len_call_result_571734 = invoke(stypy.reporting.localization.Localization(__file__, 127, 12), len_571731, *[args_571732], **kwargs_571733)
    
    # Assigning a type to the variable 'n' (line 127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 8), 'n', len_call_result_571734)
    
    # Assigning a Call to a Name (line 128):
    
    # Assigning a Call to a Name (line 128):
    
    # Call to max(...): (line 128)
    # Processing the call arguments (line 128)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'args' (line 128)
    args_571740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 33), 'args', False)
    comprehension_571741 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 128, 17), args_571740)
    # Assigning a type to the variable 'k' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 17), 'k', comprehension_571741)
    
    # Call to len(...): (line 128)
    # Processing the call arguments (line 128)
    # Getting the type of 'k' (line 128)
    k_571737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 21), 'k', False)
    # Processing the call keyword arguments (line 128)
    kwargs_571738 = {}
    # Getting the type of 'len' (line 128)
    len_571736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 17), 'len', False)
    # Calling len(args, kwargs) (line 128)
    len_call_result_571739 = invoke(stypy.reporting.localization.Localization(__file__, 128, 17), len_571736, *[k_571737], **kwargs_571738)
    
    list_571742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 17), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 128, 17), list_571742, len_call_result_571739)
    # Processing the call keyword arguments (line 128)
    kwargs_571743 = {}
    # Getting the type of 'max' (line 128)
    max_571735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 12), 'max', False)
    # Calling max(args, kwargs) (line 128)
    max_call_result_571744 = invoke(stypy.reporting.localization.Localization(__file__, 128, 12), max_571735, *[list_571742], **kwargs_571743)
    
    # Assigning a type to the variable 'm' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 8), 'm', max_call_result_571744)
    
    # Assigning a Call to a Name (line 129):
    
    # Assigning a Call to a Name (line 129):
    
    # Call to array(...): (line 129)
    # Processing the call arguments (line 129)
    
    # Call to empty(...): (line 129)
    # Processing the call arguments (line 129)
    
    # Obtaining an instance of the builtin type 'tuple' (line 129)
    tuple_571749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 129)
    # Adding element type (line 129)
    # Getting the type of 'n' (line 129)
    n_571750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 36), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 129, 36), tuple_571749, n_571750)
    # Adding element type (line 129)
    # Getting the type of 'm' (line 129)
    m_571751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 38), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 129, 36), tuple_571749, m_571751)
    
    # Processing the call keyword arguments (line 129)
    # Getting the type of 'float' (line 129)
    float_571752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 48), 'float', False)
    keyword_571753 = float_571752
    kwargs_571754 = {'dtype': keyword_571753}
    # Getting the type of 'np' (line 129)
    np_571747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 26), 'np', False)
    # Obtaining the member 'empty' of a type (line 129)
    empty_571748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 129, 26), np_571747, 'empty')
    # Calling empty(args, kwargs) (line 129)
    empty_call_result_571755 = invoke(stypy.reporting.localization.Localization(__file__, 129, 26), empty_571748, *[tuple_571749], **kwargs_571754)
    
    # Processing the call keyword arguments (line 129)
    # Getting the type of 'True' (line 129)
    True_571756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 61), 'True', False)
    keyword_571757 = True_571756
    kwargs_571758 = {'mask': keyword_571757}
    # Getting the type of 'ma' (line 129)
    ma_571745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 17), 'ma', False)
    # Obtaining the member 'array' of a type (line 129)
    array_571746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 129, 17), ma_571745, 'array')
    # Calling array(args, kwargs) (line 129)
    array_call_result_571759 = invoke(stypy.reporting.localization.Localization(__file__, 129, 17), array_571746, *[empty_call_result_571755], **kwargs_571758)
    
    # Assigning a type to the variable 'output' (line 129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 8), 'output', array_call_result_571759)
    
    
    # Call to enumerate(...): (line 130)
    # Processing the call arguments (line 130)
    # Getting the type of 'args' (line 130)
    args_571761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 31), 'args', False)
    # Processing the call keyword arguments (line 130)
    kwargs_571762 = {}
    # Getting the type of 'enumerate' (line 130)
    enumerate_571760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 21), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 130)
    enumerate_call_result_571763 = invoke(stypy.reporting.localization.Localization(__file__, 130, 21), enumerate_571760, *[args_571761], **kwargs_571762)
    
    # Testing the type of a for loop iterable (line 130)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 130, 8), enumerate_call_result_571763)
    # Getting the type of the for loop variable (line 130)
    for_loop_var_571764 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 130, 8), enumerate_call_result_571763)
    # Assigning a type to the variable 'k' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 130, 8), for_loop_var_571764))
    # Assigning a type to the variable 'v' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 130, 8), for_loop_var_571764))
    # SSA begins for a for statement (line 130)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Name to a Subscript (line 131):
    
    # Assigning a Name to a Subscript (line 131):
    # Getting the type of 'v' (line 131)
    v_571765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 32), 'v')
    # Getting the type of 'output' (line 131)
    output_571766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 12), 'output')
    # Getting the type of 'k' (line 131)
    k_571767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 19), 'k')
    
    # Call to len(...): (line 131)
    # Processing the call arguments (line 131)
    # Getting the type of 'v' (line 131)
    v_571769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 26), 'v', False)
    # Processing the call keyword arguments (line 131)
    kwargs_571770 = {}
    # Getting the type of 'len' (line 131)
    len_571768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 22), 'len', False)
    # Calling len(args, kwargs) (line 131)
    len_call_result_571771 = invoke(stypy.reporting.localization.Localization(__file__, 131, 22), len_571768, *[v_571769], **kwargs_571770)
    
    slice_571772 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 131, 12), None, len_call_result_571771, None)
    # Storing an element on a container (line 131)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 131, 12), output_571766, ((k_571767, slice_571772), v_571765))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 122)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 133):
    
    # Assigning a Name to a Subscript (line 133):
    # Getting the type of 'masked' (line 133)
    masked_571773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 56), 'masked')
    # Getting the type of 'output' (line 133)
    output_571774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 4), 'output')
    
    # Call to logical_not(...): (line 133)
    # Processing the call arguments (line 133)
    
    # Call to isfinite(...): (line 133)
    # Processing the call arguments (line 133)
    # Getting the type of 'output' (line 133)
    output_571779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 38), 'output', False)
    # Obtaining the member '_data' of a type (line 133)
    _data_571780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 38), output_571779, '_data')
    # Processing the call keyword arguments (line 133)
    kwargs_571781 = {}
    # Getting the type of 'np' (line 133)
    np_571777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 26), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 133)
    isfinite_571778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 26), np_571777, 'isfinite')
    # Calling isfinite(args, kwargs) (line 133)
    isfinite_call_result_571782 = invoke(stypy.reporting.localization.Localization(__file__, 133, 26), isfinite_571778, *[_data_571780], **kwargs_571781)
    
    # Processing the call keyword arguments (line 133)
    kwargs_571783 = {}
    # Getting the type of 'np' (line 133)
    np_571775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 11), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 133)
    logical_not_571776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 11), np_571775, 'logical_not')
    # Calling logical_not(args, kwargs) (line 133)
    logical_not_call_result_571784 = invoke(stypy.reporting.localization.Localization(__file__, 133, 11), logical_not_571776, *[isfinite_call_result_571782], **kwargs_571783)
    
    # Storing an element on a container (line 133)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 133, 4), output_571774, (logical_not_call_result_571784, masked_571773))
    # Getting the type of 'output' (line 134)
    output_571785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 11), 'output')
    # Assigning a type to the variable 'stypy_return_type' (line 134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 4), 'stypy_return_type', output_571785)
    
    # ################# End of 'argstoarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'argstoarray' in the type store
    # Getting the type of 'stypy_return_type' (line 98)
    stypy_return_type_571786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_571786)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'argstoarray'
    return stypy_return_type_571786

# Assigning a type to the variable 'argstoarray' (line 98)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 0), 'argstoarray', argstoarray)

@norecursion
def find_repeats(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'find_repeats'
    module_type_store = module_type_store.open_function_context('find_repeats', 137, 0, False)
    
    # Passed parameters checking function
    find_repeats.stypy_localization = localization
    find_repeats.stypy_type_of_self = None
    find_repeats.stypy_type_store = module_type_store
    find_repeats.stypy_function_name = 'find_repeats'
    find_repeats.stypy_param_names_list = ['arr']
    find_repeats.stypy_varargs_param_name = None
    find_repeats.stypy_kwargs_param_name = None
    find_repeats.stypy_call_defaults = defaults
    find_repeats.stypy_call_varargs = varargs
    find_repeats.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'find_repeats', ['arr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'find_repeats', localization, ['arr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'find_repeats(...)' code ##################

    str_571787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, (-1)), 'str', 'Find repeats in arr and return a tuple (repeats, repeat_count).\n\n    The input is cast to float64. Masked values are discarded.\n\n    Parameters\n    ----------\n    arr : sequence\n        Input array. The array is flattened if it is not 1D.\n\n    Returns\n    -------\n    repeats : ndarray\n        Array of repeated values.\n    counts : ndarray\n        Array of counts.\n\n    ')
    
    # Assigning a Call to a Name (line 157):
    
    # Assigning a Call to a Name (line 157):
    
    # Call to asarray(...): (line 157)
    # Processing the call arguments (line 157)
    
    # Call to compressed(...): (line 157)
    # Processing the call arguments (line 157)
    # Getting the type of 'arr' (line 157)
    arr_571792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 37), 'arr', False)
    # Processing the call keyword arguments (line 157)
    kwargs_571793 = {}
    # Getting the type of 'ma' (line 157)
    ma_571790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 23), 'ma', False)
    # Obtaining the member 'compressed' of a type (line 157)
    compressed_571791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 23), ma_571790, 'compressed')
    # Calling compressed(args, kwargs) (line 157)
    compressed_call_result_571794 = invoke(stypy.reporting.localization.Localization(__file__, 157, 23), compressed_571791, *[arr_571792], **kwargs_571793)
    
    # Processing the call keyword arguments (line 157)
    # Getting the type of 'np' (line 157)
    np_571795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 49), 'np', False)
    # Obtaining the member 'float64' of a type (line 157)
    float64_571796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 49), np_571795, 'float64')
    keyword_571797 = float64_571796
    kwargs_571798 = {'dtype': keyword_571797}
    # Getting the type of 'np' (line 157)
    np_571788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 157)
    asarray_571789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 12), np_571788, 'asarray')
    # Calling asarray(args, kwargs) (line 157)
    asarray_call_result_571799 = invoke(stypy.reporting.localization.Localization(__file__, 157, 12), asarray_571789, *[compressed_call_result_571794], **kwargs_571798)
    
    # Assigning a type to the variable 'compr' (line 157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 4), 'compr', asarray_call_result_571799)
    
    
    # SSA begins for try-except statement (line 158)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 159):
    
    # Assigning a Call to a Name (line 159):
    
    # Call to may_share_memory(...): (line 159)
    # Processing the call arguments (line 159)
    # Getting the type of 'compr' (line 159)
    compr_571802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 40), 'compr', False)
    # Getting the type of 'arr' (line 159)
    arr_571803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 47), 'arr', False)
    # Processing the call keyword arguments (line 159)
    kwargs_571804 = {}
    # Getting the type of 'np' (line 159)
    np_571800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 20), 'np', False)
    # Obtaining the member 'may_share_memory' of a type (line 159)
    may_share_memory_571801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 20), np_571800, 'may_share_memory')
    # Calling may_share_memory(args, kwargs) (line 159)
    may_share_memory_call_result_571805 = invoke(stypy.reporting.localization.Localization(__file__, 159, 20), may_share_memory_571801, *[compr_571802, arr_571803], **kwargs_571804)
    
    # Assigning a type to the variable 'need_copy' (line 159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'need_copy', may_share_memory_call_result_571805)
    # SSA branch for the except part of a try statement (line 158)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 158)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Name to a Name (line 163):
    
    # Assigning a Name to a Name (line 163):
    # Getting the type of 'False' (line 163)
    False_571806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 20), 'False')
    # Assigning a type to the variable 'need_copy' (line 163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'need_copy', False_571806)
    # SSA join for try-except statement (line 158)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'need_copy' (line 164)
    need_copy_571807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 7), 'need_copy')
    # Testing the type of an if condition (line 164)
    if_condition_571808 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 164, 4), need_copy_571807)
    # Assigning a type to the variable 'if_condition_571808' (line 164)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 4), 'if_condition_571808', if_condition_571808)
    # SSA begins for if statement (line 164)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 165):
    
    # Assigning a Call to a Name (line 165):
    
    # Call to copy(...): (line 165)
    # Processing the call keyword arguments (line 165)
    kwargs_571811 = {}
    # Getting the type of 'compr' (line 165)
    compr_571809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 16), 'compr', False)
    # Obtaining the member 'copy' of a type (line 165)
    copy_571810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 16), compr_571809, 'copy')
    # Calling copy(args, kwargs) (line 165)
    copy_call_result_571812 = invoke(stypy.reporting.localization.Localization(__file__, 165, 16), copy_571810, *[], **kwargs_571811)
    
    # Assigning a type to the variable 'compr' (line 165)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 8), 'compr', copy_call_result_571812)
    # SSA join for if statement (line 164)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _find_repeats(...): (line 166)
    # Processing the call arguments (line 166)
    # Getting the type of 'compr' (line 166)
    compr_571814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 25), 'compr', False)
    # Processing the call keyword arguments (line 166)
    kwargs_571815 = {}
    # Getting the type of '_find_repeats' (line 166)
    _find_repeats_571813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 11), '_find_repeats', False)
    # Calling _find_repeats(args, kwargs) (line 166)
    _find_repeats_call_result_571816 = invoke(stypy.reporting.localization.Localization(__file__, 166, 11), _find_repeats_571813, *[compr_571814], **kwargs_571815)
    
    # Assigning a type to the variable 'stypy_return_type' (line 166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 4), 'stypy_return_type', _find_repeats_call_result_571816)
    
    # ################# End of 'find_repeats(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'find_repeats' in the type store
    # Getting the type of 'stypy_return_type' (line 137)
    stypy_return_type_571817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_571817)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'find_repeats'
    return stypy_return_type_571817

# Assigning a type to the variable 'find_repeats' (line 137)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 0), 'find_repeats', find_repeats)

@norecursion
def count_tied_groups(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 169)
    False_571818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 37), 'False')
    defaults = [False_571818]
    # Create a new context for function 'count_tied_groups'
    module_type_store = module_type_store.open_function_context('count_tied_groups', 169, 0, False)
    
    # Passed parameters checking function
    count_tied_groups.stypy_localization = localization
    count_tied_groups.stypy_type_of_self = None
    count_tied_groups.stypy_type_store = module_type_store
    count_tied_groups.stypy_function_name = 'count_tied_groups'
    count_tied_groups.stypy_param_names_list = ['x', 'use_missing']
    count_tied_groups.stypy_varargs_param_name = None
    count_tied_groups.stypy_kwargs_param_name = None
    count_tied_groups.stypy_call_defaults = defaults
    count_tied_groups.stypy_call_varargs = varargs
    count_tied_groups.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'count_tied_groups', ['x', 'use_missing'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'count_tied_groups', localization, ['x', 'use_missing'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'count_tied_groups(...)' code ##################

    str_571819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, (-1)), 'str', '\n    Counts the number of tied values.\n\n    Parameters\n    ----------\n    x : sequence\n        Sequence of data on which to counts the ties\n    use_missing : bool, optional\n        Whether to consider missing values as tied.\n\n    Returns\n    -------\n    count_tied_groups : dict\n        Returns a dictionary (nb of ties: nb of groups).\n\n    Examples\n    --------\n    >>> from scipy.stats import mstats\n    >>> z = [0, 0, 0, 2, 2, 2, 3, 3, 4, 5, 6]\n    >>> mstats.count_tied_groups(z)\n    {2: 1, 3: 2}\n\n    In the above example, the ties were 0 (3x), 2 (3x) and 3 (2x).\n\n    >>> z = np.ma.array([0, 0, 1, 2, 2, 2, 3, 3, 4, 5, 6])\n    >>> mstats.count_tied_groups(z)\n    {2: 2, 3: 1}\n    >>> z[[1,-1]] = np.ma.masked\n    >>> mstats.count_tied_groups(z, use_missing=True)\n    {2: 2, 3: 1}\n\n    ')
    
    # Assigning a Call to a Name (line 202):
    
    # Assigning a Call to a Name (line 202):
    
    # Call to sum(...): (line 202)
    # Processing the call keyword arguments (line 202)
    kwargs_571826 = {}
    
    # Call to getmask(...): (line 202)
    # Processing the call arguments (line 202)
    # Getting the type of 'x' (line 202)
    x_571822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 25), 'x', False)
    # Processing the call keyword arguments (line 202)
    kwargs_571823 = {}
    # Getting the type of 'ma' (line 202)
    ma_571820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 14), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 202)
    getmask_571821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 14), ma_571820, 'getmask')
    # Calling getmask(args, kwargs) (line 202)
    getmask_call_result_571824 = invoke(stypy.reporting.localization.Localization(__file__, 202, 14), getmask_571821, *[x_571822], **kwargs_571823)
    
    # Obtaining the member 'sum' of a type (line 202)
    sum_571825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 14), getmask_call_result_571824, 'sum')
    # Calling sum(args, kwargs) (line 202)
    sum_call_result_571827 = invoke(stypy.reporting.localization.Localization(__file__, 202, 14), sum_571825, *[], **kwargs_571826)
    
    # Assigning a type to the variable 'nmasked' (line 202)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 4), 'nmasked', sum_call_result_571827)
    
    # Assigning a Call to a Name (line 204):
    
    # Assigning a Call to a Name (line 204):
    
    # Call to copy(...): (line 204)
    # Processing the call keyword arguments (line 204)
    kwargs_571834 = {}
    
    # Call to compressed(...): (line 204)
    # Processing the call arguments (line 204)
    # Getting the type of 'x' (line 204)
    x_571830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 25), 'x', False)
    # Processing the call keyword arguments (line 204)
    kwargs_571831 = {}
    # Getting the type of 'ma' (line 204)
    ma_571828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 11), 'ma', False)
    # Obtaining the member 'compressed' of a type (line 204)
    compressed_571829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 11), ma_571828, 'compressed')
    # Calling compressed(args, kwargs) (line 204)
    compressed_call_result_571832 = invoke(stypy.reporting.localization.Localization(__file__, 204, 11), compressed_571829, *[x_571830], **kwargs_571831)
    
    # Obtaining the member 'copy' of a type (line 204)
    copy_571833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 11), compressed_call_result_571832, 'copy')
    # Calling copy(args, kwargs) (line 204)
    copy_call_result_571835 = invoke(stypy.reporting.localization.Localization(__file__, 204, 11), copy_571833, *[], **kwargs_571834)
    
    # Assigning a type to the variable 'data' (line 204)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 4), 'data', copy_call_result_571835)
    
    # Assigning a Call to a Tuple (line 205):
    
    # Assigning a Subscript to a Name (line 205):
    
    # Obtaining the type of the subscript
    int_571836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, 4), 'int')
    
    # Call to find_repeats(...): (line 205)
    # Processing the call arguments (line 205)
    # Getting the type of 'data' (line 205)
    data_571838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 34), 'data', False)
    # Processing the call keyword arguments (line 205)
    kwargs_571839 = {}
    # Getting the type of 'find_repeats' (line 205)
    find_repeats_571837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 21), 'find_repeats', False)
    # Calling find_repeats(args, kwargs) (line 205)
    find_repeats_call_result_571840 = invoke(stypy.reporting.localization.Localization(__file__, 205, 21), find_repeats_571837, *[data_571838], **kwargs_571839)
    
    # Obtaining the member '__getitem__' of a type (line 205)
    getitem___571841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 4), find_repeats_call_result_571840, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 205)
    subscript_call_result_571842 = invoke(stypy.reporting.localization.Localization(__file__, 205, 4), getitem___571841, int_571836)
    
    # Assigning a type to the variable 'tuple_var_assignment_571426' (line 205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'tuple_var_assignment_571426', subscript_call_result_571842)
    
    # Assigning a Subscript to a Name (line 205):
    
    # Obtaining the type of the subscript
    int_571843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, 4), 'int')
    
    # Call to find_repeats(...): (line 205)
    # Processing the call arguments (line 205)
    # Getting the type of 'data' (line 205)
    data_571845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 34), 'data', False)
    # Processing the call keyword arguments (line 205)
    kwargs_571846 = {}
    # Getting the type of 'find_repeats' (line 205)
    find_repeats_571844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 21), 'find_repeats', False)
    # Calling find_repeats(args, kwargs) (line 205)
    find_repeats_call_result_571847 = invoke(stypy.reporting.localization.Localization(__file__, 205, 21), find_repeats_571844, *[data_571845], **kwargs_571846)
    
    # Obtaining the member '__getitem__' of a type (line 205)
    getitem___571848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 4), find_repeats_call_result_571847, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 205)
    subscript_call_result_571849 = invoke(stypy.reporting.localization.Localization(__file__, 205, 4), getitem___571848, int_571843)
    
    # Assigning a type to the variable 'tuple_var_assignment_571427' (line 205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'tuple_var_assignment_571427', subscript_call_result_571849)
    
    # Assigning a Name to a Name (line 205):
    # Getting the type of 'tuple_var_assignment_571426' (line 205)
    tuple_var_assignment_571426_571850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'tuple_var_assignment_571426')
    # Assigning a type to the variable 'ties' (line 205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 5), 'ties', tuple_var_assignment_571426_571850)
    
    # Assigning a Name to a Name (line 205):
    # Getting the type of 'tuple_var_assignment_571427' (line 205)
    tuple_var_assignment_571427_571851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'tuple_var_assignment_571427')
    # Assigning a type to the variable 'counts' (line 205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 11), 'counts', tuple_var_assignment_571427_571851)
    
    # Assigning a Dict to a Name (line 206):
    
    # Assigning a Dict to a Name (line 206):
    
    # Obtaining an instance of the builtin type 'dict' (line 206)
    dict_571852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 206, 12), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 206)
    
    # Assigning a type to the variable 'nties' (line 206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'nties', dict_571852)
    
    
    # Call to len(...): (line 207)
    # Processing the call arguments (line 207)
    # Getting the type of 'ties' (line 207)
    ties_571854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 11), 'ties', False)
    # Processing the call keyword arguments (line 207)
    kwargs_571855 = {}
    # Getting the type of 'len' (line 207)
    len_571853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 7), 'len', False)
    # Calling len(args, kwargs) (line 207)
    len_call_result_571856 = invoke(stypy.reporting.localization.Localization(__file__, 207, 7), len_571853, *[ties_571854], **kwargs_571855)
    
    # Testing the type of an if condition (line 207)
    if_condition_571857 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 207, 4), len_call_result_571856)
    # Assigning a type to the variable 'if_condition_571857' (line 207)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 4), 'if_condition_571857', if_condition_571857)
    # SSA begins for if statement (line 207)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 208):
    
    # Assigning a Call to a Name (line 208):
    
    # Call to dict(...): (line 208)
    # Processing the call arguments (line 208)
    
    # Call to zip(...): (line 208)
    # Processing the call arguments (line 208)
    
    # Call to unique(...): (line 208)
    # Processing the call arguments (line 208)
    # Getting the type of 'counts' (line 208)
    counts_571862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 35), 'counts', False)
    # Processing the call keyword arguments (line 208)
    kwargs_571863 = {}
    # Getting the type of 'np' (line 208)
    np_571860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 25), 'np', False)
    # Obtaining the member 'unique' of a type (line 208)
    unique_571861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 25), np_571860, 'unique')
    # Calling unique(args, kwargs) (line 208)
    unique_call_result_571864 = invoke(stypy.reporting.localization.Localization(__file__, 208, 25), unique_571861, *[counts_571862], **kwargs_571863)
    
    
    # Call to repeat(...): (line 208)
    # Processing the call arguments (line 208)
    int_571867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 61), 'int')
    # Processing the call keyword arguments (line 208)
    kwargs_571868 = {}
    # Getting the type of 'itertools' (line 208)
    itertools_571865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 44), 'itertools', False)
    # Obtaining the member 'repeat' of a type (line 208)
    repeat_571866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 44), itertools_571865, 'repeat')
    # Calling repeat(args, kwargs) (line 208)
    repeat_call_result_571869 = invoke(stypy.reporting.localization.Localization(__file__, 208, 44), repeat_571866, *[int_571867], **kwargs_571868)
    
    # Processing the call keyword arguments (line 208)
    kwargs_571870 = {}
    # Getting the type of 'zip' (line 208)
    zip_571859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 21), 'zip', False)
    # Calling zip(args, kwargs) (line 208)
    zip_call_result_571871 = invoke(stypy.reporting.localization.Localization(__file__, 208, 21), zip_571859, *[unique_call_result_571864, repeat_call_result_571869], **kwargs_571870)
    
    # Processing the call keyword arguments (line 208)
    kwargs_571872 = {}
    # Getting the type of 'dict' (line 208)
    dict_571858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 16), 'dict', False)
    # Calling dict(args, kwargs) (line 208)
    dict_call_result_571873 = invoke(stypy.reporting.localization.Localization(__file__, 208, 16), dict_571858, *[zip_call_result_571871], **kwargs_571872)
    
    # Assigning a type to the variable 'nties' (line 208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 8), 'nties', dict_call_result_571873)
    
    # Call to update(...): (line 209)
    # Processing the call arguments (line 209)
    
    # Call to dict(...): (line 209)
    # Processing the call arguments (line 209)
    
    # Call to zip(...): (line 209)
    
    # Call to find_repeats(...): (line 209)
    # Processing the call arguments (line 209)
    # Getting the type of 'counts' (line 209)
    counts_571879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 44), 'counts', False)
    # Processing the call keyword arguments (line 209)
    kwargs_571880 = {}
    # Getting the type of 'find_repeats' (line 209)
    find_repeats_571878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 31), 'find_repeats', False)
    # Calling find_repeats(args, kwargs) (line 209)
    find_repeats_call_result_571881 = invoke(stypy.reporting.localization.Localization(__file__, 209, 31), find_repeats_571878, *[counts_571879], **kwargs_571880)
    
    # Processing the call keyword arguments (line 209)
    kwargs_571882 = {}
    # Getting the type of 'zip' (line 209)
    zip_571877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 26), 'zip', False)
    # Calling zip(args, kwargs) (line 209)
    zip_call_result_571883 = invoke(stypy.reporting.localization.Localization(__file__, 209, 26), zip_571877, *[find_repeats_call_result_571881], **kwargs_571882)
    
    # Processing the call keyword arguments (line 209)
    kwargs_571884 = {}
    # Getting the type of 'dict' (line 209)
    dict_571876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 21), 'dict', False)
    # Calling dict(args, kwargs) (line 209)
    dict_call_result_571885 = invoke(stypy.reporting.localization.Localization(__file__, 209, 21), dict_571876, *[zip_call_result_571883], **kwargs_571884)
    
    # Processing the call keyword arguments (line 209)
    kwargs_571886 = {}
    # Getting the type of 'nties' (line 209)
    nties_571874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 8), 'nties', False)
    # Obtaining the member 'update' of a type (line 209)
    update_571875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 8), nties_571874, 'update')
    # Calling update(args, kwargs) (line 209)
    update_call_result_571887 = invoke(stypy.reporting.localization.Localization(__file__, 209, 8), update_571875, *[dict_call_result_571885], **kwargs_571886)
    
    # SSA join for if statement (line 207)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'nmasked' (line 211)
    nmasked_571888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 7), 'nmasked')
    # Getting the type of 'use_missing' (line 211)
    use_missing_571889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 19), 'use_missing')
    # Applying the binary operator 'and' (line 211)
    result_and_keyword_571890 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 7), 'and', nmasked_571888, use_missing_571889)
    
    # Testing the type of an if condition (line 211)
    if_condition_571891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 211, 4), result_and_keyword_571890)
    # Assigning a type to the variable 'if_condition_571891' (line 211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 4), 'if_condition_571891', if_condition_571891)
    # SSA begins for if statement (line 211)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 212)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Getting the type of 'nties' (line 213)
    nties_571892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 12), 'nties')
    
    # Obtaining the type of the subscript
    # Getting the type of 'nmasked' (line 213)
    nmasked_571893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 18), 'nmasked')
    # Getting the type of 'nties' (line 213)
    nties_571894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 12), 'nties')
    # Obtaining the member '__getitem__' of a type (line 213)
    getitem___571895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 12), nties_571894, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 213)
    subscript_call_result_571896 = invoke(stypy.reporting.localization.Localization(__file__, 213, 12), getitem___571895, nmasked_571893)
    
    int_571897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 30), 'int')
    # Applying the binary operator '+=' (line 213)
    result_iadd_571898 = python_operator(stypy.reporting.localization.Localization(__file__, 213, 12), '+=', subscript_call_result_571896, int_571897)
    # Getting the type of 'nties' (line 213)
    nties_571899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 12), 'nties')
    # Getting the type of 'nmasked' (line 213)
    nmasked_571900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 18), 'nmasked')
    # Storing an element on a container (line 213)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 213, 12), nties_571899, (nmasked_571900, result_iadd_571898))
    
    # SSA branch for the except part of a try statement (line 212)
    # SSA branch for the except 'KeyError' branch of a try statement (line 212)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Num to a Subscript (line 215):
    
    # Assigning a Num to a Subscript (line 215):
    int_571901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 29), 'int')
    # Getting the type of 'nties' (line 215)
    nties_571902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 12), 'nties')
    # Getting the type of 'nmasked' (line 215)
    nmasked_571903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 18), 'nmasked')
    # Storing an element on a container (line 215)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 215, 12), nties_571902, (nmasked_571903, int_571901))
    # SSA join for try-except statement (line 212)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 211)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'nties' (line 217)
    nties_571904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 11), 'nties')
    # Assigning a type to the variable 'stypy_return_type' (line 217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 4), 'stypy_return_type', nties_571904)
    
    # ################# End of 'count_tied_groups(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'count_tied_groups' in the type store
    # Getting the type of 'stypy_return_type' (line 169)
    stypy_return_type_571905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_571905)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'count_tied_groups'
    return stypy_return_type_571905

# Assigning a type to the variable 'count_tied_groups' (line 169)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 0), 'count_tied_groups', count_tied_groups)

@norecursion
def rankdata(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 220)
    None_571906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 24), 'None')
    # Getting the type of 'False' (line 220)
    False_571907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 42), 'False')
    defaults = [None_571906, False_571907]
    # Create a new context for function 'rankdata'
    module_type_store = module_type_store.open_function_context('rankdata', 220, 0, False)
    
    # Passed parameters checking function
    rankdata.stypy_localization = localization
    rankdata.stypy_type_of_self = None
    rankdata.stypy_type_store = module_type_store
    rankdata.stypy_function_name = 'rankdata'
    rankdata.stypy_param_names_list = ['data', 'axis', 'use_missing']
    rankdata.stypy_varargs_param_name = None
    rankdata.stypy_kwargs_param_name = None
    rankdata.stypy_call_defaults = defaults
    rankdata.stypy_call_varargs = varargs
    rankdata.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rankdata', ['data', 'axis', 'use_missing'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rankdata', localization, ['data', 'axis', 'use_missing'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rankdata(...)' code ##################

    str_571908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, (-1)), 'str', 'Returns the rank (also known as order statistics) of each data point\n    along the given axis.\n\n    If some values are tied, their rank is averaged.\n    If some values are masked, their rank is set to 0 if use_missing is False,\n    or set to the average rank of the unmasked values if use_missing is True.\n\n    Parameters\n    ----------\n    data : sequence\n        Input data. The data is transformed to a masked array\n    axis : {None,int}, optional\n        Axis along which to perform the ranking.\n        If None, the array is first flattened. An exception is raised if\n        the axis is specified for arrays with a dimension larger than 2\n    use_missing : bool, optional\n        Whether the masked values have a rank of 0 (False) or equal to the\n        average rank of the unmasked values (True).\n\n    ')

    @norecursion
    def _rank1d(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 241)
        False_571909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 34), 'False')
        defaults = [False_571909]
        # Create a new context for function '_rank1d'
        module_type_store = module_type_store.open_function_context('_rank1d', 241, 4, False)
        
        # Passed parameters checking function
        _rank1d.stypy_localization = localization
        _rank1d.stypy_type_of_self = None
        _rank1d.stypy_type_store = module_type_store
        _rank1d.stypy_function_name = '_rank1d'
        _rank1d.stypy_param_names_list = ['data', 'use_missing']
        _rank1d.stypy_varargs_param_name = None
        _rank1d.stypy_kwargs_param_name = None
        _rank1d.stypy_call_defaults = defaults
        _rank1d.stypy_call_varargs = varargs
        _rank1d.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_rank1d', ['data', 'use_missing'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_rank1d', localization, ['data', 'use_missing'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_rank1d(...)' code ##################

        
        # Assigning a Call to a Name (line 242):
        
        # Assigning a Call to a Name (line 242):
        
        # Call to count(...): (line 242)
        # Processing the call keyword arguments (line 242)
        kwargs_571912 = {}
        # Getting the type of 'data' (line 242)
        data_571910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 12), 'data', False)
        # Obtaining the member 'count' of a type (line 242)
        count_571911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 12), data_571910, 'count')
        # Calling count(args, kwargs) (line 242)
        count_call_result_571913 = invoke(stypy.reporting.localization.Localization(__file__, 242, 12), count_571911, *[], **kwargs_571912)
        
        # Assigning a type to the variable 'n' (line 242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'n', count_call_result_571913)
        
        # Assigning a Call to a Name (line 243):
        
        # Assigning a Call to a Name (line 243):
        
        # Call to empty(...): (line 243)
        # Processing the call arguments (line 243)
        # Getting the type of 'data' (line 243)
        data_571916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 22), 'data', False)
        # Obtaining the member 'size' of a type (line 243)
        size_571917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 22), data_571916, 'size')
        # Processing the call keyword arguments (line 243)
        # Getting the type of 'float' (line 243)
        float_571918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 39), 'float', False)
        keyword_571919 = float_571918
        kwargs_571920 = {'dtype': keyword_571919}
        # Getting the type of 'np' (line 243)
        np_571914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 13), 'np', False)
        # Obtaining the member 'empty' of a type (line 243)
        empty_571915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 13), np_571914, 'empty')
        # Calling empty(args, kwargs) (line 243)
        empty_call_result_571921 = invoke(stypy.reporting.localization.Localization(__file__, 243, 13), empty_571915, *[size_571917], **kwargs_571920)
        
        # Assigning a type to the variable 'rk' (line 243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 8), 'rk', empty_call_result_571921)
        
        # Assigning a Call to a Name (line 244):
        
        # Assigning a Call to a Name (line 244):
        
        # Call to argsort(...): (line 244)
        # Processing the call keyword arguments (line 244)
        kwargs_571924 = {}
        # Getting the type of 'data' (line 244)
        data_571922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 14), 'data', False)
        # Obtaining the member 'argsort' of a type (line 244)
        argsort_571923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 14), data_571922, 'argsort')
        # Calling argsort(args, kwargs) (line 244)
        argsort_call_result_571925 = invoke(stypy.reporting.localization.Localization(__file__, 244, 14), argsort_571923, *[], **kwargs_571924)
        
        # Assigning a type to the variable 'idx' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'idx', argsort_call_result_571925)
        
        # Assigning a Call to a Subscript (line 245):
        
        # Assigning a Call to a Subscript (line 245):
        
        # Call to arange(...): (line 245)
        # Processing the call arguments (line 245)
        int_571928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, 32), 'int')
        # Getting the type of 'n' (line 245)
        n_571929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 34), 'n', False)
        int_571930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, 36), 'int')
        # Applying the binary operator '+' (line 245)
        result_add_571931 = python_operator(stypy.reporting.localization.Localization(__file__, 245, 34), '+', n_571929, int_571930)
        
        # Processing the call keyword arguments (line 245)
        kwargs_571932 = {}
        # Getting the type of 'np' (line 245)
        np_571926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 22), 'np', False)
        # Obtaining the member 'arange' of a type (line 245)
        arange_571927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 22), np_571926, 'arange')
        # Calling arange(args, kwargs) (line 245)
        arange_call_result_571933 = invoke(stypy.reporting.localization.Localization(__file__, 245, 22), arange_571927, *[int_571928, result_add_571931], **kwargs_571932)
        
        # Getting the type of 'rk' (line 245)
        rk_571934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 8), 'rk')
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 245)
        n_571935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 16), 'n')
        slice_571936 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 245, 11), None, n_571935, None)
        # Getting the type of 'idx' (line 245)
        idx_571937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 11), 'idx')
        # Obtaining the member '__getitem__' of a type (line 245)
        getitem___571938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 11), idx_571937, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 245)
        subscript_call_result_571939 = invoke(stypy.reporting.localization.Localization(__file__, 245, 11), getitem___571938, slice_571936)
        
        # Storing an element on a container (line 245)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 245, 8), rk_571934, (subscript_call_result_571939, arange_call_result_571933))
        
        # Getting the type of 'use_missing' (line 247)
        use_missing_571940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 11), 'use_missing')
        # Testing the type of an if condition (line 247)
        if_condition_571941 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 247, 8), use_missing_571940)
        # Assigning a type to the variable 'if_condition_571941' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 8), 'if_condition_571941', if_condition_571941)
        # SSA begins for if statement (line 247)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 248):
        
        # Assigning a BinOp to a Subscript (line 248):
        # Getting the type of 'n' (line 248)
        n_571942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 27), 'n')
        int_571943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 29), 'int')
        # Applying the binary operator '+' (line 248)
        result_add_571944 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 27), '+', n_571942, int_571943)
        
        float_571945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 32), 'float')
        # Applying the binary operator 'div' (line 248)
        result_div_571946 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 26), 'div', result_add_571944, float_571945)
        
        # Getting the type of 'rk' (line 248)
        rk_571947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 12), 'rk')
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 248)
        n_571948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 19), 'n')
        slice_571949 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 248, 15), n_571948, None, None)
        # Getting the type of 'idx' (line 248)
        idx_571950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 15), 'idx')
        # Obtaining the member '__getitem__' of a type (line 248)
        getitem___571951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 15), idx_571950, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 248)
        subscript_call_result_571952 = invoke(stypy.reporting.localization.Localization(__file__, 248, 15), getitem___571951, slice_571949)
        
        # Storing an element on a container (line 248)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 248, 12), rk_571947, (subscript_call_result_571952, result_div_571946))
        # SSA branch for the else part of an if statement (line 247)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Subscript (line 250):
        
        # Assigning a Num to a Subscript (line 250):
        int_571953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 26), 'int')
        # Getting the type of 'rk' (line 250)
        rk_571954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 12), 'rk')
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 250)
        n_571955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 19), 'n')
        slice_571956 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 250, 15), n_571955, None, None)
        # Getting the type of 'idx' (line 250)
        idx_571957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 15), 'idx')
        # Obtaining the member '__getitem__' of a type (line 250)
        getitem___571958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 15), idx_571957, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 250)
        subscript_call_result_571959 = invoke(stypy.reporting.localization.Localization(__file__, 250, 15), getitem___571958, slice_571956)
        
        # Storing an element on a container (line 250)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 250, 12), rk_571954, (subscript_call_result_571959, int_571953))
        # SSA join for if statement (line 247)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 252):
        
        # Assigning a Call to a Name (line 252):
        
        # Call to find_repeats(...): (line 252)
        # Processing the call arguments (line 252)
        
        # Call to copy(...): (line 252)
        # Processing the call keyword arguments (line 252)
        kwargs_571963 = {}
        # Getting the type of 'data' (line 252)
        data_571961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 31), 'data', False)
        # Obtaining the member 'copy' of a type (line 252)
        copy_571962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 31), data_571961, 'copy')
        # Calling copy(args, kwargs) (line 252)
        copy_call_result_571964 = invoke(stypy.reporting.localization.Localization(__file__, 252, 31), copy_571962, *[], **kwargs_571963)
        
        # Processing the call keyword arguments (line 252)
        kwargs_571965 = {}
        # Getting the type of 'find_repeats' (line 252)
        find_repeats_571960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 18), 'find_repeats', False)
        # Calling find_repeats(args, kwargs) (line 252)
        find_repeats_call_result_571966 = invoke(stypy.reporting.localization.Localization(__file__, 252, 18), find_repeats_571960, *[copy_call_result_571964], **kwargs_571965)
        
        # Assigning a type to the variable 'repeats' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 8), 'repeats', find_repeats_call_result_571966)
        
        
        # Obtaining the type of the subscript
        int_571967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 25), 'int')
        # Getting the type of 'repeats' (line 253)
        repeats_571968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 17), 'repeats')
        # Obtaining the member '__getitem__' of a type (line 253)
        getitem___571969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 17), repeats_571968, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 253)
        subscript_call_result_571970 = invoke(stypy.reporting.localization.Localization(__file__, 253, 17), getitem___571969, int_571967)
        
        # Testing the type of a for loop iterable (line 253)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 253, 8), subscript_call_result_571970)
        # Getting the type of the for loop variable (line 253)
        for_loop_var_571971 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 253, 8), subscript_call_result_571970)
        # Assigning a type to the variable 'r' (line 253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 8), 'r', for_loop_var_571971)
        # SSA begins for a for statement (line 253)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 254):
        
        # Assigning a Call to a Name (line 254):
        
        # Call to filled(...): (line 254)
        # Processing the call arguments (line 254)
        # Getting the type of 'False' (line 254)
        False_571976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 43), 'False', False)
        # Processing the call keyword arguments (line 254)
        kwargs_571977 = {}
        
        # Getting the type of 'data' (line 254)
        data_571972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 25), 'data', False)
        # Getting the type of 'r' (line 254)
        r_571973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 33), 'r', False)
        # Applying the binary operator '==' (line 254)
        result_eq_571974 = python_operator(stypy.reporting.localization.Localization(__file__, 254, 25), '==', data_571972, r_571973)
        
        # Obtaining the member 'filled' of a type (line 254)
        filled_571975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 25), result_eq_571974, 'filled')
        # Calling filled(args, kwargs) (line 254)
        filled_call_result_571978 = invoke(stypy.reporting.localization.Localization(__file__, 254, 25), filled_571975, *[False_571976], **kwargs_571977)
        
        # Assigning a type to the variable 'condition' (line 254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 12), 'condition', filled_call_result_571978)
        
        # Assigning a Call to a Subscript (line 255):
        
        # Assigning a Call to a Subscript (line 255):
        
        # Call to mean(...): (line 255)
        # Processing the call keyword arguments (line 255)
        kwargs_571984 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'condition' (line 255)
        condition_571979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 31), 'condition', False)
        # Getting the type of 'rk' (line 255)
        rk_571980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 28), 'rk', False)
        # Obtaining the member '__getitem__' of a type (line 255)
        getitem___571981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 28), rk_571980, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 255)
        subscript_call_result_571982 = invoke(stypy.reporting.localization.Localization(__file__, 255, 28), getitem___571981, condition_571979)
        
        # Obtaining the member 'mean' of a type (line 255)
        mean_571983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 28), subscript_call_result_571982, 'mean')
        # Calling mean(args, kwargs) (line 255)
        mean_call_result_571985 = invoke(stypy.reporting.localization.Localization(__file__, 255, 28), mean_571983, *[], **kwargs_571984)
        
        # Getting the type of 'rk' (line 255)
        rk_571986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 12), 'rk')
        # Getting the type of 'condition' (line 255)
        condition_571987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 15), 'condition')
        # Storing an element on a container (line 255)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 12), rk_571986, (condition_571987, mean_call_result_571985))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'rk' (line 256)
        rk_571988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 15), 'rk')
        # Assigning a type to the variable 'stypy_return_type' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'stypy_return_type', rk_571988)
        
        # ################# End of '_rank1d(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_rank1d' in the type store
        # Getting the type of 'stypy_return_type' (line 241)
        stypy_return_type_571989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_571989)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_rank1d'
        return stypy_return_type_571989

    # Assigning a type to the variable '_rank1d' (line 241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 4), '_rank1d', _rank1d)
    
    # Assigning a Call to a Name (line 258):
    
    # Assigning a Call to a Name (line 258):
    
    # Call to array(...): (line 258)
    # Processing the call arguments (line 258)
    # Getting the type of 'data' (line 258)
    data_571992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 20), 'data', False)
    # Processing the call keyword arguments (line 258)
    # Getting the type of 'False' (line 258)
    False_571993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 31), 'False', False)
    keyword_571994 = False_571993
    kwargs_571995 = {'copy': keyword_571994}
    # Getting the type of 'ma' (line 258)
    ma_571990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 11), 'ma', False)
    # Obtaining the member 'array' of a type (line 258)
    array_571991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 11), ma_571990, 'array')
    # Calling array(args, kwargs) (line 258)
    array_call_result_571996 = invoke(stypy.reporting.localization.Localization(__file__, 258, 11), array_571991, *[data_571992], **kwargs_571995)
    
    # Assigning a type to the variable 'data' (line 258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 4), 'data', array_call_result_571996)
    
    # Type idiom detected: calculating its left and rigth part (line 259)
    # Getting the type of 'axis' (line 259)
    axis_571997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 7), 'axis')
    # Getting the type of 'None' (line 259)
    None_571998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 15), 'None')
    
    (may_be_571999, more_types_in_union_572000) = may_be_none(axis_571997, None_571998)

    if may_be_571999:

        if more_types_in_union_572000:
            # Runtime conditional SSA (line 259)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'data' (line 260)
        data_572001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 11), 'data')
        # Obtaining the member 'ndim' of a type (line 260)
        ndim_572002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 11), data_572001, 'ndim')
        int_572003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 23), 'int')
        # Applying the binary operator '>' (line 260)
        result_gt_572004 = python_operator(stypy.reporting.localization.Localization(__file__, 260, 11), '>', ndim_572002, int_572003)
        
        # Testing the type of an if condition (line 260)
        if_condition_572005 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 260, 8), result_gt_572004)
        # Assigning a type to the variable 'if_condition_572005' (line 260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 8), 'if_condition_572005', if_condition_572005)
        # SSA begins for if statement (line 260)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to reshape(...): (line 261)
        # Processing the call arguments (line 261)
        # Getting the type of 'data' (line 261)
        data_572015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 62), 'data', False)
        # Obtaining the member 'shape' of a type (line 261)
        shape_572016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 62), data_572015, 'shape')
        # Processing the call keyword arguments (line 261)
        kwargs_572017 = {}
        
        # Call to _rank1d(...): (line 261)
        # Processing the call arguments (line 261)
        
        # Call to ravel(...): (line 261)
        # Processing the call keyword arguments (line 261)
        kwargs_572009 = {}
        # Getting the type of 'data' (line 261)
        data_572007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 27), 'data', False)
        # Obtaining the member 'ravel' of a type (line 261)
        ravel_572008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 27), data_572007, 'ravel')
        # Calling ravel(args, kwargs) (line 261)
        ravel_call_result_572010 = invoke(stypy.reporting.localization.Localization(__file__, 261, 27), ravel_572008, *[], **kwargs_572009)
        
        # Getting the type of 'use_missing' (line 261)
        use_missing_572011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 41), 'use_missing', False)
        # Processing the call keyword arguments (line 261)
        kwargs_572012 = {}
        # Getting the type of '_rank1d' (line 261)
        _rank1d_572006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 19), '_rank1d', False)
        # Calling _rank1d(args, kwargs) (line 261)
        _rank1d_call_result_572013 = invoke(stypy.reporting.localization.Localization(__file__, 261, 19), _rank1d_572006, *[ravel_call_result_572010, use_missing_572011], **kwargs_572012)
        
        # Obtaining the member 'reshape' of a type (line 261)
        reshape_572014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 19), _rank1d_call_result_572013, 'reshape')
        # Calling reshape(args, kwargs) (line 261)
        reshape_call_result_572018 = invoke(stypy.reporting.localization.Localization(__file__, 261, 19), reshape_572014, *[shape_572016], **kwargs_572017)
        
        # Assigning a type to the variable 'stypy_return_type' (line 261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 12), 'stypy_return_type', reshape_call_result_572018)
        # SSA branch for the else part of an if statement (line 260)
        module_type_store.open_ssa_branch('else')
        
        # Call to _rank1d(...): (line 263)
        # Processing the call arguments (line 263)
        # Getting the type of 'data' (line 263)
        data_572020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 27), 'data', False)
        # Getting the type of 'use_missing' (line 263)
        use_missing_572021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 33), 'use_missing', False)
        # Processing the call keyword arguments (line 263)
        kwargs_572022 = {}
        # Getting the type of '_rank1d' (line 263)
        _rank1d_572019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 19), '_rank1d', False)
        # Calling _rank1d(args, kwargs) (line 263)
        _rank1d_call_result_572023 = invoke(stypy.reporting.localization.Localization(__file__, 263, 19), _rank1d_572019, *[data_572020, use_missing_572021], **kwargs_572022)
        
        # Assigning a type to the variable 'stypy_return_type' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 12), 'stypy_return_type', _rank1d_call_result_572023)
        # SSA join for if statement (line 260)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_572000:
            # Runtime conditional SSA for else branch (line 259)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_571999) or more_types_in_union_572000):
        
        # Call to view(...): (line 265)
        # Processing the call arguments (line 265)
        # Getting the type of 'ndarray' (line 265)
        ndarray_572033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 71), 'ndarray', False)
        # Processing the call keyword arguments (line 265)
        kwargs_572034 = {}
        
        # Call to apply_along_axis(...): (line 265)
        # Processing the call arguments (line 265)
        # Getting the type of '_rank1d' (line 265)
        _rank1d_572026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 35), '_rank1d', False)
        # Getting the type of 'axis' (line 265)
        axis_572027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 43), 'axis', False)
        # Getting the type of 'data' (line 265)
        data_572028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 48), 'data', False)
        # Getting the type of 'use_missing' (line 265)
        use_missing_572029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 53), 'use_missing', False)
        # Processing the call keyword arguments (line 265)
        kwargs_572030 = {}
        # Getting the type of 'ma' (line 265)
        ma_572024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 15), 'ma', False)
        # Obtaining the member 'apply_along_axis' of a type (line 265)
        apply_along_axis_572025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 15), ma_572024, 'apply_along_axis')
        # Calling apply_along_axis(args, kwargs) (line 265)
        apply_along_axis_call_result_572031 = invoke(stypy.reporting.localization.Localization(__file__, 265, 15), apply_along_axis_572025, *[_rank1d_572026, axis_572027, data_572028, use_missing_572029], **kwargs_572030)
        
        # Obtaining the member 'view' of a type (line 265)
        view_572032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 15), apply_along_axis_call_result_572031, 'view')
        # Calling view(args, kwargs) (line 265)
        view_call_result_572035 = invoke(stypy.reporting.localization.Localization(__file__, 265, 15), view_572032, *[ndarray_572033], **kwargs_572034)
        
        # Assigning a type to the variable 'stypy_return_type' (line 265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 8), 'stypy_return_type', view_call_result_572035)

        if (may_be_571999 and more_types_in_union_572000):
            # SSA join for if statement (line 259)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'rankdata(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rankdata' in the type store
    # Getting the type of 'stypy_return_type' (line 220)
    stypy_return_type_572036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_572036)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rankdata'
    return stypy_return_type_572036

# Assigning a type to the variable 'rankdata' (line 220)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 0), 'rankdata', rankdata)

# Assigning a Call to a Name (line 268):

# Assigning a Call to a Name (line 268):

# Call to namedtuple(...): (line 268)
# Processing the call arguments (line 268)
str_572038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 24), 'str', 'ModeResult')

# Obtaining an instance of the builtin type 'tuple' (line 268)
tuple_572039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 39), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 268)
# Adding element type (line 268)
str_572040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 39), 'str', 'mode')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 268, 39), tuple_572039, str_572040)
# Adding element type (line 268)
str_572041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 47), 'str', 'count')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 268, 39), tuple_572039, str_572041)

# Processing the call keyword arguments (line 268)
kwargs_572042 = {}
# Getting the type of 'namedtuple' (line 268)
namedtuple_572037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 13), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 268)
namedtuple_call_result_572043 = invoke(stypy.reporting.localization.Localization(__file__, 268, 13), namedtuple_572037, *[str_572038, tuple_572039], **kwargs_572042)

# Assigning a type to the variable 'ModeResult' (line 268)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 0), 'ModeResult', namedtuple_call_result_572043)

@norecursion
def mode(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_572044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 17), 'int')
    defaults = [int_572044]
    # Create a new context for function 'mode'
    module_type_store = module_type_store.open_function_context('mode', 271, 0, False)
    
    # Passed parameters checking function
    mode.stypy_localization = localization
    mode.stypy_type_of_self = None
    mode.stypy_type_store = module_type_store
    mode.stypy_function_name = 'mode'
    mode.stypy_param_names_list = ['a', 'axis']
    mode.stypy_varargs_param_name = None
    mode.stypy_kwargs_param_name = None
    mode.stypy_call_defaults = defaults
    mode.stypy_call_varargs = varargs
    mode.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mode', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mode', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mode(...)' code ##################

    str_572045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, (-1)), 'str', '\n    Returns an array of the modal (most common) value in the passed array.\n\n    Parameters\n    ----------\n    a : array_like\n        n-dimensional array of which to find mode(s).\n    axis : int or None, optional\n        Axis along which to operate. Default is 0. If None, compute over\n        the whole array `a`.\n\n    Returns\n    -------\n    mode : ndarray\n        Array of modal values.\n    count : ndarray\n        Array of counts for each mode.\n\n    Notes\n    -----\n    For more details, see `stats.mode`.\n\n    ')
    
    # Assigning a Call to a Tuple (line 295):
    
    # Assigning a Subscript to a Name (line 295):
    
    # Obtaining the type of the subscript
    int_572046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 4), 'int')
    
    # Call to _chk_asarray(...): (line 295)
    # Processing the call arguments (line 295)
    # Getting the type of 'a' (line 295)
    a_572048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 27), 'a', False)
    # Getting the type of 'axis' (line 295)
    axis_572049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 30), 'axis', False)
    # Processing the call keyword arguments (line 295)
    kwargs_572050 = {}
    # Getting the type of '_chk_asarray' (line 295)
    _chk_asarray_572047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 295)
    _chk_asarray_call_result_572051 = invoke(stypy.reporting.localization.Localization(__file__, 295, 14), _chk_asarray_572047, *[a_572048, axis_572049], **kwargs_572050)
    
    # Obtaining the member '__getitem__' of a type (line 295)
    getitem___572052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 4), _chk_asarray_call_result_572051, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 295)
    subscript_call_result_572053 = invoke(stypy.reporting.localization.Localization(__file__, 295, 4), getitem___572052, int_572046)
    
    # Assigning a type to the variable 'tuple_var_assignment_571428' (line 295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 4), 'tuple_var_assignment_571428', subscript_call_result_572053)
    
    # Assigning a Subscript to a Name (line 295):
    
    # Obtaining the type of the subscript
    int_572054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 4), 'int')
    
    # Call to _chk_asarray(...): (line 295)
    # Processing the call arguments (line 295)
    # Getting the type of 'a' (line 295)
    a_572056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 27), 'a', False)
    # Getting the type of 'axis' (line 295)
    axis_572057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 30), 'axis', False)
    # Processing the call keyword arguments (line 295)
    kwargs_572058 = {}
    # Getting the type of '_chk_asarray' (line 295)
    _chk_asarray_572055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 295)
    _chk_asarray_call_result_572059 = invoke(stypy.reporting.localization.Localization(__file__, 295, 14), _chk_asarray_572055, *[a_572056, axis_572057], **kwargs_572058)
    
    # Obtaining the member '__getitem__' of a type (line 295)
    getitem___572060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 4), _chk_asarray_call_result_572059, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 295)
    subscript_call_result_572061 = invoke(stypy.reporting.localization.Localization(__file__, 295, 4), getitem___572060, int_572054)
    
    # Assigning a type to the variable 'tuple_var_assignment_571429' (line 295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 4), 'tuple_var_assignment_571429', subscript_call_result_572061)
    
    # Assigning a Name to a Name (line 295):
    # Getting the type of 'tuple_var_assignment_571428' (line 295)
    tuple_var_assignment_571428_572062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 4), 'tuple_var_assignment_571428')
    # Assigning a type to the variable 'a' (line 295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 4), 'a', tuple_var_assignment_571428_572062)
    
    # Assigning a Name to a Name (line 295):
    # Getting the type of 'tuple_var_assignment_571429' (line 295)
    tuple_var_assignment_571429_572063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 4), 'tuple_var_assignment_571429')
    # Assigning a type to the variable 'axis' (line 295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 7), 'axis', tuple_var_assignment_571429_572063)

    @norecursion
    def _mode1D(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_mode1D'
        module_type_store = module_type_store.open_function_context('_mode1D', 297, 4, False)
        
        # Passed parameters checking function
        _mode1D.stypy_localization = localization
        _mode1D.stypy_type_of_self = None
        _mode1D.stypy_type_store = module_type_store
        _mode1D.stypy_function_name = '_mode1D'
        _mode1D.stypy_param_names_list = ['a']
        _mode1D.stypy_varargs_param_name = None
        _mode1D.stypy_kwargs_param_name = None
        _mode1D.stypy_call_defaults = defaults
        _mode1D.stypy_call_varargs = varargs
        _mode1D.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_mode1D', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_mode1D', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_mode1D(...)' code ##################

        
        # Assigning a Call to a Tuple (line 298):
        
        # Assigning a Subscript to a Name (line 298):
        
        # Obtaining the type of the subscript
        int_572064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 8), 'int')
        
        # Call to find_repeats(...): (line 298)
        # Processing the call arguments (line 298)
        # Getting the type of 'a' (line 298)
        a_572066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 33), 'a', False)
        # Processing the call keyword arguments (line 298)
        kwargs_572067 = {}
        # Getting the type of 'find_repeats' (line 298)
        find_repeats_572065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 20), 'find_repeats', False)
        # Calling find_repeats(args, kwargs) (line 298)
        find_repeats_call_result_572068 = invoke(stypy.reporting.localization.Localization(__file__, 298, 20), find_repeats_572065, *[a_572066], **kwargs_572067)
        
        # Obtaining the member '__getitem__' of a type (line 298)
        getitem___572069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 8), find_repeats_call_result_572068, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 298)
        subscript_call_result_572070 = invoke(stypy.reporting.localization.Localization(__file__, 298, 8), getitem___572069, int_572064)
        
        # Assigning a type to the variable 'tuple_var_assignment_571430' (line 298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'tuple_var_assignment_571430', subscript_call_result_572070)
        
        # Assigning a Subscript to a Name (line 298):
        
        # Obtaining the type of the subscript
        int_572071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 8), 'int')
        
        # Call to find_repeats(...): (line 298)
        # Processing the call arguments (line 298)
        # Getting the type of 'a' (line 298)
        a_572073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 33), 'a', False)
        # Processing the call keyword arguments (line 298)
        kwargs_572074 = {}
        # Getting the type of 'find_repeats' (line 298)
        find_repeats_572072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 20), 'find_repeats', False)
        # Calling find_repeats(args, kwargs) (line 298)
        find_repeats_call_result_572075 = invoke(stypy.reporting.localization.Localization(__file__, 298, 20), find_repeats_572072, *[a_572073], **kwargs_572074)
        
        # Obtaining the member '__getitem__' of a type (line 298)
        getitem___572076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 8), find_repeats_call_result_572075, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 298)
        subscript_call_result_572077 = invoke(stypy.reporting.localization.Localization(__file__, 298, 8), getitem___572076, int_572071)
        
        # Assigning a type to the variable 'tuple_var_assignment_571431' (line 298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'tuple_var_assignment_571431', subscript_call_result_572077)
        
        # Assigning a Name to a Name (line 298):
        # Getting the type of 'tuple_var_assignment_571430' (line 298)
        tuple_var_assignment_571430_572078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'tuple_var_assignment_571430')
        # Assigning a type to the variable 'rep' (line 298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 9), 'rep', tuple_var_assignment_571430_572078)
        
        # Assigning a Name to a Name (line 298):
        # Getting the type of 'tuple_var_assignment_571431' (line 298)
        tuple_var_assignment_571431_572079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'tuple_var_assignment_571431')
        # Assigning a type to the variable 'cnt' (line 298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 13), 'cnt', tuple_var_assignment_571431_572079)
        
        
        # Getting the type of 'cnt' (line 299)
        cnt_572080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 15), 'cnt')
        # Obtaining the member 'ndim' of a type (line 299)
        ndim_572081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 15), cnt_572080, 'ndim')
        # Applying the 'not' unary operator (line 299)
        result_not__572082 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 11), 'not', ndim_572081)
        
        # Testing the type of an if condition (line 299)
        if_condition_572083 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 299, 8), result_not__572082)
        # Assigning a type to the variable 'if_condition_572083' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 8), 'if_condition_572083', if_condition_572083)
        # SSA begins for if statement (line 299)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 300)
        tuple_572084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 300, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 300)
        # Adding element type (line 300)
        int_572085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 300, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 300, 20), tuple_572084, int_572085)
        # Adding element type (line 300)
        int_572086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 300, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 300, 20), tuple_572084, int_572086)
        
        # Assigning a type to the variable 'stypy_return_type' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'stypy_return_type', tuple_572084)
        # SSA branch for the else part of an if statement (line 299)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'cnt' (line 301)
        cnt_572087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 13), 'cnt')
        # Obtaining the member 'size' of a type (line 301)
        size_572088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 13), cnt_572087, 'size')
        # Testing the type of an if condition (line 301)
        if_condition_572089 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 301, 13), size_572088)
        # Assigning a type to the variable 'if_condition_572089' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 13), 'if_condition_572089', if_condition_572089)
        # SSA begins for if statement (line 301)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 302)
        tuple_572090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 302)
        # Adding element type (line 302)
        
        # Obtaining the type of the subscript
        
        # Call to argmax(...): (line 302)
        # Processing the call keyword arguments (line 302)
        kwargs_572093 = {}
        # Getting the type of 'cnt' (line 302)
        cnt_572091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 24), 'cnt', False)
        # Obtaining the member 'argmax' of a type (line 302)
        argmax_572092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 24), cnt_572091, 'argmax')
        # Calling argmax(args, kwargs) (line 302)
        argmax_call_result_572094 = invoke(stypy.reporting.localization.Localization(__file__, 302, 24), argmax_572092, *[], **kwargs_572093)
        
        # Getting the type of 'rep' (line 302)
        rep_572095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 20), 'rep')
        # Obtaining the member '__getitem__' of a type (line 302)
        getitem___572096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 20), rep_572095, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 302)
        subscript_call_result_572097 = invoke(stypy.reporting.localization.Localization(__file__, 302, 20), getitem___572096, argmax_call_result_572094)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 302, 20), tuple_572090, subscript_call_result_572097)
        # Adding element type (line 302)
        
        # Call to max(...): (line 302)
        # Processing the call keyword arguments (line 302)
        kwargs_572100 = {}
        # Getting the type of 'cnt' (line 302)
        cnt_572098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 39), 'cnt', False)
        # Obtaining the member 'max' of a type (line 302)
        max_572099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 39), cnt_572098, 'max')
        # Calling max(args, kwargs) (line 302)
        max_call_result_572101 = invoke(stypy.reporting.localization.Localization(__file__, 302, 39), max_572099, *[], **kwargs_572100)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 302, 20), tuple_572090, max_call_result_572101)
        
        # Assigning a type to the variable 'stypy_return_type' (line 302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 12), 'stypy_return_type', tuple_572090)
        # SSA branch for the else part of an if statement (line 301)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 304):
        
        # Assigning a Call to a Name (line 304):
        
        # Call to flatnotmasked_edges(...): (line 304)
        # Processing the call arguments (line 304)
        # Getting the type of 'a' (line 304)
        a_572104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 56), 'a', False)
        # Processing the call keyword arguments (line 304)
        kwargs_572105 = {}
        # Getting the type of 'ma' (line 304)
        ma_572102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 33), 'ma', False)
        # Obtaining the member 'flatnotmasked_edges' of a type (line 304)
        flatnotmasked_edges_572103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 33), ma_572102, 'flatnotmasked_edges')
        # Calling flatnotmasked_edges(args, kwargs) (line 304)
        flatnotmasked_edges_call_result_572106 = invoke(stypy.reporting.localization.Localization(__file__, 304, 33), flatnotmasked_edges_572103, *[a_572104], **kwargs_572105)
        
        # Assigning a type to the variable 'not_masked_indices' (line 304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 304, 12), 'not_masked_indices', flatnotmasked_edges_call_result_572106)
        
        # Assigning a Subscript to a Name (line 305):
        
        # Assigning a Subscript to a Name (line 305):
        
        # Obtaining the type of the subscript
        int_572107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 305, 56), 'int')
        # Getting the type of 'not_masked_indices' (line 305)
        not_masked_indices_572108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 37), 'not_masked_indices')
        # Obtaining the member '__getitem__' of a type (line 305)
        getitem___572109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 37), not_masked_indices_572108, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 305)
        subscript_call_result_572110 = invoke(stypy.reporting.localization.Localization(__file__, 305, 37), getitem___572109, int_572107)
        
        # Assigning a type to the variable 'first_not_masked_index' (line 305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 12), 'first_not_masked_index', subscript_call_result_572110)
        
        # Obtaining an instance of the builtin type 'tuple' (line 306)
        tuple_572111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 306)
        # Adding element type (line 306)
        
        # Obtaining the type of the subscript
        # Getting the type of 'first_not_masked_index' (line 306)
        first_not_masked_index_572112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 22), 'first_not_masked_index')
        # Getting the type of 'a' (line 306)
        a_572113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 20), 'a')
        # Obtaining the member '__getitem__' of a type (line 306)
        getitem___572114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 20), a_572113, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 306)
        subscript_call_result_572115 = invoke(stypy.reporting.localization.Localization(__file__, 306, 20), getitem___572114, first_not_masked_index_572112)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 306, 20), tuple_572111, subscript_call_result_572115)
        # Adding element type (line 306)
        int_572116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 306, 20), tuple_572111, int_572116)
        
        # Assigning a type to the variable 'stypy_return_type' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 12), 'stypy_return_type', tuple_572111)
        # SSA join for if statement (line 301)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 299)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_mode1D(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_mode1D' in the type store
        # Getting the type of 'stypy_return_type' (line 297)
        stypy_return_type_572117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_572117)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_mode1D'
        return stypy_return_type_572117

    # Assigning a type to the variable '_mode1D' (line 297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 4), '_mode1D', _mode1D)
    
    # Type idiom detected: calculating its left and rigth part (line 308)
    # Getting the type of 'axis' (line 308)
    axis_572118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 7), 'axis')
    # Getting the type of 'None' (line 308)
    None_572119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 15), 'None')
    
    (may_be_572120, more_types_in_union_572121) = may_be_none(axis_572118, None_572119)

    if may_be_572120:

        if more_types_in_union_572121:
            # Runtime conditional SSA (line 308)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 309):
        
        # Assigning a Call to a Name (line 309):
        
        # Call to _mode1D(...): (line 309)
        # Processing the call arguments (line 309)
        
        # Call to ravel(...): (line 309)
        # Processing the call arguments (line 309)
        # Getting the type of 'a' (line 309)
        a_572125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 34), 'a', False)
        # Processing the call keyword arguments (line 309)
        kwargs_572126 = {}
        # Getting the type of 'ma' (line 309)
        ma_572123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 25), 'ma', False)
        # Obtaining the member 'ravel' of a type (line 309)
        ravel_572124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 25), ma_572123, 'ravel')
        # Calling ravel(args, kwargs) (line 309)
        ravel_call_result_572127 = invoke(stypy.reporting.localization.Localization(__file__, 309, 25), ravel_572124, *[a_572125], **kwargs_572126)
        
        # Processing the call keyword arguments (line 309)
        kwargs_572128 = {}
        # Getting the type of '_mode1D' (line 309)
        _mode1D_572122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 17), '_mode1D', False)
        # Calling _mode1D(args, kwargs) (line 309)
        _mode1D_call_result_572129 = invoke(stypy.reporting.localization.Localization(__file__, 309, 17), _mode1D_572122, *[ravel_call_result_572127], **kwargs_572128)
        
        # Assigning a type to the variable 'output' (line 309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'output', _mode1D_call_result_572129)
        
        # Assigning a Tuple to a Name (line 310):
        
        # Assigning a Tuple to a Name (line 310):
        
        # Obtaining an instance of the builtin type 'tuple' (line 310)
        tuple_572130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 310)
        # Adding element type (line 310)
        
        # Call to array(...): (line 310)
        # Processing the call arguments (line 310)
        
        # Obtaining the type of the subscript
        int_572133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 34), 'int')
        # Getting the type of 'output' (line 310)
        output_572134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 27), 'output', False)
        # Obtaining the member '__getitem__' of a type (line 310)
        getitem___572135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 27), output_572134, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 310)
        subscript_call_result_572136 = invoke(stypy.reporting.localization.Localization(__file__, 310, 27), getitem___572135, int_572133)
        
        # Processing the call keyword arguments (line 310)
        kwargs_572137 = {}
        # Getting the type of 'ma' (line 310)
        ma_572131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 18), 'ma', False)
        # Obtaining the member 'array' of a type (line 310)
        array_572132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 18), ma_572131, 'array')
        # Calling array(args, kwargs) (line 310)
        array_call_result_572138 = invoke(stypy.reporting.localization.Localization(__file__, 310, 18), array_572132, *[subscript_call_result_572136], **kwargs_572137)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 310, 18), tuple_572130, array_call_result_572138)
        # Adding element type (line 310)
        
        # Call to array(...): (line 310)
        # Processing the call arguments (line 310)
        
        # Obtaining the type of the subscript
        int_572141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 55), 'int')
        # Getting the type of 'output' (line 310)
        output_572142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 48), 'output', False)
        # Obtaining the member '__getitem__' of a type (line 310)
        getitem___572143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 48), output_572142, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 310)
        subscript_call_result_572144 = invoke(stypy.reporting.localization.Localization(__file__, 310, 48), getitem___572143, int_572141)
        
        # Processing the call keyword arguments (line 310)
        kwargs_572145 = {}
        # Getting the type of 'ma' (line 310)
        ma_572139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 39), 'ma', False)
        # Obtaining the member 'array' of a type (line 310)
        array_572140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 39), ma_572139, 'array')
        # Calling array(args, kwargs) (line 310)
        array_call_result_572146 = invoke(stypy.reporting.localization.Localization(__file__, 310, 39), array_572140, *[subscript_call_result_572144], **kwargs_572145)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 310, 18), tuple_572130, array_call_result_572146)
        
        # Assigning a type to the variable 'output' (line 310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 8), 'output', tuple_572130)

        if more_types_in_union_572121:
            # Runtime conditional SSA for else branch (line 308)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_572120) or more_types_in_union_572121):
        
        # Assigning a Call to a Name (line 312):
        
        # Assigning a Call to a Name (line 312):
        
        # Call to apply_along_axis(...): (line 312)
        # Processing the call arguments (line 312)
        # Getting the type of '_mode1D' (line 312)
        _mode1D_572149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 37), '_mode1D', False)
        # Getting the type of 'axis' (line 312)
        axis_572150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 46), 'axis', False)
        # Getting the type of 'a' (line 312)
        a_572151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 52), 'a', False)
        # Processing the call keyword arguments (line 312)
        kwargs_572152 = {}
        # Getting the type of 'ma' (line 312)
        ma_572147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 17), 'ma', False)
        # Obtaining the member 'apply_along_axis' of a type (line 312)
        apply_along_axis_572148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 17), ma_572147, 'apply_along_axis')
        # Calling apply_along_axis(args, kwargs) (line 312)
        apply_along_axis_call_result_572153 = invoke(stypy.reporting.localization.Localization(__file__, 312, 17), apply_along_axis_572148, *[_mode1D_572149, axis_572150, a_572151], **kwargs_572152)
        
        # Assigning a type to the variable 'output' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'output', apply_along_axis_call_result_572153)
        
        # Assigning a Call to a Name (line 313):
        
        # Assigning a Call to a Name (line 313):
        
        # Call to list(...): (line 313)
        # Processing the call arguments (line 313)
        # Getting the type of 'a' (line 313)
        a_572155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 24), 'a', False)
        # Obtaining the member 'shape' of a type (line 313)
        shape_572156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 24), a_572155, 'shape')
        # Processing the call keyword arguments (line 313)
        kwargs_572157 = {}
        # Getting the type of 'list' (line 313)
        list_572154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 19), 'list', False)
        # Calling list(args, kwargs) (line 313)
        list_call_result_572158 = invoke(stypy.reporting.localization.Localization(__file__, 313, 19), list_572154, *[shape_572156], **kwargs_572157)
        
        # Assigning a type to the variable 'newshape' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 8), 'newshape', list_call_result_572158)
        
        # Assigning a Num to a Subscript (line 314):
        
        # Assigning a Num to a Subscript (line 314):
        int_572159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 25), 'int')
        # Getting the type of 'newshape' (line 314)
        newshape_572160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'newshape')
        # Getting the type of 'axis' (line 314)
        axis_572161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 17), 'axis')
        # Storing an element on a container (line 314)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 314, 8), newshape_572160, (axis_572161, int_572159))
        
        # Assigning a BinOp to a Name (line 315):
        
        # Assigning a BinOp to a Name (line 315):
        
        # Obtaining an instance of the builtin type 'list' (line 315)
        list_572162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 315)
        # Adding element type (line 315)
        
        # Call to slice(...): (line 315)
        # Processing the call arguments (line 315)
        # Getting the type of 'None' (line 315)
        None_572164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 24), 'None', False)
        # Processing the call keyword arguments (line 315)
        kwargs_572165 = {}
        # Getting the type of 'slice' (line 315)
        slice_572163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 18), 'slice', False)
        # Calling slice(args, kwargs) (line 315)
        slice_call_result_572166 = invoke(stypy.reporting.localization.Localization(__file__, 315, 18), slice_572163, *[None_572164], **kwargs_572165)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 315, 17), list_572162, slice_call_result_572166)
        
        # Getting the type of 'output' (line 315)
        output_572167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 33), 'output')
        # Obtaining the member 'ndim' of a type (line 315)
        ndim_572168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 33), output_572167, 'ndim')
        # Applying the binary operator '*' (line 315)
        result_mul_572169 = python_operator(stypy.reporting.localization.Localization(__file__, 315, 17), '*', list_572162, ndim_572168)
        
        # Assigning a type to the variable 'slices' (line 315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 8), 'slices', result_mul_572169)
        
        # Assigning a Num to a Subscript (line 316):
        
        # Assigning a Num to a Subscript (line 316):
        int_572170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 23), 'int')
        # Getting the type of 'slices' (line 316)
        slices_572171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'slices')
        # Getting the type of 'axis' (line 316)
        axis_572172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 15), 'axis')
        # Storing an element on a container (line 316)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 316, 8), slices_572171, (axis_572172, int_572170))
        
        # Assigning a Call to a Name (line 317):
        
        # Assigning a Call to a Name (line 317):
        
        # Call to reshape(...): (line 317)
        # Processing the call arguments (line 317)
        # Getting the type of 'newshape' (line 317)
        newshape_572181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 46), 'newshape', False)
        # Processing the call keyword arguments (line 317)
        kwargs_572182 = {}
        
        # Obtaining the type of the subscript
        
        # Call to tuple(...): (line 317)
        # Processing the call arguments (line 317)
        # Getting the type of 'slices' (line 317)
        slices_572174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 29), 'slices', False)
        # Processing the call keyword arguments (line 317)
        kwargs_572175 = {}
        # Getting the type of 'tuple' (line 317)
        tuple_572173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 23), 'tuple', False)
        # Calling tuple(args, kwargs) (line 317)
        tuple_call_result_572176 = invoke(stypy.reporting.localization.Localization(__file__, 317, 23), tuple_572173, *[slices_572174], **kwargs_572175)
        
        # Getting the type of 'output' (line 317)
        output_572177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 16), 'output', False)
        # Obtaining the member '__getitem__' of a type (line 317)
        getitem___572178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 16), output_572177, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 317)
        subscript_call_result_572179 = invoke(stypy.reporting.localization.Localization(__file__, 317, 16), getitem___572178, tuple_call_result_572176)
        
        # Obtaining the member 'reshape' of a type (line 317)
        reshape_572180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 16), subscript_call_result_572179, 'reshape')
        # Calling reshape(args, kwargs) (line 317)
        reshape_call_result_572183 = invoke(stypy.reporting.localization.Localization(__file__, 317, 16), reshape_572180, *[newshape_572181], **kwargs_572182)
        
        # Assigning a type to the variable 'modes' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 8), 'modes', reshape_call_result_572183)
        
        # Assigning a Num to a Subscript (line 318):
        
        # Assigning a Num to a Subscript (line 318):
        int_572184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 23), 'int')
        # Getting the type of 'slices' (line 318)
        slices_572185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 8), 'slices')
        # Getting the type of 'axis' (line 318)
        axis_572186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 15), 'axis')
        # Storing an element on a container (line 318)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 8), slices_572185, (axis_572186, int_572184))
        
        # Assigning a Call to a Name (line 319):
        
        # Assigning a Call to a Name (line 319):
        
        # Call to reshape(...): (line 319)
        # Processing the call arguments (line 319)
        # Getting the type of 'newshape' (line 319)
        newshape_572195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 47), 'newshape', False)
        # Processing the call keyword arguments (line 319)
        kwargs_572196 = {}
        
        # Obtaining the type of the subscript
        
        # Call to tuple(...): (line 319)
        # Processing the call arguments (line 319)
        # Getting the type of 'slices' (line 319)
        slices_572188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 30), 'slices', False)
        # Processing the call keyword arguments (line 319)
        kwargs_572189 = {}
        # Getting the type of 'tuple' (line 319)
        tuple_572187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 24), 'tuple', False)
        # Calling tuple(args, kwargs) (line 319)
        tuple_call_result_572190 = invoke(stypy.reporting.localization.Localization(__file__, 319, 24), tuple_572187, *[slices_572188], **kwargs_572189)
        
        # Getting the type of 'output' (line 319)
        output_572191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 17), 'output', False)
        # Obtaining the member '__getitem__' of a type (line 319)
        getitem___572192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 17), output_572191, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 319)
        subscript_call_result_572193 = invoke(stypy.reporting.localization.Localization(__file__, 319, 17), getitem___572192, tuple_call_result_572190)
        
        # Obtaining the member 'reshape' of a type (line 319)
        reshape_572194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 17), subscript_call_result_572193, 'reshape')
        # Calling reshape(args, kwargs) (line 319)
        reshape_call_result_572197 = invoke(stypy.reporting.localization.Localization(__file__, 319, 17), reshape_572194, *[newshape_572195], **kwargs_572196)
        
        # Assigning a type to the variable 'counts' (line 319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 319, 8), 'counts', reshape_call_result_572197)
        
        # Assigning a Tuple to a Name (line 320):
        
        # Assigning a Tuple to a Name (line 320):
        
        # Obtaining an instance of the builtin type 'tuple' (line 320)
        tuple_572198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 320)
        # Adding element type (line 320)
        # Getting the type of 'modes' (line 320)
        modes_572199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 18), 'modes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 320, 18), tuple_572198, modes_572199)
        # Adding element type (line 320)
        # Getting the type of 'counts' (line 320)
        counts_572200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 25), 'counts')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 320, 18), tuple_572198, counts_572200)
        
        # Assigning a type to the variable 'output' (line 320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 8), 'output', tuple_572198)

        if (may_be_572120 and more_types_in_union_572121):
            # SSA join for if statement (line 308)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to ModeResult(...): (line 322)
    # Getting the type of 'output' (line 322)
    output_572202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 23), 'output', False)
    # Processing the call keyword arguments (line 322)
    kwargs_572203 = {}
    # Getting the type of 'ModeResult' (line 322)
    ModeResult_572201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 11), 'ModeResult', False)
    # Calling ModeResult(args, kwargs) (line 322)
    ModeResult_call_result_572204 = invoke(stypy.reporting.localization.Localization(__file__, 322, 11), ModeResult_572201, *[output_572202], **kwargs_572203)
    
    # Assigning a type to the variable 'stypy_return_type' (line 322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 4), 'stypy_return_type', ModeResult_call_result_572204)
    
    # ################# End of 'mode(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mode' in the type store
    # Getting the type of 'stypy_return_type' (line 271)
    stypy_return_type_572205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_572205)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mode'
    return stypy_return_type_572205

# Assigning a type to the variable 'mode' (line 271)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 0), 'mode', mode)

@norecursion
def _betai(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_betai'
    module_type_store = module_type_store.open_function_context('_betai', 325, 0, False)
    
    # Passed parameters checking function
    _betai.stypy_localization = localization
    _betai.stypy_type_of_self = None
    _betai.stypy_type_store = module_type_store
    _betai.stypy_function_name = '_betai'
    _betai.stypy_param_names_list = ['a', 'b', 'x']
    _betai.stypy_varargs_param_name = None
    _betai.stypy_kwargs_param_name = None
    _betai.stypy_call_defaults = defaults
    _betai.stypy_call_varargs = varargs
    _betai.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_betai', ['a', 'b', 'x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_betai', localization, ['a', 'b', 'x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_betai(...)' code ##################

    
    # Assigning a Call to a Name (line 326):
    
    # Assigning a Call to a Name (line 326):
    
    # Call to asanyarray(...): (line 326)
    # Processing the call arguments (line 326)
    # Getting the type of 'x' (line 326)
    x_572208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 22), 'x', False)
    # Processing the call keyword arguments (line 326)
    kwargs_572209 = {}
    # Getting the type of 'np' (line 326)
    np_572206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 326)
    asanyarray_572207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 8), np_572206, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 326)
    asanyarray_call_result_572210 = invoke(stypy.reporting.localization.Localization(__file__, 326, 8), asanyarray_572207, *[x_572208], **kwargs_572209)
    
    # Assigning a type to the variable 'x' (line 326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 4), 'x', asanyarray_call_result_572210)
    
    # Assigning a Call to a Name (line 327):
    
    # Assigning a Call to a Name (line 327):
    
    # Call to where(...): (line 327)
    # Processing the call arguments (line 327)
    
    # Getting the type of 'x' (line 327)
    x_572213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 17), 'x', False)
    float_572214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 21), 'float')
    # Applying the binary operator '<' (line 327)
    result_lt_572215 = python_operator(stypy.reporting.localization.Localization(__file__, 327, 17), '<', x_572213, float_572214)
    
    # Getting the type of 'x' (line 327)
    x_572216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 26), 'x', False)
    float_572217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 29), 'float')
    # Processing the call keyword arguments (line 327)
    kwargs_572218 = {}
    # Getting the type of 'ma' (line 327)
    ma_572211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'ma', False)
    # Obtaining the member 'where' of a type (line 327)
    where_572212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 8), ma_572211, 'where')
    # Calling where(args, kwargs) (line 327)
    where_call_result_572219 = invoke(stypy.reporting.localization.Localization(__file__, 327, 8), where_572212, *[result_lt_572215, x_572216, float_572217], **kwargs_572218)
    
    # Assigning a type to the variable 'x' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'x', where_call_result_572219)
    
    # Call to betainc(...): (line 328)
    # Processing the call arguments (line 328)
    # Getting the type of 'a' (line 328)
    a_572222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 27), 'a', False)
    # Getting the type of 'b' (line 328)
    b_572223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 30), 'b', False)
    # Getting the type of 'x' (line 328)
    x_572224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 33), 'x', False)
    # Processing the call keyword arguments (line 328)
    kwargs_572225 = {}
    # Getting the type of 'special' (line 328)
    special_572220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 11), 'special', False)
    # Obtaining the member 'betainc' of a type (line 328)
    betainc_572221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 11), special_572220, 'betainc')
    # Calling betainc(args, kwargs) (line 328)
    betainc_call_result_572226 = invoke(stypy.reporting.localization.Localization(__file__, 328, 11), betainc_572221, *[a_572222, b_572223, x_572224], **kwargs_572225)
    
    # Assigning a type to the variable 'stypy_return_type' (line 328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 4), 'stypy_return_type', betainc_call_result_572226)
    
    # ################# End of '_betai(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_betai' in the type store
    # Getting the type of 'stypy_return_type' (line 325)
    stypy_return_type_572227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_572227)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_betai'
    return stypy_return_type_572227

# Assigning a type to the variable '_betai' (line 325)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 0), '_betai', _betai)

@norecursion
def msign(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'msign'
    module_type_store = module_type_store.open_function_context('msign', 331, 0, False)
    
    # Passed parameters checking function
    msign.stypy_localization = localization
    msign.stypy_type_of_self = None
    msign.stypy_type_store = module_type_store
    msign.stypy_function_name = 'msign'
    msign.stypy_param_names_list = ['x']
    msign.stypy_varargs_param_name = None
    msign.stypy_kwargs_param_name = None
    msign.stypy_call_defaults = defaults
    msign.stypy_call_varargs = varargs
    msign.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'msign', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'msign', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'msign(...)' code ##################

    str_572228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 4), 'str', 'Returns the sign of x, or 0 if x is masked.')
    
    # Call to filled(...): (line 333)
    # Processing the call arguments (line 333)
    
    # Call to sign(...): (line 333)
    # Processing the call arguments (line 333)
    # Getting the type of 'x' (line 333)
    x_572233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 29), 'x', False)
    # Processing the call keyword arguments (line 333)
    kwargs_572234 = {}
    # Getting the type of 'np' (line 333)
    np_572231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 21), 'np', False)
    # Obtaining the member 'sign' of a type (line 333)
    sign_572232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 21), np_572231, 'sign')
    # Calling sign(args, kwargs) (line 333)
    sign_call_result_572235 = invoke(stypy.reporting.localization.Localization(__file__, 333, 21), sign_572232, *[x_572233], **kwargs_572234)
    
    int_572236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 33), 'int')
    # Processing the call keyword arguments (line 333)
    kwargs_572237 = {}
    # Getting the type of 'ma' (line 333)
    ma_572229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 11), 'ma', False)
    # Obtaining the member 'filled' of a type (line 333)
    filled_572230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 11), ma_572229, 'filled')
    # Calling filled(args, kwargs) (line 333)
    filled_call_result_572238 = invoke(stypy.reporting.localization.Localization(__file__, 333, 11), filled_572230, *[sign_call_result_572235, int_572236], **kwargs_572237)
    
    # Assigning a type to the variable 'stypy_return_type' (line 333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 4), 'stypy_return_type', filled_call_result_572238)
    
    # ################# End of 'msign(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'msign' in the type store
    # Getting the type of 'stypy_return_type' (line 331)
    stypy_return_type_572239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_572239)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'msign'
    return stypy_return_type_572239

# Assigning a type to the variable 'msign' (line 331)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 0), 'msign', msign)

@norecursion
def pearsonr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pearsonr'
    module_type_store = module_type_store.open_function_context('pearsonr', 336, 0, False)
    
    # Passed parameters checking function
    pearsonr.stypy_localization = localization
    pearsonr.stypy_type_of_self = None
    pearsonr.stypy_type_store = module_type_store
    pearsonr.stypy_function_name = 'pearsonr'
    pearsonr.stypy_param_names_list = ['x', 'y']
    pearsonr.stypy_varargs_param_name = None
    pearsonr.stypy_kwargs_param_name = None
    pearsonr.stypy_call_defaults = defaults
    pearsonr.stypy_call_varargs = varargs
    pearsonr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pearsonr', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pearsonr', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pearsonr(...)' code ##################

    str_572240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, (-1)), 'str', "\n    Calculates a Pearson correlation coefficient and the p-value for testing\n    non-correlation.\n\n    The Pearson correlation coefficient measures the linear relationship\n    between two datasets. Strictly speaking, Pearson's correlation requires\n    that each dataset be normally distributed. Like other correlation\n    coefficients, this one varies between -1 and +1 with 0 implying no\n    correlation. Correlations of -1 or +1 imply an exact linear\n    relationship. Positive correlations imply that as `x` increases, so does\n    `y`. Negative correlations imply that as `x` increases, `y` decreases.\n\n    The p-value roughly indicates the probability of an uncorrelated system\n    producing datasets that have a Pearson correlation at least as extreme\n    as the one computed from these datasets. The p-values are not entirely\n    reliable but are probably reasonable for datasets larger than 500 or so.\n\n    Parameters\n    ----------\n    x : 1-D array_like\n        Input\n    y : 1-D array_like\n        Input\n\n    Returns\n    -------\n    pearsonr : float\n        Pearson's correlation coefficient, 2-tailed p-value.\n\n    References\n    ----------\n    http://www.statsoft.com/textbook/glosp.html#Pearson%20Correlation\n\n    ")
    
    # Assigning a Call to a Tuple (line 371):
    
    # Assigning a Subscript to a Name (line 371):
    
    # Obtaining the type of the subscript
    int_572241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 4), 'int')
    
    # Call to _chk_size(...): (line 371)
    # Processing the call arguments (line 371)
    # Getting the type of 'x' (line 371)
    x_572243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 26), 'x', False)
    # Getting the type of 'y' (line 371)
    y_572244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 29), 'y', False)
    # Processing the call keyword arguments (line 371)
    kwargs_572245 = {}
    # Getting the type of '_chk_size' (line 371)
    _chk_size_572242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 16), '_chk_size', False)
    # Calling _chk_size(args, kwargs) (line 371)
    _chk_size_call_result_572246 = invoke(stypy.reporting.localization.Localization(__file__, 371, 16), _chk_size_572242, *[x_572243, y_572244], **kwargs_572245)
    
    # Obtaining the member '__getitem__' of a type (line 371)
    getitem___572247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 4), _chk_size_call_result_572246, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 371)
    subscript_call_result_572248 = invoke(stypy.reporting.localization.Localization(__file__, 371, 4), getitem___572247, int_572241)
    
    # Assigning a type to the variable 'tuple_var_assignment_571432' (line 371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'tuple_var_assignment_571432', subscript_call_result_572248)
    
    # Assigning a Subscript to a Name (line 371):
    
    # Obtaining the type of the subscript
    int_572249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 4), 'int')
    
    # Call to _chk_size(...): (line 371)
    # Processing the call arguments (line 371)
    # Getting the type of 'x' (line 371)
    x_572251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 26), 'x', False)
    # Getting the type of 'y' (line 371)
    y_572252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 29), 'y', False)
    # Processing the call keyword arguments (line 371)
    kwargs_572253 = {}
    # Getting the type of '_chk_size' (line 371)
    _chk_size_572250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 16), '_chk_size', False)
    # Calling _chk_size(args, kwargs) (line 371)
    _chk_size_call_result_572254 = invoke(stypy.reporting.localization.Localization(__file__, 371, 16), _chk_size_572250, *[x_572251, y_572252], **kwargs_572253)
    
    # Obtaining the member '__getitem__' of a type (line 371)
    getitem___572255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 4), _chk_size_call_result_572254, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 371)
    subscript_call_result_572256 = invoke(stypy.reporting.localization.Localization(__file__, 371, 4), getitem___572255, int_572249)
    
    # Assigning a type to the variable 'tuple_var_assignment_571433' (line 371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'tuple_var_assignment_571433', subscript_call_result_572256)
    
    # Assigning a Subscript to a Name (line 371):
    
    # Obtaining the type of the subscript
    int_572257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 4), 'int')
    
    # Call to _chk_size(...): (line 371)
    # Processing the call arguments (line 371)
    # Getting the type of 'x' (line 371)
    x_572259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 26), 'x', False)
    # Getting the type of 'y' (line 371)
    y_572260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 29), 'y', False)
    # Processing the call keyword arguments (line 371)
    kwargs_572261 = {}
    # Getting the type of '_chk_size' (line 371)
    _chk_size_572258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 16), '_chk_size', False)
    # Calling _chk_size(args, kwargs) (line 371)
    _chk_size_call_result_572262 = invoke(stypy.reporting.localization.Localization(__file__, 371, 16), _chk_size_572258, *[x_572259, y_572260], **kwargs_572261)
    
    # Obtaining the member '__getitem__' of a type (line 371)
    getitem___572263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 4), _chk_size_call_result_572262, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 371)
    subscript_call_result_572264 = invoke(stypy.reporting.localization.Localization(__file__, 371, 4), getitem___572263, int_572257)
    
    # Assigning a type to the variable 'tuple_var_assignment_571434' (line 371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'tuple_var_assignment_571434', subscript_call_result_572264)
    
    # Assigning a Name to a Name (line 371):
    # Getting the type of 'tuple_var_assignment_571432' (line 371)
    tuple_var_assignment_571432_572265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'tuple_var_assignment_571432')
    # Assigning a type to the variable 'x' (line 371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 5), 'x', tuple_var_assignment_571432_572265)
    
    # Assigning a Name to a Name (line 371):
    # Getting the type of 'tuple_var_assignment_571433' (line 371)
    tuple_var_assignment_571433_572266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'tuple_var_assignment_571433')
    # Assigning a type to the variable 'y' (line 371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 8), 'y', tuple_var_assignment_571433_572266)
    
    # Assigning a Name to a Name (line 371):
    # Getting the type of 'tuple_var_assignment_571434' (line 371)
    tuple_var_assignment_571434_572267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'tuple_var_assignment_571434')
    # Assigning a type to the variable 'n' (line 371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 11), 'n', tuple_var_assignment_571434_572267)
    
    # Assigning a Tuple to a Tuple (line 372):
    
    # Assigning a Call to a Name (line 372):
    
    # Call to ravel(...): (line 372)
    # Processing the call keyword arguments (line 372)
    kwargs_572270 = {}
    # Getting the type of 'x' (line 372)
    x_572268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 14), 'x', False)
    # Obtaining the member 'ravel' of a type (line 372)
    ravel_572269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 14), x_572268, 'ravel')
    # Calling ravel(args, kwargs) (line 372)
    ravel_call_result_572271 = invoke(stypy.reporting.localization.Localization(__file__, 372, 14), ravel_572269, *[], **kwargs_572270)
    
    # Assigning a type to the variable 'tuple_assignment_571435' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'tuple_assignment_571435', ravel_call_result_572271)
    
    # Assigning a Call to a Name (line 372):
    
    # Call to ravel(...): (line 372)
    # Processing the call keyword arguments (line 372)
    kwargs_572274 = {}
    # Getting the type of 'y' (line 372)
    y_572272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 25), 'y', False)
    # Obtaining the member 'ravel' of a type (line 372)
    ravel_572273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 25), y_572272, 'ravel')
    # Calling ravel(args, kwargs) (line 372)
    ravel_call_result_572275 = invoke(stypy.reporting.localization.Localization(__file__, 372, 25), ravel_572273, *[], **kwargs_572274)
    
    # Assigning a type to the variable 'tuple_assignment_571436' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'tuple_assignment_571436', ravel_call_result_572275)
    
    # Assigning a Name to a Name (line 372):
    # Getting the type of 'tuple_assignment_571435' (line 372)
    tuple_assignment_571435_572276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'tuple_assignment_571435')
    # Assigning a type to the variable 'x' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 5), 'x', tuple_assignment_571435_572276)
    
    # Assigning a Name to a Name (line 372):
    # Getting the type of 'tuple_assignment_571436' (line 372)
    tuple_assignment_571436_572277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'tuple_assignment_571436')
    # Assigning a type to the variable 'y' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 8), 'y', tuple_assignment_571436_572277)
    
    # Assigning a Call to a Name (line 374):
    
    # Assigning a Call to a Name (line 374):
    
    # Call to mask_or(...): (line 374)
    # Processing the call arguments (line 374)
    
    # Call to getmask(...): (line 374)
    # Processing the call arguments (line 374)
    # Getting the type of 'x' (line 374)
    x_572282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 30), 'x', False)
    # Processing the call keyword arguments (line 374)
    kwargs_572283 = {}
    # Getting the type of 'ma' (line 374)
    ma_572280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 19), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 374)
    getmask_572281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 19), ma_572280, 'getmask')
    # Calling getmask(args, kwargs) (line 374)
    getmask_call_result_572284 = invoke(stypy.reporting.localization.Localization(__file__, 374, 19), getmask_572281, *[x_572282], **kwargs_572283)
    
    
    # Call to getmask(...): (line 374)
    # Processing the call arguments (line 374)
    # Getting the type of 'y' (line 374)
    y_572287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 45), 'y', False)
    # Processing the call keyword arguments (line 374)
    kwargs_572288 = {}
    # Getting the type of 'ma' (line 374)
    ma_572285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 34), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 374)
    getmask_572286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 34), ma_572285, 'getmask')
    # Calling getmask(args, kwargs) (line 374)
    getmask_call_result_572289 = invoke(stypy.reporting.localization.Localization(__file__, 374, 34), getmask_572286, *[y_572287], **kwargs_572288)
    
    # Processing the call keyword arguments (line 374)
    kwargs_572290 = {}
    # Getting the type of 'ma' (line 374)
    ma_572278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 8), 'ma', False)
    # Obtaining the member 'mask_or' of a type (line 374)
    mask_or_572279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 8), ma_572278, 'mask_or')
    # Calling mask_or(args, kwargs) (line 374)
    mask_or_call_result_572291 = invoke(stypy.reporting.localization.Localization(__file__, 374, 8), mask_or_572279, *[getmask_call_result_572284, getmask_call_result_572289], **kwargs_572290)
    
    # Assigning a type to the variable 'm' (line 374)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 4), 'm', mask_or_call_result_572291)
    
    # Getting the type of 'n' (line 375)
    n_572292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 4), 'n')
    
    # Call to sum(...): (line 375)
    # Processing the call keyword arguments (line 375)
    kwargs_572295 = {}
    # Getting the type of 'm' (line 375)
    m_572293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 9), 'm', False)
    # Obtaining the member 'sum' of a type (line 375)
    sum_572294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 9), m_572293, 'sum')
    # Calling sum(args, kwargs) (line 375)
    sum_call_result_572296 = invoke(stypy.reporting.localization.Localization(__file__, 375, 9), sum_572294, *[], **kwargs_572295)
    
    # Applying the binary operator '-=' (line 375)
    result_isub_572297 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 4), '-=', n_572292, sum_call_result_572296)
    # Assigning a type to the variable 'n' (line 375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 4), 'n', result_isub_572297)
    
    
    # Assigning a BinOp to a Name (line 376):
    
    # Assigning a BinOp to a Name (line 376):
    # Getting the type of 'n' (line 376)
    n_572298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 9), 'n')
    int_572299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 11), 'int')
    # Applying the binary operator '-' (line 376)
    result_sub_572300 = python_operator(stypy.reporting.localization.Localization(__file__, 376, 9), '-', n_572298, int_572299)
    
    # Assigning a type to the variable 'df' (line 376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 4), 'df', result_sub_572300)
    
    
    # Getting the type of 'df' (line 377)
    df_572301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 7), 'df')
    int_572302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 12), 'int')
    # Applying the binary operator '<' (line 377)
    result_lt_572303 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 7), '<', df_572301, int_572302)
    
    # Testing the type of an if condition (line 377)
    if_condition_572304 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 377, 4), result_lt_572303)
    # Assigning a type to the variable 'if_condition_572304' (line 377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 4), 'if_condition_572304', if_condition_572304)
    # SSA begins for if statement (line 377)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 378)
    tuple_572305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 378)
    # Adding element type (line 378)
    # Getting the type of 'masked' (line 378)
    masked_572306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 16), 'masked')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 378, 16), tuple_572305, masked_572306)
    # Adding element type (line 378)
    # Getting the type of 'masked' (line 378)
    masked_572307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 24), 'masked')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 378, 16), tuple_572305, masked_572307)
    
    # Assigning a type to the variable 'stypy_return_type' (line 378)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'stypy_return_type', tuple_572305)
    # SSA join for if statement (line 377)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Tuple (line 380):
    
    # Assigning a Call to a Name (line 380):
    
    # Call to mean(...): (line 380)
    # Processing the call keyword arguments (line 380)
    kwargs_572310 = {}
    # Getting the type of 'x' (line 380)
    x_572308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 16), 'x', False)
    # Obtaining the member 'mean' of a type (line 380)
    mean_572309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 16), x_572308, 'mean')
    # Calling mean(args, kwargs) (line 380)
    mean_call_result_572311 = invoke(stypy.reporting.localization.Localization(__file__, 380, 16), mean_572309, *[], **kwargs_572310)
    
    # Assigning a type to the variable 'tuple_assignment_571437' (line 380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'tuple_assignment_571437', mean_call_result_572311)
    
    # Assigning a Call to a Name (line 380):
    
    # Call to mean(...): (line 380)
    # Processing the call keyword arguments (line 380)
    kwargs_572314 = {}
    # Getting the type of 'y' (line 380)
    y_572312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 26), 'y', False)
    # Obtaining the member 'mean' of a type (line 380)
    mean_572313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 26), y_572312, 'mean')
    # Calling mean(args, kwargs) (line 380)
    mean_call_result_572315 = invoke(stypy.reporting.localization.Localization(__file__, 380, 26), mean_572313, *[], **kwargs_572314)
    
    # Assigning a type to the variable 'tuple_assignment_571438' (line 380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'tuple_assignment_571438', mean_call_result_572315)
    
    # Assigning a Name to a Name (line 380):
    # Getting the type of 'tuple_assignment_571437' (line 380)
    tuple_assignment_571437_572316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'tuple_assignment_571437')
    # Assigning a type to the variable 'mx' (line 380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 5), 'mx', tuple_assignment_571437_572316)
    
    # Assigning a Name to a Name (line 380):
    # Getting the type of 'tuple_assignment_571438' (line 380)
    tuple_assignment_571438_572317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'tuple_assignment_571438')
    # Assigning a type to the variable 'my' (line 380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 9), 'my', tuple_assignment_571438_572317)
    
    # Assigning a Tuple to a Tuple (line 381):
    
    # Assigning a BinOp to a Name (line 381):
    # Getting the type of 'x' (line 381)
    x_572318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 16), 'x')
    # Getting the type of 'mx' (line 381)
    mx_572319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 18), 'mx')
    # Applying the binary operator '-' (line 381)
    result_sub_572320 = python_operator(stypy.reporting.localization.Localization(__file__, 381, 16), '-', x_572318, mx_572319)
    
    # Assigning a type to the variable 'tuple_assignment_571439' (line 381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'tuple_assignment_571439', result_sub_572320)
    
    # Assigning a BinOp to a Name (line 381):
    # Getting the type of 'y' (line 381)
    y_572321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 22), 'y')
    # Getting the type of 'my' (line 381)
    my_572322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 24), 'my')
    # Applying the binary operator '-' (line 381)
    result_sub_572323 = python_operator(stypy.reporting.localization.Localization(__file__, 381, 22), '-', y_572321, my_572322)
    
    # Assigning a type to the variable 'tuple_assignment_571440' (line 381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'tuple_assignment_571440', result_sub_572323)
    
    # Assigning a Name to a Name (line 381):
    # Getting the type of 'tuple_assignment_571439' (line 381)
    tuple_assignment_571439_572324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'tuple_assignment_571439')
    # Assigning a type to the variable 'xm' (line 381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 5), 'xm', tuple_assignment_571439_572324)
    
    # Assigning a Name to a Name (line 381):
    # Getting the type of 'tuple_assignment_571440' (line 381)
    tuple_assignment_571440_572325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'tuple_assignment_571440')
    # Assigning a type to the variable 'ym' (line 381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 9), 'ym', tuple_assignment_571440_572325)
    
    # Assigning a Call to a Name (line 383):
    
    # Assigning a Call to a Name (line 383):
    
    # Call to reduce(...): (line 383)
    # Processing the call arguments (line 383)
    # Getting the type of 'xm' (line 383)
    xm_572329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 26), 'xm', False)
    # Getting the type of 'ym' (line 383)
    ym_572330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 29), 'ym', False)
    # Applying the binary operator '*' (line 383)
    result_mul_572331 = python_operator(stypy.reporting.localization.Localization(__file__, 383, 26), '*', xm_572329, ym_572330)
    
    # Processing the call keyword arguments (line 383)
    kwargs_572332 = {}
    # Getting the type of 'ma' (line 383)
    ma_572326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 12), 'ma', False)
    # Obtaining the member 'add' of a type (line 383)
    add_572327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 12), ma_572326, 'add')
    # Obtaining the member 'reduce' of a type (line 383)
    reduce_572328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 12), add_572327, 'reduce')
    # Calling reduce(args, kwargs) (line 383)
    reduce_call_result_572333 = invoke(stypy.reporting.localization.Localization(__file__, 383, 12), reduce_572328, *[result_mul_572331], **kwargs_572332)
    
    # Assigning a type to the variable 'r_num' (line 383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 4), 'r_num', reduce_call_result_572333)
    
    # Assigning a Call to a Name (line 384):
    
    # Assigning a Call to a Name (line 384):
    
    # Call to sqrt(...): (line 384)
    # Processing the call arguments (line 384)
    
    # Call to dot(...): (line 384)
    # Processing the call arguments (line 384)
    # Getting the type of 'xm' (line 384)
    xm_572338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 27), 'xm', False)
    # Getting the type of 'xm' (line 384)
    xm_572339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 30), 'xm', False)
    # Processing the call keyword arguments (line 384)
    kwargs_572340 = {}
    # Getting the type of 'ma' (line 384)
    ma_572336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 20), 'ma', False)
    # Obtaining the member 'dot' of a type (line 384)
    dot_572337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 20), ma_572336, 'dot')
    # Calling dot(args, kwargs) (line 384)
    dot_call_result_572341 = invoke(stypy.reporting.localization.Localization(__file__, 384, 20), dot_572337, *[xm_572338, xm_572339], **kwargs_572340)
    
    
    # Call to dot(...): (line 384)
    # Processing the call arguments (line 384)
    # Getting the type of 'ym' (line 384)
    ym_572344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 43), 'ym', False)
    # Getting the type of 'ym' (line 384)
    ym_572345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 46), 'ym', False)
    # Processing the call keyword arguments (line 384)
    kwargs_572346 = {}
    # Getting the type of 'ma' (line 384)
    ma_572342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 36), 'ma', False)
    # Obtaining the member 'dot' of a type (line 384)
    dot_572343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 36), ma_572342, 'dot')
    # Calling dot(args, kwargs) (line 384)
    dot_call_result_572347 = invoke(stypy.reporting.localization.Localization(__file__, 384, 36), dot_572343, *[ym_572344, ym_572345], **kwargs_572346)
    
    # Applying the binary operator '*' (line 384)
    result_mul_572348 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 20), '*', dot_call_result_572341, dot_call_result_572347)
    
    # Processing the call keyword arguments (line 384)
    kwargs_572349 = {}
    # Getting the type of 'ma' (line 384)
    ma_572334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 12), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 384)
    sqrt_572335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 12), ma_572334, 'sqrt')
    # Calling sqrt(args, kwargs) (line 384)
    sqrt_call_result_572350 = invoke(stypy.reporting.localization.Localization(__file__, 384, 12), sqrt_572335, *[result_mul_572348], **kwargs_572349)
    
    # Assigning a type to the variable 'r_den' (line 384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 4), 'r_den', sqrt_call_result_572350)
    
    # Assigning a BinOp to a Name (line 385):
    
    # Assigning a BinOp to a Name (line 385):
    # Getting the type of 'r_num' (line 385)
    r_num_572351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 8), 'r_num')
    # Getting the type of 'r_den' (line 385)
    r_den_572352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 16), 'r_den')
    # Applying the binary operator 'div' (line 385)
    result_div_572353 = python_operator(stypy.reporting.localization.Localization(__file__, 385, 8), 'div', r_num_572351, r_den_572352)
    
    # Assigning a type to the variable 'r' (line 385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 4), 'r', result_div_572353)
    
    # Assigning a Call to a Name (line 388):
    
    # Assigning a Call to a Name (line 388):
    
    # Call to min(...): (line 388)
    # Processing the call arguments (line 388)
    # Getting the type of 'r' (line 388)
    r_572355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 12), 'r', False)
    float_572356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 15), 'float')
    # Processing the call keyword arguments (line 388)
    kwargs_572357 = {}
    # Getting the type of 'min' (line 388)
    min_572354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 8), 'min', False)
    # Calling min(args, kwargs) (line 388)
    min_call_result_572358 = invoke(stypy.reporting.localization.Localization(__file__, 388, 8), min_572354, *[r_572355, float_572356], **kwargs_572357)
    
    # Assigning a type to the variable 'r' (line 388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 4), 'r', min_call_result_572358)
    
    # Assigning a Call to a Name (line 389):
    
    # Assigning a Call to a Name (line 389):
    
    # Call to max(...): (line 389)
    # Processing the call arguments (line 389)
    # Getting the type of 'r' (line 389)
    r_572360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 12), 'r', False)
    float_572361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 15), 'float')
    # Processing the call keyword arguments (line 389)
    kwargs_572362 = {}
    # Getting the type of 'max' (line 389)
    max_572359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'max', False)
    # Calling max(args, kwargs) (line 389)
    max_call_result_572363 = invoke(stypy.reporting.localization.Localization(__file__, 389, 8), max_572359, *[r_572360, float_572361], **kwargs_572362)
    
    # Assigning a type to the variable 'r' (line 389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'r', max_call_result_572363)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'r' (line 391)
    r_572364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 7), 'r')
    # Getting the type of 'masked' (line 391)
    masked_572365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'masked')
    # Applying the binary operator 'is' (line 391)
    result_is__572366 = python_operator(stypy.reporting.localization.Localization(__file__, 391, 7), 'is', r_572364, masked_572365)
    
    
    
    # Call to abs(...): (line 391)
    # Processing the call arguments (line 391)
    # Getting the type of 'r' (line 391)
    r_572368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 26), 'r', False)
    # Processing the call keyword arguments (line 391)
    kwargs_572369 = {}
    # Getting the type of 'abs' (line 391)
    abs_572367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 22), 'abs', False)
    # Calling abs(args, kwargs) (line 391)
    abs_call_result_572370 = invoke(stypy.reporting.localization.Localization(__file__, 391, 22), abs_572367, *[r_572368], **kwargs_572369)
    
    float_572371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 32), 'float')
    # Applying the binary operator '==' (line 391)
    result_eq_572372 = python_operator(stypy.reporting.localization.Localization(__file__, 391, 22), '==', abs_call_result_572370, float_572371)
    
    # Applying the binary operator 'or' (line 391)
    result_or_keyword_572373 = python_operator(stypy.reporting.localization.Localization(__file__, 391, 7), 'or', result_is__572366, result_eq_572372)
    
    # Testing the type of an if condition (line 391)
    if_condition_572374 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 391, 4), result_or_keyword_572373)
    # Assigning a type to the variable 'if_condition_572374' (line 391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 4), 'if_condition_572374', if_condition_572374)
    # SSA begins for if statement (line 391)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 392):
    
    # Assigning a Num to a Name (line 392):
    float_572375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 15), 'float')
    # Assigning a type to the variable 'prob' (line 392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 8), 'prob', float_572375)
    # SSA branch for the else part of an if statement (line 391)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 394):
    
    # Assigning a BinOp to a Name (line 394):
    # Getting the type of 'df' (line 394)
    df_572376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 21), 'df')
    float_572377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 28), 'float')
    # Getting the type of 'r' (line 394)
    r_572378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 34), 'r')
    # Applying the binary operator '-' (line 394)
    result_sub_572379 = python_operator(stypy.reporting.localization.Localization(__file__, 394, 28), '-', float_572377, r_572378)
    
    float_572380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 40), 'float')
    # Getting the type of 'r' (line 394)
    r_572381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 46), 'r')
    # Applying the binary operator '+' (line 394)
    result_add_572382 = python_operator(stypy.reporting.localization.Localization(__file__, 394, 40), '+', float_572380, r_572381)
    
    # Applying the binary operator '*' (line 394)
    result_mul_572383 = python_operator(stypy.reporting.localization.Localization(__file__, 394, 27), '*', result_sub_572379, result_add_572382)
    
    # Applying the binary operator 'div' (line 394)
    result_div_572384 = python_operator(stypy.reporting.localization.Localization(__file__, 394, 21), 'div', df_572376, result_mul_572383)
    
    # Getting the type of 'r' (line 394)
    r_572385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 53), 'r')
    # Applying the binary operator '*' (line 394)
    result_mul_572386 = python_operator(stypy.reporting.localization.Localization(__file__, 394, 20), '*', result_div_572384, r_572385)
    
    # Getting the type of 'r' (line 394)
    r_572387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 57), 'r')
    # Applying the binary operator '*' (line 394)
    result_mul_572388 = python_operator(stypy.reporting.localization.Localization(__file__, 394, 55), '*', result_mul_572386, r_572387)
    
    # Assigning a type to the variable 't_squared' (line 394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 't_squared', result_mul_572388)
    
    # Assigning a Call to a Name (line 395):
    
    # Assigning a Call to a Name (line 395):
    
    # Call to _betai(...): (line 395)
    # Processing the call arguments (line 395)
    float_572390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 22), 'float')
    # Getting the type of 'df' (line 395)
    df_572391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 26), 'df', False)
    # Applying the binary operator '*' (line 395)
    result_mul_572392 = python_operator(stypy.reporting.localization.Localization(__file__, 395, 22), '*', float_572390, df_572391)
    
    float_572393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 30), 'float')
    # Getting the type of 'df' (line 395)
    df_572394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 35), 'df', False)
    # Getting the type of 'df' (line 395)
    df_572395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 39), 'df', False)
    # Getting the type of 't_squared' (line 395)
    t_squared_572396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 44), 't_squared', False)
    # Applying the binary operator '+' (line 395)
    result_add_572397 = python_operator(stypy.reporting.localization.Localization(__file__, 395, 39), '+', df_572395, t_squared_572396)
    
    # Applying the binary operator 'div' (line 395)
    result_div_572398 = python_operator(stypy.reporting.localization.Localization(__file__, 395, 35), 'div', df_572394, result_add_572397)
    
    # Processing the call keyword arguments (line 395)
    kwargs_572399 = {}
    # Getting the type of '_betai' (line 395)
    _betai_572389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 15), '_betai', False)
    # Calling _betai(args, kwargs) (line 395)
    _betai_call_result_572400 = invoke(stypy.reporting.localization.Localization(__file__, 395, 15), _betai_572389, *[result_mul_572392, float_572393, result_div_572398], **kwargs_572399)
    
    # Assigning a type to the variable 'prob' (line 395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 8), 'prob', _betai_call_result_572400)
    # SSA join for if statement (line 391)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 397)
    tuple_572401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 397)
    # Adding element type (line 397)
    # Getting the type of 'r' (line 397)
    r_572402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 11), 'r')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 11), tuple_572401, r_572402)
    # Adding element type (line 397)
    # Getting the type of 'prob' (line 397)
    prob_572403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 14), 'prob')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 11), tuple_572401, prob_572403)
    
    # Assigning a type to the variable 'stypy_return_type' (line 397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 4), 'stypy_return_type', tuple_572401)
    
    # ################# End of 'pearsonr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pearsonr' in the type store
    # Getting the type of 'stypy_return_type' (line 336)
    stypy_return_type_572404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_572404)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pearsonr'
    return stypy_return_type_572404

# Assigning a type to the variable 'pearsonr' (line 336)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 0), 'pearsonr', pearsonr)

# Assigning a Call to a Name (line 400):

# Assigning a Call to a Name (line 400):

# Call to namedtuple(...): (line 400)
# Processing the call arguments (line 400)
str_572406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 29), 'str', 'SpearmanrResult')

# Obtaining an instance of the builtin type 'tuple' (line 400)
tuple_572407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 49), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 400)
# Adding element type (line 400)
str_572408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 49), 'str', 'correlation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 400, 49), tuple_572407, str_572408)
# Adding element type (line 400)
str_572409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 64), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 400, 49), tuple_572407, str_572409)

# Processing the call keyword arguments (line 400)
kwargs_572410 = {}
# Getting the type of 'namedtuple' (line 400)
namedtuple_572405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 18), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 400)
namedtuple_call_result_572411 = invoke(stypy.reporting.localization.Localization(__file__, 400, 18), namedtuple_572405, *[str_572406, tuple_572407], **kwargs_572410)

# Assigning a type to the variable 'SpearmanrResult' (line 400)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 0), 'SpearmanrResult', namedtuple_call_result_572411)

@norecursion
def spearmanr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 403)
    True_572412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 29), 'True')
    defaults = [True_572412]
    # Create a new context for function 'spearmanr'
    module_type_store = module_type_store.open_function_context('spearmanr', 403, 0, False)
    
    # Passed parameters checking function
    spearmanr.stypy_localization = localization
    spearmanr.stypy_type_of_self = None
    spearmanr.stypy_type_store = module_type_store
    spearmanr.stypy_function_name = 'spearmanr'
    spearmanr.stypy_param_names_list = ['x', 'y', 'use_ties']
    spearmanr.stypy_varargs_param_name = None
    spearmanr.stypy_kwargs_param_name = None
    spearmanr.stypy_call_defaults = defaults
    spearmanr.stypy_call_varargs = varargs
    spearmanr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'spearmanr', ['x', 'y', 'use_ties'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'spearmanr', localization, ['x', 'y', 'use_ties'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'spearmanr(...)' code ##################

    str_572413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, (-1)), 'str', '\n    Calculates a Spearman rank-order correlation coefficient and the p-value\n    to test for non-correlation.\n\n    The Spearman correlation is a nonparametric measure of the linear\n    relationship between two datasets. Unlike the Pearson correlation, the\n    Spearman correlation does not assume that both datasets are normally\n    distributed. Like other correlation coefficients, this one varies\n    between -1 and +1 with 0 implying no correlation. Correlations of -1 or\n    +1 imply a monotonic relationship. Positive correlations imply that\n    as `x` increases, so does `y`. Negative correlations imply that as `x`\n    increases, `y` decreases.\n\n    Missing values are discarded pair-wise: if a value is missing in `x`, the\n    corresponding value in `y` is masked.\n\n    The p-value roughly indicates the probability of an uncorrelated system\n    producing datasets that have a Spearman correlation at least as extreme\n    as the one computed from these datasets. The p-values are not entirely\n    reliable but are probably reasonable for datasets larger than 500 or so.\n\n    Parameters\n    ----------\n    x : array_like\n        The length of `x` must be > 2.\n    y : array_like\n        The length of `y` must be > 2.\n    use_ties : bool, optional\n        Whether the correction for ties should be computed.\n\n    Returns\n    -------\n    correlation : float\n        Spearman correlation coefficient\n    pvalue : float\n        2-tailed p-value.\n\n    References\n    ----------\n    [CRCProbStat2000] section 14.7\n\n    ')
    
    # Assigning a Call to a Tuple (line 446):
    
    # Assigning a Subscript to a Name (line 446):
    
    # Obtaining the type of the subscript
    int_572414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 4), 'int')
    
    # Call to _chk_size(...): (line 446)
    # Processing the call arguments (line 446)
    # Getting the type of 'x' (line 446)
    x_572416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 26), 'x', False)
    # Getting the type of 'y' (line 446)
    y_572417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 29), 'y', False)
    # Processing the call keyword arguments (line 446)
    kwargs_572418 = {}
    # Getting the type of '_chk_size' (line 446)
    _chk_size_572415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), '_chk_size', False)
    # Calling _chk_size(args, kwargs) (line 446)
    _chk_size_call_result_572419 = invoke(stypy.reporting.localization.Localization(__file__, 446, 16), _chk_size_572415, *[x_572416, y_572417], **kwargs_572418)
    
    # Obtaining the member '__getitem__' of a type (line 446)
    getitem___572420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 4), _chk_size_call_result_572419, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 446)
    subscript_call_result_572421 = invoke(stypy.reporting.localization.Localization(__file__, 446, 4), getitem___572420, int_572414)
    
    # Assigning a type to the variable 'tuple_var_assignment_571441' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'tuple_var_assignment_571441', subscript_call_result_572421)
    
    # Assigning a Subscript to a Name (line 446):
    
    # Obtaining the type of the subscript
    int_572422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 4), 'int')
    
    # Call to _chk_size(...): (line 446)
    # Processing the call arguments (line 446)
    # Getting the type of 'x' (line 446)
    x_572424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 26), 'x', False)
    # Getting the type of 'y' (line 446)
    y_572425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 29), 'y', False)
    # Processing the call keyword arguments (line 446)
    kwargs_572426 = {}
    # Getting the type of '_chk_size' (line 446)
    _chk_size_572423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), '_chk_size', False)
    # Calling _chk_size(args, kwargs) (line 446)
    _chk_size_call_result_572427 = invoke(stypy.reporting.localization.Localization(__file__, 446, 16), _chk_size_572423, *[x_572424, y_572425], **kwargs_572426)
    
    # Obtaining the member '__getitem__' of a type (line 446)
    getitem___572428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 4), _chk_size_call_result_572427, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 446)
    subscript_call_result_572429 = invoke(stypy.reporting.localization.Localization(__file__, 446, 4), getitem___572428, int_572422)
    
    # Assigning a type to the variable 'tuple_var_assignment_571442' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'tuple_var_assignment_571442', subscript_call_result_572429)
    
    # Assigning a Subscript to a Name (line 446):
    
    # Obtaining the type of the subscript
    int_572430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 4), 'int')
    
    # Call to _chk_size(...): (line 446)
    # Processing the call arguments (line 446)
    # Getting the type of 'x' (line 446)
    x_572432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 26), 'x', False)
    # Getting the type of 'y' (line 446)
    y_572433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 29), 'y', False)
    # Processing the call keyword arguments (line 446)
    kwargs_572434 = {}
    # Getting the type of '_chk_size' (line 446)
    _chk_size_572431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), '_chk_size', False)
    # Calling _chk_size(args, kwargs) (line 446)
    _chk_size_call_result_572435 = invoke(stypy.reporting.localization.Localization(__file__, 446, 16), _chk_size_572431, *[x_572432, y_572433], **kwargs_572434)
    
    # Obtaining the member '__getitem__' of a type (line 446)
    getitem___572436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 4), _chk_size_call_result_572435, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 446)
    subscript_call_result_572437 = invoke(stypy.reporting.localization.Localization(__file__, 446, 4), getitem___572436, int_572430)
    
    # Assigning a type to the variable 'tuple_var_assignment_571443' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'tuple_var_assignment_571443', subscript_call_result_572437)
    
    # Assigning a Name to a Name (line 446):
    # Getting the type of 'tuple_var_assignment_571441' (line 446)
    tuple_var_assignment_571441_572438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'tuple_var_assignment_571441')
    # Assigning a type to the variable 'x' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 5), 'x', tuple_var_assignment_571441_572438)
    
    # Assigning a Name to a Name (line 446):
    # Getting the type of 'tuple_var_assignment_571442' (line 446)
    tuple_var_assignment_571442_572439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'tuple_var_assignment_571442')
    # Assigning a type to the variable 'y' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'y', tuple_var_assignment_571442_572439)
    
    # Assigning a Name to a Name (line 446):
    # Getting the type of 'tuple_var_assignment_571443' (line 446)
    tuple_var_assignment_571443_572440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'tuple_var_assignment_571443')
    # Assigning a type to the variable 'n' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 11), 'n', tuple_var_assignment_571443_572440)
    
    # Assigning a Tuple to a Tuple (line 447):
    
    # Assigning a Call to a Name (line 447):
    
    # Call to ravel(...): (line 447)
    # Processing the call keyword arguments (line 447)
    kwargs_572443 = {}
    # Getting the type of 'x' (line 447)
    x_572441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 14), 'x', False)
    # Obtaining the member 'ravel' of a type (line 447)
    ravel_572442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 14), x_572441, 'ravel')
    # Calling ravel(args, kwargs) (line 447)
    ravel_call_result_572444 = invoke(stypy.reporting.localization.Localization(__file__, 447, 14), ravel_572442, *[], **kwargs_572443)
    
    # Assigning a type to the variable 'tuple_assignment_571444' (line 447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'tuple_assignment_571444', ravel_call_result_572444)
    
    # Assigning a Call to a Name (line 447):
    
    # Call to ravel(...): (line 447)
    # Processing the call keyword arguments (line 447)
    kwargs_572447 = {}
    # Getting the type of 'y' (line 447)
    y_572445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 25), 'y', False)
    # Obtaining the member 'ravel' of a type (line 447)
    ravel_572446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 25), y_572445, 'ravel')
    # Calling ravel(args, kwargs) (line 447)
    ravel_call_result_572448 = invoke(stypy.reporting.localization.Localization(__file__, 447, 25), ravel_572446, *[], **kwargs_572447)
    
    # Assigning a type to the variable 'tuple_assignment_571445' (line 447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'tuple_assignment_571445', ravel_call_result_572448)
    
    # Assigning a Name to a Name (line 447):
    # Getting the type of 'tuple_assignment_571444' (line 447)
    tuple_assignment_571444_572449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'tuple_assignment_571444')
    # Assigning a type to the variable 'x' (line 447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 5), 'x', tuple_assignment_571444_572449)
    
    # Assigning a Name to a Name (line 447):
    # Getting the type of 'tuple_assignment_571445' (line 447)
    tuple_assignment_571445_572450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'tuple_assignment_571445')
    # Assigning a type to the variable 'y' (line 447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'y', tuple_assignment_571445_572450)
    
    # Assigning a Call to a Name (line 449):
    
    # Assigning a Call to a Name (line 449):
    
    # Call to mask_or(...): (line 449)
    # Processing the call arguments (line 449)
    
    # Call to getmask(...): (line 449)
    # Processing the call arguments (line 449)
    # Getting the type of 'x' (line 449)
    x_572455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 30), 'x', False)
    # Processing the call keyword arguments (line 449)
    kwargs_572456 = {}
    # Getting the type of 'ma' (line 449)
    ma_572453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 19), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 449)
    getmask_572454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 19), ma_572453, 'getmask')
    # Calling getmask(args, kwargs) (line 449)
    getmask_call_result_572457 = invoke(stypy.reporting.localization.Localization(__file__, 449, 19), getmask_572454, *[x_572455], **kwargs_572456)
    
    
    # Call to getmask(...): (line 449)
    # Processing the call arguments (line 449)
    # Getting the type of 'y' (line 449)
    y_572460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 45), 'y', False)
    # Processing the call keyword arguments (line 449)
    kwargs_572461 = {}
    # Getting the type of 'ma' (line 449)
    ma_572458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 34), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 449)
    getmask_572459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 34), ma_572458, 'getmask')
    # Calling getmask(args, kwargs) (line 449)
    getmask_call_result_572462 = invoke(stypy.reporting.localization.Localization(__file__, 449, 34), getmask_572459, *[y_572460], **kwargs_572461)
    
    # Processing the call keyword arguments (line 449)
    kwargs_572463 = {}
    # Getting the type of 'ma' (line 449)
    ma_572451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 8), 'ma', False)
    # Obtaining the member 'mask_or' of a type (line 449)
    mask_or_572452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 8), ma_572451, 'mask_or')
    # Calling mask_or(args, kwargs) (line 449)
    mask_or_call_result_572464 = invoke(stypy.reporting.localization.Localization(__file__, 449, 8), mask_or_572452, *[getmask_call_result_572457, getmask_call_result_572462], **kwargs_572463)
    
    # Assigning a type to the variable 'm' (line 449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 4), 'm', mask_or_call_result_572464)
    
    # Getting the type of 'n' (line 453)
    n_572465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 4), 'n')
    
    # Call to int(...): (line 453)
    # Processing the call arguments (line 453)
    
    # Call to sum(...): (line 453)
    # Processing the call keyword arguments (line 453)
    kwargs_572469 = {}
    # Getting the type of 'm' (line 453)
    m_572467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 13), 'm', False)
    # Obtaining the member 'sum' of a type (line 453)
    sum_572468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 13), m_572467, 'sum')
    # Calling sum(args, kwargs) (line 453)
    sum_call_result_572470 = invoke(stypy.reporting.localization.Localization(__file__, 453, 13), sum_572468, *[], **kwargs_572469)
    
    # Processing the call keyword arguments (line 453)
    kwargs_572471 = {}
    # Getting the type of 'int' (line 453)
    int_572466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 9), 'int', False)
    # Calling int(args, kwargs) (line 453)
    int_call_result_572472 = invoke(stypy.reporting.localization.Localization(__file__, 453, 9), int_572466, *[sum_call_result_572470], **kwargs_572471)
    
    # Applying the binary operator '-=' (line 453)
    result_isub_572473 = python_operator(stypy.reporting.localization.Localization(__file__, 453, 4), '-=', n_572465, int_call_result_572472)
    # Assigning a type to the variable 'n' (line 453)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 4), 'n', result_isub_572473)
    
    
    
    # Getting the type of 'm' (line 454)
    m_572474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 7), 'm')
    # Getting the type of 'nomask' (line 454)
    nomask_572475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 16), 'nomask')
    # Applying the binary operator 'isnot' (line 454)
    result_is_not_572476 = python_operator(stypy.reporting.localization.Localization(__file__, 454, 7), 'isnot', m_572474, nomask_572475)
    
    # Testing the type of an if condition (line 454)
    if_condition_572477 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 454, 4), result_is_not_572476)
    # Assigning a type to the variable 'if_condition_572477' (line 454)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 4), 'if_condition_572477', if_condition_572477)
    # SSA begins for if statement (line 454)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 455):
    
    # Assigning a Call to a Name (line 455):
    
    # Call to array(...): (line 455)
    # Processing the call arguments (line 455)
    # Getting the type of 'x' (line 455)
    x_572480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 21), 'x', False)
    # Processing the call keyword arguments (line 455)
    # Getting the type of 'm' (line 455)
    m_572481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 29), 'm', False)
    keyword_572482 = m_572481
    # Getting the type of 'True' (line 455)
    True_572483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 37), 'True', False)
    keyword_572484 = True_572483
    kwargs_572485 = {'copy': keyword_572484, 'mask': keyword_572482}
    # Getting the type of 'ma' (line 455)
    ma_572478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 12), 'ma', False)
    # Obtaining the member 'array' of a type (line 455)
    array_572479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 12), ma_572478, 'array')
    # Calling array(args, kwargs) (line 455)
    array_call_result_572486 = invoke(stypy.reporting.localization.Localization(__file__, 455, 12), array_572479, *[x_572480], **kwargs_572485)
    
    # Assigning a type to the variable 'x' (line 455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'x', array_call_result_572486)
    
    # Assigning a Call to a Name (line 456):
    
    # Assigning a Call to a Name (line 456):
    
    # Call to array(...): (line 456)
    # Processing the call arguments (line 456)
    # Getting the type of 'y' (line 456)
    y_572489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 21), 'y', False)
    # Processing the call keyword arguments (line 456)
    # Getting the type of 'm' (line 456)
    m_572490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 29), 'm', False)
    keyword_572491 = m_572490
    # Getting the type of 'True' (line 456)
    True_572492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 37), 'True', False)
    keyword_572493 = True_572492
    kwargs_572494 = {'copy': keyword_572493, 'mask': keyword_572491}
    # Getting the type of 'ma' (line 456)
    ma_572487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 12), 'ma', False)
    # Obtaining the member 'array' of a type (line 456)
    array_572488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 12), ma_572487, 'array')
    # Calling array(args, kwargs) (line 456)
    array_call_result_572495 = invoke(stypy.reporting.localization.Localization(__file__, 456, 12), array_572488, *[y_572489], **kwargs_572494)
    
    # Assigning a type to the variable 'y' (line 456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 8), 'y', array_call_result_572495)
    # SSA join for if statement (line 454)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 457):
    
    # Assigning a BinOp to a Name (line 457):
    # Getting the type of 'n' (line 457)
    n_572496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 9), 'n')
    int_572497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 11), 'int')
    # Applying the binary operator '-' (line 457)
    result_sub_572498 = python_operator(stypy.reporting.localization.Localization(__file__, 457, 9), '-', n_572496, int_572497)
    
    # Assigning a type to the variable 'df' (line 457)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 4), 'df', result_sub_572498)
    
    
    # Getting the type of 'df' (line 458)
    df_572499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 7), 'df')
    int_572500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 458, 12), 'int')
    # Applying the binary operator '<' (line 458)
    result_lt_572501 = python_operator(stypy.reporting.localization.Localization(__file__, 458, 7), '<', df_572499, int_572500)
    
    # Testing the type of an if condition (line 458)
    if_condition_572502 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 458, 4), result_lt_572501)
    # Assigning a type to the variable 'if_condition_572502' (line 458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 4), 'if_condition_572502', if_condition_572502)
    # SSA begins for if statement (line 458)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 459)
    # Processing the call arguments (line 459)
    str_572504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 25), 'str', 'The input must have at least 3 entries!')
    # Processing the call keyword arguments (line 459)
    kwargs_572505 = {}
    # Getting the type of 'ValueError' (line 459)
    ValueError_572503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 459)
    ValueError_call_result_572506 = invoke(stypy.reporting.localization.Localization(__file__, 459, 14), ValueError_572503, *[str_572504], **kwargs_572505)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 459, 8), ValueError_call_result_572506, 'raise parameter', BaseException)
    # SSA join for if statement (line 458)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 462):
    
    # Assigning a Call to a Name (line 462):
    
    # Call to rankdata(...): (line 462)
    # Processing the call arguments (line 462)
    # Getting the type of 'x' (line 462)
    x_572508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 21), 'x', False)
    # Processing the call keyword arguments (line 462)
    kwargs_572509 = {}
    # Getting the type of 'rankdata' (line 462)
    rankdata_572507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 12), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 462)
    rankdata_call_result_572510 = invoke(stypy.reporting.localization.Localization(__file__, 462, 12), rankdata_572507, *[x_572508], **kwargs_572509)
    
    # Assigning a type to the variable 'rankx' (line 462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 4), 'rankx', rankdata_call_result_572510)
    
    # Assigning a Call to a Name (line 463):
    
    # Assigning a Call to a Name (line 463):
    
    # Call to rankdata(...): (line 463)
    # Processing the call arguments (line 463)
    # Getting the type of 'y' (line 463)
    y_572512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 21), 'y', False)
    # Processing the call keyword arguments (line 463)
    kwargs_572513 = {}
    # Getting the type of 'rankdata' (line 463)
    rankdata_572511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 12), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 463)
    rankdata_call_result_572514 = invoke(stypy.reporting.localization.Localization(__file__, 463, 12), rankdata_572511, *[y_572512], **kwargs_572513)
    
    # Assigning a type to the variable 'ranky' (line 463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 4), 'ranky', rankdata_call_result_572514)
    
    # Assigning a Call to a Name (line 464):
    
    # Assigning a Call to a Name (line 464):
    
    # Call to reduce(...): (line 464)
    # Processing the call arguments (line 464)
    # Getting the type of 'rankx' (line 464)
    rankx_572518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 25), 'rankx', False)
    # Getting the type of 'ranky' (line 464)
    ranky_572519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 31), 'ranky', False)
    # Applying the binary operator '-' (line 464)
    result_sub_572520 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 25), '-', rankx_572518, ranky_572519)
    
    int_572521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 39), 'int')
    # Applying the binary operator '**' (line 464)
    result_pow_572522 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 24), '**', result_sub_572520, int_572521)
    
    # Processing the call keyword arguments (line 464)
    kwargs_572523 = {}
    # Getting the type of 'np' (line 464)
    np_572515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 10), 'np', False)
    # Obtaining the member 'add' of a type (line 464)
    add_572516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 10), np_572515, 'add')
    # Obtaining the member 'reduce' of a type (line 464)
    reduce_572517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 10), add_572516, 'reduce')
    # Calling reduce(args, kwargs) (line 464)
    reduce_call_result_572524 = invoke(stypy.reporting.localization.Localization(__file__, 464, 10), reduce_572517, *[result_pow_572522], **kwargs_572523)
    
    # Assigning a type to the variable 'dsq' (line 464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 4), 'dsq', reduce_call_result_572524)
    
    # Getting the type of 'use_ties' (line 466)
    use_ties_572525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 7), 'use_ties')
    # Testing the type of an if condition (line 466)
    if_condition_572526 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 466, 4), use_ties_572525)
    # Assigning a type to the variable 'if_condition_572526' (line 466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 4), 'if_condition_572526', if_condition_572526)
    # SSA begins for if statement (line 466)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 467):
    
    # Assigning a Call to a Name (line 467):
    
    # Call to count_tied_groups(...): (line 467)
    # Processing the call arguments (line 467)
    # Getting the type of 'x' (line 467)
    x_572528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 34), 'x', False)
    # Processing the call keyword arguments (line 467)
    kwargs_572529 = {}
    # Getting the type of 'count_tied_groups' (line 467)
    count_tied_groups_572527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 16), 'count_tied_groups', False)
    # Calling count_tied_groups(args, kwargs) (line 467)
    count_tied_groups_call_result_572530 = invoke(stypy.reporting.localization.Localization(__file__, 467, 16), count_tied_groups_572527, *[x_572528], **kwargs_572529)
    
    # Assigning a type to the variable 'xties' (line 467)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 8), 'xties', count_tied_groups_call_result_572530)
    
    # Assigning a Call to a Name (line 468):
    
    # Assigning a Call to a Name (line 468):
    
    # Call to count_tied_groups(...): (line 468)
    # Processing the call arguments (line 468)
    # Getting the type of 'y' (line 468)
    y_572532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 34), 'y', False)
    # Processing the call keyword arguments (line 468)
    kwargs_572533 = {}
    # Getting the type of 'count_tied_groups' (line 468)
    count_tied_groups_572531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 16), 'count_tied_groups', False)
    # Calling count_tied_groups(args, kwargs) (line 468)
    count_tied_groups_call_result_572534 = invoke(stypy.reporting.localization.Localization(__file__, 468, 16), count_tied_groups_572531, *[y_572532], **kwargs_572533)
    
    # Assigning a type to the variable 'yties' (line 468)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'yties', count_tied_groups_call_result_572534)
    
    # Assigning a BinOp to a Name (line 469):
    
    # Assigning a BinOp to a Name (line 469):
    
    # Call to sum(...): (line 469)
    # Processing the call arguments (line 469)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 469, 24, True)
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 469)
    # Processing the call arguments (line 469)
    # Getting the type of 'xties' (line 469)
    xties_572547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 60), 'xties', False)
    # Processing the call keyword arguments (line 469)
    kwargs_572548 = {}
    # Getting the type of 'iteritems' (line 469)
    iteritems_572546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 50), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 469)
    iteritems_call_result_572549 = invoke(stypy.reporting.localization.Localization(__file__, 469, 50), iteritems_572546, *[xties_572547], **kwargs_572548)
    
    comprehension_572550 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 469, 24), iteritems_call_result_572549)
    # Assigning a type to the variable 'k' (line 469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 24), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 469, 24), comprehension_572550))
    # Assigning a type to the variable 'v' (line 469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 24), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 469, 24), comprehension_572550))
    # Getting the type of 'v' (line 469)
    v_572537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 24), 'v', False)
    # Getting the type of 'k' (line 469)
    k_572538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 26), 'k', False)
    # Applying the binary operator '*' (line 469)
    result_mul_572539 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 24), '*', v_572537, k_572538)
    
    # Getting the type of 'k' (line 469)
    k_572540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 29), 'k', False)
    int_572541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 32), 'int')
    # Applying the binary operator '**' (line 469)
    result_pow_572542 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 29), '**', k_572540, int_572541)
    
    int_572543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 34), 'int')
    # Applying the binary operator '-' (line 469)
    result_sub_572544 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 29), '-', result_pow_572542, int_572543)
    
    # Applying the binary operator '*' (line 469)
    result_mul_572545 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 27), '*', result_mul_572539, result_sub_572544)
    
    list_572551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 24), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 469, 24), list_572551, result_mul_572545)
    # Processing the call keyword arguments (line 469)
    kwargs_572552 = {}
    # Getting the type of 'np' (line 469)
    np_572535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 17), 'np', False)
    # Obtaining the member 'sum' of a type (line 469)
    sum_572536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 17), np_572535, 'sum')
    # Calling sum(args, kwargs) (line 469)
    sum_call_result_572553 = invoke(stypy.reporting.localization.Localization(__file__, 469, 17), sum_572536, *[list_572551], **kwargs_572552)
    
    float_572554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 68), 'float')
    # Applying the binary operator 'div' (line 469)
    result_div_572555 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 17), 'div', sum_call_result_572553, float_572554)
    
    # Assigning a type to the variable 'corr_x' (line 469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'corr_x', result_div_572555)
    
    # Assigning a BinOp to a Name (line 470):
    
    # Assigning a BinOp to a Name (line 470):
    
    # Call to sum(...): (line 470)
    # Processing the call arguments (line 470)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 470, 24, True)
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 470)
    # Processing the call arguments (line 470)
    # Getting the type of 'yties' (line 470)
    yties_572568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 60), 'yties', False)
    # Processing the call keyword arguments (line 470)
    kwargs_572569 = {}
    # Getting the type of 'iteritems' (line 470)
    iteritems_572567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 50), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 470)
    iteritems_call_result_572570 = invoke(stypy.reporting.localization.Localization(__file__, 470, 50), iteritems_572567, *[yties_572568], **kwargs_572569)
    
    comprehension_572571 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 470, 24), iteritems_call_result_572570)
    # Assigning a type to the variable 'k' (line 470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 24), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 470, 24), comprehension_572571))
    # Assigning a type to the variable 'v' (line 470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 24), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 470, 24), comprehension_572571))
    # Getting the type of 'v' (line 470)
    v_572558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 24), 'v', False)
    # Getting the type of 'k' (line 470)
    k_572559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 26), 'k', False)
    # Applying the binary operator '*' (line 470)
    result_mul_572560 = python_operator(stypy.reporting.localization.Localization(__file__, 470, 24), '*', v_572558, k_572559)
    
    # Getting the type of 'k' (line 470)
    k_572561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 29), 'k', False)
    int_572562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 32), 'int')
    # Applying the binary operator '**' (line 470)
    result_pow_572563 = python_operator(stypy.reporting.localization.Localization(__file__, 470, 29), '**', k_572561, int_572562)
    
    int_572564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 34), 'int')
    # Applying the binary operator '-' (line 470)
    result_sub_572565 = python_operator(stypy.reporting.localization.Localization(__file__, 470, 29), '-', result_pow_572563, int_572564)
    
    # Applying the binary operator '*' (line 470)
    result_mul_572566 = python_operator(stypy.reporting.localization.Localization(__file__, 470, 27), '*', result_mul_572560, result_sub_572565)
    
    list_572572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 24), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 470, 24), list_572572, result_mul_572566)
    # Processing the call keyword arguments (line 470)
    kwargs_572573 = {}
    # Getting the type of 'np' (line 470)
    np_572556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 17), 'np', False)
    # Obtaining the member 'sum' of a type (line 470)
    sum_572557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 17), np_572556, 'sum')
    # Calling sum(args, kwargs) (line 470)
    sum_call_result_572574 = invoke(stypy.reporting.localization.Localization(__file__, 470, 17), sum_572557, *[list_572572], **kwargs_572573)
    
    float_572575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 68), 'float')
    # Applying the binary operator 'div' (line 470)
    result_div_572576 = python_operator(stypy.reporting.localization.Localization(__file__, 470, 17), 'div', sum_call_result_572574, float_572575)
    
    # Assigning a type to the variable 'corr_y' (line 470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 8), 'corr_y', result_div_572576)
    # SSA branch for the else part of an if statement (line 466)
    module_type_store.open_ssa_branch('else')
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Num to a Name (line 472):
    int_572577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, 26), 'int')
    # Assigning a type to the variable 'corr_y' (line 472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 17), 'corr_y', int_572577)
    
    # Assigning a Name to a Name (line 472):
    # Getting the type of 'corr_y' (line 472)
    corr_y_572578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 17), 'corr_y')
    # Assigning a type to the variable 'corr_x' (line 472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'corr_x', corr_y_572578)
    # SSA join for if statement (line 466)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 474):
    
    # Assigning a BinOp to a Name (line 474):
    # Getting the type of 'n' (line 474)
    n_572579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 12), 'n')
    # Getting the type of 'n' (line 474)
    n_572580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 15), 'n')
    int_572581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 18), 'int')
    # Applying the binary operator '**' (line 474)
    result_pow_572582 = python_operator(stypy.reporting.localization.Localization(__file__, 474, 15), '**', n_572580, int_572581)
    
    int_572583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 22), 'int')
    # Applying the binary operator '-' (line 474)
    result_sub_572584 = python_operator(stypy.reporting.localization.Localization(__file__, 474, 15), '-', result_pow_572582, int_572583)
    
    # Applying the binary operator '*' (line 474)
    result_mul_572585 = python_operator(stypy.reporting.localization.Localization(__file__, 474, 12), '*', n_572579, result_sub_572584)
    
    float_572586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 25), 'float')
    # Applying the binary operator 'div' (line 474)
    result_div_572587 = python_operator(stypy.reporting.localization.Localization(__file__, 474, 24), 'div', result_mul_572585, float_572586)
    
    # Assigning a type to the variable 'denom' (line 474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 4), 'denom', result_div_572587)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'corr_x' (line 475)
    corr_x_572588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 7), 'corr_x')
    int_572589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 17), 'int')
    # Applying the binary operator '!=' (line 475)
    result_ne_572590 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 7), '!=', corr_x_572588, int_572589)
    
    
    # Getting the type of 'corr_y' (line 475)
    corr_y_572591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 22), 'corr_y')
    int_572592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 32), 'int')
    # Applying the binary operator '!=' (line 475)
    result_ne_572593 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 22), '!=', corr_y_572591, int_572592)
    
    # Applying the binary operator 'or' (line 475)
    result_or_keyword_572594 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 7), 'or', result_ne_572590, result_ne_572593)
    
    # Testing the type of an if condition (line 475)
    if_condition_572595 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 475, 4), result_or_keyword_572594)
    # Assigning a type to the variable 'if_condition_572595' (line 475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'if_condition_572595', if_condition_572595)
    # SSA begins for if statement (line 475)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 476):
    
    # Assigning a BinOp to a Name (line 476):
    # Getting the type of 'denom' (line 476)
    denom_572596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 14), 'denom')
    # Getting the type of 'dsq' (line 476)
    dsq_572597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 22), 'dsq')
    # Applying the binary operator '-' (line 476)
    result_sub_572598 = python_operator(stypy.reporting.localization.Localization(__file__, 476, 14), '-', denom_572596, dsq_572597)
    
    # Getting the type of 'corr_x' (line 476)
    corr_x_572599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 28), 'corr_x')
    # Applying the binary operator '-' (line 476)
    result_sub_572600 = python_operator(stypy.reporting.localization.Localization(__file__, 476, 26), '-', result_sub_572598, corr_x_572599)
    
    # Getting the type of 'corr_y' (line 476)
    corr_y_572601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 37), 'corr_y')
    # Applying the binary operator '-' (line 476)
    result_sub_572602 = python_operator(stypy.reporting.localization.Localization(__file__, 476, 35), '-', result_sub_572600, corr_y_572601)
    
    # Assigning a type to the variable 'rho' (line 476)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 8), 'rho', result_sub_572602)
    
    # Getting the type of 'rho' (line 477)
    rho_572603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'rho')
    
    # Call to sqrt(...): (line 477)
    # Processing the call arguments (line 477)
    # Getting the type of 'denom' (line 477)
    denom_572606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 24), 'denom', False)
    int_572607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 30), 'int')
    # Getting the type of 'corr_x' (line 477)
    corr_x_572608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 32), 'corr_x', False)
    # Applying the binary operator '*' (line 477)
    result_mul_572609 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 30), '*', int_572607, corr_x_572608)
    
    # Applying the binary operator '-' (line 477)
    result_sub_572610 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 24), '-', denom_572606, result_mul_572609)
    
    # Getting the type of 'denom' (line 477)
    denom_572611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 41), 'denom', False)
    int_572612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 47), 'int')
    # Getting the type of 'corr_y' (line 477)
    corr_y_572613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 49), 'corr_y', False)
    # Applying the binary operator '*' (line 477)
    result_mul_572614 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 47), '*', int_572612, corr_y_572613)
    
    # Applying the binary operator '-' (line 477)
    result_sub_572615 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 41), '-', denom_572611, result_mul_572614)
    
    # Applying the binary operator '*' (line 477)
    result_mul_572616 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 23), '*', result_sub_572610, result_sub_572615)
    
    # Processing the call keyword arguments (line 477)
    kwargs_572617 = {}
    # Getting the type of 'ma' (line 477)
    ma_572604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 15), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 477)
    sqrt_572605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 15), ma_572604, 'sqrt')
    # Calling sqrt(args, kwargs) (line 477)
    sqrt_call_result_572618 = invoke(stypy.reporting.localization.Localization(__file__, 477, 15), sqrt_572605, *[result_mul_572616], **kwargs_572617)
    
    # Applying the binary operator 'div=' (line 477)
    result_div_572619 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 8), 'div=', rho_572603, sqrt_call_result_572618)
    # Assigning a type to the variable 'rho' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'rho', result_div_572619)
    
    # SSA branch for the else part of an if statement (line 475)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 479):
    
    # Assigning a BinOp to a Name (line 479):
    float_572620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 479, 14), 'float')
    # Getting the type of 'dsq' (line 479)
    dsq_572621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 19), 'dsq')
    # Getting the type of 'denom' (line 479)
    denom_572622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 23), 'denom')
    # Applying the binary operator 'div' (line 479)
    result_div_572623 = python_operator(stypy.reporting.localization.Localization(__file__, 479, 19), 'div', dsq_572621, denom_572622)
    
    # Applying the binary operator '-' (line 479)
    result_sub_572624 = python_operator(stypy.reporting.localization.Localization(__file__, 479, 14), '-', float_572620, result_div_572623)
    
    # Assigning a type to the variable 'rho' (line 479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 8), 'rho', result_sub_572624)
    # SSA join for if statement (line 475)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 481):
    
    # Assigning a BinOp to a Name (line 481):
    
    # Call to sqrt(...): (line 481)
    # Processing the call arguments (line 481)
    
    # Call to divide(...): (line 481)
    # Processing the call arguments (line 481)
    # Getting the type of 'df' (line 481)
    df_572629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 26), 'df', False)
    # Getting the type of 'rho' (line 481)
    rho_572630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 30), 'rho', False)
    float_572631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 34), 'float')
    # Applying the binary operator '+' (line 481)
    result_add_572632 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 30), '+', rho_572630, float_572631)
    
    float_572633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 40), 'float')
    # Getting the type of 'rho' (line 481)
    rho_572634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 44), 'rho', False)
    # Applying the binary operator '-' (line 481)
    result_sub_572635 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 40), '-', float_572633, rho_572634)
    
    # Applying the binary operator '*' (line 481)
    result_mul_572636 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 29), '*', result_add_572632, result_sub_572635)
    
    # Processing the call keyword arguments (line 481)
    kwargs_572637 = {}
    # Getting the type of 'ma' (line 481)
    ma_572627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 16), 'ma', False)
    # Obtaining the member 'divide' of a type (line 481)
    divide_572628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 16), ma_572627, 'divide')
    # Calling divide(args, kwargs) (line 481)
    divide_call_result_572638 = invoke(stypy.reporting.localization.Localization(__file__, 481, 16), divide_572628, *[df_572629, result_mul_572636], **kwargs_572637)
    
    # Processing the call keyword arguments (line 481)
    kwargs_572639 = {}
    # Getting the type of 'ma' (line 481)
    ma_572625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 8), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 481)
    sqrt_572626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 8), ma_572625, 'sqrt')
    # Calling sqrt(args, kwargs) (line 481)
    sqrt_call_result_572640 = invoke(stypy.reporting.localization.Localization(__file__, 481, 8), sqrt_572626, *[divide_call_result_572638], **kwargs_572639)
    
    # Getting the type of 'rho' (line 481)
    rho_572641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 53), 'rho')
    # Applying the binary operator '*' (line 481)
    result_mul_572642 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 8), '*', sqrt_call_result_572640, rho_572641)
    
    # Assigning a type to the variable 't' (line 481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 4), 't', result_mul_572642)
    
    
    # Getting the type of 't' (line 482)
    t_572643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 7), 't')
    # Getting the type of 'masked' (line 482)
    masked_572644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'masked')
    # Applying the binary operator 'is' (line 482)
    result_is__572645 = python_operator(stypy.reporting.localization.Localization(__file__, 482, 7), 'is', t_572643, masked_572644)
    
    # Testing the type of an if condition (line 482)
    if_condition_572646 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 482, 4), result_is__572645)
    # Assigning a type to the variable 'if_condition_572646' (line 482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 4), 'if_condition_572646', if_condition_572646)
    # SSA begins for if statement (line 482)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 483):
    
    # Assigning a Num to a Name (line 483):
    float_572647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 15), 'float')
    # Assigning a type to the variable 'prob' (line 483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'prob', float_572647)
    # SSA branch for the else part of an if statement (line 482)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 485):
    
    # Assigning a Call to a Name (line 485):
    
    # Call to _betai(...): (line 485)
    # Processing the call arguments (line 485)
    float_572649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 22), 'float')
    # Getting the type of 'df' (line 485)
    df_572650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 26), 'df', False)
    # Applying the binary operator '*' (line 485)
    result_mul_572651 = python_operator(stypy.reporting.localization.Localization(__file__, 485, 22), '*', float_572649, df_572650)
    
    float_572652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 30), 'float')
    # Getting the type of 'df' (line 485)
    df_572653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 35), 'df', False)
    # Getting the type of 'df' (line 485)
    df_572654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 39), 'df', False)
    # Getting the type of 't' (line 485)
    t_572655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 44), 't', False)
    # Getting the type of 't' (line 485)
    t_572656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 48), 't', False)
    # Applying the binary operator '*' (line 485)
    result_mul_572657 = python_operator(stypy.reporting.localization.Localization(__file__, 485, 44), '*', t_572655, t_572656)
    
    # Applying the binary operator '+' (line 485)
    result_add_572658 = python_operator(stypy.reporting.localization.Localization(__file__, 485, 39), '+', df_572654, result_mul_572657)
    
    # Applying the binary operator 'div' (line 485)
    result_div_572659 = python_operator(stypy.reporting.localization.Localization(__file__, 485, 35), 'div', df_572653, result_add_572658)
    
    # Processing the call keyword arguments (line 485)
    kwargs_572660 = {}
    # Getting the type of '_betai' (line 485)
    _betai_572648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 15), '_betai', False)
    # Calling _betai(args, kwargs) (line 485)
    _betai_call_result_572661 = invoke(stypy.reporting.localization.Localization(__file__, 485, 15), _betai_572648, *[result_mul_572651, float_572652, result_div_572659], **kwargs_572660)
    
    # Assigning a type to the variable 'prob' (line 485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 8), 'prob', _betai_call_result_572661)
    # SSA join for if statement (line 482)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to SpearmanrResult(...): (line 487)
    # Processing the call arguments (line 487)
    # Getting the type of 'rho' (line 487)
    rho_572663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 27), 'rho', False)
    # Getting the type of 'prob' (line 487)
    prob_572664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 32), 'prob', False)
    # Processing the call keyword arguments (line 487)
    kwargs_572665 = {}
    # Getting the type of 'SpearmanrResult' (line 487)
    SpearmanrResult_572662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 11), 'SpearmanrResult', False)
    # Calling SpearmanrResult(args, kwargs) (line 487)
    SpearmanrResult_call_result_572666 = invoke(stypy.reporting.localization.Localization(__file__, 487, 11), SpearmanrResult_572662, *[rho_572663, prob_572664], **kwargs_572665)
    
    # Assigning a type to the variable 'stypy_return_type' (line 487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 4), 'stypy_return_type', SpearmanrResult_call_result_572666)
    
    # ################# End of 'spearmanr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'spearmanr' in the type store
    # Getting the type of 'stypy_return_type' (line 403)
    stypy_return_type_572667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_572667)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'spearmanr'
    return stypy_return_type_572667

# Assigning a type to the variable 'spearmanr' (line 403)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 0), 'spearmanr', spearmanr)

# Assigning a Call to a Name (line 490):

# Assigning a Call to a Name (line 490):

# Call to namedtuple(...): (line 490)
# Processing the call arguments (line 490)
str_572669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 30), 'str', 'KendalltauResult')

# Obtaining an instance of the builtin type 'tuple' (line 490)
tuple_572670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 51), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 490)
# Adding element type (line 490)
str_572671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 51), 'str', 'correlation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 490, 51), tuple_572670, str_572671)
# Adding element type (line 490)
str_572672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 66), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 490, 51), tuple_572670, str_572672)

# Processing the call keyword arguments (line 490)
kwargs_572673 = {}
# Getting the type of 'namedtuple' (line 490)
namedtuple_572668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 19), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 490)
namedtuple_call_result_572674 = invoke(stypy.reporting.localization.Localization(__file__, 490, 19), namedtuple_572668, *[str_572669, tuple_572670], **kwargs_572673)

# Assigning a type to the variable 'KendalltauResult' (line 490)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 0), 'KendalltauResult', namedtuple_call_result_572674)

@norecursion
def kendalltau(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 493)
    True_572675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 30), 'True')
    # Getting the type of 'False' (line 493)
    False_572676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 48), 'False')
    defaults = [True_572675, False_572676]
    # Create a new context for function 'kendalltau'
    module_type_store = module_type_store.open_function_context('kendalltau', 493, 0, False)
    
    # Passed parameters checking function
    kendalltau.stypy_localization = localization
    kendalltau.stypy_type_of_self = None
    kendalltau.stypy_type_store = module_type_store
    kendalltau.stypy_function_name = 'kendalltau'
    kendalltau.stypy_param_names_list = ['x', 'y', 'use_ties', 'use_missing']
    kendalltau.stypy_varargs_param_name = None
    kendalltau.stypy_kwargs_param_name = None
    kendalltau.stypy_call_defaults = defaults
    kendalltau.stypy_call_varargs = varargs
    kendalltau.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kendalltau', ['x', 'y', 'use_ties', 'use_missing'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kendalltau', localization, ['x', 'y', 'use_ties', 'use_missing'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kendalltau(...)' code ##################

    str_572677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, (-1)), 'str', "\n    Computes Kendall's rank correlation tau on two variables *x* and *y*.\n\n    Parameters\n    ----------\n    x : sequence\n        First data list (for example, time).\n    y : sequence\n        Second data list.\n    use_ties : {True, False}, optional\n        Whether ties correction should be performed.\n    use_missing : {False, True}, optional\n        Whether missing data should be allocated a rank of 0 (False) or the\n        average rank (True)\n\n    Returns\n    -------\n    correlation : float\n        Kendall tau\n    pvalue : float\n        Approximate 2-side p-value.\n\n    ")
    
    # Assigning a Call to a Tuple (line 517):
    
    # Assigning a Subscript to a Name (line 517):
    
    # Obtaining the type of the subscript
    int_572678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 4), 'int')
    
    # Call to _chk_size(...): (line 517)
    # Processing the call arguments (line 517)
    # Getting the type of 'x' (line 517)
    x_572680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 26), 'x', False)
    # Getting the type of 'y' (line 517)
    y_572681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 29), 'y', False)
    # Processing the call keyword arguments (line 517)
    kwargs_572682 = {}
    # Getting the type of '_chk_size' (line 517)
    _chk_size_572679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 16), '_chk_size', False)
    # Calling _chk_size(args, kwargs) (line 517)
    _chk_size_call_result_572683 = invoke(stypy.reporting.localization.Localization(__file__, 517, 16), _chk_size_572679, *[x_572680, y_572681], **kwargs_572682)
    
    # Obtaining the member '__getitem__' of a type (line 517)
    getitem___572684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 4), _chk_size_call_result_572683, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 517)
    subscript_call_result_572685 = invoke(stypy.reporting.localization.Localization(__file__, 517, 4), getitem___572684, int_572678)
    
    # Assigning a type to the variable 'tuple_var_assignment_571446' (line 517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), 'tuple_var_assignment_571446', subscript_call_result_572685)
    
    # Assigning a Subscript to a Name (line 517):
    
    # Obtaining the type of the subscript
    int_572686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 4), 'int')
    
    # Call to _chk_size(...): (line 517)
    # Processing the call arguments (line 517)
    # Getting the type of 'x' (line 517)
    x_572688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 26), 'x', False)
    # Getting the type of 'y' (line 517)
    y_572689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 29), 'y', False)
    # Processing the call keyword arguments (line 517)
    kwargs_572690 = {}
    # Getting the type of '_chk_size' (line 517)
    _chk_size_572687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 16), '_chk_size', False)
    # Calling _chk_size(args, kwargs) (line 517)
    _chk_size_call_result_572691 = invoke(stypy.reporting.localization.Localization(__file__, 517, 16), _chk_size_572687, *[x_572688, y_572689], **kwargs_572690)
    
    # Obtaining the member '__getitem__' of a type (line 517)
    getitem___572692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 4), _chk_size_call_result_572691, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 517)
    subscript_call_result_572693 = invoke(stypy.reporting.localization.Localization(__file__, 517, 4), getitem___572692, int_572686)
    
    # Assigning a type to the variable 'tuple_var_assignment_571447' (line 517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), 'tuple_var_assignment_571447', subscript_call_result_572693)
    
    # Assigning a Subscript to a Name (line 517):
    
    # Obtaining the type of the subscript
    int_572694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 4), 'int')
    
    # Call to _chk_size(...): (line 517)
    # Processing the call arguments (line 517)
    # Getting the type of 'x' (line 517)
    x_572696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 26), 'x', False)
    # Getting the type of 'y' (line 517)
    y_572697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 29), 'y', False)
    # Processing the call keyword arguments (line 517)
    kwargs_572698 = {}
    # Getting the type of '_chk_size' (line 517)
    _chk_size_572695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 16), '_chk_size', False)
    # Calling _chk_size(args, kwargs) (line 517)
    _chk_size_call_result_572699 = invoke(stypy.reporting.localization.Localization(__file__, 517, 16), _chk_size_572695, *[x_572696, y_572697], **kwargs_572698)
    
    # Obtaining the member '__getitem__' of a type (line 517)
    getitem___572700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 4), _chk_size_call_result_572699, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 517)
    subscript_call_result_572701 = invoke(stypy.reporting.localization.Localization(__file__, 517, 4), getitem___572700, int_572694)
    
    # Assigning a type to the variable 'tuple_var_assignment_571448' (line 517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), 'tuple_var_assignment_571448', subscript_call_result_572701)
    
    # Assigning a Name to a Name (line 517):
    # Getting the type of 'tuple_var_assignment_571446' (line 517)
    tuple_var_assignment_571446_572702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), 'tuple_var_assignment_571446')
    # Assigning a type to the variable 'x' (line 517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 5), 'x', tuple_var_assignment_571446_572702)
    
    # Assigning a Name to a Name (line 517):
    # Getting the type of 'tuple_var_assignment_571447' (line 517)
    tuple_var_assignment_571447_572703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), 'tuple_var_assignment_571447')
    # Assigning a type to the variable 'y' (line 517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 8), 'y', tuple_var_assignment_571447_572703)
    
    # Assigning a Name to a Name (line 517):
    # Getting the type of 'tuple_var_assignment_571448' (line 517)
    tuple_var_assignment_571448_572704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), 'tuple_var_assignment_571448')
    # Assigning a type to the variable 'n' (line 517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 11), 'n', tuple_var_assignment_571448_572704)
    
    # Assigning a Tuple to a Tuple (line 518):
    
    # Assigning a Call to a Name (line 518):
    
    # Call to flatten(...): (line 518)
    # Processing the call keyword arguments (line 518)
    kwargs_572707 = {}
    # Getting the type of 'x' (line 518)
    x_572705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 14), 'x', False)
    # Obtaining the member 'flatten' of a type (line 518)
    flatten_572706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 14), x_572705, 'flatten')
    # Calling flatten(args, kwargs) (line 518)
    flatten_call_result_572708 = invoke(stypy.reporting.localization.Localization(__file__, 518, 14), flatten_572706, *[], **kwargs_572707)
    
    # Assigning a type to the variable 'tuple_assignment_571449' (line 518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'tuple_assignment_571449', flatten_call_result_572708)
    
    # Assigning a Call to a Name (line 518):
    
    # Call to flatten(...): (line 518)
    # Processing the call keyword arguments (line 518)
    kwargs_572711 = {}
    # Getting the type of 'y' (line 518)
    y_572709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 27), 'y', False)
    # Obtaining the member 'flatten' of a type (line 518)
    flatten_572710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 27), y_572709, 'flatten')
    # Calling flatten(args, kwargs) (line 518)
    flatten_call_result_572712 = invoke(stypy.reporting.localization.Localization(__file__, 518, 27), flatten_572710, *[], **kwargs_572711)
    
    # Assigning a type to the variable 'tuple_assignment_571450' (line 518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'tuple_assignment_571450', flatten_call_result_572712)
    
    # Assigning a Name to a Name (line 518):
    # Getting the type of 'tuple_assignment_571449' (line 518)
    tuple_assignment_571449_572713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'tuple_assignment_571449')
    # Assigning a type to the variable 'x' (line 518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 5), 'x', tuple_assignment_571449_572713)
    
    # Assigning a Name to a Name (line 518):
    # Getting the type of 'tuple_assignment_571450' (line 518)
    tuple_assignment_571450_572714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'tuple_assignment_571450')
    # Assigning a type to the variable 'y' (line 518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 8), 'y', tuple_assignment_571450_572714)
    
    # Assigning a Call to a Name (line 519):
    
    # Assigning a Call to a Name (line 519):
    
    # Call to mask_or(...): (line 519)
    # Processing the call arguments (line 519)
    
    # Call to getmask(...): (line 519)
    # Processing the call arguments (line 519)
    # Getting the type of 'x' (line 519)
    x_572719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 30), 'x', False)
    # Processing the call keyword arguments (line 519)
    kwargs_572720 = {}
    # Getting the type of 'ma' (line 519)
    ma_572717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 19), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 519)
    getmask_572718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 19), ma_572717, 'getmask')
    # Calling getmask(args, kwargs) (line 519)
    getmask_call_result_572721 = invoke(stypy.reporting.localization.Localization(__file__, 519, 19), getmask_572718, *[x_572719], **kwargs_572720)
    
    
    # Call to getmask(...): (line 519)
    # Processing the call arguments (line 519)
    # Getting the type of 'y' (line 519)
    y_572724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 45), 'y', False)
    # Processing the call keyword arguments (line 519)
    kwargs_572725 = {}
    # Getting the type of 'ma' (line 519)
    ma_572722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 34), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 519)
    getmask_572723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 34), ma_572722, 'getmask')
    # Calling getmask(args, kwargs) (line 519)
    getmask_call_result_572726 = invoke(stypy.reporting.localization.Localization(__file__, 519, 34), getmask_572723, *[y_572724], **kwargs_572725)
    
    # Processing the call keyword arguments (line 519)
    kwargs_572727 = {}
    # Getting the type of 'ma' (line 519)
    ma_572715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 8), 'ma', False)
    # Obtaining the member 'mask_or' of a type (line 519)
    mask_or_572716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 8), ma_572715, 'mask_or')
    # Calling mask_or(args, kwargs) (line 519)
    mask_or_call_result_572728 = invoke(stypy.reporting.localization.Localization(__file__, 519, 8), mask_or_572716, *[getmask_call_result_572721, getmask_call_result_572726], **kwargs_572727)
    
    # Assigning a type to the variable 'm' (line 519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'm', mask_or_call_result_572728)
    
    
    # Getting the type of 'm' (line 520)
    m_572729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 7), 'm')
    # Getting the type of 'nomask' (line 520)
    nomask_572730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 16), 'nomask')
    # Applying the binary operator 'isnot' (line 520)
    result_is_not_572731 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 7), 'isnot', m_572729, nomask_572730)
    
    # Testing the type of an if condition (line 520)
    if_condition_572732 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 520, 4), result_is_not_572731)
    # Assigning a type to the variable 'if_condition_572732' (line 520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 4), 'if_condition_572732', if_condition_572732)
    # SSA begins for if statement (line 520)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 521):
    
    # Assigning a Call to a Name (line 521):
    
    # Call to array(...): (line 521)
    # Processing the call arguments (line 521)
    # Getting the type of 'x' (line 521)
    x_572735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 21), 'x', False)
    # Processing the call keyword arguments (line 521)
    # Getting the type of 'm' (line 521)
    m_572736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 29), 'm', False)
    keyword_572737 = m_572736
    # Getting the type of 'True' (line 521)
    True_572738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 37), 'True', False)
    keyword_572739 = True_572738
    kwargs_572740 = {'copy': keyword_572739, 'mask': keyword_572737}
    # Getting the type of 'ma' (line 521)
    ma_572733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 12), 'ma', False)
    # Obtaining the member 'array' of a type (line 521)
    array_572734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 12), ma_572733, 'array')
    # Calling array(args, kwargs) (line 521)
    array_call_result_572741 = invoke(stypy.reporting.localization.Localization(__file__, 521, 12), array_572734, *[x_572735], **kwargs_572740)
    
    # Assigning a type to the variable 'x' (line 521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'x', array_call_result_572741)
    
    # Assigning a Call to a Name (line 522):
    
    # Assigning a Call to a Name (line 522):
    
    # Call to array(...): (line 522)
    # Processing the call arguments (line 522)
    # Getting the type of 'y' (line 522)
    y_572744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 21), 'y', False)
    # Processing the call keyword arguments (line 522)
    # Getting the type of 'm' (line 522)
    m_572745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 29), 'm', False)
    keyword_572746 = m_572745
    # Getting the type of 'True' (line 522)
    True_572747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 37), 'True', False)
    keyword_572748 = True_572747
    kwargs_572749 = {'copy': keyword_572748, 'mask': keyword_572746}
    # Getting the type of 'ma' (line 522)
    ma_572742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 12), 'ma', False)
    # Obtaining the member 'array' of a type (line 522)
    array_572743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 12), ma_572742, 'array')
    # Calling array(args, kwargs) (line 522)
    array_call_result_572750 = invoke(stypy.reporting.localization.Localization(__file__, 522, 12), array_572743, *[y_572744], **kwargs_572749)
    
    # Assigning a type to the variable 'y' (line 522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'y', array_call_result_572750)
    
    # Getting the type of 'n' (line 526)
    n_572751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'n')
    
    # Call to int(...): (line 526)
    # Processing the call arguments (line 526)
    
    # Call to sum(...): (line 526)
    # Processing the call keyword arguments (line 526)
    kwargs_572755 = {}
    # Getting the type of 'm' (line 526)
    m_572753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 17), 'm', False)
    # Obtaining the member 'sum' of a type (line 526)
    sum_572754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 17), m_572753, 'sum')
    # Calling sum(args, kwargs) (line 526)
    sum_call_result_572756 = invoke(stypy.reporting.localization.Localization(__file__, 526, 17), sum_572754, *[], **kwargs_572755)
    
    # Processing the call keyword arguments (line 526)
    kwargs_572757 = {}
    # Getting the type of 'int' (line 526)
    int_572752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 13), 'int', False)
    # Calling int(args, kwargs) (line 526)
    int_call_result_572758 = invoke(stypy.reporting.localization.Localization(__file__, 526, 13), int_572752, *[sum_call_result_572756], **kwargs_572757)
    
    # Applying the binary operator '-=' (line 526)
    result_isub_572759 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 8), '-=', n_572751, int_call_result_572758)
    # Assigning a type to the variable 'n' (line 526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'n', result_isub_572759)
    
    # SSA join for if statement (line 520)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 528)
    n_572760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 7), 'n')
    int_572761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 11), 'int')
    # Applying the binary operator '<' (line 528)
    result_lt_572762 = python_operator(stypy.reporting.localization.Localization(__file__, 528, 7), '<', n_572760, int_572761)
    
    # Testing the type of an if condition (line 528)
    if_condition_572763 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 528, 4), result_lt_572762)
    # Assigning a type to the variable 'if_condition_572763' (line 528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 4), 'if_condition_572763', if_condition_572763)
    # SSA begins for if statement (line 528)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to KendalltauResult(...): (line 529)
    # Processing the call arguments (line 529)
    # Getting the type of 'np' (line 529)
    np_572765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 32), 'np', False)
    # Obtaining the member 'nan' of a type (line 529)
    nan_572766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 32), np_572765, 'nan')
    # Getting the type of 'np' (line 529)
    np_572767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 40), 'np', False)
    # Obtaining the member 'nan' of a type (line 529)
    nan_572768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 40), np_572767, 'nan')
    # Processing the call keyword arguments (line 529)
    kwargs_572769 = {}
    # Getting the type of 'KendalltauResult' (line 529)
    KendalltauResult_572764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 15), 'KendalltauResult', False)
    # Calling KendalltauResult(args, kwargs) (line 529)
    KendalltauResult_call_result_572770 = invoke(stypy.reporting.localization.Localization(__file__, 529, 15), KendalltauResult_572764, *[nan_572766, nan_572768], **kwargs_572769)
    
    # Assigning a type to the variable 'stypy_return_type' (line 529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'stypy_return_type', KendalltauResult_call_result_572770)
    # SSA join for if statement (line 528)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 531):
    
    # Assigning a Call to a Name (line 531):
    
    # Call to masked_equal(...): (line 531)
    # Processing the call arguments (line 531)
    
    # Call to rankdata(...): (line 531)
    # Processing the call arguments (line 531)
    # Getting the type of 'x' (line 531)
    x_572774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 34), 'x', False)
    # Processing the call keyword arguments (line 531)
    # Getting the type of 'use_missing' (line 531)
    use_missing_572775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 49), 'use_missing', False)
    keyword_572776 = use_missing_572775
    kwargs_572777 = {'use_missing': keyword_572776}
    # Getting the type of 'rankdata' (line 531)
    rankdata_572773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 25), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 531)
    rankdata_call_result_572778 = invoke(stypy.reporting.localization.Localization(__file__, 531, 25), rankdata_572773, *[x_572774], **kwargs_572777)
    
    int_572779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 63), 'int')
    # Processing the call keyword arguments (line 531)
    kwargs_572780 = {}
    # Getting the type of 'ma' (line 531)
    ma_572771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 9), 'ma', False)
    # Obtaining the member 'masked_equal' of a type (line 531)
    masked_equal_572772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 9), ma_572771, 'masked_equal')
    # Calling masked_equal(args, kwargs) (line 531)
    masked_equal_call_result_572781 = invoke(stypy.reporting.localization.Localization(__file__, 531, 9), masked_equal_572772, *[rankdata_call_result_572778, int_572779], **kwargs_572780)
    
    # Assigning a type to the variable 'rx' (line 531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 4), 'rx', masked_equal_call_result_572781)
    
    # Assigning a Call to a Name (line 532):
    
    # Assigning a Call to a Name (line 532):
    
    # Call to masked_equal(...): (line 532)
    # Processing the call arguments (line 532)
    
    # Call to rankdata(...): (line 532)
    # Processing the call arguments (line 532)
    # Getting the type of 'y' (line 532)
    y_572785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 34), 'y', False)
    # Processing the call keyword arguments (line 532)
    # Getting the type of 'use_missing' (line 532)
    use_missing_572786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 49), 'use_missing', False)
    keyword_572787 = use_missing_572786
    kwargs_572788 = {'use_missing': keyword_572787}
    # Getting the type of 'rankdata' (line 532)
    rankdata_572784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 25), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 532)
    rankdata_call_result_572789 = invoke(stypy.reporting.localization.Localization(__file__, 532, 25), rankdata_572784, *[y_572785], **kwargs_572788)
    
    int_572790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 63), 'int')
    # Processing the call keyword arguments (line 532)
    kwargs_572791 = {}
    # Getting the type of 'ma' (line 532)
    ma_572782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 9), 'ma', False)
    # Obtaining the member 'masked_equal' of a type (line 532)
    masked_equal_572783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 9), ma_572782, 'masked_equal')
    # Calling masked_equal(args, kwargs) (line 532)
    masked_equal_call_result_572792 = invoke(stypy.reporting.localization.Localization(__file__, 532, 9), masked_equal_572783, *[rankdata_call_result_572789, int_572790], **kwargs_572791)
    
    # Assigning a type to the variable 'ry' (line 532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 4), 'ry', masked_equal_call_result_572792)
    
    # Assigning a Call to a Name (line 533):
    
    # Assigning a Call to a Name (line 533):
    
    # Call to argsort(...): (line 533)
    # Processing the call keyword arguments (line 533)
    kwargs_572795 = {}
    # Getting the type of 'rx' (line 533)
    rx_572793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 10), 'rx', False)
    # Obtaining the member 'argsort' of a type (line 533)
    argsort_572794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 10), rx_572793, 'argsort')
    # Calling argsort(args, kwargs) (line 533)
    argsort_call_result_572796 = invoke(stypy.reporting.localization.Localization(__file__, 533, 10), argsort_572794, *[], **kwargs_572795)
    
    # Assigning a type to the variable 'idx' (line 533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 4), 'idx', argsort_call_result_572796)
    
    # Assigning a Tuple to a Tuple (line 534):
    
    # Assigning a Subscript to a Name (line 534):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 534)
    idx_572797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 19), 'idx')
    # Getting the type of 'rx' (line 534)
    rx_572798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 16), 'rx')
    # Obtaining the member '__getitem__' of a type (line 534)
    getitem___572799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 16), rx_572798, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 534)
    subscript_call_result_572800 = invoke(stypy.reporting.localization.Localization(__file__, 534, 16), getitem___572799, idx_572797)
    
    # Assigning a type to the variable 'tuple_assignment_571451' (line 534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'tuple_assignment_571451', subscript_call_result_572800)
    
    # Assigning a Subscript to a Name (line 534):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 534)
    idx_572801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 28), 'idx')
    # Getting the type of 'ry' (line 534)
    ry_572802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 25), 'ry')
    # Obtaining the member '__getitem__' of a type (line 534)
    getitem___572803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 25), ry_572802, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 534)
    subscript_call_result_572804 = invoke(stypy.reporting.localization.Localization(__file__, 534, 25), getitem___572803, idx_572801)
    
    # Assigning a type to the variable 'tuple_assignment_571452' (line 534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'tuple_assignment_571452', subscript_call_result_572804)
    
    # Assigning a Name to a Name (line 534):
    # Getting the type of 'tuple_assignment_571451' (line 534)
    tuple_assignment_571451_572805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'tuple_assignment_571451')
    # Assigning a type to the variable 'rx' (line 534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 5), 'rx', tuple_assignment_571451_572805)
    
    # Assigning a Name to a Name (line 534):
    # Getting the type of 'tuple_assignment_571452' (line 534)
    tuple_assignment_571452_572806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'tuple_assignment_571452')
    # Assigning a type to the variable 'ry' (line 534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 9), 'ry', tuple_assignment_571452_572806)
    
    # Assigning a Call to a Name (line 535):
    
    # Assigning a Call to a Name (line 535):
    
    # Call to sum(...): (line 535)
    # Processing the call arguments (line 535)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 536)
    # Processing the call arguments (line 536)
    
    # Call to len(...): (line 536)
    # Processing the call arguments (line 536)
    # Getting the type of 'ry' (line 536)
    ry_572843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 35), 'ry', False)
    # Processing the call keyword arguments (line 536)
    kwargs_572844 = {}
    # Getting the type of 'len' (line 536)
    len_572842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 31), 'len', False)
    # Calling len(args, kwargs) (line 536)
    len_call_result_572845 = invoke(stypy.reporting.localization.Localization(__file__, 536, 31), len_572842, *[ry_572843], **kwargs_572844)
    
    int_572846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, 39), 'int')
    # Applying the binary operator '-' (line 536)
    result_sub_572847 = python_operator(stypy.reporting.localization.Localization(__file__, 536, 31), '-', len_call_result_572845, int_572846)
    
    # Processing the call keyword arguments (line 536)
    kwargs_572848 = {}
    # Getting the type of 'range' (line 536)
    range_572841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 25), 'range', False)
    # Calling range(args, kwargs) (line 536)
    range_call_result_572849 = invoke(stypy.reporting.localization.Localization(__file__, 536, 25), range_572841, *[result_sub_572847], **kwargs_572848)
    
    comprehension_572850 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 16), range_call_result_572849)
    # Assigning a type to the variable 'i' (line 535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 16), 'i', comprehension_572850)
    
    # Call to sum(...): (line 535)
    # Processing the call keyword arguments (line 535)
    kwargs_572839 = {}
    
    # Call to filled(...): (line 535)
    # Processing the call arguments (line 535)
    int_572835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 65), 'int')
    # Processing the call keyword arguments (line 535)
    kwargs_572836 = {}
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 535)
    i_572809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 21), 'i', False)
    int_572810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 23), 'int')
    # Applying the binary operator '+' (line 535)
    result_add_572811 = python_operator(stypy.reporting.localization.Localization(__file__, 535, 21), '+', i_572809, int_572810)
    
    slice_572812 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 535, 18), result_add_572811, None, None)
    # Getting the type of 'ry' (line 535)
    ry_572813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 18), 'ry', False)
    # Obtaining the member '__getitem__' of a type (line 535)
    getitem___572814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 18), ry_572813, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 535)
    subscript_call_result_572815 = invoke(stypy.reporting.localization.Localization(__file__, 535, 18), getitem___572814, slice_572812)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 535)
    i_572816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 32), 'i', False)
    # Getting the type of 'ry' (line 535)
    ry_572817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 29), 'ry', False)
    # Obtaining the member '__getitem__' of a type (line 535)
    getitem___572818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 29), ry_572817, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 535)
    subscript_call_result_572819 = invoke(stypy.reporting.localization.Localization(__file__, 535, 29), getitem___572818, i_572816)
    
    # Applying the binary operator '>' (line 535)
    result_gt_572820 = python_operator(stypy.reporting.localization.Localization(__file__, 535, 18), '>', subscript_call_result_572815, subscript_call_result_572819)
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 535)
    i_572821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 42), 'i', False)
    int_572822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 44), 'int')
    # Applying the binary operator '+' (line 535)
    result_add_572823 = python_operator(stypy.reporting.localization.Localization(__file__, 535, 42), '+', i_572821, int_572822)
    
    slice_572824 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 535, 39), result_add_572823, None, None)
    # Getting the type of 'rx' (line 535)
    rx_572825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 39), 'rx', False)
    # Obtaining the member '__getitem__' of a type (line 535)
    getitem___572826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 39), rx_572825, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 535)
    subscript_call_result_572827 = invoke(stypy.reporting.localization.Localization(__file__, 535, 39), getitem___572826, slice_572824)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 535)
    i_572828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 53), 'i', False)
    # Getting the type of 'rx' (line 535)
    rx_572829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 50), 'rx', False)
    # Obtaining the member '__getitem__' of a type (line 535)
    getitem___572830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 50), rx_572829, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 535)
    subscript_call_result_572831 = invoke(stypy.reporting.localization.Localization(__file__, 535, 50), getitem___572830, i_572828)
    
    # Applying the binary operator '>' (line 535)
    result_gt_572832 = python_operator(stypy.reporting.localization.Localization(__file__, 535, 39), '>', subscript_call_result_572827, subscript_call_result_572831)
    
    # Applying the binary operator '*' (line 535)
    result_mul_572833 = python_operator(stypy.reporting.localization.Localization(__file__, 535, 17), '*', result_gt_572820, result_gt_572832)
    
    # Obtaining the member 'filled' of a type (line 535)
    filled_572834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 17), result_mul_572833, 'filled')
    # Calling filled(args, kwargs) (line 535)
    filled_call_result_572837 = invoke(stypy.reporting.localization.Localization(__file__, 535, 17), filled_572834, *[int_572835], **kwargs_572836)
    
    # Obtaining the member 'sum' of a type (line 535)
    sum_572838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 17), filled_call_result_572837, 'sum')
    # Calling sum(args, kwargs) (line 535)
    sum_call_result_572840 = invoke(stypy.reporting.localization.Localization(__file__, 535, 17), sum_572838, *[], **kwargs_572839)
    
    list_572851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 16), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 535, 16), list_572851, sum_call_result_572840)
    # Processing the call keyword arguments (line 535)
    # Getting the type of 'float' (line 536)
    float_572852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 50), 'float', False)
    keyword_572853 = float_572852
    kwargs_572854 = {'dtype': keyword_572853}
    # Getting the type of 'np' (line 535)
    np_572807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 8), 'np', False)
    # Obtaining the member 'sum' of a type (line 535)
    sum_572808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 8), np_572807, 'sum')
    # Calling sum(args, kwargs) (line 535)
    sum_call_result_572855 = invoke(stypy.reporting.localization.Localization(__file__, 535, 8), sum_572808, *[list_572851], **kwargs_572854)
    
    # Assigning a type to the variable 'C' (line 535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 4), 'C', sum_call_result_572855)
    
    # Assigning a Call to a Name (line 537):
    
    # Assigning a Call to a Name (line 537):
    
    # Call to sum(...): (line 537)
    # Processing the call arguments (line 537)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 538)
    # Processing the call arguments (line 538)
    
    # Call to len(...): (line 538)
    # Processing the call arguments (line 538)
    # Getting the type of 'ry' (line 538)
    ry_572892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 35), 'ry', False)
    # Processing the call keyword arguments (line 538)
    kwargs_572893 = {}
    # Getting the type of 'len' (line 538)
    len_572891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 31), 'len', False)
    # Calling len(args, kwargs) (line 538)
    len_call_result_572894 = invoke(stypy.reporting.localization.Localization(__file__, 538, 31), len_572891, *[ry_572892], **kwargs_572893)
    
    int_572895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 39), 'int')
    # Applying the binary operator '-' (line 538)
    result_sub_572896 = python_operator(stypy.reporting.localization.Localization(__file__, 538, 31), '-', len_call_result_572894, int_572895)
    
    # Processing the call keyword arguments (line 538)
    kwargs_572897 = {}
    # Getting the type of 'range' (line 538)
    range_572890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 25), 'range', False)
    # Calling range(args, kwargs) (line 538)
    range_call_result_572898 = invoke(stypy.reporting.localization.Localization(__file__, 538, 25), range_572890, *[result_sub_572896], **kwargs_572897)
    
    comprehension_572899 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 537, 16), range_call_result_572898)
    # Assigning a type to the variable 'i' (line 537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 16), 'i', comprehension_572899)
    
    # Call to sum(...): (line 537)
    # Processing the call keyword arguments (line 537)
    kwargs_572888 = {}
    
    # Call to filled(...): (line 537)
    # Processing the call arguments (line 537)
    int_572884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, 63), 'int')
    # Processing the call keyword arguments (line 537)
    kwargs_572885 = {}
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 537)
    i_572858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 21), 'i', False)
    int_572859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, 23), 'int')
    # Applying the binary operator '+' (line 537)
    result_add_572860 = python_operator(stypy.reporting.localization.Localization(__file__, 537, 21), '+', i_572858, int_572859)
    
    slice_572861 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 537, 18), result_add_572860, None, None)
    # Getting the type of 'ry' (line 537)
    ry_572862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 18), 'ry', False)
    # Obtaining the member '__getitem__' of a type (line 537)
    getitem___572863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 18), ry_572862, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 537)
    subscript_call_result_572864 = invoke(stypy.reporting.localization.Localization(__file__, 537, 18), getitem___572863, slice_572861)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 537)
    i_572865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 32), 'i', False)
    # Getting the type of 'ry' (line 537)
    ry_572866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 29), 'ry', False)
    # Obtaining the member '__getitem__' of a type (line 537)
    getitem___572867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 29), ry_572866, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 537)
    subscript_call_result_572868 = invoke(stypy.reporting.localization.Localization(__file__, 537, 29), getitem___572867, i_572865)
    
    # Applying the binary operator '<' (line 537)
    result_lt_572869 = python_operator(stypy.reporting.localization.Localization(__file__, 537, 18), '<', subscript_call_result_572864, subscript_call_result_572868)
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 537)
    i_572870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 40), 'i', False)
    int_572871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, 42), 'int')
    # Applying the binary operator '+' (line 537)
    result_add_572872 = python_operator(stypy.reporting.localization.Localization(__file__, 537, 40), '+', i_572870, int_572871)
    
    slice_572873 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 537, 37), result_add_572872, None, None)
    # Getting the type of 'rx' (line 537)
    rx_572874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 37), 'rx', False)
    # Obtaining the member '__getitem__' of a type (line 537)
    getitem___572875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 37), rx_572874, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 537)
    subscript_call_result_572876 = invoke(stypy.reporting.localization.Localization(__file__, 537, 37), getitem___572875, slice_572873)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 537)
    i_572877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 51), 'i', False)
    # Getting the type of 'rx' (line 537)
    rx_572878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 48), 'rx', False)
    # Obtaining the member '__getitem__' of a type (line 537)
    getitem___572879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 48), rx_572878, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 537)
    subscript_call_result_572880 = invoke(stypy.reporting.localization.Localization(__file__, 537, 48), getitem___572879, i_572877)
    
    # Applying the binary operator '>' (line 537)
    result_gt_572881 = python_operator(stypy.reporting.localization.Localization(__file__, 537, 37), '>', subscript_call_result_572876, subscript_call_result_572880)
    
    # Applying the binary operator '*' (line 537)
    result_mul_572882 = python_operator(stypy.reporting.localization.Localization(__file__, 537, 17), '*', result_lt_572869, result_gt_572881)
    
    # Obtaining the member 'filled' of a type (line 537)
    filled_572883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 17), result_mul_572882, 'filled')
    # Calling filled(args, kwargs) (line 537)
    filled_call_result_572886 = invoke(stypy.reporting.localization.Localization(__file__, 537, 17), filled_572883, *[int_572884], **kwargs_572885)
    
    # Obtaining the member 'sum' of a type (line 537)
    sum_572887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 17), filled_call_result_572886, 'sum')
    # Calling sum(args, kwargs) (line 537)
    sum_call_result_572889 = invoke(stypy.reporting.localization.Localization(__file__, 537, 17), sum_572887, *[], **kwargs_572888)
    
    list_572900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, 16), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 537, 16), list_572900, sum_call_result_572889)
    # Processing the call keyword arguments (line 537)
    # Getting the type of 'float' (line 538)
    float_572901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 50), 'float', False)
    keyword_572902 = float_572901
    kwargs_572903 = {'dtype': keyword_572902}
    # Getting the type of 'np' (line 537)
    np_572856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 8), 'np', False)
    # Obtaining the member 'sum' of a type (line 537)
    sum_572857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 8), np_572856, 'sum')
    # Calling sum(args, kwargs) (line 537)
    sum_call_result_572904 = invoke(stypy.reporting.localization.Localization(__file__, 537, 8), sum_572857, *[list_572900], **kwargs_572903)
    
    # Assigning a type to the variable 'D' (line 537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'D', sum_call_result_572904)
    
    # Getting the type of 'use_ties' (line 539)
    use_ties_572905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 7), 'use_ties')
    # Testing the type of an if condition (line 539)
    if_condition_572906 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 539, 4), use_ties_572905)
    # Assigning a type to the variable 'if_condition_572906' (line 539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 539, 4), 'if_condition_572906', if_condition_572906)
    # SSA begins for if statement (line 539)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 540):
    
    # Assigning a Call to a Name (line 540):
    
    # Call to count_tied_groups(...): (line 540)
    # Processing the call arguments (line 540)
    # Getting the type of 'x' (line 540)
    x_572908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 34), 'x', False)
    # Processing the call keyword arguments (line 540)
    kwargs_572909 = {}
    # Getting the type of 'count_tied_groups' (line 540)
    count_tied_groups_572907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 16), 'count_tied_groups', False)
    # Calling count_tied_groups(args, kwargs) (line 540)
    count_tied_groups_call_result_572910 = invoke(stypy.reporting.localization.Localization(__file__, 540, 16), count_tied_groups_572907, *[x_572908], **kwargs_572909)
    
    # Assigning a type to the variable 'xties' (line 540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 8), 'xties', count_tied_groups_call_result_572910)
    
    # Assigning a Call to a Name (line 541):
    
    # Assigning a Call to a Name (line 541):
    
    # Call to count_tied_groups(...): (line 541)
    # Processing the call arguments (line 541)
    # Getting the type of 'y' (line 541)
    y_572912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 34), 'y', False)
    # Processing the call keyword arguments (line 541)
    kwargs_572913 = {}
    # Getting the type of 'count_tied_groups' (line 541)
    count_tied_groups_572911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 16), 'count_tied_groups', False)
    # Calling count_tied_groups(args, kwargs) (line 541)
    count_tied_groups_call_result_572914 = invoke(stypy.reporting.localization.Localization(__file__, 541, 16), count_tied_groups_572911, *[y_572912], **kwargs_572913)
    
    # Assigning a type to the variable 'yties' (line 541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'yties', count_tied_groups_call_result_572914)
    
    # Assigning a Call to a Name (line 542):
    
    # Assigning a Call to a Name (line 542):
    
    # Call to sum(...): (line 542)
    # Processing the call arguments (line 542)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 542)
    # Processing the call arguments (line 542)
    # Getting the type of 'xties' (line 542)
    xties_572925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 58), 'xties', False)
    # Processing the call keyword arguments (line 542)
    kwargs_572926 = {}
    # Getting the type of 'iteritems' (line 542)
    iteritems_572924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 48), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 542)
    iteritems_call_result_572927 = invoke(stypy.reporting.localization.Localization(__file__, 542, 48), iteritems_572924, *[xties_572925], **kwargs_572926)
    
    comprehension_572928 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 542, 25), iteritems_call_result_572927)
    # Assigning a type to the variable 'k' (line 542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 25), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 542, 25), comprehension_572928))
    # Assigning a type to the variable 'v' (line 542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 25), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 542, 25), comprehension_572928))
    # Getting the type of 'v' (line 542)
    v_572917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 25), 'v', False)
    # Getting the type of 'k' (line 542)
    k_572918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 27), 'k', False)
    # Applying the binary operator '*' (line 542)
    result_mul_572919 = python_operator(stypy.reporting.localization.Localization(__file__, 542, 25), '*', v_572917, k_572918)
    
    # Getting the type of 'k' (line 542)
    k_572920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 30), 'k', False)
    int_572921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 32), 'int')
    # Applying the binary operator '-' (line 542)
    result_sub_572922 = python_operator(stypy.reporting.localization.Localization(__file__, 542, 30), '-', k_572920, int_572921)
    
    # Applying the binary operator '*' (line 542)
    result_mul_572923 = python_operator(stypy.reporting.localization.Localization(__file__, 542, 28), '*', result_mul_572919, result_sub_572922)
    
    list_572929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 25), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 542, 25), list_572929, result_mul_572923)
    # Processing the call keyword arguments (line 542)
    # Getting the type of 'float' (line 542)
    float_572930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 73), 'float', False)
    keyword_572931 = float_572930
    kwargs_572932 = {'dtype': keyword_572931}
    # Getting the type of 'np' (line 542)
    np_572915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 17), 'np', False)
    # Obtaining the member 'sum' of a type (line 542)
    sum_572916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 17), np_572915, 'sum')
    # Calling sum(args, kwargs) (line 542)
    sum_call_result_572933 = invoke(stypy.reporting.localization.Localization(__file__, 542, 17), sum_572916, *[list_572929], **kwargs_572932)
    
    # Assigning a type to the variable 'corr_x' (line 542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 8), 'corr_x', sum_call_result_572933)
    
    # Assigning a Call to a Name (line 543):
    
    # Assigning a Call to a Name (line 543):
    
    # Call to sum(...): (line 543)
    # Processing the call arguments (line 543)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 543)
    # Processing the call arguments (line 543)
    # Getting the type of 'yties' (line 543)
    yties_572944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 58), 'yties', False)
    # Processing the call keyword arguments (line 543)
    kwargs_572945 = {}
    # Getting the type of 'iteritems' (line 543)
    iteritems_572943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 48), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 543)
    iteritems_call_result_572946 = invoke(stypy.reporting.localization.Localization(__file__, 543, 48), iteritems_572943, *[yties_572944], **kwargs_572945)
    
    comprehension_572947 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 25), iteritems_call_result_572946)
    # Assigning a type to the variable 'k' (line 543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 25), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 25), comprehension_572947))
    # Assigning a type to the variable 'v' (line 543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 25), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 25), comprehension_572947))
    # Getting the type of 'v' (line 543)
    v_572936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 25), 'v', False)
    # Getting the type of 'k' (line 543)
    k_572937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 27), 'k', False)
    # Applying the binary operator '*' (line 543)
    result_mul_572938 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 25), '*', v_572936, k_572937)
    
    # Getting the type of 'k' (line 543)
    k_572939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 30), 'k', False)
    int_572940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 32), 'int')
    # Applying the binary operator '-' (line 543)
    result_sub_572941 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 30), '-', k_572939, int_572940)
    
    # Applying the binary operator '*' (line 543)
    result_mul_572942 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 28), '*', result_mul_572938, result_sub_572941)
    
    list_572948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 25), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 25), list_572948, result_mul_572942)
    # Processing the call keyword arguments (line 543)
    # Getting the type of 'float' (line 543)
    float_572949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 73), 'float', False)
    keyword_572950 = float_572949
    kwargs_572951 = {'dtype': keyword_572950}
    # Getting the type of 'np' (line 543)
    np_572934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 17), 'np', False)
    # Obtaining the member 'sum' of a type (line 543)
    sum_572935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 17), np_572934, 'sum')
    # Calling sum(args, kwargs) (line 543)
    sum_call_result_572952 = invoke(stypy.reporting.localization.Localization(__file__, 543, 17), sum_572935, *[list_572948], **kwargs_572951)
    
    # Assigning a type to the variable 'corr_y' (line 543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 8), 'corr_y', sum_call_result_572952)
    
    # Assigning a Call to a Name (line 544):
    
    # Assigning a Call to a Name (line 544):
    
    # Call to sqrt(...): (line 544)
    # Processing the call arguments (line 544)
    # Getting the type of 'n' (line 544)
    n_572955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 25), 'n', False)
    # Getting the type of 'n' (line 544)
    n_572956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 28), 'n', False)
    int_572957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 30), 'int')
    # Applying the binary operator '-' (line 544)
    result_sub_572958 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 28), '-', n_572956, int_572957)
    
    # Applying the binary operator '*' (line 544)
    result_mul_572959 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 25), '*', n_572955, result_sub_572958)
    
    # Getting the type of 'corr_x' (line 544)
    corr_x_572960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 33), 'corr_x', False)
    # Applying the binary operator '-' (line 544)
    result_sub_572961 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 25), '-', result_mul_572959, corr_x_572960)
    
    float_572962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 41), 'float')
    # Applying the binary operator 'div' (line 544)
    result_div_572963 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 24), 'div', result_sub_572961, float_572962)
    
    # Getting the type of 'n' (line 544)
    n_572964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 47), 'n', False)
    # Getting the type of 'n' (line 544)
    n_572965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 50), 'n', False)
    int_572966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 52), 'int')
    # Applying the binary operator '-' (line 544)
    result_sub_572967 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 50), '-', n_572965, int_572966)
    
    # Applying the binary operator '*' (line 544)
    result_mul_572968 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 47), '*', n_572964, result_sub_572967)
    
    # Getting the type of 'corr_y' (line 544)
    corr_y_572969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 55), 'corr_y', False)
    # Applying the binary operator '-' (line 544)
    result_sub_572970 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 47), '-', result_mul_572968, corr_y_572969)
    
    # Applying the binary operator '*' (line 544)
    result_mul_572971 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 44), '*', result_div_572963, result_sub_572970)
    
    float_572972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 63), 'float')
    # Applying the binary operator 'div' (line 544)
    result_div_572973 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 62), 'div', result_mul_572971, float_572972)
    
    # Processing the call keyword arguments (line 544)
    kwargs_572974 = {}
    # Getting the type of 'ma' (line 544)
    ma_572953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 16), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 544)
    sqrt_572954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 16), ma_572953, 'sqrt')
    # Calling sqrt(args, kwargs) (line 544)
    sqrt_call_result_572975 = invoke(stypy.reporting.localization.Localization(__file__, 544, 16), sqrt_572954, *[result_div_572973], **kwargs_572974)
    
    # Assigning a type to the variable 'denom' (line 544)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 8), 'denom', sqrt_call_result_572975)
    # SSA branch for the else part of an if statement (line 539)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 546):
    
    # Assigning a BinOp to a Name (line 546):
    # Getting the type of 'n' (line 546)
    n_572976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 16), 'n')
    # Getting the type of 'n' (line 546)
    n_572977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 19), 'n')
    int_572978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 21), 'int')
    # Applying the binary operator '-' (line 546)
    result_sub_572979 = python_operator(stypy.reporting.localization.Localization(__file__, 546, 19), '-', n_572977, int_572978)
    
    # Applying the binary operator '*' (line 546)
    result_mul_572980 = python_operator(stypy.reporting.localization.Localization(__file__, 546, 16), '*', n_572976, result_sub_572979)
    
    float_572981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 24), 'float')
    # Applying the binary operator 'div' (line 546)
    result_div_572982 = python_operator(stypy.reporting.localization.Localization(__file__, 546, 23), 'div', result_mul_572980, float_572981)
    
    # Assigning a type to the variable 'denom' (line 546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'denom', result_div_572982)
    # SSA join for if statement (line 539)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 547):
    
    # Assigning a BinOp to a Name (line 547):
    # Getting the type of 'C' (line 547)
    C_572983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 11), 'C')
    # Getting the type of 'D' (line 547)
    D_572984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 13), 'D')
    # Applying the binary operator '-' (line 547)
    result_sub_572985 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 11), '-', C_572983, D_572984)
    
    # Getting the type of 'denom' (line 547)
    denom_572986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 18), 'denom')
    # Applying the binary operator 'div' (line 547)
    result_div_572987 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 10), 'div', result_sub_572985, denom_572986)
    
    # Assigning a type to the variable 'tau' (line 547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 4), 'tau', result_div_572987)
    
    # Assigning a BinOp to a Name (line 549):
    
    # Assigning a BinOp to a Name (line 549):
    # Getting the type of 'n' (line 549)
    n_572988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'n')
    # Getting the type of 'n' (line 549)
    n_572989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 15), 'n')
    int_572990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 17), 'int')
    # Applying the binary operator '-' (line 549)
    result_sub_572991 = python_operator(stypy.reporting.localization.Localization(__file__, 549, 15), '-', n_572989, int_572990)
    
    # Applying the binary operator '*' (line 549)
    result_mul_572992 = python_operator(stypy.reporting.localization.Localization(__file__, 549, 12), '*', n_572988, result_sub_572991)
    
    int_572993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 21), 'int')
    # Getting the type of 'n' (line 549)
    n_572994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 23), 'n')
    # Applying the binary operator '*' (line 549)
    result_mul_572995 = python_operator(stypy.reporting.localization.Localization(__file__, 549, 21), '*', int_572993, n_572994)
    
    int_572996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 25), 'int')
    # Applying the binary operator '+' (line 549)
    result_add_572997 = python_operator(stypy.reporting.localization.Localization(__file__, 549, 21), '+', result_mul_572995, int_572996)
    
    # Applying the binary operator '*' (line 549)
    result_mul_572998 = python_operator(stypy.reporting.localization.Localization(__file__, 549, 19), '*', result_mul_572992, result_add_572997)
    
    # Assigning a type to the variable 'var_s' (line 549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 4), 'var_s', result_mul_572998)
    
    # Getting the type of 'use_ties' (line 550)
    use_ties_572999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 7), 'use_ties')
    # Testing the type of an if condition (line 550)
    if_condition_573000 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 550, 4), use_ties_572999)
    # Assigning a type to the variable 'if_condition_573000' (line 550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 4), 'if_condition_573000', if_condition_573000)
    # SSA begins for if statement (line 550)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'var_s' (line 551)
    var_s_573001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'var_s')
    
    # Call to sum(...): (line 551)
    # Processing the call arguments (line 551)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 551, 24, True)
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 551)
    # Processing the call arguments (line 551)
    # Getting the type of 'xties' (line 551)
    xties_573020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 68), 'xties', False)
    # Processing the call keyword arguments (line 551)
    kwargs_573021 = {}
    # Getting the type of 'iteritems' (line 551)
    iteritems_573019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 58), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 551)
    iteritems_call_result_573022 = invoke(stypy.reporting.localization.Localization(__file__, 551, 58), iteritems_573019, *[xties_573020], **kwargs_573021)
    
    comprehension_573023 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 24), iteritems_call_result_573022)
    # Assigning a type to the variable 'k' (line 551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 24), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 24), comprehension_573023))
    # Assigning a type to the variable 'v' (line 551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 24), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 24), comprehension_573023))
    # Getting the type of 'v' (line 551)
    v_573004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 24), 'v', False)
    # Getting the type of 'k' (line 551)
    k_573005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 26), 'k', False)
    # Applying the binary operator '*' (line 551)
    result_mul_573006 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 24), '*', v_573004, k_573005)
    
    # Getting the type of 'k' (line 551)
    k_573007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 29), 'k', False)
    int_573008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 31), 'int')
    # Applying the binary operator '-' (line 551)
    result_sub_573009 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 29), '-', k_573007, int_573008)
    
    # Applying the binary operator '*' (line 551)
    result_mul_573010 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 27), '*', result_mul_573006, result_sub_573009)
    
    int_573011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 35), 'int')
    # Getting the type of 'k' (line 551)
    k_573012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 37), 'k', False)
    # Applying the binary operator '*' (line 551)
    result_mul_573013 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 35), '*', int_573011, k_573012)
    
    int_573014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 39), 'int')
    # Applying the binary operator '+' (line 551)
    result_add_573015 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 35), '+', result_mul_573013, int_573014)
    
    # Applying the binary operator '*' (line 551)
    result_mul_573016 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 33), '*', result_mul_573010, result_add_573015)
    
    float_573017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 42), 'float')
    # Applying the binary operator '*' (line 551)
    result_mul_573018 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 41), '*', result_mul_573016, float_573017)
    
    list_573024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 24), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 24), list_573024, result_mul_573018)
    # Processing the call keyword arguments (line 551)
    kwargs_573025 = {}
    # Getting the type of 'np' (line 551)
    np_573002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 17), 'np', False)
    # Obtaining the member 'sum' of a type (line 551)
    sum_573003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 17), np_573002, 'sum')
    # Calling sum(args, kwargs) (line 551)
    sum_call_result_573026 = invoke(stypy.reporting.localization.Localization(__file__, 551, 17), sum_573003, *[list_573024], **kwargs_573025)
    
    # Applying the binary operator '-=' (line 551)
    result_isub_573027 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 8), '-=', var_s_573001, sum_call_result_573026)
    # Assigning a type to the variable 'var_s' (line 551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'var_s', result_isub_573027)
    
    
    # Getting the type of 'var_s' (line 552)
    var_s_573028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'var_s')
    
    # Call to sum(...): (line 552)
    # Processing the call arguments (line 552)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 552, 24, True)
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 552)
    # Processing the call arguments (line 552)
    # Getting the type of 'yties' (line 552)
    yties_573047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 68), 'yties', False)
    # Processing the call keyword arguments (line 552)
    kwargs_573048 = {}
    # Getting the type of 'iteritems' (line 552)
    iteritems_573046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 58), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 552)
    iteritems_call_result_573049 = invoke(stypy.reporting.localization.Localization(__file__, 552, 58), iteritems_573046, *[yties_573047], **kwargs_573048)
    
    comprehension_573050 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 552, 24), iteritems_call_result_573049)
    # Assigning a type to the variable 'k' (line 552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 24), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 552, 24), comprehension_573050))
    # Assigning a type to the variable 'v' (line 552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 24), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 552, 24), comprehension_573050))
    # Getting the type of 'v' (line 552)
    v_573031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 24), 'v', False)
    # Getting the type of 'k' (line 552)
    k_573032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 26), 'k', False)
    # Applying the binary operator '*' (line 552)
    result_mul_573033 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 24), '*', v_573031, k_573032)
    
    # Getting the type of 'k' (line 552)
    k_573034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 29), 'k', False)
    int_573035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 31), 'int')
    # Applying the binary operator '-' (line 552)
    result_sub_573036 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 29), '-', k_573034, int_573035)
    
    # Applying the binary operator '*' (line 552)
    result_mul_573037 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 27), '*', result_mul_573033, result_sub_573036)
    
    int_573038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 35), 'int')
    # Getting the type of 'k' (line 552)
    k_573039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 37), 'k', False)
    # Applying the binary operator '*' (line 552)
    result_mul_573040 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 35), '*', int_573038, k_573039)
    
    int_573041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 39), 'int')
    # Applying the binary operator '+' (line 552)
    result_add_573042 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 35), '+', result_mul_573040, int_573041)
    
    # Applying the binary operator '*' (line 552)
    result_mul_573043 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 33), '*', result_mul_573037, result_add_573042)
    
    float_573044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 42), 'float')
    # Applying the binary operator '*' (line 552)
    result_mul_573045 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 41), '*', result_mul_573043, float_573044)
    
    list_573051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 24), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 552, 24), list_573051, result_mul_573045)
    # Processing the call keyword arguments (line 552)
    kwargs_573052 = {}
    # Getting the type of 'np' (line 552)
    np_573029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 17), 'np', False)
    # Obtaining the member 'sum' of a type (line 552)
    sum_573030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 17), np_573029, 'sum')
    # Calling sum(args, kwargs) (line 552)
    sum_call_result_573053 = invoke(stypy.reporting.localization.Localization(__file__, 552, 17), sum_573030, *[list_573051], **kwargs_573052)
    
    # Applying the binary operator '-=' (line 552)
    result_isub_573054 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 8), '-=', var_s_573028, sum_call_result_573053)
    # Assigning a type to the variable 'var_s' (line 552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'var_s', result_isub_573054)
    
    
    # Assigning a BinOp to a Name (line 553):
    
    # Assigning a BinOp to a Name (line 553):
    
    # Call to sum(...): (line 553)
    # Processing the call arguments (line 553)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 553)
    # Processing the call arguments (line 553)
    # Getting the type of 'xties' (line 553)
    xties_573065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 55), 'xties', False)
    # Processing the call keyword arguments (line 553)
    kwargs_573066 = {}
    # Getting the type of 'iteritems' (line 553)
    iteritems_573064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 45), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 553)
    iteritems_call_result_573067 = invoke(stypy.reporting.localization.Localization(__file__, 553, 45), iteritems_573064, *[xties_573065], **kwargs_573066)
    
    comprehension_573068 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 553, 21), iteritems_call_result_573067)
    # Assigning a type to the variable 'k' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 21), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 553, 21), comprehension_573068))
    # Assigning a type to the variable 'v' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 21), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 553, 21), comprehension_573068))
    # Getting the type of 'v' (line 553)
    v_573057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 21), 'v', False)
    # Getting the type of 'k' (line 553)
    k_573058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 23), 'k', False)
    # Applying the binary operator '*' (line 553)
    result_mul_573059 = python_operator(stypy.reporting.localization.Localization(__file__, 553, 21), '*', v_573057, k_573058)
    
    # Getting the type of 'k' (line 553)
    k_573060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 26), 'k', False)
    int_573061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 28), 'int')
    # Applying the binary operator '-' (line 553)
    result_sub_573062 = python_operator(stypy.reporting.localization.Localization(__file__, 553, 26), '-', k_573060, int_573061)
    
    # Applying the binary operator '*' (line 553)
    result_mul_573063 = python_operator(stypy.reporting.localization.Localization(__file__, 553, 24), '*', result_mul_573059, result_sub_573062)
    
    list_573069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 553, 21), list_573069, result_mul_573063)
    # Processing the call keyword arguments (line 553)
    # Getting the type of 'float' (line 553)
    float_573070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 70), 'float', False)
    keyword_573071 = float_573070
    kwargs_573072 = {'dtype': keyword_573071}
    # Getting the type of 'np' (line 553)
    np_573055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 13), 'np', False)
    # Obtaining the member 'sum' of a type (line 553)
    sum_573056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 13), np_573055, 'sum')
    # Calling sum(args, kwargs) (line 553)
    sum_call_result_573073 = invoke(stypy.reporting.localization.Localization(__file__, 553, 13), sum_573056, *[list_573069], **kwargs_573072)
    
    
    # Call to sum(...): (line 554)
    # Processing the call arguments (line 554)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 554)
    # Processing the call arguments (line 554)
    # Getting the type of 'yties' (line 554)
    yties_573084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 55), 'yties', False)
    # Processing the call keyword arguments (line 554)
    kwargs_573085 = {}
    # Getting the type of 'iteritems' (line 554)
    iteritems_573083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 45), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 554)
    iteritems_call_result_573086 = invoke(stypy.reporting.localization.Localization(__file__, 554, 45), iteritems_573083, *[yties_573084], **kwargs_573085)
    
    comprehension_573087 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 554, 21), iteritems_call_result_573086)
    # Assigning a type to the variable 'k' (line 554)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 21), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 554, 21), comprehension_573087))
    # Assigning a type to the variable 'v' (line 554)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 21), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 554, 21), comprehension_573087))
    # Getting the type of 'v' (line 554)
    v_573076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 21), 'v', False)
    # Getting the type of 'k' (line 554)
    k_573077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 23), 'k', False)
    # Applying the binary operator '*' (line 554)
    result_mul_573078 = python_operator(stypy.reporting.localization.Localization(__file__, 554, 21), '*', v_573076, k_573077)
    
    # Getting the type of 'k' (line 554)
    k_573079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 26), 'k', False)
    int_573080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 28), 'int')
    # Applying the binary operator '-' (line 554)
    result_sub_573081 = python_operator(stypy.reporting.localization.Localization(__file__, 554, 26), '-', k_573079, int_573080)
    
    # Applying the binary operator '*' (line 554)
    result_mul_573082 = python_operator(stypy.reporting.localization.Localization(__file__, 554, 24), '*', result_mul_573078, result_sub_573081)
    
    list_573088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 554, 21), list_573088, result_mul_573082)
    # Processing the call keyword arguments (line 554)
    # Getting the type of 'float' (line 554)
    float_573089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 70), 'float', False)
    keyword_573090 = float_573089
    kwargs_573091 = {'dtype': keyword_573090}
    # Getting the type of 'np' (line 554)
    np_573074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 13), 'np', False)
    # Obtaining the member 'sum' of a type (line 554)
    sum_573075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 13), np_573074, 'sum')
    # Calling sum(args, kwargs) (line 554)
    sum_call_result_573092 = invoke(stypy.reporting.localization.Localization(__file__, 554, 13), sum_573075, *[list_573088], **kwargs_573091)
    
    # Applying the binary operator '*' (line 553)
    result_mul_573093 = python_operator(stypy.reporting.localization.Localization(__file__, 553, 13), '*', sum_call_result_573073, sum_call_result_573092)
    
    # Assigning a type to the variable 'v1' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 8), 'v1', result_mul_573093)
    
    # Getting the type of 'v1' (line 555)
    v1_573094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'v1')
    float_573095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 555, 14), 'float')
    # Getting the type of 'n' (line 555)
    n_573096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 17), 'n')
    # Applying the binary operator '*' (line 555)
    result_mul_573097 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 14), '*', float_573095, n_573096)
    
    # Getting the type of 'n' (line 555)
    n_573098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 20), 'n')
    int_573099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 555, 22), 'int')
    # Applying the binary operator '-' (line 555)
    result_sub_573100 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 20), '-', n_573098, int_573099)
    
    # Applying the binary operator '*' (line 555)
    result_mul_573101 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 18), '*', result_mul_573097, result_sub_573100)
    
    # Applying the binary operator 'div=' (line 555)
    result_div_573102 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 8), 'div=', v1_573094, result_mul_573101)
    # Assigning a type to the variable 'v1' (line 555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'v1', result_div_573102)
    
    
    
    # Getting the type of 'n' (line 556)
    n_573103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 11), 'n')
    int_573104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 15), 'int')
    # Applying the binary operator '>' (line 556)
    result_gt_573105 = python_operator(stypy.reporting.localization.Localization(__file__, 556, 11), '>', n_573103, int_573104)
    
    # Testing the type of an if condition (line 556)
    if_condition_573106 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 556, 8), result_gt_573105)
    # Assigning a type to the variable 'if_condition_573106' (line 556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'if_condition_573106', if_condition_573106)
    # SSA begins for if statement (line 556)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 557):
    
    # Assigning a BinOp to a Name (line 557):
    
    # Call to sum(...): (line 557)
    # Processing the call arguments (line 557)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 557)
    # Processing the call arguments (line 557)
    # Getting the type of 'xties' (line 557)
    xties_573121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 64), 'xties', False)
    # Processing the call keyword arguments (line 557)
    kwargs_573122 = {}
    # Getting the type of 'iteritems' (line 557)
    iteritems_573120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 54), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 557)
    iteritems_call_result_573123 = invoke(stypy.reporting.localization.Localization(__file__, 557, 54), iteritems_573120, *[xties_573121], **kwargs_573122)
    
    comprehension_573124 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 557, 25), iteritems_call_result_573123)
    # Assigning a type to the variable 'k' (line 557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 25), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 557, 25), comprehension_573124))
    # Assigning a type to the variable 'v' (line 557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 25), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 557, 25), comprehension_573124))
    # Getting the type of 'v' (line 557)
    v_573109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 25), 'v', False)
    # Getting the type of 'k' (line 557)
    k_573110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 27), 'k', False)
    # Applying the binary operator '*' (line 557)
    result_mul_573111 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 25), '*', v_573109, k_573110)
    
    # Getting the type of 'k' (line 557)
    k_573112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 30), 'k', False)
    int_573113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 32), 'int')
    # Applying the binary operator '-' (line 557)
    result_sub_573114 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 30), '-', k_573112, int_573113)
    
    # Applying the binary operator '*' (line 557)
    result_mul_573115 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 28), '*', result_mul_573111, result_sub_573114)
    
    # Getting the type of 'k' (line 557)
    k_573116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 36), 'k', False)
    int_573117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 38), 'int')
    # Applying the binary operator '-' (line 557)
    result_sub_573118 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 36), '-', k_573116, int_573117)
    
    # Applying the binary operator '*' (line 557)
    result_mul_573119 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 34), '*', result_mul_573115, result_sub_573118)
    
    list_573125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 25), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 557, 25), list_573125, result_mul_573119)
    # Processing the call keyword arguments (line 557)
    # Getting the type of 'float' (line 558)
    float_573126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 30), 'float', False)
    keyword_573127 = float_573126
    kwargs_573128 = {'dtype': keyword_573127}
    # Getting the type of 'np' (line 557)
    np_573107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 17), 'np', False)
    # Obtaining the member 'sum' of a type (line 557)
    sum_573108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 17), np_573107, 'sum')
    # Calling sum(args, kwargs) (line 557)
    sum_call_result_573129 = invoke(stypy.reporting.localization.Localization(__file__, 557, 17), sum_573108, *[list_573125], **kwargs_573128)
    
    
    # Call to sum(...): (line 559)
    # Processing the call arguments (line 559)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 559)
    # Processing the call arguments (line 559)
    # Getting the type of 'yties' (line 559)
    yties_573144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 64), 'yties', False)
    # Processing the call keyword arguments (line 559)
    kwargs_573145 = {}
    # Getting the type of 'iteritems' (line 559)
    iteritems_573143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 54), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 559)
    iteritems_call_result_573146 = invoke(stypy.reporting.localization.Localization(__file__, 559, 54), iteritems_573143, *[yties_573144], **kwargs_573145)
    
    comprehension_573147 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 25), iteritems_call_result_573146)
    # Assigning a type to the variable 'k' (line 559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 25), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 25), comprehension_573147))
    # Assigning a type to the variable 'v' (line 559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 25), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 25), comprehension_573147))
    # Getting the type of 'v' (line 559)
    v_573132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 25), 'v', False)
    # Getting the type of 'k' (line 559)
    k_573133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 27), 'k', False)
    # Applying the binary operator '*' (line 559)
    result_mul_573134 = python_operator(stypy.reporting.localization.Localization(__file__, 559, 25), '*', v_573132, k_573133)
    
    # Getting the type of 'k' (line 559)
    k_573135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 30), 'k', False)
    int_573136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 32), 'int')
    # Applying the binary operator '-' (line 559)
    result_sub_573137 = python_operator(stypy.reporting.localization.Localization(__file__, 559, 30), '-', k_573135, int_573136)
    
    # Applying the binary operator '*' (line 559)
    result_mul_573138 = python_operator(stypy.reporting.localization.Localization(__file__, 559, 28), '*', result_mul_573134, result_sub_573137)
    
    # Getting the type of 'k' (line 559)
    k_573139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 36), 'k', False)
    int_573140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 38), 'int')
    # Applying the binary operator '-' (line 559)
    result_sub_573141 = python_operator(stypy.reporting.localization.Localization(__file__, 559, 36), '-', k_573139, int_573140)
    
    # Applying the binary operator '*' (line 559)
    result_mul_573142 = python_operator(stypy.reporting.localization.Localization(__file__, 559, 34), '*', result_mul_573138, result_sub_573141)
    
    list_573148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 25), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 25), list_573148, result_mul_573142)
    # Processing the call keyword arguments (line 559)
    # Getting the type of 'float' (line 560)
    float_573149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 30), 'float', False)
    keyword_573150 = float_573149
    kwargs_573151 = {'dtype': keyword_573150}
    # Getting the type of 'np' (line 559)
    np_573130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 17), 'np', False)
    # Obtaining the member 'sum' of a type (line 559)
    sum_573131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 17), np_573130, 'sum')
    # Calling sum(args, kwargs) (line 559)
    sum_call_result_573152 = invoke(stypy.reporting.localization.Localization(__file__, 559, 17), sum_573131, *[list_573148], **kwargs_573151)
    
    # Applying the binary operator '*' (line 557)
    result_mul_573153 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 17), '*', sum_call_result_573129, sum_call_result_573152)
    
    # Assigning a type to the variable 'v2' (line 557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'v2', result_mul_573153)
    
    # Getting the type of 'v2' (line 561)
    v2_573154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'v2')
    float_573155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 18), 'float')
    # Getting the type of 'n' (line 561)
    n_573156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 21), 'n')
    # Applying the binary operator '*' (line 561)
    result_mul_573157 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 18), '*', float_573155, n_573156)
    
    # Getting the type of 'n' (line 561)
    n_573158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 24), 'n')
    int_573159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 26), 'int')
    # Applying the binary operator '-' (line 561)
    result_sub_573160 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 24), '-', n_573158, int_573159)
    
    # Applying the binary operator '*' (line 561)
    result_mul_573161 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 22), '*', result_mul_573157, result_sub_573160)
    
    # Getting the type of 'n' (line 561)
    n_573162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 30), 'n')
    int_573163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 32), 'int')
    # Applying the binary operator '-' (line 561)
    result_sub_573164 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 30), '-', n_573162, int_573163)
    
    # Applying the binary operator '*' (line 561)
    result_mul_573165 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 28), '*', result_mul_573161, result_sub_573164)
    
    # Applying the binary operator 'div=' (line 561)
    result_div_573166 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 12), 'div=', v2_573154, result_mul_573165)
    # Assigning a type to the variable 'v2' (line 561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'v2', result_div_573166)
    
    # SSA branch for the else part of an if statement (line 556)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 563):
    
    # Assigning a Num to a Name (line 563):
    int_573167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 17), 'int')
    # Assigning a type to the variable 'v2' (line 563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 12), 'v2', int_573167)
    # SSA join for if statement (line 556)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 550)
    module_type_store.open_ssa_branch('else')
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Num to a Name (line 565):
    int_573168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 18), 'int')
    # Assigning a type to the variable 'v2' (line 565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 13), 'v2', int_573168)
    
    # Assigning a Name to a Name (line 565):
    # Getting the type of 'v2' (line 565)
    v2_573169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 13), 'v2')
    # Assigning a type to the variable 'v1' (line 565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'v1', v2_573169)
    # SSA join for if statement (line 550)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'var_s' (line 567)
    var_s_573170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 4), 'var_s')
    float_573171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 13), 'float')
    # Applying the binary operator 'div=' (line 567)
    result_div_573172 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 4), 'div=', var_s_573170, float_573171)
    # Assigning a type to the variable 'var_s' (line 567)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 4), 'var_s', result_div_573172)
    
    
    # Getting the type of 'var_s' (line 568)
    var_s_573173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 4), 'var_s')
    # Getting the type of 'v1' (line 568)
    v1_573174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 14), 'v1')
    # Getting the type of 'v2' (line 568)
    v2_573175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 19), 'v2')
    # Applying the binary operator '+' (line 568)
    result_add_573176 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 14), '+', v1_573174, v2_573175)
    
    # Applying the binary operator '+=' (line 568)
    result_iadd_573177 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 4), '+=', var_s_573173, result_add_573176)
    # Assigning a type to the variable 'var_s' (line 568)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 4), 'var_s', result_iadd_573177)
    
    
    # Assigning a BinOp to a Name (line 569):
    
    # Assigning a BinOp to a Name (line 569):
    # Getting the type of 'C' (line 569)
    C_573178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 9), 'C')
    # Getting the type of 'D' (line 569)
    D_573179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 11), 'D')
    # Applying the binary operator '-' (line 569)
    result_sub_573180 = python_operator(stypy.reporting.localization.Localization(__file__, 569, 9), '-', C_573178, D_573179)
    
    
    # Call to sqrt(...): (line 569)
    # Processing the call arguments (line 569)
    # Getting the type of 'var_s' (line 569)
    var_s_573183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 22), 'var_s', False)
    # Processing the call keyword arguments (line 569)
    kwargs_573184 = {}
    # Getting the type of 'np' (line 569)
    np_573181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 14), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 569)
    sqrt_573182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 14), np_573181, 'sqrt')
    # Calling sqrt(args, kwargs) (line 569)
    sqrt_call_result_573185 = invoke(stypy.reporting.localization.Localization(__file__, 569, 14), sqrt_573182, *[var_s_573183], **kwargs_573184)
    
    # Applying the binary operator 'div' (line 569)
    result_div_573186 = python_operator(stypy.reporting.localization.Localization(__file__, 569, 8), 'div', result_sub_573180, sqrt_call_result_573185)
    
    # Assigning a type to the variable 'z' (line 569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 4), 'z', result_div_573186)
    
    # Assigning a Call to a Name (line 570):
    
    # Assigning a Call to a Name (line 570):
    
    # Call to erfc(...): (line 570)
    # Processing the call arguments (line 570)
    
    # Call to abs(...): (line 570)
    # Processing the call arguments (line 570)
    # Getting the type of 'z' (line 570)
    z_573190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 28), 'z', False)
    # Processing the call keyword arguments (line 570)
    kwargs_573191 = {}
    # Getting the type of 'abs' (line 570)
    abs_573189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 24), 'abs', False)
    # Calling abs(args, kwargs) (line 570)
    abs_call_result_573192 = invoke(stypy.reporting.localization.Localization(__file__, 570, 24), abs_573189, *[z_573190], **kwargs_573191)
    
    
    # Call to sqrt(...): (line 570)
    # Processing the call arguments (line 570)
    int_573195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 39), 'int')
    # Processing the call keyword arguments (line 570)
    kwargs_573196 = {}
    # Getting the type of 'np' (line 570)
    np_573193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 31), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 570)
    sqrt_573194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 31), np_573193, 'sqrt')
    # Calling sqrt(args, kwargs) (line 570)
    sqrt_call_result_573197 = invoke(stypy.reporting.localization.Localization(__file__, 570, 31), sqrt_573194, *[int_573195], **kwargs_573196)
    
    # Applying the binary operator 'div' (line 570)
    result_div_573198 = python_operator(stypy.reporting.localization.Localization(__file__, 570, 24), 'div', abs_call_result_573192, sqrt_call_result_573197)
    
    # Processing the call keyword arguments (line 570)
    kwargs_573199 = {}
    # Getting the type of 'special' (line 570)
    special_573187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 11), 'special', False)
    # Obtaining the member 'erfc' of a type (line 570)
    erfc_573188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 11), special_573187, 'erfc')
    # Calling erfc(args, kwargs) (line 570)
    erfc_call_result_573200 = invoke(stypy.reporting.localization.Localization(__file__, 570, 11), erfc_573188, *[result_div_573198], **kwargs_573199)
    
    # Assigning a type to the variable 'prob' (line 570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 4), 'prob', erfc_call_result_573200)
    
    # Call to KendalltauResult(...): (line 571)
    # Processing the call arguments (line 571)
    # Getting the type of 'tau' (line 571)
    tau_573202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 28), 'tau', False)
    # Getting the type of 'prob' (line 571)
    prob_573203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 33), 'prob', False)
    # Processing the call keyword arguments (line 571)
    kwargs_573204 = {}
    # Getting the type of 'KendalltauResult' (line 571)
    KendalltauResult_573201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 11), 'KendalltauResult', False)
    # Calling KendalltauResult(args, kwargs) (line 571)
    KendalltauResult_call_result_573205 = invoke(stypy.reporting.localization.Localization(__file__, 571, 11), KendalltauResult_573201, *[tau_573202, prob_573203], **kwargs_573204)
    
    # Assigning a type to the variable 'stypy_return_type' (line 571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 4), 'stypy_return_type', KendalltauResult_call_result_573205)
    
    # ################# End of 'kendalltau(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kendalltau' in the type store
    # Getting the type of 'stypy_return_type' (line 493)
    stypy_return_type_573206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_573206)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kendalltau'
    return stypy_return_type_573206

# Assigning a type to the variable 'kendalltau' (line 493)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 0), 'kendalltau', kendalltau)

@norecursion
def kendalltau_seasonal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'kendalltau_seasonal'
    module_type_store = module_type_store.open_function_context('kendalltau_seasonal', 574, 0, False)
    
    # Passed parameters checking function
    kendalltau_seasonal.stypy_localization = localization
    kendalltau_seasonal.stypy_type_of_self = None
    kendalltau_seasonal.stypy_type_store = module_type_store
    kendalltau_seasonal.stypy_function_name = 'kendalltau_seasonal'
    kendalltau_seasonal.stypy_param_names_list = ['x']
    kendalltau_seasonal.stypy_varargs_param_name = None
    kendalltau_seasonal.stypy_kwargs_param_name = None
    kendalltau_seasonal.stypy_call_defaults = defaults
    kendalltau_seasonal.stypy_call_varargs = varargs
    kendalltau_seasonal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kendalltau_seasonal', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kendalltau_seasonal', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kendalltau_seasonal(...)' code ##################

    str_573207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 583, (-1)), 'str', "\n    Computes a multivariate Kendall's rank correlation tau, for seasonal data.\n\n    Parameters\n    ----------\n    x : 2-D ndarray\n        Array of seasonal data, with seasons in columns.\n\n    ")
    
    # Assigning a Call to a Name (line 584):
    
    # Assigning a Call to a Name (line 584):
    
    # Call to array(...): (line 584)
    # Processing the call arguments (line 584)
    # Getting the type of 'x' (line 584)
    x_573210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 17), 'x', False)
    # Processing the call keyword arguments (line 584)
    # Getting the type of 'True' (line 584)
    True_573211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 26), 'True', False)
    keyword_573212 = True_573211
    # Getting the type of 'False' (line 584)
    False_573213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 37), 'False', False)
    keyword_573214 = False_573213
    int_573215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 50), 'int')
    keyword_573216 = int_573215
    kwargs_573217 = {'subok': keyword_573212, 'copy': keyword_573214, 'ndmin': keyword_573216}
    # Getting the type of 'ma' (line 584)
    ma_573208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 8), 'ma', False)
    # Obtaining the member 'array' of a type (line 584)
    array_573209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 8), ma_573208, 'array')
    # Calling array(args, kwargs) (line 584)
    array_call_result_573218 = invoke(stypy.reporting.localization.Localization(__file__, 584, 8), array_573209, *[x_573210], **kwargs_573217)
    
    # Assigning a type to the variable 'x' (line 584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 4), 'x', array_call_result_573218)
    
    # Assigning a Attribute to a Tuple (line 585):
    
    # Assigning a Subscript to a Name (line 585):
    
    # Obtaining the type of the subscript
    int_573219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 4), 'int')
    # Getting the type of 'x' (line 585)
    x_573220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 12), 'x')
    # Obtaining the member 'shape' of a type (line 585)
    shape_573221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 12), x_573220, 'shape')
    # Obtaining the member '__getitem__' of a type (line 585)
    getitem___573222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 4), shape_573221, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 585)
    subscript_call_result_573223 = invoke(stypy.reporting.localization.Localization(__file__, 585, 4), getitem___573222, int_573219)
    
    # Assigning a type to the variable 'tuple_var_assignment_571453' (line 585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 4), 'tuple_var_assignment_571453', subscript_call_result_573223)
    
    # Assigning a Subscript to a Name (line 585):
    
    # Obtaining the type of the subscript
    int_573224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 4), 'int')
    # Getting the type of 'x' (line 585)
    x_573225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 12), 'x')
    # Obtaining the member 'shape' of a type (line 585)
    shape_573226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 12), x_573225, 'shape')
    # Obtaining the member '__getitem__' of a type (line 585)
    getitem___573227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 4), shape_573226, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 585)
    subscript_call_result_573228 = invoke(stypy.reporting.localization.Localization(__file__, 585, 4), getitem___573227, int_573224)
    
    # Assigning a type to the variable 'tuple_var_assignment_571454' (line 585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 4), 'tuple_var_assignment_571454', subscript_call_result_573228)
    
    # Assigning a Name to a Name (line 585):
    # Getting the type of 'tuple_var_assignment_571453' (line 585)
    tuple_var_assignment_571453_573229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 4), 'tuple_var_assignment_571453')
    # Assigning a type to the variable 'n' (line 585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 5), 'n', tuple_var_assignment_571453_573229)
    
    # Assigning a Name to a Name (line 585):
    # Getting the type of 'tuple_var_assignment_571454' (line 585)
    tuple_var_assignment_571454_573230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 4), 'tuple_var_assignment_571454')
    # Assigning a type to the variable 'm' (line 585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 7), 'm', tuple_var_assignment_571454_573230)
    
    # Assigning a Call to a Name (line 586):
    
    # Assigning a Call to a Name (line 586):
    
    # Call to count(...): (line 586)
    # Processing the call arguments (line 586)
    int_573233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 586, 18), 'int')
    # Processing the call keyword arguments (line 586)
    kwargs_573234 = {}
    # Getting the type of 'x' (line 586)
    x_573231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 10), 'x', False)
    # Obtaining the member 'count' of a type (line 586)
    count_573232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 10), x_573231, 'count')
    # Calling count(args, kwargs) (line 586)
    count_call_result_573235 = invoke(stypy.reporting.localization.Localization(__file__, 586, 10), count_573232, *[int_573233], **kwargs_573234)
    
    # Assigning a type to the variable 'n_p' (line 586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 4), 'n_p', count_call_result_573235)
    
    # Assigning a Call to a Name (line 588):
    
    # Assigning a Call to a Name (line 588):
    
    # Call to sum(...): (line 588)
    # Processing the call arguments (line 588)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 588, 19, True)
    # Calculating comprehension expression
    
    # Call to range(...): (line 588)
    # Processing the call arguments (line 588)
    # Getting the type of 'n' (line 588)
    n_573256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 59), 'n', False)
    # Processing the call keyword arguments (line 588)
    kwargs_573257 = {}
    # Getting the type of 'range' (line 588)
    range_573255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 53), 'range', False)
    # Calling range(args, kwargs) (line 588)
    range_call_result_573258 = invoke(stypy.reporting.localization.Localization(__file__, 588, 53), range_573255, *[n_573256], **kwargs_573257)
    
    comprehension_573259 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 588, 19), range_call_result_573258)
    # Assigning a type to the variable 'i' (line 588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 19), 'i', comprehension_573259)
    
    # Call to sum(...): (line 588)
    # Processing the call arguments (line 588)
    int_573252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 41), 'int')
    # Processing the call keyword arguments (line 588)
    kwargs_573253 = {}
    
    # Call to msign(...): (line 588)
    # Processing the call arguments (line 588)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 588)
    i_573239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 27), 'i', False)
    slice_573240 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 588, 25), i_573239, None, None)
    # Getting the type of 'x' (line 588)
    x_573241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 25), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 588)
    getitem___573242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 25), x_573241, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 588)
    subscript_call_result_573243 = invoke(stypy.reporting.localization.Localization(__file__, 588, 25), getitem___573242, slice_573240)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 588)
    i_573244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 33), 'i', False)
    # Getting the type of 'x' (line 588)
    x_573245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 31), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 588)
    getitem___573246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 31), x_573245, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 588)
    subscript_call_result_573247 = invoke(stypy.reporting.localization.Localization(__file__, 588, 31), getitem___573246, i_573244)
    
    # Applying the binary operator '-' (line 588)
    result_sub_573248 = python_operator(stypy.reporting.localization.Localization(__file__, 588, 25), '-', subscript_call_result_573243, subscript_call_result_573247)
    
    # Processing the call keyword arguments (line 588)
    kwargs_573249 = {}
    # Getting the type of 'msign' (line 588)
    msign_573238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 19), 'msign', False)
    # Calling msign(args, kwargs) (line 588)
    msign_call_result_573250 = invoke(stypy.reporting.localization.Localization(__file__, 588, 19), msign_573238, *[result_sub_573248], **kwargs_573249)
    
    # Obtaining the member 'sum' of a type (line 588)
    sum_573251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 19), msign_call_result_573250, 'sum')
    # Calling sum(args, kwargs) (line 588)
    sum_call_result_573254 = invoke(stypy.reporting.localization.Localization(__file__, 588, 19), sum_573251, *[int_573252], **kwargs_573253)
    
    list_573260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 19), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 588, 19), list_573260, sum_call_result_573254)
    # Processing the call keyword arguments (line 588)
    kwargs_573261 = {}
    # Getting the type of 'np' (line 588)
    np_573236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 12), 'np', False)
    # Obtaining the member 'sum' of a type (line 588)
    sum_573237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 12), np_573236, 'sum')
    # Calling sum(args, kwargs) (line 588)
    sum_call_result_573262 = invoke(stypy.reporting.localization.Localization(__file__, 588, 12), sum_573237, *[list_573260], **kwargs_573261)
    
    # Assigning a type to the variable 'S_szn' (line 588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 4), 'S_szn', sum_call_result_573262)
    
    # Assigning a Call to a Name (line 589):
    
    # Assigning a Call to a Name (line 589):
    
    # Call to sum(...): (line 589)
    # Processing the call keyword arguments (line 589)
    kwargs_573265 = {}
    # Getting the type of 'S_szn' (line 589)
    S_szn_573263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 12), 'S_szn', False)
    # Obtaining the member 'sum' of a type (line 589)
    sum_573264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 12), S_szn_573263, 'sum')
    # Calling sum(args, kwargs) (line 589)
    sum_call_result_573266 = invoke(stypy.reporting.localization.Localization(__file__, 589, 12), sum_573264, *[], **kwargs_573265)
    
    # Assigning a type to the variable 'S_tot' (line 589)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 4), 'S_tot', sum_call_result_573266)
    
    # Assigning a Call to a Name (line 591):
    
    # Assigning a Call to a Name (line 591):
    
    # Call to count(...): (line 591)
    # Processing the call keyword arguments (line 591)
    kwargs_573269 = {}
    # Getting the type of 'x' (line 591)
    x_573267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 12), 'x', False)
    # Obtaining the member 'count' of a type (line 591)
    count_573268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 12), x_573267, 'count')
    # Calling count(args, kwargs) (line 591)
    count_call_result_573270 = invoke(stypy.reporting.localization.Localization(__file__, 591, 12), count_573268, *[], **kwargs_573269)
    
    # Assigning a type to the variable 'n_tot' (line 591)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 4), 'n_tot', count_call_result_573270)
    
    # Assigning a Call to a Name (line 592):
    
    # Assigning a Call to a Name (line 592):
    
    # Call to count_tied_groups(...): (line 592)
    # Processing the call arguments (line 592)
    
    # Call to compressed(...): (line 592)
    # Processing the call keyword arguments (line 592)
    kwargs_573274 = {}
    # Getting the type of 'x' (line 592)
    x_573272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 29), 'x', False)
    # Obtaining the member 'compressed' of a type (line 592)
    compressed_573273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 29), x_573272, 'compressed')
    # Calling compressed(args, kwargs) (line 592)
    compressed_call_result_573275 = invoke(stypy.reporting.localization.Localization(__file__, 592, 29), compressed_573273, *[], **kwargs_573274)
    
    # Processing the call keyword arguments (line 592)
    kwargs_573276 = {}
    # Getting the type of 'count_tied_groups' (line 592)
    count_tied_groups_573271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 11), 'count_tied_groups', False)
    # Calling count_tied_groups(args, kwargs) (line 592)
    count_tied_groups_call_result_573277 = invoke(stypy.reporting.localization.Localization(__file__, 592, 11), count_tied_groups_573271, *[compressed_call_result_573275], **kwargs_573276)
    
    # Assigning a type to the variable 'ties' (line 592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 4), 'ties', count_tied_groups_call_result_573277)
    
    # Assigning a Call to a Name (line 593):
    
    # Assigning a Call to a Name (line 593):
    
    # Call to sum(...): (line 593)
    # Processing the call arguments (line 593)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 593, 23, True)
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 593)
    # Processing the call arguments (line 593)
    # Getting the type of 'ties' (line 593)
    ties_573288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 56), 'ties', False)
    # Processing the call keyword arguments (line 593)
    kwargs_573289 = {}
    # Getting the type of 'iteritems' (line 593)
    iteritems_573287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 46), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 593)
    iteritems_call_result_573290 = invoke(stypy.reporting.localization.Localization(__file__, 593, 46), iteritems_573287, *[ties_573288], **kwargs_573289)
    
    comprehension_573291 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 593, 23), iteritems_call_result_573290)
    # Assigning a type to the variable 'k' (line 593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 23), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 593, 23), comprehension_573291))
    # Assigning a type to the variable 'v' (line 593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 23), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 593, 23), comprehension_573291))
    # Getting the type of 'v' (line 593)
    v_573280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 23), 'v', False)
    # Getting the type of 'k' (line 593)
    k_573281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 25), 'k', False)
    # Applying the binary operator '*' (line 593)
    result_mul_573282 = python_operator(stypy.reporting.localization.Localization(__file__, 593, 23), '*', v_573280, k_573281)
    
    # Getting the type of 'k' (line 593)
    k_573283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 28), 'k', False)
    int_573284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 30), 'int')
    # Applying the binary operator '-' (line 593)
    result_sub_573285 = python_operator(stypy.reporting.localization.Localization(__file__, 593, 28), '-', k_573283, int_573284)
    
    # Applying the binary operator '*' (line 593)
    result_mul_573286 = python_operator(stypy.reporting.localization.Localization(__file__, 593, 26), '*', result_mul_573282, result_sub_573285)
    
    list_573292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 23), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 593, 23), list_573292, result_mul_573286)
    # Processing the call keyword arguments (line 593)
    kwargs_573293 = {}
    # Getting the type of 'np' (line 593)
    np_573278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 16), 'np', False)
    # Obtaining the member 'sum' of a type (line 593)
    sum_573279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 16), np_573278, 'sum')
    # Calling sum(args, kwargs) (line 593)
    sum_call_result_573294 = invoke(stypy.reporting.localization.Localization(__file__, 593, 16), sum_573279, *[list_573292], **kwargs_573293)
    
    # Assigning a type to the variable 'corr_ties' (line 593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 4), 'corr_ties', sum_call_result_573294)
    
    # Assigning a BinOp to a Name (line 594):
    
    # Assigning a BinOp to a Name (line 594):
    
    # Call to sqrt(...): (line 594)
    # Processing the call arguments (line 594)
    float_573297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 24), 'float')
    # Getting the type of 'n_tot' (line 594)
    n_tot_573298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 27), 'n_tot', False)
    # Applying the binary operator '*' (line 594)
    result_mul_573299 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 24), '*', float_573297, n_tot_573298)
    
    # Getting the type of 'n_tot' (line 594)
    n_tot_573300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 34), 'n_tot', False)
    int_573301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 40), 'int')
    # Applying the binary operator '-' (line 594)
    result_sub_573302 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 34), '-', n_tot_573300, int_573301)
    
    # Applying the binary operator '*' (line 594)
    result_mul_573303 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 32), '*', result_mul_573299, result_sub_573302)
    
    # Getting the type of 'n_tot' (line 594)
    n_tot_573304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 44), 'n_tot', False)
    # Getting the type of 'n_tot' (line 594)
    n_tot_573305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 51), 'n_tot', False)
    int_573306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 57), 'int')
    # Applying the binary operator '-' (line 594)
    result_sub_573307 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 51), '-', n_tot_573305, int_573306)
    
    # Applying the binary operator '*' (line 594)
    result_mul_573308 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 44), '*', n_tot_573304, result_sub_573307)
    
    # Getting the type of 'corr_ties' (line 594)
    corr_ties_573309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 60), 'corr_ties', False)
    # Applying the binary operator '-' (line 594)
    result_sub_573310 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 44), '-', result_mul_573308, corr_ties_573309)
    
    # Applying the binary operator '*' (line 594)
    result_mul_573311 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 42), '*', result_mul_573303, result_sub_573310)
    
    # Processing the call keyword arguments (line 594)
    kwargs_573312 = {}
    # Getting the type of 'ma' (line 594)
    ma_573295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 16), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 594)
    sqrt_573296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 16), ma_573295, 'sqrt')
    # Calling sqrt(args, kwargs) (line 594)
    sqrt_call_result_573313 = invoke(stypy.reporting.localization.Localization(__file__, 594, 16), sqrt_573296, *[result_mul_573311], **kwargs_573312)
    
    float_573314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 72), 'float')
    # Applying the binary operator 'div' (line 594)
    result_div_573315 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 16), 'div', sqrt_call_result_573313, float_573314)
    
    # Assigning a type to the variable 'denom_tot' (line 594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 4), 'denom_tot', result_div_573315)
    
    # Assigning a Call to a Name (line 596):
    
    # Assigning a Call to a Name (line 596):
    
    # Call to rankdata(...): (line 596)
    # Processing the call arguments (line 596)
    # Getting the type of 'x' (line 596)
    x_573317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 17), 'x', False)
    # Processing the call keyword arguments (line 596)
    int_573318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 25), 'int')
    keyword_573319 = int_573318
    # Getting the type of 'True' (line 596)
    True_573320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 40), 'True', False)
    keyword_573321 = True_573320
    kwargs_573322 = {'use_missing': keyword_573321, 'axis': keyword_573319}
    # Getting the type of 'rankdata' (line 596)
    rankdata_573316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 8), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 596)
    rankdata_call_result_573323 = invoke(stypy.reporting.localization.Localization(__file__, 596, 8), rankdata_573316, *[x_573317], **kwargs_573322)
    
    # Assigning a type to the variable 'R' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'R', rankdata_call_result_573323)
    
    # Assigning a Call to a Name (line 597):
    
    # Assigning a Call to a Name (line 597):
    
    # Call to empty(...): (line 597)
    # Processing the call arguments (line 597)
    
    # Obtaining an instance of the builtin type 'tuple' (line 597)
    tuple_573326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 597)
    # Adding element type (line 597)
    # Getting the type of 'm' (line 597)
    m_573327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 18), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 597, 18), tuple_573326, m_573327)
    # Adding element type (line 597)
    # Getting the type of 'm' (line 597)
    m_573328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 20), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 597, 18), tuple_573326, m_573328)
    
    # Processing the call keyword arguments (line 597)
    # Getting the type of 'int' (line 597)
    int_573329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 30), 'int', False)
    keyword_573330 = int_573329
    kwargs_573331 = {'dtype': keyword_573330}
    # Getting the type of 'ma' (line 597)
    ma_573324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'ma', False)
    # Obtaining the member 'empty' of a type (line 597)
    empty_573325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 8), ma_573324, 'empty')
    # Calling empty(args, kwargs) (line 597)
    empty_call_result_573332 = invoke(stypy.reporting.localization.Localization(__file__, 597, 8), empty_573325, *[tuple_573326], **kwargs_573331)
    
    # Assigning a type to the variable 'K' (line 597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 4), 'K', empty_call_result_573332)
    
    # Assigning a Call to a Name (line 598):
    
    # Assigning a Call to a Name (line 598):
    
    # Call to empty(...): (line 598)
    # Processing the call arguments (line 598)
    
    # Obtaining an instance of the builtin type 'tuple' (line 598)
    tuple_573335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 598)
    # Adding element type (line 598)
    # Getting the type of 'm' (line 598)
    m_573336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 23), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 598, 23), tuple_573335, m_573336)
    # Adding element type (line 598)
    # Getting the type of 'm' (line 598)
    m_573337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 25), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 598, 23), tuple_573335, m_573337)
    
    # Processing the call keyword arguments (line 598)
    # Getting the type of 'float' (line 598)
    float_573338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 35), 'float', False)
    keyword_573339 = float_573338
    kwargs_573340 = {'dtype': keyword_573339}
    # Getting the type of 'ma' (line 598)
    ma_573333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 13), 'ma', False)
    # Obtaining the member 'empty' of a type (line 598)
    empty_573334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 13), ma_573333, 'empty')
    # Calling empty(args, kwargs) (line 598)
    empty_call_result_573341 = invoke(stypy.reporting.localization.Localization(__file__, 598, 13), empty_573334, *[tuple_573335], **kwargs_573340)
    
    # Assigning a type to the variable 'covmat' (line 598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 4), 'covmat', empty_call_result_573341)
    
    # Assigning a Call to a Name (line 599):
    
    # Assigning a Call to a Name (line 599):
    
    # Call to empty(...): (line 599)
    # Processing the call arguments (line 599)
    # Getting the type of 'm' (line 599)
    m_573344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 25), 'm', False)
    # Processing the call keyword arguments (line 599)
    # Getting the type of 'float' (line 599)
    float_573345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 34), 'float', False)
    keyword_573346 = float_573345
    kwargs_573347 = {'dtype': keyword_573346}
    # Getting the type of 'ma' (line 599)
    ma_573342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 16), 'ma', False)
    # Obtaining the member 'empty' of a type (line 599)
    empty_573343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 16), ma_573342, 'empty')
    # Calling empty(args, kwargs) (line 599)
    empty_call_result_573348 = invoke(stypy.reporting.localization.Localization(__file__, 599, 16), empty_573343, *[m_573344], **kwargs_573347)
    
    # Assigning a type to the variable 'denom_szn' (line 599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 4), 'denom_szn', empty_call_result_573348)
    
    
    # Call to range(...): (line 600)
    # Processing the call arguments (line 600)
    # Getting the type of 'm' (line 600)
    m_573350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 19), 'm', False)
    # Processing the call keyword arguments (line 600)
    kwargs_573351 = {}
    # Getting the type of 'range' (line 600)
    range_573349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 13), 'range', False)
    # Calling range(args, kwargs) (line 600)
    range_call_result_573352 = invoke(stypy.reporting.localization.Localization(__file__, 600, 13), range_573349, *[m_573350], **kwargs_573351)
    
    # Testing the type of a for loop iterable (line 600)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 600, 4), range_call_result_573352)
    # Getting the type of the for loop variable (line 600)
    for_loop_var_573353 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 600, 4), range_call_result_573352)
    # Assigning a type to the variable 'j' (line 600)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 4), 'j', for_loop_var_573353)
    # SSA begins for a for statement (line 600)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 601):
    
    # Assigning a Call to a Name (line 601):
    
    # Call to count_tied_groups(...): (line 601)
    # Processing the call arguments (line 601)
    
    # Call to compressed(...): (line 601)
    # Processing the call keyword arguments (line 601)
    kwargs_573361 = {}
    
    # Obtaining the type of the subscript
    slice_573355 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 601, 35), None, None, None)
    # Getting the type of 'j' (line 601)
    j_573356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 39), 'j', False)
    # Getting the type of 'x' (line 601)
    x_573357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 35), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 601)
    getitem___573358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 35), x_573357, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 601)
    subscript_call_result_573359 = invoke(stypy.reporting.localization.Localization(__file__, 601, 35), getitem___573358, (slice_573355, j_573356))
    
    # Obtaining the member 'compressed' of a type (line 601)
    compressed_573360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 35), subscript_call_result_573359, 'compressed')
    # Calling compressed(args, kwargs) (line 601)
    compressed_call_result_573362 = invoke(stypy.reporting.localization.Localization(__file__, 601, 35), compressed_573360, *[], **kwargs_573361)
    
    # Processing the call keyword arguments (line 601)
    kwargs_573363 = {}
    # Getting the type of 'count_tied_groups' (line 601)
    count_tied_groups_573354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 17), 'count_tied_groups', False)
    # Calling count_tied_groups(args, kwargs) (line 601)
    count_tied_groups_call_result_573364 = invoke(stypy.reporting.localization.Localization(__file__, 601, 17), count_tied_groups_573354, *[compressed_call_result_573362], **kwargs_573363)
    
    # Assigning a type to the variable 'ties_j' (line 601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 8), 'ties_j', count_tied_groups_call_result_573364)
    
    # Assigning a Call to a Name (line 602):
    
    # Assigning a Call to a Name (line 602):
    
    # Call to sum(...): (line 602)
    # Processing the call arguments (line 602)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 602, 24, True)
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 602)
    # Processing the call arguments (line 602)
    # Getting the type of 'ties_j' (line 602)
    ties_j_573375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 57), 'ties_j', False)
    # Processing the call keyword arguments (line 602)
    kwargs_573376 = {}
    # Getting the type of 'iteritems' (line 602)
    iteritems_573374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 47), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 602)
    iteritems_call_result_573377 = invoke(stypy.reporting.localization.Localization(__file__, 602, 47), iteritems_573374, *[ties_j_573375], **kwargs_573376)
    
    comprehension_573378 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 602, 24), iteritems_call_result_573377)
    # Assigning a type to the variable 'k' (line 602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 24), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 602, 24), comprehension_573378))
    # Assigning a type to the variable 'v' (line 602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 24), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 602, 24), comprehension_573378))
    # Getting the type of 'v' (line 602)
    v_573367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 24), 'v', False)
    # Getting the type of 'k' (line 602)
    k_573368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 26), 'k', False)
    # Applying the binary operator '*' (line 602)
    result_mul_573369 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 24), '*', v_573367, k_573368)
    
    # Getting the type of 'k' (line 602)
    k_573370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 29), 'k', False)
    int_573371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 31), 'int')
    # Applying the binary operator '-' (line 602)
    result_sub_573372 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 29), '-', k_573370, int_573371)
    
    # Applying the binary operator '*' (line 602)
    result_mul_573373 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 27), '*', result_mul_573369, result_sub_573372)
    
    list_573379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 24), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 602, 24), list_573379, result_mul_573373)
    # Processing the call keyword arguments (line 602)
    kwargs_573380 = {}
    # Getting the type of 'np' (line 602)
    np_573365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 17), 'np', False)
    # Obtaining the member 'sum' of a type (line 602)
    sum_573366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 17), np_573365, 'sum')
    # Calling sum(args, kwargs) (line 602)
    sum_call_result_573381 = invoke(stypy.reporting.localization.Localization(__file__, 602, 17), sum_573366, *[list_573379], **kwargs_573380)
    
    # Assigning a type to the variable 'corr_j' (line 602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'corr_j', sum_call_result_573381)
    
    # Assigning a BinOp to a Name (line 603):
    
    # Assigning a BinOp to a Name (line 603):
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 603)
    j_573382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 18), 'j')
    # Getting the type of 'n_p' (line 603)
    n_p_573383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 14), 'n_p')
    # Obtaining the member '__getitem__' of a type (line 603)
    getitem___573384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 14), n_p_573383, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 603)
    subscript_call_result_573385 = invoke(stypy.reporting.localization.Localization(__file__, 603, 14), getitem___573384, j_573382)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 603)
    j_573386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 26), 'j')
    # Getting the type of 'n_p' (line 603)
    n_p_573387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 22), 'n_p')
    # Obtaining the member '__getitem__' of a type (line 603)
    getitem___573388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 22), n_p_573387, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 603)
    subscript_call_result_573389 = invoke(stypy.reporting.localization.Localization(__file__, 603, 22), getitem___573388, j_573386)
    
    int_573390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 29), 'int')
    # Applying the binary operator '-' (line 603)
    result_sub_573391 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 22), '-', subscript_call_result_573389, int_573390)
    
    # Applying the binary operator '*' (line 603)
    result_mul_573392 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 14), '*', subscript_call_result_573385, result_sub_573391)
    
    # Assigning a type to the variable 'cmb' (line 603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'cmb', result_mul_573392)
    
    
    # Call to range(...): (line 604)
    # Processing the call arguments (line 604)
    # Getting the type of 'j' (line 604)
    j_573394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 23), 'j', False)
    # Getting the type of 'm' (line 604)
    m_573395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 25), 'm', False)
    int_573396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 27), 'int')
    # Processing the call keyword arguments (line 604)
    kwargs_573397 = {}
    # Getting the type of 'range' (line 604)
    range_573393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 17), 'range', False)
    # Calling range(args, kwargs) (line 604)
    range_call_result_573398 = invoke(stypy.reporting.localization.Localization(__file__, 604, 17), range_573393, *[j_573394, m_573395, int_573396], **kwargs_573397)
    
    # Testing the type of a for loop iterable (line 604)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 604, 8), range_call_result_573398)
    # Getting the type of the for loop variable (line 604)
    for_loop_var_573399 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 604, 8), range_call_result_573398)
    # Assigning a type to the variable 'k' (line 604)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 8), 'k', for_loop_var_573399)
    # SSA begins for a for statement (line 604)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 605):
    
    # Assigning a Call to a Subscript (line 605):
    
    # Call to sum(...): (line 605)
    # Processing the call arguments (line 605)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 605, 28, True)
    # Calculating comprehension expression
    
    # Call to range(...): (line 606)
    # Processing the call arguments (line 606)
    # Getting the type of 'n' (line 606)
    n_573436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 46), 'n', False)
    # Processing the call keyword arguments (line 606)
    kwargs_573437 = {}
    # Getting the type of 'range' (line 606)
    range_573435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 40), 'range', False)
    # Calling range(args, kwargs) (line 606)
    range_call_result_573438 = invoke(stypy.reporting.localization.Localization(__file__, 606, 40), range_573435, *[n_573436], **kwargs_573437)
    
    comprehension_573439 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 28), range_call_result_573438)
    # Assigning a type to the variable 'i' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 28), 'i', comprehension_573439)
    
    # Call to sum(...): (line 605)
    # Processing the call keyword arguments (line 605)
    kwargs_573433 = {}
    
    # Call to msign(...): (line 605)
    # Processing the call arguments (line 605)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 605)
    i_573403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 37), 'i', False)
    slice_573404 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 605, 35), i_573403, None, None)
    # Getting the type of 'j' (line 605)
    j_573405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 40), 'j', False)
    # Getting the type of 'x' (line 605)
    x_573406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 35), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 605)
    getitem___573407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 35), x_573406, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 605)
    subscript_call_result_573408 = invoke(stypy.reporting.localization.Localization(__file__, 605, 35), getitem___573407, (slice_573404, j_573405))
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 605)
    tuple_573409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 45), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 605)
    # Adding element type (line 605)
    # Getting the type of 'i' (line 605)
    i_573410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 45), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 45), tuple_573409, i_573410)
    # Adding element type (line 605)
    # Getting the type of 'j' (line 605)
    j_573411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 47), 'j', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 45), tuple_573409, j_573411)
    
    # Getting the type of 'x' (line 605)
    x_573412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 43), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 605)
    getitem___573413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 43), x_573412, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 605)
    subscript_call_result_573414 = invoke(stypy.reporting.localization.Localization(__file__, 605, 43), getitem___573413, tuple_573409)
    
    # Applying the binary operator '-' (line 605)
    result_sub_573415 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 35), '-', subscript_call_result_573408, subscript_call_result_573414)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 605)
    i_573416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 54), 'i', False)
    slice_573417 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 605, 52), i_573416, None, None)
    # Getting the type of 'k' (line 605)
    k_573418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 57), 'k', False)
    # Getting the type of 'x' (line 605)
    x_573419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 52), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 605)
    getitem___573420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 52), x_573419, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 605)
    subscript_call_result_573421 = invoke(stypy.reporting.localization.Localization(__file__, 605, 52), getitem___573420, (slice_573417, k_573418))
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 605)
    tuple_573422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 62), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 605)
    # Adding element type (line 605)
    # Getting the type of 'i' (line 605)
    i_573423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 62), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 62), tuple_573422, i_573423)
    # Adding element type (line 605)
    # Getting the type of 'k' (line 605)
    k_573424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 64), 'k', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 62), tuple_573422, k_573424)
    
    # Getting the type of 'x' (line 605)
    x_573425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 60), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 605)
    getitem___573426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 60), x_573425, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 605)
    subscript_call_result_573427 = invoke(stypy.reporting.localization.Localization(__file__, 605, 60), getitem___573426, tuple_573422)
    
    # Applying the binary operator '-' (line 605)
    result_sub_573428 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 52), '-', subscript_call_result_573421, subscript_call_result_573427)
    
    # Applying the binary operator '*' (line 605)
    result_mul_573429 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 34), '*', result_sub_573415, result_sub_573428)
    
    # Processing the call keyword arguments (line 605)
    kwargs_573430 = {}
    # Getting the type of 'msign' (line 605)
    msign_573402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 28), 'msign', False)
    # Calling msign(args, kwargs) (line 605)
    msign_call_result_573431 = invoke(stypy.reporting.localization.Localization(__file__, 605, 28), msign_573402, *[result_mul_573429], **kwargs_573430)
    
    # Obtaining the member 'sum' of a type (line 605)
    sum_573432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 28), msign_call_result_573431, 'sum')
    # Calling sum(args, kwargs) (line 605)
    sum_call_result_573434 = invoke(stypy.reporting.localization.Localization(__file__, 605, 28), sum_573432, *[], **kwargs_573433)
    
    list_573440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 28), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 28), list_573440, sum_call_result_573434)
    # Processing the call keyword arguments (line 605)
    kwargs_573441 = {}
    # Getting the type of 'np' (line 605)
    np_573400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 21), 'np', False)
    # Obtaining the member 'sum' of a type (line 605)
    sum_573401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 21), np_573400, 'sum')
    # Calling sum(args, kwargs) (line 605)
    sum_call_result_573442 = invoke(stypy.reporting.localization.Localization(__file__, 605, 21), sum_573401, *[list_573440], **kwargs_573441)
    
    # Getting the type of 'K' (line 605)
    K_573443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 12), 'K')
    
    # Obtaining an instance of the builtin type 'tuple' (line 605)
    tuple_573444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 605)
    # Adding element type (line 605)
    # Getting the type of 'j' (line 605)
    j_573445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 14), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 14), tuple_573444, j_573445)
    # Adding element type (line 605)
    # Getting the type of 'k' (line 605)
    k_573446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 16), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 14), tuple_573444, k_573446)
    
    # Storing an element on a container (line 605)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 12), K_573443, (tuple_573444, sum_call_result_573442))
    
    # Assigning a BinOp to a Subscript (line 607):
    
    # Assigning a BinOp to a Subscript (line 607):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 607)
    tuple_573447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 607)
    # Adding element type (line 607)
    # Getting the type of 'j' (line 607)
    j_573448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 29), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 607, 29), tuple_573447, j_573448)
    # Adding element type (line 607)
    # Getting the type of 'k' (line 607)
    k_573449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 31), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 607, 29), tuple_573447, k_573449)
    
    # Getting the type of 'K' (line 607)
    K_573450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 27), 'K')
    # Obtaining the member '__getitem__' of a type (line 607)
    getitem___573451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 27), K_573450, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 607)
    subscript_call_result_573452 = invoke(stypy.reporting.localization.Localization(__file__, 607, 27), getitem___573451, tuple_573447)
    
    int_573453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 36), 'int')
    
    # Call to sum(...): (line 607)
    # Processing the call keyword arguments (line 607)
    kwargs_573466 = {}
    
    # Obtaining the type of the subscript
    slice_573454 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 607, 39), None, None, None)
    # Getting the type of 'j' (line 607)
    j_573455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 43), 'j', False)
    # Getting the type of 'R' (line 607)
    R_573456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 39), 'R', False)
    # Obtaining the member '__getitem__' of a type (line 607)
    getitem___573457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 39), R_573456, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 607)
    subscript_call_result_573458 = invoke(stypy.reporting.localization.Localization(__file__, 607, 39), getitem___573457, (slice_573454, j_573455))
    
    
    # Obtaining the type of the subscript
    slice_573459 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 607, 46), None, None, None)
    # Getting the type of 'k' (line 607)
    k_573460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 50), 'k', False)
    # Getting the type of 'R' (line 607)
    R_573461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 46), 'R', False)
    # Obtaining the member '__getitem__' of a type (line 607)
    getitem___573462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 46), R_573461, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 607)
    subscript_call_result_573463 = invoke(stypy.reporting.localization.Localization(__file__, 607, 46), getitem___573462, (slice_573459, k_573460))
    
    # Applying the binary operator '*' (line 607)
    result_mul_573464 = python_operator(stypy.reporting.localization.Localization(__file__, 607, 39), '*', subscript_call_result_573458, subscript_call_result_573463)
    
    # Obtaining the member 'sum' of a type (line 607)
    sum_573465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 39), result_mul_573464, 'sum')
    # Calling sum(args, kwargs) (line 607)
    sum_call_result_573467 = invoke(stypy.reporting.localization.Localization(__file__, 607, 39), sum_573465, *[], **kwargs_573466)
    
    # Applying the binary operator '*' (line 607)
    result_mul_573468 = python_operator(stypy.reporting.localization.Localization(__file__, 607, 36), '*', int_573453, sum_call_result_573467)
    
    # Applying the binary operator '+' (line 607)
    result_add_573469 = python_operator(stypy.reporting.localization.Localization(__file__, 607, 27), '+', subscript_call_result_573452, result_mul_573468)
    
    # Getting the type of 'n' (line 608)
    n_573470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 27), 'n')
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 608)
    j_573471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 34), 'j')
    # Getting the type of 'n_p' (line 608)
    n_p_573472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 30), 'n_p')
    # Obtaining the member '__getitem__' of a type (line 608)
    getitem___573473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 30), n_p_573472, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 608)
    subscript_call_result_573474 = invoke(stypy.reporting.localization.Localization(__file__, 608, 30), getitem___573473, j_573471)
    
    int_573475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 37), 'int')
    # Applying the binary operator '+' (line 608)
    result_add_573476 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 30), '+', subscript_call_result_573474, int_573475)
    
    # Applying the binary operator '*' (line 608)
    result_mul_573477 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 27), '*', n_573470, result_add_573476)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 608)
    k_573478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 45), 'k')
    # Getting the type of 'n_p' (line 608)
    n_p_573479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 41), 'n_p')
    # Obtaining the member '__getitem__' of a type (line 608)
    getitem___573480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 41), n_p_573479, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 608)
    subscript_call_result_573481 = invoke(stypy.reporting.localization.Localization(__file__, 608, 41), getitem___573480, k_573478)
    
    int_573482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 48), 'int')
    # Applying the binary operator '+' (line 608)
    result_add_573483 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 41), '+', subscript_call_result_573481, int_573482)
    
    # Applying the binary operator '*' (line 608)
    result_mul_573484 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 39), '*', result_mul_573477, result_add_573483)
    
    # Applying the binary operator '-' (line 607)
    result_sub_573485 = python_operator(stypy.reporting.localization.Localization(__file__, 607, 60), '-', result_add_573469, result_mul_573484)
    
    float_573486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 52), 'float')
    # Applying the binary operator 'div' (line 607)
    result_div_573487 = python_operator(stypy.reporting.localization.Localization(__file__, 607, 26), 'div', result_sub_573485, float_573486)
    
    # Getting the type of 'covmat' (line 607)
    covmat_573488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 12), 'covmat')
    
    # Obtaining an instance of the builtin type 'tuple' (line 607)
    tuple_573489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 607)
    # Adding element type (line 607)
    # Getting the type of 'j' (line 607)
    j_573490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 19), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 607, 19), tuple_573489, j_573490)
    # Adding element type (line 607)
    # Getting the type of 'k' (line 607)
    k_573491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 21), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 607, 19), tuple_573489, k_573491)
    
    # Storing an element on a container (line 607)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 607, 12), covmat_573488, (tuple_573489, result_div_573487))
    
    # Assigning a Subscript to a Subscript (line 609):
    
    # Assigning a Subscript to a Subscript (line 609):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 609)
    tuple_573492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 609)
    # Adding element type (line 609)
    # Getting the type of 'j' (line 609)
    j_573493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 23), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 23), tuple_573492, j_573493)
    # Adding element type (line 609)
    # Getting the type of 'k' (line 609)
    k_573494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 25), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 23), tuple_573492, k_573494)
    
    # Getting the type of 'K' (line 609)
    K_573495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 21), 'K')
    # Obtaining the member '__getitem__' of a type (line 609)
    getitem___573496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 21), K_573495, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 609)
    subscript_call_result_573497 = invoke(stypy.reporting.localization.Localization(__file__, 609, 21), getitem___573496, tuple_573492)
    
    # Getting the type of 'K' (line 609)
    K_573498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 12), 'K')
    
    # Obtaining an instance of the builtin type 'tuple' (line 609)
    tuple_573499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 609)
    # Adding element type (line 609)
    # Getting the type of 'k' (line 609)
    k_573500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 14), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 14), tuple_573499, k_573500)
    # Adding element type (line 609)
    # Getting the type of 'j' (line 609)
    j_573501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 16), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 14), tuple_573499, j_573501)
    
    # Storing an element on a container (line 609)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 12), K_573498, (tuple_573499, subscript_call_result_573497))
    
    # Assigning a Subscript to a Subscript (line 610):
    
    # Assigning a Subscript to a Subscript (line 610):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 610)
    tuple_573502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 610)
    # Adding element type (line 610)
    # Getting the type of 'j' (line 610)
    j_573503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 33), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 610, 33), tuple_573502, j_573503)
    # Adding element type (line 610)
    # Getting the type of 'k' (line 610)
    k_573504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 35), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 610, 33), tuple_573502, k_573504)
    
    # Getting the type of 'covmat' (line 610)
    covmat_573505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 26), 'covmat')
    # Obtaining the member '__getitem__' of a type (line 610)
    getitem___573506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 26), covmat_573505, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 610)
    subscript_call_result_573507 = invoke(stypy.reporting.localization.Localization(__file__, 610, 26), getitem___573506, tuple_573502)
    
    # Getting the type of 'covmat' (line 610)
    covmat_573508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 12), 'covmat')
    
    # Obtaining an instance of the builtin type 'tuple' (line 610)
    tuple_573509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 610)
    # Adding element type (line 610)
    # Getting the type of 'k' (line 610)
    k_573510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 19), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 610, 19), tuple_573509, k_573510)
    # Adding element type (line 610)
    # Getting the type of 'j' (line 610)
    j_573511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 21), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 610, 19), tuple_573509, j_573511)
    
    # Storing an element on a container (line 610)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 610, 12), covmat_573508, (tuple_573509, subscript_call_result_573507))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Subscript (line 612):
    
    # Assigning a BinOp to a Subscript (line 612):
    
    # Call to sqrt(...): (line 612)
    # Processing the call arguments (line 612)
    # Getting the type of 'cmb' (line 612)
    cmb_573514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 31), 'cmb', False)
    # Getting the type of 'cmb' (line 612)
    cmb_573515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 36), 'cmb', False)
    # Getting the type of 'corr_j' (line 612)
    corr_j_573516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 40), 'corr_j', False)
    # Applying the binary operator '-' (line 612)
    result_sub_573517 = python_operator(stypy.reporting.localization.Localization(__file__, 612, 36), '-', cmb_573515, corr_j_573516)
    
    # Applying the binary operator '*' (line 612)
    result_mul_573518 = python_operator(stypy.reporting.localization.Localization(__file__, 612, 31), '*', cmb_573514, result_sub_573517)
    
    # Processing the call keyword arguments (line 612)
    kwargs_573519 = {}
    # Getting the type of 'ma' (line 612)
    ma_573512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 23), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 612)
    sqrt_573513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 23), ma_573512, 'sqrt')
    # Calling sqrt(args, kwargs) (line 612)
    sqrt_call_result_573520 = invoke(stypy.reporting.localization.Localization(__file__, 612, 23), sqrt_573513, *[result_mul_573518], **kwargs_573519)
    
    float_573521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 51), 'float')
    # Applying the binary operator 'div' (line 612)
    result_div_573522 = python_operator(stypy.reporting.localization.Localization(__file__, 612, 23), 'div', sqrt_call_result_573520, float_573521)
    
    # Getting the type of 'denom_szn' (line 612)
    denom_szn_573523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'denom_szn')
    # Getting the type of 'j' (line 612)
    j_573524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 18), 'j')
    # Storing an element on a container (line 612)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 612, 8), denom_szn_573523, (j_573524, result_div_573522))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 614):
    
    # Assigning a Call to a Name (line 614):
    
    # Call to diagonal(...): (line 614)
    # Processing the call keyword arguments (line 614)
    kwargs_573527 = {}
    # Getting the type of 'covmat' (line 614)
    covmat_573525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 14), 'covmat', False)
    # Obtaining the member 'diagonal' of a type (line 614)
    diagonal_573526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 14), covmat_573525, 'diagonal')
    # Calling diagonal(args, kwargs) (line 614)
    diagonal_call_result_573528 = invoke(stypy.reporting.localization.Localization(__file__, 614, 14), diagonal_573526, *[], **kwargs_573527)
    
    # Assigning a type to the variable 'var_szn' (line 614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 4), 'var_szn', diagonal_call_result_573528)
    
    # Assigning a BinOp to a Name (line 616):
    
    # Assigning a BinOp to a Name (line 616):
    
    # Call to msign(...): (line 616)
    # Processing the call arguments (line 616)
    # Getting the type of 'S_szn' (line 616)
    S_szn_573530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 18), 'S_szn', False)
    # Processing the call keyword arguments (line 616)
    kwargs_573531 = {}
    # Getting the type of 'msign' (line 616)
    msign_573529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 12), 'msign', False)
    # Calling msign(args, kwargs) (line 616)
    msign_call_result_573532 = invoke(stypy.reporting.localization.Localization(__file__, 616, 12), msign_573529, *[S_szn_573530], **kwargs_573531)
    
    
    # Call to abs(...): (line 616)
    # Processing the call arguments (line 616)
    # Getting the type of 'S_szn' (line 616)
    S_szn_573534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 32), 'S_szn', False)
    # Processing the call keyword arguments (line 616)
    kwargs_573535 = {}
    # Getting the type of 'abs' (line 616)
    abs_573533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 28), 'abs', False)
    # Calling abs(args, kwargs) (line 616)
    abs_call_result_573536 = invoke(stypy.reporting.localization.Localization(__file__, 616, 28), abs_573533, *[S_szn_573534], **kwargs_573535)
    
    int_573537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 39), 'int')
    # Applying the binary operator '-' (line 616)
    result_sub_573538 = python_operator(stypy.reporting.localization.Localization(__file__, 616, 28), '-', abs_call_result_573536, int_573537)
    
    # Applying the binary operator '*' (line 616)
    result_mul_573539 = python_operator(stypy.reporting.localization.Localization(__file__, 616, 12), '*', msign_call_result_573532, result_sub_573538)
    
    
    # Call to sqrt(...): (line 616)
    # Processing the call arguments (line 616)
    # Getting the type of 'var_szn' (line 616)
    var_szn_573542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 52), 'var_szn', False)
    # Processing the call keyword arguments (line 616)
    kwargs_573543 = {}
    # Getting the type of 'ma' (line 616)
    ma_573540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 44), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 616)
    sqrt_573541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 44), ma_573540, 'sqrt')
    # Calling sqrt(args, kwargs) (line 616)
    sqrt_call_result_573544 = invoke(stypy.reporting.localization.Localization(__file__, 616, 44), sqrt_573541, *[var_szn_573542], **kwargs_573543)
    
    # Applying the binary operator 'div' (line 616)
    result_div_573545 = python_operator(stypy.reporting.localization.Localization(__file__, 616, 42), 'div', result_mul_573539, sqrt_call_result_573544)
    
    # Assigning a type to the variable 'z_szn' (line 616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 4), 'z_szn', result_div_573545)
    
    # Assigning a BinOp to a Name (line 617):
    
    # Assigning a BinOp to a Name (line 617):
    
    # Call to msign(...): (line 617)
    # Processing the call arguments (line 617)
    # Getting the type of 'S_tot' (line 617)
    S_tot_573547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 22), 'S_tot', False)
    # Processing the call keyword arguments (line 617)
    kwargs_573548 = {}
    # Getting the type of 'msign' (line 617)
    msign_573546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 16), 'msign', False)
    # Calling msign(args, kwargs) (line 617)
    msign_call_result_573549 = invoke(stypy.reporting.localization.Localization(__file__, 617, 16), msign_573546, *[S_tot_573547], **kwargs_573548)
    
    
    # Call to abs(...): (line 617)
    # Processing the call arguments (line 617)
    # Getting the type of 'S_tot' (line 617)
    S_tot_573551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 36), 'S_tot', False)
    # Processing the call keyword arguments (line 617)
    kwargs_573552 = {}
    # Getting the type of 'abs' (line 617)
    abs_573550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 32), 'abs', False)
    # Calling abs(args, kwargs) (line 617)
    abs_call_result_573553 = invoke(stypy.reporting.localization.Localization(__file__, 617, 32), abs_573550, *[S_tot_573551], **kwargs_573552)
    
    int_573554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 43), 'int')
    # Applying the binary operator '-' (line 617)
    result_sub_573555 = python_operator(stypy.reporting.localization.Localization(__file__, 617, 32), '-', abs_call_result_573553, int_573554)
    
    # Applying the binary operator '*' (line 617)
    result_mul_573556 = python_operator(stypy.reporting.localization.Localization(__file__, 617, 16), '*', msign_call_result_573549, result_sub_573555)
    
    
    # Call to sqrt(...): (line 617)
    # Processing the call arguments (line 617)
    
    # Call to sum(...): (line 617)
    # Processing the call keyword arguments (line 617)
    kwargs_573561 = {}
    # Getting the type of 'var_szn' (line 617)
    var_szn_573559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 56), 'var_szn', False)
    # Obtaining the member 'sum' of a type (line 617)
    sum_573560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 56), var_szn_573559, 'sum')
    # Calling sum(args, kwargs) (line 617)
    sum_call_result_573562 = invoke(stypy.reporting.localization.Localization(__file__, 617, 56), sum_573560, *[], **kwargs_573561)
    
    # Processing the call keyword arguments (line 617)
    kwargs_573563 = {}
    # Getting the type of 'ma' (line 617)
    ma_573557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 48), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 617)
    sqrt_573558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 48), ma_573557, 'sqrt')
    # Calling sqrt(args, kwargs) (line 617)
    sqrt_call_result_573564 = invoke(stypy.reporting.localization.Localization(__file__, 617, 48), sqrt_573558, *[sum_call_result_573562], **kwargs_573563)
    
    # Applying the binary operator 'div' (line 617)
    result_div_573565 = python_operator(stypy.reporting.localization.Localization(__file__, 617, 46), 'div', result_mul_573556, sqrt_call_result_573564)
    
    # Assigning a type to the variable 'z_tot_ind' (line 617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 4), 'z_tot_ind', result_div_573565)
    
    # Assigning a BinOp to a Name (line 618):
    
    # Assigning a BinOp to a Name (line 618):
    
    # Call to msign(...): (line 618)
    # Processing the call arguments (line 618)
    # Getting the type of 'S_tot' (line 618)
    S_tot_573567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 22), 'S_tot', False)
    # Processing the call keyword arguments (line 618)
    kwargs_573568 = {}
    # Getting the type of 'msign' (line 618)
    msign_573566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 16), 'msign', False)
    # Calling msign(args, kwargs) (line 618)
    msign_call_result_573569 = invoke(stypy.reporting.localization.Localization(__file__, 618, 16), msign_573566, *[S_tot_573567], **kwargs_573568)
    
    
    # Call to abs(...): (line 618)
    # Processing the call arguments (line 618)
    # Getting the type of 'S_tot' (line 618)
    S_tot_573571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 36), 'S_tot', False)
    # Processing the call keyword arguments (line 618)
    kwargs_573572 = {}
    # Getting the type of 'abs' (line 618)
    abs_573570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 32), 'abs', False)
    # Calling abs(args, kwargs) (line 618)
    abs_call_result_573573 = invoke(stypy.reporting.localization.Localization(__file__, 618, 32), abs_573570, *[S_tot_573571], **kwargs_573572)
    
    int_573574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, 43), 'int')
    # Applying the binary operator '-' (line 618)
    result_sub_573575 = python_operator(stypy.reporting.localization.Localization(__file__, 618, 32), '-', abs_call_result_573573, int_573574)
    
    # Applying the binary operator '*' (line 618)
    result_mul_573576 = python_operator(stypy.reporting.localization.Localization(__file__, 618, 16), '*', msign_call_result_573569, result_sub_573575)
    
    
    # Call to sqrt(...): (line 618)
    # Processing the call arguments (line 618)
    
    # Call to sum(...): (line 618)
    # Processing the call keyword arguments (line 618)
    kwargs_573581 = {}
    # Getting the type of 'covmat' (line 618)
    covmat_573579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 56), 'covmat', False)
    # Obtaining the member 'sum' of a type (line 618)
    sum_573580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 56), covmat_573579, 'sum')
    # Calling sum(args, kwargs) (line 618)
    sum_call_result_573582 = invoke(stypy.reporting.localization.Localization(__file__, 618, 56), sum_573580, *[], **kwargs_573581)
    
    # Processing the call keyword arguments (line 618)
    kwargs_573583 = {}
    # Getting the type of 'ma' (line 618)
    ma_573577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 48), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 618)
    sqrt_573578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 48), ma_573577, 'sqrt')
    # Calling sqrt(args, kwargs) (line 618)
    sqrt_call_result_573584 = invoke(stypy.reporting.localization.Localization(__file__, 618, 48), sqrt_573578, *[sum_call_result_573582], **kwargs_573583)
    
    # Applying the binary operator 'div' (line 618)
    result_div_573585 = python_operator(stypy.reporting.localization.Localization(__file__, 618, 46), 'div', result_mul_573576, sqrt_call_result_573584)
    
    # Assigning a type to the variable 'z_tot_dep' (line 618)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 4), 'z_tot_dep', result_div_573585)
    
    # Assigning a Call to a Name (line 620):
    
    # Assigning a Call to a Name (line 620):
    
    # Call to erfc(...): (line 620)
    # Processing the call arguments (line 620)
    
    # Call to abs(...): (line 620)
    # Processing the call arguments (line 620)
    # Getting the type of 'z_szn' (line 620)
    z_szn_573589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 32), 'z_szn', False)
    # Processing the call keyword arguments (line 620)
    kwargs_573590 = {}
    # Getting the type of 'abs' (line 620)
    abs_573588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 28), 'abs', False)
    # Calling abs(args, kwargs) (line 620)
    abs_call_result_573591 = invoke(stypy.reporting.localization.Localization(__file__, 620, 28), abs_573588, *[z_szn_573589], **kwargs_573590)
    
    
    # Call to sqrt(...): (line 620)
    # Processing the call arguments (line 620)
    int_573594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 47), 'int')
    # Processing the call keyword arguments (line 620)
    kwargs_573595 = {}
    # Getting the type of 'np' (line 620)
    np_573592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 39), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 620)
    sqrt_573593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 39), np_573592, 'sqrt')
    # Calling sqrt(args, kwargs) (line 620)
    sqrt_call_result_573596 = invoke(stypy.reporting.localization.Localization(__file__, 620, 39), sqrt_573593, *[int_573594], **kwargs_573595)
    
    # Applying the binary operator 'div' (line 620)
    result_div_573597 = python_operator(stypy.reporting.localization.Localization(__file__, 620, 28), 'div', abs_call_result_573591, sqrt_call_result_573596)
    
    # Processing the call keyword arguments (line 620)
    kwargs_573598 = {}
    # Getting the type of 'special' (line 620)
    special_573586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 15), 'special', False)
    # Obtaining the member 'erfc' of a type (line 620)
    erfc_573587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 15), special_573586, 'erfc')
    # Calling erfc(args, kwargs) (line 620)
    erfc_call_result_573599 = invoke(stypy.reporting.localization.Localization(__file__, 620, 15), erfc_573587, *[result_div_573597], **kwargs_573598)
    
    # Assigning a type to the variable 'prob_szn' (line 620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 4), 'prob_szn', erfc_call_result_573599)
    
    # Assigning a Call to a Name (line 621):
    
    # Assigning a Call to a Name (line 621):
    
    # Call to erfc(...): (line 621)
    # Processing the call arguments (line 621)
    
    # Call to abs(...): (line 621)
    # Processing the call arguments (line 621)
    # Getting the type of 'z_tot_ind' (line 621)
    z_tot_ind_573603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 36), 'z_tot_ind', False)
    # Processing the call keyword arguments (line 621)
    kwargs_573604 = {}
    # Getting the type of 'abs' (line 621)
    abs_573602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 32), 'abs', False)
    # Calling abs(args, kwargs) (line 621)
    abs_call_result_573605 = invoke(stypy.reporting.localization.Localization(__file__, 621, 32), abs_573602, *[z_tot_ind_573603], **kwargs_573604)
    
    
    # Call to sqrt(...): (line 621)
    # Processing the call arguments (line 621)
    int_573608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 55), 'int')
    # Processing the call keyword arguments (line 621)
    kwargs_573609 = {}
    # Getting the type of 'np' (line 621)
    np_573606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 47), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 621)
    sqrt_573607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 47), np_573606, 'sqrt')
    # Calling sqrt(args, kwargs) (line 621)
    sqrt_call_result_573610 = invoke(stypy.reporting.localization.Localization(__file__, 621, 47), sqrt_573607, *[int_573608], **kwargs_573609)
    
    # Applying the binary operator 'div' (line 621)
    result_div_573611 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 32), 'div', abs_call_result_573605, sqrt_call_result_573610)
    
    # Processing the call keyword arguments (line 621)
    kwargs_573612 = {}
    # Getting the type of 'special' (line 621)
    special_573600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 19), 'special', False)
    # Obtaining the member 'erfc' of a type (line 621)
    erfc_573601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 19), special_573600, 'erfc')
    # Calling erfc(args, kwargs) (line 621)
    erfc_call_result_573613 = invoke(stypy.reporting.localization.Localization(__file__, 621, 19), erfc_573601, *[result_div_573611], **kwargs_573612)
    
    # Assigning a type to the variable 'prob_tot_ind' (line 621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'prob_tot_ind', erfc_call_result_573613)
    
    # Assigning a Call to a Name (line 622):
    
    # Assigning a Call to a Name (line 622):
    
    # Call to erfc(...): (line 622)
    # Processing the call arguments (line 622)
    
    # Call to abs(...): (line 622)
    # Processing the call arguments (line 622)
    # Getting the type of 'z_tot_dep' (line 622)
    z_tot_dep_573617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 36), 'z_tot_dep', False)
    # Processing the call keyword arguments (line 622)
    kwargs_573618 = {}
    # Getting the type of 'abs' (line 622)
    abs_573616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 32), 'abs', False)
    # Calling abs(args, kwargs) (line 622)
    abs_call_result_573619 = invoke(stypy.reporting.localization.Localization(__file__, 622, 32), abs_573616, *[z_tot_dep_573617], **kwargs_573618)
    
    
    # Call to sqrt(...): (line 622)
    # Processing the call arguments (line 622)
    int_573622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 55), 'int')
    # Processing the call keyword arguments (line 622)
    kwargs_573623 = {}
    # Getting the type of 'np' (line 622)
    np_573620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 47), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 622)
    sqrt_573621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 47), np_573620, 'sqrt')
    # Calling sqrt(args, kwargs) (line 622)
    sqrt_call_result_573624 = invoke(stypy.reporting.localization.Localization(__file__, 622, 47), sqrt_573621, *[int_573622], **kwargs_573623)
    
    # Applying the binary operator 'div' (line 622)
    result_div_573625 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 32), 'div', abs_call_result_573619, sqrt_call_result_573624)
    
    # Processing the call keyword arguments (line 622)
    kwargs_573626 = {}
    # Getting the type of 'special' (line 622)
    special_573614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 19), 'special', False)
    # Obtaining the member 'erfc' of a type (line 622)
    erfc_573615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 19), special_573614, 'erfc')
    # Calling erfc(args, kwargs) (line 622)
    erfc_call_result_573627 = invoke(stypy.reporting.localization.Localization(__file__, 622, 19), erfc_573615, *[result_div_573625], **kwargs_573626)
    
    # Assigning a type to the variable 'prob_tot_dep' (line 622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'prob_tot_dep', erfc_call_result_573627)
    
    # Assigning a Call to a Name (line 624):
    
    # Assigning a Call to a Name (line 624):
    
    # Call to sum(...): (line 624)
    # Processing the call keyword arguments (line 624)
    kwargs_573632 = {}
    # Getting the type of 'z_szn' (line 624)
    z_szn_573628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 16), 'z_szn', False)
    # Getting the type of 'z_szn' (line 624)
    z_szn_573629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 22), 'z_szn', False)
    # Applying the binary operator '*' (line 624)
    result_mul_573630 = python_operator(stypy.reporting.localization.Localization(__file__, 624, 16), '*', z_szn_573628, z_szn_573629)
    
    # Obtaining the member 'sum' of a type (line 624)
    sum_573631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 16), result_mul_573630, 'sum')
    # Calling sum(args, kwargs) (line 624)
    sum_call_result_573633 = invoke(stypy.reporting.localization.Localization(__file__, 624, 16), sum_573631, *[], **kwargs_573632)
    
    # Assigning a type to the variable 'chi2_tot' (line 624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 4), 'chi2_tot', sum_call_result_573633)
    
    # Assigning a BinOp to a Name (line 625):
    
    # Assigning a BinOp to a Name (line 625):
    # Getting the type of 'm' (line 625)
    m_573634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 15), 'm')
    
    # Call to mean(...): (line 625)
    # Processing the call keyword arguments (line 625)
    kwargs_573637 = {}
    # Getting the type of 'z_szn' (line 625)
    z_szn_573635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 19), 'z_szn', False)
    # Obtaining the member 'mean' of a type (line 625)
    mean_573636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 19), z_szn_573635, 'mean')
    # Calling mean(args, kwargs) (line 625)
    mean_call_result_573638 = invoke(stypy.reporting.localization.Localization(__file__, 625, 19), mean_573636, *[], **kwargs_573637)
    
    int_573639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 33), 'int')
    # Applying the binary operator '**' (line 625)
    result_pow_573640 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 19), '**', mean_call_result_573638, int_573639)
    
    # Applying the binary operator '*' (line 625)
    result_mul_573641 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 15), '*', m_573634, result_pow_573640)
    
    # Assigning a type to the variable 'chi2_trd' (line 625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 4), 'chi2_trd', result_mul_573641)
    
    # Assigning a Dict to a Name (line 626):
    
    # Assigning a Dict to a Name (line 626):
    
    # Obtaining an instance of the builtin type 'dict' (line 626)
    dict_573642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 13), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 626)
    # Adding element type (key, value) (line 626)
    str_573643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 14), 'str', 'seasonal tau')
    # Getting the type of 'S_szn' (line 626)
    S_szn_573644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 30), 'S_szn')
    # Getting the type of 'denom_szn' (line 626)
    denom_szn_573645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 36), 'denom_szn')
    # Applying the binary operator 'div' (line 626)
    result_div_573646 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 30), 'div', S_szn_573644, denom_szn_573645)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 13), dict_573642, (str_573643, result_div_573646))
    # Adding element type (key, value) (line 626)
    str_573647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 14), 'str', 'global tau')
    # Getting the type of 'S_tot' (line 627)
    S_tot_573648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 28), 'S_tot')
    # Getting the type of 'denom_tot' (line 627)
    denom_tot_573649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 34), 'denom_tot')
    # Applying the binary operator 'div' (line 627)
    result_div_573650 = python_operator(stypy.reporting.localization.Localization(__file__, 627, 28), 'div', S_tot_573648, denom_tot_573649)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 13), dict_573642, (str_573647, result_div_573650))
    # Adding element type (key, value) (line 626)
    str_573651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 14), 'str', 'global tau (alt)')
    # Getting the type of 'S_tot' (line 628)
    S_tot_573652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 34), 'S_tot')
    
    # Call to sum(...): (line 628)
    # Processing the call keyword arguments (line 628)
    kwargs_573655 = {}
    # Getting the type of 'denom_szn' (line 628)
    denom_szn_573653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 40), 'denom_szn', False)
    # Obtaining the member 'sum' of a type (line 628)
    sum_573654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 40), denom_szn_573653, 'sum')
    # Calling sum(args, kwargs) (line 628)
    sum_call_result_573656 = invoke(stypy.reporting.localization.Localization(__file__, 628, 40), sum_573654, *[], **kwargs_573655)
    
    # Applying the binary operator 'div' (line 628)
    result_div_573657 = python_operator(stypy.reporting.localization.Localization(__file__, 628, 34), 'div', S_tot_573652, sum_call_result_573656)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 13), dict_573642, (str_573651, result_div_573657))
    # Adding element type (key, value) (line 626)
    str_573658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 14), 'str', 'seasonal p-value')
    # Getting the type of 'prob_szn' (line 629)
    prob_szn_573659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 34), 'prob_szn')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 13), dict_573642, (str_573658, prob_szn_573659))
    # Adding element type (key, value) (line 626)
    str_573660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 14), 'str', 'global p-value (indep)')
    # Getting the type of 'prob_tot_ind' (line 630)
    prob_tot_ind_573661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 40), 'prob_tot_ind')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 13), dict_573642, (str_573660, prob_tot_ind_573661))
    # Adding element type (key, value) (line 626)
    str_573662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 631, 14), 'str', 'global p-value (dep)')
    # Getting the type of 'prob_tot_dep' (line 631)
    prob_tot_dep_573663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 38), 'prob_tot_dep')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 13), dict_573642, (str_573662, prob_tot_dep_573663))
    # Adding element type (key, value) (line 626)
    str_573664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 632, 14), 'str', 'chi2 total')
    # Getting the type of 'chi2_tot' (line 632)
    chi2_tot_573665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 28), 'chi2_tot')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 13), dict_573642, (str_573664, chi2_tot_573665))
    # Adding element type (key, value) (line 626)
    str_573666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 633, 14), 'str', 'chi2 trend')
    # Getting the type of 'chi2_trd' (line 633)
    chi2_trd_573667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 28), 'chi2_trd')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 13), dict_573642, (str_573666, chi2_trd_573667))
    
    # Assigning a type to the variable 'output' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 4), 'output', dict_573642)
    # Getting the type of 'output' (line 635)
    output_573668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 11), 'output')
    # Assigning a type to the variable 'stypy_return_type' (line 635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 4), 'stypy_return_type', output_573668)
    
    # ################# End of 'kendalltau_seasonal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kendalltau_seasonal' in the type store
    # Getting the type of 'stypy_return_type' (line 574)
    stypy_return_type_573669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_573669)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kendalltau_seasonal'
    return stypy_return_type_573669

# Assigning a type to the variable 'kendalltau_seasonal' (line 574)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 0), 'kendalltau_seasonal', kendalltau_seasonal)

# Assigning a Call to a Name (line 638):

# Assigning a Call to a Name (line 638):

# Call to namedtuple(...): (line 638)
# Processing the call arguments (line 638)
str_573671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 34), 'str', 'PointbiserialrResult')

# Obtaining an instance of the builtin type 'tuple' (line 638)
tuple_573672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 59), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 638)
# Adding element type (line 638)
str_573673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 59), 'str', 'correlation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 638, 59), tuple_573672, str_573673)
# Adding element type (line 638)
str_573674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 59), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 638, 59), tuple_573672, str_573674)

# Processing the call keyword arguments (line 638)
kwargs_573675 = {}
# Getting the type of 'namedtuple' (line 638)
namedtuple_573670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 23), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 638)
namedtuple_call_result_573676 = invoke(stypy.reporting.localization.Localization(__file__, 638, 23), namedtuple_573670, *[str_573671, tuple_573672], **kwargs_573675)

# Assigning a type to the variable 'PointbiserialrResult' (line 638)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 0), 'PointbiserialrResult', namedtuple_call_result_573676)

@norecursion
def pointbiserialr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pointbiserialr'
    module_type_store = module_type_store.open_function_context('pointbiserialr', 642, 0, False)
    
    # Passed parameters checking function
    pointbiserialr.stypy_localization = localization
    pointbiserialr.stypy_type_of_self = None
    pointbiserialr.stypy_type_store = module_type_store
    pointbiserialr.stypy_function_name = 'pointbiserialr'
    pointbiserialr.stypy_param_names_list = ['x', 'y']
    pointbiserialr.stypy_varargs_param_name = None
    pointbiserialr.stypy_kwargs_param_name = None
    pointbiserialr.stypy_call_defaults = defaults
    pointbiserialr.stypy_call_varargs = varargs
    pointbiserialr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pointbiserialr', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pointbiserialr', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pointbiserialr(...)' code ##################

    str_573677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, (-1)), 'str', 'Calculates a point biserial correlation coefficient and its p-value.\n\n    Parameters\n    ----------\n    x : array_like of bools\n        Input array.\n    y : array_like\n        Input array.\n\n    Returns\n    -------\n    correlation : float\n        R value\n    pvalue : float\n        2-tailed p-value\n\n    Notes\n    -----\n    Missing values are considered pair-wise: if a value is missing in x,\n    the corresponding value in y is masked.\n\n    For more details on `pointbiserialr`, see `stats.pointbiserialr`.\n\n    ')
    
    # Assigning a Call to a Name (line 667):
    
    # Assigning a Call to a Name (line 667):
    
    # Call to astype(...): (line 667)
    # Processing the call arguments (line 667)
    # Getting the type of 'bool' (line 667)
    bool_573686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 44), 'bool', False)
    # Processing the call keyword arguments (line 667)
    kwargs_573687 = {}
    
    # Call to fix_invalid(...): (line 667)
    # Processing the call arguments (line 667)
    # Getting the type of 'x' (line 667)
    x_573680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 23), 'x', False)
    # Processing the call keyword arguments (line 667)
    # Getting the type of 'True' (line 667)
    True_573681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 31), 'True', False)
    keyword_573682 = True_573681
    kwargs_573683 = {'copy': keyword_573682}
    # Getting the type of 'ma' (line 667)
    ma_573678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'ma', False)
    # Obtaining the member 'fix_invalid' of a type (line 667)
    fix_invalid_573679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 8), ma_573678, 'fix_invalid')
    # Calling fix_invalid(args, kwargs) (line 667)
    fix_invalid_call_result_573684 = invoke(stypy.reporting.localization.Localization(__file__, 667, 8), fix_invalid_573679, *[x_573680], **kwargs_573683)
    
    # Obtaining the member 'astype' of a type (line 667)
    astype_573685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 8), fix_invalid_call_result_573684, 'astype')
    # Calling astype(args, kwargs) (line 667)
    astype_call_result_573688 = invoke(stypy.reporting.localization.Localization(__file__, 667, 8), astype_573685, *[bool_573686], **kwargs_573687)
    
    # Assigning a type to the variable 'x' (line 667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 4), 'x', astype_call_result_573688)
    
    # Assigning a Call to a Name (line 668):
    
    # Assigning a Call to a Name (line 668):
    
    # Call to astype(...): (line 668)
    # Processing the call arguments (line 668)
    # Getting the type of 'float' (line 668)
    float_573697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 44), 'float', False)
    # Processing the call keyword arguments (line 668)
    kwargs_573698 = {}
    
    # Call to fix_invalid(...): (line 668)
    # Processing the call arguments (line 668)
    # Getting the type of 'y' (line 668)
    y_573691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 23), 'y', False)
    # Processing the call keyword arguments (line 668)
    # Getting the type of 'True' (line 668)
    True_573692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 31), 'True', False)
    keyword_573693 = True_573692
    kwargs_573694 = {'copy': keyword_573693}
    # Getting the type of 'ma' (line 668)
    ma_573689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 8), 'ma', False)
    # Obtaining the member 'fix_invalid' of a type (line 668)
    fix_invalid_573690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 8), ma_573689, 'fix_invalid')
    # Calling fix_invalid(args, kwargs) (line 668)
    fix_invalid_call_result_573695 = invoke(stypy.reporting.localization.Localization(__file__, 668, 8), fix_invalid_573690, *[y_573691], **kwargs_573694)
    
    # Obtaining the member 'astype' of a type (line 668)
    astype_573696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 8), fix_invalid_call_result_573695, 'astype')
    # Calling astype(args, kwargs) (line 668)
    astype_call_result_573699 = invoke(stypy.reporting.localization.Localization(__file__, 668, 8), astype_573696, *[float_573697], **kwargs_573698)
    
    # Assigning a type to the variable 'y' (line 668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 4), 'y', astype_call_result_573699)
    
    # Assigning a Call to a Name (line 670):
    
    # Assigning a Call to a Name (line 670):
    
    # Call to mask_or(...): (line 670)
    # Processing the call arguments (line 670)
    
    # Call to getmask(...): (line 670)
    # Processing the call arguments (line 670)
    # Getting the type of 'x' (line 670)
    x_573704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 30), 'x', False)
    # Processing the call keyword arguments (line 670)
    kwargs_573705 = {}
    # Getting the type of 'ma' (line 670)
    ma_573702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 19), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 670)
    getmask_573703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 19), ma_573702, 'getmask')
    # Calling getmask(args, kwargs) (line 670)
    getmask_call_result_573706 = invoke(stypy.reporting.localization.Localization(__file__, 670, 19), getmask_573703, *[x_573704], **kwargs_573705)
    
    
    # Call to getmask(...): (line 670)
    # Processing the call arguments (line 670)
    # Getting the type of 'y' (line 670)
    y_573709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 45), 'y', False)
    # Processing the call keyword arguments (line 670)
    kwargs_573710 = {}
    # Getting the type of 'ma' (line 670)
    ma_573707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 34), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 670)
    getmask_573708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 34), ma_573707, 'getmask')
    # Calling getmask(args, kwargs) (line 670)
    getmask_call_result_573711 = invoke(stypy.reporting.localization.Localization(__file__, 670, 34), getmask_573708, *[y_573709], **kwargs_573710)
    
    # Processing the call keyword arguments (line 670)
    kwargs_573712 = {}
    # Getting the type of 'ma' (line 670)
    ma_573700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 8), 'ma', False)
    # Obtaining the member 'mask_or' of a type (line 670)
    mask_or_573701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 8), ma_573700, 'mask_or')
    # Calling mask_or(args, kwargs) (line 670)
    mask_or_call_result_573713 = invoke(stypy.reporting.localization.Localization(__file__, 670, 8), mask_or_573701, *[getmask_call_result_573706, getmask_call_result_573711], **kwargs_573712)
    
    # Assigning a type to the variable 'm' (line 670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 670, 4), 'm', mask_or_call_result_573713)
    
    
    # Getting the type of 'm' (line 671)
    m_573714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 7), 'm')
    # Getting the type of 'nomask' (line 671)
    nomask_573715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 16), 'nomask')
    # Applying the binary operator 'isnot' (line 671)
    result_is_not_573716 = python_operator(stypy.reporting.localization.Localization(__file__, 671, 7), 'isnot', m_573714, nomask_573715)
    
    # Testing the type of an if condition (line 671)
    if_condition_573717 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 671, 4), result_is_not_573716)
    # Assigning a type to the variable 'if_condition_573717' (line 671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 4), 'if_condition_573717', if_condition_573717)
    # SSA begins for if statement (line 671)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 672):
    
    # Assigning a Call to a Name (line 672):
    
    # Call to logical_not(...): (line 672)
    # Processing the call arguments (line 672)
    # Getting the type of 'm' (line 672)
    m_573720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 32), 'm', False)
    # Processing the call keyword arguments (line 672)
    kwargs_573721 = {}
    # Getting the type of 'np' (line 672)
    np_573718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 17), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 672)
    logical_not_573719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 17), np_573718, 'logical_not')
    # Calling logical_not(args, kwargs) (line 672)
    logical_not_call_result_573722 = invoke(stypy.reporting.localization.Localization(__file__, 672, 17), logical_not_573719, *[m_573720], **kwargs_573721)
    
    # Assigning a type to the variable 'unmask' (line 672)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'unmask', logical_not_call_result_573722)
    
    # Assigning a Subscript to a Name (line 673):
    
    # Assigning a Subscript to a Name (line 673):
    
    # Obtaining the type of the subscript
    # Getting the type of 'unmask' (line 673)
    unmask_573723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 14), 'unmask')
    # Getting the type of 'x' (line 673)
    x_573724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 12), 'x')
    # Obtaining the member '__getitem__' of a type (line 673)
    getitem___573725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 12), x_573724, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 673)
    subscript_call_result_573726 = invoke(stypy.reporting.localization.Localization(__file__, 673, 12), getitem___573725, unmask_573723)
    
    # Assigning a type to the variable 'x' (line 673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'x', subscript_call_result_573726)
    
    # Assigning a Subscript to a Name (line 674):
    
    # Assigning a Subscript to a Name (line 674):
    
    # Obtaining the type of the subscript
    # Getting the type of 'unmask' (line 674)
    unmask_573727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 14), 'unmask')
    # Getting the type of 'y' (line 674)
    y_573728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 12), 'y')
    # Obtaining the member '__getitem__' of a type (line 674)
    getitem___573729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 12), y_573728, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 674)
    subscript_call_result_573730 = invoke(stypy.reporting.localization.Localization(__file__, 674, 12), getitem___573729, unmask_573727)
    
    # Assigning a type to the variable 'y' (line 674)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'y', subscript_call_result_573730)
    # SSA join for if statement (line 671)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 676):
    
    # Assigning a Call to a Name (line 676):
    
    # Call to len(...): (line 676)
    # Processing the call arguments (line 676)
    # Getting the type of 'x' (line 676)
    x_573732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 12), 'x', False)
    # Processing the call keyword arguments (line 676)
    kwargs_573733 = {}
    # Getting the type of 'len' (line 676)
    len_573731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 8), 'len', False)
    # Calling len(args, kwargs) (line 676)
    len_call_result_573734 = invoke(stypy.reporting.localization.Localization(__file__, 676, 8), len_573731, *[x_573732], **kwargs_573733)
    
    # Assigning a type to the variable 'n' (line 676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 4), 'n', len_call_result_573734)
    
    # Assigning a BinOp to a Name (line 678):
    
    # Assigning a BinOp to a Name (line 678):
    
    # Call to sum(...): (line 678)
    # Processing the call keyword arguments (line 678)
    kwargs_573737 = {}
    # Getting the type of 'x' (line 678)
    x_573735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 11), 'x', False)
    # Obtaining the member 'sum' of a type (line 678)
    sum_573736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 11), x_573735, 'sum')
    # Calling sum(args, kwargs) (line 678)
    sum_call_result_573738 = invoke(stypy.reporting.localization.Localization(__file__, 678, 11), sum_573736, *[], **kwargs_573737)
    
    
    # Call to float(...): (line 678)
    # Processing the call arguments (line 678)
    # Getting the type of 'n' (line 678)
    n_573740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 27), 'n', False)
    # Processing the call keyword arguments (line 678)
    kwargs_573741 = {}
    # Getting the type of 'float' (line 678)
    float_573739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 21), 'float', False)
    # Calling float(args, kwargs) (line 678)
    float_call_result_573742 = invoke(stypy.reporting.localization.Localization(__file__, 678, 21), float_573739, *[n_573740], **kwargs_573741)
    
    # Applying the binary operator 'div' (line 678)
    result_div_573743 = python_operator(stypy.reporting.localization.Localization(__file__, 678, 11), 'div', sum_call_result_573738, float_call_result_573742)
    
    # Assigning a type to the variable 'phat' (line 678)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 4), 'phat', result_div_573743)
    
    # Assigning a Subscript to a Name (line 679):
    
    # Assigning a Subscript to a Name (line 679):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'x' (line 679)
    x_573744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 12), 'x')
    # Applying the '~' unary operator (line 679)
    result_inv_573745 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 11), '~', x_573744)
    
    # Getting the type of 'y' (line 679)
    y_573746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 9), 'y')
    # Obtaining the member '__getitem__' of a type (line 679)
    getitem___573747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 9), y_573746, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 679)
    subscript_call_result_573748 = invoke(stypy.reporting.localization.Localization(__file__, 679, 9), getitem___573747, result_inv_573745)
    
    # Assigning a type to the variable 'y0' (line 679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 4), 'y0', subscript_call_result_573748)
    
    # Assigning a Subscript to a Name (line 680):
    
    # Assigning a Subscript to a Name (line 680):
    
    # Obtaining the type of the subscript
    # Getting the type of 'x' (line 680)
    x_573749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 11), 'x')
    # Getting the type of 'y' (line 680)
    y_573750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 9), 'y')
    # Obtaining the member '__getitem__' of a type (line 680)
    getitem___573751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 9), y_573750, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 680)
    subscript_call_result_573752 = invoke(stypy.reporting.localization.Localization(__file__, 680, 9), getitem___573751, x_573749)
    
    # Assigning a type to the variable 'y1' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'y1', subscript_call_result_573752)
    
    # Assigning a Call to a Name (line 681):
    
    # Assigning a Call to a Name (line 681):
    
    # Call to mean(...): (line 681)
    # Processing the call keyword arguments (line 681)
    kwargs_573755 = {}
    # Getting the type of 'y0' (line 681)
    y0_573753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 10), 'y0', False)
    # Obtaining the member 'mean' of a type (line 681)
    mean_573754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 10), y0_573753, 'mean')
    # Calling mean(args, kwargs) (line 681)
    mean_call_result_573756 = invoke(stypy.reporting.localization.Localization(__file__, 681, 10), mean_573754, *[], **kwargs_573755)
    
    # Assigning a type to the variable 'y0m' (line 681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 4), 'y0m', mean_call_result_573756)
    
    # Assigning a Call to a Name (line 682):
    
    # Assigning a Call to a Name (line 682):
    
    # Call to mean(...): (line 682)
    # Processing the call keyword arguments (line 682)
    kwargs_573759 = {}
    # Getting the type of 'y1' (line 682)
    y1_573757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 10), 'y1', False)
    # Obtaining the member 'mean' of a type (line 682)
    mean_573758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 10), y1_573757, 'mean')
    # Calling mean(args, kwargs) (line 682)
    mean_call_result_573760 = invoke(stypy.reporting.localization.Localization(__file__, 682, 10), mean_573758, *[], **kwargs_573759)
    
    # Assigning a type to the variable 'y1m' (line 682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 4), 'y1m', mean_call_result_573760)
    
    # Assigning a BinOp to a Name (line 684):
    
    # Assigning a BinOp to a Name (line 684):
    # Getting the type of 'y1m' (line 684)
    y1m_573761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 11), 'y1m')
    # Getting the type of 'y0m' (line 684)
    y0m_573762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 17), 'y0m')
    # Applying the binary operator '-' (line 684)
    result_sub_573763 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 11), '-', y1m_573761, y0m_573762)
    
    
    # Call to sqrt(...): (line 684)
    # Processing the call arguments (line 684)
    # Getting the type of 'phat' (line 684)
    phat_573766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 30), 'phat', False)
    int_573767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 684, 38), 'int')
    # Getting the type of 'phat' (line 684)
    phat_573768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 40), 'phat', False)
    # Applying the binary operator '-' (line 684)
    result_sub_573769 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 38), '-', int_573767, phat_573768)
    
    # Applying the binary operator '*' (line 684)
    result_mul_573770 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 30), '*', phat_573766, result_sub_573769)
    
    # Processing the call keyword arguments (line 684)
    kwargs_573771 = {}
    # Getting the type of 'np' (line 684)
    np_573764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 22), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 684)
    sqrt_573765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 22), np_573764, 'sqrt')
    # Calling sqrt(args, kwargs) (line 684)
    sqrt_call_result_573772 = invoke(stypy.reporting.localization.Localization(__file__, 684, 22), sqrt_573765, *[result_mul_573770], **kwargs_573771)
    
    # Applying the binary operator '*' (line 684)
    result_mul_573773 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 10), '*', result_sub_573763, sqrt_call_result_573772)
    
    
    # Call to std(...): (line 684)
    # Processing the call keyword arguments (line 684)
    kwargs_573776 = {}
    # Getting the type of 'y' (line 684)
    y_573774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 49), 'y', False)
    # Obtaining the member 'std' of a type (line 684)
    std_573775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 49), y_573774, 'std')
    # Calling std(args, kwargs) (line 684)
    std_call_result_573777 = invoke(stypy.reporting.localization.Localization(__file__, 684, 49), std_573775, *[], **kwargs_573776)
    
    # Applying the binary operator 'div' (line 684)
    result_div_573778 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 47), 'div', result_mul_573773, std_call_result_573777)
    
    # Assigning a type to the variable 'rpb' (line 684)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 4), 'rpb', result_div_573778)
    
    # Assigning a BinOp to a Name (line 686):
    
    # Assigning a BinOp to a Name (line 686):
    # Getting the type of 'n' (line 686)
    n_573779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 9), 'n')
    int_573780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 11), 'int')
    # Applying the binary operator '-' (line 686)
    result_sub_573781 = python_operator(stypy.reporting.localization.Localization(__file__, 686, 9), '-', n_573779, int_573780)
    
    # Assigning a type to the variable 'df' (line 686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 4), 'df', result_sub_573781)
    
    # Assigning a BinOp to a Name (line 687):
    
    # Assigning a BinOp to a Name (line 687):
    # Getting the type of 'rpb' (line 687)
    rpb_573782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 8), 'rpb')
    
    # Call to sqrt(...): (line 687)
    # Processing the call arguments (line 687)
    # Getting the type of 'df' (line 687)
    df_573785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 20), 'df', False)
    float_573786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 24), 'float')
    # Getting the type of 'rpb' (line 687)
    rpb_573787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 28), 'rpb', False)
    int_573788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 33), 'int')
    # Applying the binary operator '**' (line 687)
    result_pow_573789 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 28), '**', rpb_573787, int_573788)
    
    # Applying the binary operator '-' (line 687)
    result_sub_573790 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 24), '-', float_573786, result_pow_573789)
    
    # Applying the binary operator 'div' (line 687)
    result_div_573791 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 20), 'div', df_573785, result_sub_573790)
    
    # Processing the call keyword arguments (line 687)
    kwargs_573792 = {}
    # Getting the type of 'ma' (line 687)
    ma_573783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 12), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 687)
    sqrt_573784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 12), ma_573783, 'sqrt')
    # Calling sqrt(args, kwargs) (line 687)
    sqrt_call_result_573793 = invoke(stypy.reporting.localization.Localization(__file__, 687, 12), sqrt_573784, *[result_div_573791], **kwargs_573792)
    
    # Applying the binary operator '*' (line 687)
    result_mul_573794 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 8), '*', rpb_573782, sqrt_call_result_573793)
    
    # Assigning a type to the variable 't' (line 687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 4), 't', result_mul_573794)
    
    # Assigning a Call to a Name (line 688):
    
    # Assigning a Call to a Name (line 688):
    
    # Call to _betai(...): (line 688)
    # Processing the call arguments (line 688)
    float_573796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 18), 'float')
    # Getting the type of 'df' (line 688)
    df_573797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 22), 'df', False)
    # Applying the binary operator '*' (line 688)
    result_mul_573798 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 18), '*', float_573796, df_573797)
    
    float_573799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 26), 'float')
    # Getting the type of 'df' (line 688)
    df_573800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 31), 'df', False)
    # Getting the type of 'df' (line 688)
    df_573801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 35), 'df', False)
    # Getting the type of 't' (line 688)
    t_573802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 38), 't', False)
    # Getting the type of 't' (line 688)
    t_573803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 40), 't', False)
    # Applying the binary operator '*' (line 688)
    result_mul_573804 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 38), '*', t_573802, t_573803)
    
    # Applying the binary operator '+' (line 688)
    result_add_573805 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 35), '+', df_573801, result_mul_573804)
    
    # Applying the binary operator 'div' (line 688)
    result_div_573806 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 31), 'div', df_573800, result_add_573805)
    
    # Processing the call keyword arguments (line 688)
    kwargs_573807 = {}
    # Getting the type of '_betai' (line 688)
    _betai_573795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 11), '_betai', False)
    # Calling _betai(args, kwargs) (line 688)
    _betai_call_result_573808 = invoke(stypy.reporting.localization.Localization(__file__, 688, 11), _betai_573795, *[result_mul_573798, float_573799, result_div_573806], **kwargs_573807)
    
    # Assigning a type to the variable 'prob' (line 688)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 4), 'prob', _betai_call_result_573808)
    
    # Call to PointbiserialrResult(...): (line 690)
    # Processing the call arguments (line 690)
    # Getting the type of 'rpb' (line 690)
    rpb_573810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 32), 'rpb', False)
    # Getting the type of 'prob' (line 690)
    prob_573811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 37), 'prob', False)
    # Processing the call keyword arguments (line 690)
    kwargs_573812 = {}
    # Getting the type of 'PointbiserialrResult' (line 690)
    PointbiserialrResult_573809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 11), 'PointbiserialrResult', False)
    # Calling PointbiserialrResult(args, kwargs) (line 690)
    PointbiserialrResult_call_result_573813 = invoke(stypy.reporting.localization.Localization(__file__, 690, 11), PointbiserialrResult_573809, *[rpb_573810, prob_573811], **kwargs_573812)
    
    # Assigning a type to the variable 'stypy_return_type' (line 690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 4), 'stypy_return_type', PointbiserialrResult_call_result_573813)
    
    # ################# End of 'pointbiserialr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pointbiserialr' in the type store
    # Getting the type of 'stypy_return_type' (line 642)
    stypy_return_type_573814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_573814)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pointbiserialr'
    return stypy_return_type_573814

# Assigning a type to the variable 'pointbiserialr' (line 642)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 0), 'pointbiserialr', pointbiserialr)

# Assigning a Call to a Name (line 693):

# Assigning a Call to a Name (line 693):

# Call to namedtuple(...): (line 693)
# Processing the call arguments (line 693)
str_573816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 30), 'str', 'LinregressResult')

# Obtaining an instance of the builtin type 'tuple' (line 693)
tuple_573817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 51), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 693)
# Adding element type (line 693)
str_573818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 51), 'str', 'slope')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 51), tuple_573817, str_573818)
# Adding element type (line 693)
str_573819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 60), 'str', 'intercept')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 51), tuple_573817, str_573819)
# Adding element type (line 693)
str_573820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, 51), 'str', 'rvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 51), tuple_573817, str_573820)
# Adding element type (line 693)
str_573821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, 61), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 51), tuple_573817, str_573821)
# Adding element type (line 693)
str_573822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, 51), 'str', 'stderr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 51), tuple_573817, str_573822)

# Processing the call keyword arguments (line 693)
kwargs_573823 = {}
# Getting the type of 'namedtuple' (line 693)
namedtuple_573815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 19), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 693)
namedtuple_call_result_573824 = invoke(stypy.reporting.localization.Localization(__file__, 693, 19), namedtuple_573815, *[str_573816, tuple_573817], **kwargs_573823)

# Assigning a type to the variable 'LinregressResult' (line 693)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 0), 'LinregressResult', namedtuple_call_result_573824)

@norecursion
def linregress(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 698)
    None_573825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 20), 'None')
    defaults = [None_573825]
    # Create a new context for function 'linregress'
    module_type_store = module_type_store.open_function_context('linregress', 698, 0, False)
    
    # Passed parameters checking function
    linregress.stypy_localization = localization
    linregress.stypy_type_of_self = None
    linregress.stypy_type_store = module_type_store
    linregress.stypy_function_name = 'linregress'
    linregress.stypy_param_names_list = ['x', 'y']
    linregress.stypy_varargs_param_name = None
    linregress.stypy_kwargs_param_name = None
    linregress.stypy_call_defaults = defaults
    linregress.stypy_call_varargs = varargs
    linregress.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'linregress', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'linregress', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'linregress(...)' code ##################

    str_573826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, (-1)), 'str', '\n    Linear regression calculation\n\n    Note that the non-masked version is used, and that this docstring is\n    replaced by the non-masked docstring + some info on missing data.\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 706)
    # Getting the type of 'y' (line 706)
    y_573827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 7), 'y')
    # Getting the type of 'None' (line 706)
    None_573828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 12), 'None')
    
    (may_be_573829, more_types_in_union_573830) = may_be_none(y_573827, None_573828)

    if may_be_573829:

        if more_types_in_union_573830:
            # Runtime conditional SSA (line 706)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 707):
        
        # Assigning a Call to a Name (line 707):
        
        # Call to array(...): (line 707)
        # Processing the call arguments (line 707)
        # Getting the type of 'x' (line 707)
        x_573833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 21), 'x', False)
        # Processing the call keyword arguments (line 707)
        kwargs_573834 = {}
        # Getting the type of 'ma' (line 707)
        ma_573831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 12), 'ma', False)
        # Obtaining the member 'array' of a type (line 707)
        array_573832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 12), ma_573831, 'array')
        # Calling array(args, kwargs) (line 707)
        array_call_result_573835 = invoke(stypy.reporting.localization.Localization(__file__, 707, 12), array_573832, *[x_573833], **kwargs_573834)
        
        # Assigning a type to the variable 'x' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'x', array_call_result_573835)
        
        
        
        # Obtaining the type of the subscript
        int_573836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 19), 'int')
        # Getting the type of 'x' (line 708)
        x_573837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 11), 'x')
        # Obtaining the member 'shape' of a type (line 708)
        shape_573838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 11), x_573837, 'shape')
        # Obtaining the member '__getitem__' of a type (line 708)
        getitem___573839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 11), shape_573838, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 708)
        subscript_call_result_573840 = invoke(stypy.reporting.localization.Localization(__file__, 708, 11), getitem___573839, int_573836)
        
        int_573841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 25), 'int')
        # Applying the binary operator '==' (line 708)
        result_eq_573842 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 11), '==', subscript_call_result_573840, int_573841)
        
        # Testing the type of an if condition (line 708)
        if_condition_573843 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 708, 8), result_eq_573842)
        # Assigning a type to the variable 'if_condition_573843' (line 708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 8), 'if_condition_573843', if_condition_573843)
        # SSA begins for if statement (line 708)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 709):
        
        # Assigning a Subscript to a Name (line 709):
        
        # Obtaining the type of the subscript
        int_573844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, 12), 'int')
        # Getting the type of 'x' (line 709)
        x_573845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 19), 'x')
        # Obtaining the member '__getitem__' of a type (line 709)
        getitem___573846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 12), x_573845, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 709)
        subscript_call_result_573847 = invoke(stypy.reporting.localization.Localization(__file__, 709, 12), getitem___573846, int_573844)
        
        # Assigning a type to the variable 'tuple_var_assignment_571455' (line 709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 12), 'tuple_var_assignment_571455', subscript_call_result_573847)
        
        # Assigning a Subscript to a Name (line 709):
        
        # Obtaining the type of the subscript
        int_573848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, 12), 'int')
        # Getting the type of 'x' (line 709)
        x_573849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 19), 'x')
        # Obtaining the member '__getitem__' of a type (line 709)
        getitem___573850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 12), x_573849, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 709)
        subscript_call_result_573851 = invoke(stypy.reporting.localization.Localization(__file__, 709, 12), getitem___573850, int_573848)
        
        # Assigning a type to the variable 'tuple_var_assignment_571456' (line 709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 12), 'tuple_var_assignment_571456', subscript_call_result_573851)
        
        # Assigning a Name to a Name (line 709):
        # Getting the type of 'tuple_var_assignment_571455' (line 709)
        tuple_var_assignment_571455_573852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 12), 'tuple_var_assignment_571455')
        # Assigning a type to the variable 'x' (line 709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 12), 'x', tuple_var_assignment_571455_573852)
        
        # Assigning a Name to a Name (line 709):
        # Getting the type of 'tuple_var_assignment_571456' (line 709)
        tuple_var_assignment_571456_573853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 12), 'tuple_var_assignment_571456')
        # Assigning a type to the variable 'y' (line 709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 15), 'y', tuple_var_assignment_571456_573853)
        # SSA branch for the else part of an if statement (line 708)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        int_573854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 21), 'int')
        # Getting the type of 'x' (line 710)
        x_573855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 13), 'x')
        # Obtaining the member 'shape' of a type (line 710)
        shape_573856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 13), x_573855, 'shape')
        # Obtaining the member '__getitem__' of a type (line 710)
        getitem___573857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 13), shape_573856, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 710)
        subscript_call_result_573858 = invoke(stypy.reporting.localization.Localization(__file__, 710, 13), getitem___573857, int_573854)
        
        int_573859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 27), 'int')
        # Applying the binary operator '==' (line 710)
        result_eq_573860 = python_operator(stypy.reporting.localization.Localization(__file__, 710, 13), '==', subscript_call_result_573858, int_573859)
        
        # Testing the type of an if condition (line 710)
        if_condition_573861 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 710, 13), result_eq_573860)
        # Assigning a type to the variable 'if_condition_573861' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 13), 'if_condition_573861', if_condition_573861)
        # SSA begins for if statement (line 710)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 711):
        
        # Assigning a Subscript to a Name (line 711):
        
        # Obtaining the type of the subscript
        int_573862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 12), 'int')
        # Getting the type of 'x' (line 711)
        x_573863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 19), 'x')
        # Obtaining the member 'T' of a type (line 711)
        T_573864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 19), x_573863, 'T')
        # Obtaining the member '__getitem__' of a type (line 711)
        getitem___573865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 12), T_573864, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 711)
        subscript_call_result_573866 = invoke(stypy.reporting.localization.Localization(__file__, 711, 12), getitem___573865, int_573862)
        
        # Assigning a type to the variable 'tuple_var_assignment_571457' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 12), 'tuple_var_assignment_571457', subscript_call_result_573866)
        
        # Assigning a Subscript to a Name (line 711):
        
        # Obtaining the type of the subscript
        int_573867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 12), 'int')
        # Getting the type of 'x' (line 711)
        x_573868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 19), 'x')
        # Obtaining the member 'T' of a type (line 711)
        T_573869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 19), x_573868, 'T')
        # Obtaining the member '__getitem__' of a type (line 711)
        getitem___573870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 12), T_573869, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 711)
        subscript_call_result_573871 = invoke(stypy.reporting.localization.Localization(__file__, 711, 12), getitem___573870, int_573867)
        
        # Assigning a type to the variable 'tuple_var_assignment_571458' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 12), 'tuple_var_assignment_571458', subscript_call_result_573871)
        
        # Assigning a Name to a Name (line 711):
        # Getting the type of 'tuple_var_assignment_571457' (line 711)
        tuple_var_assignment_571457_573872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 12), 'tuple_var_assignment_571457')
        # Assigning a type to the variable 'x' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 12), 'x', tuple_var_assignment_571457_573872)
        
        # Assigning a Name to a Name (line 711):
        # Getting the type of 'tuple_var_assignment_571458' (line 711)
        tuple_var_assignment_571458_573873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 12), 'tuple_var_assignment_571458')
        # Assigning a type to the variable 'y' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 15), 'y', tuple_var_assignment_571458_573873)
        # SSA branch for the else part of an if statement (line 710)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 713):
        
        # Assigning a BinOp to a Name (line 713):
        str_573874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 19), 'str', 'If only `x` is given as input, it has to be of shape (2, N) or (N, 2), provided shape was %s')
        
        # Call to str(...): (line 714)
        # Processing the call arguments (line 714)
        # Getting the type of 'x' (line 714)
        x_573876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 67), 'x', False)
        # Obtaining the member 'shape' of a type (line 714)
        shape_573877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 67), x_573876, 'shape')
        # Processing the call keyword arguments (line 714)
        kwargs_573878 = {}
        # Getting the type of 'str' (line 714)
        str_573875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 63), 'str', False)
        # Calling str(args, kwargs) (line 714)
        str_call_result_573879 = invoke(stypy.reporting.localization.Localization(__file__, 714, 63), str_573875, *[shape_573877], **kwargs_573878)
        
        # Applying the binary operator '%' (line 713)
        result_mod_573880 = python_operator(stypy.reporting.localization.Localization(__file__, 713, 19), '%', str_573874, str_call_result_573879)
        
        # Assigning a type to the variable 'msg' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 12), 'msg', result_mod_573880)
        
        # Call to ValueError(...): (line 715)
        # Processing the call arguments (line 715)
        # Getting the type of 'msg' (line 715)
        msg_573882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 29), 'msg', False)
        # Processing the call keyword arguments (line 715)
        kwargs_573883 = {}
        # Getting the type of 'ValueError' (line 715)
        ValueError_573881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 715)
        ValueError_call_result_573884 = invoke(stypy.reporting.localization.Localization(__file__, 715, 18), ValueError_573881, *[msg_573882], **kwargs_573883)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 715, 12), ValueError_call_result_573884, 'raise parameter', BaseException)
        # SSA join for if statement (line 710)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 708)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_573830:
            # Runtime conditional SSA for else branch (line 706)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_573829) or more_types_in_union_573830):
        
        # Assigning a Call to a Name (line 717):
        
        # Assigning a Call to a Name (line 717):
        
        # Call to array(...): (line 717)
        # Processing the call arguments (line 717)
        # Getting the type of 'x' (line 717)
        x_573887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 21), 'x', False)
        # Processing the call keyword arguments (line 717)
        kwargs_573888 = {}
        # Getting the type of 'ma' (line 717)
        ma_573885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 12), 'ma', False)
        # Obtaining the member 'array' of a type (line 717)
        array_573886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 12), ma_573885, 'array')
        # Calling array(args, kwargs) (line 717)
        array_call_result_573889 = invoke(stypy.reporting.localization.Localization(__file__, 717, 12), array_573886, *[x_573887], **kwargs_573888)
        
        # Assigning a type to the variable 'x' (line 717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'x', array_call_result_573889)
        
        # Assigning a Call to a Name (line 718):
        
        # Assigning a Call to a Name (line 718):
        
        # Call to array(...): (line 718)
        # Processing the call arguments (line 718)
        # Getting the type of 'y' (line 718)
        y_573892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 21), 'y', False)
        # Processing the call keyword arguments (line 718)
        kwargs_573893 = {}
        # Getting the type of 'ma' (line 718)
        ma_573890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 12), 'ma', False)
        # Obtaining the member 'array' of a type (line 718)
        array_573891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 12), ma_573890, 'array')
        # Calling array(args, kwargs) (line 718)
        array_call_result_573894 = invoke(stypy.reporting.localization.Localization(__file__, 718, 12), array_573891, *[y_573892], **kwargs_573893)
        
        # Assigning a type to the variable 'y' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'y', array_call_result_573894)

        if (may_be_573829 and more_types_in_union_573830):
            # SSA join for if statement (line 706)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 720):
    
    # Assigning a Call to a Name (line 720):
    
    # Call to flatten(...): (line 720)
    # Processing the call keyword arguments (line 720)
    kwargs_573897 = {}
    # Getting the type of 'x' (line 720)
    x_573895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 8), 'x', False)
    # Obtaining the member 'flatten' of a type (line 720)
    flatten_573896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 8), x_573895, 'flatten')
    # Calling flatten(args, kwargs) (line 720)
    flatten_call_result_573898 = invoke(stypy.reporting.localization.Localization(__file__, 720, 8), flatten_573896, *[], **kwargs_573897)
    
    # Assigning a type to the variable 'x' (line 720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 4), 'x', flatten_call_result_573898)
    
    # Assigning a Call to a Name (line 721):
    
    # Assigning a Call to a Name (line 721):
    
    # Call to flatten(...): (line 721)
    # Processing the call keyword arguments (line 721)
    kwargs_573901 = {}
    # Getting the type of 'y' (line 721)
    y_573899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'y', False)
    # Obtaining the member 'flatten' of a type (line 721)
    flatten_573900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 721, 8), y_573899, 'flatten')
    # Calling flatten(args, kwargs) (line 721)
    flatten_call_result_573902 = invoke(stypy.reporting.localization.Localization(__file__, 721, 8), flatten_573900, *[], **kwargs_573901)
    
    # Assigning a type to the variable 'y' (line 721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 4), 'y', flatten_call_result_573902)
    
    # Assigning a Call to a Name (line 723):
    
    # Assigning a Call to a Name (line 723):
    
    # Call to mask_or(...): (line 723)
    # Processing the call arguments (line 723)
    
    # Call to getmask(...): (line 723)
    # Processing the call arguments (line 723)
    # Getting the type of 'x' (line 723)
    x_573907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 30), 'x', False)
    # Processing the call keyword arguments (line 723)
    kwargs_573908 = {}
    # Getting the type of 'ma' (line 723)
    ma_573905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 19), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 723)
    getmask_573906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 19), ma_573905, 'getmask')
    # Calling getmask(args, kwargs) (line 723)
    getmask_call_result_573909 = invoke(stypy.reporting.localization.Localization(__file__, 723, 19), getmask_573906, *[x_573907], **kwargs_573908)
    
    
    # Call to getmask(...): (line 723)
    # Processing the call arguments (line 723)
    # Getting the type of 'y' (line 723)
    y_573912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 45), 'y', False)
    # Processing the call keyword arguments (line 723)
    kwargs_573913 = {}
    # Getting the type of 'ma' (line 723)
    ma_573910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 34), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 723)
    getmask_573911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 34), ma_573910, 'getmask')
    # Calling getmask(args, kwargs) (line 723)
    getmask_call_result_573914 = invoke(stypy.reporting.localization.Localization(__file__, 723, 34), getmask_573911, *[y_573912], **kwargs_573913)
    
    # Processing the call keyword arguments (line 723)
    # Getting the type of 'False' (line 723)
    False_573915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 56), 'False', False)
    keyword_573916 = False_573915
    kwargs_573917 = {'shrink': keyword_573916}
    # Getting the type of 'ma' (line 723)
    ma_573903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'ma', False)
    # Obtaining the member 'mask_or' of a type (line 723)
    mask_or_573904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 8), ma_573903, 'mask_or')
    # Calling mask_or(args, kwargs) (line 723)
    mask_or_call_result_573918 = invoke(stypy.reporting.localization.Localization(__file__, 723, 8), mask_or_573904, *[getmask_call_result_573909, getmask_call_result_573914], **kwargs_573917)
    
    # Assigning a type to the variable 'm' (line 723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 4), 'm', mask_or_call_result_573918)
    
    
    # Getting the type of 'm' (line 724)
    m_573919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 7), 'm')
    # Getting the type of 'nomask' (line 724)
    nomask_573920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 16), 'nomask')
    # Applying the binary operator 'isnot' (line 724)
    result_is_not_573921 = python_operator(stypy.reporting.localization.Localization(__file__, 724, 7), 'isnot', m_573919, nomask_573920)
    
    # Testing the type of an if condition (line 724)
    if_condition_573922 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 724, 4), result_is_not_573921)
    # Assigning a type to the variable 'if_condition_573922' (line 724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 4), 'if_condition_573922', if_condition_573922)
    # SSA begins for if statement (line 724)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 725):
    
    # Assigning a Call to a Name (line 725):
    
    # Call to array(...): (line 725)
    # Processing the call arguments (line 725)
    # Getting the type of 'x' (line 725)
    x_573925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 21), 'x', False)
    # Processing the call keyword arguments (line 725)
    # Getting the type of 'm' (line 725)
    m_573926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 29), 'm', False)
    keyword_573927 = m_573926
    kwargs_573928 = {'mask': keyword_573927}
    # Getting the type of 'ma' (line 725)
    ma_573923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 12), 'ma', False)
    # Obtaining the member 'array' of a type (line 725)
    array_573924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 12), ma_573923, 'array')
    # Calling array(args, kwargs) (line 725)
    array_call_result_573929 = invoke(stypy.reporting.localization.Localization(__file__, 725, 12), array_573924, *[x_573925], **kwargs_573928)
    
    # Assigning a type to the variable 'x' (line 725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'x', array_call_result_573929)
    
    # Assigning a Call to a Name (line 726):
    
    # Assigning a Call to a Name (line 726):
    
    # Call to array(...): (line 726)
    # Processing the call arguments (line 726)
    # Getting the type of 'y' (line 726)
    y_573932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 21), 'y', False)
    # Processing the call keyword arguments (line 726)
    # Getting the type of 'm' (line 726)
    m_573933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 29), 'm', False)
    keyword_573934 = m_573933
    kwargs_573935 = {'mask': keyword_573934}
    # Getting the type of 'ma' (line 726)
    ma_573930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 12), 'ma', False)
    # Obtaining the member 'array' of a type (line 726)
    array_573931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 12), ma_573930, 'array')
    # Calling array(args, kwargs) (line 726)
    array_call_result_573936 = invoke(stypy.reporting.localization.Localization(__file__, 726, 12), array_573931, *[y_573932], **kwargs_573935)
    
    # Assigning a type to the variable 'y' (line 726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 8), 'y', array_call_result_573936)
    
    
    # Call to any(...): (line 727)
    # Processing the call arguments (line 727)
    
    # Getting the type of 'm' (line 727)
    m_573939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 19), 'm', False)
    # Applying the '~' unary operator (line 727)
    result_inv_573940 = python_operator(stypy.reporting.localization.Localization(__file__, 727, 18), '~', m_573939)
    
    # Processing the call keyword arguments (line 727)
    kwargs_573941 = {}
    # Getting the type of 'np' (line 727)
    np_573937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 11), 'np', False)
    # Obtaining the member 'any' of a type (line 727)
    any_573938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 11), np_573937, 'any')
    # Calling any(args, kwargs) (line 727)
    any_call_result_573942 = invoke(stypy.reporting.localization.Localization(__file__, 727, 11), any_573938, *[result_inv_573940], **kwargs_573941)
    
    # Testing the type of an if condition (line 727)
    if_condition_573943 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 727, 8), any_call_result_573942)
    # Assigning a type to the variable 'if_condition_573943' (line 727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'if_condition_573943', if_condition_573943)
    # SSA begins for if statement (line 727)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 728):
    
    # Assigning a Subscript to a Name (line 728):
    
    # Obtaining the type of the subscript
    int_573944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 12), 'int')
    
    # Call to stats_linregress(...): (line 728)
    # Processing the call arguments (line 728)
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'm' (line 728)
    m_573946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 75), 'm', False)
    # Applying the '~' unary operator (line 728)
    result_inv_573947 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 74), '~', m_573946)
    
    # Getting the type of 'x' (line 728)
    x_573948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 67), 'x', False)
    # Obtaining the member 'data' of a type (line 728)
    data_573949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 67), x_573948, 'data')
    # Obtaining the member '__getitem__' of a type (line 728)
    getitem___573950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 67), data_573949, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 728)
    subscript_call_result_573951 = invoke(stypy.reporting.localization.Localization(__file__, 728, 67), getitem___573950, result_inv_573947)
    
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'm' (line 729)
    m_573952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 75), 'm', False)
    # Applying the '~' unary operator (line 729)
    result_inv_573953 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 74), '~', m_573952)
    
    # Getting the type of 'y' (line 729)
    y_573954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 67), 'y', False)
    # Obtaining the member 'data' of a type (line 729)
    data_573955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 67), y_573954, 'data')
    # Obtaining the member '__getitem__' of a type (line 729)
    getitem___573956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 67), data_573955, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 729)
    subscript_call_result_573957 = invoke(stypy.reporting.localization.Localization(__file__, 729, 67), getitem___573956, result_inv_573953)
    
    # Processing the call keyword arguments (line 728)
    kwargs_573958 = {}
    # Getting the type of 'stats_linregress' (line 728)
    stats_linregress_573945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 50), 'stats_linregress', False)
    # Calling stats_linregress(args, kwargs) (line 728)
    stats_linregress_call_result_573959 = invoke(stypy.reporting.localization.Localization(__file__, 728, 50), stats_linregress_573945, *[subscript_call_result_573951, subscript_call_result_573957], **kwargs_573958)
    
    # Obtaining the member '__getitem__' of a type (line 728)
    getitem___573960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 12), stats_linregress_call_result_573959, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 728)
    subscript_call_result_573961 = invoke(stypy.reporting.localization.Localization(__file__, 728, 12), getitem___573960, int_573944)
    
    # Assigning a type to the variable 'tuple_var_assignment_571459' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_571459', subscript_call_result_573961)
    
    # Assigning a Subscript to a Name (line 728):
    
    # Obtaining the type of the subscript
    int_573962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 12), 'int')
    
    # Call to stats_linregress(...): (line 728)
    # Processing the call arguments (line 728)
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'm' (line 728)
    m_573964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 75), 'm', False)
    # Applying the '~' unary operator (line 728)
    result_inv_573965 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 74), '~', m_573964)
    
    # Getting the type of 'x' (line 728)
    x_573966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 67), 'x', False)
    # Obtaining the member 'data' of a type (line 728)
    data_573967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 67), x_573966, 'data')
    # Obtaining the member '__getitem__' of a type (line 728)
    getitem___573968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 67), data_573967, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 728)
    subscript_call_result_573969 = invoke(stypy.reporting.localization.Localization(__file__, 728, 67), getitem___573968, result_inv_573965)
    
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'm' (line 729)
    m_573970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 75), 'm', False)
    # Applying the '~' unary operator (line 729)
    result_inv_573971 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 74), '~', m_573970)
    
    # Getting the type of 'y' (line 729)
    y_573972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 67), 'y', False)
    # Obtaining the member 'data' of a type (line 729)
    data_573973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 67), y_573972, 'data')
    # Obtaining the member '__getitem__' of a type (line 729)
    getitem___573974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 67), data_573973, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 729)
    subscript_call_result_573975 = invoke(stypy.reporting.localization.Localization(__file__, 729, 67), getitem___573974, result_inv_573971)
    
    # Processing the call keyword arguments (line 728)
    kwargs_573976 = {}
    # Getting the type of 'stats_linregress' (line 728)
    stats_linregress_573963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 50), 'stats_linregress', False)
    # Calling stats_linregress(args, kwargs) (line 728)
    stats_linregress_call_result_573977 = invoke(stypy.reporting.localization.Localization(__file__, 728, 50), stats_linregress_573963, *[subscript_call_result_573969, subscript_call_result_573975], **kwargs_573976)
    
    # Obtaining the member '__getitem__' of a type (line 728)
    getitem___573978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 12), stats_linregress_call_result_573977, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 728)
    subscript_call_result_573979 = invoke(stypy.reporting.localization.Localization(__file__, 728, 12), getitem___573978, int_573962)
    
    # Assigning a type to the variable 'tuple_var_assignment_571460' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_571460', subscript_call_result_573979)
    
    # Assigning a Subscript to a Name (line 728):
    
    # Obtaining the type of the subscript
    int_573980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 12), 'int')
    
    # Call to stats_linregress(...): (line 728)
    # Processing the call arguments (line 728)
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'm' (line 728)
    m_573982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 75), 'm', False)
    # Applying the '~' unary operator (line 728)
    result_inv_573983 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 74), '~', m_573982)
    
    # Getting the type of 'x' (line 728)
    x_573984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 67), 'x', False)
    # Obtaining the member 'data' of a type (line 728)
    data_573985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 67), x_573984, 'data')
    # Obtaining the member '__getitem__' of a type (line 728)
    getitem___573986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 67), data_573985, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 728)
    subscript_call_result_573987 = invoke(stypy.reporting.localization.Localization(__file__, 728, 67), getitem___573986, result_inv_573983)
    
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'm' (line 729)
    m_573988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 75), 'm', False)
    # Applying the '~' unary operator (line 729)
    result_inv_573989 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 74), '~', m_573988)
    
    # Getting the type of 'y' (line 729)
    y_573990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 67), 'y', False)
    # Obtaining the member 'data' of a type (line 729)
    data_573991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 67), y_573990, 'data')
    # Obtaining the member '__getitem__' of a type (line 729)
    getitem___573992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 67), data_573991, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 729)
    subscript_call_result_573993 = invoke(stypy.reporting.localization.Localization(__file__, 729, 67), getitem___573992, result_inv_573989)
    
    # Processing the call keyword arguments (line 728)
    kwargs_573994 = {}
    # Getting the type of 'stats_linregress' (line 728)
    stats_linregress_573981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 50), 'stats_linregress', False)
    # Calling stats_linregress(args, kwargs) (line 728)
    stats_linregress_call_result_573995 = invoke(stypy.reporting.localization.Localization(__file__, 728, 50), stats_linregress_573981, *[subscript_call_result_573987, subscript_call_result_573993], **kwargs_573994)
    
    # Obtaining the member '__getitem__' of a type (line 728)
    getitem___573996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 12), stats_linregress_call_result_573995, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 728)
    subscript_call_result_573997 = invoke(stypy.reporting.localization.Localization(__file__, 728, 12), getitem___573996, int_573980)
    
    # Assigning a type to the variable 'tuple_var_assignment_571461' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_571461', subscript_call_result_573997)
    
    # Assigning a Subscript to a Name (line 728):
    
    # Obtaining the type of the subscript
    int_573998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 12), 'int')
    
    # Call to stats_linregress(...): (line 728)
    # Processing the call arguments (line 728)
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'm' (line 728)
    m_574000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 75), 'm', False)
    # Applying the '~' unary operator (line 728)
    result_inv_574001 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 74), '~', m_574000)
    
    # Getting the type of 'x' (line 728)
    x_574002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 67), 'x', False)
    # Obtaining the member 'data' of a type (line 728)
    data_574003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 67), x_574002, 'data')
    # Obtaining the member '__getitem__' of a type (line 728)
    getitem___574004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 67), data_574003, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 728)
    subscript_call_result_574005 = invoke(stypy.reporting.localization.Localization(__file__, 728, 67), getitem___574004, result_inv_574001)
    
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'm' (line 729)
    m_574006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 75), 'm', False)
    # Applying the '~' unary operator (line 729)
    result_inv_574007 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 74), '~', m_574006)
    
    # Getting the type of 'y' (line 729)
    y_574008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 67), 'y', False)
    # Obtaining the member 'data' of a type (line 729)
    data_574009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 67), y_574008, 'data')
    # Obtaining the member '__getitem__' of a type (line 729)
    getitem___574010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 67), data_574009, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 729)
    subscript_call_result_574011 = invoke(stypy.reporting.localization.Localization(__file__, 729, 67), getitem___574010, result_inv_574007)
    
    # Processing the call keyword arguments (line 728)
    kwargs_574012 = {}
    # Getting the type of 'stats_linregress' (line 728)
    stats_linregress_573999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 50), 'stats_linregress', False)
    # Calling stats_linregress(args, kwargs) (line 728)
    stats_linregress_call_result_574013 = invoke(stypy.reporting.localization.Localization(__file__, 728, 50), stats_linregress_573999, *[subscript_call_result_574005, subscript_call_result_574011], **kwargs_574012)
    
    # Obtaining the member '__getitem__' of a type (line 728)
    getitem___574014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 12), stats_linregress_call_result_574013, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 728)
    subscript_call_result_574015 = invoke(stypy.reporting.localization.Localization(__file__, 728, 12), getitem___574014, int_573998)
    
    # Assigning a type to the variable 'tuple_var_assignment_571462' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_571462', subscript_call_result_574015)
    
    # Assigning a Subscript to a Name (line 728):
    
    # Obtaining the type of the subscript
    int_574016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 12), 'int')
    
    # Call to stats_linregress(...): (line 728)
    # Processing the call arguments (line 728)
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'm' (line 728)
    m_574018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 75), 'm', False)
    # Applying the '~' unary operator (line 728)
    result_inv_574019 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 74), '~', m_574018)
    
    # Getting the type of 'x' (line 728)
    x_574020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 67), 'x', False)
    # Obtaining the member 'data' of a type (line 728)
    data_574021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 67), x_574020, 'data')
    # Obtaining the member '__getitem__' of a type (line 728)
    getitem___574022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 67), data_574021, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 728)
    subscript_call_result_574023 = invoke(stypy.reporting.localization.Localization(__file__, 728, 67), getitem___574022, result_inv_574019)
    
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'm' (line 729)
    m_574024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 75), 'm', False)
    # Applying the '~' unary operator (line 729)
    result_inv_574025 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 74), '~', m_574024)
    
    # Getting the type of 'y' (line 729)
    y_574026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 67), 'y', False)
    # Obtaining the member 'data' of a type (line 729)
    data_574027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 67), y_574026, 'data')
    # Obtaining the member '__getitem__' of a type (line 729)
    getitem___574028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 67), data_574027, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 729)
    subscript_call_result_574029 = invoke(stypy.reporting.localization.Localization(__file__, 729, 67), getitem___574028, result_inv_574025)
    
    # Processing the call keyword arguments (line 728)
    kwargs_574030 = {}
    # Getting the type of 'stats_linregress' (line 728)
    stats_linregress_574017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 50), 'stats_linregress', False)
    # Calling stats_linregress(args, kwargs) (line 728)
    stats_linregress_call_result_574031 = invoke(stypy.reporting.localization.Localization(__file__, 728, 50), stats_linregress_574017, *[subscript_call_result_574023, subscript_call_result_574029], **kwargs_574030)
    
    # Obtaining the member '__getitem__' of a type (line 728)
    getitem___574032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 12), stats_linregress_call_result_574031, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 728)
    subscript_call_result_574033 = invoke(stypy.reporting.localization.Localization(__file__, 728, 12), getitem___574032, int_574016)
    
    # Assigning a type to the variable 'tuple_var_assignment_571463' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_571463', subscript_call_result_574033)
    
    # Assigning a Name to a Name (line 728):
    # Getting the type of 'tuple_var_assignment_571459' (line 728)
    tuple_var_assignment_571459_574034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_571459')
    # Assigning a type to the variable 'slope' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'slope', tuple_var_assignment_571459_574034)
    
    # Assigning a Name to a Name (line 728):
    # Getting the type of 'tuple_var_assignment_571460' (line 728)
    tuple_var_assignment_571460_574035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_571460')
    # Assigning a type to the variable 'intercept' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 19), 'intercept', tuple_var_assignment_571460_574035)
    
    # Assigning a Name to a Name (line 728):
    # Getting the type of 'tuple_var_assignment_571461' (line 728)
    tuple_var_assignment_571461_574036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_571461')
    # Assigning a type to the variable 'r' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 30), 'r', tuple_var_assignment_571461_574036)
    
    # Assigning a Name to a Name (line 728):
    # Getting the type of 'tuple_var_assignment_571462' (line 728)
    tuple_var_assignment_571462_574037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_571462')
    # Assigning a type to the variable 'prob' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 33), 'prob', tuple_var_assignment_571462_574037)
    
    # Assigning a Name to a Name (line 728):
    # Getting the type of 'tuple_var_assignment_571463' (line 728)
    tuple_var_assignment_571463_574038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'tuple_var_assignment_571463')
    # Assigning a type to the variable 'sterrest' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 39), 'sterrest', tuple_var_assignment_571463_574038)
    # SSA branch for the else part of an if statement (line 727)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 732)
    tuple_574039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 732)
    # Adding element type (line 732)
    # Getting the type of 'None' (line 732)
    None_574040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 19), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 19), tuple_574039, None_574040)
    # Adding element type (line 732)
    # Getting the type of 'None' (line 732)
    None_574041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 25), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 19), tuple_574039, None_574041)
    # Adding element type (line 732)
    # Getting the type of 'None' (line 732)
    None_574042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 31), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 19), tuple_574039, None_574042)
    # Adding element type (line 732)
    # Getting the type of 'None' (line 732)
    None_574043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 37), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 19), tuple_574039, None_574043)
    # Adding element type (line 732)
    # Getting the type of 'None' (line 732)
    None_574044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 43), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 19), tuple_574039, None_574044)
    
    # Assigning a type to the variable 'stypy_return_type' (line 732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 12), 'stypy_return_type', tuple_574039)
    # SSA join for if statement (line 727)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 724)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 734):
    
    # Assigning a Subscript to a Name (line 734):
    
    # Obtaining the type of the subscript
    int_574045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 8), 'int')
    
    # Call to stats_linregress(...): (line 734)
    # Processing the call arguments (line 734)
    # Getting the type of 'x' (line 734)
    x_574047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 63), 'x', False)
    # Obtaining the member 'data' of a type (line 734)
    data_574048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 63), x_574047, 'data')
    # Getting the type of 'y' (line 734)
    y_574049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 71), 'y', False)
    # Obtaining the member 'data' of a type (line 734)
    data_574050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 71), y_574049, 'data')
    # Processing the call keyword arguments (line 734)
    kwargs_574051 = {}
    # Getting the type of 'stats_linregress' (line 734)
    stats_linregress_574046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 46), 'stats_linregress', False)
    # Calling stats_linregress(args, kwargs) (line 734)
    stats_linregress_call_result_574052 = invoke(stypy.reporting.localization.Localization(__file__, 734, 46), stats_linregress_574046, *[data_574048, data_574050], **kwargs_574051)
    
    # Obtaining the member '__getitem__' of a type (line 734)
    getitem___574053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 8), stats_linregress_call_result_574052, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 734)
    subscript_call_result_574054 = invoke(stypy.reporting.localization.Localization(__file__, 734, 8), getitem___574053, int_574045)
    
    # Assigning a type to the variable 'tuple_var_assignment_571464' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'tuple_var_assignment_571464', subscript_call_result_574054)
    
    # Assigning a Subscript to a Name (line 734):
    
    # Obtaining the type of the subscript
    int_574055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 8), 'int')
    
    # Call to stats_linregress(...): (line 734)
    # Processing the call arguments (line 734)
    # Getting the type of 'x' (line 734)
    x_574057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 63), 'x', False)
    # Obtaining the member 'data' of a type (line 734)
    data_574058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 63), x_574057, 'data')
    # Getting the type of 'y' (line 734)
    y_574059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 71), 'y', False)
    # Obtaining the member 'data' of a type (line 734)
    data_574060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 71), y_574059, 'data')
    # Processing the call keyword arguments (line 734)
    kwargs_574061 = {}
    # Getting the type of 'stats_linregress' (line 734)
    stats_linregress_574056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 46), 'stats_linregress', False)
    # Calling stats_linregress(args, kwargs) (line 734)
    stats_linregress_call_result_574062 = invoke(stypy.reporting.localization.Localization(__file__, 734, 46), stats_linregress_574056, *[data_574058, data_574060], **kwargs_574061)
    
    # Obtaining the member '__getitem__' of a type (line 734)
    getitem___574063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 8), stats_linregress_call_result_574062, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 734)
    subscript_call_result_574064 = invoke(stypy.reporting.localization.Localization(__file__, 734, 8), getitem___574063, int_574055)
    
    # Assigning a type to the variable 'tuple_var_assignment_571465' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'tuple_var_assignment_571465', subscript_call_result_574064)
    
    # Assigning a Subscript to a Name (line 734):
    
    # Obtaining the type of the subscript
    int_574065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 8), 'int')
    
    # Call to stats_linregress(...): (line 734)
    # Processing the call arguments (line 734)
    # Getting the type of 'x' (line 734)
    x_574067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 63), 'x', False)
    # Obtaining the member 'data' of a type (line 734)
    data_574068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 63), x_574067, 'data')
    # Getting the type of 'y' (line 734)
    y_574069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 71), 'y', False)
    # Obtaining the member 'data' of a type (line 734)
    data_574070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 71), y_574069, 'data')
    # Processing the call keyword arguments (line 734)
    kwargs_574071 = {}
    # Getting the type of 'stats_linregress' (line 734)
    stats_linregress_574066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 46), 'stats_linregress', False)
    # Calling stats_linregress(args, kwargs) (line 734)
    stats_linregress_call_result_574072 = invoke(stypy.reporting.localization.Localization(__file__, 734, 46), stats_linregress_574066, *[data_574068, data_574070], **kwargs_574071)
    
    # Obtaining the member '__getitem__' of a type (line 734)
    getitem___574073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 8), stats_linregress_call_result_574072, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 734)
    subscript_call_result_574074 = invoke(stypy.reporting.localization.Localization(__file__, 734, 8), getitem___574073, int_574065)
    
    # Assigning a type to the variable 'tuple_var_assignment_571466' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'tuple_var_assignment_571466', subscript_call_result_574074)
    
    # Assigning a Subscript to a Name (line 734):
    
    # Obtaining the type of the subscript
    int_574075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 8), 'int')
    
    # Call to stats_linregress(...): (line 734)
    # Processing the call arguments (line 734)
    # Getting the type of 'x' (line 734)
    x_574077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 63), 'x', False)
    # Obtaining the member 'data' of a type (line 734)
    data_574078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 63), x_574077, 'data')
    # Getting the type of 'y' (line 734)
    y_574079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 71), 'y', False)
    # Obtaining the member 'data' of a type (line 734)
    data_574080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 71), y_574079, 'data')
    # Processing the call keyword arguments (line 734)
    kwargs_574081 = {}
    # Getting the type of 'stats_linregress' (line 734)
    stats_linregress_574076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 46), 'stats_linregress', False)
    # Calling stats_linregress(args, kwargs) (line 734)
    stats_linregress_call_result_574082 = invoke(stypy.reporting.localization.Localization(__file__, 734, 46), stats_linregress_574076, *[data_574078, data_574080], **kwargs_574081)
    
    # Obtaining the member '__getitem__' of a type (line 734)
    getitem___574083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 8), stats_linregress_call_result_574082, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 734)
    subscript_call_result_574084 = invoke(stypy.reporting.localization.Localization(__file__, 734, 8), getitem___574083, int_574075)
    
    # Assigning a type to the variable 'tuple_var_assignment_571467' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'tuple_var_assignment_571467', subscript_call_result_574084)
    
    # Assigning a Subscript to a Name (line 734):
    
    # Obtaining the type of the subscript
    int_574085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 8), 'int')
    
    # Call to stats_linregress(...): (line 734)
    # Processing the call arguments (line 734)
    # Getting the type of 'x' (line 734)
    x_574087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 63), 'x', False)
    # Obtaining the member 'data' of a type (line 734)
    data_574088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 63), x_574087, 'data')
    # Getting the type of 'y' (line 734)
    y_574089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 71), 'y', False)
    # Obtaining the member 'data' of a type (line 734)
    data_574090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 71), y_574089, 'data')
    # Processing the call keyword arguments (line 734)
    kwargs_574091 = {}
    # Getting the type of 'stats_linregress' (line 734)
    stats_linregress_574086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 46), 'stats_linregress', False)
    # Calling stats_linregress(args, kwargs) (line 734)
    stats_linregress_call_result_574092 = invoke(stypy.reporting.localization.Localization(__file__, 734, 46), stats_linregress_574086, *[data_574088, data_574090], **kwargs_574091)
    
    # Obtaining the member '__getitem__' of a type (line 734)
    getitem___574093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 8), stats_linregress_call_result_574092, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 734)
    subscript_call_result_574094 = invoke(stypy.reporting.localization.Localization(__file__, 734, 8), getitem___574093, int_574085)
    
    # Assigning a type to the variable 'tuple_var_assignment_571468' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'tuple_var_assignment_571468', subscript_call_result_574094)
    
    # Assigning a Name to a Name (line 734):
    # Getting the type of 'tuple_var_assignment_571464' (line 734)
    tuple_var_assignment_571464_574095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'tuple_var_assignment_571464')
    # Assigning a type to the variable 'slope' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'slope', tuple_var_assignment_571464_574095)
    
    # Assigning a Name to a Name (line 734):
    # Getting the type of 'tuple_var_assignment_571465' (line 734)
    tuple_var_assignment_571465_574096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'tuple_var_assignment_571465')
    # Assigning a type to the variable 'intercept' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 15), 'intercept', tuple_var_assignment_571465_574096)
    
    # Assigning a Name to a Name (line 734):
    # Getting the type of 'tuple_var_assignment_571466' (line 734)
    tuple_var_assignment_571466_574097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'tuple_var_assignment_571466')
    # Assigning a type to the variable 'r' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 26), 'r', tuple_var_assignment_571466_574097)
    
    # Assigning a Name to a Name (line 734):
    # Getting the type of 'tuple_var_assignment_571467' (line 734)
    tuple_var_assignment_571467_574098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'tuple_var_assignment_571467')
    # Assigning a type to the variable 'prob' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 29), 'prob', tuple_var_assignment_571467_574098)
    
    # Assigning a Name to a Name (line 734):
    # Getting the type of 'tuple_var_assignment_571468' (line 734)
    tuple_var_assignment_571468_574099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'tuple_var_assignment_571468')
    # Assigning a type to the variable 'sterrest' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 35), 'sterrest', tuple_var_assignment_571468_574099)
    # SSA join for if statement (line 724)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to LinregressResult(...): (line 736)
    # Processing the call arguments (line 736)
    # Getting the type of 'slope' (line 736)
    slope_574101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 28), 'slope', False)
    # Getting the type of 'intercept' (line 736)
    intercept_574102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 35), 'intercept', False)
    # Getting the type of 'r' (line 736)
    r_574103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 46), 'r', False)
    # Getting the type of 'prob' (line 736)
    prob_574104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 49), 'prob', False)
    # Getting the type of 'sterrest' (line 736)
    sterrest_574105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 55), 'sterrest', False)
    # Processing the call keyword arguments (line 736)
    kwargs_574106 = {}
    # Getting the type of 'LinregressResult' (line 736)
    LinregressResult_574100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 11), 'LinregressResult', False)
    # Calling LinregressResult(args, kwargs) (line 736)
    LinregressResult_call_result_574107 = invoke(stypy.reporting.localization.Localization(__file__, 736, 11), LinregressResult_574100, *[slope_574101, intercept_574102, r_574103, prob_574104, sterrest_574105], **kwargs_574106)
    
    # Assigning a type to the variable 'stypy_return_type' (line 736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'stypy_return_type', LinregressResult_call_result_574107)
    
    # ################# End of 'linregress(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'linregress' in the type store
    # Getting the type of 'stypy_return_type' (line 698)
    stypy_return_type_574108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_574108)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'linregress'
    return stypy_return_type_574108

# Assigning a type to the variable 'linregress' (line 698)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 0), 'linregress', linregress)

# Getting the type of 'stats_linregress' (line 738)
stats_linregress_574109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 3), 'stats_linregress')
# Obtaining the member '__doc__' of a type (line 738)
doc___574110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 3), stats_linregress_574109, '__doc__')
# Testing the type of an if condition (line 738)
if_condition_574111 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 738, 0), doc___574110)
# Assigning a type to the variable 'if_condition_574111' (line 738)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 0), 'if_condition_574111', if_condition_574111)
# SSA begins for if statement (line 738)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a BinOp to a Attribute (line 739):

# Assigning a BinOp to a Attribute (line 739):
# Getting the type of 'stats_linregress' (line 739)
stats_linregress_574112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 25), 'stats_linregress')
# Obtaining the member '__doc__' of a type (line 739)
doc___574113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 25), stats_linregress_574112, '__doc__')
# Getting the type of 'genmissingvaldoc' (line 739)
genmissingvaldoc_574114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 52), 'genmissingvaldoc')
# Applying the binary operator '+' (line 739)
result_add_574115 = python_operator(stypy.reporting.localization.Localization(__file__, 739, 25), '+', doc___574113, genmissingvaldoc_574114)

# Getting the type of 'linregress' (line 739)
linregress_574116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 4), 'linregress')
# Setting the type of the member '__doc__' of a type (line 739)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 4), linregress_574116, '__doc__', result_add_574115)
# SSA join for if statement (line 738)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def theilslopes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 742)
    None_574117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 21), 'None')
    float_574118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 33), 'float')
    defaults = [None_574117, float_574118]
    # Create a new context for function 'theilslopes'
    module_type_store = module_type_store.open_function_context('theilslopes', 742, 0, False)
    
    # Passed parameters checking function
    theilslopes.stypy_localization = localization
    theilslopes.stypy_type_of_self = None
    theilslopes.stypy_type_store = module_type_store
    theilslopes.stypy_function_name = 'theilslopes'
    theilslopes.stypy_param_names_list = ['y', 'x', 'alpha']
    theilslopes.stypy_varargs_param_name = None
    theilslopes.stypy_kwargs_param_name = None
    theilslopes.stypy_call_defaults = defaults
    theilslopes.stypy_call_varargs = varargs
    theilslopes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'theilslopes', ['y', 'x', 'alpha'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'theilslopes', localization, ['y', 'x', 'alpha'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'theilslopes(...)' code ##################

    str_574119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 775, (-1)), 'str', '\n    Computes the Theil-Sen estimator for a set of points (x, y).\n\n    `theilslopes` implements a method for robust linear regression.  It\n    computes the slope as the median of all slopes between paired values.\n\n    Parameters\n    ----------\n    y : array_like\n        Dependent variable.\n    x : array_like or None, optional\n        Independent variable. If None, use ``arange(len(y))`` instead.\n    alpha : float, optional\n        Confidence degree between 0 and 1. Default is 95% confidence.\n        Note that `alpha` is symmetric around 0.5, i.e. both 0.1 and 0.9 are\n        interpreted as "find the 90% confidence interval".\n\n    Returns\n    -------\n    medslope : float\n        Theil slope.\n    medintercept : float\n        Intercept of the Theil line, as ``median(y) - medslope*median(x)``.\n    lo_slope : float\n        Lower bound of the confidence interval on `medslope`.\n    up_slope : float\n        Upper bound of the confidence interval on `medslope`.\n\n    Notes\n    -----\n    For more details on `theilslopes`, see `stats.theilslopes`.\n\n    ')
    
    # Assigning a Call to a Name (line 776):
    
    # Assigning a Call to a Name (line 776):
    
    # Call to flatten(...): (line 776)
    # Processing the call keyword arguments (line 776)
    kwargs_574126 = {}
    
    # Call to asarray(...): (line 776)
    # Processing the call arguments (line 776)
    # Getting the type of 'y' (line 776)
    y_574122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 19), 'y', False)
    # Processing the call keyword arguments (line 776)
    kwargs_574123 = {}
    # Getting the type of 'ma' (line 776)
    ma_574120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 8), 'ma', False)
    # Obtaining the member 'asarray' of a type (line 776)
    asarray_574121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 8), ma_574120, 'asarray')
    # Calling asarray(args, kwargs) (line 776)
    asarray_call_result_574124 = invoke(stypy.reporting.localization.Localization(__file__, 776, 8), asarray_574121, *[y_574122], **kwargs_574123)
    
    # Obtaining the member 'flatten' of a type (line 776)
    flatten_574125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 8), asarray_call_result_574124, 'flatten')
    # Calling flatten(args, kwargs) (line 776)
    flatten_call_result_574127 = invoke(stypy.reporting.localization.Localization(__file__, 776, 8), flatten_574125, *[], **kwargs_574126)
    
    # Assigning a type to the variable 'y' (line 776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 776, 4), 'y', flatten_call_result_574127)
    
    # Type idiom detected: calculating its left and rigth part (line 777)
    # Getting the type of 'x' (line 777)
    x_574128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 7), 'x')
    # Getting the type of 'None' (line 777)
    None_574129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 12), 'None')
    
    (may_be_574130, more_types_in_union_574131) = may_be_none(x_574128, None_574129)

    if may_be_574130:

        if more_types_in_union_574131:
            # Runtime conditional SSA (line 777)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 778):
        
        # Assigning a Call to a Name (line 778):
        
        # Call to arange(...): (line 778)
        # Processing the call arguments (line 778)
        
        # Call to len(...): (line 778)
        # Processing the call arguments (line 778)
        # Getting the type of 'y' (line 778)
        y_574135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 26), 'y', False)
        # Processing the call keyword arguments (line 778)
        kwargs_574136 = {}
        # Getting the type of 'len' (line 778)
        len_574134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 22), 'len', False)
        # Calling len(args, kwargs) (line 778)
        len_call_result_574137 = invoke(stypy.reporting.localization.Localization(__file__, 778, 22), len_574134, *[y_574135], **kwargs_574136)
        
        # Processing the call keyword arguments (line 778)
        # Getting the type of 'float' (line 778)
        float_574138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 36), 'float', False)
        keyword_574139 = float_574138
        kwargs_574140 = {'dtype': keyword_574139}
        # Getting the type of 'ma' (line 778)
        ma_574132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 12), 'ma', False)
        # Obtaining the member 'arange' of a type (line 778)
        arange_574133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 12), ma_574132, 'arange')
        # Calling arange(args, kwargs) (line 778)
        arange_call_result_574141 = invoke(stypy.reporting.localization.Localization(__file__, 778, 12), arange_574133, *[len_call_result_574137], **kwargs_574140)
        
        # Assigning a type to the variable 'x' (line 778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 778, 8), 'x', arange_call_result_574141)

        if more_types_in_union_574131:
            # Runtime conditional SSA for else branch (line 777)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_574130) or more_types_in_union_574131):
        
        # Assigning a Call to a Name (line 780):
        
        # Assigning a Call to a Name (line 780):
        
        # Call to flatten(...): (line 780)
        # Processing the call keyword arguments (line 780)
        kwargs_574148 = {}
        
        # Call to asarray(...): (line 780)
        # Processing the call arguments (line 780)
        # Getting the type of 'x' (line 780)
        x_574144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 23), 'x', False)
        # Processing the call keyword arguments (line 780)
        kwargs_574145 = {}
        # Getting the type of 'ma' (line 780)
        ma_574142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 12), 'ma', False)
        # Obtaining the member 'asarray' of a type (line 780)
        asarray_574143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 12), ma_574142, 'asarray')
        # Calling asarray(args, kwargs) (line 780)
        asarray_call_result_574146 = invoke(stypy.reporting.localization.Localization(__file__, 780, 12), asarray_574143, *[x_574144], **kwargs_574145)
        
        # Obtaining the member 'flatten' of a type (line 780)
        flatten_574147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 12), asarray_call_result_574146, 'flatten')
        # Calling flatten(args, kwargs) (line 780)
        flatten_call_result_574149 = invoke(stypy.reporting.localization.Localization(__file__, 780, 12), flatten_574147, *[], **kwargs_574148)
        
        # Assigning a type to the variable 'x' (line 780)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 780, 8), 'x', flatten_call_result_574149)
        
        
        
        # Call to len(...): (line 781)
        # Processing the call arguments (line 781)
        # Getting the type of 'x' (line 781)
        x_574151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 15), 'x', False)
        # Processing the call keyword arguments (line 781)
        kwargs_574152 = {}
        # Getting the type of 'len' (line 781)
        len_574150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 11), 'len', False)
        # Calling len(args, kwargs) (line 781)
        len_call_result_574153 = invoke(stypy.reporting.localization.Localization(__file__, 781, 11), len_574150, *[x_574151], **kwargs_574152)
        
        
        # Call to len(...): (line 781)
        # Processing the call arguments (line 781)
        # Getting the type of 'y' (line 781)
        y_574155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 25), 'y', False)
        # Processing the call keyword arguments (line 781)
        kwargs_574156 = {}
        # Getting the type of 'len' (line 781)
        len_574154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 21), 'len', False)
        # Calling len(args, kwargs) (line 781)
        len_call_result_574157 = invoke(stypy.reporting.localization.Localization(__file__, 781, 21), len_574154, *[y_574155], **kwargs_574156)
        
        # Applying the binary operator '!=' (line 781)
        result_ne_574158 = python_operator(stypy.reporting.localization.Localization(__file__, 781, 11), '!=', len_call_result_574153, len_call_result_574157)
        
        # Testing the type of an if condition (line 781)
        if_condition_574159 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 781, 8), result_ne_574158)
        # Assigning a type to the variable 'if_condition_574159' (line 781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 8), 'if_condition_574159', if_condition_574159)
        # SSA begins for if statement (line 781)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 782)
        # Processing the call arguments (line 782)
        str_574161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 782, 29), 'str', 'Incompatible lengths ! (%s<>%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 782)
        tuple_574162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 782, 66), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 782)
        # Adding element type (line 782)
        
        # Call to len(...): (line 782)
        # Processing the call arguments (line 782)
        # Getting the type of 'y' (line 782)
        y_574164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 70), 'y', False)
        # Processing the call keyword arguments (line 782)
        kwargs_574165 = {}
        # Getting the type of 'len' (line 782)
        len_574163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 66), 'len', False)
        # Calling len(args, kwargs) (line 782)
        len_call_result_574166 = invoke(stypy.reporting.localization.Localization(__file__, 782, 66), len_574163, *[y_574164], **kwargs_574165)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 782, 66), tuple_574162, len_call_result_574166)
        # Adding element type (line 782)
        
        # Call to len(...): (line 782)
        # Processing the call arguments (line 782)
        # Getting the type of 'x' (line 782)
        x_574168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 77), 'x', False)
        # Processing the call keyword arguments (line 782)
        kwargs_574169 = {}
        # Getting the type of 'len' (line 782)
        len_574167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 73), 'len', False)
        # Calling len(args, kwargs) (line 782)
        len_call_result_574170 = invoke(stypy.reporting.localization.Localization(__file__, 782, 73), len_574167, *[x_574168], **kwargs_574169)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 782, 66), tuple_574162, len_call_result_574170)
        
        # Applying the binary operator '%' (line 782)
        result_mod_574171 = python_operator(stypy.reporting.localization.Localization(__file__, 782, 29), '%', str_574161, tuple_574162)
        
        # Processing the call keyword arguments (line 782)
        kwargs_574172 = {}
        # Getting the type of 'ValueError' (line 782)
        ValueError_574160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 782)
        ValueError_call_result_574173 = invoke(stypy.reporting.localization.Localization(__file__, 782, 18), ValueError_574160, *[result_mod_574171], **kwargs_574172)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 782, 12), ValueError_call_result_574173, 'raise parameter', BaseException)
        # SSA join for if statement (line 781)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_574130 and more_types_in_union_574131):
            # SSA join for if statement (line 777)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 784):
    
    # Assigning a Call to a Name (line 784):
    
    # Call to mask_or(...): (line 784)
    # Processing the call arguments (line 784)
    
    # Call to getmask(...): (line 784)
    # Processing the call arguments (line 784)
    # Getting the type of 'x' (line 784)
    x_574178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 30), 'x', False)
    # Processing the call keyword arguments (line 784)
    kwargs_574179 = {}
    # Getting the type of 'ma' (line 784)
    ma_574176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 19), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 784)
    getmask_574177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 19), ma_574176, 'getmask')
    # Calling getmask(args, kwargs) (line 784)
    getmask_call_result_574180 = invoke(stypy.reporting.localization.Localization(__file__, 784, 19), getmask_574177, *[x_574178], **kwargs_574179)
    
    
    # Call to getmask(...): (line 784)
    # Processing the call arguments (line 784)
    # Getting the type of 'y' (line 784)
    y_574183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 45), 'y', False)
    # Processing the call keyword arguments (line 784)
    kwargs_574184 = {}
    # Getting the type of 'ma' (line 784)
    ma_574181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 34), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 784)
    getmask_574182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 34), ma_574181, 'getmask')
    # Calling getmask(args, kwargs) (line 784)
    getmask_call_result_574185 = invoke(stypy.reporting.localization.Localization(__file__, 784, 34), getmask_574182, *[y_574183], **kwargs_574184)
    
    # Processing the call keyword arguments (line 784)
    kwargs_574186 = {}
    # Getting the type of 'ma' (line 784)
    ma_574174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 8), 'ma', False)
    # Obtaining the member 'mask_or' of a type (line 784)
    mask_or_574175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 8), ma_574174, 'mask_or')
    # Calling mask_or(args, kwargs) (line 784)
    mask_or_call_result_574187 = invoke(stypy.reporting.localization.Localization(__file__, 784, 8), mask_or_574175, *[getmask_call_result_574180, getmask_call_result_574185], **kwargs_574186)
    
    # Assigning a type to the variable 'm' (line 784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 4), 'm', mask_or_call_result_574187)
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Name to a Attribute (line 785):
    # Getting the type of 'm' (line 785)
    m_574188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 24), 'm')
    # Getting the type of 'x' (line 785)
    x_574189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 14), 'x')
    # Setting the type of the member '_mask' of a type (line 785)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 14), x_574189, '_mask', m_574188)
    
    # Assigning a Attribute to a Attribute (line 785):
    # Getting the type of 'x' (line 785)
    x_574190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 14), 'x')
    # Obtaining the member '_mask' of a type (line 785)
    _mask_574191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 14), x_574190, '_mask')
    # Getting the type of 'y' (line 785)
    y_574192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 4), 'y')
    # Setting the type of the member '_mask' of a type (line 785)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 4), y_574192, '_mask', _mask_574191)
    
    # Assigning a Call to a Name (line 787):
    
    # Assigning a Call to a Name (line 787):
    
    # Call to compressed(...): (line 787)
    # Processing the call keyword arguments (line 787)
    kwargs_574195 = {}
    # Getting the type of 'y' (line 787)
    y_574193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'y', False)
    # Obtaining the member 'compressed' of a type (line 787)
    compressed_574194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 8), y_574193, 'compressed')
    # Calling compressed(args, kwargs) (line 787)
    compressed_call_result_574196 = invoke(stypy.reporting.localization.Localization(__file__, 787, 8), compressed_574194, *[], **kwargs_574195)
    
    # Assigning a type to the variable 'y' (line 787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 4), 'y', compressed_call_result_574196)
    
    # Assigning a Call to a Name (line 788):
    
    # Assigning a Call to a Name (line 788):
    
    # Call to astype(...): (line 788)
    # Processing the call arguments (line 788)
    # Getting the type of 'float' (line 788)
    float_574202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 30), 'float', False)
    # Processing the call keyword arguments (line 788)
    kwargs_574203 = {}
    
    # Call to compressed(...): (line 788)
    # Processing the call keyword arguments (line 788)
    kwargs_574199 = {}
    # Getting the type of 'x' (line 788)
    x_574197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'x', False)
    # Obtaining the member 'compressed' of a type (line 788)
    compressed_574198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 8), x_574197, 'compressed')
    # Calling compressed(args, kwargs) (line 788)
    compressed_call_result_574200 = invoke(stypy.reporting.localization.Localization(__file__, 788, 8), compressed_574198, *[], **kwargs_574199)
    
    # Obtaining the member 'astype' of a type (line 788)
    astype_574201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 8), compressed_call_result_574200, 'astype')
    # Calling astype(args, kwargs) (line 788)
    astype_call_result_574204 = invoke(stypy.reporting.localization.Localization(__file__, 788, 8), astype_574201, *[float_574202], **kwargs_574203)
    
    # Assigning a type to the variable 'x' (line 788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 4), 'x', astype_call_result_574204)
    
    # Call to stats_theilslopes(...): (line 790)
    # Processing the call arguments (line 790)
    # Getting the type of 'y' (line 790)
    y_574206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 29), 'y', False)
    # Getting the type of 'x' (line 790)
    x_574207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 32), 'x', False)
    # Processing the call keyword arguments (line 790)
    # Getting the type of 'alpha' (line 790)
    alpha_574208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 41), 'alpha', False)
    keyword_574209 = alpha_574208
    kwargs_574210 = {'alpha': keyword_574209}
    # Getting the type of 'stats_theilslopes' (line 790)
    stats_theilslopes_574205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 11), 'stats_theilslopes', False)
    # Calling stats_theilslopes(args, kwargs) (line 790)
    stats_theilslopes_call_result_574211 = invoke(stypy.reporting.localization.Localization(__file__, 790, 11), stats_theilslopes_574205, *[y_574206, x_574207], **kwargs_574210)
    
    # Assigning a type to the variable 'stypy_return_type' (line 790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 4), 'stypy_return_type', stats_theilslopes_call_result_574211)
    
    # ################# End of 'theilslopes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'theilslopes' in the type store
    # Getting the type of 'stypy_return_type' (line 742)
    stypy_return_type_574212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_574212)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'theilslopes'
    return stypy_return_type_574212

# Assigning a type to the variable 'theilslopes' (line 742)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 0), 'theilslopes', theilslopes)

@norecursion
def sen_seasonal_slopes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'sen_seasonal_slopes'
    module_type_store = module_type_store.open_function_context('sen_seasonal_slopes', 793, 0, False)
    
    # Passed parameters checking function
    sen_seasonal_slopes.stypy_localization = localization
    sen_seasonal_slopes.stypy_type_of_self = None
    sen_seasonal_slopes.stypy_type_store = module_type_store
    sen_seasonal_slopes.stypy_function_name = 'sen_seasonal_slopes'
    sen_seasonal_slopes.stypy_param_names_list = ['x']
    sen_seasonal_slopes.stypy_varargs_param_name = None
    sen_seasonal_slopes.stypy_kwargs_param_name = None
    sen_seasonal_slopes.stypy_call_defaults = defaults
    sen_seasonal_slopes.stypy_call_varargs = varargs
    sen_seasonal_slopes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sen_seasonal_slopes', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sen_seasonal_slopes', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sen_seasonal_slopes(...)' code ##################

    
    # Assigning a Call to a Name (line 794):
    
    # Assigning a Call to a Name (line 794):
    
    # Call to array(...): (line 794)
    # Processing the call arguments (line 794)
    # Getting the type of 'x' (line 794)
    x_574215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 17), 'x', False)
    # Processing the call keyword arguments (line 794)
    # Getting the type of 'True' (line 794)
    True_574216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 26), 'True', False)
    keyword_574217 = True_574216
    # Getting the type of 'False' (line 794)
    False_574218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 37), 'False', False)
    keyword_574219 = False_574218
    int_574220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 50), 'int')
    keyword_574221 = int_574220
    kwargs_574222 = {'subok': keyword_574217, 'copy': keyword_574219, 'ndmin': keyword_574221}
    # Getting the type of 'ma' (line 794)
    ma_574213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'ma', False)
    # Obtaining the member 'array' of a type (line 794)
    array_574214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 8), ma_574213, 'array')
    # Calling array(args, kwargs) (line 794)
    array_call_result_574223 = invoke(stypy.reporting.localization.Localization(__file__, 794, 8), array_574214, *[x_574215], **kwargs_574222)
    
    # Assigning a type to the variable 'x' (line 794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 4), 'x', array_call_result_574223)
    
    # Assigning a Attribute to a Tuple (line 795):
    
    # Assigning a Subscript to a Name (line 795):
    
    # Obtaining the type of the subscript
    int_574224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 4), 'int')
    # Getting the type of 'x' (line 795)
    x_574225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 12), 'x')
    # Obtaining the member 'shape' of a type (line 795)
    shape_574226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 12), x_574225, 'shape')
    # Obtaining the member '__getitem__' of a type (line 795)
    getitem___574227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 4), shape_574226, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 795)
    subscript_call_result_574228 = invoke(stypy.reporting.localization.Localization(__file__, 795, 4), getitem___574227, int_574224)
    
    # Assigning a type to the variable 'tuple_var_assignment_571469' (line 795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 4), 'tuple_var_assignment_571469', subscript_call_result_574228)
    
    # Assigning a Subscript to a Name (line 795):
    
    # Obtaining the type of the subscript
    int_574229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 4), 'int')
    # Getting the type of 'x' (line 795)
    x_574230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 12), 'x')
    # Obtaining the member 'shape' of a type (line 795)
    shape_574231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 12), x_574230, 'shape')
    # Obtaining the member '__getitem__' of a type (line 795)
    getitem___574232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 4), shape_574231, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 795)
    subscript_call_result_574233 = invoke(stypy.reporting.localization.Localization(__file__, 795, 4), getitem___574232, int_574229)
    
    # Assigning a type to the variable 'tuple_var_assignment_571470' (line 795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 4), 'tuple_var_assignment_571470', subscript_call_result_574233)
    
    # Assigning a Name to a Name (line 795):
    # Getting the type of 'tuple_var_assignment_571469' (line 795)
    tuple_var_assignment_571469_574234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 4), 'tuple_var_assignment_571469')
    # Assigning a type to the variable 'n' (line 795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 5), 'n', tuple_var_assignment_571469_574234)
    
    # Assigning a Name to a Name (line 795):
    # Getting the type of 'tuple_var_assignment_571470' (line 795)
    tuple_var_assignment_571470_574235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 4), 'tuple_var_assignment_571470')
    # Assigning a type to the variable '_' (line 795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 7), '_', tuple_var_assignment_571470_574235)
    
    # Assigning a Call to a Name (line 797):
    
    # Assigning a Call to a Name (line 797):
    
    # Call to vstack(...): (line 797)
    # Processing the call arguments (line 797)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 798)
    # Processing the call arguments (line 798)
    # Getting the type of 'n' (line 798)
    n_574264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 43), 'n', False)
    # Processing the call keyword arguments (line 798)
    kwargs_574265 = {}
    # Getting the type of 'range' (line 798)
    range_574263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 37), 'range', False)
    # Calling range(args, kwargs) (line 798)
    range_call_result_574266 = invoke(stypy.reporting.localization.Localization(__file__, 798, 37), range_574263, *[n_574264], **kwargs_574265)
    
    comprehension_574267 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 797, 28), range_call_result_574266)
    # Assigning a type to the variable 'i' (line 797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 28), 'i', comprehension_574267)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 797)
    i_574238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 31), 'i', False)
    int_574239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 33), 'int')
    # Applying the binary operator '+' (line 797)
    result_add_574240 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 31), '+', i_574238, int_574239)
    
    slice_574241 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 797, 29), result_add_574240, None, None)
    # Getting the type of 'x' (line 797)
    x_574242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 29), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 797)
    getitem___574243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 29), x_574242, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 797)
    subscript_call_result_574244 = invoke(stypy.reporting.localization.Localization(__file__, 797, 29), getitem___574243, slice_574241)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 797)
    i_574245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 39), 'i', False)
    # Getting the type of 'x' (line 797)
    x_574246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 37), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 797)
    getitem___574247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 37), x_574246, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 797)
    subscript_call_result_574248 = invoke(stypy.reporting.localization.Localization(__file__, 797, 37), getitem___574247, i_574245)
    
    # Applying the binary operator '-' (line 797)
    result_sub_574249 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 29), '-', subscript_call_result_574244, subscript_call_result_574248)
    
    
    # Obtaining the type of the subscript
    slice_574250 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 797, 43), None, None, None)
    # Getting the type of 'None' (line 797)
    None_574251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 62), 'None', False)
    
    # Call to arange(...): (line 797)
    # Processing the call arguments (line 797)
    int_574254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 53), 'int')
    # Getting the type of 'n' (line 797)
    n_574255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 55), 'n', False)
    # Getting the type of 'i' (line 797)
    i_574256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 57), 'i', False)
    # Applying the binary operator '-' (line 797)
    result_sub_574257 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 55), '-', n_574255, i_574256)
    
    # Processing the call keyword arguments (line 797)
    kwargs_574258 = {}
    # Getting the type of 'np' (line 797)
    np_574252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 43), 'np', False)
    # Obtaining the member 'arange' of a type (line 797)
    arange_574253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 43), np_574252, 'arange')
    # Calling arange(args, kwargs) (line 797)
    arange_call_result_574259 = invoke(stypy.reporting.localization.Localization(__file__, 797, 43), arange_574253, *[int_574254, result_sub_574257], **kwargs_574258)
    
    # Obtaining the member '__getitem__' of a type (line 797)
    getitem___574260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 43), arange_call_result_574259, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 797)
    subscript_call_result_574261 = invoke(stypy.reporting.localization.Localization(__file__, 797, 43), getitem___574260, (slice_574250, None_574251))
    
    # Applying the binary operator 'div' (line 797)
    result_div_574262 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 28), 'div', result_sub_574249, subscript_call_result_574261)
    
    list_574268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 28), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 797, 28), list_574268, result_div_574262)
    # Processing the call keyword arguments (line 797)
    kwargs_574269 = {}
    # Getting the type of 'ma' (line 797)
    ma_574236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 17), 'ma', False)
    # Obtaining the member 'vstack' of a type (line 797)
    vstack_574237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 17), ma_574236, 'vstack')
    # Calling vstack(args, kwargs) (line 797)
    vstack_call_result_574270 = invoke(stypy.reporting.localization.Localization(__file__, 797, 17), vstack_574237, *[list_574268], **kwargs_574269)
    
    # Assigning a type to the variable 'szn_slopes' (line 797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 4), 'szn_slopes', vstack_call_result_574270)
    
    # Assigning a Call to a Name (line 799):
    
    # Assigning a Call to a Name (line 799):
    
    # Call to median(...): (line 799)
    # Processing the call arguments (line 799)
    # Getting the type of 'szn_slopes' (line 799)
    szn_slopes_574273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 30), 'szn_slopes', False)
    # Processing the call keyword arguments (line 799)
    int_574274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 47), 'int')
    keyword_574275 = int_574274
    kwargs_574276 = {'axis': keyword_574275}
    # Getting the type of 'ma' (line 799)
    ma_574271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 20), 'ma', False)
    # Obtaining the member 'median' of a type (line 799)
    median_574272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 20), ma_574271, 'median')
    # Calling median(args, kwargs) (line 799)
    median_call_result_574277 = invoke(stypy.reporting.localization.Localization(__file__, 799, 20), median_574272, *[szn_slopes_574273], **kwargs_574276)
    
    # Assigning a type to the variable 'szn_medslopes' (line 799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 4), 'szn_medslopes', median_call_result_574277)
    
    # Assigning a Call to a Name (line 800):
    
    # Assigning a Call to a Name (line 800):
    
    # Call to median(...): (line 800)
    # Processing the call arguments (line 800)
    # Getting the type of 'szn_slopes' (line 800)
    szn_slopes_574280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 25), 'szn_slopes', False)
    # Processing the call keyword arguments (line 800)
    # Getting the type of 'None' (line 800)
    None_574281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 42), 'None', False)
    keyword_574282 = None_574281
    kwargs_574283 = {'axis': keyword_574282}
    # Getting the type of 'ma' (line 800)
    ma_574278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 15), 'ma', False)
    # Obtaining the member 'median' of a type (line 800)
    median_574279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 15), ma_574278, 'median')
    # Calling median(args, kwargs) (line 800)
    median_call_result_574284 = invoke(stypy.reporting.localization.Localization(__file__, 800, 15), median_574279, *[szn_slopes_574280], **kwargs_574283)
    
    # Assigning a type to the variable 'medslope' (line 800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 4), 'medslope', median_call_result_574284)
    
    # Obtaining an instance of the builtin type 'tuple' (line 801)
    tuple_574285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 801, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 801)
    # Adding element type (line 801)
    # Getting the type of 'szn_medslopes' (line 801)
    szn_medslopes_574286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 11), 'szn_medslopes')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 801, 11), tuple_574285, szn_medslopes_574286)
    # Adding element type (line 801)
    # Getting the type of 'medslope' (line 801)
    medslope_574287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 26), 'medslope')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 801, 11), tuple_574285, medslope_574287)
    
    # Assigning a type to the variable 'stypy_return_type' (line 801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 4), 'stypy_return_type', tuple_574285)
    
    # ################# End of 'sen_seasonal_slopes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sen_seasonal_slopes' in the type store
    # Getting the type of 'stypy_return_type' (line 793)
    stypy_return_type_574288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_574288)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sen_seasonal_slopes'
    return stypy_return_type_574288

# Assigning a type to the variable 'sen_seasonal_slopes' (line 793)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 0), 'sen_seasonal_slopes', sen_seasonal_slopes)

# Assigning a Call to a Name (line 804):

# Assigning a Call to a Name (line 804):

# Call to namedtuple(...): (line 804)
# Processing the call arguments (line 804)
str_574290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 31), 'str', 'Ttest_1sampResult')

# Obtaining an instance of the builtin type 'tuple' (line 804)
tuple_574291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 53), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 804)
# Adding element type (line 804)
str_574292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 53), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 804, 53), tuple_574291, str_574292)
# Adding element type (line 804)
str_574293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 66), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 804, 53), tuple_574291, str_574293)

# Processing the call keyword arguments (line 804)
kwargs_574294 = {}
# Getting the type of 'namedtuple' (line 804)
namedtuple_574289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 20), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 804)
namedtuple_call_result_574295 = invoke(stypy.reporting.localization.Localization(__file__, 804, 20), namedtuple_574289, *[str_574290, tuple_574291], **kwargs_574294)

# Assigning a type to the variable 'Ttest_1sampResult' (line 804)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 0), 'Ttest_1sampResult', namedtuple_call_result_574295)

@norecursion
def ttest_1samp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_574296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 33), 'int')
    defaults = [int_574296]
    # Create a new context for function 'ttest_1samp'
    module_type_store = module_type_store.open_function_context('ttest_1samp', 807, 0, False)
    
    # Passed parameters checking function
    ttest_1samp.stypy_localization = localization
    ttest_1samp.stypy_type_of_self = None
    ttest_1samp.stypy_type_store = module_type_store
    ttest_1samp.stypy_function_name = 'ttest_1samp'
    ttest_1samp.stypy_param_names_list = ['a', 'popmean', 'axis']
    ttest_1samp.stypy_varargs_param_name = None
    ttest_1samp.stypy_kwargs_param_name = None
    ttest_1samp.stypy_call_defaults = defaults
    ttest_1samp.stypy_call_varargs = varargs
    ttest_1samp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ttest_1samp', ['a', 'popmean', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ttest_1samp', localization, ['a', 'popmean', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ttest_1samp(...)' code ##################

    str_574297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 833, (-1)), 'str', '\n    Calculates the T-test for the mean of ONE group of scores.\n\n    Parameters\n    ----------\n    a : array_like\n        sample observation\n    popmean : float or array_like\n        expected value in null hypothesis, if array_like than it must have the\n        same shape as `a` excluding the axis dimension\n    axis : int or None, optional\n        Axis along which to compute test. If None, compute over the whole\n        array `a`.\n\n    Returns\n    -------\n    statistic : float or array\n        t-statistic\n    pvalue : float or array\n        two-tailed p-value\n\n    Notes\n    -----\n    For more details on `ttest_1samp`, see `stats.ttest_1samp`.\n\n    ')
    
    # Assigning a Call to a Tuple (line 834):
    
    # Assigning a Subscript to a Name (line 834):
    
    # Obtaining the type of the subscript
    int_574298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 4), 'int')
    
    # Call to _chk_asarray(...): (line 834)
    # Processing the call arguments (line 834)
    # Getting the type of 'a' (line 834)
    a_574300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 27), 'a', False)
    # Getting the type of 'axis' (line 834)
    axis_574301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 30), 'axis', False)
    # Processing the call keyword arguments (line 834)
    kwargs_574302 = {}
    # Getting the type of '_chk_asarray' (line 834)
    _chk_asarray_574299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 834)
    _chk_asarray_call_result_574303 = invoke(stypy.reporting.localization.Localization(__file__, 834, 14), _chk_asarray_574299, *[a_574300, axis_574301], **kwargs_574302)
    
    # Obtaining the member '__getitem__' of a type (line 834)
    getitem___574304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 4), _chk_asarray_call_result_574303, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 834)
    subscript_call_result_574305 = invoke(stypy.reporting.localization.Localization(__file__, 834, 4), getitem___574304, int_574298)
    
    # Assigning a type to the variable 'tuple_var_assignment_571471' (line 834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 4), 'tuple_var_assignment_571471', subscript_call_result_574305)
    
    # Assigning a Subscript to a Name (line 834):
    
    # Obtaining the type of the subscript
    int_574306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 4), 'int')
    
    # Call to _chk_asarray(...): (line 834)
    # Processing the call arguments (line 834)
    # Getting the type of 'a' (line 834)
    a_574308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 27), 'a', False)
    # Getting the type of 'axis' (line 834)
    axis_574309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 30), 'axis', False)
    # Processing the call keyword arguments (line 834)
    kwargs_574310 = {}
    # Getting the type of '_chk_asarray' (line 834)
    _chk_asarray_574307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 834)
    _chk_asarray_call_result_574311 = invoke(stypy.reporting.localization.Localization(__file__, 834, 14), _chk_asarray_574307, *[a_574308, axis_574309], **kwargs_574310)
    
    # Obtaining the member '__getitem__' of a type (line 834)
    getitem___574312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 4), _chk_asarray_call_result_574311, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 834)
    subscript_call_result_574313 = invoke(stypy.reporting.localization.Localization(__file__, 834, 4), getitem___574312, int_574306)
    
    # Assigning a type to the variable 'tuple_var_assignment_571472' (line 834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 4), 'tuple_var_assignment_571472', subscript_call_result_574313)
    
    # Assigning a Name to a Name (line 834):
    # Getting the type of 'tuple_var_assignment_571471' (line 834)
    tuple_var_assignment_571471_574314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 4), 'tuple_var_assignment_571471')
    # Assigning a type to the variable 'a' (line 834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 4), 'a', tuple_var_assignment_571471_574314)
    
    # Assigning a Name to a Name (line 834):
    # Getting the type of 'tuple_var_assignment_571472' (line 834)
    tuple_var_assignment_571472_574315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 4), 'tuple_var_assignment_571472')
    # Assigning a type to the variable 'axis' (line 834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 7), 'axis', tuple_var_assignment_571472_574315)
    
    
    # Getting the type of 'a' (line 835)
    a_574316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 7), 'a')
    # Obtaining the member 'size' of a type (line 835)
    size_574317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 7), a_574316, 'size')
    int_574318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 17), 'int')
    # Applying the binary operator '==' (line 835)
    result_eq_574319 = python_operator(stypy.reporting.localization.Localization(__file__, 835, 7), '==', size_574317, int_574318)
    
    # Testing the type of an if condition (line 835)
    if_condition_574320 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 835, 4), result_eq_574319)
    # Assigning a type to the variable 'if_condition_574320' (line 835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 4), 'if_condition_574320', if_condition_574320)
    # SSA begins for if statement (line 835)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 836)
    tuple_574321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 836)
    # Adding element type (line 836)
    # Getting the type of 'np' (line 836)
    np_574322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 16), 'np')
    # Obtaining the member 'nan' of a type (line 836)
    nan_574323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 16), np_574322, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 836, 16), tuple_574321, nan_574323)
    # Adding element type (line 836)
    # Getting the type of 'np' (line 836)
    np_574324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 24), 'np')
    # Obtaining the member 'nan' of a type (line 836)
    nan_574325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 24), np_574324, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 836, 16), tuple_574321, nan_574325)
    
    # Assigning a type to the variable 'stypy_return_type' (line 836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 8), 'stypy_return_type', tuple_574321)
    # SSA join for if statement (line 835)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 838):
    
    # Assigning a Call to a Name (line 838):
    
    # Call to mean(...): (line 838)
    # Processing the call keyword arguments (line 838)
    # Getting the type of 'axis' (line 838)
    axis_574328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 20), 'axis', False)
    keyword_574329 = axis_574328
    kwargs_574330 = {'axis': keyword_574329}
    # Getting the type of 'a' (line 838)
    a_574326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 8), 'a', False)
    # Obtaining the member 'mean' of a type (line 838)
    mean_574327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 8), a_574326, 'mean')
    # Calling mean(args, kwargs) (line 838)
    mean_call_result_574331 = invoke(stypy.reporting.localization.Localization(__file__, 838, 8), mean_574327, *[], **kwargs_574330)
    
    # Assigning a type to the variable 'x' (line 838)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 838, 4), 'x', mean_call_result_574331)
    
    # Assigning a Call to a Name (line 839):
    
    # Assigning a Call to a Name (line 839):
    
    # Call to var(...): (line 839)
    # Processing the call keyword arguments (line 839)
    # Getting the type of 'axis' (line 839)
    axis_574334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 19), 'axis', False)
    keyword_574335 = axis_574334
    int_574336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 30), 'int')
    keyword_574337 = int_574336
    kwargs_574338 = {'ddof': keyword_574337, 'axis': keyword_574335}
    # Getting the type of 'a' (line 839)
    a_574332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 8), 'a', False)
    # Obtaining the member 'var' of a type (line 839)
    var_574333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 8), a_574332, 'var')
    # Calling var(args, kwargs) (line 839)
    var_call_result_574339 = invoke(stypy.reporting.localization.Localization(__file__, 839, 8), var_574333, *[], **kwargs_574338)
    
    # Assigning a type to the variable 'v' (line 839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 4), 'v', var_call_result_574339)
    
    # Assigning a Call to a Name (line 840):
    
    # Assigning a Call to a Name (line 840):
    
    # Call to count(...): (line 840)
    # Processing the call keyword arguments (line 840)
    # Getting the type of 'axis' (line 840)
    axis_574342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 21), 'axis', False)
    keyword_574343 = axis_574342
    kwargs_574344 = {'axis': keyword_574343}
    # Getting the type of 'a' (line 840)
    a_574340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 8), 'a', False)
    # Obtaining the member 'count' of a type (line 840)
    count_574341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 8), a_574340, 'count')
    # Calling count(args, kwargs) (line 840)
    count_call_result_574345 = invoke(stypy.reporting.localization.Localization(__file__, 840, 8), count_574341, *[], **kwargs_574344)
    
    # Assigning a type to the variable 'n' (line 840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 4), 'n', count_call_result_574345)
    
    # Assigning a Call to a Name (line 842):
    
    # Assigning a Call to a Name (line 842):
    
    # Call to asanyarray(...): (line 842)
    # Processing the call arguments (line 842)
    # Getting the type of 'n' (line 842)
    n_574348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 23), 'n', False)
    float_574349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 27), 'float')
    # Applying the binary operator '-' (line 842)
    result_sub_574350 = python_operator(stypy.reporting.localization.Localization(__file__, 842, 23), '-', n_574348, float_574349)
    
    # Processing the call keyword arguments (line 842)
    kwargs_574351 = {}
    # Getting the type of 'ma' (line 842)
    ma_574346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 9), 'ma', False)
    # Obtaining the member 'asanyarray' of a type (line 842)
    asanyarray_574347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 9), ma_574346, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 842)
    asanyarray_call_result_574352 = invoke(stypy.reporting.localization.Localization(__file__, 842, 9), asanyarray_574347, *[result_sub_574350], **kwargs_574351)
    
    # Assigning a type to the variable 'df' (line 842)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 4), 'df', asanyarray_call_result_574352)
    
    # Assigning a BinOp to a Name (line 843):
    
    # Assigning a BinOp to a Name (line 843):
    # Getting the type of 'n' (line 843)
    n_574353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 13), 'n')
    float_574354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 17), 'float')
    # Applying the binary operator '-' (line 843)
    result_sub_574355 = python_operator(stypy.reporting.localization.Localization(__file__, 843, 13), '-', n_574353, float_574354)
    
    # Getting the type of 'v' (line 843)
    v_574356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 24), 'v')
    # Applying the binary operator '*' (line 843)
    result_mul_574357 = python_operator(stypy.reporting.localization.Localization(__file__, 843, 12), '*', result_sub_574355, v_574356)
    
    # Getting the type of 'df' (line 843)
    df_574358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 29), 'df')
    # Applying the binary operator 'div' (line 843)
    result_div_574359 = python_operator(stypy.reporting.localization.Localization(__file__, 843, 11), 'div', result_mul_574357, df_574358)
    
    # Assigning a type to the variable 'svar' (line 843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 4), 'svar', result_div_574359)
    
    # Call to errstate(...): (line 844)
    # Processing the call keyword arguments (line 844)
    str_574362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 28), 'str', 'ignore')
    keyword_574363 = str_574362
    str_574364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 46), 'str', 'ignore')
    keyword_574365 = str_574364
    kwargs_574366 = {'divide': keyword_574363, 'invalid': keyword_574365}
    # Getting the type of 'np' (line 844)
    np_574360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 9), 'np', False)
    # Obtaining the member 'errstate' of a type (line 844)
    errstate_574361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 9), np_574360, 'errstate')
    # Calling errstate(args, kwargs) (line 844)
    errstate_call_result_574367 = invoke(stypy.reporting.localization.Localization(__file__, 844, 9), errstate_574361, *[], **kwargs_574366)
    
    with_574368 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 844, 9), errstate_call_result_574367, 'with parameter', '__enter__', '__exit__')

    if with_574368:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 844)
        enter___574369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 9), errstate_call_result_574367, '__enter__')
        with_enter_574370 = invoke(stypy.reporting.localization.Localization(__file__, 844, 9), enter___574369)
        
        # Assigning a BinOp to a Name (line 845):
        
        # Assigning a BinOp to a Name (line 845):
        # Getting the type of 'x' (line 845)
        x_574371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 13), 'x')
        # Getting the type of 'popmean' (line 845)
        popmean_574372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 17), 'popmean')
        # Applying the binary operator '-' (line 845)
        result_sub_574373 = python_operator(stypy.reporting.localization.Localization(__file__, 845, 13), '-', x_574371, popmean_574372)
        
        
        # Call to sqrt(...): (line 845)
        # Processing the call arguments (line 845)
        # Getting the type of 'svar' (line 845)
        svar_574376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 36), 'svar', False)
        # Getting the type of 'n' (line 845)
        n_574377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 43), 'n', False)
        # Applying the binary operator 'div' (line 845)
        result_div_574378 = python_operator(stypy.reporting.localization.Localization(__file__, 845, 36), 'div', svar_574376, n_574377)
        
        # Processing the call keyword arguments (line 845)
        kwargs_574379 = {}
        # Getting the type of 'ma' (line 845)
        ma_574374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 28), 'ma', False)
        # Obtaining the member 'sqrt' of a type (line 845)
        sqrt_574375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 28), ma_574374, 'sqrt')
        # Calling sqrt(args, kwargs) (line 845)
        sqrt_call_result_574380 = invoke(stypy.reporting.localization.Localization(__file__, 845, 28), sqrt_574375, *[result_div_574378], **kwargs_574379)
        
        # Applying the binary operator 'div' (line 845)
        result_div_574381 = python_operator(stypy.reporting.localization.Localization(__file__, 845, 12), 'div', result_sub_574373, sqrt_call_result_574380)
        
        # Assigning a type to the variable 't' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 't', result_div_574381)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 844)
        exit___574382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 9), errstate_call_result_574367, '__exit__')
        with_exit_574383 = invoke(stypy.reporting.localization.Localization(__file__, 844, 9), exit___574382, None, None, None)

    
    # Assigning a Call to a Name (line 846):
    
    # Assigning a Call to a Name (line 846):
    
    # Call to betainc(...): (line 846)
    # Processing the call arguments (line 846)
    float_574386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 846, 27), 'float')
    # Getting the type of 'df' (line 846)
    df_574387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 31), 'df', False)
    # Applying the binary operator '*' (line 846)
    result_mul_574388 = python_operator(stypy.reporting.localization.Localization(__file__, 846, 27), '*', float_574386, df_574387)
    
    float_574389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 846, 35), 'float')
    # Getting the type of 'df' (line 846)
    df_574390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 40), 'df', False)
    # Getting the type of 'df' (line 846)
    df_574391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 44), 'df', False)
    # Getting the type of 't' (line 846)
    t_574392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 49), 't', False)
    # Getting the type of 't' (line 846)
    t_574393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 51), 't', False)
    # Applying the binary operator '*' (line 846)
    result_mul_574394 = python_operator(stypy.reporting.localization.Localization(__file__, 846, 49), '*', t_574392, t_574393)
    
    # Applying the binary operator '+' (line 846)
    result_add_574395 = python_operator(stypy.reporting.localization.Localization(__file__, 846, 44), '+', df_574391, result_mul_574394)
    
    # Applying the binary operator 'div' (line 846)
    result_div_574396 = python_operator(stypy.reporting.localization.Localization(__file__, 846, 40), 'div', df_574390, result_add_574395)
    
    # Processing the call keyword arguments (line 846)
    kwargs_574397 = {}
    # Getting the type of 'special' (line 846)
    special_574384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 11), 'special', False)
    # Obtaining the member 'betainc' of a type (line 846)
    betainc_574385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 846, 11), special_574384, 'betainc')
    # Calling betainc(args, kwargs) (line 846)
    betainc_call_result_574398 = invoke(stypy.reporting.localization.Localization(__file__, 846, 11), betainc_574385, *[result_mul_574388, float_574389, result_div_574396], **kwargs_574397)
    
    # Assigning a type to the variable 'prob' (line 846)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 4), 'prob', betainc_call_result_574398)
    
    # Call to Ttest_1sampResult(...): (line 848)
    # Processing the call arguments (line 848)
    # Getting the type of 't' (line 848)
    t_574400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 29), 't', False)
    # Getting the type of 'prob' (line 848)
    prob_574401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 32), 'prob', False)
    # Processing the call keyword arguments (line 848)
    kwargs_574402 = {}
    # Getting the type of 'Ttest_1sampResult' (line 848)
    Ttest_1sampResult_574399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 11), 'Ttest_1sampResult', False)
    # Calling Ttest_1sampResult(args, kwargs) (line 848)
    Ttest_1sampResult_call_result_574403 = invoke(stypy.reporting.localization.Localization(__file__, 848, 11), Ttest_1sampResult_574399, *[t_574400, prob_574401], **kwargs_574402)
    
    # Assigning a type to the variable 'stypy_return_type' (line 848)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 4), 'stypy_return_type', Ttest_1sampResult_call_result_574403)
    
    # ################# End of 'ttest_1samp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ttest_1samp' in the type store
    # Getting the type of 'stypy_return_type' (line 807)
    stypy_return_type_574404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_574404)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ttest_1samp'
    return stypy_return_type_574404

# Assigning a type to the variable 'ttest_1samp' (line 807)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 0), 'ttest_1samp', ttest_1samp)

# Assigning a Name to a Name (line 849):

# Assigning a Name to a Name (line 849):
# Getting the type of 'ttest_1samp' (line 849)
ttest_1samp_574405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 16), 'ttest_1samp')
# Assigning a type to the variable 'ttest_onesamp' (line 849)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 0), 'ttest_onesamp', ttest_1samp_574405)

# Assigning a Call to a Name (line 852):

# Assigning a Call to a Name (line 852):

# Call to namedtuple(...): (line 852)
# Processing the call arguments (line 852)
str_574407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 29), 'str', 'Ttest_indResult')

# Obtaining an instance of the builtin type 'tuple' (line 852)
tuple_574408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 49), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 852)
# Adding element type (line 852)
str_574409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 49), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 852, 49), tuple_574408, str_574409)
# Adding element type (line 852)
str_574410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 62), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 852, 49), tuple_574408, str_574410)

# Processing the call keyword arguments (line 852)
kwargs_574411 = {}
# Getting the type of 'namedtuple' (line 852)
namedtuple_574406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 18), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 852)
namedtuple_call_result_574412 = invoke(stypy.reporting.localization.Localization(__file__, 852, 18), namedtuple_574406, *[str_574407, tuple_574408], **kwargs_574411)

# Assigning a type to the variable 'Ttest_indResult' (line 852)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 0), 'Ttest_indResult', namedtuple_call_result_574412)

@norecursion
def ttest_ind(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_574413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 25), 'int')
    # Getting the type of 'True' (line 855)
    True_574414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 38), 'True')
    defaults = [int_574413, True_574414]
    # Create a new context for function 'ttest_ind'
    module_type_store = module_type_store.open_function_context('ttest_ind', 855, 0, False)
    
    # Passed parameters checking function
    ttest_ind.stypy_localization = localization
    ttest_ind.stypy_type_of_self = None
    ttest_ind.stypy_type_store = module_type_store
    ttest_ind.stypy_function_name = 'ttest_ind'
    ttest_ind.stypy_param_names_list = ['a', 'b', 'axis', 'equal_var']
    ttest_ind.stypy_varargs_param_name = None
    ttest_ind.stypy_kwargs_param_name = None
    ttest_ind.stypy_call_defaults = defaults
    ttest_ind.stypy_call_varargs = varargs
    ttest_ind.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ttest_ind', ['a', 'b', 'axis', 'equal_var'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ttest_ind', localization, ['a', 'b', 'axis', 'equal_var'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ttest_ind(...)' code ##################

    str_574415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, (-1)), 'str', "\n    Calculates the T-test for the means of TWO INDEPENDENT samples of scores.\n\n    Parameters\n    ----------\n    a, b : array_like\n        The arrays must have the same shape, except in the dimension\n        corresponding to `axis` (the first, by default).\n    axis : int or None, optional\n        Axis along which to compute test. If None, compute over the whole\n        arrays, `a`, and `b`.\n    equal_var : bool, optional\n        If True, perform a standard independent 2 sample test that assumes equal\n        population variances.\n        If False, perform Welch's t-test, which does not assume equal population\n        variance.\n        .. versionadded:: 0.17.0\n\n    Returns\n    -------\n    statistic : float or array\n        The calculated t-statistic.\n    pvalue : float or array\n        The two-tailed p-value.\n\n    Notes\n    -----\n    For more details on `ttest_ind`, see `stats.ttest_ind`.\n\n    ")
    
    # Assigning a Call to a Tuple (line 886):
    
    # Assigning a Subscript to a Name (line 886):
    
    # Obtaining the type of the subscript
    int_574416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 886)
    # Processing the call arguments (line 886)
    # Getting the type of 'a' (line 886)
    a_574418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 31), 'a', False)
    # Getting the type of 'b' (line 886)
    b_574419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 34), 'b', False)
    # Getting the type of 'axis' (line 886)
    axis_574420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 37), 'axis', False)
    # Processing the call keyword arguments (line 886)
    kwargs_574421 = {}
    # Getting the type of '_chk2_asarray' (line 886)
    _chk2_asarray_574417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 886)
    _chk2_asarray_call_result_574422 = invoke(stypy.reporting.localization.Localization(__file__, 886, 17), _chk2_asarray_574417, *[a_574418, b_574419, axis_574420], **kwargs_574421)
    
    # Obtaining the member '__getitem__' of a type (line 886)
    getitem___574423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 4), _chk2_asarray_call_result_574422, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 886)
    subscript_call_result_574424 = invoke(stypy.reporting.localization.Localization(__file__, 886, 4), getitem___574423, int_574416)
    
    # Assigning a type to the variable 'tuple_var_assignment_571473' (line 886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 4), 'tuple_var_assignment_571473', subscript_call_result_574424)
    
    # Assigning a Subscript to a Name (line 886):
    
    # Obtaining the type of the subscript
    int_574425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 886)
    # Processing the call arguments (line 886)
    # Getting the type of 'a' (line 886)
    a_574427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 31), 'a', False)
    # Getting the type of 'b' (line 886)
    b_574428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 34), 'b', False)
    # Getting the type of 'axis' (line 886)
    axis_574429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 37), 'axis', False)
    # Processing the call keyword arguments (line 886)
    kwargs_574430 = {}
    # Getting the type of '_chk2_asarray' (line 886)
    _chk2_asarray_574426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 886)
    _chk2_asarray_call_result_574431 = invoke(stypy.reporting.localization.Localization(__file__, 886, 17), _chk2_asarray_574426, *[a_574427, b_574428, axis_574429], **kwargs_574430)
    
    # Obtaining the member '__getitem__' of a type (line 886)
    getitem___574432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 4), _chk2_asarray_call_result_574431, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 886)
    subscript_call_result_574433 = invoke(stypy.reporting.localization.Localization(__file__, 886, 4), getitem___574432, int_574425)
    
    # Assigning a type to the variable 'tuple_var_assignment_571474' (line 886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 4), 'tuple_var_assignment_571474', subscript_call_result_574433)
    
    # Assigning a Subscript to a Name (line 886):
    
    # Obtaining the type of the subscript
    int_574434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 886)
    # Processing the call arguments (line 886)
    # Getting the type of 'a' (line 886)
    a_574436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 31), 'a', False)
    # Getting the type of 'b' (line 886)
    b_574437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 34), 'b', False)
    # Getting the type of 'axis' (line 886)
    axis_574438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 37), 'axis', False)
    # Processing the call keyword arguments (line 886)
    kwargs_574439 = {}
    # Getting the type of '_chk2_asarray' (line 886)
    _chk2_asarray_574435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 886)
    _chk2_asarray_call_result_574440 = invoke(stypy.reporting.localization.Localization(__file__, 886, 17), _chk2_asarray_574435, *[a_574436, b_574437, axis_574438], **kwargs_574439)
    
    # Obtaining the member '__getitem__' of a type (line 886)
    getitem___574441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 4), _chk2_asarray_call_result_574440, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 886)
    subscript_call_result_574442 = invoke(stypy.reporting.localization.Localization(__file__, 886, 4), getitem___574441, int_574434)
    
    # Assigning a type to the variable 'tuple_var_assignment_571475' (line 886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 4), 'tuple_var_assignment_571475', subscript_call_result_574442)
    
    # Assigning a Name to a Name (line 886):
    # Getting the type of 'tuple_var_assignment_571473' (line 886)
    tuple_var_assignment_571473_574443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 4), 'tuple_var_assignment_571473')
    # Assigning a type to the variable 'a' (line 886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 4), 'a', tuple_var_assignment_571473_574443)
    
    # Assigning a Name to a Name (line 886):
    # Getting the type of 'tuple_var_assignment_571474' (line 886)
    tuple_var_assignment_571474_574444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 4), 'tuple_var_assignment_571474')
    # Assigning a type to the variable 'b' (line 886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 7), 'b', tuple_var_assignment_571474_574444)
    
    # Assigning a Name to a Name (line 886):
    # Getting the type of 'tuple_var_assignment_571475' (line 886)
    tuple_var_assignment_571475_574445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 4), 'tuple_var_assignment_571475')
    # Assigning a type to the variable 'axis' (line 886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 10), 'axis', tuple_var_assignment_571475_574445)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'a' (line 888)
    a_574446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 7), 'a')
    # Obtaining the member 'size' of a type (line 888)
    size_574447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 7), a_574446, 'size')
    int_574448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, 17), 'int')
    # Applying the binary operator '==' (line 888)
    result_eq_574449 = python_operator(stypy.reporting.localization.Localization(__file__, 888, 7), '==', size_574447, int_574448)
    
    
    # Getting the type of 'b' (line 888)
    b_574450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 22), 'b')
    # Obtaining the member 'size' of a type (line 888)
    size_574451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 22), b_574450, 'size')
    int_574452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, 32), 'int')
    # Applying the binary operator '==' (line 888)
    result_eq_574453 = python_operator(stypy.reporting.localization.Localization(__file__, 888, 22), '==', size_574451, int_574452)
    
    # Applying the binary operator 'or' (line 888)
    result_or_keyword_574454 = python_operator(stypy.reporting.localization.Localization(__file__, 888, 7), 'or', result_eq_574449, result_eq_574453)
    
    # Testing the type of an if condition (line 888)
    if_condition_574455 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 888, 4), result_or_keyword_574454)
    # Assigning a type to the variable 'if_condition_574455' (line 888)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 888, 4), 'if_condition_574455', if_condition_574455)
    # SSA begins for if statement (line 888)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to Ttest_indResult(...): (line 889)
    # Processing the call arguments (line 889)
    # Getting the type of 'np' (line 889)
    np_574457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 31), 'np', False)
    # Obtaining the member 'nan' of a type (line 889)
    nan_574458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 31), np_574457, 'nan')
    # Getting the type of 'np' (line 889)
    np_574459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 39), 'np', False)
    # Obtaining the member 'nan' of a type (line 889)
    nan_574460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 39), np_574459, 'nan')
    # Processing the call keyword arguments (line 889)
    kwargs_574461 = {}
    # Getting the type of 'Ttest_indResult' (line 889)
    Ttest_indResult_574456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 15), 'Ttest_indResult', False)
    # Calling Ttest_indResult(args, kwargs) (line 889)
    Ttest_indResult_call_result_574462 = invoke(stypy.reporting.localization.Localization(__file__, 889, 15), Ttest_indResult_574456, *[nan_574458, nan_574460], **kwargs_574461)
    
    # Assigning a type to the variable 'stypy_return_type' (line 889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 8), 'stypy_return_type', Ttest_indResult_call_result_574462)
    # SSA join for if statement (line 888)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Tuple (line 891):
    
    # Assigning a Call to a Name (line 891):
    
    # Call to mean(...): (line 891)
    # Processing the call arguments (line 891)
    # Getting the type of 'axis' (line 891)
    axis_574465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 23), 'axis', False)
    # Processing the call keyword arguments (line 891)
    kwargs_574466 = {}
    # Getting the type of 'a' (line 891)
    a_574463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 16), 'a', False)
    # Obtaining the member 'mean' of a type (line 891)
    mean_574464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 16), a_574463, 'mean')
    # Calling mean(args, kwargs) (line 891)
    mean_call_result_574467 = invoke(stypy.reporting.localization.Localization(__file__, 891, 16), mean_574464, *[axis_574465], **kwargs_574466)
    
    # Assigning a type to the variable 'tuple_assignment_571476' (line 891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 4), 'tuple_assignment_571476', mean_call_result_574467)
    
    # Assigning a Call to a Name (line 891):
    
    # Call to mean(...): (line 891)
    # Processing the call arguments (line 891)
    # Getting the type of 'axis' (line 891)
    axis_574470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 37), 'axis', False)
    # Processing the call keyword arguments (line 891)
    kwargs_574471 = {}
    # Getting the type of 'b' (line 891)
    b_574468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 30), 'b', False)
    # Obtaining the member 'mean' of a type (line 891)
    mean_574469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 30), b_574468, 'mean')
    # Calling mean(args, kwargs) (line 891)
    mean_call_result_574472 = invoke(stypy.reporting.localization.Localization(__file__, 891, 30), mean_574469, *[axis_574470], **kwargs_574471)
    
    # Assigning a type to the variable 'tuple_assignment_571477' (line 891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 4), 'tuple_assignment_571477', mean_call_result_574472)
    
    # Assigning a Name to a Name (line 891):
    # Getting the type of 'tuple_assignment_571476' (line 891)
    tuple_assignment_571476_574473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 4), 'tuple_assignment_571476')
    # Assigning a type to the variable 'x1' (line 891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 5), 'x1', tuple_assignment_571476_574473)
    
    # Assigning a Name to a Name (line 891):
    # Getting the type of 'tuple_assignment_571477' (line 891)
    tuple_assignment_571477_574474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 4), 'tuple_assignment_571477')
    # Assigning a type to the variable 'x2' (line 891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 9), 'x2', tuple_assignment_571477_574474)
    
    # Assigning a Tuple to a Tuple (line 892):
    
    # Assigning a Call to a Name (line 892):
    
    # Call to var(...): (line 892)
    # Processing the call keyword arguments (line 892)
    # Getting the type of 'axis' (line 892)
    axis_574477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 27), 'axis', False)
    keyword_574478 = axis_574477
    int_574479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 38), 'int')
    keyword_574480 = int_574479
    kwargs_574481 = {'ddof': keyword_574480, 'axis': keyword_574478}
    # Getting the type of 'a' (line 892)
    a_574475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 16), 'a', False)
    # Obtaining the member 'var' of a type (line 892)
    var_574476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 16), a_574475, 'var')
    # Calling var(args, kwargs) (line 892)
    var_call_result_574482 = invoke(stypy.reporting.localization.Localization(__file__, 892, 16), var_574476, *[], **kwargs_574481)
    
    # Assigning a type to the variable 'tuple_assignment_571478' (line 892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 4), 'tuple_assignment_571478', var_call_result_574482)
    
    # Assigning a Call to a Name (line 892):
    
    # Call to var(...): (line 892)
    # Processing the call keyword arguments (line 892)
    # Getting the type of 'axis' (line 892)
    axis_574485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 53), 'axis', False)
    keyword_574486 = axis_574485
    int_574487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 64), 'int')
    keyword_574488 = int_574487
    kwargs_574489 = {'ddof': keyword_574488, 'axis': keyword_574486}
    # Getting the type of 'b' (line 892)
    b_574483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 42), 'b', False)
    # Obtaining the member 'var' of a type (line 892)
    var_574484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 42), b_574483, 'var')
    # Calling var(args, kwargs) (line 892)
    var_call_result_574490 = invoke(stypy.reporting.localization.Localization(__file__, 892, 42), var_574484, *[], **kwargs_574489)
    
    # Assigning a type to the variable 'tuple_assignment_571479' (line 892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 4), 'tuple_assignment_571479', var_call_result_574490)
    
    # Assigning a Name to a Name (line 892):
    # Getting the type of 'tuple_assignment_571478' (line 892)
    tuple_assignment_571478_574491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 4), 'tuple_assignment_571478')
    # Assigning a type to the variable 'v1' (line 892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 5), 'v1', tuple_assignment_571478_574491)
    
    # Assigning a Name to a Name (line 892):
    # Getting the type of 'tuple_assignment_571479' (line 892)
    tuple_assignment_571479_574492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 4), 'tuple_assignment_571479')
    # Assigning a type to the variable 'v2' (line 892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 9), 'v2', tuple_assignment_571479_574492)
    
    # Assigning a Tuple to a Tuple (line 893):
    
    # Assigning a Call to a Name (line 893):
    
    # Call to count(...): (line 893)
    # Processing the call arguments (line 893)
    # Getting the type of 'axis' (line 893)
    axis_574495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 24), 'axis', False)
    # Processing the call keyword arguments (line 893)
    kwargs_574496 = {}
    # Getting the type of 'a' (line 893)
    a_574493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 16), 'a', False)
    # Obtaining the member 'count' of a type (line 893)
    count_574494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 16), a_574493, 'count')
    # Calling count(args, kwargs) (line 893)
    count_call_result_574497 = invoke(stypy.reporting.localization.Localization(__file__, 893, 16), count_574494, *[axis_574495], **kwargs_574496)
    
    # Assigning a type to the variable 'tuple_assignment_571480' (line 893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 4), 'tuple_assignment_571480', count_call_result_574497)
    
    # Assigning a Call to a Name (line 893):
    
    # Call to count(...): (line 893)
    # Processing the call arguments (line 893)
    # Getting the type of 'axis' (line 893)
    axis_574500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 39), 'axis', False)
    # Processing the call keyword arguments (line 893)
    kwargs_574501 = {}
    # Getting the type of 'b' (line 893)
    b_574498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 31), 'b', False)
    # Obtaining the member 'count' of a type (line 893)
    count_574499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 31), b_574498, 'count')
    # Calling count(args, kwargs) (line 893)
    count_call_result_574502 = invoke(stypy.reporting.localization.Localization(__file__, 893, 31), count_574499, *[axis_574500], **kwargs_574501)
    
    # Assigning a type to the variable 'tuple_assignment_571481' (line 893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 4), 'tuple_assignment_571481', count_call_result_574502)
    
    # Assigning a Name to a Name (line 893):
    # Getting the type of 'tuple_assignment_571480' (line 893)
    tuple_assignment_571480_574503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 4), 'tuple_assignment_571480')
    # Assigning a type to the variable 'n1' (line 893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 5), 'n1', tuple_assignment_571480_574503)
    
    # Assigning a Name to a Name (line 893):
    # Getting the type of 'tuple_assignment_571481' (line 893)
    tuple_assignment_571481_574504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 4), 'tuple_assignment_571481')
    # Assigning a type to the variable 'n2' (line 893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 9), 'n2', tuple_assignment_571481_574504)
    
    # Getting the type of 'equal_var' (line 895)
    equal_var_574505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 7), 'equal_var')
    # Testing the type of an if condition (line 895)
    if_condition_574506 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 895, 4), equal_var_574505)
    # Assigning a type to the variable 'if_condition_574506' (line 895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 4), 'if_condition_574506', if_condition_574506)
    # SSA begins for if statement (line 895)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 897):
    
    # Assigning a Call to a Name (line 897):
    
    # Call to asanyarray(...): (line 897)
    # Processing the call arguments (line 897)
    # Getting the type of 'n1' (line 897)
    n1_574509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 27), 'n1', False)
    # Getting the type of 'n2' (line 897)
    n2_574510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 32), 'n2', False)
    # Applying the binary operator '+' (line 897)
    result_add_574511 = python_operator(stypy.reporting.localization.Localization(__file__, 897, 27), '+', n1_574509, n2_574510)
    
    float_574512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 37), 'float')
    # Applying the binary operator '-' (line 897)
    result_sub_574513 = python_operator(stypy.reporting.localization.Localization(__file__, 897, 35), '-', result_add_574511, float_574512)
    
    # Processing the call keyword arguments (line 897)
    kwargs_574514 = {}
    # Getting the type of 'ma' (line 897)
    ma_574507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 13), 'ma', False)
    # Obtaining the member 'asanyarray' of a type (line 897)
    asanyarray_574508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 13), ma_574507, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 897)
    asanyarray_call_result_574515 = invoke(stypy.reporting.localization.Localization(__file__, 897, 13), asanyarray_574508, *[result_sub_574513], **kwargs_574514)
    
    # Assigning a type to the variable 'df' (line 897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 8), 'df', asanyarray_call_result_574515)
    
    # Assigning a BinOp to a Name (line 898):
    
    # Assigning a BinOp to a Name (line 898):
    # Getting the type of 'n1' (line 898)
    n1_574516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 17), 'n1')
    int_574517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 20), 'int')
    # Applying the binary operator '-' (line 898)
    result_sub_574518 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 17), '-', n1_574516, int_574517)
    
    # Getting the type of 'v1' (line 898)
    v1_574519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 23), 'v1')
    # Applying the binary operator '*' (line 898)
    result_mul_574520 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 16), '*', result_sub_574518, v1_574519)
    
    # Getting the type of 'n2' (line 898)
    n2_574521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 27), 'n2')
    int_574522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 30), 'int')
    # Applying the binary operator '-' (line 898)
    result_sub_574523 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 27), '-', n2_574521, int_574522)
    
    # Getting the type of 'v2' (line 898)
    v2_574524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 33), 'v2')
    # Applying the binary operator '*' (line 898)
    result_mul_574525 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 26), '*', result_sub_574523, v2_574524)
    
    # Applying the binary operator '+' (line 898)
    result_add_574526 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 16), '+', result_mul_574520, result_mul_574525)
    
    # Getting the type of 'df' (line 898)
    df_574527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 39), 'df')
    # Applying the binary operator 'div' (line 898)
    result_div_574528 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 15), 'div', result_add_574526, df_574527)
    
    # Assigning a type to the variable 'svar' (line 898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 8), 'svar', result_div_574528)
    
    # Assigning a Call to a Name (line 899):
    
    # Assigning a Call to a Name (line 899):
    
    # Call to sqrt(...): (line 899)
    # Processing the call arguments (line 899)
    # Getting the type of 'svar' (line 899)
    svar_574531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 24), 'svar', False)
    float_574532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 30), 'float')
    # Getting the type of 'n1' (line 899)
    n1_574533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 34), 'n1', False)
    # Applying the binary operator 'div' (line 899)
    result_div_574534 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 30), 'div', float_574532, n1_574533)
    
    float_574535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 39), 'float')
    # Getting the type of 'n2' (line 899)
    n2_574536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 43), 'n2', False)
    # Applying the binary operator 'div' (line 899)
    result_div_574537 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 39), 'div', float_574535, n2_574536)
    
    # Applying the binary operator '+' (line 899)
    result_add_574538 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 30), '+', result_div_574534, result_div_574537)
    
    # Applying the binary operator '*' (line 899)
    result_mul_574539 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 24), '*', svar_574531, result_add_574538)
    
    # Processing the call keyword arguments (line 899)
    kwargs_574540 = {}
    # Getting the type of 'ma' (line 899)
    ma_574529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 16), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 899)
    sqrt_574530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 16), ma_574529, 'sqrt')
    # Calling sqrt(args, kwargs) (line 899)
    sqrt_call_result_574541 = invoke(stypy.reporting.localization.Localization(__file__, 899, 16), sqrt_574530, *[result_mul_574539], **kwargs_574540)
    
    # Assigning a type to the variable 'denom' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 8), 'denom', sqrt_call_result_574541)
    # SSA branch for the else part of an if statement (line 895)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 901):
    
    # Assigning a BinOp to a Name (line 901):
    # Getting the type of 'v1' (line 901)
    v1_574542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 14), 'v1')
    # Getting the type of 'n1' (line 901)
    n1_574543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 17), 'n1')
    # Applying the binary operator 'div' (line 901)
    result_div_574544 = python_operator(stypy.reporting.localization.Localization(__file__, 901, 14), 'div', v1_574542, n1_574543)
    
    # Assigning a type to the variable 'vn1' (line 901)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 8), 'vn1', result_div_574544)
    
    # Assigning a BinOp to a Name (line 902):
    
    # Assigning a BinOp to a Name (line 902):
    # Getting the type of 'v2' (line 902)
    v2_574545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 14), 'v2')
    # Getting the type of 'n2' (line 902)
    n2_574546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 17), 'n2')
    # Applying the binary operator 'div' (line 902)
    result_div_574547 = python_operator(stypy.reporting.localization.Localization(__file__, 902, 14), 'div', v2_574545, n2_574546)
    
    # Assigning a type to the variable 'vn2' (line 902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 8), 'vn2', result_div_574547)
    
    # Call to errstate(...): (line 903)
    # Processing the call keyword arguments (line 903)
    str_574550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 32), 'str', 'ignore')
    keyword_574551 = str_574550
    str_574552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 50), 'str', 'ignore')
    keyword_574553 = str_574552
    kwargs_574554 = {'divide': keyword_574551, 'invalid': keyword_574553}
    # Getting the type of 'np' (line 903)
    np_574548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 13), 'np', False)
    # Obtaining the member 'errstate' of a type (line 903)
    errstate_574549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 13), np_574548, 'errstate')
    # Calling errstate(args, kwargs) (line 903)
    errstate_call_result_574555 = invoke(stypy.reporting.localization.Localization(__file__, 903, 13), errstate_574549, *[], **kwargs_574554)
    
    with_574556 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 903, 13), errstate_call_result_574555, 'with parameter', '__enter__', '__exit__')

    if with_574556:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 903)
        enter___574557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 13), errstate_call_result_574555, '__enter__')
        with_enter_574558 = invoke(stypy.reporting.localization.Localization(__file__, 903, 13), enter___574557)
        
        # Assigning a BinOp to a Name (line 904):
        
        # Assigning a BinOp to a Name (line 904):
        # Getting the type of 'vn1' (line 904)
        vn1_574559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 18), 'vn1')
        # Getting the type of 'vn2' (line 904)
        vn2_574560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 24), 'vn2')
        # Applying the binary operator '+' (line 904)
        result_add_574561 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 18), '+', vn1_574559, vn2_574560)
        
        int_574562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 30), 'int')
        # Applying the binary operator '**' (line 904)
        result_pow_574563 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 17), '**', result_add_574561, int_574562)
        
        # Getting the type of 'vn1' (line 904)
        vn1_574564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 35), 'vn1')
        int_574565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 40), 'int')
        # Applying the binary operator '**' (line 904)
        result_pow_574566 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 35), '**', vn1_574564, int_574565)
        
        # Getting the type of 'n1' (line 904)
        n1_574567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 45), 'n1')
        int_574568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 50), 'int')
        # Applying the binary operator '-' (line 904)
        result_sub_574569 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 45), '-', n1_574567, int_574568)
        
        # Applying the binary operator 'div' (line 904)
        result_div_574570 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 35), 'div', result_pow_574566, result_sub_574569)
        
        # Getting the type of 'vn2' (line 904)
        vn2_574571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 55), 'vn2')
        int_574572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 60), 'int')
        # Applying the binary operator '**' (line 904)
        result_pow_574573 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 55), '**', vn2_574571, int_574572)
        
        # Getting the type of 'n2' (line 904)
        n2_574574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 65), 'n2')
        int_574575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 70), 'int')
        # Applying the binary operator '-' (line 904)
        result_sub_574576 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 65), '-', n2_574574, int_574575)
        
        # Applying the binary operator 'div' (line 904)
        result_div_574577 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 55), 'div', result_pow_574573, result_sub_574576)
        
        # Applying the binary operator '+' (line 904)
        result_add_574578 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 35), '+', result_div_574570, result_div_574577)
        
        # Applying the binary operator 'div' (line 904)
        result_div_574579 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 17), 'div', result_pow_574563, result_add_574578)
        
        # Assigning a type to the variable 'df' (line 904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 12), 'df', result_div_574579)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 903)
        exit___574580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 13), errstate_call_result_574555, '__exit__')
        with_exit_574581 = invoke(stypy.reporting.localization.Localization(__file__, 903, 13), exit___574580, None, None, None)

    
    # Assigning a Call to a Name (line 908):
    
    # Assigning a Call to a Name (line 908):
    
    # Call to where(...): (line 908)
    # Processing the call arguments (line 908)
    
    # Call to isnan(...): (line 908)
    # Processing the call arguments (line 908)
    # Getting the type of 'df' (line 908)
    df_574586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 31), 'df', False)
    # Processing the call keyword arguments (line 908)
    kwargs_574587 = {}
    # Getting the type of 'np' (line 908)
    np_574584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 22), 'np', False)
    # Obtaining the member 'isnan' of a type (line 908)
    isnan_574585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 908, 22), np_574584, 'isnan')
    # Calling isnan(args, kwargs) (line 908)
    isnan_call_result_574588 = invoke(stypy.reporting.localization.Localization(__file__, 908, 22), isnan_574585, *[df_574586], **kwargs_574587)
    
    int_574589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 36), 'int')
    # Getting the type of 'df' (line 908)
    df_574590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 39), 'df', False)
    # Processing the call keyword arguments (line 908)
    kwargs_574591 = {}
    # Getting the type of 'np' (line 908)
    np_574582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 13), 'np', False)
    # Obtaining the member 'where' of a type (line 908)
    where_574583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 908, 13), np_574582, 'where')
    # Calling where(args, kwargs) (line 908)
    where_call_result_574592 = invoke(stypy.reporting.localization.Localization(__file__, 908, 13), where_574583, *[isnan_call_result_574588, int_574589, df_574590], **kwargs_574591)
    
    # Assigning a type to the variable 'df' (line 908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 8), 'df', where_call_result_574592)
    
    # Assigning a Call to a Name (line 909):
    
    # Assigning a Call to a Name (line 909):
    
    # Call to sqrt(...): (line 909)
    # Processing the call arguments (line 909)
    # Getting the type of 'vn1' (line 909)
    vn1_574595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 24), 'vn1', False)
    # Getting the type of 'vn2' (line 909)
    vn2_574596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 30), 'vn2', False)
    # Applying the binary operator '+' (line 909)
    result_add_574597 = python_operator(stypy.reporting.localization.Localization(__file__, 909, 24), '+', vn1_574595, vn2_574596)
    
    # Processing the call keyword arguments (line 909)
    kwargs_574598 = {}
    # Getting the type of 'ma' (line 909)
    ma_574593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 16), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 909)
    sqrt_574594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 16), ma_574593, 'sqrt')
    # Calling sqrt(args, kwargs) (line 909)
    sqrt_call_result_574599 = invoke(stypy.reporting.localization.Localization(__file__, 909, 16), sqrt_574594, *[result_add_574597], **kwargs_574598)
    
    # Assigning a type to the variable 'denom' (line 909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 8), 'denom', sqrt_call_result_574599)
    # SSA join for if statement (line 895)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to errstate(...): (line 911)
    # Processing the call keyword arguments (line 911)
    str_574602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 28), 'str', 'ignore')
    keyword_574603 = str_574602
    str_574604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 46), 'str', 'ignore')
    keyword_574605 = str_574604
    kwargs_574606 = {'divide': keyword_574603, 'invalid': keyword_574605}
    # Getting the type of 'np' (line 911)
    np_574600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 9), 'np', False)
    # Obtaining the member 'errstate' of a type (line 911)
    errstate_574601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 9), np_574600, 'errstate')
    # Calling errstate(args, kwargs) (line 911)
    errstate_call_result_574607 = invoke(stypy.reporting.localization.Localization(__file__, 911, 9), errstate_574601, *[], **kwargs_574606)
    
    with_574608 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 911, 9), errstate_call_result_574607, 'with parameter', '__enter__', '__exit__')

    if with_574608:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 911)
        enter___574609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 9), errstate_call_result_574607, '__enter__')
        with_enter_574610 = invoke(stypy.reporting.localization.Localization(__file__, 911, 9), enter___574609)
        
        # Assigning a BinOp to a Name (line 912):
        
        # Assigning a BinOp to a Name (line 912):
        # Getting the type of 'x1' (line 912)
        x1_574611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 13), 'x1')
        # Getting the type of 'x2' (line 912)
        x2_574612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 16), 'x2')
        # Applying the binary operator '-' (line 912)
        result_sub_574613 = python_operator(stypy.reporting.localization.Localization(__file__, 912, 13), '-', x1_574611, x2_574612)
        
        # Getting the type of 'denom' (line 912)
        denom_574614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 22), 'denom')
        # Applying the binary operator 'div' (line 912)
        result_div_574615 = python_operator(stypy.reporting.localization.Localization(__file__, 912, 12), 'div', result_sub_574613, denom_574614)
        
        # Assigning a type to the variable 't' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 't', result_div_574615)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 911)
        exit___574616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 9), errstate_call_result_574607, '__exit__')
        with_exit_574617 = invoke(stypy.reporting.localization.Localization(__file__, 911, 9), exit___574616, None, None, None)

    
    # Assigning a Call to a Name (line 913):
    
    # Assigning a Call to a Name (line 913):
    
    # Call to reshape(...): (line 913)
    # Processing the call arguments (line 913)
    # Getting the type of 't' (line 913)
    t_574634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 64), 't', False)
    # Obtaining the member 'shape' of a type (line 913)
    shape_574635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 64), t_574634, 'shape')
    # Processing the call keyword arguments (line 913)
    kwargs_574636 = {}
    
    # Call to betainc(...): (line 913)
    # Processing the call arguments (line 913)
    float_574620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 28), 'float')
    # Getting the type of 'df' (line 913)
    df_574621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 32), 'df', False)
    # Applying the binary operator '*' (line 913)
    result_mul_574622 = python_operator(stypy.reporting.localization.Localization(__file__, 913, 28), '*', float_574620, df_574621)
    
    float_574623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 36), 'float')
    # Getting the type of 'df' (line 913)
    df_574624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 41), 'df', False)
    # Getting the type of 'df' (line 913)
    df_574625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 45), 'df', False)
    # Getting the type of 't' (line 913)
    t_574626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 50), 't', False)
    # Getting the type of 't' (line 913)
    t_574627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 52), 't', False)
    # Applying the binary operator '*' (line 913)
    result_mul_574628 = python_operator(stypy.reporting.localization.Localization(__file__, 913, 50), '*', t_574626, t_574627)
    
    # Applying the binary operator '+' (line 913)
    result_add_574629 = python_operator(stypy.reporting.localization.Localization(__file__, 913, 45), '+', df_574625, result_mul_574628)
    
    # Applying the binary operator 'div' (line 913)
    result_div_574630 = python_operator(stypy.reporting.localization.Localization(__file__, 913, 41), 'div', df_574624, result_add_574629)
    
    # Processing the call keyword arguments (line 913)
    kwargs_574631 = {}
    # Getting the type of 'special' (line 913)
    special_574618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 12), 'special', False)
    # Obtaining the member 'betainc' of a type (line 913)
    betainc_574619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 12), special_574618, 'betainc')
    # Calling betainc(args, kwargs) (line 913)
    betainc_call_result_574632 = invoke(stypy.reporting.localization.Localization(__file__, 913, 12), betainc_574619, *[result_mul_574622, float_574623, result_div_574630], **kwargs_574631)
    
    # Obtaining the member 'reshape' of a type (line 913)
    reshape_574633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 12), betainc_call_result_574632, 'reshape')
    # Calling reshape(args, kwargs) (line 913)
    reshape_call_result_574637 = invoke(stypy.reporting.localization.Localization(__file__, 913, 12), reshape_574633, *[shape_574635], **kwargs_574636)
    
    # Assigning a type to the variable 'probs' (line 913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 4), 'probs', reshape_call_result_574637)
    
    # Call to Ttest_indResult(...): (line 915)
    # Processing the call arguments (line 915)
    # Getting the type of 't' (line 915)
    t_574639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 27), 't', False)
    
    # Call to squeeze(...): (line 915)
    # Processing the call keyword arguments (line 915)
    kwargs_574642 = {}
    # Getting the type of 'probs' (line 915)
    probs_574640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 30), 'probs', False)
    # Obtaining the member 'squeeze' of a type (line 915)
    squeeze_574641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 30), probs_574640, 'squeeze')
    # Calling squeeze(args, kwargs) (line 915)
    squeeze_call_result_574643 = invoke(stypy.reporting.localization.Localization(__file__, 915, 30), squeeze_574641, *[], **kwargs_574642)
    
    # Processing the call keyword arguments (line 915)
    kwargs_574644 = {}
    # Getting the type of 'Ttest_indResult' (line 915)
    Ttest_indResult_574638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 11), 'Ttest_indResult', False)
    # Calling Ttest_indResult(args, kwargs) (line 915)
    Ttest_indResult_call_result_574645 = invoke(stypy.reporting.localization.Localization(__file__, 915, 11), Ttest_indResult_574638, *[t_574639, squeeze_call_result_574643], **kwargs_574644)
    
    # Assigning a type to the variable 'stypy_return_type' (line 915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 4), 'stypy_return_type', Ttest_indResult_call_result_574645)
    
    # ################# End of 'ttest_ind(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ttest_ind' in the type store
    # Getting the type of 'stypy_return_type' (line 855)
    stypy_return_type_574646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_574646)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ttest_ind'
    return stypy_return_type_574646

# Assigning a type to the variable 'ttest_ind' (line 855)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 855, 0), 'ttest_ind', ttest_ind)

# Assigning a Call to a Name (line 918):

# Assigning a Call to a Name (line 918):

# Call to namedtuple(...): (line 918)
# Processing the call arguments (line 918)
str_574648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 29), 'str', 'Ttest_relResult')

# Obtaining an instance of the builtin type 'tuple' (line 918)
tuple_574649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 49), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 918)
# Adding element type (line 918)
str_574650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 49), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 918, 49), tuple_574649, str_574650)
# Adding element type (line 918)
str_574651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 62), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 918, 49), tuple_574649, str_574651)

# Processing the call keyword arguments (line 918)
kwargs_574652 = {}
# Getting the type of 'namedtuple' (line 918)
namedtuple_574647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 18), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 918)
namedtuple_call_result_574653 = invoke(stypy.reporting.localization.Localization(__file__, 918, 18), namedtuple_574647, *[str_574648, tuple_574649], **kwargs_574652)

# Assigning a type to the variable 'Ttest_relResult' (line 918)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 0), 'Ttest_relResult', namedtuple_call_result_574653)

@norecursion
def ttest_rel(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_574654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 25), 'int')
    defaults = [int_574654]
    # Create a new context for function 'ttest_rel'
    module_type_store = module_type_store.open_function_context('ttest_rel', 921, 0, False)
    
    # Passed parameters checking function
    ttest_rel.stypy_localization = localization
    ttest_rel.stypy_type_of_self = None
    ttest_rel.stypy_type_store = module_type_store
    ttest_rel.stypy_function_name = 'ttest_rel'
    ttest_rel.stypy_param_names_list = ['a', 'b', 'axis']
    ttest_rel.stypy_varargs_param_name = None
    ttest_rel.stypy_kwargs_param_name = None
    ttest_rel.stypy_call_defaults = defaults
    ttest_rel.stypy_call_varargs = varargs
    ttest_rel.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ttest_rel', ['a', 'b', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ttest_rel', localization, ['a', 'b', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ttest_rel(...)' code ##################

    str_574655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, (-1)), 'str', '\n    Calculates the T-test on TWO RELATED samples of scores, a and b.\n\n    Parameters\n    ----------\n    a, b : array_like\n        The arrays must have the same shape.\n    axis : int or None, optional\n        Axis along which to compute test. If None, compute over the whole\n        arrays, `a`, and `b`.\n\n    Returns\n    -------\n    statistic : float or array\n        t-statistic\n    pvalue : float or array\n        two-tailed p-value\n\n    Notes\n    -----\n    For more details on `ttest_rel`, see `stats.ttest_rel`.\n\n    ')
    
    # Assigning a Call to a Tuple (line 945):
    
    # Assigning a Subscript to a Name (line 945):
    
    # Obtaining the type of the subscript
    int_574656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 945)
    # Processing the call arguments (line 945)
    # Getting the type of 'a' (line 945)
    a_574658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 31), 'a', False)
    # Getting the type of 'b' (line 945)
    b_574659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 34), 'b', False)
    # Getting the type of 'axis' (line 945)
    axis_574660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 37), 'axis', False)
    # Processing the call keyword arguments (line 945)
    kwargs_574661 = {}
    # Getting the type of '_chk2_asarray' (line 945)
    _chk2_asarray_574657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 945)
    _chk2_asarray_call_result_574662 = invoke(stypy.reporting.localization.Localization(__file__, 945, 17), _chk2_asarray_574657, *[a_574658, b_574659, axis_574660], **kwargs_574661)
    
    # Obtaining the member '__getitem__' of a type (line 945)
    getitem___574663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 4), _chk2_asarray_call_result_574662, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 945)
    subscript_call_result_574664 = invoke(stypy.reporting.localization.Localization(__file__, 945, 4), getitem___574663, int_574656)
    
    # Assigning a type to the variable 'tuple_var_assignment_571482' (line 945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'tuple_var_assignment_571482', subscript_call_result_574664)
    
    # Assigning a Subscript to a Name (line 945):
    
    # Obtaining the type of the subscript
    int_574665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 945)
    # Processing the call arguments (line 945)
    # Getting the type of 'a' (line 945)
    a_574667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 31), 'a', False)
    # Getting the type of 'b' (line 945)
    b_574668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 34), 'b', False)
    # Getting the type of 'axis' (line 945)
    axis_574669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 37), 'axis', False)
    # Processing the call keyword arguments (line 945)
    kwargs_574670 = {}
    # Getting the type of '_chk2_asarray' (line 945)
    _chk2_asarray_574666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 945)
    _chk2_asarray_call_result_574671 = invoke(stypy.reporting.localization.Localization(__file__, 945, 17), _chk2_asarray_574666, *[a_574667, b_574668, axis_574669], **kwargs_574670)
    
    # Obtaining the member '__getitem__' of a type (line 945)
    getitem___574672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 4), _chk2_asarray_call_result_574671, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 945)
    subscript_call_result_574673 = invoke(stypy.reporting.localization.Localization(__file__, 945, 4), getitem___574672, int_574665)
    
    # Assigning a type to the variable 'tuple_var_assignment_571483' (line 945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'tuple_var_assignment_571483', subscript_call_result_574673)
    
    # Assigning a Subscript to a Name (line 945):
    
    # Obtaining the type of the subscript
    int_574674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 4), 'int')
    
    # Call to _chk2_asarray(...): (line 945)
    # Processing the call arguments (line 945)
    # Getting the type of 'a' (line 945)
    a_574676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 31), 'a', False)
    # Getting the type of 'b' (line 945)
    b_574677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 34), 'b', False)
    # Getting the type of 'axis' (line 945)
    axis_574678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 37), 'axis', False)
    # Processing the call keyword arguments (line 945)
    kwargs_574679 = {}
    # Getting the type of '_chk2_asarray' (line 945)
    _chk2_asarray_574675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 17), '_chk2_asarray', False)
    # Calling _chk2_asarray(args, kwargs) (line 945)
    _chk2_asarray_call_result_574680 = invoke(stypy.reporting.localization.Localization(__file__, 945, 17), _chk2_asarray_574675, *[a_574676, b_574677, axis_574678], **kwargs_574679)
    
    # Obtaining the member '__getitem__' of a type (line 945)
    getitem___574681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 4), _chk2_asarray_call_result_574680, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 945)
    subscript_call_result_574682 = invoke(stypy.reporting.localization.Localization(__file__, 945, 4), getitem___574681, int_574674)
    
    # Assigning a type to the variable 'tuple_var_assignment_571484' (line 945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'tuple_var_assignment_571484', subscript_call_result_574682)
    
    # Assigning a Name to a Name (line 945):
    # Getting the type of 'tuple_var_assignment_571482' (line 945)
    tuple_var_assignment_571482_574683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'tuple_var_assignment_571482')
    # Assigning a type to the variable 'a' (line 945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'a', tuple_var_assignment_571482_574683)
    
    # Assigning a Name to a Name (line 945):
    # Getting the type of 'tuple_var_assignment_571483' (line 945)
    tuple_var_assignment_571483_574684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'tuple_var_assignment_571483')
    # Assigning a type to the variable 'b' (line 945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 7), 'b', tuple_var_assignment_571483_574684)
    
    # Assigning a Name to a Name (line 945):
    # Getting the type of 'tuple_var_assignment_571484' (line 945)
    tuple_var_assignment_571484_574685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'tuple_var_assignment_571484')
    # Assigning a type to the variable 'axis' (line 945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 10), 'axis', tuple_var_assignment_571484_574685)
    
    
    
    # Call to len(...): (line 946)
    # Processing the call arguments (line 946)
    # Getting the type of 'a' (line 946)
    a_574687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 11), 'a', False)
    # Processing the call keyword arguments (line 946)
    kwargs_574688 = {}
    # Getting the type of 'len' (line 946)
    len_574686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 7), 'len', False)
    # Calling len(args, kwargs) (line 946)
    len_call_result_574689 = invoke(stypy.reporting.localization.Localization(__file__, 946, 7), len_574686, *[a_574687], **kwargs_574688)
    
    
    # Call to len(...): (line 946)
    # Processing the call arguments (line 946)
    # Getting the type of 'b' (line 946)
    b_574691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 21), 'b', False)
    # Processing the call keyword arguments (line 946)
    kwargs_574692 = {}
    # Getting the type of 'len' (line 946)
    len_574690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 17), 'len', False)
    # Calling len(args, kwargs) (line 946)
    len_call_result_574693 = invoke(stypy.reporting.localization.Localization(__file__, 946, 17), len_574690, *[b_574691], **kwargs_574692)
    
    # Applying the binary operator '!=' (line 946)
    result_ne_574694 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 7), '!=', len_call_result_574689, len_call_result_574693)
    
    # Testing the type of an if condition (line 946)
    if_condition_574695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 946, 4), result_ne_574694)
    # Assigning a type to the variable 'if_condition_574695' (line 946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 4), 'if_condition_574695', if_condition_574695)
    # SSA begins for if statement (line 946)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 947)
    # Processing the call arguments (line 947)
    str_574697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 25), 'str', 'unequal length arrays')
    # Processing the call keyword arguments (line 947)
    kwargs_574698 = {}
    # Getting the type of 'ValueError' (line 947)
    ValueError_574696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 947)
    ValueError_call_result_574699 = invoke(stypy.reporting.localization.Localization(__file__, 947, 14), ValueError_574696, *[str_574697], **kwargs_574698)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 947, 8), ValueError_call_result_574699, 'raise parameter', BaseException)
    # SSA join for if statement (line 946)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'a' (line 949)
    a_574700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 7), 'a')
    # Obtaining the member 'size' of a type (line 949)
    size_574701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 7), a_574700, 'size')
    int_574702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 17), 'int')
    # Applying the binary operator '==' (line 949)
    result_eq_574703 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 7), '==', size_574701, int_574702)
    
    
    # Getting the type of 'b' (line 949)
    b_574704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 22), 'b')
    # Obtaining the member 'size' of a type (line 949)
    size_574705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 22), b_574704, 'size')
    int_574706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 32), 'int')
    # Applying the binary operator '==' (line 949)
    result_eq_574707 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 22), '==', size_574705, int_574706)
    
    # Applying the binary operator 'or' (line 949)
    result_or_keyword_574708 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 7), 'or', result_eq_574703, result_eq_574707)
    
    # Testing the type of an if condition (line 949)
    if_condition_574709 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 949, 4), result_or_keyword_574708)
    # Assigning a type to the variable 'if_condition_574709' (line 949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 4), 'if_condition_574709', if_condition_574709)
    # SSA begins for if statement (line 949)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to Ttest_relResult(...): (line 950)
    # Processing the call arguments (line 950)
    # Getting the type of 'np' (line 950)
    np_574711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 31), 'np', False)
    # Obtaining the member 'nan' of a type (line 950)
    nan_574712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 31), np_574711, 'nan')
    # Getting the type of 'np' (line 950)
    np_574713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 39), 'np', False)
    # Obtaining the member 'nan' of a type (line 950)
    nan_574714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 39), np_574713, 'nan')
    # Processing the call keyword arguments (line 950)
    kwargs_574715 = {}
    # Getting the type of 'Ttest_relResult' (line 950)
    Ttest_relResult_574710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 15), 'Ttest_relResult', False)
    # Calling Ttest_relResult(args, kwargs) (line 950)
    Ttest_relResult_call_result_574716 = invoke(stypy.reporting.localization.Localization(__file__, 950, 15), Ttest_relResult_574710, *[nan_574712, nan_574714], **kwargs_574715)
    
    # Assigning a type to the variable 'stypy_return_type' (line 950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'stypy_return_type', Ttest_relResult_call_result_574716)
    # SSA join for if statement (line 949)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 952):
    
    # Assigning a Call to a Name (line 952):
    
    # Call to count(...): (line 952)
    # Processing the call arguments (line 952)
    # Getting the type of 'axis' (line 952)
    axis_574719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 16), 'axis', False)
    # Processing the call keyword arguments (line 952)
    kwargs_574720 = {}
    # Getting the type of 'a' (line 952)
    a_574717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'a', False)
    # Obtaining the member 'count' of a type (line 952)
    count_574718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 8), a_574717, 'count')
    # Calling count(args, kwargs) (line 952)
    count_call_result_574721 = invoke(stypy.reporting.localization.Localization(__file__, 952, 8), count_574718, *[axis_574719], **kwargs_574720)
    
    # Assigning a type to the variable 'n' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'n', count_call_result_574721)
    
    # Assigning a Call to a Name (line 953):
    
    # Assigning a Call to a Name (line 953):
    
    # Call to asanyarray(...): (line 953)
    # Processing the call arguments (line 953)
    # Getting the type of 'n' (line 953)
    n_574724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 23), 'n', False)
    float_574725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 953, 25), 'float')
    # Applying the binary operator '-' (line 953)
    result_sub_574726 = python_operator(stypy.reporting.localization.Localization(__file__, 953, 23), '-', n_574724, float_574725)
    
    # Processing the call keyword arguments (line 953)
    kwargs_574727 = {}
    # Getting the type of 'ma' (line 953)
    ma_574722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 9), 'ma', False)
    # Obtaining the member 'asanyarray' of a type (line 953)
    asanyarray_574723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 9), ma_574722, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 953)
    asanyarray_call_result_574728 = invoke(stypy.reporting.localization.Localization(__file__, 953, 9), asanyarray_574723, *[result_sub_574726], **kwargs_574727)
    
    # Assigning a type to the variable 'df' (line 953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 4), 'df', asanyarray_call_result_574728)
    
    # Assigning a Call to a Name (line 954):
    
    # Assigning a Call to a Name (line 954):
    
    # Call to astype(...): (line 954)
    # Processing the call arguments (line 954)
    str_574733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 21), 'str', 'd')
    # Processing the call keyword arguments (line 954)
    kwargs_574734 = {}
    # Getting the type of 'a' (line 954)
    a_574729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 9), 'a', False)
    # Getting the type of 'b' (line 954)
    b_574730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 11), 'b', False)
    # Applying the binary operator '-' (line 954)
    result_sub_574731 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 9), '-', a_574729, b_574730)
    
    # Obtaining the member 'astype' of a type (line 954)
    astype_574732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 9), result_sub_574731, 'astype')
    # Calling astype(args, kwargs) (line 954)
    astype_call_result_574735 = invoke(stypy.reporting.localization.Localization(__file__, 954, 9), astype_574732, *[str_574733], **kwargs_574734)
    
    # Assigning a type to the variable 'd' (line 954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 4), 'd', astype_call_result_574735)
    
    # Assigning a Call to a Name (line 955):
    
    # Assigning a Call to a Name (line 955):
    
    # Call to mean(...): (line 955)
    # Processing the call arguments (line 955)
    # Getting the type of 'axis' (line 955)
    axis_574738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 16), 'axis', False)
    # Processing the call keyword arguments (line 955)
    kwargs_574739 = {}
    # Getting the type of 'd' (line 955)
    d_574736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 9), 'd', False)
    # Obtaining the member 'mean' of a type (line 955)
    mean_574737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 9), d_574736, 'mean')
    # Calling mean(args, kwargs) (line 955)
    mean_call_result_574740 = invoke(stypy.reporting.localization.Localization(__file__, 955, 9), mean_574737, *[axis_574738], **kwargs_574739)
    
    # Assigning a type to the variable 'dm' (line 955)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 4), 'dm', mean_call_result_574740)
    
    # Assigning a Call to a Name (line 956):
    
    # Assigning a Call to a Name (line 956):
    
    # Call to var(...): (line 956)
    # Processing the call keyword arguments (line 956)
    # Getting the type of 'axis' (line 956)
    axis_574743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 19), 'axis', False)
    keyword_574744 = axis_574743
    int_574745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 30), 'int')
    keyword_574746 = int_574745
    kwargs_574747 = {'ddof': keyword_574746, 'axis': keyword_574744}
    # Getting the type of 'd' (line 956)
    d_574741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 8), 'd', False)
    # Obtaining the member 'var' of a type (line 956)
    var_574742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 956, 8), d_574741, 'var')
    # Calling var(args, kwargs) (line 956)
    var_call_result_574748 = invoke(stypy.reporting.localization.Localization(__file__, 956, 8), var_574742, *[], **kwargs_574747)
    
    # Assigning a type to the variable 'v' (line 956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 4), 'v', var_call_result_574748)
    
    # Assigning a Call to a Name (line 957):
    
    # Assigning a Call to a Name (line 957):
    
    # Call to sqrt(...): (line 957)
    # Processing the call arguments (line 957)
    # Getting the type of 'v' (line 957)
    v_574751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 20), 'v', False)
    # Getting the type of 'n' (line 957)
    n_574752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 24), 'n', False)
    # Applying the binary operator 'div' (line 957)
    result_div_574753 = python_operator(stypy.reporting.localization.Localization(__file__, 957, 20), 'div', v_574751, n_574752)
    
    # Processing the call keyword arguments (line 957)
    kwargs_574754 = {}
    # Getting the type of 'ma' (line 957)
    ma_574749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 12), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 957)
    sqrt_574750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 12), ma_574749, 'sqrt')
    # Calling sqrt(args, kwargs) (line 957)
    sqrt_call_result_574755 = invoke(stypy.reporting.localization.Localization(__file__, 957, 12), sqrt_574750, *[result_div_574753], **kwargs_574754)
    
    # Assigning a type to the variable 'denom' (line 957)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 4), 'denom', sqrt_call_result_574755)
    
    # Call to errstate(...): (line 958)
    # Processing the call keyword arguments (line 958)
    str_574758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 28), 'str', 'ignore')
    keyword_574759 = str_574758
    str_574760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 46), 'str', 'ignore')
    keyword_574761 = str_574760
    kwargs_574762 = {'divide': keyword_574759, 'invalid': keyword_574761}
    # Getting the type of 'np' (line 958)
    np_574756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 9), 'np', False)
    # Obtaining the member 'errstate' of a type (line 958)
    errstate_574757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 9), np_574756, 'errstate')
    # Calling errstate(args, kwargs) (line 958)
    errstate_call_result_574763 = invoke(stypy.reporting.localization.Localization(__file__, 958, 9), errstate_574757, *[], **kwargs_574762)
    
    with_574764 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 958, 9), errstate_call_result_574763, 'with parameter', '__enter__', '__exit__')

    if with_574764:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 958)
        enter___574765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 9), errstate_call_result_574763, '__enter__')
        with_enter_574766 = invoke(stypy.reporting.localization.Localization(__file__, 958, 9), enter___574765)
        
        # Assigning a BinOp to a Name (line 959):
        
        # Assigning a BinOp to a Name (line 959):
        # Getting the type of 'dm' (line 959)
        dm_574767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 12), 'dm')
        # Getting the type of 'denom' (line 959)
        denom_574768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 17), 'denom')
        # Applying the binary operator 'div' (line 959)
        result_div_574769 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 12), 'div', dm_574767, denom_574768)
        
        # Assigning a type to the variable 't' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 8), 't', result_div_574769)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 958)
        exit___574770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 9), errstate_call_result_574763, '__exit__')
        with_exit_574771 = invoke(stypy.reporting.localization.Localization(__file__, 958, 9), exit___574770, None, None, None)

    
    # Assigning a Call to a Name (line 961):
    
    # Assigning a Call to a Name (line 961):
    
    # Call to squeeze(...): (line 961)
    # Processing the call keyword arguments (line 961)
    kwargs_574793 = {}
    
    # Call to reshape(...): (line 961)
    # Processing the call arguments (line 961)
    # Getting the type of 't' (line 961)
    t_574788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 64), 't', False)
    # Obtaining the member 'shape' of a type (line 961)
    shape_574789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 64), t_574788, 'shape')
    # Processing the call keyword arguments (line 961)
    kwargs_574790 = {}
    
    # Call to betainc(...): (line 961)
    # Processing the call arguments (line 961)
    float_574774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 28), 'float')
    # Getting the type of 'df' (line 961)
    df_574775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 32), 'df', False)
    # Applying the binary operator '*' (line 961)
    result_mul_574776 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 28), '*', float_574774, df_574775)
    
    float_574777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 36), 'float')
    # Getting the type of 'df' (line 961)
    df_574778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 41), 'df', False)
    # Getting the type of 'df' (line 961)
    df_574779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 45), 'df', False)
    # Getting the type of 't' (line 961)
    t_574780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 50), 't', False)
    # Getting the type of 't' (line 961)
    t_574781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 52), 't', False)
    # Applying the binary operator '*' (line 961)
    result_mul_574782 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 50), '*', t_574780, t_574781)
    
    # Applying the binary operator '+' (line 961)
    result_add_574783 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 45), '+', df_574779, result_mul_574782)
    
    # Applying the binary operator 'div' (line 961)
    result_div_574784 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 41), 'div', df_574778, result_add_574783)
    
    # Processing the call keyword arguments (line 961)
    kwargs_574785 = {}
    # Getting the type of 'special' (line 961)
    special_574772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 12), 'special', False)
    # Obtaining the member 'betainc' of a type (line 961)
    betainc_574773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 12), special_574772, 'betainc')
    # Calling betainc(args, kwargs) (line 961)
    betainc_call_result_574786 = invoke(stypy.reporting.localization.Localization(__file__, 961, 12), betainc_574773, *[result_mul_574776, float_574777, result_div_574784], **kwargs_574785)
    
    # Obtaining the member 'reshape' of a type (line 961)
    reshape_574787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 12), betainc_call_result_574786, 'reshape')
    # Calling reshape(args, kwargs) (line 961)
    reshape_call_result_574791 = invoke(stypy.reporting.localization.Localization(__file__, 961, 12), reshape_574787, *[shape_574789], **kwargs_574790)
    
    # Obtaining the member 'squeeze' of a type (line 961)
    squeeze_574792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 12), reshape_call_result_574791, 'squeeze')
    # Calling squeeze(args, kwargs) (line 961)
    squeeze_call_result_574794 = invoke(stypy.reporting.localization.Localization(__file__, 961, 12), squeeze_574792, *[], **kwargs_574793)
    
    # Assigning a type to the variable 'probs' (line 961)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 4), 'probs', squeeze_call_result_574794)
    
    # Call to Ttest_relResult(...): (line 963)
    # Processing the call arguments (line 963)
    # Getting the type of 't' (line 963)
    t_574796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 27), 't', False)
    # Getting the type of 'probs' (line 963)
    probs_574797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 30), 'probs', False)
    # Processing the call keyword arguments (line 963)
    kwargs_574798 = {}
    # Getting the type of 'Ttest_relResult' (line 963)
    Ttest_relResult_574795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 11), 'Ttest_relResult', False)
    # Calling Ttest_relResult(args, kwargs) (line 963)
    Ttest_relResult_call_result_574799 = invoke(stypy.reporting.localization.Localization(__file__, 963, 11), Ttest_relResult_574795, *[t_574796, probs_574797], **kwargs_574798)
    
    # Assigning a type to the variable 'stypy_return_type' (line 963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 4), 'stypy_return_type', Ttest_relResult_call_result_574799)
    
    # ################# End of 'ttest_rel(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ttest_rel' in the type store
    # Getting the type of 'stypy_return_type' (line 921)
    stypy_return_type_574800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_574800)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ttest_rel'
    return stypy_return_type_574800

# Assigning a type to the variable 'ttest_rel' (line 921)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 0), 'ttest_rel', ttest_rel)

# Assigning a Call to a Name (line 966):

# Assigning a Call to a Name (line 966):

# Call to namedtuple(...): (line 966)
# Processing the call arguments (line 966)
str_574802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 32), 'str', 'MannwhitneyuResult')

# Obtaining an instance of the builtin type 'tuple' (line 966)
tuple_574803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 55), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 966)
# Adding element type (line 966)
str_574804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 55), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 966, 55), tuple_574803, str_574804)
# Adding element type (line 966)
str_574805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 55), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 966, 55), tuple_574803, str_574805)

# Processing the call keyword arguments (line 966)
kwargs_574806 = {}
# Getting the type of 'namedtuple' (line 966)
namedtuple_574801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 21), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 966)
namedtuple_call_result_574807 = invoke(stypy.reporting.localization.Localization(__file__, 966, 21), namedtuple_574801, *[str_574802, tuple_574803], **kwargs_574806)

# Assigning a type to the variable 'MannwhitneyuResult' (line 966)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 0), 'MannwhitneyuResult', namedtuple_call_result_574807)

@norecursion
def mannwhitneyu(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 970)
    True_574808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 37), 'True')
    defaults = [True_574808]
    # Create a new context for function 'mannwhitneyu'
    module_type_store = module_type_store.open_function_context('mannwhitneyu', 970, 0, False)
    
    # Passed parameters checking function
    mannwhitneyu.stypy_localization = localization
    mannwhitneyu.stypy_type_of_self = None
    mannwhitneyu.stypy_type_store = module_type_store
    mannwhitneyu.stypy_function_name = 'mannwhitneyu'
    mannwhitneyu.stypy_param_names_list = ['x', 'y', 'use_continuity']
    mannwhitneyu.stypy_varargs_param_name = None
    mannwhitneyu.stypy_kwargs_param_name = None
    mannwhitneyu.stypy_call_defaults = defaults
    mannwhitneyu.stypy_call_varargs = varargs
    mannwhitneyu.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mannwhitneyu', ['x', 'y', 'use_continuity'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mannwhitneyu', localization, ['x', 'y', 'use_continuity'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mannwhitneyu(...)' code ##################

    str_574809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, (-1)), 'str', '\n    Computes the Mann-Whitney statistic\n\n    Missing values in `x` and/or `y` are discarded.\n\n    Parameters\n    ----------\n    x : sequence\n        Input\n    y : sequence\n        Input\n    use_continuity : {True, False}, optional\n        Whether a continuity correction (1/2.) should be taken into account.\n\n    Returns\n    -------\n    statistic : float\n        The Mann-Whitney statistics\n    pvalue : float\n        Approximate p-value assuming a normal distribution.\n\n    ')
    
    # Assigning a Call to a Name (line 993):
    
    # Assigning a Call to a Name (line 993):
    
    # Call to view(...): (line 993)
    # Processing the call arguments (line 993)
    # Getting the type of 'ndarray' (line 993)
    ndarray_574819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 40), 'ndarray', False)
    # Processing the call keyword arguments (line 993)
    kwargs_574820 = {}
    
    # Call to compressed(...): (line 993)
    # Processing the call keyword arguments (line 993)
    kwargs_574816 = {}
    
    # Call to asarray(...): (line 993)
    # Processing the call arguments (line 993)
    # Getting the type of 'x' (line 993)
    x_574812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 19), 'x', False)
    # Processing the call keyword arguments (line 993)
    kwargs_574813 = {}
    # Getting the type of 'ma' (line 993)
    ma_574810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), 'ma', False)
    # Obtaining the member 'asarray' of a type (line 993)
    asarray_574811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 8), ma_574810, 'asarray')
    # Calling asarray(args, kwargs) (line 993)
    asarray_call_result_574814 = invoke(stypy.reporting.localization.Localization(__file__, 993, 8), asarray_574811, *[x_574812], **kwargs_574813)
    
    # Obtaining the member 'compressed' of a type (line 993)
    compressed_574815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 8), asarray_call_result_574814, 'compressed')
    # Calling compressed(args, kwargs) (line 993)
    compressed_call_result_574817 = invoke(stypy.reporting.localization.Localization(__file__, 993, 8), compressed_574815, *[], **kwargs_574816)
    
    # Obtaining the member 'view' of a type (line 993)
    view_574818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 8), compressed_call_result_574817, 'view')
    # Calling view(args, kwargs) (line 993)
    view_call_result_574821 = invoke(stypy.reporting.localization.Localization(__file__, 993, 8), view_574818, *[ndarray_574819], **kwargs_574820)
    
    # Assigning a type to the variable 'x' (line 993)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 4), 'x', view_call_result_574821)
    
    # Assigning a Call to a Name (line 994):
    
    # Assigning a Call to a Name (line 994):
    
    # Call to view(...): (line 994)
    # Processing the call arguments (line 994)
    # Getting the type of 'ndarray' (line 994)
    ndarray_574831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 40), 'ndarray', False)
    # Processing the call keyword arguments (line 994)
    kwargs_574832 = {}
    
    # Call to compressed(...): (line 994)
    # Processing the call keyword arguments (line 994)
    kwargs_574828 = {}
    
    # Call to asarray(...): (line 994)
    # Processing the call arguments (line 994)
    # Getting the type of 'y' (line 994)
    y_574824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 19), 'y', False)
    # Processing the call keyword arguments (line 994)
    kwargs_574825 = {}
    # Getting the type of 'ma' (line 994)
    ma_574822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'ma', False)
    # Obtaining the member 'asarray' of a type (line 994)
    asarray_574823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 8), ma_574822, 'asarray')
    # Calling asarray(args, kwargs) (line 994)
    asarray_call_result_574826 = invoke(stypy.reporting.localization.Localization(__file__, 994, 8), asarray_574823, *[y_574824], **kwargs_574825)
    
    # Obtaining the member 'compressed' of a type (line 994)
    compressed_574827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 8), asarray_call_result_574826, 'compressed')
    # Calling compressed(args, kwargs) (line 994)
    compressed_call_result_574829 = invoke(stypy.reporting.localization.Localization(__file__, 994, 8), compressed_574827, *[], **kwargs_574828)
    
    # Obtaining the member 'view' of a type (line 994)
    view_574830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 8), compressed_call_result_574829, 'view')
    # Calling view(args, kwargs) (line 994)
    view_call_result_574833 = invoke(stypy.reporting.localization.Localization(__file__, 994, 8), view_574830, *[ndarray_574831], **kwargs_574832)
    
    # Assigning a type to the variable 'y' (line 994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'y', view_call_result_574833)
    
    # Assigning a Call to a Name (line 995):
    
    # Assigning a Call to a Name (line 995):
    
    # Call to rankdata(...): (line 995)
    # Processing the call arguments (line 995)
    
    # Call to concatenate(...): (line 995)
    # Processing the call arguments (line 995)
    
    # Obtaining an instance of the builtin type 'list' (line 995)
    list_574837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 36), 'list')
    # Adding type elements to the builtin type 'list' instance (line 995)
    # Adding element type (line 995)
    # Getting the type of 'x' (line 995)
    x_574838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 37), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 995, 36), list_574837, x_574838)
    # Adding element type (line 995)
    # Getting the type of 'y' (line 995)
    y_574839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 39), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 995, 36), list_574837, y_574839)
    
    # Processing the call keyword arguments (line 995)
    kwargs_574840 = {}
    # Getting the type of 'np' (line 995)
    np_574835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 21), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 995)
    concatenate_574836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 21), np_574835, 'concatenate')
    # Calling concatenate(args, kwargs) (line 995)
    concatenate_call_result_574841 = invoke(stypy.reporting.localization.Localization(__file__, 995, 21), concatenate_574836, *[list_574837], **kwargs_574840)
    
    # Processing the call keyword arguments (line 995)
    kwargs_574842 = {}
    # Getting the type of 'rankdata' (line 995)
    rankdata_574834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 12), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 995)
    rankdata_call_result_574843 = invoke(stypy.reporting.localization.Localization(__file__, 995, 12), rankdata_574834, *[concatenate_call_result_574841], **kwargs_574842)
    
    # Assigning a type to the variable 'ranks' (line 995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 4), 'ranks', rankdata_call_result_574843)
    
    # Assigning a Tuple to a Tuple (line 996):
    
    # Assigning a Call to a Name (line 996):
    
    # Call to len(...): (line 996)
    # Processing the call arguments (line 996)
    # Getting the type of 'x' (line 996)
    x_574845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 20), 'x', False)
    # Processing the call keyword arguments (line 996)
    kwargs_574846 = {}
    # Getting the type of 'len' (line 996)
    len_574844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 16), 'len', False)
    # Calling len(args, kwargs) (line 996)
    len_call_result_574847 = invoke(stypy.reporting.localization.Localization(__file__, 996, 16), len_574844, *[x_574845], **kwargs_574846)
    
    # Assigning a type to the variable 'tuple_assignment_571485' (line 996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 4), 'tuple_assignment_571485', len_call_result_574847)
    
    # Assigning a Call to a Name (line 996):
    
    # Call to len(...): (line 996)
    # Processing the call arguments (line 996)
    # Getting the type of 'y' (line 996)
    y_574849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 28), 'y', False)
    # Processing the call keyword arguments (line 996)
    kwargs_574850 = {}
    # Getting the type of 'len' (line 996)
    len_574848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 24), 'len', False)
    # Calling len(args, kwargs) (line 996)
    len_call_result_574851 = invoke(stypy.reporting.localization.Localization(__file__, 996, 24), len_574848, *[y_574849], **kwargs_574850)
    
    # Assigning a type to the variable 'tuple_assignment_571486' (line 996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 4), 'tuple_assignment_571486', len_call_result_574851)
    
    # Assigning a Name to a Name (line 996):
    # Getting the type of 'tuple_assignment_571485' (line 996)
    tuple_assignment_571485_574852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 4), 'tuple_assignment_571485')
    # Assigning a type to the variable 'nx' (line 996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 5), 'nx', tuple_assignment_571485_574852)
    
    # Assigning a Name to a Name (line 996):
    # Getting the type of 'tuple_assignment_571486' (line 996)
    tuple_assignment_571486_574853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 4), 'tuple_assignment_571486')
    # Assigning a type to the variable 'ny' (line 996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 9), 'ny', tuple_assignment_571486_574853)
    
    # Assigning a BinOp to a Name (line 997):
    
    # Assigning a BinOp to a Name (line 997):
    # Getting the type of 'nx' (line 997)
    nx_574854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 9), 'nx')
    # Getting the type of 'ny' (line 997)
    ny_574855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 14), 'ny')
    # Applying the binary operator '+' (line 997)
    result_add_574856 = python_operator(stypy.reporting.localization.Localization(__file__, 997, 9), '+', nx_574854, ny_574855)
    
    # Assigning a type to the variable 'nt' (line 997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 4), 'nt', result_add_574856)
    
    # Assigning a BinOp to a Name (line 998):
    
    # Assigning a BinOp to a Name (line 998):
    
    # Call to sum(...): (line 998)
    # Processing the call keyword arguments (line 998)
    kwargs_574863 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'nx' (line 998)
    nx_574857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 15), 'nx', False)
    slice_574858 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 998, 8), None, nx_574857, None)
    # Getting the type of 'ranks' (line 998)
    ranks_574859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 8), 'ranks', False)
    # Obtaining the member '__getitem__' of a type (line 998)
    getitem___574860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 8), ranks_574859, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 998)
    subscript_call_result_574861 = invoke(stypy.reporting.localization.Localization(__file__, 998, 8), getitem___574860, slice_574858)
    
    # Obtaining the member 'sum' of a type (line 998)
    sum_574862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 8), subscript_call_result_574861, 'sum')
    # Calling sum(args, kwargs) (line 998)
    sum_call_result_574864 = invoke(stypy.reporting.localization.Localization(__file__, 998, 8), sum_574862, *[], **kwargs_574863)
    
    # Getting the type of 'nx' (line 998)
    nx_574865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 27), 'nx')
    # Getting the type of 'nx' (line 998)
    nx_574866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 31), 'nx')
    int_574867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 34), 'int')
    # Applying the binary operator '+' (line 998)
    result_add_574868 = python_operator(stypy.reporting.localization.Localization(__file__, 998, 31), '+', nx_574866, int_574867)
    
    # Applying the binary operator '*' (line 998)
    result_mul_574869 = python_operator(stypy.reporting.localization.Localization(__file__, 998, 27), '*', nx_574865, result_add_574868)
    
    float_574870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 37), 'float')
    # Applying the binary operator 'div' (line 998)
    result_div_574871 = python_operator(stypy.reporting.localization.Localization(__file__, 998, 36), 'div', result_mul_574869, float_574870)
    
    # Applying the binary operator '-' (line 998)
    result_sub_574872 = python_operator(stypy.reporting.localization.Localization(__file__, 998, 8), '-', sum_call_result_574864, result_div_574871)
    
    # Assigning a type to the variable 'U' (line 998)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 4), 'U', result_sub_574872)
    
    # Assigning a Call to a Name (line 999):
    
    # Assigning a Call to a Name (line 999):
    
    # Call to max(...): (line 999)
    # Processing the call arguments (line 999)
    # Getting the type of 'U' (line 999)
    U_574874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 12), 'U', False)
    # Getting the type of 'nx' (line 999)
    nx_574875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 15), 'nx', False)
    # Getting the type of 'ny' (line 999)
    ny_574876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 18), 'ny', False)
    # Applying the binary operator '*' (line 999)
    result_mul_574877 = python_operator(stypy.reporting.localization.Localization(__file__, 999, 15), '*', nx_574875, ny_574876)
    
    # Getting the type of 'U' (line 999)
    U_574878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 23), 'U', False)
    # Applying the binary operator '-' (line 999)
    result_sub_574879 = python_operator(stypy.reporting.localization.Localization(__file__, 999, 15), '-', result_mul_574877, U_574878)
    
    # Processing the call keyword arguments (line 999)
    kwargs_574880 = {}
    # Getting the type of 'max' (line 999)
    max_574873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 8), 'max', False)
    # Calling max(args, kwargs) (line 999)
    max_call_result_574881 = invoke(stypy.reporting.localization.Localization(__file__, 999, 8), max_574873, *[U_574874, result_sub_574879], **kwargs_574880)
    
    # Assigning a type to the variable 'U' (line 999)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 4), 'U', max_call_result_574881)
    
    # Assigning a BinOp to a Name (line 1000):
    
    # Assigning a BinOp to a Name (line 1000):
    # Getting the type of 'nx' (line 1000)
    nx_574882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'nx')
    # Getting the type of 'ny' (line 1000)
    ny_574883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 11), 'ny')
    # Applying the binary operator '*' (line 1000)
    result_mul_574884 = python_operator(stypy.reporting.localization.Localization(__file__, 1000, 8), '*', nx_574882, ny_574883)
    
    # Getting the type of 'U' (line 1000)
    U_574885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 16), 'U')
    # Applying the binary operator '-' (line 1000)
    result_sub_574886 = python_operator(stypy.reporting.localization.Localization(__file__, 1000, 8), '-', result_mul_574884, U_574885)
    
    # Assigning a type to the variable 'u' (line 1000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 4), 'u', result_sub_574886)
    
    # Assigning a BinOp to a Name (line 1002):
    
    # Assigning a BinOp to a Name (line 1002):
    # Getting the type of 'nx' (line 1002)
    nx_574887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 10), 'nx')
    # Getting the type of 'ny' (line 1002)
    ny_574888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 13), 'ny')
    # Applying the binary operator '*' (line 1002)
    result_mul_574889 = python_operator(stypy.reporting.localization.Localization(__file__, 1002, 10), '*', nx_574887, ny_574888)
    
    float_574890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1002, 17), 'float')
    # Applying the binary operator 'div' (line 1002)
    result_div_574891 = python_operator(stypy.reporting.localization.Localization(__file__, 1002, 9), 'div', result_mul_574889, float_574890)
    
    # Assigning a type to the variable 'mu' (line 1002)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 4), 'mu', result_div_574891)
    
    # Assigning a BinOp to a Name (line 1003):
    
    # Assigning a BinOp to a Name (line 1003):
    # Getting the type of 'nt' (line 1003)
    nt_574892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 13), 'nt')
    int_574893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 17), 'int')
    # Applying the binary operator '**' (line 1003)
    result_pow_574894 = python_operator(stypy.reporting.localization.Localization(__file__, 1003, 13), '**', nt_574892, int_574893)
    
    # Getting the type of 'nt' (line 1003)
    nt_574895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 21), 'nt')
    # Applying the binary operator '-' (line 1003)
    result_sub_574896 = python_operator(stypy.reporting.localization.Localization(__file__, 1003, 13), '-', result_pow_574894, nt_574895)
    
    float_574897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 25), 'float')
    # Applying the binary operator 'div' (line 1003)
    result_div_574898 = python_operator(stypy.reporting.localization.Localization(__file__, 1003, 12), 'div', result_sub_574896, float_574897)
    
    # Assigning a type to the variable 'sigsq' (line 1003)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 4), 'sigsq', result_div_574898)
    
    # Assigning a Call to a Name (line 1004):
    
    # Assigning a Call to a Name (line 1004):
    
    # Call to count_tied_groups(...): (line 1004)
    # Processing the call arguments (line 1004)
    # Getting the type of 'ranks' (line 1004)
    ranks_574900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 29), 'ranks', False)
    # Processing the call keyword arguments (line 1004)
    kwargs_574901 = {}
    # Getting the type of 'count_tied_groups' (line 1004)
    count_tied_groups_574899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 11), 'count_tied_groups', False)
    # Calling count_tied_groups(args, kwargs) (line 1004)
    count_tied_groups_call_result_574902 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 11), count_tied_groups_574899, *[ranks_574900], **kwargs_574901)
    
    # Assigning a type to the variable 'ties' (line 1004)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1004, 4), 'ties', count_tied_groups_call_result_574902)
    
    # Getting the type of 'sigsq' (line 1005)
    sigsq_574903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'sigsq')
    
    # Call to sum(...): (line 1005)
    # Processing the call arguments (line 1005)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 1005, 20, True)
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 1005)
    # Processing the call arguments (line 1005)
    # Getting the type of 'ties' (line 1005)
    ties_574914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 54), 'ties', False)
    # Processing the call keyword arguments (line 1005)
    kwargs_574915 = {}
    # Getting the type of 'iteritems' (line 1005)
    iteritems_574913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 44), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 1005)
    iteritems_call_result_574916 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 44), iteritems_574913, *[ties_574914], **kwargs_574915)
    
    comprehension_574917 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 20), iteritems_call_result_574916)
    # Assigning a type to the variable 'k' (line 1005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 20), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 20), comprehension_574917))
    # Assigning a type to the variable 'v' (line 1005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 20), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 20), comprehension_574917))
    # Getting the type of 'v' (line 1005)
    v_574906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 20), 'v', False)
    # Getting the type of 'k' (line 1005)
    k_574907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 23), 'k', False)
    int_574908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 26), 'int')
    # Applying the binary operator '**' (line 1005)
    result_pow_574909 = python_operator(stypy.reporting.localization.Localization(__file__, 1005, 23), '**', k_574907, int_574908)
    
    # Getting the type of 'k' (line 1005)
    k_574910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 28), 'k', False)
    # Applying the binary operator '-' (line 1005)
    result_sub_574911 = python_operator(stypy.reporting.localization.Localization(__file__, 1005, 23), '-', result_pow_574909, k_574910)
    
    # Applying the binary operator '*' (line 1005)
    result_mul_574912 = python_operator(stypy.reporting.localization.Localization(__file__, 1005, 20), '*', v_574906, result_sub_574911)
    
    list_574918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 20), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 20), list_574918, result_mul_574912)
    # Processing the call keyword arguments (line 1005)
    kwargs_574919 = {}
    # Getting the type of 'np' (line 1005)
    np_574904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 13), 'np', False)
    # Obtaining the member 'sum' of a type (line 1005)
    sum_574905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 13), np_574904, 'sum')
    # Calling sum(args, kwargs) (line 1005)
    sum_call_result_574920 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 13), sum_574905, *[list_574918], **kwargs_574919)
    
    float_574921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 61), 'float')
    # Applying the binary operator 'div' (line 1005)
    result_div_574922 = python_operator(stypy.reporting.localization.Localization(__file__, 1005, 13), 'div', sum_call_result_574920, float_574921)
    
    # Applying the binary operator '-=' (line 1005)
    result_isub_574923 = python_operator(stypy.reporting.localization.Localization(__file__, 1005, 4), '-=', sigsq_574903, result_div_574922)
    # Assigning a type to the variable 'sigsq' (line 1005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'sigsq', result_isub_574923)
    
    
    # Getting the type of 'sigsq' (line 1006)
    sigsq_574924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 4), 'sigsq')
    # Getting the type of 'nx' (line 1006)
    nx_574925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 13), 'nx')
    # Getting the type of 'ny' (line 1006)
    ny_574926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 16), 'ny')
    # Applying the binary operator '*' (line 1006)
    result_mul_574927 = python_operator(stypy.reporting.localization.Localization(__file__, 1006, 13), '*', nx_574925, ny_574926)
    
    
    # Call to float(...): (line 1006)
    # Processing the call arguments (line 1006)
    # Getting the type of 'nt' (line 1006)
    nt_574929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 25), 'nt', False)
    # Getting the type of 'nt' (line 1006)
    nt_574930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 29), 'nt', False)
    int_574931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1006, 32), 'int')
    # Applying the binary operator '-' (line 1006)
    result_sub_574932 = python_operator(stypy.reporting.localization.Localization(__file__, 1006, 29), '-', nt_574930, int_574931)
    
    # Applying the binary operator '*' (line 1006)
    result_mul_574933 = python_operator(stypy.reporting.localization.Localization(__file__, 1006, 25), '*', nt_574929, result_sub_574932)
    
    # Processing the call keyword arguments (line 1006)
    kwargs_574934 = {}
    # Getting the type of 'float' (line 1006)
    float_574928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 19), 'float', False)
    # Calling float(args, kwargs) (line 1006)
    float_call_result_574935 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 19), float_574928, *[result_mul_574933], **kwargs_574934)
    
    # Applying the binary operator 'div' (line 1006)
    result_div_574936 = python_operator(stypy.reporting.localization.Localization(__file__, 1006, 18), 'div', result_mul_574927, float_call_result_574935)
    
    # Applying the binary operator '*=' (line 1006)
    result_imul_574937 = python_operator(stypy.reporting.localization.Localization(__file__, 1006, 4), '*=', sigsq_574924, result_div_574936)
    # Assigning a type to the variable 'sigsq' (line 1006)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 4), 'sigsq', result_imul_574937)
    
    
    # Getting the type of 'use_continuity' (line 1008)
    use_continuity_574938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 7), 'use_continuity')
    # Testing the type of an if condition (line 1008)
    if_condition_574939 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1008, 4), use_continuity_574938)
    # Assigning a type to the variable 'if_condition_574939' (line 1008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'if_condition_574939', if_condition_574939)
    # SSA begins for if statement (line 1008)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1009):
    
    # Assigning a BinOp to a Name (line 1009):
    # Getting the type of 'U' (line 1009)
    U_574940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 13), 'U')
    int_574941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1009, 17), 'int')
    float_574942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1009, 19), 'float')
    # Applying the binary operator 'div' (line 1009)
    result_div_574943 = python_operator(stypy.reporting.localization.Localization(__file__, 1009, 17), 'div', int_574941, float_574942)
    
    # Applying the binary operator '-' (line 1009)
    result_sub_574944 = python_operator(stypy.reporting.localization.Localization(__file__, 1009, 13), '-', U_574940, result_div_574943)
    
    # Getting the type of 'mu' (line 1009)
    mu_574945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 24), 'mu')
    # Applying the binary operator '-' (line 1009)
    result_sub_574946 = python_operator(stypy.reporting.localization.Localization(__file__, 1009, 22), '-', result_sub_574944, mu_574945)
    
    
    # Call to sqrt(...): (line 1009)
    # Processing the call arguments (line 1009)
    # Getting the type of 'sigsq' (line 1009)
    sigsq_574949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 38), 'sigsq', False)
    # Processing the call keyword arguments (line 1009)
    kwargs_574950 = {}
    # Getting the type of 'ma' (line 1009)
    ma_574947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 30), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 1009)
    sqrt_574948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 30), ma_574947, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1009)
    sqrt_call_result_574951 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 30), sqrt_574948, *[sigsq_574949], **kwargs_574950)
    
    # Applying the binary operator 'div' (line 1009)
    result_div_574952 = python_operator(stypy.reporting.localization.Localization(__file__, 1009, 12), 'div', result_sub_574946, sqrt_call_result_574951)
    
    # Assigning a type to the variable 'z' (line 1009)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 8), 'z', result_div_574952)
    # SSA branch for the else part of an if statement (line 1008)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1011):
    
    # Assigning a BinOp to a Name (line 1011):
    # Getting the type of 'U' (line 1011)
    U_574953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 13), 'U')
    # Getting the type of 'mu' (line 1011)
    mu_574954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 17), 'mu')
    # Applying the binary operator '-' (line 1011)
    result_sub_574955 = python_operator(stypy.reporting.localization.Localization(__file__, 1011, 13), '-', U_574953, mu_574954)
    
    
    # Call to sqrt(...): (line 1011)
    # Processing the call arguments (line 1011)
    # Getting the type of 'sigsq' (line 1011)
    sigsq_574958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 31), 'sigsq', False)
    # Processing the call keyword arguments (line 1011)
    kwargs_574959 = {}
    # Getting the type of 'ma' (line 1011)
    ma_574956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 23), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 1011)
    sqrt_574957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1011, 23), ma_574956, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1011)
    sqrt_call_result_574960 = invoke(stypy.reporting.localization.Localization(__file__, 1011, 23), sqrt_574957, *[sigsq_574958], **kwargs_574959)
    
    # Applying the binary operator 'div' (line 1011)
    result_div_574961 = python_operator(stypy.reporting.localization.Localization(__file__, 1011, 12), 'div', result_sub_574955, sqrt_call_result_574960)
    
    # Assigning a type to the variable 'z' (line 1011)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1011, 8), 'z', result_div_574961)
    # SSA join for if statement (line 1008)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1013):
    
    # Assigning a Call to a Name (line 1013):
    
    # Call to erfc(...): (line 1013)
    # Processing the call arguments (line 1013)
    
    # Call to abs(...): (line 1013)
    # Processing the call arguments (line 1013)
    # Getting the type of 'z' (line 1013)
    z_574965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 28), 'z', False)
    # Processing the call keyword arguments (line 1013)
    kwargs_574966 = {}
    # Getting the type of 'abs' (line 1013)
    abs_574964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 24), 'abs', False)
    # Calling abs(args, kwargs) (line 1013)
    abs_call_result_574967 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 24), abs_574964, *[z_574965], **kwargs_574966)
    
    
    # Call to sqrt(...): (line 1013)
    # Processing the call arguments (line 1013)
    int_574970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 39), 'int')
    # Processing the call keyword arguments (line 1013)
    kwargs_574971 = {}
    # Getting the type of 'np' (line 1013)
    np_574968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 31), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1013)
    sqrt_574969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 31), np_574968, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1013)
    sqrt_call_result_574972 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 31), sqrt_574969, *[int_574970], **kwargs_574971)
    
    # Applying the binary operator 'div' (line 1013)
    result_div_574973 = python_operator(stypy.reporting.localization.Localization(__file__, 1013, 24), 'div', abs_call_result_574967, sqrt_call_result_574972)
    
    # Processing the call keyword arguments (line 1013)
    kwargs_574974 = {}
    # Getting the type of 'special' (line 1013)
    special_574962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 11), 'special', False)
    # Obtaining the member 'erfc' of a type (line 1013)
    erfc_574963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 11), special_574962, 'erfc')
    # Calling erfc(args, kwargs) (line 1013)
    erfc_call_result_574975 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 11), erfc_574963, *[result_div_574973], **kwargs_574974)
    
    # Assigning a type to the variable 'prob' (line 1013)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 4), 'prob', erfc_call_result_574975)
    
    # Call to MannwhitneyuResult(...): (line 1014)
    # Processing the call arguments (line 1014)
    # Getting the type of 'u' (line 1014)
    u_574977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 30), 'u', False)
    # Getting the type of 'prob' (line 1014)
    prob_574978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 33), 'prob', False)
    # Processing the call keyword arguments (line 1014)
    kwargs_574979 = {}
    # Getting the type of 'MannwhitneyuResult' (line 1014)
    MannwhitneyuResult_574976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 11), 'MannwhitneyuResult', False)
    # Calling MannwhitneyuResult(args, kwargs) (line 1014)
    MannwhitneyuResult_call_result_574980 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 11), MannwhitneyuResult_574976, *[u_574977, prob_574978], **kwargs_574979)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1014)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 4), 'stypy_return_type', MannwhitneyuResult_call_result_574980)
    
    # ################# End of 'mannwhitneyu(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mannwhitneyu' in the type store
    # Getting the type of 'stypy_return_type' (line 970)
    stypy_return_type_574981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_574981)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mannwhitneyu'
    return stypy_return_type_574981

# Assigning a type to the variable 'mannwhitneyu' (line 970)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 0), 'mannwhitneyu', mannwhitneyu)

# Assigning a Call to a Name (line 1017):

# Assigning a Call to a Name (line 1017):

# Call to namedtuple(...): (line 1017)
# Processing the call arguments (line 1017)
str_574983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 27), 'str', 'KruskalResult')

# Obtaining an instance of the builtin type 'tuple' (line 1017)
tuple_574984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 45), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1017)
# Adding element type (line 1017)
str_574985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 45), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1017, 45), tuple_574984, str_574985)
# Adding element type (line 1017)
str_574986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 58), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1017, 45), tuple_574984, str_574986)

# Processing the call keyword arguments (line 1017)
kwargs_574987 = {}
# Getting the type of 'namedtuple' (line 1017)
namedtuple_574982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 16), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1017)
namedtuple_call_result_574988 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 16), namedtuple_574982, *[str_574983, tuple_574984], **kwargs_574987)

# Assigning a type to the variable 'KruskalResult' (line 1017)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 0), 'KruskalResult', namedtuple_call_result_574988)

@norecursion
def kruskal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'kruskal'
    module_type_store = module_type_store.open_function_context('kruskal', 1020, 0, False)
    
    # Passed parameters checking function
    kruskal.stypy_localization = localization
    kruskal.stypy_type_of_self = None
    kruskal.stypy_type_store = module_type_store
    kruskal.stypy_function_name = 'kruskal'
    kruskal.stypy_param_names_list = []
    kruskal.stypy_varargs_param_name = 'args'
    kruskal.stypy_kwargs_param_name = None
    kruskal.stypy_call_defaults = defaults
    kruskal.stypy_call_varargs = varargs
    kruskal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kruskal', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kruskal', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kruskal(...)' code ##################

    str_574989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, (-1)), 'str', '\n    Compute the Kruskal-Wallis H-test for independent samples\n\n    Parameters\n    ----------\n    sample1, sample2, ... : array_like\n       Two or more arrays with the sample measurements can be given as\n       arguments.\n\n    Returns\n    -------\n    statistic : float\n       The Kruskal-Wallis H statistic, corrected for ties\n    pvalue : float\n       The p-value for the test using the assumption that H has a chi\n       square distribution\n\n    Notes\n    -----\n    For more details on `kruskal`, see `stats.kruskal`.\n\n    ')
    
    # Assigning a Call to a Name (line 1043):
    
    # Assigning a Call to a Name (line 1043):
    
    # Call to argstoarray(...): (line 1043)
    # Getting the type of 'args' (line 1043)
    args_574991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 26), 'args', False)
    # Processing the call keyword arguments (line 1043)
    kwargs_574992 = {}
    # Getting the type of 'argstoarray' (line 1043)
    argstoarray_574990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 13), 'argstoarray', False)
    # Calling argstoarray(args, kwargs) (line 1043)
    argstoarray_call_result_574993 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 13), argstoarray_574990, *[args_574991], **kwargs_574992)
    
    # Assigning a type to the variable 'output' (line 1043)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 4), 'output', argstoarray_call_result_574993)
    
    # Assigning a Call to a Name (line 1044):
    
    # Assigning a Call to a Name (line 1044):
    
    # Call to masked_equal(...): (line 1044)
    # Processing the call arguments (line 1044)
    
    # Call to rankdata(...): (line 1044)
    # Processing the call arguments (line 1044)
    # Getting the type of 'output' (line 1044)
    output_574997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 37), 'output', False)
    # Processing the call keyword arguments (line 1044)
    # Getting the type of 'False' (line 1044)
    False_574998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 57), 'False', False)
    keyword_574999 = False_574998
    kwargs_575000 = {'use_missing': keyword_574999}
    # Getting the type of 'rankdata' (line 1044)
    rankdata_574996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 28), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 1044)
    rankdata_call_result_575001 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 28), rankdata_574996, *[output_574997], **kwargs_575000)
    
    int_575002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 65), 'int')
    # Processing the call keyword arguments (line 1044)
    kwargs_575003 = {}
    # Getting the type of 'ma' (line 1044)
    ma_574994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 12), 'ma', False)
    # Obtaining the member 'masked_equal' of a type (line 1044)
    masked_equal_574995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 12), ma_574994, 'masked_equal')
    # Calling masked_equal(args, kwargs) (line 1044)
    masked_equal_call_result_575004 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 12), masked_equal_574995, *[rankdata_call_result_575001, int_575002], **kwargs_575003)
    
    # Assigning a type to the variable 'ranks' (line 1044)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 4), 'ranks', masked_equal_call_result_575004)
    
    # Assigning a Call to a Name (line 1045):
    
    # Assigning a Call to a Name (line 1045):
    
    # Call to sum(...): (line 1045)
    # Processing the call arguments (line 1045)
    int_575007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 22), 'int')
    # Processing the call keyword arguments (line 1045)
    kwargs_575008 = {}
    # Getting the type of 'ranks' (line 1045)
    ranks_575005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 12), 'ranks', False)
    # Obtaining the member 'sum' of a type (line 1045)
    sum_575006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 12), ranks_575005, 'sum')
    # Calling sum(args, kwargs) (line 1045)
    sum_call_result_575009 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 12), sum_575006, *[int_575007], **kwargs_575008)
    
    # Assigning a type to the variable 'sumrk' (line 1045)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 4), 'sumrk', sum_call_result_575009)
    
    # Assigning a Call to a Name (line 1046):
    
    # Assigning a Call to a Name (line 1046):
    
    # Call to count(...): (line 1046)
    # Processing the call arguments (line 1046)
    int_575012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 23), 'int')
    # Processing the call keyword arguments (line 1046)
    kwargs_575013 = {}
    # Getting the type of 'ranks' (line 1046)
    ranks_575010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 11), 'ranks', False)
    # Obtaining the member 'count' of a type (line 1046)
    count_575011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 11), ranks_575010, 'count')
    # Calling count(args, kwargs) (line 1046)
    count_call_result_575014 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 11), count_575011, *[int_575012], **kwargs_575013)
    
    # Assigning a type to the variable 'ngrp' (line 1046)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 4), 'ngrp', count_call_result_575014)
    
    # Assigning a Call to a Name (line 1047):
    
    # Assigning a Call to a Name (line 1047):
    
    # Call to count(...): (line 1047)
    # Processing the call keyword arguments (line 1047)
    kwargs_575017 = {}
    # Getting the type of 'ranks' (line 1047)
    ranks_575015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 11), 'ranks', False)
    # Obtaining the member 'count' of a type (line 1047)
    count_575016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 11), ranks_575015, 'count')
    # Calling count(args, kwargs) (line 1047)
    count_call_result_575018 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 11), count_575016, *[], **kwargs_575017)
    
    # Assigning a type to the variable 'ntot' (line 1047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'ntot', count_call_result_575018)
    
    # Assigning a BinOp to a Name (line 1048):
    
    # Assigning a BinOp to a Name (line 1048):
    float_575019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 8), 'float')
    # Getting the type of 'ntot' (line 1048)
    ntot_575020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 13), 'ntot')
    # Getting the type of 'ntot' (line 1048)
    ntot_575021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 19), 'ntot')
    int_575022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 24), 'int')
    # Applying the binary operator '+' (line 1048)
    result_add_575023 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 19), '+', ntot_575021, int_575022)
    
    # Applying the binary operator '*' (line 1048)
    result_mul_575024 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 13), '*', ntot_575020, result_add_575023)
    
    # Applying the binary operator 'div' (line 1048)
    result_div_575025 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 8), 'div', float_575019, result_mul_575024)
    
    
    # Call to sum(...): (line 1048)
    # Processing the call keyword arguments (line 1048)
    kwargs_575032 = {}
    # Getting the type of 'sumrk' (line 1048)
    sumrk_575026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 31), 'sumrk', False)
    int_575027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 38), 'int')
    # Applying the binary operator '**' (line 1048)
    result_pow_575028 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 31), '**', sumrk_575026, int_575027)
    
    # Getting the type of 'ngrp' (line 1048)
    ngrp_575029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 40), 'ngrp', False)
    # Applying the binary operator 'div' (line 1048)
    result_div_575030 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 31), 'div', result_pow_575028, ngrp_575029)
    
    # Obtaining the member 'sum' of a type (line 1048)
    sum_575031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 31), result_div_575030, 'sum')
    # Calling sum(args, kwargs) (line 1048)
    sum_call_result_575033 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 31), sum_575031, *[], **kwargs_575032)
    
    # Applying the binary operator '*' (line 1048)
    result_mul_575034 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 28), '*', result_div_575025, sum_call_result_575033)
    
    int_575035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 54), 'int')
    # Getting the type of 'ntot' (line 1048)
    ntot_575036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 57), 'ntot')
    int_575037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 62), 'int')
    # Applying the binary operator '+' (line 1048)
    result_add_575038 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 57), '+', ntot_575036, int_575037)
    
    # Applying the binary operator '*' (line 1048)
    result_mul_575039 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 54), '*', int_575035, result_add_575038)
    
    # Applying the binary operator '-' (line 1048)
    result_sub_575040 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 8), '-', result_mul_575034, result_mul_575039)
    
    # Assigning a type to the variable 'H' (line 1048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 4), 'H', result_sub_575040)
    
    # Assigning a Call to a Name (line 1050):
    
    # Assigning a Call to a Name (line 1050):
    
    # Call to count_tied_groups(...): (line 1050)
    # Processing the call arguments (line 1050)
    # Getting the type of 'ranks' (line 1050)
    ranks_575042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 29), 'ranks', False)
    # Processing the call keyword arguments (line 1050)
    kwargs_575043 = {}
    # Getting the type of 'count_tied_groups' (line 1050)
    count_tied_groups_575041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 11), 'count_tied_groups', False)
    # Calling count_tied_groups(args, kwargs) (line 1050)
    count_tied_groups_call_result_575044 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 11), count_tied_groups_575041, *[ranks_575042], **kwargs_575043)
    
    # Assigning a type to the variable 'ties' (line 1050)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 4), 'ties', count_tied_groups_call_result_575044)
    
    # Assigning a BinOp to a Name (line 1051):
    
    # Assigning a BinOp to a Name (line 1051):
    float_575045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 8), 'float')
    
    # Call to sum(...): (line 1051)
    # Processing the call arguments (line 1051)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 1051, 20, True)
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 1051)
    # Processing the call arguments (line 1051)
    # Getting the type of 'ties' (line 1051)
    ties_575056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 54), 'ties', False)
    # Processing the call keyword arguments (line 1051)
    kwargs_575057 = {}
    # Getting the type of 'iteritems' (line 1051)
    iteritems_575055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 44), 'iteritems', False)
    # Calling iteritems(args, kwargs) (line 1051)
    iteritems_call_result_575058 = invoke(stypy.reporting.localization.Localization(__file__, 1051, 44), iteritems_575055, *[ties_575056], **kwargs_575057)
    
    comprehension_575059 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1051, 20), iteritems_call_result_575058)
    # Assigning a type to the variable 'k' (line 1051)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 20), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1051, 20), comprehension_575059))
    # Assigning a type to the variable 'v' (line 1051)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 20), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1051, 20), comprehension_575059))
    # Getting the type of 'v' (line 1051)
    v_575048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 20), 'v', False)
    # Getting the type of 'k' (line 1051)
    k_575049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 23), 'k', False)
    int_575050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 26), 'int')
    # Applying the binary operator '**' (line 1051)
    result_pow_575051 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 23), '**', k_575049, int_575050)
    
    # Getting the type of 'k' (line 1051)
    k_575052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 28), 'k', False)
    # Applying the binary operator '-' (line 1051)
    result_sub_575053 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 23), '-', result_pow_575051, k_575052)
    
    # Applying the binary operator '*' (line 1051)
    result_mul_575054 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 20), '*', v_575048, result_sub_575053)
    
    list_575060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 20), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1051, 20), list_575060, result_mul_575054)
    # Processing the call keyword arguments (line 1051)
    kwargs_575061 = {}
    # Getting the type of 'np' (line 1051)
    np_575046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 13), 'np', False)
    # Obtaining the member 'sum' of a type (line 1051)
    sum_575047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 13), np_575046, 'sum')
    # Calling sum(args, kwargs) (line 1051)
    sum_call_result_575062 = invoke(stypy.reporting.localization.Localization(__file__, 1051, 13), sum_575047, *[list_575060], **kwargs_575061)
    
    
    # Call to float(...): (line 1051)
    # Processing the call arguments (line 1051)
    # Getting the type of 'ntot' (line 1051)
    ntot_575064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 67), 'ntot', False)
    int_575065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 73), 'int')
    # Applying the binary operator '**' (line 1051)
    result_pow_575066 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 67), '**', ntot_575064, int_575065)
    
    # Getting the type of 'ntot' (line 1051)
    ntot_575067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 75), 'ntot', False)
    # Applying the binary operator '-' (line 1051)
    result_sub_575068 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 67), '-', result_pow_575066, ntot_575067)
    
    # Processing the call keyword arguments (line 1051)
    kwargs_575069 = {}
    # Getting the type of 'float' (line 1051)
    float_575063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 61), 'float', False)
    # Calling float(args, kwargs) (line 1051)
    float_call_result_575070 = invoke(stypy.reporting.localization.Localization(__file__, 1051, 61), float_575063, *[result_sub_575068], **kwargs_575069)
    
    # Applying the binary operator 'div' (line 1051)
    result_div_575071 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 13), 'div', sum_call_result_575062, float_call_result_575070)
    
    # Applying the binary operator '-' (line 1051)
    result_sub_575072 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 8), '-', float_575045, result_div_575071)
    
    # Assigning a type to the variable 'T' (line 1051)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 4), 'T', result_sub_575072)
    
    
    # Getting the type of 'T' (line 1052)
    T_575073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 7), 'T')
    int_575074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 12), 'int')
    # Applying the binary operator '==' (line 1052)
    result_eq_575075 = python_operator(stypy.reporting.localization.Localization(__file__, 1052, 7), '==', T_575073, int_575074)
    
    # Testing the type of an if condition (line 1052)
    if_condition_575076 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1052, 4), result_eq_575075)
    # Assigning a type to the variable 'if_condition_575076' (line 1052)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 4), 'if_condition_575076', if_condition_575076)
    # SSA begins for if statement (line 1052)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1053)
    # Processing the call arguments (line 1053)
    str_575078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1053, 25), 'str', 'All numbers are identical in kruskal')
    # Processing the call keyword arguments (line 1053)
    kwargs_575079 = {}
    # Getting the type of 'ValueError' (line 1053)
    ValueError_575077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1053)
    ValueError_call_result_575080 = invoke(stypy.reporting.localization.Localization(__file__, 1053, 14), ValueError_575077, *[str_575078], **kwargs_575079)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1053, 8), ValueError_call_result_575080, 'raise parameter', BaseException)
    # SSA join for if statement (line 1052)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'H' (line 1055)
    H_575081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 4), 'H')
    # Getting the type of 'T' (line 1055)
    T_575082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 9), 'T')
    # Applying the binary operator 'div=' (line 1055)
    result_div_575083 = python_operator(stypy.reporting.localization.Localization(__file__, 1055, 4), 'div=', H_575081, T_575082)
    # Assigning a type to the variable 'H' (line 1055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 4), 'H', result_div_575083)
    
    
    # Assigning a BinOp to a Name (line 1056):
    
    # Assigning a BinOp to a Name (line 1056):
    
    # Call to len(...): (line 1056)
    # Processing the call arguments (line 1056)
    # Getting the type of 'output' (line 1056)
    output_575085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 13), 'output', False)
    # Processing the call keyword arguments (line 1056)
    kwargs_575086 = {}
    # Getting the type of 'len' (line 1056)
    len_575084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 9), 'len', False)
    # Calling len(args, kwargs) (line 1056)
    len_call_result_575087 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 9), len_575084, *[output_575085], **kwargs_575086)
    
    int_575088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1056, 23), 'int')
    # Applying the binary operator '-' (line 1056)
    result_sub_575089 = python_operator(stypy.reporting.localization.Localization(__file__, 1056, 9), '-', len_call_result_575087, int_575088)
    
    # Assigning a type to the variable 'df' (line 1056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 4), 'df', result_sub_575089)
    
    # Assigning a Call to a Name (line 1057):
    
    # Assigning a Call to a Name (line 1057):
    
    # Call to sf(...): (line 1057)
    # Processing the call arguments (line 1057)
    # Getting the type of 'H' (line 1057)
    H_575093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 33), 'H', False)
    # Getting the type of 'df' (line 1057)
    df_575094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 36), 'df', False)
    # Processing the call keyword arguments (line 1057)
    kwargs_575095 = {}
    # Getting the type of 'distributions' (line 1057)
    distributions_575090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 11), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 1057)
    chi2_575091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 11), distributions_575090, 'chi2')
    # Obtaining the member 'sf' of a type (line 1057)
    sf_575092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 11), chi2_575091, 'sf')
    # Calling sf(args, kwargs) (line 1057)
    sf_call_result_575096 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 11), sf_575092, *[H_575093, df_575094], **kwargs_575095)
    
    # Assigning a type to the variable 'prob' (line 1057)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 4), 'prob', sf_call_result_575096)
    
    # Call to KruskalResult(...): (line 1058)
    # Processing the call arguments (line 1058)
    # Getting the type of 'H' (line 1058)
    H_575098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 25), 'H', False)
    # Getting the type of 'prob' (line 1058)
    prob_575099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 28), 'prob', False)
    # Processing the call keyword arguments (line 1058)
    kwargs_575100 = {}
    # Getting the type of 'KruskalResult' (line 1058)
    KruskalResult_575097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 11), 'KruskalResult', False)
    # Calling KruskalResult(args, kwargs) (line 1058)
    KruskalResult_call_result_575101 = invoke(stypy.reporting.localization.Localization(__file__, 1058, 11), KruskalResult_575097, *[H_575098, prob_575099], **kwargs_575100)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1058)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 4), 'stypy_return_type', KruskalResult_call_result_575101)
    
    # ################# End of 'kruskal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kruskal' in the type store
    # Getting the type of 'stypy_return_type' (line 1020)
    stypy_return_type_575102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_575102)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kruskal'
    return stypy_return_type_575102

# Assigning a type to the variable 'kruskal' (line 1020)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1020, 0), 'kruskal', kruskal)

# Assigning a Name to a Name (line 1059):

# Assigning a Name to a Name (line 1059):
# Getting the type of 'kruskal' (line 1059)
kruskal_575103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 16), 'kruskal')
# Assigning a type to the variable 'kruskalwallis' (line 1059)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 0), 'kruskalwallis', kruskal_575103)

@norecursion
def ks_twosamp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_575104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1062, 41), 'str', 'two-sided')
    defaults = [str_575104]
    # Create a new context for function 'ks_twosamp'
    module_type_store = module_type_store.open_function_context('ks_twosamp', 1062, 0, False)
    
    # Passed parameters checking function
    ks_twosamp.stypy_localization = localization
    ks_twosamp.stypy_type_of_self = None
    ks_twosamp.stypy_type_store = module_type_store
    ks_twosamp.stypy_function_name = 'ks_twosamp'
    ks_twosamp.stypy_param_names_list = ['data1', 'data2', 'alternative']
    ks_twosamp.stypy_varargs_param_name = None
    ks_twosamp.stypy_kwargs_param_name = None
    ks_twosamp.stypy_call_defaults = defaults
    ks_twosamp.stypy_call_varargs = varargs
    ks_twosamp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ks_twosamp', ['data1', 'data2', 'alternative'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ks_twosamp', localization, ['data1', 'data2', 'alternative'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ks_twosamp(...)' code ##################

    str_575105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1084, (-1)), 'str', "\n    Computes the Kolmogorov-Smirnov test on two samples.\n\n    Missing values are discarded.\n\n    Parameters\n    ----------\n    data1 : array_like\n        First data set\n    data2 : array_like\n        Second data set\n    alternative : {'two-sided', 'less', 'greater'}, optional\n        Indicates the alternative hypothesis.  Default is 'two-sided'.\n\n    Returns\n    -------\n    d : float\n        Value of the Kolmogorov Smirnov test\n    p : float\n        Corresponding p-value.\n\n    ")
    
    # Assigning a Tuple to a Tuple (line 1085):
    
    # Assigning a Call to a Name (line 1085):
    
    # Call to asarray(...): (line 1085)
    # Processing the call arguments (line 1085)
    # Getting the type of 'data1' (line 1085)
    data1_575108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 33), 'data1', False)
    # Processing the call keyword arguments (line 1085)
    kwargs_575109 = {}
    # Getting the type of 'ma' (line 1085)
    ma_575106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 22), 'ma', False)
    # Obtaining the member 'asarray' of a type (line 1085)
    asarray_575107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 22), ma_575106, 'asarray')
    # Calling asarray(args, kwargs) (line 1085)
    asarray_call_result_575110 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 22), asarray_575107, *[data1_575108], **kwargs_575109)
    
    # Assigning a type to the variable 'tuple_assignment_571487' (line 1085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 4), 'tuple_assignment_571487', asarray_call_result_575110)
    
    # Assigning a Call to a Name (line 1085):
    
    # Call to asarray(...): (line 1085)
    # Processing the call arguments (line 1085)
    # Getting the type of 'data2' (line 1085)
    data2_575113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 52), 'data2', False)
    # Processing the call keyword arguments (line 1085)
    kwargs_575114 = {}
    # Getting the type of 'ma' (line 1085)
    ma_575111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 41), 'ma', False)
    # Obtaining the member 'asarray' of a type (line 1085)
    asarray_575112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 41), ma_575111, 'asarray')
    # Calling asarray(args, kwargs) (line 1085)
    asarray_call_result_575115 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 41), asarray_575112, *[data2_575113], **kwargs_575114)
    
    # Assigning a type to the variable 'tuple_assignment_571488' (line 1085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 4), 'tuple_assignment_571488', asarray_call_result_575115)
    
    # Assigning a Name to a Name (line 1085):
    # Getting the type of 'tuple_assignment_571487' (line 1085)
    tuple_assignment_571487_575116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 4), 'tuple_assignment_571487')
    # Assigning a type to the variable 'data1' (line 1085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 5), 'data1', tuple_assignment_571487_575116)
    
    # Assigning a Name to a Name (line 1085):
    # Getting the type of 'tuple_assignment_571488' (line 1085)
    tuple_assignment_571488_575117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 4), 'tuple_assignment_571488')
    # Assigning a type to the variable 'data2' (line 1085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 12), 'data2', tuple_assignment_571488_575117)
    
    # Assigning a Tuple to a Tuple (line 1086):
    
    # Assigning a Call to a Name (line 1086):
    
    # Call to count(...): (line 1086)
    # Processing the call keyword arguments (line 1086)
    kwargs_575120 = {}
    # Getting the type of 'data1' (line 1086)
    data1_575118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 16), 'data1', False)
    # Obtaining the member 'count' of a type (line 1086)
    count_575119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 16), data1_575118, 'count')
    # Calling count(args, kwargs) (line 1086)
    count_call_result_575121 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 16), count_575119, *[], **kwargs_575120)
    
    # Assigning a type to the variable 'tuple_assignment_571489' (line 1086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 4), 'tuple_assignment_571489', count_call_result_575121)
    
    # Assigning a Call to a Name (line 1086):
    
    # Call to count(...): (line 1086)
    # Processing the call keyword arguments (line 1086)
    kwargs_575124 = {}
    # Getting the type of 'data2' (line 1086)
    data2_575122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 31), 'data2', False)
    # Obtaining the member 'count' of a type (line 1086)
    count_575123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 31), data2_575122, 'count')
    # Calling count(args, kwargs) (line 1086)
    count_call_result_575125 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 31), count_575123, *[], **kwargs_575124)
    
    # Assigning a type to the variable 'tuple_assignment_571490' (line 1086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 4), 'tuple_assignment_571490', count_call_result_575125)
    
    # Assigning a Name to a Name (line 1086):
    # Getting the type of 'tuple_assignment_571489' (line 1086)
    tuple_assignment_571489_575126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 4), 'tuple_assignment_571489')
    # Assigning a type to the variable 'n1' (line 1086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 5), 'n1', tuple_assignment_571489_575126)
    
    # Assigning a Name to a Name (line 1086):
    # Getting the type of 'tuple_assignment_571490' (line 1086)
    tuple_assignment_571490_575127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 4), 'tuple_assignment_571490')
    # Assigning a type to the variable 'n2' (line 1086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 9), 'n2', tuple_assignment_571490_575127)
    
    # Assigning a BinOp to a Name (line 1087):
    
    # Assigning a BinOp to a Name (line 1087):
    # Getting the type of 'n1' (line 1087)
    n1_575128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 9), 'n1')
    # Getting the type of 'n2' (line 1087)
    n2_575129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 12), 'n2')
    # Applying the binary operator '*' (line 1087)
    result_mul_575130 = python_operator(stypy.reporting.localization.Localization(__file__, 1087, 9), '*', n1_575128, n2_575129)
    
    
    # Call to float(...): (line 1087)
    # Processing the call arguments (line 1087)
    # Getting the type of 'n1' (line 1087)
    n1_575132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 21), 'n1', False)
    # Getting the type of 'n2' (line 1087)
    n2_575133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 24), 'n2', False)
    # Applying the binary operator '+' (line 1087)
    result_add_575134 = python_operator(stypy.reporting.localization.Localization(__file__, 1087, 21), '+', n1_575132, n2_575133)
    
    # Processing the call keyword arguments (line 1087)
    kwargs_575135 = {}
    # Getting the type of 'float' (line 1087)
    float_575131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 15), 'float', False)
    # Calling float(args, kwargs) (line 1087)
    float_call_result_575136 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 15), float_575131, *[result_add_575134], **kwargs_575135)
    
    # Applying the binary operator 'div' (line 1087)
    result_div_575137 = python_operator(stypy.reporting.localization.Localization(__file__, 1087, 14), 'div', result_mul_575130, float_call_result_575136)
    
    # Assigning a type to the variable 'n' (line 1087)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 4), 'n', result_div_575137)
    
    # Assigning a Call to a Name (line 1088):
    
    # Assigning a Call to a Name (line 1088):
    
    # Call to concatenate(...): (line 1088)
    # Processing the call arguments (line 1088)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1088)
    tuple_575140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1088)
    # Adding element type (line 1088)
    
    # Call to compressed(...): (line 1088)
    # Processing the call keyword arguments (line 1088)
    kwargs_575143 = {}
    # Getting the type of 'data1' (line 1088)
    data1_575141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 26), 'data1', False)
    # Obtaining the member 'compressed' of a type (line 1088)
    compressed_575142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 26), data1_575141, 'compressed')
    # Calling compressed(args, kwargs) (line 1088)
    compressed_call_result_575144 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 26), compressed_575142, *[], **kwargs_575143)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1088, 26), tuple_575140, compressed_call_result_575144)
    # Adding element type (line 1088)
    
    # Call to compressed(...): (line 1088)
    # Processing the call keyword arguments (line 1088)
    kwargs_575147 = {}
    # Getting the type of 'data2' (line 1088)
    data2_575145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 46), 'data2', False)
    # Obtaining the member 'compressed' of a type (line 1088)
    compressed_575146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 46), data2_575145, 'compressed')
    # Calling compressed(args, kwargs) (line 1088)
    compressed_call_result_575148 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 46), compressed_575146, *[], **kwargs_575147)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1088, 26), tuple_575140, compressed_call_result_575148)
    
    # Processing the call keyword arguments (line 1088)
    kwargs_575149 = {}
    # Getting the type of 'ma' (line 1088)
    ma_575138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 10), 'ma', False)
    # Obtaining the member 'concatenate' of a type (line 1088)
    concatenate_575139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 10), ma_575138, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1088)
    concatenate_call_result_575150 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 10), concatenate_575139, *[tuple_575140], **kwargs_575149)
    
    # Assigning a type to the variable 'mix' (line 1088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'mix', concatenate_call_result_575150)
    
    # Assigning a Call to a Name (line 1089):
    
    # Assigning a Call to a Name (line 1089):
    
    # Call to argsort(...): (line 1089)
    # Processing the call keyword arguments (line 1089)
    str_575153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 31), 'str', 'mergesort')
    keyword_575154 = str_575153
    kwargs_575155 = {'kind': keyword_575154}
    # Getting the type of 'mix' (line 1089)
    mix_575151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 14), 'mix', False)
    # Obtaining the member 'argsort' of a type (line 1089)
    argsort_575152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 14), mix_575151, 'argsort')
    # Calling argsort(args, kwargs) (line 1089)
    argsort_call_result_575156 = invoke(stypy.reporting.localization.Localization(__file__, 1089, 14), argsort_575152, *[], **kwargs_575155)
    
    # Assigning a type to the variable 'mixsort' (line 1089)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 4), 'mixsort', argsort_call_result_575156)
    
    # Assigning a Call to a Name (line 1090):
    
    # Assigning a Call to a Name (line 1090):
    
    # Call to cumsum(...): (line 1090)
    # Processing the call keyword arguments (line 1090)
    kwargs_575171 = {}
    
    # Call to where(...): (line 1090)
    # Processing the call arguments (line 1090)
    
    # Getting the type of 'mixsort' (line 1090)
    mixsort_575159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 20), 'mixsort', False)
    # Getting the type of 'n1' (line 1090)
    n1_575160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 30), 'n1', False)
    # Applying the binary operator '<' (line 1090)
    result_lt_575161 = python_operator(stypy.reporting.localization.Localization(__file__, 1090, 20), '<', mixsort_575159, n1_575160)
    
    float_575162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 34), 'float')
    # Getting the type of 'n1' (line 1090)
    n1_575163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 37), 'n1', False)
    # Applying the binary operator 'div' (line 1090)
    result_div_575164 = python_operator(stypy.reporting.localization.Localization(__file__, 1090, 34), 'div', float_575162, n1_575163)
    
    float_575165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 41), 'float')
    # Getting the type of 'n2' (line 1090)
    n2_575166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 45), 'n2', False)
    # Applying the binary operator 'div' (line 1090)
    result_div_575167 = python_operator(stypy.reporting.localization.Localization(__file__, 1090, 41), 'div', float_575165, n2_575166)
    
    # Processing the call keyword arguments (line 1090)
    kwargs_575168 = {}
    # Getting the type of 'np' (line 1090)
    np_575157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 11), 'np', False)
    # Obtaining the member 'where' of a type (line 1090)
    where_575158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 11), np_575157, 'where')
    # Calling where(args, kwargs) (line 1090)
    where_call_result_575169 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 11), where_575158, *[result_lt_575161, result_div_575164, result_div_575167], **kwargs_575168)
    
    # Obtaining the member 'cumsum' of a type (line 1090)
    cumsum_575170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 11), where_call_result_575169, 'cumsum')
    # Calling cumsum(args, kwargs) (line 1090)
    cumsum_call_result_575172 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 11), cumsum_575170, *[], **kwargs_575171)
    
    # Assigning a type to the variable 'csum' (line 1090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 4), 'csum', cumsum_call_result_575172)
    
    
    
    # Call to len(...): (line 1092)
    # Processing the call arguments (line 1092)
    
    # Call to unique(...): (line 1092)
    # Processing the call arguments (line 1092)
    # Getting the type of 'mix' (line 1092)
    mix_575176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 21), 'mix', False)
    # Processing the call keyword arguments (line 1092)
    kwargs_575177 = {}
    # Getting the type of 'np' (line 1092)
    np_575174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 11), 'np', False)
    # Obtaining the member 'unique' of a type (line 1092)
    unique_575175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 11), np_575174, 'unique')
    # Calling unique(args, kwargs) (line 1092)
    unique_call_result_575178 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 11), unique_575175, *[mix_575176], **kwargs_575177)
    
    # Processing the call keyword arguments (line 1092)
    kwargs_575179 = {}
    # Getting the type of 'len' (line 1092)
    len_575173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 7), 'len', False)
    # Calling len(args, kwargs) (line 1092)
    len_call_result_575180 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 7), len_575173, *[unique_call_result_575178], **kwargs_575179)
    
    # Getting the type of 'n1' (line 1092)
    n1_575181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 30), 'n1')
    # Getting the type of 'n2' (line 1092)
    n2_575182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 33), 'n2')
    # Applying the binary operator '+' (line 1092)
    result_add_575183 = python_operator(stypy.reporting.localization.Localization(__file__, 1092, 30), '+', n1_575181, n2_575182)
    
    # Applying the binary operator '<' (line 1092)
    result_lt_575184 = python_operator(stypy.reporting.localization.Localization(__file__, 1092, 7), '<', len_call_result_575180, result_add_575183)
    
    # Testing the type of an if condition (line 1092)
    if_condition_575185 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1092, 4), result_lt_575184)
    # Assigning a type to the variable 'if_condition_575185' (line 1092)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 4), 'if_condition_575185', if_condition_575185)
    # SSA begins for if statement (line 1092)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1093):
    
    # Assigning a Subscript to a Name (line 1093):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1093)
    tuple_575186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1093)
    # Adding element type (line 1093)
    
    # Obtaining the type of the subscript
    int_575187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, 58), 'int')
    
    # Call to nonzero(...): (line 1093)
    # Processing the call keyword arguments (line 1093)
    kwargs_575197 = {}
    
    # Call to diff(...): (line 1093)
    # Processing the call arguments (line 1093)
    
    # Obtaining the type of the subscript
    # Getting the type of 'mixsort' (line 1093)
    mixsort_575190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 38), 'mixsort', False)
    # Getting the type of 'mix' (line 1093)
    mix_575191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 34), 'mix', False)
    # Obtaining the member '__getitem__' of a type (line 1093)
    getitem___575192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 34), mix_575191, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1093)
    subscript_call_result_575193 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 34), getitem___575192, mixsort_575190)
    
    # Processing the call keyword arguments (line 1093)
    kwargs_575194 = {}
    # Getting the type of 'np' (line 1093)
    np_575188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 26), 'np', False)
    # Obtaining the member 'diff' of a type (line 1093)
    diff_575189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 26), np_575188, 'diff')
    # Calling diff(args, kwargs) (line 1093)
    diff_call_result_575195 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 26), diff_575189, *[subscript_call_result_575193], **kwargs_575194)
    
    # Obtaining the member 'nonzero' of a type (line 1093)
    nonzero_575196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 26), diff_call_result_575195, 'nonzero')
    # Calling nonzero(args, kwargs) (line 1093)
    nonzero_call_result_575198 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 26), nonzero_575196, *[], **kwargs_575197)
    
    # Obtaining the member '__getitem__' of a type (line 1093)
    getitem___575199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 26), nonzero_call_result_575198, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1093)
    subscript_call_result_575200 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 26), getitem___575199, int_575187)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1093, 26), tuple_575186, subscript_call_result_575200)
    # Adding element type (line 1093)
    int_575201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, 61), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1093, 26), tuple_575186, int_575201)
    
    # Getting the type of 'np' (line 1093)
    np_575202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 20), 'np')
    # Obtaining the member 'r_' of a type (line 1093)
    r__575203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 20), np_575202, 'r_')
    # Obtaining the member '__getitem__' of a type (line 1093)
    getitem___575204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 20), r__575203, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1093)
    subscript_call_result_575205 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 20), getitem___575204, tuple_575186)
    
    # Getting the type of 'csum' (line 1093)
    csum_575206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 15), 'csum')
    # Obtaining the member '__getitem__' of a type (line 1093)
    getitem___575207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 15), csum_575206, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1093)
    subscript_call_result_575208 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 15), getitem___575207, subscript_call_result_575205)
    
    # Assigning a type to the variable 'csum' (line 1093)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 8), 'csum', subscript_call_result_575208)
    # SSA join for if statement (line 1092)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1095):
    
    # Assigning a Subscript to a Name (line 1095):
    
    # Obtaining the type of the subscript
    int_575209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 43), 'int')
    
    # Call to lower(...): (line 1095)
    # Processing the call keyword arguments (line 1095)
    kwargs_575215 = {}
    
    # Call to str(...): (line 1095)
    # Processing the call arguments (line 1095)
    # Getting the type of 'alternative' (line 1095)
    alternative_575211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 22), 'alternative', False)
    # Processing the call keyword arguments (line 1095)
    kwargs_575212 = {}
    # Getting the type of 'str' (line 1095)
    str_575210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 18), 'str', False)
    # Calling str(args, kwargs) (line 1095)
    str_call_result_575213 = invoke(stypy.reporting.localization.Localization(__file__, 1095, 18), str_575210, *[alternative_575211], **kwargs_575212)
    
    # Obtaining the member 'lower' of a type (line 1095)
    lower_575214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 18), str_call_result_575213, 'lower')
    # Calling lower(args, kwargs) (line 1095)
    lower_call_result_575216 = invoke(stypy.reporting.localization.Localization(__file__, 1095, 18), lower_575214, *[], **kwargs_575215)
    
    # Obtaining the member '__getitem__' of a type (line 1095)
    getitem___575217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 18), lower_call_result_575216, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1095)
    subscript_call_result_575218 = invoke(stypy.reporting.localization.Localization(__file__, 1095, 18), getitem___575217, int_575209)
    
    # Assigning a type to the variable 'alternative' (line 1095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 4), 'alternative', subscript_call_result_575218)
    
    
    # Getting the type of 'alternative' (line 1096)
    alternative_575219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 7), 'alternative')
    str_575220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 22), 'str', 't')
    # Applying the binary operator '==' (line 1096)
    result_eq_575221 = python_operator(stypy.reporting.localization.Localization(__file__, 1096, 7), '==', alternative_575219, str_575220)
    
    # Testing the type of an if condition (line 1096)
    if_condition_575222 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1096, 4), result_eq_575221)
    # Assigning a type to the variable 'if_condition_575222' (line 1096)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 4), 'if_condition_575222', if_condition_575222)
    # SSA begins for if statement (line 1096)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1097):
    
    # Assigning a Call to a Name (line 1097):
    
    # Call to max(...): (line 1097)
    # Processing the call keyword arguments (line 1097)
    kwargs_575229 = {}
    
    # Call to abs(...): (line 1097)
    # Processing the call arguments (line 1097)
    # Getting the type of 'csum' (line 1097)
    csum_575225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 19), 'csum', False)
    # Processing the call keyword arguments (line 1097)
    kwargs_575226 = {}
    # Getting the type of 'ma' (line 1097)
    ma_575223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 12), 'ma', False)
    # Obtaining the member 'abs' of a type (line 1097)
    abs_575224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 12), ma_575223, 'abs')
    # Calling abs(args, kwargs) (line 1097)
    abs_call_result_575227 = invoke(stypy.reporting.localization.Localization(__file__, 1097, 12), abs_575224, *[csum_575225], **kwargs_575226)
    
    # Obtaining the member 'max' of a type (line 1097)
    max_575228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 12), abs_call_result_575227, 'max')
    # Calling max(args, kwargs) (line 1097)
    max_call_result_575230 = invoke(stypy.reporting.localization.Localization(__file__, 1097, 12), max_575228, *[], **kwargs_575229)
    
    # Assigning a type to the variable 'd' (line 1097)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1097, 8), 'd', max_call_result_575230)
    
    # Assigning a Call to a Name (line 1098):
    
    # Assigning a Call to a Name (line 1098):
    
    # Call to kolmogorov(...): (line 1098)
    # Processing the call arguments (line 1098)
    
    # Call to sqrt(...): (line 1098)
    # Processing the call arguments (line 1098)
    # Getting the type of 'n' (line 1098)
    n_575235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 42), 'n', False)
    # Processing the call keyword arguments (line 1098)
    kwargs_575236 = {}
    # Getting the type of 'np' (line 1098)
    np_575233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 34), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1098)
    sqrt_575234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1098, 34), np_575233, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1098)
    sqrt_call_result_575237 = invoke(stypy.reporting.localization.Localization(__file__, 1098, 34), sqrt_575234, *[n_575235], **kwargs_575236)
    
    # Getting the type of 'd' (line 1098)
    d_575238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 45), 'd', False)
    # Applying the binary operator '*' (line 1098)
    result_mul_575239 = python_operator(stypy.reporting.localization.Localization(__file__, 1098, 34), '*', sqrt_call_result_575237, d_575238)
    
    # Processing the call keyword arguments (line 1098)
    kwargs_575240 = {}
    # Getting the type of 'special' (line 1098)
    special_575231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 15), 'special', False)
    # Obtaining the member 'kolmogorov' of a type (line 1098)
    kolmogorov_575232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1098, 15), special_575231, 'kolmogorov')
    # Calling kolmogorov(args, kwargs) (line 1098)
    kolmogorov_call_result_575241 = invoke(stypy.reporting.localization.Localization(__file__, 1098, 15), kolmogorov_575232, *[result_mul_575239], **kwargs_575240)
    
    # Assigning a type to the variable 'prob' (line 1098)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 8), 'prob', kolmogorov_call_result_575241)
    # SSA branch for the else part of an if statement (line 1096)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'alternative' (line 1099)
    alternative_575242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 9), 'alternative')
    str_575243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1099, 24), 'str', 'l')
    # Applying the binary operator '==' (line 1099)
    result_eq_575244 = python_operator(stypy.reporting.localization.Localization(__file__, 1099, 9), '==', alternative_575242, str_575243)
    
    # Testing the type of an if condition (line 1099)
    if_condition_575245 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1099, 9), result_eq_575244)
    # Assigning a type to the variable 'if_condition_575245' (line 1099)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 9), 'if_condition_575245', if_condition_575245)
    # SSA begins for if statement (line 1099)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a UnaryOp to a Name (line 1100):
    
    # Assigning a UnaryOp to a Name (line 1100):
    
    
    # Call to min(...): (line 1100)
    # Processing the call keyword arguments (line 1100)
    kwargs_575248 = {}
    # Getting the type of 'csum' (line 1100)
    csum_575246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 13), 'csum', False)
    # Obtaining the member 'min' of a type (line 1100)
    min_575247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 13), csum_575246, 'min')
    # Calling min(args, kwargs) (line 1100)
    min_call_result_575249 = invoke(stypy.reporting.localization.Localization(__file__, 1100, 13), min_575247, *[], **kwargs_575248)
    
    # Applying the 'usub' unary operator (line 1100)
    result___neg___575250 = python_operator(stypy.reporting.localization.Localization(__file__, 1100, 12), 'usub', min_call_result_575249)
    
    # Assigning a type to the variable 'd' (line 1100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1100, 8), 'd', result___neg___575250)
    
    # Assigning a Call to a Name (line 1101):
    
    # Assigning a Call to a Name (line 1101):
    
    # Call to exp(...): (line 1101)
    # Processing the call arguments (line 1101)
    int_575253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 22), 'int')
    # Getting the type of 'n' (line 1101)
    n_575254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 25), 'n', False)
    # Applying the binary operator '*' (line 1101)
    result_mul_575255 = python_operator(stypy.reporting.localization.Localization(__file__, 1101, 22), '*', int_575253, n_575254)
    
    # Getting the type of 'd' (line 1101)
    d_575256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 27), 'd', False)
    int_575257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 30), 'int')
    # Applying the binary operator '**' (line 1101)
    result_pow_575258 = python_operator(stypy.reporting.localization.Localization(__file__, 1101, 27), '**', d_575256, int_575257)
    
    # Applying the binary operator '*' (line 1101)
    result_mul_575259 = python_operator(stypy.reporting.localization.Localization(__file__, 1101, 26), '*', result_mul_575255, result_pow_575258)
    
    # Processing the call keyword arguments (line 1101)
    kwargs_575260 = {}
    # Getting the type of 'np' (line 1101)
    np_575251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 15), 'np', False)
    # Obtaining the member 'exp' of a type (line 1101)
    exp_575252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 15), np_575251, 'exp')
    # Calling exp(args, kwargs) (line 1101)
    exp_call_result_575261 = invoke(stypy.reporting.localization.Localization(__file__, 1101, 15), exp_575252, *[result_mul_575259], **kwargs_575260)
    
    # Assigning a type to the variable 'prob' (line 1101)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 8), 'prob', exp_call_result_575261)
    # SSA branch for the else part of an if statement (line 1099)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'alternative' (line 1102)
    alternative_575262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 9), 'alternative')
    str_575263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 24), 'str', 'g')
    # Applying the binary operator '==' (line 1102)
    result_eq_575264 = python_operator(stypy.reporting.localization.Localization(__file__, 1102, 9), '==', alternative_575262, str_575263)
    
    # Testing the type of an if condition (line 1102)
    if_condition_575265 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1102, 9), result_eq_575264)
    # Assigning a type to the variable 'if_condition_575265' (line 1102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1102, 9), 'if_condition_575265', if_condition_575265)
    # SSA begins for if statement (line 1102)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1103):
    
    # Assigning a Call to a Name (line 1103):
    
    # Call to max(...): (line 1103)
    # Processing the call keyword arguments (line 1103)
    kwargs_575268 = {}
    # Getting the type of 'csum' (line 1103)
    csum_575266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 12), 'csum', False)
    # Obtaining the member 'max' of a type (line 1103)
    max_575267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 12), csum_575266, 'max')
    # Calling max(args, kwargs) (line 1103)
    max_call_result_575269 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 12), max_575267, *[], **kwargs_575268)
    
    # Assigning a type to the variable 'd' (line 1103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 8), 'd', max_call_result_575269)
    
    # Assigning a Call to a Name (line 1104):
    
    # Assigning a Call to a Name (line 1104):
    
    # Call to exp(...): (line 1104)
    # Processing the call arguments (line 1104)
    int_575272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1104, 22), 'int')
    # Getting the type of 'n' (line 1104)
    n_575273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 25), 'n', False)
    # Applying the binary operator '*' (line 1104)
    result_mul_575274 = python_operator(stypy.reporting.localization.Localization(__file__, 1104, 22), '*', int_575272, n_575273)
    
    # Getting the type of 'd' (line 1104)
    d_575275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 27), 'd', False)
    int_575276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1104, 30), 'int')
    # Applying the binary operator '**' (line 1104)
    result_pow_575277 = python_operator(stypy.reporting.localization.Localization(__file__, 1104, 27), '**', d_575275, int_575276)
    
    # Applying the binary operator '*' (line 1104)
    result_mul_575278 = python_operator(stypy.reporting.localization.Localization(__file__, 1104, 26), '*', result_mul_575274, result_pow_575277)
    
    # Processing the call keyword arguments (line 1104)
    kwargs_575279 = {}
    # Getting the type of 'np' (line 1104)
    np_575270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 15), 'np', False)
    # Obtaining the member 'exp' of a type (line 1104)
    exp_575271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 15), np_575270, 'exp')
    # Calling exp(args, kwargs) (line 1104)
    exp_call_result_575280 = invoke(stypy.reporting.localization.Localization(__file__, 1104, 15), exp_575271, *[result_mul_575278], **kwargs_575279)
    
    # Assigning a type to the variable 'prob' (line 1104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1104, 8), 'prob', exp_call_result_575280)
    # SSA branch for the else part of an if statement (line 1102)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1106)
    # Processing the call arguments (line 1106)
    str_575282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, 25), 'str', "Invalid value for the alternative hypothesis: should be in 'two-sided', 'less' or 'greater'")
    # Processing the call keyword arguments (line 1106)
    kwargs_575283 = {}
    # Getting the type of 'ValueError' (line 1106)
    ValueError_575281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1106)
    ValueError_call_result_575284 = invoke(stypy.reporting.localization.Localization(__file__, 1106, 14), ValueError_575281, *[str_575282], **kwargs_575283)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1106, 8), ValueError_call_result_575284, 'raise parameter', BaseException)
    # SSA join for if statement (line 1102)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1099)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1096)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1109)
    tuple_575285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1109)
    # Adding element type (line 1109)
    # Getting the type of 'd' (line 1109)
    d_575286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 12), 'd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 12), tuple_575285, d_575286)
    # Adding element type (line 1109)
    # Getting the type of 'prob' (line 1109)
    prob_575287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 15), 'prob')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 12), tuple_575285, prob_575287)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 4), 'stypy_return_type', tuple_575285)
    
    # ################# End of 'ks_twosamp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ks_twosamp' in the type store
    # Getting the type of 'stypy_return_type' (line 1062)
    stypy_return_type_575288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_575288)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ks_twosamp'
    return stypy_return_type_575288

# Assigning a type to the variable 'ks_twosamp' (line 1062)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 0), 'ks_twosamp', ks_twosamp)

# Assigning a Name to a Name (line 1110):

# Assigning a Name to a Name (line 1110):
# Getting the type of 'ks_twosamp' (line 1110)
ks_twosamp_575289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 11), 'ks_twosamp')
# Assigning a type to the variable 'ks_2samp' (line 1110)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 0), 'ks_2samp', ks_twosamp_575289)

@norecursion
def trima(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1113)
    None_575290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 20), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1113)
    tuple_575291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1113)
    # Adding element type (line 1113)
    # Getting the type of 'True' (line 1113)
    True_575292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 37), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1113, 37), tuple_575291, True_575292)
    # Adding element type (line 1113)
    # Getting the type of 'True' (line 1113)
    True_575293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 42), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1113, 37), tuple_575291, True_575293)
    
    defaults = [None_575290, tuple_575291]
    # Create a new context for function 'trima'
    module_type_store = module_type_store.open_function_context('trima', 1113, 0, False)
    
    # Passed parameters checking function
    trima.stypy_localization = localization
    trima.stypy_type_of_self = None
    trima.stypy_type_store = module_type_store
    trima.stypy_function_name = 'trima'
    trima.stypy_param_names_list = ['a', 'limits', 'inclusive']
    trima.stypy_varargs_param_name = None
    trima.stypy_kwargs_param_name = None
    trima.stypy_call_defaults = defaults
    trima.stypy_call_varargs = varargs
    trima.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trima', ['a', 'limits', 'inclusive'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trima', localization, ['a', 'limits', 'inclusive'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trima(...)' code ##################

    str_575294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1131, (-1)), 'str', '\n    Trims an array by masking the data outside some given limits.\n\n    Returns a masked version of the input array.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    limits : {None, tuple}, optional\n        Tuple of (lower limit, upper limit) in absolute values.\n        Values of the input array lower (greater) than the lower (upper) limit\n        will be masked.  A limit is None indicates an open interval.\n    inclusive : (bool, bool) tuple, optional\n        Tuple of (lower flag, upper flag), indicating whether values exactly\n        equal to the lower (upper) limit are allowed.\n\n    ')
    
    # Assigning a Call to a Name (line 1132):
    
    # Assigning a Call to a Name (line 1132):
    
    # Call to asarray(...): (line 1132)
    # Processing the call arguments (line 1132)
    # Getting the type of 'a' (line 1132)
    a_575297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 19), 'a', False)
    # Processing the call keyword arguments (line 1132)
    kwargs_575298 = {}
    # Getting the type of 'ma' (line 1132)
    ma_575295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'ma', False)
    # Obtaining the member 'asarray' of a type (line 1132)
    asarray_575296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 8), ma_575295, 'asarray')
    # Calling asarray(args, kwargs) (line 1132)
    asarray_call_result_575299 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 8), asarray_575296, *[a_575297], **kwargs_575298)
    
    # Assigning a type to the variable 'a' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 4), 'a', asarray_call_result_575299)
    
    # Call to unshare_mask(...): (line 1133)
    # Processing the call keyword arguments (line 1133)
    kwargs_575302 = {}
    # Getting the type of 'a' (line 1133)
    a_575300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 4), 'a', False)
    # Obtaining the member 'unshare_mask' of a type (line 1133)
    unshare_mask_575301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 4), a_575300, 'unshare_mask')
    # Calling unshare_mask(args, kwargs) (line 1133)
    unshare_mask_call_result_575303 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 4), unshare_mask_575301, *[], **kwargs_575302)
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'limits' (line 1134)
    limits_575304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'limits')
    # Getting the type of 'None' (line 1134)
    None_575305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 18), 'None')
    # Applying the binary operator 'is' (line 1134)
    result_is__575306 = python_operator(stypy.reporting.localization.Localization(__file__, 1134, 8), 'is', limits_575304, None_575305)
    
    
    # Getting the type of 'limits' (line 1134)
    limits_575307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 28), 'limits')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1134)
    tuple_575308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1134)
    # Adding element type (line 1134)
    # Getting the type of 'None' (line 1134)
    None_575309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 39), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 39), tuple_575308, None_575309)
    # Adding element type (line 1134)
    # Getting the type of 'None' (line 1134)
    None_575310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 45), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 39), tuple_575308, None_575310)
    
    # Applying the binary operator '==' (line 1134)
    result_eq_575311 = python_operator(stypy.reporting.localization.Localization(__file__, 1134, 28), '==', limits_575307, tuple_575308)
    
    # Applying the binary operator 'or' (line 1134)
    result_or_keyword_575312 = python_operator(stypy.reporting.localization.Localization(__file__, 1134, 7), 'or', result_is__575306, result_eq_575311)
    
    # Testing the type of an if condition (line 1134)
    if_condition_575313 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1134, 4), result_or_keyword_575312)
    # Assigning a type to the variable 'if_condition_575313' (line 1134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 4), 'if_condition_575313', if_condition_575313)
    # SSA begins for if statement (line 1134)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'a' (line 1135)
    a_575314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 15), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 1135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 8), 'stypy_return_type', a_575314)
    # SSA join for if statement (line 1134)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Tuple (line 1137):
    
    # Assigning a Subscript to a Name (line 1137):
    
    # Obtaining the type of the subscript
    int_575315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, 4), 'int')
    # Getting the type of 'limits' (line 1137)
    limits_575316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 29), 'limits')
    # Obtaining the member '__getitem__' of a type (line 1137)
    getitem___575317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1137, 4), limits_575316, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1137)
    subscript_call_result_575318 = invoke(stypy.reporting.localization.Localization(__file__, 1137, 4), getitem___575317, int_575315)
    
    # Assigning a type to the variable 'tuple_var_assignment_571491' (line 1137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'tuple_var_assignment_571491', subscript_call_result_575318)
    
    # Assigning a Subscript to a Name (line 1137):
    
    # Obtaining the type of the subscript
    int_575319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, 4), 'int')
    # Getting the type of 'limits' (line 1137)
    limits_575320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 29), 'limits')
    # Obtaining the member '__getitem__' of a type (line 1137)
    getitem___575321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1137, 4), limits_575320, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1137)
    subscript_call_result_575322 = invoke(stypy.reporting.localization.Localization(__file__, 1137, 4), getitem___575321, int_575319)
    
    # Assigning a type to the variable 'tuple_var_assignment_571492' (line 1137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'tuple_var_assignment_571492', subscript_call_result_575322)
    
    # Assigning a Name to a Name (line 1137):
    # Getting the type of 'tuple_var_assignment_571491' (line 1137)
    tuple_var_assignment_571491_575323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'tuple_var_assignment_571491')
    # Assigning a type to the variable 'lower_lim' (line 1137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 5), 'lower_lim', tuple_var_assignment_571491_575323)
    
    # Assigning a Name to a Name (line 1137):
    # Getting the type of 'tuple_var_assignment_571492' (line 1137)
    tuple_var_assignment_571492_575324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'tuple_var_assignment_571492')
    # Assigning a type to the variable 'upper_lim' (line 1137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 16), 'upper_lim', tuple_var_assignment_571492_575324)
    
    # Assigning a Name to a Tuple (line 1138):
    
    # Assigning a Subscript to a Name (line 1138):
    
    # Obtaining the type of the subscript
    int_575325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 4), 'int')
    # Getting the type of 'inclusive' (line 1138)
    inclusive_575326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 27), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 1138)
    getitem___575327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 4), inclusive_575326, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1138)
    subscript_call_result_575328 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 4), getitem___575327, int_575325)
    
    # Assigning a type to the variable 'tuple_var_assignment_571493' (line 1138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 4), 'tuple_var_assignment_571493', subscript_call_result_575328)
    
    # Assigning a Subscript to a Name (line 1138):
    
    # Obtaining the type of the subscript
    int_575329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 4), 'int')
    # Getting the type of 'inclusive' (line 1138)
    inclusive_575330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 27), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 1138)
    getitem___575331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 4), inclusive_575330, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1138)
    subscript_call_result_575332 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 4), getitem___575331, int_575329)
    
    # Assigning a type to the variable 'tuple_var_assignment_571494' (line 1138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 4), 'tuple_var_assignment_571494', subscript_call_result_575332)
    
    # Assigning a Name to a Name (line 1138):
    # Getting the type of 'tuple_var_assignment_571493' (line 1138)
    tuple_var_assignment_571493_575333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 4), 'tuple_var_assignment_571493')
    # Assigning a type to the variable 'lower_in' (line 1138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 5), 'lower_in', tuple_var_assignment_571493_575333)
    
    # Assigning a Name to a Name (line 1138):
    # Getting the type of 'tuple_var_assignment_571494' (line 1138)
    tuple_var_assignment_571494_575334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 4), 'tuple_var_assignment_571494')
    # Assigning a type to the variable 'upper_in' (line 1138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 15), 'upper_in', tuple_var_assignment_571494_575334)
    
    # Assigning a Name to a Name (line 1139):
    
    # Assigning a Name to a Name (line 1139):
    # Getting the type of 'False' (line 1139)
    False_575335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 16), 'False')
    # Assigning a type to the variable 'condition' (line 1139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 4), 'condition', False_575335)
    
    # Type idiom detected: calculating its left and rigth part (line 1140)
    # Getting the type of 'lower_lim' (line 1140)
    lower_lim_575336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 4), 'lower_lim')
    # Getting the type of 'None' (line 1140)
    None_575337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 24), 'None')
    
    (may_be_575338, more_types_in_union_575339) = may_not_be_none(lower_lim_575336, None_575337)

    if may_be_575338:

        if more_types_in_union_575339:
            # Runtime conditional SSA (line 1140)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'lower_in' (line 1141)
        lower_in_575340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 11), 'lower_in')
        # Testing the type of an if condition (line 1141)
        if_condition_575341 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1141, 8), lower_in_575340)
        # Assigning a type to the variable 'if_condition_575341' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 8), 'if_condition_575341', if_condition_575341)
        # SSA begins for if statement (line 1141)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'condition' (line 1142)
        condition_575342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 12), 'condition')
        
        # Getting the type of 'a' (line 1142)
        a_575343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 26), 'a')
        # Getting the type of 'lower_lim' (line 1142)
        lower_lim_575344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 30), 'lower_lim')
        # Applying the binary operator '<' (line 1142)
        result_lt_575345 = python_operator(stypy.reporting.localization.Localization(__file__, 1142, 26), '<', a_575343, lower_lim_575344)
        
        # Applying the binary operator '|=' (line 1142)
        result_ior_575346 = python_operator(stypy.reporting.localization.Localization(__file__, 1142, 12), '|=', condition_575342, result_lt_575345)
        # Assigning a type to the variable 'condition' (line 1142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 12), 'condition', result_ior_575346)
        
        # SSA branch for the else part of an if statement (line 1141)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'condition' (line 1144)
        condition_575347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 12), 'condition')
        
        # Getting the type of 'a' (line 1144)
        a_575348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 26), 'a')
        # Getting the type of 'lower_lim' (line 1144)
        lower_lim_575349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 31), 'lower_lim')
        # Applying the binary operator '<=' (line 1144)
        result_le_575350 = python_operator(stypy.reporting.localization.Localization(__file__, 1144, 26), '<=', a_575348, lower_lim_575349)
        
        # Applying the binary operator '|=' (line 1144)
        result_ior_575351 = python_operator(stypy.reporting.localization.Localization(__file__, 1144, 12), '|=', condition_575347, result_le_575350)
        # Assigning a type to the variable 'condition' (line 1144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 12), 'condition', result_ior_575351)
        
        # SSA join for if statement (line 1141)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_575339:
            # SSA join for if statement (line 1140)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1146)
    # Getting the type of 'upper_lim' (line 1146)
    upper_lim_575352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 4), 'upper_lim')
    # Getting the type of 'None' (line 1146)
    None_575353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 24), 'None')
    
    (may_be_575354, more_types_in_union_575355) = may_not_be_none(upper_lim_575352, None_575353)

    if may_be_575354:

        if more_types_in_union_575355:
            # Runtime conditional SSA (line 1146)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'upper_in' (line 1147)
        upper_in_575356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 11), 'upper_in')
        # Testing the type of an if condition (line 1147)
        if_condition_575357 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1147, 8), upper_in_575356)
        # Assigning a type to the variable 'if_condition_575357' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'if_condition_575357', if_condition_575357)
        # SSA begins for if statement (line 1147)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'condition' (line 1148)
        condition_575358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 12), 'condition')
        
        # Getting the type of 'a' (line 1148)
        a_575359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 26), 'a')
        # Getting the type of 'upper_lim' (line 1148)
        upper_lim_575360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 30), 'upper_lim')
        # Applying the binary operator '>' (line 1148)
        result_gt_575361 = python_operator(stypy.reporting.localization.Localization(__file__, 1148, 26), '>', a_575359, upper_lim_575360)
        
        # Applying the binary operator '|=' (line 1148)
        result_ior_575362 = python_operator(stypy.reporting.localization.Localization(__file__, 1148, 12), '|=', condition_575358, result_gt_575361)
        # Assigning a type to the variable 'condition' (line 1148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 12), 'condition', result_ior_575362)
        
        # SSA branch for the else part of an if statement (line 1147)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'condition' (line 1150)
        condition_575363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 12), 'condition')
        
        # Getting the type of 'a' (line 1150)
        a_575364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 26), 'a')
        # Getting the type of 'upper_lim' (line 1150)
        upper_lim_575365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 31), 'upper_lim')
        # Applying the binary operator '>=' (line 1150)
        result_ge_575366 = python_operator(stypy.reporting.localization.Localization(__file__, 1150, 26), '>=', a_575364, upper_lim_575365)
        
        # Applying the binary operator '|=' (line 1150)
        result_ior_575367 = python_operator(stypy.reporting.localization.Localization(__file__, 1150, 12), '|=', condition_575363, result_ge_575366)
        # Assigning a type to the variable 'condition' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 12), 'condition', result_ior_575367)
        
        # SSA join for if statement (line 1147)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_575355:
            # SSA join for if statement (line 1146)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Subscript (line 1152):
    
    # Assigning a Name to a Subscript (line 1152):
    # Getting the type of 'masked' (line 1152)
    masked_575368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 32), 'masked')
    # Getting the type of 'a' (line 1152)
    a_575369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 4), 'a')
    
    # Call to filled(...): (line 1152)
    # Processing the call arguments (line 1152)
    # Getting the type of 'True' (line 1152)
    True_575372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 23), 'True', False)
    # Processing the call keyword arguments (line 1152)
    kwargs_575373 = {}
    # Getting the type of 'condition' (line 1152)
    condition_575370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 6), 'condition', False)
    # Obtaining the member 'filled' of a type (line 1152)
    filled_575371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 6), condition_575370, 'filled')
    # Calling filled(args, kwargs) (line 1152)
    filled_call_result_575374 = invoke(stypy.reporting.localization.Localization(__file__, 1152, 6), filled_575371, *[True_575372], **kwargs_575373)
    
    # Storing an element on a container (line 1152)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1152, 4), a_575369, (filled_call_result_575374, masked_575368))
    # Getting the type of 'a' (line 1153)
    a_575375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 4), 'stypy_return_type', a_575375)
    
    # ################# End of 'trima(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trima' in the type store
    # Getting the type of 'stypy_return_type' (line 1113)
    stypy_return_type_575376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_575376)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trima'
    return stypy_return_type_575376

# Assigning a type to the variable 'trima' (line 1113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 0), 'trima', trima)

@norecursion
def trimr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1156)
    None_575377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 20), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1156)
    tuple_575378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1156, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1156)
    # Adding element type (line 1156)
    # Getting the type of 'True' (line 1156)
    True_575379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 37), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1156, 37), tuple_575378, True_575379)
    # Adding element type (line 1156)
    # Getting the type of 'True' (line 1156)
    True_575380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 43), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1156, 37), tuple_575378, True_575380)
    
    # Getting the type of 'None' (line 1156)
    None_575381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 55), 'None')
    defaults = [None_575377, tuple_575378, None_575381]
    # Create a new context for function 'trimr'
    module_type_store = module_type_store.open_function_context('trimr', 1156, 0, False)
    
    # Passed parameters checking function
    trimr.stypy_localization = localization
    trimr.stypy_type_of_self = None
    trimr.stypy_type_store = module_type_store
    trimr.stypy_function_name = 'trimr'
    trimr.stypy_param_names_list = ['a', 'limits', 'inclusive', 'axis']
    trimr.stypy_varargs_param_name = None
    trimr.stypy_kwargs_param_name = None
    trimr.stypy_call_defaults = defaults
    trimr.stypy_call_varargs = varargs
    trimr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trimr', ['a', 'limits', 'inclusive', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trimr', localization, ['a', 'limits', 'inclusive', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trimr(...)' code ##################

    str_575382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1181, (-1)), 'str', '\n    Trims an array by masking some proportion of the data on each end.\n    Returns a masked version of the input array.\n\n    Parameters\n    ----------\n    a : sequence\n        Input array.\n    limits : {None, tuple}, optional\n        Tuple of the percentages to cut on each side of the array, with respect\n        to the number of unmasked data, as floats between 0. and 1.\n        Noting n the number of unmasked data before trimming, the\n        (n*limits[0])th smallest data and the (n*limits[1])th largest data are\n        masked, and the total number of unmasked data after trimming is\n        n*(1.-sum(limits)).  The value of one limit can be set to None to\n        indicate an open interval.\n    inclusive : {(True,True) tuple}, optional\n        Tuple of flags indicating whether the number of data being masked on\n        the left (right) end should be truncated (True) or rounded (False) to\n        integers.\n    axis : {None,int}, optional\n        Axis along which to trim. If None, the whole array is trimmed, but its\n        shape is maintained.\n\n    ')

    @norecursion
    def _trimr1D(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_trimr1D'
        module_type_store = module_type_store.open_function_context('_trimr1D', 1182, 4, False)
        
        # Passed parameters checking function
        _trimr1D.stypy_localization = localization
        _trimr1D.stypy_type_of_self = None
        _trimr1D.stypy_type_store = module_type_store
        _trimr1D.stypy_function_name = '_trimr1D'
        _trimr1D.stypy_param_names_list = ['a', 'low_limit', 'up_limit', 'low_inclusive', 'up_inclusive']
        _trimr1D.stypy_varargs_param_name = None
        _trimr1D.stypy_kwargs_param_name = None
        _trimr1D.stypy_call_defaults = defaults
        _trimr1D.stypy_call_varargs = varargs
        _trimr1D.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_trimr1D', ['a', 'low_limit', 'up_limit', 'low_inclusive', 'up_inclusive'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_trimr1D', localization, ['a', 'low_limit', 'up_limit', 'low_inclusive', 'up_inclusive'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_trimr1D(...)' code ##################

        
        # Assigning a Call to a Name (line 1183):
        
        # Assigning a Call to a Name (line 1183):
        
        # Call to count(...): (line 1183)
        # Processing the call keyword arguments (line 1183)
        kwargs_575385 = {}
        # Getting the type of 'a' (line 1183)
        a_575383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 12), 'a', False)
        # Obtaining the member 'count' of a type (line 1183)
        count_575384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 12), a_575383, 'count')
        # Calling count(args, kwargs) (line 1183)
        count_call_result_575386 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 12), count_575384, *[], **kwargs_575385)
        
        # Assigning a type to the variable 'n' (line 1183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1183, 8), 'n', count_call_result_575386)
        
        # Assigning a Call to a Name (line 1184):
        
        # Assigning a Call to a Name (line 1184):
        
        # Call to argsort(...): (line 1184)
        # Processing the call keyword arguments (line 1184)
        kwargs_575389 = {}
        # Getting the type of 'a' (line 1184)
        a_575387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 14), 'a', False)
        # Obtaining the member 'argsort' of a type (line 1184)
        argsort_575388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 14), a_575387, 'argsort')
        # Calling argsort(args, kwargs) (line 1184)
        argsort_call_result_575390 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 14), argsort_575388, *[], **kwargs_575389)
        
        # Assigning a type to the variable 'idx' (line 1184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 8), 'idx', argsort_call_result_575390)
        
        # Getting the type of 'low_limit' (line 1185)
        low_limit_575391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 11), 'low_limit')
        # Testing the type of an if condition (line 1185)
        if_condition_575392 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1185, 8), low_limit_575391)
        # Assigning a type to the variable 'if_condition_575392' (line 1185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 8), 'if_condition_575392', if_condition_575392)
        # SSA begins for if statement (line 1185)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'low_inclusive' (line 1186)
        low_inclusive_575393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 15), 'low_inclusive')
        # Testing the type of an if condition (line 1186)
        if_condition_575394 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1186, 12), low_inclusive_575393)
        # Assigning a type to the variable 'if_condition_575394' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 12), 'if_condition_575394', if_condition_575394)
        # SSA begins for if statement (line 1186)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1187):
        
        # Assigning a Call to a Name (line 1187):
        
        # Call to int(...): (line 1187)
        # Processing the call arguments (line 1187)
        # Getting the type of 'low_limit' (line 1187)
        low_limit_575396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 29), 'low_limit', False)
        # Getting the type of 'n' (line 1187)
        n_575397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 39), 'n', False)
        # Applying the binary operator '*' (line 1187)
        result_mul_575398 = python_operator(stypy.reporting.localization.Localization(__file__, 1187, 29), '*', low_limit_575396, n_575397)
        
        # Processing the call keyword arguments (line 1187)
        kwargs_575399 = {}
        # Getting the type of 'int' (line 1187)
        int_575395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 25), 'int', False)
        # Calling int(args, kwargs) (line 1187)
        int_call_result_575400 = invoke(stypy.reporting.localization.Localization(__file__, 1187, 25), int_575395, *[result_mul_575398], **kwargs_575399)
        
        # Assigning a type to the variable 'lowidx' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 16), 'lowidx', int_call_result_575400)
        # SSA branch for the else part of an if statement (line 1186)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1189):
        
        # Assigning a Call to a Name (line 1189):
        
        # Call to round(...): (line 1189)
        # Processing the call arguments (line 1189)
        # Getting the type of 'low_limit' (line 1189)
        low_limit_575403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 34), 'low_limit', False)
        # Getting the type of 'n' (line 1189)
        n_575404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 44), 'n', False)
        # Applying the binary operator '*' (line 1189)
        result_mul_575405 = python_operator(stypy.reporting.localization.Localization(__file__, 1189, 34), '*', low_limit_575403, n_575404)
        
        # Processing the call keyword arguments (line 1189)
        kwargs_575406 = {}
        # Getting the type of 'np' (line 1189)
        np_575401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 25), 'np', False)
        # Obtaining the member 'round' of a type (line 1189)
        round_575402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 25), np_575401, 'round')
        # Calling round(args, kwargs) (line 1189)
        round_call_result_575407 = invoke(stypy.reporting.localization.Localization(__file__, 1189, 25), round_575402, *[result_mul_575405], **kwargs_575406)
        
        # Assigning a type to the variable 'lowidx' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 16), 'lowidx', round_call_result_575407)
        # SSA join for if statement (line 1186)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 1190):
        
        # Assigning a Name to a Subscript (line 1190):
        # Getting the type of 'masked' (line 1190)
        masked_575408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 30), 'masked')
        # Getting the type of 'a' (line 1190)
        a_575409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 12), 'a')
        
        # Obtaining the type of the subscript
        # Getting the type of 'lowidx' (line 1190)
        lowidx_575410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 19), 'lowidx')
        slice_575411 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1190, 14), None, lowidx_575410, None)
        # Getting the type of 'idx' (line 1190)
        idx_575412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 14), 'idx')
        # Obtaining the member '__getitem__' of a type (line 1190)
        getitem___575413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 14), idx_575412, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1190)
        subscript_call_result_575414 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 14), getitem___575413, slice_575411)
        
        # Storing an element on a container (line 1190)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1190, 12), a_575409, (subscript_call_result_575414, masked_575408))
        # SSA join for if statement (line 1185)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1191)
        # Getting the type of 'up_limit' (line 1191)
        up_limit_575415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'up_limit')
        # Getting the type of 'None' (line 1191)
        None_575416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 27), 'None')
        
        (may_be_575417, more_types_in_union_575418) = may_not_be_none(up_limit_575415, None_575416)

        if may_be_575417:

            if more_types_in_union_575418:
                # Runtime conditional SSA (line 1191)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'up_inclusive' (line 1192)
            up_inclusive_575419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 15), 'up_inclusive')
            # Testing the type of an if condition (line 1192)
            if_condition_575420 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1192, 12), up_inclusive_575419)
            # Assigning a type to the variable 'if_condition_575420' (line 1192)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1192, 12), 'if_condition_575420', if_condition_575420)
            # SSA begins for if statement (line 1192)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 1193):
            
            # Assigning a BinOp to a Name (line 1193):
            # Getting the type of 'n' (line 1193)
            n_575421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 24), 'n')
            
            # Call to int(...): (line 1193)
            # Processing the call arguments (line 1193)
            # Getting the type of 'n' (line 1193)
            n_575423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 32), 'n', False)
            # Getting the type of 'up_limit' (line 1193)
            up_limit_575424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 34), 'up_limit', False)
            # Applying the binary operator '*' (line 1193)
            result_mul_575425 = python_operator(stypy.reporting.localization.Localization(__file__, 1193, 32), '*', n_575423, up_limit_575424)
            
            # Processing the call keyword arguments (line 1193)
            kwargs_575426 = {}
            # Getting the type of 'int' (line 1193)
            int_575422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 28), 'int', False)
            # Calling int(args, kwargs) (line 1193)
            int_call_result_575427 = invoke(stypy.reporting.localization.Localization(__file__, 1193, 28), int_575422, *[result_mul_575425], **kwargs_575426)
            
            # Applying the binary operator '-' (line 1193)
            result_sub_575428 = python_operator(stypy.reporting.localization.Localization(__file__, 1193, 24), '-', n_575421, int_call_result_575427)
            
            # Assigning a type to the variable 'upidx' (line 1193)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1193, 16), 'upidx', result_sub_575428)
            # SSA branch for the else part of an if statement (line 1192)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a BinOp to a Name (line 1195):
            
            # Assigning a BinOp to a Name (line 1195):
            # Getting the type of 'n' (line 1195)
            n_575429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 24), 'n')
            
            # Call to round(...): (line 1195)
            # Processing the call arguments (line 1195)
            # Getting the type of 'n' (line 1195)
            n_575432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 37), 'n', False)
            # Getting the type of 'up_limit' (line 1195)
            up_limit_575433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 39), 'up_limit', False)
            # Applying the binary operator '*' (line 1195)
            result_mul_575434 = python_operator(stypy.reporting.localization.Localization(__file__, 1195, 37), '*', n_575432, up_limit_575433)
            
            # Processing the call keyword arguments (line 1195)
            kwargs_575435 = {}
            # Getting the type of 'np' (line 1195)
            np_575430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 28), 'np', False)
            # Obtaining the member 'round' of a type (line 1195)
            round_575431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 28), np_575430, 'round')
            # Calling round(args, kwargs) (line 1195)
            round_call_result_575436 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 28), round_575431, *[result_mul_575434], **kwargs_575435)
            
            # Applying the binary operator '-' (line 1195)
            result_sub_575437 = python_operator(stypy.reporting.localization.Localization(__file__, 1195, 24), '-', n_575429, round_call_result_575436)
            
            # Assigning a type to the variable 'upidx' (line 1195)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 16), 'upidx', result_sub_575437)
            # SSA join for if statement (line 1192)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Name to a Subscript (line 1196):
            
            # Assigning a Name to a Subscript (line 1196):
            # Getting the type of 'masked' (line 1196)
            masked_575438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 29), 'masked')
            # Getting the type of 'a' (line 1196)
            a_575439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 12), 'a')
            
            # Obtaining the type of the subscript
            # Getting the type of 'upidx' (line 1196)
            upidx_575440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 18), 'upidx')
            slice_575441 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1196, 14), upidx_575440, None, None)
            # Getting the type of 'idx' (line 1196)
            idx_575442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 14), 'idx')
            # Obtaining the member '__getitem__' of a type (line 1196)
            getitem___575443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 14), idx_575442, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1196)
            subscript_call_result_575444 = invoke(stypy.reporting.localization.Localization(__file__, 1196, 14), getitem___575443, slice_575441)
            
            # Storing an element on a container (line 1196)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1196, 12), a_575439, (subscript_call_result_575444, masked_575438))

            if more_types_in_union_575418:
                # SSA join for if statement (line 1191)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'a' (line 1197)
        a_575445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 1197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'stypy_return_type', a_575445)
        
        # ################# End of '_trimr1D(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_trimr1D' in the type store
        # Getting the type of 'stypy_return_type' (line 1182)
        stypy_return_type_575446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_575446)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_trimr1D'
        return stypy_return_type_575446

    # Assigning a type to the variable '_trimr1D' (line 1182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 4), '_trimr1D', _trimr1D)
    
    # Assigning a Call to a Name (line 1199):
    
    # Assigning a Call to a Name (line 1199):
    
    # Call to asarray(...): (line 1199)
    # Processing the call arguments (line 1199)
    # Getting the type of 'a' (line 1199)
    a_575449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 19), 'a', False)
    # Processing the call keyword arguments (line 1199)
    kwargs_575450 = {}
    # Getting the type of 'ma' (line 1199)
    ma_575447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 8), 'ma', False)
    # Obtaining the member 'asarray' of a type (line 1199)
    asarray_575448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 8), ma_575447, 'asarray')
    # Calling asarray(args, kwargs) (line 1199)
    asarray_call_result_575451 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 8), asarray_575448, *[a_575449], **kwargs_575450)
    
    # Assigning a type to the variable 'a' (line 1199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 4), 'a', asarray_call_result_575451)
    
    # Call to unshare_mask(...): (line 1200)
    # Processing the call keyword arguments (line 1200)
    kwargs_575454 = {}
    # Getting the type of 'a' (line 1200)
    a_575452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 4), 'a', False)
    # Obtaining the member 'unshare_mask' of a type (line 1200)
    unshare_mask_575453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1200, 4), a_575452, 'unshare_mask')
    # Calling unshare_mask(args, kwargs) (line 1200)
    unshare_mask_call_result_575455 = invoke(stypy.reporting.localization.Localization(__file__, 1200, 4), unshare_mask_575453, *[], **kwargs_575454)
    
    
    # Type idiom detected: calculating its left and rigth part (line 1201)
    # Getting the type of 'limits' (line 1201)
    limits_575456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 7), 'limits')
    # Getting the type of 'None' (line 1201)
    None_575457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 17), 'None')
    
    (may_be_575458, more_types_in_union_575459) = may_be_none(limits_575456, None_575457)

    if may_be_575458:

        if more_types_in_union_575459:
            # Runtime conditional SSA (line 1201)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 'a' (line 1202)
        a_575460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'stypy_return_type', a_575460)

        if more_types_in_union_575459:
            # SSA join for if statement (line 1201)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Tuple (line 1205):
    
    # Assigning a Subscript to a Name (line 1205):
    
    # Obtaining the type of the subscript
    int_575461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 4), 'int')
    # Getting the type of 'limits' (line 1205)
    limits_575462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 21), 'limits')
    # Obtaining the member '__getitem__' of a type (line 1205)
    getitem___575463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 4), limits_575462, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1205)
    subscript_call_result_575464 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 4), getitem___575463, int_575461)
    
    # Assigning a type to the variable 'tuple_var_assignment_571495' (line 1205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'tuple_var_assignment_571495', subscript_call_result_575464)
    
    # Assigning a Subscript to a Name (line 1205):
    
    # Obtaining the type of the subscript
    int_575465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 4), 'int')
    # Getting the type of 'limits' (line 1205)
    limits_575466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 21), 'limits')
    # Obtaining the member '__getitem__' of a type (line 1205)
    getitem___575467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 4), limits_575466, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1205)
    subscript_call_result_575468 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 4), getitem___575467, int_575465)
    
    # Assigning a type to the variable 'tuple_var_assignment_571496' (line 1205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'tuple_var_assignment_571496', subscript_call_result_575468)
    
    # Assigning a Name to a Name (line 1205):
    # Getting the type of 'tuple_var_assignment_571495' (line 1205)
    tuple_var_assignment_571495_575469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'tuple_var_assignment_571495')
    # Assigning a type to the variable 'lolim' (line 1205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 5), 'lolim', tuple_var_assignment_571495_575469)
    
    # Assigning a Name to a Name (line 1205):
    # Getting the type of 'tuple_var_assignment_571496' (line 1205)
    tuple_var_assignment_571496_575470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'tuple_var_assignment_571496')
    # Assigning a type to the variable 'uplim' (line 1205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 12), 'uplim', tuple_var_assignment_571496_575470)
    
    # Assigning a Str to a Name (line 1206):
    
    # Assigning a Str to a Name (line 1206):
    str_575471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 13), 'str', 'The proportion to cut from the %s should be between 0. and 1.')
    # Assigning a type to the variable 'errmsg' (line 1206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 4), 'errmsg', str_575471)
    
    # Type idiom detected: calculating its left and rigth part (line 1207)
    # Getting the type of 'lolim' (line 1207)
    lolim_575472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 4), 'lolim')
    # Getting the type of 'None' (line 1207)
    None_575473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 20), 'None')
    
    (may_be_575474, more_types_in_union_575475) = may_not_be_none(lolim_575472, None_575473)

    if may_be_575474:

        if more_types_in_union_575475:
            # Runtime conditional SSA (line 1207)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'lolim' (line 1208)
        lolim_575476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 11), 'lolim')
        float_575477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1208, 19), 'float')
        # Applying the binary operator '>' (line 1208)
        result_gt_575478 = python_operator(stypy.reporting.localization.Localization(__file__, 1208, 11), '>', lolim_575476, float_575477)
        
        
        # Getting the type of 'lolim' (line 1208)
        lolim_575479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 25), 'lolim')
        int_575480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1208, 33), 'int')
        # Applying the binary operator '<' (line 1208)
        result_lt_575481 = python_operator(stypy.reporting.localization.Localization(__file__, 1208, 25), '<', lolim_575479, int_575480)
        
        # Applying the binary operator 'or' (line 1208)
        result_or_keyword_575482 = python_operator(stypy.reporting.localization.Localization(__file__, 1208, 11), 'or', result_gt_575478, result_lt_575481)
        
        # Testing the type of an if condition (line 1208)
        if_condition_575483 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1208, 8), result_or_keyword_575482)
        # Assigning a type to the variable 'if_condition_575483' (line 1208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1208, 8), 'if_condition_575483', if_condition_575483)
        # SSA begins for if statement (line 1208)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1209)
        # Processing the call arguments (line 1209)
        # Getting the type of 'errmsg' (line 1209)
        errmsg_575485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 29), 'errmsg', False)
        str_575486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1209, 38), 'str', 'beginning')
        # Applying the binary operator '%' (line 1209)
        result_mod_575487 = python_operator(stypy.reporting.localization.Localization(__file__, 1209, 29), '%', errmsg_575485, str_575486)
        
        str_575488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1209, 52), 'str', '(got %s)')
        # Getting the type of 'lolim' (line 1209)
        lolim_575489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 65), 'lolim', False)
        # Applying the binary operator '%' (line 1209)
        result_mod_575490 = python_operator(stypy.reporting.localization.Localization(__file__, 1209, 52), '%', str_575488, lolim_575489)
        
        # Applying the binary operator '+' (line 1209)
        result_add_575491 = python_operator(stypy.reporting.localization.Localization(__file__, 1209, 29), '+', result_mod_575487, result_mod_575490)
        
        # Processing the call keyword arguments (line 1209)
        kwargs_575492 = {}
        # Getting the type of 'ValueError' (line 1209)
        ValueError_575484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1209)
        ValueError_call_result_575493 = invoke(stypy.reporting.localization.Localization(__file__, 1209, 18), ValueError_575484, *[result_add_575491], **kwargs_575492)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1209, 12), ValueError_call_result_575493, 'raise parameter', BaseException)
        # SSA join for if statement (line 1208)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_575475:
            # SSA join for if statement (line 1207)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1210)
    # Getting the type of 'uplim' (line 1210)
    uplim_575494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 4), 'uplim')
    # Getting the type of 'None' (line 1210)
    None_575495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 20), 'None')
    
    (may_be_575496, more_types_in_union_575497) = may_not_be_none(uplim_575494, None_575495)

    if may_be_575496:

        if more_types_in_union_575497:
            # Runtime conditional SSA (line 1210)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'uplim' (line 1211)
        uplim_575498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 11), 'uplim')
        float_575499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 19), 'float')
        # Applying the binary operator '>' (line 1211)
        result_gt_575500 = python_operator(stypy.reporting.localization.Localization(__file__, 1211, 11), '>', uplim_575498, float_575499)
        
        
        # Getting the type of 'uplim' (line 1211)
        uplim_575501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 25), 'uplim')
        int_575502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 33), 'int')
        # Applying the binary operator '<' (line 1211)
        result_lt_575503 = python_operator(stypy.reporting.localization.Localization(__file__, 1211, 25), '<', uplim_575501, int_575502)
        
        # Applying the binary operator 'or' (line 1211)
        result_or_keyword_575504 = python_operator(stypy.reporting.localization.Localization(__file__, 1211, 11), 'or', result_gt_575500, result_lt_575503)
        
        # Testing the type of an if condition (line 1211)
        if_condition_575505 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1211, 8), result_or_keyword_575504)
        # Assigning a type to the variable 'if_condition_575505' (line 1211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 8), 'if_condition_575505', if_condition_575505)
        # SSA begins for if statement (line 1211)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1212)
        # Processing the call arguments (line 1212)
        # Getting the type of 'errmsg' (line 1212)
        errmsg_575507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 29), 'errmsg', False)
        str_575508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1212, 38), 'str', 'end')
        # Applying the binary operator '%' (line 1212)
        result_mod_575509 = python_operator(stypy.reporting.localization.Localization(__file__, 1212, 29), '%', errmsg_575507, str_575508)
        
        str_575510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1212, 46), 'str', '(got %s)')
        # Getting the type of 'uplim' (line 1212)
        uplim_575511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 59), 'uplim', False)
        # Applying the binary operator '%' (line 1212)
        result_mod_575512 = python_operator(stypy.reporting.localization.Localization(__file__, 1212, 46), '%', str_575510, uplim_575511)
        
        # Applying the binary operator '+' (line 1212)
        result_add_575513 = python_operator(stypy.reporting.localization.Localization(__file__, 1212, 29), '+', result_mod_575509, result_mod_575512)
        
        # Processing the call keyword arguments (line 1212)
        kwargs_575514 = {}
        # Getting the type of 'ValueError' (line 1212)
        ValueError_575506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1212)
        ValueError_call_result_575515 = invoke(stypy.reporting.localization.Localization(__file__, 1212, 18), ValueError_575506, *[result_add_575513], **kwargs_575514)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1212, 12), ValueError_call_result_575515, 'raise parameter', BaseException)
        # SSA join for if statement (line 1211)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_575497:
            # SSA join for if statement (line 1210)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Tuple (line 1214):
    
    # Assigning a Subscript to a Name (line 1214):
    
    # Obtaining the type of the subscript
    int_575516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 4), 'int')
    # Getting the type of 'inclusive' (line 1214)
    inclusive_575517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 21), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 1214)
    getitem___575518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 4), inclusive_575517, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1214)
    subscript_call_result_575519 = invoke(stypy.reporting.localization.Localization(__file__, 1214, 4), getitem___575518, int_575516)
    
    # Assigning a type to the variable 'tuple_var_assignment_571497' (line 1214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 4), 'tuple_var_assignment_571497', subscript_call_result_575519)
    
    # Assigning a Subscript to a Name (line 1214):
    
    # Obtaining the type of the subscript
    int_575520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 4), 'int')
    # Getting the type of 'inclusive' (line 1214)
    inclusive_575521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 21), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 1214)
    getitem___575522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 4), inclusive_575521, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1214)
    subscript_call_result_575523 = invoke(stypy.reporting.localization.Localization(__file__, 1214, 4), getitem___575522, int_575520)
    
    # Assigning a type to the variable 'tuple_var_assignment_571498' (line 1214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 4), 'tuple_var_assignment_571498', subscript_call_result_575523)
    
    # Assigning a Name to a Name (line 1214):
    # Getting the type of 'tuple_var_assignment_571497' (line 1214)
    tuple_var_assignment_571497_575524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 4), 'tuple_var_assignment_571497')
    # Assigning a type to the variable 'loinc' (line 1214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 5), 'loinc', tuple_var_assignment_571497_575524)
    
    # Assigning a Name to a Name (line 1214):
    # Getting the type of 'tuple_var_assignment_571498' (line 1214)
    tuple_var_assignment_571498_575525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 4), 'tuple_var_assignment_571498')
    # Assigning a type to the variable 'upinc' (line 1214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 12), 'upinc', tuple_var_assignment_571498_575525)
    
    # Type idiom detected: calculating its left and rigth part (line 1216)
    # Getting the type of 'axis' (line 1216)
    axis_575526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 7), 'axis')
    # Getting the type of 'None' (line 1216)
    None_575527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 15), 'None')
    
    (may_be_575528, more_types_in_union_575529) = may_be_none(axis_575526, None_575527)

    if may_be_575528:

        if more_types_in_union_575529:
            # Runtime conditional SSA (line 1216)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 1217):
        
        # Assigning a Attribute to a Name (line 1217):
        # Getting the type of 'a' (line 1217)
        a_575530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 14), 'a')
        # Obtaining the member 'shape' of a type (line 1217)
        shape_575531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 14), a_575530, 'shape')
        # Assigning a type to the variable 'shp' (line 1217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 8), 'shp', shape_575531)
        
        # Call to reshape(...): (line 1218)
        # Processing the call arguments (line 1218)
        # Getting the type of 'shp' (line 1218)
        shp_575544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 67), 'shp', False)
        # Processing the call keyword arguments (line 1218)
        kwargs_575545 = {}
        
        # Call to _trimr1D(...): (line 1218)
        # Processing the call arguments (line 1218)
        
        # Call to ravel(...): (line 1218)
        # Processing the call keyword arguments (line 1218)
        kwargs_575535 = {}
        # Getting the type of 'a' (line 1218)
        a_575533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 24), 'a', False)
        # Obtaining the member 'ravel' of a type (line 1218)
        ravel_575534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 24), a_575533, 'ravel')
        # Calling ravel(args, kwargs) (line 1218)
        ravel_call_result_575536 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 24), ravel_575534, *[], **kwargs_575535)
        
        # Getting the type of 'lolim' (line 1218)
        lolim_575537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 34), 'lolim', False)
        # Getting the type of 'uplim' (line 1218)
        uplim_575538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 40), 'uplim', False)
        # Getting the type of 'loinc' (line 1218)
        loinc_575539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 46), 'loinc', False)
        # Getting the type of 'upinc' (line 1218)
        upinc_575540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 52), 'upinc', False)
        # Processing the call keyword arguments (line 1218)
        kwargs_575541 = {}
        # Getting the type of '_trimr1D' (line 1218)
        _trimr1D_575532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 15), '_trimr1D', False)
        # Calling _trimr1D(args, kwargs) (line 1218)
        _trimr1D_call_result_575542 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 15), _trimr1D_575532, *[ravel_call_result_575536, lolim_575537, uplim_575538, loinc_575539, upinc_575540], **kwargs_575541)
        
        # Obtaining the member 'reshape' of a type (line 1218)
        reshape_575543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 15), _trimr1D_call_result_575542, 'reshape')
        # Calling reshape(args, kwargs) (line 1218)
        reshape_call_result_575546 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 15), reshape_575543, *[shp_575544], **kwargs_575545)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 8), 'stypy_return_type', reshape_call_result_575546)

        if more_types_in_union_575529:
            # Runtime conditional SSA for else branch (line 1216)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_575528) or more_types_in_union_575529):
        
        # Call to apply_along_axis(...): (line 1220)
        # Processing the call arguments (line 1220)
        # Getting the type of '_trimr1D' (line 1220)
        _trimr1D_575549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 35), '_trimr1D', False)
        # Getting the type of 'axis' (line 1220)
        axis_575550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 45), 'axis', False)
        # Getting the type of 'a' (line 1220)
        a_575551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 51), 'a', False)
        # Getting the type of 'lolim' (line 1220)
        lolim_575552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 54), 'lolim', False)
        # Getting the type of 'uplim' (line 1220)
        uplim_575553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 60), 'uplim', False)
        # Getting the type of 'loinc' (line 1220)
        loinc_575554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 66), 'loinc', False)
        # Getting the type of 'upinc' (line 1220)
        upinc_575555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 72), 'upinc', False)
        # Processing the call keyword arguments (line 1220)
        kwargs_575556 = {}
        # Getting the type of 'ma' (line 1220)
        ma_575547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 15), 'ma', False)
        # Obtaining the member 'apply_along_axis' of a type (line 1220)
        apply_along_axis_575548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 15), ma_575547, 'apply_along_axis')
        # Calling apply_along_axis(args, kwargs) (line 1220)
        apply_along_axis_call_result_575557 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 15), apply_along_axis_575548, *[_trimr1D_575549, axis_575550, a_575551, lolim_575552, uplim_575553, loinc_575554, upinc_575555], **kwargs_575556)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 8), 'stypy_return_type', apply_along_axis_call_result_575557)

        if (may_be_575528 and more_types_in_union_575529):
            # SSA join for if statement (line 1216)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'trimr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trimr' in the type store
    # Getting the type of 'stypy_return_type' (line 1156)
    stypy_return_type_575558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_575558)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trimr'
    return stypy_return_type_575558

# Assigning a type to the variable 'trimr' (line 1156)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1156, 0), 'trimr', trimr)

# Assigning a Str to a Name (line 1222):

# Assigning a Str to a Name (line 1222):
str_575559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1253, (-1)), 'str', '\n    Parameters\n    ----------\n    a : sequence\n        Input array\n    limits : {None, tuple}, optional\n        If `relative` is False, tuple (lower limit, upper limit) in absolute values.\n        Values of the input array lower (greater) than the lower (upper) limit are\n        masked.\n\n        If `relative` is True, tuple (lower percentage, upper percentage) to cut\n        on each side of the  array, with respect to the number of unmasked data.\n\n        Noting n the number of unmasked data before trimming, the (n*limits[0])th\n        smallest data and the (n*limits[1])th largest data are masked, and the\n        total number of unmasked data after trimming is n*(1.-sum(limits))\n        In each case, the value of one limit can be set to None to indicate an\n        open interval.\n\n        If limits is None, no trimming is performed\n    inclusive : {(bool, bool) tuple}, optional\n        If `relative` is False, tuple indicating whether values exactly equal\n        to the absolute limits are allowed.\n        If `relative` is True, tuple indicating whether the number of data\n        being masked on each side should be rounded (True) or truncated\n        (False).\n    relative : bool, optional\n        Whether to consider the limits as absolute values (False) or proportions\n        to cut (True).\n    axis : int, optional\n        Axis along which to trim.\n')
# Assigning a type to the variable 'trimdoc' (line 1222)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 0), 'trimdoc', str_575559)

@norecursion
def trim(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1256)
    None_575560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 19), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1256)
    tuple_575561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1256)
    # Adding element type (line 1256)
    # Getting the type of 'True' (line 1256)
    True_575562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 36), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1256, 36), tuple_575561, True_575562)
    # Adding element type (line 1256)
    # Getting the type of 'True' (line 1256)
    True_575563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 41), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1256, 36), tuple_575561, True_575563)
    
    # Getting the type of 'False' (line 1256)
    False_575564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 57), 'False')
    # Getting the type of 'None' (line 1256)
    None_575565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 69), 'None')
    defaults = [None_575560, tuple_575561, False_575564, None_575565]
    # Create a new context for function 'trim'
    module_type_store = module_type_store.open_function_context('trim', 1256, 0, False)
    
    # Passed parameters checking function
    trim.stypy_localization = localization
    trim.stypy_type_of_self = None
    trim.stypy_type_store = module_type_store
    trim.stypy_function_name = 'trim'
    trim.stypy_param_names_list = ['a', 'limits', 'inclusive', 'relative', 'axis']
    trim.stypy_varargs_param_name = None
    trim.stypy_kwargs_param_name = None
    trim.stypy_call_defaults = defaults
    trim.stypy_call_varargs = varargs
    trim.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trim', ['a', 'limits', 'inclusive', 'relative', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trim', localization, ['a', 'limits', 'inclusive', 'relative', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trim(...)' code ##################

    str_575566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, (-1)), 'str', '\n    Trims an array by masking the data outside some given limits.\n\n    Returns a masked version of the input array.\n\n    %s\n\n    Examples\n    --------\n    >>> from scipy.stats.mstats import trim\n    >>> z = [ 1, 2, 3, 4, 5, 6, 7, 8, 9,10]\n    >>> print(trim(z,(3,8)))\n    [-- -- 3 4 5 6 7 8 -- --]\n    >>> print(trim(z,(0.1,0.2),relative=True))\n    [-- 2 3 4 5 6 7 8 -- --]\n\n    ')
    
    # Getting the type of 'relative' (line 1274)
    relative_575567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 7), 'relative')
    # Testing the type of an if condition (line 1274)
    if_condition_575568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1274, 4), relative_575567)
    # Assigning a type to the variable 'if_condition_575568' (line 1274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1274, 4), 'if_condition_575568', if_condition_575568)
    # SSA begins for if statement (line 1274)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to trimr(...): (line 1275)
    # Processing the call arguments (line 1275)
    # Getting the type of 'a' (line 1275)
    a_575570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 21), 'a', False)
    # Processing the call keyword arguments (line 1275)
    # Getting the type of 'limits' (line 1275)
    limits_575571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 31), 'limits', False)
    keyword_575572 = limits_575571
    # Getting the type of 'inclusive' (line 1275)
    inclusive_575573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 49), 'inclusive', False)
    keyword_575574 = inclusive_575573
    # Getting the type of 'axis' (line 1275)
    axis_575575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 65), 'axis', False)
    keyword_575576 = axis_575575
    kwargs_575577 = {'axis': keyword_575576, 'limits': keyword_575572, 'inclusive': keyword_575574}
    # Getting the type of 'trimr' (line 1275)
    trimr_575569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 15), 'trimr', False)
    # Calling trimr(args, kwargs) (line 1275)
    trimr_call_result_575578 = invoke(stypy.reporting.localization.Localization(__file__, 1275, 15), trimr_575569, *[a_575570], **kwargs_575577)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 8), 'stypy_return_type', trimr_call_result_575578)
    # SSA branch for the else part of an if statement (line 1274)
    module_type_store.open_ssa_branch('else')
    
    # Call to trima(...): (line 1277)
    # Processing the call arguments (line 1277)
    # Getting the type of 'a' (line 1277)
    a_575580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 21), 'a', False)
    # Processing the call keyword arguments (line 1277)
    # Getting the type of 'limits' (line 1277)
    limits_575581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 31), 'limits', False)
    keyword_575582 = limits_575581
    # Getting the type of 'inclusive' (line 1277)
    inclusive_575583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 49), 'inclusive', False)
    keyword_575584 = inclusive_575583
    kwargs_575585 = {'limits': keyword_575582, 'inclusive': keyword_575584}
    # Getting the type of 'trima' (line 1277)
    trima_575579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 15), 'trima', False)
    # Calling trima(args, kwargs) (line 1277)
    trima_call_result_575586 = invoke(stypy.reporting.localization.Localization(__file__, 1277, 15), trima_575579, *[a_575580], **kwargs_575585)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 8), 'stypy_return_type', trima_call_result_575586)
    # SSA join for if statement (line 1274)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'trim(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trim' in the type store
    # Getting the type of 'stypy_return_type' (line 1256)
    stypy_return_type_575587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_575587)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trim'
    return stypy_return_type_575587

# Assigning a type to the variable 'trim' (line 1256)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 0), 'trim', trim)


# Getting the type of 'trim' (line 1279)
trim_575588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 3), 'trim')
# Obtaining the member '__doc__' of a type (line 1279)
doc___575589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1279, 3), trim_575588, '__doc__')
# Getting the type of 'None' (line 1279)
None_575590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 23), 'None')
# Applying the binary operator 'isnot' (line 1279)
result_is_not_575591 = python_operator(stypy.reporting.localization.Localization(__file__, 1279, 3), 'isnot', doc___575589, None_575590)

# Testing the type of an if condition (line 1279)
if_condition_575592 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1279, 0), result_is_not_575591)
# Assigning a type to the variable 'if_condition_575592' (line 1279)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 0), 'if_condition_575592', if_condition_575592)
# SSA begins for if statement (line 1279)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a BinOp to a Attribute (line 1280):

# Assigning a BinOp to a Attribute (line 1280):
# Getting the type of 'trim' (line 1280)
trim_575593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 19), 'trim')
# Obtaining the member '__doc__' of a type (line 1280)
doc___575594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 19), trim_575593, '__doc__')
# Getting the type of 'trimdoc' (line 1280)
trimdoc_575595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 34), 'trimdoc')
# Applying the binary operator '%' (line 1280)
result_mod_575596 = python_operator(stypy.reporting.localization.Localization(__file__, 1280, 19), '%', doc___575594, trimdoc_575595)

# Getting the type of 'trim' (line 1280)
trim_575597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 4), 'trim')
# Setting the type of the member '__doc__' of a type (line 1280)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 4), trim_575597, '__doc__', result_mod_575596)
# SSA join for if statement (line 1279)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def trimboth(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_575598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 35), 'float')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1283)
    tuple_575599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 51), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1283)
    # Adding element type (line 1283)
    # Getting the type of 'True' (line 1283)
    True_575600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 51), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1283, 51), tuple_575599, True_575600)
    # Adding element type (line 1283)
    # Getting the type of 'True' (line 1283)
    True_575601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 56), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1283, 51), tuple_575599, True_575601)
    
    # Getting the type of 'None' (line 1283)
    None_575602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 68), 'None')
    defaults = [float_575598, tuple_575599, None_575602]
    # Create a new context for function 'trimboth'
    module_type_store = module_type_store.open_function_context('trimboth', 1283, 0, False)
    
    # Passed parameters checking function
    trimboth.stypy_localization = localization
    trimboth.stypy_type_of_self = None
    trimboth.stypy_type_store = module_type_store
    trimboth.stypy_function_name = 'trimboth'
    trimboth.stypy_param_names_list = ['data', 'proportiontocut', 'inclusive', 'axis']
    trimboth.stypy_varargs_param_name = None
    trimboth.stypy_kwargs_param_name = None
    trimboth.stypy_call_defaults = defaults
    trimboth.stypy_call_varargs = varargs
    trimboth.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trimboth', ['data', 'proportiontocut', 'inclusive', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trimboth', localization, ['data', 'proportiontocut', 'inclusive', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trimboth(...)' code ##################

    str_575603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, (-1)), 'str', '\n    Trims the smallest and largest data values.\n\n    Trims the `data` by masking the ``int(proportiontocut * n)`` smallest and\n    ``int(proportiontocut * n)`` largest values of data along the given axis,\n    where n is the number of unmasked values before trimming.\n\n    Parameters\n    ----------\n    data : ndarray\n        Data to trim.\n    proportiontocut : float, optional\n        Percentage of trimming (as a float between 0 and 1).\n        If n is the number of unmasked values before trimming, the number of\n        values after trimming is ``(1 - 2*proportiontocut) * n``.\n        Default is 0.2.\n    inclusive : {(bool, bool) tuple}, optional\n        Tuple indicating whether the number of data being masked on each side\n        should be rounded (True) or truncated (False).\n    axis : int, optional\n        Axis along which to perform the trimming.\n        If None, the input array is first flattened.\n\n    ')
    
    # Call to trimr(...): (line 1308)
    # Processing the call arguments (line 1308)
    # Getting the type of 'data' (line 1308)
    data_575605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 17), 'data', False)
    # Processing the call keyword arguments (line 1308)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1308)
    tuple_575606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1308)
    # Adding element type (line 1308)
    # Getting the type of 'proportiontocut' (line 1308)
    proportiontocut_575607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 31), 'proportiontocut', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1308, 31), tuple_575606, proportiontocut_575607)
    # Adding element type (line 1308)
    # Getting the type of 'proportiontocut' (line 1308)
    proportiontocut_575608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 47), 'proportiontocut', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1308, 31), tuple_575606, proportiontocut_575608)
    
    keyword_575609 = tuple_575606
    # Getting the type of 'inclusive' (line 1309)
    inclusive_575610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 27), 'inclusive', False)
    keyword_575611 = inclusive_575610
    # Getting the type of 'axis' (line 1309)
    axis_575612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 43), 'axis', False)
    keyword_575613 = axis_575612
    kwargs_575614 = {'axis': keyword_575613, 'limits': keyword_575609, 'inclusive': keyword_575611}
    # Getting the type of 'trimr' (line 1308)
    trimr_575604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 11), 'trimr', False)
    # Calling trimr(args, kwargs) (line 1308)
    trimr_call_result_575615 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 11), trimr_575604, *[data_575605], **kwargs_575614)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1308, 4), 'stypy_return_type', trimr_call_result_575615)
    
    # ################# End of 'trimboth(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trimboth' in the type store
    # Getting the type of 'stypy_return_type' (line 1283)
    stypy_return_type_575616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_575616)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trimboth'
    return stypy_return_type_575616

# Assigning a type to the variable 'trimboth' (line 1283)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 0), 'trimboth', trimboth)

@norecursion
def trimtail(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_575617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 35), 'float')
    str_575618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 45), 'str', 'left')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1312)
    tuple_575619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 64), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1312)
    # Adding element type (line 1312)
    # Getting the type of 'True' (line 1312)
    True_575620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 64), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1312, 64), tuple_575619, True_575620)
    # Adding element type (line 1312)
    # Getting the type of 'True' (line 1312)
    True_575621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 69), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1312, 64), tuple_575619, True_575621)
    
    # Getting the type of 'None' (line 1313)
    None_575622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 18), 'None')
    defaults = [float_575617, str_575618, tuple_575619, None_575622]
    # Create a new context for function 'trimtail'
    module_type_store = module_type_store.open_function_context('trimtail', 1312, 0, False)
    
    # Passed parameters checking function
    trimtail.stypy_localization = localization
    trimtail.stypy_type_of_self = None
    trimtail.stypy_type_store = module_type_store
    trimtail.stypy_function_name = 'trimtail'
    trimtail.stypy_param_names_list = ['data', 'proportiontocut', 'tail', 'inclusive', 'axis']
    trimtail.stypy_varargs_param_name = None
    trimtail.stypy_kwargs_param_name = None
    trimtail.stypy_call_defaults = defaults
    trimtail.stypy_call_varargs = varargs
    trimtail.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trimtail', ['data', 'proportiontocut', 'tail', 'inclusive', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trimtail', localization, ['data', 'proportiontocut', 'tail', 'inclusive', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trimtail(...)' code ##################

    str_575623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, (-1)), 'str', "\n    Trims the data by masking values from one tail.\n\n    Parameters\n    ----------\n    data : array_like\n        Data to trim.\n    proportiontocut : float, optional\n        Percentage of trimming. If n is the number of unmasked values\n        before trimming, the number of values after trimming is\n        ``(1 - proportiontocut) * n``.  Default is 0.2.\n    tail : {'left','right'}, optional\n        If 'left' the `proportiontocut` lowest values will be masked.\n        If 'right' the `proportiontocut` highest values will be masked.\n        Default is 'left'.\n    inclusive : {(bool, bool) tuple}, optional\n        Tuple indicating whether the number of data being masked on each side\n        should be rounded (True) or truncated (False).  Default is\n        (True, True).\n    axis : int, optional\n        Axis along which to perform the trimming.\n        If None, the input array is first flattened.  Default is None.\n\n    Returns\n    -------\n    trimtail : ndarray\n        Returned array of same shape as `data` with masked tail values.\n\n    ")
    
    # Assigning a Subscript to a Name (line 1343):
    
    # Assigning a Subscript to a Name (line 1343):
    
    # Obtaining the type of the subscript
    int_575624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 29), 'int')
    
    # Call to lower(...): (line 1343)
    # Processing the call keyword arguments (line 1343)
    kwargs_575630 = {}
    
    # Call to str(...): (line 1343)
    # Processing the call arguments (line 1343)
    # Getting the type of 'tail' (line 1343)
    tail_575626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 15), 'tail', False)
    # Processing the call keyword arguments (line 1343)
    kwargs_575627 = {}
    # Getting the type of 'str' (line 1343)
    str_575625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 11), 'str', False)
    # Calling str(args, kwargs) (line 1343)
    str_call_result_575628 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 11), str_575625, *[tail_575626], **kwargs_575627)
    
    # Obtaining the member 'lower' of a type (line 1343)
    lower_575629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 11), str_call_result_575628, 'lower')
    # Calling lower(args, kwargs) (line 1343)
    lower_call_result_575631 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 11), lower_575629, *[], **kwargs_575630)
    
    # Obtaining the member '__getitem__' of a type (line 1343)
    getitem___575632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 11), lower_call_result_575631, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1343)
    subscript_call_result_575633 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 11), getitem___575632, int_575624)
    
    # Assigning a type to the variable 'tail' (line 1343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'tail', subscript_call_result_575633)
    
    
    # Getting the type of 'tail' (line 1344)
    tail_575634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 7), 'tail')
    str_575635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 15), 'str', 'l')
    # Applying the binary operator '==' (line 1344)
    result_eq_575636 = python_operator(stypy.reporting.localization.Localization(__file__, 1344, 7), '==', tail_575634, str_575635)
    
    # Testing the type of an if condition (line 1344)
    if_condition_575637 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1344, 4), result_eq_575636)
    # Assigning a type to the variable 'if_condition_575637' (line 1344)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 4), 'if_condition_575637', if_condition_575637)
    # SSA begins for if statement (line 1344)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1345):
    
    # Assigning a Tuple to a Name (line 1345):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1345)
    tuple_575638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1345)
    # Adding element type (line 1345)
    # Getting the type of 'proportiontocut' (line 1345)
    proportiontocut_575639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 18), 'proportiontocut')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1345, 18), tuple_575638, proportiontocut_575639)
    # Adding element type (line 1345)
    # Getting the type of 'None' (line 1345)
    None_575640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 34), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1345, 18), tuple_575638, None_575640)
    
    # Assigning a type to the variable 'limits' (line 1345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1345, 8), 'limits', tuple_575638)
    # SSA branch for the else part of an if statement (line 1344)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'tail' (line 1346)
    tail_575641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 9), 'tail')
    str_575642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1346, 17), 'str', 'r')
    # Applying the binary operator '==' (line 1346)
    result_eq_575643 = python_operator(stypy.reporting.localization.Localization(__file__, 1346, 9), '==', tail_575641, str_575642)
    
    # Testing the type of an if condition (line 1346)
    if_condition_575644 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1346, 9), result_eq_575643)
    # Assigning a type to the variable 'if_condition_575644' (line 1346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 9), 'if_condition_575644', if_condition_575644)
    # SSA begins for if statement (line 1346)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1347):
    
    # Assigning a Tuple to a Name (line 1347):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1347)
    tuple_575645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1347, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1347)
    # Adding element type (line 1347)
    # Getting the type of 'None' (line 1347)
    None_575646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 18), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1347, 18), tuple_575645, None_575646)
    # Adding element type (line 1347)
    # Getting the type of 'proportiontocut' (line 1347)
    proportiontocut_575647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 24), 'proportiontocut')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1347, 18), tuple_575645, proportiontocut_575647)
    
    # Assigning a type to the variable 'limits' (line 1347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'limits', tuple_575645)
    # SSA branch for the else part of an if statement (line 1346)
    module_type_store.open_ssa_branch('else')
    
    # Call to TypeError(...): (line 1349)
    # Processing the call arguments (line 1349)
    str_575649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1349, 24), 'str', "The tail argument should be in ('left','right')")
    # Processing the call keyword arguments (line 1349)
    kwargs_575650 = {}
    # Getting the type of 'TypeError' (line 1349)
    TypeError_575648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1349)
    TypeError_call_result_575651 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 14), TypeError_575648, *[str_575649], **kwargs_575650)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1349, 8), TypeError_call_result_575651, 'raise parameter', BaseException)
    # SSA join for if statement (line 1346)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1344)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to trimr(...): (line 1351)
    # Processing the call arguments (line 1351)
    # Getting the type of 'data' (line 1351)
    data_575653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 17), 'data', False)
    # Processing the call keyword arguments (line 1351)
    # Getting the type of 'limits' (line 1351)
    limits_575654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 30), 'limits', False)
    keyword_575655 = limits_575654
    # Getting the type of 'axis' (line 1351)
    axis_575656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 43), 'axis', False)
    keyword_575657 = axis_575656
    # Getting the type of 'inclusive' (line 1351)
    inclusive_575658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 59), 'inclusive', False)
    keyword_575659 = inclusive_575658
    kwargs_575660 = {'inclusive': keyword_575659, 'limits': keyword_575655, 'axis': keyword_575657}
    # Getting the type of 'trimr' (line 1351)
    trimr_575652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 11), 'trimr', False)
    # Calling trimr(args, kwargs) (line 1351)
    trimr_call_result_575661 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 11), trimr_575652, *[data_575653], **kwargs_575660)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 4), 'stypy_return_type', trimr_call_result_575661)
    
    # ################# End of 'trimtail(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trimtail' in the type store
    # Getting the type of 'stypy_return_type' (line 1312)
    stypy_return_type_575662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_575662)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trimtail'
    return stypy_return_type_575662

# Assigning a type to the variable 'trimtail' (line 1312)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 0), 'trimtail', trimtail)

# Assigning a Name to a Name (line 1353):

# Assigning a Name to a Name (line 1353):
# Getting the type of 'trimtail' (line 1353)
trimtail_575663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 8), 'trimtail')
# Assigning a type to the variable 'trim1' (line 1353)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 0), 'trim1', trimtail_575663)

@norecursion
def trimmed_mean(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 1356)
    tuple_575664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1356)
    # Adding element type (line 1356)
    float_575665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 28), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1356, 28), tuple_575664, float_575665)
    # Adding element type (line 1356)
    float_575666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1356, 28), tuple_575664, float_575666)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1356)
    tuple_575667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 49), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1356)
    # Adding element type (line 1356)
    int_575668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 49), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1356, 49), tuple_575667, int_575668)
    # Adding element type (line 1356)
    int_575669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 51), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1356, 49), tuple_575667, int_575669)
    
    # Getting the type of 'True' (line 1356)
    True_575670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 64), 'True')
    # Getting the type of 'None' (line 1357)
    None_575671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 22), 'None')
    defaults = [tuple_575664, tuple_575667, True_575670, None_575671]
    # Create a new context for function 'trimmed_mean'
    module_type_store = module_type_store.open_function_context('trimmed_mean', 1356, 0, False)
    
    # Passed parameters checking function
    trimmed_mean.stypy_localization = localization
    trimmed_mean.stypy_type_of_self = None
    trimmed_mean.stypy_type_store = module_type_store
    trimmed_mean.stypy_function_name = 'trimmed_mean'
    trimmed_mean.stypy_param_names_list = ['a', 'limits', 'inclusive', 'relative', 'axis']
    trimmed_mean.stypy_varargs_param_name = None
    trimmed_mean.stypy_kwargs_param_name = None
    trimmed_mean.stypy_call_defaults = defaults
    trimmed_mean.stypy_call_varargs = varargs
    trimmed_mean.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trimmed_mean', ['a', 'limits', 'inclusive', 'relative', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trimmed_mean', localization, ['a', 'limits', 'inclusive', 'relative', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trimmed_mean(...)' code ##################

    str_575672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, (-1)), 'str', 'Returns the trimmed mean of the data along the given axis.\n\n    %s\n\n    ')
    # Getting the type of 'trimdoc' (line 1362)
    trimdoc_575673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 10), 'trimdoc')
    # Applying the binary operator '%' (line 1362)
    result_mod_575674 = python_operator(stypy.reporting.localization.Localization(__file__, 1362, (-1)), '%', str_575672, trimdoc_575673)
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to isinstance(...): (line 1363)
    # Processing the call arguments (line 1363)
    # Getting the type of 'limits' (line 1363)
    limits_575676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 23), 'limits', False)
    # Getting the type of 'tuple' (line 1363)
    tuple_575677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 30), 'tuple', False)
    # Processing the call keyword arguments (line 1363)
    kwargs_575678 = {}
    # Getting the type of 'isinstance' (line 1363)
    isinstance_575675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 12), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1363)
    isinstance_call_result_575679 = invoke(stypy.reporting.localization.Localization(__file__, 1363, 12), isinstance_575675, *[limits_575676, tuple_575677], **kwargs_575678)
    
    # Applying the 'not' unary operator (line 1363)
    result_not__575680 = python_operator(stypy.reporting.localization.Localization(__file__, 1363, 8), 'not', isinstance_call_result_575679)
    
    
    # Call to isinstance(...): (line 1363)
    # Processing the call arguments (line 1363)
    # Getting the type of 'limits' (line 1363)
    limits_575682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 53), 'limits', False)
    # Getting the type of 'float' (line 1363)
    float_575683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 60), 'float', False)
    # Processing the call keyword arguments (line 1363)
    kwargs_575684 = {}
    # Getting the type of 'isinstance' (line 1363)
    isinstance_575681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 42), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1363)
    isinstance_call_result_575685 = invoke(stypy.reporting.localization.Localization(__file__, 1363, 42), isinstance_575681, *[limits_575682, float_575683], **kwargs_575684)
    
    # Applying the binary operator 'and' (line 1363)
    result_and_keyword_575686 = python_operator(stypy.reporting.localization.Localization(__file__, 1363, 7), 'and', result_not__575680, isinstance_call_result_575685)
    
    # Testing the type of an if condition (line 1363)
    if_condition_575687 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1363, 4), result_and_keyword_575686)
    # Assigning a type to the variable 'if_condition_575687' (line 1363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1363, 4), 'if_condition_575687', if_condition_575687)
    # SSA begins for if statement (line 1363)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1364):
    
    # Assigning a Tuple to a Name (line 1364):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1364)
    tuple_575688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1364, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1364)
    # Adding element type (line 1364)
    # Getting the type of 'limits' (line 1364)
    limits_575689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 18), 'limits')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1364, 18), tuple_575688, limits_575689)
    # Adding element type (line 1364)
    # Getting the type of 'limits' (line 1364)
    limits_575690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 26), 'limits')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1364, 18), tuple_575688, limits_575690)
    
    # Assigning a type to the variable 'limits' (line 1364)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1364, 8), 'limits', tuple_575688)
    # SSA join for if statement (line 1363)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'relative' (line 1365)
    relative_575691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 7), 'relative')
    # Testing the type of an if condition (line 1365)
    if_condition_575692 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1365, 4), relative_575691)
    # Assigning a type to the variable 'if_condition_575692' (line 1365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 4), 'if_condition_575692', if_condition_575692)
    # SSA begins for if statement (line 1365)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to mean(...): (line 1366)
    # Processing the call keyword arguments (line 1366)
    # Getting the type of 'axis' (line 1366)
    axis_575704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 78), 'axis', False)
    keyword_575705 = axis_575704
    kwargs_575706 = {'axis': keyword_575705}
    
    # Call to trimr(...): (line 1366)
    # Processing the call arguments (line 1366)
    # Getting the type of 'a' (line 1366)
    a_575694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 21), 'a', False)
    # Processing the call keyword arguments (line 1366)
    # Getting the type of 'limits' (line 1366)
    limits_575695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 30), 'limits', False)
    keyword_575696 = limits_575695
    # Getting the type of 'inclusive' (line 1366)
    inclusive_575697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 47), 'inclusive', False)
    keyword_575698 = inclusive_575697
    # Getting the type of 'axis' (line 1366)
    axis_575699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 62), 'axis', False)
    keyword_575700 = axis_575699
    kwargs_575701 = {'axis': keyword_575700, 'limits': keyword_575696, 'inclusive': keyword_575698}
    # Getting the type of 'trimr' (line 1366)
    trimr_575693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 15), 'trimr', False)
    # Calling trimr(args, kwargs) (line 1366)
    trimr_call_result_575702 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 15), trimr_575693, *[a_575694], **kwargs_575701)
    
    # Obtaining the member 'mean' of a type (line 1366)
    mean_575703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 15), trimr_call_result_575702, 'mean')
    # Calling mean(args, kwargs) (line 1366)
    mean_call_result_575707 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 15), mean_575703, *[], **kwargs_575706)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 8), 'stypy_return_type', mean_call_result_575707)
    # SSA branch for the else part of an if statement (line 1365)
    module_type_store.open_ssa_branch('else')
    
    # Call to mean(...): (line 1368)
    # Processing the call keyword arguments (line 1368)
    # Getting the type of 'axis' (line 1368)
    axis_575717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 68), 'axis', False)
    keyword_575718 = axis_575717
    kwargs_575719 = {'axis': keyword_575718}
    
    # Call to trima(...): (line 1368)
    # Processing the call arguments (line 1368)
    # Getting the type of 'a' (line 1368)
    a_575709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 21), 'a', False)
    # Processing the call keyword arguments (line 1368)
    # Getting the type of 'limits' (line 1368)
    limits_575710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 30), 'limits', False)
    keyword_575711 = limits_575710
    # Getting the type of 'inclusive' (line 1368)
    inclusive_575712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 47), 'inclusive', False)
    keyword_575713 = inclusive_575712
    kwargs_575714 = {'limits': keyword_575711, 'inclusive': keyword_575713}
    # Getting the type of 'trima' (line 1368)
    trima_575708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 15), 'trima', False)
    # Calling trima(args, kwargs) (line 1368)
    trima_call_result_575715 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 15), trima_575708, *[a_575709], **kwargs_575714)
    
    # Obtaining the member 'mean' of a type (line 1368)
    mean_575716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 15), trima_call_result_575715, 'mean')
    # Calling mean(args, kwargs) (line 1368)
    mean_call_result_575720 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 15), mean_575716, *[], **kwargs_575719)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 8), 'stypy_return_type', mean_call_result_575720)
    # SSA join for if statement (line 1365)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'trimmed_mean(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trimmed_mean' in the type store
    # Getting the type of 'stypy_return_type' (line 1356)
    stypy_return_type_575721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_575721)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trimmed_mean'
    return stypy_return_type_575721

# Assigning a type to the variable 'trimmed_mean' (line 1356)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 0), 'trimmed_mean', trimmed_mean)

@norecursion
def trimmed_var(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 1371)
    tuple_575722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1371)
    # Adding element type (line 1371)
    float_575723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 27), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1371, 27), tuple_575722, float_575723)
    # Adding element type (line 1371)
    float_575724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 31), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1371, 27), tuple_575722, float_575724)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1371)
    tuple_575725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1371)
    # Adding element type (line 1371)
    int_575726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 48), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1371, 48), tuple_575725, int_575726)
    # Adding element type (line 1371)
    int_575727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 50), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1371, 48), tuple_575725, int_575727)
    
    # Getting the type of 'True' (line 1371)
    True_575728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 63), 'True')
    # Getting the type of 'None' (line 1372)
    None_575729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 21), 'None')
    int_575730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, 32), 'int')
    defaults = [tuple_575722, tuple_575725, True_575728, None_575729, int_575730]
    # Create a new context for function 'trimmed_var'
    module_type_store = module_type_store.open_function_context('trimmed_var', 1371, 0, False)
    
    # Passed parameters checking function
    trimmed_var.stypy_localization = localization
    trimmed_var.stypy_type_of_self = None
    trimmed_var.stypy_type_store = module_type_store
    trimmed_var.stypy_function_name = 'trimmed_var'
    trimmed_var.stypy_param_names_list = ['a', 'limits', 'inclusive', 'relative', 'axis', 'ddof']
    trimmed_var.stypy_varargs_param_name = None
    trimmed_var.stypy_kwargs_param_name = None
    trimmed_var.stypy_call_defaults = defaults
    trimmed_var.stypy_call_varargs = varargs
    trimmed_var.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trimmed_var', ['a', 'limits', 'inclusive', 'relative', 'axis', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trimmed_var', localization, ['a', 'limits', 'inclusive', 'relative', 'axis', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trimmed_var(...)' code ##################

    str_575731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, (-1)), 'str', 'Returns the trimmed variance of the data along the given axis.\n\n    %s\n    ddof : {0,integer}, optional\n        Means Delta Degrees of Freedom. The denominator used during computations\n        is (n-ddof). DDOF=0 corresponds to a biased estimate, DDOF=1 to an un-\n        biased estimate of the variance.\n\n    ')
    # Getting the type of 'trimdoc' (line 1381)
    trimdoc_575732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 10), 'trimdoc')
    # Applying the binary operator '%' (line 1381)
    result_mod_575733 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, (-1)), '%', str_575731, trimdoc_575732)
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to isinstance(...): (line 1382)
    # Processing the call arguments (line 1382)
    # Getting the type of 'limits' (line 1382)
    limits_575735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 23), 'limits', False)
    # Getting the type of 'tuple' (line 1382)
    tuple_575736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 30), 'tuple', False)
    # Processing the call keyword arguments (line 1382)
    kwargs_575737 = {}
    # Getting the type of 'isinstance' (line 1382)
    isinstance_575734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 12), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1382)
    isinstance_call_result_575738 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 12), isinstance_575734, *[limits_575735, tuple_575736], **kwargs_575737)
    
    # Applying the 'not' unary operator (line 1382)
    result_not__575739 = python_operator(stypy.reporting.localization.Localization(__file__, 1382, 8), 'not', isinstance_call_result_575738)
    
    
    # Call to isinstance(...): (line 1382)
    # Processing the call arguments (line 1382)
    # Getting the type of 'limits' (line 1382)
    limits_575741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 53), 'limits', False)
    # Getting the type of 'float' (line 1382)
    float_575742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 60), 'float', False)
    # Processing the call keyword arguments (line 1382)
    kwargs_575743 = {}
    # Getting the type of 'isinstance' (line 1382)
    isinstance_575740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 42), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1382)
    isinstance_call_result_575744 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 42), isinstance_575740, *[limits_575741, float_575742], **kwargs_575743)
    
    # Applying the binary operator 'and' (line 1382)
    result_and_keyword_575745 = python_operator(stypy.reporting.localization.Localization(__file__, 1382, 7), 'and', result_not__575739, isinstance_call_result_575744)
    
    # Testing the type of an if condition (line 1382)
    if_condition_575746 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1382, 4), result_and_keyword_575745)
    # Assigning a type to the variable 'if_condition_575746' (line 1382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 4), 'if_condition_575746', if_condition_575746)
    # SSA begins for if statement (line 1382)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1383):
    
    # Assigning a Tuple to a Name (line 1383):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1383)
    tuple_575747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1383)
    # Adding element type (line 1383)
    # Getting the type of 'limits' (line 1383)
    limits_575748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 18), 'limits')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1383, 18), tuple_575747, limits_575748)
    # Adding element type (line 1383)
    # Getting the type of 'limits' (line 1383)
    limits_575749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 26), 'limits')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1383, 18), tuple_575747, limits_575749)
    
    # Assigning a type to the variable 'limits' (line 1383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 8), 'limits', tuple_575747)
    # SSA join for if statement (line 1382)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'relative' (line 1384)
    relative_575750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 7), 'relative')
    # Testing the type of an if condition (line 1384)
    if_condition_575751 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1384, 4), relative_575750)
    # Assigning a type to the variable 'if_condition_575751' (line 1384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 4), 'if_condition_575751', if_condition_575751)
    # SSA begins for if statement (line 1384)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1385):
    
    # Assigning a Call to a Name (line 1385):
    
    # Call to trimr(...): (line 1385)
    # Processing the call arguments (line 1385)
    # Getting the type of 'a' (line 1385)
    a_575753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 20), 'a', False)
    # Processing the call keyword arguments (line 1385)
    # Getting the type of 'limits' (line 1385)
    limits_575754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 29), 'limits', False)
    keyword_575755 = limits_575754
    # Getting the type of 'inclusive' (line 1385)
    inclusive_575756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 47), 'inclusive', False)
    keyword_575757 = inclusive_575756
    # Getting the type of 'axis' (line 1385)
    axis_575758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 62), 'axis', False)
    keyword_575759 = axis_575758
    kwargs_575760 = {'axis': keyword_575759, 'limits': keyword_575755, 'inclusive': keyword_575757}
    # Getting the type of 'trimr' (line 1385)
    trimr_575752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 14), 'trimr', False)
    # Calling trimr(args, kwargs) (line 1385)
    trimr_call_result_575761 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 14), trimr_575752, *[a_575753], **kwargs_575760)
    
    # Assigning a type to the variable 'out' (line 1385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 8), 'out', trimr_call_result_575761)
    # SSA branch for the else part of an if statement (line 1384)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1387):
    
    # Assigning a Call to a Name (line 1387):
    
    # Call to trima(...): (line 1387)
    # Processing the call arguments (line 1387)
    # Getting the type of 'a' (line 1387)
    a_575763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 20), 'a', False)
    # Processing the call keyword arguments (line 1387)
    # Getting the type of 'limits' (line 1387)
    limits_575764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 29), 'limits', False)
    keyword_575765 = limits_575764
    # Getting the type of 'inclusive' (line 1387)
    inclusive_575766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 46), 'inclusive', False)
    keyword_575767 = inclusive_575766
    kwargs_575768 = {'limits': keyword_575765, 'inclusive': keyword_575767}
    # Getting the type of 'trima' (line 1387)
    trima_575762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 14), 'trima', False)
    # Calling trima(args, kwargs) (line 1387)
    trima_call_result_575769 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 14), trima_575762, *[a_575763], **kwargs_575768)
    
    # Assigning a type to the variable 'out' (line 1387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), 'out', trima_call_result_575769)
    # SSA join for if statement (line 1384)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to var(...): (line 1389)
    # Processing the call keyword arguments (line 1389)
    # Getting the type of 'axis' (line 1389)
    axis_575772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 24), 'axis', False)
    keyword_575773 = axis_575772
    # Getting the type of 'ddof' (line 1389)
    ddof_575774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 35), 'ddof', False)
    keyword_575775 = ddof_575774
    kwargs_575776 = {'ddof': keyword_575775, 'axis': keyword_575773}
    # Getting the type of 'out' (line 1389)
    out_575770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 11), 'out', False)
    # Obtaining the member 'var' of a type (line 1389)
    var_575771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 11), out_575770, 'var')
    # Calling var(args, kwargs) (line 1389)
    var_call_result_575777 = invoke(stypy.reporting.localization.Localization(__file__, 1389, 11), var_575771, *[], **kwargs_575776)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 4), 'stypy_return_type', var_call_result_575777)
    
    # ################# End of 'trimmed_var(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trimmed_var' in the type store
    # Getting the type of 'stypy_return_type' (line 1371)
    stypy_return_type_575778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_575778)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trimmed_var'
    return stypy_return_type_575778

# Assigning a type to the variable 'trimmed_var' (line 1371)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 0), 'trimmed_var', trimmed_var)

@norecursion
def trimmed_std(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 1392)
    tuple_575779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1392)
    # Adding element type (line 1392)
    float_575780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 27), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 27), tuple_575779, float_575780)
    # Adding element type (line 1392)
    float_575781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 31), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 27), tuple_575779, float_575781)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1392)
    tuple_575782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1392)
    # Adding element type (line 1392)
    int_575783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 48), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 48), tuple_575782, int_575783)
    # Adding element type (line 1392)
    int_575784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 50), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 48), tuple_575782, int_575784)
    
    # Getting the type of 'True' (line 1392)
    True_575785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 63), 'True')
    # Getting the type of 'None' (line 1393)
    None_575786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 21), 'None')
    int_575787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1393, 32), 'int')
    defaults = [tuple_575779, tuple_575782, True_575785, None_575786, int_575787]
    # Create a new context for function 'trimmed_std'
    module_type_store = module_type_store.open_function_context('trimmed_std', 1392, 0, False)
    
    # Passed parameters checking function
    trimmed_std.stypy_localization = localization
    trimmed_std.stypy_type_of_self = None
    trimmed_std.stypy_type_store = module_type_store
    trimmed_std.stypy_function_name = 'trimmed_std'
    trimmed_std.stypy_param_names_list = ['a', 'limits', 'inclusive', 'relative', 'axis', 'ddof']
    trimmed_std.stypy_varargs_param_name = None
    trimmed_std.stypy_kwargs_param_name = None
    trimmed_std.stypy_call_defaults = defaults
    trimmed_std.stypy_call_varargs = varargs
    trimmed_std.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trimmed_std', ['a', 'limits', 'inclusive', 'relative', 'axis', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trimmed_std', localization, ['a', 'limits', 'inclusive', 'relative', 'axis', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trimmed_std(...)' code ##################

    str_575788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, (-1)), 'str', 'Returns the trimmed standard deviation of the data along the given axis.\n\n    %s\n    ddof : {0,integer}, optional\n        Means Delta Degrees of Freedom. The denominator used during computations\n        is (n-ddof). DDOF=0 corresponds to a biased estimate, DDOF=1 to an un-\n        biased estimate of the variance.\n\n    ')
    # Getting the type of 'trimdoc' (line 1402)
    trimdoc_575789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 10), 'trimdoc')
    # Applying the binary operator '%' (line 1402)
    result_mod_575790 = python_operator(stypy.reporting.localization.Localization(__file__, 1402, (-1)), '%', str_575788, trimdoc_575789)
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to isinstance(...): (line 1403)
    # Processing the call arguments (line 1403)
    # Getting the type of 'limits' (line 1403)
    limits_575792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 23), 'limits', False)
    # Getting the type of 'tuple' (line 1403)
    tuple_575793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 30), 'tuple', False)
    # Processing the call keyword arguments (line 1403)
    kwargs_575794 = {}
    # Getting the type of 'isinstance' (line 1403)
    isinstance_575791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 12), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1403)
    isinstance_call_result_575795 = invoke(stypy.reporting.localization.Localization(__file__, 1403, 12), isinstance_575791, *[limits_575792, tuple_575793], **kwargs_575794)
    
    # Applying the 'not' unary operator (line 1403)
    result_not__575796 = python_operator(stypy.reporting.localization.Localization(__file__, 1403, 8), 'not', isinstance_call_result_575795)
    
    
    # Call to isinstance(...): (line 1403)
    # Processing the call arguments (line 1403)
    # Getting the type of 'limits' (line 1403)
    limits_575798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 53), 'limits', False)
    # Getting the type of 'float' (line 1403)
    float_575799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 60), 'float', False)
    # Processing the call keyword arguments (line 1403)
    kwargs_575800 = {}
    # Getting the type of 'isinstance' (line 1403)
    isinstance_575797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 42), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1403)
    isinstance_call_result_575801 = invoke(stypy.reporting.localization.Localization(__file__, 1403, 42), isinstance_575797, *[limits_575798, float_575799], **kwargs_575800)
    
    # Applying the binary operator 'and' (line 1403)
    result_and_keyword_575802 = python_operator(stypy.reporting.localization.Localization(__file__, 1403, 7), 'and', result_not__575796, isinstance_call_result_575801)
    
    # Testing the type of an if condition (line 1403)
    if_condition_575803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1403, 4), result_and_keyword_575802)
    # Assigning a type to the variable 'if_condition_575803' (line 1403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 4), 'if_condition_575803', if_condition_575803)
    # SSA begins for if statement (line 1403)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1404):
    
    # Assigning a Tuple to a Name (line 1404):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1404)
    tuple_575804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1404)
    # Adding element type (line 1404)
    # Getting the type of 'limits' (line 1404)
    limits_575805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 18), 'limits')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1404, 18), tuple_575804, limits_575805)
    # Adding element type (line 1404)
    # Getting the type of 'limits' (line 1404)
    limits_575806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 26), 'limits')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1404, 18), tuple_575804, limits_575806)
    
    # Assigning a type to the variable 'limits' (line 1404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 8), 'limits', tuple_575804)
    # SSA join for if statement (line 1403)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'relative' (line 1405)
    relative_575807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 7), 'relative')
    # Testing the type of an if condition (line 1405)
    if_condition_575808 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1405, 4), relative_575807)
    # Assigning a type to the variable 'if_condition_575808' (line 1405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 4), 'if_condition_575808', if_condition_575808)
    # SSA begins for if statement (line 1405)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1406):
    
    # Assigning a Call to a Name (line 1406):
    
    # Call to trimr(...): (line 1406)
    # Processing the call arguments (line 1406)
    # Getting the type of 'a' (line 1406)
    a_575810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 20), 'a', False)
    # Processing the call keyword arguments (line 1406)
    # Getting the type of 'limits' (line 1406)
    limits_575811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 29), 'limits', False)
    keyword_575812 = limits_575811
    # Getting the type of 'inclusive' (line 1406)
    inclusive_575813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 46), 'inclusive', False)
    keyword_575814 = inclusive_575813
    # Getting the type of 'axis' (line 1406)
    axis_575815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 61), 'axis', False)
    keyword_575816 = axis_575815
    kwargs_575817 = {'axis': keyword_575816, 'limits': keyword_575812, 'inclusive': keyword_575814}
    # Getting the type of 'trimr' (line 1406)
    trimr_575809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 14), 'trimr', False)
    # Calling trimr(args, kwargs) (line 1406)
    trimr_call_result_575818 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 14), trimr_575809, *[a_575810], **kwargs_575817)
    
    # Assigning a type to the variable 'out' (line 1406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 8), 'out', trimr_call_result_575818)
    # SSA branch for the else part of an if statement (line 1405)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1408):
    
    # Assigning a Call to a Name (line 1408):
    
    # Call to trima(...): (line 1408)
    # Processing the call arguments (line 1408)
    # Getting the type of 'a' (line 1408)
    a_575820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 20), 'a', False)
    # Processing the call keyword arguments (line 1408)
    # Getting the type of 'limits' (line 1408)
    limits_575821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 29), 'limits', False)
    keyword_575822 = limits_575821
    # Getting the type of 'inclusive' (line 1408)
    inclusive_575823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 46), 'inclusive', False)
    keyword_575824 = inclusive_575823
    kwargs_575825 = {'limits': keyword_575822, 'inclusive': keyword_575824}
    # Getting the type of 'trima' (line 1408)
    trima_575819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 14), 'trima', False)
    # Calling trima(args, kwargs) (line 1408)
    trima_call_result_575826 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 14), trima_575819, *[a_575820], **kwargs_575825)
    
    # Assigning a type to the variable 'out' (line 1408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 8), 'out', trima_call_result_575826)
    # SSA join for if statement (line 1405)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to std(...): (line 1409)
    # Processing the call keyword arguments (line 1409)
    # Getting the type of 'axis' (line 1409)
    axis_575829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 24), 'axis', False)
    keyword_575830 = axis_575829
    # Getting the type of 'ddof' (line 1409)
    ddof_575831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 34), 'ddof', False)
    keyword_575832 = ddof_575831
    kwargs_575833 = {'ddof': keyword_575832, 'axis': keyword_575830}
    # Getting the type of 'out' (line 1409)
    out_575827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 11), 'out', False)
    # Obtaining the member 'std' of a type (line 1409)
    std_575828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 11), out_575827, 'std')
    # Calling std(args, kwargs) (line 1409)
    std_call_result_575834 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 11), std_575828, *[], **kwargs_575833)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 4), 'stypy_return_type', std_call_result_575834)
    
    # ################# End of 'trimmed_std(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trimmed_std' in the type store
    # Getting the type of 'stypy_return_type' (line 1392)
    stypy_return_type_575835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_575835)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trimmed_std'
    return stypy_return_type_575835

# Assigning a type to the variable 'trimmed_std' (line 1392)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 0), 'trimmed_std', trimmed_std)

@norecursion
def trimmed_stde(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 1412)
    tuple_575836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1412)
    # Adding element type (line 1412)
    float_575837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 28), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1412, 28), tuple_575836, float_575837)
    # Adding element type (line 1412)
    float_575838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1412, 28), tuple_575836, float_575838)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1412)
    tuple_575839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 49), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1412)
    # Adding element type (line 1412)
    int_575840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 49), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1412, 49), tuple_575839, int_575840)
    # Adding element type (line 1412)
    int_575841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 51), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1412, 49), tuple_575839, int_575841)
    
    # Getting the type of 'None' (line 1412)
    None_575842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 60), 'None')
    defaults = [tuple_575836, tuple_575839, None_575842]
    # Create a new context for function 'trimmed_stde'
    module_type_store = module_type_store.open_function_context('trimmed_stde', 1412, 0, False)
    
    # Passed parameters checking function
    trimmed_stde.stypy_localization = localization
    trimmed_stde.stypy_type_of_self = None
    trimmed_stde.stypy_type_store = module_type_store
    trimmed_stde.stypy_function_name = 'trimmed_stde'
    trimmed_stde.stypy_param_names_list = ['a', 'limits', 'inclusive', 'axis']
    trimmed_stde.stypy_varargs_param_name = None
    trimmed_stde.stypy_kwargs_param_name = None
    trimmed_stde.stypy_call_defaults = defaults
    trimmed_stde.stypy_call_varargs = varargs
    trimmed_stde.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trimmed_stde', ['a', 'limits', 'inclusive', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trimmed_stde', localization, ['a', 'limits', 'inclusive', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trimmed_stde(...)' code ##################

    str_575843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1440, (-1)), 'str', '\n    Returns the standard error of the trimmed mean along the given axis.\n\n    Parameters\n    ----------\n    a : sequence\n        Input array\n    limits : {(0.1,0.1), tuple of float}, optional\n        tuple (lower percentage, upper percentage) to cut  on each side of the\n        array, with respect to the number of unmasked data.\n\n        If n is the number of unmasked data before trimming, the values\n        smaller than ``n * limits[0]`` and the values larger than\n        ``n * `limits[1]`` are masked, and the total number of unmasked\n        data after trimming is ``n * (1.-sum(limits))``.  In each case,\n        the value of one limit can be set to None to indicate an open interval.\n        If `limits` is None, no trimming is performed.\n    inclusive : {(bool, bool) tuple} optional\n        Tuple indicating whether the number of data being masked on each side\n        should be rounded (True) or truncated (False).\n    axis : int, optional\n        Axis along which to trim.\n\n    Returns\n    -------\n    trimmed_stde : scalar or ndarray\n\n    ')

    @norecursion
    def _trimmed_stde_1D(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_trimmed_stde_1D'
        module_type_store = module_type_store.open_function_context('_trimmed_stde_1D', 1441, 4, False)
        
        # Passed parameters checking function
        _trimmed_stde_1D.stypy_localization = localization
        _trimmed_stde_1D.stypy_type_of_self = None
        _trimmed_stde_1D.stypy_type_store = module_type_store
        _trimmed_stde_1D.stypy_function_name = '_trimmed_stde_1D'
        _trimmed_stde_1D.stypy_param_names_list = ['a', 'low_limit', 'up_limit', 'low_inclusive', 'up_inclusive']
        _trimmed_stde_1D.stypy_varargs_param_name = None
        _trimmed_stde_1D.stypy_kwargs_param_name = None
        _trimmed_stde_1D.stypy_call_defaults = defaults
        _trimmed_stde_1D.stypy_call_varargs = varargs
        _trimmed_stde_1D.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_trimmed_stde_1D', ['a', 'low_limit', 'up_limit', 'low_inclusive', 'up_inclusive'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_trimmed_stde_1D', localization, ['a', 'low_limit', 'up_limit', 'low_inclusive', 'up_inclusive'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_trimmed_stde_1D(...)' code ##################

        str_575844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 8), 'str', 'Returns the standard error of the trimmed mean for a 1D input data.')
        
        # Assigning a Call to a Name (line 1443):
        
        # Assigning a Call to a Name (line 1443):
        
        # Call to count(...): (line 1443)
        # Processing the call keyword arguments (line 1443)
        kwargs_575847 = {}
        # Getting the type of 'a' (line 1443)
        a_575845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 12), 'a', False)
        # Obtaining the member 'count' of a type (line 1443)
        count_575846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 12), a_575845, 'count')
        # Calling count(args, kwargs) (line 1443)
        count_call_result_575848 = invoke(stypy.reporting.localization.Localization(__file__, 1443, 12), count_575846, *[], **kwargs_575847)
        
        # Assigning a type to the variable 'n' (line 1443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 8), 'n', count_call_result_575848)
        
        # Assigning a Call to a Name (line 1444):
        
        # Assigning a Call to a Name (line 1444):
        
        # Call to argsort(...): (line 1444)
        # Processing the call keyword arguments (line 1444)
        kwargs_575851 = {}
        # Getting the type of 'a' (line 1444)
        a_575849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 14), 'a', False)
        # Obtaining the member 'argsort' of a type (line 1444)
        argsort_575850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 14), a_575849, 'argsort')
        # Calling argsort(args, kwargs) (line 1444)
        argsort_call_result_575852 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 14), argsort_575850, *[], **kwargs_575851)
        
        # Assigning a type to the variable 'idx' (line 1444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 8), 'idx', argsort_call_result_575852)
        
        # Getting the type of 'low_limit' (line 1445)
        low_limit_575853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 11), 'low_limit')
        # Testing the type of an if condition (line 1445)
        if_condition_575854 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1445, 8), low_limit_575853)
        # Assigning a type to the variable 'if_condition_575854' (line 1445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 8), 'if_condition_575854', if_condition_575854)
        # SSA begins for if statement (line 1445)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'low_inclusive' (line 1446)
        low_inclusive_575855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 15), 'low_inclusive')
        # Testing the type of an if condition (line 1446)
        if_condition_575856 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1446, 12), low_inclusive_575855)
        # Assigning a type to the variable 'if_condition_575856' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'if_condition_575856', if_condition_575856)
        # SSA begins for if statement (line 1446)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1447):
        
        # Assigning a Call to a Name (line 1447):
        
        # Call to int(...): (line 1447)
        # Processing the call arguments (line 1447)
        # Getting the type of 'low_limit' (line 1447)
        low_limit_575858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 29), 'low_limit', False)
        # Getting the type of 'n' (line 1447)
        n_575859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 39), 'n', False)
        # Applying the binary operator '*' (line 1447)
        result_mul_575860 = python_operator(stypy.reporting.localization.Localization(__file__, 1447, 29), '*', low_limit_575858, n_575859)
        
        # Processing the call keyword arguments (line 1447)
        kwargs_575861 = {}
        # Getting the type of 'int' (line 1447)
        int_575857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 25), 'int', False)
        # Calling int(args, kwargs) (line 1447)
        int_call_result_575862 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 25), int_575857, *[result_mul_575860], **kwargs_575861)
        
        # Assigning a type to the variable 'lowidx' (line 1447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 16), 'lowidx', int_call_result_575862)
        # SSA branch for the else part of an if statement (line 1446)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1449):
        
        # Assigning a Call to a Name (line 1449):
        
        # Call to round(...): (line 1449)
        # Processing the call arguments (line 1449)
        # Getting the type of 'low_limit' (line 1449)
        low_limit_575865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 34), 'low_limit', False)
        # Getting the type of 'n' (line 1449)
        n_575866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 44), 'n', False)
        # Applying the binary operator '*' (line 1449)
        result_mul_575867 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 34), '*', low_limit_575865, n_575866)
        
        # Processing the call keyword arguments (line 1449)
        kwargs_575868 = {}
        # Getting the type of 'np' (line 1449)
        np_575863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 25), 'np', False)
        # Obtaining the member 'round' of a type (line 1449)
        round_575864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1449, 25), np_575863, 'round')
        # Calling round(args, kwargs) (line 1449)
        round_call_result_575869 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 25), round_575864, *[result_mul_575867], **kwargs_575868)
        
        # Assigning a type to the variable 'lowidx' (line 1449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 16), 'lowidx', round_call_result_575869)
        # SSA join for if statement (line 1446)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 1450):
        
        # Assigning a Name to a Subscript (line 1450):
        # Getting the type of 'masked' (line 1450)
        masked_575870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 30), 'masked')
        # Getting the type of 'a' (line 1450)
        a_575871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 12), 'a')
        
        # Obtaining the type of the subscript
        # Getting the type of 'lowidx' (line 1450)
        lowidx_575872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 19), 'lowidx')
        slice_575873 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1450, 14), None, lowidx_575872, None)
        # Getting the type of 'idx' (line 1450)
        idx_575874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 14), 'idx')
        # Obtaining the member '__getitem__' of a type (line 1450)
        getitem___575875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 14), idx_575874, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1450)
        subscript_call_result_575876 = invoke(stypy.reporting.localization.Localization(__file__, 1450, 14), getitem___575875, slice_575873)
        
        # Storing an element on a container (line 1450)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1450, 12), a_575871, (subscript_call_result_575876, masked_575870))
        # SSA join for if statement (line 1445)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1451)
        # Getting the type of 'up_limit' (line 1451)
        up_limit_575877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 8), 'up_limit')
        # Getting the type of 'None' (line 1451)
        None_575878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 27), 'None')
        
        (may_be_575879, more_types_in_union_575880) = may_not_be_none(up_limit_575877, None_575878)

        if may_be_575879:

            if more_types_in_union_575880:
                # Runtime conditional SSA (line 1451)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'up_inclusive' (line 1452)
            up_inclusive_575881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 15), 'up_inclusive')
            # Testing the type of an if condition (line 1452)
            if_condition_575882 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1452, 12), up_inclusive_575881)
            # Assigning a type to the variable 'if_condition_575882' (line 1452)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1452, 12), 'if_condition_575882', if_condition_575882)
            # SSA begins for if statement (line 1452)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 1453):
            
            # Assigning a BinOp to a Name (line 1453):
            # Getting the type of 'n' (line 1453)
            n_575883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 24), 'n')
            
            # Call to int(...): (line 1453)
            # Processing the call arguments (line 1453)
            # Getting the type of 'n' (line 1453)
            n_575885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 32), 'n', False)
            # Getting the type of 'up_limit' (line 1453)
            up_limit_575886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 34), 'up_limit', False)
            # Applying the binary operator '*' (line 1453)
            result_mul_575887 = python_operator(stypy.reporting.localization.Localization(__file__, 1453, 32), '*', n_575885, up_limit_575886)
            
            # Processing the call keyword arguments (line 1453)
            kwargs_575888 = {}
            # Getting the type of 'int' (line 1453)
            int_575884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 28), 'int', False)
            # Calling int(args, kwargs) (line 1453)
            int_call_result_575889 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 28), int_575884, *[result_mul_575887], **kwargs_575888)
            
            # Applying the binary operator '-' (line 1453)
            result_sub_575890 = python_operator(stypy.reporting.localization.Localization(__file__, 1453, 24), '-', n_575883, int_call_result_575889)
            
            # Assigning a type to the variable 'upidx' (line 1453)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1453, 16), 'upidx', result_sub_575890)
            # SSA branch for the else part of an if statement (line 1452)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a BinOp to a Name (line 1455):
            
            # Assigning a BinOp to a Name (line 1455):
            # Getting the type of 'n' (line 1455)
            n_575891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 24), 'n')
            
            # Call to round(...): (line 1455)
            # Processing the call arguments (line 1455)
            # Getting the type of 'n' (line 1455)
            n_575894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 37), 'n', False)
            # Getting the type of 'up_limit' (line 1455)
            up_limit_575895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 39), 'up_limit', False)
            # Applying the binary operator '*' (line 1455)
            result_mul_575896 = python_operator(stypy.reporting.localization.Localization(__file__, 1455, 37), '*', n_575894, up_limit_575895)
            
            # Processing the call keyword arguments (line 1455)
            kwargs_575897 = {}
            # Getting the type of 'np' (line 1455)
            np_575892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 28), 'np', False)
            # Obtaining the member 'round' of a type (line 1455)
            round_575893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1455, 28), np_575892, 'round')
            # Calling round(args, kwargs) (line 1455)
            round_call_result_575898 = invoke(stypy.reporting.localization.Localization(__file__, 1455, 28), round_575893, *[result_mul_575896], **kwargs_575897)
            
            # Applying the binary operator '-' (line 1455)
            result_sub_575899 = python_operator(stypy.reporting.localization.Localization(__file__, 1455, 24), '-', n_575891, round_call_result_575898)
            
            # Assigning a type to the variable 'upidx' (line 1455)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 16), 'upidx', result_sub_575899)
            # SSA join for if statement (line 1452)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Name to a Subscript (line 1456):
            
            # Assigning a Name to a Subscript (line 1456):
            # Getting the type of 'masked' (line 1456)
            masked_575900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 29), 'masked')
            # Getting the type of 'a' (line 1456)
            a_575901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 'a')
            
            # Obtaining the type of the subscript
            # Getting the type of 'upidx' (line 1456)
            upidx_575902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 18), 'upidx')
            slice_575903 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1456, 14), upidx_575902, None, None)
            # Getting the type of 'idx' (line 1456)
            idx_575904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 14), 'idx')
            # Obtaining the member '__getitem__' of a type (line 1456)
            getitem___575905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 14), idx_575904, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1456)
            subscript_call_result_575906 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 14), getitem___575905, slice_575903)
            
            # Storing an element on a container (line 1456)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1456, 12), a_575901, (subscript_call_result_575906, masked_575900))

            if more_types_in_union_575880:
                # SSA join for if statement (line 1451)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Subscript to a Subscript (line 1457):
        
        # Assigning a Subscript to a Subscript (line 1457):
        
        # Obtaining the type of the subscript
        
        # Obtaining the type of the subscript
        # Getting the type of 'lowidx' (line 1457)
        lowidx_575907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 32), 'lowidx')
        # Getting the type of 'idx' (line 1457)
        idx_575908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 28), 'idx')
        # Obtaining the member '__getitem__' of a type (line 1457)
        getitem___575909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1457, 28), idx_575908, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1457)
        subscript_call_result_575910 = invoke(stypy.reporting.localization.Localization(__file__, 1457, 28), getitem___575909, lowidx_575907)
        
        # Getting the type of 'a' (line 1457)
        a_575911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 26), 'a')
        # Obtaining the member '__getitem__' of a type (line 1457)
        getitem___575912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1457, 26), a_575911, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1457)
        subscript_call_result_575913 = invoke(stypy.reporting.localization.Localization(__file__, 1457, 26), getitem___575912, subscript_call_result_575910)
        
        # Getting the type of 'a' (line 1457)
        a_575914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 8), 'a')
        
        # Obtaining the type of the subscript
        # Getting the type of 'lowidx' (line 1457)
        lowidx_575915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 15), 'lowidx')
        slice_575916 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1457, 10), None, lowidx_575915, None)
        # Getting the type of 'idx' (line 1457)
        idx_575917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 10), 'idx')
        # Obtaining the member '__getitem__' of a type (line 1457)
        getitem___575918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1457, 10), idx_575917, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1457)
        subscript_call_result_575919 = invoke(stypy.reporting.localization.Localization(__file__, 1457, 10), getitem___575918, slice_575916)
        
        # Storing an element on a container (line 1457)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1457, 8), a_575914, (subscript_call_result_575919, subscript_call_result_575913))
        
        # Assigning a Subscript to a Subscript (line 1458):
        
        # Assigning a Subscript to a Subscript (line 1458):
        
        # Obtaining the type of the subscript
        
        # Obtaining the type of the subscript
        # Getting the type of 'upidx' (line 1458)
        upidx_575920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 31), 'upidx')
        int_575921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 37), 'int')
        # Applying the binary operator '-' (line 1458)
        result_sub_575922 = python_operator(stypy.reporting.localization.Localization(__file__, 1458, 31), '-', upidx_575920, int_575921)
        
        # Getting the type of 'idx' (line 1458)
        idx_575923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 27), 'idx')
        # Obtaining the member '__getitem__' of a type (line 1458)
        getitem___575924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 27), idx_575923, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1458)
        subscript_call_result_575925 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 27), getitem___575924, result_sub_575922)
        
        # Getting the type of 'a' (line 1458)
        a_575926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 25), 'a')
        # Obtaining the member '__getitem__' of a type (line 1458)
        getitem___575927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 25), a_575926, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1458)
        subscript_call_result_575928 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 25), getitem___575927, subscript_call_result_575925)
        
        # Getting the type of 'a' (line 1458)
        a_575929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 8), 'a')
        
        # Obtaining the type of the subscript
        # Getting the type of 'upidx' (line 1458)
        upidx_575930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 14), 'upidx')
        slice_575931 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1458, 10), upidx_575930, None, None)
        # Getting the type of 'idx' (line 1458)
        idx_575932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 10), 'idx')
        # Obtaining the member '__getitem__' of a type (line 1458)
        getitem___575933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 10), idx_575932, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1458)
        subscript_call_result_575934 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 10), getitem___575933, slice_575931)
        
        # Storing an element on a container (line 1458)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1458, 8), a_575929, (subscript_call_result_575934, subscript_call_result_575928))
        
        # Assigning a Call to a Name (line 1459):
        
        # Assigning a Call to a Name (line 1459):
        
        # Call to std(...): (line 1459)
        # Processing the call keyword arguments (line 1459)
        int_575937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 28), 'int')
        keyword_575938 = int_575937
        kwargs_575939 = {'ddof': keyword_575938}
        # Getting the type of 'a' (line 1459)
        a_575935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 17), 'a', False)
        # Obtaining the member 'std' of a type (line 1459)
        std_575936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 17), a_575935, 'std')
        # Calling std(args, kwargs) (line 1459)
        std_call_result_575940 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 17), std_575936, *[], **kwargs_575939)
        
        # Assigning a type to the variable 'winstd' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'winstd', std_call_result_575940)
        # Getting the type of 'winstd' (line 1460)
        winstd_575941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 15), 'winstd')
        int_575942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1460, 26), 'int')
        # Getting the type of 'low_limit' (line 1460)
        low_limit_575943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 28), 'low_limit')
        # Applying the binary operator '-' (line 1460)
        result_sub_575944 = python_operator(stypy.reporting.localization.Localization(__file__, 1460, 26), '-', int_575942, low_limit_575943)
        
        # Getting the type of 'up_limit' (line 1460)
        up_limit_575945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 38), 'up_limit')
        # Applying the binary operator '-' (line 1460)
        result_sub_575946 = python_operator(stypy.reporting.localization.Localization(__file__, 1460, 37), '-', result_sub_575944, up_limit_575945)
        
        
        # Call to sqrt(...): (line 1460)
        # Processing the call arguments (line 1460)
        
        # Call to len(...): (line 1460)
        # Processing the call arguments (line 1460)
        # Getting the type of 'a' (line 1460)
        a_575950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 60), 'a', False)
        # Processing the call keyword arguments (line 1460)
        kwargs_575951 = {}
        # Getting the type of 'len' (line 1460)
        len_575949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 56), 'len', False)
        # Calling len(args, kwargs) (line 1460)
        len_call_result_575952 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 56), len_575949, *[a_575950], **kwargs_575951)
        
        # Processing the call keyword arguments (line 1460)
        kwargs_575953 = {}
        # Getting the type of 'np' (line 1460)
        np_575947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 48), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 1460)
        sqrt_575948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 48), np_575947, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1460)
        sqrt_call_result_575954 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 48), sqrt_575948, *[len_call_result_575952], **kwargs_575953)
        
        # Applying the binary operator '*' (line 1460)
        result_mul_575955 = python_operator(stypy.reporting.localization.Localization(__file__, 1460, 25), '*', result_sub_575946, sqrt_call_result_575954)
        
        # Applying the binary operator 'div' (line 1460)
        result_div_575956 = python_operator(stypy.reporting.localization.Localization(__file__, 1460, 15), 'div', winstd_575941, result_mul_575955)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'stypy_return_type', result_div_575956)
        
        # ################# End of '_trimmed_stde_1D(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_trimmed_stde_1D' in the type store
        # Getting the type of 'stypy_return_type' (line 1441)
        stypy_return_type_575957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_575957)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_trimmed_stde_1D'
        return stypy_return_type_575957

    # Assigning a type to the variable '_trimmed_stde_1D' (line 1441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 4), '_trimmed_stde_1D', _trimmed_stde_1D)
    
    # Assigning a Call to a Name (line 1462):
    
    # Assigning a Call to a Name (line 1462):
    
    # Call to array(...): (line 1462)
    # Processing the call arguments (line 1462)
    # Getting the type of 'a' (line 1462)
    a_575960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 17), 'a', False)
    # Processing the call keyword arguments (line 1462)
    # Getting the type of 'True' (line 1462)
    True_575961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 25), 'True', False)
    keyword_575962 = True_575961
    # Getting the type of 'True' (line 1462)
    True_575963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 37), 'True', False)
    keyword_575964 = True_575963
    kwargs_575965 = {'subok': keyword_575964, 'copy': keyword_575962}
    # Getting the type of 'ma' (line 1462)
    ma_575958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 8), 'ma', False)
    # Obtaining the member 'array' of a type (line 1462)
    array_575959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1462, 8), ma_575958, 'array')
    # Calling array(args, kwargs) (line 1462)
    array_call_result_575966 = invoke(stypy.reporting.localization.Localization(__file__, 1462, 8), array_575959, *[a_575960], **kwargs_575965)
    
    # Assigning a type to the variable 'a' (line 1462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1462, 4), 'a', array_call_result_575966)
    
    # Call to unshare_mask(...): (line 1463)
    # Processing the call keyword arguments (line 1463)
    kwargs_575969 = {}
    # Getting the type of 'a' (line 1463)
    a_575967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 4), 'a', False)
    # Obtaining the member 'unshare_mask' of a type (line 1463)
    unshare_mask_575968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 4), a_575967, 'unshare_mask')
    # Calling unshare_mask(args, kwargs) (line 1463)
    unshare_mask_call_result_575970 = invoke(stypy.reporting.localization.Localization(__file__, 1463, 4), unshare_mask_575968, *[], **kwargs_575969)
    
    
    # Type idiom detected: calculating its left and rigth part (line 1464)
    # Getting the type of 'limits' (line 1464)
    limits_575971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 7), 'limits')
    # Getting the type of 'None' (line 1464)
    None_575972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 17), 'None')
    
    (may_be_575973, more_types_in_union_575974) = may_be_none(limits_575971, None_575972)

    if may_be_575973:

        if more_types_in_union_575974:
            # Runtime conditional SSA (line 1464)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to std(...): (line 1465)
        # Processing the call keyword arguments (line 1465)
        # Getting the type of 'axis' (line 1465)
        axis_575977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 26), 'axis', False)
        keyword_575978 = axis_575977
        int_575979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 36), 'int')
        keyword_575980 = int_575979
        kwargs_575981 = {'ddof': keyword_575980, 'axis': keyword_575978}
        # Getting the type of 'a' (line 1465)
        a_575975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 15), 'a', False)
        # Obtaining the member 'std' of a type (line 1465)
        std_575976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 15), a_575975, 'std')
        # Calling std(args, kwargs) (line 1465)
        std_call_result_575982 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 15), std_575976, *[], **kwargs_575981)
        
        
        # Call to sqrt(...): (line 1465)
        # Processing the call arguments (line 1465)
        
        # Call to count(...): (line 1465)
        # Processing the call arguments (line 1465)
        # Getting the type of 'axis' (line 1465)
        axis_575987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 55), 'axis', False)
        # Processing the call keyword arguments (line 1465)
        kwargs_575988 = {}
        # Getting the type of 'a' (line 1465)
        a_575985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 47), 'a', False)
        # Obtaining the member 'count' of a type (line 1465)
        count_575986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 47), a_575985, 'count')
        # Calling count(args, kwargs) (line 1465)
        count_call_result_575989 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 47), count_575986, *[axis_575987], **kwargs_575988)
        
        # Processing the call keyword arguments (line 1465)
        kwargs_575990 = {}
        # Getting the type of 'ma' (line 1465)
        ma_575983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 39), 'ma', False)
        # Obtaining the member 'sqrt' of a type (line 1465)
        sqrt_575984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 39), ma_575983, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1465)
        sqrt_call_result_575991 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 39), sqrt_575984, *[count_call_result_575989], **kwargs_575990)
        
        # Applying the binary operator 'div' (line 1465)
        result_div_575992 = python_operator(stypy.reporting.localization.Localization(__file__, 1465, 15), 'div', std_call_result_575982, sqrt_call_result_575991)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 8), 'stypy_return_type', result_div_575992)

        if more_types_in_union_575974:
            # SSA join for if statement (line 1464)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Evaluating a boolean operation
    
    
    # Call to isinstance(...): (line 1466)
    # Processing the call arguments (line 1466)
    # Getting the type of 'limits' (line 1466)
    limits_575994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 23), 'limits', False)
    # Getting the type of 'tuple' (line 1466)
    tuple_575995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 30), 'tuple', False)
    # Processing the call keyword arguments (line 1466)
    kwargs_575996 = {}
    # Getting the type of 'isinstance' (line 1466)
    isinstance_575993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 12), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1466)
    isinstance_call_result_575997 = invoke(stypy.reporting.localization.Localization(__file__, 1466, 12), isinstance_575993, *[limits_575994, tuple_575995], **kwargs_575996)
    
    # Applying the 'not' unary operator (line 1466)
    result_not__575998 = python_operator(stypy.reporting.localization.Localization(__file__, 1466, 8), 'not', isinstance_call_result_575997)
    
    
    # Call to isinstance(...): (line 1466)
    # Processing the call arguments (line 1466)
    # Getting the type of 'limits' (line 1466)
    limits_576000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 53), 'limits', False)
    # Getting the type of 'float' (line 1466)
    float_576001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 60), 'float', False)
    # Processing the call keyword arguments (line 1466)
    kwargs_576002 = {}
    # Getting the type of 'isinstance' (line 1466)
    isinstance_575999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 42), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1466)
    isinstance_call_result_576003 = invoke(stypy.reporting.localization.Localization(__file__, 1466, 42), isinstance_575999, *[limits_576000, float_576001], **kwargs_576002)
    
    # Applying the binary operator 'and' (line 1466)
    result_and_keyword_576004 = python_operator(stypy.reporting.localization.Localization(__file__, 1466, 7), 'and', result_not__575998, isinstance_call_result_576003)
    
    # Testing the type of an if condition (line 1466)
    if_condition_576005 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1466, 4), result_and_keyword_576004)
    # Assigning a type to the variable 'if_condition_576005' (line 1466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 4), 'if_condition_576005', if_condition_576005)
    # SSA begins for if statement (line 1466)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1467):
    
    # Assigning a Tuple to a Name (line 1467):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1467)
    tuple_576006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1467)
    # Adding element type (line 1467)
    # Getting the type of 'limits' (line 1467)
    limits_576007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 18), 'limits')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1467, 18), tuple_576006, limits_576007)
    # Adding element type (line 1467)
    # Getting the type of 'limits' (line 1467)
    limits_576008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 26), 'limits')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1467, 18), tuple_576006, limits_576008)
    
    # Assigning a type to the variable 'limits' (line 1467)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 8), 'limits', tuple_576006)
    # SSA join for if statement (line 1466)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Tuple (line 1470):
    
    # Assigning a Subscript to a Name (line 1470):
    
    # Obtaining the type of the subscript
    int_576009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 4), 'int')
    # Getting the type of 'limits' (line 1470)
    limits_576010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 21), 'limits')
    # Obtaining the member '__getitem__' of a type (line 1470)
    getitem___576011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 4), limits_576010, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1470)
    subscript_call_result_576012 = invoke(stypy.reporting.localization.Localization(__file__, 1470, 4), getitem___576011, int_576009)
    
    # Assigning a type to the variable 'tuple_var_assignment_571499' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 4), 'tuple_var_assignment_571499', subscript_call_result_576012)
    
    # Assigning a Subscript to a Name (line 1470):
    
    # Obtaining the type of the subscript
    int_576013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 4), 'int')
    # Getting the type of 'limits' (line 1470)
    limits_576014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 21), 'limits')
    # Obtaining the member '__getitem__' of a type (line 1470)
    getitem___576015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 4), limits_576014, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1470)
    subscript_call_result_576016 = invoke(stypy.reporting.localization.Localization(__file__, 1470, 4), getitem___576015, int_576013)
    
    # Assigning a type to the variable 'tuple_var_assignment_571500' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 4), 'tuple_var_assignment_571500', subscript_call_result_576016)
    
    # Assigning a Name to a Name (line 1470):
    # Getting the type of 'tuple_var_assignment_571499' (line 1470)
    tuple_var_assignment_571499_576017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 4), 'tuple_var_assignment_571499')
    # Assigning a type to the variable 'lolim' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 5), 'lolim', tuple_var_assignment_571499_576017)
    
    # Assigning a Name to a Name (line 1470):
    # Getting the type of 'tuple_var_assignment_571500' (line 1470)
    tuple_var_assignment_571500_576018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 4), 'tuple_var_assignment_571500')
    # Assigning a type to the variable 'uplim' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 12), 'uplim', tuple_var_assignment_571500_576018)
    
    # Assigning a Str to a Name (line 1471):
    
    # Assigning a Str to a Name (line 1471):
    str_576019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 13), 'str', 'The proportion to cut from the %s should be between 0. and 1.')
    # Assigning a type to the variable 'errmsg' (line 1471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 4), 'errmsg', str_576019)
    
    # Type idiom detected: calculating its left and rigth part (line 1472)
    # Getting the type of 'lolim' (line 1472)
    lolim_576020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 4), 'lolim')
    # Getting the type of 'None' (line 1472)
    None_576021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 20), 'None')
    
    (may_be_576022, more_types_in_union_576023) = may_not_be_none(lolim_576020, None_576021)

    if may_be_576022:

        if more_types_in_union_576023:
            # Runtime conditional SSA (line 1472)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'lolim' (line 1473)
        lolim_576024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 11), 'lolim')
        float_576025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, 19), 'float')
        # Applying the binary operator '>' (line 1473)
        result_gt_576026 = python_operator(stypy.reporting.localization.Localization(__file__, 1473, 11), '>', lolim_576024, float_576025)
        
        
        # Getting the type of 'lolim' (line 1473)
        lolim_576027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 25), 'lolim')
        int_576028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, 33), 'int')
        # Applying the binary operator '<' (line 1473)
        result_lt_576029 = python_operator(stypy.reporting.localization.Localization(__file__, 1473, 25), '<', lolim_576027, int_576028)
        
        # Applying the binary operator 'or' (line 1473)
        result_or_keyword_576030 = python_operator(stypy.reporting.localization.Localization(__file__, 1473, 11), 'or', result_gt_576026, result_lt_576029)
        
        # Testing the type of an if condition (line 1473)
        if_condition_576031 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1473, 8), result_or_keyword_576030)
        # Assigning a type to the variable 'if_condition_576031' (line 1473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 8), 'if_condition_576031', if_condition_576031)
        # SSA begins for if statement (line 1473)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1474)
        # Processing the call arguments (line 1474)
        # Getting the type of 'errmsg' (line 1474)
        errmsg_576033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 29), 'errmsg', False)
        str_576034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1474, 38), 'str', 'beginning')
        # Applying the binary operator '%' (line 1474)
        result_mod_576035 = python_operator(stypy.reporting.localization.Localization(__file__, 1474, 29), '%', errmsg_576033, str_576034)
        
        str_576036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1474, 52), 'str', '(got %s)')
        # Getting the type of 'lolim' (line 1474)
        lolim_576037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 65), 'lolim', False)
        # Applying the binary operator '%' (line 1474)
        result_mod_576038 = python_operator(stypy.reporting.localization.Localization(__file__, 1474, 52), '%', str_576036, lolim_576037)
        
        # Applying the binary operator '+' (line 1474)
        result_add_576039 = python_operator(stypy.reporting.localization.Localization(__file__, 1474, 29), '+', result_mod_576035, result_mod_576038)
        
        # Processing the call keyword arguments (line 1474)
        kwargs_576040 = {}
        # Getting the type of 'ValueError' (line 1474)
        ValueError_576032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1474)
        ValueError_call_result_576041 = invoke(stypy.reporting.localization.Localization(__file__, 1474, 18), ValueError_576032, *[result_add_576039], **kwargs_576040)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1474, 12), ValueError_call_result_576041, 'raise parameter', BaseException)
        # SSA join for if statement (line 1473)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_576023:
            # SSA join for if statement (line 1472)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1475)
    # Getting the type of 'uplim' (line 1475)
    uplim_576042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 4), 'uplim')
    # Getting the type of 'None' (line 1475)
    None_576043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 20), 'None')
    
    (may_be_576044, more_types_in_union_576045) = may_not_be_none(uplim_576042, None_576043)

    if may_be_576044:

        if more_types_in_union_576045:
            # Runtime conditional SSA (line 1475)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'uplim' (line 1476)
        uplim_576046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 11), 'uplim')
        float_576047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1476, 19), 'float')
        # Applying the binary operator '>' (line 1476)
        result_gt_576048 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 11), '>', uplim_576046, float_576047)
        
        
        # Getting the type of 'uplim' (line 1476)
        uplim_576049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 25), 'uplim')
        int_576050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1476, 33), 'int')
        # Applying the binary operator '<' (line 1476)
        result_lt_576051 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 25), '<', uplim_576049, int_576050)
        
        # Applying the binary operator 'or' (line 1476)
        result_or_keyword_576052 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 11), 'or', result_gt_576048, result_lt_576051)
        
        # Testing the type of an if condition (line 1476)
        if_condition_576053 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1476, 8), result_or_keyword_576052)
        # Assigning a type to the variable 'if_condition_576053' (line 1476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 8), 'if_condition_576053', if_condition_576053)
        # SSA begins for if statement (line 1476)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1477)
        # Processing the call arguments (line 1477)
        # Getting the type of 'errmsg' (line 1477)
        errmsg_576055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 29), 'errmsg', False)
        str_576056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1477, 38), 'str', 'end')
        # Applying the binary operator '%' (line 1477)
        result_mod_576057 = python_operator(stypy.reporting.localization.Localization(__file__, 1477, 29), '%', errmsg_576055, str_576056)
        
        str_576058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1477, 46), 'str', '(got %s)')
        # Getting the type of 'uplim' (line 1477)
        uplim_576059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 59), 'uplim', False)
        # Applying the binary operator '%' (line 1477)
        result_mod_576060 = python_operator(stypy.reporting.localization.Localization(__file__, 1477, 46), '%', str_576058, uplim_576059)
        
        # Applying the binary operator '+' (line 1477)
        result_add_576061 = python_operator(stypy.reporting.localization.Localization(__file__, 1477, 29), '+', result_mod_576057, result_mod_576060)
        
        # Processing the call keyword arguments (line 1477)
        kwargs_576062 = {}
        # Getting the type of 'ValueError' (line 1477)
        ValueError_576054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1477)
        ValueError_call_result_576063 = invoke(stypy.reporting.localization.Localization(__file__, 1477, 18), ValueError_576054, *[result_add_576061], **kwargs_576062)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1477, 12), ValueError_call_result_576063, 'raise parameter', BaseException)
        # SSA join for if statement (line 1476)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_576045:
            # SSA join for if statement (line 1475)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Tuple (line 1479):
    
    # Assigning a Subscript to a Name (line 1479):
    
    # Obtaining the type of the subscript
    int_576064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 4), 'int')
    # Getting the type of 'inclusive' (line 1479)
    inclusive_576065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 21), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 1479)
    getitem___576066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 4), inclusive_576065, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1479)
    subscript_call_result_576067 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 4), getitem___576066, int_576064)
    
    # Assigning a type to the variable 'tuple_var_assignment_571501' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 4), 'tuple_var_assignment_571501', subscript_call_result_576067)
    
    # Assigning a Subscript to a Name (line 1479):
    
    # Obtaining the type of the subscript
    int_576068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 4), 'int')
    # Getting the type of 'inclusive' (line 1479)
    inclusive_576069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 21), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 1479)
    getitem___576070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 4), inclusive_576069, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1479)
    subscript_call_result_576071 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 4), getitem___576070, int_576068)
    
    # Assigning a type to the variable 'tuple_var_assignment_571502' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 4), 'tuple_var_assignment_571502', subscript_call_result_576071)
    
    # Assigning a Name to a Name (line 1479):
    # Getting the type of 'tuple_var_assignment_571501' (line 1479)
    tuple_var_assignment_571501_576072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 4), 'tuple_var_assignment_571501')
    # Assigning a type to the variable 'loinc' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 5), 'loinc', tuple_var_assignment_571501_576072)
    
    # Assigning a Name to a Name (line 1479):
    # Getting the type of 'tuple_var_assignment_571502' (line 1479)
    tuple_var_assignment_571502_576073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 4), 'tuple_var_assignment_571502')
    # Assigning a type to the variable 'upinc' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'upinc', tuple_var_assignment_571502_576073)
    
    # Type idiom detected: calculating its left and rigth part (line 1480)
    # Getting the type of 'axis' (line 1480)
    axis_576074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 8), 'axis')
    # Getting the type of 'None' (line 1480)
    None_576075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 16), 'None')
    
    (may_be_576076, more_types_in_union_576077) = may_be_none(axis_576074, None_576075)

    if may_be_576076:

        if more_types_in_union_576077:
            # Runtime conditional SSA (line 1480)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to _trimmed_stde_1D(...): (line 1481)
        # Processing the call arguments (line 1481)
        
        # Call to ravel(...): (line 1481)
        # Processing the call keyword arguments (line 1481)
        kwargs_576081 = {}
        # Getting the type of 'a' (line 1481)
        a_576079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 32), 'a', False)
        # Obtaining the member 'ravel' of a type (line 1481)
        ravel_576080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 32), a_576079, 'ravel')
        # Calling ravel(args, kwargs) (line 1481)
        ravel_call_result_576082 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 32), ravel_576080, *[], **kwargs_576081)
        
        # Getting the type of 'lolim' (line 1481)
        lolim_576083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 42), 'lolim', False)
        # Getting the type of 'uplim' (line 1481)
        uplim_576084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 48), 'uplim', False)
        # Getting the type of 'loinc' (line 1481)
        loinc_576085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 54), 'loinc', False)
        # Getting the type of 'upinc' (line 1481)
        upinc_576086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 60), 'upinc', False)
        # Processing the call keyword arguments (line 1481)
        kwargs_576087 = {}
        # Getting the type of '_trimmed_stde_1D' (line 1481)
        _trimmed_stde_1D_576078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 15), '_trimmed_stde_1D', False)
        # Calling _trimmed_stde_1D(args, kwargs) (line 1481)
        _trimmed_stde_1D_call_result_576088 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 15), _trimmed_stde_1D_576078, *[ravel_call_result_576082, lolim_576083, uplim_576084, loinc_576085, upinc_576086], **kwargs_576087)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 8), 'stypy_return_type', _trimmed_stde_1D_call_result_576088)

        if more_types_in_union_576077:
            # Runtime conditional SSA for else branch (line 1480)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_576076) or more_types_in_union_576077):
        
        
        # Getting the type of 'a' (line 1483)
        a_576089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 11), 'a')
        # Obtaining the member 'ndim' of a type (line 1483)
        ndim_576090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 11), a_576089, 'ndim')
        int_576091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 20), 'int')
        # Applying the binary operator '>' (line 1483)
        result_gt_576092 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 11), '>', ndim_576090, int_576091)
        
        # Testing the type of an if condition (line 1483)
        if_condition_576093 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1483, 8), result_gt_576092)
        # Assigning a type to the variable 'if_condition_576093' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 8), 'if_condition_576093', if_condition_576093)
        # SSA begins for if statement (line 1483)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1484)
        # Processing the call arguments (line 1484)
        str_576095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1484, 29), 'str', "Array 'a' must be at most two dimensional, but got a.ndim = %d")
        # Getting the type of 'a' (line 1484)
        a_576096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 96), 'a', False)
        # Obtaining the member 'ndim' of a type (line 1484)
        ndim_576097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 96), a_576096, 'ndim')
        # Applying the binary operator '%' (line 1484)
        result_mod_576098 = python_operator(stypy.reporting.localization.Localization(__file__, 1484, 29), '%', str_576095, ndim_576097)
        
        # Processing the call keyword arguments (line 1484)
        kwargs_576099 = {}
        # Getting the type of 'ValueError' (line 1484)
        ValueError_576094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1484)
        ValueError_call_result_576100 = invoke(stypy.reporting.localization.Localization(__file__, 1484, 18), ValueError_576094, *[result_mod_576098], **kwargs_576099)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1484, 12), ValueError_call_result_576100, 'raise parameter', BaseException)
        # SSA join for if statement (line 1483)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to apply_along_axis(...): (line 1485)
        # Processing the call arguments (line 1485)
        # Getting the type of '_trimmed_stde_1D' (line 1485)
        _trimmed_stde_1D_576103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 35), '_trimmed_stde_1D', False)
        # Getting the type of 'axis' (line 1485)
        axis_576104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 53), 'axis', False)
        # Getting the type of 'a' (line 1485)
        a_576105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 59), 'a', False)
        # Getting the type of 'lolim' (line 1486)
        lolim_576106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 35), 'lolim', False)
        # Getting the type of 'uplim' (line 1486)
        uplim_576107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 41), 'uplim', False)
        # Getting the type of 'loinc' (line 1486)
        loinc_576108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 47), 'loinc', False)
        # Getting the type of 'upinc' (line 1486)
        upinc_576109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 53), 'upinc', False)
        # Processing the call keyword arguments (line 1485)
        kwargs_576110 = {}
        # Getting the type of 'ma' (line 1485)
        ma_576101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 15), 'ma', False)
        # Obtaining the member 'apply_along_axis' of a type (line 1485)
        apply_along_axis_576102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1485, 15), ma_576101, 'apply_along_axis')
        # Calling apply_along_axis(args, kwargs) (line 1485)
        apply_along_axis_call_result_576111 = invoke(stypy.reporting.localization.Localization(__file__, 1485, 15), apply_along_axis_576102, *[_trimmed_stde_1D_576103, axis_576104, a_576105, lolim_576106, uplim_576107, loinc_576108, upinc_576109], **kwargs_576110)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 8), 'stypy_return_type', apply_along_axis_call_result_576111)

        if (may_be_576076 and more_types_in_union_576077):
            # SSA join for if statement (line 1480)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'trimmed_stde(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trimmed_stde' in the type store
    # Getting the type of 'stypy_return_type' (line 1412)
    stypy_return_type_576112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_576112)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trimmed_stde'
    return stypy_return_type_576112

# Assigning a type to the variable 'trimmed_stde' (line 1412)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 0), 'trimmed_stde', trimmed_stde)

@norecursion
def _mask_to_limits(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_mask_to_limits'
    module_type_store = module_type_store.open_function_context('_mask_to_limits', 1489, 0, False)
    
    # Passed parameters checking function
    _mask_to_limits.stypy_localization = localization
    _mask_to_limits.stypy_type_of_self = None
    _mask_to_limits.stypy_type_store = module_type_store
    _mask_to_limits.stypy_function_name = '_mask_to_limits'
    _mask_to_limits.stypy_param_names_list = ['a', 'limits', 'inclusive']
    _mask_to_limits.stypy_varargs_param_name = None
    _mask_to_limits.stypy_kwargs_param_name = None
    _mask_to_limits.stypy_call_defaults = defaults
    _mask_to_limits.stypy_call_varargs = varargs
    _mask_to_limits.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_mask_to_limits', ['a', 'limits', 'inclusive'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_mask_to_limits', localization, ['a', 'limits', 'inclusive'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_mask_to_limits(...)' code ##################

    str_576113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, (-1)), 'str', 'Mask an array for values outside of given limits.\n\n    This is primarily a utility function.\n\n    Parameters\n    ----------\n    a : array\n    limits : (float or None, float or None)\n    A tuple consisting of the (lower limit, upper limit).  Values in the\n    input array less than the lower limit or greater than the upper limit\n    will be masked out. None implies no limit.\n    inclusive : (bool, bool)\n    A tuple consisting of the (lower flag, upper flag).  These flags\n    determine whether values exactly equal to lower or upper are allowed.\n\n    Returns\n    -------\n    A MaskedArray.\n\n    Raises\n    ------\n    A ValueError if there are no values within the given limits.\n    ')
    
    # Assigning a Name to a Tuple (line 1513):
    
    # Assigning a Subscript to a Name (line 1513):
    
    # Obtaining the type of the subscript
    int_576114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1513, 4), 'int')
    # Getting the type of 'limits' (line 1513)
    limits_576115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 31), 'limits')
    # Obtaining the member '__getitem__' of a type (line 1513)
    getitem___576116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 4), limits_576115, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1513)
    subscript_call_result_576117 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 4), getitem___576116, int_576114)
    
    # Assigning a type to the variable 'tuple_var_assignment_571503' (line 1513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1513, 4), 'tuple_var_assignment_571503', subscript_call_result_576117)
    
    # Assigning a Subscript to a Name (line 1513):
    
    # Obtaining the type of the subscript
    int_576118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1513, 4), 'int')
    # Getting the type of 'limits' (line 1513)
    limits_576119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 31), 'limits')
    # Obtaining the member '__getitem__' of a type (line 1513)
    getitem___576120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 4), limits_576119, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1513)
    subscript_call_result_576121 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 4), getitem___576120, int_576118)
    
    # Assigning a type to the variable 'tuple_var_assignment_571504' (line 1513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1513, 4), 'tuple_var_assignment_571504', subscript_call_result_576121)
    
    # Assigning a Name to a Name (line 1513):
    # Getting the type of 'tuple_var_assignment_571503' (line 1513)
    tuple_var_assignment_571503_576122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 4), 'tuple_var_assignment_571503')
    # Assigning a type to the variable 'lower_limit' (line 1513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1513, 4), 'lower_limit', tuple_var_assignment_571503_576122)
    
    # Assigning a Name to a Name (line 1513):
    # Getting the type of 'tuple_var_assignment_571504' (line 1513)
    tuple_var_assignment_571504_576123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 4), 'tuple_var_assignment_571504')
    # Assigning a type to the variable 'upper_limit' (line 1513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1513, 17), 'upper_limit', tuple_var_assignment_571504_576123)
    
    # Assigning a Name to a Tuple (line 1514):
    
    # Assigning a Subscript to a Name (line 1514):
    
    # Obtaining the type of the subscript
    int_576124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1514, 4), 'int')
    # Getting the type of 'inclusive' (line 1514)
    inclusive_576125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 35), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 1514)
    getitem___576126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1514, 4), inclusive_576125, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1514)
    subscript_call_result_576127 = invoke(stypy.reporting.localization.Localization(__file__, 1514, 4), getitem___576126, int_576124)
    
    # Assigning a type to the variable 'tuple_var_assignment_571505' (line 1514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 4), 'tuple_var_assignment_571505', subscript_call_result_576127)
    
    # Assigning a Subscript to a Name (line 1514):
    
    # Obtaining the type of the subscript
    int_576128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1514, 4), 'int')
    # Getting the type of 'inclusive' (line 1514)
    inclusive_576129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 35), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 1514)
    getitem___576130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1514, 4), inclusive_576129, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1514)
    subscript_call_result_576131 = invoke(stypy.reporting.localization.Localization(__file__, 1514, 4), getitem___576130, int_576128)
    
    # Assigning a type to the variable 'tuple_var_assignment_571506' (line 1514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 4), 'tuple_var_assignment_571506', subscript_call_result_576131)
    
    # Assigning a Name to a Name (line 1514):
    # Getting the type of 'tuple_var_assignment_571505' (line 1514)
    tuple_var_assignment_571505_576132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 4), 'tuple_var_assignment_571505')
    # Assigning a type to the variable 'lower_include' (line 1514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 4), 'lower_include', tuple_var_assignment_571505_576132)
    
    # Assigning a Name to a Name (line 1514):
    # Getting the type of 'tuple_var_assignment_571506' (line 1514)
    tuple_var_assignment_571506_576133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 4), 'tuple_var_assignment_571506')
    # Assigning a type to the variable 'upper_include' (line 1514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 19), 'upper_include', tuple_var_assignment_571506_576133)
    
    # Assigning a Call to a Name (line 1515):
    
    # Assigning a Call to a Name (line 1515):
    
    # Call to MaskedArray(...): (line 1515)
    # Processing the call arguments (line 1515)
    # Getting the type of 'a' (line 1515)
    a_576136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 24), 'a', False)
    # Processing the call keyword arguments (line 1515)
    kwargs_576137 = {}
    # Getting the type of 'ma' (line 1515)
    ma_576134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 9), 'ma', False)
    # Obtaining the member 'MaskedArray' of a type (line 1515)
    MaskedArray_576135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 9), ma_576134, 'MaskedArray')
    # Calling MaskedArray(args, kwargs) (line 1515)
    MaskedArray_call_result_576138 = invoke(stypy.reporting.localization.Localization(__file__, 1515, 9), MaskedArray_576135, *[a_576136], **kwargs_576137)
    
    # Assigning a type to the variable 'am' (line 1515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1515, 4), 'am', MaskedArray_call_result_576138)
    
    # Type idiom detected: calculating its left and rigth part (line 1516)
    # Getting the type of 'lower_limit' (line 1516)
    lower_limit_576139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 4), 'lower_limit')
    # Getting the type of 'None' (line 1516)
    None_576140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 26), 'None')
    
    (may_be_576141, more_types_in_union_576142) = may_not_be_none(lower_limit_576139, None_576140)

    if may_be_576141:

        if more_types_in_union_576142:
            # Runtime conditional SSA (line 1516)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'lower_include' (line 1517)
        lower_include_576143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 11), 'lower_include')
        # Testing the type of an if condition (line 1517)
        if_condition_576144 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1517, 8), lower_include_576143)
        # Assigning a type to the variable 'if_condition_576144' (line 1517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 8), 'if_condition_576144', if_condition_576144)
        # SSA begins for if statement (line 1517)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1518):
        
        # Assigning a Call to a Name (line 1518):
        
        # Call to masked_less(...): (line 1518)
        # Processing the call arguments (line 1518)
        # Getting the type of 'am' (line 1518)
        am_576147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 32), 'am', False)
        # Getting the type of 'lower_limit' (line 1518)
        lower_limit_576148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 36), 'lower_limit', False)
        # Processing the call keyword arguments (line 1518)
        kwargs_576149 = {}
        # Getting the type of 'ma' (line 1518)
        ma_576145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 17), 'ma', False)
        # Obtaining the member 'masked_less' of a type (line 1518)
        masked_less_576146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1518, 17), ma_576145, 'masked_less')
        # Calling masked_less(args, kwargs) (line 1518)
        masked_less_call_result_576150 = invoke(stypy.reporting.localization.Localization(__file__, 1518, 17), masked_less_576146, *[am_576147, lower_limit_576148], **kwargs_576149)
        
        # Assigning a type to the variable 'am' (line 1518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1518, 12), 'am', masked_less_call_result_576150)
        # SSA branch for the else part of an if statement (line 1517)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1520):
        
        # Assigning a Call to a Name (line 1520):
        
        # Call to masked_less_equal(...): (line 1520)
        # Processing the call arguments (line 1520)
        # Getting the type of 'am' (line 1520)
        am_576153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 38), 'am', False)
        # Getting the type of 'lower_limit' (line 1520)
        lower_limit_576154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 42), 'lower_limit', False)
        # Processing the call keyword arguments (line 1520)
        kwargs_576155 = {}
        # Getting the type of 'ma' (line 1520)
        ma_576151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 17), 'ma', False)
        # Obtaining the member 'masked_less_equal' of a type (line 1520)
        masked_less_equal_576152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 17), ma_576151, 'masked_less_equal')
        # Calling masked_less_equal(args, kwargs) (line 1520)
        masked_less_equal_call_result_576156 = invoke(stypy.reporting.localization.Localization(__file__, 1520, 17), masked_less_equal_576152, *[am_576153, lower_limit_576154], **kwargs_576155)
        
        # Assigning a type to the variable 'am' (line 1520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1520, 12), 'am', masked_less_equal_call_result_576156)
        # SSA join for if statement (line 1517)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_576142:
            # SSA join for if statement (line 1516)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1522)
    # Getting the type of 'upper_limit' (line 1522)
    upper_limit_576157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 4), 'upper_limit')
    # Getting the type of 'None' (line 1522)
    None_576158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 26), 'None')
    
    (may_be_576159, more_types_in_union_576160) = may_not_be_none(upper_limit_576157, None_576158)

    if may_be_576159:

        if more_types_in_union_576160:
            # Runtime conditional SSA (line 1522)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'upper_include' (line 1523)
        upper_include_576161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 11), 'upper_include')
        # Testing the type of an if condition (line 1523)
        if_condition_576162 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1523, 8), upper_include_576161)
        # Assigning a type to the variable 'if_condition_576162' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 8), 'if_condition_576162', if_condition_576162)
        # SSA begins for if statement (line 1523)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1524):
        
        # Assigning a Call to a Name (line 1524):
        
        # Call to masked_greater(...): (line 1524)
        # Processing the call arguments (line 1524)
        # Getting the type of 'am' (line 1524)
        am_576165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 35), 'am', False)
        # Getting the type of 'upper_limit' (line 1524)
        upper_limit_576166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 39), 'upper_limit', False)
        # Processing the call keyword arguments (line 1524)
        kwargs_576167 = {}
        # Getting the type of 'ma' (line 1524)
        ma_576163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 17), 'ma', False)
        # Obtaining the member 'masked_greater' of a type (line 1524)
        masked_greater_576164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 17), ma_576163, 'masked_greater')
        # Calling masked_greater(args, kwargs) (line 1524)
        masked_greater_call_result_576168 = invoke(stypy.reporting.localization.Localization(__file__, 1524, 17), masked_greater_576164, *[am_576165, upper_limit_576166], **kwargs_576167)
        
        # Assigning a type to the variable 'am' (line 1524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'am', masked_greater_call_result_576168)
        # SSA branch for the else part of an if statement (line 1523)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1526):
        
        # Assigning a Call to a Name (line 1526):
        
        # Call to masked_greater_equal(...): (line 1526)
        # Processing the call arguments (line 1526)
        # Getting the type of 'am' (line 1526)
        am_576171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 41), 'am', False)
        # Getting the type of 'upper_limit' (line 1526)
        upper_limit_576172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 45), 'upper_limit', False)
        # Processing the call keyword arguments (line 1526)
        kwargs_576173 = {}
        # Getting the type of 'ma' (line 1526)
        ma_576169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 17), 'ma', False)
        # Obtaining the member 'masked_greater_equal' of a type (line 1526)
        masked_greater_equal_576170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 17), ma_576169, 'masked_greater_equal')
        # Calling masked_greater_equal(args, kwargs) (line 1526)
        masked_greater_equal_call_result_576174 = invoke(stypy.reporting.localization.Localization(__file__, 1526, 17), masked_greater_equal_576170, *[am_576171, upper_limit_576172], **kwargs_576173)
        
        # Assigning a type to the variable 'am' (line 1526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 12), 'am', masked_greater_equal_call_result_576174)
        # SSA join for if statement (line 1523)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_576160:
            # SSA join for if statement (line 1522)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    
    # Call to count(...): (line 1528)
    # Processing the call keyword arguments (line 1528)
    kwargs_576177 = {}
    # Getting the type of 'am' (line 1528)
    am_576175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 7), 'am', False)
    # Obtaining the member 'count' of a type (line 1528)
    count_576176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 7), am_576175, 'count')
    # Calling count(args, kwargs) (line 1528)
    count_call_result_576178 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 7), count_576176, *[], **kwargs_576177)
    
    int_576179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, 21), 'int')
    # Applying the binary operator '==' (line 1528)
    result_eq_576180 = python_operator(stypy.reporting.localization.Localization(__file__, 1528, 7), '==', count_call_result_576178, int_576179)
    
    # Testing the type of an if condition (line 1528)
    if_condition_576181 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1528, 4), result_eq_576180)
    # Assigning a type to the variable 'if_condition_576181' (line 1528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 4), 'if_condition_576181', if_condition_576181)
    # SSA begins for if statement (line 1528)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1529)
    # Processing the call arguments (line 1529)
    str_576183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 25), 'str', 'No array values within given limits')
    # Processing the call keyword arguments (line 1529)
    kwargs_576184 = {}
    # Getting the type of 'ValueError' (line 1529)
    ValueError_576182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1529)
    ValueError_call_result_576185 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 14), ValueError_576182, *[str_576183], **kwargs_576184)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1529, 8), ValueError_call_result_576185, 'raise parameter', BaseException)
    # SSA join for if statement (line 1528)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'am' (line 1531)
    am_576186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 11), 'am')
    # Assigning a type to the variable 'stypy_return_type' (line 1531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 4), 'stypy_return_type', am_576186)
    
    # ################# End of '_mask_to_limits(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_mask_to_limits' in the type store
    # Getting the type of 'stypy_return_type' (line 1489)
    stypy_return_type_576187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_576187)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_mask_to_limits'
    return stypy_return_type_576187

# Assigning a type to the variable '_mask_to_limits' (line 1489)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 0), '_mask_to_limits', _mask_to_limits)

@norecursion
def tmean(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1534)
    None_576188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 20), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1534)
    tuple_576189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1534)
    # Adding element type (line 1534)
    # Getting the type of 'True' (line 1534)
    True_576190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 37), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1534, 37), tuple_576189, True_576190)
    # Adding element type (line 1534)
    # Getting the type of 'True' (line 1534)
    True_576191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 43), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1534, 37), tuple_576189, True_576191)
    
    # Getting the type of 'None' (line 1534)
    None_576192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 55), 'None')
    defaults = [None_576188, tuple_576189, None_576192]
    # Create a new context for function 'tmean'
    module_type_store = module_type_store.open_function_context('tmean', 1534, 0, False)
    
    # Passed parameters checking function
    tmean.stypy_localization = localization
    tmean.stypy_type_of_self = None
    tmean.stypy_type_store = module_type_store
    tmean.stypy_function_name = 'tmean'
    tmean.stypy_param_names_list = ['a', 'limits', 'inclusive', 'axis']
    tmean.stypy_varargs_param_name = None
    tmean.stypy_kwargs_param_name = None
    tmean.stypy_call_defaults = defaults
    tmean.stypy_call_varargs = varargs
    tmean.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tmean', ['a', 'limits', 'inclusive', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tmean', localization, ['a', 'limits', 'inclusive', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tmean(...)' code ##################

    str_576193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1563, (-1)), 'str', '\n    Compute the trimmed mean.\n\n    Parameters\n    ----------\n    a : array_like\n        Array of values.\n    limits : None or (lower limit, upper limit), optional\n        Values in the input array less than the lower limit or greater than the\n        upper limit will be ignored.  When limits is None (default), then all\n        values are used.  Either of the limit values in the tuple can also be\n        None representing a half-open interval.\n    inclusive : (bool, bool), optional\n        A tuple consisting of the (lower flag, upper flag).  These flags\n        determine whether values exactly equal to the lower or upper limits\n        are included.  The default value is (True, True).\n    axis : int or None, optional\n        Axis along which to operate. If None, compute over the\n        whole array. Default is None.\n\n    Returns\n    -------\n    tmean : float\n\n    Notes\n    -----\n    For more details on `tmean`, see `stats.tmean`.\n\n    ')
    
    # Call to mean(...): (line 1564)
    # Processing the call keyword arguments (line 1564)
    # Getting the type of 'axis' (line 1564)
    axis_576203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 66), 'axis', False)
    keyword_576204 = axis_576203
    kwargs_576205 = {'axis': keyword_576204}
    
    # Call to trima(...): (line 1564)
    # Processing the call arguments (line 1564)
    # Getting the type of 'a' (line 1564)
    a_576195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 17), 'a', False)
    # Processing the call keyword arguments (line 1564)
    # Getting the type of 'limits' (line 1564)
    limits_576196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 27), 'limits', False)
    keyword_576197 = limits_576196
    # Getting the type of 'inclusive' (line 1564)
    inclusive_576198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 45), 'inclusive', False)
    keyword_576199 = inclusive_576198
    kwargs_576200 = {'limits': keyword_576197, 'inclusive': keyword_576199}
    # Getting the type of 'trima' (line 1564)
    trima_576194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 11), 'trima', False)
    # Calling trima(args, kwargs) (line 1564)
    trima_call_result_576201 = invoke(stypy.reporting.localization.Localization(__file__, 1564, 11), trima_576194, *[a_576195], **kwargs_576200)
    
    # Obtaining the member 'mean' of a type (line 1564)
    mean_576202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1564, 11), trima_call_result_576201, 'mean')
    # Calling mean(args, kwargs) (line 1564)
    mean_call_result_576206 = invoke(stypy.reporting.localization.Localization(__file__, 1564, 11), mean_576202, *[], **kwargs_576205)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 4), 'stypy_return_type', mean_call_result_576206)
    
    # ################# End of 'tmean(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tmean' in the type store
    # Getting the type of 'stypy_return_type' (line 1534)
    stypy_return_type_576207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_576207)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tmean'
    return stypy_return_type_576207

# Assigning a type to the variable 'tmean' (line 1534)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 0), 'tmean', tmean)

@norecursion
def tvar(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1567)
    None_576208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 19), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1567)
    tuple_576209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1567, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1567)
    # Adding element type (line 1567)
    # Getting the type of 'True' (line 1567)
    True_576210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 36), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1567, 36), tuple_576209, True_576210)
    # Adding element type (line 1567)
    # Getting the type of 'True' (line 1567)
    True_576211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 42), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1567, 36), tuple_576209, True_576211)
    
    int_576212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1567, 54), 'int')
    int_576213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1567, 62), 'int')
    defaults = [None_576208, tuple_576209, int_576212, int_576213]
    # Create a new context for function 'tvar'
    module_type_store = module_type_store.open_function_context('tvar', 1567, 0, False)
    
    # Passed parameters checking function
    tvar.stypy_localization = localization
    tvar.stypy_type_of_self = None
    tvar.stypy_type_store = module_type_store
    tvar.stypy_function_name = 'tvar'
    tvar.stypy_param_names_list = ['a', 'limits', 'inclusive', 'axis', 'ddof']
    tvar.stypy_varargs_param_name = None
    tvar.stypy_kwargs_param_name = None
    tvar.stypy_call_defaults = defaults
    tvar.stypy_call_varargs = varargs
    tvar.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tvar', ['a', 'limits', 'inclusive', 'axis', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tvar', localization, ['a', 'limits', 'inclusive', 'axis', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tvar(...)' code ##################

    str_576214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1602, (-1)), 'str', '\n    Compute the trimmed variance\n\n    This function computes the sample variance of an array of values,\n    while ignoring values which are outside of given `limits`.\n\n    Parameters\n    ----------\n    a : array_like\n        Array of values.\n    limits : None or (lower limit, upper limit), optional\n        Values in the input array less than the lower limit or greater than the\n        upper limit will be ignored. When limits is None, then all values are\n        used. Either of the limit values in the tuple can also be None\n        representing a half-open interval.  The default value is None.\n    inclusive : (bool, bool), optional\n        A tuple consisting of the (lower flag, upper flag).  These flags\n        determine whether values exactly equal to the lower or upper limits\n        are included.  The default value is (True, True).\n    axis : int or None, optional\n        Axis along which to operate. If None, compute over the\n        whole array. Default is zero.\n    ddof : int, optional\n        Delta degrees of freedom. Default is 1.\n\n    Returns\n    -------\n    tvar : float\n        Trimmed variance.\n\n    Notes\n    -----\n    For more details on `tvar`, see `stats.tvar`.\n\n    ')
    
    # Assigning a Call to a Name (line 1603):
    
    # Assigning a Call to a Name (line 1603):
    
    # Call to ravel(...): (line 1603)
    # Processing the call keyword arguments (line 1603)
    kwargs_576221 = {}
    
    # Call to astype(...): (line 1603)
    # Processing the call arguments (line 1603)
    # Getting the type of 'float' (line 1603)
    float_576217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 17), 'float', False)
    # Processing the call keyword arguments (line 1603)
    kwargs_576218 = {}
    # Getting the type of 'a' (line 1603)
    a_576215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 8), 'a', False)
    # Obtaining the member 'astype' of a type (line 1603)
    astype_576216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1603, 8), a_576215, 'astype')
    # Calling astype(args, kwargs) (line 1603)
    astype_call_result_576219 = invoke(stypy.reporting.localization.Localization(__file__, 1603, 8), astype_576216, *[float_576217], **kwargs_576218)
    
    # Obtaining the member 'ravel' of a type (line 1603)
    ravel_576220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1603, 8), astype_call_result_576219, 'ravel')
    # Calling ravel(args, kwargs) (line 1603)
    ravel_call_result_576222 = invoke(stypy.reporting.localization.Localization(__file__, 1603, 8), ravel_576220, *[], **kwargs_576221)
    
    # Assigning a type to the variable 'a' (line 1603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1603, 4), 'a', ravel_call_result_576222)
    
    # Type idiom detected: calculating its left and rigth part (line 1604)
    # Getting the type of 'limits' (line 1604)
    limits_576223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 7), 'limits')
    # Getting the type of 'None' (line 1604)
    None_576224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 17), 'None')
    
    (may_be_576225, more_types_in_union_576226) = may_be_none(limits_576223, None_576224)

    if may_be_576225:

        if more_types_in_union_576226:
            # Runtime conditional SSA (line 1604)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1605):
        
        # Assigning a Call to a Name (line 1605):
        
        # Call to sum(...): (line 1605)
        # Processing the call keyword arguments (line 1605)
        kwargs_576231 = {}
        
        # Getting the type of 'a' (line 1605)
        a_576227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 14), 'a', False)
        # Obtaining the member 'mask' of a type (line 1605)
        mask_576228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 14), a_576227, 'mask')
        # Applying the '~' unary operator (line 1605)
        result_inv_576229 = python_operator(stypy.reporting.localization.Localization(__file__, 1605, 13), '~', mask_576228)
        
        # Obtaining the member 'sum' of a type (line 1605)
        sum_576230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 13), result_inv_576229, 'sum')
        # Calling sum(args, kwargs) (line 1605)
        sum_call_result_576232 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 13), sum_576230, *[], **kwargs_576231)
        
        # Assigning a type to the variable 'n' (line 1605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 8), 'n', sum_call_result_576232)
        
        # Call to var(...): (line 1606)
        # Processing the call arguments (line 1606)
        # Getting the type of 'a' (line 1606)
        a_576236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 25), 'a', False)
        # Processing the call keyword arguments (line 1606)
        kwargs_576237 = {}
        # Getting the type of 'np' (line 1606)
        np_576233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 15), 'np', False)
        # Obtaining the member 'ma' of a type (line 1606)
        ma_576234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1606, 15), np_576233, 'ma')
        # Obtaining the member 'var' of a type (line 1606)
        var_576235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1606, 15), ma_576234, 'var')
        # Calling var(args, kwargs) (line 1606)
        var_call_result_576238 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 15), var_576235, *[a_576236], **kwargs_576237)
        
        # Getting the type of 'n' (line 1606)
        n_576239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 30), 'n')
        # Applying the binary operator '*' (line 1606)
        result_mul_576240 = python_operator(stypy.reporting.localization.Localization(__file__, 1606, 15), '*', var_call_result_576238, n_576239)
        
        # Getting the type of 'n' (line 1606)
        n_576241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 33), 'n')
        float_576242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1606, 35), 'float')
        # Applying the binary operator '-' (line 1606)
        result_sub_576243 = python_operator(stypy.reporting.localization.Localization(__file__, 1606, 33), '-', n_576241, float_576242)
        
        # Applying the binary operator 'div' (line 1606)
        result_div_576244 = python_operator(stypy.reporting.localization.Localization(__file__, 1606, 31), 'div', result_mul_576240, result_sub_576243)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1606, 8), 'stypy_return_type', result_div_576244)

        if more_types_in_union_576226:
            # SSA join for if statement (line 1604)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1607):
    
    # Assigning a Call to a Name (line 1607):
    
    # Call to _mask_to_limits(...): (line 1607)
    # Processing the call arguments (line 1607)
    # Getting the type of 'a' (line 1607)
    a_576246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 25), 'a', False)
    # Processing the call keyword arguments (line 1607)
    # Getting the type of 'limits' (line 1607)
    limits_576247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 35), 'limits', False)
    keyword_576248 = limits_576247
    # Getting the type of 'inclusive' (line 1607)
    inclusive_576249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 53), 'inclusive', False)
    keyword_576250 = inclusive_576249
    kwargs_576251 = {'limits': keyword_576248, 'inclusive': keyword_576250}
    # Getting the type of '_mask_to_limits' (line 1607)
    _mask_to_limits_576245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 9), '_mask_to_limits', False)
    # Calling _mask_to_limits(args, kwargs) (line 1607)
    _mask_to_limits_call_result_576252 = invoke(stypy.reporting.localization.Localization(__file__, 1607, 9), _mask_to_limits_576245, *[a_576246], **kwargs_576251)
    
    # Assigning a type to the variable 'am' (line 1607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1607, 4), 'am', _mask_to_limits_call_result_576252)
    
    # Call to var(...): (line 1609)
    # Processing the call arguments (line 1609)
    # Getting the type of 'am' (line 1609)
    am_576256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 21), 'am', False)
    # Processing the call keyword arguments (line 1609)
    # Getting the type of 'axis' (line 1609)
    axis_576257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 30), 'axis', False)
    keyword_576258 = axis_576257
    # Getting the type of 'ddof' (line 1609)
    ddof_576259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 41), 'ddof', False)
    keyword_576260 = ddof_576259
    kwargs_576261 = {'ddof': keyword_576260, 'axis': keyword_576258}
    # Getting the type of 'np' (line 1609)
    np_576253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 11), 'np', False)
    # Obtaining the member 'ma' of a type (line 1609)
    ma_576254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1609, 11), np_576253, 'ma')
    # Obtaining the member 'var' of a type (line 1609)
    var_576255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1609, 11), ma_576254, 'var')
    # Calling var(args, kwargs) (line 1609)
    var_call_result_576262 = invoke(stypy.reporting.localization.Localization(__file__, 1609, 11), var_576255, *[am_576256], **kwargs_576261)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1609, 4), 'stypy_return_type', var_call_result_576262)
    
    # ################# End of 'tvar(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tvar' in the type store
    # Getting the type of 'stypy_return_type' (line 1567)
    stypy_return_type_576263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_576263)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tvar'
    return stypy_return_type_576263

# Assigning a type to the variable 'tvar' (line 1567)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 0), 'tvar', tvar)

@norecursion
def tmin(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1612)
    None_576264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 23), 'None')
    int_576265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1612, 34), 'int')
    # Getting the type of 'True' (line 1612)
    True_576266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 47), 'True')
    defaults = [None_576264, int_576265, True_576266]
    # Create a new context for function 'tmin'
    module_type_store = module_type_store.open_function_context('tmin', 1612, 0, False)
    
    # Passed parameters checking function
    tmin.stypy_localization = localization
    tmin.stypy_type_of_self = None
    tmin.stypy_type_store = module_type_store
    tmin.stypy_function_name = 'tmin'
    tmin.stypy_param_names_list = ['a', 'lowerlimit', 'axis', 'inclusive']
    tmin.stypy_varargs_param_name = None
    tmin.stypy_kwargs_param_name = None
    tmin.stypy_call_defaults = defaults
    tmin.stypy_call_varargs = varargs
    tmin.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tmin', ['a', 'lowerlimit', 'axis', 'inclusive'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tmin', localization, ['a', 'lowerlimit', 'axis', 'inclusive'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tmin(...)' code ##################

    str_576267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1639, (-1)), 'str', '\n    Compute the trimmed minimum\n\n    Parameters\n    ----------\n    a : array_like\n        array of values\n    lowerlimit : None or float, optional\n        Values in the input array less than the given limit will be ignored.\n        When lowerlimit is None, then all values are used. The default value\n        is None.\n    axis : int or None, optional\n        Axis along which to operate. Default is 0. If None, compute over the\n        whole array `a`.\n    inclusive : {True, False}, optional\n        This flag determines whether values exactly equal to the lower limit\n        are included.  The default value is True.\n\n    Returns\n    -------\n    tmin : float, int or ndarray\n\n    Notes\n    -----\n    For more details on `tmin`, see `stats.tmin`.\n\n    ')
    
    # Assigning a Call to a Tuple (line 1640):
    
    # Assigning a Subscript to a Name (line 1640):
    
    # Obtaining the type of the subscript
    int_576268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1640, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1640)
    # Processing the call arguments (line 1640)
    # Getting the type of 'a' (line 1640)
    a_576270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 27), 'a', False)
    # Getting the type of 'axis' (line 1640)
    axis_576271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 30), 'axis', False)
    # Processing the call keyword arguments (line 1640)
    kwargs_576272 = {}
    # Getting the type of '_chk_asarray' (line 1640)
    _chk_asarray_576269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1640)
    _chk_asarray_call_result_576273 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 14), _chk_asarray_576269, *[a_576270, axis_576271], **kwargs_576272)
    
    # Obtaining the member '__getitem__' of a type (line 1640)
    getitem___576274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 4), _chk_asarray_call_result_576273, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1640)
    subscript_call_result_576275 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 4), getitem___576274, int_576268)
    
    # Assigning a type to the variable 'tuple_var_assignment_571507' (line 1640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 4), 'tuple_var_assignment_571507', subscript_call_result_576275)
    
    # Assigning a Subscript to a Name (line 1640):
    
    # Obtaining the type of the subscript
    int_576276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1640, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1640)
    # Processing the call arguments (line 1640)
    # Getting the type of 'a' (line 1640)
    a_576278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 27), 'a', False)
    # Getting the type of 'axis' (line 1640)
    axis_576279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 30), 'axis', False)
    # Processing the call keyword arguments (line 1640)
    kwargs_576280 = {}
    # Getting the type of '_chk_asarray' (line 1640)
    _chk_asarray_576277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1640)
    _chk_asarray_call_result_576281 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 14), _chk_asarray_576277, *[a_576278, axis_576279], **kwargs_576280)
    
    # Obtaining the member '__getitem__' of a type (line 1640)
    getitem___576282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 4), _chk_asarray_call_result_576281, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1640)
    subscript_call_result_576283 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 4), getitem___576282, int_576276)
    
    # Assigning a type to the variable 'tuple_var_assignment_571508' (line 1640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 4), 'tuple_var_assignment_571508', subscript_call_result_576283)
    
    # Assigning a Name to a Name (line 1640):
    # Getting the type of 'tuple_var_assignment_571507' (line 1640)
    tuple_var_assignment_571507_576284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 4), 'tuple_var_assignment_571507')
    # Assigning a type to the variable 'a' (line 1640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 4), 'a', tuple_var_assignment_571507_576284)
    
    # Assigning a Name to a Name (line 1640):
    # Getting the type of 'tuple_var_assignment_571508' (line 1640)
    tuple_var_assignment_571508_576285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 4), 'tuple_var_assignment_571508')
    # Assigning a type to the variable 'axis' (line 1640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 7), 'axis', tuple_var_assignment_571508_576285)
    
    # Assigning a Call to a Name (line 1641):
    
    # Assigning a Call to a Name (line 1641):
    
    # Call to trima(...): (line 1641)
    # Processing the call arguments (line 1641)
    # Getting the type of 'a' (line 1641)
    a_576287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 15), 'a', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1641)
    tuple_576288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1641)
    # Adding element type (line 1641)
    # Getting the type of 'lowerlimit' (line 1641)
    lowerlimit_576289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 19), 'lowerlimit', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1641, 19), tuple_576288, lowerlimit_576289)
    # Adding element type (line 1641)
    # Getting the type of 'None' (line 1641)
    None_576290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 31), 'None', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1641, 19), tuple_576288, None_576290)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1641)
    tuple_576291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1641)
    # Adding element type (line 1641)
    # Getting the type of 'inclusive' (line 1641)
    inclusive_576292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 39), 'inclusive', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1641, 39), tuple_576291, inclusive_576292)
    # Adding element type (line 1641)
    # Getting the type of 'False' (line 1641)
    False_576293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 50), 'False', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1641, 39), tuple_576291, False_576293)
    
    # Processing the call keyword arguments (line 1641)
    kwargs_576294 = {}
    # Getting the type of 'trima' (line 1641)
    trima_576286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 9), 'trima', False)
    # Calling trima(args, kwargs) (line 1641)
    trima_call_result_576295 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 9), trima_576286, *[a_576287, tuple_576288, tuple_576291], **kwargs_576294)
    
    # Assigning a type to the variable 'am' (line 1641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 4), 'am', trima_call_result_576295)
    
    # Call to reduce(...): (line 1642)
    # Processing the call arguments (line 1642)
    # Getting the type of 'am' (line 1642)
    am_576299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 29), 'am', False)
    # Getting the type of 'axis' (line 1642)
    axis_576300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 33), 'axis', False)
    # Processing the call keyword arguments (line 1642)
    kwargs_576301 = {}
    # Getting the type of 'ma' (line 1642)
    ma_576296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 11), 'ma', False)
    # Obtaining the member 'minimum' of a type (line 1642)
    minimum_576297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1642, 11), ma_576296, 'minimum')
    # Obtaining the member 'reduce' of a type (line 1642)
    reduce_576298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1642, 11), minimum_576297, 'reduce')
    # Calling reduce(args, kwargs) (line 1642)
    reduce_call_result_576302 = invoke(stypy.reporting.localization.Localization(__file__, 1642, 11), reduce_576298, *[am_576299, axis_576300], **kwargs_576301)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1642, 4), 'stypy_return_type', reduce_call_result_576302)
    
    # ################# End of 'tmin(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tmin' in the type store
    # Getting the type of 'stypy_return_type' (line 1612)
    stypy_return_type_576303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_576303)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tmin'
    return stypy_return_type_576303

# Assigning a type to the variable 'tmin' (line 1612)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1612, 0), 'tmin', tmin)

@norecursion
def tmax(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1645)
    None_576304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 23), 'None')
    int_576305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 34), 'int')
    # Getting the type of 'True' (line 1645)
    True_576306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 47), 'True')
    defaults = [None_576304, int_576305, True_576306]
    # Create a new context for function 'tmax'
    module_type_store = module_type_store.open_function_context('tmax', 1645, 0, False)
    
    # Passed parameters checking function
    tmax.stypy_localization = localization
    tmax.stypy_type_of_self = None
    tmax.stypy_type_store = module_type_store
    tmax.stypy_function_name = 'tmax'
    tmax.stypy_param_names_list = ['a', 'upperlimit', 'axis', 'inclusive']
    tmax.stypy_varargs_param_name = None
    tmax.stypy_kwargs_param_name = None
    tmax.stypy_call_defaults = defaults
    tmax.stypy_call_varargs = varargs
    tmax.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tmax', ['a', 'upperlimit', 'axis', 'inclusive'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tmax', localization, ['a', 'upperlimit', 'axis', 'inclusive'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tmax(...)' code ##################

    str_576307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1675, (-1)), 'str', '\n    Compute the trimmed maximum\n\n    This function computes the maximum value of an array along a given axis,\n    while ignoring values larger than a specified upper limit.\n\n    Parameters\n    ----------\n    a : array_like\n        array of values\n    upperlimit : None or float, optional\n        Values in the input array greater than the given limit will be ignored.\n        When upperlimit is None, then all values are used. The default value\n        is None.\n    axis : int or None, optional\n        Axis along which to operate. Default is 0. If None, compute over the\n        whole array `a`.\n    inclusive : {True, False}, optional\n        This flag determines whether values exactly equal to the upper limit\n        are included.  The default value is True.\n\n    Returns\n    -------\n    tmax : float, int or ndarray\n\n    Notes\n    -----\n    For more details on `tmax`, see `stats.tmax`.\n\n    ')
    
    # Assigning a Call to a Tuple (line 1676):
    
    # Assigning a Subscript to a Name (line 1676):
    
    # Obtaining the type of the subscript
    int_576308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1676)
    # Processing the call arguments (line 1676)
    # Getting the type of 'a' (line 1676)
    a_576310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 27), 'a', False)
    # Getting the type of 'axis' (line 1676)
    axis_576311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 30), 'axis', False)
    # Processing the call keyword arguments (line 1676)
    kwargs_576312 = {}
    # Getting the type of '_chk_asarray' (line 1676)
    _chk_asarray_576309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1676)
    _chk_asarray_call_result_576313 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 14), _chk_asarray_576309, *[a_576310, axis_576311], **kwargs_576312)
    
    # Obtaining the member '__getitem__' of a type (line 1676)
    getitem___576314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 4), _chk_asarray_call_result_576313, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1676)
    subscript_call_result_576315 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 4), getitem___576314, int_576308)
    
    # Assigning a type to the variable 'tuple_var_assignment_571509' (line 1676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 4), 'tuple_var_assignment_571509', subscript_call_result_576315)
    
    # Assigning a Subscript to a Name (line 1676):
    
    # Obtaining the type of the subscript
    int_576316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1676)
    # Processing the call arguments (line 1676)
    # Getting the type of 'a' (line 1676)
    a_576318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 27), 'a', False)
    # Getting the type of 'axis' (line 1676)
    axis_576319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 30), 'axis', False)
    # Processing the call keyword arguments (line 1676)
    kwargs_576320 = {}
    # Getting the type of '_chk_asarray' (line 1676)
    _chk_asarray_576317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1676)
    _chk_asarray_call_result_576321 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 14), _chk_asarray_576317, *[a_576318, axis_576319], **kwargs_576320)
    
    # Obtaining the member '__getitem__' of a type (line 1676)
    getitem___576322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 4), _chk_asarray_call_result_576321, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1676)
    subscript_call_result_576323 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 4), getitem___576322, int_576316)
    
    # Assigning a type to the variable 'tuple_var_assignment_571510' (line 1676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 4), 'tuple_var_assignment_571510', subscript_call_result_576323)
    
    # Assigning a Name to a Name (line 1676):
    # Getting the type of 'tuple_var_assignment_571509' (line 1676)
    tuple_var_assignment_571509_576324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 4), 'tuple_var_assignment_571509')
    # Assigning a type to the variable 'a' (line 1676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 4), 'a', tuple_var_assignment_571509_576324)
    
    # Assigning a Name to a Name (line 1676):
    # Getting the type of 'tuple_var_assignment_571510' (line 1676)
    tuple_var_assignment_571510_576325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 4), 'tuple_var_assignment_571510')
    # Assigning a type to the variable 'axis' (line 1676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 7), 'axis', tuple_var_assignment_571510_576325)
    
    # Assigning a Call to a Name (line 1677):
    
    # Assigning a Call to a Name (line 1677):
    
    # Call to trima(...): (line 1677)
    # Processing the call arguments (line 1677)
    # Getting the type of 'a' (line 1677)
    a_576327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 15), 'a', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1677)
    tuple_576328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1677)
    # Adding element type (line 1677)
    # Getting the type of 'None' (line 1677)
    None_576329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 19), 'None', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1677, 19), tuple_576328, None_576329)
    # Adding element type (line 1677)
    # Getting the type of 'upperlimit' (line 1677)
    upperlimit_576330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 25), 'upperlimit', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1677, 19), tuple_576328, upperlimit_576330)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1677)
    tuple_576331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1677)
    # Adding element type (line 1677)
    # Getting the type of 'False' (line 1677)
    False_576332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 39), 'False', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1677, 39), tuple_576331, False_576332)
    # Adding element type (line 1677)
    # Getting the type of 'inclusive' (line 1677)
    inclusive_576333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 46), 'inclusive', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1677, 39), tuple_576331, inclusive_576333)
    
    # Processing the call keyword arguments (line 1677)
    kwargs_576334 = {}
    # Getting the type of 'trima' (line 1677)
    trima_576326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 9), 'trima', False)
    # Calling trima(args, kwargs) (line 1677)
    trima_call_result_576335 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 9), trima_576326, *[a_576327, tuple_576328, tuple_576331], **kwargs_576334)
    
    # Assigning a type to the variable 'am' (line 1677)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 4), 'am', trima_call_result_576335)
    
    # Call to reduce(...): (line 1678)
    # Processing the call arguments (line 1678)
    # Getting the type of 'am' (line 1678)
    am_576339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 29), 'am', False)
    # Getting the type of 'axis' (line 1678)
    axis_576340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 33), 'axis', False)
    # Processing the call keyword arguments (line 1678)
    kwargs_576341 = {}
    # Getting the type of 'ma' (line 1678)
    ma_576336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 11), 'ma', False)
    # Obtaining the member 'maximum' of a type (line 1678)
    maximum_576337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1678, 11), ma_576336, 'maximum')
    # Obtaining the member 'reduce' of a type (line 1678)
    reduce_576338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1678, 11), maximum_576337, 'reduce')
    # Calling reduce(args, kwargs) (line 1678)
    reduce_call_result_576342 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 11), reduce_576338, *[am_576339, axis_576340], **kwargs_576341)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1678)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 4), 'stypy_return_type', reduce_call_result_576342)
    
    # ################# End of 'tmax(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tmax' in the type store
    # Getting the type of 'stypy_return_type' (line 1645)
    stypy_return_type_576343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_576343)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tmax'
    return stypy_return_type_576343

# Assigning a type to the variable 'tmax' (line 1645)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 0), 'tmax', tmax)

@norecursion
def tsem(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1681)
    None_576344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 19), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1681)
    tuple_576345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1681)
    # Adding element type (line 1681)
    # Getting the type of 'True' (line 1681)
    True_576346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 36), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 36), tuple_576345, True_576346)
    # Adding element type (line 1681)
    # Getting the type of 'True' (line 1681)
    True_576347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 42), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 36), tuple_576345, True_576347)
    
    int_576348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 54), 'int')
    int_576349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 62), 'int')
    defaults = [None_576344, tuple_576345, int_576348, int_576349]
    # Create a new context for function 'tsem'
    module_type_store = module_type_store.open_function_context('tsem', 1681, 0, False)
    
    # Passed parameters checking function
    tsem.stypy_localization = localization
    tsem.stypy_type_of_self = None
    tsem.stypy_type_store = module_type_store
    tsem.stypy_function_name = 'tsem'
    tsem.stypy_param_names_list = ['a', 'limits', 'inclusive', 'axis', 'ddof']
    tsem.stypy_varargs_param_name = None
    tsem.stypy_kwargs_param_name = None
    tsem.stypy_call_defaults = defaults
    tsem.stypy_call_varargs = varargs
    tsem.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tsem', ['a', 'limits', 'inclusive', 'axis', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tsem', localization, ['a', 'limits', 'inclusive', 'axis', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tsem(...)' code ##################

    str_576350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, (-1)), 'str', '\n    Compute the trimmed standard error of the mean.\n\n    This function finds the standard error of the mean for given\n    values, ignoring values outside the given `limits`.\n\n    Parameters\n    ----------\n    a : array_like\n        array of values\n    limits : None or (lower limit, upper limit), optional\n        Values in the input array less than the lower limit or greater than the\n        upper limit will be ignored. When limits is None, then all values are\n        used. Either of the limit values in the tuple can also be None\n        representing a half-open interval.  The default value is None.\n    inclusive : (bool, bool), optional\n        A tuple consisting of the (lower flag, upper flag).  These flags\n        determine whether values exactly equal to the lower or upper limits\n        are included.  The default value is (True, True).\n    axis : int or None, optional\n        Axis along which to operate. If None, compute over the\n        whole array. Default is zero.\n    ddof : int, optional\n        Delta degrees of freedom. Default is 1.\n\n    Returns\n    -------\n    tsem : float\n\n    Notes\n    -----\n    For more details on `tsem`, see `stats.tsem`.\n\n    ')
    
    # Assigning a Call to a Name (line 1716):
    
    # Assigning a Call to a Name (line 1716):
    
    # Call to ravel(...): (line 1716)
    # Processing the call keyword arguments (line 1716)
    kwargs_576357 = {}
    
    # Call to asarray(...): (line 1716)
    # Processing the call arguments (line 1716)
    # Getting the type of 'a' (line 1716)
    a_576353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 19), 'a', False)
    # Processing the call keyword arguments (line 1716)
    kwargs_576354 = {}
    # Getting the type of 'ma' (line 1716)
    ma_576351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'ma', False)
    # Obtaining the member 'asarray' of a type (line 1716)
    asarray_576352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 8), ma_576351, 'asarray')
    # Calling asarray(args, kwargs) (line 1716)
    asarray_call_result_576355 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 8), asarray_576352, *[a_576353], **kwargs_576354)
    
    # Obtaining the member 'ravel' of a type (line 1716)
    ravel_576356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 8), asarray_call_result_576355, 'ravel')
    # Calling ravel(args, kwargs) (line 1716)
    ravel_call_result_576358 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 8), ravel_576356, *[], **kwargs_576357)
    
    # Assigning a type to the variable 'a' (line 1716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 4), 'a', ravel_call_result_576358)
    
    # Type idiom detected: calculating its left and rigth part (line 1717)
    # Getting the type of 'limits' (line 1717)
    limits_576359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 7), 'limits')
    # Getting the type of 'None' (line 1717)
    None_576360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 17), 'None')
    
    (may_be_576361, more_types_in_union_576362) = may_be_none(limits_576359, None_576360)

    if may_be_576361:

        if more_types_in_union_576362:
            # Runtime conditional SSA (line 1717)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1718):
        
        # Assigning a Call to a Name (line 1718):
        
        # Call to float(...): (line 1718)
        # Processing the call arguments (line 1718)
        
        # Call to count(...): (line 1718)
        # Processing the call keyword arguments (line 1718)
        kwargs_576366 = {}
        # Getting the type of 'a' (line 1718)
        a_576364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 18), 'a', False)
        # Obtaining the member 'count' of a type (line 1718)
        count_576365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1718, 18), a_576364, 'count')
        # Calling count(args, kwargs) (line 1718)
        count_call_result_576367 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 18), count_576365, *[], **kwargs_576366)
        
        # Processing the call keyword arguments (line 1718)
        kwargs_576368 = {}
        # Getting the type of 'float' (line 1718)
        float_576363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 12), 'float', False)
        # Calling float(args, kwargs) (line 1718)
        float_call_result_576369 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 12), float_576363, *[count_call_result_576367], **kwargs_576368)
        
        # Assigning a type to the variable 'n' (line 1718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 8), 'n', float_call_result_576369)
        
        # Call to std(...): (line 1719)
        # Processing the call keyword arguments (line 1719)
        # Getting the type of 'axis' (line 1719)
        axis_576372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 26), 'axis', False)
        keyword_576373 = axis_576372
        # Getting the type of 'ddof' (line 1719)
        ddof_576374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 37), 'ddof', False)
        keyword_576375 = ddof_576374
        kwargs_576376 = {'ddof': keyword_576375, 'axis': keyword_576373}
        # Getting the type of 'a' (line 1719)
        a_576370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 15), 'a', False)
        # Obtaining the member 'std' of a type (line 1719)
        std_576371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 15), a_576370, 'std')
        # Calling std(args, kwargs) (line 1719)
        std_call_result_576377 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 15), std_576371, *[], **kwargs_576376)
        
        
        # Call to sqrt(...): (line 1719)
        # Processing the call arguments (line 1719)
        # Getting the type of 'n' (line 1719)
        n_576380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 51), 'n', False)
        # Processing the call keyword arguments (line 1719)
        kwargs_576381 = {}
        # Getting the type of 'ma' (line 1719)
        ma_576378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 43), 'ma', False)
        # Obtaining the member 'sqrt' of a type (line 1719)
        sqrt_576379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 43), ma_576378, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1719)
        sqrt_call_result_576382 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 43), sqrt_576379, *[n_576380], **kwargs_576381)
        
        # Applying the binary operator 'div' (line 1719)
        result_div_576383 = python_operator(stypy.reporting.localization.Localization(__file__, 1719, 15), 'div', std_call_result_576377, sqrt_call_result_576382)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 8), 'stypy_return_type', result_div_576383)

        if more_types_in_union_576362:
            # SSA join for if statement (line 1717)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1721):
    
    # Assigning a Call to a Name (line 1721):
    
    # Call to trima(...): (line 1721)
    # Processing the call arguments (line 1721)
    
    # Call to ravel(...): (line 1721)
    # Processing the call keyword arguments (line 1721)
    kwargs_576387 = {}
    # Getting the type of 'a' (line 1721)
    a_576385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 15), 'a', False)
    # Obtaining the member 'ravel' of a type (line 1721)
    ravel_576386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 15), a_576385, 'ravel')
    # Calling ravel(args, kwargs) (line 1721)
    ravel_call_result_576388 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 15), ravel_576386, *[], **kwargs_576387)
    
    # Getting the type of 'limits' (line 1721)
    limits_576389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 26), 'limits', False)
    # Getting the type of 'inclusive' (line 1721)
    inclusive_576390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 34), 'inclusive', False)
    # Processing the call keyword arguments (line 1721)
    kwargs_576391 = {}
    # Getting the type of 'trima' (line 1721)
    trima_576384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 9), 'trima', False)
    # Calling trima(args, kwargs) (line 1721)
    trima_call_result_576392 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 9), trima_576384, *[ravel_call_result_576388, limits_576389, inclusive_576390], **kwargs_576391)
    
    # Assigning a type to the variable 'am' (line 1721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 4), 'am', trima_call_result_576392)
    
    # Assigning a Call to a Name (line 1722):
    
    # Assigning a Call to a Name (line 1722):
    
    # Call to sqrt(...): (line 1722)
    # Processing the call arguments (line 1722)
    
    # Call to var(...): (line 1722)
    # Processing the call keyword arguments (line 1722)
    # Getting the type of 'axis' (line 1722)
    axis_576397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 29), 'axis', False)
    keyword_576398 = axis_576397
    # Getting the type of 'ddof' (line 1722)
    ddof_576399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 40), 'ddof', False)
    keyword_576400 = ddof_576399
    kwargs_576401 = {'ddof': keyword_576400, 'axis': keyword_576398}
    # Getting the type of 'am' (line 1722)
    am_576395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 17), 'am', False)
    # Obtaining the member 'var' of a type (line 1722)
    var_576396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1722, 17), am_576395, 'var')
    # Calling var(args, kwargs) (line 1722)
    var_call_result_576402 = invoke(stypy.reporting.localization.Localization(__file__, 1722, 17), var_576396, *[], **kwargs_576401)
    
    # Processing the call keyword arguments (line 1722)
    kwargs_576403 = {}
    # Getting the type of 'np' (line 1722)
    np_576393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 9), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1722)
    sqrt_576394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1722, 9), np_576393, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1722)
    sqrt_call_result_576404 = invoke(stypy.reporting.localization.Localization(__file__, 1722, 9), sqrt_576394, *[var_call_result_576402], **kwargs_576403)
    
    # Assigning a type to the variable 'sd' (line 1722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'sd', sqrt_call_result_576404)
    # Getting the type of 'sd' (line 1723)
    sd_576405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 11), 'sd')
    
    # Call to sqrt(...): (line 1723)
    # Processing the call arguments (line 1723)
    
    # Call to count(...): (line 1723)
    # Processing the call keyword arguments (line 1723)
    kwargs_576410 = {}
    # Getting the type of 'am' (line 1723)
    am_576408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 24), 'am', False)
    # Obtaining the member 'count' of a type (line 1723)
    count_576409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 24), am_576408, 'count')
    # Calling count(args, kwargs) (line 1723)
    count_call_result_576411 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 24), count_576409, *[], **kwargs_576410)
    
    # Processing the call keyword arguments (line 1723)
    kwargs_576412 = {}
    # Getting the type of 'np' (line 1723)
    np_576406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 16), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1723)
    sqrt_576407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 16), np_576406, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1723)
    sqrt_call_result_576413 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 16), sqrt_576407, *[count_call_result_576411], **kwargs_576412)
    
    # Applying the binary operator 'div' (line 1723)
    result_div_576414 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 11), 'div', sd_576405, sqrt_call_result_576413)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 4), 'stypy_return_type', result_div_576414)
    
    # ################# End of 'tsem(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tsem' in the type store
    # Getting the type of 'stypy_return_type' (line 1681)
    stypy_return_type_576415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_576415)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tsem'
    return stypy_return_type_576415

# Assigning a type to the variable 'tsem' (line 1681)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 0), 'tsem', tsem)

@norecursion
def winsorize(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1726)
    None_576416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 24), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1726)
    tuple_576417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, 41), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1726)
    # Adding element type (line 1726)
    # Getting the type of 'True' (line 1726)
    True_576418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 41), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1726, 41), tuple_576417, True_576418)
    # Adding element type (line 1726)
    # Getting the type of 'True' (line 1726)
    True_576419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 47), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1726, 41), tuple_576417, True_576419)
    
    # Getting the type of 'False' (line 1726)
    False_576420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 62), 'False')
    # Getting the type of 'None' (line 1727)
    None_576421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 19), 'None')
    defaults = [None_576416, tuple_576417, False_576420, None_576421]
    # Create a new context for function 'winsorize'
    module_type_store = module_type_store.open_function_context('winsorize', 1726, 0, False)
    
    # Passed parameters checking function
    winsorize.stypy_localization = localization
    winsorize.stypy_type_of_self = None
    winsorize.stypy_type_store = module_type_store
    winsorize.stypy_function_name = 'winsorize'
    winsorize.stypy_param_names_list = ['a', 'limits', 'inclusive', 'inplace', 'axis']
    winsorize.stypy_varargs_param_name = None
    winsorize.stypy_kwargs_param_name = None
    winsorize.stypy_call_defaults = defaults
    winsorize.stypy_call_varargs = varargs
    winsorize.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'winsorize', ['a', 'limits', 'inclusive', 'inplace', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'winsorize', localization, ['a', 'limits', 'inclusive', 'inplace', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'winsorize(...)' code ##################

    str_576422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, (-1)), 'str', 'Returns a Winsorized version of the input array.\n\n    The (limits[0])th lowest values are set to the (limits[0])th percentile,\n    and the (limits[1])th highest values are set to the (1 - limits[1])th\n    percentile.\n    Masked values are skipped.\n\n\n    Parameters\n    ----------\n    a : sequence\n        Input array.\n    limits : {None, tuple of float}, optional\n        Tuple of the percentages to cut on each side of the array, with respect\n        to the number of unmasked data, as floats between 0. and 1.\n        Noting n the number of unmasked data before trimming, the\n        (n*limits[0])th smallest data and the (n*limits[1])th largest data are\n        masked, and the total number of unmasked data after trimming\n        is n*(1.-sum(limits)) The value of one limit can be set to None to\n        indicate an open interval.\n    inclusive : {(True, True) tuple}, optional\n        Tuple indicating whether the number of data being masked on each side\n        should be rounded (True) or truncated (False).\n    inplace : {False, True}, optional\n        Whether to winsorize in place (True) or to use a copy (False)\n    axis : {None, int}, optional\n        Axis along which to trim. If None, the whole array is trimmed, but its\n        shape is maintained.\n\n    Notes\n    -----\n    This function is applied to reduce the effect of possibly spurious outliers\n    by limiting the extreme values.\n\n    ')

    @norecursion
    def _winsorize1D(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_winsorize1D'
        module_type_store = module_type_store.open_function_context('_winsorize1D', 1763, 4, False)
        
        # Passed parameters checking function
        _winsorize1D.stypy_localization = localization
        _winsorize1D.stypy_type_of_self = None
        _winsorize1D.stypy_type_store = module_type_store
        _winsorize1D.stypy_function_name = '_winsorize1D'
        _winsorize1D.stypy_param_names_list = ['a', 'low_limit', 'up_limit', 'low_include', 'up_include']
        _winsorize1D.stypy_varargs_param_name = None
        _winsorize1D.stypy_kwargs_param_name = None
        _winsorize1D.stypy_call_defaults = defaults
        _winsorize1D.stypy_call_varargs = varargs
        _winsorize1D.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_winsorize1D', ['a', 'low_limit', 'up_limit', 'low_include', 'up_include'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_winsorize1D', localization, ['a', 'low_limit', 'up_limit', 'low_include', 'up_include'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_winsorize1D(...)' code ##################

        
        # Assigning a Call to a Name (line 1764):
        
        # Assigning a Call to a Name (line 1764):
        
        # Call to count(...): (line 1764)
        # Processing the call keyword arguments (line 1764)
        kwargs_576425 = {}
        # Getting the type of 'a' (line 1764)
        a_576423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 12), 'a', False)
        # Obtaining the member 'count' of a type (line 1764)
        count_576424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 12), a_576423, 'count')
        # Calling count(args, kwargs) (line 1764)
        count_call_result_576426 = invoke(stypy.reporting.localization.Localization(__file__, 1764, 12), count_576424, *[], **kwargs_576425)
        
        # Assigning a type to the variable 'n' (line 1764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 8), 'n', count_call_result_576426)
        
        # Assigning a Call to a Name (line 1765):
        
        # Assigning a Call to a Name (line 1765):
        
        # Call to argsort(...): (line 1765)
        # Processing the call keyword arguments (line 1765)
        kwargs_576429 = {}
        # Getting the type of 'a' (line 1765)
        a_576427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 14), 'a', False)
        # Obtaining the member 'argsort' of a type (line 1765)
        argsort_576428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1765, 14), a_576427, 'argsort')
        # Calling argsort(args, kwargs) (line 1765)
        argsort_call_result_576430 = invoke(stypy.reporting.localization.Localization(__file__, 1765, 14), argsort_576428, *[], **kwargs_576429)
        
        # Assigning a type to the variable 'idx' (line 1765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1765, 8), 'idx', argsort_call_result_576430)
        
        # Getting the type of 'low_limit' (line 1766)
        low_limit_576431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 11), 'low_limit')
        # Testing the type of an if condition (line 1766)
        if_condition_576432 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1766, 8), low_limit_576431)
        # Assigning a type to the variable 'if_condition_576432' (line 1766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 8), 'if_condition_576432', if_condition_576432)
        # SSA begins for if statement (line 1766)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'low_include' (line 1767)
        low_include_576433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 15), 'low_include')
        # Testing the type of an if condition (line 1767)
        if_condition_576434 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1767, 12), low_include_576433)
        # Assigning a type to the variable 'if_condition_576434' (line 1767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 12), 'if_condition_576434', if_condition_576434)
        # SSA begins for if statement (line 1767)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1768):
        
        # Assigning a Call to a Name (line 1768):
        
        # Call to int(...): (line 1768)
        # Processing the call arguments (line 1768)
        # Getting the type of 'low_limit' (line 1768)
        low_limit_576436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 29), 'low_limit', False)
        # Getting the type of 'n' (line 1768)
        n_576437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 41), 'n', False)
        # Applying the binary operator '*' (line 1768)
        result_mul_576438 = python_operator(stypy.reporting.localization.Localization(__file__, 1768, 29), '*', low_limit_576436, n_576437)
        
        # Processing the call keyword arguments (line 1768)
        kwargs_576439 = {}
        # Getting the type of 'int' (line 1768)
        int_576435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 25), 'int', False)
        # Calling int(args, kwargs) (line 1768)
        int_call_result_576440 = invoke(stypy.reporting.localization.Localization(__file__, 1768, 25), int_576435, *[result_mul_576438], **kwargs_576439)
        
        # Assigning a type to the variable 'lowidx' (line 1768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 16), 'lowidx', int_call_result_576440)
        # SSA branch for the else part of an if statement (line 1767)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1770):
        
        # Assigning a Call to a Name (line 1770):
        
        # Call to astype(...): (line 1770)
        # Processing the call arguments (line 1770)
        # Getting the type of 'int' (line 1770)
        int_576449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 56), 'int', False)
        # Processing the call keyword arguments (line 1770)
        kwargs_576450 = {}
        
        # Call to round(...): (line 1770)
        # Processing the call arguments (line 1770)
        # Getting the type of 'low_limit' (line 1770)
        low_limit_576443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 34), 'low_limit', False)
        # Getting the type of 'n' (line 1770)
        n_576444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 46), 'n', False)
        # Applying the binary operator '*' (line 1770)
        result_mul_576445 = python_operator(stypy.reporting.localization.Localization(__file__, 1770, 34), '*', low_limit_576443, n_576444)
        
        # Processing the call keyword arguments (line 1770)
        kwargs_576446 = {}
        # Getting the type of 'np' (line 1770)
        np_576441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 25), 'np', False)
        # Obtaining the member 'round' of a type (line 1770)
        round_576442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 25), np_576441, 'round')
        # Calling round(args, kwargs) (line 1770)
        round_call_result_576447 = invoke(stypy.reporting.localization.Localization(__file__, 1770, 25), round_576442, *[result_mul_576445], **kwargs_576446)
        
        # Obtaining the member 'astype' of a type (line 1770)
        astype_576448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 25), round_call_result_576447, 'astype')
        # Calling astype(args, kwargs) (line 1770)
        astype_call_result_576451 = invoke(stypy.reporting.localization.Localization(__file__, 1770, 25), astype_576448, *[int_576449], **kwargs_576450)
        
        # Assigning a type to the variable 'lowidx' (line 1770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 16), 'lowidx', astype_call_result_576451)
        # SSA join for if statement (line 1767)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Subscript (line 1771):
        
        # Assigning a Subscript to a Subscript (line 1771):
        
        # Obtaining the type of the subscript
        
        # Obtaining the type of the subscript
        # Getting the type of 'lowidx' (line 1771)
        lowidx_576452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 36), 'lowidx')
        # Getting the type of 'idx' (line 1771)
        idx_576453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 32), 'idx')
        # Obtaining the member '__getitem__' of a type (line 1771)
        getitem___576454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 32), idx_576453, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1771)
        subscript_call_result_576455 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 32), getitem___576454, lowidx_576452)
        
        # Getting the type of 'a' (line 1771)
        a_576456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 30), 'a')
        # Obtaining the member '__getitem__' of a type (line 1771)
        getitem___576457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 30), a_576456, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1771)
        subscript_call_result_576458 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 30), getitem___576457, subscript_call_result_576455)
        
        # Getting the type of 'a' (line 1771)
        a_576459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 12), 'a')
        
        # Obtaining the type of the subscript
        # Getting the type of 'lowidx' (line 1771)
        lowidx_576460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 19), 'lowidx')
        slice_576461 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1771, 14), None, lowidx_576460, None)
        # Getting the type of 'idx' (line 1771)
        idx_576462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 14), 'idx')
        # Obtaining the member '__getitem__' of a type (line 1771)
        getitem___576463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 14), idx_576462, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1771)
        subscript_call_result_576464 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 14), getitem___576463, slice_576461)
        
        # Storing an element on a container (line 1771)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1771, 12), a_576459, (subscript_call_result_576464, subscript_call_result_576458))
        # SSA join for if statement (line 1766)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1772)
        # Getting the type of 'up_limit' (line 1772)
        up_limit_576465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 8), 'up_limit')
        # Getting the type of 'None' (line 1772)
        None_576466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 27), 'None')
        
        (may_be_576467, more_types_in_union_576468) = may_not_be_none(up_limit_576465, None_576466)

        if may_be_576467:

            if more_types_in_union_576468:
                # Runtime conditional SSA (line 1772)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'up_include' (line 1773)
            up_include_576469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 15), 'up_include')
            # Testing the type of an if condition (line 1773)
            if_condition_576470 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1773, 12), up_include_576469)
            # Assigning a type to the variable 'if_condition_576470' (line 1773)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1773, 12), 'if_condition_576470', if_condition_576470)
            # SSA begins for if statement (line 1773)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 1774):
            
            # Assigning a BinOp to a Name (line 1774):
            # Getting the type of 'n' (line 1774)
            n_576471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 24), 'n')
            
            # Call to int(...): (line 1774)
            # Processing the call arguments (line 1774)
            # Getting the type of 'n' (line 1774)
            n_576473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 32), 'n', False)
            # Getting the type of 'up_limit' (line 1774)
            up_limit_576474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 36), 'up_limit', False)
            # Applying the binary operator '*' (line 1774)
            result_mul_576475 = python_operator(stypy.reporting.localization.Localization(__file__, 1774, 32), '*', n_576473, up_limit_576474)
            
            # Processing the call keyword arguments (line 1774)
            kwargs_576476 = {}
            # Getting the type of 'int' (line 1774)
            int_576472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 28), 'int', False)
            # Calling int(args, kwargs) (line 1774)
            int_call_result_576477 = invoke(stypy.reporting.localization.Localization(__file__, 1774, 28), int_576472, *[result_mul_576475], **kwargs_576476)
            
            # Applying the binary operator '-' (line 1774)
            result_sub_576478 = python_operator(stypy.reporting.localization.Localization(__file__, 1774, 24), '-', n_576471, int_call_result_576477)
            
            # Assigning a type to the variable 'upidx' (line 1774)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 16), 'upidx', result_sub_576478)
            # SSA branch for the else part of an if statement (line 1773)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a BinOp to a Name (line 1776):
            
            # Assigning a BinOp to a Name (line 1776):
            # Getting the type of 'n' (line 1776)
            n_576479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 24), 'n')
            
            # Call to astype(...): (line 1776)
            # Processing the call arguments (line 1776)
            # Getting the type of 'int' (line 1776)
            int_576488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 58), 'int', False)
            # Processing the call keyword arguments (line 1776)
            kwargs_576489 = {}
            
            # Call to round(...): (line 1776)
            # Processing the call arguments (line 1776)
            # Getting the type of 'n' (line 1776)
            n_576482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 37), 'n', False)
            # Getting the type of 'up_limit' (line 1776)
            up_limit_576483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 41), 'up_limit', False)
            # Applying the binary operator '*' (line 1776)
            result_mul_576484 = python_operator(stypy.reporting.localization.Localization(__file__, 1776, 37), '*', n_576482, up_limit_576483)
            
            # Processing the call keyword arguments (line 1776)
            kwargs_576485 = {}
            # Getting the type of 'np' (line 1776)
            np_576480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 28), 'np', False)
            # Obtaining the member 'round' of a type (line 1776)
            round_576481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 28), np_576480, 'round')
            # Calling round(args, kwargs) (line 1776)
            round_call_result_576486 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 28), round_576481, *[result_mul_576484], **kwargs_576485)
            
            # Obtaining the member 'astype' of a type (line 1776)
            astype_576487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 28), round_call_result_576486, 'astype')
            # Calling astype(args, kwargs) (line 1776)
            astype_call_result_576490 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 28), astype_576487, *[int_576488], **kwargs_576489)
            
            # Applying the binary operator '-' (line 1776)
            result_sub_576491 = python_operator(stypy.reporting.localization.Localization(__file__, 1776, 24), '-', n_576479, astype_call_result_576490)
            
            # Assigning a type to the variable 'upidx' (line 1776)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1776, 16), 'upidx', result_sub_576491)
            # SSA join for if statement (line 1773)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Subscript to a Subscript (line 1777):
            
            # Assigning a Subscript to a Subscript (line 1777):
            
            # Obtaining the type of the subscript
            
            # Obtaining the type of the subscript
            # Getting the type of 'upidx' (line 1777)
            upidx_576492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 35), 'upidx')
            int_576493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, 43), 'int')
            # Applying the binary operator '-' (line 1777)
            result_sub_576494 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 35), '-', upidx_576492, int_576493)
            
            # Getting the type of 'idx' (line 1777)
            idx_576495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 31), 'idx')
            # Obtaining the member '__getitem__' of a type (line 1777)
            getitem___576496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 31), idx_576495, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1777)
            subscript_call_result_576497 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 31), getitem___576496, result_sub_576494)
            
            # Getting the type of 'a' (line 1777)
            a_576498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 29), 'a')
            # Obtaining the member '__getitem__' of a type (line 1777)
            getitem___576499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 29), a_576498, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1777)
            subscript_call_result_576500 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 29), getitem___576499, subscript_call_result_576497)
            
            # Getting the type of 'a' (line 1777)
            a_576501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 12), 'a')
            
            # Obtaining the type of the subscript
            # Getting the type of 'upidx' (line 1777)
            upidx_576502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 18), 'upidx')
            slice_576503 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1777, 14), upidx_576502, None, None)
            # Getting the type of 'idx' (line 1777)
            idx_576504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 14), 'idx')
            # Obtaining the member '__getitem__' of a type (line 1777)
            getitem___576505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 14), idx_576504, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1777)
            subscript_call_result_576506 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 14), getitem___576505, slice_576503)
            
            # Storing an element on a container (line 1777)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1777, 12), a_576501, (subscript_call_result_576506, subscript_call_result_576500))

            if more_types_in_union_576468:
                # SSA join for if statement (line 1772)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'a' (line 1778)
        a_576507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'stypy_return_type', a_576507)
        
        # ################# End of '_winsorize1D(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_winsorize1D' in the type store
        # Getting the type of 'stypy_return_type' (line 1763)
        stypy_return_type_576508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_576508)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_winsorize1D'
        return stypy_return_type_576508

    # Assigning a type to the variable '_winsorize1D' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), '_winsorize1D', _winsorize1D)
    
    # Assigning a Call to a Name (line 1781):
    
    # Assigning a Call to a Name (line 1781):
    
    # Call to array(...): (line 1781)
    # Processing the call arguments (line 1781)
    # Getting the type of 'a' (line 1781)
    a_576511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 17), 'a', False)
    # Processing the call keyword arguments (line 1781)
    
    # Call to logical_not(...): (line 1781)
    # Processing the call arguments (line 1781)
    # Getting the type of 'inplace' (line 1781)
    inplace_576514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 40), 'inplace', False)
    # Processing the call keyword arguments (line 1781)
    kwargs_576515 = {}
    # Getting the type of 'np' (line 1781)
    np_576512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 25), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 1781)
    logical_not_576513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 25), np_576512, 'logical_not')
    # Calling logical_not(args, kwargs) (line 1781)
    logical_not_call_result_576516 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 25), logical_not_576513, *[inplace_576514], **kwargs_576515)
    
    keyword_576517 = logical_not_call_result_576516
    kwargs_576518 = {'copy': keyword_576517}
    # Getting the type of 'ma' (line 1781)
    ma_576509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 8), 'ma', False)
    # Obtaining the member 'array' of a type (line 1781)
    array_576510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 8), ma_576509, 'array')
    # Calling array(args, kwargs) (line 1781)
    array_call_result_576519 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 8), array_576510, *[a_576511], **kwargs_576518)
    
    # Assigning a type to the variable 'a' (line 1781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 4), 'a', array_call_result_576519)
    
    # Type idiom detected: calculating its left and rigth part (line 1783)
    # Getting the type of 'limits' (line 1783)
    limits_576520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 7), 'limits')
    # Getting the type of 'None' (line 1783)
    None_576521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 17), 'None')
    
    (may_be_576522, more_types_in_union_576523) = may_be_none(limits_576520, None_576521)

    if may_be_576522:

        if more_types_in_union_576523:
            # Runtime conditional SSA (line 1783)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 'a' (line 1784)
        a_576524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 1784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 8), 'stypy_return_type', a_576524)

        if more_types_in_union_576523:
            # SSA join for if statement (line 1783)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Evaluating a boolean operation
    
    
    # Call to isinstance(...): (line 1785)
    # Processing the call arguments (line 1785)
    # Getting the type of 'limits' (line 1785)
    limits_576526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 23), 'limits', False)
    # Getting the type of 'tuple' (line 1785)
    tuple_576527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 31), 'tuple', False)
    # Processing the call keyword arguments (line 1785)
    kwargs_576528 = {}
    # Getting the type of 'isinstance' (line 1785)
    isinstance_576525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 12), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1785)
    isinstance_call_result_576529 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 12), isinstance_576525, *[limits_576526, tuple_576527], **kwargs_576528)
    
    # Applying the 'not' unary operator (line 1785)
    result_not__576530 = python_operator(stypy.reporting.localization.Localization(__file__, 1785, 8), 'not', isinstance_call_result_576529)
    
    
    # Call to isinstance(...): (line 1785)
    # Processing the call arguments (line 1785)
    # Getting the type of 'limits' (line 1785)
    limits_576532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 54), 'limits', False)
    # Getting the type of 'float' (line 1785)
    float_576533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 62), 'float', False)
    # Processing the call keyword arguments (line 1785)
    kwargs_576534 = {}
    # Getting the type of 'isinstance' (line 1785)
    isinstance_576531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 43), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1785)
    isinstance_call_result_576535 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 43), isinstance_576531, *[limits_576532, float_576533], **kwargs_576534)
    
    # Applying the binary operator 'and' (line 1785)
    result_and_keyword_576536 = python_operator(stypy.reporting.localization.Localization(__file__, 1785, 7), 'and', result_not__576530, isinstance_call_result_576535)
    
    # Testing the type of an if condition (line 1785)
    if_condition_576537 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1785, 4), result_and_keyword_576536)
    # Assigning a type to the variable 'if_condition_576537' (line 1785)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1785, 4), 'if_condition_576537', if_condition_576537)
    # SSA begins for if statement (line 1785)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1786):
    
    # Assigning a Tuple to a Name (line 1786):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1786)
    tuple_576538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1786, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1786)
    # Adding element type (line 1786)
    # Getting the type of 'limits' (line 1786)
    limits_576539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 18), 'limits')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1786, 18), tuple_576538, limits_576539)
    # Adding element type (line 1786)
    # Getting the type of 'limits' (line 1786)
    limits_576540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 26), 'limits')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1786, 18), tuple_576538, limits_576540)
    
    # Assigning a type to the variable 'limits' (line 1786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'limits', tuple_576538)
    # SSA join for if statement (line 1785)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Tuple (line 1789):
    
    # Assigning a Subscript to a Name (line 1789):
    
    # Obtaining the type of the subscript
    int_576541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1789, 4), 'int')
    # Getting the type of 'limits' (line 1789)
    limits_576542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 21), 'limits')
    # Obtaining the member '__getitem__' of a type (line 1789)
    getitem___576543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 4), limits_576542, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1789)
    subscript_call_result_576544 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 4), getitem___576543, int_576541)
    
    # Assigning a type to the variable 'tuple_var_assignment_571511' (line 1789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 4), 'tuple_var_assignment_571511', subscript_call_result_576544)
    
    # Assigning a Subscript to a Name (line 1789):
    
    # Obtaining the type of the subscript
    int_576545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1789, 4), 'int')
    # Getting the type of 'limits' (line 1789)
    limits_576546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 21), 'limits')
    # Obtaining the member '__getitem__' of a type (line 1789)
    getitem___576547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 4), limits_576546, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1789)
    subscript_call_result_576548 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 4), getitem___576547, int_576545)
    
    # Assigning a type to the variable 'tuple_var_assignment_571512' (line 1789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 4), 'tuple_var_assignment_571512', subscript_call_result_576548)
    
    # Assigning a Name to a Name (line 1789):
    # Getting the type of 'tuple_var_assignment_571511' (line 1789)
    tuple_var_assignment_571511_576549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 4), 'tuple_var_assignment_571511')
    # Assigning a type to the variable 'lolim' (line 1789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 5), 'lolim', tuple_var_assignment_571511_576549)
    
    # Assigning a Name to a Name (line 1789):
    # Getting the type of 'tuple_var_assignment_571512' (line 1789)
    tuple_var_assignment_571512_576550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 4), 'tuple_var_assignment_571512')
    # Assigning a type to the variable 'uplim' (line 1789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 12), 'uplim', tuple_var_assignment_571512_576550)
    
    # Assigning a Str to a Name (line 1790):
    
    # Assigning a Str to a Name (line 1790):
    str_576551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1790, 13), 'str', 'The proportion to cut from the %s should be between 0. and 1.')
    # Assigning a type to the variable 'errmsg' (line 1790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 4), 'errmsg', str_576551)
    
    # Type idiom detected: calculating its left and rigth part (line 1791)
    # Getting the type of 'lolim' (line 1791)
    lolim_576552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 4), 'lolim')
    # Getting the type of 'None' (line 1791)
    None_576553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 20), 'None')
    
    (may_be_576554, more_types_in_union_576555) = may_not_be_none(lolim_576552, None_576553)

    if may_be_576554:

        if more_types_in_union_576555:
            # Runtime conditional SSA (line 1791)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'lolim' (line 1792)
        lolim_576556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 11), 'lolim')
        float_576557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1792, 19), 'float')
        # Applying the binary operator '>' (line 1792)
        result_gt_576558 = python_operator(stypy.reporting.localization.Localization(__file__, 1792, 11), '>', lolim_576556, float_576557)
        
        
        # Getting the type of 'lolim' (line 1792)
        lolim_576559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 25), 'lolim')
        int_576560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1792, 33), 'int')
        # Applying the binary operator '<' (line 1792)
        result_lt_576561 = python_operator(stypy.reporting.localization.Localization(__file__, 1792, 25), '<', lolim_576559, int_576560)
        
        # Applying the binary operator 'or' (line 1792)
        result_or_keyword_576562 = python_operator(stypy.reporting.localization.Localization(__file__, 1792, 11), 'or', result_gt_576558, result_lt_576561)
        
        # Testing the type of an if condition (line 1792)
        if_condition_576563 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1792, 8), result_or_keyword_576562)
        # Assigning a type to the variable 'if_condition_576563' (line 1792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 8), 'if_condition_576563', if_condition_576563)
        # SSA begins for if statement (line 1792)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1793)
        # Processing the call arguments (line 1793)
        # Getting the type of 'errmsg' (line 1793)
        errmsg_576565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 29), 'errmsg', False)
        str_576566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, 38), 'str', 'beginning')
        # Applying the binary operator '%' (line 1793)
        result_mod_576567 = python_operator(stypy.reporting.localization.Localization(__file__, 1793, 29), '%', errmsg_576565, str_576566)
        
        str_576568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, 52), 'str', '(got %s)')
        # Getting the type of 'lolim' (line 1793)
        lolim_576569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 65), 'lolim', False)
        # Applying the binary operator '%' (line 1793)
        result_mod_576570 = python_operator(stypy.reporting.localization.Localization(__file__, 1793, 52), '%', str_576568, lolim_576569)
        
        # Applying the binary operator '+' (line 1793)
        result_add_576571 = python_operator(stypy.reporting.localization.Localization(__file__, 1793, 29), '+', result_mod_576567, result_mod_576570)
        
        # Processing the call keyword arguments (line 1793)
        kwargs_576572 = {}
        # Getting the type of 'ValueError' (line 1793)
        ValueError_576564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1793)
        ValueError_call_result_576573 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 18), ValueError_576564, *[result_add_576571], **kwargs_576572)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1793, 12), ValueError_call_result_576573, 'raise parameter', BaseException)
        # SSA join for if statement (line 1792)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_576555:
            # SSA join for if statement (line 1791)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1794)
    # Getting the type of 'uplim' (line 1794)
    uplim_576574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 4), 'uplim')
    # Getting the type of 'None' (line 1794)
    None_576575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 20), 'None')
    
    (may_be_576576, more_types_in_union_576577) = may_not_be_none(uplim_576574, None_576575)

    if may_be_576576:

        if more_types_in_union_576577:
            # Runtime conditional SSA (line 1794)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'uplim' (line 1795)
        uplim_576578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 11), 'uplim')
        float_576579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, 19), 'float')
        # Applying the binary operator '>' (line 1795)
        result_gt_576580 = python_operator(stypy.reporting.localization.Localization(__file__, 1795, 11), '>', uplim_576578, float_576579)
        
        
        # Getting the type of 'uplim' (line 1795)
        uplim_576581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 25), 'uplim')
        int_576582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, 33), 'int')
        # Applying the binary operator '<' (line 1795)
        result_lt_576583 = python_operator(stypy.reporting.localization.Localization(__file__, 1795, 25), '<', uplim_576581, int_576582)
        
        # Applying the binary operator 'or' (line 1795)
        result_or_keyword_576584 = python_operator(stypy.reporting.localization.Localization(__file__, 1795, 11), 'or', result_gt_576580, result_lt_576583)
        
        # Testing the type of an if condition (line 1795)
        if_condition_576585 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1795, 8), result_or_keyword_576584)
        # Assigning a type to the variable 'if_condition_576585' (line 1795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 8), 'if_condition_576585', if_condition_576585)
        # SSA begins for if statement (line 1795)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1796)
        # Processing the call arguments (line 1796)
        # Getting the type of 'errmsg' (line 1796)
        errmsg_576587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 29), 'errmsg', False)
        str_576588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 38), 'str', 'end')
        # Applying the binary operator '%' (line 1796)
        result_mod_576589 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 29), '%', errmsg_576587, str_576588)
        
        str_576590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 46), 'str', '(got %s)')
        # Getting the type of 'uplim' (line 1796)
        uplim_576591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 59), 'uplim', False)
        # Applying the binary operator '%' (line 1796)
        result_mod_576592 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 46), '%', str_576590, uplim_576591)
        
        # Applying the binary operator '+' (line 1796)
        result_add_576593 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 29), '+', result_mod_576589, result_mod_576592)
        
        # Processing the call keyword arguments (line 1796)
        kwargs_576594 = {}
        # Getting the type of 'ValueError' (line 1796)
        ValueError_576586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1796)
        ValueError_call_result_576595 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 18), ValueError_576586, *[result_add_576593], **kwargs_576594)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1796, 12), ValueError_call_result_576595, 'raise parameter', BaseException)
        # SSA join for if statement (line 1795)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_576577:
            # SSA join for if statement (line 1794)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Tuple (line 1798):
    
    # Assigning a Subscript to a Name (line 1798):
    
    # Obtaining the type of the subscript
    int_576596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 4), 'int')
    # Getting the type of 'inclusive' (line 1798)
    inclusive_576597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 21), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 1798)
    getitem___576598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 4), inclusive_576597, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1798)
    subscript_call_result_576599 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 4), getitem___576598, int_576596)
    
    # Assigning a type to the variable 'tuple_var_assignment_571513' (line 1798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 4), 'tuple_var_assignment_571513', subscript_call_result_576599)
    
    # Assigning a Subscript to a Name (line 1798):
    
    # Obtaining the type of the subscript
    int_576600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 4), 'int')
    # Getting the type of 'inclusive' (line 1798)
    inclusive_576601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 21), 'inclusive')
    # Obtaining the member '__getitem__' of a type (line 1798)
    getitem___576602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 4), inclusive_576601, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1798)
    subscript_call_result_576603 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 4), getitem___576602, int_576600)
    
    # Assigning a type to the variable 'tuple_var_assignment_571514' (line 1798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 4), 'tuple_var_assignment_571514', subscript_call_result_576603)
    
    # Assigning a Name to a Name (line 1798):
    # Getting the type of 'tuple_var_assignment_571513' (line 1798)
    tuple_var_assignment_571513_576604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 4), 'tuple_var_assignment_571513')
    # Assigning a type to the variable 'loinc' (line 1798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 5), 'loinc', tuple_var_assignment_571513_576604)
    
    # Assigning a Name to a Name (line 1798):
    # Getting the type of 'tuple_var_assignment_571514' (line 1798)
    tuple_var_assignment_571514_576605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 4), 'tuple_var_assignment_571514')
    # Assigning a type to the variable 'upinc' (line 1798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 12), 'upinc', tuple_var_assignment_571514_576605)
    
    # Type idiom detected: calculating its left and rigth part (line 1800)
    # Getting the type of 'axis' (line 1800)
    axis_576606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 7), 'axis')
    # Getting the type of 'None' (line 1800)
    None_576607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 15), 'None')
    
    (may_be_576608, more_types_in_union_576609) = may_be_none(axis_576606, None_576607)

    if may_be_576608:

        if more_types_in_union_576609:
            # Runtime conditional SSA (line 1800)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 1801):
        
        # Assigning a Attribute to a Name (line 1801):
        # Getting the type of 'a' (line 1801)
        a_576610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 14), 'a')
        # Obtaining the member 'shape' of a type (line 1801)
        shape_576611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1801, 14), a_576610, 'shape')
        # Assigning a type to the variable 'shp' (line 1801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 8), 'shp', shape_576611)
        
        # Call to reshape(...): (line 1802)
        # Processing the call arguments (line 1802)
        # Getting the type of 'shp' (line 1802)
        shp_576624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 75), 'shp', False)
        # Processing the call keyword arguments (line 1802)
        kwargs_576625 = {}
        
        # Call to _winsorize1D(...): (line 1802)
        # Processing the call arguments (line 1802)
        
        # Call to ravel(...): (line 1802)
        # Processing the call keyword arguments (line 1802)
        kwargs_576615 = {}
        # Getting the type of 'a' (line 1802)
        a_576613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 28), 'a', False)
        # Obtaining the member 'ravel' of a type (line 1802)
        ravel_576614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 28), a_576613, 'ravel')
        # Calling ravel(args, kwargs) (line 1802)
        ravel_call_result_576616 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 28), ravel_576614, *[], **kwargs_576615)
        
        # Getting the type of 'lolim' (line 1802)
        lolim_576617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 39), 'lolim', False)
        # Getting the type of 'uplim' (line 1802)
        uplim_576618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 46), 'uplim', False)
        # Getting the type of 'loinc' (line 1802)
        loinc_576619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 53), 'loinc', False)
        # Getting the type of 'upinc' (line 1802)
        upinc_576620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 60), 'upinc', False)
        # Processing the call keyword arguments (line 1802)
        kwargs_576621 = {}
        # Getting the type of '_winsorize1D' (line 1802)
        _winsorize1D_576612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 15), '_winsorize1D', False)
        # Calling _winsorize1D(args, kwargs) (line 1802)
        _winsorize1D_call_result_576622 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 15), _winsorize1D_576612, *[ravel_call_result_576616, lolim_576617, uplim_576618, loinc_576619, upinc_576620], **kwargs_576621)
        
        # Obtaining the member 'reshape' of a type (line 1802)
        reshape_576623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 15), _winsorize1D_call_result_576622, 'reshape')
        # Calling reshape(args, kwargs) (line 1802)
        reshape_call_result_576626 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 15), reshape_576623, *[shp_576624], **kwargs_576625)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1802, 8), 'stypy_return_type', reshape_call_result_576626)

        if more_types_in_union_576609:
            # Runtime conditional SSA for else branch (line 1800)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_576608) or more_types_in_union_576609):
        
        # Call to apply_along_axis(...): (line 1804)
        # Processing the call arguments (line 1804)
        # Getting the type of '_winsorize1D' (line 1804)
        _winsorize1D_576629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 35), '_winsorize1D', False)
        # Getting the type of 'axis' (line 1804)
        axis_576630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 49), 'axis', False)
        # Getting the type of 'a' (line 1804)
        a_576631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 55), 'a', False)
        # Getting the type of 'lolim' (line 1804)
        lolim_576632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 58), 'lolim', False)
        # Getting the type of 'uplim' (line 1804)
        uplim_576633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 65), 'uplim', False)
        # Getting the type of 'loinc' (line 1804)
        loinc_576634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 72), 'loinc', False)
        # Getting the type of 'upinc' (line 1805)
        upinc_576635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 35), 'upinc', False)
        # Processing the call keyword arguments (line 1804)
        kwargs_576636 = {}
        # Getting the type of 'ma' (line 1804)
        ma_576627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 15), 'ma', False)
        # Obtaining the member 'apply_along_axis' of a type (line 1804)
        apply_along_axis_576628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1804, 15), ma_576627, 'apply_along_axis')
        # Calling apply_along_axis(args, kwargs) (line 1804)
        apply_along_axis_call_result_576637 = invoke(stypy.reporting.localization.Localization(__file__, 1804, 15), apply_along_axis_576628, *[_winsorize1D_576629, axis_576630, a_576631, lolim_576632, uplim_576633, loinc_576634, upinc_576635], **kwargs_576636)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 8), 'stypy_return_type', apply_along_axis_call_result_576637)

        if (may_be_576608 and more_types_in_union_576609):
            # SSA join for if statement (line 1800)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'winsorize(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'winsorize' in the type store
    # Getting the type of 'stypy_return_type' (line 1726)
    stypy_return_type_576638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_576638)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'winsorize'
    return stypy_return_type_576638

# Assigning a type to the variable 'winsorize' (line 1726)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 0), 'winsorize', winsorize)

@norecursion
def moment(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_576639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 21), 'int')
    int_576640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 29), 'int')
    defaults = [int_576639, int_576640]
    # Create a new context for function 'moment'
    module_type_store = module_type_store.open_function_context('moment', 1808, 0, False)
    
    # Passed parameters checking function
    moment.stypy_localization = localization
    moment.stypy_type_of_self = None
    moment.stypy_type_store = module_type_store
    moment.stypy_function_name = 'moment'
    moment.stypy_param_names_list = ['a', 'moment', 'axis']
    moment.stypy_varargs_param_name = None
    moment.stypy_kwargs_param_name = None
    moment.stypy_call_defaults = defaults
    moment.stypy_call_varargs = varargs
    moment.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'moment', ['a', 'moment', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'moment', localization, ['a', 'moment', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'moment(...)' code ##################

    str_576641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, (-1)), 'str', '\n    Calculates the nth moment about the mean for a sample.\n\n    Parameters\n    ----------\n    a : array_like\n       data\n    moment : int, optional\n       order of central moment that is returned\n    axis : int or None, optional\n       Axis along which the central moment is computed. Default is 0.\n       If None, compute over the whole array `a`.\n\n    Returns\n    -------\n    n-th central moment : ndarray or float\n       The appropriate moment along the given axis or over all values if axis\n       is None. The denominator for the moment calculation is the number of\n       observations, no degrees of freedom correction is done.\n\n    Notes\n    -----\n    For more details about `moment`, see `stats.moment`.\n\n    ')
    
    # Assigning a Call to a Tuple (line 1834):
    
    # Assigning a Subscript to a Name (line 1834):
    
    # Obtaining the type of the subscript
    int_576642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1834)
    # Processing the call arguments (line 1834)
    # Getting the type of 'a' (line 1834)
    a_576644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 27), 'a', False)
    # Getting the type of 'axis' (line 1834)
    axis_576645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 30), 'axis', False)
    # Processing the call keyword arguments (line 1834)
    kwargs_576646 = {}
    # Getting the type of '_chk_asarray' (line 1834)
    _chk_asarray_576643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1834)
    _chk_asarray_call_result_576647 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 14), _chk_asarray_576643, *[a_576644, axis_576645], **kwargs_576646)
    
    # Obtaining the member '__getitem__' of a type (line 1834)
    getitem___576648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1834, 4), _chk_asarray_call_result_576647, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1834)
    subscript_call_result_576649 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 4), getitem___576648, int_576642)
    
    # Assigning a type to the variable 'tuple_var_assignment_571515' (line 1834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 4), 'tuple_var_assignment_571515', subscript_call_result_576649)
    
    # Assigning a Subscript to a Name (line 1834):
    
    # Obtaining the type of the subscript
    int_576650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1834)
    # Processing the call arguments (line 1834)
    # Getting the type of 'a' (line 1834)
    a_576652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 27), 'a', False)
    # Getting the type of 'axis' (line 1834)
    axis_576653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 30), 'axis', False)
    # Processing the call keyword arguments (line 1834)
    kwargs_576654 = {}
    # Getting the type of '_chk_asarray' (line 1834)
    _chk_asarray_576651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1834)
    _chk_asarray_call_result_576655 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 14), _chk_asarray_576651, *[a_576652, axis_576653], **kwargs_576654)
    
    # Obtaining the member '__getitem__' of a type (line 1834)
    getitem___576656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1834, 4), _chk_asarray_call_result_576655, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1834)
    subscript_call_result_576657 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 4), getitem___576656, int_576650)
    
    # Assigning a type to the variable 'tuple_var_assignment_571516' (line 1834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 4), 'tuple_var_assignment_571516', subscript_call_result_576657)
    
    # Assigning a Name to a Name (line 1834):
    # Getting the type of 'tuple_var_assignment_571515' (line 1834)
    tuple_var_assignment_571515_576658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 4), 'tuple_var_assignment_571515')
    # Assigning a type to the variable 'a' (line 1834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 4), 'a', tuple_var_assignment_571515_576658)
    
    # Assigning a Name to a Name (line 1834):
    # Getting the type of 'tuple_var_assignment_571516' (line 1834)
    tuple_var_assignment_571516_576659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 4), 'tuple_var_assignment_571516')
    # Assigning a type to the variable 'axis' (line 1834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 7), 'axis', tuple_var_assignment_571516_576659)
    
    
    # Getting the type of 'moment' (line 1835)
    moment_576660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 7), 'moment')
    int_576661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1835, 17), 'int')
    # Applying the binary operator '==' (line 1835)
    result_eq_576662 = python_operator(stypy.reporting.localization.Localization(__file__, 1835, 7), '==', moment_576660, int_576661)
    
    # Testing the type of an if condition (line 1835)
    if_condition_576663 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1835, 4), result_eq_576662)
    # Assigning a type to the variable 'if_condition_576663' (line 1835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1835, 4), 'if_condition_576663', if_condition_576663)
    # SSA begins for if statement (line 1835)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1837):
    
    # Assigning a Call to a Name (line 1837):
    
    # Call to list(...): (line 1837)
    # Processing the call arguments (line 1837)
    # Getting the type of 'a' (line 1837)
    a_576665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 21), 'a', False)
    # Obtaining the member 'shape' of a type (line 1837)
    shape_576666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1837, 21), a_576665, 'shape')
    # Processing the call keyword arguments (line 1837)
    kwargs_576667 = {}
    # Getting the type of 'list' (line 1837)
    list_576664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 16), 'list', False)
    # Calling list(args, kwargs) (line 1837)
    list_call_result_576668 = invoke(stypy.reporting.localization.Localization(__file__, 1837, 16), list_576664, *[shape_576666], **kwargs_576667)
    
    # Assigning a type to the variable 'shape' (line 1837)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1837, 8), 'shape', list_call_result_576668)
    # Deleting a member
    # Getting the type of 'shape' (line 1838)
    shape_576669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 12), 'shape')
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1838)
    axis_576670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 18), 'axis')
    # Getting the type of 'shape' (line 1838)
    shape_576671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 12), 'shape')
    # Obtaining the member '__getitem__' of a type (line 1838)
    getitem___576672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1838, 12), shape_576671, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1838)
    subscript_call_result_576673 = invoke(stypy.reporting.localization.Localization(__file__, 1838, 12), getitem___576672, axis_576670)
    
    del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1838, 8), shape_576669, subscript_call_result_576673)
    
    # Getting the type of 'shape' (line 1839)
    shape_576674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 11), 'shape')
    # Testing the type of an if condition (line 1839)
    if_condition_576675 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1839, 8), shape_576674)
    # Assigning a type to the variable 'if_condition_576675' (line 1839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 8), 'if_condition_576675', if_condition_576675)
    # SSA begins for if statement (line 1839)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to zeros(...): (line 1841)
    # Processing the call arguments (line 1841)
    # Getting the type of 'shape' (line 1841)
    shape_576678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 28), 'shape', False)
    # Processing the call keyword arguments (line 1841)
    # Getting the type of 'float' (line 1841)
    float_576679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 41), 'float', False)
    keyword_576680 = float_576679
    kwargs_576681 = {'dtype': keyword_576680}
    # Getting the type of 'np' (line 1841)
    np_576676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 19), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1841)
    zeros_576677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 19), np_576676, 'zeros')
    # Calling zeros(args, kwargs) (line 1841)
    zeros_call_result_576682 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 19), zeros_576677, *[shape_576678], **kwargs_576681)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1841)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 12), 'stypy_return_type', zeros_call_result_576682)
    # SSA branch for the else part of an if statement (line 1839)
    module_type_store.open_ssa_branch('else')
    
    # Call to float64(...): (line 1844)
    # Processing the call arguments (line 1844)
    float_576685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1844, 30), 'float')
    # Processing the call keyword arguments (line 1844)
    kwargs_576686 = {}
    # Getting the type of 'np' (line 1844)
    np_576683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 19), 'np', False)
    # Obtaining the member 'float64' of a type (line 1844)
    float64_576684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 19), np_576683, 'float64')
    # Calling float64(args, kwargs) (line 1844)
    float64_call_result_576687 = invoke(stypy.reporting.localization.Localization(__file__, 1844, 19), float64_576684, *[float_576685], **kwargs_576686)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1844)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 12), 'stypy_return_type', float64_call_result_576687)
    # SSA join for if statement (line 1839)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1835)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a List to a Name (line 1847):
    
    # Assigning a List to a Name (line 1847):
    
    # Obtaining an instance of the builtin type 'list' (line 1847)
    list_576688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1847, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1847)
    # Adding element type (line 1847)
    # Getting the type of 'moment' (line 1847)
    moment_576689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 18), 'moment')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1847, 17), list_576688, moment_576689)
    
    # Assigning a type to the variable 'n_list' (line 1847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1847, 8), 'n_list', list_576688)
    
    # Assigning a Name to a Name (line 1848):
    
    # Assigning a Name to a Name (line 1848):
    # Getting the type of 'moment' (line 1848)
    moment_576690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 20), 'moment')
    # Assigning a type to the variable 'current_n' (line 1848)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1848, 8), 'current_n', moment_576690)
    
    
    # Getting the type of 'current_n' (line 1849)
    current_n_576691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 14), 'current_n')
    int_576692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 26), 'int')
    # Applying the binary operator '>' (line 1849)
    result_gt_576693 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 14), '>', current_n_576691, int_576692)
    
    # Testing the type of an if condition (line 1849)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1849, 8), result_gt_576693)
    # SSA begins for while statement (line 1849)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Getting the type of 'current_n' (line 1850)
    current_n_576694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 15), 'current_n')
    int_576695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1850, 27), 'int')
    # Applying the binary operator '%' (line 1850)
    result_mod_576696 = python_operator(stypy.reporting.localization.Localization(__file__, 1850, 15), '%', current_n_576694, int_576695)
    
    # Testing the type of an if condition (line 1850)
    if_condition_576697 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1850, 12), result_mod_576696)
    # Assigning a type to the variable 'if_condition_576697' (line 1850)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1850, 12), 'if_condition_576697', if_condition_576697)
    # SSA begins for if statement (line 1850)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1851):
    
    # Assigning a BinOp to a Name (line 1851):
    # Getting the type of 'current_n' (line 1851)
    current_n_576698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 29), 'current_n')
    int_576699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 39), 'int')
    # Applying the binary operator '-' (line 1851)
    result_sub_576700 = python_operator(stypy.reporting.localization.Localization(__file__, 1851, 29), '-', current_n_576698, int_576699)
    
    int_576701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 42), 'int')
    # Applying the binary operator 'div' (line 1851)
    result_div_576702 = python_operator(stypy.reporting.localization.Localization(__file__, 1851, 28), 'div', result_sub_576700, int_576701)
    
    # Assigning a type to the variable 'current_n' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 16), 'current_n', result_div_576702)
    # SSA branch for the else part of an if statement (line 1850)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'current_n' (line 1853)
    current_n_576703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 16), 'current_n')
    int_576704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1853, 29), 'int')
    # Applying the binary operator 'div=' (line 1853)
    result_div_576705 = python_operator(stypy.reporting.localization.Localization(__file__, 1853, 16), 'div=', current_n_576703, int_576704)
    # Assigning a type to the variable 'current_n' (line 1853)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1853, 16), 'current_n', result_div_576705)
    
    # SSA join for if statement (line 1850)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 1854)
    # Processing the call arguments (line 1854)
    # Getting the type of 'current_n' (line 1854)
    current_n_576708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 26), 'current_n', False)
    # Processing the call keyword arguments (line 1854)
    kwargs_576709 = {}
    # Getting the type of 'n_list' (line 1854)
    n_list_576706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'n_list', False)
    # Obtaining the member 'append' of a type (line 1854)
    append_576707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 12), n_list_576706, 'append')
    # Calling append(args, kwargs) (line 1854)
    append_call_result_576710 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 12), append_576707, *[current_n_576708], **kwargs_576709)
    
    # SSA join for while statement (line 1849)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1857):
    
    # Assigning a BinOp to a Name (line 1857):
    # Getting the type of 'a' (line 1857)
    a_576711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 22), 'a')
    
    # Call to expand_dims(...): (line 1857)
    # Processing the call arguments (line 1857)
    
    # Call to mean(...): (line 1857)
    # Processing the call arguments (line 1857)
    # Getting the type of 'axis' (line 1857)
    axis_576716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 48), 'axis', False)
    # Processing the call keyword arguments (line 1857)
    kwargs_576717 = {}
    # Getting the type of 'a' (line 1857)
    a_576714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 41), 'a', False)
    # Obtaining the member 'mean' of a type (line 1857)
    mean_576715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1857, 41), a_576714, 'mean')
    # Calling mean(args, kwargs) (line 1857)
    mean_call_result_576718 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 41), mean_576715, *[axis_576716], **kwargs_576717)
    
    # Getting the type of 'axis' (line 1857)
    axis_576719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 55), 'axis', False)
    # Processing the call keyword arguments (line 1857)
    kwargs_576720 = {}
    # Getting the type of 'ma' (line 1857)
    ma_576712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 26), 'ma', False)
    # Obtaining the member 'expand_dims' of a type (line 1857)
    expand_dims_576713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1857, 26), ma_576712, 'expand_dims')
    # Calling expand_dims(args, kwargs) (line 1857)
    expand_dims_call_result_576721 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 26), expand_dims_576713, *[mean_call_result_576718, axis_576719], **kwargs_576720)
    
    # Applying the binary operator '-' (line 1857)
    result_sub_576722 = python_operator(stypy.reporting.localization.Localization(__file__, 1857, 22), '-', a_576711, expand_dims_call_result_576721)
    
    # Assigning a type to the variable 'a_zero_mean' (line 1857)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1857, 8), 'a_zero_mean', result_sub_576722)
    
    
    
    # Obtaining the type of the subscript
    int_576723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1858, 18), 'int')
    # Getting the type of 'n_list' (line 1858)
    n_list_576724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 11), 'n_list')
    # Obtaining the member '__getitem__' of a type (line 1858)
    getitem___576725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 11), n_list_576724, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1858)
    subscript_call_result_576726 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 11), getitem___576725, int_576723)
    
    int_576727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1858, 25), 'int')
    # Applying the binary operator '==' (line 1858)
    result_eq_576728 = python_operator(stypy.reporting.localization.Localization(__file__, 1858, 11), '==', subscript_call_result_576726, int_576727)
    
    # Testing the type of an if condition (line 1858)
    if_condition_576729 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1858, 8), result_eq_576728)
    # Assigning a type to the variable 'if_condition_576729' (line 1858)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1858, 8), 'if_condition_576729', if_condition_576729)
    # SSA begins for if statement (line 1858)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1859):
    
    # Assigning a Call to a Name (line 1859):
    
    # Call to copy(...): (line 1859)
    # Processing the call keyword arguments (line 1859)
    kwargs_576732 = {}
    # Getting the type of 'a_zero_mean' (line 1859)
    a_zero_mean_576730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 16), 'a_zero_mean', False)
    # Obtaining the member 'copy' of a type (line 1859)
    copy_576731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1859, 16), a_zero_mean_576730, 'copy')
    # Calling copy(args, kwargs) (line 1859)
    copy_call_result_576733 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 16), copy_576731, *[], **kwargs_576732)
    
    # Assigning a type to the variable 's' (line 1859)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1859, 12), 's', copy_call_result_576733)
    # SSA branch for the else part of an if statement (line 1858)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1861):
    
    # Assigning a BinOp to a Name (line 1861):
    # Getting the type of 'a_zero_mean' (line 1861)
    a_zero_mean_576734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 16), 'a_zero_mean')
    int_576735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1861, 29), 'int')
    # Applying the binary operator '**' (line 1861)
    result_pow_576736 = python_operator(stypy.reporting.localization.Localization(__file__, 1861, 16), '**', a_zero_mean_576734, int_576735)
    
    # Assigning a type to the variable 's' (line 1861)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 12), 's', result_pow_576736)
    # SSA join for if statement (line 1858)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Obtaining the type of the subscript
    int_576737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1864, 24), 'int')
    int_576738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1864, 28), 'int')
    slice_576739 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1864, 17), int_576737, None, int_576738)
    # Getting the type of 'n_list' (line 1864)
    n_list_576740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 17), 'n_list')
    # Obtaining the member '__getitem__' of a type (line 1864)
    getitem___576741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 17), n_list_576740, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1864)
    subscript_call_result_576742 = invoke(stypy.reporting.localization.Localization(__file__, 1864, 17), getitem___576741, slice_576739)
    
    # Testing the type of a for loop iterable (line 1864)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1864, 8), subscript_call_result_576742)
    # Getting the type of the for loop variable (line 1864)
    for_loop_var_576743 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1864, 8), subscript_call_result_576742)
    # Assigning a type to the variable 'n' (line 1864)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 8), 'n', for_loop_var_576743)
    # SSA begins for a for statement (line 1864)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 1865):
    
    # Assigning a BinOp to a Name (line 1865):
    # Getting the type of 's' (line 1865)
    s_576744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 16), 's')
    int_576745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1865, 19), 'int')
    # Applying the binary operator '**' (line 1865)
    result_pow_576746 = python_operator(stypy.reporting.localization.Localization(__file__, 1865, 16), '**', s_576744, int_576745)
    
    # Assigning a type to the variable 's' (line 1865)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 12), 's', result_pow_576746)
    
    # Getting the type of 'n' (line 1866)
    n_576747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 15), 'n')
    int_576748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1866, 19), 'int')
    # Applying the binary operator '%' (line 1866)
    result_mod_576749 = python_operator(stypy.reporting.localization.Localization(__file__, 1866, 15), '%', n_576747, int_576748)
    
    # Testing the type of an if condition (line 1866)
    if_condition_576750 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1866, 12), result_mod_576749)
    # Assigning a type to the variable 'if_condition_576750' (line 1866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'if_condition_576750', if_condition_576750)
    # SSA begins for if statement (line 1866)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 's' (line 1867)
    s_576751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 16), 's')
    # Getting the type of 'a_zero_mean' (line 1867)
    a_zero_mean_576752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 21), 'a_zero_mean')
    # Applying the binary operator '*=' (line 1867)
    result_imul_576753 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 16), '*=', s_576751, a_zero_mean_576752)
    # Assigning a type to the variable 's' (line 1867)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 16), 's', result_imul_576753)
    
    # SSA join for if statement (line 1866)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to mean(...): (line 1868)
    # Processing the call arguments (line 1868)
    # Getting the type of 'axis' (line 1868)
    axis_576756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 22), 'axis', False)
    # Processing the call keyword arguments (line 1868)
    kwargs_576757 = {}
    # Getting the type of 's' (line 1868)
    s_576754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 15), 's', False)
    # Obtaining the member 'mean' of a type (line 1868)
    mean_576755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 15), s_576754, 'mean')
    # Calling mean(args, kwargs) (line 1868)
    mean_call_result_576758 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 15), mean_576755, *[axis_576756], **kwargs_576757)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 8), 'stypy_return_type', mean_call_result_576758)
    # SSA join for if statement (line 1835)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'moment(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'moment' in the type store
    # Getting the type of 'stypy_return_type' (line 1808)
    stypy_return_type_576759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_576759)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'moment'
    return stypy_return_type_576759

# Assigning a type to the variable 'moment' (line 1808)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 0), 'moment', moment)

@norecursion
def variation(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_576760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 22), 'int')
    defaults = [int_576760]
    # Create a new context for function 'variation'
    module_type_store = module_type_store.open_function_context('variation', 1871, 0, False)
    
    # Passed parameters checking function
    variation.stypy_localization = localization
    variation.stypy_type_of_self = None
    variation.stypy_type_store = module_type_store
    variation.stypy_function_name = 'variation'
    variation.stypy_param_names_list = ['a', 'axis']
    variation.stypy_varargs_param_name = None
    variation.stypy_kwargs_param_name = None
    variation.stypy_call_defaults = defaults
    variation.stypy_call_varargs = varargs
    variation.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'variation', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'variation', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'variation(...)' code ##################

    str_576761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1893, (-1)), 'str', '\n    Computes the coefficient of variation, the ratio of the biased standard\n    deviation to the mean.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis : int or None, optional\n        Axis along which to calculate the coefficient of variation. Default\n        is 0. If None, compute over the whole array `a`.\n\n    Returns\n    -------\n    variation : ndarray\n        The calculated variation along the requested axis.\n\n    Notes\n    -----\n    For more details about `variation`, see `stats.variation`.\n\n    ')
    
    # Assigning a Call to a Tuple (line 1894):
    
    # Assigning a Subscript to a Name (line 1894):
    
    # Obtaining the type of the subscript
    int_576762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1894, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1894)
    # Processing the call arguments (line 1894)
    # Getting the type of 'a' (line 1894)
    a_576764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 27), 'a', False)
    # Getting the type of 'axis' (line 1894)
    axis_576765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 30), 'axis', False)
    # Processing the call keyword arguments (line 1894)
    kwargs_576766 = {}
    # Getting the type of '_chk_asarray' (line 1894)
    _chk_asarray_576763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1894)
    _chk_asarray_call_result_576767 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 14), _chk_asarray_576763, *[a_576764, axis_576765], **kwargs_576766)
    
    # Obtaining the member '__getitem__' of a type (line 1894)
    getitem___576768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1894, 4), _chk_asarray_call_result_576767, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1894)
    subscript_call_result_576769 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 4), getitem___576768, int_576762)
    
    # Assigning a type to the variable 'tuple_var_assignment_571517' (line 1894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 4), 'tuple_var_assignment_571517', subscript_call_result_576769)
    
    # Assigning a Subscript to a Name (line 1894):
    
    # Obtaining the type of the subscript
    int_576770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1894, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1894)
    # Processing the call arguments (line 1894)
    # Getting the type of 'a' (line 1894)
    a_576772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 27), 'a', False)
    # Getting the type of 'axis' (line 1894)
    axis_576773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 30), 'axis', False)
    # Processing the call keyword arguments (line 1894)
    kwargs_576774 = {}
    # Getting the type of '_chk_asarray' (line 1894)
    _chk_asarray_576771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1894)
    _chk_asarray_call_result_576775 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 14), _chk_asarray_576771, *[a_576772, axis_576773], **kwargs_576774)
    
    # Obtaining the member '__getitem__' of a type (line 1894)
    getitem___576776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1894, 4), _chk_asarray_call_result_576775, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1894)
    subscript_call_result_576777 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 4), getitem___576776, int_576770)
    
    # Assigning a type to the variable 'tuple_var_assignment_571518' (line 1894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 4), 'tuple_var_assignment_571518', subscript_call_result_576777)
    
    # Assigning a Name to a Name (line 1894):
    # Getting the type of 'tuple_var_assignment_571517' (line 1894)
    tuple_var_assignment_571517_576778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 4), 'tuple_var_assignment_571517')
    # Assigning a type to the variable 'a' (line 1894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 4), 'a', tuple_var_assignment_571517_576778)
    
    # Assigning a Name to a Name (line 1894):
    # Getting the type of 'tuple_var_assignment_571518' (line 1894)
    tuple_var_assignment_571518_576779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 4), 'tuple_var_assignment_571518')
    # Assigning a type to the variable 'axis' (line 1894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 7), 'axis', tuple_var_assignment_571518_576779)
    
    # Call to std(...): (line 1895)
    # Processing the call arguments (line 1895)
    # Getting the type of 'axis' (line 1895)
    axis_576782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 17), 'axis', False)
    # Processing the call keyword arguments (line 1895)
    kwargs_576783 = {}
    # Getting the type of 'a' (line 1895)
    a_576780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 11), 'a', False)
    # Obtaining the member 'std' of a type (line 1895)
    std_576781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 11), a_576780, 'std')
    # Calling std(args, kwargs) (line 1895)
    std_call_result_576784 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 11), std_576781, *[axis_576782], **kwargs_576783)
    
    
    # Call to mean(...): (line 1895)
    # Processing the call arguments (line 1895)
    # Getting the type of 'axis' (line 1895)
    axis_576787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 30), 'axis', False)
    # Processing the call keyword arguments (line 1895)
    kwargs_576788 = {}
    # Getting the type of 'a' (line 1895)
    a_576785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 23), 'a', False)
    # Obtaining the member 'mean' of a type (line 1895)
    mean_576786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 23), a_576785, 'mean')
    # Calling mean(args, kwargs) (line 1895)
    mean_call_result_576789 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 23), mean_576786, *[axis_576787], **kwargs_576788)
    
    # Applying the binary operator 'div' (line 1895)
    result_div_576790 = python_operator(stypy.reporting.localization.Localization(__file__, 1895, 11), 'div', std_call_result_576784, mean_call_result_576789)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1895, 4), 'stypy_return_type', result_div_576790)
    
    # ################# End of 'variation(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'variation' in the type store
    # Getting the type of 'stypy_return_type' (line 1871)
    stypy_return_type_576791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_576791)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'variation'
    return stypy_return_type_576791

# Assigning a type to the variable 'variation' (line 1871)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 0), 'variation', variation)

@norecursion
def skew(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_576792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1898, 17), 'int')
    # Getting the type of 'True' (line 1898)
    True_576793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 25), 'True')
    defaults = [int_576792, True_576793]
    # Create a new context for function 'skew'
    module_type_store = module_type_store.open_function_context('skew', 1898, 0, False)
    
    # Passed parameters checking function
    skew.stypy_localization = localization
    skew.stypy_type_of_self = None
    skew.stypy_type_store = module_type_store
    skew.stypy_function_name = 'skew'
    skew.stypy_param_names_list = ['a', 'axis', 'bias']
    skew.stypy_varargs_param_name = None
    skew.stypy_kwargs_param_name = None
    skew.stypy_call_defaults = defaults
    skew.stypy_call_varargs = varargs
    skew.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'skew', ['a', 'axis', 'bias'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'skew', localization, ['a', 'axis', 'bias'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'skew(...)' code ##################

    str_576794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1922, (-1)), 'str', '\n    Computes the skewness of a data set.\n\n    Parameters\n    ----------\n    a : ndarray\n        data\n    axis : int or None, optional\n        Axis along which skewness is calculated. Default is 0.\n        If None, compute over the whole array `a`.\n    bias : bool, optional\n        If False, then the calculations are corrected for statistical bias.\n\n    Returns\n    -------\n    skewness : ndarray\n        The skewness of values along an axis, returning 0 where all values are\n        equal.\n\n    Notes\n    -----\n    For more details about `skew`, see `stats.skew`.\n\n    ')
    
    # Assigning a Call to a Tuple (line 1923):
    
    # Assigning a Subscript to a Name (line 1923):
    
    # Obtaining the type of the subscript
    int_576795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1923, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1923)
    # Processing the call arguments (line 1923)
    # Getting the type of 'a' (line 1923)
    a_576797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 27), 'a', False)
    # Getting the type of 'axis' (line 1923)
    axis_576798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 29), 'axis', False)
    # Processing the call keyword arguments (line 1923)
    kwargs_576799 = {}
    # Getting the type of '_chk_asarray' (line 1923)
    _chk_asarray_576796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1923)
    _chk_asarray_call_result_576800 = invoke(stypy.reporting.localization.Localization(__file__, 1923, 14), _chk_asarray_576796, *[a_576797, axis_576798], **kwargs_576799)
    
    # Obtaining the member '__getitem__' of a type (line 1923)
    getitem___576801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1923, 4), _chk_asarray_call_result_576800, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1923)
    subscript_call_result_576802 = invoke(stypy.reporting.localization.Localization(__file__, 1923, 4), getitem___576801, int_576795)
    
    # Assigning a type to the variable 'tuple_var_assignment_571519' (line 1923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 4), 'tuple_var_assignment_571519', subscript_call_result_576802)
    
    # Assigning a Subscript to a Name (line 1923):
    
    # Obtaining the type of the subscript
    int_576803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1923, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1923)
    # Processing the call arguments (line 1923)
    # Getting the type of 'a' (line 1923)
    a_576805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 27), 'a', False)
    # Getting the type of 'axis' (line 1923)
    axis_576806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 29), 'axis', False)
    # Processing the call keyword arguments (line 1923)
    kwargs_576807 = {}
    # Getting the type of '_chk_asarray' (line 1923)
    _chk_asarray_576804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1923)
    _chk_asarray_call_result_576808 = invoke(stypy.reporting.localization.Localization(__file__, 1923, 14), _chk_asarray_576804, *[a_576805, axis_576806], **kwargs_576807)
    
    # Obtaining the member '__getitem__' of a type (line 1923)
    getitem___576809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1923, 4), _chk_asarray_call_result_576808, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1923)
    subscript_call_result_576810 = invoke(stypy.reporting.localization.Localization(__file__, 1923, 4), getitem___576809, int_576803)
    
    # Assigning a type to the variable 'tuple_var_assignment_571520' (line 1923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 4), 'tuple_var_assignment_571520', subscript_call_result_576810)
    
    # Assigning a Name to a Name (line 1923):
    # Getting the type of 'tuple_var_assignment_571519' (line 1923)
    tuple_var_assignment_571519_576811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 4), 'tuple_var_assignment_571519')
    # Assigning a type to the variable 'a' (line 1923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 4), 'a', tuple_var_assignment_571519_576811)
    
    # Assigning a Name to a Name (line 1923):
    # Getting the type of 'tuple_var_assignment_571520' (line 1923)
    tuple_var_assignment_571520_576812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 4), 'tuple_var_assignment_571520')
    # Assigning a type to the variable 'axis' (line 1923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 7), 'axis', tuple_var_assignment_571520_576812)
    
    # Assigning a Call to a Name (line 1924):
    
    # Assigning a Call to a Name (line 1924):
    
    # Call to count(...): (line 1924)
    # Processing the call arguments (line 1924)
    # Getting the type of 'axis' (line 1924)
    axis_576815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 16), 'axis', False)
    # Processing the call keyword arguments (line 1924)
    kwargs_576816 = {}
    # Getting the type of 'a' (line 1924)
    a_576813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 8), 'a', False)
    # Obtaining the member 'count' of a type (line 1924)
    count_576814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1924, 8), a_576813, 'count')
    # Calling count(args, kwargs) (line 1924)
    count_call_result_576817 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 8), count_576814, *[axis_576815], **kwargs_576816)
    
    # Assigning a type to the variable 'n' (line 1924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 4), 'n', count_call_result_576817)
    
    # Assigning a Call to a Name (line 1925):
    
    # Assigning a Call to a Name (line 1925):
    
    # Call to moment(...): (line 1925)
    # Processing the call arguments (line 1925)
    # Getting the type of 'a' (line 1925)
    a_576819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 16), 'a', False)
    int_576820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1925, 19), 'int')
    # Getting the type of 'axis' (line 1925)
    axis_576821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 22), 'axis', False)
    # Processing the call keyword arguments (line 1925)
    kwargs_576822 = {}
    # Getting the type of 'moment' (line 1925)
    moment_576818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 9), 'moment', False)
    # Calling moment(args, kwargs) (line 1925)
    moment_call_result_576823 = invoke(stypy.reporting.localization.Localization(__file__, 1925, 9), moment_576818, *[a_576819, int_576820, axis_576821], **kwargs_576822)
    
    # Assigning a type to the variable 'm2' (line 1925)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1925, 4), 'm2', moment_call_result_576823)
    
    # Assigning a Call to a Name (line 1926):
    
    # Assigning a Call to a Name (line 1926):
    
    # Call to moment(...): (line 1926)
    # Processing the call arguments (line 1926)
    # Getting the type of 'a' (line 1926)
    a_576825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 16), 'a', False)
    int_576826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1926, 19), 'int')
    # Getting the type of 'axis' (line 1926)
    axis_576827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 22), 'axis', False)
    # Processing the call keyword arguments (line 1926)
    kwargs_576828 = {}
    # Getting the type of 'moment' (line 1926)
    moment_576824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 9), 'moment', False)
    # Calling moment(args, kwargs) (line 1926)
    moment_call_result_576829 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 9), moment_576824, *[a_576825, int_576826, axis_576827], **kwargs_576828)
    
    # Assigning a type to the variable 'm3' (line 1926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 4), 'm3', moment_call_result_576829)
    
    # Assigning a Call to a Name (line 1927):
    
    # Assigning a Call to a Name (line 1927):
    
    # Call to seterr(...): (line 1927)
    # Processing the call keyword arguments (line 1927)
    str_576832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, 27), 'str', 'ignore')
    keyword_576833 = str_576832
    kwargs_576834 = {'all': keyword_576833}
    # Getting the type of 'np' (line 1927)
    np_576830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 13), 'np', False)
    # Obtaining the member 'seterr' of a type (line 1927)
    seterr_576831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1927, 13), np_576830, 'seterr')
    # Calling seterr(args, kwargs) (line 1927)
    seterr_call_result_576835 = invoke(stypy.reporting.localization.Localization(__file__, 1927, 13), seterr_576831, *[], **kwargs_576834)
    
    # Assigning a type to the variable 'olderr' (line 1927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1927, 4), 'olderr', seterr_call_result_576835)
    
    # Try-finally block (line 1928)
    
    # Assigning a Call to a Name (line 1929):
    
    # Assigning a Call to a Name (line 1929):
    
    # Call to where(...): (line 1929)
    # Processing the call arguments (line 1929)
    
    # Getting the type of 'm2' (line 1929)
    m2_576838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 24), 'm2', False)
    int_576839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, 30), 'int')
    # Applying the binary operator '==' (line 1929)
    result_eq_576840 = python_operator(stypy.reporting.localization.Localization(__file__, 1929, 24), '==', m2_576838, int_576839)
    
    int_576841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, 33), 'int')
    # Getting the type of 'm3' (line 1929)
    m3_576842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 36), 'm3', False)
    # Getting the type of 'm2' (line 1929)
    m2_576843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 41), 'm2', False)
    float_576844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, 45), 'float')
    # Applying the binary operator '**' (line 1929)
    result_pow_576845 = python_operator(stypy.reporting.localization.Localization(__file__, 1929, 41), '**', m2_576843, float_576844)
    
    # Applying the binary operator 'div' (line 1929)
    result_div_576846 = python_operator(stypy.reporting.localization.Localization(__file__, 1929, 36), 'div', m3_576842, result_pow_576845)
    
    # Processing the call keyword arguments (line 1929)
    kwargs_576847 = {}
    # Getting the type of 'ma' (line 1929)
    ma_576836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 15), 'ma', False)
    # Obtaining the member 'where' of a type (line 1929)
    where_576837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1929, 15), ma_576836, 'where')
    # Calling where(args, kwargs) (line 1929)
    where_call_result_576848 = invoke(stypy.reporting.localization.Localization(__file__, 1929, 15), where_576837, *[result_eq_576840, int_576841, result_div_576846], **kwargs_576847)
    
    # Assigning a type to the variable 'vals' (line 1929)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1929, 8), 'vals', where_call_result_576848)
    
    # finally branch of the try-finally block (line 1928)
    
    # Call to seterr(...): (line 1931)
    # Processing the call keyword arguments (line 1931)
    # Getting the type of 'olderr' (line 1931)
    olderr_576851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 20), 'olderr', False)
    kwargs_576852 = {'olderr_576851': olderr_576851}
    # Getting the type of 'np' (line 1931)
    np_576849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 8), 'np', False)
    # Obtaining the member 'seterr' of a type (line 1931)
    seterr_576850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 8), np_576849, 'seterr')
    # Calling seterr(args, kwargs) (line 1931)
    seterr_call_result_576853 = invoke(stypy.reporting.localization.Localization(__file__, 1931, 8), seterr_576850, *[], **kwargs_576852)
    
    
    
    
    # Getting the type of 'bias' (line 1933)
    bias_576854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 11), 'bias')
    # Applying the 'not' unary operator (line 1933)
    result_not__576855 = python_operator(stypy.reporting.localization.Localization(__file__, 1933, 7), 'not', bias_576854)
    
    # Testing the type of an if condition (line 1933)
    if_condition_576856 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1933, 4), result_not__576855)
    # Assigning a type to the variable 'if_condition_576856' (line 1933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1933, 4), 'if_condition_576856', if_condition_576856)
    # SSA begins for if statement (line 1933)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1934):
    
    # Assigning a BinOp to a Name (line 1934):
    
    # Getting the type of 'n' (line 1934)
    n_576857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 23), 'n')
    int_576858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1934, 27), 'int')
    # Applying the binary operator '>' (line 1934)
    result_gt_576859 = python_operator(stypy.reporting.localization.Localization(__file__, 1934, 23), '>', n_576857, int_576858)
    
    
    # Getting the type of 'm2' (line 1934)
    m2_576860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 33), 'm2')
    int_576861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1934, 38), 'int')
    # Applying the binary operator '>' (line 1934)
    result_gt_576862 = python_operator(stypy.reporting.localization.Localization(__file__, 1934, 33), '>', m2_576860, int_576861)
    
    # Applying the binary operator '&' (line 1934)
    result_and__576863 = python_operator(stypy.reporting.localization.Localization(__file__, 1934, 22), '&', result_gt_576859, result_gt_576862)
    
    # Assigning a type to the variable 'can_correct' (line 1934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1934, 8), 'can_correct', result_and__576863)
    
    
    # Call to any(...): (line 1935)
    # Processing the call keyword arguments (line 1935)
    kwargs_576866 = {}
    # Getting the type of 'can_correct' (line 1935)
    can_correct_576864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 11), 'can_correct', False)
    # Obtaining the member 'any' of a type (line 1935)
    any_576865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1935, 11), can_correct_576864, 'any')
    # Calling any(args, kwargs) (line 1935)
    any_call_result_576867 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 11), any_576865, *[], **kwargs_576866)
    
    # Testing the type of an if condition (line 1935)
    if_condition_576868 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1935, 8), any_call_result_576867)
    # Assigning a type to the variable 'if_condition_576868' (line 1935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'if_condition_576868', if_condition_576868)
    # SSA begins for if statement (line 1935)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1936):
    
    # Assigning a Call to a Name (line 1936):
    
    # Call to extract(...): (line 1936)
    # Processing the call arguments (line 1936)
    # Getting the type of 'can_correct' (line 1936)
    can_correct_576871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 28), 'can_correct', False)
    # Getting the type of 'm2' (line 1936)
    m2_576872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 41), 'm2', False)
    # Processing the call keyword arguments (line 1936)
    kwargs_576873 = {}
    # Getting the type of 'np' (line 1936)
    np_576869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 17), 'np', False)
    # Obtaining the member 'extract' of a type (line 1936)
    extract_576870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1936, 17), np_576869, 'extract')
    # Calling extract(args, kwargs) (line 1936)
    extract_call_result_576874 = invoke(stypy.reporting.localization.Localization(__file__, 1936, 17), extract_576870, *[can_correct_576871, m2_576872], **kwargs_576873)
    
    # Assigning a type to the variable 'm2' (line 1936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 12), 'm2', extract_call_result_576874)
    
    # Assigning a Call to a Name (line 1937):
    
    # Assigning a Call to a Name (line 1937):
    
    # Call to extract(...): (line 1937)
    # Processing the call arguments (line 1937)
    # Getting the type of 'can_correct' (line 1937)
    can_correct_576877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 28), 'can_correct', False)
    # Getting the type of 'm3' (line 1937)
    m3_576878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 41), 'm3', False)
    # Processing the call keyword arguments (line 1937)
    kwargs_576879 = {}
    # Getting the type of 'np' (line 1937)
    np_576875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 17), 'np', False)
    # Obtaining the member 'extract' of a type (line 1937)
    extract_576876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 17), np_576875, 'extract')
    # Calling extract(args, kwargs) (line 1937)
    extract_call_result_576880 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 17), extract_576876, *[can_correct_576877, m3_576878], **kwargs_576879)
    
    # Assigning a type to the variable 'm3' (line 1937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 12), 'm3', extract_call_result_576880)
    
    # Assigning a BinOp to a Name (line 1938):
    
    # Assigning a BinOp to a Name (line 1938):
    
    # Call to sqrt(...): (line 1938)
    # Processing the call arguments (line 1938)
    # Getting the type of 'n' (line 1938)
    n_576883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 28), 'n', False)
    float_576884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1938, 30), 'float')
    # Applying the binary operator '-' (line 1938)
    result_sub_576885 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 28), '-', n_576883, float_576884)
    
    # Getting the type of 'n' (line 1938)
    n_576886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 35), 'n', False)
    # Applying the binary operator '*' (line 1938)
    result_mul_576887 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 27), '*', result_sub_576885, n_576886)
    
    # Processing the call keyword arguments (line 1938)
    kwargs_576888 = {}
    # Getting the type of 'ma' (line 1938)
    ma_576881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 19), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 1938)
    sqrt_576882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1938, 19), ma_576881, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1938)
    sqrt_call_result_576889 = invoke(stypy.reporting.localization.Localization(__file__, 1938, 19), sqrt_576882, *[result_mul_576887], **kwargs_576888)
    
    # Getting the type of 'n' (line 1938)
    n_576890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 39), 'n')
    float_576891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1938, 41), 'float')
    # Applying the binary operator '-' (line 1938)
    result_sub_576892 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 39), '-', n_576890, float_576891)
    
    # Applying the binary operator 'div' (line 1938)
    result_div_576893 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 19), 'div', sqrt_call_result_576889, result_sub_576892)
    
    # Getting the type of 'm3' (line 1938)
    m3_576894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 46), 'm3')
    # Applying the binary operator '*' (line 1938)
    result_mul_576895 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 45), '*', result_div_576893, m3_576894)
    
    # Getting the type of 'm2' (line 1938)
    m2_576896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 49), 'm2')
    float_576897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1938, 53), 'float')
    # Applying the binary operator '**' (line 1938)
    result_pow_576898 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 49), '**', m2_576896, float_576897)
    
    # Applying the binary operator 'div' (line 1938)
    result_div_576899 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 48), 'div', result_mul_576895, result_pow_576898)
    
    # Assigning a type to the variable 'nval' (line 1938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1938, 12), 'nval', result_div_576899)
    
    # Call to place(...): (line 1939)
    # Processing the call arguments (line 1939)
    # Getting the type of 'vals' (line 1939)
    vals_576902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 21), 'vals', False)
    # Getting the type of 'can_correct' (line 1939)
    can_correct_576903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 27), 'can_correct', False)
    # Getting the type of 'nval' (line 1939)
    nval_576904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 40), 'nval', False)
    # Processing the call keyword arguments (line 1939)
    kwargs_576905 = {}
    # Getting the type of 'np' (line 1939)
    np_576900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 12), 'np', False)
    # Obtaining the member 'place' of a type (line 1939)
    place_576901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 12), np_576900, 'place')
    # Calling place(args, kwargs) (line 1939)
    place_call_result_576906 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 12), place_576901, *[vals_576902, can_correct_576903, nval_576904], **kwargs_576905)
    
    # SSA join for if statement (line 1935)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1933)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'vals' (line 1940)
    vals_576907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 11), 'vals')
    # Assigning a type to the variable 'stypy_return_type' (line 1940)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1940, 4), 'stypy_return_type', vals_576907)
    
    # ################# End of 'skew(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'skew' in the type store
    # Getting the type of 'stypy_return_type' (line 1898)
    stypy_return_type_576908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_576908)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'skew'
    return stypy_return_type_576908

# Assigning a type to the variable 'skew' (line 1898)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 0), 'skew', skew)

@norecursion
def kurtosis(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_576909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1943, 21), 'int')
    # Getting the type of 'True' (line 1943)
    True_576910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 31), 'True')
    # Getting the type of 'True' (line 1943)
    True_576911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 42), 'True')
    defaults = [int_576909, True_576910, True_576911]
    # Create a new context for function 'kurtosis'
    module_type_store = module_type_store.open_function_context('kurtosis', 1943, 0, False)
    
    # Passed parameters checking function
    kurtosis.stypy_localization = localization
    kurtosis.stypy_type_of_self = None
    kurtosis.stypy_type_store = module_type_store
    kurtosis.stypy_function_name = 'kurtosis'
    kurtosis.stypy_param_names_list = ['a', 'axis', 'fisher', 'bias']
    kurtosis.stypy_varargs_param_name = None
    kurtosis.stypy_kwargs_param_name = None
    kurtosis.stypy_call_defaults = defaults
    kurtosis.stypy_call_varargs = varargs
    kurtosis.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kurtosis', ['a', 'axis', 'fisher', 'bias'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kurtosis', localization, ['a', 'axis', 'fisher', 'bias'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kurtosis(...)' code ##################

    str_576912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1979, (-1)), 'str', "\n    Computes the kurtosis (Fisher or Pearson) of a dataset.\n\n    Kurtosis is the fourth central moment divided by the square of the\n    variance. If Fisher's definition is used, then 3.0 is subtracted from\n    the result to give 0.0 for a normal distribution.\n\n    If bias is False then the kurtosis is calculated using k statistics to\n    eliminate bias coming from biased moment estimators\n\n    Use `kurtosistest` to see if result is close enough to normal.\n\n    Parameters\n    ----------\n    a : array\n        data for which the kurtosis is calculated\n    axis : int or None, optional\n        Axis along which the kurtosis is calculated. Default is 0.\n        If None, compute over the whole array `a`.\n    fisher : bool, optional\n        If True, Fisher's definition is used (normal ==> 0.0). If False,\n        Pearson's definition is used (normal ==> 3.0).\n    bias : bool, optional\n        If False, then the calculations are corrected for statistical bias.\n\n    Returns\n    -------\n    kurtosis : array\n        The kurtosis of values along an axis. If all values are equal,\n        return -3 for Fisher's definition and 0 for Pearson's definition.\n\n    Notes\n    -----\n    For more details about `kurtosis`, see `stats.kurtosis`.\n\n    ")
    
    # Assigning a Call to a Tuple (line 1980):
    
    # Assigning a Subscript to a Name (line 1980):
    
    # Obtaining the type of the subscript
    int_576913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1980)
    # Processing the call arguments (line 1980)
    # Getting the type of 'a' (line 1980)
    a_576915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 27), 'a', False)
    # Getting the type of 'axis' (line 1980)
    axis_576916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 30), 'axis', False)
    # Processing the call keyword arguments (line 1980)
    kwargs_576917 = {}
    # Getting the type of '_chk_asarray' (line 1980)
    _chk_asarray_576914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1980)
    _chk_asarray_call_result_576918 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 14), _chk_asarray_576914, *[a_576915, axis_576916], **kwargs_576917)
    
    # Obtaining the member '__getitem__' of a type (line 1980)
    getitem___576919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1980, 4), _chk_asarray_call_result_576918, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1980)
    subscript_call_result_576920 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 4), getitem___576919, int_576913)
    
    # Assigning a type to the variable 'tuple_var_assignment_571521' (line 1980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 4), 'tuple_var_assignment_571521', subscript_call_result_576920)
    
    # Assigning a Subscript to a Name (line 1980):
    
    # Obtaining the type of the subscript
    int_576921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 4), 'int')
    
    # Call to _chk_asarray(...): (line 1980)
    # Processing the call arguments (line 1980)
    # Getting the type of 'a' (line 1980)
    a_576923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 27), 'a', False)
    # Getting the type of 'axis' (line 1980)
    axis_576924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 30), 'axis', False)
    # Processing the call keyword arguments (line 1980)
    kwargs_576925 = {}
    # Getting the type of '_chk_asarray' (line 1980)
    _chk_asarray_576922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 1980)
    _chk_asarray_call_result_576926 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 14), _chk_asarray_576922, *[a_576923, axis_576924], **kwargs_576925)
    
    # Obtaining the member '__getitem__' of a type (line 1980)
    getitem___576927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1980, 4), _chk_asarray_call_result_576926, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1980)
    subscript_call_result_576928 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 4), getitem___576927, int_576921)
    
    # Assigning a type to the variable 'tuple_var_assignment_571522' (line 1980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 4), 'tuple_var_assignment_571522', subscript_call_result_576928)
    
    # Assigning a Name to a Name (line 1980):
    # Getting the type of 'tuple_var_assignment_571521' (line 1980)
    tuple_var_assignment_571521_576929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 4), 'tuple_var_assignment_571521')
    # Assigning a type to the variable 'a' (line 1980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 4), 'a', tuple_var_assignment_571521_576929)
    
    # Assigning a Name to a Name (line 1980):
    # Getting the type of 'tuple_var_assignment_571522' (line 1980)
    tuple_var_assignment_571522_576930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 4), 'tuple_var_assignment_571522')
    # Assigning a type to the variable 'axis' (line 1980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 7), 'axis', tuple_var_assignment_571522_576930)
    
    # Assigning a Call to a Name (line 1981):
    
    # Assigning a Call to a Name (line 1981):
    
    # Call to moment(...): (line 1981)
    # Processing the call arguments (line 1981)
    # Getting the type of 'a' (line 1981)
    a_576932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 16), 'a', False)
    int_576933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, 19), 'int')
    # Getting the type of 'axis' (line 1981)
    axis_576934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 22), 'axis', False)
    # Processing the call keyword arguments (line 1981)
    kwargs_576935 = {}
    # Getting the type of 'moment' (line 1981)
    moment_576931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 9), 'moment', False)
    # Calling moment(args, kwargs) (line 1981)
    moment_call_result_576936 = invoke(stypy.reporting.localization.Localization(__file__, 1981, 9), moment_576931, *[a_576932, int_576933, axis_576934], **kwargs_576935)
    
    # Assigning a type to the variable 'm2' (line 1981)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 4), 'm2', moment_call_result_576936)
    
    # Assigning a Call to a Name (line 1982):
    
    # Assigning a Call to a Name (line 1982):
    
    # Call to moment(...): (line 1982)
    # Processing the call arguments (line 1982)
    # Getting the type of 'a' (line 1982)
    a_576938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 16), 'a', False)
    int_576939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1982, 19), 'int')
    # Getting the type of 'axis' (line 1982)
    axis_576940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 22), 'axis', False)
    # Processing the call keyword arguments (line 1982)
    kwargs_576941 = {}
    # Getting the type of 'moment' (line 1982)
    moment_576937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 9), 'moment', False)
    # Calling moment(args, kwargs) (line 1982)
    moment_call_result_576942 = invoke(stypy.reporting.localization.Localization(__file__, 1982, 9), moment_576937, *[a_576938, int_576939, axis_576940], **kwargs_576941)
    
    # Assigning a type to the variable 'm4' (line 1982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1982, 4), 'm4', moment_call_result_576942)
    
    # Assigning a Call to a Name (line 1983):
    
    # Assigning a Call to a Name (line 1983):
    
    # Call to seterr(...): (line 1983)
    # Processing the call keyword arguments (line 1983)
    str_576945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 27), 'str', 'ignore')
    keyword_576946 = str_576945
    kwargs_576947 = {'all': keyword_576946}
    # Getting the type of 'np' (line 1983)
    np_576943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 13), 'np', False)
    # Obtaining the member 'seterr' of a type (line 1983)
    seterr_576944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1983, 13), np_576943, 'seterr')
    # Calling seterr(args, kwargs) (line 1983)
    seterr_call_result_576948 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 13), seterr_576944, *[], **kwargs_576947)
    
    # Assigning a type to the variable 'olderr' (line 1983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 4), 'olderr', seterr_call_result_576948)
    
    # Try-finally block (line 1984)
    
    # Assigning a Call to a Name (line 1985):
    
    # Assigning a Call to a Name (line 1985):
    
    # Call to where(...): (line 1985)
    # Processing the call arguments (line 1985)
    
    # Getting the type of 'm2' (line 1985)
    m2_576951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 24), 'm2', False)
    int_576952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 30), 'int')
    # Applying the binary operator '==' (line 1985)
    result_eq_576953 = python_operator(stypy.reporting.localization.Localization(__file__, 1985, 24), '==', m2_576951, int_576952)
    
    int_576954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 33), 'int')
    # Getting the type of 'm4' (line 1985)
    m4_576955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 36), 'm4', False)
    # Getting the type of 'm2' (line 1985)
    m2_576956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 41), 'm2', False)
    float_576957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 45), 'float')
    # Applying the binary operator '**' (line 1985)
    result_pow_576958 = python_operator(stypy.reporting.localization.Localization(__file__, 1985, 41), '**', m2_576956, float_576957)
    
    # Applying the binary operator 'div' (line 1985)
    result_div_576959 = python_operator(stypy.reporting.localization.Localization(__file__, 1985, 36), 'div', m4_576955, result_pow_576958)
    
    # Processing the call keyword arguments (line 1985)
    kwargs_576960 = {}
    # Getting the type of 'ma' (line 1985)
    ma_576949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 15), 'ma', False)
    # Obtaining the member 'where' of a type (line 1985)
    where_576950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1985, 15), ma_576949, 'where')
    # Calling where(args, kwargs) (line 1985)
    where_call_result_576961 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 15), where_576950, *[result_eq_576953, int_576954, result_div_576959], **kwargs_576960)
    
    # Assigning a type to the variable 'vals' (line 1985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 8), 'vals', where_call_result_576961)
    
    # finally branch of the try-finally block (line 1984)
    
    # Call to seterr(...): (line 1987)
    # Processing the call keyword arguments (line 1987)
    # Getting the type of 'olderr' (line 1987)
    olderr_576964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 20), 'olderr', False)
    kwargs_576965 = {'olderr_576964': olderr_576964}
    # Getting the type of 'np' (line 1987)
    np_576962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 8), 'np', False)
    # Obtaining the member 'seterr' of a type (line 1987)
    seterr_576963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1987, 8), np_576962, 'seterr')
    # Calling seterr(args, kwargs) (line 1987)
    seterr_call_result_576966 = invoke(stypy.reporting.localization.Localization(__file__, 1987, 8), seterr_576963, *[], **kwargs_576965)
    
    
    
    
    # Getting the type of 'bias' (line 1989)
    bias_576967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 11), 'bias')
    # Applying the 'not' unary operator (line 1989)
    result_not__576968 = python_operator(stypy.reporting.localization.Localization(__file__, 1989, 7), 'not', bias_576967)
    
    # Testing the type of an if condition (line 1989)
    if_condition_576969 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1989, 4), result_not__576968)
    # Assigning a type to the variable 'if_condition_576969' (line 1989)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1989, 4), 'if_condition_576969', if_condition_576969)
    # SSA begins for if statement (line 1989)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1990):
    
    # Assigning a Call to a Name (line 1990):
    
    # Call to count(...): (line 1990)
    # Processing the call arguments (line 1990)
    # Getting the type of 'axis' (line 1990)
    axis_576972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 20), 'axis', False)
    # Processing the call keyword arguments (line 1990)
    kwargs_576973 = {}
    # Getting the type of 'a' (line 1990)
    a_576970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 12), 'a', False)
    # Obtaining the member 'count' of a type (line 1990)
    count_576971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1990, 12), a_576970, 'count')
    # Calling count(args, kwargs) (line 1990)
    count_call_result_576974 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 12), count_576971, *[axis_576972], **kwargs_576973)
    
    # Assigning a type to the variable 'n' (line 1990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1990, 8), 'n', count_call_result_576974)
    
    # Assigning a BinOp to a Name (line 1991):
    
    # Assigning a BinOp to a Name (line 1991):
    
    # Getting the type of 'n' (line 1991)
    n_576975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 23), 'n')
    int_576976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1991, 27), 'int')
    # Applying the binary operator '>' (line 1991)
    result_gt_576977 = python_operator(stypy.reporting.localization.Localization(__file__, 1991, 23), '>', n_576975, int_576976)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm2' (line 1991)
    m2_576978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 33), 'm2')
    # Getting the type of 'ma' (line 1991)
    ma_576979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 43), 'ma')
    # Obtaining the member 'masked' of a type (line 1991)
    masked_576980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1991, 43), ma_576979, 'masked')
    # Applying the binary operator 'isnot' (line 1991)
    result_is_not_576981 = python_operator(stypy.reporting.localization.Localization(__file__, 1991, 33), 'isnot', m2_576978, masked_576980)
    
    
    # Getting the type of 'm2' (line 1991)
    m2_576982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 57), 'm2')
    int_576983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1991, 62), 'int')
    # Applying the binary operator '>' (line 1991)
    result_gt_576984 = python_operator(stypy.reporting.localization.Localization(__file__, 1991, 57), '>', m2_576982, int_576983)
    
    # Applying the binary operator 'and' (line 1991)
    result_and_keyword_576985 = python_operator(stypy.reporting.localization.Localization(__file__, 1991, 33), 'and', result_is_not_576981, result_gt_576984)
    
    # Applying the binary operator '&' (line 1991)
    result_and__576986 = python_operator(stypy.reporting.localization.Localization(__file__, 1991, 22), '&', result_gt_576977, result_and_keyword_576985)
    
    # Assigning a type to the variable 'can_correct' (line 1991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'can_correct', result_and__576986)
    
    
    # Call to any(...): (line 1992)
    # Processing the call keyword arguments (line 1992)
    kwargs_576989 = {}
    # Getting the type of 'can_correct' (line 1992)
    can_correct_576987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 11), 'can_correct', False)
    # Obtaining the member 'any' of a type (line 1992)
    any_576988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 11), can_correct_576987, 'any')
    # Calling any(args, kwargs) (line 1992)
    any_call_result_576990 = invoke(stypy.reporting.localization.Localization(__file__, 1992, 11), any_576988, *[], **kwargs_576989)
    
    # Testing the type of an if condition (line 1992)
    if_condition_576991 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1992, 8), any_call_result_576990)
    # Assigning a type to the variable 'if_condition_576991' (line 1992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1992, 8), 'if_condition_576991', if_condition_576991)
    # SSA begins for if statement (line 1992)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1993):
    
    # Assigning a Call to a Name (line 1993):
    
    # Call to extract(...): (line 1993)
    # Processing the call arguments (line 1993)
    # Getting the type of 'can_correct' (line 1993)
    can_correct_576994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 27), 'can_correct', False)
    # Getting the type of 'n' (line 1993)
    n_576995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 40), 'n', False)
    # Processing the call keyword arguments (line 1993)
    kwargs_576996 = {}
    # Getting the type of 'np' (line 1993)
    np_576992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 16), 'np', False)
    # Obtaining the member 'extract' of a type (line 1993)
    extract_576993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1993, 16), np_576992, 'extract')
    # Calling extract(args, kwargs) (line 1993)
    extract_call_result_576997 = invoke(stypy.reporting.localization.Localization(__file__, 1993, 16), extract_576993, *[can_correct_576994, n_576995], **kwargs_576996)
    
    # Assigning a type to the variable 'n' (line 1993)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1993, 12), 'n', extract_call_result_576997)
    
    # Assigning a Call to a Name (line 1994):
    
    # Assigning a Call to a Name (line 1994):
    
    # Call to extract(...): (line 1994)
    # Processing the call arguments (line 1994)
    # Getting the type of 'can_correct' (line 1994)
    can_correct_577000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 28), 'can_correct', False)
    # Getting the type of 'm2' (line 1994)
    m2_577001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 41), 'm2', False)
    # Processing the call keyword arguments (line 1994)
    kwargs_577002 = {}
    # Getting the type of 'np' (line 1994)
    np_576998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 17), 'np', False)
    # Obtaining the member 'extract' of a type (line 1994)
    extract_576999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 17), np_576998, 'extract')
    # Calling extract(args, kwargs) (line 1994)
    extract_call_result_577003 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 17), extract_576999, *[can_correct_577000, m2_577001], **kwargs_577002)
    
    # Assigning a type to the variable 'm2' (line 1994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 12), 'm2', extract_call_result_577003)
    
    # Assigning a Call to a Name (line 1995):
    
    # Assigning a Call to a Name (line 1995):
    
    # Call to extract(...): (line 1995)
    # Processing the call arguments (line 1995)
    # Getting the type of 'can_correct' (line 1995)
    can_correct_577006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 28), 'can_correct', False)
    # Getting the type of 'm4' (line 1995)
    m4_577007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 41), 'm4', False)
    # Processing the call keyword arguments (line 1995)
    kwargs_577008 = {}
    # Getting the type of 'np' (line 1995)
    np_577004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 17), 'np', False)
    # Obtaining the member 'extract' of a type (line 1995)
    extract_577005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1995, 17), np_577004, 'extract')
    # Calling extract(args, kwargs) (line 1995)
    extract_call_result_577009 = invoke(stypy.reporting.localization.Localization(__file__, 1995, 17), extract_577005, *[can_correct_577006, m4_577007], **kwargs_577008)
    
    # Assigning a type to the variable 'm4' (line 1995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1995, 12), 'm4', extract_call_result_577009)
    
    # Assigning a BinOp to a Name (line 1996):
    
    # Assigning a BinOp to a Name (line 1996):
    float_577010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 19), 'float')
    # Getting the type of 'n' (line 1996)
    n_577011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 24), 'n')
    int_577012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 26), 'int')
    # Applying the binary operator '-' (line 1996)
    result_sub_577013 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 24), '-', n_577011, int_577012)
    
    # Applying the binary operator 'div' (line 1996)
    result_div_577014 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 19), 'div', float_577010, result_sub_577013)
    
    # Getting the type of 'n' (line 1996)
    n_577015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 30), 'n')
    int_577016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 32), 'int')
    # Applying the binary operator '-' (line 1996)
    result_sub_577017 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 30), '-', n_577015, int_577016)
    
    # Applying the binary operator 'div' (line 1996)
    result_div_577018 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 28), 'div', result_div_577014, result_sub_577017)
    
    # Getting the type of 'n' (line 1996)
    n_577019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 37), 'n')
    # Getting the type of 'n' (line 1996)
    n_577020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 39), 'n')
    # Applying the binary operator '*' (line 1996)
    result_mul_577021 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 37), '*', n_577019, n_577020)
    
    float_577022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 41), 'float')
    # Applying the binary operator '-' (line 1996)
    result_sub_577023 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 37), '-', result_mul_577021, float_577022)
    
    # Getting the type of 'm4' (line 1996)
    m4_577024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 46), 'm4')
    # Applying the binary operator '*' (line 1996)
    result_mul_577025 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 36), '*', result_sub_577023, m4_577024)
    
    # Getting the type of 'm2' (line 1996)
    m2_577026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 49), 'm2')
    float_577027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 53), 'float')
    # Applying the binary operator '**' (line 1996)
    result_pow_577028 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 49), '**', m2_577026, float_577027)
    
    # Applying the binary operator 'div' (line 1996)
    result_div_577029 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 48), 'div', result_mul_577025, result_pow_577028)
    
    int_577030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 57), 'int')
    # Getting the type of 'n' (line 1996)
    n_577031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 60), 'n')
    int_577032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 62), 'int')
    # Applying the binary operator '-' (line 1996)
    result_sub_577033 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 60), '-', n_577031, int_577032)
    
    float_577034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 66), 'float')
    # Applying the binary operator '**' (line 1996)
    result_pow_577035 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 59), '**', result_sub_577033, float_577034)
    
    # Applying the binary operator '*' (line 1996)
    result_mul_577036 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 57), '*', int_577030, result_pow_577035)
    
    # Applying the binary operator '-' (line 1996)
    result_sub_577037 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 36), '-', result_div_577029, result_mul_577036)
    
    # Applying the binary operator '*' (line 1996)
    result_mul_577038 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 34), '*', result_div_577018, result_sub_577037)
    
    # Assigning a type to the variable 'nval' (line 1996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1996, 12), 'nval', result_mul_577038)
    
    # Call to place(...): (line 1997)
    # Processing the call arguments (line 1997)
    # Getting the type of 'vals' (line 1997)
    vals_577041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 21), 'vals', False)
    # Getting the type of 'can_correct' (line 1997)
    can_correct_577042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 27), 'can_correct', False)
    # Getting the type of 'nval' (line 1997)
    nval_577043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 40), 'nval', False)
    float_577044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1997, 45), 'float')
    # Applying the binary operator '+' (line 1997)
    result_add_577045 = python_operator(stypy.reporting.localization.Localization(__file__, 1997, 40), '+', nval_577043, float_577044)
    
    # Processing the call keyword arguments (line 1997)
    kwargs_577046 = {}
    # Getting the type of 'np' (line 1997)
    np_577039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 12), 'np', False)
    # Obtaining the member 'place' of a type (line 1997)
    place_577040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1997, 12), np_577039, 'place')
    # Calling place(args, kwargs) (line 1997)
    place_call_result_577047 = invoke(stypy.reporting.localization.Localization(__file__, 1997, 12), place_577040, *[vals_577041, can_correct_577042, result_add_577045], **kwargs_577046)
    
    # SSA join for if statement (line 1992)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1989)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'fisher' (line 1998)
    fisher_577048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 7), 'fisher')
    # Testing the type of an if condition (line 1998)
    if_condition_577049 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1998, 4), fisher_577048)
    # Assigning a type to the variable 'if_condition_577049' (line 1998)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1998, 4), 'if_condition_577049', if_condition_577049)
    # SSA begins for if statement (line 1998)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'vals' (line 1999)
    vals_577050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 15), 'vals')
    int_577051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1999, 22), 'int')
    # Applying the binary operator '-' (line 1999)
    result_sub_577052 = python_operator(stypy.reporting.localization.Localization(__file__, 1999, 15), '-', vals_577050, int_577051)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1999)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1999, 8), 'stypy_return_type', result_sub_577052)
    # SSA branch for the else part of an if statement (line 1998)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'vals' (line 2001)
    vals_577053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 15), 'vals')
    # Assigning a type to the variable 'stypy_return_type' (line 2001)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2001, 8), 'stypy_return_type', vals_577053)
    # SSA join for if statement (line 1998)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'kurtosis(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kurtosis' in the type store
    # Getting the type of 'stypy_return_type' (line 1943)
    stypy_return_type_577054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_577054)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kurtosis'
    return stypy_return_type_577054

# Assigning a type to the variable 'kurtosis' (line 1943)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1943, 0), 'kurtosis', kurtosis)

# Assigning a Call to a Name (line 2004):

# Assigning a Call to a Name (line 2004):

# Call to namedtuple(...): (line 2004)
# Processing the call arguments (line 2004)
str_577056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 28), 'str', 'DescribeResult')

# Obtaining an instance of the builtin type 'tuple' (line 2004)
tuple_577057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 47), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2004)
# Adding element type (line 2004)
str_577058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 47), 'str', 'nobs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2004, 47), tuple_577057, str_577058)
# Adding element type (line 2004)
str_577059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 55), 'str', 'minmax')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2004, 47), tuple_577057, str_577059)
# Adding element type (line 2004)
str_577060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 65), 'str', 'mean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2004, 47), tuple_577057, str_577060)
# Adding element type (line 2004)
str_577061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2005, 47), 'str', 'variance')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2004, 47), tuple_577057, str_577061)
# Adding element type (line 2004)
str_577062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2005, 59), 'str', 'skewness')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2004, 47), tuple_577057, str_577062)
# Adding element type (line 2004)
str_577063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2006, 47), 'str', 'kurtosis')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2004, 47), tuple_577057, str_577063)

# Processing the call keyword arguments (line 2004)
kwargs_577064 = {}
# Getting the type of 'namedtuple' (line 2004)
namedtuple_577055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 17), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 2004)
namedtuple_call_result_577065 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 17), namedtuple_577055, *[str_577056, tuple_577057], **kwargs_577064)

# Assigning a type to the variable 'DescribeResult' (line 2004)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2004, 0), 'DescribeResult', namedtuple_call_result_577065)

@norecursion
def describe(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_577066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2009, 21), 'int')
    int_577067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2009, 29), 'int')
    # Getting the type of 'True' (line 2009)
    True_577068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 37), 'True')
    defaults = [int_577066, int_577067, True_577068]
    # Create a new context for function 'describe'
    module_type_store = module_type_store.open_function_context('describe', 2009, 0, False)
    
    # Passed parameters checking function
    describe.stypy_localization = localization
    describe.stypy_type_of_self = None
    describe.stypy_type_store = module_type_store
    describe.stypy_function_name = 'describe'
    describe.stypy_param_names_list = ['a', 'axis', 'ddof', 'bias']
    describe.stypy_varargs_param_name = None
    describe.stypy_kwargs_param_name = None
    describe.stypy_call_defaults = defaults
    describe.stypy_call_varargs = varargs
    describe.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'describe', ['a', 'axis', 'ddof', 'bias'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'describe', localization, ['a', 'axis', 'ddof', 'bias'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'describe(...)' code ##################

    str_577069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, (-1)), 'str', '\n    Computes several descriptive statistics of the passed array.\n\n    Parameters\n    ----------\n    a : array_like\n        Data array\n    axis : int or None, optional\n        Axis along which to calculate statistics. Default 0. If None,\n        compute over the whole array `a`.\n    ddof : int, optional\n        degree of freedom (default 0); note that default ddof is different\n        from the same routine in stats.describe\n    bias : bool, optional\n        If False, then the skewness and kurtosis calculations are corrected for\n        statistical bias.\n\n    Returns\n    -------\n    nobs : int\n        (size of the data (discarding missing values)\n\n    minmax : (int, int)\n        min, max\n\n    mean : float\n        arithmetic mean\n\n    variance : float\n        unbiased variance\n\n    skewness : float\n        biased skewness\n\n    kurtosis : float\n        biased kurtosis\n\n    Examples\n    --------\n    >>> from scipy.stats.mstats import describe\n    >>> ma = np.ma.array(range(6), mask=[0, 0, 0, 1, 1, 1])\n    >>> describe(ma)\n    DescribeResult(nobs=3, minmax=(masked_array(data = 0,\n                 mask = False,\n           fill_value = 999999)\n    , masked_array(data = 2,\n                 mask = False,\n           fill_value = 999999)\n    ), mean=1.0, variance=0.66666666666666663, skewness=masked_array(data = 0.0,\n                 mask = False,\n           fill_value = 1e+20)\n    , kurtosis=-1.5)\n\n    ')
    
    # Assigning a Call to a Tuple (line 2064):
    
    # Assigning a Subscript to a Name (line 2064):
    
    # Obtaining the type of the subscript
    int_577070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2064, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2064)
    # Processing the call arguments (line 2064)
    # Getting the type of 'a' (line 2064)
    a_577072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 27), 'a', False)
    # Getting the type of 'axis' (line 2064)
    axis_577073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 30), 'axis', False)
    # Processing the call keyword arguments (line 2064)
    kwargs_577074 = {}
    # Getting the type of '_chk_asarray' (line 2064)
    _chk_asarray_577071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2064)
    _chk_asarray_call_result_577075 = invoke(stypy.reporting.localization.Localization(__file__, 2064, 14), _chk_asarray_577071, *[a_577072, axis_577073], **kwargs_577074)
    
    # Obtaining the member '__getitem__' of a type (line 2064)
    getitem___577076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2064, 4), _chk_asarray_call_result_577075, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2064)
    subscript_call_result_577077 = invoke(stypy.reporting.localization.Localization(__file__, 2064, 4), getitem___577076, int_577070)
    
    # Assigning a type to the variable 'tuple_var_assignment_571523' (line 2064)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 4), 'tuple_var_assignment_571523', subscript_call_result_577077)
    
    # Assigning a Subscript to a Name (line 2064):
    
    # Obtaining the type of the subscript
    int_577078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2064, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2064)
    # Processing the call arguments (line 2064)
    # Getting the type of 'a' (line 2064)
    a_577080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 27), 'a', False)
    # Getting the type of 'axis' (line 2064)
    axis_577081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 30), 'axis', False)
    # Processing the call keyword arguments (line 2064)
    kwargs_577082 = {}
    # Getting the type of '_chk_asarray' (line 2064)
    _chk_asarray_577079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2064)
    _chk_asarray_call_result_577083 = invoke(stypy.reporting.localization.Localization(__file__, 2064, 14), _chk_asarray_577079, *[a_577080, axis_577081], **kwargs_577082)
    
    # Obtaining the member '__getitem__' of a type (line 2064)
    getitem___577084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2064, 4), _chk_asarray_call_result_577083, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2064)
    subscript_call_result_577085 = invoke(stypy.reporting.localization.Localization(__file__, 2064, 4), getitem___577084, int_577078)
    
    # Assigning a type to the variable 'tuple_var_assignment_571524' (line 2064)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 4), 'tuple_var_assignment_571524', subscript_call_result_577085)
    
    # Assigning a Name to a Name (line 2064):
    # Getting the type of 'tuple_var_assignment_571523' (line 2064)
    tuple_var_assignment_571523_577086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 4), 'tuple_var_assignment_571523')
    # Assigning a type to the variable 'a' (line 2064)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 4), 'a', tuple_var_assignment_571523_577086)
    
    # Assigning a Name to a Name (line 2064):
    # Getting the type of 'tuple_var_assignment_571524' (line 2064)
    tuple_var_assignment_571524_577087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 4), 'tuple_var_assignment_571524')
    # Assigning a type to the variable 'axis' (line 2064)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 7), 'axis', tuple_var_assignment_571524_577087)
    
    # Assigning a Call to a Name (line 2065):
    
    # Assigning a Call to a Name (line 2065):
    
    # Call to count(...): (line 2065)
    # Processing the call arguments (line 2065)
    # Getting the type of 'axis' (line 2065)
    axis_577090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2065, 16), 'axis', False)
    # Processing the call keyword arguments (line 2065)
    kwargs_577091 = {}
    # Getting the type of 'a' (line 2065)
    a_577088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2065, 8), 'a', False)
    # Obtaining the member 'count' of a type (line 2065)
    count_577089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2065, 8), a_577088, 'count')
    # Calling count(args, kwargs) (line 2065)
    count_call_result_577092 = invoke(stypy.reporting.localization.Localization(__file__, 2065, 8), count_577089, *[axis_577090], **kwargs_577091)
    
    # Assigning a type to the variable 'n' (line 2065)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2065, 4), 'n', count_call_result_577092)
    
    # Assigning a Tuple to a Name (line 2066):
    
    # Assigning a Tuple to a Name (line 2066):
    
    # Obtaining an instance of the builtin type 'tuple' (line 2066)
    tuple_577093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2066, 10), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2066)
    # Adding element type (line 2066)
    
    # Call to reduce(...): (line 2066)
    # Processing the call arguments (line 2066)
    # Getting the type of 'a' (line 2066)
    a_577097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 28), 'a', False)
    # Processing the call keyword arguments (line 2066)
    kwargs_577098 = {}
    # Getting the type of 'ma' (line 2066)
    ma_577094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 10), 'ma', False)
    # Obtaining the member 'minimum' of a type (line 2066)
    minimum_577095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 10), ma_577094, 'minimum')
    # Obtaining the member 'reduce' of a type (line 2066)
    reduce_577096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 10), minimum_577095, 'reduce')
    # Calling reduce(args, kwargs) (line 2066)
    reduce_call_result_577099 = invoke(stypy.reporting.localization.Localization(__file__, 2066, 10), reduce_577096, *[a_577097], **kwargs_577098)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2066, 10), tuple_577093, reduce_call_result_577099)
    # Adding element type (line 2066)
    
    # Call to reduce(...): (line 2066)
    # Processing the call arguments (line 2066)
    # Getting the type of 'a' (line 2066)
    a_577103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 50), 'a', False)
    # Processing the call keyword arguments (line 2066)
    kwargs_577104 = {}
    # Getting the type of 'ma' (line 2066)
    ma_577100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 32), 'ma', False)
    # Obtaining the member 'maximum' of a type (line 2066)
    maximum_577101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 32), ma_577100, 'maximum')
    # Obtaining the member 'reduce' of a type (line 2066)
    reduce_577102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 32), maximum_577101, 'reduce')
    # Calling reduce(args, kwargs) (line 2066)
    reduce_call_result_577105 = invoke(stypy.reporting.localization.Localization(__file__, 2066, 32), reduce_577102, *[a_577103], **kwargs_577104)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2066, 10), tuple_577093, reduce_call_result_577105)
    
    # Assigning a type to the variable 'mm' (line 2066)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2066, 4), 'mm', tuple_577093)
    
    # Assigning a Call to a Name (line 2067):
    
    # Assigning a Call to a Name (line 2067):
    
    # Call to mean(...): (line 2067)
    # Processing the call arguments (line 2067)
    # Getting the type of 'axis' (line 2067)
    axis_577108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 15), 'axis', False)
    # Processing the call keyword arguments (line 2067)
    kwargs_577109 = {}
    # Getting the type of 'a' (line 2067)
    a_577106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'a', False)
    # Obtaining the member 'mean' of a type (line 2067)
    mean_577107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 8), a_577106, 'mean')
    # Calling mean(args, kwargs) (line 2067)
    mean_call_result_577110 = invoke(stypy.reporting.localization.Localization(__file__, 2067, 8), mean_577107, *[axis_577108], **kwargs_577109)
    
    # Assigning a type to the variable 'm' (line 2067)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 4), 'm', mean_call_result_577110)
    
    # Assigning a Call to a Name (line 2068):
    
    # Assigning a Call to a Name (line 2068):
    
    # Call to var(...): (line 2068)
    # Processing the call arguments (line 2068)
    # Getting the type of 'axis' (line 2068)
    axis_577113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 14), 'axis', False)
    # Processing the call keyword arguments (line 2068)
    # Getting the type of 'ddof' (line 2068)
    ddof_577114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 25), 'ddof', False)
    keyword_577115 = ddof_577114
    kwargs_577116 = {'ddof': keyword_577115}
    # Getting the type of 'a' (line 2068)
    a_577111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'a', False)
    # Obtaining the member 'var' of a type (line 2068)
    var_577112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2068, 8), a_577111, 'var')
    # Calling var(args, kwargs) (line 2068)
    var_call_result_577117 = invoke(stypy.reporting.localization.Localization(__file__, 2068, 8), var_577112, *[axis_577113], **kwargs_577116)
    
    # Assigning a type to the variable 'v' (line 2068)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2068, 4), 'v', var_call_result_577117)
    
    # Assigning a Call to a Name (line 2069):
    
    # Assigning a Call to a Name (line 2069):
    
    # Call to skew(...): (line 2069)
    # Processing the call arguments (line 2069)
    # Getting the type of 'a' (line 2069)
    a_577119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 14), 'a', False)
    # Getting the type of 'axis' (line 2069)
    axis_577120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 17), 'axis', False)
    # Processing the call keyword arguments (line 2069)
    # Getting the type of 'bias' (line 2069)
    bias_577121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 28), 'bias', False)
    keyword_577122 = bias_577121
    kwargs_577123 = {'bias': keyword_577122}
    # Getting the type of 'skew' (line 2069)
    skew_577118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 9), 'skew', False)
    # Calling skew(args, kwargs) (line 2069)
    skew_call_result_577124 = invoke(stypy.reporting.localization.Localization(__file__, 2069, 9), skew_577118, *[a_577119, axis_577120], **kwargs_577123)
    
    # Assigning a type to the variable 'sk' (line 2069)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2069, 4), 'sk', skew_call_result_577124)
    
    # Assigning a Call to a Name (line 2070):
    
    # Assigning a Call to a Name (line 2070):
    
    # Call to kurtosis(...): (line 2070)
    # Processing the call arguments (line 2070)
    # Getting the type of 'a' (line 2070)
    a_577126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 20), 'a', False)
    # Getting the type of 'axis' (line 2070)
    axis_577127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 23), 'axis', False)
    # Processing the call keyword arguments (line 2070)
    # Getting the type of 'bias' (line 2070)
    bias_577128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 34), 'bias', False)
    keyword_577129 = bias_577128
    kwargs_577130 = {'bias': keyword_577129}
    # Getting the type of 'kurtosis' (line 2070)
    kurtosis_577125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 11), 'kurtosis', False)
    # Calling kurtosis(args, kwargs) (line 2070)
    kurtosis_call_result_577131 = invoke(stypy.reporting.localization.Localization(__file__, 2070, 11), kurtosis_577125, *[a_577126, axis_577127], **kwargs_577130)
    
    # Assigning a type to the variable 'kurt' (line 2070)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2070, 4), 'kurt', kurtosis_call_result_577131)
    
    # Call to DescribeResult(...): (line 2072)
    # Processing the call arguments (line 2072)
    # Getting the type of 'n' (line 2072)
    n_577133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 26), 'n', False)
    # Getting the type of 'mm' (line 2072)
    mm_577134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 29), 'mm', False)
    # Getting the type of 'm' (line 2072)
    m_577135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 33), 'm', False)
    # Getting the type of 'v' (line 2072)
    v_577136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 36), 'v', False)
    # Getting the type of 'sk' (line 2072)
    sk_577137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 39), 'sk', False)
    # Getting the type of 'kurt' (line 2072)
    kurt_577138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 43), 'kurt', False)
    # Processing the call keyword arguments (line 2072)
    kwargs_577139 = {}
    # Getting the type of 'DescribeResult' (line 2072)
    DescribeResult_577132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 11), 'DescribeResult', False)
    # Calling DescribeResult(args, kwargs) (line 2072)
    DescribeResult_call_result_577140 = invoke(stypy.reporting.localization.Localization(__file__, 2072, 11), DescribeResult_577132, *[n_577133, mm_577134, m_577135, v_577136, sk_577137, kurt_577138], **kwargs_577139)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2072)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2072, 4), 'stypy_return_type', DescribeResult_call_result_577140)
    
    # ################# End of 'describe(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'describe' in the type store
    # Getting the type of 'stypy_return_type' (line 2009)
    stypy_return_type_577141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_577141)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'describe'
    return stypy_return_type_577141

# Assigning a type to the variable 'describe' (line 2009)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2009, 0), 'describe', describe)

@norecursion
def stde_median(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2075)
    None_577142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 27), 'None')
    defaults = [None_577142]
    # Create a new context for function 'stde_median'
    module_type_store = module_type_store.open_function_context('stde_median', 2075, 0, False)
    
    # Passed parameters checking function
    stde_median.stypy_localization = localization
    stde_median.stypy_type_of_self = None
    stde_median.stypy_type_store = module_type_store
    stde_median.stypy_function_name = 'stde_median'
    stde_median.stypy_param_names_list = ['data', 'axis']
    stde_median.stypy_varargs_param_name = None
    stde_median.stypy_kwargs_param_name = None
    stde_median.stypy_call_defaults = defaults
    stde_median.stypy_call_varargs = varargs
    stde_median.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'stde_median', ['data', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'stde_median', localization, ['data', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'stde_median(...)' code ##################

    str_577143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, (-1)), 'str', 'Returns the McKean-Schrader estimate of the standard error of the sample\n    median along the given axis. masked values are discarded.\n\n    Parameters\n    ----------\n    data : ndarray\n        Data to trim.\n    axis : {None,int}, optional\n        Axis along which to perform the trimming.\n        If None, the input array is first flattened.\n\n    ')

    @norecursion
    def _stdemed_1D(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stdemed_1D'
        module_type_store = module_type_store.open_function_context('_stdemed_1D', 2088, 4, False)
        
        # Passed parameters checking function
        _stdemed_1D.stypy_localization = localization
        _stdemed_1D.stypy_type_of_self = None
        _stdemed_1D.stypy_type_store = module_type_store
        _stdemed_1D.stypy_function_name = '_stdemed_1D'
        _stdemed_1D.stypy_param_names_list = ['data']
        _stdemed_1D.stypy_varargs_param_name = None
        _stdemed_1D.stypy_kwargs_param_name = None
        _stdemed_1D.stypy_call_defaults = defaults
        _stdemed_1D.stypy_call_varargs = varargs
        _stdemed_1D.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stdemed_1D', ['data'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_stdemed_1D', localization, ['data'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_stdemed_1D(...)' code ##################

        
        # Assigning a Call to a Name (line 2089):
        
        # Assigning a Call to a Name (line 2089):
        
        # Call to sort(...): (line 2089)
        # Processing the call arguments (line 2089)
        
        # Call to compressed(...): (line 2089)
        # Processing the call keyword arguments (line 2089)
        kwargs_577148 = {}
        # Getting the type of 'data' (line 2089)
        data_577146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 23), 'data', False)
        # Obtaining the member 'compressed' of a type (line 2089)
        compressed_577147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 23), data_577146, 'compressed')
        # Calling compressed(args, kwargs) (line 2089)
        compressed_call_result_577149 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 23), compressed_577147, *[], **kwargs_577148)
        
        # Processing the call keyword arguments (line 2089)
        kwargs_577150 = {}
        # Getting the type of 'np' (line 2089)
        np_577144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 15), 'np', False)
        # Obtaining the member 'sort' of a type (line 2089)
        sort_577145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 15), np_577144, 'sort')
        # Calling sort(args, kwargs) (line 2089)
        sort_call_result_577151 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 15), sort_577145, *[compressed_call_result_577149], **kwargs_577150)
        
        # Assigning a type to the variable 'data' (line 2089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2089, 8), 'data', sort_call_result_577151)
        
        # Assigning a Call to a Name (line 2090):
        
        # Assigning a Call to a Name (line 2090):
        
        # Call to len(...): (line 2090)
        # Processing the call arguments (line 2090)
        # Getting the type of 'data' (line 2090)
        data_577153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 16), 'data', False)
        # Processing the call keyword arguments (line 2090)
        kwargs_577154 = {}
        # Getting the type of 'len' (line 2090)
        len_577152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 12), 'len', False)
        # Calling len(args, kwargs) (line 2090)
        len_call_result_577155 = invoke(stypy.reporting.localization.Localization(__file__, 2090, 12), len_577152, *[data_577153], **kwargs_577154)
        
        # Assigning a type to the variable 'n' (line 2090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2090, 8), 'n', len_call_result_577155)
        
        # Assigning a Num to a Name (line 2091):
        
        # Assigning a Num to a Name (line 2091):
        float_577156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2091, 12), 'float')
        # Assigning a type to the variable 'z' (line 2091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2091, 8), 'z', float_577156)
        
        # Assigning a Call to a Name (line 2092):
        
        # Assigning a Call to a Name (line 2092):
        
        # Call to int(...): (line 2092)
        # Processing the call arguments (line 2092)
        
        # Call to round(...): (line 2092)
        # Processing the call arguments (line 2092)
        # Getting the type of 'n' (line 2092)
        n_577160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 26), 'n', False)
        int_577161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2092, 28), 'int')
        # Applying the binary operator '+' (line 2092)
        result_add_577162 = python_operator(stypy.reporting.localization.Localization(__file__, 2092, 26), '+', n_577160, int_577161)
        
        float_577163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2092, 31), 'float')
        # Applying the binary operator 'div' (line 2092)
        result_div_577164 = python_operator(stypy.reporting.localization.Localization(__file__, 2092, 25), 'div', result_add_577162, float_577163)
        
        # Getting the type of 'z' (line 2092)
        z_577165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 36), 'z', False)
        
        # Call to sqrt(...): (line 2092)
        # Processing the call arguments (line 2092)
        # Getting the type of 'n' (line 2092)
        n_577168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 48), 'n', False)
        float_577169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2092, 50), 'float')
        # Applying the binary operator 'div' (line 2092)
        result_div_577170 = python_operator(stypy.reporting.localization.Localization(__file__, 2092, 48), 'div', n_577168, float_577169)
        
        # Processing the call keyword arguments (line 2092)
        kwargs_577171 = {}
        # Getting the type of 'np' (line 2092)
        np_577166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 40), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 2092)
        sqrt_577167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2092, 40), np_577166, 'sqrt')
        # Calling sqrt(args, kwargs) (line 2092)
        sqrt_call_result_577172 = invoke(stypy.reporting.localization.Localization(__file__, 2092, 40), sqrt_577167, *[result_div_577170], **kwargs_577171)
        
        # Applying the binary operator '*' (line 2092)
        result_mul_577173 = python_operator(stypy.reporting.localization.Localization(__file__, 2092, 36), '*', z_577165, sqrt_call_result_577172)
        
        # Applying the binary operator '-' (line 2092)
        result_sub_577174 = python_operator(stypy.reporting.localization.Localization(__file__, 2092, 25), '-', result_div_577164, result_mul_577173)
        
        int_577175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2092, 54), 'int')
        # Processing the call keyword arguments (line 2092)
        kwargs_577176 = {}
        # Getting the type of 'np' (line 2092)
        np_577158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 16), 'np', False)
        # Obtaining the member 'round' of a type (line 2092)
        round_577159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2092, 16), np_577158, 'round')
        # Calling round(args, kwargs) (line 2092)
        round_call_result_577177 = invoke(stypy.reporting.localization.Localization(__file__, 2092, 16), round_577159, *[result_sub_577174, int_577175], **kwargs_577176)
        
        # Processing the call keyword arguments (line 2092)
        kwargs_577178 = {}
        # Getting the type of 'int' (line 2092)
        int_577157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 12), 'int', False)
        # Calling int(args, kwargs) (line 2092)
        int_call_result_577179 = invoke(stypy.reporting.localization.Localization(__file__, 2092, 12), int_577157, *[round_call_result_577177], **kwargs_577178)
        
        # Assigning a type to the variable 'k' (line 2092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2092, 8), 'k', int_call_result_577179)
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 2093)
        n_577180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 22), 'n')
        # Getting the type of 'k' (line 2093)
        k_577181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 24), 'k')
        # Applying the binary operator '-' (line 2093)
        result_sub_577182 = python_operator(stypy.reporting.localization.Localization(__file__, 2093, 22), '-', n_577180, k_577181)
        
        # Getting the type of 'data' (line 2093)
        data_577183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 17), 'data')
        # Obtaining the member '__getitem__' of a type (line 2093)
        getitem___577184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2093, 17), data_577183, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2093)
        subscript_call_result_577185 = invoke(stypy.reporting.localization.Localization(__file__, 2093, 17), getitem___577184, result_sub_577182)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 2093)
        k_577186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 34), 'k')
        int_577187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2093, 36), 'int')
        # Applying the binary operator '-' (line 2093)
        result_sub_577188 = python_operator(stypy.reporting.localization.Localization(__file__, 2093, 34), '-', k_577186, int_577187)
        
        # Getting the type of 'data' (line 2093)
        data_577189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 29), 'data')
        # Obtaining the member '__getitem__' of a type (line 2093)
        getitem___577190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2093, 29), data_577189, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2093)
        subscript_call_result_577191 = invoke(stypy.reporting.localization.Localization(__file__, 2093, 29), getitem___577190, result_sub_577188)
        
        # Applying the binary operator '-' (line 2093)
        result_sub_577192 = python_operator(stypy.reporting.localization.Localization(__file__, 2093, 17), '-', subscript_call_result_577185, subscript_call_result_577191)
        
        float_577193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2093, 41), 'float')
        # Getting the type of 'z' (line 2093)
        z_577194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 44), 'z')
        # Applying the binary operator '*' (line 2093)
        result_mul_577195 = python_operator(stypy.reporting.localization.Localization(__file__, 2093, 41), '*', float_577193, z_577194)
        
        # Applying the binary operator 'div' (line 2093)
        result_div_577196 = python_operator(stypy.reporting.localization.Localization(__file__, 2093, 16), 'div', result_sub_577192, result_mul_577195)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2093, 8), 'stypy_return_type', result_div_577196)
        
        # ################# End of '_stdemed_1D(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_stdemed_1D' in the type store
        # Getting the type of 'stypy_return_type' (line 2088)
        stypy_return_type_577197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_577197)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stdemed_1D'
        return stypy_return_type_577197

    # Assigning a type to the variable '_stdemed_1D' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), '_stdemed_1D', _stdemed_1D)
    
    # Assigning a Call to a Name (line 2095):
    
    # Assigning a Call to a Name (line 2095):
    
    # Call to array(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'data' (line 2095)
    data_577200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 20), 'data', False)
    # Processing the call keyword arguments (line 2095)
    # Getting the type of 'False' (line 2095)
    False_577201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 31), 'False', False)
    keyword_577202 = False_577201
    # Getting the type of 'True' (line 2095)
    True_577203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 44), 'True', False)
    keyword_577204 = True_577203
    kwargs_577205 = {'subok': keyword_577204, 'copy': keyword_577202}
    # Getting the type of 'ma' (line 2095)
    ma_577198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 11), 'ma', False)
    # Obtaining the member 'array' of a type (line 2095)
    array_577199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 11), ma_577198, 'array')
    # Calling array(args, kwargs) (line 2095)
    array_call_result_577206 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 11), array_577199, *[data_577200], **kwargs_577205)
    
    # Assigning a type to the variable 'data' (line 2095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2095, 4), 'data', array_call_result_577206)
    
    # Type idiom detected: calculating its left and rigth part (line 2096)
    # Getting the type of 'axis' (line 2096)
    axis_577207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 8), 'axis')
    # Getting the type of 'None' (line 2096)
    None_577208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 16), 'None')
    
    (may_be_577209, more_types_in_union_577210) = may_be_none(axis_577207, None_577208)

    if may_be_577209:

        if more_types_in_union_577210:
            # Runtime conditional SSA (line 2096)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to _stdemed_1D(...): (line 2097)
        # Processing the call arguments (line 2097)
        # Getting the type of 'data' (line 2097)
        data_577212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 27), 'data', False)
        # Processing the call keyword arguments (line 2097)
        kwargs_577213 = {}
        # Getting the type of '_stdemed_1D' (line 2097)
        _stdemed_1D_577211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 15), '_stdemed_1D', False)
        # Calling _stdemed_1D(args, kwargs) (line 2097)
        _stdemed_1D_call_result_577214 = invoke(stypy.reporting.localization.Localization(__file__, 2097, 15), _stdemed_1D_577211, *[data_577212], **kwargs_577213)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2097, 8), 'stypy_return_type', _stdemed_1D_call_result_577214)

        if more_types_in_union_577210:
            # Runtime conditional SSA for else branch (line 2096)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_577209) or more_types_in_union_577210):
        
        
        # Getting the type of 'data' (line 2099)
        data_577215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 11), 'data')
        # Obtaining the member 'ndim' of a type (line 2099)
        ndim_577216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2099, 11), data_577215, 'ndim')
        int_577217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2099, 23), 'int')
        # Applying the binary operator '>' (line 2099)
        result_gt_577218 = python_operator(stypy.reporting.localization.Localization(__file__, 2099, 11), '>', ndim_577216, int_577217)
        
        # Testing the type of an if condition (line 2099)
        if_condition_577219 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2099, 8), result_gt_577218)
        # Assigning a type to the variable 'if_condition_577219' (line 2099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2099, 8), 'if_condition_577219', if_condition_577219)
        # SSA begins for if statement (line 2099)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2100)
        # Processing the call arguments (line 2100)
        str_577221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 29), 'str', "Array 'data' must be at most two dimensional, but got data.ndim = %d")
        # Getting the type of 'data' (line 2101)
        data_577222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 56), 'data', False)
        # Obtaining the member 'ndim' of a type (line 2101)
        ndim_577223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2101, 56), data_577222, 'ndim')
        # Applying the binary operator '%' (line 2100)
        result_mod_577224 = python_operator(stypy.reporting.localization.Localization(__file__, 2100, 29), '%', str_577221, ndim_577223)
        
        # Processing the call keyword arguments (line 2100)
        kwargs_577225 = {}
        # Getting the type of 'ValueError' (line 2100)
        ValueError_577220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2100)
        ValueError_call_result_577226 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 18), ValueError_577220, *[result_mod_577224], **kwargs_577225)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2100, 12), ValueError_call_result_577226, 'raise parameter', BaseException)
        # SSA join for if statement (line 2099)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to apply_along_axis(...): (line 2102)
        # Processing the call arguments (line 2102)
        # Getting the type of '_stdemed_1D' (line 2102)
        _stdemed_1D_577229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 35), '_stdemed_1D', False)
        # Getting the type of 'axis' (line 2102)
        axis_577230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 48), 'axis', False)
        # Getting the type of 'data' (line 2102)
        data_577231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 54), 'data', False)
        # Processing the call keyword arguments (line 2102)
        kwargs_577232 = {}
        # Getting the type of 'ma' (line 2102)
        ma_577227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 15), 'ma', False)
        # Obtaining the member 'apply_along_axis' of a type (line 2102)
        apply_along_axis_577228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2102, 15), ma_577227, 'apply_along_axis')
        # Calling apply_along_axis(args, kwargs) (line 2102)
        apply_along_axis_call_result_577233 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 15), apply_along_axis_577228, *[_stdemed_1D_577229, axis_577230, data_577231], **kwargs_577232)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'stypy_return_type', apply_along_axis_call_result_577233)

        if (may_be_577209 and more_types_in_union_577210):
            # SSA join for if statement (line 2096)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'stde_median(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'stde_median' in the type store
    # Getting the type of 'stypy_return_type' (line 2075)
    stypy_return_type_577234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_577234)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'stde_median'
    return stypy_return_type_577234

# Assigning a type to the variable 'stde_median' (line 2075)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 0), 'stde_median', stde_median)

# Assigning a Call to a Name (line 2105):

# Assigning a Call to a Name (line 2105):

# Call to namedtuple(...): (line 2105)
# Processing the call arguments (line 2105)
str_577236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, 28), 'str', 'SkewtestResult')

# Obtaining an instance of the builtin type 'tuple' (line 2105)
tuple_577237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, 47), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2105)
# Adding element type (line 2105)
str_577238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, 47), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2105, 47), tuple_577237, str_577238)
# Adding element type (line 2105)
str_577239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, 60), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2105, 47), tuple_577237, str_577239)

# Processing the call keyword arguments (line 2105)
kwargs_577240 = {}
# Getting the type of 'namedtuple' (line 2105)
namedtuple_577235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 17), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 2105)
namedtuple_call_result_577241 = invoke(stypy.reporting.localization.Localization(__file__, 2105, 17), namedtuple_577235, *[str_577236, tuple_577237], **kwargs_577240)

# Assigning a type to the variable 'SkewtestResult' (line 2105)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2105, 0), 'SkewtestResult', namedtuple_call_result_577241)

@norecursion
def skewtest(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_577242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2108, 21), 'int')
    defaults = [int_577242]
    # Create a new context for function 'skewtest'
    module_type_store = module_type_store.open_function_context('skewtest', 2108, 0, False)
    
    # Passed parameters checking function
    skewtest.stypy_localization = localization
    skewtest.stypy_type_of_self = None
    skewtest.stypy_type_store = module_type_store
    skewtest.stypy_function_name = 'skewtest'
    skewtest.stypy_param_names_list = ['a', 'axis']
    skewtest.stypy_varargs_param_name = None
    skewtest.stypy_kwargs_param_name = None
    skewtest.stypy_call_defaults = defaults
    skewtest.stypy_call_varargs = varargs
    skewtest.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'skewtest', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'skewtest', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'skewtest(...)' code ##################

    str_577243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2131, (-1)), 'str', '\n    Tests whether the skew is different from the normal distribution.\n\n    Parameters\n    ----------\n    a : array\n        The data to be tested\n    axis : int or None, optional\n       Axis along which statistics are calculated. Default is 0.\n       If None, compute over the whole array `a`.\n\n    Returns\n    -------\n    statistic : float\n        The computed z-score for this test.\n    pvalue : float\n        a 2-sided p-value for the hypothesis test\n\n    Notes\n    -----\n    For more details about `skewtest`, see `stats.skewtest`.\n\n    ')
    
    # Assigning a Call to a Tuple (line 2132):
    
    # Assigning a Subscript to a Name (line 2132):
    
    # Obtaining the type of the subscript
    int_577244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2132, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2132)
    # Processing the call arguments (line 2132)
    # Getting the type of 'a' (line 2132)
    a_577246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 27), 'a', False)
    # Getting the type of 'axis' (line 2132)
    axis_577247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 30), 'axis', False)
    # Processing the call keyword arguments (line 2132)
    kwargs_577248 = {}
    # Getting the type of '_chk_asarray' (line 2132)
    _chk_asarray_577245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2132)
    _chk_asarray_call_result_577249 = invoke(stypy.reporting.localization.Localization(__file__, 2132, 14), _chk_asarray_577245, *[a_577246, axis_577247], **kwargs_577248)
    
    # Obtaining the member '__getitem__' of a type (line 2132)
    getitem___577250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2132, 4), _chk_asarray_call_result_577249, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2132)
    subscript_call_result_577251 = invoke(stypy.reporting.localization.Localization(__file__, 2132, 4), getitem___577250, int_577244)
    
    # Assigning a type to the variable 'tuple_var_assignment_571525' (line 2132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2132, 4), 'tuple_var_assignment_571525', subscript_call_result_577251)
    
    # Assigning a Subscript to a Name (line 2132):
    
    # Obtaining the type of the subscript
    int_577252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2132, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2132)
    # Processing the call arguments (line 2132)
    # Getting the type of 'a' (line 2132)
    a_577254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 27), 'a', False)
    # Getting the type of 'axis' (line 2132)
    axis_577255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 30), 'axis', False)
    # Processing the call keyword arguments (line 2132)
    kwargs_577256 = {}
    # Getting the type of '_chk_asarray' (line 2132)
    _chk_asarray_577253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2132)
    _chk_asarray_call_result_577257 = invoke(stypy.reporting.localization.Localization(__file__, 2132, 14), _chk_asarray_577253, *[a_577254, axis_577255], **kwargs_577256)
    
    # Obtaining the member '__getitem__' of a type (line 2132)
    getitem___577258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2132, 4), _chk_asarray_call_result_577257, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2132)
    subscript_call_result_577259 = invoke(stypy.reporting.localization.Localization(__file__, 2132, 4), getitem___577258, int_577252)
    
    # Assigning a type to the variable 'tuple_var_assignment_571526' (line 2132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2132, 4), 'tuple_var_assignment_571526', subscript_call_result_577259)
    
    # Assigning a Name to a Name (line 2132):
    # Getting the type of 'tuple_var_assignment_571525' (line 2132)
    tuple_var_assignment_571525_577260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 4), 'tuple_var_assignment_571525')
    # Assigning a type to the variable 'a' (line 2132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2132, 4), 'a', tuple_var_assignment_571525_577260)
    
    # Assigning a Name to a Name (line 2132):
    # Getting the type of 'tuple_var_assignment_571526' (line 2132)
    tuple_var_assignment_571526_577261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 4), 'tuple_var_assignment_571526')
    # Assigning a type to the variable 'axis' (line 2132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2132, 7), 'axis', tuple_var_assignment_571526_577261)
    
    # Type idiom detected: calculating its left and rigth part (line 2133)
    # Getting the type of 'axis' (line 2133)
    axis_577262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 7), 'axis')
    # Getting the type of 'None' (line 2133)
    None_577263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 15), 'None')
    
    (may_be_577264, more_types_in_union_577265) = may_be_none(axis_577262, None_577263)

    if may_be_577264:

        if more_types_in_union_577265:
            # Runtime conditional SSA (line 2133)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2134):
        
        # Assigning a Call to a Name (line 2134):
        
        # Call to ravel(...): (line 2134)
        # Processing the call keyword arguments (line 2134)
        kwargs_577268 = {}
        # Getting the type of 'a' (line 2134)
        a_577266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 12), 'a', False)
        # Obtaining the member 'ravel' of a type (line 2134)
        ravel_577267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 12), a_577266, 'ravel')
        # Calling ravel(args, kwargs) (line 2134)
        ravel_call_result_577269 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 12), ravel_577267, *[], **kwargs_577268)
        
        # Assigning a type to the variable 'a' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'a', ravel_call_result_577269)
        
        # Assigning a Num to a Name (line 2135):
        
        # Assigning a Num to a Name (line 2135):
        int_577270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2135, 15), 'int')
        # Assigning a type to the variable 'axis' (line 2135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2135, 8), 'axis', int_577270)

        if more_types_in_union_577265:
            # SSA join for if statement (line 2133)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2136):
    
    # Assigning a Call to a Name (line 2136):
    
    # Call to skew(...): (line 2136)
    # Processing the call arguments (line 2136)
    # Getting the type of 'a' (line 2136)
    a_577272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 14), 'a', False)
    # Getting the type of 'axis' (line 2136)
    axis_577273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 16), 'axis', False)
    # Processing the call keyword arguments (line 2136)
    kwargs_577274 = {}
    # Getting the type of 'skew' (line 2136)
    skew_577271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 9), 'skew', False)
    # Calling skew(args, kwargs) (line 2136)
    skew_call_result_577275 = invoke(stypy.reporting.localization.Localization(__file__, 2136, 9), skew_577271, *[a_577272, axis_577273], **kwargs_577274)
    
    # Assigning a type to the variable 'b2' (line 2136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2136, 4), 'b2', skew_call_result_577275)
    
    # Assigning a Call to a Name (line 2137):
    
    # Assigning a Call to a Name (line 2137):
    
    # Call to count(...): (line 2137)
    # Processing the call arguments (line 2137)
    # Getting the type of 'axis' (line 2137)
    axis_577278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 16), 'axis', False)
    # Processing the call keyword arguments (line 2137)
    kwargs_577279 = {}
    # Getting the type of 'a' (line 2137)
    a_577276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 8), 'a', False)
    # Obtaining the member 'count' of a type (line 2137)
    count_577277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2137, 8), a_577276, 'count')
    # Calling count(args, kwargs) (line 2137)
    count_call_result_577280 = invoke(stypy.reporting.localization.Localization(__file__, 2137, 8), count_577277, *[axis_577278], **kwargs_577279)
    
    # Assigning a type to the variable 'n' (line 2137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2137, 4), 'n', count_call_result_577280)
    
    
    
    # Call to min(...): (line 2138)
    # Processing the call arguments (line 2138)
    # Getting the type of 'n' (line 2138)
    n_577283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 14), 'n', False)
    # Processing the call keyword arguments (line 2138)
    kwargs_577284 = {}
    # Getting the type of 'np' (line 2138)
    np_577281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 7), 'np', False)
    # Obtaining the member 'min' of a type (line 2138)
    min_577282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 7), np_577281, 'min')
    # Calling min(args, kwargs) (line 2138)
    min_call_result_577285 = invoke(stypy.reporting.localization.Localization(__file__, 2138, 7), min_577282, *[n_577283], **kwargs_577284)
    
    int_577286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2138, 19), 'int')
    # Applying the binary operator '<' (line 2138)
    result_lt_577287 = python_operator(stypy.reporting.localization.Localization(__file__, 2138, 7), '<', min_call_result_577285, int_577286)
    
    # Testing the type of an if condition (line 2138)
    if_condition_577288 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2138, 4), result_lt_577287)
    # Assigning a type to the variable 'if_condition_577288' (line 2138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 4), 'if_condition_577288', if_condition_577288)
    # SSA begins for if statement (line 2138)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2139)
    # Processing the call arguments (line 2139)
    str_577290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2140, 12), 'str', 'skewtest is not valid with less than 8 samples; %i samples were given.')
    
    # Call to min(...): (line 2141)
    # Processing the call arguments (line 2141)
    # Getting the type of 'n' (line 2141)
    n_577293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 36), 'n', False)
    # Processing the call keyword arguments (line 2141)
    kwargs_577294 = {}
    # Getting the type of 'np' (line 2141)
    np_577291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 29), 'np', False)
    # Obtaining the member 'min' of a type (line 2141)
    min_577292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 29), np_577291, 'min')
    # Calling min(args, kwargs) (line 2141)
    min_call_result_577295 = invoke(stypy.reporting.localization.Localization(__file__, 2141, 29), min_577292, *[n_577293], **kwargs_577294)
    
    # Applying the binary operator '%' (line 2140)
    result_mod_577296 = python_operator(stypy.reporting.localization.Localization(__file__, 2140, 12), '%', str_577290, min_call_result_577295)
    
    # Processing the call keyword arguments (line 2139)
    kwargs_577297 = {}
    # Getting the type of 'ValueError' (line 2139)
    ValueError_577289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2139)
    ValueError_call_result_577298 = invoke(stypy.reporting.localization.Localization(__file__, 2139, 14), ValueError_577289, *[result_mod_577296], **kwargs_577297)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2139, 8), ValueError_call_result_577298, 'raise parameter', BaseException)
    # SSA join for if statement (line 2138)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2143):
    
    # Assigning a BinOp to a Name (line 2143):
    # Getting the type of 'b2' (line 2143)
    b2_577299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 8), 'b2')
    
    # Call to sqrt(...): (line 2143)
    # Processing the call arguments (line 2143)
    # Getting the type of 'n' (line 2143)
    n_577302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 23), 'n', False)
    int_577303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2143, 25), 'int')
    # Applying the binary operator '+' (line 2143)
    result_add_577304 = python_operator(stypy.reporting.localization.Localization(__file__, 2143, 23), '+', n_577302, int_577303)
    
    # Getting the type of 'n' (line 2143)
    n_577305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 29), 'n', False)
    int_577306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2143, 31), 'int')
    # Applying the binary operator '+' (line 2143)
    result_add_577307 = python_operator(stypy.reporting.localization.Localization(__file__, 2143, 29), '+', n_577305, int_577306)
    
    # Applying the binary operator '*' (line 2143)
    result_mul_577308 = python_operator(stypy.reporting.localization.Localization(__file__, 2143, 22), '*', result_add_577304, result_add_577307)
    
    float_577309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2143, 38), 'float')
    # Getting the type of 'n' (line 2143)
    n_577310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 43), 'n', False)
    int_577311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2143, 45), 'int')
    # Applying the binary operator '-' (line 2143)
    result_sub_577312 = python_operator(stypy.reporting.localization.Localization(__file__, 2143, 43), '-', n_577310, int_577311)
    
    # Applying the binary operator '*' (line 2143)
    result_mul_577313 = python_operator(stypy.reporting.localization.Localization(__file__, 2143, 38), '*', float_577309, result_sub_577312)
    
    # Applying the binary operator 'div' (line 2143)
    result_div_577314 = python_operator(stypy.reporting.localization.Localization(__file__, 2143, 21), 'div', result_mul_577308, result_mul_577313)
    
    # Processing the call keyword arguments (line 2143)
    kwargs_577315 = {}
    # Getting the type of 'ma' (line 2143)
    ma_577300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 13), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 2143)
    sqrt_577301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2143, 13), ma_577300, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2143)
    sqrt_call_result_577316 = invoke(stypy.reporting.localization.Localization(__file__, 2143, 13), sqrt_577301, *[result_div_577314], **kwargs_577315)
    
    # Applying the binary operator '*' (line 2143)
    result_mul_577317 = python_operator(stypy.reporting.localization.Localization(__file__, 2143, 8), '*', b2_577299, sqrt_call_result_577316)
    
    # Assigning a type to the variable 'y' (line 2143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 4), 'y', result_mul_577317)
    
    # Assigning a BinOp to a Name (line 2144):
    
    # Assigning a BinOp to a Name (line 2144):
    float_577318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 13), 'float')
    # Getting the type of 'n' (line 2144)
    n_577319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 18), 'n')
    # Getting the type of 'n' (line 2144)
    n_577320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 20), 'n')
    # Applying the binary operator '*' (line 2144)
    result_mul_577321 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 18), '*', n_577319, n_577320)
    
    int_577322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 22), 'int')
    # Getting the type of 'n' (line 2144)
    n_577323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 25), 'n')
    # Applying the binary operator '*' (line 2144)
    result_mul_577324 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 22), '*', int_577322, n_577323)
    
    # Applying the binary operator '+' (line 2144)
    result_add_577325 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 18), '+', result_mul_577321, result_mul_577324)
    
    int_577326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 27), 'int')
    # Applying the binary operator '-' (line 2144)
    result_sub_577327 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 26), '-', result_add_577325, int_577326)
    
    # Applying the binary operator '*' (line 2144)
    result_mul_577328 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 13), '*', float_577318, result_sub_577327)
    
    # Getting the type of 'n' (line 2144)
    n_577329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 32), 'n')
    int_577330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 34), 'int')
    # Applying the binary operator '+' (line 2144)
    result_add_577331 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 32), '+', n_577329, int_577330)
    
    # Applying the binary operator '*' (line 2144)
    result_mul_577332 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 30), '*', result_mul_577328, result_add_577331)
    
    # Getting the type of 'n' (line 2144)
    n_577333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 38), 'n')
    int_577334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 40), 'int')
    # Applying the binary operator '+' (line 2144)
    result_add_577335 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 38), '+', n_577333, int_577334)
    
    # Applying the binary operator '*' (line 2144)
    result_mul_577336 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 36), '*', result_mul_577332, result_add_577335)
    
    # Getting the type of 'n' (line 2144)
    n_577337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 48), 'n')
    float_577338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 50), 'float')
    # Applying the binary operator '-' (line 2144)
    result_sub_577339 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 48), '-', n_577337, float_577338)
    
    # Getting the type of 'n' (line 2144)
    n_577340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 56), 'n')
    int_577341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 58), 'int')
    # Applying the binary operator '+' (line 2144)
    result_add_577342 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 56), '+', n_577340, int_577341)
    
    # Applying the binary operator '*' (line 2144)
    result_mul_577343 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 47), '*', result_sub_577339, result_add_577342)
    
    # Getting the type of 'n' (line 2144)
    n_577344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 62), 'n')
    int_577345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 64), 'int')
    # Applying the binary operator '+' (line 2144)
    result_add_577346 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 62), '+', n_577344, int_577345)
    
    # Applying the binary operator '*' (line 2144)
    result_mul_577347 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 60), '*', result_mul_577343, result_add_577346)
    
    # Getting the type of 'n' (line 2144)
    n_577348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 68), 'n')
    int_577349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 70), 'int')
    # Applying the binary operator '+' (line 2144)
    result_add_577350 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 68), '+', n_577348, int_577349)
    
    # Applying the binary operator '*' (line 2144)
    result_mul_577351 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 66), '*', result_mul_577347, result_add_577350)
    
    # Applying the binary operator 'div' (line 2144)
    result_div_577352 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 12), 'div', result_mul_577336, result_mul_577351)
    
    # Assigning a type to the variable 'beta2' (line 2144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2144, 4), 'beta2', result_div_577352)
    
    # Assigning a BinOp to a Name (line 2145):
    
    # Assigning a BinOp to a Name (line 2145):
    int_577353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2145, 9), 'int')
    
    # Call to sqrt(...): (line 2145)
    # Processing the call arguments (line 2145)
    int_577356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2145, 22), 'int')
    # Getting the type of 'beta2' (line 2145)
    beta2_577357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2145, 25), 'beta2', False)
    int_577358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2145, 31), 'int')
    # Applying the binary operator '-' (line 2145)
    result_sub_577359 = python_operator(stypy.reporting.localization.Localization(__file__, 2145, 25), '-', beta2_577357, int_577358)
    
    # Applying the binary operator '*' (line 2145)
    result_mul_577360 = python_operator(stypy.reporting.localization.Localization(__file__, 2145, 22), '*', int_577356, result_sub_577359)
    
    # Processing the call keyword arguments (line 2145)
    kwargs_577361 = {}
    # Getting the type of 'ma' (line 2145)
    ma_577354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2145, 14), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 2145)
    sqrt_577355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2145, 14), ma_577354, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2145)
    sqrt_call_result_577362 = invoke(stypy.reporting.localization.Localization(__file__, 2145, 14), sqrt_577355, *[result_mul_577360], **kwargs_577361)
    
    # Applying the binary operator '+' (line 2145)
    result_add_577363 = python_operator(stypy.reporting.localization.Localization(__file__, 2145, 9), '+', int_577353, sqrt_call_result_577362)
    
    # Assigning a type to the variable 'W2' (line 2145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2145, 4), 'W2', result_add_577363)
    
    # Assigning a BinOp to a Name (line 2146):
    
    # Assigning a BinOp to a Name (line 2146):
    int_577364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 12), 'int')
    
    # Call to sqrt(...): (line 2146)
    # Processing the call arguments (line 2146)
    float_577367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 22), 'float')
    
    # Call to log(...): (line 2146)
    # Processing the call arguments (line 2146)
    # Getting the type of 'W2' (line 2146)
    W2_577370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 33), 'W2', False)
    # Processing the call keyword arguments (line 2146)
    kwargs_577371 = {}
    # Getting the type of 'ma' (line 2146)
    ma_577368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 26), 'ma', False)
    # Obtaining the member 'log' of a type (line 2146)
    log_577369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2146, 26), ma_577368, 'log')
    # Calling log(args, kwargs) (line 2146)
    log_call_result_577372 = invoke(stypy.reporting.localization.Localization(__file__, 2146, 26), log_577369, *[W2_577370], **kwargs_577371)
    
    # Applying the binary operator '*' (line 2146)
    result_mul_577373 = python_operator(stypy.reporting.localization.Localization(__file__, 2146, 22), '*', float_577367, log_call_result_577372)
    
    # Processing the call keyword arguments (line 2146)
    kwargs_577374 = {}
    # Getting the type of 'ma' (line 2146)
    ma_577365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 14), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 2146)
    sqrt_577366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2146, 14), ma_577365, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2146)
    sqrt_call_result_577375 = invoke(stypy.reporting.localization.Localization(__file__, 2146, 14), sqrt_577366, *[result_mul_577373], **kwargs_577374)
    
    # Applying the binary operator 'div' (line 2146)
    result_div_577376 = python_operator(stypy.reporting.localization.Localization(__file__, 2146, 12), 'div', int_577364, sqrt_call_result_577375)
    
    # Assigning a type to the variable 'delta' (line 2146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2146, 4), 'delta', result_div_577376)
    
    # Assigning a Call to a Name (line 2147):
    
    # Assigning a Call to a Name (line 2147):
    
    # Call to sqrt(...): (line 2147)
    # Processing the call arguments (line 2147)
    float_577379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2147, 20), 'float')
    # Getting the type of 'W2' (line 2147)
    W2_577380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 25), 'W2', False)
    int_577381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2147, 28), 'int')
    # Applying the binary operator '-' (line 2147)
    result_sub_577382 = python_operator(stypy.reporting.localization.Localization(__file__, 2147, 25), '-', W2_577380, int_577381)
    
    # Applying the binary operator 'div' (line 2147)
    result_div_577383 = python_operator(stypy.reporting.localization.Localization(__file__, 2147, 20), 'div', float_577379, result_sub_577382)
    
    # Processing the call keyword arguments (line 2147)
    kwargs_577384 = {}
    # Getting the type of 'ma' (line 2147)
    ma_577377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 12), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 2147)
    sqrt_577378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2147, 12), ma_577377, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2147)
    sqrt_call_result_577385 = invoke(stypy.reporting.localization.Localization(__file__, 2147, 12), sqrt_577378, *[result_div_577383], **kwargs_577384)
    
    # Assigning a type to the variable 'alpha' (line 2147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2147, 4), 'alpha', sqrt_call_result_577385)
    
    # Assigning a Call to a Name (line 2148):
    
    # Assigning a Call to a Name (line 2148):
    
    # Call to where(...): (line 2148)
    # Processing the call arguments (line 2148)
    
    # Getting the type of 'y' (line 2148)
    y_577388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 17), 'y', False)
    int_577389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2148, 22), 'int')
    # Applying the binary operator '==' (line 2148)
    result_eq_577390 = python_operator(stypy.reporting.localization.Localization(__file__, 2148, 17), '==', y_577388, int_577389)
    
    int_577391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2148, 25), 'int')
    # Getting the type of 'y' (line 2148)
    y_577392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 28), 'y', False)
    # Processing the call keyword arguments (line 2148)
    kwargs_577393 = {}
    # Getting the type of 'ma' (line 2148)
    ma_577386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 8), 'ma', False)
    # Obtaining the member 'where' of a type (line 2148)
    where_577387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2148, 8), ma_577386, 'where')
    # Calling where(args, kwargs) (line 2148)
    where_call_result_577394 = invoke(stypy.reporting.localization.Localization(__file__, 2148, 8), where_577387, *[result_eq_577390, int_577391, y_577392], **kwargs_577393)
    
    # Assigning a type to the variable 'y' (line 2148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2148, 4), 'y', where_call_result_577394)
    
    # Assigning a BinOp to a Name (line 2149):
    
    # Assigning a BinOp to a Name (line 2149):
    # Getting the type of 'delta' (line 2149)
    delta_577395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 8), 'delta')
    
    # Call to log(...): (line 2149)
    # Processing the call arguments (line 2149)
    # Getting the type of 'y' (line 2149)
    y_577398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 21), 'y', False)
    # Getting the type of 'alpha' (line 2149)
    alpha_577399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 23), 'alpha', False)
    # Applying the binary operator 'div' (line 2149)
    result_div_577400 = python_operator(stypy.reporting.localization.Localization(__file__, 2149, 21), 'div', y_577398, alpha_577399)
    
    
    # Call to sqrt(...): (line 2149)
    # Processing the call arguments (line 2149)
    # Getting the type of 'y' (line 2149)
    y_577403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 40), 'y', False)
    # Getting the type of 'alpha' (line 2149)
    alpha_577404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 42), 'alpha', False)
    # Applying the binary operator 'div' (line 2149)
    result_div_577405 = python_operator(stypy.reporting.localization.Localization(__file__, 2149, 40), 'div', y_577403, alpha_577404)
    
    int_577406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2149, 50), 'int')
    # Applying the binary operator '**' (line 2149)
    result_pow_577407 = python_operator(stypy.reporting.localization.Localization(__file__, 2149, 39), '**', result_div_577405, int_577406)
    
    int_577408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2149, 52), 'int')
    # Applying the binary operator '+' (line 2149)
    result_add_577409 = python_operator(stypy.reporting.localization.Localization(__file__, 2149, 39), '+', result_pow_577407, int_577408)
    
    # Processing the call keyword arguments (line 2149)
    kwargs_577410 = {}
    # Getting the type of 'ma' (line 2149)
    ma_577401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 31), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 2149)
    sqrt_577402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2149, 31), ma_577401, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2149)
    sqrt_call_result_577411 = invoke(stypy.reporting.localization.Localization(__file__, 2149, 31), sqrt_577402, *[result_add_577409], **kwargs_577410)
    
    # Applying the binary operator '+' (line 2149)
    result_add_577412 = python_operator(stypy.reporting.localization.Localization(__file__, 2149, 21), '+', result_div_577400, sqrt_call_result_577411)
    
    # Processing the call keyword arguments (line 2149)
    kwargs_577413 = {}
    # Getting the type of 'ma' (line 2149)
    ma_577396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 14), 'ma', False)
    # Obtaining the member 'log' of a type (line 2149)
    log_577397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2149, 14), ma_577396, 'log')
    # Calling log(args, kwargs) (line 2149)
    log_call_result_577414 = invoke(stypy.reporting.localization.Localization(__file__, 2149, 14), log_577397, *[result_add_577412], **kwargs_577413)
    
    # Applying the binary operator '*' (line 2149)
    result_mul_577415 = python_operator(stypy.reporting.localization.Localization(__file__, 2149, 8), '*', delta_577395, log_call_result_577414)
    
    # Assigning a type to the variable 'Z' (line 2149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2149, 4), 'Z', result_mul_577415)
    
    # Call to SkewtestResult(...): (line 2151)
    # Processing the call arguments (line 2151)
    # Getting the type of 'Z' (line 2151)
    Z_577417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 26), 'Z', False)
    int_577418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2151, 29), 'int')
    
    # Call to sf(...): (line 2151)
    # Processing the call arguments (line 2151)
    
    # Call to abs(...): (line 2151)
    # Processing the call arguments (line 2151)
    # Getting the type of 'Z' (line 2151)
    Z_577424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 62), 'Z', False)
    # Processing the call keyword arguments (line 2151)
    kwargs_577425 = {}
    # Getting the type of 'np' (line 2151)
    np_577422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 55), 'np', False)
    # Obtaining the member 'abs' of a type (line 2151)
    abs_577423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2151, 55), np_577422, 'abs')
    # Calling abs(args, kwargs) (line 2151)
    abs_call_result_577426 = invoke(stypy.reporting.localization.Localization(__file__, 2151, 55), abs_577423, *[Z_577424], **kwargs_577425)
    
    # Processing the call keyword arguments (line 2151)
    kwargs_577427 = {}
    # Getting the type of 'distributions' (line 2151)
    distributions_577419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 33), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 2151)
    norm_577420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2151, 33), distributions_577419, 'norm')
    # Obtaining the member 'sf' of a type (line 2151)
    sf_577421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2151, 33), norm_577420, 'sf')
    # Calling sf(args, kwargs) (line 2151)
    sf_call_result_577428 = invoke(stypy.reporting.localization.Localization(__file__, 2151, 33), sf_577421, *[abs_call_result_577426], **kwargs_577427)
    
    # Applying the binary operator '*' (line 2151)
    result_mul_577429 = python_operator(stypy.reporting.localization.Localization(__file__, 2151, 29), '*', int_577418, sf_call_result_577428)
    
    # Processing the call keyword arguments (line 2151)
    kwargs_577430 = {}
    # Getting the type of 'SkewtestResult' (line 2151)
    SkewtestResult_577416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 11), 'SkewtestResult', False)
    # Calling SkewtestResult(args, kwargs) (line 2151)
    SkewtestResult_call_result_577431 = invoke(stypy.reporting.localization.Localization(__file__, 2151, 11), SkewtestResult_577416, *[Z_577417, result_mul_577429], **kwargs_577430)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2151, 4), 'stypy_return_type', SkewtestResult_call_result_577431)
    
    # ################# End of 'skewtest(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'skewtest' in the type store
    # Getting the type of 'stypy_return_type' (line 2108)
    stypy_return_type_577432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_577432)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'skewtest'
    return stypy_return_type_577432

# Assigning a type to the variable 'skewtest' (line 2108)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2108, 0), 'skewtest', skewtest)

# Assigning a Call to a Name (line 2154):

# Assigning a Call to a Name (line 2154):

# Call to namedtuple(...): (line 2154)
# Processing the call arguments (line 2154)
str_577434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 32), 'str', 'KurtosistestResult')

# Obtaining an instance of the builtin type 'tuple' (line 2154)
tuple_577435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 55), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2154)
# Adding element type (line 2154)
str_577436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 55), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2154, 55), tuple_577435, str_577436)
# Adding element type (line 2154)
str_577437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2155, 55), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2154, 55), tuple_577435, str_577437)

# Processing the call keyword arguments (line 2154)
kwargs_577438 = {}
# Getting the type of 'namedtuple' (line 2154)
namedtuple_577433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 21), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 2154)
namedtuple_call_result_577439 = invoke(stypy.reporting.localization.Localization(__file__, 2154, 21), namedtuple_577433, *[str_577434, tuple_577435], **kwargs_577438)

# Assigning a type to the variable 'KurtosistestResult' (line 2154)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2154, 0), 'KurtosistestResult', namedtuple_call_result_577439)

@norecursion
def kurtosistest(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_577440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2158, 25), 'int')
    defaults = [int_577440]
    # Create a new context for function 'kurtosistest'
    module_type_store = module_type_store.open_function_context('kurtosistest', 2158, 0, False)
    
    # Passed parameters checking function
    kurtosistest.stypy_localization = localization
    kurtosistest.stypy_type_of_self = None
    kurtosistest.stypy_type_store = module_type_store
    kurtosistest.stypy_function_name = 'kurtosistest'
    kurtosistest.stypy_param_names_list = ['a', 'axis']
    kurtosistest.stypy_varargs_param_name = None
    kurtosistest.stypy_kwargs_param_name = None
    kurtosistest.stypy_call_defaults = defaults
    kurtosistest.stypy_call_varargs = varargs
    kurtosistest.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kurtosistest', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kurtosistest', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kurtosistest(...)' code ##################

    str_577441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2181, (-1)), 'str', '\n    Tests whether a dataset has normal kurtosis\n\n    Parameters\n    ----------\n    a : array\n        array of the sample data\n    axis : int or None, optional\n       Axis along which to compute test. Default is 0. If None,\n       compute over the whole array `a`.\n\n    Returns\n    -------\n    statistic : float\n        The computed z-score for this test.\n    pvalue : float\n        The 2-sided p-value for the hypothesis test\n\n    Notes\n    -----\n    For more details about `kurtosistest`, see `stats.kurtosistest`.\n\n    ')
    
    # Assigning a Call to a Tuple (line 2182):
    
    # Assigning a Subscript to a Name (line 2182):
    
    # Obtaining the type of the subscript
    int_577442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2182)
    # Processing the call arguments (line 2182)
    # Getting the type of 'a' (line 2182)
    a_577444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 27), 'a', False)
    # Getting the type of 'axis' (line 2182)
    axis_577445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 30), 'axis', False)
    # Processing the call keyword arguments (line 2182)
    kwargs_577446 = {}
    # Getting the type of '_chk_asarray' (line 2182)
    _chk_asarray_577443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2182)
    _chk_asarray_call_result_577447 = invoke(stypy.reporting.localization.Localization(__file__, 2182, 14), _chk_asarray_577443, *[a_577444, axis_577445], **kwargs_577446)
    
    # Obtaining the member '__getitem__' of a type (line 2182)
    getitem___577448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 4), _chk_asarray_call_result_577447, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2182)
    subscript_call_result_577449 = invoke(stypy.reporting.localization.Localization(__file__, 2182, 4), getitem___577448, int_577442)
    
    # Assigning a type to the variable 'tuple_var_assignment_571527' (line 2182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 4), 'tuple_var_assignment_571527', subscript_call_result_577449)
    
    # Assigning a Subscript to a Name (line 2182):
    
    # Obtaining the type of the subscript
    int_577450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2182)
    # Processing the call arguments (line 2182)
    # Getting the type of 'a' (line 2182)
    a_577452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 27), 'a', False)
    # Getting the type of 'axis' (line 2182)
    axis_577453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 30), 'axis', False)
    # Processing the call keyword arguments (line 2182)
    kwargs_577454 = {}
    # Getting the type of '_chk_asarray' (line 2182)
    _chk_asarray_577451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2182)
    _chk_asarray_call_result_577455 = invoke(stypy.reporting.localization.Localization(__file__, 2182, 14), _chk_asarray_577451, *[a_577452, axis_577453], **kwargs_577454)
    
    # Obtaining the member '__getitem__' of a type (line 2182)
    getitem___577456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 4), _chk_asarray_call_result_577455, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2182)
    subscript_call_result_577457 = invoke(stypy.reporting.localization.Localization(__file__, 2182, 4), getitem___577456, int_577450)
    
    # Assigning a type to the variable 'tuple_var_assignment_571528' (line 2182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 4), 'tuple_var_assignment_571528', subscript_call_result_577457)
    
    # Assigning a Name to a Name (line 2182):
    # Getting the type of 'tuple_var_assignment_571527' (line 2182)
    tuple_var_assignment_571527_577458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 4), 'tuple_var_assignment_571527')
    # Assigning a type to the variable 'a' (line 2182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 4), 'a', tuple_var_assignment_571527_577458)
    
    # Assigning a Name to a Name (line 2182):
    # Getting the type of 'tuple_var_assignment_571528' (line 2182)
    tuple_var_assignment_571528_577459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 4), 'tuple_var_assignment_571528')
    # Assigning a type to the variable 'axis' (line 2182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 7), 'axis', tuple_var_assignment_571528_577459)
    
    # Assigning a Call to a Name (line 2183):
    
    # Assigning a Call to a Name (line 2183):
    
    # Call to count(...): (line 2183)
    # Processing the call keyword arguments (line 2183)
    # Getting the type of 'axis' (line 2183)
    axis_577462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 21), 'axis', False)
    keyword_577463 = axis_577462
    kwargs_577464 = {'axis': keyword_577463}
    # Getting the type of 'a' (line 2183)
    a_577460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 8), 'a', False)
    # Obtaining the member 'count' of a type (line 2183)
    count_577461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2183, 8), a_577460, 'count')
    # Calling count(args, kwargs) (line 2183)
    count_call_result_577465 = invoke(stypy.reporting.localization.Localization(__file__, 2183, 8), count_577461, *[], **kwargs_577464)
    
    # Assigning a type to the variable 'n' (line 2183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2183, 4), 'n', count_call_result_577465)
    
    
    
    # Call to min(...): (line 2184)
    # Processing the call arguments (line 2184)
    # Getting the type of 'n' (line 2184)
    n_577468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 14), 'n', False)
    # Processing the call keyword arguments (line 2184)
    kwargs_577469 = {}
    # Getting the type of 'np' (line 2184)
    np_577466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 7), 'np', False)
    # Obtaining the member 'min' of a type (line 2184)
    min_577467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 7), np_577466, 'min')
    # Calling min(args, kwargs) (line 2184)
    min_call_result_577470 = invoke(stypy.reporting.localization.Localization(__file__, 2184, 7), min_577467, *[n_577468], **kwargs_577469)
    
    int_577471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 19), 'int')
    # Applying the binary operator '<' (line 2184)
    result_lt_577472 = python_operator(stypy.reporting.localization.Localization(__file__, 2184, 7), '<', min_call_result_577470, int_577471)
    
    # Testing the type of an if condition (line 2184)
    if_condition_577473 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2184, 4), result_lt_577472)
    # Assigning a type to the variable 'if_condition_577473' (line 2184)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 4), 'if_condition_577473', if_condition_577473)
    # SSA begins for if statement (line 2184)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2185)
    # Processing the call arguments (line 2185)
    str_577475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 12), 'str', 'kurtosistest requires at least 5 observations; %i observations were given.')
    
    # Call to min(...): (line 2187)
    # Processing the call arguments (line 2187)
    # Getting the type of 'n' (line 2187)
    n_577478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 36), 'n', False)
    # Processing the call keyword arguments (line 2187)
    kwargs_577479 = {}
    # Getting the type of 'np' (line 2187)
    np_577476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 29), 'np', False)
    # Obtaining the member 'min' of a type (line 2187)
    min_577477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2187, 29), np_577476, 'min')
    # Calling min(args, kwargs) (line 2187)
    min_call_result_577480 = invoke(stypy.reporting.localization.Localization(__file__, 2187, 29), min_577477, *[n_577478], **kwargs_577479)
    
    # Applying the binary operator '%' (line 2186)
    result_mod_577481 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 12), '%', str_577475, min_call_result_577480)
    
    # Processing the call keyword arguments (line 2185)
    kwargs_577482 = {}
    # Getting the type of 'ValueError' (line 2185)
    ValueError_577474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2185)
    ValueError_call_result_577483 = invoke(stypy.reporting.localization.Localization(__file__, 2185, 14), ValueError_577474, *[result_mod_577481], **kwargs_577482)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2185, 8), ValueError_call_result_577483, 'raise parameter', BaseException)
    # SSA join for if statement (line 2184)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to min(...): (line 2188)
    # Processing the call arguments (line 2188)
    # Getting the type of 'n' (line 2188)
    n_577486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 14), 'n', False)
    # Processing the call keyword arguments (line 2188)
    kwargs_577487 = {}
    # Getting the type of 'np' (line 2188)
    np_577484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 7), 'np', False)
    # Obtaining the member 'min' of a type (line 2188)
    min_577485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 7), np_577484, 'min')
    # Calling min(args, kwargs) (line 2188)
    min_call_result_577488 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 7), min_577485, *[n_577486], **kwargs_577487)
    
    int_577489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 19), 'int')
    # Applying the binary operator '<' (line 2188)
    result_lt_577490 = python_operator(stypy.reporting.localization.Localization(__file__, 2188, 7), '<', min_call_result_577488, int_577489)
    
    # Testing the type of an if condition (line 2188)
    if_condition_577491 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2188, 4), result_lt_577490)
    # Assigning a type to the variable 'if_condition_577491' (line 2188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 4), 'if_condition_577491', if_condition_577491)
    # SSA begins for if statement (line 2188)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2189)
    # Processing the call arguments (line 2189)
    str_577494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2190, 12), 'str', 'kurtosistest only valid for n>=20 ... continuing anyway, n=%i')
    
    # Call to min(...): (line 2191)
    # Processing the call arguments (line 2191)
    # Getting the type of 'n' (line 2191)
    n_577497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 19), 'n', False)
    # Processing the call keyword arguments (line 2191)
    kwargs_577498 = {}
    # Getting the type of 'np' (line 2191)
    np_577495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 12), 'np', False)
    # Obtaining the member 'min' of a type (line 2191)
    min_577496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2191, 12), np_577495, 'min')
    # Calling min(args, kwargs) (line 2191)
    min_call_result_577499 = invoke(stypy.reporting.localization.Localization(__file__, 2191, 12), min_577496, *[n_577497], **kwargs_577498)
    
    # Applying the binary operator '%' (line 2190)
    result_mod_577500 = python_operator(stypy.reporting.localization.Localization(__file__, 2190, 12), '%', str_577494, min_call_result_577499)
    
    # Processing the call keyword arguments (line 2189)
    kwargs_577501 = {}
    # Getting the type of 'warnings' (line 2189)
    warnings_577492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2189)
    warn_577493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2189, 8), warnings_577492, 'warn')
    # Calling warn(args, kwargs) (line 2189)
    warn_call_result_577502 = invoke(stypy.reporting.localization.Localization(__file__, 2189, 8), warn_577493, *[result_mod_577500], **kwargs_577501)
    
    # SSA join for if statement (line 2188)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2193):
    
    # Assigning a Call to a Name (line 2193):
    
    # Call to kurtosis(...): (line 2193)
    # Processing the call arguments (line 2193)
    # Getting the type of 'a' (line 2193)
    a_577504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 18), 'a', False)
    # Getting the type of 'axis' (line 2193)
    axis_577505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 21), 'axis', False)
    # Processing the call keyword arguments (line 2193)
    # Getting the type of 'False' (line 2193)
    False_577506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 34), 'False', False)
    keyword_577507 = False_577506
    kwargs_577508 = {'fisher': keyword_577507}
    # Getting the type of 'kurtosis' (line 2193)
    kurtosis_577503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 9), 'kurtosis', False)
    # Calling kurtosis(args, kwargs) (line 2193)
    kurtosis_call_result_577509 = invoke(stypy.reporting.localization.Localization(__file__, 2193, 9), kurtosis_577503, *[a_577504, axis_577505], **kwargs_577508)
    
    # Assigning a type to the variable 'b2' (line 2193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2193, 4), 'b2', kurtosis_call_result_577509)
    
    # Assigning a BinOp to a Name (line 2194):
    
    # Assigning a BinOp to a Name (line 2194):
    float_577510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 8), 'float')
    # Getting the type of 'n' (line 2194)
    n_577511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 13), 'n')
    int_577512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 15), 'int')
    # Applying the binary operator '-' (line 2194)
    result_sub_577513 = python_operator(stypy.reporting.localization.Localization(__file__, 2194, 13), '-', n_577511, int_577512)
    
    # Applying the binary operator '*' (line 2194)
    result_mul_577514 = python_operator(stypy.reporting.localization.Localization(__file__, 2194, 8), '*', float_577510, result_sub_577513)
    
    # Getting the type of 'n' (line 2194)
    n_577515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 21), 'n')
    int_577516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 23), 'int')
    # Applying the binary operator '+' (line 2194)
    result_add_577517 = python_operator(stypy.reporting.localization.Localization(__file__, 2194, 21), '+', n_577515, int_577516)
    
    # Applying the binary operator 'div' (line 2194)
    result_div_577518 = python_operator(stypy.reporting.localization.Localization(__file__, 2194, 18), 'div', result_mul_577514, result_add_577517)
    
    # Assigning a type to the variable 'E' (line 2194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 4), 'E', result_div_577518)
    
    # Assigning a BinOp to a Name (line 2195):
    
    # Assigning a BinOp to a Name (line 2195):
    float_577519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 12), 'float')
    # Getting the type of 'n' (line 2195)
    n_577520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 17), 'n')
    # Applying the binary operator '*' (line 2195)
    result_mul_577521 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 12), '*', float_577519, n_577520)
    
    # Getting the type of 'n' (line 2195)
    n_577522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 20), 'n')
    float_577523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 22), 'float')
    # Applying the binary operator '-' (line 2195)
    result_sub_577524 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 20), '-', n_577522, float_577523)
    
    # Applying the binary operator '*' (line 2195)
    result_mul_577525 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 18), '*', result_mul_577521, result_sub_577524)
    
    # Getting the type of 'n' (line 2195)
    n_577526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 27), 'n')
    int_577527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 29), 'int')
    # Applying the binary operator '-' (line 2195)
    result_sub_577528 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 27), '-', n_577526, int_577527)
    
    # Applying the binary operator '*' (line 2195)
    result_mul_577529 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 25), '*', result_mul_577525, result_sub_577528)
    
    # Getting the type of 'n' (line 2195)
    n_577530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 36), 'n')
    int_577531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 38), 'int')
    # Applying the binary operator '+' (line 2195)
    result_add_577532 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 36), '+', n_577530, int_577531)
    
    # Getting the type of 'n' (line 2195)
    n_577533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 42), 'n')
    float_577534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 44), 'float')
    # Applying the binary operator '+' (line 2195)
    result_add_577535 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 42), '+', n_577533, float_577534)
    
    # Applying the binary operator '*' (line 2195)
    result_mul_577536 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 35), '*', result_add_577532, result_add_577535)
    
    # Getting the type of 'n' (line 2195)
    n_577537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 49), 'n')
    int_577538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 51), 'int')
    # Applying the binary operator '+' (line 2195)
    result_add_577539 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 49), '+', n_577537, int_577538)
    
    # Applying the binary operator '*' (line 2195)
    result_mul_577540 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 47), '*', result_mul_577536, result_add_577539)
    
    # Getting the type of 'n' (line 2195)
    n_577541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 55), 'n')
    int_577542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 57), 'int')
    # Applying the binary operator '+' (line 2195)
    result_add_577543 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 55), '+', n_577541, int_577542)
    
    # Applying the binary operator '*' (line 2195)
    result_mul_577544 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 53), '*', result_mul_577540, result_add_577543)
    
    # Applying the binary operator 'div' (line 2195)
    result_div_577545 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 32), 'div', result_mul_577529, result_mul_577544)
    
    # Assigning a type to the variable 'varb2' (line 2195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 4), 'varb2', result_div_577545)
    
    # Assigning a BinOp to a Name (line 2196):
    
    # Assigning a BinOp to a Name (line 2196):
    # Getting the type of 'b2' (line 2196)
    b2_577546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 9), 'b2')
    # Getting the type of 'E' (line 2196)
    E_577547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 12), 'E')
    # Applying the binary operator '-' (line 2196)
    result_sub_577548 = python_operator(stypy.reporting.localization.Localization(__file__, 2196, 9), '-', b2_577546, E_577547)
    
    
    # Call to sqrt(...): (line 2196)
    # Processing the call arguments (line 2196)
    # Getting the type of 'varb2' (line 2196)
    varb2_577551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 23), 'varb2', False)
    # Processing the call keyword arguments (line 2196)
    kwargs_577552 = {}
    # Getting the type of 'ma' (line 2196)
    ma_577549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 15), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 2196)
    sqrt_577550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2196, 15), ma_577549, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2196)
    sqrt_call_result_577553 = invoke(stypy.reporting.localization.Localization(__file__, 2196, 15), sqrt_577550, *[varb2_577551], **kwargs_577552)
    
    # Applying the binary operator 'div' (line 2196)
    result_div_577554 = python_operator(stypy.reporting.localization.Localization(__file__, 2196, 8), 'div', result_sub_577548, sqrt_call_result_577553)
    
    # Assigning a type to the variable 'x' (line 2196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2196, 4), 'x', result_div_577554)
    
    # Assigning a BinOp to a Name (line 2197):
    
    # Assigning a BinOp to a Name (line 2197):
    float_577555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 16), 'float')
    # Getting the type of 'n' (line 2197)
    n_577556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 21), 'n')
    # Getting the type of 'n' (line 2197)
    n_577557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 23), 'n')
    # Applying the binary operator '*' (line 2197)
    result_mul_577558 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 21), '*', n_577556, n_577557)
    
    int_577559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 25), 'int')
    # Getting the type of 'n' (line 2197)
    n_577560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 27), 'n')
    # Applying the binary operator '*' (line 2197)
    result_mul_577561 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 25), '*', int_577559, n_577560)
    
    # Applying the binary operator '-' (line 2197)
    result_sub_577562 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 21), '-', result_mul_577558, result_mul_577561)
    
    int_577563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 29), 'int')
    # Applying the binary operator '+' (line 2197)
    result_add_577564 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 28), '+', result_sub_577562, int_577563)
    
    # Applying the binary operator '*' (line 2197)
    result_mul_577565 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 16), '*', float_577555, result_add_577564)
    
    # Getting the type of 'n' (line 2197)
    n_577566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 34), 'n')
    int_577567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 36), 'int')
    # Applying the binary operator '+' (line 2197)
    result_add_577568 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 34), '+', n_577566, int_577567)
    
    # Getting the type of 'n' (line 2197)
    n_577569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 40), 'n')
    int_577570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 42), 'int')
    # Applying the binary operator '+' (line 2197)
    result_add_577571 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 40), '+', n_577569, int_577570)
    
    # Applying the binary operator '*' (line 2197)
    result_mul_577572 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 33), '*', result_add_577568, result_add_577571)
    
    # Applying the binary operator 'div' (line 2197)
    result_div_577573 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 31), 'div', result_mul_577565, result_mul_577572)
    
    
    # Call to sqrt(...): (line 2197)
    # Processing the call arguments (line 2197)
    float_577576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 57), 'float')
    # Getting the type of 'n' (line 2197)
    n_577577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 62), 'n', False)
    int_577578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 64), 'int')
    # Applying the binary operator '+' (line 2197)
    result_add_577579 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 62), '+', n_577577, int_577578)
    
    # Applying the binary operator '*' (line 2197)
    result_mul_577580 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 57), '*', float_577576, result_add_577579)
    
    # Getting the type of 'n' (line 2197)
    n_577581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 68), 'n', False)
    int_577582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 70), 'int')
    # Applying the binary operator '+' (line 2197)
    result_add_577583 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 68), '+', n_577581, int_577582)
    
    # Applying the binary operator '*' (line 2197)
    result_mul_577584 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 66), '*', result_mul_577580, result_add_577583)
    
    # Getting the type of 'n' (line 2198)
    n_577585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 57), 'n', False)
    # Getting the type of 'n' (line 2198)
    n_577586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 60), 'n', False)
    int_577587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2198, 62), 'int')
    # Applying the binary operator '-' (line 2198)
    result_sub_577588 = python_operator(stypy.reporting.localization.Localization(__file__, 2198, 60), '-', n_577586, int_577587)
    
    # Applying the binary operator '*' (line 2198)
    result_mul_577589 = python_operator(stypy.reporting.localization.Localization(__file__, 2198, 57), '*', n_577585, result_sub_577588)
    
    # Getting the type of 'n' (line 2198)
    n_577590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 66), 'n', False)
    int_577591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2198, 68), 'int')
    # Applying the binary operator '-' (line 2198)
    result_sub_577592 = python_operator(stypy.reporting.localization.Localization(__file__, 2198, 66), '-', n_577590, int_577591)
    
    # Applying the binary operator '*' (line 2198)
    result_mul_577593 = python_operator(stypy.reporting.localization.Localization(__file__, 2198, 64), '*', result_mul_577589, result_sub_577592)
    
    # Applying the binary operator 'div' (line 2197)
    result_div_577594 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 56), 'div', result_mul_577584, result_mul_577593)
    
    # Processing the call keyword arguments (line 2197)
    kwargs_577595 = {}
    # Getting the type of 'np' (line 2197)
    np_577574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 48), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2197)
    sqrt_577575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 48), np_577574, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2197)
    sqrt_call_result_577596 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 48), sqrt_577575, *[result_div_577594], **kwargs_577595)
    
    # Applying the binary operator '*' (line 2197)
    result_mul_577597 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 46), '*', result_div_577573, sqrt_call_result_577596)
    
    # Assigning a type to the variable 'sqrtbeta1' (line 2197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 4), 'sqrtbeta1', result_mul_577597)
    
    # Assigning a BinOp to a Name (line 2199):
    
    # Assigning a BinOp to a Name (line 2199):
    float_577598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2199, 8), 'float')
    float_577599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2199, 14), 'float')
    # Getting the type of 'sqrtbeta1' (line 2199)
    sqrtbeta1_577600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 18), 'sqrtbeta1')
    # Applying the binary operator 'div' (line 2199)
    result_div_577601 = python_operator(stypy.reporting.localization.Localization(__file__, 2199, 14), 'div', float_577599, sqrtbeta1_577600)
    
    float_577602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2199, 31), 'float')
    # Getting the type of 'sqrtbeta1' (line 2199)
    sqrtbeta1_577603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 35), 'sqrtbeta1')
    # Applying the binary operator 'div' (line 2199)
    result_div_577604 = python_operator(stypy.reporting.localization.Localization(__file__, 2199, 31), 'div', float_577602, sqrtbeta1_577603)
    
    
    # Call to sqrt(...): (line 2199)
    # Processing the call arguments (line 2199)
    int_577607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2199, 55), 'int')
    float_577608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2199, 57), 'float')
    # Getting the type of 'sqrtbeta1' (line 2199)
    sqrtbeta1_577609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 62), 'sqrtbeta1', False)
    int_577610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2199, 73), 'int')
    # Applying the binary operator '**' (line 2199)
    result_pow_577611 = python_operator(stypy.reporting.localization.Localization(__file__, 2199, 62), '**', sqrtbeta1_577609, int_577610)
    
    # Applying the binary operator 'div' (line 2199)
    result_div_577612 = python_operator(stypy.reporting.localization.Localization(__file__, 2199, 57), 'div', float_577608, result_pow_577611)
    
    # Applying the binary operator '+' (line 2199)
    result_add_577613 = python_operator(stypy.reporting.localization.Localization(__file__, 2199, 55), '+', int_577607, result_div_577612)
    
    # Processing the call keyword arguments (line 2199)
    kwargs_577614 = {}
    # Getting the type of 'np' (line 2199)
    np_577605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 47), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2199)
    sqrt_577606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2199, 47), np_577605, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2199)
    sqrt_call_result_577615 = invoke(stypy.reporting.localization.Localization(__file__, 2199, 47), sqrt_577606, *[result_add_577613], **kwargs_577614)
    
    # Applying the binary operator '+' (line 2199)
    result_add_577616 = python_operator(stypy.reporting.localization.Localization(__file__, 2199, 31), '+', result_div_577604, sqrt_call_result_577615)
    
    # Applying the binary operator '*' (line 2199)
    result_mul_577617 = python_operator(stypy.reporting.localization.Localization(__file__, 2199, 28), '*', result_div_577601, result_add_577616)
    
    # Applying the binary operator '+' (line 2199)
    result_add_577618 = python_operator(stypy.reporting.localization.Localization(__file__, 2199, 8), '+', float_577598, result_mul_577617)
    
    # Assigning a type to the variable 'A' (line 2199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2199, 4), 'A', result_add_577618)
    
    # Assigning a BinOp to a Name (line 2200):
    
    # Assigning a BinOp to a Name (line 2200):
    int_577619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2200, 12), 'int')
    float_577620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2200, 16), 'float')
    float_577621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2200, 20), 'float')
    # Getting the type of 'A' (line 2200)
    A_577622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 24), 'A')
    # Applying the binary operator '*' (line 2200)
    result_mul_577623 = python_operator(stypy.reporting.localization.Localization(__file__, 2200, 20), '*', float_577621, A_577622)
    
    # Applying the binary operator 'div' (line 2200)
    result_div_577624 = python_operator(stypy.reporting.localization.Localization(__file__, 2200, 16), 'div', float_577620, result_mul_577623)
    
    # Applying the binary operator '-' (line 2200)
    result_sub_577625 = python_operator(stypy.reporting.localization.Localization(__file__, 2200, 12), '-', int_577619, result_div_577624)
    
    # Assigning a type to the variable 'term1' (line 2200)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 4), 'term1', result_sub_577625)
    
    # Assigning a BinOp to a Name (line 2201):
    
    # Assigning a BinOp to a Name (line 2201):
    int_577626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2201, 12), 'int')
    # Getting the type of 'x' (line 2201)
    x_577627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 16), 'x')
    
    # Call to sqrt(...): (line 2201)
    # Processing the call arguments (line 2201)
    int_577630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2201, 26), 'int')
    # Getting the type of 'A' (line 2201)
    A_577631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 29), 'A', False)
    float_577632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2201, 31), 'float')
    # Applying the binary operator '-' (line 2201)
    result_sub_577633 = python_operator(stypy.reporting.localization.Localization(__file__, 2201, 29), '-', A_577631, float_577632)
    
    # Applying the binary operator 'div' (line 2201)
    result_div_577634 = python_operator(stypy.reporting.localization.Localization(__file__, 2201, 26), 'div', int_577630, result_sub_577633)
    
    # Processing the call keyword arguments (line 2201)
    kwargs_577635 = {}
    # Getting the type of 'ma' (line 2201)
    ma_577628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 18), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 2201)
    sqrt_577629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2201, 18), ma_577628, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2201)
    sqrt_call_result_577636 = invoke(stypy.reporting.localization.Localization(__file__, 2201, 18), sqrt_577629, *[result_div_577634], **kwargs_577635)
    
    # Applying the binary operator '*' (line 2201)
    result_mul_577637 = python_operator(stypy.reporting.localization.Localization(__file__, 2201, 16), '*', x_577627, sqrt_call_result_577636)
    
    # Applying the binary operator '+' (line 2201)
    result_add_577638 = python_operator(stypy.reporting.localization.Localization(__file__, 2201, 12), '+', int_577626, result_mul_577637)
    
    # Assigning a type to the variable 'denom' (line 2201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2201, 4), 'denom', result_add_577638)
    
    
    # Call to isMaskedArray(...): (line 2202)
    # Processing the call arguments (line 2202)
    # Getting the type of 'denom' (line 2202)
    denom_577642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 27), 'denom', False)
    # Processing the call keyword arguments (line 2202)
    kwargs_577643 = {}
    # Getting the type of 'np' (line 2202)
    np_577639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 7), 'np', False)
    # Obtaining the member 'ma' of a type (line 2202)
    ma_577640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2202, 7), np_577639, 'ma')
    # Obtaining the member 'isMaskedArray' of a type (line 2202)
    isMaskedArray_577641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2202, 7), ma_577640, 'isMaskedArray')
    # Calling isMaskedArray(args, kwargs) (line 2202)
    isMaskedArray_call_result_577644 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 7), isMaskedArray_577641, *[denom_577642], **kwargs_577643)
    
    # Testing the type of an if condition (line 2202)
    if_condition_577645 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2202, 4), isMaskedArray_call_result_577644)
    # Assigning a type to the variable 'if_condition_577645' (line 2202)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 4), 'if_condition_577645', if_condition_577645)
    # SSA begins for if statement (line 2202)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 2204):
    
    # Assigning a Name to a Subscript (line 2204):
    # Getting the type of 'masked' (line 2204)
    masked_577646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 27), 'masked')
    # Getting the type of 'denom' (line 2204)
    denom_577647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 8), 'denom')
    
    # Getting the type of 'denom' (line 2204)
    denom_577648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 14), 'denom')
    int_577649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 22), 'int')
    # Applying the binary operator '<' (line 2204)
    result_lt_577650 = python_operator(stypy.reporting.localization.Localization(__file__, 2204, 14), '<', denom_577648, int_577649)
    
    # Storing an element on a container (line 2204)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2204, 8), denom_577647, (result_lt_577650, masked_577646))
    # SSA branch for the else part of an if statement (line 2202)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'denom' (line 2205)
    denom_577651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 9), 'denom')
    int_577652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2205, 17), 'int')
    # Applying the binary operator '<' (line 2205)
    result_lt_577653 = python_operator(stypy.reporting.localization.Localization(__file__, 2205, 9), '<', denom_577651, int_577652)
    
    # Testing the type of an if condition (line 2205)
    if_condition_577654 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2205, 9), result_lt_577653)
    # Assigning a type to the variable 'if_condition_577654' (line 2205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 9), 'if_condition_577654', if_condition_577654)
    # SSA begins for if statement (line 2205)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2206):
    
    # Assigning a Name to a Name (line 2206):
    # Getting the type of 'masked' (line 2206)
    masked_577655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 16), 'masked')
    # Assigning a type to the variable 'denom' (line 2206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2206, 8), 'denom', masked_577655)
    # SSA join for if statement (line 2205)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2202)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2208):
    
    # Assigning a Call to a Name (line 2208):
    
    # Call to power(...): (line 2208)
    # Processing the call arguments (line 2208)
    int_577658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2208, 22), 'int')
    float_577659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2208, 24), 'float')
    # Getting the type of 'A' (line 2208)
    A_577660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 28), 'A', False)
    # Applying the binary operator 'div' (line 2208)
    result_div_577661 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 24), 'div', float_577659, A_577660)
    
    # Applying the binary operator '-' (line 2208)
    result_sub_577662 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 22), '-', int_577658, result_div_577661)
    
    # Getting the type of 'denom' (line 2208)
    denom_577663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 31), 'denom', False)
    # Applying the binary operator 'div' (line 2208)
    result_div_577664 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 21), 'div', result_sub_577662, denom_577663)
    
    int_577665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2208, 37), 'int')
    float_577666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2208, 39), 'float')
    # Applying the binary operator 'div' (line 2208)
    result_div_577667 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 37), 'div', int_577665, float_577666)
    
    # Processing the call keyword arguments (line 2208)
    kwargs_577668 = {}
    # Getting the type of 'ma' (line 2208)
    ma_577656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 12), 'ma', False)
    # Obtaining the member 'power' of a type (line 2208)
    power_577657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2208, 12), ma_577656, 'power')
    # Calling power(args, kwargs) (line 2208)
    power_call_result_577669 = invoke(stypy.reporting.localization.Localization(__file__, 2208, 12), power_577657, *[result_div_577664, result_div_577667], **kwargs_577668)
    
    # Assigning a type to the variable 'term2' (line 2208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2208, 4), 'term2', power_call_result_577669)
    
    # Assigning a BinOp to a Name (line 2209):
    
    # Assigning a BinOp to a Name (line 2209):
    # Getting the type of 'term1' (line 2209)
    term1_577670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 9), 'term1')
    # Getting the type of 'term2' (line 2209)
    term2_577671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 17), 'term2')
    # Applying the binary operator '-' (line 2209)
    result_sub_577672 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 9), '-', term1_577670, term2_577671)
    
    
    # Call to sqrt(...): (line 2209)
    # Processing the call arguments (line 2209)
    int_577675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2209, 34), 'int')
    float_577676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2209, 37), 'float')
    # Getting the type of 'A' (line 2209)
    A_577677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 41), 'A', False)
    # Applying the binary operator '*' (line 2209)
    result_mul_577678 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 37), '*', float_577676, A_577677)
    
    # Applying the binary operator 'div' (line 2209)
    result_div_577679 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 34), 'div', int_577675, result_mul_577678)
    
    # Processing the call keyword arguments (line 2209)
    kwargs_577680 = {}
    # Getting the type of 'np' (line 2209)
    np_577673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 26), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2209)
    sqrt_577674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 26), np_577673, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2209)
    sqrt_call_result_577681 = invoke(stypy.reporting.localization.Localization(__file__, 2209, 26), sqrt_577674, *[result_div_577679], **kwargs_577680)
    
    # Applying the binary operator 'div' (line 2209)
    result_div_577682 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 8), 'div', result_sub_577672, sqrt_call_result_577681)
    
    # Assigning a type to the variable 'Z' (line 2209)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2209, 4), 'Z', result_div_577682)
    
    # Call to KurtosistestResult(...): (line 2211)
    # Processing the call arguments (line 2211)
    # Getting the type of 'Z' (line 2211)
    Z_577684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 30), 'Z', False)
    int_577685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 33), 'int')
    
    # Call to sf(...): (line 2211)
    # Processing the call arguments (line 2211)
    
    # Call to abs(...): (line 2211)
    # Processing the call arguments (line 2211)
    # Getting the type of 'Z' (line 2211)
    Z_577691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 66), 'Z', False)
    # Processing the call keyword arguments (line 2211)
    kwargs_577692 = {}
    # Getting the type of 'np' (line 2211)
    np_577689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 59), 'np', False)
    # Obtaining the member 'abs' of a type (line 2211)
    abs_577690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2211, 59), np_577689, 'abs')
    # Calling abs(args, kwargs) (line 2211)
    abs_call_result_577693 = invoke(stypy.reporting.localization.Localization(__file__, 2211, 59), abs_577690, *[Z_577691], **kwargs_577692)
    
    # Processing the call keyword arguments (line 2211)
    kwargs_577694 = {}
    # Getting the type of 'distributions' (line 2211)
    distributions_577686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 37), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 2211)
    norm_577687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2211, 37), distributions_577686, 'norm')
    # Obtaining the member 'sf' of a type (line 2211)
    sf_577688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2211, 37), norm_577687, 'sf')
    # Calling sf(args, kwargs) (line 2211)
    sf_call_result_577695 = invoke(stypy.reporting.localization.Localization(__file__, 2211, 37), sf_577688, *[abs_call_result_577693], **kwargs_577694)
    
    # Applying the binary operator '*' (line 2211)
    result_mul_577696 = python_operator(stypy.reporting.localization.Localization(__file__, 2211, 33), '*', int_577685, sf_call_result_577695)
    
    # Processing the call keyword arguments (line 2211)
    kwargs_577697 = {}
    # Getting the type of 'KurtosistestResult' (line 2211)
    KurtosistestResult_577683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 11), 'KurtosistestResult', False)
    # Calling KurtosistestResult(args, kwargs) (line 2211)
    KurtosistestResult_call_result_577698 = invoke(stypy.reporting.localization.Localization(__file__, 2211, 11), KurtosistestResult_577683, *[Z_577684, result_mul_577696], **kwargs_577697)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2211, 4), 'stypy_return_type', KurtosistestResult_call_result_577698)
    
    # ################# End of 'kurtosistest(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kurtosistest' in the type store
    # Getting the type of 'stypy_return_type' (line 2158)
    stypy_return_type_577699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_577699)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kurtosistest'
    return stypy_return_type_577699

# Assigning a type to the variable 'kurtosistest' (line 2158)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 0), 'kurtosistest', kurtosistest)

# Assigning a Call to a Name (line 2214):

# Assigning a Call to a Name (line 2214):

# Call to namedtuple(...): (line 2214)
# Processing the call arguments (line 2214)
str_577701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 30), 'str', 'NormaltestResult')

# Obtaining an instance of the builtin type 'tuple' (line 2214)
tuple_577702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 51), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2214)
# Adding element type (line 2214)
str_577703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 51), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2214, 51), tuple_577702, str_577703)
# Adding element type (line 2214)
str_577704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 64), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2214, 51), tuple_577702, str_577704)

# Processing the call keyword arguments (line 2214)
kwargs_577705 = {}
# Getting the type of 'namedtuple' (line 2214)
namedtuple_577700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 19), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 2214)
namedtuple_call_result_577706 = invoke(stypy.reporting.localization.Localization(__file__, 2214, 19), namedtuple_577700, *[str_577701, tuple_577702], **kwargs_577705)

# Assigning a type to the variable 'NormaltestResult' (line 2214)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2214, 0), 'NormaltestResult', namedtuple_call_result_577706)

@norecursion
def normaltest(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_577707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2217, 23), 'int')
    defaults = [int_577707]
    # Create a new context for function 'normaltest'
    module_type_store = module_type_store.open_function_context('normaltest', 2217, 0, False)
    
    # Passed parameters checking function
    normaltest.stypy_localization = localization
    normaltest.stypy_type_of_self = None
    normaltest.stypy_type_store = module_type_store
    normaltest.stypy_function_name = 'normaltest'
    normaltest.stypy_param_names_list = ['a', 'axis']
    normaltest.stypy_varargs_param_name = None
    normaltest.stypy_kwargs_param_name = None
    normaltest.stypy_call_defaults = defaults
    normaltest.stypy_call_varargs = varargs
    normaltest.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'normaltest', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'normaltest', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'normaltest(...)' code ##################

    str_577708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2241, (-1)), 'str', '\n    Tests whether a sample differs from a normal distribution.\n\n    Parameters\n    ----------\n    a : array_like\n        The array containing the data to be tested.\n    axis : int or None, optional\n        Axis along which to compute test. Default is 0. If None,\n        compute over the whole array `a`.\n\n    Returns\n    -------\n    statistic : float or array\n        ``s^2 + k^2``, where ``s`` is the z-score returned by `skewtest` and\n        ``k`` is the z-score returned by `kurtosistest`.\n    pvalue : float or array\n       A 2-sided chi squared probability for the hypothesis test.\n\n    Notes\n    -----\n    For more details about `normaltest`, see `stats.normaltest`.\n\n    ')
    
    # Assigning a Call to a Tuple (line 2242):
    
    # Assigning a Subscript to a Name (line 2242):
    
    # Obtaining the type of the subscript
    int_577709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2242)
    # Processing the call arguments (line 2242)
    # Getting the type of 'a' (line 2242)
    a_577711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 27), 'a', False)
    # Getting the type of 'axis' (line 2242)
    axis_577712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 30), 'axis', False)
    # Processing the call keyword arguments (line 2242)
    kwargs_577713 = {}
    # Getting the type of '_chk_asarray' (line 2242)
    _chk_asarray_577710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2242)
    _chk_asarray_call_result_577714 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 14), _chk_asarray_577710, *[a_577711, axis_577712], **kwargs_577713)
    
    # Obtaining the member '__getitem__' of a type (line 2242)
    getitem___577715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2242, 4), _chk_asarray_call_result_577714, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2242)
    subscript_call_result_577716 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 4), getitem___577715, int_577709)
    
    # Assigning a type to the variable 'tuple_var_assignment_571529' (line 2242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 4), 'tuple_var_assignment_571529', subscript_call_result_577716)
    
    # Assigning a Subscript to a Name (line 2242):
    
    # Obtaining the type of the subscript
    int_577717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2242)
    # Processing the call arguments (line 2242)
    # Getting the type of 'a' (line 2242)
    a_577719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 27), 'a', False)
    # Getting the type of 'axis' (line 2242)
    axis_577720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 30), 'axis', False)
    # Processing the call keyword arguments (line 2242)
    kwargs_577721 = {}
    # Getting the type of '_chk_asarray' (line 2242)
    _chk_asarray_577718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2242)
    _chk_asarray_call_result_577722 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 14), _chk_asarray_577718, *[a_577719, axis_577720], **kwargs_577721)
    
    # Obtaining the member '__getitem__' of a type (line 2242)
    getitem___577723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2242, 4), _chk_asarray_call_result_577722, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2242)
    subscript_call_result_577724 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 4), getitem___577723, int_577717)
    
    # Assigning a type to the variable 'tuple_var_assignment_571530' (line 2242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 4), 'tuple_var_assignment_571530', subscript_call_result_577724)
    
    # Assigning a Name to a Name (line 2242):
    # Getting the type of 'tuple_var_assignment_571529' (line 2242)
    tuple_var_assignment_571529_577725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 4), 'tuple_var_assignment_571529')
    # Assigning a type to the variable 'a' (line 2242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 4), 'a', tuple_var_assignment_571529_577725)
    
    # Assigning a Name to a Name (line 2242):
    # Getting the type of 'tuple_var_assignment_571530' (line 2242)
    tuple_var_assignment_571530_577726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 4), 'tuple_var_assignment_571530')
    # Assigning a type to the variable 'axis' (line 2242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 7), 'axis', tuple_var_assignment_571530_577726)
    
    # Assigning a Call to a Tuple (line 2243):
    
    # Assigning a Subscript to a Name (line 2243):
    
    # Obtaining the type of the subscript
    int_577727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 4), 'int')
    
    # Call to skewtest(...): (line 2243)
    # Processing the call arguments (line 2243)
    # Getting the type of 'a' (line 2243)
    a_577729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 20), 'a', False)
    # Getting the type of 'axis' (line 2243)
    axis_577730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 23), 'axis', False)
    # Processing the call keyword arguments (line 2243)
    kwargs_577731 = {}
    # Getting the type of 'skewtest' (line 2243)
    skewtest_577728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 11), 'skewtest', False)
    # Calling skewtest(args, kwargs) (line 2243)
    skewtest_call_result_577732 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 11), skewtest_577728, *[a_577729, axis_577730], **kwargs_577731)
    
    # Obtaining the member '__getitem__' of a type (line 2243)
    getitem___577733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 4), skewtest_call_result_577732, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2243)
    subscript_call_result_577734 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 4), getitem___577733, int_577727)
    
    # Assigning a type to the variable 'tuple_var_assignment_571531' (line 2243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 4), 'tuple_var_assignment_571531', subscript_call_result_577734)
    
    # Assigning a Subscript to a Name (line 2243):
    
    # Obtaining the type of the subscript
    int_577735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 4), 'int')
    
    # Call to skewtest(...): (line 2243)
    # Processing the call arguments (line 2243)
    # Getting the type of 'a' (line 2243)
    a_577737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 20), 'a', False)
    # Getting the type of 'axis' (line 2243)
    axis_577738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 23), 'axis', False)
    # Processing the call keyword arguments (line 2243)
    kwargs_577739 = {}
    # Getting the type of 'skewtest' (line 2243)
    skewtest_577736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 11), 'skewtest', False)
    # Calling skewtest(args, kwargs) (line 2243)
    skewtest_call_result_577740 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 11), skewtest_577736, *[a_577737, axis_577738], **kwargs_577739)
    
    # Obtaining the member '__getitem__' of a type (line 2243)
    getitem___577741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 4), skewtest_call_result_577740, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2243)
    subscript_call_result_577742 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 4), getitem___577741, int_577735)
    
    # Assigning a type to the variable 'tuple_var_assignment_571532' (line 2243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 4), 'tuple_var_assignment_571532', subscript_call_result_577742)
    
    # Assigning a Name to a Name (line 2243):
    # Getting the type of 'tuple_var_assignment_571531' (line 2243)
    tuple_var_assignment_571531_577743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 4), 'tuple_var_assignment_571531')
    # Assigning a type to the variable 's' (line 2243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 4), 's', tuple_var_assignment_571531_577743)
    
    # Assigning a Name to a Name (line 2243):
    # Getting the type of 'tuple_var_assignment_571532' (line 2243)
    tuple_var_assignment_571532_577744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 4), 'tuple_var_assignment_571532')
    # Assigning a type to the variable '_' (line 2243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 7), '_', tuple_var_assignment_571532_577744)
    
    # Assigning a Call to a Tuple (line 2244):
    
    # Assigning a Subscript to a Name (line 2244):
    
    # Obtaining the type of the subscript
    int_577745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 4), 'int')
    
    # Call to kurtosistest(...): (line 2244)
    # Processing the call arguments (line 2244)
    # Getting the type of 'a' (line 2244)
    a_577747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 24), 'a', False)
    # Getting the type of 'axis' (line 2244)
    axis_577748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 27), 'axis', False)
    # Processing the call keyword arguments (line 2244)
    kwargs_577749 = {}
    # Getting the type of 'kurtosistest' (line 2244)
    kurtosistest_577746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 11), 'kurtosistest', False)
    # Calling kurtosistest(args, kwargs) (line 2244)
    kurtosistest_call_result_577750 = invoke(stypy.reporting.localization.Localization(__file__, 2244, 11), kurtosistest_577746, *[a_577747, axis_577748], **kwargs_577749)
    
    # Obtaining the member '__getitem__' of a type (line 2244)
    getitem___577751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 4), kurtosistest_call_result_577750, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2244)
    subscript_call_result_577752 = invoke(stypy.reporting.localization.Localization(__file__, 2244, 4), getitem___577751, int_577745)
    
    # Assigning a type to the variable 'tuple_var_assignment_571533' (line 2244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 4), 'tuple_var_assignment_571533', subscript_call_result_577752)
    
    # Assigning a Subscript to a Name (line 2244):
    
    # Obtaining the type of the subscript
    int_577753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 4), 'int')
    
    # Call to kurtosistest(...): (line 2244)
    # Processing the call arguments (line 2244)
    # Getting the type of 'a' (line 2244)
    a_577755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 24), 'a', False)
    # Getting the type of 'axis' (line 2244)
    axis_577756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 27), 'axis', False)
    # Processing the call keyword arguments (line 2244)
    kwargs_577757 = {}
    # Getting the type of 'kurtosistest' (line 2244)
    kurtosistest_577754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 11), 'kurtosistest', False)
    # Calling kurtosistest(args, kwargs) (line 2244)
    kurtosistest_call_result_577758 = invoke(stypy.reporting.localization.Localization(__file__, 2244, 11), kurtosistest_577754, *[a_577755, axis_577756], **kwargs_577757)
    
    # Obtaining the member '__getitem__' of a type (line 2244)
    getitem___577759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 4), kurtosistest_call_result_577758, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2244)
    subscript_call_result_577760 = invoke(stypy.reporting.localization.Localization(__file__, 2244, 4), getitem___577759, int_577753)
    
    # Assigning a type to the variable 'tuple_var_assignment_571534' (line 2244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 4), 'tuple_var_assignment_571534', subscript_call_result_577760)
    
    # Assigning a Name to a Name (line 2244):
    # Getting the type of 'tuple_var_assignment_571533' (line 2244)
    tuple_var_assignment_571533_577761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 4), 'tuple_var_assignment_571533')
    # Assigning a type to the variable 'k' (line 2244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 4), 'k', tuple_var_assignment_571533_577761)
    
    # Assigning a Name to a Name (line 2244):
    # Getting the type of 'tuple_var_assignment_571534' (line 2244)
    tuple_var_assignment_571534_577762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 4), 'tuple_var_assignment_571534')
    # Assigning a type to the variable '_' (line 2244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 7), '_', tuple_var_assignment_571534_577762)
    
    # Assigning a BinOp to a Name (line 2245):
    
    # Assigning a BinOp to a Name (line 2245):
    # Getting the type of 's' (line 2245)
    s_577763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 9), 's')
    # Getting the type of 's' (line 2245)
    s_577764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 11), 's')
    # Applying the binary operator '*' (line 2245)
    result_mul_577765 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 9), '*', s_577763, s_577764)
    
    # Getting the type of 'k' (line 2245)
    k_577766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 15), 'k')
    # Getting the type of 'k' (line 2245)
    k_577767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 17), 'k')
    # Applying the binary operator '*' (line 2245)
    result_mul_577768 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 15), '*', k_577766, k_577767)
    
    # Applying the binary operator '+' (line 2245)
    result_add_577769 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 9), '+', result_mul_577765, result_mul_577768)
    
    # Assigning a type to the variable 'k2' (line 2245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2245, 4), 'k2', result_add_577769)
    
    # Call to NormaltestResult(...): (line 2247)
    # Processing the call arguments (line 2247)
    # Getting the type of 'k2' (line 2247)
    k2_577771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 28), 'k2', False)
    
    # Call to sf(...): (line 2247)
    # Processing the call arguments (line 2247)
    # Getting the type of 'k2' (line 2247)
    k2_577775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 54), 'k2', False)
    int_577776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2247, 58), 'int')
    # Processing the call keyword arguments (line 2247)
    kwargs_577777 = {}
    # Getting the type of 'distributions' (line 2247)
    distributions_577772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 32), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 2247)
    chi2_577773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2247, 32), distributions_577772, 'chi2')
    # Obtaining the member 'sf' of a type (line 2247)
    sf_577774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2247, 32), chi2_577773, 'sf')
    # Calling sf(args, kwargs) (line 2247)
    sf_call_result_577778 = invoke(stypy.reporting.localization.Localization(__file__, 2247, 32), sf_577774, *[k2_577775, int_577776], **kwargs_577777)
    
    # Processing the call keyword arguments (line 2247)
    kwargs_577779 = {}
    # Getting the type of 'NormaltestResult' (line 2247)
    NormaltestResult_577770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 11), 'NormaltestResult', False)
    # Calling NormaltestResult(args, kwargs) (line 2247)
    NormaltestResult_call_result_577780 = invoke(stypy.reporting.localization.Localization(__file__, 2247, 11), NormaltestResult_577770, *[k2_577771, sf_call_result_577778], **kwargs_577779)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2247, 4), 'stypy_return_type', NormaltestResult_call_result_577780)
    
    # ################# End of 'normaltest(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'normaltest' in the type store
    # Getting the type of 'stypy_return_type' (line 2217)
    stypy_return_type_577781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_577781)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'normaltest'
    return stypy_return_type_577781

# Assigning a type to the variable 'normaltest' (line 2217)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 0), 'normaltest', normaltest)

@norecursion
def mquantiles(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Call to list(...): (line 2250)
    # Processing the call arguments (line 2250)
    
    # Obtaining an instance of the builtin type 'list' (line 2250)
    list_577783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2250)
    # Adding element type (line 2250)
    float_577784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 29), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2250, 28), list_577783, float_577784)
    # Adding element type (line 2250)
    float_577785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 33), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2250, 28), list_577783, float_577785)
    # Adding element type (line 2250)
    float_577786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 36), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2250, 28), list_577783, float_577786)
    
    # Processing the call keyword arguments (line 2250)
    kwargs_577787 = {}
    # Getting the type of 'list' (line 2250)
    list_577782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 23), 'list', False)
    # Calling list(args, kwargs) (line 2250)
    list_call_result_577788 = invoke(stypy.reporting.localization.Localization(__file__, 2250, 23), list_577782, *[list_577783], **kwargs_577787)
    
    float_577789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 50), 'float')
    float_577790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 60), 'float')
    # Getting the type of 'None' (line 2250)
    None_577791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 69), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2251)
    tuple_577792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2251, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2251)
    
    defaults = [list_call_result_577788, float_577789, float_577790, None_577791, tuple_577792]
    # Create a new context for function 'mquantiles'
    module_type_store = module_type_store.open_function_context('mquantiles', 2250, 0, False)
    
    # Passed parameters checking function
    mquantiles.stypy_localization = localization
    mquantiles.stypy_type_of_self = None
    mquantiles.stypy_type_store = module_type_store
    mquantiles.stypy_function_name = 'mquantiles'
    mquantiles.stypy_param_names_list = ['a', 'prob', 'alphap', 'betap', 'axis', 'limit']
    mquantiles.stypy_varargs_param_name = None
    mquantiles.stypy_kwargs_param_name = None
    mquantiles.stypy_call_defaults = defaults
    mquantiles.stypy_call_varargs = varargs
    mquantiles.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mquantiles', ['a', 'prob', 'alphap', 'betap', 'axis', 'limit'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mquantiles', localization, ['a', 'prob', 'alphap', 'betap', 'axis', 'limit'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mquantiles(...)' code ##################

    str_577793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2348, (-1)), 'str', '\n    Computes empirical quantiles for a data array.\n\n    Samples quantile are defined by ``Q(p) = (1-gamma)*x[j] + gamma*x[j+1]``,\n    where ``x[j]`` is the j-th order statistic, and gamma is a function of\n    ``j = floor(n*p + m)``, ``m = alphap + p*(1 - alphap - betap)`` and\n    ``g = n*p + m - j``.\n\n    Reinterpreting the above equations to compare to **R** lead to the\n    equation: ``p(k) = (k - alphap)/(n + 1 - alphap - betap)``\n\n    Typical values of (alphap,betap) are:\n        - (0,1)    : ``p(k) = k/n`` : linear interpolation of cdf\n          (**R** type 4)\n        - (.5,.5)  : ``p(k) = (k - 1/2.)/n`` : piecewise linear function\n          (**R** type 5)\n        - (0,0)    : ``p(k) = k/(n+1)`` :\n          (**R** type 6)\n        - (1,1)    : ``p(k) = (k-1)/(n-1)``: p(k) = mode[F(x[k])].\n          (**R** type 7, **R** default)\n        - (1/3,1/3): ``p(k) = (k-1/3)/(n+1/3)``: Then p(k) ~ median[F(x[k])].\n          The resulting quantile estimates are approximately median-unbiased\n          regardless of the distribution of x.\n          (**R** type 8)\n        - (3/8,3/8): ``p(k) = (k-3/8)/(n+1/4)``: Blom.\n          The resulting quantile estimates are approximately unbiased\n          if x is normally distributed\n          (**R** type 9)\n        - (.4,.4)  : approximately quantile unbiased (Cunnane)\n        - (.35,.35): APL, used with PWM\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, as a sequence or array of dimension at most 2.\n    prob : array_like, optional\n        List of quantiles to compute.\n    alphap : float, optional\n        Plotting positions parameter, default is 0.4.\n    betap : float, optional\n        Plotting positions parameter, default is 0.4.\n    axis : int, optional\n        Axis along which to perform the trimming.\n        If None (default), the input array is first flattened.\n    limit : tuple, optional\n        Tuple of (lower, upper) values.\n        Values of `a` outside this open interval are ignored.\n\n    Returns\n    -------\n    mquantiles : MaskedArray\n        An array containing the calculated quantiles.\n\n    Notes\n    -----\n    This formulation is very similar to **R** except the calculation of\n    ``m`` from ``alphap`` and ``betap``, where in **R** ``m`` is defined\n    with each type.\n\n    References\n    ----------\n    .. [1] *R* statistical software: http://www.r-project.org/\n    .. [2] *R* ``quantile`` function:\n            http://stat.ethz.ch/R-manual/R-devel/library/stats/html/quantile.html\n\n    Examples\n    --------\n    >>> from scipy.stats.mstats import mquantiles\n    >>> a = np.array([6., 47., 49., 15., 42., 41., 7., 39., 43., 40., 36.])\n    >>> mquantiles(a)\n    array([ 19.2,  40. ,  42.8])\n\n    Using a 2D array, specifying axis and limit.\n\n    >>> data = np.array([[   6.,    7.,    1.],\n    ...                  [  47.,   15.,    2.],\n    ...                  [  49.,   36.,    3.],\n    ...                  [  15.,   39.,    4.],\n    ...                  [  42.,   40., -999.],\n    ...                  [  41.,   41., -999.],\n    ...                  [   7., -999., -999.],\n    ...                  [  39., -999., -999.],\n    ...                  [  43., -999., -999.],\n    ...                  [  40., -999., -999.],\n    ...                  [  36., -999., -999.]])\n    >>> print(mquantiles(data, axis=0, limit=(0, 50)))\n    [[ 19.2   14.6    1.45]\n     [ 40.    37.5    2.5 ]\n     [ 42.8   40.05   3.55]]\n\n    >>> data[:, 2] = -999.\n    >>> print(mquantiles(data, axis=0, limit=(0, 50)))\n    [[19.200000000000003 14.6 --]\n     [40.0 37.5 --]\n     [42.800000000000004 40.05 --]]\n\n    ')

    @norecursion
    def _quantiles1D(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_quantiles1D'
        module_type_store = module_type_store.open_function_context('_quantiles1D', 2349, 4, False)
        
        # Passed parameters checking function
        _quantiles1D.stypy_localization = localization
        _quantiles1D.stypy_type_of_self = None
        _quantiles1D.stypy_type_store = module_type_store
        _quantiles1D.stypy_function_name = '_quantiles1D'
        _quantiles1D.stypy_param_names_list = ['data', 'm', 'p']
        _quantiles1D.stypy_varargs_param_name = None
        _quantiles1D.stypy_kwargs_param_name = None
        _quantiles1D.stypy_call_defaults = defaults
        _quantiles1D.stypy_call_varargs = varargs
        _quantiles1D.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_quantiles1D', ['data', 'm', 'p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_quantiles1D', localization, ['data', 'm', 'p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_quantiles1D(...)' code ##################

        
        # Assigning a Call to a Name (line 2350):
        
        # Assigning a Call to a Name (line 2350):
        
        # Call to sort(...): (line 2350)
        # Processing the call arguments (line 2350)
        
        # Call to compressed(...): (line 2350)
        # Processing the call keyword arguments (line 2350)
        kwargs_577798 = {}
        # Getting the type of 'data' (line 2350)
        data_577796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 20), 'data', False)
        # Obtaining the member 'compressed' of a type (line 2350)
        compressed_577797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2350, 20), data_577796, 'compressed')
        # Calling compressed(args, kwargs) (line 2350)
        compressed_call_result_577799 = invoke(stypy.reporting.localization.Localization(__file__, 2350, 20), compressed_577797, *[], **kwargs_577798)
        
        # Processing the call keyword arguments (line 2350)
        kwargs_577800 = {}
        # Getting the type of 'np' (line 2350)
        np_577794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 12), 'np', False)
        # Obtaining the member 'sort' of a type (line 2350)
        sort_577795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2350, 12), np_577794, 'sort')
        # Calling sort(args, kwargs) (line 2350)
        sort_call_result_577801 = invoke(stypy.reporting.localization.Localization(__file__, 2350, 12), sort_577795, *[compressed_call_result_577799], **kwargs_577800)
        
        # Assigning a type to the variable 'x' (line 2350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2350, 8), 'x', sort_call_result_577801)
        
        # Assigning a Call to a Name (line 2351):
        
        # Assigning a Call to a Name (line 2351):
        
        # Call to len(...): (line 2351)
        # Processing the call arguments (line 2351)
        # Getting the type of 'x' (line 2351)
        x_577803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 16), 'x', False)
        # Processing the call keyword arguments (line 2351)
        kwargs_577804 = {}
        # Getting the type of 'len' (line 2351)
        len_577802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 12), 'len', False)
        # Calling len(args, kwargs) (line 2351)
        len_call_result_577805 = invoke(stypy.reporting.localization.Localization(__file__, 2351, 12), len_577802, *[x_577803], **kwargs_577804)
        
        # Assigning a type to the variable 'n' (line 2351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 8), 'n', len_call_result_577805)
        
        
        # Getting the type of 'n' (line 2352)
        n_577806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 11), 'n')
        int_577807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2352, 16), 'int')
        # Applying the binary operator '==' (line 2352)
        result_eq_577808 = python_operator(stypy.reporting.localization.Localization(__file__, 2352, 11), '==', n_577806, int_577807)
        
        # Testing the type of an if condition (line 2352)
        if_condition_577809 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2352, 8), result_eq_577808)
        # Assigning a type to the variable 'if_condition_577809' (line 2352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2352, 8), 'if_condition_577809', if_condition_577809)
        # SSA begins for if statement (line 2352)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to array(...): (line 2353)
        # Processing the call arguments (line 2353)
        
        # Call to empty(...): (line 2353)
        # Processing the call arguments (line 2353)
        
        # Call to len(...): (line 2353)
        # Processing the call arguments (line 2353)
        # Getting the type of 'p' (line 2353)
        p_577815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 41), 'p', False)
        # Processing the call keyword arguments (line 2353)
        kwargs_577816 = {}
        # Getting the type of 'len' (line 2353)
        len_577814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 37), 'len', False)
        # Calling len(args, kwargs) (line 2353)
        len_call_result_577817 = invoke(stypy.reporting.localization.Localization(__file__, 2353, 37), len_577814, *[p_577815], **kwargs_577816)
        
        # Processing the call keyword arguments (line 2353)
        # Getting the type of 'float' (line 2353)
        float_577818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 51), 'float', False)
        keyword_577819 = float_577818
        kwargs_577820 = {'dtype': keyword_577819}
        # Getting the type of 'np' (line 2353)
        np_577812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 28), 'np', False)
        # Obtaining the member 'empty' of a type (line 2353)
        empty_577813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 28), np_577812, 'empty')
        # Calling empty(args, kwargs) (line 2353)
        empty_call_result_577821 = invoke(stypy.reporting.localization.Localization(__file__, 2353, 28), empty_577813, *[len_call_result_577817], **kwargs_577820)
        
        # Processing the call keyword arguments (line 2353)
        # Getting the type of 'True' (line 2353)
        True_577822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 64), 'True', False)
        keyword_577823 = True_577822
        kwargs_577824 = {'mask': keyword_577823}
        # Getting the type of 'ma' (line 2353)
        ma_577810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 19), 'ma', False)
        # Obtaining the member 'array' of a type (line 2353)
        array_577811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 19), ma_577810, 'array')
        # Calling array(args, kwargs) (line 2353)
        array_call_result_577825 = invoke(stypy.reporting.localization.Localization(__file__, 2353, 19), array_577811, *[empty_call_result_577821], **kwargs_577824)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2353, 12), 'stypy_return_type', array_call_result_577825)
        # SSA branch for the else part of an if statement (line 2352)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'n' (line 2354)
        n_577826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 13), 'n')
        int_577827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2354, 18), 'int')
        # Applying the binary operator '==' (line 2354)
        result_eq_577828 = python_operator(stypy.reporting.localization.Localization(__file__, 2354, 13), '==', n_577826, int_577827)
        
        # Testing the type of an if condition (line 2354)
        if_condition_577829 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2354, 13), result_eq_577828)
        # Assigning a type to the variable 'if_condition_577829' (line 2354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2354, 13), 'if_condition_577829', if_condition_577829)
        # SSA begins for if statement (line 2354)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to array(...): (line 2355)
        # Processing the call arguments (line 2355)
        
        # Call to resize(...): (line 2355)
        # Processing the call arguments (line 2355)
        # Getting the type of 'x' (line 2355)
        x_577834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 38), 'x', False)
        # Getting the type of 'p' (line 2355)
        p_577835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 41), 'p', False)
        # Obtaining the member 'shape' of a type (line 2355)
        shape_577836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2355, 41), p_577835, 'shape')
        # Processing the call keyword arguments (line 2355)
        kwargs_577837 = {}
        # Getting the type of 'np' (line 2355)
        np_577832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 28), 'np', False)
        # Obtaining the member 'resize' of a type (line 2355)
        resize_577833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2355, 28), np_577832, 'resize')
        # Calling resize(args, kwargs) (line 2355)
        resize_call_result_577838 = invoke(stypy.reporting.localization.Localization(__file__, 2355, 28), resize_577833, *[x_577834, shape_577836], **kwargs_577837)
        
        # Processing the call keyword arguments (line 2355)
        # Getting the type of 'nomask' (line 2355)
        nomask_577839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 56), 'nomask', False)
        keyword_577840 = nomask_577839
        kwargs_577841 = {'mask': keyword_577840}
        # Getting the type of 'ma' (line 2355)
        ma_577830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 19), 'ma', False)
        # Obtaining the member 'array' of a type (line 2355)
        array_577831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2355, 19), ma_577830, 'array')
        # Calling array(args, kwargs) (line 2355)
        array_call_result_577842 = invoke(stypy.reporting.localization.Localization(__file__, 2355, 19), array_577831, *[resize_call_result_577838], **kwargs_577841)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2355, 12), 'stypy_return_type', array_call_result_577842)
        # SSA join for if statement (line 2354)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2352)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 2356):
        
        # Assigning a BinOp to a Name (line 2356):
        # Getting the type of 'n' (line 2356)
        n_577843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 17), 'n')
        # Getting the type of 'p' (line 2356)
        p_577844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 19), 'p')
        # Applying the binary operator '*' (line 2356)
        result_mul_577845 = python_operator(stypy.reporting.localization.Localization(__file__, 2356, 17), '*', n_577843, p_577844)
        
        # Getting the type of 'm' (line 2356)
        m_577846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 23), 'm')
        # Applying the binary operator '+' (line 2356)
        result_add_577847 = python_operator(stypy.reporting.localization.Localization(__file__, 2356, 17), '+', result_mul_577845, m_577846)
        
        # Assigning a type to the variable 'aleph' (line 2356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2356, 8), 'aleph', result_add_577847)
        
        # Assigning a Call to a Name (line 2357):
        
        # Assigning a Call to a Name (line 2357):
        
        # Call to astype(...): (line 2357)
        # Processing the call arguments (line 2357)
        # Getting the type of 'int' (line 2357)
        int_577861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 48), 'int', False)
        # Processing the call keyword arguments (line 2357)
        kwargs_577862 = {}
        
        # Call to floor(...): (line 2357)
        # Processing the call arguments (line 2357)
        
        # Call to clip(...): (line 2357)
        # Processing the call arguments (line 2357)
        int_577852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2357, 32), 'int')
        # Getting the type of 'n' (line 2357)
        n_577853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 35), 'n', False)
        int_577854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2357, 37), 'int')
        # Applying the binary operator '-' (line 2357)
        result_sub_577855 = python_operator(stypy.reporting.localization.Localization(__file__, 2357, 35), '-', n_577853, int_577854)
        
        # Processing the call keyword arguments (line 2357)
        kwargs_577856 = {}
        # Getting the type of 'aleph' (line 2357)
        aleph_577850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 21), 'aleph', False)
        # Obtaining the member 'clip' of a type (line 2357)
        clip_577851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2357, 21), aleph_577850, 'clip')
        # Calling clip(args, kwargs) (line 2357)
        clip_call_result_577857 = invoke(stypy.reporting.localization.Localization(__file__, 2357, 21), clip_577851, *[int_577852, result_sub_577855], **kwargs_577856)
        
        # Processing the call keyword arguments (line 2357)
        kwargs_577858 = {}
        # Getting the type of 'np' (line 2357)
        np_577848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 12), 'np', False)
        # Obtaining the member 'floor' of a type (line 2357)
        floor_577849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2357, 12), np_577848, 'floor')
        # Calling floor(args, kwargs) (line 2357)
        floor_call_result_577859 = invoke(stypy.reporting.localization.Localization(__file__, 2357, 12), floor_577849, *[clip_call_result_577857], **kwargs_577858)
        
        # Obtaining the member 'astype' of a type (line 2357)
        astype_577860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2357, 12), floor_call_result_577859, 'astype')
        # Calling astype(args, kwargs) (line 2357)
        astype_call_result_577863 = invoke(stypy.reporting.localization.Localization(__file__, 2357, 12), astype_577860, *[int_577861], **kwargs_577862)
        
        # Assigning a type to the variable 'k' (line 2357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'k', astype_call_result_577863)
        
        # Assigning a Call to a Name (line 2358):
        
        # Assigning a Call to a Name (line 2358):
        
        # Call to clip(...): (line 2358)
        # Processing the call arguments (line 2358)
        int_577868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2358, 31), 'int')
        int_577869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2358, 33), 'int')
        # Processing the call keyword arguments (line 2358)
        kwargs_577870 = {}
        # Getting the type of 'aleph' (line 2358)
        aleph_577864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 17), 'aleph', False)
        # Getting the type of 'k' (line 2358)
        k_577865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 23), 'k', False)
        # Applying the binary operator '-' (line 2358)
        result_sub_577866 = python_operator(stypy.reporting.localization.Localization(__file__, 2358, 17), '-', aleph_577864, k_577865)
        
        # Obtaining the member 'clip' of a type (line 2358)
        clip_577867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2358, 17), result_sub_577866, 'clip')
        # Calling clip(args, kwargs) (line 2358)
        clip_call_result_577871 = invoke(stypy.reporting.localization.Localization(__file__, 2358, 17), clip_577867, *[int_577868, int_577869], **kwargs_577870)
        
        # Assigning a type to the variable 'gamma' (line 2358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2358, 8), 'gamma', clip_call_result_577871)
        float_577872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2359, 16), 'float')
        # Getting the type of 'gamma' (line 2359)
        gamma_577873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 19), 'gamma')
        # Applying the binary operator '-' (line 2359)
        result_sub_577874 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 16), '-', float_577872, gamma_577873)
        
        
        # Obtaining the type of the subscript
        
        # Call to tolist(...): (line 2359)
        # Processing the call keyword arguments (line 2359)
        kwargs_577879 = {}
        # Getting the type of 'k' (line 2359)
        k_577875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 29), 'k', False)
        int_577876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2359, 31), 'int')
        # Applying the binary operator '-' (line 2359)
        result_sub_577877 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 29), '-', k_577875, int_577876)
        
        # Obtaining the member 'tolist' of a type (line 2359)
        tolist_577878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2359, 29), result_sub_577877, 'tolist')
        # Calling tolist(args, kwargs) (line 2359)
        tolist_call_result_577880 = invoke(stypy.reporting.localization.Localization(__file__, 2359, 29), tolist_577878, *[], **kwargs_577879)
        
        # Getting the type of 'x' (line 2359)
        x_577881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 26), 'x')
        # Obtaining the member '__getitem__' of a type (line 2359)
        getitem___577882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2359, 26), x_577881, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2359)
        subscript_call_result_577883 = invoke(stypy.reporting.localization.Localization(__file__, 2359, 26), getitem___577882, tolist_call_result_577880)
        
        # Applying the binary operator '*' (line 2359)
        result_mul_577884 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 15), '*', result_sub_577874, subscript_call_result_577883)
        
        # Getting the type of 'gamma' (line 2359)
        gamma_577885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 46), 'gamma')
        
        # Obtaining the type of the subscript
        
        # Call to tolist(...): (line 2359)
        # Processing the call keyword arguments (line 2359)
        kwargs_577888 = {}
        # Getting the type of 'k' (line 2359)
        k_577886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 54), 'k', False)
        # Obtaining the member 'tolist' of a type (line 2359)
        tolist_577887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2359, 54), k_577886, 'tolist')
        # Calling tolist(args, kwargs) (line 2359)
        tolist_call_result_577889 = invoke(stypy.reporting.localization.Localization(__file__, 2359, 54), tolist_577887, *[], **kwargs_577888)
        
        # Getting the type of 'x' (line 2359)
        x_577890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 52), 'x')
        # Obtaining the member '__getitem__' of a type (line 2359)
        getitem___577891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2359, 52), x_577890, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2359)
        subscript_call_result_577892 = invoke(stypy.reporting.localization.Localization(__file__, 2359, 52), getitem___577891, tolist_call_result_577889)
        
        # Applying the binary operator '*' (line 2359)
        result_mul_577893 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 46), '*', gamma_577885, subscript_call_result_577892)
        
        # Applying the binary operator '+' (line 2359)
        result_add_577894 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 15), '+', result_mul_577884, result_mul_577893)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2359, 8), 'stypy_return_type', result_add_577894)
        
        # ################# End of '_quantiles1D(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_quantiles1D' in the type store
        # Getting the type of 'stypy_return_type' (line 2349)
        stypy_return_type_577895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_577895)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_quantiles1D'
        return stypy_return_type_577895

    # Assigning a type to the variable '_quantiles1D' (line 2349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2349, 4), '_quantiles1D', _quantiles1D)
    
    # Assigning a Call to a Name (line 2361):
    
    # Assigning a Call to a Name (line 2361):
    
    # Call to array(...): (line 2361)
    # Processing the call arguments (line 2361)
    # Getting the type of 'a' (line 2361)
    a_577898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2361, 20), 'a', False)
    # Processing the call keyword arguments (line 2361)
    # Getting the type of 'False' (line 2361)
    False_577899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2361, 28), 'False', False)
    keyword_577900 = False_577899
    kwargs_577901 = {'copy': keyword_577900}
    # Getting the type of 'ma' (line 2361)
    ma_577896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2361, 11), 'ma', False)
    # Obtaining the member 'array' of a type (line 2361)
    array_577897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2361, 11), ma_577896, 'array')
    # Calling array(args, kwargs) (line 2361)
    array_call_result_577902 = invoke(stypy.reporting.localization.Localization(__file__, 2361, 11), array_577897, *[a_577898], **kwargs_577901)
    
    # Assigning a type to the variable 'data' (line 2361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2361, 4), 'data', array_call_result_577902)
    
    
    # Getting the type of 'data' (line 2362)
    data_577903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 7), 'data')
    # Obtaining the member 'ndim' of a type (line 2362)
    ndim_577904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2362, 7), data_577903, 'ndim')
    int_577905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2362, 19), 'int')
    # Applying the binary operator '>' (line 2362)
    result_gt_577906 = python_operator(stypy.reporting.localization.Localization(__file__, 2362, 7), '>', ndim_577904, int_577905)
    
    # Testing the type of an if condition (line 2362)
    if_condition_577907 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2362, 4), result_gt_577906)
    # Assigning a type to the variable 'if_condition_577907' (line 2362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2362, 4), 'if_condition_577907', if_condition_577907)
    # SSA begins for if statement (line 2362)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 2363)
    # Processing the call arguments (line 2363)
    str_577909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2363, 24), 'str', 'Array should be 2D at most !')
    # Processing the call keyword arguments (line 2363)
    kwargs_577910 = {}
    # Getting the type of 'TypeError' (line 2363)
    TypeError_577908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 2363)
    TypeError_call_result_577911 = invoke(stypy.reporting.localization.Localization(__file__, 2363, 14), TypeError_577908, *[str_577909], **kwargs_577910)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2363, 8), TypeError_call_result_577911, 'raise parameter', BaseException)
    # SSA join for if statement (line 2362)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'limit' (line 2365)
    limit_577912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 7), 'limit')
    # Testing the type of an if condition (line 2365)
    if_condition_577913 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2365, 4), limit_577912)
    # Assigning a type to the variable 'if_condition_577913' (line 2365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'if_condition_577913', if_condition_577913)
    # SSA begins for if statement (line 2365)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2366):
    
    # Assigning a BinOp to a Name (line 2366):
    
    
    # Obtaining the type of the subscript
    int_577914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2366, 27), 'int')
    # Getting the type of 'limit' (line 2366)
    limit_577915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 21), 'limit')
    # Obtaining the member '__getitem__' of a type (line 2366)
    getitem___577916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2366, 21), limit_577915, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2366)
    subscript_call_result_577917 = invoke(stypy.reporting.localization.Localization(__file__, 2366, 21), getitem___577916, int_577914)
    
    # Getting the type of 'data' (line 2366)
    data_577918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 32), 'data')
    # Applying the binary operator '<' (line 2366)
    result_lt_577919 = python_operator(stypy.reporting.localization.Localization(__file__, 2366, 21), '<', subscript_call_result_577917, data_577918)
    
    
    # Getting the type of 'data' (line 2366)
    data_577920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 41), 'data')
    
    # Obtaining the type of the subscript
    int_577921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2366, 54), 'int')
    # Getting the type of 'limit' (line 2366)
    limit_577922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 48), 'limit')
    # Obtaining the member '__getitem__' of a type (line 2366)
    getitem___577923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2366, 48), limit_577922, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2366)
    subscript_call_result_577924 = invoke(stypy.reporting.localization.Localization(__file__, 2366, 48), getitem___577923, int_577921)
    
    # Applying the binary operator '<' (line 2366)
    result_lt_577925 = python_operator(stypy.reporting.localization.Localization(__file__, 2366, 41), '<', data_577920, subscript_call_result_577924)
    
    # Applying the binary operator '&' (line 2366)
    result_and__577926 = python_operator(stypy.reporting.localization.Localization(__file__, 2366, 20), '&', result_lt_577919, result_lt_577925)
    
    # Assigning a type to the variable 'condition' (line 2366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2366, 8), 'condition', result_and__577926)
    
    # Assigning a Name to a Subscript (line 2367):
    
    # Assigning a Name to a Subscript (line 2367):
    # Getting the type of 'masked' (line 2367)
    masked_577927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 40), 'masked')
    # Getting the type of 'data' (line 2367)
    data_577928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 8), 'data')
    
    
    # Call to filled(...): (line 2367)
    # Processing the call arguments (line 2367)
    # Getting the type of 'True' (line 2367)
    True_577931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 31), 'True', False)
    # Processing the call keyword arguments (line 2367)
    kwargs_577932 = {}
    # Getting the type of 'condition' (line 2367)
    condition_577929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 14), 'condition', False)
    # Obtaining the member 'filled' of a type (line 2367)
    filled_577930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2367, 14), condition_577929, 'filled')
    # Calling filled(args, kwargs) (line 2367)
    filled_call_result_577933 = invoke(stypy.reporting.localization.Localization(__file__, 2367, 14), filled_577930, *[True_577931], **kwargs_577932)
    
    # Applying the '~' unary operator (line 2367)
    result_inv_577934 = python_operator(stypy.reporting.localization.Localization(__file__, 2367, 13), '~', filled_call_result_577933)
    
    # Storing an element on a container (line 2367)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2367, 8), data_577928, (result_inv_577934, masked_577927))
    # SSA join for if statement (line 2365)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2369):
    
    # Assigning a Call to a Name (line 2369):
    
    # Call to array(...): (line 2369)
    # Processing the call arguments (line 2369)
    # Getting the type of 'prob' (line 2369)
    prob_577937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 17), 'prob', False)
    # Processing the call keyword arguments (line 2369)
    # Getting the type of 'False' (line 2369)
    False_577938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 28), 'False', False)
    keyword_577939 = False_577938
    int_577940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2369, 41), 'int')
    keyword_577941 = int_577940
    kwargs_577942 = {'copy': keyword_577939, 'ndmin': keyword_577941}
    # Getting the type of 'np' (line 2369)
    np_577935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 2369)
    array_577936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2369, 8), np_577935, 'array')
    # Calling array(args, kwargs) (line 2369)
    array_call_result_577943 = invoke(stypy.reporting.localization.Localization(__file__, 2369, 8), array_577936, *[prob_577937], **kwargs_577942)
    
    # Assigning a type to the variable 'p' (line 2369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 4), 'p', array_call_result_577943)
    
    # Assigning a BinOp to a Name (line 2370):
    
    # Assigning a BinOp to a Name (line 2370):
    # Getting the type of 'alphap' (line 2370)
    alphap_577944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 8), 'alphap')
    # Getting the type of 'p' (line 2370)
    p_577945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 17), 'p')
    float_577946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2370, 20), 'float')
    # Getting the type of 'alphap' (line 2370)
    alphap_577947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 23), 'alphap')
    # Applying the binary operator '-' (line 2370)
    result_sub_577948 = python_operator(stypy.reporting.localization.Localization(__file__, 2370, 20), '-', float_577946, alphap_577947)
    
    # Getting the type of 'betap' (line 2370)
    betap_577949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 30), 'betap')
    # Applying the binary operator '-' (line 2370)
    result_sub_577950 = python_operator(stypy.reporting.localization.Localization(__file__, 2370, 29), '-', result_sub_577948, betap_577949)
    
    # Applying the binary operator '*' (line 2370)
    result_mul_577951 = python_operator(stypy.reporting.localization.Localization(__file__, 2370, 17), '*', p_577945, result_sub_577950)
    
    # Applying the binary operator '+' (line 2370)
    result_add_577952 = python_operator(stypy.reporting.localization.Localization(__file__, 2370, 8), '+', alphap_577944, result_mul_577951)
    
    # Assigning a type to the variable 'm' (line 2370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2370, 4), 'm', result_add_577952)
    
    # Type idiom detected: calculating its left and rigth part (line 2372)
    # Getting the type of 'axis' (line 2372)
    axis_577953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 8), 'axis')
    # Getting the type of 'None' (line 2372)
    None_577954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 16), 'None')
    
    (may_be_577955, more_types_in_union_577956) = may_be_none(axis_577953, None_577954)

    if may_be_577955:

        if more_types_in_union_577956:
            # Runtime conditional SSA (line 2372)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to _quantiles1D(...): (line 2373)
        # Processing the call arguments (line 2373)
        # Getting the type of 'data' (line 2373)
        data_577958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 28), 'data', False)
        # Getting the type of 'm' (line 2373)
        m_577959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 34), 'm', False)
        # Getting the type of 'p' (line 2373)
        p_577960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 37), 'p', False)
        # Processing the call keyword arguments (line 2373)
        kwargs_577961 = {}
        # Getting the type of '_quantiles1D' (line 2373)
        _quantiles1D_577957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 15), '_quantiles1D', False)
        # Calling _quantiles1D(args, kwargs) (line 2373)
        _quantiles1D_call_result_577962 = invoke(stypy.reporting.localization.Localization(__file__, 2373, 15), _quantiles1D_577957, *[data_577958, m_577959, p_577960], **kwargs_577961)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2373, 8), 'stypy_return_type', _quantiles1D_call_result_577962)

        if more_types_in_union_577956:
            # SSA join for if statement (line 2372)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to apply_along_axis(...): (line 2375)
    # Processing the call arguments (line 2375)
    # Getting the type of '_quantiles1D' (line 2375)
    _quantiles1D_577965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 31), '_quantiles1D', False)
    # Getting the type of 'axis' (line 2375)
    axis_577966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 45), 'axis', False)
    # Getting the type of 'data' (line 2375)
    data_577967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 51), 'data', False)
    # Getting the type of 'm' (line 2375)
    m_577968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 57), 'm', False)
    # Getting the type of 'p' (line 2375)
    p_577969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 60), 'p', False)
    # Processing the call keyword arguments (line 2375)
    kwargs_577970 = {}
    # Getting the type of 'ma' (line 2375)
    ma_577963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 11), 'ma', False)
    # Obtaining the member 'apply_along_axis' of a type (line 2375)
    apply_along_axis_577964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2375, 11), ma_577963, 'apply_along_axis')
    # Calling apply_along_axis(args, kwargs) (line 2375)
    apply_along_axis_call_result_577971 = invoke(stypy.reporting.localization.Localization(__file__, 2375, 11), apply_along_axis_577964, *[_quantiles1D_577965, axis_577966, data_577967, m_577968, p_577969], **kwargs_577970)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2375, 4), 'stypy_return_type', apply_along_axis_call_result_577971)
    
    # ################# End of 'mquantiles(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mquantiles' in the type store
    # Getting the type of 'stypy_return_type' (line 2250)
    stypy_return_type_577972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_577972)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mquantiles'
    return stypy_return_type_577972

# Assigning a type to the variable 'mquantiles' (line 2250)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2250, 0), 'mquantiles', mquantiles)

@norecursion
def scoreatpercentile(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 2378)
    tuple_577973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2378, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2378)
    
    float_577974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2378, 50), 'float')
    float_577975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2378, 60), 'float')
    defaults = [tuple_577973, float_577974, float_577975]
    # Create a new context for function 'scoreatpercentile'
    module_type_store = module_type_store.open_function_context('scoreatpercentile', 2378, 0, False)
    
    # Passed parameters checking function
    scoreatpercentile.stypy_localization = localization
    scoreatpercentile.stypy_type_of_self = None
    scoreatpercentile.stypy_type_store = module_type_store
    scoreatpercentile.stypy_function_name = 'scoreatpercentile'
    scoreatpercentile.stypy_param_names_list = ['data', 'per', 'limit', 'alphap', 'betap']
    scoreatpercentile.stypy_varargs_param_name = None
    scoreatpercentile.stypy_kwargs_param_name = None
    scoreatpercentile.stypy_call_defaults = defaults
    scoreatpercentile.stypy_call_varargs = varargs
    scoreatpercentile.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'scoreatpercentile', ['data', 'per', 'limit', 'alphap', 'betap'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'scoreatpercentile', localization, ['data', 'per', 'limit', 'alphap', 'betap'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'scoreatpercentile(...)' code ##################

    str_577976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2384, (-1)), 'str', "Calculate the score at the given 'per' percentile of the\n    sequence a.  For example, the score at per=50 is the median.\n\n    This function is a shortcut to mquantile\n\n    ")
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'per' (line 2385)
    per_577977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 8), 'per')
    int_577978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2385, 14), 'int')
    # Applying the binary operator '<' (line 2385)
    result_lt_577979 = python_operator(stypy.reporting.localization.Localization(__file__, 2385, 8), '<', per_577977, int_577978)
    
    
    # Getting the type of 'per' (line 2385)
    per_577980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 21), 'per')
    float_577981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2385, 27), 'float')
    # Applying the binary operator '>' (line 2385)
    result_gt_577982 = python_operator(stypy.reporting.localization.Localization(__file__, 2385, 21), '>', per_577980, float_577981)
    
    # Applying the binary operator 'or' (line 2385)
    result_or_keyword_577983 = python_operator(stypy.reporting.localization.Localization(__file__, 2385, 7), 'or', result_lt_577979, result_gt_577982)
    
    # Testing the type of an if condition (line 2385)
    if_condition_577984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2385, 4), result_or_keyword_577983)
    # Assigning a type to the variable 'if_condition_577984' (line 2385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2385, 4), 'if_condition_577984', if_condition_577984)
    # SSA begins for if statement (line 2385)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2386)
    # Processing the call arguments (line 2386)
    str_577986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2386, 25), 'str', 'The percentile should be between 0. and 100. ! (got %s)')
    # Getting the type of 'per' (line 2387)
    per_577987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 39), 'per', False)
    # Applying the binary operator '%' (line 2386)
    result_mod_577988 = python_operator(stypy.reporting.localization.Localization(__file__, 2386, 25), '%', str_577986, per_577987)
    
    # Processing the call keyword arguments (line 2386)
    kwargs_577989 = {}
    # Getting the type of 'ValueError' (line 2386)
    ValueError_577985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2386)
    ValueError_call_result_577990 = invoke(stypy.reporting.localization.Localization(__file__, 2386, 14), ValueError_577985, *[result_mod_577988], **kwargs_577989)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2386, 8), ValueError_call_result_577990, 'raise parameter', BaseException)
    # SSA join for if statement (line 2385)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to squeeze(...): (line 2389)
    # Processing the call keyword arguments (line 2389)
    kwargs_578009 = {}
    
    # Call to mquantiles(...): (line 2389)
    # Processing the call arguments (line 2389)
    # Getting the type of 'data' (line 2389)
    data_577992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 22), 'data', False)
    # Processing the call keyword arguments (line 2389)
    
    # Obtaining an instance of the builtin type 'list' (line 2389)
    list_577993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2389, 33), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2389)
    # Adding element type (line 2389)
    # Getting the type of 'per' (line 2389)
    per_577994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 34), 'per', False)
    float_577995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2389, 38), 'float')
    # Applying the binary operator 'div' (line 2389)
    result_div_577996 = python_operator(stypy.reporting.localization.Localization(__file__, 2389, 34), 'div', per_577994, float_577995)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2389, 33), list_577993, result_div_577996)
    
    keyword_577997 = list_577993
    # Getting the type of 'alphap' (line 2389)
    alphap_577998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 52), 'alphap', False)
    keyword_577999 = alphap_577998
    # Getting the type of 'betap' (line 2389)
    betap_578000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 66), 'betap', False)
    keyword_578001 = betap_578000
    # Getting the type of 'limit' (line 2390)
    limit_578002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 28), 'limit', False)
    keyword_578003 = limit_578002
    int_578004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2390, 40), 'int')
    keyword_578005 = int_578004
    kwargs_578006 = {'alphap': keyword_577999, 'axis': keyword_578005, 'limit': keyword_578003, 'prob': keyword_577997, 'betap': keyword_578001}
    # Getting the type of 'mquantiles' (line 2389)
    mquantiles_577991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 11), 'mquantiles', False)
    # Calling mquantiles(args, kwargs) (line 2389)
    mquantiles_call_result_578007 = invoke(stypy.reporting.localization.Localization(__file__, 2389, 11), mquantiles_577991, *[data_577992], **kwargs_578006)
    
    # Obtaining the member 'squeeze' of a type (line 2389)
    squeeze_578008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2389, 11), mquantiles_call_result_578007, 'squeeze')
    # Calling squeeze(args, kwargs) (line 2389)
    squeeze_call_result_578010 = invoke(stypy.reporting.localization.Localization(__file__, 2389, 11), squeeze_578008, *[], **kwargs_578009)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2389, 4), 'stypy_return_type', squeeze_call_result_578010)
    
    # ################# End of 'scoreatpercentile(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'scoreatpercentile' in the type store
    # Getting the type of 'stypy_return_type' (line 2378)
    stypy_return_type_578011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_578011)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'scoreatpercentile'
    return stypy_return_type_578011

# Assigning a type to the variable 'scoreatpercentile' (line 2378)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2378, 0), 'scoreatpercentile', scoreatpercentile)

@norecursion
def plotting_positions(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_578012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2393, 35), 'float')
    float_578013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2393, 45), 'float')
    defaults = [float_578012, float_578013]
    # Create a new context for function 'plotting_positions'
    module_type_store = module_type_store.open_function_context('plotting_positions', 2393, 0, False)
    
    # Passed parameters checking function
    plotting_positions.stypy_localization = localization
    plotting_positions.stypy_type_of_self = None
    plotting_positions.stypy_type_store = module_type_store
    plotting_positions.stypy_function_name = 'plotting_positions'
    plotting_positions.stypy_param_names_list = ['data', 'alpha', 'beta']
    plotting_positions.stypy_varargs_param_name = None
    plotting_positions.stypy_kwargs_param_name = None
    plotting_positions.stypy_call_defaults = defaults
    plotting_positions.stypy_call_varargs = varargs
    plotting_positions.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'plotting_positions', ['data', 'alpha', 'beta'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'plotting_positions', localization, ['data', 'alpha', 'beta'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'plotting_positions(...)' code ##################

    str_578014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2434, (-1)), 'str', "\n    Returns plotting positions (or empirical percentile points) for the data.\n\n    Plotting positions are defined as ``(i-alpha)/(n+1-alpha-beta)``, where:\n        - i is the rank order statistics\n        - n is the number of unmasked values along the given axis\n        - `alpha` and `beta` are two parameters.\n\n    Typical values for `alpha` and `beta` are:\n        - (0,1)    : ``p(k) = k/n``, linear interpolation of cdf (R, type 4)\n        - (.5,.5)  : ``p(k) = (k-1/2.)/n``, piecewise linear function\n          (R, type 5)\n        - (0,0)    : ``p(k) = k/(n+1)``, Weibull (R type 6)\n        - (1,1)    : ``p(k) = (k-1)/(n-1)``, in this case,\n          ``p(k) = mode[F(x[k])]``. That's R default (R type 7)\n        - (1/3,1/3): ``p(k) = (k-1/3)/(n+1/3)``, then\n          ``p(k) ~ median[F(x[k])]``.\n          The resulting quantile estimates are approximately median-unbiased\n          regardless of the distribution of x. (R type 8)\n        - (3/8,3/8): ``p(k) = (k-3/8)/(n+1/4)``, Blom.\n          The resulting quantile estimates are approximately unbiased\n          if x is normally distributed (R type 9)\n        - (.4,.4)  : approximately quantile unbiased (Cunnane)\n        - (.35,.35): APL, used with PWM\n        - (.3175, .3175): used in scipy.stats.probplot\n\n    Parameters\n    ----------\n    data : array_like\n        Input data, as a sequence or array of dimension at most 2.\n    alpha : float, optional\n        Plotting positions parameter. Default is 0.4.\n    beta : float, optional\n        Plotting positions parameter. Default is 0.4.\n\n    Returns\n    -------\n    positions : MaskedArray\n        The calculated plotting positions.\n\n    ")
    
    # Assigning a Call to a Name (line 2435):
    
    # Assigning a Call to a Name (line 2435):
    
    # Call to reshape(...): (line 2435)
    # Processing the call arguments (line 2435)
    int_578023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 46), 'int')
    int_578024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 48), 'int')
    # Processing the call keyword arguments (line 2435)
    kwargs_578025 = {}
    
    # Call to array(...): (line 2435)
    # Processing the call arguments (line 2435)
    # Getting the type of 'data' (line 2435)
    data_578017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 20), 'data', False)
    # Processing the call keyword arguments (line 2435)
    # Getting the type of 'False' (line 2435)
    False_578018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 31), 'False', False)
    keyword_578019 = False_578018
    kwargs_578020 = {'copy': keyword_578019}
    # Getting the type of 'ma' (line 2435)
    ma_578015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 11), 'ma', False)
    # Obtaining the member 'array' of a type (line 2435)
    array_578016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2435, 11), ma_578015, 'array')
    # Calling array(args, kwargs) (line 2435)
    array_call_result_578021 = invoke(stypy.reporting.localization.Localization(__file__, 2435, 11), array_578016, *[data_578017], **kwargs_578020)
    
    # Obtaining the member 'reshape' of a type (line 2435)
    reshape_578022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2435, 11), array_call_result_578021, 'reshape')
    # Calling reshape(args, kwargs) (line 2435)
    reshape_call_result_578026 = invoke(stypy.reporting.localization.Localization(__file__, 2435, 11), reshape_578022, *[int_578023, int_578024], **kwargs_578025)
    
    # Assigning a type to the variable 'data' (line 2435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2435, 4), 'data', reshape_call_result_578026)
    
    # Assigning a Call to a Name (line 2436):
    
    # Assigning a Call to a Name (line 2436):
    
    # Call to count(...): (line 2436)
    # Processing the call keyword arguments (line 2436)
    kwargs_578029 = {}
    # Getting the type of 'data' (line 2436)
    data_578027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 8), 'data', False)
    # Obtaining the member 'count' of a type (line 2436)
    count_578028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2436, 8), data_578027, 'count')
    # Calling count(args, kwargs) (line 2436)
    count_call_result_578030 = invoke(stypy.reporting.localization.Localization(__file__, 2436, 8), count_578028, *[], **kwargs_578029)
    
    # Assigning a type to the variable 'n' (line 2436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2436, 4), 'n', count_call_result_578030)
    
    # Assigning a Call to a Name (line 2437):
    
    # Assigning a Call to a Name (line 2437):
    
    # Call to empty(...): (line 2437)
    # Processing the call arguments (line 2437)
    # Getting the type of 'data' (line 2437)
    data_578033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 21), 'data', False)
    # Obtaining the member 'size' of a type (line 2437)
    size_578034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2437, 21), data_578033, 'size')
    # Processing the call keyword arguments (line 2437)
    # Getting the type of 'float' (line 2437)
    float_578035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 38), 'float', False)
    keyword_578036 = float_578035
    kwargs_578037 = {'dtype': keyword_578036}
    # Getting the type of 'np' (line 2437)
    np_578031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 12), 'np', False)
    # Obtaining the member 'empty' of a type (line 2437)
    empty_578032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2437, 12), np_578031, 'empty')
    # Calling empty(args, kwargs) (line 2437)
    empty_call_result_578038 = invoke(stypy.reporting.localization.Localization(__file__, 2437, 12), empty_578032, *[size_578034], **kwargs_578037)
    
    # Assigning a type to the variable 'plpos' (line 2437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2437, 4), 'plpos', empty_call_result_578038)
    
    # Assigning a Num to a Subscript (line 2438):
    
    # Assigning a Num to a Subscript (line 2438):
    int_578039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2438, 16), 'int')
    # Getting the type of 'plpos' (line 2438)
    plpos_578040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 4), 'plpos')
    # Getting the type of 'n' (line 2438)
    n_578041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 10), 'n')
    slice_578042 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2438, 4), n_578041, None, None)
    # Storing an element on a container (line 2438)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2438, 4), plpos_578040, (slice_578042, int_578039))
    
    # Assigning a BinOp to a Subscript (line 2439):
    
    # Assigning a BinOp to a Subscript (line 2439):
    
    # Call to arange(...): (line 2439)
    # Processing the call arguments (line 2439)
    int_578045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2439, 53), 'int')
    # Getting the type of 'n' (line 2439)
    n_578046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 56), 'n', False)
    int_578047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2439, 58), 'int')
    # Applying the binary operator '+' (line 2439)
    result_add_578048 = python_operator(stypy.reporting.localization.Localization(__file__, 2439, 56), '+', n_578046, int_578047)
    
    # Processing the call keyword arguments (line 2439)
    kwargs_578049 = {}
    # Getting the type of 'np' (line 2439)
    np_578043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 43), 'np', False)
    # Obtaining the member 'arange' of a type (line 2439)
    arange_578044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 43), np_578043, 'arange')
    # Calling arange(args, kwargs) (line 2439)
    arange_call_result_578050 = invoke(stypy.reporting.localization.Localization(__file__, 2439, 43), arange_578044, *[int_578045, result_add_578048], **kwargs_578049)
    
    # Getting the type of 'alpha' (line 2439)
    alpha_578051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 63), 'alpha')
    # Applying the binary operator '-' (line 2439)
    result_sub_578052 = python_operator(stypy.reporting.localization.Localization(__file__, 2439, 43), '-', arange_call_result_578050, alpha_578051)
    
    # Getting the type of 'n' (line 2440)
    n_578053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 43), 'n')
    float_578054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2440, 47), 'float')
    # Applying the binary operator '+' (line 2440)
    result_add_578055 = python_operator(stypy.reporting.localization.Localization(__file__, 2440, 43), '+', n_578053, float_578054)
    
    # Getting the type of 'alpha' (line 2440)
    alpha_578056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 53), 'alpha')
    # Applying the binary operator '-' (line 2440)
    result_sub_578057 = python_operator(stypy.reporting.localization.Localization(__file__, 2440, 51), '-', result_add_578055, alpha_578056)
    
    # Getting the type of 'beta' (line 2440)
    beta_578058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 61), 'beta')
    # Applying the binary operator '-' (line 2440)
    result_sub_578059 = python_operator(stypy.reporting.localization.Localization(__file__, 2440, 59), '-', result_sub_578057, beta_578058)
    
    # Applying the binary operator 'div' (line 2439)
    result_div_578060 = python_operator(stypy.reporting.localization.Localization(__file__, 2439, 42), 'div', result_sub_578052, result_sub_578059)
    
    # Getting the type of 'plpos' (line 2439)
    plpos_578061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 4), 'plpos')
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 2439)
    n_578062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 35), 'n')
    slice_578063 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2439, 10), None, n_578062, None)
    
    # Call to argsort(...): (line 2439)
    # Processing the call keyword arguments (line 2439)
    # Getting the type of 'None' (line 2439)
    None_578066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 28), 'None', False)
    keyword_578067 = None_578066
    kwargs_578068 = {'axis': keyword_578067}
    # Getting the type of 'data' (line 2439)
    data_578064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 10), 'data', False)
    # Obtaining the member 'argsort' of a type (line 2439)
    argsort_578065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 10), data_578064, 'argsort')
    # Calling argsort(args, kwargs) (line 2439)
    argsort_call_result_578069 = invoke(stypy.reporting.localization.Localization(__file__, 2439, 10), argsort_578065, *[], **kwargs_578068)
    
    # Obtaining the member '__getitem__' of a type (line 2439)
    getitem___578070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 10), argsort_call_result_578069, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2439)
    subscript_call_result_578071 = invoke(stypy.reporting.localization.Localization(__file__, 2439, 10), getitem___578070, slice_578063)
    
    # Storing an element on a container (line 2439)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2439, 4), plpos_578061, (subscript_call_result_578071, result_div_578060))
    
    # Call to array(...): (line 2441)
    # Processing the call arguments (line 2441)
    # Getting the type of 'plpos' (line 2441)
    plpos_578074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 20), 'plpos', False)
    # Processing the call keyword arguments (line 2441)
    # Getting the type of 'data' (line 2441)
    data_578075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 32), 'data', False)
    # Obtaining the member '_mask' of a type (line 2441)
    _mask_578076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2441, 32), data_578075, '_mask')
    keyword_578077 = _mask_578076
    kwargs_578078 = {'mask': keyword_578077}
    # Getting the type of 'ma' (line 2441)
    ma_578072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 11), 'ma', False)
    # Obtaining the member 'array' of a type (line 2441)
    array_578073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2441, 11), ma_578072, 'array')
    # Calling array(args, kwargs) (line 2441)
    array_call_result_578079 = invoke(stypy.reporting.localization.Localization(__file__, 2441, 11), array_578073, *[plpos_578074], **kwargs_578078)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2441, 4), 'stypy_return_type', array_call_result_578079)
    
    # ################# End of 'plotting_positions(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'plotting_positions' in the type store
    # Getting the type of 'stypy_return_type' (line 2393)
    stypy_return_type_578080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_578080)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'plotting_positions'
    return stypy_return_type_578080

# Assigning a type to the variable 'plotting_positions' (line 2393)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 0), 'plotting_positions', plotting_positions)

# Assigning a Name to a Name (line 2443):

# Assigning a Name to a Name (line 2443):
# Getting the type of 'plotting_positions' (line 2443)
plotting_positions_578081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 8), 'plotting_positions')
# Assigning a type to the variable 'meppf' (line 2443)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2443, 0), 'meppf', plotting_positions_578081)

@norecursion
def obrientransform(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'obrientransform'
    module_type_store = module_type_store.open_function_context('obrientransform', 2446, 0, False)
    
    # Passed parameters checking function
    obrientransform.stypy_localization = localization
    obrientransform.stypy_type_of_self = None
    obrientransform.stypy_type_store = module_type_store
    obrientransform.stypy_function_name = 'obrientransform'
    obrientransform.stypy_param_names_list = []
    obrientransform.stypy_varargs_param_name = 'args'
    obrientransform.stypy_kwargs_param_name = None
    obrientransform.stypy_call_defaults = defaults
    obrientransform.stypy_call_varargs = varargs
    obrientransform.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'obrientransform', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'obrientransform', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'obrientransform(...)' code ##################

    str_578082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2455, (-1)), 'str', '\n    Computes a transform on input data (any number of columns).  Used to\n    test for homogeneity of variance prior to running one-way stats.  Each\n    array in ``*args`` is one level of a factor.  If an `f_oneway()` run on\n    the transformed data and found significant, variances are unequal.   From\n    Maxwell and Delaney, p.112.\n\n    Returns: transformed data for use in an ANOVA\n    ')
    
    # Assigning a Attribute to a Name (line 2456):
    
    # Assigning a Attribute to a Name (line 2456):
    
    # Call to argstoarray(...): (line 2456)
    # Getting the type of 'args' (line 2456)
    args_578084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 24), 'args', False)
    # Processing the call keyword arguments (line 2456)
    kwargs_578085 = {}
    # Getting the type of 'argstoarray' (line 2456)
    argstoarray_578083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 11), 'argstoarray', False)
    # Calling argstoarray(args, kwargs) (line 2456)
    argstoarray_call_result_578086 = invoke(stypy.reporting.localization.Localization(__file__, 2456, 11), argstoarray_578083, *[args_578084], **kwargs_578085)
    
    # Obtaining the member 'T' of a type (line 2456)
    T_578087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2456, 11), argstoarray_call_result_578086, 'T')
    # Assigning a type to the variable 'data' (line 2456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2456, 4), 'data', T_578087)
    
    # Assigning a Call to a Name (line 2457):
    
    # Assigning a Call to a Name (line 2457):
    
    # Call to var(...): (line 2457)
    # Processing the call keyword arguments (line 2457)
    int_578090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2457, 22), 'int')
    keyword_578091 = int_578090
    int_578092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2457, 29), 'int')
    keyword_578093 = int_578092
    kwargs_578094 = {'ddof': keyword_578093, 'axis': keyword_578091}
    # Getting the type of 'data' (line 2457)
    data_578088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2457, 8), 'data', False)
    # Obtaining the member 'var' of a type (line 2457)
    var_578089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2457, 8), data_578088, 'var')
    # Calling var(args, kwargs) (line 2457)
    var_call_result_578095 = invoke(stypy.reporting.localization.Localization(__file__, 2457, 8), var_578089, *[], **kwargs_578094)
    
    # Assigning a type to the variable 'v' (line 2457)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2457, 4), 'v', var_call_result_578095)
    
    # Assigning a Call to a Name (line 2458):
    
    # Assigning a Call to a Name (line 2458):
    
    # Call to mean(...): (line 2458)
    # Processing the call arguments (line 2458)
    int_578098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2458, 18), 'int')
    # Processing the call keyword arguments (line 2458)
    kwargs_578099 = {}
    # Getting the type of 'data' (line 2458)
    data_578096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 8), 'data', False)
    # Obtaining the member 'mean' of a type (line 2458)
    mean_578097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 8), data_578096, 'mean')
    # Calling mean(args, kwargs) (line 2458)
    mean_call_result_578100 = invoke(stypy.reporting.localization.Localization(__file__, 2458, 8), mean_578097, *[int_578098], **kwargs_578099)
    
    # Assigning a type to the variable 'm' (line 2458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 4), 'm', mean_call_result_578100)
    
    # Assigning a Call to a Name (line 2459):
    
    # Assigning a Call to a Name (line 2459):
    
    # Call to astype(...): (line 2459)
    # Processing the call arguments (line 2459)
    # Getting the type of 'float' (line 2459)
    float_578107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2459, 29), 'float', False)
    # Processing the call keyword arguments (line 2459)
    kwargs_578108 = {}
    
    # Call to count(...): (line 2459)
    # Processing the call arguments (line 2459)
    int_578103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2459, 19), 'int')
    # Processing the call keyword arguments (line 2459)
    kwargs_578104 = {}
    # Getting the type of 'data' (line 2459)
    data_578101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2459, 8), 'data', False)
    # Obtaining the member 'count' of a type (line 2459)
    count_578102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2459, 8), data_578101, 'count')
    # Calling count(args, kwargs) (line 2459)
    count_call_result_578105 = invoke(stypy.reporting.localization.Localization(__file__, 2459, 8), count_578102, *[int_578103], **kwargs_578104)
    
    # Obtaining the member 'astype' of a type (line 2459)
    astype_578106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2459, 8), count_call_result_578105, 'astype')
    # Calling astype(args, kwargs) (line 2459)
    astype_call_result_578109 = invoke(stypy.reporting.localization.Localization(__file__, 2459, 8), astype_578106, *[float_578107], **kwargs_578108)
    
    # Assigning a type to the variable 'n' (line 2459)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2459, 4), 'n', astype_call_result_578109)
    
    # Getting the type of 'data' (line 2461)
    data_578110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 4), 'data')
    # Getting the type of 'm' (line 2461)
    m_578111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 12), 'm')
    # Applying the binary operator '-=' (line 2461)
    result_isub_578112 = python_operator(stypy.reporting.localization.Localization(__file__, 2461, 4), '-=', data_578110, m_578111)
    # Assigning a type to the variable 'data' (line 2461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2461, 4), 'data', result_isub_578112)
    
    
    # Getting the type of 'data' (line 2462)
    data_578113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'data')
    int_578114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2462, 13), 'int')
    # Applying the binary operator '**=' (line 2462)
    result_ipow_578115 = python_operator(stypy.reporting.localization.Localization(__file__, 2462, 4), '**=', data_578113, int_578114)
    # Assigning a type to the variable 'data' (line 2462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'data', result_ipow_578115)
    
    
    # Getting the type of 'data' (line 2463)
    data_578116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 4), 'data')
    # Getting the type of 'n' (line 2463)
    n_578117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 13), 'n')
    float_578118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2463, 15), 'float')
    # Applying the binary operator '-' (line 2463)
    result_sub_578119 = python_operator(stypy.reporting.localization.Localization(__file__, 2463, 13), '-', n_578117, float_578118)
    
    # Getting the type of 'n' (line 2463)
    n_578120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 20), 'n')
    # Applying the binary operator '*' (line 2463)
    result_mul_578121 = python_operator(stypy.reporting.localization.Localization(__file__, 2463, 12), '*', result_sub_578119, n_578120)
    
    # Applying the binary operator '*=' (line 2463)
    result_imul_578122 = python_operator(stypy.reporting.localization.Localization(__file__, 2463, 4), '*=', data_578116, result_mul_578121)
    # Assigning a type to the variable 'data' (line 2463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2463, 4), 'data', result_imul_578122)
    
    
    # Getting the type of 'data' (line 2464)
    data_578123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 4), 'data')
    float_578124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2464, 12), 'float')
    # Getting the type of 'v' (line 2464)
    v_578125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 16), 'v')
    # Applying the binary operator '*' (line 2464)
    result_mul_578126 = python_operator(stypy.reporting.localization.Localization(__file__, 2464, 12), '*', float_578124, v_578125)
    
    # Getting the type of 'n' (line 2464)
    n_578127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 19), 'n')
    int_578128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2464, 21), 'int')
    # Applying the binary operator '-' (line 2464)
    result_sub_578129 = python_operator(stypy.reporting.localization.Localization(__file__, 2464, 19), '-', n_578127, int_578128)
    
    # Applying the binary operator '*' (line 2464)
    result_mul_578130 = python_operator(stypy.reporting.localization.Localization(__file__, 2464, 17), '*', result_mul_578126, result_sub_578129)
    
    # Applying the binary operator '-=' (line 2464)
    result_isub_578131 = python_operator(stypy.reporting.localization.Localization(__file__, 2464, 4), '-=', data_578123, result_mul_578130)
    # Assigning a type to the variable 'data' (line 2464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2464, 4), 'data', result_isub_578131)
    
    
    # Getting the type of 'data' (line 2465)
    data_578132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 4), 'data')
    # Getting the type of 'n' (line 2465)
    n_578133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 13), 'n')
    float_578134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2465, 15), 'float')
    # Applying the binary operator '-' (line 2465)
    result_sub_578135 = python_operator(stypy.reporting.localization.Localization(__file__, 2465, 13), '-', n_578133, float_578134)
    
    # Getting the type of 'n' (line 2465)
    n_578136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 20), 'n')
    float_578137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2465, 22), 'float')
    # Applying the binary operator '-' (line 2465)
    result_sub_578138 = python_operator(stypy.reporting.localization.Localization(__file__, 2465, 20), '-', n_578136, float_578137)
    
    # Applying the binary operator '*' (line 2465)
    result_mul_578139 = python_operator(stypy.reporting.localization.Localization(__file__, 2465, 12), '*', result_sub_578135, result_sub_578138)
    
    # Applying the binary operator 'div=' (line 2465)
    result_div_578140 = python_operator(stypy.reporting.localization.Localization(__file__, 2465, 4), 'div=', data_578132, result_mul_578139)
    # Assigning a type to the variable 'data' (line 2465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2465, 4), 'data', result_div_578140)
    
    
    
    
    # Call to allclose(...): (line 2466)
    # Processing the call arguments (line 2466)
    # Getting the type of 'v' (line 2466)
    v_578143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 23), 'v', False)
    
    # Call to mean(...): (line 2466)
    # Processing the call arguments (line 2466)
    int_578146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2466, 35), 'int')
    # Processing the call keyword arguments (line 2466)
    kwargs_578147 = {}
    # Getting the type of 'data' (line 2466)
    data_578144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 25), 'data', False)
    # Obtaining the member 'mean' of a type (line 2466)
    mean_578145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 25), data_578144, 'mean')
    # Calling mean(args, kwargs) (line 2466)
    mean_call_result_578148 = invoke(stypy.reporting.localization.Localization(__file__, 2466, 25), mean_578145, *[int_578146], **kwargs_578147)
    
    # Processing the call keyword arguments (line 2466)
    kwargs_578149 = {}
    # Getting the type of 'ma' (line 2466)
    ma_578141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 11), 'ma', False)
    # Obtaining the member 'allclose' of a type (line 2466)
    allclose_578142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 11), ma_578141, 'allclose')
    # Calling allclose(args, kwargs) (line 2466)
    allclose_call_result_578150 = invoke(stypy.reporting.localization.Localization(__file__, 2466, 11), allclose_578142, *[v_578143, mean_call_result_578148], **kwargs_578149)
    
    # Applying the 'not' unary operator (line 2466)
    result_not__578151 = python_operator(stypy.reporting.localization.Localization(__file__, 2466, 7), 'not', allclose_call_result_578150)
    
    # Testing the type of an if condition (line 2466)
    if_condition_578152 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2466, 4), result_not__578151)
    # Assigning a type to the variable 'if_condition_578152' (line 2466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2466, 4), 'if_condition_578152', if_condition_578152)
    # SSA begins for if statement (line 2466)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2467)
    # Processing the call arguments (line 2467)
    str_578154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2467, 25), 'str', 'Lack of convergence in obrientransform.')
    # Processing the call keyword arguments (line 2467)
    kwargs_578155 = {}
    # Getting the type of 'ValueError' (line 2467)
    ValueError_578153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2467)
    ValueError_call_result_578156 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 14), ValueError_578153, *[str_578154], **kwargs_578155)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2467, 8), ValueError_call_result_578156, 'raise parameter', BaseException)
    # SSA join for if statement (line 2466)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'data' (line 2469)
    data_578157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 11), 'data')
    # Assigning a type to the variable 'stypy_return_type' (line 2469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2469, 4), 'stypy_return_type', data_578157)
    
    # ################# End of 'obrientransform(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'obrientransform' in the type store
    # Getting the type of 'stypy_return_type' (line 2446)
    stypy_return_type_578158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_578158)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'obrientransform'
    return stypy_return_type_578158

# Assigning a type to the variable 'obrientransform' (line 2446)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2446, 0), 'obrientransform', obrientransform)

@norecursion
def sem(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_578159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2472, 16), 'int')
    int_578160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2472, 24), 'int')
    defaults = [int_578159, int_578160]
    # Create a new context for function 'sem'
    module_type_store = module_type_store.open_function_context('sem', 2472, 0, False)
    
    # Passed parameters checking function
    sem.stypy_localization = localization
    sem.stypy_type_of_self = None
    sem.stypy_type_store = module_type_store
    sem.stypy_function_name = 'sem'
    sem.stypy_param_names_list = ['a', 'axis', 'ddof']
    sem.stypy_varargs_param_name = None
    sem.stypy_kwargs_param_name = None
    sem.stypy_call_defaults = defaults
    sem.stypy_call_varargs = varargs
    sem.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sem', ['a', 'axis', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sem', localization, ['a', 'axis', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sem(...)' code ##################

    str_578161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2517, (-1)), 'str', '\n    Calculates the standard error of the mean of the input array.\n\n    Also sometimes called standard error of measurement.\n\n    Parameters\n    ----------\n    a : array_like\n        An array containing the values for which the standard error is\n        returned.\n    axis : int or None, optional\n        If axis is None, ravel `a` first. If axis is an integer, this will be\n        the axis over which to operate. Defaults to 0.\n    ddof : int, optional\n        Delta degrees-of-freedom. How many degrees of freedom to adjust\n        for bias in limited samples relative to the population estimate\n        of variance. Defaults to 1.\n\n    Returns\n    -------\n    s : ndarray or float\n        The standard error of the mean in the sample(s), along the input axis.\n\n    Notes\n    -----\n    The default value for `ddof` changed in scipy 0.15.0 to be consistent with\n    `stats.sem` as well as with the most common definition used (like in the R\n    documentation).\n\n    Examples\n    --------\n    Find standard error along the first axis:\n\n    >>> from scipy import stats\n    >>> a = np.arange(20).reshape(5,4)\n    >>> print(stats.mstats.sem(a))\n    [2.8284271247461903 2.8284271247461903 2.8284271247461903\n     2.8284271247461903]\n\n    Find standard error across the whole array, using n degrees of freedom:\n\n    >>> print(stats.mstats.sem(a, axis=None, ddof=0))\n    1.2893796958227628\n\n    ')
    
    # Assigning a Call to a Tuple (line 2518):
    
    # Assigning a Subscript to a Name (line 2518):
    
    # Obtaining the type of the subscript
    int_578162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2518, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2518)
    # Processing the call arguments (line 2518)
    # Getting the type of 'a' (line 2518)
    a_578164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 27), 'a', False)
    # Getting the type of 'axis' (line 2518)
    axis_578165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 30), 'axis', False)
    # Processing the call keyword arguments (line 2518)
    kwargs_578166 = {}
    # Getting the type of '_chk_asarray' (line 2518)
    _chk_asarray_578163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2518)
    _chk_asarray_call_result_578167 = invoke(stypy.reporting.localization.Localization(__file__, 2518, 14), _chk_asarray_578163, *[a_578164, axis_578165], **kwargs_578166)
    
    # Obtaining the member '__getitem__' of a type (line 2518)
    getitem___578168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2518, 4), _chk_asarray_call_result_578167, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2518)
    subscript_call_result_578169 = invoke(stypy.reporting.localization.Localization(__file__, 2518, 4), getitem___578168, int_578162)
    
    # Assigning a type to the variable 'tuple_var_assignment_571535' (line 2518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2518, 4), 'tuple_var_assignment_571535', subscript_call_result_578169)
    
    # Assigning a Subscript to a Name (line 2518):
    
    # Obtaining the type of the subscript
    int_578170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2518, 4), 'int')
    
    # Call to _chk_asarray(...): (line 2518)
    # Processing the call arguments (line 2518)
    # Getting the type of 'a' (line 2518)
    a_578172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 27), 'a', False)
    # Getting the type of 'axis' (line 2518)
    axis_578173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 30), 'axis', False)
    # Processing the call keyword arguments (line 2518)
    kwargs_578174 = {}
    # Getting the type of '_chk_asarray' (line 2518)
    _chk_asarray_578171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 14), '_chk_asarray', False)
    # Calling _chk_asarray(args, kwargs) (line 2518)
    _chk_asarray_call_result_578175 = invoke(stypy.reporting.localization.Localization(__file__, 2518, 14), _chk_asarray_578171, *[a_578172, axis_578173], **kwargs_578174)
    
    # Obtaining the member '__getitem__' of a type (line 2518)
    getitem___578176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2518, 4), _chk_asarray_call_result_578175, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2518)
    subscript_call_result_578177 = invoke(stypy.reporting.localization.Localization(__file__, 2518, 4), getitem___578176, int_578170)
    
    # Assigning a type to the variable 'tuple_var_assignment_571536' (line 2518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2518, 4), 'tuple_var_assignment_571536', subscript_call_result_578177)
    
    # Assigning a Name to a Name (line 2518):
    # Getting the type of 'tuple_var_assignment_571535' (line 2518)
    tuple_var_assignment_571535_578178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 4), 'tuple_var_assignment_571535')
    # Assigning a type to the variable 'a' (line 2518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2518, 4), 'a', tuple_var_assignment_571535_578178)
    
    # Assigning a Name to a Name (line 2518):
    # Getting the type of 'tuple_var_assignment_571536' (line 2518)
    tuple_var_assignment_571536_578179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 4), 'tuple_var_assignment_571536')
    # Assigning a type to the variable 'axis' (line 2518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2518, 7), 'axis', tuple_var_assignment_571536_578179)
    
    # Assigning a Call to a Name (line 2519):
    
    # Assigning a Call to a Name (line 2519):
    
    # Call to count(...): (line 2519)
    # Processing the call keyword arguments (line 2519)
    # Getting the type of 'axis' (line 2519)
    axis_578182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 21), 'axis', False)
    keyword_578183 = axis_578182
    kwargs_578184 = {'axis': keyword_578183}
    # Getting the type of 'a' (line 2519)
    a_578180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 8), 'a', False)
    # Obtaining the member 'count' of a type (line 2519)
    count_578181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2519, 8), a_578180, 'count')
    # Calling count(args, kwargs) (line 2519)
    count_call_result_578185 = invoke(stypy.reporting.localization.Localization(__file__, 2519, 8), count_578181, *[], **kwargs_578184)
    
    # Assigning a type to the variable 'n' (line 2519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2519, 4), 'n', count_call_result_578185)
    
    # Assigning a BinOp to a Name (line 2520):
    
    # Assigning a BinOp to a Name (line 2520):
    
    # Call to std(...): (line 2520)
    # Processing the call keyword arguments (line 2520)
    # Getting the type of 'axis' (line 2520)
    axis_578188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 19), 'axis', False)
    keyword_578189 = axis_578188
    # Getting the type of 'ddof' (line 2520)
    ddof_578190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 30), 'ddof', False)
    keyword_578191 = ddof_578190
    kwargs_578192 = {'ddof': keyword_578191, 'axis': keyword_578189}
    # Getting the type of 'a' (line 2520)
    a_578186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 8), 'a', False)
    # Obtaining the member 'std' of a type (line 2520)
    std_578187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2520, 8), a_578186, 'std')
    # Calling std(args, kwargs) (line 2520)
    std_call_result_578193 = invoke(stypy.reporting.localization.Localization(__file__, 2520, 8), std_578187, *[], **kwargs_578192)
    
    
    # Call to sqrt(...): (line 2520)
    # Processing the call arguments (line 2520)
    # Getting the type of 'n' (line 2520)
    n_578196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 46), 'n', False)
    # Processing the call keyword arguments (line 2520)
    kwargs_578197 = {}
    # Getting the type of 'ma' (line 2520)
    ma_578194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 38), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 2520)
    sqrt_578195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2520, 38), ma_578194, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2520)
    sqrt_call_result_578198 = invoke(stypy.reporting.localization.Localization(__file__, 2520, 38), sqrt_578195, *[n_578196], **kwargs_578197)
    
    # Applying the binary operator 'div' (line 2520)
    result_div_578199 = python_operator(stypy.reporting.localization.Localization(__file__, 2520, 8), 'div', std_call_result_578193, sqrt_call_result_578198)
    
    # Assigning a type to the variable 's' (line 2520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2520, 4), 's', result_div_578199)
    # Getting the type of 's' (line 2521)
    s_578200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 11), 's')
    # Assigning a type to the variable 'stypy_return_type' (line 2521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2521, 4), 'stypy_return_type', s_578200)
    
    # ################# End of 'sem(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sem' in the type store
    # Getting the type of 'stypy_return_type' (line 2472)
    stypy_return_type_578201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_578201)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sem'
    return stypy_return_type_578201

# Assigning a type to the variable 'sem' (line 2472)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2472, 0), 'sem', sem)

# Assigning a Call to a Name (line 2524):

# Assigning a Call to a Name (line 2524):

# Call to namedtuple(...): (line 2524)
# Processing the call arguments (line 2524)
str_578203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2524, 28), 'str', 'F_onewayResult')

# Obtaining an instance of the builtin type 'tuple' (line 2524)
tuple_578204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2524, 47), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2524)
# Adding element type (line 2524)
str_578205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2524, 47), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2524, 47), tuple_578204, str_578205)
# Adding element type (line 2524)
str_578206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2524, 60), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2524, 47), tuple_578204, str_578206)

# Processing the call keyword arguments (line 2524)
kwargs_578207 = {}
# Getting the type of 'namedtuple' (line 2524)
namedtuple_578202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 17), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 2524)
namedtuple_call_result_578208 = invoke(stypy.reporting.localization.Localization(__file__, 2524, 17), namedtuple_578202, *[str_578203, tuple_578204], **kwargs_578207)

# Assigning a type to the variable 'F_onewayResult' (line 2524)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2524, 0), 'F_onewayResult', namedtuple_call_result_578208)

@norecursion
def f_oneway(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'f_oneway'
    module_type_store = module_type_store.open_function_context('f_oneway', 2527, 0, False)
    
    # Passed parameters checking function
    f_oneway.stypy_localization = localization
    f_oneway.stypy_type_of_self = None
    f_oneway.stypy_type_store = module_type_store
    f_oneway.stypy_function_name = 'f_oneway'
    f_oneway.stypy_param_names_list = []
    f_oneway.stypy_varargs_param_name = 'args'
    f_oneway.stypy_kwargs_param_name = None
    f_oneway.stypy_call_defaults = defaults
    f_oneway.stypy_call_varargs = varargs
    f_oneway.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'f_oneway', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'f_oneway', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'f_oneway(...)' code ##################

    str_578209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2542, (-1)), 'str', '\n    Performs a 1-way ANOVA, returning an F-value and probability given\n    any number of groups.  From Heiman, pp.394-7.\n\n    Usage: ``f_oneway(*args)``, where ``*args`` is 2 or more arrays,\n    one per treatment group.\n\n    Returns\n    -------\n    statistic : float\n        The computed F-value of the test.\n    pvalue : float\n        The associated p-value from the F-distribution.\n\n    ')
    
    # Assigning a Call to a Name (line 2544):
    
    # Assigning a Call to a Name (line 2544):
    
    # Call to argstoarray(...): (line 2544)
    # Getting the type of 'args' (line 2544)
    args_578211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 24), 'args', False)
    # Processing the call keyword arguments (line 2544)
    kwargs_578212 = {}
    # Getting the type of 'argstoarray' (line 2544)
    argstoarray_578210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 11), 'argstoarray', False)
    # Calling argstoarray(args, kwargs) (line 2544)
    argstoarray_call_result_578213 = invoke(stypy.reporting.localization.Localization(__file__, 2544, 11), argstoarray_578210, *[args_578211], **kwargs_578212)
    
    # Assigning a type to the variable 'data' (line 2544)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 4), 'data', argstoarray_call_result_578213)
    
    # Assigning a Call to a Name (line 2545):
    
    # Assigning a Call to a Name (line 2545):
    
    # Call to len(...): (line 2545)
    # Processing the call arguments (line 2545)
    # Getting the type of 'data' (line 2545)
    data_578215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 18), 'data', False)
    # Processing the call keyword arguments (line 2545)
    kwargs_578216 = {}
    # Getting the type of 'len' (line 2545)
    len_578214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 14), 'len', False)
    # Calling len(args, kwargs) (line 2545)
    len_call_result_578217 = invoke(stypy.reporting.localization.Localization(__file__, 2545, 14), len_578214, *[data_578215], **kwargs_578216)
    
    # Assigning a type to the variable 'ngroups' (line 2545)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2545, 4), 'ngroups', len_call_result_578217)
    
    # Assigning a Call to a Name (line 2546):
    
    # Assigning a Call to a Name (line 2546):
    
    # Call to count(...): (line 2546)
    # Processing the call keyword arguments (line 2546)
    kwargs_578220 = {}
    # Getting the type of 'data' (line 2546)
    data_578218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 11), 'data', False)
    # Obtaining the member 'count' of a type (line 2546)
    count_578219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2546, 11), data_578218, 'count')
    # Calling count(args, kwargs) (line 2546)
    count_call_result_578221 = invoke(stypy.reporting.localization.Localization(__file__, 2546, 11), count_578219, *[], **kwargs_578220)
    
    # Assigning a type to the variable 'ntot' (line 2546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2546, 4), 'ntot', count_call_result_578221)
    
    # Assigning a BinOp to a Name (line 2547):
    
    # Assigning a BinOp to a Name (line 2547):
    
    # Call to sum(...): (line 2547)
    # Processing the call keyword arguments (line 2547)
    kwargs_578226 = {}
    # Getting the type of 'data' (line 2547)
    data_578222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 13), 'data', False)
    int_578223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2547, 19), 'int')
    # Applying the binary operator '**' (line 2547)
    result_pow_578224 = python_operator(stypy.reporting.localization.Localization(__file__, 2547, 13), '**', data_578222, int_578223)
    
    # Obtaining the member 'sum' of a type (line 2547)
    sum_578225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2547, 13), result_pow_578224, 'sum')
    # Calling sum(args, kwargs) (line 2547)
    sum_call_result_578227 = invoke(stypy.reporting.localization.Localization(__file__, 2547, 13), sum_578225, *[], **kwargs_578226)
    
    
    # Call to sum(...): (line 2547)
    # Processing the call keyword arguments (line 2547)
    kwargs_578230 = {}
    # Getting the type of 'data' (line 2547)
    data_578228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 31), 'data', False)
    # Obtaining the member 'sum' of a type (line 2547)
    sum_578229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2547, 31), data_578228, 'sum')
    # Calling sum(args, kwargs) (line 2547)
    sum_call_result_578231 = invoke(stypy.reporting.localization.Localization(__file__, 2547, 31), sum_578229, *[], **kwargs_578230)
    
    int_578232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2547, 44), 'int')
    # Applying the binary operator '**' (line 2547)
    result_pow_578233 = python_operator(stypy.reporting.localization.Localization(__file__, 2547, 30), '**', sum_call_result_578231, int_578232)
    
    
    # Call to float(...): (line 2547)
    # Processing the call arguments (line 2547)
    # Getting the type of 'ntot' (line 2547)
    ntot_578235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 52), 'ntot', False)
    # Processing the call keyword arguments (line 2547)
    kwargs_578236 = {}
    # Getting the type of 'float' (line 2547)
    float_578234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 46), 'float', False)
    # Calling float(args, kwargs) (line 2547)
    float_call_result_578237 = invoke(stypy.reporting.localization.Localization(__file__, 2547, 46), float_578234, *[ntot_578235], **kwargs_578236)
    
    # Applying the binary operator 'div' (line 2547)
    result_div_578238 = python_operator(stypy.reporting.localization.Localization(__file__, 2547, 30), 'div', result_pow_578233, float_call_result_578237)
    
    # Applying the binary operator '-' (line 2547)
    result_sub_578239 = python_operator(stypy.reporting.localization.Localization(__file__, 2547, 12), '-', sum_call_result_578227, result_div_578238)
    
    # Assigning a type to the variable 'sstot' (line 2547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2547, 4), 'sstot', result_sub_578239)
    
    # Assigning a Call to a Name (line 2548):
    
    # Assigning a Call to a Name (line 2548):
    
    # Call to sum(...): (line 2548)
    # Processing the call keyword arguments (line 2548)
    kwargs_578259 = {}
    
    # Call to count(...): (line 2548)
    # Processing the call arguments (line 2548)
    int_578242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2548, 23), 'int')
    # Processing the call keyword arguments (line 2548)
    kwargs_578243 = {}
    # Getting the type of 'data' (line 2548)
    data_578240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 12), 'data', False)
    # Obtaining the member 'count' of a type (line 2548)
    count_578241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 12), data_578240, 'count')
    # Calling count(args, kwargs) (line 2548)
    count_call_result_578244 = invoke(stypy.reporting.localization.Localization(__file__, 2548, 12), count_578241, *[int_578242], **kwargs_578243)
    
    
    # Call to mean(...): (line 2548)
    # Processing the call arguments (line 2548)
    int_578247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2548, 40), 'int')
    # Processing the call keyword arguments (line 2548)
    kwargs_578248 = {}
    # Getting the type of 'data' (line 2548)
    data_578245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 30), 'data', False)
    # Obtaining the member 'mean' of a type (line 2548)
    mean_578246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 30), data_578245, 'mean')
    # Calling mean(args, kwargs) (line 2548)
    mean_call_result_578249 = invoke(stypy.reporting.localization.Localization(__file__, 2548, 30), mean_578246, *[int_578247], **kwargs_578248)
    
    
    # Call to mean(...): (line 2548)
    # Processing the call keyword arguments (line 2548)
    kwargs_578252 = {}
    # Getting the type of 'data' (line 2548)
    data_578250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 44), 'data', False)
    # Obtaining the member 'mean' of a type (line 2548)
    mean_578251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 44), data_578250, 'mean')
    # Calling mean(args, kwargs) (line 2548)
    mean_call_result_578253 = invoke(stypy.reporting.localization.Localization(__file__, 2548, 44), mean_578251, *[], **kwargs_578252)
    
    # Applying the binary operator '-' (line 2548)
    result_sub_578254 = python_operator(stypy.reporting.localization.Localization(__file__, 2548, 30), '-', mean_call_result_578249, mean_call_result_578253)
    
    int_578255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2548, 58), 'int')
    # Applying the binary operator '**' (line 2548)
    result_pow_578256 = python_operator(stypy.reporting.localization.Localization(__file__, 2548, 29), '**', result_sub_578254, int_578255)
    
    # Applying the binary operator '*' (line 2548)
    result_mul_578257 = python_operator(stypy.reporting.localization.Localization(__file__, 2548, 12), '*', count_call_result_578244, result_pow_578256)
    
    # Obtaining the member 'sum' of a type (line 2548)
    sum_578258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 12), result_mul_578257, 'sum')
    # Calling sum(args, kwargs) (line 2548)
    sum_call_result_578260 = invoke(stypy.reporting.localization.Localization(__file__, 2548, 12), sum_578258, *[], **kwargs_578259)
    
    # Assigning a type to the variable 'ssbg' (line 2548)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2548, 4), 'ssbg', sum_call_result_578260)
    
    # Assigning a BinOp to a Name (line 2549):
    
    # Assigning a BinOp to a Name (line 2549):
    # Getting the type of 'sstot' (line 2549)
    sstot_578261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 11), 'sstot')
    # Getting the type of 'ssbg' (line 2549)
    ssbg_578262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 17), 'ssbg')
    # Applying the binary operator '-' (line 2549)
    result_sub_578263 = python_operator(stypy.reporting.localization.Localization(__file__, 2549, 11), '-', sstot_578261, ssbg_578262)
    
    # Assigning a type to the variable 'sswg' (line 2549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2549, 4), 'sswg', result_sub_578263)
    
    # Assigning a BinOp to a Name (line 2550):
    
    # Assigning a BinOp to a Name (line 2550):
    # Getting the type of 'ngroups' (line 2550)
    ngroups_578264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 11), 'ngroups')
    int_578265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2550, 19), 'int')
    # Applying the binary operator '-' (line 2550)
    result_sub_578266 = python_operator(stypy.reporting.localization.Localization(__file__, 2550, 11), '-', ngroups_578264, int_578265)
    
    # Assigning a type to the variable 'dfbg' (line 2550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2550, 4), 'dfbg', result_sub_578266)
    
    # Assigning a BinOp to a Name (line 2551):
    
    # Assigning a BinOp to a Name (line 2551):
    # Getting the type of 'ntot' (line 2551)
    ntot_578267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 11), 'ntot')
    # Getting the type of 'ngroups' (line 2551)
    ngroups_578268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 18), 'ngroups')
    # Applying the binary operator '-' (line 2551)
    result_sub_578269 = python_operator(stypy.reporting.localization.Localization(__file__, 2551, 11), '-', ntot_578267, ngroups_578268)
    
    # Assigning a type to the variable 'dfwg' (line 2551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 4), 'dfwg', result_sub_578269)
    
    # Assigning a BinOp to a Name (line 2552):
    
    # Assigning a BinOp to a Name (line 2552):
    # Getting the type of 'ssbg' (line 2552)
    ssbg_578270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 10), 'ssbg')
    
    # Call to float(...): (line 2552)
    # Processing the call arguments (line 2552)
    # Getting the type of 'dfbg' (line 2552)
    dfbg_578272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 21), 'dfbg', False)
    # Processing the call keyword arguments (line 2552)
    kwargs_578273 = {}
    # Getting the type of 'float' (line 2552)
    float_578271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 15), 'float', False)
    # Calling float(args, kwargs) (line 2552)
    float_call_result_578274 = invoke(stypy.reporting.localization.Localization(__file__, 2552, 15), float_578271, *[dfbg_578272], **kwargs_578273)
    
    # Applying the binary operator 'div' (line 2552)
    result_div_578275 = python_operator(stypy.reporting.localization.Localization(__file__, 2552, 10), 'div', ssbg_578270, float_call_result_578274)
    
    # Assigning a type to the variable 'msb' (line 2552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2552, 4), 'msb', result_div_578275)
    
    # Assigning a BinOp to a Name (line 2553):
    
    # Assigning a BinOp to a Name (line 2553):
    # Getting the type of 'sswg' (line 2553)
    sswg_578276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 10), 'sswg')
    
    # Call to float(...): (line 2553)
    # Processing the call arguments (line 2553)
    # Getting the type of 'dfwg' (line 2553)
    dfwg_578278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 21), 'dfwg', False)
    # Processing the call keyword arguments (line 2553)
    kwargs_578279 = {}
    # Getting the type of 'float' (line 2553)
    float_578277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 15), 'float', False)
    # Calling float(args, kwargs) (line 2553)
    float_call_result_578280 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 15), float_578277, *[dfwg_578278], **kwargs_578279)
    
    # Applying the binary operator 'div' (line 2553)
    result_div_578281 = python_operator(stypy.reporting.localization.Localization(__file__, 2553, 10), 'div', sswg_578276, float_call_result_578280)
    
    # Assigning a type to the variable 'msw' (line 2553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 4), 'msw', result_div_578281)
    
    # Assigning a BinOp to a Name (line 2554):
    
    # Assigning a BinOp to a Name (line 2554):
    # Getting the type of 'msb' (line 2554)
    msb_578282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 8), 'msb')
    # Getting the type of 'msw' (line 2554)
    msw_578283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 12), 'msw')
    # Applying the binary operator 'div' (line 2554)
    result_div_578284 = python_operator(stypy.reporting.localization.Localization(__file__, 2554, 8), 'div', msb_578282, msw_578283)
    
    # Assigning a type to the variable 'f' (line 2554)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2554, 4), 'f', result_div_578284)
    
    # Assigning a Call to a Name (line 2555):
    
    # Assigning a Call to a Name (line 2555):
    
    # Call to fdtrc(...): (line 2555)
    # Processing the call arguments (line 2555)
    # Getting the type of 'dfbg' (line 2555)
    dfbg_578287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 25), 'dfbg', False)
    # Getting the type of 'dfwg' (line 2555)
    dfwg_578288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 31), 'dfwg', False)
    # Getting the type of 'f' (line 2555)
    f_578289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 37), 'f', False)
    # Processing the call keyword arguments (line 2555)
    kwargs_578290 = {}
    # Getting the type of 'special' (line 2555)
    special_578285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 11), 'special', False)
    # Obtaining the member 'fdtrc' of a type (line 2555)
    fdtrc_578286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2555, 11), special_578285, 'fdtrc')
    # Calling fdtrc(args, kwargs) (line 2555)
    fdtrc_call_result_578291 = invoke(stypy.reporting.localization.Localization(__file__, 2555, 11), fdtrc_578286, *[dfbg_578287, dfwg_578288, f_578289], **kwargs_578290)
    
    # Assigning a type to the variable 'prob' (line 2555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2555, 4), 'prob', fdtrc_call_result_578291)
    
    # Call to F_onewayResult(...): (line 2557)
    # Processing the call arguments (line 2557)
    # Getting the type of 'f' (line 2557)
    f_578293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 26), 'f', False)
    # Getting the type of 'prob' (line 2557)
    prob_578294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 29), 'prob', False)
    # Processing the call keyword arguments (line 2557)
    kwargs_578295 = {}
    # Getting the type of 'F_onewayResult' (line 2557)
    F_onewayResult_578292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 11), 'F_onewayResult', False)
    # Calling F_onewayResult(args, kwargs) (line 2557)
    F_onewayResult_call_result_578296 = invoke(stypy.reporting.localization.Localization(__file__, 2557, 11), F_onewayResult_578292, *[f_578293, prob_578294], **kwargs_578295)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2557, 4), 'stypy_return_type', F_onewayResult_call_result_578296)
    
    # ################# End of 'f_oneway(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'f_oneway' in the type store
    # Getting the type of 'stypy_return_type' (line 2527)
    stypy_return_type_578297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_578297)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'f_oneway'
    return stypy_return_type_578297

# Assigning a type to the variable 'f_oneway' (line 2527)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2527, 0), 'f_oneway', f_oneway)

# Assigning a Call to a Name (line 2560):

# Assigning a Call to a Name (line 2560):

# Call to namedtuple(...): (line 2560)
# Processing the call arguments (line 2560)
str_578299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2560, 37), 'str', 'FriedmanchisquareResult')

# Obtaining an instance of the builtin type 'tuple' (line 2561)
tuple_578300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2561, 38), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2561)
# Adding element type (line 2561)
str_578301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2561, 38), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2561, 38), tuple_578300, str_578301)
# Adding element type (line 2561)
str_578302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2561, 51), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2561, 38), tuple_578300, str_578302)

# Processing the call keyword arguments (line 2560)
kwargs_578303 = {}
# Getting the type of 'namedtuple' (line 2560)
namedtuple_578298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 26), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 2560)
namedtuple_call_result_578304 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 26), namedtuple_578298, *[str_578299, tuple_578300], **kwargs_578303)

# Assigning a type to the variable 'FriedmanchisquareResult' (line 2560)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2560, 0), 'FriedmanchisquareResult', namedtuple_call_result_578304)

@norecursion
def friedmanchisquare(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'friedmanchisquare'
    module_type_store = module_type_store.open_function_context('friedmanchisquare', 2564, 0, False)
    
    # Passed parameters checking function
    friedmanchisquare.stypy_localization = localization
    friedmanchisquare.stypy_type_of_self = None
    friedmanchisquare.stypy_type_store = module_type_store
    friedmanchisquare.stypy_function_name = 'friedmanchisquare'
    friedmanchisquare.stypy_param_names_list = []
    friedmanchisquare.stypy_varargs_param_name = 'args'
    friedmanchisquare.stypy_kwargs_param_name = None
    friedmanchisquare.stypy_call_defaults = defaults
    friedmanchisquare.stypy_call_varargs = varargs
    friedmanchisquare.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'friedmanchisquare', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'friedmanchisquare', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'friedmanchisquare(...)' code ##################

    str_578305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2586, (-1)), 'str', 'Friedman Chi-Square is a non-parametric, one-way within-subjects ANOVA.\n    This function calculates the Friedman Chi-square test for repeated measures\n    and returns the result, along with the associated probability value.\n\n    Each input is considered a given group. Ideally, the number of treatments\n    among each group should be equal. If this is not the case, only the first\n    n treatments are taken into account, where n is the number of treatments\n    of the smallest group.\n    If a group has some missing values, the corresponding treatments are masked\n    in the other groups.\n    The test statistic is corrected for ties.\n\n    Masked values in one group are propagated to the other groups.\n\n    Returns\n    -------\n    statistic : float\n        the test statistic.\n    pvalue : float\n        the associated p-value.\n\n    ')
    
    # Assigning a Call to a Name (line 2587):
    
    # Assigning a Call to a Name (line 2587):
    
    # Call to astype(...): (line 2587)
    # Processing the call arguments (line 2587)
    # Getting the type of 'float' (line 2587)
    float_578311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 37), 'float', False)
    # Processing the call keyword arguments (line 2587)
    kwargs_578312 = {}
    
    # Call to argstoarray(...): (line 2587)
    # Getting the type of 'args' (line 2587)
    args_578307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 24), 'args', False)
    # Processing the call keyword arguments (line 2587)
    kwargs_578308 = {}
    # Getting the type of 'argstoarray' (line 2587)
    argstoarray_578306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 11), 'argstoarray', False)
    # Calling argstoarray(args, kwargs) (line 2587)
    argstoarray_call_result_578309 = invoke(stypy.reporting.localization.Localization(__file__, 2587, 11), argstoarray_578306, *[args_578307], **kwargs_578308)
    
    # Obtaining the member 'astype' of a type (line 2587)
    astype_578310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2587, 11), argstoarray_call_result_578309, 'astype')
    # Calling astype(args, kwargs) (line 2587)
    astype_call_result_578313 = invoke(stypy.reporting.localization.Localization(__file__, 2587, 11), astype_578310, *[float_578311], **kwargs_578312)
    
    # Assigning a type to the variable 'data' (line 2587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 4), 'data', astype_call_result_578313)
    
    # Assigning a Call to a Name (line 2588):
    
    # Assigning a Call to a Name (line 2588):
    
    # Call to len(...): (line 2588)
    # Processing the call arguments (line 2588)
    # Getting the type of 'data' (line 2588)
    data_578315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 12), 'data', False)
    # Processing the call keyword arguments (line 2588)
    kwargs_578316 = {}
    # Getting the type of 'len' (line 2588)
    len_578314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 8), 'len', False)
    # Calling len(args, kwargs) (line 2588)
    len_call_result_578317 = invoke(stypy.reporting.localization.Localization(__file__, 2588, 8), len_578314, *[data_578315], **kwargs_578316)
    
    # Assigning a type to the variable 'k' (line 2588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2588, 4), 'k', len_call_result_578317)
    
    
    # Getting the type of 'k' (line 2589)
    k_578318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 7), 'k')
    int_578319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2589, 11), 'int')
    # Applying the binary operator '<' (line 2589)
    result_lt_578320 = python_operator(stypy.reporting.localization.Localization(__file__, 2589, 7), '<', k_578318, int_578319)
    
    # Testing the type of an if condition (line 2589)
    if_condition_578321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2589, 4), result_lt_578320)
    # Assigning a type to the variable 'if_condition_578321' (line 2589)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2589, 4), 'if_condition_578321', if_condition_578321)
    # SSA begins for if statement (line 2589)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2590)
    # Processing the call arguments (line 2590)
    str_578323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2590, 25), 'str', 'Less than 3 groups (%i): ')
    # Getting the type of 'k' (line 2590)
    k_578324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 55), 'k', False)
    # Applying the binary operator '%' (line 2590)
    result_mod_578325 = python_operator(stypy.reporting.localization.Localization(__file__, 2590, 25), '%', str_578323, k_578324)
    
    str_578326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2591, 25), 'str', 'the Friedman test is NOT appropriate.')
    # Applying the binary operator '+' (line 2590)
    result_add_578327 = python_operator(stypy.reporting.localization.Localization(__file__, 2590, 25), '+', result_mod_578325, str_578326)
    
    # Processing the call keyword arguments (line 2590)
    kwargs_578328 = {}
    # Getting the type of 'ValueError' (line 2590)
    ValueError_578322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2590)
    ValueError_call_result_578329 = invoke(stypy.reporting.localization.Localization(__file__, 2590, 14), ValueError_578322, *[result_add_578327], **kwargs_578328)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2590, 8), ValueError_call_result_578329, 'raise parameter', BaseException)
    # SSA join for if statement (line 2589)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2593):
    
    # Assigning a Call to a Name (line 2593):
    
    # Call to masked_values(...): (line 2593)
    # Processing the call arguments (line 2593)
    
    # Call to rankdata(...): (line 2593)
    # Processing the call arguments (line 2593)
    # Getting the type of 'data' (line 2593)
    data_578333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 39), 'data', False)
    # Processing the call keyword arguments (line 2593)
    int_578334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2593, 50), 'int')
    keyword_578335 = int_578334
    kwargs_578336 = {'axis': keyword_578335}
    # Getting the type of 'rankdata' (line 2593)
    rankdata_578332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 30), 'rankdata', False)
    # Calling rankdata(args, kwargs) (line 2593)
    rankdata_call_result_578337 = invoke(stypy.reporting.localization.Localization(__file__, 2593, 30), rankdata_578332, *[data_578333], **kwargs_578336)
    
    int_578338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2593, 54), 'int')
    # Processing the call keyword arguments (line 2593)
    kwargs_578339 = {}
    # Getting the type of 'ma' (line 2593)
    ma_578330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 13), 'ma', False)
    # Obtaining the member 'masked_values' of a type (line 2593)
    masked_values_578331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2593, 13), ma_578330, 'masked_values')
    # Calling masked_values(args, kwargs) (line 2593)
    masked_values_call_result_578340 = invoke(stypy.reporting.localization.Localization(__file__, 2593, 13), masked_values_578331, *[rankdata_call_result_578337, int_578338], **kwargs_578339)
    
    # Assigning a type to the variable 'ranked' (line 2593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2593, 4), 'ranked', masked_values_call_result_578340)
    
    
    # Getting the type of 'ranked' (line 2594)
    ranked_578341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 7), 'ranked')
    # Obtaining the member '_mask' of a type (line 2594)
    _mask_578342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2594, 7), ranked_578341, '_mask')
    # Getting the type of 'nomask' (line 2594)
    nomask_578343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 27), 'nomask')
    # Applying the binary operator 'isnot' (line 2594)
    result_is_not_578344 = python_operator(stypy.reporting.localization.Localization(__file__, 2594, 7), 'isnot', _mask_578342, nomask_578343)
    
    # Testing the type of an if condition (line 2594)
    if_condition_578345 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2594, 4), result_is_not_578344)
    # Assigning a type to the variable 'if_condition_578345' (line 2594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2594, 4), 'if_condition_578345', if_condition_578345)
    # SSA begins for if statement (line 2594)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2595):
    
    # Assigning a Call to a Name (line 2595):
    
    # Call to mask_cols(...): (line 2595)
    # Processing the call arguments (line 2595)
    # Getting the type of 'ranked' (line 2595)
    ranked_578348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 30), 'ranked', False)
    # Processing the call keyword arguments (line 2595)
    kwargs_578349 = {}
    # Getting the type of 'ma' (line 2595)
    ma_578346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 17), 'ma', False)
    # Obtaining the member 'mask_cols' of a type (line 2595)
    mask_cols_578347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 17), ma_578346, 'mask_cols')
    # Calling mask_cols(args, kwargs) (line 2595)
    mask_cols_call_result_578350 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 17), mask_cols_578347, *[ranked_578348], **kwargs_578349)
    
    # Assigning a type to the variable 'ranked' (line 2595)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2595, 8), 'ranked', mask_cols_call_result_578350)
    
    # Assigning a Call to a Name (line 2596):
    
    # Assigning a Call to a Name (line 2596):
    
    # Call to view(...): (line 2596)
    # Processing the call arguments (line 2596)
    # Getting the type of 'ndarray' (line 2596)
    ndarray_578361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 56), 'ndarray', False)
    # Processing the call keyword arguments (line 2596)
    kwargs_578362 = {}
    
    # Call to reshape(...): (line 2596)
    # Processing the call arguments (line 2596)
    # Getting the type of 'k' (line 2596)
    k_578356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 45), 'k', False)
    int_578357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2596, 47), 'int')
    # Processing the call keyword arguments (line 2596)
    kwargs_578358 = {}
    
    # Call to compressed(...): (line 2596)
    # Processing the call keyword arguments (line 2596)
    kwargs_578353 = {}
    # Getting the type of 'ranked' (line 2596)
    ranked_578351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 17), 'ranked', False)
    # Obtaining the member 'compressed' of a type (line 2596)
    compressed_578352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2596, 17), ranked_578351, 'compressed')
    # Calling compressed(args, kwargs) (line 2596)
    compressed_call_result_578354 = invoke(stypy.reporting.localization.Localization(__file__, 2596, 17), compressed_578352, *[], **kwargs_578353)
    
    # Obtaining the member 'reshape' of a type (line 2596)
    reshape_578355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2596, 17), compressed_call_result_578354, 'reshape')
    # Calling reshape(args, kwargs) (line 2596)
    reshape_call_result_578359 = invoke(stypy.reporting.localization.Localization(__file__, 2596, 17), reshape_578355, *[k_578356, int_578357], **kwargs_578358)
    
    # Obtaining the member 'view' of a type (line 2596)
    view_578360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2596, 17), reshape_call_result_578359, 'view')
    # Calling view(args, kwargs) (line 2596)
    view_call_result_578363 = invoke(stypy.reporting.localization.Localization(__file__, 2596, 17), view_578360, *[ndarray_578361], **kwargs_578362)
    
    # Assigning a type to the variable 'ranked' (line 2596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2596, 8), 'ranked', view_call_result_578363)
    # SSA branch for the else part of an if statement (line 2594)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 2598):
    
    # Assigning a Attribute to a Name (line 2598):
    # Getting the type of 'ranked' (line 2598)
    ranked_578364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 17), 'ranked')
    # Obtaining the member '_data' of a type (line 2598)
    _data_578365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2598, 17), ranked_578364, '_data')
    # Assigning a type to the variable 'ranked' (line 2598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2598, 8), 'ranked', _data_578365)
    # SSA join for if statement (line 2594)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Tuple (line 2599):
    
    # Assigning a Subscript to a Name (line 2599):
    
    # Obtaining the type of the subscript
    int_578366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2599, 4), 'int')
    # Getting the type of 'ranked' (line 2599)
    ranked_578367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 12), 'ranked')
    # Obtaining the member 'shape' of a type (line 2599)
    shape_578368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2599, 12), ranked_578367, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2599)
    getitem___578369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2599, 4), shape_578368, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2599)
    subscript_call_result_578370 = invoke(stypy.reporting.localization.Localization(__file__, 2599, 4), getitem___578369, int_578366)
    
    # Assigning a type to the variable 'tuple_var_assignment_571537' (line 2599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2599, 4), 'tuple_var_assignment_571537', subscript_call_result_578370)
    
    # Assigning a Subscript to a Name (line 2599):
    
    # Obtaining the type of the subscript
    int_578371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2599, 4), 'int')
    # Getting the type of 'ranked' (line 2599)
    ranked_578372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 12), 'ranked')
    # Obtaining the member 'shape' of a type (line 2599)
    shape_578373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2599, 12), ranked_578372, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2599)
    getitem___578374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2599, 4), shape_578373, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2599)
    subscript_call_result_578375 = invoke(stypy.reporting.localization.Localization(__file__, 2599, 4), getitem___578374, int_578371)
    
    # Assigning a type to the variable 'tuple_var_assignment_571538' (line 2599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2599, 4), 'tuple_var_assignment_571538', subscript_call_result_578375)
    
    # Assigning a Name to a Name (line 2599):
    # Getting the type of 'tuple_var_assignment_571537' (line 2599)
    tuple_var_assignment_571537_578376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 4), 'tuple_var_assignment_571537')
    # Assigning a type to the variable 'k' (line 2599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2599, 5), 'k', tuple_var_assignment_571537_578376)
    
    # Assigning a Name to a Name (line 2599):
    # Getting the type of 'tuple_var_assignment_571538' (line 2599)
    tuple_var_assignment_571538_578377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 4), 'tuple_var_assignment_571538')
    # Assigning a type to the variable 'n' (line 2599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2599, 7), 'n', tuple_var_assignment_571538_578377)
    
    # Assigning a ListComp to a Name (line 2601):
    
    # Assigning a ListComp to a Name (line 2601):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'ranked' (line 2601)
    ranked_578382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 44), 'ranked')
    # Obtaining the member 'T' of a type (line 2601)
    T_578383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2601, 44), ranked_578382, 'T')
    comprehension_578384 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2601, 15), T_578383)
    # Assigning a type to the variable 'row' (line 2601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2601, 15), 'row', comprehension_578384)
    
    # Call to find_repeats(...): (line 2601)
    # Processing the call arguments (line 2601)
    # Getting the type of 'row' (line 2601)
    row_578379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 28), 'row', False)
    # Processing the call keyword arguments (line 2601)
    kwargs_578380 = {}
    # Getting the type of 'find_repeats' (line 2601)
    find_repeats_578378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 15), 'find_repeats', False)
    # Calling find_repeats(args, kwargs) (line 2601)
    find_repeats_call_result_578381 = invoke(stypy.reporting.localization.Localization(__file__, 2601, 15), find_repeats_578378, *[row_578379], **kwargs_578380)
    
    list_578385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2601, 15), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2601, 15), list_578385, find_repeats_call_result_578381)
    # Assigning a type to the variable 'repeats' (line 2601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2601, 4), 'repeats', list_578385)
    
    # Assigning a Call to a Name (line 2602):
    
    # Assigning a Call to a Name (line 2602):
    
    # Call to array(...): (line 2602)
    # Processing the call arguments (line 2602)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'repeats' (line 2602)
    repeats_578393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 35), 'repeats', False)
    comprehension_578394 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2602, 21), repeats_578393)
    # Assigning a type to the variable 'x' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 21), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2602, 21), comprehension_578394))
    # Assigning a type to the variable 'y' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 21), 'y', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2602, 21), comprehension_578394))
    
    # Getting the type of 'x' (line 2602)
    x_578389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 46), 'x', False)
    # Obtaining the member 'size' of a type (line 2602)
    size_578390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 46), x_578389, 'size')
    int_578391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2602, 55), 'int')
    # Applying the binary operator '>' (line 2602)
    result_gt_578392 = python_operator(stypy.reporting.localization.Localization(__file__, 2602, 46), '>', size_578390, int_578391)
    
    # Getting the type of 'y' (line 2602)
    y_578388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 21), 'y', False)
    list_578395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2602, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2602, 21), list_578395, y_578388)
    # Processing the call keyword arguments (line 2602)
    kwargs_578396 = {}
    # Getting the type of 'np' (line 2602)
    np_578386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 11), 'np', False)
    # Obtaining the member 'array' of a type (line 2602)
    array_578387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 11), np_578386, 'array')
    # Calling array(args, kwargs) (line 2602)
    array_call_result_578397 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 11), array_578387, *[list_578395], **kwargs_578396)
    
    # Assigning a type to the variable 'ties' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 4), 'ties', array_call_result_578397)
    
    # Assigning a BinOp to a Name (line 2603):
    
    # Assigning a BinOp to a Name (line 2603):
    int_578398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 21), 'int')
    
    # Call to sum(...): (line 2603)
    # Processing the call keyword arguments (line 2603)
    kwargs_578405 = {}
    # Getting the type of 'ties' (line 2603)
    ties_578399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 26), 'ties', False)
    int_578400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 32), 'int')
    # Applying the binary operator '**' (line 2603)
    result_pow_578401 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 26), '**', ties_578399, int_578400)
    
    # Getting the type of 'ties' (line 2603)
    ties_578402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 34), 'ties', False)
    # Applying the binary operator '-' (line 2603)
    result_sub_578403 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 26), '-', result_pow_578401, ties_578402)
    
    # Obtaining the member 'sum' of a type (line 2603)
    sum_578404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2603, 26), result_sub_578403, 'sum')
    # Calling sum(args, kwargs) (line 2603)
    sum_call_result_578406 = invoke(stypy.reporting.localization.Localization(__file__, 2603, 26), sum_578404, *[], **kwargs_578405)
    
    
    # Call to float(...): (line 2603)
    # Processing the call arguments (line 2603)
    # Getting the type of 'n' (line 2603)
    n_578408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 52), 'n', False)
    # Getting the type of 'k' (line 2603)
    k_578409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 55), 'k', False)
    int_578410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 58), 'int')
    # Applying the binary operator '**' (line 2603)
    result_pow_578411 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 55), '**', k_578409, int_578410)
    
    # Getting the type of 'k' (line 2603)
    k_578412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 60), 'k', False)
    # Applying the binary operator '-' (line 2603)
    result_sub_578413 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 55), '-', result_pow_578411, k_578412)
    
    # Applying the binary operator '*' (line 2603)
    result_mul_578414 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 52), '*', n_578408, result_sub_578413)
    
    # Processing the call keyword arguments (line 2603)
    kwargs_578415 = {}
    # Getting the type of 'float' (line 2603)
    float_578407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 46), 'float', False)
    # Calling float(args, kwargs) (line 2603)
    float_call_result_578416 = invoke(stypy.reporting.localization.Localization(__file__, 2603, 46), float_578407, *[result_mul_578414], **kwargs_578415)
    
    # Applying the binary operator 'div' (line 2603)
    result_div_578417 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 25), 'div', sum_call_result_578406, float_call_result_578416)
    
    # Applying the binary operator '-' (line 2603)
    result_sub_578418 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 21), '-', int_578398, result_div_578417)
    
    # Assigning a type to the variable 'tie_correction' (line 2603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2603, 4), 'tie_correction', result_sub_578418)
    
    # Assigning a Call to a Name (line 2605):
    
    # Assigning a Call to a Name (line 2605):
    
    # Call to sum(...): (line 2605)
    # Processing the call arguments (line 2605)
    
    # Call to sum(...): (line 2605)
    # Processing the call arguments (line 2605)
    int_578423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2605, 30), 'int')
    # Processing the call keyword arguments (line 2605)
    kwargs_578424 = {}
    # Getting the type of 'ranked' (line 2605)
    ranked_578421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 19), 'ranked', False)
    # Obtaining the member 'sum' of a type (line 2605)
    sum_578422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 19), ranked_578421, 'sum')
    # Calling sum(args, kwargs) (line 2605)
    sum_call_result_578425 = invoke(stypy.reporting.localization.Localization(__file__, 2605, 19), sum_578422, *[int_578423], **kwargs_578424)
    
    # Getting the type of 'n' (line 2605)
    n_578426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 36), 'n', False)
    # Getting the type of 'k' (line 2605)
    k_578427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 39), 'k', False)
    int_578428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2605, 41), 'int')
    # Applying the binary operator '+' (line 2605)
    result_add_578429 = python_operator(stypy.reporting.localization.Localization(__file__, 2605, 39), '+', k_578427, int_578428)
    
    # Applying the binary operator '*' (line 2605)
    result_mul_578430 = python_operator(stypy.reporting.localization.Localization(__file__, 2605, 36), '*', n_578426, result_add_578429)
    
    float_578431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2605, 44), 'float')
    # Applying the binary operator 'div' (line 2605)
    result_div_578432 = python_operator(stypy.reporting.localization.Localization(__file__, 2605, 43), 'div', result_mul_578430, float_578431)
    
    # Applying the binary operator '-' (line 2605)
    result_sub_578433 = python_operator(stypy.reporting.localization.Localization(__file__, 2605, 19), '-', sum_call_result_578425, result_div_578432)
    
    int_578434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2605, 49), 'int')
    # Applying the binary operator '**' (line 2605)
    result_pow_578435 = python_operator(stypy.reporting.localization.Localization(__file__, 2605, 18), '**', result_sub_578433, int_578434)
    
    # Processing the call keyword arguments (line 2605)
    kwargs_578436 = {}
    # Getting the type of 'np' (line 2605)
    np_578419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 11), 'np', False)
    # Obtaining the member 'sum' of a type (line 2605)
    sum_578420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 11), np_578419, 'sum')
    # Calling sum(args, kwargs) (line 2605)
    sum_call_result_578437 = invoke(stypy.reporting.localization.Localization(__file__, 2605, 11), sum_578420, *[result_pow_578435], **kwargs_578436)
    
    # Assigning a type to the variable 'ssbg' (line 2605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2605, 4), 'ssbg', sum_call_result_578437)
    
    # Assigning a BinOp to a Name (line 2606):
    
    # Assigning a BinOp to a Name (line 2606):
    # Getting the type of 'ssbg' (line 2606)
    ssbg_578438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 12), 'ssbg')
    float_578439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2606, 19), 'float')
    # Applying the binary operator '*' (line 2606)
    result_mul_578440 = python_operator(stypy.reporting.localization.Localization(__file__, 2606, 12), '*', ssbg_578438, float_578439)
    
    # Getting the type of 'n' (line 2606)
    n_578441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 24), 'n')
    # Getting the type of 'k' (line 2606)
    k_578442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 26), 'k')
    # Applying the binary operator '*' (line 2606)
    result_mul_578443 = python_operator(stypy.reporting.localization.Localization(__file__, 2606, 24), '*', n_578441, k_578442)
    
    # Getting the type of 'k' (line 2606)
    k_578444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 29), 'k')
    int_578445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2606, 31), 'int')
    # Applying the binary operator '+' (line 2606)
    result_add_578446 = python_operator(stypy.reporting.localization.Localization(__file__, 2606, 29), '+', k_578444, int_578445)
    
    # Applying the binary operator '*' (line 2606)
    result_mul_578447 = python_operator(stypy.reporting.localization.Localization(__file__, 2606, 27), '*', result_mul_578443, result_add_578446)
    
    # Applying the binary operator 'div' (line 2606)
    result_div_578448 = python_operator(stypy.reporting.localization.Localization(__file__, 2606, 22), 'div', result_mul_578440, result_mul_578447)
    
    float_578449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2606, 37), 'float')
    # Applying the binary operator '*' (line 2606)
    result_mul_578450 = python_operator(stypy.reporting.localization.Localization(__file__, 2606, 35), '*', result_div_578448, float_578449)
    
    # Getting the type of 'tie_correction' (line 2606)
    tie_correction_578451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 40), 'tie_correction')
    # Applying the binary operator 'div' (line 2606)
    result_div_578452 = python_operator(stypy.reporting.localization.Localization(__file__, 2606, 39), 'div', result_mul_578450, tie_correction_578451)
    
    # Assigning a type to the variable 'chisq' (line 2606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2606, 4), 'chisq', result_div_578452)
    
    # Call to FriedmanchisquareResult(...): (line 2608)
    # Processing the call arguments (line 2608)
    # Getting the type of 'chisq' (line 2608)
    chisq_578454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 35), 'chisq', False)
    
    # Call to sf(...): (line 2609)
    # Processing the call arguments (line 2609)
    # Getting the type of 'chisq' (line 2609)
    chisq_578458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 57), 'chisq', False)
    # Getting the type of 'k' (line 2609)
    k_578459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 64), 'k', False)
    int_578460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2609, 66), 'int')
    # Applying the binary operator '-' (line 2609)
    result_sub_578461 = python_operator(stypy.reporting.localization.Localization(__file__, 2609, 64), '-', k_578459, int_578460)
    
    # Processing the call keyword arguments (line 2609)
    kwargs_578462 = {}
    # Getting the type of 'distributions' (line 2609)
    distributions_578455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 35), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 2609)
    chi2_578456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2609, 35), distributions_578455, 'chi2')
    # Obtaining the member 'sf' of a type (line 2609)
    sf_578457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2609, 35), chi2_578456, 'sf')
    # Calling sf(args, kwargs) (line 2609)
    sf_call_result_578463 = invoke(stypy.reporting.localization.Localization(__file__, 2609, 35), sf_578457, *[chisq_578458, result_sub_578461], **kwargs_578462)
    
    # Processing the call keyword arguments (line 2608)
    kwargs_578464 = {}
    # Getting the type of 'FriedmanchisquareResult' (line 2608)
    FriedmanchisquareResult_578453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 11), 'FriedmanchisquareResult', False)
    # Calling FriedmanchisquareResult(args, kwargs) (line 2608)
    FriedmanchisquareResult_call_result_578465 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 11), FriedmanchisquareResult_578453, *[chisq_578454, sf_call_result_578463], **kwargs_578464)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2608)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2608, 4), 'stypy_return_type', FriedmanchisquareResult_call_result_578465)
    
    # ################# End of 'friedmanchisquare(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'friedmanchisquare' in the type store
    # Getting the type of 'stypy_return_type' (line 2564)
    stypy_return_type_578466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_578466)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'friedmanchisquare'
    return stypy_return_type_578466

# Assigning a type to the variable 'friedmanchisquare' (line 2564)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2564, 0), 'friedmanchisquare', friedmanchisquare)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
