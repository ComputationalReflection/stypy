
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: from __future__ import division, print_function, absolute_import
2: 
3: import math
4: import warnings
5: from collections import namedtuple
6: 
7: import numpy as np
8: from numpy import (isscalar, r_, log, around, unique, asarray,
9:                    zeros, arange, sort, amin, amax, any, atleast_1d,
10:                    sqrt, ceil, floor, array, compress,
11:                    pi, exp, ravel, count_nonzero, sin, cos, arctan2, hypot)
12: from numpy.testing.decorators import setastest
13: 
14: from scipy._lib.six import string_types
15: from scipy import optimize
16: from scipy import special
17: from . import statlib
18: from . import stats
19: from .stats import find_repeats, _contains_nan
20: from .contingency import chi2_contingency
21: from . import distributions
22: from ._distn_infrastructure import rv_generic
23: 
24: 
25: __all__ = ['mvsdist',
26:            'bayes_mvs', 'kstat', 'kstatvar', 'probplot', 'ppcc_max', 'ppcc_plot',
27:            'boxcox_llf', 'boxcox', 'boxcox_normmax', 'boxcox_normplot',
28:            'shapiro', 'anderson', 'ansari', 'bartlett', 'levene', 'binom_test',
29:            'fligner', 'mood', 'wilcoxon', 'median_test',
30:            'circmean', 'circvar', 'circstd', 'anderson_ksamp'
31:            ]
32: 
33: 
34: Mean = namedtuple('Mean', ('statistic', 'minmax'))
35: Variance = namedtuple('Variance', ('statistic', 'minmax'))
36: Std_dev = namedtuple('Std_dev', ('statistic', 'minmax'))
37: 
38: 
39: def bayes_mvs(data, alpha=0.90):
40:     r'''
41:     Bayesian confidence intervals for the mean, var, and std.
42: 
43:     Parameters
44:     ----------
45:     data : array_like
46:         Input data, if multi-dimensional it is flattened to 1-D by `bayes_mvs`.
47:         Requires 2 or more data points.
48:     alpha : float, optional
49:         Probability that the returned confidence interval contains
50:         the true parameter.
51: 
52:     Returns
53:     -------
54:     mean_cntr, var_cntr, std_cntr : tuple
55:         The three results are for the mean, variance and standard deviation,
56:         respectively.  Each result is a tuple of the form::
57: 
58:             (center, (lower, upper))
59: 
60:         with `center` the mean of the conditional pdf of the value given the
61:         data, and `(lower, upper)` a confidence interval, centered on the
62:         median, containing the estimate to a probability ``alpha``.
63: 
64:     See Also
65:     --------
66:     mvsdist
67: 
68:     Notes
69:     -----
70:     Each tuple of mean, variance, and standard deviation estimates represent
71:     the (center, (lower, upper)) with center the mean of the conditional pdf
72:     of the value given the data and (lower, upper) is a confidence interval
73:     centered on the median, containing the estimate to a probability
74:     ``alpha``.
75: 
76:     Converts data to 1-D and assumes all data has the same mean and variance.
77:     Uses Jeffrey's prior for variance and std.
78: 
79:     Equivalent to ``tuple((x.mean(), x.interval(alpha)) for x in mvsdist(dat))``
80: 
81:     References
82:     ----------
83:     T.E. Oliphant, "A Bayesian perspective on estimating mean, variance, and
84:     standard-deviation from data", http://scholarsarchive.byu.edu/facpub/278,
85:     2006.
86: 
87:     Examples
88:     --------
89:     First a basic example to demonstrate the outputs:
90: 
91:     >>> from scipy import stats
92:     >>> data = [6, 9, 12, 7, 8, 8, 13]
93:     >>> mean, var, std = stats.bayes_mvs(data)
94:     >>> mean
95:     Mean(statistic=9.0, minmax=(7.1036502226125329, 10.896349777387467))
96:     >>> var
97:     Variance(statistic=10.0, minmax=(3.176724206..., 24.45910382...))
98:     >>> std
99:     Std_dev(statistic=2.9724954732045084, minmax=(1.7823367265645143, 4.9456146050146295))
100: 
101:     Now we generate some normally distributed random data, and get estimates of
102:     mean and standard deviation with 95% confidence intervals for those
103:     estimates:
104: 
105:     >>> n_samples = 100000
106:     >>> data = stats.norm.rvs(size=n_samples)
107:     >>> res_mean, res_var, res_std = stats.bayes_mvs(data, alpha=0.95)
108: 
109:     >>> import matplotlib.pyplot as plt
110:     >>> fig = plt.figure()
111:     >>> ax = fig.add_subplot(111)
112:     >>> ax.hist(data, bins=100, normed=True, label='Histogram of data')
113:     >>> ax.vlines(res_mean.statistic, 0, 0.5, colors='r', label='Estimated mean')
114:     >>> ax.axvspan(res_mean.minmax[0],res_mean.minmax[1], facecolor='r',
115:     ...            alpha=0.2, label=r'Estimated mean (95% limits)')
116:     >>> ax.vlines(res_std.statistic, 0, 0.5, colors='g', label='Estimated scale')
117:     >>> ax.axvspan(res_std.minmax[0],res_std.minmax[1], facecolor='g', alpha=0.2,
118:     ...            label=r'Estimated scale (95% limits)')
119: 
120:     >>> ax.legend(fontsize=10)
121:     >>> ax.set_xlim([-4, 4])
122:     >>> ax.set_ylim([0, 0.5])
123:     >>> plt.show()
124: 
125:     '''
126:     m, v, s = mvsdist(data)
127:     if alpha >= 1 or alpha <= 0:
128:         raise ValueError("0 < alpha < 1 is required, but alpha=%s was given."
129:                          % alpha)
130: 
131:     m_res = Mean(m.mean(), m.interval(alpha))
132:     v_res = Variance(v.mean(), v.interval(alpha))
133:     s_res = Std_dev(s.mean(), s.interval(alpha))
134: 
135:     return m_res, v_res, s_res
136: 
137: 
138: def mvsdist(data):
139:     '''
140:     'Frozen' distributions for mean, variance, and standard deviation of data.
141: 
142:     Parameters
143:     ----------
144:     data : array_like
145:         Input array. Converted to 1-D using ravel.
146:         Requires 2 or more data-points.
147: 
148:     Returns
149:     -------
150:     mdist : "frozen" distribution object
151:         Distribution object representing the mean of the data
152:     vdist : "frozen" distribution object
153:         Distribution object representing the variance of the data
154:     sdist : "frozen" distribution object
155:         Distribution object representing the standard deviation of the data
156: 
157:     See Also
158:     --------
159:     bayes_mvs
160: 
161:     Notes
162:     -----
163:     The return values from ``bayes_mvs(data)`` is equivalent to
164:     ``tuple((x.mean(), x.interval(0.90)) for x in mvsdist(data))``.
165: 
166:     In other words, calling ``<dist>.mean()`` and ``<dist>.interval(0.90)``
167:     on the three distribution objects returned from this function will give
168:     the same results that are returned from `bayes_mvs`.
169: 
170:     References
171:     ----------
172:     T.E. Oliphant, "A Bayesian perspective on estimating mean, variance, and
173:     standard-deviation from data", http://scholarsarchive.byu.edu/facpub/278,
174:     2006.
175: 
176:     Examples
177:     --------
178:     >>> from scipy import stats
179:     >>> data = [6, 9, 12, 7, 8, 8, 13]
180:     >>> mean, var, std = stats.mvsdist(data)
181: 
182:     We now have frozen distribution objects "mean", "var" and "std" that we can
183:     examine:
184: 
185:     >>> mean.mean()
186:     9.0
187:     >>> mean.interval(0.95)
188:     (6.6120585482655692, 11.387941451734431)
189:     >>> mean.std()
190:     1.1952286093343936
191: 
192:     '''
193:     x = ravel(data)
194:     n = len(x)
195:     if n < 2:
196:         raise ValueError("Need at least 2 data-points.")
197:     xbar = x.mean()
198:     C = x.var()
199:     if n > 1000:  # gaussian approximations for large n
200:         mdist = distributions.norm(loc=xbar, scale=math.sqrt(C / n))
201:         sdist = distributions.norm(loc=math.sqrt(C), scale=math.sqrt(C / (2. * n)))
202:         vdist = distributions.norm(loc=C, scale=math.sqrt(2.0 / n) * C)
203:     else:
204:         nm1 = n - 1
205:         fac = n * C / 2.
206:         val = nm1 / 2.
207:         mdist = distributions.t(nm1, loc=xbar, scale=math.sqrt(C / nm1))
208:         sdist = distributions.gengamma(val, -2, scale=math.sqrt(fac))
209:         vdist = distributions.invgamma(val, scale=fac)
210:     return mdist, vdist, sdist
211: 
212: 
213: def kstat(data, n=2):
214:     r'''
215:     Return the nth k-statistic (1<=n<=4 so far).
216: 
217:     The nth k-statistic k_n is the unique symmetric unbiased estimator of the
218:     nth cumulant kappa_n.
219: 
220:     Parameters
221:     ----------
222:     data : array_like
223:         Input array. Note that n-D input gets flattened.
224:     n : int, {1, 2, 3, 4}, optional
225:         Default is equal to 2.
226: 
227:     Returns
228:     -------
229:     kstat : float
230:         The nth k-statistic.
231: 
232:     See Also
233:     --------
234:     kstatvar: Returns an unbiased estimator of the variance of the k-statistic.
235:     moment: Returns the n-th central moment about the mean for a sample.
236: 
237:     Notes
238:     -----
239:     For a sample size n, the first few k-statistics are given by:
240: 
241:     .. math::
242: 
243:         k_{1} = \mu
244:         k_{2} = \frac{n}{n-1} m_{2}
245:         k_{3} = \frac{ n^{2} } {(n-1) (n-2)} m_{3}
246:         k_{4} = \frac{ n^{2} [(n + 1)m_{4} - 3(n - 1) m^2_{2}]} {(n-1) (n-2) (n-3)}
247: 
248:     where :math:`\mu` is the sample mean, :math:`m_2` is the sample
249:     variance, and :math:`m_i` is the i-th sample central moment.
250: 
251:     References
252:     ----------
253:     http://mathworld.wolfram.com/k-Statistic.html
254: 
255:     http://mathworld.wolfram.com/Cumulant.html
256: 
257:     Examples
258:     --------
259:     >>> from scipy import stats
260:     >>> rndm = np.random.RandomState(1234)
261: 
262:     As sample size increases, n-th moment and n-th k-statistic converge to the
263:     same number (although they aren't identical). In the case of the normal
264:     distribution, they converge to zero.
265: 
266:     >>> for n in [2, 3, 4, 5, 6, 7]:
267:     ...     x = rndm.normal(size=10**n)
268:     ...     m, k = stats.moment(x, 3), stats.kstat(x, 3)
269:     ...     print("%.3g %.3g %.3g" % (m, k, m-k))
270:     -0.631 -0.651 0.0194
271:     0.0282 0.0283 -8.49e-05
272:     -0.0454 -0.0454 1.36e-05
273:     7.53e-05 7.53e-05 -2.26e-09
274:     0.00166 0.00166 -4.99e-09
275:     -2.88e-06 -2.88e-06 8.63e-13
276:     '''
277:     if n > 4 or n < 1:
278:         raise ValueError("k-statistics only supported for 1<=n<=4")
279:     n = int(n)
280:     S = np.zeros(n + 1, np.float64)
281:     data = ravel(data)
282:     N = data.size
283: 
284:     # raise ValueError on empty input
285:     if N == 0:
286:         raise ValueError("Data input must not be empty")
287: 
288:     # on nan input, return nan without warning
289:     if np.isnan(np.sum(data)):
290:         return np.nan
291: 
292:     for k in range(1, n + 1):
293:         S[k] = np.sum(data**k, axis=0)
294:     if n == 1:
295:         return S[1] * 1.0/N
296:     elif n == 2:
297:         return (N*S[2] - S[1]**2.0) / (N*(N - 1.0))
298:     elif n == 3:
299:         return (2*S[1]**3 - 3*N*S[1]*S[2] + N*N*S[3]) / (N*(N - 1.0)*(N - 2.0))
300:     elif n == 4:
301:         return ((-6*S[1]**4 + 12*N*S[1]**2 * S[2] - 3*N*(N-1.0)*S[2]**2 -
302:                  4*N*(N+1)*S[1]*S[3] + N*N*(N+1)*S[4]) /
303:                  (N*(N-1.0)*(N-2.0)*(N-3.0)))
304:     else:
305:         raise ValueError("Should not be here.")
306: 
307: 
308: def kstatvar(data, n=2):
309:     r'''
310:     Returns an unbiased estimator of the variance of the k-statistic.
311: 
312:     See `kstat` for more details of the k-statistic.
313: 
314:     Parameters
315:     ----------
316:     data : array_like
317:         Input array. Note that n-D input gets flattened.
318:     n : int, {1, 2}, optional
319:         Default is equal to 2.
320: 
321:     Returns
322:     -------
323:     kstatvar : float
324:         The nth k-statistic variance.
325: 
326:     See Also
327:     --------
328:     kstat: Returns the n-th k-statistic.
329:     moment: Returns the n-th central moment about the mean for a sample.
330: 
331:     Notes
332:     -----
333:     The variances of the first few k-statistics are given by:
334: 
335:     .. math::
336: 
337:         var(k_{1}) = \frac{\kappa^2}{n}
338:         var(k_{2}) = \frac{\kappa^4}{n} + \frac{2\kappa^2_{2}}{n - 1}
339:         var(k_{3}) = \frac{\kappa^6}{n} + \frac{9 \kappa_2 \kappa_4}{n - 1} +
340:                      \frac{9 \kappa^2_{3}}{n - 1} +
341:                      \frac{6 n \kappa^3_{2}}{(n-1) (n-2)}
342:         var(k_{4}) = \frac{\kappa^8}{n} + \frac{16 \kappa_2 \kappa_6}{n - 1} +
343:                      \frac{48 \kappa_{3} \kappa_5}{n - 1} +
344:                      \frac{34 \kappa^2_{4}}{n-1} + \frac{72 n \kappa^2_{2} \kappa_4}{(n - 1) (n - 2)} +
345:                      \frac{144 n \kappa_{2} \kappa^2_{3}}{(n - 1) (n - 2)} +
346:                      \frac{24 (n + 1) n \kappa^4_{2}}{(n - 1) (n - 2) (n - 3)}
347:     '''
348:     data = ravel(data)
349:     N = len(data)
350:     if n == 1:
351:         return kstat(data, n=2) * 1.0/N
352:     elif n == 2:
353:         k2 = kstat(data, n=2)
354:         k4 = kstat(data, n=4)
355:         return (2*N*k2**2 + (N-1)*k4) / (N*(N+1))
356:     else:
357:         raise ValueError("Only n=1 or n=2 supported.")
358: 
359: 
360: def _calc_uniform_order_statistic_medians(n):
361:     '''
362:     Approximations of uniform order statistic medians.
363: 
364:     Parameters
365:     ----------
366:     n : int
367:         Sample size.
368: 
369:     Returns
370:     -------
371:     v : 1d float array
372:         Approximations of the order statistic medians.
373: 
374:     References
375:     ----------
376:     .. [1] James J. Filliben, "The Probability Plot Correlation Coefficient
377:            Test for Normality", Technometrics, Vol. 17, pp. 111-117, 1975.
378: 
379:     Examples
380:     --------
381:     Order statistics of the uniform distribution on the unit interval
382:     are marginally distributed according to beta distributions.
383:     The expectations of these order statistic are evenly spaced across
384:     the interval, but the distributions are skewed in a way that
385:     pushes the medians slightly towards the endpoints of the unit interval:
386: 
387:     >>> n = 4
388:     >>> k = np.arange(1, n+1)
389:     >>> from scipy.stats import beta
390:     >>> a = k
391:     >>> b = n-k+1
392:     >>> beta.mean(a, b)
393:     array([ 0.2,  0.4,  0.6,  0.8])
394:     >>> beta.median(a, b)
395:     array([ 0.15910358,  0.38572757,  0.61427243,  0.84089642])
396: 
397:     The Filliben approximation uses the exact medians of the smallest
398:     and greatest order statistics, and the remaining medians are approximated
399:     by points spread evenly across a sub-interval of the unit interval:
400: 
401:     >>> from scipy.morestats import _calc_uniform_order_statistic_medians
402:     >>> _calc_uniform_order_statistic_medians(n)
403:     array([ 0.15910358,  0.38545246,  0.61454754,  0.84089642])
404: 
405:     This plot shows the skewed distributions of the order statistics
406:     of a sample of size four from a uniform distribution on the unit interval:
407: 
408:     >>> import matplotlib.pyplot as plt
409:     >>> x = np.linspace(0.0, 1.0, num=50, endpoint=True)
410:     >>> pdfs = [beta.pdf(x, a[i], b[i]) for i in range(n)]
411:     >>> plt.figure()
412:     >>> plt.plot(x, pdfs[0], x, pdfs[1], x, pdfs[2], x, pdfs[3])
413: 
414:     '''
415:     v = np.zeros(n, dtype=np.float64)
416:     v[-1] = 0.5**(1.0 / n)
417:     v[0] = 1 - v[-1]
418:     i = np.arange(2, n)
419:     v[1:-1] = (i - 0.3175) / (n + 0.365)
420:     return v
421: 
422: 
423: def _parse_dist_kw(dist, enforce_subclass=True):
424:     '''Parse `dist` keyword.
425: 
426:     Parameters
427:     ----------
428:     dist : str or stats.distributions instance.
429:         Several functions take `dist` as a keyword, hence this utility
430:         function.
431:     enforce_subclass : bool, optional
432:         If True (default), `dist` needs to be a
433:         `_distn_infrastructure.rv_generic` instance.
434:         It can sometimes be useful to set this keyword to False, if a function
435:         wants to accept objects that just look somewhat like such an instance
436:         (for example, they have a ``ppf`` method).
437: 
438:     '''
439:     if isinstance(dist, rv_generic):
440:         pass
441:     elif isinstance(dist, string_types):
442:         try:
443:             dist = getattr(distributions, dist)
444:         except AttributeError:
445:             raise ValueError("%s is not a valid distribution name" % dist)
446:     elif enforce_subclass:
447:         msg = ("`dist` should be a stats.distributions instance or a string "
448:                "with the name of such a distribution.")
449:         raise ValueError(msg)
450: 
451:     return dist
452: 
453: 
454: def _add_axis_labels_title(plot, xlabel, ylabel, title):
455:     '''Helper function to add axes labels and a title to stats plots'''
456:     try:
457:         if hasattr(plot, 'set_title'):
458:             # Matplotlib Axes instance or something that looks like it
459:             plot.set_title(title)
460:             plot.set_xlabel(xlabel)
461:             plot.set_ylabel(ylabel)
462:         else:
463:             # matplotlib.pyplot module
464:             plot.title(title)
465:             plot.xlabel(xlabel)
466:             plot.ylabel(ylabel)
467:     except:
468:         # Not an MPL object or something that looks (enough) like it.
469:         # Don't crash on adding labels or title
470:         pass
471: 
472: 
473: def probplot(x, sparams=(), dist='norm', fit=True, plot=None, rvalue=False):
474:     '''
475:     Calculate quantiles for a probability plot, and optionally show the plot.
476: 
477:     Generates a probability plot of sample data against the quantiles of a
478:     specified theoretical distribution (the normal distribution by default).
479:     `probplot` optionally calculates a best-fit line for the data and plots the
480:     results using Matplotlib or a given plot function.
481: 
482:     Parameters
483:     ----------
484:     x : array_like
485:         Sample/response data from which `probplot` creates the plot.
486:     sparams : tuple, optional
487:         Distribution-specific shape parameters (shape parameters plus location
488:         and scale).
489:     dist : str or stats.distributions instance, optional
490:         Distribution or distribution function name. The default is 'norm' for a
491:         normal probability plot.  Objects that look enough like a
492:         stats.distributions instance (i.e. they have a ``ppf`` method) are also
493:         accepted.
494:     fit : bool, optional
495:         Fit a least-squares regression (best-fit) line to the sample data if
496:         True (default).
497:     plot : object, optional
498:         If given, plots the quantiles and least squares fit.
499:         `plot` is an object that has to have methods "plot" and "text".
500:         The `matplotlib.pyplot` module or a Matplotlib Axes object can be used,
501:         or a custom object with the same methods.
502:         Default is None, which means that no plot is created.
503: 
504:     Returns
505:     -------
506:     (osm, osr) : tuple of ndarrays
507:         Tuple of theoretical quantiles (osm, or order statistic medians) and
508:         ordered responses (osr).  `osr` is simply sorted input `x`.
509:         For details on how `osm` is calculated see the Notes section.
510:     (slope, intercept, r) : tuple of floats, optional
511:         Tuple  containing the result of the least-squares fit, if that is
512:         performed by `probplot`. `r` is the square root of the coefficient of
513:         determination.  If ``fit=False`` and ``plot=None``, this tuple is not
514:         returned.
515: 
516:     Notes
517:     -----
518:     Even if `plot` is given, the figure is not shown or saved by `probplot`;
519:     ``plt.show()`` or ``plt.savefig('figname.png')`` should be used after
520:     calling `probplot`.
521: 
522:     `probplot` generates a probability plot, which should not be confused with
523:     a Q-Q or a P-P plot.  Statsmodels has more extensive functionality of this
524:     type, see ``statsmodels.api.ProbPlot``.
525: 
526:     The formula used for the theoretical quantiles (horizontal axis of the
527:     probability plot) is Filliben's estimate::
528: 
529:         quantiles = dist.ppf(val), for
530: 
531:                 0.5**(1/n),                  for i = n
532:           val = (i - 0.3175) / (n + 0.365),  for i = 2, ..., n-1
533:                 1 - 0.5**(1/n),              for i = 1
534: 
535:     where ``i`` indicates the i-th ordered value and ``n`` is the total number
536:     of values.
537: 
538:     Examples
539:     --------
540:     >>> from scipy import stats
541:     >>> import matplotlib.pyplot as plt
542:     >>> nsample = 100
543:     >>> np.random.seed(7654321)
544: 
545:     A t distribution with small degrees of freedom:
546: 
547:     >>> ax1 = plt.subplot(221)
548:     >>> x = stats.t.rvs(3, size=nsample)
549:     >>> res = stats.probplot(x, plot=plt)
550: 
551:     A t distribution with larger degrees of freedom:
552: 
553:     >>> ax2 = plt.subplot(222)
554:     >>> x = stats.t.rvs(25, size=nsample)
555:     >>> res = stats.probplot(x, plot=plt)
556: 
557:     A mixture of two normal distributions with broadcasting:
558: 
559:     >>> ax3 = plt.subplot(223)
560:     >>> x = stats.norm.rvs(loc=[0,5], scale=[1,1.5],
561:     ...                    size=(nsample//2,2)).ravel()
562:     >>> res = stats.probplot(x, plot=plt)
563: 
564:     A standard normal distribution:
565: 
566:     >>> ax4 = plt.subplot(224)
567:     >>> x = stats.norm.rvs(loc=0, scale=1, size=nsample)
568:     >>> res = stats.probplot(x, plot=plt)
569: 
570:     Produce a new figure with a loggamma distribution, using the ``dist`` and
571:     ``sparams`` keywords:
572: 
573:     >>> fig = plt.figure()
574:     >>> ax = fig.add_subplot(111)
575:     >>> x = stats.loggamma.rvs(c=2.5, size=500)
576:     >>> res = stats.probplot(x, dist=stats.loggamma, sparams=(2.5,), plot=ax)
577:     >>> ax.set_title("Probplot for loggamma dist with shape parameter 2.5")
578: 
579:     Show the results with Matplotlib:
580: 
581:     >>> plt.show()
582: 
583:     '''
584:     x = np.asarray(x)
585:     _perform_fit = fit or (plot is not None)
586:     if x.size == 0:
587:         if _perform_fit:
588:             return (x, x), (np.nan, np.nan, 0.0)
589:         else:
590:             return x, x
591: 
592:     osm_uniform = _calc_uniform_order_statistic_medians(len(x))
593:     dist = _parse_dist_kw(dist, enforce_subclass=False)
594:     if sparams is None:
595:         sparams = ()
596:     if isscalar(sparams):
597:         sparams = (sparams,)
598:     if not isinstance(sparams, tuple):
599:         sparams = tuple(sparams)
600: 
601:     osm = dist.ppf(osm_uniform, *sparams)
602:     osr = sort(x)
603:     if _perform_fit:
604:         # perform a linear least squares fit.
605:         slope, intercept, r, prob, sterrest = stats.linregress(osm, osr)
606: 
607:     if plot is not None:
608:         plot.plot(osm, osr, 'bo', osm, slope*osm + intercept, 'r-')
609:         _add_axis_labels_title(plot, xlabel='Theoretical quantiles',
610:                                ylabel='Ordered Values',
611:                                title='Probability Plot')
612: 
613:         # Add R^2 value to the plot as text
614:         if rvalue:
615:             xmin = amin(osm)
616:             xmax = amax(osm)
617:             ymin = amin(x)
618:             ymax = amax(x)
619:             posx = xmin + 0.70 * (xmax - xmin)
620:             posy = ymin + 0.01 * (ymax - ymin)
621:             plot.text(posx, posy, "$R^2=%1.4f$" % r**2)
622: 
623:     if fit:
624:         return (osm, osr), (slope, intercept, r)
625:     else:
626:         return osm, osr
627: 
628: 
629: def ppcc_max(x, brack=(0.0, 1.0), dist='tukeylambda'):
630:     '''
631:     Calculate the shape parameter that maximizes the PPCC
632: 
633:     The probability plot correlation coefficient (PPCC) plot can be used to
634:     determine the optimal shape parameter for a one-parameter family of
635:     distributions.  ppcc_max returns the shape parameter that would maximize the
636:     probability plot correlation coefficient for the given data to a
637:     one-parameter family of distributions.
638: 
639:     Parameters
640:     ----------
641:     x : array_like
642:         Input array.
643:     brack : tuple, optional
644:         Triple (a,b,c) where (a<b<c). If bracket consists of two numbers (a, c)
645:         then they are assumed to be a starting interval for a downhill bracket
646:         search (see `scipy.optimize.brent`).
647:     dist : str or stats.distributions instance, optional
648:         Distribution or distribution function name.  Objects that look enough
649:         like a stats.distributions instance (i.e. they have a ``ppf`` method)
650:         are also accepted.  The default is ``'tukeylambda'``.
651: 
652:     Returns
653:     -------
654:     shape_value : float
655:         The shape parameter at which the probability plot correlation
656:         coefficient reaches its max value.
657: 
658:     See also
659:     --------
660:     ppcc_plot, probplot, boxcox
661: 
662:     Notes
663:     -----
664:     The brack keyword serves as a starting point which is useful in corner
665:     cases. One can use a plot to obtain a rough visual estimate of the location
666:     for the maximum to start the search near it.
667: 
668:     References
669:     ----------
670:     .. [1] J.J. Filliben, "The Probability Plot Correlation Coefficient Test for
671:            Normality", Technometrics, Vol. 17, pp. 111-117, 1975.
672: 
673:     .. [2] http://www.itl.nist.gov/div898/handbook/eda/section3/ppccplot.htm
674: 
675:     Examples
676:     --------
677:     First we generate some random data from a Tukey-Lambda distribution,
678:     with shape parameter -0.7:
679: 
680:     >>> from scipy import stats
681:     >>> x = stats.tukeylambda.rvs(-0.7, loc=2, scale=0.5, size=10000,
682:     ...                           random_state=1234567) + 1e4
683: 
684:     Now we explore this data with a PPCC plot as well as the related
685:     probability plot and Box-Cox normplot.  A red line is drawn where we
686:     expect the PPCC value to be maximal (at the shape parameter -0.7 used
687:     above):
688: 
689:     >>> import matplotlib.pyplot as plt
690:     >>> fig = plt.figure(figsize=(8, 6))
691:     >>> ax = fig.add_subplot(111)
692:     >>> res = stats.ppcc_plot(x, -5, 5, plot=ax)
693: 
694:     We calculate the value where the shape should reach its maximum and a red
695:     line is drawn there. The line should coincide with the highest point in the
696:     ppcc_plot.
697: 
698:     >>> max = stats.ppcc_max(x)
699:     >>> ax.vlines(max, 0, 1, colors='r', label='Expected shape value')
700: 
701:     >>> plt.show()
702: 
703:     '''
704:     dist = _parse_dist_kw(dist)
705:     osm_uniform = _calc_uniform_order_statistic_medians(len(x))
706:     osr = sort(x)
707: 
708:     # this function computes the x-axis values of the probability plot
709:     #  and computes a linear regression (including the correlation)
710:     #  and returns 1-r so that a minimization function maximizes the
711:     #  correlation
712:     def tempfunc(shape, mi, yvals, func):
713:         xvals = func(mi, shape)
714:         r, prob = stats.pearsonr(xvals, yvals)
715:         return 1 - r
716: 
717:     return optimize.brent(tempfunc, brack=brack, args=(osm_uniform, osr, dist.ppf))
718: 
719: 
720: def ppcc_plot(x, a, b, dist='tukeylambda', plot=None, N=80):
721:     '''
722:     Calculate and optionally plot probability plot correlation coefficient.
723: 
724:     The probability plot correlation coefficient (PPCC) plot can be used to
725:     determine the optimal shape parameter for a one-parameter family of
726:     distributions.  It cannot be used for distributions without shape parameters
727:     (like the normal distribution) or with multiple shape parameters.
728: 
729:     By default a Tukey-Lambda distribution (`stats.tukeylambda`) is used. A
730:     Tukey-Lambda PPCC plot interpolates from long-tailed to short-tailed
731:     distributions via an approximately normal one, and is therefore particularly
732:     useful in practice.
733: 
734:     Parameters
735:     ----------
736:     x : array_like
737:         Input array.
738:     a, b: scalar
739:         Lower and upper bounds of the shape parameter to use.
740:     dist : str or stats.distributions instance, optional
741:         Distribution or distribution function name.  Objects that look enough
742:         like a stats.distributions instance (i.e. they have a ``ppf`` method)
743:         are also accepted.  The default is ``'tukeylambda'``.
744:     plot : object, optional
745:         If given, plots PPCC against the shape parameter.
746:         `plot` is an object that has to have methods "plot" and "text".
747:         The `matplotlib.pyplot` module or a Matplotlib Axes object can be used,
748:         or a custom object with the same methods.
749:         Default is None, which means that no plot is created.
750:     N : int, optional
751:         Number of points on the horizontal axis (equally distributed from
752:         `a` to `b`).
753: 
754:     Returns
755:     -------
756:     svals : ndarray
757:         The shape values for which `ppcc` was calculated.
758:     ppcc : ndarray
759:         The calculated probability plot correlation coefficient values.
760: 
761:     See also
762:     --------
763:     ppcc_max, probplot, boxcox_normplot, tukeylambda
764: 
765:     References
766:     ----------
767:     J.J. Filliben, "The Probability Plot Correlation Coefficient Test for
768:     Normality", Technometrics, Vol. 17, pp. 111-117, 1975.
769: 
770:     Examples
771:     --------
772:     First we generate some random data from a Tukey-Lambda distribution,
773:     with shape parameter -0.7:
774: 
775:     >>> from scipy import stats
776:     >>> import matplotlib.pyplot as plt
777:     >>> np.random.seed(1234567)
778:     >>> x = stats.tukeylambda.rvs(-0.7, loc=2, scale=0.5, size=10000) + 1e4
779: 
780:     Now we explore this data with a PPCC plot as well as the related
781:     probability plot and Box-Cox normplot.  A red line is drawn where we
782:     expect the PPCC value to be maximal (at the shape parameter -0.7 used
783:     above):
784: 
785:     >>> fig = plt.figure(figsize=(12, 4))
786:     >>> ax1 = fig.add_subplot(131)
787:     >>> ax2 = fig.add_subplot(132)
788:     >>> ax3 = fig.add_subplot(133)
789:     >>> res = stats.probplot(x, plot=ax1)
790:     >>> res = stats.boxcox_normplot(x, -5, 5, plot=ax2)
791:     >>> res = stats.ppcc_plot(x, -5, 5, plot=ax3)
792:     >>> ax3.vlines(-0.7, 0, 1, colors='r', label='Expected shape value')
793:     >>> plt.show()
794: 
795:     '''
796:     if b <= a:
797:         raise ValueError("`b` has to be larger than `a`.")
798: 
799:     svals = np.linspace(a, b, num=N)
800:     ppcc = np.empty_like(svals)
801:     for k, sval in enumerate(svals):
802:         _, r2 = probplot(x, sval, dist=dist, fit=True)
803:         ppcc[k] = r2[-1]
804: 
805:     if plot is not None:
806:         plot.plot(svals, ppcc, 'x')
807:         _add_axis_labels_title(plot, xlabel='Shape Values',
808:                                ylabel='Prob Plot Corr. Coef.',
809:                                title='(%s) PPCC Plot' % dist)
810: 
811:     return svals, ppcc
812: 
813: 
814: def boxcox_llf(lmb, data):
815:     r'''The boxcox log-likelihood function.
816: 
817:     Parameters
818:     ----------
819:     lmb : scalar
820:         Parameter for Box-Cox transformation.  See `boxcox` for details.
821:     data : array_like
822:         Data to calculate Box-Cox log-likelihood for.  If `data` is
823:         multi-dimensional, the log-likelihood is calculated along the first
824:         axis.
825: 
826:     Returns
827:     -------
828:     llf : float or ndarray
829:         Box-Cox log-likelihood of `data` given `lmb`.  A float for 1-D `data`,
830:         an array otherwise.
831: 
832:     See Also
833:     --------
834:     boxcox, probplot, boxcox_normplot, boxcox_normmax
835: 
836:     Notes
837:     -----
838:     The Box-Cox log-likelihood function is defined here as
839: 
840:     .. math::
841: 
842:         llf = (\lambda - 1) \sum_i(\log(x_i)) -
843:               N/2 \log(\sum_i (y_i - \bar{y})^2 / N),
844: 
845:     where ``y`` is the Box-Cox transformed input data ``x``.
846: 
847:     Examples
848:     --------
849:     >>> from scipy import stats
850:     >>> import matplotlib.pyplot as plt
851:     >>> from mpl_toolkits.axes_grid1.inset_locator import inset_axes
852:     >>> np.random.seed(1245)
853: 
854:     Generate some random variates and calculate Box-Cox log-likelihood values
855:     for them for a range of ``lmbda`` values:
856: 
857:     >>> x = stats.loggamma.rvs(5, loc=10, size=1000)
858:     >>> lmbdas = np.linspace(-2, 10)
859:     >>> llf = np.zeros(lmbdas.shape, dtype=float)
860:     >>> for ii, lmbda in enumerate(lmbdas):
861:     ...     llf[ii] = stats.boxcox_llf(lmbda, x)
862: 
863:     Also find the optimal lmbda value with `boxcox`:
864: 
865:     >>> x_most_normal, lmbda_optimal = stats.boxcox(x)
866: 
867:     Plot the log-likelihood as function of lmbda.  Add the optimal lmbda as a
868:     horizontal line to check that that's really the optimum:
869: 
870:     >>> fig = plt.figure()
871:     >>> ax = fig.add_subplot(111)
872:     >>> ax.plot(lmbdas, llf, 'b.-')
873:     >>> ax.axhline(stats.boxcox_llf(lmbda_optimal, x), color='r')
874:     >>> ax.set_xlabel('lmbda parameter')
875:     >>> ax.set_ylabel('Box-Cox log-likelihood')
876: 
877:     Now add some probability plots to show that where the log-likelihood is
878:     maximized the data transformed with `boxcox` looks closest to normal:
879: 
880:     >>> locs = [3, 10, 4]  # 'lower left', 'center', 'lower right'
881:     >>> for lmbda, loc in zip([-1, lmbda_optimal, 9], locs):
882:     ...     xt = stats.boxcox(x, lmbda=lmbda)
883:     ...     (osm, osr), (slope, intercept, r_sq) = stats.probplot(xt)
884:     ...     ax_inset = inset_axes(ax, width="20%", height="20%", loc=loc)
885:     ...     ax_inset.plot(osm, osr, 'c.', osm, slope*osm + intercept, 'k-')
886:     ...     ax_inset.set_xticklabels([])
887:     ...     ax_inset.set_yticklabels([])
888:     ...     ax_inset.set_title('$\lambda=%1.2f$' % lmbda)
889: 
890:     >>> plt.show()
891: 
892:     '''
893:     data = np.asarray(data)
894:     N = data.shape[0]
895:     if N == 0:
896:         return np.nan
897: 
898:     y = boxcox(data, lmb)
899:     y_mean = np.mean(y, axis=0)
900:     llf = (lmb - 1) * np.sum(np.log(data), axis=0)
901:     llf -= N / 2.0 * np.log(np.sum((y - y_mean)**2. / N, axis=0))
902:     return llf
903: 
904: 
905: def _boxcox_conf_interval(x, lmax, alpha):
906:     # Need to find the lambda for which
907:     #  f(x,lmbda) >= f(x,lmax) - 0.5*chi^2_alpha;1
908:     fac = 0.5 * distributions.chi2.ppf(1 - alpha, 1)
909:     target = boxcox_llf(lmax, x) - fac
910: 
911:     def rootfunc(lmbda, data, target):
912:         return boxcox_llf(lmbda, data) - target
913: 
914:     # Find positive endpoint of interval in which answer is to be found
915:     newlm = lmax + 0.5
916:     N = 0
917:     while (rootfunc(newlm, x, target) > 0.0) and (N < 500):
918:         newlm += 0.1
919:         N += 1
920: 
921:     if N == 500:
922:         raise RuntimeError("Could not find endpoint.")
923: 
924:     lmplus = optimize.brentq(rootfunc, lmax, newlm, args=(x, target))
925: 
926:     # Now find negative interval in the same way
927:     newlm = lmax - 0.5
928:     N = 0
929:     while (rootfunc(newlm, x, target) > 0.0) and (N < 500):
930:         newlm -= 0.1
931:         N += 1
932: 
933:     if N == 500:
934:         raise RuntimeError("Could not find endpoint.")
935: 
936:     lmminus = optimize.brentq(rootfunc, newlm, lmax, args=(x, target))
937:     return lmminus, lmplus
938: 
939: 
940: def boxcox(x, lmbda=None, alpha=None):
941:     r'''
942:     Return a positive dataset transformed by a Box-Cox power transformation.
943: 
944:     Parameters
945:     ----------
946:     x : ndarray
947:         Input array.  Should be 1-dimensional.
948:     lmbda : {None, scalar}, optional
949:         If `lmbda` is not None, do the transformation for that value.
950: 
951:         If `lmbda` is None, find the lambda that maximizes the log-likelihood
952:         function and return it as the second output argument.
953:     alpha : {None, float}, optional
954:         If ``alpha`` is not None, return the ``100 * (1-alpha)%`` confidence
955:         interval for `lmbda` as the third output argument.
956:         Must be between 0.0 and 1.0.
957: 
958:     Returns
959:     -------
960:     boxcox : ndarray
961:         Box-Cox power transformed array.
962:     maxlog : float, optional
963:         If the `lmbda` parameter is None, the second returned argument is
964:         the lambda that maximizes the log-likelihood function.
965:     (min_ci, max_ci) : tuple of float, optional
966:         If `lmbda` parameter is None and ``alpha`` is not None, this returned
967:         tuple of floats represents the minimum and maximum confidence limits
968:         given ``alpha``.
969: 
970:     See Also
971:     --------
972:     probplot, boxcox_normplot, boxcox_normmax, boxcox_llf
973: 
974:     Notes
975:     -----
976:     The Box-Cox transform is given by::
977: 
978:         y = (x**lmbda - 1) / lmbda,  for lmbda > 0
979:             log(x),                  for lmbda = 0
980: 
981:     `boxcox` requires the input data to be positive.  Sometimes a Box-Cox
982:     transformation provides a shift parameter to achieve this; `boxcox` does
983:     not.  Such a shift parameter is equivalent to adding a positive constant to
984:     `x` before calling `boxcox`.
985: 
986:     The confidence limits returned when ``alpha`` is provided give the interval
987:     where:
988: 
989:     .. math::
990: 
991:         llf(\hat{\lambda}) - llf(\lambda) < \frac{1}{2}\chi^2(1 - \alpha, 1),
992: 
993:     with ``llf`` the log-likelihood function and :math:`\chi^2` the chi-squared
994:     function.
995: 
996:     References
997:     ----------
998:     G.E.P. Box and D.R. Cox, "An Analysis of Transformations", Journal of the
999:     Royal Statistical Society B, 26, 211-252 (1964).
1000: 
1001:     Examples
1002:     --------
1003:     >>> from scipy import stats
1004:     >>> import matplotlib.pyplot as plt
1005: 
1006:     We generate some random variates from a non-normal distribution and make a
1007:     probability plot for it, to show it is non-normal in the tails:
1008: 
1009:     >>> fig = plt.figure()
1010:     >>> ax1 = fig.add_subplot(211)
1011:     >>> x = stats.loggamma.rvs(5, size=500) + 5
1012:     >>> prob = stats.probplot(x, dist=stats.norm, plot=ax1)
1013:     >>> ax1.set_xlabel('')
1014:     >>> ax1.set_title('Probplot against normal distribution')
1015: 
1016:     We now use `boxcox` to transform the data so it's closest to normal:
1017: 
1018:     >>> ax2 = fig.add_subplot(212)
1019:     >>> xt, _ = stats.boxcox(x)
1020:     >>> prob = stats.probplot(xt, dist=stats.norm, plot=ax2)
1021:     >>> ax2.set_title('Probplot after Box-Cox transformation')
1022: 
1023:     >>> plt.show()
1024: 
1025:     '''
1026:     x = np.asarray(x)
1027:     if x.size == 0:
1028:         return x
1029: 
1030:     if any(x <= 0):
1031:         raise ValueError("Data must be positive.")
1032: 
1033:     if lmbda is not None:  # single transformation
1034:         return special.boxcox(x, lmbda)
1035: 
1036:     # If lmbda=None, find the lmbda that maximizes the log-likelihood function.
1037:     lmax = boxcox_normmax(x, method='mle')
1038:     y = boxcox(x, lmax)
1039: 
1040:     if alpha is None:
1041:         return y, lmax
1042:     else:
1043:         # Find confidence interval
1044:         interval = _boxcox_conf_interval(x, lmax, alpha)
1045:         return y, lmax, interval
1046: 
1047: 
1048: def boxcox_normmax(x, brack=(-2.0, 2.0), method='pearsonr'):
1049:     '''Compute optimal Box-Cox transform parameter for input data.
1050: 
1051:     Parameters
1052:     ----------
1053:     x : array_like
1054:         Input array.
1055:     brack : 2-tuple, optional
1056:         The starting interval for a downhill bracket search with
1057:         `optimize.brent`.  Note that this is in most cases not critical; the
1058:         final result is allowed to be outside this bracket.
1059:     method : str, optional
1060:         The method to determine the optimal transform parameter (`boxcox`
1061:         ``lmbda`` parameter). Options are:
1062: 
1063:         'pearsonr'  (default)
1064:             Maximizes the Pearson correlation coefficient between
1065:             ``y = boxcox(x)`` and the expected values for ``y`` if `x` would be
1066:             normally-distributed.
1067: 
1068:         'mle'
1069:             Minimizes the log-likelihood `boxcox_llf`.  This is the method used
1070:             in `boxcox`.
1071: 
1072:         'all'
1073:             Use all optimization methods available, and return all results.
1074:             Useful to compare different methods.
1075: 
1076:     Returns
1077:     -------
1078:     maxlog : float or ndarray
1079:         The optimal transform parameter found.  An array instead of a scalar
1080:         for ``method='all'``.
1081: 
1082:     See Also
1083:     --------
1084:     boxcox, boxcox_llf, boxcox_normplot
1085: 
1086:     Examples
1087:     --------
1088:     >>> from scipy import stats
1089:     >>> import matplotlib.pyplot as plt
1090:     >>> np.random.seed(1234)  # make this example reproducible
1091: 
1092:     Generate some data and determine optimal ``lmbda`` in various ways:
1093: 
1094:     >>> x = stats.loggamma.rvs(5, size=30) + 5
1095:     >>> y, lmax_mle = stats.boxcox(x)
1096:     >>> lmax_pearsonr = stats.boxcox_normmax(x)
1097: 
1098:     >>> lmax_mle
1099:     7.177...
1100:     >>> lmax_pearsonr
1101:     7.916...
1102:     >>> stats.boxcox_normmax(x, method='all')
1103:     array([ 7.91667384,  7.17718692])
1104: 
1105:     >>> fig = plt.figure()
1106:     >>> ax = fig.add_subplot(111)
1107:     >>> prob = stats.boxcox_normplot(x, -10, 10, plot=ax)
1108:     >>> ax.axvline(lmax_mle, color='r')
1109:     >>> ax.axvline(lmax_pearsonr, color='g', ls='--')
1110: 
1111:     >>> plt.show()
1112: 
1113:     '''
1114: 
1115:     def _pearsonr(x, brack):
1116:         osm_uniform = _calc_uniform_order_statistic_medians(len(x))
1117:         xvals = distributions.norm.ppf(osm_uniform)
1118: 
1119:         def _eval_pearsonr(lmbda, xvals, samps):
1120:             # This function computes the x-axis values of the probability plot
1121:             # and computes a linear regression (including the correlation) and
1122:             # returns ``1 - r`` so that a minimization function maximizes the
1123:             # correlation.
1124:             y = boxcox(samps, lmbda)
1125:             yvals = np.sort(y)
1126:             r, prob = stats.pearsonr(xvals, yvals)
1127:             return 1 - r
1128: 
1129:         return optimize.brent(_eval_pearsonr, brack=brack, args=(xvals, x))
1130: 
1131:     def _mle(x, brack):
1132:         def _eval_mle(lmb, data):
1133:             # function to minimize
1134:             return -boxcox_llf(lmb, data)
1135: 
1136:         return optimize.brent(_eval_mle, brack=brack, args=(x,))
1137: 
1138:     def _all(x, brack):
1139:         maxlog = np.zeros(2, dtype=float)
1140:         maxlog[0] = _pearsonr(x, brack)
1141:         maxlog[1] = _mle(x, brack)
1142:         return maxlog
1143: 
1144:     methods = {'pearsonr': _pearsonr,
1145:                'mle': _mle,
1146:                'all': _all}
1147:     if method not in methods.keys():
1148:         raise ValueError("Method %s not recognized." % method)
1149: 
1150:     optimfunc = methods[method]
1151:     return optimfunc(x, brack)
1152: 
1153: 
1154: def boxcox_normplot(x, la, lb, plot=None, N=80):
1155:     '''Compute parameters for a Box-Cox normality plot, optionally show it.
1156: 
1157:     A Box-Cox normality plot shows graphically what the best transformation
1158:     parameter is to use in `boxcox` to obtain a distribution that is close
1159:     to normal.
1160: 
1161:     Parameters
1162:     ----------
1163:     x : array_like
1164:         Input array.
1165:     la, lb : scalar
1166:         The lower and upper bounds for the ``lmbda`` values to pass to `boxcox`
1167:         for Box-Cox transformations.  These are also the limits of the
1168:         horizontal axis of the plot if that is generated.
1169:     plot : object, optional
1170:         If given, plots the quantiles and least squares fit.
1171:         `plot` is an object that has to have methods "plot" and "text".
1172:         The `matplotlib.pyplot` module or a Matplotlib Axes object can be used,
1173:         or a custom object with the same methods.
1174:         Default is None, which means that no plot is created.
1175:     N : int, optional
1176:         Number of points on the horizontal axis (equally distributed from
1177:         `la` to `lb`).
1178: 
1179:     Returns
1180:     -------
1181:     lmbdas : ndarray
1182:         The ``lmbda`` values for which a Box-Cox transform was done.
1183:     ppcc : ndarray
1184:         Probability Plot Correlelation Coefficient, as obtained from `probplot`
1185:         when fitting the Box-Cox transformed input `x` against a normal
1186:         distribution.
1187: 
1188:     See Also
1189:     --------
1190:     probplot, boxcox, boxcox_normmax, boxcox_llf, ppcc_max
1191: 
1192:     Notes
1193:     -----
1194:     Even if `plot` is given, the figure is not shown or saved by
1195:     `boxcox_normplot`; ``plt.show()`` or ``plt.savefig('figname.png')``
1196:     should be used after calling `probplot`.
1197: 
1198:     Examples
1199:     --------
1200:     >>> from scipy import stats
1201:     >>> import matplotlib.pyplot as plt
1202: 
1203:     Generate some non-normally distributed data, and create a Box-Cox plot:
1204: 
1205:     >>> x = stats.loggamma.rvs(5, size=500) + 5
1206:     >>> fig = plt.figure()
1207:     >>> ax = fig.add_subplot(111)
1208:     >>> prob = stats.boxcox_normplot(x, -20, 20, plot=ax)
1209: 
1210:     Determine and plot the optimal ``lmbda`` to transform ``x`` and plot it in
1211:     the same plot:
1212: 
1213:     >>> _, maxlog = stats.boxcox(x)
1214:     >>> ax.axvline(maxlog, color='r')
1215: 
1216:     >>> plt.show()
1217: 
1218:     '''
1219:     x = np.asarray(x)
1220:     if x.size == 0:
1221:         return x
1222: 
1223:     if lb <= la:
1224:         raise ValueError("`lb` has to be larger than `la`.")
1225: 
1226:     lmbdas = np.linspace(la, lb, num=N)
1227:     ppcc = lmbdas * 0.0
1228:     for i, val in enumerate(lmbdas):
1229:         # Determine for each lmbda the correlation coefficient of transformed x
1230:         z = boxcox(x, lmbda=val)
1231:         _, r2 = probplot(z, dist='norm', fit=True)
1232:         ppcc[i] = r2[-1]
1233: 
1234:     if plot is not None:
1235:         plot.plot(lmbdas, ppcc, 'x')
1236:         _add_axis_labels_title(plot, xlabel='$\\lambda$',
1237:                                ylabel='Prob Plot Corr. Coef.',
1238:                                title='Box-Cox Normality Plot')
1239: 
1240:     return lmbdas, ppcc
1241: 
1242: 
1243: def shapiro(x):
1244:     '''
1245:     Perform the Shapiro-Wilk test for normality.
1246: 
1247:     The Shapiro-Wilk test tests the null hypothesis that the
1248:     data was drawn from a normal distribution.
1249: 
1250:     Parameters
1251:     ----------
1252:     x : array_like
1253:         Array of sample data.
1254: 
1255:     Returns
1256:     -------
1257:     W : float
1258:         The test statistic.
1259:     p-value : float
1260:         The p-value for the hypothesis test.
1261: 
1262:     See Also
1263:     --------
1264:     anderson : The Anderson-Darling test for normality
1265:     kstest : The Kolmogorov-Smirnov test for goodness of fit.
1266: 
1267:     Notes
1268:     -----
1269:     The algorithm used is described in [4]_ but censoring parameters as
1270:     described are not implemented. For N > 5000 the W test statistic is accurate
1271:     but the p-value may not be.
1272: 
1273:     The chance of rejecting the null hypothesis when it is true is close to 5%
1274:     regardless of sample size.
1275: 
1276:     References
1277:     ----------
1278:     .. [1] http://www.itl.nist.gov/div898/handbook/prc/section2/prc213.htm
1279:     .. [2] Shapiro, S. S. & Wilk, M.B (1965). An analysis of variance test for
1280:            normality (complete samples), Biometrika, Vol. 52, pp. 591-611.
1281:     .. [3] Razali, N. M. & Wah, Y. B. (2011) Power comparisons of Shapiro-Wilk,
1282:            Kolmogorov-Smirnov, Lilliefors and Anderson-Darling tests, Journal of
1283:            Statistical Modeling and Analytics, Vol. 2, pp. 21-33.
1284:     .. [4] ALGORITHM AS R94 APPL. STATIST. (1995) VOL. 44, NO. 4.
1285: 
1286:     Examples
1287:     --------
1288:     >>> from scipy import stats
1289:     >>> np.random.seed(12345678)
1290:     >>> x = stats.norm.rvs(loc=5, scale=3, size=100)
1291:     >>> stats.shapiro(x)
1292:     (0.9772805571556091, 0.08144091814756393)
1293: 
1294:     '''
1295:     x = np.ravel(x)
1296: 
1297:     N = len(x)
1298:     if N < 3:
1299:         raise ValueError("Data must be at least length 3.")
1300: 
1301:     a = zeros(N, 'f')
1302:     init = 0
1303: 
1304:     y = sort(x)
1305:     a, w, pw, ifault = statlib.swilk(y, a[:N//2], init)
1306:     if ifault not in [0, 2]:
1307:         warnings.warn("Input data for shapiro has range zero. The results "
1308:                       "may not be accurate.")
1309:     if N > 5000:
1310:         warnings.warn("p-value may not be accurate for N > 5000.")
1311: 
1312:     return w, pw
1313: 
1314: # Values from Stephens, M A, "EDF Statistics for Goodness of Fit and
1315: #             Some Comparisons", Journal of he American Statistical
1316: #             Association, Vol. 69, Issue 347, Sept. 1974, pp 730-737
1317: _Avals_norm = array([0.576, 0.656, 0.787, 0.918, 1.092])
1318: _Avals_expon = array([0.922, 1.078, 1.341, 1.606, 1.957])
1319: # From Stephens, M A, "Goodness of Fit for the Extreme Value Distribution",
1320: #             Biometrika, Vol. 64, Issue 3, Dec. 1977, pp 583-588.
1321: _Avals_gumbel = array([0.474, 0.637, 0.757, 0.877, 1.038])
1322: # From Stephens, M A, "Tests of Fit for the Logistic Distribution Based
1323: #             on the Empirical Distribution Function.", Biometrika,
1324: #             Vol. 66, Issue 3, Dec. 1979, pp 591-595.
1325: _Avals_logistic = array([0.426, 0.563, 0.660, 0.769, 0.906, 1.010])
1326: 
1327: 
1328: AndersonResult = namedtuple('AndersonResult', ('statistic',
1329:                                                'critical_values',
1330:                                                'significance_level'))
1331: 
1332: 
1333: def anderson(x, dist='norm'):
1334:     '''
1335:     Anderson-Darling test for data coming from a particular distribution
1336: 
1337:     The Anderson-Darling test is a modification of the Kolmogorov-
1338:     Smirnov test `kstest` for the null hypothesis that a sample is
1339:     drawn from a population that follows a particular distribution.
1340:     For the Anderson-Darling test, the critical values depend on
1341:     which distribution is being tested against.  This function works
1342:     for normal, exponential, logistic, or Gumbel (Extreme Value
1343:     Type I) distributions.
1344: 
1345:     Parameters
1346:     ----------
1347:     x : array_like
1348:         array of sample data
1349:     dist : {'norm','expon','logistic','gumbel','gumbel_l', gumbel_r',
1350:         'extreme1'}, optional
1351:         the type of distribution to test against.  The default is 'norm'
1352:         and 'extreme1', 'gumbel_l' and 'gumbel' are synonyms.
1353: 
1354:     Returns
1355:     -------
1356:     statistic : float
1357:         The Anderson-Darling test statistic
1358:     critical_values : list
1359:         The critical values for this distribution
1360:     significance_level : list
1361:         The significance levels for the corresponding critical values
1362:         in percents.  The function returns critical values for a
1363:         differing set of significance levels depending on the
1364:         distribution that is being tested against.
1365: 
1366:     Notes
1367:     -----
1368:     Critical values provided are for the following significance levels:
1369: 
1370:     normal/exponenential
1371:         15%, 10%, 5%, 2.5%, 1%
1372:     logistic
1373:         25%, 10%, 5%, 2.5%, 1%, 0.5%
1374:     Gumbel
1375:         25%, 10%, 5%, 2.5%, 1%
1376: 
1377:     If A2 is larger than these critical values then for the corresponding
1378:     significance level, the null hypothesis that the data come from the
1379:     chosen distribution can be rejected.
1380: 
1381:     References
1382:     ----------
1383:     .. [1] http://www.itl.nist.gov/div898/handbook/prc/section2/prc213.htm
1384:     .. [2] Stephens, M. A. (1974). EDF Statistics for Goodness of Fit and
1385:            Some Comparisons, Journal of the American Statistical Association,
1386:            Vol. 69, pp. 730-737.
1387:     .. [3] Stephens, M. A. (1976). Asymptotic Results for Goodness-of-Fit
1388:            Statistics with Unknown Parameters, Annals of Statistics, Vol. 4,
1389:            pp. 357-369.
1390:     .. [4] Stephens, M. A. (1977). Goodness of Fit for the Extreme Value
1391:            Distribution, Biometrika, Vol. 64, pp. 583-588.
1392:     .. [5] Stephens, M. A. (1977). Goodness of Fit with Special Reference
1393:            to Tests for Exponentiality , Technical Report No. 262,
1394:            Department of Statistics, Stanford University, Stanford, CA.
1395:     .. [6] Stephens, M. A. (1979). Tests of Fit for the Logistic Distribution
1396:            Based on the Empirical Distribution Function, Biometrika, Vol. 66,
1397:            pp. 591-595.
1398: 
1399:     '''
1400:     if dist not in ['norm', 'expon', 'gumbel', 'gumbel_l',
1401:                     'gumbel_r', 'extreme1', 'logistic']:
1402:         raise ValueError("Invalid distribution; dist must be 'norm', "
1403:                          "'expon', 'gumbel', 'extreme1' or 'logistic'.")
1404:     y = sort(x)
1405:     xbar = np.mean(x, axis=0)
1406:     N = len(y)
1407:     if dist == 'norm':
1408:         s = np.std(x, ddof=1, axis=0)
1409:         w = (y - xbar) / s
1410:         logcdf = distributions.norm.logcdf(w)
1411:         logsf = distributions.norm.logsf(w)
1412:         sig = array([15, 10, 5, 2.5, 1])
1413:         critical = around(_Avals_norm / (1.0 + 4.0/N - 25.0/N/N), 3)
1414:     elif dist == 'expon':
1415:         w = y / xbar
1416:         logcdf = distributions.expon.logcdf(w)
1417:         logsf = distributions.expon.logsf(w)
1418:         sig = array([15, 10, 5, 2.5, 1])
1419:         critical = around(_Avals_expon / (1.0 + 0.6/N), 3)
1420:     elif dist == 'logistic':
1421:         def rootfunc(ab, xj, N):
1422:             a, b = ab
1423:             tmp = (xj - a) / b
1424:             tmp2 = exp(tmp)
1425:             val = [np.sum(1.0/(1+tmp2), axis=0) - 0.5*N,
1426:                    np.sum(tmp*(1.0-tmp2)/(1+tmp2), axis=0) + N]
1427:             return array(val)
1428: 
1429:         sol0 = array([xbar, np.std(x, ddof=1, axis=0)])
1430:         sol = optimize.fsolve(rootfunc, sol0, args=(x, N), xtol=1e-5)
1431:         w = (y - sol[0]) / sol[1]
1432:         logcdf = distributions.logistic.logcdf(w)
1433:         logsf = distributions.logistic.logsf(w)
1434:         sig = array([25, 10, 5, 2.5, 1, 0.5])
1435:         critical = around(_Avals_logistic / (1.0 + 0.25/N), 3)
1436:     elif dist == 'gumbel_r':
1437:         xbar, s = distributions.gumbel_r.fit(x)
1438:         w = (y - xbar) / s
1439:         logcdf = distributions.gumbel_r.logcdf(w)
1440:         logsf = distributions.gumbel_r.logsf(w)
1441:         sig = array([25, 10, 5, 2.5, 1])
1442:         critical = around(_Avals_gumbel / (1.0 + 0.2/sqrt(N)), 3)
1443:     else:  # (dist == 'gumbel') or (dist == 'gumbel_l') or (dist == 'extreme1')
1444:         xbar, s = distributions.gumbel_l.fit(x)
1445:         w = (y - xbar) / s
1446:         logcdf = distributions.gumbel_l.logcdf(w)
1447:         logsf = distributions.gumbel_l.logsf(w)
1448:         sig = array([25, 10, 5, 2.5, 1])
1449:         critical = around(_Avals_gumbel / (1.0 + 0.2/sqrt(N)), 3)
1450: 
1451:     i = arange(1, N + 1)
1452:     A2 = -N - np.sum((2*i - 1.0) / N * (logcdf + logsf[::-1]), axis=0)
1453: 
1454:     return AndersonResult(A2, critical, sig)
1455: 
1456: 
1457: def _anderson_ksamp_midrank(samples, Z, Zstar, k, n, N):
1458:     '''
1459:     Compute A2akN equation 7 of Scholz and Stephens.
1460: 
1461:     Parameters
1462:     ----------
1463:     samples : sequence of 1-D array_like
1464:         Array of sample arrays.
1465:     Z : array_like
1466:         Sorted array of all observations.
1467:     Zstar : array_like
1468:         Sorted array of unique observations.
1469:     k : int
1470:         Number of samples.
1471:     n : array_like
1472:         Number of observations in each sample.
1473:     N : int
1474:         Total number of observations.
1475: 
1476:     Returns
1477:     -------
1478:     A2aKN : float
1479:         The A2aKN statistics of Scholz and Stephens 1987.
1480:     '''
1481: 
1482:     A2akN = 0.
1483:     Z_ssorted_left = Z.searchsorted(Zstar, 'left')
1484:     if N == Zstar.size:
1485:         lj = 1.
1486:     else:
1487:         lj = Z.searchsorted(Zstar, 'right') - Z_ssorted_left
1488:     Bj = Z_ssorted_left + lj / 2.
1489:     for i in arange(0, k):
1490:         s = np.sort(samples[i])
1491:         s_ssorted_right = s.searchsorted(Zstar, side='right')
1492:         Mij = s_ssorted_right.astype(float)
1493:         fij = s_ssorted_right - s.searchsorted(Zstar, 'left')
1494:         Mij -= fij / 2.
1495:         inner = lj / float(N) * (N*Mij - Bj*n[i])**2 / (Bj*(N - Bj) - N*lj/4.)
1496:         A2akN += inner.sum() / n[i]
1497:     A2akN *= (N - 1.) / N
1498:     return A2akN
1499: 
1500: 
1501: def _anderson_ksamp_right(samples, Z, Zstar, k, n, N):
1502:     '''
1503:     Compute A2akN equation 6 of Scholz & Stephens.
1504: 
1505:     Parameters
1506:     ----------
1507:     samples : sequence of 1-D array_like
1508:         Array of sample arrays.
1509:     Z : array_like
1510:         Sorted array of all observations.
1511:     Zstar : array_like
1512:         Sorted array of unique observations.
1513:     k : int
1514:         Number of samples.
1515:     n : array_like
1516:         Number of observations in each sample.
1517:     N : int
1518:         Total number of observations.
1519: 
1520:     Returns
1521:     -------
1522:     A2KN : float
1523:         The A2KN statistics of Scholz and Stephens 1987.
1524:     '''
1525: 
1526:     A2kN = 0.
1527:     lj = Z.searchsorted(Zstar[:-1], 'right') - Z.searchsorted(Zstar[:-1],
1528:                                                               'left')
1529:     Bj = lj.cumsum()
1530:     for i in arange(0, k):
1531:         s = np.sort(samples[i])
1532:         Mij = s.searchsorted(Zstar[:-1], side='right')
1533:         inner = lj / float(N) * (N * Mij - Bj * n[i])**2 / (Bj * (N - Bj))
1534:         A2kN += inner.sum() / n[i]
1535:     return A2kN
1536: 
1537: 
1538: Anderson_ksampResult = namedtuple('Anderson_ksampResult',
1539:                                   ('statistic', 'critical_values',
1540:                                    'significance_level'))
1541: 
1542: 
1543: def anderson_ksamp(samples, midrank=True):
1544:     '''The Anderson-Darling test for k-samples.
1545: 
1546:     The k-sample Anderson-Darling test is a modification of the
1547:     one-sample Anderson-Darling test. It tests the null hypothesis
1548:     that k-samples are drawn from the same population without having
1549:     to specify the distribution function of that population. The
1550:     critical values depend on the number of samples.
1551: 
1552:     Parameters
1553:     ----------
1554:     samples : sequence of 1-D array_like
1555:         Array of sample data in arrays.
1556:     midrank : bool, optional
1557:         Type of Anderson-Darling test which is computed. Default
1558:         (True) is the midrank test applicable to continuous and
1559:         discrete populations. If False, the right side empirical
1560:         distribution is used.
1561: 
1562:     Returns
1563:     -------
1564:     statistic : float
1565:         Normalized k-sample Anderson-Darling test statistic.
1566:     critical_values : array
1567:         The critical values for significance levels 25%, 10%, 5%, 2.5%, 1%.
1568:     significance_level : float
1569:         An approximate significance level at which the null hypothesis for the
1570:         provided samples can be rejected.
1571: 
1572:     Raises
1573:     ------
1574:     ValueError
1575:         If less than 2 samples are provided, a sample is empty, or no
1576:         distinct observations are in the samples.
1577: 
1578:     See Also
1579:     --------
1580:     ks_2samp : 2 sample Kolmogorov-Smirnov test
1581:     anderson : 1 sample Anderson-Darling test
1582: 
1583:     Notes
1584:     -----
1585:     [1]_ Defines three versions of the k-sample Anderson-Darling test:
1586:     one for continuous distributions and two for discrete
1587:     distributions, in which ties between samples may occur. The
1588:     default of this routine is to compute the version based on the
1589:     midrank empirical distribution function. This test is applicable
1590:     to continuous and discrete data. If midrank is set to False, the
1591:     right side empirical distribution is used for a test for discrete
1592:     data. According to [1]_, the two discrete test statistics differ
1593:     only slightly if a few collisions due to round-off errors occur in
1594:     the test not adjusted for ties between samples.
1595: 
1596:     .. versionadded:: 0.14.0
1597: 
1598:     References
1599:     ----------
1600:     .. [1] Scholz, F. W and Stephens, M. A. (1987), K-Sample
1601:            Anderson-Darling Tests, Journal of the American Statistical
1602:            Association, Vol. 82, pp. 918-924.
1603: 
1604:     Examples
1605:     --------
1606:     >>> from scipy import stats
1607:     >>> np.random.seed(314159)
1608: 
1609:     The null hypothesis that the two random samples come from the same
1610:     distribution can be rejected at the 5% level because the returned
1611:     test value is greater than the critical value for 5% (1.961) but
1612:     not at the 2.5% level. The interpolation gives an approximate
1613:     significance level of 3.1%:
1614: 
1615:     >>> stats.anderson_ksamp([np.random.normal(size=50),
1616:     ... np.random.normal(loc=0.5, size=30)])
1617:     (2.4615796189876105,
1618:       array([ 0.325,  1.226,  1.961,  2.718,  3.752]),
1619:       0.03134990135800783)
1620: 
1621: 
1622:     The null hypothesis cannot be rejected for three samples from an
1623:     identical distribution. The approximate p-value (87%) has to be
1624:     computed by extrapolation and may not be very accurate:
1625: 
1626:     >>> stats.anderson_ksamp([np.random.normal(size=50),
1627:     ... np.random.normal(size=30), np.random.normal(size=20)])
1628:     (-0.73091722665244196,
1629:       array([ 0.44925884,  1.3052767 ,  1.9434184 ,  2.57696569,  3.41634856]),
1630:       0.8789283903979661)
1631: 
1632:     '''
1633:     k = len(samples)
1634:     if (k < 2):
1635:         raise ValueError("anderson_ksamp needs at least two samples")
1636: 
1637:     samples = list(map(np.asarray, samples))
1638:     Z = np.sort(np.hstack(samples))
1639:     N = Z.size
1640:     Zstar = np.unique(Z)
1641:     if Zstar.size < 2:
1642:         raise ValueError("anderson_ksamp needs more than one distinct "
1643:                          "observation")
1644: 
1645:     n = np.array([sample.size for sample in samples])
1646:     if any(n == 0):
1647:         raise ValueError("anderson_ksamp encountered sample without "
1648:                          "observations")
1649: 
1650:     if midrank:
1651:         A2kN = _anderson_ksamp_midrank(samples, Z, Zstar, k, n, N)
1652:     else:
1653:         A2kN = _anderson_ksamp_right(samples, Z, Zstar, k, n, N)
1654: 
1655:     H = (1. / n).sum()
1656:     hs_cs = (1. / arange(N - 1, 1, -1)).cumsum()
1657:     h = hs_cs[-1] + 1
1658:     g = (hs_cs / arange(2, N)).sum()
1659: 
1660:     a = (4*g - 6) * (k - 1) + (10 - 6*g)*H
1661:     b = (2*g - 4)*k**2 + 8*h*k + (2*g - 14*h - 4)*H - 8*h + 4*g - 6
1662:     c = (6*h + 2*g - 2)*k**2 + (4*h - 4*g + 6)*k + (2*h - 6)*H + 4*h
1663:     d = (2*h + 6)*k**2 - 4*h*k
1664:     sigmasq = (a*N**3 + b*N**2 + c*N + d) / ((N - 1.) * (N - 2.) * (N - 3.))
1665:     m = k - 1
1666:     A2 = (A2kN - m) / math.sqrt(sigmasq)
1667: 
1668:     # The b_i values are the interpolation coefficients from Table 2
1669:     # of Scholz and Stephens 1987
1670:     b0 = np.array([0.675, 1.281, 1.645, 1.96, 2.326])
1671:     b1 = np.array([-0.245, 0.25, 0.678, 1.149, 1.822])
1672:     b2 = np.array([-0.105, -0.305, -0.362, -0.391, -0.396])
1673:     critical = b0 + b1 / math.sqrt(m) + b2 / m
1674:     pf = np.polyfit(critical, log(np.array([0.25, 0.1, 0.05, 0.025, 0.01])), 2)
1675:     if A2 < critical.min() or A2 > critical.max():
1676:         warnings.warn("approximate p-value will be computed by extrapolation")
1677:     try:
1678:         p = math.exp(np.polyval(pf, A2))
1679:     except (OverflowError,):
1680:         p = float("inf")
1681:     return Anderson_ksampResult(A2, critical, p)
1682: 
1683: 
1684: AnsariResult = namedtuple('AnsariResult', ('statistic', 'pvalue'))
1685: 
1686: 
1687: def ansari(x, y):
1688:     '''
1689:     Perform the Ansari-Bradley test for equal scale parameters
1690: 
1691:     The Ansari-Bradley test is a non-parametric test for the equality
1692:     of the scale parameter of the distributions from which two
1693:     samples were drawn.
1694: 
1695:     Parameters
1696:     ----------
1697:     x, y : array_like
1698:         arrays of sample data
1699: 
1700:     Returns
1701:     -------
1702:     statistic : float
1703:         The Ansari-Bradley test statistic
1704:     pvalue : float
1705:         The p-value of the hypothesis test
1706: 
1707:     See Also
1708:     --------
1709:     fligner : A non-parametric test for the equality of k variances
1710:     mood : A non-parametric test for the equality of two scale parameters
1711: 
1712:     Notes
1713:     -----
1714:     The p-value given is exact when the sample sizes are both less than
1715:     55 and there are no ties, otherwise a normal approximation for the
1716:     p-value is used.
1717: 
1718:     References
1719:     ----------
1720:     .. [1] Sprent, Peter and N.C. Smeeton.  Applied nonparametric statistical
1721:            methods.  3rd ed. Chapman and Hall/CRC. 2001.  Section 5.8.2.
1722: 
1723:     '''
1724:     x, y = asarray(x), asarray(y)
1725:     n = len(x)
1726:     m = len(y)
1727:     if m < 1:
1728:         raise ValueError("Not enough other observations.")
1729:     if n < 1:
1730:         raise ValueError("Not enough test observations.")
1731: 
1732:     N = m + n
1733:     xy = r_[x, y]  # combine
1734:     rank = stats.rankdata(xy)
1735:     symrank = amin(array((rank, N - rank + 1)), 0)
1736:     AB = np.sum(symrank[:n], axis=0)
1737:     uxy = unique(xy)
1738:     repeats = (len(uxy) != len(xy))
1739:     exact = ((m < 55) and (n < 55) and not repeats)
1740:     if repeats and (m < 55 or n < 55):
1741:         warnings.warn("Ties preclude use of exact statistic.")
1742:     if exact:
1743:         astart, a1, ifault = statlib.gscale(n, m)
1744:         ind = AB - astart
1745:         total = np.sum(a1, axis=0)
1746:         if ind < len(a1)/2.0:
1747:             cind = int(ceil(ind))
1748:             if ind == cind:
1749:                 pval = 2.0 * np.sum(a1[:cind+1], axis=0) / total
1750:             else:
1751:                 pval = 2.0 * np.sum(a1[:cind], axis=0) / total
1752:         else:
1753:             find = int(floor(ind))
1754:             if ind == floor(ind):
1755:                 pval = 2.0 * np.sum(a1[find:], axis=0) / total
1756:             else:
1757:                 pval = 2.0 * np.sum(a1[find+1:], axis=0) / total
1758:         return AnsariResult(AB, min(1.0, pval))
1759: 
1760:     # otherwise compute normal approximation
1761:     if N % 2:  # N odd
1762:         mnAB = n * (N+1.0)**2 / 4.0 / N
1763:         varAB = n * m * (N+1.0) * (3+N**2) / (48.0 * N**2)
1764:     else:
1765:         mnAB = n * (N+2.0) / 4.0
1766:         varAB = m * n * (N+2) * (N-2.0) / 48 / (N-1.0)
1767:     if repeats:   # adjust variance estimates
1768:         # compute np.sum(tj * rj**2,axis=0)
1769:         fac = np.sum(symrank**2, axis=0)
1770:         if N % 2:  # N odd
1771:             varAB = m * n * (16*N*fac - (N+1)**4) / (16.0 * N**2 * (N-1))
1772:         else:  # N even
1773:             varAB = m * n * (16*fac - N*(N+2)**2) / (16.0 * N * (N-1))
1774: 
1775:     z = (AB - mnAB) / sqrt(varAB)
1776:     pval = distributions.norm.sf(abs(z)) * 2.0
1777:     return AnsariResult(AB, pval)
1778: 
1779: 
1780: BartlettResult = namedtuple('BartlettResult', ('statistic', 'pvalue'))
1781: 
1782: 
1783: def bartlett(*args):
1784:     '''
1785:     Perform Bartlett's test for equal variances
1786: 
1787:     Bartlett's test tests the null hypothesis that all input samples
1788:     are from populations with equal variances.  For samples
1789:     from significantly non-normal populations, Levene's test
1790:     `levene` is more robust.
1791: 
1792:     Parameters
1793:     ----------
1794:     sample1, sample2,... : array_like
1795:         arrays of sample data.  May be different lengths.
1796: 
1797:     Returns
1798:     -------
1799:     statistic : float
1800:         The test statistic.
1801:     pvalue : float
1802:         The p-value of the test.
1803: 
1804:     See Also
1805:     --------
1806:     fligner : A non-parametric test for the equality of k variances
1807:     levene : A robust parametric test for equality of k variances
1808: 
1809:     Notes
1810:     -----
1811:     Conover et al. (1981) examine many of the existing parametric and
1812:     nonparametric tests by extensive simulations and they conclude that the
1813:     tests proposed by Fligner and Killeen (1976) and Levene (1960) appear to be
1814:     superior in terms of robustness of departures from normality and power [3]_.
1815: 
1816:     References
1817:     ----------
1818:     .. [1]  http://www.itl.nist.gov/div898/handbook/eda/section3/eda357.htm
1819: 
1820:     .. [2]  Snedecor, George W. and Cochran, William G. (1989), Statistical
1821:               Methods, Eighth Edition, Iowa State University Press.
1822: 
1823:     .. [3] Park, C. and Lindsay, B. G. (1999). Robust Scale Estimation and
1824:            Hypothesis Testing based on Quadratic Inference Function. Technical
1825:            Report #99-03, Center for Likelihood Studies, Pennsylvania State
1826:            University.
1827: 
1828:     .. [4] Bartlett, M. S. (1937). Properties of Sufficiency and Statistical
1829:            Tests. Proceedings of the Royal Society of London. Series A,
1830:            Mathematical and Physical Sciences, Vol. 160, No.901, pp. 268-282.
1831: 
1832:     '''
1833:     # Handle empty input
1834:     for a in args:
1835:         if np.asanyarray(a).size == 0:
1836:             return BartlettResult(np.nan, np.nan)
1837: 
1838:     k = len(args)
1839:     if k < 2:
1840:         raise ValueError("Must enter at least two input sample vectors.")
1841:     Ni = zeros(k)
1842:     ssq = zeros(k, 'd')
1843:     for j in range(k):
1844:         Ni[j] = len(args[j])
1845:         ssq[j] = np.var(args[j], ddof=1)
1846:     Ntot = np.sum(Ni, axis=0)
1847:     spsq = np.sum((Ni - 1)*ssq, axis=0) / (1.0*(Ntot - k))
1848:     numer = (Ntot*1.0 - k) * log(spsq) - np.sum((Ni - 1.0)*log(ssq), axis=0)
1849:     denom = 1.0 + 1.0/(3*(k - 1)) * ((np.sum(1.0/(Ni - 1.0), axis=0)) -
1850:                                      1.0/(Ntot - k))
1851:     T = numer / denom
1852:     pval = distributions.chi2.sf(T, k - 1)  # 1 - cdf
1853: 
1854:     return BartlettResult(T, pval)
1855: 
1856: 
1857: LeveneResult = namedtuple('LeveneResult', ('statistic', 'pvalue'))
1858: 
1859: 
1860: def levene(*args, **kwds):
1861:     '''
1862:     Perform Levene test for equal variances.
1863: 
1864:     The Levene test tests the null hypothesis that all input samples
1865:     are from populations with equal variances.  Levene's test is an
1866:     alternative to Bartlett's test `bartlett` in the case where
1867:     there are significant deviations from normality.
1868: 
1869:     Parameters
1870:     ----------
1871:     sample1, sample2, ... : array_like
1872:         The sample data, possibly with different lengths
1873:     center : {'mean', 'median', 'trimmed'}, optional
1874:         Which function of the data to use in the test.  The default
1875:         is 'median'.
1876:     proportiontocut : float, optional
1877:         When `center` is 'trimmed', this gives the proportion of data points
1878:         to cut from each end. (See `scipy.stats.trim_mean`.)
1879:         Default is 0.05.
1880: 
1881:     Returns
1882:     -------
1883:     statistic : float
1884:         The test statistic.
1885:     pvalue : float
1886:         The p-value for the test.
1887: 
1888:     Notes
1889:     -----
1890:     Three variations of Levene's test are possible.  The possibilities
1891:     and their recommended usages are:
1892: 
1893:       * 'median' : Recommended for skewed (non-normal) distributions>
1894:       * 'mean' : Recommended for symmetric, moderate-tailed distributions.
1895:       * 'trimmed' : Recommended for heavy-tailed distributions.
1896: 
1897:     References
1898:     ----------
1899:     .. [1]  http://www.itl.nist.gov/div898/handbook/eda/section3/eda35a.htm
1900:     .. [2]   Levene, H. (1960). In Contributions to Probability and Statistics:
1901:                Essays in Honor of Harold Hotelling, I. Olkin et al. eds.,
1902:                Stanford University Press, pp. 278-292.
1903:     .. [3]  Brown, M. B. and Forsythe, A. B. (1974), Journal of the American
1904:               Statistical Association, 69, 364-367
1905: 
1906:     '''
1907:     # Handle keyword arguments.
1908:     center = 'median'
1909:     proportiontocut = 0.05
1910:     for kw, value in kwds.items():
1911:         if kw not in ['center', 'proportiontocut']:
1912:             raise TypeError("levene() got an unexpected keyword "
1913:                             "argument '%s'" % kw)
1914:         if kw == 'center':
1915:             center = value
1916:         else:
1917:             proportiontocut = value
1918: 
1919:     k = len(args)
1920:     if k < 2:
1921:         raise ValueError("Must enter at least two input sample vectors.")
1922:     Ni = zeros(k)
1923:     Yci = zeros(k, 'd')
1924: 
1925:     if center not in ['mean', 'median', 'trimmed']:
1926:         raise ValueError("Keyword argument <center> must be 'mean', 'median'"
1927:                         " or 'trimmed'.")
1928: 
1929:     if center == 'median':
1930:         func = lambda x: np.median(x, axis=0)
1931:     elif center == 'mean':
1932:         func = lambda x: np.mean(x, axis=0)
1933:     else:  # center == 'trimmed'
1934:         args = tuple(stats.trimboth(np.sort(arg), proportiontocut)
1935:                      for arg in args)
1936:         func = lambda x: np.mean(x, axis=0)
1937: 
1938:     for j in range(k):
1939:         Ni[j] = len(args[j])
1940:         Yci[j] = func(args[j])
1941:     Ntot = np.sum(Ni, axis=0)
1942: 
1943:     # compute Zij's
1944:     Zij = [None] * k
1945:     for i in range(k):
1946:         Zij[i] = abs(asarray(args[i]) - Yci[i])
1947: 
1948:     # compute Zbari
1949:     Zbari = zeros(k, 'd')
1950:     Zbar = 0.0
1951:     for i in range(k):
1952:         Zbari[i] = np.mean(Zij[i], axis=0)
1953:         Zbar += Zbari[i] * Ni[i]
1954: 
1955:     Zbar /= Ntot
1956:     numer = (Ntot - k) * np.sum(Ni * (Zbari - Zbar)**2, axis=0)
1957: 
1958:     # compute denom_variance
1959:     dvar = 0.0
1960:     for i in range(k):
1961:         dvar += np.sum((Zij[i] - Zbari[i])**2, axis=0)
1962: 
1963:     denom = (k - 1.0) * dvar
1964: 
1965:     W = numer / denom
1966:     pval = distributions.f.sf(W, k-1, Ntot-k)  # 1 - cdf
1967:     return LeveneResult(W, pval)
1968: 
1969: 
1970: @setastest(False)
1971: def binom_test(x, n=None, p=0.5, alternative='two-sided'):
1972:     '''
1973:     Perform a test that the probability of success is p.
1974: 
1975:     This is an exact, two-sided test of the null hypothesis
1976:     that the probability of success in a Bernoulli experiment
1977:     is `p`.
1978: 
1979:     Parameters
1980:     ----------
1981:     x : integer or array_like
1982:         the number of successes, or if x has length 2, it is the
1983:         number of successes and the number of failures.
1984:     n : integer
1985:         the number of trials.  This is ignored if x gives both the
1986:         number of successes and failures
1987:     p : float, optional
1988:         The hypothesized probability of success.  0 <= p <= 1. The
1989:         default value is p = 0.5
1990:     alternative : {'two-sided', 'greater', 'less'}, optional
1991:         Indicates the alternative hypothesis. The default value is
1992:         'two-sided'.
1993: 
1994:     Returns
1995:     -------
1996:     p-value : float
1997:         The p-value of the hypothesis test
1998: 
1999:     References
2000:     ----------
2001:     .. [1] http://en.wikipedia.org/wiki/Binomial_test
2002: 
2003:     '''
2004:     x = atleast_1d(x).astype(np.integer)
2005:     if len(x) == 2:
2006:         n = x[1] + x[0]
2007:         x = x[0]
2008:     elif len(x) == 1:
2009:         x = x[0]
2010:         if n is None or n < x:
2011:             raise ValueError("n must be >= x")
2012:         n = np.int_(n)
2013:     else:
2014:         raise ValueError("Incorrect length for x.")
2015: 
2016:     if (p > 1.0) or (p < 0.0):
2017:         raise ValueError("p must be in range [0,1]")
2018: 
2019:     if alternative not in ('two-sided', 'less', 'greater'):
2020:         raise ValueError("alternative not recognized\n"
2021:                          "should be 'two-sided', 'less' or 'greater'")
2022: 
2023:     if alternative == 'less':
2024:         pval = distributions.binom.cdf(x, n, p)
2025:         return pval
2026: 
2027:     if alternative == 'greater':
2028:         pval = distributions.binom.sf(x-1, n, p)
2029:         return pval
2030: 
2031:     # if alternative was neither 'less' nor 'greater', then it's 'two-sided'
2032:     d = distributions.binom.pmf(x, n, p)
2033:     rerr = 1 + 1e-7
2034:     if x == p * n:
2035:         # special case as shortcut, would also be handled by `else` below
2036:         pval = 1.
2037:     elif x < p * n:
2038:         i = np.arange(np.ceil(p * n), n+1)
2039:         y = np.sum(distributions.binom.pmf(i, n, p) <= d*rerr, axis=0)
2040:         pval = (distributions.binom.cdf(x, n, p) +
2041:                 distributions.binom.sf(n - y, n, p))
2042:     else:
2043:         i = np.arange(np.floor(p*n) + 1)
2044:         y = np.sum(distributions.binom.pmf(i, n, p) <= d*rerr, axis=0)
2045:         pval = (distributions.binom.cdf(y-1, n, p) +
2046:                 distributions.binom.sf(x-1, n, p))
2047: 
2048:     return min(1.0, pval)
2049: 
2050: 
2051: def _apply_func(x, g, func):
2052:     # g is list of indices into x
2053:     #  separating x into different groups
2054:     #  func should be applied over the groups
2055:     g = unique(r_[0, g, len(x)])
2056:     output = []
2057:     for k in range(len(g) - 1):
2058:         output.append(func(x[g[k]:g[k+1]]))
2059: 
2060:     return asarray(output)
2061: 
2062: 
2063: FlignerResult = namedtuple('FlignerResult', ('statistic', 'pvalue'))
2064: 
2065: 
2066: def fligner(*args, **kwds):
2067:     '''
2068:     Perform Fligner-Killeen test for equality of variance.
2069: 
2070:     Fligner's test tests the null hypothesis that all input samples
2071:     are from populations with equal variances.  Fligner-Killeen's test is
2072:     distribution free when populations are identical [2]_.
2073: 
2074:     Parameters
2075:     ----------
2076:     sample1, sample2, ... : array_like
2077:         Arrays of sample data.  Need not be the same length.
2078:     center : {'mean', 'median', 'trimmed'}, optional
2079:         Keyword argument controlling which function of the data is used in
2080:         computing the test statistic.  The default is 'median'.
2081:     proportiontocut : float, optional
2082:         When `center` is 'trimmed', this gives the proportion of data points
2083:         to cut from each end. (See `scipy.stats.trim_mean`.)
2084:         Default is 0.05.
2085: 
2086:     Returns
2087:     -------
2088:     statistic : float
2089:         The test statistic.
2090:     pvalue : float
2091:         The p-value for the hypothesis test.
2092: 
2093:     See Also
2094:     --------
2095:     bartlett : A parametric test for equality of k variances in normal samples
2096:     levene : A robust parametric test for equality of k variances
2097: 
2098:     Notes
2099:     -----
2100:     As with Levene's test there are three variants of Fligner's test that
2101:     differ by the measure of central tendency used in the test.  See `levene`
2102:     for more information.
2103: 
2104:     Conover et al. (1981) examine many of the existing parametric and
2105:     nonparametric tests by extensive simulations and they conclude that the
2106:     tests proposed by Fligner and Killeen (1976) and Levene (1960) appear to be
2107:     superior in terms of robustness of departures from normality and power [3]_.
2108: 
2109:     References
2110:     ----------
2111:     .. [1] Park, C. and Lindsay, B. G. (1999). Robust Scale Estimation and
2112:            Hypothesis Testing based on Quadratic Inference Function. Technical
2113:            Report #99-03, Center for Likelihood Studies, Pennsylvania State
2114:            University.
2115:            http://cecas.clemson.edu/~cspark/cv/paper/qif/draftqif2.pdf
2116: 
2117:     .. [2] Fligner, M.A. and Killeen, T.J. (1976). Distribution-free two-sample
2118:            tests for scale. 'Journal of the American Statistical Association.'
2119:            71(353), 210-213.
2120: 
2121:     .. [3] Park, C. and Lindsay, B. G. (1999). Robust Scale Estimation and
2122:            Hypothesis Testing based on Quadratic Inference Function. Technical
2123:            Report #99-03, Center for Likelihood Studies, Pennsylvania State
2124:            University.
2125: 
2126:     .. [4] Conover, W. J., Johnson, M. E. and Johnson M. M. (1981). A
2127:            comparative study of tests for homogeneity of variances, with
2128:            applications to the outer continental shelf biding data.
2129:            Technometrics, 23(4), 351-361.
2130: 
2131:     '''
2132:     # Handle empty input
2133:     for a in args:
2134:         if np.asanyarray(a).size == 0:
2135:             return FlignerResult(np.nan, np.nan)
2136: 
2137:     # Handle keyword arguments.
2138:     center = 'median'
2139:     proportiontocut = 0.05
2140:     for kw, value in kwds.items():
2141:         if kw not in ['center', 'proportiontocut']:
2142:             raise TypeError("fligner() got an unexpected keyword "
2143:                             "argument '%s'" % kw)
2144:         if kw == 'center':
2145:             center = value
2146:         else:
2147:             proportiontocut = value
2148: 
2149:     k = len(args)
2150:     if k < 2:
2151:         raise ValueError("Must enter at least two input sample vectors.")
2152: 
2153:     if center not in ['mean', 'median', 'trimmed']:
2154:         raise ValueError("Keyword argument <center> must be 'mean', 'median'"
2155:                         " or 'trimmed'.")
2156: 
2157:     if center == 'median':
2158:         func = lambda x: np.median(x, axis=0)
2159:     elif center == 'mean':
2160:         func = lambda x: np.mean(x, axis=0)
2161:     else:  # center == 'trimmed'
2162:         args = tuple(stats.trimboth(arg, proportiontocut) for arg in args)
2163:         func = lambda x: np.mean(x, axis=0)
2164: 
2165:     Ni = asarray([len(args[j]) for j in range(k)])
2166:     Yci = asarray([func(args[j]) for j in range(k)])
2167:     Ntot = np.sum(Ni, axis=0)
2168:     # compute Zij's
2169:     Zij = [abs(asarray(args[i]) - Yci[i]) for i in range(k)]
2170:     allZij = []
2171:     g = [0]
2172:     for i in range(k):
2173:         allZij.extend(list(Zij[i]))
2174:         g.append(len(allZij))
2175: 
2176:     ranks = stats.rankdata(allZij)
2177:     a = distributions.norm.ppf(ranks / (2*(Ntot + 1.0)) + 0.5)
2178: 
2179:     # compute Aibar
2180:     Aibar = _apply_func(a, g, np.sum) / Ni
2181:     anbar = np.mean(a, axis=0)
2182:     varsq = np.var(a, axis=0, ddof=1)
2183:     Xsq = np.sum(Ni * (asarray(Aibar) - anbar)**2.0, axis=0) / varsq
2184:     pval = distributions.chi2.sf(Xsq, k - 1)  # 1 - cdf
2185:     return FlignerResult(Xsq, pval)
2186: 
2187: 
2188: def mood(x, y, axis=0):
2189:     '''
2190:     Perform Mood's test for equal scale parameters.
2191: 
2192:     Mood's two-sample test for scale parameters is a non-parametric
2193:     test for the null hypothesis that two samples are drawn from the
2194:     same distribution with the same scale parameter.
2195: 
2196:     Parameters
2197:     ----------
2198:     x, y : array_like
2199:         Arrays of sample data.
2200:     axis : int, optional
2201:         The axis along which the samples are tested.  `x` and `y` can be of
2202:         different length along `axis`.
2203:         If `axis` is None, `x` and `y` are flattened and the test is done on
2204:         all values in the flattened arrays.
2205: 
2206:     Returns
2207:     -------
2208:     z : scalar or ndarray
2209:         The z-score for the hypothesis test.  For 1-D inputs a scalar is
2210:         returned.
2211:     p-value : scalar ndarray
2212:         The p-value for the hypothesis test.
2213: 
2214:     See Also
2215:     --------
2216:     fligner : A non-parametric test for the equality of k variances
2217:     ansari : A non-parametric test for the equality of 2 variances
2218:     bartlett : A parametric test for equality of k variances in normal samples
2219:     levene : A parametric test for equality of k variances
2220: 
2221:     Notes
2222:     -----
2223:     The data are assumed to be drawn from probability distributions ``f(x)``
2224:     and ``f(x/s) / s`` respectively, for some probability density function f.
2225:     The null hypothesis is that ``s == 1``.
2226: 
2227:     For multi-dimensional arrays, if the inputs are of shapes
2228:     ``(n0, n1, n2, n3)``  and ``(n0, m1, n2, n3)``, then if ``axis=1``, the
2229:     resulting z and p values will have shape ``(n0, n2, n3)``.  Note that
2230:     ``n1`` and ``m1`` don't have to be equal, but the other dimensions do.
2231: 
2232:     Examples
2233:     --------
2234:     >>> from scipy import stats
2235:     >>> np.random.seed(1234)
2236:     >>> x2 = np.random.randn(2, 45, 6, 7)
2237:     >>> x1 = np.random.randn(2, 30, 6, 7)
2238:     >>> z, p = stats.mood(x1, x2, axis=1)
2239:     >>> p.shape
2240:     (2, 6, 7)
2241: 
2242:     Find the number of points where the difference in scale is not significant:
2243: 
2244:     >>> (p > 0.1).sum()
2245:     74
2246: 
2247:     Perform the test with different scales:
2248: 
2249:     >>> x1 = np.random.randn(2, 30)
2250:     >>> x2 = np.random.randn(2, 35) * 10.0
2251:     >>> stats.mood(x1, x2, axis=1)
2252:     (array([-5.7178125 , -5.25342163]), array([  1.07904114e-08,   1.49299218e-07]))
2253: 
2254:     '''
2255:     x = np.asarray(x, dtype=float)
2256:     y = np.asarray(y, dtype=float)
2257: 
2258:     if axis is None:
2259:         x = x.flatten()
2260:         y = y.flatten()
2261:         axis = 0
2262: 
2263:     # Determine shape of the result arrays
2264:     res_shape = tuple([x.shape[ax] for ax in range(len(x.shape)) if ax != axis])
2265:     if not (res_shape == tuple([y.shape[ax] for ax in range(len(y.shape)) if
2266:                                 ax != axis])):
2267:         raise ValueError("Dimensions of x and y on all axes except `axis` "
2268:                          "should match")
2269: 
2270:     n = x.shape[axis]
2271:     m = y.shape[axis]
2272:     N = m + n
2273:     if N < 3:
2274:         raise ValueError("Not enough observations.")
2275: 
2276:     xy = np.concatenate((x, y), axis=axis)
2277:     if axis != 0:
2278:         xy = np.rollaxis(xy, axis)
2279: 
2280:     xy = xy.reshape(xy.shape[0], -1)
2281: 
2282:     # Generalized to the n-dimensional case by adding the axis argument, and
2283:     # using for loops, since rankdata is not vectorized.  For improving
2284:     # performance consider vectorizing rankdata function.
2285:     all_ranks = np.zeros_like(xy)
2286:     for j in range(xy.shape[1]):
2287:         all_ranks[:, j] = stats.rankdata(xy[:, j])
2288: 
2289:     Ri = all_ranks[:n]
2290:     M = np.sum((Ri - (N + 1.0) / 2)**2, axis=0)
2291:     # Approx stat.
2292:     mnM = n * (N * N - 1.0) / 12
2293:     varM = m * n * (N + 1.0) * (N + 2) * (N - 2) / 180
2294:     z = (M - mnM) / sqrt(varM)
2295: 
2296:     # sf for right tail, cdf for left tail.  Factor 2 for two-sidedness
2297:     z_pos = z > 0
2298:     pval = np.zeros_like(z)
2299:     pval[z_pos] = 2 * distributions.norm.sf(z[z_pos])
2300:     pval[~z_pos] = 2 * distributions.norm.cdf(z[~z_pos])
2301: 
2302:     if res_shape == ():
2303:         # Return scalars, not 0-D arrays
2304:         z = z[0]
2305:         pval = pval[0]
2306:     else:
2307:         z.shape = res_shape
2308:         pval.shape = res_shape
2309: 
2310:     return z, pval
2311: 
2312: 
2313: WilcoxonResult = namedtuple('WilcoxonResult', ('statistic', 'pvalue'))
2314: 
2315: 
2316: def wilcoxon(x, y=None, zero_method="wilcox", correction=False):
2317:     '''
2318:     Calculate the Wilcoxon signed-rank test.
2319: 
2320:     The Wilcoxon signed-rank test tests the null hypothesis that two
2321:     related paired samples come from the same distribution. In particular,
2322:     it tests whether the distribution of the differences x - y is symmetric
2323:     about zero. It is a non-parametric version of the paired T-test.
2324: 
2325:     Parameters
2326:     ----------
2327:     x : array_like
2328:         The first set of measurements.
2329:     y : array_like, optional
2330:         The second set of measurements.  If `y` is not given, then the `x`
2331:         array is considered to be the differences between the two sets of
2332:         measurements.
2333:     zero_method : string, {"pratt", "wilcox", "zsplit"}, optional
2334:         "pratt":
2335:             Pratt treatment: includes zero-differences in the ranking process
2336:             (more conservative)
2337:         "wilcox":
2338:             Wilcox treatment: discards all zero-differences
2339:         "zsplit":
2340:             Zero rank split: just like Pratt, but spliting the zero rank
2341:             between positive and negative ones
2342:     correction : bool, optional
2343:         If True, apply continuity correction by adjusting the Wilcoxon rank
2344:         statistic by 0.5 towards the mean value when computing the
2345:         z-statistic.  Default is False.
2346: 
2347:     Returns
2348:     -------
2349:     statistic : float
2350:         The sum of the ranks of the differences above or below zero, whichever
2351:         is smaller.
2352:     pvalue : float
2353:         The two-sided p-value for the test.
2354: 
2355:     Notes
2356:     -----
2357:     Because the normal approximation is used for the calculations, the
2358:     samples used should be large.  A typical rule is to require that
2359:     n > 20.
2360: 
2361:     References
2362:     ----------
2363:     .. [1] http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test
2364: 
2365:     '''
2366: 
2367:     if zero_method not in ["wilcox", "pratt", "zsplit"]:
2368:         raise ValueError("Zero method should be either 'wilcox' "
2369:                          "or 'pratt' or 'zsplit'")
2370: 
2371:     if y is None:
2372:         d = asarray(x)
2373:     else:
2374:         x, y = map(asarray, (x, y))
2375:         if len(x) != len(y):
2376:             raise ValueError('Unequal N in wilcoxon.  Aborting.')
2377:         d = x - y
2378: 
2379:     if zero_method == "wilcox":
2380:         # Keep all non-zero differences
2381:         d = compress(np.not_equal(d, 0), d, axis=-1)
2382: 
2383:     count = len(d)
2384:     if count < 10:
2385:         warnings.warn("Warning: sample size too small for normal approximation.")
2386: 
2387:     r = stats.rankdata(abs(d))
2388:     r_plus = np.sum((d > 0) * r, axis=0)
2389:     r_minus = np.sum((d < 0) * r, axis=0)
2390: 
2391:     if zero_method == "zsplit":
2392:         r_zero = np.sum((d == 0) * r, axis=0)
2393:         r_plus += r_zero / 2.
2394:         r_minus += r_zero / 2.
2395: 
2396:     T = min(r_plus, r_minus)
2397:     mn = count * (count + 1.) * 0.25
2398:     se = count * (count + 1.) * (2. * count + 1.)
2399: 
2400:     if zero_method == "pratt":
2401:         r = r[d != 0]
2402: 
2403:     replist, repnum = find_repeats(r)
2404:     if repnum.size != 0:
2405:         # Correction for repeated elements.
2406:         se -= 0.5 * (repnum * (repnum * repnum - 1)).sum()
2407: 
2408:     se = sqrt(se / 24)
2409:     correction = 0.5 * int(bool(correction)) * np.sign(T - mn)
2410:     z = (T - mn - correction) / se
2411:     prob = 2. * distributions.norm.sf(abs(z))
2412: 
2413:     return WilcoxonResult(T, prob)
2414: 
2415: 
2416: @setastest(False)
2417: def median_test(*args, **kwds):
2418:     '''
2419:     Mood's median test.
2420: 
2421:     Test that two or more samples come from populations with the same median.
2422: 
2423:     Let ``n = len(args)`` be the number of samples.  The "grand median" of
2424:     all the data is computed, and a contingency table is formed by
2425:     classifying the values in each sample as being above or below the grand
2426:     median.  The contingency table, along with `correction` and `lambda_`,
2427:     are passed to `scipy.stats.chi2_contingency` to compute the test statistic
2428:     and p-value.
2429: 
2430:     Parameters
2431:     ----------
2432:     sample1, sample2, ... : array_like
2433:         The set of samples.  There must be at least two samples.
2434:         Each sample must be a one-dimensional sequence containing at least
2435:         one value.  The samples are not required to have the same length.
2436:     ties : str, optional
2437:         Determines how values equal to the grand median are classified in
2438:         the contingency table.  The string must be one of::
2439: 
2440:             "below":
2441:                 Values equal to the grand median are counted as "below".
2442:             "above":
2443:                 Values equal to the grand median are counted as "above".
2444:             "ignore":
2445:                 Values equal to the grand median are not counted.
2446: 
2447:         The default is "below".
2448:     correction : bool, optional
2449:         If True, *and* there are just two samples, apply Yates' correction
2450:         for continuity when computing the test statistic associated with
2451:         the contingency table.  Default is True.
2452:     lambda_ : float or str, optional.
2453:         By default, the statistic computed in this test is Pearson's
2454:         chi-squared statistic.  `lambda_` allows a statistic from the
2455:         Cressie-Read power divergence family to be used instead.  See
2456:         `power_divergence` for details.
2457:         Default is 1 (Pearson's chi-squared statistic).
2458:     nan_policy : {'propagate', 'raise', 'omit'}, optional
2459:         Defines how to handle when input contains nan. 'propagate' returns nan,
2460:         'raise' throws an error, 'omit' performs the calculations ignoring nan
2461:         values. Default is 'propagate'.
2462: 
2463:     Returns
2464:     -------
2465:     stat : float
2466:         The test statistic.  The statistic that is returned is determined by
2467:         `lambda_`.  The default is Pearson's chi-squared statistic.
2468:     p : float
2469:         The p-value of the test.
2470:     m : float
2471:         The grand median.
2472:     table : ndarray
2473:         The contingency table.  The shape of the table is (2, n), where
2474:         n is the number of samples.  The first row holds the counts of the
2475:         values above the grand median, and the second row holds the counts
2476:         of the values below the grand median.  The table allows further
2477:         analysis with, for example, `scipy.stats.chi2_contingency`, or with
2478:         `scipy.stats.fisher_exact` if there are two samples, without having
2479:         to recompute the table.  If ``nan_policy`` is "propagate" and there
2480:         are nans in the input, the return value for ``table`` is ``None``.
2481: 
2482:     See Also
2483:     --------
2484:     kruskal : Compute the Kruskal-Wallis H-test for independent samples.
2485:     mannwhitneyu : Computes the Mann-Whitney rank test on samples x and y.
2486: 
2487:     Notes
2488:     -----
2489:     .. versionadded:: 0.15.0
2490: 
2491:     References
2492:     ----------
2493:     .. [1] Mood, A. M., Introduction to the Theory of Statistics. McGraw-Hill
2494:         (1950), pp. 394-399.
2495:     .. [2] Zar, J. H., Biostatistical Analysis, 5th ed. Prentice Hall (2010).
2496:         See Sections 8.12 and 10.15.
2497: 
2498:     Examples
2499:     --------
2500:     A biologist runs an experiment in which there are three groups of plants.
2501:     Group 1 has 16 plants, group 2 has 15 plants, and group 3 has 17 plants.
2502:     Each plant produces a number of seeds.  The seed counts for each group
2503:     are::
2504: 
2505:         Group 1: 10 14 14 18 20 22 24 25 31 31 32 39 43 43 48 49
2506:         Group 2: 28 30 31 33 34 35 36 40 44 55 57 61 91 92 99
2507:         Group 3:  0  3  9 22 23 25 25 33 34 34 40 45 46 48 62 67 84
2508: 
2509:     The following code applies Mood's median test to these samples.
2510: 
2511:     >>> g1 = [10, 14, 14, 18, 20, 22, 24, 25, 31, 31, 32, 39, 43, 43, 48, 49]
2512:     >>> g2 = [28, 30, 31, 33, 34, 35, 36, 40, 44, 55, 57, 61, 91, 92, 99]
2513:     >>> g3 = [0, 3, 9, 22, 23, 25, 25, 33, 34, 34, 40, 45, 46, 48, 62, 67, 84]
2514:     >>> from scipy.stats import median_test
2515:     >>> stat, p, med, tbl = median_test(g1, g2, g3)
2516: 
2517:     The median is
2518: 
2519:     >>> med
2520:     34.0
2521: 
2522:     and the contingency table is
2523: 
2524:     >>> tbl
2525:     array([[ 5, 10,  7],
2526:            [11,  5, 10]])
2527: 
2528:     `p` is too large to conclude that the medians are not the same:
2529: 
2530:     >>> p
2531:     0.12609082774093244
2532: 
2533:     The "G-test" can be performed by passing ``lambda_="log-likelihood"`` to
2534:     `median_test`.
2535: 
2536:     >>> g, p, med, tbl = median_test(g1, g2, g3, lambda_="log-likelihood")
2537:     >>> p
2538:     0.12224779737117837
2539: 
2540:     The median occurs several times in the data, so we'll get a different
2541:     result if, for example, ``ties="above"`` is used:
2542: 
2543:     >>> stat, p, med, tbl = median_test(g1, g2, g3, ties="above")
2544:     >>> p
2545:     0.063873276069553273
2546: 
2547:     >>> tbl
2548:     array([[ 5, 11,  9],
2549:            [11,  4,  8]])
2550: 
2551:     This example demonstrates that if the data set is not large and there
2552:     are values equal to the median, the p-value can be sensitive to the
2553:     choice of `ties`.
2554: 
2555:     '''
2556:     ties = kwds.pop('ties', 'below')
2557:     correction = kwds.pop('correction', True)
2558:     lambda_ = kwds.pop('lambda_', None)
2559:     nan_policy = kwds.pop('nan_policy', 'propagate')
2560: 
2561:     if len(kwds) > 0:
2562:         bad_kwd = kwds.keys()[0]
2563:         raise TypeError("median_test() got an unexpected keyword "
2564:                         "argument %r" % bad_kwd)
2565: 
2566:     if len(args) < 2:
2567:         raise ValueError('median_test requires two or more samples.')
2568: 
2569:     ties_options = ['below', 'above', 'ignore']
2570:     if ties not in ties_options:
2571:         raise ValueError("invalid 'ties' option '%s'; 'ties' must be one "
2572:                          "of: %s" % (ties, str(ties_options)[1:-1]))
2573: 
2574:     data = [np.asarray(arg) for arg in args]
2575: 
2576:     # Validate the sizes and shapes of the arguments.
2577:     for k, d in enumerate(data):
2578:         if d.size == 0:
2579:             raise ValueError("Sample %d is empty. All samples must "
2580:                              "contain at least one value." % (k + 1))
2581:         if d.ndim != 1:
2582:             raise ValueError("Sample %d has %d dimensions.  All "
2583:                              "samples must be one-dimensional sequences." %
2584:                              (k + 1, d.ndim))
2585: 
2586:     cdata = np.concatenate(data)
2587:     contains_nan, nan_policy = _contains_nan(cdata, nan_policy)
2588:     if contains_nan and nan_policy == 'propagate':
2589:         return np.nan, np.nan, np.nan, None
2590: 
2591:     if contains_nan:
2592:         grand_median = np.median(cdata[~np.isnan(cdata)])
2593:     else:
2594:         grand_median = np.median(cdata)
2595:     # When the minimum version of numpy supported by scipy is 1.9.0,
2596:     # the above if/else statement can be replaced by the single line:
2597:     #     grand_median = np.nanmedian(cdata)
2598: 
2599:     # Create the contingency table.
2600:     table = np.zeros((2, len(data)), dtype=np.int64)
2601:     for k, sample in enumerate(data):
2602:         sample = sample[~np.isnan(sample)]
2603: 
2604:         nabove = count_nonzero(sample > grand_median)
2605:         nbelow = count_nonzero(sample < grand_median)
2606:         nequal = sample.size - (nabove + nbelow)
2607:         table[0, k] += nabove
2608:         table[1, k] += nbelow
2609:         if ties == "below":
2610:             table[1, k] += nequal
2611:         elif ties == "above":
2612:             table[0, k] += nequal
2613: 
2614:     # Check that no row or column of the table is all zero.
2615:     # Such a table can not be given to chi2_contingency, because it would have
2616:     # a zero in the table of expected frequencies.
2617:     rowsums = table.sum(axis=1)
2618:     if rowsums[0] == 0:
2619:         raise ValueError("All values are below the grand median (%r)." %
2620:                          grand_median)
2621:     if rowsums[1] == 0:
2622:         raise ValueError("All values are above the grand median (%r)." %
2623:                          grand_median)
2624:     if ties == "ignore":
2625:         # We already checked that each sample has at least one value, but it
2626:         # is possible that all those values equal the grand median.  If `ties`
2627:         # is "ignore", that would result in a column of zeros in `table`.  We
2628:         # check for that case here.
2629:         zero_cols = np.where((table == 0).all(axis=0))[0]
2630:         if len(zero_cols) > 0:
2631:             msg = ("All values in sample %d are equal to the grand "
2632:                    "median (%r), so they are ignored, resulting in an "
2633:                    "empty sample." % (zero_cols[0] + 1, grand_median))
2634:             raise ValueError(msg)
2635: 
2636:     stat, p, dof, expected = chi2_contingency(table, lambda_=lambda_,
2637:                                               correction=correction)
2638:     return stat, p, grand_median, table
2639: 
2640: 
2641: def _circfuncs_common(samples, high, low):
2642:     samples = np.asarray(samples)
2643:     if samples.size == 0:
2644:         return np.nan, np.nan
2645: 
2646:     ang = (samples - low)*2.*pi / (high - low)
2647:     return samples, ang
2648: 
2649: 
2650: def circmean(samples, high=2*pi, low=0, axis=None):
2651:     '''
2652:     Compute the circular mean for samples in a range.
2653: 
2654:     Parameters
2655:     ----------
2656:     samples : array_like
2657:         Input array.
2658:     high : float or int, optional
2659:         High boundary for circular mean range.  Default is ``2*pi``.
2660:     low : float or int, optional
2661:         Low boundary for circular mean range.  Default is 0.
2662:     axis : int, optional
2663:         Axis along which means are computed.  The default is to compute
2664:         the mean of the flattened array.
2665: 
2666:     Returns
2667:     -------
2668:     circmean : float
2669:         Circular mean.
2670: 
2671:     Examples
2672:     --------
2673:     >>> from scipy.stats import circmean
2674:     >>> circmean([0.1, 2*np.pi+0.2, 6*np.pi+0.3])
2675:     0.2
2676: 
2677:     >>> from scipy.stats import circmean
2678:     >>> circmean([0.2, 1.4, 2.6], high = 1, low = 0)
2679:     0.4
2680: 
2681:     '''
2682:     samples, ang = _circfuncs_common(samples, high, low)
2683:     S = sin(ang).sum(axis=axis)
2684:     C = cos(ang).sum(axis=axis)
2685:     res = arctan2(S, C)
2686:     mask = res < 0
2687:     if mask.ndim > 0:
2688:         res[mask] += 2*pi
2689:     elif mask:
2690:         res += 2*pi
2691:     return res*(high - low)/2.0/pi + low
2692: 
2693: 
2694: def circvar(samples, high=2*pi, low=0, axis=None):
2695:     '''
2696:     Compute the circular variance for samples assumed to be in a range
2697: 
2698:     Parameters
2699:     ----------
2700:     samples : array_like
2701:         Input array.
2702:     low : float or int, optional
2703:         Low boundary for circular variance range.  Default is 0.
2704:     high : float or int, optional
2705:         High boundary for circular variance range.  Default is ``2*pi``.
2706:     axis : int, optional
2707:         Axis along which variances are computed.  The default is to compute
2708:         the variance of the flattened array.
2709: 
2710:     Returns
2711:     -------
2712:     circvar : float
2713:         Circular variance.
2714: 
2715:     Notes
2716:     -----
2717:     This uses a definition of circular variance that in the limit of small
2718:     angles returns a number close to the 'linear' variance.
2719: 
2720:     Examples
2721:     --------
2722:     >>> from scipy.stats import circvar
2723:     >>> circvar([0, 2*np.pi/3, 5*np.pi/3])
2724:     2.19722457734
2725: 
2726:     '''
2727:     samples, ang = _circfuncs_common(samples, high, low)
2728:     S = sin(ang).mean(axis=axis)
2729:     C = cos(ang).mean(axis=axis)
2730:     R = hypot(S, C)
2731:     return ((high - low)/2.0/pi)**2 * 2 * log(1/R)
2732: 
2733: 
2734: def circstd(samples, high=2*pi, low=0, axis=None):
2735:     '''
2736:     Compute the circular standard deviation for samples assumed to be in the
2737:     range [low to high].
2738: 
2739:     Parameters
2740:     ----------
2741:     samples : array_like
2742:         Input array.
2743:     low : float or int, optional
2744:         Low boundary for circular standard deviation range.  Default is 0.
2745:     high : float or int, optional
2746:         High boundary for circular standard deviation range.
2747:         Default is ``2*pi``.
2748:     axis : int, optional
2749:         Axis along which standard deviations are computed.  The default is
2750:         to compute the standard deviation of the flattened array.
2751: 
2752:     Returns
2753:     -------
2754:     circstd : float
2755:         Circular standard deviation.
2756: 
2757:     Notes
2758:     -----
2759:     This uses a definition of circular standard deviation that in the limit of
2760:     small angles returns a number close to the 'linear' standard deviation.
2761: 
2762:     Examples
2763:     --------
2764:     >>> from scipy.stats import circstd
2765:     >>> circstd([0, 0.1*np.pi/2, 0.001*np.pi, 0.03*np.pi/2])
2766:     0.063564063306
2767: 
2768:     '''
2769:     samples, ang = _circfuncs_common(samples, high, low)
2770:     S = sin(ang).mean(axis=axis)
2771:     C = cos(ang).mean(axis=axis)
2772:     R = hypot(S, C)
2773:     return ((high - low)/2.0/pi) * sqrt(-2*log(R))
2774: 
2775: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3, 0))

# 'import math' statement (line 3)
import math

import_module(stypy.reporting.localization.Localization(__file__, 3, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4, 0))

# 'import warnings' statement (line 4)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 5, 0))

# 'from collections import namedtuple' statement (line 5)
try:
    from collections import namedtuple

except:
    namedtuple = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 5, 0), 'collections', None, module_type_store, ['namedtuple'], [namedtuple])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import numpy' statement (line 7)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566058 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'numpy')

if (type(import_566058) is not StypyTypeError):

    if (import_566058 != 'pyd_module'):
        __import__(import_566058)
        sys_modules_566059 = sys.modules[import_566058]
        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'np', sys_modules_566059.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'numpy', import_566058)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'from numpy import isscalar, r_, log, around, unique, asarray, zeros, arange, sort, amin, amax, any, atleast_1d, sqrt, ceil, floor, array, compress, pi, exp, ravel, count_nonzero, sin, cos, arctan2, hypot' statement (line 8)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566060 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy')

if (type(import_566060) is not StypyTypeError):

    if (import_566060 != 'pyd_module'):
        __import__(import_566060)
        sys_modules_566061 = sys.modules[import_566060]
        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy', sys_modules_566061.module_type_store, module_type_store, ['isscalar', 'r_', 'log', 'around', 'unique', 'asarray', 'zeros', 'arange', 'sort', 'amin', 'amax', 'any', 'atleast_1d', 'sqrt', 'ceil', 'floor', 'array', 'compress', 'pi', 'exp', 'ravel', 'count_nonzero', 'sin', 'cos', 'arctan2', 'hypot'])
        nest_module(stypy.reporting.localization.Localization(__file__, 8, 0), __file__, sys_modules_566061, sys_modules_566061.module_type_store, module_type_store)
    else:
        from numpy import isscalar, r_, log, around, unique, asarray, zeros, arange, sort, amin, amax, any, atleast_1d, sqrt, ceil, floor, array, compress, pi, exp, ravel, count_nonzero, sin, cos, arctan2, hypot

        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy', None, module_type_store, ['isscalar', 'r_', 'log', 'around', 'unique', 'asarray', 'zeros', 'arange', 'sort', 'amin', 'amax', 'any', 'atleast_1d', 'sqrt', 'ceil', 'floor', 'array', 'compress', 'pi', 'exp', 'ravel', 'count_nonzero', 'sin', 'cos', 'arctan2', 'hypot'], [isscalar, r_, log, around, unique, asarray, zeros, arange, sort, amin, amax, any, atleast_1d, sqrt, ceil, floor, array, compress, pi, exp, ravel, count_nonzero, sin, cos, arctan2, hypot])

else:
    # Assigning a type to the variable 'numpy' (line 8)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy', import_566060)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'from numpy.testing.decorators import setastest' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566062 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.testing.decorators')

if (type(import_566062) is not StypyTypeError):

    if (import_566062 != 'pyd_module'):
        __import__(import_566062)
        sys_modules_566063 = sys.modules[import_566062]
        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.testing.decorators', sys_modules_566063.module_type_store, module_type_store, ['setastest'])
        nest_module(stypy.reporting.localization.Localization(__file__, 12, 0), __file__, sys_modules_566063, sys_modules_566063.module_type_store, module_type_store)
    else:
        from numpy.testing.decorators import setastest

        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.testing.decorators', None, module_type_store, ['setastest'], [setastest])

else:
    # Assigning a type to the variable 'numpy.testing.decorators' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.testing.decorators', import_566062)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from scipy._lib.six import string_types' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566064 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy._lib.six')

if (type(import_566064) is not StypyTypeError):

    if (import_566064 != 'pyd_module'):
        __import__(import_566064)
        sys_modules_566065 = sys.modules[import_566064]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy._lib.six', sys_modules_566065.module_type_store, module_type_store, ['string_types'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_566065, sys_modules_566065.module_type_store, module_type_store)
    else:
        from scipy._lib.six import string_types

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy._lib.six', None, module_type_store, ['string_types'], [string_types])

else:
    # Assigning a type to the variable 'scipy._lib.six' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy._lib.six', import_566064)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from scipy import optimize' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566066 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy')

if (type(import_566066) is not StypyTypeError):

    if (import_566066 != 'pyd_module'):
        __import__(import_566066)
        sys_modules_566067 = sys.modules[import_566066]
        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy', sys_modules_566067.module_type_store, module_type_store, ['optimize'])
        nest_module(stypy.reporting.localization.Localization(__file__, 15, 0), __file__, sys_modules_566067, sys_modules_566067.module_type_store, module_type_store)
    else:
        from scipy import optimize

        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy', None, module_type_store, ['optimize'], [optimize])

else:
    # Assigning a type to the variable 'scipy' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy', import_566066)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'from scipy import special' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566068 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'scipy')

if (type(import_566068) is not StypyTypeError):

    if (import_566068 != 'pyd_module'):
        __import__(import_566068)
        sys_modules_566069 = sys.modules[import_566068]
        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'scipy', sys_modules_566069.module_type_store, module_type_store, ['special'])
        nest_module(stypy.reporting.localization.Localization(__file__, 16, 0), __file__, sys_modules_566069, sys_modules_566069.module_type_store, module_type_store)
    else:
        from scipy import special

        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'scipy', None, module_type_store, ['special'], [special])

else:
    # Assigning a type to the variable 'scipy' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'scipy', import_566068)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'from scipy.stats import statlib' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566070 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'scipy.stats')

if (type(import_566070) is not StypyTypeError):

    if (import_566070 != 'pyd_module'):
        __import__(import_566070)
        sys_modules_566071 = sys.modules[import_566070]
        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'scipy.stats', sys_modules_566071.module_type_store, module_type_store, ['statlib'])
        nest_module(stypy.reporting.localization.Localization(__file__, 17, 0), __file__, sys_modules_566071, sys_modules_566071.module_type_store, module_type_store)
    else:
        from scipy.stats import statlib

        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'scipy.stats', None, module_type_store, ['statlib'], [statlib])

else:
    # Assigning a type to the variable 'scipy.stats' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'scipy.stats', import_566070)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from scipy.stats import stats' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566072 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy.stats')

if (type(import_566072) is not StypyTypeError):

    if (import_566072 != 'pyd_module'):
        __import__(import_566072)
        sys_modules_566073 = sys.modules[import_566072]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy.stats', sys_modules_566073.module_type_store, module_type_store, ['stats'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_566073, sys_modules_566073.module_type_store, module_type_store)
    else:
        from scipy.stats import stats

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy.stats', None, module_type_store, ['stats'], [stats])

else:
    # Assigning a type to the variable 'scipy.stats' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy.stats', import_566072)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from scipy.stats.stats import find_repeats, _contains_nan' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566074 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.stats.stats')

if (type(import_566074) is not StypyTypeError):

    if (import_566074 != 'pyd_module'):
        __import__(import_566074)
        sys_modules_566075 = sys.modules[import_566074]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.stats.stats', sys_modules_566075.module_type_store, module_type_store, ['find_repeats', '_contains_nan'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_566075, sys_modules_566075.module_type_store, module_type_store)
    else:
        from scipy.stats.stats import find_repeats, _contains_nan

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.stats.stats', None, module_type_store, ['find_repeats', '_contains_nan'], [find_repeats, _contains_nan])

else:
    # Assigning a type to the variable 'scipy.stats.stats' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.stats.stats', import_566074)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'from scipy.stats.contingency import chi2_contingency' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566076 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.stats.contingency')

if (type(import_566076) is not StypyTypeError):

    if (import_566076 != 'pyd_module'):
        __import__(import_566076)
        sys_modules_566077 = sys.modules[import_566076]
        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.stats.contingency', sys_modules_566077.module_type_store, module_type_store, ['chi2_contingency'])
        nest_module(stypy.reporting.localization.Localization(__file__, 20, 0), __file__, sys_modules_566077, sys_modules_566077.module_type_store, module_type_store)
    else:
        from scipy.stats.contingency import chi2_contingency

        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.stats.contingency', None, module_type_store, ['chi2_contingency'], [chi2_contingency])

else:
    # Assigning a type to the variable 'scipy.stats.contingency' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.stats.contingency', import_566076)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'from scipy.stats import distributions' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566078 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'scipy.stats')

if (type(import_566078) is not StypyTypeError):

    if (import_566078 != 'pyd_module'):
        __import__(import_566078)
        sys_modules_566079 = sys.modules[import_566078]
        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'scipy.stats', sys_modules_566079.module_type_store, module_type_store, ['distributions'])
        nest_module(stypy.reporting.localization.Localization(__file__, 21, 0), __file__, sys_modules_566079, sys_modules_566079.module_type_store, module_type_store)
    else:
        from scipy.stats import distributions

        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'scipy.stats', None, module_type_store, ['distributions'], [distributions])

else:
    # Assigning a type to the variable 'scipy.stats' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'scipy.stats', import_566078)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'from scipy.stats._distn_infrastructure import rv_generic' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/stats/')
import_566080 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.stats._distn_infrastructure')

if (type(import_566080) is not StypyTypeError):

    if (import_566080 != 'pyd_module'):
        __import__(import_566080)
        sys_modules_566081 = sys.modules[import_566080]
        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.stats._distn_infrastructure', sys_modules_566081.module_type_store, module_type_store, ['rv_generic'])
        nest_module(stypy.reporting.localization.Localization(__file__, 22, 0), __file__, sys_modules_566081, sys_modules_566081.module_type_store, module_type_store)
    else:
        from scipy.stats._distn_infrastructure import rv_generic

        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.stats._distn_infrastructure', None, module_type_store, ['rv_generic'], [rv_generic])

else:
    # Assigning a type to the variable 'scipy.stats._distn_infrastructure' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.stats._distn_infrastructure', import_566080)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/stats/')


# Assigning a List to a Name (line 25):

# Assigning a List to a Name (line 25):
__all__ = ['mvsdist', 'bayes_mvs', 'kstat', 'kstatvar', 'probplot', 'ppcc_max', 'ppcc_plot', 'boxcox_llf', 'boxcox', 'boxcox_normmax', 'boxcox_normplot', 'shapiro', 'anderson', 'ansari', 'bartlett', 'levene', 'binom_test', 'fligner', 'mood', 'wilcoxon', 'median_test', 'circmean', 'circvar', 'circstd', 'anderson_ksamp']
module_type_store.set_exportable_members(['mvsdist', 'bayes_mvs', 'kstat', 'kstatvar', 'probplot', 'ppcc_max', 'ppcc_plot', 'boxcox_llf', 'boxcox', 'boxcox_normmax', 'boxcox_normplot', 'shapiro', 'anderson', 'ansari', 'bartlett', 'levene', 'binom_test', 'fligner', 'mood', 'wilcoxon', 'median_test', 'circmean', 'circvar', 'circstd', 'anderson_ksamp'])

# Obtaining an instance of the builtin type 'list' (line 25)
list_566082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 25)
# Adding element type (line 25)
str_566083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 11), 'str', 'mvsdist')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566083)
# Adding element type (line 25)
str_566084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 11), 'str', 'bayes_mvs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566084)
# Adding element type (line 25)
str_566085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 24), 'str', 'kstat')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566085)
# Adding element type (line 25)
str_566086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 33), 'str', 'kstatvar')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566086)
# Adding element type (line 25)
str_566087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 45), 'str', 'probplot')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566087)
# Adding element type (line 25)
str_566088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 57), 'str', 'ppcc_max')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566088)
# Adding element type (line 25)
str_566089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 69), 'str', 'ppcc_plot')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566089)
# Adding element type (line 25)
str_566090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 11), 'str', 'boxcox_llf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566090)
# Adding element type (line 25)
str_566091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 25), 'str', 'boxcox')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566091)
# Adding element type (line 25)
str_566092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 35), 'str', 'boxcox_normmax')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566092)
# Adding element type (line 25)
str_566093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 53), 'str', 'boxcox_normplot')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566093)
# Adding element type (line 25)
str_566094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 11), 'str', 'shapiro')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566094)
# Adding element type (line 25)
str_566095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 22), 'str', 'anderson')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566095)
# Adding element type (line 25)
str_566096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 34), 'str', 'ansari')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566096)
# Adding element type (line 25)
str_566097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 44), 'str', 'bartlett')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566097)
# Adding element type (line 25)
str_566098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 56), 'str', 'levene')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566098)
# Adding element type (line 25)
str_566099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 66), 'str', 'binom_test')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566099)
# Adding element type (line 25)
str_566100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 11), 'str', 'fligner')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566100)
# Adding element type (line 25)
str_566101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 22), 'str', 'mood')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566101)
# Adding element type (line 25)
str_566102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 30), 'str', 'wilcoxon')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566102)
# Adding element type (line 25)
str_566103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 42), 'str', 'median_test')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566103)
# Adding element type (line 25)
str_566104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 11), 'str', 'circmean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566104)
# Adding element type (line 25)
str_566105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 23), 'str', 'circvar')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566105)
# Adding element type (line 25)
str_566106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 34), 'str', 'circstd')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566106)
# Adding element type (line 25)
str_566107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 45), 'str', 'anderson_ksamp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 25, 10), list_566082, str_566107)

# Assigning a type to the variable '__all__' (line 25)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), '__all__', list_566082)

# Assigning a Call to a Name (line 34):

# Assigning a Call to a Name (line 34):

# Call to namedtuple(...): (line 34)
# Processing the call arguments (line 34)
str_566109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 18), 'str', 'Mean')

# Obtaining an instance of the builtin type 'tuple' (line 34)
tuple_566110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 27), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 34)
# Adding element type (line 34)
str_566111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 27), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 34, 27), tuple_566110, str_566111)
# Adding element type (line 34)
str_566112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 40), 'str', 'minmax')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 34, 27), tuple_566110, str_566112)

# Processing the call keyword arguments (line 34)
kwargs_566113 = {}
# Getting the type of 'namedtuple' (line 34)
namedtuple_566108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 7), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 34)
namedtuple_call_result_566114 = invoke(stypy.reporting.localization.Localization(__file__, 34, 7), namedtuple_566108, *[str_566109, tuple_566110], **kwargs_566113)

# Assigning a type to the variable 'Mean' (line 34)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'Mean', namedtuple_call_result_566114)

# Assigning a Call to a Name (line 35):

# Assigning a Call to a Name (line 35):

# Call to namedtuple(...): (line 35)
# Processing the call arguments (line 35)
str_566116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 22), 'str', 'Variance')

# Obtaining an instance of the builtin type 'tuple' (line 35)
tuple_566117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 35), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 35)
# Adding element type (line 35)
str_566118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 35), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 35, 35), tuple_566117, str_566118)
# Adding element type (line 35)
str_566119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 48), 'str', 'minmax')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 35, 35), tuple_566117, str_566119)

# Processing the call keyword arguments (line 35)
kwargs_566120 = {}
# Getting the type of 'namedtuple' (line 35)
namedtuple_566115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 35, 11), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 35)
namedtuple_call_result_566121 = invoke(stypy.reporting.localization.Localization(__file__, 35, 11), namedtuple_566115, *[str_566116, tuple_566117], **kwargs_566120)

# Assigning a type to the variable 'Variance' (line 35)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'Variance', namedtuple_call_result_566121)

# Assigning a Call to a Name (line 36):

# Assigning a Call to a Name (line 36):

# Call to namedtuple(...): (line 36)
# Processing the call arguments (line 36)
str_566123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 21), 'str', 'Std_dev')

# Obtaining an instance of the builtin type 'tuple' (line 36)
tuple_566124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 33), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 36)
# Adding element type (line 36)
str_566125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 33), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 36, 33), tuple_566124, str_566125)
# Adding element type (line 36)
str_566126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 46), 'str', 'minmax')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 36, 33), tuple_566124, str_566126)

# Processing the call keyword arguments (line 36)
kwargs_566127 = {}
# Getting the type of 'namedtuple' (line 36)
namedtuple_566122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 10), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 36)
namedtuple_call_result_566128 = invoke(stypy.reporting.localization.Localization(__file__, 36, 10), namedtuple_566122, *[str_566123, tuple_566124], **kwargs_566127)

# Assigning a type to the variable 'Std_dev' (line 36)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'Std_dev', namedtuple_call_result_566128)

@norecursion
def bayes_mvs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_566129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 26), 'float')
    defaults = [float_566129]
    # Create a new context for function 'bayes_mvs'
    module_type_store = module_type_store.open_function_context('bayes_mvs', 39, 0, False)
    
    # Passed parameters checking function
    bayes_mvs.stypy_localization = localization
    bayes_mvs.stypy_type_of_self = None
    bayes_mvs.stypy_type_store = module_type_store
    bayes_mvs.stypy_function_name = 'bayes_mvs'
    bayes_mvs.stypy_param_names_list = ['data', 'alpha']
    bayes_mvs.stypy_varargs_param_name = None
    bayes_mvs.stypy_kwargs_param_name = None
    bayes_mvs.stypy_call_defaults = defaults
    bayes_mvs.stypy_call_varargs = varargs
    bayes_mvs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bayes_mvs', ['data', 'alpha'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bayes_mvs', localization, ['data', 'alpha'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bayes_mvs(...)' code ##################

    str_566130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, (-1)), 'str', '\n    Bayesian confidence intervals for the mean, var, and std.\n\n    Parameters\n    ----------\n    data : array_like\n        Input data, if multi-dimensional it is flattened to 1-D by `bayes_mvs`.\n        Requires 2 or more data points.\n    alpha : float, optional\n        Probability that the returned confidence interval contains\n        the true parameter.\n\n    Returns\n    -------\n    mean_cntr, var_cntr, std_cntr : tuple\n        The three results are for the mean, variance and standard deviation,\n        respectively.  Each result is a tuple of the form::\n\n            (center, (lower, upper))\n\n        with `center` the mean of the conditional pdf of the value given the\n        data, and `(lower, upper)` a confidence interval, centered on the\n        median, containing the estimate to a probability ``alpha``.\n\n    See Also\n    --------\n    mvsdist\n\n    Notes\n    -----\n    Each tuple of mean, variance, and standard deviation estimates represent\n    the (center, (lower, upper)) with center the mean of the conditional pdf\n    of the value given the data and (lower, upper) is a confidence interval\n    centered on the median, containing the estimate to a probability\n    ``alpha``.\n\n    Converts data to 1-D and assumes all data has the same mean and variance.\n    Uses Jeffrey\'s prior for variance and std.\n\n    Equivalent to ``tuple((x.mean(), x.interval(alpha)) for x in mvsdist(dat))``\n\n    References\n    ----------\n    T.E. Oliphant, "A Bayesian perspective on estimating mean, variance, and\n    standard-deviation from data", http://scholarsarchive.byu.edu/facpub/278,\n    2006.\n\n    Examples\n    --------\n    First a basic example to demonstrate the outputs:\n\n    >>> from scipy import stats\n    >>> data = [6, 9, 12, 7, 8, 8, 13]\n    >>> mean, var, std = stats.bayes_mvs(data)\n    >>> mean\n    Mean(statistic=9.0, minmax=(7.1036502226125329, 10.896349777387467))\n    >>> var\n    Variance(statistic=10.0, minmax=(3.176724206..., 24.45910382...))\n    >>> std\n    Std_dev(statistic=2.9724954732045084, minmax=(1.7823367265645143, 4.9456146050146295))\n\n    Now we generate some normally distributed random data, and get estimates of\n    mean and standard deviation with 95% confidence intervals for those\n    estimates:\n\n    >>> n_samples = 100000\n    >>> data = stats.norm.rvs(size=n_samples)\n    >>> res_mean, res_var, res_std = stats.bayes_mvs(data, alpha=0.95)\n\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(111)\n    >>> ax.hist(data, bins=100, normed=True, label=\'Histogram of data\')\n    >>> ax.vlines(res_mean.statistic, 0, 0.5, colors=\'r\', label=\'Estimated mean\')\n    >>> ax.axvspan(res_mean.minmax[0],res_mean.minmax[1], facecolor=\'r\',\n    ...            alpha=0.2, label=r\'Estimated mean (95% limits)\')\n    >>> ax.vlines(res_std.statistic, 0, 0.5, colors=\'g\', label=\'Estimated scale\')\n    >>> ax.axvspan(res_std.minmax[0],res_std.minmax[1], facecolor=\'g\', alpha=0.2,\n    ...            label=r\'Estimated scale (95% limits)\')\n\n    >>> ax.legend(fontsize=10)\n    >>> ax.set_xlim([-4, 4])\n    >>> ax.set_ylim([0, 0.5])\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Tuple (line 126):
    
    # Assigning a Subscript to a Name (line 126):
    
    # Obtaining the type of the subscript
    int_566131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 4), 'int')
    
    # Call to mvsdist(...): (line 126)
    # Processing the call arguments (line 126)
    # Getting the type of 'data' (line 126)
    data_566133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 22), 'data', False)
    # Processing the call keyword arguments (line 126)
    kwargs_566134 = {}
    # Getting the type of 'mvsdist' (line 126)
    mvsdist_566132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 14), 'mvsdist', False)
    # Calling mvsdist(args, kwargs) (line 126)
    mvsdist_call_result_566135 = invoke(stypy.reporting.localization.Localization(__file__, 126, 14), mvsdist_566132, *[data_566133], **kwargs_566134)
    
    # Obtaining the member '__getitem__' of a type (line 126)
    getitem___566136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 4), mvsdist_call_result_566135, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 126)
    subscript_call_result_566137 = invoke(stypy.reporting.localization.Localization(__file__, 126, 4), getitem___566136, int_566131)
    
    # Assigning a type to the variable 'tuple_var_assignment_566011' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'tuple_var_assignment_566011', subscript_call_result_566137)
    
    # Assigning a Subscript to a Name (line 126):
    
    # Obtaining the type of the subscript
    int_566138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 4), 'int')
    
    # Call to mvsdist(...): (line 126)
    # Processing the call arguments (line 126)
    # Getting the type of 'data' (line 126)
    data_566140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 22), 'data', False)
    # Processing the call keyword arguments (line 126)
    kwargs_566141 = {}
    # Getting the type of 'mvsdist' (line 126)
    mvsdist_566139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 14), 'mvsdist', False)
    # Calling mvsdist(args, kwargs) (line 126)
    mvsdist_call_result_566142 = invoke(stypy.reporting.localization.Localization(__file__, 126, 14), mvsdist_566139, *[data_566140], **kwargs_566141)
    
    # Obtaining the member '__getitem__' of a type (line 126)
    getitem___566143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 4), mvsdist_call_result_566142, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 126)
    subscript_call_result_566144 = invoke(stypy.reporting.localization.Localization(__file__, 126, 4), getitem___566143, int_566138)
    
    # Assigning a type to the variable 'tuple_var_assignment_566012' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'tuple_var_assignment_566012', subscript_call_result_566144)
    
    # Assigning a Subscript to a Name (line 126):
    
    # Obtaining the type of the subscript
    int_566145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 4), 'int')
    
    # Call to mvsdist(...): (line 126)
    # Processing the call arguments (line 126)
    # Getting the type of 'data' (line 126)
    data_566147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 22), 'data', False)
    # Processing the call keyword arguments (line 126)
    kwargs_566148 = {}
    # Getting the type of 'mvsdist' (line 126)
    mvsdist_566146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 14), 'mvsdist', False)
    # Calling mvsdist(args, kwargs) (line 126)
    mvsdist_call_result_566149 = invoke(stypy.reporting.localization.Localization(__file__, 126, 14), mvsdist_566146, *[data_566147], **kwargs_566148)
    
    # Obtaining the member '__getitem__' of a type (line 126)
    getitem___566150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 4), mvsdist_call_result_566149, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 126)
    subscript_call_result_566151 = invoke(stypy.reporting.localization.Localization(__file__, 126, 4), getitem___566150, int_566145)
    
    # Assigning a type to the variable 'tuple_var_assignment_566013' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'tuple_var_assignment_566013', subscript_call_result_566151)
    
    # Assigning a Name to a Name (line 126):
    # Getting the type of 'tuple_var_assignment_566011' (line 126)
    tuple_var_assignment_566011_566152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'tuple_var_assignment_566011')
    # Assigning a type to the variable 'm' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'm', tuple_var_assignment_566011_566152)
    
    # Assigning a Name to a Name (line 126):
    # Getting the type of 'tuple_var_assignment_566012' (line 126)
    tuple_var_assignment_566012_566153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'tuple_var_assignment_566012')
    # Assigning a type to the variable 'v' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 7), 'v', tuple_var_assignment_566012_566153)
    
    # Assigning a Name to a Name (line 126):
    # Getting the type of 'tuple_var_assignment_566013' (line 126)
    tuple_var_assignment_566013_566154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'tuple_var_assignment_566013')
    # Assigning a type to the variable 's' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 10), 's', tuple_var_assignment_566013_566154)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'alpha' (line 127)
    alpha_566155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 7), 'alpha')
    int_566156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 16), 'int')
    # Applying the binary operator '>=' (line 127)
    result_ge_566157 = python_operator(stypy.reporting.localization.Localization(__file__, 127, 7), '>=', alpha_566155, int_566156)
    
    
    # Getting the type of 'alpha' (line 127)
    alpha_566158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 21), 'alpha')
    int_566159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 30), 'int')
    # Applying the binary operator '<=' (line 127)
    result_le_566160 = python_operator(stypy.reporting.localization.Localization(__file__, 127, 21), '<=', alpha_566158, int_566159)
    
    # Applying the binary operator 'or' (line 127)
    result_or_keyword_566161 = python_operator(stypy.reporting.localization.Localization(__file__, 127, 7), 'or', result_ge_566157, result_le_566160)
    
    # Testing the type of an if condition (line 127)
    if_condition_566162 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 127, 4), result_or_keyword_566161)
    # Assigning a type to the variable 'if_condition_566162' (line 127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 4), 'if_condition_566162', if_condition_566162)
    # SSA begins for if statement (line 127)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 128)
    # Processing the call arguments (line 128)
    str_566164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 25), 'str', '0 < alpha < 1 is required, but alpha=%s was given.')
    # Getting the type of 'alpha' (line 129)
    alpha_566165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 27), 'alpha', False)
    # Applying the binary operator '%' (line 128)
    result_mod_566166 = python_operator(stypy.reporting.localization.Localization(__file__, 128, 25), '%', str_566164, alpha_566165)
    
    # Processing the call keyword arguments (line 128)
    kwargs_566167 = {}
    # Getting the type of 'ValueError' (line 128)
    ValueError_566163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 128)
    ValueError_call_result_566168 = invoke(stypy.reporting.localization.Localization(__file__, 128, 14), ValueError_566163, *[result_mod_566166], **kwargs_566167)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 128, 8), ValueError_call_result_566168, 'raise parameter', BaseException)
    # SSA join for if statement (line 127)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 131):
    
    # Assigning a Call to a Name (line 131):
    
    # Call to Mean(...): (line 131)
    # Processing the call arguments (line 131)
    
    # Call to mean(...): (line 131)
    # Processing the call keyword arguments (line 131)
    kwargs_566172 = {}
    # Getting the type of 'm' (line 131)
    m_566170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 17), 'm', False)
    # Obtaining the member 'mean' of a type (line 131)
    mean_566171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 17), m_566170, 'mean')
    # Calling mean(args, kwargs) (line 131)
    mean_call_result_566173 = invoke(stypy.reporting.localization.Localization(__file__, 131, 17), mean_566171, *[], **kwargs_566172)
    
    
    # Call to interval(...): (line 131)
    # Processing the call arguments (line 131)
    # Getting the type of 'alpha' (line 131)
    alpha_566176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 38), 'alpha', False)
    # Processing the call keyword arguments (line 131)
    kwargs_566177 = {}
    # Getting the type of 'm' (line 131)
    m_566174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 27), 'm', False)
    # Obtaining the member 'interval' of a type (line 131)
    interval_566175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 27), m_566174, 'interval')
    # Calling interval(args, kwargs) (line 131)
    interval_call_result_566178 = invoke(stypy.reporting.localization.Localization(__file__, 131, 27), interval_566175, *[alpha_566176], **kwargs_566177)
    
    # Processing the call keyword arguments (line 131)
    kwargs_566179 = {}
    # Getting the type of 'Mean' (line 131)
    Mean_566169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 12), 'Mean', False)
    # Calling Mean(args, kwargs) (line 131)
    Mean_call_result_566180 = invoke(stypy.reporting.localization.Localization(__file__, 131, 12), Mean_566169, *[mean_call_result_566173, interval_call_result_566178], **kwargs_566179)
    
    # Assigning a type to the variable 'm_res' (line 131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 4), 'm_res', Mean_call_result_566180)
    
    # Assigning a Call to a Name (line 132):
    
    # Assigning a Call to a Name (line 132):
    
    # Call to Variance(...): (line 132)
    # Processing the call arguments (line 132)
    
    # Call to mean(...): (line 132)
    # Processing the call keyword arguments (line 132)
    kwargs_566184 = {}
    # Getting the type of 'v' (line 132)
    v_566182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 21), 'v', False)
    # Obtaining the member 'mean' of a type (line 132)
    mean_566183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 21), v_566182, 'mean')
    # Calling mean(args, kwargs) (line 132)
    mean_call_result_566185 = invoke(stypy.reporting.localization.Localization(__file__, 132, 21), mean_566183, *[], **kwargs_566184)
    
    
    # Call to interval(...): (line 132)
    # Processing the call arguments (line 132)
    # Getting the type of 'alpha' (line 132)
    alpha_566188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 42), 'alpha', False)
    # Processing the call keyword arguments (line 132)
    kwargs_566189 = {}
    # Getting the type of 'v' (line 132)
    v_566186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 31), 'v', False)
    # Obtaining the member 'interval' of a type (line 132)
    interval_566187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 31), v_566186, 'interval')
    # Calling interval(args, kwargs) (line 132)
    interval_call_result_566190 = invoke(stypy.reporting.localization.Localization(__file__, 132, 31), interval_566187, *[alpha_566188], **kwargs_566189)
    
    # Processing the call keyword arguments (line 132)
    kwargs_566191 = {}
    # Getting the type of 'Variance' (line 132)
    Variance_566181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 12), 'Variance', False)
    # Calling Variance(args, kwargs) (line 132)
    Variance_call_result_566192 = invoke(stypy.reporting.localization.Localization(__file__, 132, 12), Variance_566181, *[mean_call_result_566185, interval_call_result_566190], **kwargs_566191)
    
    # Assigning a type to the variable 'v_res' (line 132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 4), 'v_res', Variance_call_result_566192)
    
    # Assigning a Call to a Name (line 133):
    
    # Assigning a Call to a Name (line 133):
    
    # Call to Std_dev(...): (line 133)
    # Processing the call arguments (line 133)
    
    # Call to mean(...): (line 133)
    # Processing the call keyword arguments (line 133)
    kwargs_566196 = {}
    # Getting the type of 's' (line 133)
    s_566194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 20), 's', False)
    # Obtaining the member 'mean' of a type (line 133)
    mean_566195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 20), s_566194, 'mean')
    # Calling mean(args, kwargs) (line 133)
    mean_call_result_566197 = invoke(stypy.reporting.localization.Localization(__file__, 133, 20), mean_566195, *[], **kwargs_566196)
    
    
    # Call to interval(...): (line 133)
    # Processing the call arguments (line 133)
    # Getting the type of 'alpha' (line 133)
    alpha_566200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 41), 'alpha', False)
    # Processing the call keyword arguments (line 133)
    kwargs_566201 = {}
    # Getting the type of 's' (line 133)
    s_566198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 30), 's', False)
    # Obtaining the member 'interval' of a type (line 133)
    interval_566199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 30), s_566198, 'interval')
    # Calling interval(args, kwargs) (line 133)
    interval_call_result_566202 = invoke(stypy.reporting.localization.Localization(__file__, 133, 30), interval_566199, *[alpha_566200], **kwargs_566201)
    
    # Processing the call keyword arguments (line 133)
    kwargs_566203 = {}
    # Getting the type of 'Std_dev' (line 133)
    Std_dev_566193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 12), 'Std_dev', False)
    # Calling Std_dev(args, kwargs) (line 133)
    Std_dev_call_result_566204 = invoke(stypy.reporting.localization.Localization(__file__, 133, 12), Std_dev_566193, *[mean_call_result_566197, interval_call_result_566202], **kwargs_566203)
    
    # Assigning a type to the variable 's_res' (line 133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 4), 's_res', Std_dev_call_result_566204)
    
    # Obtaining an instance of the builtin type 'tuple' (line 135)
    tuple_566205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 135, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 135)
    # Adding element type (line 135)
    # Getting the type of 'm_res' (line 135)
    m_res_566206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 11), 'm_res')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 135, 11), tuple_566205, m_res_566206)
    # Adding element type (line 135)
    # Getting the type of 'v_res' (line 135)
    v_res_566207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 18), 'v_res')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 135, 11), tuple_566205, v_res_566207)
    # Adding element type (line 135)
    # Getting the type of 's_res' (line 135)
    s_res_566208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 25), 's_res')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 135, 11), tuple_566205, s_res_566208)
    
    # Assigning a type to the variable 'stypy_return_type' (line 135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 4), 'stypy_return_type', tuple_566205)
    
    # ################# End of 'bayes_mvs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bayes_mvs' in the type store
    # Getting the type of 'stypy_return_type' (line 39)
    stypy_return_type_566209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_566209)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bayes_mvs'
    return stypy_return_type_566209

# Assigning a type to the variable 'bayes_mvs' (line 39)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'bayes_mvs', bayes_mvs)

@norecursion
def mvsdist(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'mvsdist'
    module_type_store = module_type_store.open_function_context('mvsdist', 138, 0, False)
    
    # Passed parameters checking function
    mvsdist.stypy_localization = localization
    mvsdist.stypy_type_of_self = None
    mvsdist.stypy_type_store = module_type_store
    mvsdist.stypy_function_name = 'mvsdist'
    mvsdist.stypy_param_names_list = ['data']
    mvsdist.stypy_varargs_param_name = None
    mvsdist.stypy_kwargs_param_name = None
    mvsdist.stypy_call_defaults = defaults
    mvsdist.stypy_call_varargs = varargs
    mvsdist.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mvsdist', ['data'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mvsdist', localization, ['data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mvsdist(...)' code ##################

    str_566210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, (-1)), 'str', '\n    \'Frozen\' distributions for mean, variance, and standard deviation of data.\n\n    Parameters\n    ----------\n    data : array_like\n        Input array. Converted to 1-D using ravel.\n        Requires 2 or more data-points.\n\n    Returns\n    -------\n    mdist : "frozen" distribution object\n        Distribution object representing the mean of the data\n    vdist : "frozen" distribution object\n        Distribution object representing the variance of the data\n    sdist : "frozen" distribution object\n        Distribution object representing the standard deviation of the data\n\n    See Also\n    --------\n    bayes_mvs\n\n    Notes\n    -----\n    The return values from ``bayes_mvs(data)`` is equivalent to\n    ``tuple((x.mean(), x.interval(0.90)) for x in mvsdist(data))``.\n\n    In other words, calling ``<dist>.mean()`` and ``<dist>.interval(0.90)``\n    on the three distribution objects returned from this function will give\n    the same results that are returned from `bayes_mvs`.\n\n    References\n    ----------\n    T.E. Oliphant, "A Bayesian perspective on estimating mean, variance, and\n    standard-deviation from data", http://scholarsarchive.byu.edu/facpub/278,\n    2006.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> data = [6, 9, 12, 7, 8, 8, 13]\n    >>> mean, var, std = stats.mvsdist(data)\n\n    We now have frozen distribution objects "mean", "var" and "std" that we can\n    examine:\n\n    >>> mean.mean()\n    9.0\n    >>> mean.interval(0.95)\n    (6.6120585482655692, 11.387941451734431)\n    >>> mean.std()\n    1.1952286093343936\n\n    ')
    
    # Assigning a Call to a Name (line 193):
    
    # Assigning a Call to a Name (line 193):
    
    # Call to ravel(...): (line 193)
    # Processing the call arguments (line 193)
    # Getting the type of 'data' (line 193)
    data_566212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 14), 'data', False)
    # Processing the call keyword arguments (line 193)
    kwargs_566213 = {}
    # Getting the type of 'ravel' (line 193)
    ravel_566211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 8), 'ravel', False)
    # Calling ravel(args, kwargs) (line 193)
    ravel_call_result_566214 = invoke(stypy.reporting.localization.Localization(__file__, 193, 8), ravel_566211, *[data_566212], **kwargs_566213)
    
    # Assigning a type to the variable 'x' (line 193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 4), 'x', ravel_call_result_566214)
    
    # Assigning a Call to a Name (line 194):
    
    # Assigning a Call to a Name (line 194):
    
    # Call to len(...): (line 194)
    # Processing the call arguments (line 194)
    # Getting the type of 'x' (line 194)
    x_566216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 12), 'x', False)
    # Processing the call keyword arguments (line 194)
    kwargs_566217 = {}
    # Getting the type of 'len' (line 194)
    len_566215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 8), 'len', False)
    # Calling len(args, kwargs) (line 194)
    len_call_result_566218 = invoke(stypy.reporting.localization.Localization(__file__, 194, 8), len_566215, *[x_566216], **kwargs_566217)
    
    # Assigning a type to the variable 'n' (line 194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 4), 'n', len_call_result_566218)
    
    
    # Getting the type of 'n' (line 195)
    n_566219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 7), 'n')
    int_566220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 11), 'int')
    # Applying the binary operator '<' (line 195)
    result_lt_566221 = python_operator(stypy.reporting.localization.Localization(__file__, 195, 7), '<', n_566219, int_566220)
    
    # Testing the type of an if condition (line 195)
    if_condition_566222 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 195, 4), result_lt_566221)
    # Assigning a type to the variable 'if_condition_566222' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'if_condition_566222', if_condition_566222)
    # SSA begins for if statement (line 195)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 196)
    # Processing the call arguments (line 196)
    str_566224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 25), 'str', 'Need at least 2 data-points.')
    # Processing the call keyword arguments (line 196)
    kwargs_566225 = {}
    # Getting the type of 'ValueError' (line 196)
    ValueError_566223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 196)
    ValueError_call_result_566226 = invoke(stypy.reporting.localization.Localization(__file__, 196, 14), ValueError_566223, *[str_566224], **kwargs_566225)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 196, 8), ValueError_call_result_566226, 'raise parameter', BaseException)
    # SSA join for if statement (line 195)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 197):
    
    # Assigning a Call to a Name (line 197):
    
    # Call to mean(...): (line 197)
    # Processing the call keyword arguments (line 197)
    kwargs_566229 = {}
    # Getting the type of 'x' (line 197)
    x_566227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 11), 'x', False)
    # Obtaining the member 'mean' of a type (line 197)
    mean_566228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 11), x_566227, 'mean')
    # Calling mean(args, kwargs) (line 197)
    mean_call_result_566230 = invoke(stypy.reporting.localization.Localization(__file__, 197, 11), mean_566228, *[], **kwargs_566229)
    
    # Assigning a type to the variable 'xbar' (line 197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 4), 'xbar', mean_call_result_566230)
    
    # Assigning a Call to a Name (line 198):
    
    # Assigning a Call to a Name (line 198):
    
    # Call to var(...): (line 198)
    # Processing the call keyword arguments (line 198)
    kwargs_566233 = {}
    # Getting the type of 'x' (line 198)
    x_566231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 8), 'x', False)
    # Obtaining the member 'var' of a type (line 198)
    var_566232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 8), x_566231, 'var')
    # Calling var(args, kwargs) (line 198)
    var_call_result_566234 = invoke(stypy.reporting.localization.Localization(__file__, 198, 8), var_566232, *[], **kwargs_566233)
    
    # Assigning a type to the variable 'C' (line 198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 4), 'C', var_call_result_566234)
    
    
    # Getting the type of 'n' (line 199)
    n_566235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 7), 'n')
    int_566236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 199, 11), 'int')
    # Applying the binary operator '>' (line 199)
    result_gt_566237 = python_operator(stypy.reporting.localization.Localization(__file__, 199, 7), '>', n_566235, int_566236)
    
    # Testing the type of an if condition (line 199)
    if_condition_566238 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 199, 4), result_gt_566237)
    # Assigning a type to the variable 'if_condition_566238' (line 199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 4), 'if_condition_566238', if_condition_566238)
    # SSA begins for if statement (line 199)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 200):
    
    # Assigning a Call to a Name (line 200):
    
    # Call to norm(...): (line 200)
    # Processing the call keyword arguments (line 200)
    # Getting the type of 'xbar' (line 200)
    xbar_566241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 39), 'xbar', False)
    keyword_566242 = xbar_566241
    
    # Call to sqrt(...): (line 200)
    # Processing the call arguments (line 200)
    # Getting the type of 'C' (line 200)
    C_566245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 61), 'C', False)
    # Getting the type of 'n' (line 200)
    n_566246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 65), 'n', False)
    # Applying the binary operator 'div' (line 200)
    result_div_566247 = python_operator(stypy.reporting.localization.Localization(__file__, 200, 61), 'div', C_566245, n_566246)
    
    # Processing the call keyword arguments (line 200)
    kwargs_566248 = {}
    # Getting the type of 'math' (line 200)
    math_566243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 51), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 200)
    sqrt_566244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 51), math_566243, 'sqrt')
    # Calling sqrt(args, kwargs) (line 200)
    sqrt_call_result_566249 = invoke(stypy.reporting.localization.Localization(__file__, 200, 51), sqrt_566244, *[result_div_566247], **kwargs_566248)
    
    keyword_566250 = sqrt_call_result_566249
    kwargs_566251 = {'loc': keyword_566242, 'scale': keyword_566250}
    # Getting the type of 'distributions' (line 200)
    distributions_566239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 16), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 200)
    norm_566240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 16), distributions_566239, 'norm')
    # Calling norm(args, kwargs) (line 200)
    norm_call_result_566252 = invoke(stypy.reporting.localization.Localization(__file__, 200, 16), norm_566240, *[], **kwargs_566251)
    
    # Assigning a type to the variable 'mdist' (line 200)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 200, 8), 'mdist', norm_call_result_566252)
    
    # Assigning a Call to a Name (line 201):
    
    # Assigning a Call to a Name (line 201):
    
    # Call to norm(...): (line 201)
    # Processing the call keyword arguments (line 201)
    
    # Call to sqrt(...): (line 201)
    # Processing the call arguments (line 201)
    # Getting the type of 'C' (line 201)
    C_566257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 49), 'C', False)
    # Processing the call keyword arguments (line 201)
    kwargs_566258 = {}
    # Getting the type of 'math' (line 201)
    math_566255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 39), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 201)
    sqrt_566256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 39), math_566255, 'sqrt')
    # Calling sqrt(args, kwargs) (line 201)
    sqrt_call_result_566259 = invoke(stypy.reporting.localization.Localization(__file__, 201, 39), sqrt_566256, *[C_566257], **kwargs_566258)
    
    keyword_566260 = sqrt_call_result_566259
    
    # Call to sqrt(...): (line 201)
    # Processing the call arguments (line 201)
    # Getting the type of 'C' (line 201)
    C_566263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 69), 'C', False)
    float_566264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 74), 'float')
    # Getting the type of 'n' (line 201)
    n_566265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 79), 'n', False)
    # Applying the binary operator '*' (line 201)
    result_mul_566266 = python_operator(stypy.reporting.localization.Localization(__file__, 201, 74), '*', float_566264, n_566265)
    
    # Applying the binary operator 'div' (line 201)
    result_div_566267 = python_operator(stypy.reporting.localization.Localization(__file__, 201, 69), 'div', C_566263, result_mul_566266)
    
    # Processing the call keyword arguments (line 201)
    kwargs_566268 = {}
    # Getting the type of 'math' (line 201)
    math_566261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 59), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 201)
    sqrt_566262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 59), math_566261, 'sqrt')
    # Calling sqrt(args, kwargs) (line 201)
    sqrt_call_result_566269 = invoke(stypy.reporting.localization.Localization(__file__, 201, 59), sqrt_566262, *[result_div_566267], **kwargs_566268)
    
    keyword_566270 = sqrt_call_result_566269
    kwargs_566271 = {'loc': keyword_566260, 'scale': keyword_566270}
    # Getting the type of 'distributions' (line 201)
    distributions_566253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 16), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 201)
    norm_566254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 16), distributions_566253, 'norm')
    # Calling norm(args, kwargs) (line 201)
    norm_call_result_566272 = invoke(stypy.reporting.localization.Localization(__file__, 201, 16), norm_566254, *[], **kwargs_566271)
    
    # Assigning a type to the variable 'sdist' (line 201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'sdist', norm_call_result_566272)
    
    # Assigning a Call to a Name (line 202):
    
    # Assigning a Call to a Name (line 202):
    
    # Call to norm(...): (line 202)
    # Processing the call keyword arguments (line 202)
    # Getting the type of 'C' (line 202)
    C_566275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 39), 'C', False)
    keyword_566276 = C_566275
    
    # Call to sqrt(...): (line 202)
    # Processing the call arguments (line 202)
    float_566279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 58), 'float')
    # Getting the type of 'n' (line 202)
    n_566280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 64), 'n', False)
    # Applying the binary operator 'div' (line 202)
    result_div_566281 = python_operator(stypy.reporting.localization.Localization(__file__, 202, 58), 'div', float_566279, n_566280)
    
    # Processing the call keyword arguments (line 202)
    kwargs_566282 = {}
    # Getting the type of 'math' (line 202)
    math_566277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 48), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 202)
    sqrt_566278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 48), math_566277, 'sqrt')
    # Calling sqrt(args, kwargs) (line 202)
    sqrt_call_result_566283 = invoke(stypy.reporting.localization.Localization(__file__, 202, 48), sqrt_566278, *[result_div_566281], **kwargs_566282)
    
    # Getting the type of 'C' (line 202)
    C_566284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 69), 'C', False)
    # Applying the binary operator '*' (line 202)
    result_mul_566285 = python_operator(stypy.reporting.localization.Localization(__file__, 202, 48), '*', sqrt_call_result_566283, C_566284)
    
    keyword_566286 = result_mul_566285
    kwargs_566287 = {'loc': keyword_566276, 'scale': keyword_566286}
    # Getting the type of 'distributions' (line 202)
    distributions_566273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 16), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 202)
    norm_566274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 16), distributions_566273, 'norm')
    # Calling norm(args, kwargs) (line 202)
    norm_call_result_566288 = invoke(stypy.reporting.localization.Localization(__file__, 202, 16), norm_566274, *[], **kwargs_566287)
    
    # Assigning a type to the variable 'vdist' (line 202)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'vdist', norm_call_result_566288)
    # SSA branch for the else part of an if statement (line 199)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 204):
    
    # Assigning a BinOp to a Name (line 204):
    # Getting the type of 'n' (line 204)
    n_566289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 14), 'n')
    int_566290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 18), 'int')
    # Applying the binary operator '-' (line 204)
    result_sub_566291 = python_operator(stypy.reporting.localization.Localization(__file__, 204, 14), '-', n_566289, int_566290)
    
    # Assigning a type to the variable 'nm1' (line 204)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 8), 'nm1', result_sub_566291)
    
    # Assigning a BinOp to a Name (line 205):
    
    # Assigning a BinOp to a Name (line 205):
    # Getting the type of 'n' (line 205)
    n_566292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 14), 'n')
    # Getting the type of 'C' (line 205)
    C_566293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 18), 'C')
    # Applying the binary operator '*' (line 205)
    result_mul_566294 = python_operator(stypy.reporting.localization.Localization(__file__, 205, 14), '*', n_566292, C_566293)
    
    float_566295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, 22), 'float')
    # Applying the binary operator 'div' (line 205)
    result_div_566296 = python_operator(stypy.reporting.localization.Localization(__file__, 205, 20), 'div', result_mul_566294, float_566295)
    
    # Assigning a type to the variable 'fac' (line 205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 8), 'fac', result_div_566296)
    
    # Assigning a BinOp to a Name (line 206):
    
    # Assigning a BinOp to a Name (line 206):
    # Getting the type of 'nm1' (line 206)
    nm1_566297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 14), 'nm1')
    float_566298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 206, 20), 'float')
    # Applying the binary operator 'div' (line 206)
    result_div_566299 = python_operator(stypy.reporting.localization.Localization(__file__, 206, 14), 'div', nm1_566297, float_566298)
    
    # Assigning a type to the variable 'val' (line 206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 8), 'val', result_div_566299)
    
    # Assigning a Call to a Name (line 207):
    
    # Assigning a Call to a Name (line 207):
    
    # Call to t(...): (line 207)
    # Processing the call arguments (line 207)
    # Getting the type of 'nm1' (line 207)
    nm1_566302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 32), 'nm1', False)
    # Processing the call keyword arguments (line 207)
    # Getting the type of 'xbar' (line 207)
    xbar_566303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 41), 'xbar', False)
    keyword_566304 = xbar_566303
    
    # Call to sqrt(...): (line 207)
    # Processing the call arguments (line 207)
    # Getting the type of 'C' (line 207)
    C_566307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 63), 'C', False)
    # Getting the type of 'nm1' (line 207)
    nm1_566308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 67), 'nm1', False)
    # Applying the binary operator 'div' (line 207)
    result_div_566309 = python_operator(stypy.reporting.localization.Localization(__file__, 207, 63), 'div', C_566307, nm1_566308)
    
    # Processing the call keyword arguments (line 207)
    kwargs_566310 = {}
    # Getting the type of 'math' (line 207)
    math_566305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 53), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 207)
    sqrt_566306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 53), math_566305, 'sqrt')
    # Calling sqrt(args, kwargs) (line 207)
    sqrt_call_result_566311 = invoke(stypy.reporting.localization.Localization(__file__, 207, 53), sqrt_566306, *[result_div_566309], **kwargs_566310)
    
    keyword_566312 = sqrt_call_result_566311
    kwargs_566313 = {'loc': keyword_566304, 'scale': keyword_566312}
    # Getting the type of 'distributions' (line 207)
    distributions_566300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 16), 'distributions', False)
    # Obtaining the member 't' of a type (line 207)
    t_566301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 16), distributions_566300, 't')
    # Calling t(args, kwargs) (line 207)
    t_call_result_566314 = invoke(stypy.reporting.localization.Localization(__file__, 207, 16), t_566301, *[nm1_566302], **kwargs_566313)
    
    # Assigning a type to the variable 'mdist' (line 207)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'mdist', t_call_result_566314)
    
    # Assigning a Call to a Name (line 208):
    
    # Assigning a Call to a Name (line 208):
    
    # Call to gengamma(...): (line 208)
    # Processing the call arguments (line 208)
    # Getting the type of 'val' (line 208)
    val_566317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 39), 'val', False)
    int_566318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 44), 'int')
    # Processing the call keyword arguments (line 208)
    
    # Call to sqrt(...): (line 208)
    # Processing the call arguments (line 208)
    # Getting the type of 'fac' (line 208)
    fac_566321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 64), 'fac', False)
    # Processing the call keyword arguments (line 208)
    kwargs_566322 = {}
    # Getting the type of 'math' (line 208)
    math_566319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 54), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 208)
    sqrt_566320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 54), math_566319, 'sqrt')
    # Calling sqrt(args, kwargs) (line 208)
    sqrt_call_result_566323 = invoke(stypy.reporting.localization.Localization(__file__, 208, 54), sqrt_566320, *[fac_566321], **kwargs_566322)
    
    keyword_566324 = sqrt_call_result_566323
    kwargs_566325 = {'scale': keyword_566324}
    # Getting the type of 'distributions' (line 208)
    distributions_566315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 16), 'distributions', False)
    # Obtaining the member 'gengamma' of a type (line 208)
    gengamma_566316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 16), distributions_566315, 'gengamma')
    # Calling gengamma(args, kwargs) (line 208)
    gengamma_call_result_566326 = invoke(stypy.reporting.localization.Localization(__file__, 208, 16), gengamma_566316, *[val_566317, int_566318], **kwargs_566325)
    
    # Assigning a type to the variable 'sdist' (line 208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 8), 'sdist', gengamma_call_result_566326)
    
    # Assigning a Call to a Name (line 209):
    
    # Assigning a Call to a Name (line 209):
    
    # Call to invgamma(...): (line 209)
    # Processing the call arguments (line 209)
    # Getting the type of 'val' (line 209)
    val_566329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 39), 'val', False)
    # Processing the call keyword arguments (line 209)
    # Getting the type of 'fac' (line 209)
    fac_566330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 50), 'fac', False)
    keyword_566331 = fac_566330
    kwargs_566332 = {'scale': keyword_566331}
    # Getting the type of 'distributions' (line 209)
    distributions_566327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 16), 'distributions', False)
    # Obtaining the member 'invgamma' of a type (line 209)
    invgamma_566328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 16), distributions_566327, 'invgamma')
    # Calling invgamma(args, kwargs) (line 209)
    invgamma_call_result_566333 = invoke(stypy.reporting.localization.Localization(__file__, 209, 16), invgamma_566328, *[val_566329], **kwargs_566332)
    
    # Assigning a type to the variable 'vdist' (line 209)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 209, 8), 'vdist', invgamma_call_result_566333)
    # SSA join for if statement (line 199)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 210)
    tuple_566334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 210)
    # Adding element type (line 210)
    # Getting the type of 'mdist' (line 210)
    mdist_566335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 11), 'mdist')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 11), tuple_566334, mdist_566335)
    # Adding element type (line 210)
    # Getting the type of 'vdist' (line 210)
    vdist_566336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 18), 'vdist')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 11), tuple_566334, vdist_566336)
    # Adding element type (line 210)
    # Getting the type of 'sdist' (line 210)
    sdist_566337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 25), 'sdist')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 11), tuple_566334, sdist_566337)
    
    # Assigning a type to the variable 'stypy_return_type' (line 210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'stypy_return_type', tuple_566334)
    
    # ################# End of 'mvsdist(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mvsdist' in the type store
    # Getting the type of 'stypy_return_type' (line 138)
    stypy_return_type_566338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_566338)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mvsdist'
    return stypy_return_type_566338

# Assigning a type to the variable 'mvsdist' (line 138)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 138, 0), 'mvsdist', mvsdist)

@norecursion
def kstat(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_566339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 18), 'int')
    defaults = [int_566339]
    # Create a new context for function 'kstat'
    module_type_store = module_type_store.open_function_context('kstat', 213, 0, False)
    
    # Passed parameters checking function
    kstat.stypy_localization = localization
    kstat.stypy_type_of_self = None
    kstat.stypy_type_store = module_type_store
    kstat.stypy_function_name = 'kstat'
    kstat.stypy_param_names_list = ['data', 'n']
    kstat.stypy_varargs_param_name = None
    kstat.stypy_kwargs_param_name = None
    kstat.stypy_call_defaults = defaults
    kstat.stypy_call_varargs = varargs
    kstat.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kstat', ['data', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kstat', localization, ['data', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kstat(...)' code ##################

    str_566340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, (-1)), 'str', '\n    Return the nth k-statistic (1<=n<=4 so far).\n\n    The nth k-statistic k_n is the unique symmetric unbiased estimator of the\n    nth cumulant kappa_n.\n\n    Parameters\n    ----------\n    data : array_like\n        Input array. Note that n-D input gets flattened.\n    n : int, {1, 2, 3, 4}, optional\n        Default is equal to 2.\n\n    Returns\n    -------\n    kstat : float\n        The nth k-statistic.\n\n    See Also\n    --------\n    kstatvar: Returns an unbiased estimator of the variance of the k-statistic.\n    moment: Returns the n-th central moment about the mean for a sample.\n\n    Notes\n    -----\n    For a sample size n, the first few k-statistics are given by:\n\n    .. math::\n\n        k_{1} = \\mu\n        k_{2} = \\frac{n}{n-1} m_{2}\n        k_{3} = \\frac{ n^{2} } {(n-1) (n-2)} m_{3}\n        k_{4} = \\frac{ n^{2} [(n + 1)m_{4} - 3(n - 1) m^2_{2}]} {(n-1) (n-2) (n-3)}\n\n    where :math:`\\mu` is the sample mean, :math:`m_2` is the sample\n    variance, and :math:`m_i` is the i-th sample central moment.\n\n    References\n    ----------\n    http://mathworld.wolfram.com/k-Statistic.html\n\n    http://mathworld.wolfram.com/Cumulant.html\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> rndm = np.random.RandomState(1234)\n\n    As sample size increases, n-th moment and n-th k-statistic converge to the\n    same number (although they aren\'t identical). In the case of the normal\n    distribution, they converge to zero.\n\n    >>> for n in [2, 3, 4, 5, 6, 7]:\n    ...     x = rndm.normal(size=10**n)\n    ...     m, k = stats.moment(x, 3), stats.kstat(x, 3)\n    ...     print("%.3g %.3g %.3g" % (m, k, m-k))\n    -0.631 -0.651 0.0194\n    0.0282 0.0283 -8.49e-05\n    -0.0454 -0.0454 1.36e-05\n    7.53e-05 7.53e-05 -2.26e-09\n    0.00166 0.00166 -4.99e-09\n    -2.88e-06 -2.88e-06 8.63e-13\n    ')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 277)
    n_566341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 7), 'n')
    int_566342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 11), 'int')
    # Applying the binary operator '>' (line 277)
    result_gt_566343 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 7), '>', n_566341, int_566342)
    
    
    # Getting the type of 'n' (line 277)
    n_566344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 16), 'n')
    int_566345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 20), 'int')
    # Applying the binary operator '<' (line 277)
    result_lt_566346 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 16), '<', n_566344, int_566345)
    
    # Applying the binary operator 'or' (line 277)
    result_or_keyword_566347 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 7), 'or', result_gt_566343, result_lt_566346)
    
    # Testing the type of an if condition (line 277)
    if_condition_566348 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 277, 4), result_or_keyword_566347)
    # Assigning a type to the variable 'if_condition_566348' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'if_condition_566348', if_condition_566348)
    # SSA begins for if statement (line 277)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 278)
    # Processing the call arguments (line 278)
    str_566350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 25), 'str', 'k-statistics only supported for 1<=n<=4')
    # Processing the call keyword arguments (line 278)
    kwargs_566351 = {}
    # Getting the type of 'ValueError' (line 278)
    ValueError_566349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 278)
    ValueError_call_result_566352 = invoke(stypy.reporting.localization.Localization(__file__, 278, 14), ValueError_566349, *[str_566350], **kwargs_566351)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 278, 8), ValueError_call_result_566352, 'raise parameter', BaseException)
    # SSA join for if statement (line 277)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 279):
    
    # Assigning a Call to a Name (line 279):
    
    # Call to int(...): (line 279)
    # Processing the call arguments (line 279)
    # Getting the type of 'n' (line 279)
    n_566354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 12), 'n', False)
    # Processing the call keyword arguments (line 279)
    kwargs_566355 = {}
    # Getting the type of 'int' (line 279)
    int_566353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 8), 'int', False)
    # Calling int(args, kwargs) (line 279)
    int_call_result_566356 = invoke(stypy.reporting.localization.Localization(__file__, 279, 8), int_566353, *[n_566354], **kwargs_566355)
    
    # Assigning a type to the variable 'n' (line 279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 4), 'n', int_call_result_566356)
    
    # Assigning a Call to a Name (line 280):
    
    # Assigning a Call to a Name (line 280):
    
    # Call to zeros(...): (line 280)
    # Processing the call arguments (line 280)
    # Getting the type of 'n' (line 280)
    n_566359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 17), 'n', False)
    int_566360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 21), 'int')
    # Applying the binary operator '+' (line 280)
    result_add_566361 = python_operator(stypy.reporting.localization.Localization(__file__, 280, 17), '+', n_566359, int_566360)
    
    # Getting the type of 'np' (line 280)
    np_566362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 24), 'np', False)
    # Obtaining the member 'float64' of a type (line 280)
    float64_566363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 24), np_566362, 'float64')
    # Processing the call keyword arguments (line 280)
    kwargs_566364 = {}
    # Getting the type of 'np' (line 280)
    np_566357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 8), 'np', False)
    # Obtaining the member 'zeros' of a type (line 280)
    zeros_566358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 8), np_566357, 'zeros')
    # Calling zeros(args, kwargs) (line 280)
    zeros_call_result_566365 = invoke(stypy.reporting.localization.Localization(__file__, 280, 8), zeros_566358, *[result_add_566361, float64_566363], **kwargs_566364)
    
    # Assigning a type to the variable 'S' (line 280)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 4), 'S', zeros_call_result_566365)
    
    # Assigning a Call to a Name (line 281):
    
    # Assigning a Call to a Name (line 281):
    
    # Call to ravel(...): (line 281)
    # Processing the call arguments (line 281)
    # Getting the type of 'data' (line 281)
    data_566367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 17), 'data', False)
    # Processing the call keyword arguments (line 281)
    kwargs_566368 = {}
    # Getting the type of 'ravel' (line 281)
    ravel_566366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 11), 'ravel', False)
    # Calling ravel(args, kwargs) (line 281)
    ravel_call_result_566369 = invoke(stypy.reporting.localization.Localization(__file__, 281, 11), ravel_566366, *[data_566367], **kwargs_566368)
    
    # Assigning a type to the variable 'data' (line 281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 4), 'data', ravel_call_result_566369)
    
    # Assigning a Attribute to a Name (line 282):
    
    # Assigning a Attribute to a Name (line 282):
    # Getting the type of 'data' (line 282)
    data_566370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 8), 'data')
    # Obtaining the member 'size' of a type (line 282)
    size_566371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 8), data_566370, 'size')
    # Assigning a type to the variable 'N' (line 282)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 4), 'N', size_566371)
    
    
    # Getting the type of 'N' (line 285)
    N_566372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 7), 'N')
    int_566373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 285, 12), 'int')
    # Applying the binary operator '==' (line 285)
    result_eq_566374 = python_operator(stypy.reporting.localization.Localization(__file__, 285, 7), '==', N_566372, int_566373)
    
    # Testing the type of an if condition (line 285)
    if_condition_566375 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 285, 4), result_eq_566374)
    # Assigning a type to the variable 'if_condition_566375' (line 285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 4), 'if_condition_566375', if_condition_566375)
    # SSA begins for if statement (line 285)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 286)
    # Processing the call arguments (line 286)
    str_566377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 25), 'str', 'Data input must not be empty')
    # Processing the call keyword arguments (line 286)
    kwargs_566378 = {}
    # Getting the type of 'ValueError' (line 286)
    ValueError_566376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 286)
    ValueError_call_result_566379 = invoke(stypy.reporting.localization.Localization(__file__, 286, 14), ValueError_566376, *[str_566377], **kwargs_566378)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 286, 8), ValueError_call_result_566379, 'raise parameter', BaseException)
    # SSA join for if statement (line 285)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isnan(...): (line 289)
    # Processing the call arguments (line 289)
    
    # Call to sum(...): (line 289)
    # Processing the call arguments (line 289)
    # Getting the type of 'data' (line 289)
    data_566384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 23), 'data', False)
    # Processing the call keyword arguments (line 289)
    kwargs_566385 = {}
    # Getting the type of 'np' (line 289)
    np_566382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 16), 'np', False)
    # Obtaining the member 'sum' of a type (line 289)
    sum_566383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 16), np_566382, 'sum')
    # Calling sum(args, kwargs) (line 289)
    sum_call_result_566386 = invoke(stypy.reporting.localization.Localization(__file__, 289, 16), sum_566383, *[data_566384], **kwargs_566385)
    
    # Processing the call keyword arguments (line 289)
    kwargs_566387 = {}
    # Getting the type of 'np' (line 289)
    np_566380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 7), 'np', False)
    # Obtaining the member 'isnan' of a type (line 289)
    isnan_566381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 7), np_566380, 'isnan')
    # Calling isnan(args, kwargs) (line 289)
    isnan_call_result_566388 = invoke(stypy.reporting.localization.Localization(__file__, 289, 7), isnan_566381, *[sum_call_result_566386], **kwargs_566387)
    
    # Testing the type of an if condition (line 289)
    if_condition_566389 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 289, 4), isnan_call_result_566388)
    # Assigning a type to the variable 'if_condition_566389' (line 289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 289, 4), 'if_condition_566389', if_condition_566389)
    # SSA begins for if statement (line 289)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'np' (line 290)
    np_566390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 15), 'np')
    # Obtaining the member 'nan' of a type (line 290)
    nan_566391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 15), np_566390, 'nan')
    # Assigning a type to the variable 'stypy_return_type' (line 290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 8), 'stypy_return_type', nan_566391)
    # SSA join for if statement (line 289)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 292)
    # Processing the call arguments (line 292)
    int_566393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 19), 'int')
    # Getting the type of 'n' (line 292)
    n_566394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 22), 'n', False)
    int_566395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 26), 'int')
    # Applying the binary operator '+' (line 292)
    result_add_566396 = python_operator(stypy.reporting.localization.Localization(__file__, 292, 22), '+', n_566394, int_566395)
    
    # Processing the call keyword arguments (line 292)
    kwargs_566397 = {}
    # Getting the type of 'range' (line 292)
    range_566392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 13), 'range', False)
    # Calling range(args, kwargs) (line 292)
    range_call_result_566398 = invoke(stypy.reporting.localization.Localization(__file__, 292, 13), range_566392, *[int_566393, result_add_566396], **kwargs_566397)
    
    # Testing the type of a for loop iterable (line 292)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 292, 4), range_call_result_566398)
    # Getting the type of the for loop variable (line 292)
    for_loop_var_566399 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 292, 4), range_call_result_566398)
    # Assigning a type to the variable 'k' (line 292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 4), 'k', for_loop_var_566399)
    # SSA begins for a for statement (line 292)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 293):
    
    # Assigning a Call to a Subscript (line 293):
    
    # Call to sum(...): (line 293)
    # Processing the call arguments (line 293)
    # Getting the type of 'data' (line 293)
    data_566402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 22), 'data', False)
    # Getting the type of 'k' (line 293)
    k_566403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 28), 'k', False)
    # Applying the binary operator '**' (line 293)
    result_pow_566404 = python_operator(stypy.reporting.localization.Localization(__file__, 293, 22), '**', data_566402, k_566403)
    
    # Processing the call keyword arguments (line 293)
    int_566405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 36), 'int')
    keyword_566406 = int_566405
    kwargs_566407 = {'axis': keyword_566406}
    # Getting the type of 'np' (line 293)
    np_566400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 15), 'np', False)
    # Obtaining the member 'sum' of a type (line 293)
    sum_566401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 15), np_566400, 'sum')
    # Calling sum(args, kwargs) (line 293)
    sum_call_result_566408 = invoke(stypy.reporting.localization.Localization(__file__, 293, 15), sum_566401, *[result_pow_566404], **kwargs_566407)
    
    # Getting the type of 'S' (line 293)
    S_566409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 8), 'S')
    # Getting the type of 'k' (line 293)
    k_566410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 10), 'k')
    # Storing an element on a container (line 293)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 8), S_566409, (k_566410, sum_call_result_566408))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 294)
    n_566411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 7), 'n')
    int_566412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 12), 'int')
    # Applying the binary operator '==' (line 294)
    result_eq_566413 = python_operator(stypy.reporting.localization.Localization(__file__, 294, 7), '==', n_566411, int_566412)
    
    # Testing the type of an if condition (line 294)
    if_condition_566414 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 294, 4), result_eq_566413)
    # Assigning a type to the variable 'if_condition_566414' (line 294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 294, 4), 'if_condition_566414', if_condition_566414)
    # SSA begins for if statement (line 294)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    int_566415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 17), 'int')
    # Getting the type of 'S' (line 295)
    S_566416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 15), 'S')
    # Obtaining the member '__getitem__' of a type (line 295)
    getitem___566417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 15), S_566416, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 295)
    subscript_call_result_566418 = invoke(stypy.reporting.localization.Localization(__file__, 295, 15), getitem___566417, int_566415)
    
    float_566419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 22), 'float')
    # Applying the binary operator '*' (line 295)
    result_mul_566420 = python_operator(stypy.reporting.localization.Localization(__file__, 295, 15), '*', subscript_call_result_566418, float_566419)
    
    # Getting the type of 'N' (line 295)
    N_566421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 26), 'N')
    # Applying the binary operator 'div' (line 295)
    result_div_566422 = python_operator(stypy.reporting.localization.Localization(__file__, 295, 25), 'div', result_mul_566420, N_566421)
    
    # Assigning a type to the variable 'stypy_return_type' (line 295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 8), 'stypy_return_type', result_div_566422)
    # SSA branch for the else part of an if statement (line 294)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'n' (line 296)
    n_566423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 9), 'n')
    int_566424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 14), 'int')
    # Applying the binary operator '==' (line 296)
    result_eq_566425 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 9), '==', n_566423, int_566424)
    
    # Testing the type of an if condition (line 296)
    if_condition_566426 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 296, 9), result_eq_566425)
    # Assigning a type to the variable 'if_condition_566426' (line 296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 9), 'if_condition_566426', if_condition_566426)
    # SSA begins for if statement (line 296)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'N' (line 297)
    N_566427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 16), 'N')
    
    # Obtaining the type of the subscript
    int_566428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 20), 'int')
    # Getting the type of 'S' (line 297)
    S_566429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 18), 'S')
    # Obtaining the member '__getitem__' of a type (line 297)
    getitem___566430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 18), S_566429, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 297)
    subscript_call_result_566431 = invoke(stypy.reporting.localization.Localization(__file__, 297, 18), getitem___566430, int_566428)
    
    # Applying the binary operator '*' (line 297)
    result_mul_566432 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 16), '*', N_566427, subscript_call_result_566431)
    
    
    # Obtaining the type of the subscript
    int_566433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 27), 'int')
    # Getting the type of 'S' (line 297)
    S_566434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 25), 'S')
    # Obtaining the member '__getitem__' of a type (line 297)
    getitem___566435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 25), S_566434, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 297)
    subscript_call_result_566436 = invoke(stypy.reporting.localization.Localization(__file__, 297, 25), getitem___566435, int_566433)
    
    float_566437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 31), 'float')
    # Applying the binary operator '**' (line 297)
    result_pow_566438 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 25), '**', subscript_call_result_566436, float_566437)
    
    # Applying the binary operator '-' (line 297)
    result_sub_566439 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 16), '-', result_mul_566432, result_pow_566438)
    
    # Getting the type of 'N' (line 297)
    N_566440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 39), 'N')
    # Getting the type of 'N' (line 297)
    N_566441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 42), 'N')
    float_566442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 46), 'float')
    # Applying the binary operator '-' (line 297)
    result_sub_566443 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 42), '-', N_566441, float_566442)
    
    # Applying the binary operator '*' (line 297)
    result_mul_566444 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 39), '*', N_566440, result_sub_566443)
    
    # Applying the binary operator 'div' (line 297)
    result_div_566445 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 15), 'div', result_sub_566439, result_mul_566444)
    
    # Assigning a type to the variable 'stypy_return_type' (line 297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'stypy_return_type', result_div_566445)
    # SSA branch for the else part of an if statement (line 296)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'n' (line 298)
    n_566446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 9), 'n')
    int_566447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 14), 'int')
    # Applying the binary operator '==' (line 298)
    result_eq_566448 = python_operator(stypy.reporting.localization.Localization(__file__, 298, 9), '==', n_566446, int_566447)
    
    # Testing the type of an if condition (line 298)
    if_condition_566449 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 298, 9), result_eq_566448)
    # Assigning a type to the variable 'if_condition_566449' (line 298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 9), 'if_condition_566449', if_condition_566449)
    # SSA begins for if statement (line 298)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_566450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 16), 'int')
    
    # Obtaining the type of the subscript
    int_566451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 20), 'int')
    # Getting the type of 'S' (line 299)
    S_566452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 18), 'S')
    # Obtaining the member '__getitem__' of a type (line 299)
    getitem___566453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 18), S_566452, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 299)
    subscript_call_result_566454 = invoke(stypy.reporting.localization.Localization(__file__, 299, 18), getitem___566453, int_566451)
    
    int_566455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 24), 'int')
    # Applying the binary operator '**' (line 299)
    result_pow_566456 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 18), '**', subscript_call_result_566454, int_566455)
    
    # Applying the binary operator '*' (line 299)
    result_mul_566457 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 16), '*', int_566450, result_pow_566456)
    
    int_566458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 28), 'int')
    # Getting the type of 'N' (line 299)
    N_566459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 30), 'N')
    # Applying the binary operator '*' (line 299)
    result_mul_566460 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 28), '*', int_566458, N_566459)
    
    
    # Obtaining the type of the subscript
    int_566461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 34), 'int')
    # Getting the type of 'S' (line 299)
    S_566462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 32), 'S')
    # Obtaining the member '__getitem__' of a type (line 299)
    getitem___566463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 32), S_566462, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 299)
    subscript_call_result_566464 = invoke(stypy.reporting.localization.Localization(__file__, 299, 32), getitem___566463, int_566461)
    
    # Applying the binary operator '*' (line 299)
    result_mul_566465 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 31), '*', result_mul_566460, subscript_call_result_566464)
    
    
    # Obtaining the type of the subscript
    int_566466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 39), 'int')
    # Getting the type of 'S' (line 299)
    S_566467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 37), 'S')
    # Obtaining the member '__getitem__' of a type (line 299)
    getitem___566468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 37), S_566467, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 299)
    subscript_call_result_566469 = invoke(stypy.reporting.localization.Localization(__file__, 299, 37), getitem___566468, int_566466)
    
    # Applying the binary operator '*' (line 299)
    result_mul_566470 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 36), '*', result_mul_566465, subscript_call_result_566469)
    
    # Applying the binary operator '-' (line 299)
    result_sub_566471 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 16), '-', result_mul_566457, result_mul_566470)
    
    # Getting the type of 'N' (line 299)
    N_566472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 44), 'N')
    # Getting the type of 'N' (line 299)
    N_566473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 46), 'N')
    # Applying the binary operator '*' (line 299)
    result_mul_566474 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 44), '*', N_566472, N_566473)
    
    
    # Obtaining the type of the subscript
    int_566475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 50), 'int')
    # Getting the type of 'S' (line 299)
    S_566476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 48), 'S')
    # Obtaining the member '__getitem__' of a type (line 299)
    getitem___566477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 48), S_566476, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 299)
    subscript_call_result_566478 = invoke(stypy.reporting.localization.Localization(__file__, 299, 48), getitem___566477, int_566475)
    
    # Applying the binary operator '*' (line 299)
    result_mul_566479 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 47), '*', result_mul_566474, subscript_call_result_566478)
    
    # Applying the binary operator '+' (line 299)
    result_add_566480 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 42), '+', result_sub_566471, result_mul_566479)
    
    # Getting the type of 'N' (line 299)
    N_566481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 57), 'N')
    # Getting the type of 'N' (line 299)
    N_566482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 60), 'N')
    float_566483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 64), 'float')
    # Applying the binary operator '-' (line 299)
    result_sub_566484 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 60), '-', N_566482, float_566483)
    
    # Applying the binary operator '*' (line 299)
    result_mul_566485 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 57), '*', N_566481, result_sub_566484)
    
    # Getting the type of 'N' (line 299)
    N_566486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 70), 'N')
    float_566487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 74), 'float')
    # Applying the binary operator '-' (line 299)
    result_sub_566488 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 70), '-', N_566486, float_566487)
    
    # Applying the binary operator '*' (line 299)
    result_mul_566489 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 68), '*', result_mul_566485, result_sub_566488)
    
    # Applying the binary operator 'div' (line 299)
    result_div_566490 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 15), 'div', result_add_566480, result_mul_566489)
    
    # Assigning a type to the variable 'stypy_return_type' (line 299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 8), 'stypy_return_type', result_div_566490)
    # SSA branch for the else part of an if statement (line 298)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'n' (line 300)
    n_566491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 9), 'n')
    int_566492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 300, 14), 'int')
    # Applying the binary operator '==' (line 300)
    result_eq_566493 = python_operator(stypy.reporting.localization.Localization(__file__, 300, 9), '==', n_566491, int_566492)
    
    # Testing the type of an if condition (line 300)
    if_condition_566494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 300, 9), result_eq_566493)
    # Assigning a type to the variable 'if_condition_566494' (line 300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 9), 'if_condition_566494', if_condition_566494)
    # SSA begins for if statement (line 300)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_566495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 17), 'int')
    
    # Obtaining the type of the subscript
    int_566496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 22), 'int')
    # Getting the type of 'S' (line 301)
    S_566497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 20), 'S')
    # Obtaining the member '__getitem__' of a type (line 301)
    getitem___566498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 20), S_566497, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 301)
    subscript_call_result_566499 = invoke(stypy.reporting.localization.Localization(__file__, 301, 20), getitem___566498, int_566496)
    
    int_566500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 26), 'int')
    # Applying the binary operator '**' (line 301)
    result_pow_566501 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 20), '**', subscript_call_result_566499, int_566500)
    
    # Applying the binary operator '*' (line 301)
    result_mul_566502 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 17), '*', int_566495, result_pow_566501)
    
    int_566503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 30), 'int')
    # Getting the type of 'N' (line 301)
    N_566504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 33), 'N')
    # Applying the binary operator '*' (line 301)
    result_mul_566505 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 30), '*', int_566503, N_566504)
    
    
    # Obtaining the type of the subscript
    int_566506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 37), 'int')
    # Getting the type of 'S' (line 301)
    S_566507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 35), 'S')
    # Obtaining the member '__getitem__' of a type (line 301)
    getitem___566508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 35), S_566507, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 301)
    subscript_call_result_566509 = invoke(stypy.reporting.localization.Localization(__file__, 301, 35), getitem___566508, int_566506)
    
    int_566510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 41), 'int')
    # Applying the binary operator '**' (line 301)
    result_pow_566511 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 35), '**', subscript_call_result_566509, int_566510)
    
    # Applying the binary operator '*' (line 301)
    result_mul_566512 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 34), '*', result_mul_566505, result_pow_566511)
    
    
    # Obtaining the type of the subscript
    int_566513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 47), 'int')
    # Getting the type of 'S' (line 301)
    S_566514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 45), 'S')
    # Obtaining the member '__getitem__' of a type (line 301)
    getitem___566515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 45), S_566514, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 301)
    subscript_call_result_566516 = invoke(stypy.reporting.localization.Localization(__file__, 301, 45), getitem___566515, int_566513)
    
    # Applying the binary operator '*' (line 301)
    result_mul_566517 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 43), '*', result_mul_566512, subscript_call_result_566516)
    
    # Applying the binary operator '+' (line 301)
    result_add_566518 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 17), '+', result_mul_566502, result_mul_566517)
    
    int_566519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 52), 'int')
    # Getting the type of 'N' (line 301)
    N_566520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 54), 'N')
    # Applying the binary operator '*' (line 301)
    result_mul_566521 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 52), '*', int_566519, N_566520)
    
    # Getting the type of 'N' (line 301)
    N_566522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 57), 'N')
    float_566523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 59), 'float')
    # Applying the binary operator '-' (line 301)
    result_sub_566524 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 57), '-', N_566522, float_566523)
    
    # Applying the binary operator '*' (line 301)
    result_mul_566525 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 55), '*', result_mul_566521, result_sub_566524)
    
    
    # Obtaining the type of the subscript
    int_566526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 66), 'int')
    # Getting the type of 'S' (line 301)
    S_566527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 64), 'S')
    # Obtaining the member '__getitem__' of a type (line 301)
    getitem___566528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 64), S_566527, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 301)
    subscript_call_result_566529 = invoke(stypy.reporting.localization.Localization(__file__, 301, 64), getitem___566528, int_566526)
    
    int_566530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 70), 'int')
    # Applying the binary operator '**' (line 301)
    result_pow_566531 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 64), '**', subscript_call_result_566529, int_566530)
    
    # Applying the binary operator '*' (line 301)
    result_mul_566532 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 63), '*', result_mul_566525, result_pow_566531)
    
    # Applying the binary operator '-' (line 301)
    result_sub_566533 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 50), '-', result_add_566518, result_mul_566532)
    
    int_566534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 17), 'int')
    # Getting the type of 'N' (line 302)
    N_566535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 19), 'N')
    # Applying the binary operator '*' (line 302)
    result_mul_566536 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 17), '*', int_566534, N_566535)
    
    # Getting the type of 'N' (line 302)
    N_566537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 22), 'N')
    int_566538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 24), 'int')
    # Applying the binary operator '+' (line 302)
    result_add_566539 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 22), '+', N_566537, int_566538)
    
    # Applying the binary operator '*' (line 302)
    result_mul_566540 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 20), '*', result_mul_566536, result_add_566539)
    
    
    # Obtaining the type of the subscript
    int_566541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 29), 'int')
    # Getting the type of 'S' (line 302)
    S_566542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 27), 'S')
    # Obtaining the member '__getitem__' of a type (line 302)
    getitem___566543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 27), S_566542, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 302)
    subscript_call_result_566544 = invoke(stypy.reporting.localization.Localization(__file__, 302, 27), getitem___566543, int_566541)
    
    # Applying the binary operator '*' (line 302)
    result_mul_566545 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 26), '*', result_mul_566540, subscript_call_result_566544)
    
    
    # Obtaining the type of the subscript
    int_566546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 34), 'int')
    # Getting the type of 'S' (line 302)
    S_566547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 32), 'S')
    # Obtaining the member '__getitem__' of a type (line 302)
    getitem___566548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 32), S_566547, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 302)
    subscript_call_result_566549 = invoke(stypy.reporting.localization.Localization(__file__, 302, 32), getitem___566548, int_566546)
    
    # Applying the binary operator '*' (line 302)
    result_mul_566550 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 31), '*', result_mul_566545, subscript_call_result_566549)
    
    # Applying the binary operator '-' (line 301)
    result_sub_566551 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 72), '-', result_sub_566533, result_mul_566550)
    
    # Getting the type of 'N' (line 302)
    N_566552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 39), 'N')
    # Getting the type of 'N' (line 302)
    N_566553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 41), 'N')
    # Applying the binary operator '*' (line 302)
    result_mul_566554 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 39), '*', N_566552, N_566553)
    
    # Getting the type of 'N' (line 302)
    N_566555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 44), 'N')
    int_566556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 46), 'int')
    # Applying the binary operator '+' (line 302)
    result_add_566557 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 44), '+', N_566555, int_566556)
    
    # Applying the binary operator '*' (line 302)
    result_mul_566558 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 42), '*', result_mul_566554, result_add_566557)
    
    
    # Obtaining the type of the subscript
    int_566559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 51), 'int')
    # Getting the type of 'S' (line 302)
    S_566560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 49), 'S')
    # Obtaining the member '__getitem__' of a type (line 302)
    getitem___566561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 49), S_566560, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 302)
    subscript_call_result_566562 = invoke(stypy.reporting.localization.Localization(__file__, 302, 49), getitem___566561, int_566559)
    
    # Applying the binary operator '*' (line 302)
    result_mul_566563 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 48), '*', result_mul_566558, subscript_call_result_566562)
    
    # Applying the binary operator '+' (line 302)
    result_add_566564 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 37), '+', result_sub_566551, result_mul_566563)
    
    # Getting the type of 'N' (line 303)
    N_566565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 18), 'N')
    # Getting the type of 'N' (line 303)
    N_566566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 21), 'N')
    float_566567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 303, 23), 'float')
    # Applying the binary operator '-' (line 303)
    result_sub_566568 = python_operator(stypy.reporting.localization.Localization(__file__, 303, 21), '-', N_566566, float_566567)
    
    # Applying the binary operator '*' (line 303)
    result_mul_566569 = python_operator(stypy.reporting.localization.Localization(__file__, 303, 18), '*', N_566565, result_sub_566568)
    
    # Getting the type of 'N' (line 303)
    N_566570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 29), 'N')
    float_566571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 303, 31), 'float')
    # Applying the binary operator '-' (line 303)
    result_sub_566572 = python_operator(stypy.reporting.localization.Localization(__file__, 303, 29), '-', N_566570, float_566571)
    
    # Applying the binary operator '*' (line 303)
    result_mul_566573 = python_operator(stypy.reporting.localization.Localization(__file__, 303, 27), '*', result_mul_566569, result_sub_566572)
    
    # Getting the type of 'N' (line 303)
    N_566574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 37), 'N')
    float_566575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 303, 39), 'float')
    # Applying the binary operator '-' (line 303)
    result_sub_566576 = python_operator(stypy.reporting.localization.Localization(__file__, 303, 37), '-', N_566574, float_566575)
    
    # Applying the binary operator '*' (line 303)
    result_mul_566577 = python_operator(stypy.reporting.localization.Localization(__file__, 303, 35), '*', result_mul_566573, result_sub_566576)
    
    # Applying the binary operator 'div' (line 301)
    result_div_566578 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 16), 'div', result_add_566564, result_mul_566577)
    
    # Assigning a type to the variable 'stypy_return_type' (line 301)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 8), 'stypy_return_type', result_div_566578)
    # SSA branch for the else part of an if statement (line 300)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 305)
    # Processing the call arguments (line 305)
    str_566580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 305, 25), 'str', 'Should not be here.')
    # Processing the call keyword arguments (line 305)
    kwargs_566581 = {}
    # Getting the type of 'ValueError' (line 305)
    ValueError_566579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 305)
    ValueError_call_result_566582 = invoke(stypy.reporting.localization.Localization(__file__, 305, 14), ValueError_566579, *[str_566580], **kwargs_566581)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 305, 8), ValueError_call_result_566582, 'raise parameter', BaseException)
    # SSA join for if statement (line 300)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 298)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 296)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 294)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'kstat(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kstat' in the type store
    # Getting the type of 'stypy_return_type' (line 213)
    stypy_return_type_566583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_566583)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kstat'
    return stypy_return_type_566583

# Assigning a type to the variable 'kstat' (line 213)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 0), 'kstat', kstat)

@norecursion
def kstatvar(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_566584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 21), 'int')
    defaults = [int_566584]
    # Create a new context for function 'kstatvar'
    module_type_store = module_type_store.open_function_context('kstatvar', 308, 0, False)
    
    # Passed parameters checking function
    kstatvar.stypy_localization = localization
    kstatvar.stypy_type_of_self = None
    kstatvar.stypy_type_store = module_type_store
    kstatvar.stypy_function_name = 'kstatvar'
    kstatvar.stypy_param_names_list = ['data', 'n']
    kstatvar.stypy_varargs_param_name = None
    kstatvar.stypy_kwargs_param_name = None
    kstatvar.stypy_call_defaults = defaults
    kstatvar.stypy_call_varargs = varargs
    kstatvar.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kstatvar', ['data', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kstatvar', localization, ['data', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kstatvar(...)' code ##################

    str_566585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, (-1)), 'str', '\n    Returns an unbiased estimator of the variance of the k-statistic.\n\n    See `kstat` for more details of the k-statistic.\n\n    Parameters\n    ----------\n    data : array_like\n        Input array. Note that n-D input gets flattened.\n    n : int, {1, 2}, optional\n        Default is equal to 2.\n\n    Returns\n    -------\n    kstatvar : float\n        The nth k-statistic variance.\n\n    See Also\n    --------\n    kstat: Returns the n-th k-statistic.\n    moment: Returns the n-th central moment about the mean for a sample.\n\n    Notes\n    -----\n    The variances of the first few k-statistics are given by:\n\n    .. math::\n\n        var(k_{1}) = \\frac{\\kappa^2}{n}\n        var(k_{2}) = \\frac{\\kappa^4}{n} + \\frac{2\\kappa^2_{2}}{n - 1}\n        var(k_{3}) = \\frac{\\kappa^6}{n} + \\frac{9 \\kappa_2 \\kappa_4}{n - 1} +\n                     \\frac{9 \\kappa^2_{3}}{n - 1} +\n                     \\frac{6 n \\kappa^3_{2}}{(n-1) (n-2)}\n        var(k_{4}) = \\frac{\\kappa^8}{n} + \\frac{16 \\kappa_2 \\kappa_6}{n - 1} +\n                     \\frac{48 \\kappa_{3} \\kappa_5}{n - 1} +\n                     \\frac{34 \\kappa^2_{4}}{n-1} + \\frac{72 n \\kappa^2_{2} \\kappa_4}{(n - 1) (n - 2)} +\n                     \\frac{144 n \\kappa_{2} \\kappa^2_{3}}{(n - 1) (n - 2)} +\n                     \\frac{24 (n + 1) n \\kappa^4_{2}}{(n - 1) (n - 2) (n - 3)}\n    ')
    
    # Assigning a Call to a Name (line 348):
    
    # Assigning a Call to a Name (line 348):
    
    # Call to ravel(...): (line 348)
    # Processing the call arguments (line 348)
    # Getting the type of 'data' (line 348)
    data_566587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 17), 'data', False)
    # Processing the call keyword arguments (line 348)
    kwargs_566588 = {}
    # Getting the type of 'ravel' (line 348)
    ravel_566586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 11), 'ravel', False)
    # Calling ravel(args, kwargs) (line 348)
    ravel_call_result_566589 = invoke(stypy.reporting.localization.Localization(__file__, 348, 11), ravel_566586, *[data_566587], **kwargs_566588)
    
    # Assigning a type to the variable 'data' (line 348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 4), 'data', ravel_call_result_566589)
    
    # Assigning a Call to a Name (line 349):
    
    # Assigning a Call to a Name (line 349):
    
    # Call to len(...): (line 349)
    # Processing the call arguments (line 349)
    # Getting the type of 'data' (line 349)
    data_566591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 12), 'data', False)
    # Processing the call keyword arguments (line 349)
    kwargs_566592 = {}
    # Getting the type of 'len' (line 349)
    len_566590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'len', False)
    # Calling len(args, kwargs) (line 349)
    len_call_result_566593 = invoke(stypy.reporting.localization.Localization(__file__, 349, 8), len_566590, *[data_566591], **kwargs_566592)
    
    # Assigning a type to the variable 'N' (line 349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 4), 'N', len_call_result_566593)
    
    
    # Getting the type of 'n' (line 350)
    n_566594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 7), 'n')
    int_566595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 12), 'int')
    # Applying the binary operator '==' (line 350)
    result_eq_566596 = python_operator(stypy.reporting.localization.Localization(__file__, 350, 7), '==', n_566594, int_566595)
    
    # Testing the type of an if condition (line 350)
    if_condition_566597 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 350, 4), result_eq_566596)
    # Assigning a type to the variable 'if_condition_566597' (line 350)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 4), 'if_condition_566597', if_condition_566597)
    # SSA begins for if statement (line 350)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to kstat(...): (line 351)
    # Processing the call arguments (line 351)
    # Getting the type of 'data' (line 351)
    data_566599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 21), 'data', False)
    # Processing the call keyword arguments (line 351)
    int_566600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 29), 'int')
    keyword_566601 = int_566600
    kwargs_566602 = {'n': keyword_566601}
    # Getting the type of 'kstat' (line 351)
    kstat_566598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 15), 'kstat', False)
    # Calling kstat(args, kwargs) (line 351)
    kstat_call_result_566603 = invoke(stypy.reporting.localization.Localization(__file__, 351, 15), kstat_566598, *[data_566599], **kwargs_566602)
    
    float_566604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 34), 'float')
    # Applying the binary operator '*' (line 351)
    result_mul_566605 = python_operator(stypy.reporting.localization.Localization(__file__, 351, 15), '*', kstat_call_result_566603, float_566604)
    
    # Getting the type of 'N' (line 351)
    N_566606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 38), 'N')
    # Applying the binary operator 'div' (line 351)
    result_div_566607 = python_operator(stypy.reporting.localization.Localization(__file__, 351, 37), 'div', result_mul_566605, N_566606)
    
    # Assigning a type to the variable 'stypy_return_type' (line 351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 8), 'stypy_return_type', result_div_566607)
    # SSA branch for the else part of an if statement (line 350)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'n' (line 352)
    n_566608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 9), 'n')
    int_566609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 14), 'int')
    # Applying the binary operator '==' (line 352)
    result_eq_566610 = python_operator(stypy.reporting.localization.Localization(__file__, 352, 9), '==', n_566608, int_566609)
    
    # Testing the type of an if condition (line 352)
    if_condition_566611 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 352, 9), result_eq_566610)
    # Assigning a type to the variable 'if_condition_566611' (line 352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 9), 'if_condition_566611', if_condition_566611)
    # SSA begins for if statement (line 352)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 353):
    
    # Assigning a Call to a Name (line 353):
    
    # Call to kstat(...): (line 353)
    # Processing the call arguments (line 353)
    # Getting the type of 'data' (line 353)
    data_566613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 19), 'data', False)
    # Processing the call keyword arguments (line 353)
    int_566614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, 27), 'int')
    keyword_566615 = int_566614
    kwargs_566616 = {'n': keyword_566615}
    # Getting the type of 'kstat' (line 353)
    kstat_566612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 13), 'kstat', False)
    # Calling kstat(args, kwargs) (line 353)
    kstat_call_result_566617 = invoke(stypy.reporting.localization.Localization(__file__, 353, 13), kstat_566612, *[data_566613], **kwargs_566616)
    
    # Assigning a type to the variable 'k2' (line 353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 8), 'k2', kstat_call_result_566617)
    
    # Assigning a Call to a Name (line 354):
    
    # Assigning a Call to a Name (line 354):
    
    # Call to kstat(...): (line 354)
    # Processing the call arguments (line 354)
    # Getting the type of 'data' (line 354)
    data_566619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 19), 'data', False)
    # Processing the call keyword arguments (line 354)
    int_566620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 27), 'int')
    keyword_566621 = int_566620
    kwargs_566622 = {'n': keyword_566621}
    # Getting the type of 'kstat' (line 354)
    kstat_566618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 13), 'kstat', False)
    # Calling kstat(args, kwargs) (line 354)
    kstat_call_result_566623 = invoke(stypy.reporting.localization.Localization(__file__, 354, 13), kstat_566618, *[data_566619], **kwargs_566622)
    
    # Assigning a type to the variable 'k4' (line 354)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'k4', kstat_call_result_566623)
    int_566624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 16), 'int')
    # Getting the type of 'N' (line 355)
    N_566625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 18), 'N')
    # Applying the binary operator '*' (line 355)
    result_mul_566626 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 16), '*', int_566624, N_566625)
    
    # Getting the type of 'k2' (line 355)
    k2_566627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 20), 'k2')
    int_566628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 24), 'int')
    # Applying the binary operator '**' (line 355)
    result_pow_566629 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 20), '**', k2_566627, int_566628)
    
    # Applying the binary operator '*' (line 355)
    result_mul_566630 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 19), '*', result_mul_566626, result_pow_566629)
    
    # Getting the type of 'N' (line 355)
    N_566631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 29), 'N')
    int_566632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 31), 'int')
    # Applying the binary operator '-' (line 355)
    result_sub_566633 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 29), '-', N_566631, int_566632)
    
    # Getting the type of 'k4' (line 355)
    k4_566634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 34), 'k4')
    # Applying the binary operator '*' (line 355)
    result_mul_566635 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 28), '*', result_sub_566633, k4_566634)
    
    # Applying the binary operator '+' (line 355)
    result_add_566636 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 16), '+', result_mul_566630, result_mul_566635)
    
    # Getting the type of 'N' (line 355)
    N_566637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 41), 'N')
    # Getting the type of 'N' (line 355)
    N_566638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 44), 'N')
    int_566639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 46), 'int')
    # Applying the binary operator '+' (line 355)
    result_add_566640 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 44), '+', N_566638, int_566639)
    
    # Applying the binary operator '*' (line 355)
    result_mul_566641 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 41), '*', N_566637, result_add_566640)
    
    # Applying the binary operator 'div' (line 355)
    result_div_566642 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 15), 'div', result_add_566636, result_mul_566641)
    
    # Assigning a type to the variable 'stypy_return_type' (line 355)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'stypy_return_type', result_div_566642)
    # SSA branch for the else part of an if statement (line 352)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 357)
    # Processing the call arguments (line 357)
    str_566644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, 25), 'str', 'Only n=1 or n=2 supported.')
    # Processing the call keyword arguments (line 357)
    kwargs_566645 = {}
    # Getting the type of 'ValueError' (line 357)
    ValueError_566643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 357)
    ValueError_call_result_566646 = invoke(stypy.reporting.localization.Localization(__file__, 357, 14), ValueError_566643, *[str_566644], **kwargs_566645)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 357, 8), ValueError_call_result_566646, 'raise parameter', BaseException)
    # SSA join for if statement (line 352)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 350)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'kstatvar(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kstatvar' in the type store
    # Getting the type of 'stypy_return_type' (line 308)
    stypy_return_type_566647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_566647)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kstatvar'
    return stypy_return_type_566647

# Assigning a type to the variable 'kstatvar' (line 308)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 0), 'kstatvar', kstatvar)

@norecursion
def _calc_uniform_order_statistic_medians(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_calc_uniform_order_statistic_medians'
    module_type_store = module_type_store.open_function_context('_calc_uniform_order_statistic_medians', 360, 0, False)
    
    # Passed parameters checking function
    _calc_uniform_order_statistic_medians.stypy_localization = localization
    _calc_uniform_order_statistic_medians.stypy_type_of_self = None
    _calc_uniform_order_statistic_medians.stypy_type_store = module_type_store
    _calc_uniform_order_statistic_medians.stypy_function_name = '_calc_uniform_order_statistic_medians'
    _calc_uniform_order_statistic_medians.stypy_param_names_list = ['n']
    _calc_uniform_order_statistic_medians.stypy_varargs_param_name = None
    _calc_uniform_order_statistic_medians.stypy_kwargs_param_name = None
    _calc_uniform_order_statistic_medians.stypy_call_defaults = defaults
    _calc_uniform_order_statistic_medians.stypy_call_varargs = varargs
    _calc_uniform_order_statistic_medians.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_calc_uniform_order_statistic_medians', ['n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_calc_uniform_order_statistic_medians', localization, ['n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_calc_uniform_order_statistic_medians(...)' code ##################

    str_566648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, (-1)), 'str', '\n    Approximations of uniform order statistic medians.\n\n    Parameters\n    ----------\n    n : int\n        Sample size.\n\n    Returns\n    -------\n    v : 1d float array\n        Approximations of the order statistic medians.\n\n    References\n    ----------\n    .. [1] James J. Filliben, "The Probability Plot Correlation Coefficient\n           Test for Normality", Technometrics, Vol. 17, pp. 111-117, 1975.\n\n    Examples\n    --------\n    Order statistics of the uniform distribution on the unit interval\n    are marginally distributed according to beta distributions.\n    The expectations of these order statistic are evenly spaced across\n    the interval, but the distributions are skewed in a way that\n    pushes the medians slightly towards the endpoints of the unit interval:\n\n    >>> n = 4\n    >>> k = np.arange(1, n+1)\n    >>> from scipy.stats import beta\n    >>> a = k\n    >>> b = n-k+1\n    >>> beta.mean(a, b)\n    array([ 0.2,  0.4,  0.6,  0.8])\n    >>> beta.median(a, b)\n    array([ 0.15910358,  0.38572757,  0.61427243,  0.84089642])\n\n    The Filliben approximation uses the exact medians of the smallest\n    and greatest order statistics, and the remaining medians are approximated\n    by points spread evenly across a sub-interval of the unit interval:\n\n    >>> from scipy.morestats import _calc_uniform_order_statistic_medians\n    >>> _calc_uniform_order_statistic_medians(n)\n    array([ 0.15910358,  0.38545246,  0.61454754,  0.84089642])\n\n    This plot shows the skewed distributions of the order statistics\n    of a sample of size four from a uniform distribution on the unit interval:\n\n    >>> import matplotlib.pyplot as plt\n    >>> x = np.linspace(0.0, 1.0, num=50, endpoint=True)\n    >>> pdfs = [beta.pdf(x, a[i], b[i]) for i in range(n)]\n    >>> plt.figure()\n    >>> plt.plot(x, pdfs[0], x, pdfs[1], x, pdfs[2], x, pdfs[3])\n\n    ')
    
    # Assigning a Call to a Name (line 415):
    
    # Assigning a Call to a Name (line 415):
    
    # Call to zeros(...): (line 415)
    # Processing the call arguments (line 415)
    # Getting the type of 'n' (line 415)
    n_566651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 17), 'n', False)
    # Processing the call keyword arguments (line 415)
    # Getting the type of 'np' (line 415)
    np_566652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 26), 'np', False)
    # Obtaining the member 'float64' of a type (line 415)
    float64_566653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 415, 26), np_566652, 'float64')
    keyword_566654 = float64_566653
    kwargs_566655 = {'dtype': keyword_566654}
    # Getting the type of 'np' (line 415)
    np_566649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 8), 'np', False)
    # Obtaining the member 'zeros' of a type (line 415)
    zeros_566650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 415, 8), np_566649, 'zeros')
    # Calling zeros(args, kwargs) (line 415)
    zeros_call_result_566656 = invoke(stypy.reporting.localization.Localization(__file__, 415, 8), zeros_566650, *[n_566651], **kwargs_566655)
    
    # Assigning a type to the variable 'v' (line 415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 4), 'v', zeros_call_result_566656)
    
    # Assigning a BinOp to a Subscript (line 416):
    
    # Assigning a BinOp to a Subscript (line 416):
    float_566657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 12), 'float')
    float_566658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 18), 'float')
    # Getting the type of 'n' (line 416)
    n_566659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 24), 'n')
    # Applying the binary operator 'div' (line 416)
    result_div_566660 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 18), 'div', float_566658, n_566659)
    
    # Applying the binary operator '**' (line 416)
    result_pow_566661 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 12), '**', float_566657, result_div_566660)
    
    # Getting the type of 'v' (line 416)
    v_566662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 4), 'v')
    int_566663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 6), 'int')
    # Storing an element on a container (line 416)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 416, 4), v_566662, (int_566663, result_pow_566661))
    
    # Assigning a BinOp to a Subscript (line 417):
    
    # Assigning a BinOp to a Subscript (line 417):
    int_566664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 11), 'int')
    
    # Obtaining the type of the subscript
    int_566665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 17), 'int')
    # Getting the type of 'v' (line 417)
    v_566666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 15), 'v')
    # Obtaining the member '__getitem__' of a type (line 417)
    getitem___566667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 15), v_566666, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 417)
    subscript_call_result_566668 = invoke(stypy.reporting.localization.Localization(__file__, 417, 15), getitem___566667, int_566665)
    
    # Applying the binary operator '-' (line 417)
    result_sub_566669 = python_operator(stypy.reporting.localization.Localization(__file__, 417, 11), '-', int_566664, subscript_call_result_566668)
    
    # Getting the type of 'v' (line 417)
    v_566670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 4), 'v')
    int_566671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 6), 'int')
    # Storing an element on a container (line 417)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 417, 4), v_566670, (int_566671, result_sub_566669))
    
    # Assigning a Call to a Name (line 418):
    
    # Assigning a Call to a Name (line 418):
    
    # Call to arange(...): (line 418)
    # Processing the call arguments (line 418)
    int_566674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 18), 'int')
    # Getting the type of 'n' (line 418)
    n_566675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 21), 'n', False)
    # Processing the call keyword arguments (line 418)
    kwargs_566676 = {}
    # Getting the type of 'np' (line 418)
    np_566672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'np', False)
    # Obtaining the member 'arange' of a type (line 418)
    arange_566673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 8), np_566672, 'arange')
    # Calling arange(args, kwargs) (line 418)
    arange_call_result_566677 = invoke(stypy.reporting.localization.Localization(__file__, 418, 8), arange_566673, *[int_566674, n_566675], **kwargs_566676)
    
    # Assigning a type to the variable 'i' (line 418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 4), 'i', arange_call_result_566677)
    
    # Assigning a BinOp to a Subscript (line 419):
    
    # Assigning a BinOp to a Subscript (line 419):
    # Getting the type of 'i' (line 419)
    i_566678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 15), 'i')
    float_566679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 19), 'float')
    # Applying the binary operator '-' (line 419)
    result_sub_566680 = python_operator(stypy.reporting.localization.Localization(__file__, 419, 15), '-', i_566678, float_566679)
    
    # Getting the type of 'n' (line 419)
    n_566681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 30), 'n')
    float_566682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 34), 'float')
    # Applying the binary operator '+' (line 419)
    result_add_566683 = python_operator(stypy.reporting.localization.Localization(__file__, 419, 30), '+', n_566681, float_566682)
    
    # Applying the binary operator 'div' (line 419)
    result_div_566684 = python_operator(stypy.reporting.localization.Localization(__file__, 419, 14), 'div', result_sub_566680, result_add_566683)
    
    # Getting the type of 'v' (line 419)
    v_566685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 4), 'v')
    int_566686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 6), 'int')
    int_566687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 8), 'int')
    slice_566688 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 419, 4), int_566686, int_566687, None)
    # Storing an element on a container (line 419)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 4), v_566685, (slice_566688, result_div_566684))
    # Getting the type of 'v' (line 420)
    v_566689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 11), 'v')
    # Assigning a type to the variable 'stypy_return_type' (line 420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 4), 'stypy_return_type', v_566689)
    
    # ################# End of '_calc_uniform_order_statistic_medians(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_calc_uniform_order_statistic_medians' in the type store
    # Getting the type of 'stypy_return_type' (line 360)
    stypy_return_type_566690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_566690)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_calc_uniform_order_statistic_medians'
    return stypy_return_type_566690

# Assigning a type to the variable '_calc_uniform_order_statistic_medians' (line 360)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 0), '_calc_uniform_order_statistic_medians', _calc_uniform_order_statistic_medians)

@norecursion
def _parse_dist_kw(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 423)
    True_566691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 42), 'True')
    defaults = [True_566691]
    # Create a new context for function '_parse_dist_kw'
    module_type_store = module_type_store.open_function_context('_parse_dist_kw', 423, 0, False)
    
    # Passed parameters checking function
    _parse_dist_kw.stypy_localization = localization
    _parse_dist_kw.stypy_type_of_self = None
    _parse_dist_kw.stypy_type_store = module_type_store
    _parse_dist_kw.stypy_function_name = '_parse_dist_kw'
    _parse_dist_kw.stypy_param_names_list = ['dist', 'enforce_subclass']
    _parse_dist_kw.stypy_varargs_param_name = None
    _parse_dist_kw.stypy_kwargs_param_name = None
    _parse_dist_kw.stypy_call_defaults = defaults
    _parse_dist_kw.stypy_call_varargs = varargs
    _parse_dist_kw.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_parse_dist_kw', ['dist', 'enforce_subclass'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_parse_dist_kw', localization, ['dist', 'enforce_subclass'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_parse_dist_kw(...)' code ##################

    str_566692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, (-1)), 'str', 'Parse `dist` keyword.\n\n    Parameters\n    ----------\n    dist : str or stats.distributions instance.\n        Several functions take `dist` as a keyword, hence this utility\n        function.\n    enforce_subclass : bool, optional\n        If True (default), `dist` needs to be a\n        `_distn_infrastructure.rv_generic` instance.\n        It can sometimes be useful to set this keyword to False, if a function\n        wants to accept objects that just look somewhat like such an instance\n        (for example, they have a ``ppf`` method).\n\n    ')
    
    
    # Call to isinstance(...): (line 439)
    # Processing the call arguments (line 439)
    # Getting the type of 'dist' (line 439)
    dist_566694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 18), 'dist', False)
    # Getting the type of 'rv_generic' (line 439)
    rv_generic_566695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 24), 'rv_generic', False)
    # Processing the call keyword arguments (line 439)
    kwargs_566696 = {}
    # Getting the type of 'isinstance' (line 439)
    isinstance_566693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 439)
    isinstance_call_result_566697 = invoke(stypy.reporting.localization.Localization(__file__, 439, 7), isinstance_566693, *[dist_566694, rv_generic_566695], **kwargs_566696)
    
    # Testing the type of an if condition (line 439)
    if_condition_566698 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 439, 4), isinstance_call_result_566697)
    # Assigning a type to the variable 'if_condition_566698' (line 439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 4), 'if_condition_566698', if_condition_566698)
    # SSA begins for if statement (line 439)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    pass
    # SSA branch for the else part of an if statement (line 439)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 441)
    # Processing the call arguments (line 441)
    # Getting the type of 'dist' (line 441)
    dist_566700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 20), 'dist', False)
    # Getting the type of 'string_types' (line 441)
    string_types_566701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 26), 'string_types', False)
    # Processing the call keyword arguments (line 441)
    kwargs_566702 = {}
    # Getting the type of 'isinstance' (line 441)
    isinstance_566699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 441)
    isinstance_call_result_566703 = invoke(stypy.reporting.localization.Localization(__file__, 441, 9), isinstance_566699, *[dist_566700, string_types_566701], **kwargs_566702)
    
    # Testing the type of an if condition (line 441)
    if_condition_566704 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 441, 9), isinstance_call_result_566703)
    # Assigning a type to the variable 'if_condition_566704' (line 441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 9), 'if_condition_566704', if_condition_566704)
    # SSA begins for if statement (line 441)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 442)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 443):
    
    # Assigning a Call to a Name (line 443):
    
    # Call to getattr(...): (line 443)
    # Processing the call arguments (line 443)
    # Getting the type of 'distributions' (line 443)
    distributions_566706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 27), 'distributions', False)
    # Getting the type of 'dist' (line 443)
    dist_566707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 42), 'dist', False)
    # Processing the call keyword arguments (line 443)
    kwargs_566708 = {}
    # Getting the type of 'getattr' (line 443)
    getattr_566705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 19), 'getattr', False)
    # Calling getattr(args, kwargs) (line 443)
    getattr_call_result_566709 = invoke(stypy.reporting.localization.Localization(__file__, 443, 19), getattr_566705, *[distributions_566706, dist_566707], **kwargs_566708)
    
    # Assigning a type to the variable 'dist' (line 443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 12), 'dist', getattr_call_result_566709)
    # SSA branch for the except part of a try statement (line 442)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 442)
    module_type_store.open_ssa_branch('except')
    
    # Call to ValueError(...): (line 445)
    # Processing the call arguments (line 445)
    str_566711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 29), 'str', '%s is not a valid distribution name')
    # Getting the type of 'dist' (line 445)
    dist_566712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 69), 'dist', False)
    # Applying the binary operator '%' (line 445)
    result_mod_566713 = python_operator(stypy.reporting.localization.Localization(__file__, 445, 29), '%', str_566711, dist_566712)
    
    # Processing the call keyword arguments (line 445)
    kwargs_566714 = {}
    # Getting the type of 'ValueError' (line 445)
    ValueError_566710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 445)
    ValueError_call_result_566715 = invoke(stypy.reporting.localization.Localization(__file__, 445, 18), ValueError_566710, *[result_mod_566713], **kwargs_566714)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 445, 12), ValueError_call_result_566715, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 442)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 441)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'enforce_subclass' (line 446)
    enforce_subclass_566716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 9), 'enforce_subclass')
    # Testing the type of an if condition (line 446)
    if_condition_566717 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 446, 9), enforce_subclass_566716)
    # Assigning a type to the variable 'if_condition_566717' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 9), 'if_condition_566717', if_condition_566717)
    # SSA begins for if statement (line 446)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 447):
    
    # Assigning a Str to a Name (line 447):
    str_566718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 447, 15), 'str', '`dist` should be a stats.distributions instance or a string with the name of such a distribution.')
    # Assigning a type to the variable 'msg' (line 447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'msg', str_566718)
    
    # Call to ValueError(...): (line 449)
    # Processing the call arguments (line 449)
    # Getting the type of 'msg' (line 449)
    msg_566720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 25), 'msg', False)
    # Processing the call keyword arguments (line 449)
    kwargs_566721 = {}
    # Getting the type of 'ValueError' (line 449)
    ValueError_566719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 449)
    ValueError_call_result_566722 = invoke(stypy.reporting.localization.Localization(__file__, 449, 14), ValueError_566719, *[msg_566720], **kwargs_566721)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 449, 8), ValueError_call_result_566722, 'raise parameter', BaseException)
    # SSA join for if statement (line 446)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 441)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 439)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'dist' (line 451)
    dist_566723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 11), 'dist')
    # Assigning a type to the variable 'stypy_return_type' (line 451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 4), 'stypy_return_type', dist_566723)
    
    # ################# End of '_parse_dist_kw(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_parse_dist_kw' in the type store
    # Getting the type of 'stypy_return_type' (line 423)
    stypy_return_type_566724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_566724)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_parse_dist_kw'
    return stypy_return_type_566724

# Assigning a type to the variable '_parse_dist_kw' (line 423)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 0), '_parse_dist_kw', _parse_dist_kw)

@norecursion
def _add_axis_labels_title(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_add_axis_labels_title'
    module_type_store = module_type_store.open_function_context('_add_axis_labels_title', 454, 0, False)
    
    # Passed parameters checking function
    _add_axis_labels_title.stypy_localization = localization
    _add_axis_labels_title.stypy_type_of_self = None
    _add_axis_labels_title.stypy_type_store = module_type_store
    _add_axis_labels_title.stypy_function_name = '_add_axis_labels_title'
    _add_axis_labels_title.stypy_param_names_list = ['plot', 'xlabel', 'ylabel', 'title']
    _add_axis_labels_title.stypy_varargs_param_name = None
    _add_axis_labels_title.stypy_kwargs_param_name = None
    _add_axis_labels_title.stypy_call_defaults = defaults
    _add_axis_labels_title.stypy_call_varargs = varargs
    _add_axis_labels_title.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_add_axis_labels_title', ['plot', 'xlabel', 'ylabel', 'title'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_add_axis_labels_title', localization, ['plot', 'xlabel', 'ylabel', 'title'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_add_axis_labels_title(...)' code ##################

    str_566725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 4), 'str', 'Helper function to add axes labels and a title to stats plots')
    
    
    # SSA begins for try-except statement (line 456)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Type idiom detected: calculating its left and rigth part (line 457)
    str_566726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 25), 'str', 'set_title')
    # Getting the type of 'plot' (line 457)
    plot_566727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 19), 'plot')
    
    (may_be_566728, more_types_in_union_566729) = may_provide_member(str_566726, plot_566727)

    if may_be_566728:

        if more_types_in_union_566729:
            # Runtime conditional SSA (line 457)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'plot' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 8), 'plot', remove_not_member_provider_from_union(plot_566727, 'set_title'))
        
        # Call to set_title(...): (line 459)
        # Processing the call arguments (line 459)
        # Getting the type of 'title' (line 459)
        title_566732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 27), 'title', False)
        # Processing the call keyword arguments (line 459)
        kwargs_566733 = {}
        # Getting the type of 'plot' (line 459)
        plot_566730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 12), 'plot', False)
        # Obtaining the member 'set_title' of a type (line 459)
        set_title_566731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 12), plot_566730, 'set_title')
        # Calling set_title(args, kwargs) (line 459)
        set_title_call_result_566734 = invoke(stypy.reporting.localization.Localization(__file__, 459, 12), set_title_566731, *[title_566732], **kwargs_566733)
        
        
        # Call to set_xlabel(...): (line 460)
        # Processing the call arguments (line 460)
        # Getting the type of 'xlabel' (line 460)
        xlabel_566737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 28), 'xlabel', False)
        # Processing the call keyword arguments (line 460)
        kwargs_566738 = {}
        # Getting the type of 'plot' (line 460)
        plot_566735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 12), 'plot', False)
        # Obtaining the member 'set_xlabel' of a type (line 460)
        set_xlabel_566736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 12), plot_566735, 'set_xlabel')
        # Calling set_xlabel(args, kwargs) (line 460)
        set_xlabel_call_result_566739 = invoke(stypy.reporting.localization.Localization(__file__, 460, 12), set_xlabel_566736, *[xlabel_566737], **kwargs_566738)
        
        
        # Call to set_ylabel(...): (line 461)
        # Processing the call arguments (line 461)
        # Getting the type of 'ylabel' (line 461)
        ylabel_566742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 28), 'ylabel', False)
        # Processing the call keyword arguments (line 461)
        kwargs_566743 = {}
        # Getting the type of 'plot' (line 461)
        plot_566740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 12), 'plot', False)
        # Obtaining the member 'set_ylabel' of a type (line 461)
        set_ylabel_566741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 12), plot_566740, 'set_ylabel')
        # Calling set_ylabel(args, kwargs) (line 461)
        set_ylabel_call_result_566744 = invoke(stypy.reporting.localization.Localization(__file__, 461, 12), set_ylabel_566741, *[ylabel_566742], **kwargs_566743)
        

        if more_types_in_union_566729:
            # Runtime conditional SSA for else branch (line 457)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_566728) or more_types_in_union_566729):
        # Assigning a type to the variable 'plot' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 8), 'plot', remove_member_provider_from_union(plot_566727, 'set_title'))
        
        # Call to title(...): (line 464)
        # Processing the call arguments (line 464)
        # Getting the type of 'title' (line 464)
        title_566747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 23), 'title', False)
        # Processing the call keyword arguments (line 464)
        kwargs_566748 = {}
        # Getting the type of 'plot' (line 464)
        plot_566745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 12), 'plot', False)
        # Obtaining the member 'title' of a type (line 464)
        title_566746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 12), plot_566745, 'title')
        # Calling title(args, kwargs) (line 464)
        title_call_result_566749 = invoke(stypy.reporting.localization.Localization(__file__, 464, 12), title_566746, *[title_566747], **kwargs_566748)
        
        
        # Call to xlabel(...): (line 465)
        # Processing the call arguments (line 465)
        # Getting the type of 'xlabel' (line 465)
        xlabel_566752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 24), 'xlabel', False)
        # Processing the call keyword arguments (line 465)
        kwargs_566753 = {}
        # Getting the type of 'plot' (line 465)
        plot_566750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 12), 'plot', False)
        # Obtaining the member 'xlabel' of a type (line 465)
        xlabel_566751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 12), plot_566750, 'xlabel')
        # Calling xlabel(args, kwargs) (line 465)
        xlabel_call_result_566754 = invoke(stypy.reporting.localization.Localization(__file__, 465, 12), xlabel_566751, *[xlabel_566752], **kwargs_566753)
        
        
        # Call to ylabel(...): (line 466)
        # Processing the call arguments (line 466)
        # Getting the type of 'ylabel' (line 466)
        ylabel_566757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 24), 'ylabel', False)
        # Processing the call keyword arguments (line 466)
        kwargs_566758 = {}
        # Getting the type of 'plot' (line 466)
        plot_566755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'plot', False)
        # Obtaining the member 'ylabel' of a type (line 466)
        ylabel_566756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 12), plot_566755, 'ylabel')
        # Calling ylabel(args, kwargs) (line 466)
        ylabel_call_result_566759 = invoke(stypy.reporting.localization.Localization(__file__, 466, 12), ylabel_566756, *[ylabel_566757], **kwargs_566758)
        

        if (may_be_566728 and more_types_in_union_566729):
            # SSA join for if statement (line 457)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the except part of a try statement (line 456)
    # SSA branch for the except '<any exception>' branch of a try statement (line 456)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 456)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_add_axis_labels_title(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_add_axis_labels_title' in the type store
    # Getting the type of 'stypy_return_type' (line 454)
    stypy_return_type_566760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_566760)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_add_axis_labels_title'
    return stypy_return_type_566760

# Assigning a type to the variable '_add_axis_labels_title' (line 454)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 0), '_add_axis_labels_title', _add_axis_labels_title)

@norecursion
def probplot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 473)
    tuple_566761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 473)
    
    str_566762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 33), 'str', 'norm')
    # Getting the type of 'True' (line 473)
    True_566763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 45), 'True')
    # Getting the type of 'None' (line 473)
    None_566764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 56), 'None')
    # Getting the type of 'False' (line 473)
    False_566765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 69), 'False')
    defaults = [tuple_566761, str_566762, True_566763, None_566764, False_566765]
    # Create a new context for function 'probplot'
    module_type_store = module_type_store.open_function_context('probplot', 473, 0, False)
    
    # Passed parameters checking function
    probplot.stypy_localization = localization
    probplot.stypy_type_of_self = None
    probplot.stypy_type_store = module_type_store
    probplot.stypy_function_name = 'probplot'
    probplot.stypy_param_names_list = ['x', 'sparams', 'dist', 'fit', 'plot', 'rvalue']
    probplot.stypy_varargs_param_name = None
    probplot.stypy_kwargs_param_name = None
    probplot.stypy_call_defaults = defaults
    probplot.stypy_call_varargs = varargs
    probplot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'probplot', ['x', 'sparams', 'dist', 'fit', 'plot', 'rvalue'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'probplot', localization, ['x', 'sparams', 'dist', 'fit', 'plot', 'rvalue'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'probplot(...)' code ##################

    str_566766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 583, (-1)), 'str', '\n    Calculate quantiles for a probability plot, and optionally show the plot.\n\n    Generates a probability plot of sample data against the quantiles of a\n    specified theoretical distribution (the normal distribution by default).\n    `probplot` optionally calculates a best-fit line for the data and plots the\n    results using Matplotlib or a given plot function.\n\n    Parameters\n    ----------\n    x : array_like\n        Sample/response data from which `probplot` creates the plot.\n    sparams : tuple, optional\n        Distribution-specific shape parameters (shape parameters plus location\n        and scale).\n    dist : str or stats.distributions instance, optional\n        Distribution or distribution function name. The default is \'norm\' for a\n        normal probability plot.  Objects that look enough like a\n        stats.distributions instance (i.e. they have a ``ppf`` method) are also\n        accepted.\n    fit : bool, optional\n        Fit a least-squares regression (best-fit) line to the sample data if\n        True (default).\n    plot : object, optional\n        If given, plots the quantiles and least squares fit.\n        `plot` is an object that has to have methods "plot" and "text".\n        The `matplotlib.pyplot` module or a Matplotlib Axes object can be used,\n        or a custom object with the same methods.\n        Default is None, which means that no plot is created.\n\n    Returns\n    -------\n    (osm, osr) : tuple of ndarrays\n        Tuple of theoretical quantiles (osm, or order statistic medians) and\n        ordered responses (osr).  `osr` is simply sorted input `x`.\n        For details on how `osm` is calculated see the Notes section.\n    (slope, intercept, r) : tuple of floats, optional\n        Tuple  containing the result of the least-squares fit, if that is\n        performed by `probplot`. `r` is the square root of the coefficient of\n        determination.  If ``fit=False`` and ``plot=None``, this tuple is not\n        returned.\n\n    Notes\n    -----\n    Even if `plot` is given, the figure is not shown or saved by `probplot`;\n    ``plt.show()`` or ``plt.savefig(\'figname.png\')`` should be used after\n    calling `probplot`.\n\n    `probplot` generates a probability plot, which should not be confused with\n    a Q-Q or a P-P plot.  Statsmodels has more extensive functionality of this\n    type, see ``statsmodels.api.ProbPlot``.\n\n    The formula used for the theoretical quantiles (horizontal axis of the\n    probability plot) is Filliben\'s estimate::\n\n        quantiles = dist.ppf(val), for\n\n                0.5**(1/n),                  for i = n\n          val = (i - 0.3175) / (n + 0.365),  for i = 2, ..., n-1\n                1 - 0.5**(1/n),              for i = 1\n\n    where ``i`` indicates the i-th ordered value and ``n`` is the total number\n    of values.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> import matplotlib.pyplot as plt\n    >>> nsample = 100\n    >>> np.random.seed(7654321)\n\n    A t distribution with small degrees of freedom:\n\n    >>> ax1 = plt.subplot(221)\n    >>> x = stats.t.rvs(3, size=nsample)\n    >>> res = stats.probplot(x, plot=plt)\n\n    A t distribution with larger degrees of freedom:\n\n    >>> ax2 = plt.subplot(222)\n    >>> x = stats.t.rvs(25, size=nsample)\n    >>> res = stats.probplot(x, plot=plt)\n\n    A mixture of two normal distributions with broadcasting:\n\n    >>> ax3 = plt.subplot(223)\n    >>> x = stats.norm.rvs(loc=[0,5], scale=[1,1.5],\n    ...                    size=(nsample//2,2)).ravel()\n    >>> res = stats.probplot(x, plot=plt)\n\n    A standard normal distribution:\n\n    >>> ax4 = plt.subplot(224)\n    >>> x = stats.norm.rvs(loc=0, scale=1, size=nsample)\n    >>> res = stats.probplot(x, plot=plt)\n\n    Produce a new figure with a loggamma distribution, using the ``dist`` and\n    ``sparams`` keywords:\n\n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(111)\n    >>> x = stats.loggamma.rvs(c=2.5, size=500)\n    >>> res = stats.probplot(x, dist=stats.loggamma, sparams=(2.5,), plot=ax)\n    >>> ax.set_title("Probplot for loggamma dist with shape parameter 2.5")\n\n    Show the results with Matplotlib:\n\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Name (line 584):
    
    # Assigning a Call to a Name (line 584):
    
    # Call to asarray(...): (line 584)
    # Processing the call arguments (line 584)
    # Getting the type of 'x' (line 584)
    x_566769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 19), 'x', False)
    # Processing the call keyword arguments (line 584)
    kwargs_566770 = {}
    # Getting the type of 'np' (line 584)
    np_566767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 584)
    asarray_566768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 8), np_566767, 'asarray')
    # Calling asarray(args, kwargs) (line 584)
    asarray_call_result_566771 = invoke(stypy.reporting.localization.Localization(__file__, 584, 8), asarray_566768, *[x_566769], **kwargs_566770)
    
    # Assigning a type to the variable 'x' (line 584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 4), 'x', asarray_call_result_566771)
    
    # Assigning a BoolOp to a Name (line 585):
    
    # Assigning a BoolOp to a Name (line 585):
    
    # Evaluating a boolean operation
    # Getting the type of 'fit' (line 585)
    fit_566772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 19), 'fit')
    
    # Getting the type of 'plot' (line 585)
    plot_566773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 27), 'plot')
    # Getting the type of 'None' (line 585)
    None_566774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 39), 'None')
    # Applying the binary operator 'isnot' (line 585)
    result_is_not_566775 = python_operator(stypy.reporting.localization.Localization(__file__, 585, 27), 'isnot', plot_566773, None_566774)
    
    # Applying the binary operator 'or' (line 585)
    result_or_keyword_566776 = python_operator(stypy.reporting.localization.Localization(__file__, 585, 19), 'or', fit_566772, result_is_not_566775)
    
    # Assigning a type to the variable '_perform_fit' (line 585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 4), '_perform_fit', result_or_keyword_566776)
    
    
    # Getting the type of 'x' (line 586)
    x_566777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 7), 'x')
    # Obtaining the member 'size' of a type (line 586)
    size_566778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 7), x_566777, 'size')
    int_566779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 586, 17), 'int')
    # Applying the binary operator '==' (line 586)
    result_eq_566780 = python_operator(stypy.reporting.localization.Localization(__file__, 586, 7), '==', size_566778, int_566779)
    
    # Testing the type of an if condition (line 586)
    if_condition_566781 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 586, 4), result_eq_566780)
    # Assigning a type to the variable 'if_condition_566781' (line 586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 4), 'if_condition_566781', if_condition_566781)
    # SSA begins for if statement (line 586)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of '_perform_fit' (line 587)
    _perform_fit_566782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 11), '_perform_fit')
    # Testing the type of an if condition (line 587)
    if_condition_566783 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 587, 8), _perform_fit_566782)
    # Assigning a type to the variable 'if_condition_566783' (line 587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 8), 'if_condition_566783', if_condition_566783)
    # SSA begins for if statement (line 587)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 588)
    tuple_566784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 588)
    # Adding element type (line 588)
    
    # Obtaining an instance of the builtin type 'tuple' (line 588)
    tuple_566785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 588)
    # Adding element type (line 588)
    # Getting the type of 'x' (line 588)
    x_566786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 20), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 588, 20), tuple_566785, x_566786)
    # Adding element type (line 588)
    # Getting the type of 'x' (line 588)
    x_566787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 23), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 588, 20), tuple_566785, x_566787)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 588, 19), tuple_566784, tuple_566785)
    # Adding element type (line 588)
    
    # Obtaining an instance of the builtin type 'tuple' (line 588)
    tuple_566788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 588)
    # Adding element type (line 588)
    # Getting the type of 'np' (line 588)
    np_566789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 28), 'np')
    # Obtaining the member 'nan' of a type (line 588)
    nan_566790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 28), np_566789, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 588, 28), tuple_566788, nan_566790)
    # Adding element type (line 588)
    # Getting the type of 'np' (line 588)
    np_566791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 36), 'np')
    # Obtaining the member 'nan' of a type (line 588)
    nan_566792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 36), np_566791, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 588, 28), tuple_566788, nan_566792)
    # Adding element type (line 588)
    float_566793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 44), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 588, 28), tuple_566788, float_566793)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 588, 19), tuple_566784, tuple_566788)
    
    # Assigning a type to the variable 'stypy_return_type' (line 588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 12), 'stypy_return_type', tuple_566784)
    # SSA branch for the else part of an if statement (line 587)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 590)
    tuple_566794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 590)
    # Adding element type (line 590)
    # Getting the type of 'x' (line 590)
    x_566795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 19), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 19), tuple_566794, x_566795)
    # Adding element type (line 590)
    # Getting the type of 'x' (line 590)
    x_566796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 22), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 19), tuple_566794, x_566796)
    
    # Assigning a type to the variable 'stypy_return_type' (line 590)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 12), 'stypy_return_type', tuple_566794)
    # SSA join for if statement (line 587)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 586)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 592):
    
    # Assigning a Call to a Name (line 592):
    
    # Call to _calc_uniform_order_statistic_medians(...): (line 592)
    # Processing the call arguments (line 592)
    
    # Call to len(...): (line 592)
    # Processing the call arguments (line 592)
    # Getting the type of 'x' (line 592)
    x_566799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 60), 'x', False)
    # Processing the call keyword arguments (line 592)
    kwargs_566800 = {}
    # Getting the type of 'len' (line 592)
    len_566798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 56), 'len', False)
    # Calling len(args, kwargs) (line 592)
    len_call_result_566801 = invoke(stypy.reporting.localization.Localization(__file__, 592, 56), len_566798, *[x_566799], **kwargs_566800)
    
    # Processing the call keyword arguments (line 592)
    kwargs_566802 = {}
    # Getting the type of '_calc_uniform_order_statistic_medians' (line 592)
    _calc_uniform_order_statistic_medians_566797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 18), '_calc_uniform_order_statistic_medians', False)
    # Calling _calc_uniform_order_statistic_medians(args, kwargs) (line 592)
    _calc_uniform_order_statistic_medians_call_result_566803 = invoke(stypy.reporting.localization.Localization(__file__, 592, 18), _calc_uniform_order_statistic_medians_566797, *[len_call_result_566801], **kwargs_566802)
    
    # Assigning a type to the variable 'osm_uniform' (line 592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 4), 'osm_uniform', _calc_uniform_order_statistic_medians_call_result_566803)
    
    # Assigning a Call to a Name (line 593):
    
    # Assigning a Call to a Name (line 593):
    
    # Call to _parse_dist_kw(...): (line 593)
    # Processing the call arguments (line 593)
    # Getting the type of 'dist' (line 593)
    dist_566805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 26), 'dist', False)
    # Processing the call keyword arguments (line 593)
    # Getting the type of 'False' (line 593)
    False_566806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 49), 'False', False)
    keyword_566807 = False_566806
    kwargs_566808 = {'enforce_subclass': keyword_566807}
    # Getting the type of '_parse_dist_kw' (line 593)
    _parse_dist_kw_566804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 11), '_parse_dist_kw', False)
    # Calling _parse_dist_kw(args, kwargs) (line 593)
    _parse_dist_kw_call_result_566809 = invoke(stypy.reporting.localization.Localization(__file__, 593, 11), _parse_dist_kw_566804, *[dist_566805], **kwargs_566808)
    
    # Assigning a type to the variable 'dist' (line 593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 4), 'dist', _parse_dist_kw_call_result_566809)
    
    # Type idiom detected: calculating its left and rigth part (line 594)
    # Getting the type of 'sparams' (line 594)
    sparams_566810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 7), 'sparams')
    # Getting the type of 'None' (line 594)
    None_566811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 18), 'None')
    
    (may_be_566812, more_types_in_union_566813) = may_be_none(sparams_566810, None_566811)

    if may_be_566812:

        if more_types_in_union_566813:
            # Runtime conditional SSA (line 594)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Tuple to a Name (line 595):
        
        # Assigning a Tuple to a Name (line 595):
        
        # Obtaining an instance of the builtin type 'tuple' (line 595)
        tuple_566814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 595)
        
        # Assigning a type to the variable 'sparams' (line 595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 8), 'sparams', tuple_566814)

        if more_types_in_union_566813:
            # SSA join for if statement (line 594)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to isscalar(...): (line 596)
    # Processing the call arguments (line 596)
    # Getting the type of 'sparams' (line 596)
    sparams_566816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 16), 'sparams', False)
    # Processing the call keyword arguments (line 596)
    kwargs_566817 = {}
    # Getting the type of 'isscalar' (line 596)
    isscalar_566815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 7), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 596)
    isscalar_call_result_566818 = invoke(stypy.reporting.localization.Localization(__file__, 596, 7), isscalar_566815, *[sparams_566816], **kwargs_566817)
    
    # Testing the type of an if condition (line 596)
    if_condition_566819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 596, 4), isscalar_call_result_566818)
    # Assigning a type to the variable 'if_condition_566819' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'if_condition_566819', if_condition_566819)
    # SSA begins for if statement (line 596)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 597):
    
    # Assigning a Tuple to a Name (line 597):
    
    # Obtaining an instance of the builtin type 'tuple' (line 597)
    tuple_566820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 597)
    # Adding element type (line 597)
    # Getting the type of 'sparams' (line 597)
    sparams_566821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 19), 'sparams')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 597, 19), tuple_566820, sparams_566821)
    
    # Assigning a type to the variable 'sparams' (line 597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'sparams', tuple_566820)
    # SSA join for if statement (line 596)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 598)
    # Getting the type of 'tuple' (line 598)
    tuple_566822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 31), 'tuple')
    # Getting the type of 'sparams' (line 598)
    sparams_566823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 22), 'sparams')
    
    (may_be_566824, more_types_in_union_566825) = may_not_be_subtype(tuple_566822, sparams_566823)

    if may_be_566824:

        if more_types_in_union_566825:
            # Runtime conditional SSA (line 598)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'sparams' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 4), 'sparams', remove_subtype_from_union(sparams_566823, tuple))
        
        # Assigning a Call to a Name (line 599):
        
        # Assigning a Call to a Name (line 599):
        
        # Call to tuple(...): (line 599)
        # Processing the call arguments (line 599)
        # Getting the type of 'sparams' (line 599)
        sparams_566827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 24), 'sparams', False)
        # Processing the call keyword arguments (line 599)
        kwargs_566828 = {}
        # Getting the type of 'tuple' (line 599)
        tuple_566826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 18), 'tuple', False)
        # Calling tuple(args, kwargs) (line 599)
        tuple_call_result_566829 = invoke(stypy.reporting.localization.Localization(__file__, 599, 18), tuple_566826, *[sparams_566827], **kwargs_566828)
        
        # Assigning a type to the variable 'sparams' (line 599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 8), 'sparams', tuple_call_result_566829)

        if more_types_in_union_566825:
            # SSA join for if statement (line 598)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 601):
    
    # Assigning a Call to a Name (line 601):
    
    # Call to ppf(...): (line 601)
    # Processing the call arguments (line 601)
    # Getting the type of 'osm_uniform' (line 601)
    osm_uniform_566832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 19), 'osm_uniform', False)
    # Getting the type of 'sparams' (line 601)
    sparams_566833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 33), 'sparams', False)
    # Processing the call keyword arguments (line 601)
    kwargs_566834 = {}
    # Getting the type of 'dist' (line 601)
    dist_566830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 10), 'dist', False)
    # Obtaining the member 'ppf' of a type (line 601)
    ppf_566831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 10), dist_566830, 'ppf')
    # Calling ppf(args, kwargs) (line 601)
    ppf_call_result_566835 = invoke(stypy.reporting.localization.Localization(__file__, 601, 10), ppf_566831, *[osm_uniform_566832, sparams_566833], **kwargs_566834)
    
    # Assigning a type to the variable 'osm' (line 601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 4), 'osm', ppf_call_result_566835)
    
    # Assigning a Call to a Name (line 602):
    
    # Assigning a Call to a Name (line 602):
    
    # Call to sort(...): (line 602)
    # Processing the call arguments (line 602)
    # Getting the type of 'x' (line 602)
    x_566837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 15), 'x', False)
    # Processing the call keyword arguments (line 602)
    kwargs_566838 = {}
    # Getting the type of 'sort' (line 602)
    sort_566836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 10), 'sort', False)
    # Calling sort(args, kwargs) (line 602)
    sort_call_result_566839 = invoke(stypy.reporting.localization.Localization(__file__, 602, 10), sort_566836, *[x_566837], **kwargs_566838)
    
    # Assigning a type to the variable 'osr' (line 602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'osr', sort_call_result_566839)
    
    # Getting the type of '_perform_fit' (line 603)
    _perform_fit_566840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 7), '_perform_fit')
    # Testing the type of an if condition (line 603)
    if_condition_566841 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 603, 4), _perform_fit_566840)
    # Assigning a type to the variable 'if_condition_566841' (line 603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 4), 'if_condition_566841', if_condition_566841)
    # SSA begins for if statement (line 603)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 605):
    
    # Assigning a Subscript to a Name (line 605):
    
    # Obtaining the type of the subscript
    int_566842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 8), 'int')
    
    # Call to linregress(...): (line 605)
    # Processing the call arguments (line 605)
    # Getting the type of 'osm' (line 605)
    osm_566845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 63), 'osm', False)
    # Getting the type of 'osr' (line 605)
    osr_566846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 68), 'osr', False)
    # Processing the call keyword arguments (line 605)
    kwargs_566847 = {}
    # Getting the type of 'stats' (line 605)
    stats_566843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 46), 'stats', False)
    # Obtaining the member 'linregress' of a type (line 605)
    linregress_566844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 46), stats_566843, 'linregress')
    # Calling linregress(args, kwargs) (line 605)
    linregress_call_result_566848 = invoke(stypy.reporting.localization.Localization(__file__, 605, 46), linregress_566844, *[osm_566845, osr_566846], **kwargs_566847)
    
    # Obtaining the member '__getitem__' of a type (line 605)
    getitem___566849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 8), linregress_call_result_566848, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 605)
    subscript_call_result_566850 = invoke(stypy.reporting.localization.Localization(__file__, 605, 8), getitem___566849, int_566842)
    
    # Assigning a type to the variable 'tuple_var_assignment_566014' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'tuple_var_assignment_566014', subscript_call_result_566850)
    
    # Assigning a Subscript to a Name (line 605):
    
    # Obtaining the type of the subscript
    int_566851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 8), 'int')
    
    # Call to linregress(...): (line 605)
    # Processing the call arguments (line 605)
    # Getting the type of 'osm' (line 605)
    osm_566854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 63), 'osm', False)
    # Getting the type of 'osr' (line 605)
    osr_566855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 68), 'osr', False)
    # Processing the call keyword arguments (line 605)
    kwargs_566856 = {}
    # Getting the type of 'stats' (line 605)
    stats_566852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 46), 'stats', False)
    # Obtaining the member 'linregress' of a type (line 605)
    linregress_566853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 46), stats_566852, 'linregress')
    # Calling linregress(args, kwargs) (line 605)
    linregress_call_result_566857 = invoke(stypy.reporting.localization.Localization(__file__, 605, 46), linregress_566853, *[osm_566854, osr_566855], **kwargs_566856)
    
    # Obtaining the member '__getitem__' of a type (line 605)
    getitem___566858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 8), linregress_call_result_566857, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 605)
    subscript_call_result_566859 = invoke(stypy.reporting.localization.Localization(__file__, 605, 8), getitem___566858, int_566851)
    
    # Assigning a type to the variable 'tuple_var_assignment_566015' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'tuple_var_assignment_566015', subscript_call_result_566859)
    
    # Assigning a Subscript to a Name (line 605):
    
    # Obtaining the type of the subscript
    int_566860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 8), 'int')
    
    # Call to linregress(...): (line 605)
    # Processing the call arguments (line 605)
    # Getting the type of 'osm' (line 605)
    osm_566863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 63), 'osm', False)
    # Getting the type of 'osr' (line 605)
    osr_566864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 68), 'osr', False)
    # Processing the call keyword arguments (line 605)
    kwargs_566865 = {}
    # Getting the type of 'stats' (line 605)
    stats_566861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 46), 'stats', False)
    # Obtaining the member 'linregress' of a type (line 605)
    linregress_566862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 46), stats_566861, 'linregress')
    # Calling linregress(args, kwargs) (line 605)
    linregress_call_result_566866 = invoke(stypy.reporting.localization.Localization(__file__, 605, 46), linregress_566862, *[osm_566863, osr_566864], **kwargs_566865)
    
    # Obtaining the member '__getitem__' of a type (line 605)
    getitem___566867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 8), linregress_call_result_566866, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 605)
    subscript_call_result_566868 = invoke(stypy.reporting.localization.Localization(__file__, 605, 8), getitem___566867, int_566860)
    
    # Assigning a type to the variable 'tuple_var_assignment_566016' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'tuple_var_assignment_566016', subscript_call_result_566868)
    
    # Assigning a Subscript to a Name (line 605):
    
    # Obtaining the type of the subscript
    int_566869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 8), 'int')
    
    # Call to linregress(...): (line 605)
    # Processing the call arguments (line 605)
    # Getting the type of 'osm' (line 605)
    osm_566872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 63), 'osm', False)
    # Getting the type of 'osr' (line 605)
    osr_566873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 68), 'osr', False)
    # Processing the call keyword arguments (line 605)
    kwargs_566874 = {}
    # Getting the type of 'stats' (line 605)
    stats_566870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 46), 'stats', False)
    # Obtaining the member 'linregress' of a type (line 605)
    linregress_566871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 46), stats_566870, 'linregress')
    # Calling linregress(args, kwargs) (line 605)
    linregress_call_result_566875 = invoke(stypy.reporting.localization.Localization(__file__, 605, 46), linregress_566871, *[osm_566872, osr_566873], **kwargs_566874)
    
    # Obtaining the member '__getitem__' of a type (line 605)
    getitem___566876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 8), linregress_call_result_566875, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 605)
    subscript_call_result_566877 = invoke(stypy.reporting.localization.Localization(__file__, 605, 8), getitem___566876, int_566869)
    
    # Assigning a type to the variable 'tuple_var_assignment_566017' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'tuple_var_assignment_566017', subscript_call_result_566877)
    
    # Assigning a Subscript to a Name (line 605):
    
    # Obtaining the type of the subscript
    int_566878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 8), 'int')
    
    # Call to linregress(...): (line 605)
    # Processing the call arguments (line 605)
    # Getting the type of 'osm' (line 605)
    osm_566881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 63), 'osm', False)
    # Getting the type of 'osr' (line 605)
    osr_566882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 68), 'osr', False)
    # Processing the call keyword arguments (line 605)
    kwargs_566883 = {}
    # Getting the type of 'stats' (line 605)
    stats_566879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 46), 'stats', False)
    # Obtaining the member 'linregress' of a type (line 605)
    linregress_566880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 46), stats_566879, 'linregress')
    # Calling linregress(args, kwargs) (line 605)
    linregress_call_result_566884 = invoke(stypy.reporting.localization.Localization(__file__, 605, 46), linregress_566880, *[osm_566881, osr_566882], **kwargs_566883)
    
    # Obtaining the member '__getitem__' of a type (line 605)
    getitem___566885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 8), linregress_call_result_566884, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 605)
    subscript_call_result_566886 = invoke(stypy.reporting.localization.Localization(__file__, 605, 8), getitem___566885, int_566878)
    
    # Assigning a type to the variable 'tuple_var_assignment_566018' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'tuple_var_assignment_566018', subscript_call_result_566886)
    
    # Assigning a Name to a Name (line 605):
    # Getting the type of 'tuple_var_assignment_566014' (line 605)
    tuple_var_assignment_566014_566887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'tuple_var_assignment_566014')
    # Assigning a type to the variable 'slope' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'slope', tuple_var_assignment_566014_566887)
    
    # Assigning a Name to a Name (line 605):
    # Getting the type of 'tuple_var_assignment_566015' (line 605)
    tuple_var_assignment_566015_566888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'tuple_var_assignment_566015')
    # Assigning a type to the variable 'intercept' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 15), 'intercept', tuple_var_assignment_566015_566888)
    
    # Assigning a Name to a Name (line 605):
    # Getting the type of 'tuple_var_assignment_566016' (line 605)
    tuple_var_assignment_566016_566889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'tuple_var_assignment_566016')
    # Assigning a type to the variable 'r' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 26), 'r', tuple_var_assignment_566016_566889)
    
    # Assigning a Name to a Name (line 605):
    # Getting the type of 'tuple_var_assignment_566017' (line 605)
    tuple_var_assignment_566017_566890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'tuple_var_assignment_566017')
    # Assigning a type to the variable 'prob' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 29), 'prob', tuple_var_assignment_566017_566890)
    
    # Assigning a Name to a Name (line 605):
    # Getting the type of 'tuple_var_assignment_566018' (line 605)
    tuple_var_assignment_566018_566891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'tuple_var_assignment_566018')
    # Assigning a type to the variable 'sterrest' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 35), 'sterrest', tuple_var_assignment_566018_566891)
    # SSA join for if statement (line 603)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 607)
    # Getting the type of 'plot' (line 607)
    plot_566892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'plot')
    # Getting the type of 'None' (line 607)
    None_566893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 19), 'None')
    
    (may_be_566894, more_types_in_union_566895) = may_not_be_none(plot_566892, None_566893)

    if may_be_566894:

        if more_types_in_union_566895:
            # Runtime conditional SSA (line 607)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to plot(...): (line 608)
        # Processing the call arguments (line 608)
        # Getting the type of 'osm' (line 608)
        osm_566898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 18), 'osm', False)
        # Getting the type of 'osr' (line 608)
        osr_566899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 23), 'osr', False)
        str_566900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 28), 'str', 'bo')
        # Getting the type of 'osm' (line 608)
        osm_566901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 34), 'osm', False)
        # Getting the type of 'slope' (line 608)
        slope_566902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 39), 'slope', False)
        # Getting the type of 'osm' (line 608)
        osm_566903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 45), 'osm', False)
        # Applying the binary operator '*' (line 608)
        result_mul_566904 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 39), '*', slope_566902, osm_566903)
        
        # Getting the type of 'intercept' (line 608)
        intercept_566905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 51), 'intercept', False)
        # Applying the binary operator '+' (line 608)
        result_add_566906 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 39), '+', result_mul_566904, intercept_566905)
        
        str_566907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 62), 'str', 'r-')
        # Processing the call keyword arguments (line 608)
        kwargs_566908 = {}
        # Getting the type of 'plot' (line 608)
        plot_566896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 8), 'plot', False)
        # Obtaining the member 'plot' of a type (line 608)
        plot_566897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 8), plot_566896, 'plot')
        # Calling plot(args, kwargs) (line 608)
        plot_call_result_566909 = invoke(stypy.reporting.localization.Localization(__file__, 608, 8), plot_566897, *[osm_566898, osr_566899, str_566900, osm_566901, result_add_566906, str_566907], **kwargs_566908)
        
        
        # Call to _add_axis_labels_title(...): (line 609)
        # Processing the call arguments (line 609)
        # Getting the type of 'plot' (line 609)
        plot_566911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 31), 'plot', False)
        # Processing the call keyword arguments (line 609)
        str_566912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 44), 'str', 'Theoretical quantiles')
        keyword_566913 = str_566912
        str_566914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 38), 'str', 'Ordered Values')
        keyword_566915 = str_566914
        str_566916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 37), 'str', 'Probability Plot')
        keyword_566917 = str_566916
        kwargs_566918 = {'title': keyword_566917, 'xlabel': keyword_566913, 'ylabel': keyword_566915}
        # Getting the type of '_add_axis_labels_title' (line 609)
        _add_axis_labels_title_566910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 8), '_add_axis_labels_title', False)
        # Calling _add_axis_labels_title(args, kwargs) (line 609)
        _add_axis_labels_title_call_result_566919 = invoke(stypy.reporting.localization.Localization(__file__, 609, 8), _add_axis_labels_title_566910, *[plot_566911], **kwargs_566918)
        
        
        # Getting the type of 'rvalue' (line 614)
        rvalue_566920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 11), 'rvalue')
        # Testing the type of an if condition (line 614)
        if_condition_566921 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 614, 8), rvalue_566920)
        # Assigning a type to the variable 'if_condition_566921' (line 614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 8), 'if_condition_566921', if_condition_566921)
        # SSA begins for if statement (line 614)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 615):
        
        # Assigning a Call to a Name (line 615):
        
        # Call to amin(...): (line 615)
        # Processing the call arguments (line 615)
        # Getting the type of 'osm' (line 615)
        osm_566923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 24), 'osm', False)
        # Processing the call keyword arguments (line 615)
        kwargs_566924 = {}
        # Getting the type of 'amin' (line 615)
        amin_566922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 19), 'amin', False)
        # Calling amin(args, kwargs) (line 615)
        amin_call_result_566925 = invoke(stypy.reporting.localization.Localization(__file__, 615, 19), amin_566922, *[osm_566923], **kwargs_566924)
        
        # Assigning a type to the variable 'xmin' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 12), 'xmin', amin_call_result_566925)
        
        # Assigning a Call to a Name (line 616):
        
        # Assigning a Call to a Name (line 616):
        
        # Call to amax(...): (line 616)
        # Processing the call arguments (line 616)
        # Getting the type of 'osm' (line 616)
        osm_566927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 24), 'osm', False)
        # Processing the call keyword arguments (line 616)
        kwargs_566928 = {}
        # Getting the type of 'amax' (line 616)
        amax_566926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 19), 'amax', False)
        # Calling amax(args, kwargs) (line 616)
        amax_call_result_566929 = invoke(stypy.reporting.localization.Localization(__file__, 616, 19), amax_566926, *[osm_566927], **kwargs_566928)
        
        # Assigning a type to the variable 'xmax' (line 616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 12), 'xmax', amax_call_result_566929)
        
        # Assigning a Call to a Name (line 617):
        
        # Assigning a Call to a Name (line 617):
        
        # Call to amin(...): (line 617)
        # Processing the call arguments (line 617)
        # Getting the type of 'x' (line 617)
        x_566931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 24), 'x', False)
        # Processing the call keyword arguments (line 617)
        kwargs_566932 = {}
        # Getting the type of 'amin' (line 617)
        amin_566930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 19), 'amin', False)
        # Calling amin(args, kwargs) (line 617)
        amin_call_result_566933 = invoke(stypy.reporting.localization.Localization(__file__, 617, 19), amin_566930, *[x_566931], **kwargs_566932)
        
        # Assigning a type to the variable 'ymin' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 12), 'ymin', amin_call_result_566933)
        
        # Assigning a Call to a Name (line 618):
        
        # Assigning a Call to a Name (line 618):
        
        # Call to amax(...): (line 618)
        # Processing the call arguments (line 618)
        # Getting the type of 'x' (line 618)
        x_566935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 24), 'x', False)
        # Processing the call keyword arguments (line 618)
        kwargs_566936 = {}
        # Getting the type of 'amax' (line 618)
        amax_566934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 19), 'amax', False)
        # Calling amax(args, kwargs) (line 618)
        amax_call_result_566937 = invoke(stypy.reporting.localization.Localization(__file__, 618, 19), amax_566934, *[x_566935], **kwargs_566936)
        
        # Assigning a type to the variable 'ymax' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 12), 'ymax', amax_call_result_566937)
        
        # Assigning a BinOp to a Name (line 619):
        
        # Assigning a BinOp to a Name (line 619):
        # Getting the type of 'xmin' (line 619)
        xmin_566938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 19), 'xmin')
        float_566939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 26), 'float')
        # Getting the type of 'xmax' (line 619)
        xmax_566940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 34), 'xmax')
        # Getting the type of 'xmin' (line 619)
        xmin_566941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 41), 'xmin')
        # Applying the binary operator '-' (line 619)
        result_sub_566942 = python_operator(stypy.reporting.localization.Localization(__file__, 619, 34), '-', xmax_566940, xmin_566941)
        
        # Applying the binary operator '*' (line 619)
        result_mul_566943 = python_operator(stypy.reporting.localization.Localization(__file__, 619, 26), '*', float_566939, result_sub_566942)
        
        # Applying the binary operator '+' (line 619)
        result_add_566944 = python_operator(stypy.reporting.localization.Localization(__file__, 619, 19), '+', xmin_566938, result_mul_566943)
        
        # Assigning a type to the variable 'posx' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 12), 'posx', result_add_566944)
        
        # Assigning a BinOp to a Name (line 620):
        
        # Assigning a BinOp to a Name (line 620):
        # Getting the type of 'ymin' (line 620)
        ymin_566945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 19), 'ymin')
        float_566946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 26), 'float')
        # Getting the type of 'ymax' (line 620)
        ymax_566947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 34), 'ymax')
        # Getting the type of 'ymin' (line 620)
        ymin_566948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 41), 'ymin')
        # Applying the binary operator '-' (line 620)
        result_sub_566949 = python_operator(stypy.reporting.localization.Localization(__file__, 620, 34), '-', ymax_566947, ymin_566948)
        
        # Applying the binary operator '*' (line 620)
        result_mul_566950 = python_operator(stypy.reporting.localization.Localization(__file__, 620, 26), '*', float_566946, result_sub_566949)
        
        # Applying the binary operator '+' (line 620)
        result_add_566951 = python_operator(stypy.reporting.localization.Localization(__file__, 620, 19), '+', ymin_566945, result_mul_566950)
        
        # Assigning a type to the variable 'posy' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 12), 'posy', result_add_566951)
        
        # Call to text(...): (line 621)
        # Processing the call arguments (line 621)
        # Getting the type of 'posx' (line 621)
        posx_566954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 22), 'posx', False)
        # Getting the type of 'posy' (line 621)
        posy_566955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 28), 'posy', False)
        str_566956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 34), 'str', '$R^2=%1.4f$')
        # Getting the type of 'r' (line 621)
        r_566957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 50), 'r', False)
        int_566958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 53), 'int')
        # Applying the binary operator '**' (line 621)
        result_pow_566959 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 50), '**', r_566957, int_566958)
        
        # Applying the binary operator '%' (line 621)
        result_mod_566960 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 34), '%', str_566956, result_pow_566959)
        
        # Processing the call keyword arguments (line 621)
        kwargs_566961 = {}
        # Getting the type of 'plot' (line 621)
        plot_566952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 12), 'plot', False)
        # Obtaining the member 'text' of a type (line 621)
        text_566953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 12), plot_566952, 'text')
        # Calling text(args, kwargs) (line 621)
        text_call_result_566962 = invoke(stypy.reporting.localization.Localization(__file__, 621, 12), text_566953, *[posx_566954, posy_566955, result_mod_566960], **kwargs_566961)
        
        # SSA join for if statement (line 614)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_566895:
            # SSA join for if statement (line 607)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'fit' (line 623)
    fit_566963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 7), 'fit')
    # Testing the type of an if condition (line 623)
    if_condition_566964 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 623, 4), fit_566963)
    # Assigning a type to the variable 'if_condition_566964' (line 623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 4), 'if_condition_566964', if_condition_566964)
    # SSA begins for if statement (line 623)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 624)
    tuple_566965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 624)
    # Adding element type (line 624)
    
    # Obtaining an instance of the builtin type 'tuple' (line 624)
    tuple_566966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 624)
    # Adding element type (line 624)
    # Getting the type of 'osm' (line 624)
    osm_566967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 16), 'osm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 624, 16), tuple_566966, osm_566967)
    # Adding element type (line 624)
    # Getting the type of 'osr' (line 624)
    osr_566968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 21), 'osr')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 624, 16), tuple_566966, osr_566968)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 624, 15), tuple_566965, tuple_566966)
    # Adding element type (line 624)
    
    # Obtaining an instance of the builtin type 'tuple' (line 624)
    tuple_566969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 624)
    # Adding element type (line 624)
    # Getting the type of 'slope' (line 624)
    slope_566970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 28), 'slope')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 624, 28), tuple_566969, slope_566970)
    # Adding element type (line 624)
    # Getting the type of 'intercept' (line 624)
    intercept_566971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 35), 'intercept')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 624, 28), tuple_566969, intercept_566971)
    # Adding element type (line 624)
    # Getting the type of 'r' (line 624)
    r_566972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 46), 'r')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 624, 28), tuple_566969, r_566972)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 624, 15), tuple_566965, tuple_566969)
    
    # Assigning a type to the variable 'stypy_return_type' (line 624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 8), 'stypy_return_type', tuple_566965)
    # SSA branch for the else part of an if statement (line 623)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 626)
    tuple_566973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 626)
    # Adding element type (line 626)
    # Getting the type of 'osm' (line 626)
    osm_566974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 15), 'osm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 15), tuple_566973, osm_566974)
    # Adding element type (line 626)
    # Getting the type of 'osr' (line 626)
    osr_566975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 20), 'osr')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 15), tuple_566973, osr_566975)
    
    # Assigning a type to the variable 'stypy_return_type' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 8), 'stypy_return_type', tuple_566973)
    # SSA join for if statement (line 623)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'probplot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'probplot' in the type store
    # Getting the type of 'stypy_return_type' (line 473)
    stypy_return_type_566976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_566976)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'probplot'
    return stypy_return_type_566976

# Assigning a type to the variable 'probplot' (line 473)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 0), 'probplot', probplot)

@norecursion
def ppcc_max(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 629)
    tuple_566977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 629)
    # Adding element type (line 629)
    float_566978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 23), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 23), tuple_566977, float_566978)
    # Adding element type (line 629)
    float_566979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 28), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 23), tuple_566977, float_566979)
    
    str_566980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 39), 'str', 'tukeylambda')
    defaults = [tuple_566977, str_566980]
    # Create a new context for function 'ppcc_max'
    module_type_store = module_type_store.open_function_context('ppcc_max', 629, 0, False)
    
    # Passed parameters checking function
    ppcc_max.stypy_localization = localization
    ppcc_max.stypy_type_of_self = None
    ppcc_max.stypy_type_store = module_type_store
    ppcc_max.stypy_function_name = 'ppcc_max'
    ppcc_max.stypy_param_names_list = ['x', 'brack', 'dist']
    ppcc_max.stypy_varargs_param_name = None
    ppcc_max.stypy_kwargs_param_name = None
    ppcc_max.stypy_call_defaults = defaults
    ppcc_max.stypy_call_varargs = varargs
    ppcc_max.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ppcc_max', ['x', 'brack', 'dist'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ppcc_max', localization, ['x', 'brack', 'dist'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ppcc_max(...)' code ##################

    str_566981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, (-1)), 'str', '\n    Calculate the shape parameter that maximizes the PPCC\n\n    The probability plot correlation coefficient (PPCC) plot can be used to\n    determine the optimal shape parameter for a one-parameter family of\n    distributions.  ppcc_max returns the shape parameter that would maximize the\n    probability plot correlation coefficient for the given data to a\n    one-parameter family of distributions.\n\n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    brack : tuple, optional\n        Triple (a,b,c) where (a<b<c). If bracket consists of two numbers (a, c)\n        then they are assumed to be a starting interval for a downhill bracket\n        search (see `scipy.optimize.brent`).\n    dist : str or stats.distributions instance, optional\n        Distribution or distribution function name.  Objects that look enough\n        like a stats.distributions instance (i.e. they have a ``ppf`` method)\n        are also accepted.  The default is ``\'tukeylambda\'``.\n\n    Returns\n    -------\n    shape_value : float\n        The shape parameter at which the probability plot correlation\n        coefficient reaches its max value.\n\n    See also\n    --------\n    ppcc_plot, probplot, boxcox\n\n    Notes\n    -----\n    The brack keyword serves as a starting point which is useful in corner\n    cases. One can use a plot to obtain a rough visual estimate of the location\n    for the maximum to start the search near it.\n\n    References\n    ----------\n    .. [1] J.J. Filliben, "The Probability Plot Correlation Coefficient Test for\n           Normality", Technometrics, Vol. 17, pp. 111-117, 1975.\n\n    .. [2] http://www.itl.nist.gov/div898/handbook/eda/section3/ppccplot.htm\n\n    Examples\n    --------\n    First we generate some random data from a Tukey-Lambda distribution,\n    with shape parameter -0.7:\n\n    >>> from scipy import stats\n    >>> x = stats.tukeylambda.rvs(-0.7, loc=2, scale=0.5, size=10000,\n    ...                           random_state=1234567) + 1e4\n\n    Now we explore this data with a PPCC plot as well as the related\n    probability plot and Box-Cox normplot.  A red line is drawn where we\n    expect the PPCC value to be maximal (at the shape parameter -0.7 used\n    above):\n\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure(figsize=(8, 6))\n    >>> ax = fig.add_subplot(111)\n    >>> res = stats.ppcc_plot(x, -5, 5, plot=ax)\n\n    We calculate the value where the shape should reach its maximum and a red\n    line is drawn there. The line should coincide with the highest point in the\n    ppcc_plot.\n\n    >>> max = stats.ppcc_max(x)\n    >>> ax.vlines(max, 0, 1, colors=\'r\', label=\'Expected shape value\')\n\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Name (line 704):
    
    # Assigning a Call to a Name (line 704):
    
    # Call to _parse_dist_kw(...): (line 704)
    # Processing the call arguments (line 704)
    # Getting the type of 'dist' (line 704)
    dist_566983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 26), 'dist', False)
    # Processing the call keyword arguments (line 704)
    kwargs_566984 = {}
    # Getting the type of '_parse_dist_kw' (line 704)
    _parse_dist_kw_566982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 11), '_parse_dist_kw', False)
    # Calling _parse_dist_kw(args, kwargs) (line 704)
    _parse_dist_kw_call_result_566985 = invoke(stypy.reporting.localization.Localization(__file__, 704, 11), _parse_dist_kw_566982, *[dist_566983], **kwargs_566984)
    
    # Assigning a type to the variable 'dist' (line 704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 4), 'dist', _parse_dist_kw_call_result_566985)
    
    # Assigning a Call to a Name (line 705):
    
    # Assigning a Call to a Name (line 705):
    
    # Call to _calc_uniform_order_statistic_medians(...): (line 705)
    # Processing the call arguments (line 705)
    
    # Call to len(...): (line 705)
    # Processing the call arguments (line 705)
    # Getting the type of 'x' (line 705)
    x_566988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 60), 'x', False)
    # Processing the call keyword arguments (line 705)
    kwargs_566989 = {}
    # Getting the type of 'len' (line 705)
    len_566987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 56), 'len', False)
    # Calling len(args, kwargs) (line 705)
    len_call_result_566990 = invoke(stypy.reporting.localization.Localization(__file__, 705, 56), len_566987, *[x_566988], **kwargs_566989)
    
    # Processing the call keyword arguments (line 705)
    kwargs_566991 = {}
    # Getting the type of '_calc_uniform_order_statistic_medians' (line 705)
    _calc_uniform_order_statistic_medians_566986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 18), '_calc_uniform_order_statistic_medians', False)
    # Calling _calc_uniform_order_statistic_medians(args, kwargs) (line 705)
    _calc_uniform_order_statistic_medians_call_result_566992 = invoke(stypy.reporting.localization.Localization(__file__, 705, 18), _calc_uniform_order_statistic_medians_566986, *[len_call_result_566990], **kwargs_566991)
    
    # Assigning a type to the variable 'osm_uniform' (line 705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'osm_uniform', _calc_uniform_order_statistic_medians_call_result_566992)
    
    # Assigning a Call to a Name (line 706):
    
    # Assigning a Call to a Name (line 706):
    
    # Call to sort(...): (line 706)
    # Processing the call arguments (line 706)
    # Getting the type of 'x' (line 706)
    x_566994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 15), 'x', False)
    # Processing the call keyword arguments (line 706)
    kwargs_566995 = {}
    # Getting the type of 'sort' (line 706)
    sort_566993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 10), 'sort', False)
    # Calling sort(args, kwargs) (line 706)
    sort_call_result_566996 = invoke(stypy.reporting.localization.Localization(__file__, 706, 10), sort_566993, *[x_566994], **kwargs_566995)
    
    # Assigning a type to the variable 'osr' (line 706)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 4), 'osr', sort_call_result_566996)

    @norecursion
    def tempfunc(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tempfunc'
        module_type_store = module_type_store.open_function_context('tempfunc', 712, 4, False)
        
        # Passed parameters checking function
        tempfunc.stypy_localization = localization
        tempfunc.stypy_type_of_self = None
        tempfunc.stypy_type_store = module_type_store
        tempfunc.stypy_function_name = 'tempfunc'
        tempfunc.stypy_param_names_list = ['shape', 'mi', 'yvals', 'func']
        tempfunc.stypy_varargs_param_name = None
        tempfunc.stypy_kwargs_param_name = None
        tempfunc.stypy_call_defaults = defaults
        tempfunc.stypy_call_varargs = varargs
        tempfunc.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'tempfunc', ['shape', 'mi', 'yvals', 'func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tempfunc', localization, ['shape', 'mi', 'yvals', 'func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tempfunc(...)' code ##################

        
        # Assigning a Call to a Name (line 713):
        
        # Assigning a Call to a Name (line 713):
        
        # Call to func(...): (line 713)
        # Processing the call arguments (line 713)
        # Getting the type of 'mi' (line 713)
        mi_566998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 21), 'mi', False)
        # Getting the type of 'shape' (line 713)
        shape_566999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 25), 'shape', False)
        # Processing the call keyword arguments (line 713)
        kwargs_567000 = {}
        # Getting the type of 'func' (line 713)
        func_566997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 16), 'func', False)
        # Calling func(args, kwargs) (line 713)
        func_call_result_567001 = invoke(stypy.reporting.localization.Localization(__file__, 713, 16), func_566997, *[mi_566998, shape_566999], **kwargs_567000)
        
        # Assigning a type to the variable 'xvals' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'xvals', func_call_result_567001)
        
        # Assigning a Call to a Tuple (line 714):
        
        # Assigning a Subscript to a Name (line 714):
        
        # Obtaining the type of the subscript
        int_567002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 8), 'int')
        
        # Call to pearsonr(...): (line 714)
        # Processing the call arguments (line 714)
        # Getting the type of 'xvals' (line 714)
        xvals_567005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 33), 'xvals', False)
        # Getting the type of 'yvals' (line 714)
        yvals_567006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 40), 'yvals', False)
        # Processing the call keyword arguments (line 714)
        kwargs_567007 = {}
        # Getting the type of 'stats' (line 714)
        stats_567003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 18), 'stats', False)
        # Obtaining the member 'pearsonr' of a type (line 714)
        pearsonr_567004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 18), stats_567003, 'pearsonr')
        # Calling pearsonr(args, kwargs) (line 714)
        pearsonr_call_result_567008 = invoke(stypy.reporting.localization.Localization(__file__, 714, 18), pearsonr_567004, *[xvals_567005, yvals_567006], **kwargs_567007)
        
        # Obtaining the member '__getitem__' of a type (line 714)
        getitem___567009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 8), pearsonr_call_result_567008, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 714)
        subscript_call_result_567010 = invoke(stypy.reporting.localization.Localization(__file__, 714, 8), getitem___567009, int_567002)
        
        # Assigning a type to the variable 'tuple_var_assignment_566019' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'tuple_var_assignment_566019', subscript_call_result_567010)
        
        # Assigning a Subscript to a Name (line 714):
        
        # Obtaining the type of the subscript
        int_567011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 8), 'int')
        
        # Call to pearsonr(...): (line 714)
        # Processing the call arguments (line 714)
        # Getting the type of 'xvals' (line 714)
        xvals_567014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 33), 'xvals', False)
        # Getting the type of 'yvals' (line 714)
        yvals_567015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 40), 'yvals', False)
        # Processing the call keyword arguments (line 714)
        kwargs_567016 = {}
        # Getting the type of 'stats' (line 714)
        stats_567012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 18), 'stats', False)
        # Obtaining the member 'pearsonr' of a type (line 714)
        pearsonr_567013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 18), stats_567012, 'pearsonr')
        # Calling pearsonr(args, kwargs) (line 714)
        pearsonr_call_result_567017 = invoke(stypy.reporting.localization.Localization(__file__, 714, 18), pearsonr_567013, *[xvals_567014, yvals_567015], **kwargs_567016)
        
        # Obtaining the member '__getitem__' of a type (line 714)
        getitem___567018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 8), pearsonr_call_result_567017, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 714)
        subscript_call_result_567019 = invoke(stypy.reporting.localization.Localization(__file__, 714, 8), getitem___567018, int_567011)
        
        # Assigning a type to the variable 'tuple_var_assignment_566020' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'tuple_var_assignment_566020', subscript_call_result_567019)
        
        # Assigning a Name to a Name (line 714):
        # Getting the type of 'tuple_var_assignment_566019' (line 714)
        tuple_var_assignment_566019_567020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'tuple_var_assignment_566019')
        # Assigning a type to the variable 'r' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'r', tuple_var_assignment_566019_567020)
        
        # Assigning a Name to a Name (line 714):
        # Getting the type of 'tuple_var_assignment_566020' (line 714)
        tuple_var_assignment_566020_567021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'tuple_var_assignment_566020')
        # Assigning a type to the variable 'prob' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 11), 'prob', tuple_var_assignment_566020_567021)
        int_567022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 15), 'int')
        # Getting the type of 'r' (line 715)
        r_567023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 19), 'r')
        # Applying the binary operator '-' (line 715)
        result_sub_567024 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 15), '-', int_567022, r_567023)
        
        # Assigning a type to the variable 'stypy_return_type' (line 715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 8), 'stypy_return_type', result_sub_567024)
        
        # ################# End of 'tempfunc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tempfunc' in the type store
        # Getting the type of 'stypy_return_type' (line 712)
        stypy_return_type_567025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_567025)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tempfunc'
        return stypy_return_type_567025

    # Assigning a type to the variable 'tempfunc' (line 712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 4), 'tempfunc', tempfunc)
    
    # Call to brent(...): (line 717)
    # Processing the call arguments (line 717)
    # Getting the type of 'tempfunc' (line 717)
    tempfunc_567028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 26), 'tempfunc', False)
    # Processing the call keyword arguments (line 717)
    # Getting the type of 'brack' (line 717)
    brack_567029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 42), 'brack', False)
    keyword_567030 = brack_567029
    
    # Obtaining an instance of the builtin type 'tuple' (line 717)
    tuple_567031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 55), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 717)
    # Adding element type (line 717)
    # Getting the type of 'osm_uniform' (line 717)
    osm_uniform_567032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 55), 'osm_uniform', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 717, 55), tuple_567031, osm_uniform_567032)
    # Adding element type (line 717)
    # Getting the type of 'osr' (line 717)
    osr_567033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 68), 'osr', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 717, 55), tuple_567031, osr_567033)
    # Adding element type (line 717)
    # Getting the type of 'dist' (line 717)
    dist_567034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 73), 'dist', False)
    # Obtaining the member 'ppf' of a type (line 717)
    ppf_567035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 73), dist_567034, 'ppf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 717, 55), tuple_567031, ppf_567035)
    
    keyword_567036 = tuple_567031
    kwargs_567037 = {'brack': keyword_567030, 'args': keyword_567036}
    # Getting the type of 'optimize' (line 717)
    optimize_567026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 11), 'optimize', False)
    # Obtaining the member 'brent' of a type (line 717)
    brent_567027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 11), optimize_567026, 'brent')
    # Calling brent(args, kwargs) (line 717)
    brent_call_result_567038 = invoke(stypy.reporting.localization.Localization(__file__, 717, 11), brent_567027, *[tempfunc_567028], **kwargs_567037)
    
    # Assigning a type to the variable 'stypy_return_type' (line 717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 4), 'stypy_return_type', brent_call_result_567038)
    
    # ################# End of 'ppcc_max(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ppcc_max' in the type store
    # Getting the type of 'stypy_return_type' (line 629)
    stypy_return_type_567039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_567039)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ppcc_max'
    return stypy_return_type_567039

# Assigning a type to the variable 'ppcc_max' (line 629)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 0), 'ppcc_max', ppcc_max)

@norecursion
def ppcc_plot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_567040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 28), 'str', 'tukeylambda')
    # Getting the type of 'None' (line 720)
    None_567041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 48), 'None')
    int_567042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 56), 'int')
    defaults = [str_567040, None_567041, int_567042]
    # Create a new context for function 'ppcc_plot'
    module_type_store = module_type_store.open_function_context('ppcc_plot', 720, 0, False)
    
    # Passed parameters checking function
    ppcc_plot.stypy_localization = localization
    ppcc_plot.stypy_type_of_self = None
    ppcc_plot.stypy_type_store = module_type_store
    ppcc_plot.stypy_function_name = 'ppcc_plot'
    ppcc_plot.stypy_param_names_list = ['x', 'a', 'b', 'dist', 'plot', 'N']
    ppcc_plot.stypy_varargs_param_name = None
    ppcc_plot.stypy_kwargs_param_name = None
    ppcc_plot.stypy_call_defaults = defaults
    ppcc_plot.stypy_call_varargs = varargs
    ppcc_plot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ppcc_plot', ['x', 'a', 'b', 'dist', 'plot', 'N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ppcc_plot', localization, ['x', 'a', 'b', 'dist', 'plot', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ppcc_plot(...)' code ##################

    str_567043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, (-1)), 'str', '\n    Calculate and optionally plot probability plot correlation coefficient.\n\n    The probability plot correlation coefficient (PPCC) plot can be used to\n    determine the optimal shape parameter for a one-parameter family of\n    distributions.  It cannot be used for distributions without shape parameters\n    (like the normal distribution) or with multiple shape parameters.\n\n    By default a Tukey-Lambda distribution (`stats.tukeylambda`) is used. A\n    Tukey-Lambda PPCC plot interpolates from long-tailed to short-tailed\n    distributions via an approximately normal one, and is therefore particularly\n    useful in practice.\n\n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    a, b: scalar\n        Lower and upper bounds of the shape parameter to use.\n    dist : str or stats.distributions instance, optional\n        Distribution or distribution function name.  Objects that look enough\n        like a stats.distributions instance (i.e. they have a ``ppf`` method)\n        are also accepted.  The default is ``\'tukeylambda\'``.\n    plot : object, optional\n        If given, plots PPCC against the shape parameter.\n        `plot` is an object that has to have methods "plot" and "text".\n        The `matplotlib.pyplot` module or a Matplotlib Axes object can be used,\n        or a custom object with the same methods.\n        Default is None, which means that no plot is created.\n    N : int, optional\n        Number of points on the horizontal axis (equally distributed from\n        `a` to `b`).\n\n    Returns\n    -------\n    svals : ndarray\n        The shape values for which `ppcc` was calculated.\n    ppcc : ndarray\n        The calculated probability plot correlation coefficient values.\n\n    See also\n    --------\n    ppcc_max, probplot, boxcox_normplot, tukeylambda\n\n    References\n    ----------\n    J.J. Filliben, "The Probability Plot Correlation Coefficient Test for\n    Normality", Technometrics, Vol. 17, pp. 111-117, 1975.\n\n    Examples\n    --------\n    First we generate some random data from a Tukey-Lambda distribution,\n    with shape parameter -0.7:\n\n    >>> from scipy import stats\n    >>> import matplotlib.pyplot as plt\n    >>> np.random.seed(1234567)\n    >>> x = stats.tukeylambda.rvs(-0.7, loc=2, scale=0.5, size=10000) + 1e4\n\n    Now we explore this data with a PPCC plot as well as the related\n    probability plot and Box-Cox normplot.  A red line is drawn where we\n    expect the PPCC value to be maximal (at the shape parameter -0.7 used\n    above):\n\n    >>> fig = plt.figure(figsize=(12, 4))\n    >>> ax1 = fig.add_subplot(131)\n    >>> ax2 = fig.add_subplot(132)\n    >>> ax3 = fig.add_subplot(133)\n    >>> res = stats.probplot(x, plot=ax1)\n    >>> res = stats.boxcox_normplot(x, -5, 5, plot=ax2)\n    >>> res = stats.ppcc_plot(x, -5, 5, plot=ax3)\n    >>> ax3.vlines(-0.7, 0, 1, colors=\'r\', label=\'Expected shape value\')\n    >>> plt.show()\n\n    ')
    
    
    # Getting the type of 'b' (line 796)
    b_567044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 7), 'b')
    # Getting the type of 'a' (line 796)
    a_567045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 12), 'a')
    # Applying the binary operator '<=' (line 796)
    result_le_567046 = python_operator(stypy.reporting.localization.Localization(__file__, 796, 7), '<=', b_567044, a_567045)
    
    # Testing the type of an if condition (line 796)
    if_condition_567047 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 796, 4), result_le_567046)
    # Assigning a type to the variable 'if_condition_567047' (line 796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'if_condition_567047', if_condition_567047)
    # SSA begins for if statement (line 796)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 797)
    # Processing the call arguments (line 797)
    str_567049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 25), 'str', '`b` has to be larger than `a`.')
    # Processing the call keyword arguments (line 797)
    kwargs_567050 = {}
    # Getting the type of 'ValueError' (line 797)
    ValueError_567048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 797)
    ValueError_call_result_567051 = invoke(stypy.reporting.localization.Localization(__file__, 797, 14), ValueError_567048, *[str_567049], **kwargs_567050)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 797, 8), ValueError_call_result_567051, 'raise parameter', BaseException)
    # SSA join for if statement (line 796)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 799):
    
    # Assigning a Call to a Name (line 799):
    
    # Call to linspace(...): (line 799)
    # Processing the call arguments (line 799)
    # Getting the type of 'a' (line 799)
    a_567054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 24), 'a', False)
    # Getting the type of 'b' (line 799)
    b_567055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 27), 'b', False)
    # Processing the call keyword arguments (line 799)
    # Getting the type of 'N' (line 799)
    N_567056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 34), 'N', False)
    keyword_567057 = N_567056
    kwargs_567058 = {'num': keyword_567057}
    # Getting the type of 'np' (line 799)
    np_567052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'np', False)
    # Obtaining the member 'linspace' of a type (line 799)
    linspace_567053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 12), np_567052, 'linspace')
    # Calling linspace(args, kwargs) (line 799)
    linspace_call_result_567059 = invoke(stypy.reporting.localization.Localization(__file__, 799, 12), linspace_567053, *[a_567054, b_567055], **kwargs_567058)
    
    # Assigning a type to the variable 'svals' (line 799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 4), 'svals', linspace_call_result_567059)
    
    # Assigning a Call to a Name (line 800):
    
    # Assigning a Call to a Name (line 800):
    
    # Call to empty_like(...): (line 800)
    # Processing the call arguments (line 800)
    # Getting the type of 'svals' (line 800)
    svals_567062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 25), 'svals', False)
    # Processing the call keyword arguments (line 800)
    kwargs_567063 = {}
    # Getting the type of 'np' (line 800)
    np_567060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 11), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 800)
    empty_like_567061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 11), np_567060, 'empty_like')
    # Calling empty_like(args, kwargs) (line 800)
    empty_like_call_result_567064 = invoke(stypy.reporting.localization.Localization(__file__, 800, 11), empty_like_567061, *[svals_567062], **kwargs_567063)
    
    # Assigning a type to the variable 'ppcc' (line 800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 4), 'ppcc', empty_like_call_result_567064)
    
    
    # Call to enumerate(...): (line 801)
    # Processing the call arguments (line 801)
    # Getting the type of 'svals' (line 801)
    svals_567066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 29), 'svals', False)
    # Processing the call keyword arguments (line 801)
    kwargs_567067 = {}
    # Getting the type of 'enumerate' (line 801)
    enumerate_567065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 19), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 801)
    enumerate_call_result_567068 = invoke(stypy.reporting.localization.Localization(__file__, 801, 19), enumerate_567065, *[svals_567066], **kwargs_567067)
    
    # Testing the type of a for loop iterable (line 801)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 801, 4), enumerate_call_result_567068)
    # Getting the type of the for loop variable (line 801)
    for_loop_var_567069 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 801, 4), enumerate_call_result_567068)
    # Assigning a type to the variable 'k' (line 801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 4), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 801, 4), for_loop_var_567069))
    # Assigning a type to the variable 'sval' (line 801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 4), 'sval', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 801, 4), for_loop_var_567069))
    # SSA begins for a for statement (line 801)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Tuple (line 802):
    
    # Assigning a Subscript to a Name (line 802):
    
    # Obtaining the type of the subscript
    int_567070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 8), 'int')
    
    # Call to probplot(...): (line 802)
    # Processing the call arguments (line 802)
    # Getting the type of 'x' (line 802)
    x_567072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 25), 'x', False)
    # Getting the type of 'sval' (line 802)
    sval_567073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 28), 'sval', False)
    # Processing the call keyword arguments (line 802)
    # Getting the type of 'dist' (line 802)
    dist_567074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 39), 'dist', False)
    keyword_567075 = dist_567074
    # Getting the type of 'True' (line 802)
    True_567076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 49), 'True', False)
    keyword_567077 = True_567076
    kwargs_567078 = {'dist': keyword_567075, 'fit': keyword_567077}
    # Getting the type of 'probplot' (line 802)
    probplot_567071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 16), 'probplot', False)
    # Calling probplot(args, kwargs) (line 802)
    probplot_call_result_567079 = invoke(stypy.reporting.localization.Localization(__file__, 802, 16), probplot_567071, *[x_567072, sval_567073], **kwargs_567078)
    
    # Obtaining the member '__getitem__' of a type (line 802)
    getitem___567080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 8), probplot_call_result_567079, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 802)
    subscript_call_result_567081 = invoke(stypy.reporting.localization.Localization(__file__, 802, 8), getitem___567080, int_567070)
    
    # Assigning a type to the variable 'tuple_var_assignment_566021' (line 802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'tuple_var_assignment_566021', subscript_call_result_567081)
    
    # Assigning a Subscript to a Name (line 802):
    
    # Obtaining the type of the subscript
    int_567082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 8), 'int')
    
    # Call to probplot(...): (line 802)
    # Processing the call arguments (line 802)
    # Getting the type of 'x' (line 802)
    x_567084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 25), 'x', False)
    # Getting the type of 'sval' (line 802)
    sval_567085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 28), 'sval', False)
    # Processing the call keyword arguments (line 802)
    # Getting the type of 'dist' (line 802)
    dist_567086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 39), 'dist', False)
    keyword_567087 = dist_567086
    # Getting the type of 'True' (line 802)
    True_567088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 49), 'True', False)
    keyword_567089 = True_567088
    kwargs_567090 = {'dist': keyword_567087, 'fit': keyword_567089}
    # Getting the type of 'probplot' (line 802)
    probplot_567083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 16), 'probplot', False)
    # Calling probplot(args, kwargs) (line 802)
    probplot_call_result_567091 = invoke(stypy.reporting.localization.Localization(__file__, 802, 16), probplot_567083, *[x_567084, sval_567085], **kwargs_567090)
    
    # Obtaining the member '__getitem__' of a type (line 802)
    getitem___567092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 8), probplot_call_result_567091, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 802)
    subscript_call_result_567093 = invoke(stypy.reporting.localization.Localization(__file__, 802, 8), getitem___567092, int_567082)
    
    # Assigning a type to the variable 'tuple_var_assignment_566022' (line 802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'tuple_var_assignment_566022', subscript_call_result_567093)
    
    # Assigning a Name to a Name (line 802):
    # Getting the type of 'tuple_var_assignment_566021' (line 802)
    tuple_var_assignment_566021_567094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'tuple_var_assignment_566021')
    # Assigning a type to the variable '_' (line 802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), '_', tuple_var_assignment_566021_567094)
    
    # Assigning a Name to a Name (line 802):
    # Getting the type of 'tuple_var_assignment_566022' (line 802)
    tuple_var_assignment_566022_567095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'tuple_var_assignment_566022')
    # Assigning a type to the variable 'r2' (line 802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 11), 'r2', tuple_var_assignment_566022_567095)
    
    # Assigning a Subscript to a Subscript (line 803):
    
    # Assigning a Subscript to a Subscript (line 803):
    
    # Obtaining the type of the subscript
    int_567096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 21), 'int')
    # Getting the type of 'r2' (line 803)
    r2_567097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 18), 'r2')
    # Obtaining the member '__getitem__' of a type (line 803)
    getitem___567098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 18), r2_567097, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 803)
    subscript_call_result_567099 = invoke(stypy.reporting.localization.Localization(__file__, 803, 18), getitem___567098, int_567096)
    
    # Getting the type of 'ppcc' (line 803)
    ppcc_567100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'ppcc')
    # Getting the type of 'k' (line 803)
    k_567101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 13), 'k')
    # Storing an element on a container (line 803)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 8), ppcc_567100, (k_567101, subscript_call_result_567099))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 805)
    # Getting the type of 'plot' (line 805)
    plot_567102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 4), 'plot')
    # Getting the type of 'None' (line 805)
    None_567103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 19), 'None')
    
    (may_be_567104, more_types_in_union_567105) = may_not_be_none(plot_567102, None_567103)

    if may_be_567104:

        if more_types_in_union_567105:
            # Runtime conditional SSA (line 805)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to plot(...): (line 806)
        # Processing the call arguments (line 806)
        # Getting the type of 'svals' (line 806)
        svals_567108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 18), 'svals', False)
        # Getting the type of 'ppcc' (line 806)
        ppcc_567109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 25), 'ppcc', False)
        str_567110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 31), 'str', 'x')
        # Processing the call keyword arguments (line 806)
        kwargs_567111 = {}
        # Getting the type of 'plot' (line 806)
        plot_567106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'plot', False)
        # Obtaining the member 'plot' of a type (line 806)
        plot_567107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 8), plot_567106, 'plot')
        # Calling plot(args, kwargs) (line 806)
        plot_call_result_567112 = invoke(stypy.reporting.localization.Localization(__file__, 806, 8), plot_567107, *[svals_567108, ppcc_567109, str_567110], **kwargs_567111)
        
        
        # Call to _add_axis_labels_title(...): (line 807)
        # Processing the call arguments (line 807)
        # Getting the type of 'plot' (line 807)
        plot_567114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 31), 'plot', False)
        # Processing the call keyword arguments (line 807)
        str_567115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 44), 'str', 'Shape Values')
        keyword_567116 = str_567115
        str_567117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 38), 'str', 'Prob Plot Corr. Coef.')
        keyword_567118 = str_567117
        str_567119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 37), 'str', '(%s) PPCC Plot')
        # Getting the type of 'dist' (line 809)
        dist_567120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 56), 'dist', False)
        # Applying the binary operator '%' (line 809)
        result_mod_567121 = python_operator(stypy.reporting.localization.Localization(__file__, 809, 37), '%', str_567119, dist_567120)
        
        keyword_567122 = result_mod_567121
        kwargs_567123 = {'title': keyword_567122, 'xlabel': keyword_567116, 'ylabel': keyword_567118}
        # Getting the type of '_add_axis_labels_title' (line 807)
        _add_axis_labels_title_567113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 8), '_add_axis_labels_title', False)
        # Calling _add_axis_labels_title(args, kwargs) (line 807)
        _add_axis_labels_title_call_result_567124 = invoke(stypy.reporting.localization.Localization(__file__, 807, 8), _add_axis_labels_title_567113, *[plot_567114], **kwargs_567123)
        

        if more_types_in_union_567105:
            # SSA join for if statement (line 805)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 811)
    tuple_567125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 811)
    # Adding element type (line 811)
    # Getting the type of 'svals' (line 811)
    svals_567126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 11), 'svals')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 11), tuple_567125, svals_567126)
    # Adding element type (line 811)
    # Getting the type of 'ppcc' (line 811)
    ppcc_567127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 18), 'ppcc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 11), tuple_567125, ppcc_567127)
    
    # Assigning a type to the variable 'stypy_return_type' (line 811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 4), 'stypy_return_type', tuple_567125)
    
    # ################# End of 'ppcc_plot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ppcc_plot' in the type store
    # Getting the type of 'stypy_return_type' (line 720)
    stypy_return_type_567128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_567128)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ppcc_plot'
    return stypy_return_type_567128

# Assigning a type to the variable 'ppcc_plot' (line 720)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 0), 'ppcc_plot', ppcc_plot)

@norecursion
def boxcox_llf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'boxcox_llf'
    module_type_store = module_type_store.open_function_context('boxcox_llf', 814, 0, False)
    
    # Passed parameters checking function
    boxcox_llf.stypy_localization = localization
    boxcox_llf.stypy_type_of_self = None
    boxcox_llf.stypy_type_store = module_type_store
    boxcox_llf.stypy_function_name = 'boxcox_llf'
    boxcox_llf.stypy_param_names_list = ['lmb', 'data']
    boxcox_llf.stypy_varargs_param_name = None
    boxcox_llf.stypy_kwargs_param_name = None
    boxcox_llf.stypy_call_defaults = defaults
    boxcox_llf.stypy_call_varargs = varargs
    boxcox_llf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'boxcox_llf', ['lmb', 'data'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'boxcox_llf', localization, ['lmb', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'boxcox_llf(...)' code ##################

    str_567129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, (-1)), 'str', 'The boxcox log-likelihood function.\n\n    Parameters\n    ----------\n    lmb : scalar\n        Parameter for Box-Cox transformation.  See `boxcox` for details.\n    data : array_like\n        Data to calculate Box-Cox log-likelihood for.  If `data` is\n        multi-dimensional, the log-likelihood is calculated along the first\n        axis.\n\n    Returns\n    -------\n    llf : float or ndarray\n        Box-Cox log-likelihood of `data` given `lmb`.  A float for 1-D `data`,\n        an array otherwise.\n\n    See Also\n    --------\n    boxcox, probplot, boxcox_normplot, boxcox_normmax\n\n    Notes\n    -----\n    The Box-Cox log-likelihood function is defined here as\n\n    .. math::\n\n        llf = (\\lambda - 1) \\sum_i(\\log(x_i)) -\n              N/2 \\log(\\sum_i (y_i - \\bar{y})^2 / N),\n\n    where ``y`` is the Box-Cox transformed input data ``x``.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> import matplotlib.pyplot as plt\n    >>> from mpl_toolkits.axes_grid1.inset_locator import inset_axes\n    >>> np.random.seed(1245)\n\n    Generate some random variates and calculate Box-Cox log-likelihood values\n    for them for a range of ``lmbda`` values:\n\n    >>> x = stats.loggamma.rvs(5, loc=10, size=1000)\n    >>> lmbdas = np.linspace(-2, 10)\n    >>> llf = np.zeros(lmbdas.shape, dtype=float)\n    >>> for ii, lmbda in enumerate(lmbdas):\n    ...     llf[ii] = stats.boxcox_llf(lmbda, x)\n\n    Also find the optimal lmbda value with `boxcox`:\n\n    >>> x_most_normal, lmbda_optimal = stats.boxcox(x)\n\n    Plot the log-likelihood as function of lmbda.  Add the optimal lmbda as a\n    horizontal line to check that that\'s really the optimum:\n\n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(111)\n    >>> ax.plot(lmbdas, llf, \'b.-\')\n    >>> ax.axhline(stats.boxcox_llf(lmbda_optimal, x), color=\'r\')\n    >>> ax.set_xlabel(\'lmbda parameter\')\n    >>> ax.set_ylabel(\'Box-Cox log-likelihood\')\n\n    Now add some probability plots to show that where the log-likelihood is\n    maximized the data transformed with `boxcox` looks closest to normal:\n\n    >>> locs = [3, 10, 4]  # \'lower left\', \'center\', \'lower right\'\n    >>> for lmbda, loc in zip([-1, lmbda_optimal, 9], locs):\n    ...     xt = stats.boxcox(x, lmbda=lmbda)\n    ...     (osm, osr), (slope, intercept, r_sq) = stats.probplot(xt)\n    ...     ax_inset = inset_axes(ax, width="20%", height="20%", loc=loc)\n    ...     ax_inset.plot(osm, osr, \'c.\', osm, slope*osm + intercept, \'k-\')\n    ...     ax_inset.set_xticklabels([])\n    ...     ax_inset.set_yticklabels([])\n    ...     ax_inset.set_title(\'$\\lambda=%1.2f$\' % lmbda)\n\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Name (line 893):
    
    # Assigning a Call to a Name (line 893):
    
    # Call to asarray(...): (line 893)
    # Processing the call arguments (line 893)
    # Getting the type of 'data' (line 893)
    data_567132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 22), 'data', False)
    # Processing the call keyword arguments (line 893)
    kwargs_567133 = {}
    # Getting the type of 'np' (line 893)
    np_567130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 11), 'np', False)
    # Obtaining the member 'asarray' of a type (line 893)
    asarray_567131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 11), np_567130, 'asarray')
    # Calling asarray(args, kwargs) (line 893)
    asarray_call_result_567134 = invoke(stypy.reporting.localization.Localization(__file__, 893, 11), asarray_567131, *[data_567132], **kwargs_567133)
    
    # Assigning a type to the variable 'data' (line 893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 4), 'data', asarray_call_result_567134)
    
    # Assigning a Subscript to a Name (line 894):
    
    # Assigning a Subscript to a Name (line 894):
    
    # Obtaining the type of the subscript
    int_567135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 19), 'int')
    # Getting the type of 'data' (line 894)
    data_567136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'data')
    # Obtaining the member 'shape' of a type (line 894)
    shape_567137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 8), data_567136, 'shape')
    # Obtaining the member '__getitem__' of a type (line 894)
    getitem___567138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 8), shape_567137, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 894)
    subscript_call_result_567139 = invoke(stypy.reporting.localization.Localization(__file__, 894, 8), getitem___567138, int_567135)
    
    # Assigning a type to the variable 'N' (line 894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 4), 'N', subscript_call_result_567139)
    
    
    # Getting the type of 'N' (line 895)
    N_567140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 7), 'N')
    int_567141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 12), 'int')
    # Applying the binary operator '==' (line 895)
    result_eq_567142 = python_operator(stypy.reporting.localization.Localization(__file__, 895, 7), '==', N_567140, int_567141)
    
    # Testing the type of an if condition (line 895)
    if_condition_567143 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 895, 4), result_eq_567142)
    # Assigning a type to the variable 'if_condition_567143' (line 895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 4), 'if_condition_567143', if_condition_567143)
    # SSA begins for if statement (line 895)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'np' (line 896)
    np_567144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 15), 'np')
    # Obtaining the member 'nan' of a type (line 896)
    nan_567145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 15), np_567144, 'nan')
    # Assigning a type to the variable 'stypy_return_type' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'stypy_return_type', nan_567145)
    # SSA join for if statement (line 895)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 898):
    
    # Assigning a Call to a Name (line 898):
    
    # Call to boxcox(...): (line 898)
    # Processing the call arguments (line 898)
    # Getting the type of 'data' (line 898)
    data_567147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 15), 'data', False)
    # Getting the type of 'lmb' (line 898)
    lmb_567148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 21), 'lmb', False)
    # Processing the call keyword arguments (line 898)
    kwargs_567149 = {}
    # Getting the type of 'boxcox' (line 898)
    boxcox_567146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 8), 'boxcox', False)
    # Calling boxcox(args, kwargs) (line 898)
    boxcox_call_result_567150 = invoke(stypy.reporting.localization.Localization(__file__, 898, 8), boxcox_567146, *[data_567147, lmb_567148], **kwargs_567149)
    
    # Assigning a type to the variable 'y' (line 898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 4), 'y', boxcox_call_result_567150)
    
    # Assigning a Call to a Name (line 899):
    
    # Assigning a Call to a Name (line 899):
    
    # Call to mean(...): (line 899)
    # Processing the call arguments (line 899)
    # Getting the type of 'y' (line 899)
    y_567153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 21), 'y', False)
    # Processing the call keyword arguments (line 899)
    int_567154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 29), 'int')
    keyword_567155 = int_567154
    kwargs_567156 = {'axis': keyword_567155}
    # Getting the type of 'np' (line 899)
    np_567151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 13), 'np', False)
    # Obtaining the member 'mean' of a type (line 899)
    mean_567152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 13), np_567151, 'mean')
    # Calling mean(args, kwargs) (line 899)
    mean_call_result_567157 = invoke(stypy.reporting.localization.Localization(__file__, 899, 13), mean_567152, *[y_567153], **kwargs_567156)
    
    # Assigning a type to the variable 'y_mean' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'y_mean', mean_call_result_567157)
    
    # Assigning a BinOp to a Name (line 900):
    
    # Assigning a BinOp to a Name (line 900):
    # Getting the type of 'lmb' (line 900)
    lmb_567158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 11), 'lmb')
    int_567159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, 17), 'int')
    # Applying the binary operator '-' (line 900)
    result_sub_567160 = python_operator(stypy.reporting.localization.Localization(__file__, 900, 11), '-', lmb_567158, int_567159)
    
    
    # Call to sum(...): (line 900)
    # Processing the call arguments (line 900)
    
    # Call to log(...): (line 900)
    # Processing the call arguments (line 900)
    # Getting the type of 'data' (line 900)
    data_567165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 36), 'data', False)
    # Processing the call keyword arguments (line 900)
    kwargs_567166 = {}
    # Getting the type of 'np' (line 900)
    np_567163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 29), 'np', False)
    # Obtaining the member 'log' of a type (line 900)
    log_567164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 29), np_567163, 'log')
    # Calling log(args, kwargs) (line 900)
    log_call_result_567167 = invoke(stypy.reporting.localization.Localization(__file__, 900, 29), log_567164, *[data_567165], **kwargs_567166)
    
    # Processing the call keyword arguments (line 900)
    int_567168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, 48), 'int')
    keyword_567169 = int_567168
    kwargs_567170 = {'axis': keyword_567169}
    # Getting the type of 'np' (line 900)
    np_567161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 22), 'np', False)
    # Obtaining the member 'sum' of a type (line 900)
    sum_567162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 22), np_567161, 'sum')
    # Calling sum(args, kwargs) (line 900)
    sum_call_result_567171 = invoke(stypy.reporting.localization.Localization(__file__, 900, 22), sum_567162, *[log_call_result_567167], **kwargs_567170)
    
    # Applying the binary operator '*' (line 900)
    result_mul_567172 = python_operator(stypy.reporting.localization.Localization(__file__, 900, 10), '*', result_sub_567160, sum_call_result_567171)
    
    # Assigning a type to the variable 'llf' (line 900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 4), 'llf', result_mul_567172)
    
    # Getting the type of 'llf' (line 901)
    llf_567173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 4), 'llf')
    # Getting the type of 'N' (line 901)
    N_567174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 11), 'N')
    float_567175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 15), 'float')
    # Applying the binary operator 'div' (line 901)
    result_div_567176 = python_operator(stypy.reporting.localization.Localization(__file__, 901, 11), 'div', N_567174, float_567175)
    
    
    # Call to log(...): (line 901)
    # Processing the call arguments (line 901)
    
    # Call to sum(...): (line 901)
    # Processing the call arguments (line 901)
    # Getting the type of 'y' (line 901)
    y_567181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 36), 'y', False)
    # Getting the type of 'y_mean' (line 901)
    y_mean_567182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 40), 'y_mean', False)
    # Applying the binary operator '-' (line 901)
    result_sub_567183 = python_operator(stypy.reporting.localization.Localization(__file__, 901, 36), '-', y_567181, y_mean_567182)
    
    float_567184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 49), 'float')
    # Applying the binary operator '**' (line 901)
    result_pow_567185 = python_operator(stypy.reporting.localization.Localization(__file__, 901, 35), '**', result_sub_567183, float_567184)
    
    # Getting the type of 'N' (line 901)
    N_567186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 54), 'N', False)
    # Applying the binary operator 'div' (line 901)
    result_div_567187 = python_operator(stypy.reporting.localization.Localization(__file__, 901, 35), 'div', result_pow_567185, N_567186)
    
    # Processing the call keyword arguments (line 901)
    int_567188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 62), 'int')
    keyword_567189 = int_567188
    kwargs_567190 = {'axis': keyword_567189}
    # Getting the type of 'np' (line 901)
    np_567179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 28), 'np', False)
    # Obtaining the member 'sum' of a type (line 901)
    sum_567180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 28), np_567179, 'sum')
    # Calling sum(args, kwargs) (line 901)
    sum_call_result_567191 = invoke(stypy.reporting.localization.Localization(__file__, 901, 28), sum_567180, *[result_div_567187], **kwargs_567190)
    
    # Processing the call keyword arguments (line 901)
    kwargs_567192 = {}
    # Getting the type of 'np' (line 901)
    np_567177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 21), 'np', False)
    # Obtaining the member 'log' of a type (line 901)
    log_567178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 21), np_567177, 'log')
    # Calling log(args, kwargs) (line 901)
    log_call_result_567193 = invoke(stypy.reporting.localization.Localization(__file__, 901, 21), log_567178, *[sum_call_result_567191], **kwargs_567192)
    
    # Applying the binary operator '*' (line 901)
    result_mul_567194 = python_operator(stypy.reporting.localization.Localization(__file__, 901, 19), '*', result_div_567176, log_call_result_567193)
    
    # Applying the binary operator '-=' (line 901)
    result_isub_567195 = python_operator(stypy.reporting.localization.Localization(__file__, 901, 4), '-=', llf_567173, result_mul_567194)
    # Assigning a type to the variable 'llf' (line 901)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 4), 'llf', result_isub_567195)
    
    # Getting the type of 'llf' (line 902)
    llf_567196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 11), 'llf')
    # Assigning a type to the variable 'stypy_return_type' (line 902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 4), 'stypy_return_type', llf_567196)
    
    # ################# End of 'boxcox_llf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'boxcox_llf' in the type store
    # Getting the type of 'stypy_return_type' (line 814)
    stypy_return_type_567197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_567197)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'boxcox_llf'
    return stypy_return_type_567197

# Assigning a type to the variable 'boxcox_llf' (line 814)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 0), 'boxcox_llf', boxcox_llf)

@norecursion
def _boxcox_conf_interval(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_boxcox_conf_interval'
    module_type_store = module_type_store.open_function_context('_boxcox_conf_interval', 905, 0, False)
    
    # Passed parameters checking function
    _boxcox_conf_interval.stypy_localization = localization
    _boxcox_conf_interval.stypy_type_of_self = None
    _boxcox_conf_interval.stypy_type_store = module_type_store
    _boxcox_conf_interval.stypy_function_name = '_boxcox_conf_interval'
    _boxcox_conf_interval.stypy_param_names_list = ['x', 'lmax', 'alpha']
    _boxcox_conf_interval.stypy_varargs_param_name = None
    _boxcox_conf_interval.stypy_kwargs_param_name = None
    _boxcox_conf_interval.stypy_call_defaults = defaults
    _boxcox_conf_interval.stypy_call_varargs = varargs
    _boxcox_conf_interval.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_boxcox_conf_interval', ['x', 'lmax', 'alpha'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_boxcox_conf_interval', localization, ['x', 'lmax', 'alpha'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_boxcox_conf_interval(...)' code ##################

    
    # Assigning a BinOp to a Name (line 908):
    
    # Assigning a BinOp to a Name (line 908):
    float_567198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 10), 'float')
    
    # Call to ppf(...): (line 908)
    # Processing the call arguments (line 908)
    int_567202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 39), 'int')
    # Getting the type of 'alpha' (line 908)
    alpha_567203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 43), 'alpha', False)
    # Applying the binary operator '-' (line 908)
    result_sub_567204 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 39), '-', int_567202, alpha_567203)
    
    int_567205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 50), 'int')
    # Processing the call keyword arguments (line 908)
    kwargs_567206 = {}
    # Getting the type of 'distributions' (line 908)
    distributions_567199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 16), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 908)
    chi2_567200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 908, 16), distributions_567199, 'chi2')
    # Obtaining the member 'ppf' of a type (line 908)
    ppf_567201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 908, 16), chi2_567200, 'ppf')
    # Calling ppf(args, kwargs) (line 908)
    ppf_call_result_567207 = invoke(stypy.reporting.localization.Localization(__file__, 908, 16), ppf_567201, *[result_sub_567204, int_567205], **kwargs_567206)
    
    # Applying the binary operator '*' (line 908)
    result_mul_567208 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 10), '*', float_567198, ppf_call_result_567207)
    
    # Assigning a type to the variable 'fac' (line 908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 4), 'fac', result_mul_567208)
    
    # Assigning a BinOp to a Name (line 909):
    
    # Assigning a BinOp to a Name (line 909):
    
    # Call to boxcox_llf(...): (line 909)
    # Processing the call arguments (line 909)
    # Getting the type of 'lmax' (line 909)
    lmax_567210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 24), 'lmax', False)
    # Getting the type of 'x' (line 909)
    x_567211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 30), 'x', False)
    # Processing the call keyword arguments (line 909)
    kwargs_567212 = {}
    # Getting the type of 'boxcox_llf' (line 909)
    boxcox_llf_567209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 13), 'boxcox_llf', False)
    # Calling boxcox_llf(args, kwargs) (line 909)
    boxcox_llf_call_result_567213 = invoke(stypy.reporting.localization.Localization(__file__, 909, 13), boxcox_llf_567209, *[lmax_567210, x_567211], **kwargs_567212)
    
    # Getting the type of 'fac' (line 909)
    fac_567214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 35), 'fac')
    # Applying the binary operator '-' (line 909)
    result_sub_567215 = python_operator(stypy.reporting.localization.Localization(__file__, 909, 13), '-', boxcox_llf_call_result_567213, fac_567214)
    
    # Assigning a type to the variable 'target' (line 909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 4), 'target', result_sub_567215)

    @norecursion
    def rootfunc(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rootfunc'
        module_type_store = module_type_store.open_function_context('rootfunc', 911, 4, False)
        
        # Passed parameters checking function
        rootfunc.stypy_localization = localization
        rootfunc.stypy_type_of_self = None
        rootfunc.stypy_type_store = module_type_store
        rootfunc.stypy_function_name = 'rootfunc'
        rootfunc.stypy_param_names_list = ['lmbda', 'data', 'target']
        rootfunc.stypy_varargs_param_name = None
        rootfunc.stypy_kwargs_param_name = None
        rootfunc.stypy_call_defaults = defaults
        rootfunc.stypy_call_varargs = varargs
        rootfunc.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'rootfunc', ['lmbda', 'data', 'target'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rootfunc', localization, ['lmbda', 'data', 'target'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rootfunc(...)' code ##################

        
        # Call to boxcox_llf(...): (line 912)
        # Processing the call arguments (line 912)
        # Getting the type of 'lmbda' (line 912)
        lmbda_567217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 26), 'lmbda', False)
        # Getting the type of 'data' (line 912)
        data_567218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 33), 'data', False)
        # Processing the call keyword arguments (line 912)
        kwargs_567219 = {}
        # Getting the type of 'boxcox_llf' (line 912)
        boxcox_llf_567216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 15), 'boxcox_llf', False)
        # Calling boxcox_llf(args, kwargs) (line 912)
        boxcox_llf_call_result_567220 = invoke(stypy.reporting.localization.Localization(__file__, 912, 15), boxcox_llf_567216, *[lmbda_567217, data_567218], **kwargs_567219)
        
        # Getting the type of 'target' (line 912)
        target_567221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 41), 'target')
        # Applying the binary operator '-' (line 912)
        result_sub_567222 = python_operator(stypy.reporting.localization.Localization(__file__, 912, 15), '-', boxcox_llf_call_result_567220, target_567221)
        
        # Assigning a type to the variable 'stypy_return_type' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'stypy_return_type', result_sub_567222)
        
        # ################# End of 'rootfunc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rootfunc' in the type store
        # Getting the type of 'stypy_return_type' (line 911)
        stypy_return_type_567223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_567223)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rootfunc'
        return stypy_return_type_567223

    # Assigning a type to the variable 'rootfunc' (line 911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 4), 'rootfunc', rootfunc)
    
    # Assigning a BinOp to a Name (line 915):
    
    # Assigning a BinOp to a Name (line 915):
    # Getting the type of 'lmax' (line 915)
    lmax_567224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 12), 'lmax')
    float_567225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 19), 'float')
    # Applying the binary operator '+' (line 915)
    result_add_567226 = python_operator(stypy.reporting.localization.Localization(__file__, 915, 12), '+', lmax_567224, float_567225)
    
    # Assigning a type to the variable 'newlm' (line 915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 4), 'newlm', result_add_567226)
    
    # Assigning a Num to a Name (line 916):
    
    # Assigning a Num to a Name (line 916):
    int_567227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 8), 'int')
    # Assigning a type to the variable 'N' (line 916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 4), 'N', int_567227)
    
    
    # Evaluating a boolean operation
    
    
    # Call to rootfunc(...): (line 917)
    # Processing the call arguments (line 917)
    # Getting the type of 'newlm' (line 917)
    newlm_567229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 20), 'newlm', False)
    # Getting the type of 'x' (line 917)
    x_567230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 27), 'x', False)
    # Getting the type of 'target' (line 917)
    target_567231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 30), 'target', False)
    # Processing the call keyword arguments (line 917)
    kwargs_567232 = {}
    # Getting the type of 'rootfunc' (line 917)
    rootfunc_567228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 11), 'rootfunc', False)
    # Calling rootfunc(args, kwargs) (line 917)
    rootfunc_call_result_567233 = invoke(stypy.reporting.localization.Localization(__file__, 917, 11), rootfunc_567228, *[newlm_567229, x_567230, target_567231], **kwargs_567232)
    
    float_567234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 917, 40), 'float')
    # Applying the binary operator '>' (line 917)
    result_gt_567235 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 11), '>', rootfunc_call_result_567233, float_567234)
    
    
    # Getting the type of 'N' (line 917)
    N_567236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 50), 'N')
    int_567237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 917, 54), 'int')
    # Applying the binary operator '<' (line 917)
    result_lt_567238 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 50), '<', N_567236, int_567237)
    
    # Applying the binary operator 'and' (line 917)
    result_and_keyword_567239 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 10), 'and', result_gt_567235, result_lt_567238)
    
    # Testing the type of an if condition (line 917)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 917, 4), result_and_keyword_567239)
    # SSA begins for while statement (line 917)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Getting the type of 'newlm' (line 918)
    newlm_567240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 8), 'newlm')
    float_567241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 17), 'float')
    # Applying the binary operator '+=' (line 918)
    result_iadd_567242 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 8), '+=', newlm_567240, float_567241)
    # Assigning a type to the variable 'newlm' (line 918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 8), 'newlm', result_iadd_567242)
    
    
    # Getting the type of 'N' (line 919)
    N_567243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'N')
    int_567244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, 13), 'int')
    # Applying the binary operator '+=' (line 919)
    result_iadd_567245 = python_operator(stypy.reporting.localization.Localization(__file__, 919, 8), '+=', N_567243, int_567244)
    # Assigning a type to the variable 'N' (line 919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'N', result_iadd_567245)
    
    # SSA join for while statement (line 917)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'N' (line 921)
    N_567246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 7), 'N')
    int_567247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 12), 'int')
    # Applying the binary operator '==' (line 921)
    result_eq_567248 = python_operator(stypy.reporting.localization.Localization(__file__, 921, 7), '==', N_567246, int_567247)
    
    # Testing the type of an if condition (line 921)
    if_condition_567249 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 921, 4), result_eq_567248)
    # Assigning a type to the variable 'if_condition_567249' (line 921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 4), 'if_condition_567249', if_condition_567249)
    # SSA begins for if statement (line 921)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to RuntimeError(...): (line 922)
    # Processing the call arguments (line 922)
    str_567251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 27), 'str', 'Could not find endpoint.')
    # Processing the call keyword arguments (line 922)
    kwargs_567252 = {}
    # Getting the type of 'RuntimeError' (line 922)
    RuntimeError_567250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 14), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 922)
    RuntimeError_call_result_567253 = invoke(stypy.reporting.localization.Localization(__file__, 922, 14), RuntimeError_567250, *[str_567251], **kwargs_567252)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 922, 8), RuntimeError_call_result_567253, 'raise parameter', BaseException)
    # SSA join for if statement (line 921)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 924):
    
    # Assigning a Call to a Name (line 924):
    
    # Call to brentq(...): (line 924)
    # Processing the call arguments (line 924)
    # Getting the type of 'rootfunc' (line 924)
    rootfunc_567256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 29), 'rootfunc', False)
    # Getting the type of 'lmax' (line 924)
    lmax_567257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 39), 'lmax', False)
    # Getting the type of 'newlm' (line 924)
    newlm_567258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 45), 'newlm', False)
    # Processing the call keyword arguments (line 924)
    
    # Obtaining an instance of the builtin type 'tuple' (line 924)
    tuple_567259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 58), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 924)
    # Adding element type (line 924)
    # Getting the type of 'x' (line 924)
    x_567260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 58), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 924, 58), tuple_567259, x_567260)
    # Adding element type (line 924)
    # Getting the type of 'target' (line 924)
    target_567261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 61), 'target', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 924, 58), tuple_567259, target_567261)
    
    keyword_567262 = tuple_567259
    kwargs_567263 = {'args': keyword_567262}
    # Getting the type of 'optimize' (line 924)
    optimize_567254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 13), 'optimize', False)
    # Obtaining the member 'brentq' of a type (line 924)
    brentq_567255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 13), optimize_567254, 'brentq')
    # Calling brentq(args, kwargs) (line 924)
    brentq_call_result_567264 = invoke(stypy.reporting.localization.Localization(__file__, 924, 13), brentq_567255, *[rootfunc_567256, lmax_567257, newlm_567258], **kwargs_567263)
    
    # Assigning a type to the variable 'lmplus' (line 924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'lmplus', brentq_call_result_567264)
    
    # Assigning a BinOp to a Name (line 927):
    
    # Assigning a BinOp to a Name (line 927):
    # Getting the type of 'lmax' (line 927)
    lmax_567265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 12), 'lmax')
    float_567266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 927, 19), 'float')
    # Applying the binary operator '-' (line 927)
    result_sub_567267 = python_operator(stypy.reporting.localization.Localization(__file__, 927, 12), '-', lmax_567265, float_567266)
    
    # Assigning a type to the variable 'newlm' (line 927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 4), 'newlm', result_sub_567267)
    
    # Assigning a Num to a Name (line 928):
    
    # Assigning a Num to a Name (line 928):
    int_567268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 8), 'int')
    # Assigning a type to the variable 'N' (line 928)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'N', int_567268)
    
    
    # Evaluating a boolean operation
    
    
    # Call to rootfunc(...): (line 929)
    # Processing the call arguments (line 929)
    # Getting the type of 'newlm' (line 929)
    newlm_567270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 20), 'newlm', False)
    # Getting the type of 'x' (line 929)
    x_567271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 27), 'x', False)
    # Getting the type of 'target' (line 929)
    target_567272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 30), 'target', False)
    # Processing the call keyword arguments (line 929)
    kwargs_567273 = {}
    # Getting the type of 'rootfunc' (line 929)
    rootfunc_567269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 11), 'rootfunc', False)
    # Calling rootfunc(args, kwargs) (line 929)
    rootfunc_call_result_567274 = invoke(stypy.reporting.localization.Localization(__file__, 929, 11), rootfunc_567269, *[newlm_567270, x_567271, target_567272], **kwargs_567273)
    
    float_567275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 40), 'float')
    # Applying the binary operator '>' (line 929)
    result_gt_567276 = python_operator(stypy.reporting.localization.Localization(__file__, 929, 11), '>', rootfunc_call_result_567274, float_567275)
    
    
    # Getting the type of 'N' (line 929)
    N_567277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 50), 'N')
    int_567278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 54), 'int')
    # Applying the binary operator '<' (line 929)
    result_lt_567279 = python_operator(stypy.reporting.localization.Localization(__file__, 929, 50), '<', N_567277, int_567278)
    
    # Applying the binary operator 'and' (line 929)
    result_and_keyword_567280 = python_operator(stypy.reporting.localization.Localization(__file__, 929, 10), 'and', result_gt_567276, result_lt_567279)
    
    # Testing the type of an if condition (line 929)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 929, 4), result_and_keyword_567280)
    # SSA begins for while statement (line 929)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Getting the type of 'newlm' (line 930)
    newlm_567281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 8), 'newlm')
    float_567282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 930, 17), 'float')
    # Applying the binary operator '-=' (line 930)
    result_isub_567283 = python_operator(stypy.reporting.localization.Localization(__file__, 930, 8), '-=', newlm_567281, float_567282)
    # Assigning a type to the variable 'newlm' (line 930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 8), 'newlm', result_isub_567283)
    
    
    # Getting the type of 'N' (line 931)
    N_567284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 8), 'N')
    int_567285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 13), 'int')
    # Applying the binary operator '+=' (line 931)
    result_iadd_567286 = python_operator(stypy.reporting.localization.Localization(__file__, 931, 8), '+=', N_567284, int_567285)
    # Assigning a type to the variable 'N' (line 931)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 8), 'N', result_iadd_567286)
    
    # SSA join for while statement (line 929)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'N' (line 933)
    N_567287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 7), 'N')
    int_567288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 12), 'int')
    # Applying the binary operator '==' (line 933)
    result_eq_567289 = python_operator(stypy.reporting.localization.Localization(__file__, 933, 7), '==', N_567287, int_567288)
    
    # Testing the type of an if condition (line 933)
    if_condition_567290 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 933, 4), result_eq_567289)
    # Assigning a type to the variable 'if_condition_567290' (line 933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 4), 'if_condition_567290', if_condition_567290)
    # SSA begins for if statement (line 933)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to RuntimeError(...): (line 934)
    # Processing the call arguments (line 934)
    str_567292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 27), 'str', 'Could not find endpoint.')
    # Processing the call keyword arguments (line 934)
    kwargs_567293 = {}
    # Getting the type of 'RuntimeError' (line 934)
    RuntimeError_567291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 14), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 934)
    RuntimeError_call_result_567294 = invoke(stypy.reporting.localization.Localization(__file__, 934, 14), RuntimeError_567291, *[str_567292], **kwargs_567293)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 934, 8), RuntimeError_call_result_567294, 'raise parameter', BaseException)
    # SSA join for if statement (line 933)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 936):
    
    # Assigning a Call to a Name (line 936):
    
    # Call to brentq(...): (line 936)
    # Processing the call arguments (line 936)
    # Getting the type of 'rootfunc' (line 936)
    rootfunc_567297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 30), 'rootfunc', False)
    # Getting the type of 'newlm' (line 936)
    newlm_567298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 40), 'newlm', False)
    # Getting the type of 'lmax' (line 936)
    lmax_567299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 47), 'lmax', False)
    # Processing the call keyword arguments (line 936)
    
    # Obtaining an instance of the builtin type 'tuple' (line 936)
    tuple_567300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 59), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 936)
    # Adding element type (line 936)
    # Getting the type of 'x' (line 936)
    x_567301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 59), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 936, 59), tuple_567300, x_567301)
    # Adding element type (line 936)
    # Getting the type of 'target' (line 936)
    target_567302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 62), 'target', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 936, 59), tuple_567300, target_567302)
    
    keyword_567303 = tuple_567300
    kwargs_567304 = {'args': keyword_567303}
    # Getting the type of 'optimize' (line 936)
    optimize_567295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 14), 'optimize', False)
    # Obtaining the member 'brentq' of a type (line 936)
    brentq_567296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 14), optimize_567295, 'brentq')
    # Calling brentq(args, kwargs) (line 936)
    brentq_call_result_567305 = invoke(stypy.reporting.localization.Localization(__file__, 936, 14), brentq_567296, *[rootfunc_567297, newlm_567298, lmax_567299], **kwargs_567304)
    
    # Assigning a type to the variable 'lmminus' (line 936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 4), 'lmminus', brentq_call_result_567305)
    
    # Obtaining an instance of the builtin type 'tuple' (line 937)
    tuple_567306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 937, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 937)
    # Adding element type (line 937)
    # Getting the type of 'lmminus' (line 937)
    lmminus_567307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 11), 'lmminus')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 937, 11), tuple_567306, lmminus_567307)
    # Adding element type (line 937)
    # Getting the type of 'lmplus' (line 937)
    lmplus_567308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 20), 'lmplus')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 937, 11), tuple_567306, lmplus_567308)
    
    # Assigning a type to the variable 'stypy_return_type' (line 937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 4), 'stypy_return_type', tuple_567306)
    
    # ################# End of '_boxcox_conf_interval(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_boxcox_conf_interval' in the type store
    # Getting the type of 'stypy_return_type' (line 905)
    stypy_return_type_567309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_567309)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_boxcox_conf_interval'
    return stypy_return_type_567309

# Assigning a type to the variable '_boxcox_conf_interval' (line 905)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 0), '_boxcox_conf_interval', _boxcox_conf_interval)

@norecursion
def boxcox(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 940)
    None_567310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 20), 'None')
    # Getting the type of 'None' (line 940)
    None_567311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 32), 'None')
    defaults = [None_567310, None_567311]
    # Create a new context for function 'boxcox'
    module_type_store = module_type_store.open_function_context('boxcox', 940, 0, False)
    
    # Passed parameters checking function
    boxcox.stypy_localization = localization
    boxcox.stypy_type_of_self = None
    boxcox.stypy_type_store = module_type_store
    boxcox.stypy_function_name = 'boxcox'
    boxcox.stypy_param_names_list = ['x', 'lmbda', 'alpha']
    boxcox.stypy_varargs_param_name = None
    boxcox.stypy_kwargs_param_name = None
    boxcox.stypy_call_defaults = defaults
    boxcox.stypy_call_varargs = varargs
    boxcox.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'boxcox', ['x', 'lmbda', 'alpha'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'boxcox', localization, ['x', 'lmbda', 'alpha'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'boxcox(...)' code ##################

    str_567312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, (-1)), 'str', '\n    Return a positive dataset transformed by a Box-Cox power transformation.\n\n    Parameters\n    ----------\n    x : ndarray\n        Input array.  Should be 1-dimensional.\n    lmbda : {None, scalar}, optional\n        If `lmbda` is not None, do the transformation for that value.\n\n        If `lmbda` is None, find the lambda that maximizes the log-likelihood\n        function and return it as the second output argument.\n    alpha : {None, float}, optional\n        If ``alpha`` is not None, return the ``100 * (1-alpha)%`` confidence\n        interval for `lmbda` as the third output argument.\n        Must be between 0.0 and 1.0.\n\n    Returns\n    -------\n    boxcox : ndarray\n        Box-Cox power transformed array.\n    maxlog : float, optional\n        If the `lmbda` parameter is None, the second returned argument is\n        the lambda that maximizes the log-likelihood function.\n    (min_ci, max_ci) : tuple of float, optional\n        If `lmbda` parameter is None and ``alpha`` is not None, this returned\n        tuple of floats represents the minimum and maximum confidence limits\n        given ``alpha``.\n\n    See Also\n    --------\n    probplot, boxcox_normplot, boxcox_normmax, boxcox_llf\n\n    Notes\n    -----\n    The Box-Cox transform is given by::\n\n        y = (x**lmbda - 1) / lmbda,  for lmbda > 0\n            log(x),                  for lmbda = 0\n\n    `boxcox` requires the input data to be positive.  Sometimes a Box-Cox\n    transformation provides a shift parameter to achieve this; `boxcox` does\n    not.  Such a shift parameter is equivalent to adding a positive constant to\n    `x` before calling `boxcox`.\n\n    The confidence limits returned when ``alpha`` is provided give the interval\n    where:\n\n    .. math::\n\n        llf(\\hat{\\lambda}) - llf(\\lambda) < \\frac{1}{2}\\chi^2(1 - \\alpha, 1),\n\n    with ``llf`` the log-likelihood function and :math:`\\chi^2` the chi-squared\n    function.\n\n    References\n    ----------\n    G.E.P. Box and D.R. Cox, "An Analysis of Transformations", Journal of the\n    Royal Statistical Society B, 26, 211-252 (1964).\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> import matplotlib.pyplot as plt\n\n    We generate some random variates from a non-normal distribution and make a\n    probability plot for it, to show it is non-normal in the tails:\n\n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(211)\n    >>> x = stats.loggamma.rvs(5, size=500) + 5\n    >>> prob = stats.probplot(x, dist=stats.norm, plot=ax1)\n    >>> ax1.set_xlabel(\'\')\n    >>> ax1.set_title(\'Probplot against normal distribution\')\n\n    We now use `boxcox` to transform the data so it\'s closest to normal:\n\n    >>> ax2 = fig.add_subplot(212)\n    >>> xt, _ = stats.boxcox(x)\n    >>> prob = stats.probplot(xt, dist=stats.norm, plot=ax2)\n    >>> ax2.set_title(\'Probplot after Box-Cox transformation\')\n\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Name (line 1026):
    
    # Assigning a Call to a Name (line 1026):
    
    # Call to asarray(...): (line 1026)
    # Processing the call arguments (line 1026)
    # Getting the type of 'x' (line 1026)
    x_567315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 19), 'x', False)
    # Processing the call keyword arguments (line 1026)
    kwargs_567316 = {}
    # Getting the type of 'np' (line 1026)
    np_567313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1026)
    asarray_567314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 8), np_567313, 'asarray')
    # Calling asarray(args, kwargs) (line 1026)
    asarray_call_result_567317 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 8), asarray_567314, *[x_567315], **kwargs_567316)
    
    # Assigning a type to the variable 'x' (line 1026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 4), 'x', asarray_call_result_567317)
    
    
    # Getting the type of 'x' (line 1027)
    x_567318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 7), 'x')
    # Obtaining the member 'size' of a type (line 1027)
    size_567319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 7), x_567318, 'size')
    int_567320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 17), 'int')
    # Applying the binary operator '==' (line 1027)
    result_eq_567321 = python_operator(stypy.reporting.localization.Localization(__file__, 1027, 7), '==', size_567319, int_567320)
    
    # Testing the type of an if condition (line 1027)
    if_condition_567322 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1027, 4), result_eq_567321)
    # Assigning a type to the variable 'if_condition_567322' (line 1027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1027, 4), 'if_condition_567322', if_condition_567322)
    # SSA begins for if statement (line 1027)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'x' (line 1028)
    x_567323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 15), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 1028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 8), 'stypy_return_type', x_567323)
    # SSA join for if statement (line 1027)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 1030)
    # Processing the call arguments (line 1030)
    
    # Getting the type of 'x' (line 1030)
    x_567325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 11), 'x', False)
    int_567326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 16), 'int')
    # Applying the binary operator '<=' (line 1030)
    result_le_567327 = python_operator(stypy.reporting.localization.Localization(__file__, 1030, 11), '<=', x_567325, int_567326)
    
    # Processing the call keyword arguments (line 1030)
    kwargs_567328 = {}
    # Getting the type of 'any' (line 1030)
    any_567324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 7), 'any', False)
    # Calling any(args, kwargs) (line 1030)
    any_call_result_567329 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 7), any_567324, *[result_le_567327], **kwargs_567328)
    
    # Testing the type of an if condition (line 1030)
    if_condition_567330 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1030, 4), any_call_result_567329)
    # Assigning a type to the variable 'if_condition_567330' (line 1030)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1030, 4), 'if_condition_567330', if_condition_567330)
    # SSA begins for if statement (line 1030)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1031)
    # Processing the call arguments (line 1031)
    str_567332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 25), 'str', 'Data must be positive.')
    # Processing the call keyword arguments (line 1031)
    kwargs_567333 = {}
    # Getting the type of 'ValueError' (line 1031)
    ValueError_567331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1031)
    ValueError_call_result_567334 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 14), ValueError_567331, *[str_567332], **kwargs_567333)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1031, 8), ValueError_call_result_567334, 'raise parameter', BaseException)
    # SSA join for if statement (line 1030)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1033)
    # Getting the type of 'lmbda' (line 1033)
    lmbda_567335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 4), 'lmbda')
    # Getting the type of 'None' (line 1033)
    None_567336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 20), 'None')
    
    (may_be_567337, more_types_in_union_567338) = may_not_be_none(lmbda_567335, None_567336)

    if may_be_567337:

        if more_types_in_union_567338:
            # Runtime conditional SSA (line 1033)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to boxcox(...): (line 1034)
        # Processing the call arguments (line 1034)
        # Getting the type of 'x' (line 1034)
        x_567341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 30), 'x', False)
        # Getting the type of 'lmbda' (line 1034)
        lmbda_567342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 33), 'lmbda', False)
        # Processing the call keyword arguments (line 1034)
        kwargs_567343 = {}
        # Getting the type of 'special' (line 1034)
        special_567339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 15), 'special', False)
        # Obtaining the member 'boxcox' of a type (line 1034)
        boxcox_567340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 15), special_567339, 'boxcox')
        # Calling boxcox(args, kwargs) (line 1034)
        boxcox_call_result_567344 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 15), boxcox_567340, *[x_567341, lmbda_567342], **kwargs_567343)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'stypy_return_type', boxcox_call_result_567344)

        if more_types_in_union_567338:
            # SSA join for if statement (line 1033)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1037):
    
    # Assigning a Call to a Name (line 1037):
    
    # Call to boxcox_normmax(...): (line 1037)
    # Processing the call arguments (line 1037)
    # Getting the type of 'x' (line 1037)
    x_567346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 26), 'x', False)
    # Processing the call keyword arguments (line 1037)
    str_567347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 36), 'str', 'mle')
    keyword_567348 = str_567347
    kwargs_567349 = {'method': keyword_567348}
    # Getting the type of 'boxcox_normmax' (line 1037)
    boxcox_normmax_567345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 11), 'boxcox_normmax', False)
    # Calling boxcox_normmax(args, kwargs) (line 1037)
    boxcox_normmax_call_result_567350 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 11), boxcox_normmax_567345, *[x_567346], **kwargs_567349)
    
    # Assigning a type to the variable 'lmax' (line 1037)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 4), 'lmax', boxcox_normmax_call_result_567350)
    
    # Assigning a Call to a Name (line 1038):
    
    # Assigning a Call to a Name (line 1038):
    
    # Call to boxcox(...): (line 1038)
    # Processing the call arguments (line 1038)
    # Getting the type of 'x' (line 1038)
    x_567352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 15), 'x', False)
    # Getting the type of 'lmax' (line 1038)
    lmax_567353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 18), 'lmax', False)
    # Processing the call keyword arguments (line 1038)
    kwargs_567354 = {}
    # Getting the type of 'boxcox' (line 1038)
    boxcox_567351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'boxcox', False)
    # Calling boxcox(args, kwargs) (line 1038)
    boxcox_call_result_567355 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 8), boxcox_567351, *[x_567352, lmax_567353], **kwargs_567354)
    
    # Assigning a type to the variable 'y' (line 1038)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 4), 'y', boxcox_call_result_567355)
    
    # Type idiom detected: calculating its left and rigth part (line 1040)
    # Getting the type of 'alpha' (line 1040)
    alpha_567356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 7), 'alpha')
    # Getting the type of 'None' (line 1040)
    None_567357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 16), 'None')
    
    (may_be_567358, more_types_in_union_567359) = may_be_none(alpha_567356, None_567357)

    if may_be_567358:

        if more_types_in_union_567359:
            # Runtime conditional SSA (line 1040)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Obtaining an instance of the builtin type 'tuple' (line 1041)
        tuple_567360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1041)
        # Adding element type (line 1041)
        # Getting the type of 'y' (line 1041)
        y_567361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 15), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 15), tuple_567360, y_567361)
        # Adding element type (line 1041)
        # Getting the type of 'lmax' (line 1041)
        lmax_567362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 18), 'lmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 15), tuple_567360, lmax_567362)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'stypy_return_type', tuple_567360)

        if more_types_in_union_567359:
            # Runtime conditional SSA for else branch (line 1040)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_567358) or more_types_in_union_567359):
        
        # Assigning a Call to a Name (line 1044):
        
        # Assigning a Call to a Name (line 1044):
        
        # Call to _boxcox_conf_interval(...): (line 1044)
        # Processing the call arguments (line 1044)
        # Getting the type of 'x' (line 1044)
        x_567364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 41), 'x', False)
        # Getting the type of 'lmax' (line 1044)
        lmax_567365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 44), 'lmax', False)
        # Getting the type of 'alpha' (line 1044)
        alpha_567366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 50), 'alpha', False)
        # Processing the call keyword arguments (line 1044)
        kwargs_567367 = {}
        # Getting the type of '_boxcox_conf_interval' (line 1044)
        _boxcox_conf_interval_567363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 19), '_boxcox_conf_interval', False)
        # Calling _boxcox_conf_interval(args, kwargs) (line 1044)
        _boxcox_conf_interval_call_result_567368 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 19), _boxcox_conf_interval_567363, *[x_567364, lmax_567365, alpha_567366], **kwargs_567367)
        
        # Assigning a type to the variable 'interval' (line 1044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 8), 'interval', _boxcox_conf_interval_call_result_567368)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1045)
        tuple_567369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1045)
        # Adding element type (line 1045)
        # Getting the type of 'y' (line 1045)
        y_567370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 15), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 15), tuple_567369, y_567370)
        # Adding element type (line 1045)
        # Getting the type of 'lmax' (line 1045)
        lmax_567371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 18), 'lmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 15), tuple_567369, lmax_567371)
        # Adding element type (line 1045)
        # Getting the type of 'interval' (line 1045)
        interval_567372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 24), 'interval')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 15), tuple_567369, interval_567372)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 8), 'stypy_return_type', tuple_567369)

        if (may_be_567358 and more_types_in_union_567359):
            # SSA join for if statement (line 1040)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'boxcox(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'boxcox' in the type store
    # Getting the type of 'stypy_return_type' (line 940)
    stypy_return_type_567373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_567373)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'boxcox'
    return stypy_return_type_567373

# Assigning a type to the variable 'boxcox' (line 940)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 0), 'boxcox', boxcox)

@norecursion
def boxcox_normmax(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 1048)
    tuple_567374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1048)
    # Adding element type (line 1048)
    float_567375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 29), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1048, 29), tuple_567374, float_567375)
    # Adding element type (line 1048)
    float_567376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 35), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1048, 29), tuple_567374, float_567376)
    
    str_567377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 48), 'str', 'pearsonr')
    defaults = [tuple_567374, str_567377]
    # Create a new context for function 'boxcox_normmax'
    module_type_store = module_type_store.open_function_context('boxcox_normmax', 1048, 0, False)
    
    # Passed parameters checking function
    boxcox_normmax.stypy_localization = localization
    boxcox_normmax.stypy_type_of_self = None
    boxcox_normmax.stypy_type_store = module_type_store
    boxcox_normmax.stypy_function_name = 'boxcox_normmax'
    boxcox_normmax.stypy_param_names_list = ['x', 'brack', 'method']
    boxcox_normmax.stypy_varargs_param_name = None
    boxcox_normmax.stypy_kwargs_param_name = None
    boxcox_normmax.stypy_call_defaults = defaults
    boxcox_normmax.stypy_call_varargs = varargs
    boxcox_normmax.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'boxcox_normmax', ['x', 'brack', 'method'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'boxcox_normmax', localization, ['x', 'brack', 'method'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'boxcox_normmax(...)' code ##################

    str_567378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, (-1)), 'str', "Compute optimal Box-Cox transform parameter for input data.\n\n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    brack : 2-tuple, optional\n        The starting interval for a downhill bracket search with\n        `optimize.brent`.  Note that this is in most cases not critical; the\n        final result is allowed to be outside this bracket.\n    method : str, optional\n        The method to determine the optimal transform parameter (`boxcox`\n        ``lmbda`` parameter). Options are:\n\n        'pearsonr'  (default)\n            Maximizes the Pearson correlation coefficient between\n            ``y = boxcox(x)`` and the expected values for ``y`` if `x` would be\n            normally-distributed.\n\n        'mle'\n            Minimizes the log-likelihood `boxcox_llf`.  This is the method used\n            in `boxcox`.\n\n        'all'\n            Use all optimization methods available, and return all results.\n            Useful to compare different methods.\n\n    Returns\n    -------\n    maxlog : float or ndarray\n        The optimal transform parameter found.  An array instead of a scalar\n        for ``method='all'``.\n\n    See Also\n    --------\n    boxcox, boxcox_llf, boxcox_normplot\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> import matplotlib.pyplot as plt\n    >>> np.random.seed(1234)  # make this example reproducible\n\n    Generate some data and determine optimal ``lmbda`` in various ways:\n\n    >>> x = stats.loggamma.rvs(5, size=30) + 5\n    >>> y, lmax_mle = stats.boxcox(x)\n    >>> lmax_pearsonr = stats.boxcox_normmax(x)\n\n    >>> lmax_mle\n    7.177...\n    >>> lmax_pearsonr\n    7.916...\n    >>> stats.boxcox_normmax(x, method='all')\n    array([ 7.91667384,  7.17718692])\n\n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(111)\n    >>> prob = stats.boxcox_normplot(x, -10, 10, plot=ax)\n    >>> ax.axvline(lmax_mle, color='r')\n    >>> ax.axvline(lmax_pearsonr, color='g', ls='--')\n\n    >>> plt.show()\n\n    ")

    @norecursion
    def _pearsonr(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_pearsonr'
        module_type_store = module_type_store.open_function_context('_pearsonr', 1115, 4, False)
        
        # Passed parameters checking function
        _pearsonr.stypy_localization = localization
        _pearsonr.stypy_type_of_self = None
        _pearsonr.stypy_type_store = module_type_store
        _pearsonr.stypy_function_name = '_pearsonr'
        _pearsonr.stypy_param_names_list = ['x', 'brack']
        _pearsonr.stypy_varargs_param_name = None
        _pearsonr.stypy_kwargs_param_name = None
        _pearsonr.stypy_call_defaults = defaults
        _pearsonr.stypy_call_varargs = varargs
        _pearsonr.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_pearsonr', ['x', 'brack'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_pearsonr', localization, ['x', 'brack'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_pearsonr(...)' code ##################

        
        # Assigning a Call to a Name (line 1116):
        
        # Assigning a Call to a Name (line 1116):
        
        # Call to _calc_uniform_order_statistic_medians(...): (line 1116)
        # Processing the call arguments (line 1116)
        
        # Call to len(...): (line 1116)
        # Processing the call arguments (line 1116)
        # Getting the type of 'x' (line 1116)
        x_567381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 64), 'x', False)
        # Processing the call keyword arguments (line 1116)
        kwargs_567382 = {}
        # Getting the type of 'len' (line 1116)
        len_567380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 60), 'len', False)
        # Calling len(args, kwargs) (line 1116)
        len_call_result_567383 = invoke(stypy.reporting.localization.Localization(__file__, 1116, 60), len_567380, *[x_567381], **kwargs_567382)
        
        # Processing the call keyword arguments (line 1116)
        kwargs_567384 = {}
        # Getting the type of '_calc_uniform_order_statistic_medians' (line 1116)
        _calc_uniform_order_statistic_medians_567379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 22), '_calc_uniform_order_statistic_medians', False)
        # Calling _calc_uniform_order_statistic_medians(args, kwargs) (line 1116)
        _calc_uniform_order_statistic_medians_call_result_567385 = invoke(stypy.reporting.localization.Localization(__file__, 1116, 22), _calc_uniform_order_statistic_medians_567379, *[len_call_result_567383], **kwargs_567384)
        
        # Assigning a type to the variable 'osm_uniform' (line 1116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1116, 8), 'osm_uniform', _calc_uniform_order_statistic_medians_call_result_567385)
        
        # Assigning a Call to a Name (line 1117):
        
        # Assigning a Call to a Name (line 1117):
        
        # Call to ppf(...): (line 1117)
        # Processing the call arguments (line 1117)
        # Getting the type of 'osm_uniform' (line 1117)
        osm_uniform_567389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 39), 'osm_uniform', False)
        # Processing the call keyword arguments (line 1117)
        kwargs_567390 = {}
        # Getting the type of 'distributions' (line 1117)
        distributions_567386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 16), 'distributions', False)
        # Obtaining the member 'norm' of a type (line 1117)
        norm_567387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 16), distributions_567386, 'norm')
        # Obtaining the member 'ppf' of a type (line 1117)
        ppf_567388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 16), norm_567387, 'ppf')
        # Calling ppf(args, kwargs) (line 1117)
        ppf_call_result_567391 = invoke(stypy.reporting.localization.Localization(__file__, 1117, 16), ppf_567388, *[osm_uniform_567389], **kwargs_567390)
        
        # Assigning a type to the variable 'xvals' (line 1117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1117, 8), 'xvals', ppf_call_result_567391)

        @norecursion
        def _eval_pearsonr(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_eval_pearsonr'
            module_type_store = module_type_store.open_function_context('_eval_pearsonr', 1119, 8, False)
            
            # Passed parameters checking function
            _eval_pearsonr.stypy_localization = localization
            _eval_pearsonr.stypy_type_of_self = None
            _eval_pearsonr.stypy_type_store = module_type_store
            _eval_pearsonr.stypy_function_name = '_eval_pearsonr'
            _eval_pearsonr.stypy_param_names_list = ['lmbda', 'xvals', 'samps']
            _eval_pearsonr.stypy_varargs_param_name = None
            _eval_pearsonr.stypy_kwargs_param_name = None
            _eval_pearsonr.stypy_call_defaults = defaults
            _eval_pearsonr.stypy_call_varargs = varargs
            _eval_pearsonr.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_eval_pearsonr', ['lmbda', 'xvals', 'samps'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_eval_pearsonr', localization, ['lmbda', 'xvals', 'samps'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_eval_pearsonr(...)' code ##################

            
            # Assigning a Call to a Name (line 1124):
            
            # Assigning a Call to a Name (line 1124):
            
            # Call to boxcox(...): (line 1124)
            # Processing the call arguments (line 1124)
            # Getting the type of 'samps' (line 1124)
            samps_567393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 23), 'samps', False)
            # Getting the type of 'lmbda' (line 1124)
            lmbda_567394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 30), 'lmbda', False)
            # Processing the call keyword arguments (line 1124)
            kwargs_567395 = {}
            # Getting the type of 'boxcox' (line 1124)
            boxcox_567392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 16), 'boxcox', False)
            # Calling boxcox(args, kwargs) (line 1124)
            boxcox_call_result_567396 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 16), boxcox_567392, *[samps_567393, lmbda_567394], **kwargs_567395)
            
            # Assigning a type to the variable 'y' (line 1124)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 12), 'y', boxcox_call_result_567396)
            
            # Assigning a Call to a Name (line 1125):
            
            # Assigning a Call to a Name (line 1125):
            
            # Call to sort(...): (line 1125)
            # Processing the call arguments (line 1125)
            # Getting the type of 'y' (line 1125)
            y_567399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 28), 'y', False)
            # Processing the call keyword arguments (line 1125)
            kwargs_567400 = {}
            # Getting the type of 'np' (line 1125)
            np_567397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 20), 'np', False)
            # Obtaining the member 'sort' of a type (line 1125)
            sort_567398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 20), np_567397, 'sort')
            # Calling sort(args, kwargs) (line 1125)
            sort_call_result_567401 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 20), sort_567398, *[y_567399], **kwargs_567400)
            
            # Assigning a type to the variable 'yvals' (line 1125)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1125, 12), 'yvals', sort_call_result_567401)
            
            # Assigning a Call to a Tuple (line 1126):
            
            # Assigning a Subscript to a Name (line 1126):
            
            # Obtaining the type of the subscript
            int_567402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 12), 'int')
            
            # Call to pearsonr(...): (line 1126)
            # Processing the call arguments (line 1126)
            # Getting the type of 'xvals' (line 1126)
            xvals_567405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 37), 'xvals', False)
            # Getting the type of 'yvals' (line 1126)
            yvals_567406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 44), 'yvals', False)
            # Processing the call keyword arguments (line 1126)
            kwargs_567407 = {}
            # Getting the type of 'stats' (line 1126)
            stats_567403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 22), 'stats', False)
            # Obtaining the member 'pearsonr' of a type (line 1126)
            pearsonr_567404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 22), stats_567403, 'pearsonr')
            # Calling pearsonr(args, kwargs) (line 1126)
            pearsonr_call_result_567408 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 22), pearsonr_567404, *[xvals_567405, yvals_567406], **kwargs_567407)
            
            # Obtaining the member '__getitem__' of a type (line 1126)
            getitem___567409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 12), pearsonr_call_result_567408, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
            subscript_call_result_567410 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 12), getitem___567409, int_567402)
            
            # Assigning a type to the variable 'tuple_var_assignment_566023' (line 1126)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'tuple_var_assignment_566023', subscript_call_result_567410)
            
            # Assigning a Subscript to a Name (line 1126):
            
            # Obtaining the type of the subscript
            int_567411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 12), 'int')
            
            # Call to pearsonr(...): (line 1126)
            # Processing the call arguments (line 1126)
            # Getting the type of 'xvals' (line 1126)
            xvals_567414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 37), 'xvals', False)
            # Getting the type of 'yvals' (line 1126)
            yvals_567415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 44), 'yvals', False)
            # Processing the call keyword arguments (line 1126)
            kwargs_567416 = {}
            # Getting the type of 'stats' (line 1126)
            stats_567412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 22), 'stats', False)
            # Obtaining the member 'pearsonr' of a type (line 1126)
            pearsonr_567413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 22), stats_567412, 'pearsonr')
            # Calling pearsonr(args, kwargs) (line 1126)
            pearsonr_call_result_567417 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 22), pearsonr_567413, *[xvals_567414, yvals_567415], **kwargs_567416)
            
            # Obtaining the member '__getitem__' of a type (line 1126)
            getitem___567418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 12), pearsonr_call_result_567417, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
            subscript_call_result_567419 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 12), getitem___567418, int_567411)
            
            # Assigning a type to the variable 'tuple_var_assignment_566024' (line 1126)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'tuple_var_assignment_566024', subscript_call_result_567419)
            
            # Assigning a Name to a Name (line 1126):
            # Getting the type of 'tuple_var_assignment_566023' (line 1126)
            tuple_var_assignment_566023_567420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'tuple_var_assignment_566023')
            # Assigning a type to the variable 'r' (line 1126)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'r', tuple_var_assignment_566023_567420)
            
            # Assigning a Name to a Name (line 1126):
            # Getting the type of 'tuple_var_assignment_566024' (line 1126)
            tuple_var_assignment_566024_567421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'tuple_var_assignment_566024')
            # Assigning a type to the variable 'prob' (line 1126)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 15), 'prob', tuple_var_assignment_566024_567421)
            int_567422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 19), 'int')
            # Getting the type of 'r' (line 1127)
            r_567423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 23), 'r')
            # Applying the binary operator '-' (line 1127)
            result_sub_567424 = python_operator(stypy.reporting.localization.Localization(__file__, 1127, 19), '-', int_567422, r_567423)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1127)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 12), 'stypy_return_type', result_sub_567424)
            
            # ################# End of '_eval_pearsonr(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_eval_pearsonr' in the type store
            # Getting the type of 'stypy_return_type' (line 1119)
            stypy_return_type_567425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_567425)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_eval_pearsonr'
            return stypy_return_type_567425

        # Assigning a type to the variable '_eval_pearsonr' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), '_eval_pearsonr', _eval_pearsonr)
        
        # Call to brent(...): (line 1129)
        # Processing the call arguments (line 1129)
        # Getting the type of '_eval_pearsonr' (line 1129)
        _eval_pearsonr_567428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 30), '_eval_pearsonr', False)
        # Processing the call keyword arguments (line 1129)
        # Getting the type of 'brack' (line 1129)
        brack_567429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 52), 'brack', False)
        keyword_567430 = brack_567429
        
        # Obtaining an instance of the builtin type 'tuple' (line 1129)
        tuple_567431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1129, 65), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1129)
        # Adding element type (line 1129)
        # Getting the type of 'xvals' (line 1129)
        xvals_567432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 65), 'xvals', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1129, 65), tuple_567431, xvals_567432)
        # Adding element type (line 1129)
        # Getting the type of 'x' (line 1129)
        x_567433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 72), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1129, 65), tuple_567431, x_567433)
        
        keyword_567434 = tuple_567431
        kwargs_567435 = {'brack': keyword_567430, 'args': keyword_567434}
        # Getting the type of 'optimize' (line 1129)
        optimize_567426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 15), 'optimize', False)
        # Obtaining the member 'brent' of a type (line 1129)
        brent_567427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 15), optimize_567426, 'brent')
        # Calling brent(args, kwargs) (line 1129)
        brent_call_result_567436 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 15), brent_567427, *[_eval_pearsonr_567428], **kwargs_567435)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'stypy_return_type', brent_call_result_567436)
        
        # ################# End of '_pearsonr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_pearsonr' in the type store
        # Getting the type of 'stypy_return_type' (line 1115)
        stypy_return_type_567437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_567437)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_pearsonr'
        return stypy_return_type_567437

    # Assigning a type to the variable '_pearsonr' (line 1115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 4), '_pearsonr', _pearsonr)

    @norecursion
    def _mle(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_mle'
        module_type_store = module_type_store.open_function_context('_mle', 1131, 4, False)
        
        # Passed parameters checking function
        _mle.stypy_localization = localization
        _mle.stypy_type_of_self = None
        _mle.stypy_type_store = module_type_store
        _mle.stypy_function_name = '_mle'
        _mle.stypy_param_names_list = ['x', 'brack']
        _mle.stypy_varargs_param_name = None
        _mle.stypy_kwargs_param_name = None
        _mle.stypy_call_defaults = defaults
        _mle.stypy_call_varargs = varargs
        _mle.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_mle', ['x', 'brack'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_mle', localization, ['x', 'brack'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_mle(...)' code ##################


        @norecursion
        def _eval_mle(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_eval_mle'
            module_type_store = module_type_store.open_function_context('_eval_mle', 1132, 8, False)
            
            # Passed parameters checking function
            _eval_mle.stypy_localization = localization
            _eval_mle.stypy_type_of_self = None
            _eval_mle.stypy_type_store = module_type_store
            _eval_mle.stypy_function_name = '_eval_mle'
            _eval_mle.stypy_param_names_list = ['lmb', 'data']
            _eval_mle.stypy_varargs_param_name = None
            _eval_mle.stypy_kwargs_param_name = None
            _eval_mle.stypy_call_defaults = defaults
            _eval_mle.stypy_call_varargs = varargs
            _eval_mle.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_eval_mle', ['lmb', 'data'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_eval_mle', localization, ['lmb', 'data'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_eval_mle(...)' code ##################

            
            
            # Call to boxcox_llf(...): (line 1134)
            # Processing the call arguments (line 1134)
            # Getting the type of 'lmb' (line 1134)
            lmb_567439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 31), 'lmb', False)
            # Getting the type of 'data' (line 1134)
            data_567440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 36), 'data', False)
            # Processing the call keyword arguments (line 1134)
            kwargs_567441 = {}
            # Getting the type of 'boxcox_llf' (line 1134)
            boxcox_llf_567438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 20), 'boxcox_llf', False)
            # Calling boxcox_llf(args, kwargs) (line 1134)
            boxcox_llf_call_result_567442 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 20), boxcox_llf_567438, *[lmb_567439, data_567440], **kwargs_567441)
            
            # Applying the 'usub' unary operator (line 1134)
            result___neg___567443 = python_operator(stypy.reporting.localization.Localization(__file__, 1134, 19), 'usub', boxcox_llf_call_result_567442)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1134)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 12), 'stypy_return_type', result___neg___567443)
            
            # ################# End of '_eval_mle(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_eval_mle' in the type store
            # Getting the type of 'stypy_return_type' (line 1132)
            stypy_return_type_567444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_567444)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_eval_mle'
            return stypy_return_type_567444

        # Assigning a type to the variable '_eval_mle' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), '_eval_mle', _eval_mle)
        
        # Call to brent(...): (line 1136)
        # Processing the call arguments (line 1136)
        # Getting the type of '_eval_mle' (line 1136)
        _eval_mle_567447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 30), '_eval_mle', False)
        # Processing the call keyword arguments (line 1136)
        # Getting the type of 'brack' (line 1136)
        brack_567448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 47), 'brack', False)
        keyword_567449 = brack_567448
        
        # Obtaining an instance of the builtin type 'tuple' (line 1136)
        tuple_567450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 60), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1136)
        # Adding element type (line 1136)
        # Getting the type of 'x' (line 1136)
        x_567451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 60), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1136, 60), tuple_567450, x_567451)
        
        keyword_567452 = tuple_567450
        kwargs_567453 = {'brack': keyword_567449, 'args': keyword_567452}
        # Getting the type of 'optimize' (line 1136)
        optimize_567445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 15), 'optimize', False)
        # Obtaining the member 'brent' of a type (line 1136)
        brent_567446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 15), optimize_567445, 'brent')
        # Calling brent(args, kwargs) (line 1136)
        brent_call_result_567454 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 15), brent_567446, *[_eval_mle_567447], **kwargs_567453)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 8), 'stypy_return_type', brent_call_result_567454)
        
        # ################# End of '_mle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_mle' in the type store
        # Getting the type of 'stypy_return_type' (line 1131)
        stypy_return_type_567455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_567455)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_mle'
        return stypy_return_type_567455

    # Assigning a type to the variable '_mle' (line 1131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1131, 4), '_mle', _mle)

    @norecursion
    def _all(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_all'
        module_type_store = module_type_store.open_function_context('_all', 1138, 4, False)
        
        # Passed parameters checking function
        _all.stypy_localization = localization
        _all.stypy_type_of_self = None
        _all.stypy_type_store = module_type_store
        _all.stypy_function_name = '_all'
        _all.stypy_param_names_list = ['x', 'brack']
        _all.stypy_varargs_param_name = None
        _all.stypy_kwargs_param_name = None
        _all.stypy_call_defaults = defaults
        _all.stypy_call_varargs = varargs
        _all.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_all', ['x', 'brack'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_all', localization, ['x', 'brack'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_all(...)' code ##################

        
        # Assigning a Call to a Name (line 1139):
        
        # Assigning a Call to a Name (line 1139):
        
        # Call to zeros(...): (line 1139)
        # Processing the call arguments (line 1139)
        int_567458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1139, 26), 'int')
        # Processing the call keyword arguments (line 1139)
        # Getting the type of 'float' (line 1139)
        float_567459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 35), 'float', False)
        keyword_567460 = float_567459
        kwargs_567461 = {'dtype': keyword_567460}
        # Getting the type of 'np' (line 1139)
        np_567456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 17), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1139)
        zeros_567457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 17), np_567456, 'zeros')
        # Calling zeros(args, kwargs) (line 1139)
        zeros_call_result_567462 = invoke(stypy.reporting.localization.Localization(__file__, 1139, 17), zeros_567457, *[int_567458], **kwargs_567461)
        
        # Assigning a type to the variable 'maxlog' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'maxlog', zeros_call_result_567462)
        
        # Assigning a Call to a Subscript (line 1140):
        
        # Assigning a Call to a Subscript (line 1140):
        
        # Call to _pearsonr(...): (line 1140)
        # Processing the call arguments (line 1140)
        # Getting the type of 'x' (line 1140)
        x_567464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 30), 'x', False)
        # Getting the type of 'brack' (line 1140)
        brack_567465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 33), 'brack', False)
        # Processing the call keyword arguments (line 1140)
        kwargs_567466 = {}
        # Getting the type of '_pearsonr' (line 1140)
        _pearsonr_567463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 20), '_pearsonr', False)
        # Calling _pearsonr(args, kwargs) (line 1140)
        _pearsonr_call_result_567467 = invoke(stypy.reporting.localization.Localization(__file__, 1140, 20), _pearsonr_567463, *[x_567464, brack_567465], **kwargs_567466)
        
        # Getting the type of 'maxlog' (line 1140)
        maxlog_567468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'maxlog')
        int_567469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, 15), 'int')
        # Storing an element on a container (line 1140)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1140, 8), maxlog_567468, (int_567469, _pearsonr_call_result_567467))
        
        # Assigning a Call to a Subscript (line 1141):
        
        # Assigning a Call to a Subscript (line 1141):
        
        # Call to _mle(...): (line 1141)
        # Processing the call arguments (line 1141)
        # Getting the type of 'x' (line 1141)
        x_567471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 25), 'x', False)
        # Getting the type of 'brack' (line 1141)
        brack_567472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 28), 'brack', False)
        # Processing the call keyword arguments (line 1141)
        kwargs_567473 = {}
        # Getting the type of '_mle' (line 1141)
        _mle_567470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 20), '_mle', False)
        # Calling _mle(args, kwargs) (line 1141)
        _mle_call_result_567474 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 20), _mle_567470, *[x_567471, brack_567472], **kwargs_567473)
        
        # Getting the type of 'maxlog' (line 1141)
        maxlog_567475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 8), 'maxlog')
        int_567476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 15), 'int')
        # Storing an element on a container (line 1141)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 8), maxlog_567475, (int_567476, _mle_call_result_567474))
        # Getting the type of 'maxlog' (line 1142)
        maxlog_567477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 15), 'maxlog')
        # Assigning a type to the variable 'stypy_return_type' (line 1142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 8), 'stypy_return_type', maxlog_567477)
        
        # ################# End of '_all(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_all' in the type store
        # Getting the type of 'stypy_return_type' (line 1138)
        stypy_return_type_567478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_567478)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_all'
        return stypy_return_type_567478

    # Assigning a type to the variable '_all' (line 1138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 4), '_all', _all)
    
    # Assigning a Dict to a Name (line 1144):
    
    # Assigning a Dict to a Name (line 1144):
    
    # Obtaining an instance of the builtin type 'dict' (line 1144)
    dict_567479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 14), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1144)
    # Adding element type (key, value) (line 1144)
    str_567480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 15), 'str', 'pearsonr')
    # Getting the type of '_pearsonr' (line 1144)
    _pearsonr_567481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 27), '_pearsonr')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1144, 14), dict_567479, (str_567480, _pearsonr_567481))
    # Adding element type (key, value) (line 1144)
    str_567482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 15), 'str', 'mle')
    # Getting the type of '_mle' (line 1145)
    _mle_567483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 22), '_mle')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1144, 14), dict_567479, (str_567482, _mle_567483))
    # Adding element type (key, value) (line 1144)
    str_567484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1146, 15), 'str', 'all')
    # Getting the type of '_all' (line 1146)
    _all_567485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 22), '_all')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1144, 14), dict_567479, (str_567484, _all_567485))
    
    # Assigning a type to the variable 'methods' (line 1144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 4), 'methods', dict_567479)
    
    
    # Getting the type of 'method' (line 1147)
    method_567486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 7), 'method')
    
    # Call to keys(...): (line 1147)
    # Processing the call keyword arguments (line 1147)
    kwargs_567489 = {}
    # Getting the type of 'methods' (line 1147)
    methods_567487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 21), 'methods', False)
    # Obtaining the member 'keys' of a type (line 1147)
    keys_567488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 21), methods_567487, 'keys')
    # Calling keys(args, kwargs) (line 1147)
    keys_call_result_567490 = invoke(stypy.reporting.localization.Localization(__file__, 1147, 21), keys_567488, *[], **kwargs_567489)
    
    # Applying the binary operator 'notin' (line 1147)
    result_contains_567491 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 7), 'notin', method_567486, keys_call_result_567490)
    
    # Testing the type of an if condition (line 1147)
    if_condition_567492 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1147, 4), result_contains_567491)
    # Assigning a type to the variable 'if_condition_567492' (line 1147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 4), 'if_condition_567492', if_condition_567492)
    # SSA begins for if statement (line 1147)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1148)
    # Processing the call arguments (line 1148)
    str_567494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1148, 25), 'str', 'Method %s not recognized.')
    # Getting the type of 'method' (line 1148)
    method_567495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 55), 'method', False)
    # Applying the binary operator '%' (line 1148)
    result_mod_567496 = python_operator(stypy.reporting.localization.Localization(__file__, 1148, 25), '%', str_567494, method_567495)
    
    # Processing the call keyword arguments (line 1148)
    kwargs_567497 = {}
    # Getting the type of 'ValueError' (line 1148)
    ValueError_567493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1148)
    ValueError_call_result_567498 = invoke(stypy.reporting.localization.Localization(__file__, 1148, 14), ValueError_567493, *[result_mod_567496], **kwargs_567497)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1148, 8), ValueError_call_result_567498, 'raise parameter', BaseException)
    # SSA join for if statement (line 1147)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1150):
    
    # Assigning a Subscript to a Name (line 1150):
    
    # Obtaining the type of the subscript
    # Getting the type of 'method' (line 1150)
    method_567499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 24), 'method')
    # Getting the type of 'methods' (line 1150)
    methods_567500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 16), 'methods')
    # Obtaining the member '__getitem__' of a type (line 1150)
    getitem___567501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 16), methods_567500, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1150)
    subscript_call_result_567502 = invoke(stypy.reporting.localization.Localization(__file__, 1150, 16), getitem___567501, method_567499)
    
    # Assigning a type to the variable 'optimfunc' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'optimfunc', subscript_call_result_567502)
    
    # Call to optimfunc(...): (line 1151)
    # Processing the call arguments (line 1151)
    # Getting the type of 'x' (line 1151)
    x_567504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 21), 'x', False)
    # Getting the type of 'brack' (line 1151)
    brack_567505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 24), 'brack', False)
    # Processing the call keyword arguments (line 1151)
    kwargs_567506 = {}
    # Getting the type of 'optimfunc' (line 1151)
    optimfunc_567503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 11), 'optimfunc', False)
    # Calling optimfunc(args, kwargs) (line 1151)
    optimfunc_call_result_567507 = invoke(stypy.reporting.localization.Localization(__file__, 1151, 11), optimfunc_567503, *[x_567504, brack_567505], **kwargs_567506)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1151, 4), 'stypy_return_type', optimfunc_call_result_567507)
    
    # ################# End of 'boxcox_normmax(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'boxcox_normmax' in the type store
    # Getting the type of 'stypy_return_type' (line 1048)
    stypy_return_type_567508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_567508)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'boxcox_normmax'
    return stypy_return_type_567508

# Assigning a type to the variable 'boxcox_normmax' (line 1048)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 0), 'boxcox_normmax', boxcox_normmax)

@norecursion
def boxcox_normplot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1154)
    None_567509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 36), 'None')
    int_567510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1154, 44), 'int')
    defaults = [None_567509, int_567510]
    # Create a new context for function 'boxcox_normplot'
    module_type_store = module_type_store.open_function_context('boxcox_normplot', 1154, 0, False)
    
    # Passed parameters checking function
    boxcox_normplot.stypy_localization = localization
    boxcox_normplot.stypy_type_of_self = None
    boxcox_normplot.stypy_type_store = module_type_store
    boxcox_normplot.stypy_function_name = 'boxcox_normplot'
    boxcox_normplot.stypy_param_names_list = ['x', 'la', 'lb', 'plot', 'N']
    boxcox_normplot.stypy_varargs_param_name = None
    boxcox_normplot.stypy_kwargs_param_name = None
    boxcox_normplot.stypy_call_defaults = defaults
    boxcox_normplot.stypy_call_varargs = varargs
    boxcox_normplot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'boxcox_normplot', ['x', 'la', 'lb', 'plot', 'N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'boxcox_normplot', localization, ['x', 'la', 'lb', 'plot', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'boxcox_normplot(...)' code ##################

    str_567511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1218, (-1)), 'str', 'Compute parameters for a Box-Cox normality plot, optionally show it.\n\n    A Box-Cox normality plot shows graphically what the best transformation\n    parameter is to use in `boxcox` to obtain a distribution that is close\n    to normal.\n\n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    la, lb : scalar\n        The lower and upper bounds for the ``lmbda`` values to pass to `boxcox`\n        for Box-Cox transformations.  These are also the limits of the\n        horizontal axis of the plot if that is generated.\n    plot : object, optional\n        If given, plots the quantiles and least squares fit.\n        `plot` is an object that has to have methods "plot" and "text".\n        The `matplotlib.pyplot` module or a Matplotlib Axes object can be used,\n        or a custom object with the same methods.\n        Default is None, which means that no plot is created.\n    N : int, optional\n        Number of points on the horizontal axis (equally distributed from\n        `la` to `lb`).\n\n    Returns\n    -------\n    lmbdas : ndarray\n        The ``lmbda`` values for which a Box-Cox transform was done.\n    ppcc : ndarray\n        Probability Plot Correlelation Coefficient, as obtained from `probplot`\n        when fitting the Box-Cox transformed input `x` against a normal\n        distribution.\n\n    See Also\n    --------\n    probplot, boxcox, boxcox_normmax, boxcox_llf, ppcc_max\n\n    Notes\n    -----\n    Even if `plot` is given, the figure is not shown or saved by\n    `boxcox_normplot`; ``plt.show()`` or ``plt.savefig(\'figname.png\')``\n    should be used after calling `probplot`.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> import matplotlib.pyplot as plt\n\n    Generate some non-normally distributed data, and create a Box-Cox plot:\n\n    >>> x = stats.loggamma.rvs(5, size=500) + 5\n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(111)\n    >>> prob = stats.boxcox_normplot(x, -20, 20, plot=ax)\n\n    Determine and plot the optimal ``lmbda`` to transform ``x`` and plot it in\n    the same plot:\n\n    >>> _, maxlog = stats.boxcox(x)\n    >>> ax.axvline(maxlog, color=\'r\')\n\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Name (line 1219):
    
    # Assigning a Call to a Name (line 1219):
    
    # Call to asarray(...): (line 1219)
    # Processing the call arguments (line 1219)
    # Getting the type of 'x' (line 1219)
    x_567514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 19), 'x', False)
    # Processing the call keyword arguments (line 1219)
    kwargs_567515 = {}
    # Getting the type of 'np' (line 1219)
    np_567512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1219)
    asarray_567513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1219, 8), np_567512, 'asarray')
    # Calling asarray(args, kwargs) (line 1219)
    asarray_call_result_567516 = invoke(stypy.reporting.localization.Localization(__file__, 1219, 8), asarray_567513, *[x_567514], **kwargs_567515)
    
    # Assigning a type to the variable 'x' (line 1219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1219, 4), 'x', asarray_call_result_567516)
    
    
    # Getting the type of 'x' (line 1220)
    x_567517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 7), 'x')
    # Obtaining the member 'size' of a type (line 1220)
    size_567518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 7), x_567517, 'size')
    int_567519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, 17), 'int')
    # Applying the binary operator '==' (line 1220)
    result_eq_567520 = python_operator(stypy.reporting.localization.Localization(__file__, 1220, 7), '==', size_567518, int_567519)
    
    # Testing the type of an if condition (line 1220)
    if_condition_567521 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1220, 4), result_eq_567520)
    # Assigning a type to the variable 'if_condition_567521' (line 1220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 4), 'if_condition_567521', if_condition_567521)
    # SSA begins for if statement (line 1220)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'x' (line 1221)
    x_567522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 15), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 1221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 8), 'stypy_return_type', x_567522)
    # SSA join for if statement (line 1220)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'lb' (line 1223)
    lb_567523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 7), 'lb')
    # Getting the type of 'la' (line 1223)
    la_567524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 13), 'la')
    # Applying the binary operator '<=' (line 1223)
    result_le_567525 = python_operator(stypy.reporting.localization.Localization(__file__, 1223, 7), '<=', lb_567523, la_567524)
    
    # Testing the type of an if condition (line 1223)
    if_condition_567526 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1223, 4), result_le_567525)
    # Assigning a type to the variable 'if_condition_567526' (line 1223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 4), 'if_condition_567526', if_condition_567526)
    # SSA begins for if statement (line 1223)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1224)
    # Processing the call arguments (line 1224)
    str_567528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 25), 'str', '`lb` has to be larger than `la`.')
    # Processing the call keyword arguments (line 1224)
    kwargs_567529 = {}
    # Getting the type of 'ValueError' (line 1224)
    ValueError_567527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1224)
    ValueError_call_result_567530 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 14), ValueError_567527, *[str_567528], **kwargs_567529)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1224, 8), ValueError_call_result_567530, 'raise parameter', BaseException)
    # SSA join for if statement (line 1223)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1226):
    
    # Assigning a Call to a Name (line 1226):
    
    # Call to linspace(...): (line 1226)
    # Processing the call arguments (line 1226)
    # Getting the type of 'la' (line 1226)
    la_567533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 25), 'la', False)
    # Getting the type of 'lb' (line 1226)
    lb_567534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 29), 'lb', False)
    # Processing the call keyword arguments (line 1226)
    # Getting the type of 'N' (line 1226)
    N_567535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 37), 'N', False)
    keyword_567536 = N_567535
    kwargs_567537 = {'num': keyword_567536}
    # Getting the type of 'np' (line 1226)
    np_567531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 13), 'np', False)
    # Obtaining the member 'linspace' of a type (line 1226)
    linspace_567532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 13), np_567531, 'linspace')
    # Calling linspace(args, kwargs) (line 1226)
    linspace_call_result_567538 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 13), linspace_567532, *[la_567533, lb_567534], **kwargs_567537)
    
    # Assigning a type to the variable 'lmbdas' (line 1226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 4), 'lmbdas', linspace_call_result_567538)
    
    # Assigning a BinOp to a Name (line 1227):
    
    # Assigning a BinOp to a Name (line 1227):
    # Getting the type of 'lmbdas' (line 1227)
    lmbdas_567539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 11), 'lmbdas')
    float_567540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 20), 'float')
    # Applying the binary operator '*' (line 1227)
    result_mul_567541 = python_operator(stypy.reporting.localization.Localization(__file__, 1227, 11), '*', lmbdas_567539, float_567540)
    
    # Assigning a type to the variable 'ppcc' (line 1227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 4), 'ppcc', result_mul_567541)
    
    
    # Call to enumerate(...): (line 1228)
    # Processing the call arguments (line 1228)
    # Getting the type of 'lmbdas' (line 1228)
    lmbdas_567543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 28), 'lmbdas', False)
    # Processing the call keyword arguments (line 1228)
    kwargs_567544 = {}
    # Getting the type of 'enumerate' (line 1228)
    enumerate_567542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 18), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1228)
    enumerate_call_result_567545 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 18), enumerate_567542, *[lmbdas_567543], **kwargs_567544)
    
    # Testing the type of a for loop iterable (line 1228)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1228, 4), enumerate_call_result_567545)
    # Getting the type of the for loop variable (line 1228)
    for_loop_var_567546 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1228, 4), enumerate_call_result_567545)
    # Assigning a type to the variable 'i' (line 1228)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1228, 4), for_loop_var_567546))
    # Assigning a type to the variable 'val' (line 1228)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 4), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1228, 4), for_loop_var_567546))
    # SSA begins for a for statement (line 1228)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1230):
    
    # Assigning a Call to a Name (line 1230):
    
    # Call to boxcox(...): (line 1230)
    # Processing the call arguments (line 1230)
    # Getting the type of 'x' (line 1230)
    x_567548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 19), 'x', False)
    # Processing the call keyword arguments (line 1230)
    # Getting the type of 'val' (line 1230)
    val_567549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 28), 'val', False)
    keyword_567550 = val_567549
    kwargs_567551 = {'lmbda': keyword_567550}
    # Getting the type of 'boxcox' (line 1230)
    boxcox_567547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 12), 'boxcox', False)
    # Calling boxcox(args, kwargs) (line 1230)
    boxcox_call_result_567552 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 12), boxcox_567547, *[x_567548], **kwargs_567551)
    
    # Assigning a type to the variable 'z' (line 1230)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1230, 8), 'z', boxcox_call_result_567552)
    
    # Assigning a Call to a Tuple (line 1231):
    
    # Assigning a Subscript to a Name (line 1231):
    
    # Obtaining the type of the subscript
    int_567553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 8), 'int')
    
    # Call to probplot(...): (line 1231)
    # Processing the call arguments (line 1231)
    # Getting the type of 'z' (line 1231)
    z_567555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 25), 'z', False)
    # Processing the call keyword arguments (line 1231)
    str_567556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 33), 'str', 'norm')
    keyword_567557 = str_567556
    # Getting the type of 'True' (line 1231)
    True_567558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 45), 'True', False)
    keyword_567559 = True_567558
    kwargs_567560 = {'dist': keyword_567557, 'fit': keyword_567559}
    # Getting the type of 'probplot' (line 1231)
    probplot_567554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 16), 'probplot', False)
    # Calling probplot(args, kwargs) (line 1231)
    probplot_call_result_567561 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 16), probplot_567554, *[z_567555], **kwargs_567560)
    
    # Obtaining the member '__getitem__' of a type (line 1231)
    getitem___567562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 8), probplot_call_result_567561, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1231)
    subscript_call_result_567563 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 8), getitem___567562, int_567553)
    
    # Assigning a type to the variable 'tuple_var_assignment_566025' (line 1231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 8), 'tuple_var_assignment_566025', subscript_call_result_567563)
    
    # Assigning a Subscript to a Name (line 1231):
    
    # Obtaining the type of the subscript
    int_567564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 8), 'int')
    
    # Call to probplot(...): (line 1231)
    # Processing the call arguments (line 1231)
    # Getting the type of 'z' (line 1231)
    z_567566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 25), 'z', False)
    # Processing the call keyword arguments (line 1231)
    str_567567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 33), 'str', 'norm')
    keyword_567568 = str_567567
    # Getting the type of 'True' (line 1231)
    True_567569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 45), 'True', False)
    keyword_567570 = True_567569
    kwargs_567571 = {'dist': keyword_567568, 'fit': keyword_567570}
    # Getting the type of 'probplot' (line 1231)
    probplot_567565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 16), 'probplot', False)
    # Calling probplot(args, kwargs) (line 1231)
    probplot_call_result_567572 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 16), probplot_567565, *[z_567566], **kwargs_567571)
    
    # Obtaining the member '__getitem__' of a type (line 1231)
    getitem___567573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 8), probplot_call_result_567572, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1231)
    subscript_call_result_567574 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 8), getitem___567573, int_567564)
    
    # Assigning a type to the variable 'tuple_var_assignment_566026' (line 1231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 8), 'tuple_var_assignment_566026', subscript_call_result_567574)
    
    # Assigning a Name to a Name (line 1231):
    # Getting the type of 'tuple_var_assignment_566025' (line 1231)
    tuple_var_assignment_566025_567575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 8), 'tuple_var_assignment_566025')
    # Assigning a type to the variable '_' (line 1231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 8), '_', tuple_var_assignment_566025_567575)
    
    # Assigning a Name to a Name (line 1231):
    # Getting the type of 'tuple_var_assignment_566026' (line 1231)
    tuple_var_assignment_566026_567576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 8), 'tuple_var_assignment_566026')
    # Assigning a type to the variable 'r2' (line 1231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 11), 'r2', tuple_var_assignment_566026_567576)
    
    # Assigning a Subscript to a Subscript (line 1232):
    
    # Assigning a Subscript to a Subscript (line 1232):
    
    # Obtaining the type of the subscript
    int_567577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 21), 'int')
    # Getting the type of 'r2' (line 1232)
    r2_567578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 18), 'r2')
    # Obtaining the member '__getitem__' of a type (line 1232)
    getitem___567579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 18), r2_567578, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1232)
    subscript_call_result_567580 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 18), getitem___567579, int_567577)
    
    # Getting the type of 'ppcc' (line 1232)
    ppcc_567581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'ppcc')
    # Getting the type of 'i' (line 1232)
    i_567582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 13), 'i')
    # Storing an element on a container (line 1232)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1232, 8), ppcc_567581, (i_567582, subscript_call_result_567580))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1234)
    # Getting the type of 'plot' (line 1234)
    plot_567583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 4), 'plot')
    # Getting the type of 'None' (line 1234)
    None_567584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 19), 'None')
    
    (may_be_567585, more_types_in_union_567586) = may_not_be_none(plot_567583, None_567584)

    if may_be_567585:

        if more_types_in_union_567586:
            # Runtime conditional SSA (line 1234)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to plot(...): (line 1235)
        # Processing the call arguments (line 1235)
        # Getting the type of 'lmbdas' (line 1235)
        lmbdas_567589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 18), 'lmbdas', False)
        # Getting the type of 'ppcc' (line 1235)
        ppcc_567590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 26), 'ppcc', False)
        str_567591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, 32), 'str', 'x')
        # Processing the call keyword arguments (line 1235)
        kwargs_567592 = {}
        # Getting the type of 'plot' (line 1235)
        plot_567587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'plot', False)
        # Obtaining the member 'plot' of a type (line 1235)
        plot_567588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 8), plot_567587, 'plot')
        # Calling plot(args, kwargs) (line 1235)
        plot_call_result_567593 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 8), plot_567588, *[lmbdas_567589, ppcc_567590, str_567591], **kwargs_567592)
        
        
        # Call to _add_axis_labels_title(...): (line 1236)
        # Processing the call arguments (line 1236)
        # Getting the type of 'plot' (line 1236)
        plot_567595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 31), 'plot', False)
        # Processing the call keyword arguments (line 1236)
        str_567596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, 44), 'str', '$\\lambda$')
        keyword_567597 = str_567596
        str_567598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 38), 'str', 'Prob Plot Corr. Coef.')
        keyword_567599 = str_567598
        str_567600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 37), 'str', 'Box-Cox Normality Plot')
        keyword_567601 = str_567600
        kwargs_567602 = {'title': keyword_567601, 'xlabel': keyword_567597, 'ylabel': keyword_567599}
        # Getting the type of '_add_axis_labels_title' (line 1236)
        _add_axis_labels_title_567594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), '_add_axis_labels_title', False)
        # Calling _add_axis_labels_title(args, kwargs) (line 1236)
        _add_axis_labels_title_call_result_567603 = invoke(stypy.reporting.localization.Localization(__file__, 1236, 8), _add_axis_labels_title_567594, *[plot_567595], **kwargs_567602)
        

        if more_types_in_union_567586:
            # SSA join for if statement (line 1234)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1240)
    tuple_567604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1240)
    # Adding element type (line 1240)
    # Getting the type of 'lmbdas' (line 1240)
    lmbdas_567605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 11), 'lmbdas')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1240, 11), tuple_567604, lmbdas_567605)
    # Adding element type (line 1240)
    # Getting the type of 'ppcc' (line 1240)
    ppcc_567606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 19), 'ppcc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1240, 11), tuple_567604, ppcc_567606)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 4), 'stypy_return_type', tuple_567604)
    
    # ################# End of 'boxcox_normplot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'boxcox_normplot' in the type store
    # Getting the type of 'stypy_return_type' (line 1154)
    stypy_return_type_567607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_567607)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'boxcox_normplot'
    return stypy_return_type_567607

# Assigning a type to the variable 'boxcox_normplot' (line 1154)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 0), 'boxcox_normplot', boxcox_normplot)

@norecursion
def shapiro(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'shapiro'
    module_type_store = module_type_store.open_function_context('shapiro', 1243, 0, False)
    
    # Passed parameters checking function
    shapiro.stypy_localization = localization
    shapiro.stypy_type_of_self = None
    shapiro.stypy_type_store = module_type_store
    shapiro.stypy_function_name = 'shapiro'
    shapiro.stypy_param_names_list = ['x']
    shapiro.stypy_varargs_param_name = None
    shapiro.stypy_kwargs_param_name = None
    shapiro.stypy_call_defaults = defaults
    shapiro.stypy_call_varargs = varargs
    shapiro.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'shapiro', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'shapiro', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'shapiro(...)' code ##################

    str_567608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, (-1)), 'str', '\n    Perform the Shapiro-Wilk test for normality.\n\n    The Shapiro-Wilk test tests the null hypothesis that the\n    data was drawn from a normal distribution.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of sample data.\n\n    Returns\n    -------\n    W : float\n        The test statistic.\n    p-value : float\n        The p-value for the hypothesis test.\n\n    See Also\n    --------\n    anderson : The Anderson-Darling test for normality\n    kstest : The Kolmogorov-Smirnov test for goodness of fit.\n\n    Notes\n    -----\n    The algorithm used is described in [4]_ but censoring parameters as\n    described are not implemented. For N > 5000 the W test statistic is accurate\n    but the p-value may not be.\n\n    The chance of rejecting the null hypothesis when it is true is close to 5%\n    regardless of sample size.\n\n    References\n    ----------\n    .. [1] http://www.itl.nist.gov/div898/handbook/prc/section2/prc213.htm\n    .. [2] Shapiro, S. S. & Wilk, M.B (1965). An analysis of variance test for\n           normality (complete samples), Biometrika, Vol. 52, pp. 591-611.\n    .. [3] Razali, N. M. & Wah, Y. B. (2011) Power comparisons of Shapiro-Wilk,\n           Kolmogorov-Smirnov, Lilliefors and Anderson-Darling tests, Journal of\n           Statistical Modeling and Analytics, Vol. 2, pp. 21-33.\n    .. [4] ALGORITHM AS R94 APPL. STATIST. (1995) VOL. 44, NO. 4.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> np.random.seed(12345678)\n    >>> x = stats.norm.rvs(loc=5, scale=3, size=100)\n    >>> stats.shapiro(x)\n    (0.9772805571556091, 0.08144091814756393)\n\n    ')
    
    # Assigning a Call to a Name (line 1295):
    
    # Assigning a Call to a Name (line 1295):
    
    # Call to ravel(...): (line 1295)
    # Processing the call arguments (line 1295)
    # Getting the type of 'x' (line 1295)
    x_567611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 17), 'x', False)
    # Processing the call keyword arguments (line 1295)
    kwargs_567612 = {}
    # Getting the type of 'np' (line 1295)
    np_567609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 8), 'np', False)
    # Obtaining the member 'ravel' of a type (line 1295)
    ravel_567610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 8), np_567609, 'ravel')
    # Calling ravel(args, kwargs) (line 1295)
    ravel_call_result_567613 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 8), ravel_567610, *[x_567611], **kwargs_567612)
    
    # Assigning a type to the variable 'x' (line 1295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 4), 'x', ravel_call_result_567613)
    
    # Assigning a Call to a Name (line 1297):
    
    # Assigning a Call to a Name (line 1297):
    
    # Call to len(...): (line 1297)
    # Processing the call arguments (line 1297)
    # Getting the type of 'x' (line 1297)
    x_567615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'x', False)
    # Processing the call keyword arguments (line 1297)
    kwargs_567616 = {}
    # Getting the type of 'len' (line 1297)
    len_567614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 8), 'len', False)
    # Calling len(args, kwargs) (line 1297)
    len_call_result_567617 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 8), len_567614, *[x_567615], **kwargs_567616)
    
    # Assigning a type to the variable 'N' (line 1297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 4), 'N', len_call_result_567617)
    
    
    # Getting the type of 'N' (line 1298)
    N_567618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 7), 'N')
    int_567619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 11), 'int')
    # Applying the binary operator '<' (line 1298)
    result_lt_567620 = python_operator(stypy.reporting.localization.Localization(__file__, 1298, 7), '<', N_567618, int_567619)
    
    # Testing the type of an if condition (line 1298)
    if_condition_567621 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1298, 4), result_lt_567620)
    # Assigning a type to the variable 'if_condition_567621' (line 1298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'if_condition_567621', if_condition_567621)
    # SSA begins for if statement (line 1298)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1299)
    # Processing the call arguments (line 1299)
    str_567623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 25), 'str', 'Data must be at least length 3.')
    # Processing the call keyword arguments (line 1299)
    kwargs_567624 = {}
    # Getting the type of 'ValueError' (line 1299)
    ValueError_567622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1299)
    ValueError_call_result_567625 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 14), ValueError_567622, *[str_567623], **kwargs_567624)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1299, 8), ValueError_call_result_567625, 'raise parameter', BaseException)
    # SSA join for if statement (line 1298)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1301):
    
    # Assigning a Call to a Name (line 1301):
    
    # Call to zeros(...): (line 1301)
    # Processing the call arguments (line 1301)
    # Getting the type of 'N' (line 1301)
    N_567627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 14), 'N', False)
    str_567628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1301, 17), 'str', 'f')
    # Processing the call keyword arguments (line 1301)
    kwargs_567629 = {}
    # Getting the type of 'zeros' (line 1301)
    zeros_567626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 8), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1301)
    zeros_call_result_567630 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 8), zeros_567626, *[N_567627, str_567628], **kwargs_567629)
    
    # Assigning a type to the variable 'a' (line 1301)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 4), 'a', zeros_call_result_567630)
    
    # Assigning a Num to a Name (line 1302):
    
    # Assigning a Num to a Name (line 1302):
    int_567631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 11), 'int')
    # Assigning a type to the variable 'init' (line 1302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 4), 'init', int_567631)
    
    # Assigning a Call to a Name (line 1304):
    
    # Assigning a Call to a Name (line 1304):
    
    # Call to sort(...): (line 1304)
    # Processing the call arguments (line 1304)
    # Getting the type of 'x' (line 1304)
    x_567633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 13), 'x', False)
    # Processing the call keyword arguments (line 1304)
    kwargs_567634 = {}
    # Getting the type of 'sort' (line 1304)
    sort_567632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 8), 'sort', False)
    # Calling sort(args, kwargs) (line 1304)
    sort_call_result_567635 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 8), sort_567632, *[x_567633], **kwargs_567634)
    
    # Assigning a type to the variable 'y' (line 1304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'y', sort_call_result_567635)
    
    # Assigning a Call to a Tuple (line 1305):
    
    # Assigning a Subscript to a Name (line 1305):
    
    # Obtaining the type of the subscript
    int_567636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 4), 'int')
    
    # Call to swilk(...): (line 1305)
    # Processing the call arguments (line 1305)
    # Getting the type of 'y' (line 1305)
    y_567639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 37), 'y', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'N' (line 1305)
    N_567640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 43), 'N', False)
    int_567641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 46), 'int')
    # Applying the binary operator '//' (line 1305)
    result_floordiv_567642 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 43), '//', N_567640, int_567641)
    
    slice_567643 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1305, 40), None, result_floordiv_567642, None)
    # Getting the type of 'a' (line 1305)
    a_567644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 40), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 1305)
    getitem___567645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 40), a_567644, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1305)
    subscript_call_result_567646 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 40), getitem___567645, slice_567643)
    
    # Getting the type of 'init' (line 1305)
    init_567647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 50), 'init', False)
    # Processing the call keyword arguments (line 1305)
    kwargs_567648 = {}
    # Getting the type of 'statlib' (line 1305)
    statlib_567637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 23), 'statlib', False)
    # Obtaining the member 'swilk' of a type (line 1305)
    swilk_567638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 23), statlib_567637, 'swilk')
    # Calling swilk(args, kwargs) (line 1305)
    swilk_call_result_567649 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 23), swilk_567638, *[y_567639, subscript_call_result_567646, init_567647], **kwargs_567648)
    
    # Obtaining the member '__getitem__' of a type (line 1305)
    getitem___567650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 4), swilk_call_result_567649, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1305)
    subscript_call_result_567651 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 4), getitem___567650, int_567636)
    
    # Assigning a type to the variable 'tuple_var_assignment_566027' (line 1305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'tuple_var_assignment_566027', subscript_call_result_567651)
    
    # Assigning a Subscript to a Name (line 1305):
    
    # Obtaining the type of the subscript
    int_567652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 4), 'int')
    
    # Call to swilk(...): (line 1305)
    # Processing the call arguments (line 1305)
    # Getting the type of 'y' (line 1305)
    y_567655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 37), 'y', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'N' (line 1305)
    N_567656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 43), 'N', False)
    int_567657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 46), 'int')
    # Applying the binary operator '//' (line 1305)
    result_floordiv_567658 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 43), '//', N_567656, int_567657)
    
    slice_567659 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1305, 40), None, result_floordiv_567658, None)
    # Getting the type of 'a' (line 1305)
    a_567660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 40), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 1305)
    getitem___567661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 40), a_567660, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1305)
    subscript_call_result_567662 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 40), getitem___567661, slice_567659)
    
    # Getting the type of 'init' (line 1305)
    init_567663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 50), 'init', False)
    # Processing the call keyword arguments (line 1305)
    kwargs_567664 = {}
    # Getting the type of 'statlib' (line 1305)
    statlib_567653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 23), 'statlib', False)
    # Obtaining the member 'swilk' of a type (line 1305)
    swilk_567654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 23), statlib_567653, 'swilk')
    # Calling swilk(args, kwargs) (line 1305)
    swilk_call_result_567665 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 23), swilk_567654, *[y_567655, subscript_call_result_567662, init_567663], **kwargs_567664)
    
    # Obtaining the member '__getitem__' of a type (line 1305)
    getitem___567666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 4), swilk_call_result_567665, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1305)
    subscript_call_result_567667 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 4), getitem___567666, int_567652)
    
    # Assigning a type to the variable 'tuple_var_assignment_566028' (line 1305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'tuple_var_assignment_566028', subscript_call_result_567667)
    
    # Assigning a Subscript to a Name (line 1305):
    
    # Obtaining the type of the subscript
    int_567668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 4), 'int')
    
    # Call to swilk(...): (line 1305)
    # Processing the call arguments (line 1305)
    # Getting the type of 'y' (line 1305)
    y_567671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 37), 'y', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'N' (line 1305)
    N_567672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 43), 'N', False)
    int_567673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 46), 'int')
    # Applying the binary operator '//' (line 1305)
    result_floordiv_567674 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 43), '//', N_567672, int_567673)
    
    slice_567675 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1305, 40), None, result_floordiv_567674, None)
    # Getting the type of 'a' (line 1305)
    a_567676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 40), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 1305)
    getitem___567677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 40), a_567676, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1305)
    subscript_call_result_567678 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 40), getitem___567677, slice_567675)
    
    # Getting the type of 'init' (line 1305)
    init_567679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 50), 'init', False)
    # Processing the call keyword arguments (line 1305)
    kwargs_567680 = {}
    # Getting the type of 'statlib' (line 1305)
    statlib_567669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 23), 'statlib', False)
    # Obtaining the member 'swilk' of a type (line 1305)
    swilk_567670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 23), statlib_567669, 'swilk')
    # Calling swilk(args, kwargs) (line 1305)
    swilk_call_result_567681 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 23), swilk_567670, *[y_567671, subscript_call_result_567678, init_567679], **kwargs_567680)
    
    # Obtaining the member '__getitem__' of a type (line 1305)
    getitem___567682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 4), swilk_call_result_567681, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1305)
    subscript_call_result_567683 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 4), getitem___567682, int_567668)
    
    # Assigning a type to the variable 'tuple_var_assignment_566029' (line 1305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'tuple_var_assignment_566029', subscript_call_result_567683)
    
    # Assigning a Subscript to a Name (line 1305):
    
    # Obtaining the type of the subscript
    int_567684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 4), 'int')
    
    # Call to swilk(...): (line 1305)
    # Processing the call arguments (line 1305)
    # Getting the type of 'y' (line 1305)
    y_567687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 37), 'y', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'N' (line 1305)
    N_567688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 43), 'N', False)
    int_567689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 46), 'int')
    # Applying the binary operator '//' (line 1305)
    result_floordiv_567690 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 43), '//', N_567688, int_567689)
    
    slice_567691 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1305, 40), None, result_floordiv_567690, None)
    # Getting the type of 'a' (line 1305)
    a_567692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 40), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 1305)
    getitem___567693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 40), a_567692, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1305)
    subscript_call_result_567694 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 40), getitem___567693, slice_567691)
    
    # Getting the type of 'init' (line 1305)
    init_567695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 50), 'init', False)
    # Processing the call keyword arguments (line 1305)
    kwargs_567696 = {}
    # Getting the type of 'statlib' (line 1305)
    statlib_567685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 23), 'statlib', False)
    # Obtaining the member 'swilk' of a type (line 1305)
    swilk_567686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 23), statlib_567685, 'swilk')
    # Calling swilk(args, kwargs) (line 1305)
    swilk_call_result_567697 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 23), swilk_567686, *[y_567687, subscript_call_result_567694, init_567695], **kwargs_567696)
    
    # Obtaining the member '__getitem__' of a type (line 1305)
    getitem___567698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 4), swilk_call_result_567697, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1305)
    subscript_call_result_567699 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 4), getitem___567698, int_567684)
    
    # Assigning a type to the variable 'tuple_var_assignment_566030' (line 1305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'tuple_var_assignment_566030', subscript_call_result_567699)
    
    # Assigning a Name to a Name (line 1305):
    # Getting the type of 'tuple_var_assignment_566027' (line 1305)
    tuple_var_assignment_566027_567700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'tuple_var_assignment_566027')
    # Assigning a type to the variable 'a' (line 1305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'a', tuple_var_assignment_566027_567700)
    
    # Assigning a Name to a Name (line 1305):
    # Getting the type of 'tuple_var_assignment_566028' (line 1305)
    tuple_var_assignment_566028_567701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'tuple_var_assignment_566028')
    # Assigning a type to the variable 'w' (line 1305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 7), 'w', tuple_var_assignment_566028_567701)
    
    # Assigning a Name to a Name (line 1305):
    # Getting the type of 'tuple_var_assignment_566029' (line 1305)
    tuple_var_assignment_566029_567702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'tuple_var_assignment_566029')
    # Assigning a type to the variable 'pw' (line 1305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 10), 'pw', tuple_var_assignment_566029_567702)
    
    # Assigning a Name to a Name (line 1305):
    # Getting the type of 'tuple_var_assignment_566030' (line 1305)
    tuple_var_assignment_566030_567703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'tuple_var_assignment_566030')
    # Assigning a type to the variable 'ifault' (line 1305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 14), 'ifault', tuple_var_assignment_566030_567703)
    
    
    # Getting the type of 'ifault' (line 1306)
    ifault_567704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 7), 'ifault')
    
    # Obtaining an instance of the builtin type 'list' (line 1306)
    list_567705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1306, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1306)
    # Adding element type (line 1306)
    int_567706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1306, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1306, 21), list_567705, int_567706)
    # Adding element type (line 1306)
    int_567707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1306, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1306, 21), list_567705, int_567707)
    
    # Applying the binary operator 'notin' (line 1306)
    result_contains_567708 = python_operator(stypy.reporting.localization.Localization(__file__, 1306, 7), 'notin', ifault_567704, list_567705)
    
    # Testing the type of an if condition (line 1306)
    if_condition_567709 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1306, 4), result_contains_567708)
    # Assigning a type to the variable 'if_condition_567709' (line 1306)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 4), 'if_condition_567709', if_condition_567709)
    # SSA begins for if statement (line 1306)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1307)
    # Processing the call arguments (line 1307)
    str_567712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 22), 'str', 'Input data for shapiro has range zero. The results may not be accurate.')
    # Processing the call keyword arguments (line 1307)
    kwargs_567713 = {}
    # Getting the type of 'warnings' (line 1307)
    warnings_567710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1307)
    warn_567711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 8), warnings_567710, 'warn')
    # Calling warn(args, kwargs) (line 1307)
    warn_call_result_567714 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 8), warn_567711, *[str_567712], **kwargs_567713)
    
    # SSA join for if statement (line 1306)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'N' (line 1309)
    N_567715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 7), 'N')
    int_567716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 11), 'int')
    # Applying the binary operator '>' (line 1309)
    result_gt_567717 = python_operator(stypy.reporting.localization.Localization(__file__, 1309, 7), '>', N_567715, int_567716)
    
    # Testing the type of an if condition (line 1309)
    if_condition_567718 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1309, 4), result_gt_567717)
    # Assigning a type to the variable 'if_condition_567718' (line 1309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 4), 'if_condition_567718', if_condition_567718)
    # SSA begins for if statement (line 1309)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1310)
    # Processing the call arguments (line 1310)
    str_567721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1310, 22), 'str', 'p-value may not be accurate for N > 5000.')
    # Processing the call keyword arguments (line 1310)
    kwargs_567722 = {}
    # Getting the type of 'warnings' (line 1310)
    warnings_567719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1310)
    warn_567720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1310, 8), warnings_567719, 'warn')
    # Calling warn(args, kwargs) (line 1310)
    warn_call_result_567723 = invoke(stypy.reporting.localization.Localization(__file__, 1310, 8), warn_567720, *[str_567721], **kwargs_567722)
    
    # SSA join for if statement (line 1309)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1312)
    tuple_567724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1312)
    # Adding element type (line 1312)
    # Getting the type of 'w' (line 1312)
    w_567725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 11), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1312, 11), tuple_567724, w_567725)
    # Adding element type (line 1312)
    # Getting the type of 'pw' (line 1312)
    pw_567726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 14), 'pw')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1312, 11), tuple_567724, pw_567726)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'stypy_return_type', tuple_567724)
    
    # ################# End of 'shapiro(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'shapiro' in the type store
    # Getting the type of 'stypy_return_type' (line 1243)
    stypy_return_type_567727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_567727)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'shapiro'
    return stypy_return_type_567727

# Assigning a type to the variable 'shapiro' (line 1243)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 0), 'shapiro', shapiro)

# Assigning a Call to a Name (line 1317):

# Assigning a Call to a Name (line 1317):

# Call to array(...): (line 1317)
# Processing the call arguments (line 1317)

# Obtaining an instance of the builtin type 'list' (line 1317)
list_567729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 20), 'list')
# Adding type elements to the builtin type 'list' instance (line 1317)
# Adding element type (line 1317)
float_567730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 21), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1317, 20), list_567729, float_567730)
# Adding element type (line 1317)
float_567731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 28), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1317, 20), list_567729, float_567731)
# Adding element type (line 1317)
float_567732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 35), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1317, 20), list_567729, float_567732)
# Adding element type (line 1317)
float_567733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 42), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1317, 20), list_567729, float_567733)
# Adding element type (line 1317)
float_567734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 49), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1317, 20), list_567729, float_567734)

# Processing the call keyword arguments (line 1317)
kwargs_567735 = {}
# Getting the type of 'array' (line 1317)
array_567728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 14), 'array', False)
# Calling array(args, kwargs) (line 1317)
array_call_result_567736 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 14), array_567728, *[list_567729], **kwargs_567735)

# Assigning a type to the variable '_Avals_norm' (line 1317)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 0), '_Avals_norm', array_call_result_567736)

# Assigning a Call to a Name (line 1318):

# Assigning a Call to a Name (line 1318):

# Call to array(...): (line 1318)
# Processing the call arguments (line 1318)

# Obtaining an instance of the builtin type 'list' (line 1318)
list_567738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 21), 'list')
# Adding type elements to the builtin type 'list' instance (line 1318)
# Adding element type (line 1318)
float_567739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 22), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1318, 21), list_567738, float_567739)
# Adding element type (line 1318)
float_567740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 29), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1318, 21), list_567738, float_567740)
# Adding element type (line 1318)
float_567741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 36), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1318, 21), list_567738, float_567741)
# Adding element type (line 1318)
float_567742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 43), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1318, 21), list_567738, float_567742)
# Adding element type (line 1318)
float_567743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 50), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1318, 21), list_567738, float_567743)

# Processing the call keyword arguments (line 1318)
kwargs_567744 = {}
# Getting the type of 'array' (line 1318)
array_567737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 15), 'array', False)
# Calling array(args, kwargs) (line 1318)
array_call_result_567745 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 15), array_567737, *[list_567738], **kwargs_567744)

# Assigning a type to the variable '_Avals_expon' (line 1318)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 0), '_Avals_expon', array_call_result_567745)

# Assigning a Call to a Name (line 1321):

# Assigning a Call to a Name (line 1321):

# Call to array(...): (line 1321)
# Processing the call arguments (line 1321)

# Obtaining an instance of the builtin type 'list' (line 1321)
list_567747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 22), 'list')
# Adding type elements to the builtin type 'list' instance (line 1321)
# Adding element type (line 1321)
float_567748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 23), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1321, 22), list_567747, float_567748)
# Adding element type (line 1321)
float_567749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 30), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1321, 22), list_567747, float_567749)
# Adding element type (line 1321)
float_567750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 37), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1321, 22), list_567747, float_567750)
# Adding element type (line 1321)
float_567751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 44), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1321, 22), list_567747, float_567751)
# Adding element type (line 1321)
float_567752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 51), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1321, 22), list_567747, float_567752)

# Processing the call keyword arguments (line 1321)
kwargs_567753 = {}
# Getting the type of 'array' (line 1321)
array_567746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 16), 'array', False)
# Calling array(args, kwargs) (line 1321)
array_call_result_567754 = invoke(stypy.reporting.localization.Localization(__file__, 1321, 16), array_567746, *[list_567747], **kwargs_567753)

# Assigning a type to the variable '_Avals_gumbel' (line 1321)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 0), '_Avals_gumbel', array_call_result_567754)

# Assigning a Call to a Name (line 1325):

# Assigning a Call to a Name (line 1325):

# Call to array(...): (line 1325)
# Processing the call arguments (line 1325)

# Obtaining an instance of the builtin type 'list' (line 1325)
list_567756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 24), 'list')
# Adding type elements to the builtin type 'list' instance (line 1325)
# Adding element type (line 1325)
float_567757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 25), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1325, 24), list_567756, float_567757)
# Adding element type (line 1325)
float_567758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 32), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1325, 24), list_567756, float_567758)
# Adding element type (line 1325)
float_567759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 39), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1325, 24), list_567756, float_567759)
# Adding element type (line 1325)
float_567760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 46), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1325, 24), list_567756, float_567760)
# Adding element type (line 1325)
float_567761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 53), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1325, 24), list_567756, float_567761)
# Adding element type (line 1325)
float_567762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 60), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1325, 24), list_567756, float_567762)

# Processing the call keyword arguments (line 1325)
kwargs_567763 = {}
# Getting the type of 'array' (line 1325)
array_567755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 18), 'array', False)
# Calling array(args, kwargs) (line 1325)
array_call_result_567764 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 18), array_567755, *[list_567756], **kwargs_567763)

# Assigning a type to the variable '_Avals_logistic' (line 1325)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1325, 0), '_Avals_logistic', array_call_result_567764)

# Assigning a Call to a Name (line 1328):

# Assigning a Call to a Name (line 1328):

# Call to namedtuple(...): (line 1328)
# Processing the call arguments (line 1328)
str_567766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 28), 'str', 'AndersonResult')

# Obtaining an instance of the builtin type 'tuple' (line 1328)
tuple_567767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 47), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1328)
# Adding element type (line 1328)
str_567768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 47), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 47), tuple_567767, str_567768)
# Adding element type (line 1328)
str_567769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1329, 47), 'str', 'critical_values')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 47), tuple_567767, str_567769)
# Adding element type (line 1328)
str_567770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1330, 47), 'str', 'significance_level')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 47), tuple_567767, str_567770)

# Processing the call keyword arguments (line 1328)
kwargs_567771 = {}
# Getting the type of 'namedtuple' (line 1328)
namedtuple_567765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 17), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1328)
namedtuple_call_result_567772 = invoke(stypy.reporting.localization.Localization(__file__, 1328, 17), namedtuple_567765, *[str_567766, tuple_567767], **kwargs_567771)

# Assigning a type to the variable 'AndersonResult' (line 1328)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 0), 'AndersonResult', namedtuple_call_result_567772)

@norecursion
def anderson(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_567773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1333, 21), 'str', 'norm')
    defaults = [str_567773]
    # Create a new context for function 'anderson'
    module_type_store = module_type_store.open_function_context('anderson', 1333, 0, False)
    
    # Passed parameters checking function
    anderson.stypy_localization = localization
    anderson.stypy_type_of_self = None
    anderson.stypy_type_store = module_type_store
    anderson.stypy_function_name = 'anderson'
    anderson.stypy_param_names_list = ['x', 'dist']
    anderson.stypy_varargs_param_name = None
    anderson.stypy_kwargs_param_name = None
    anderson.stypy_call_defaults = defaults
    anderson.stypy_call_varargs = varargs
    anderson.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'anderson', ['x', 'dist'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'anderson', localization, ['x', 'dist'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'anderson(...)' code ##################

    str_567774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1399, (-1)), 'str', "\n    Anderson-Darling test for data coming from a particular distribution\n\n    The Anderson-Darling test is a modification of the Kolmogorov-\n    Smirnov test `kstest` for the null hypothesis that a sample is\n    drawn from a population that follows a particular distribution.\n    For the Anderson-Darling test, the critical values depend on\n    which distribution is being tested against.  This function works\n    for normal, exponential, logistic, or Gumbel (Extreme Value\n    Type I) distributions.\n\n    Parameters\n    ----------\n    x : array_like\n        array of sample data\n    dist : {'norm','expon','logistic','gumbel','gumbel_l', gumbel_r',\n        'extreme1'}, optional\n        the type of distribution to test against.  The default is 'norm'\n        and 'extreme1', 'gumbel_l' and 'gumbel' are synonyms.\n\n    Returns\n    -------\n    statistic : float\n        The Anderson-Darling test statistic\n    critical_values : list\n        The critical values for this distribution\n    significance_level : list\n        The significance levels for the corresponding critical values\n        in percents.  The function returns critical values for a\n        differing set of significance levels depending on the\n        distribution that is being tested against.\n\n    Notes\n    -----\n    Critical values provided are for the following significance levels:\n\n    normal/exponenential\n        15%, 10%, 5%, 2.5%, 1%\n    logistic\n        25%, 10%, 5%, 2.5%, 1%, 0.5%\n    Gumbel\n        25%, 10%, 5%, 2.5%, 1%\n\n    If A2 is larger than these critical values then for the corresponding\n    significance level, the null hypothesis that the data come from the\n    chosen distribution can be rejected.\n\n    References\n    ----------\n    .. [1] http://www.itl.nist.gov/div898/handbook/prc/section2/prc213.htm\n    .. [2] Stephens, M. A. (1974). EDF Statistics for Goodness of Fit and\n           Some Comparisons, Journal of the American Statistical Association,\n           Vol. 69, pp. 730-737.\n    .. [3] Stephens, M. A. (1976). Asymptotic Results for Goodness-of-Fit\n           Statistics with Unknown Parameters, Annals of Statistics, Vol. 4,\n           pp. 357-369.\n    .. [4] Stephens, M. A. (1977). Goodness of Fit for the Extreme Value\n           Distribution, Biometrika, Vol. 64, pp. 583-588.\n    .. [5] Stephens, M. A. (1977). Goodness of Fit with Special Reference\n           to Tests for Exponentiality , Technical Report No. 262,\n           Department of Statistics, Stanford University, Stanford, CA.\n    .. [6] Stephens, M. A. (1979). Tests of Fit for the Logistic Distribution\n           Based on the Empirical Distribution Function, Biometrika, Vol. 66,\n           pp. 591-595.\n\n    ")
    
    
    # Getting the type of 'dist' (line 1400)
    dist_567775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 7), 'dist')
    
    # Obtaining an instance of the builtin type 'list' (line 1400)
    list_567776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1400)
    # Adding element type (line 1400)
    str_567777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 20), 'str', 'norm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), list_567776, str_567777)
    # Adding element type (line 1400)
    str_567778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 28), 'str', 'expon')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), list_567776, str_567778)
    # Adding element type (line 1400)
    str_567779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 37), 'str', 'gumbel')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), list_567776, str_567779)
    # Adding element type (line 1400)
    str_567780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 47), 'str', 'gumbel_l')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), list_567776, str_567780)
    # Adding element type (line 1400)
    str_567781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 20), 'str', 'gumbel_r')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), list_567776, str_567781)
    # Adding element type (line 1400)
    str_567782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 32), 'str', 'extreme1')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), list_567776, str_567782)
    # Adding element type (line 1400)
    str_567783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 44), 'str', 'logistic')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), list_567776, str_567783)
    
    # Applying the binary operator 'notin' (line 1400)
    result_contains_567784 = python_operator(stypy.reporting.localization.Localization(__file__, 1400, 7), 'notin', dist_567775, list_567776)
    
    # Testing the type of an if condition (line 1400)
    if_condition_567785 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1400, 4), result_contains_567784)
    # Assigning a type to the variable 'if_condition_567785' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'if_condition_567785', if_condition_567785)
    # SSA begins for if statement (line 1400)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1402)
    # Processing the call arguments (line 1402)
    str_567787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 25), 'str', "Invalid distribution; dist must be 'norm', 'expon', 'gumbel', 'extreme1' or 'logistic'.")
    # Processing the call keyword arguments (line 1402)
    kwargs_567788 = {}
    # Getting the type of 'ValueError' (line 1402)
    ValueError_567786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1402)
    ValueError_call_result_567789 = invoke(stypy.reporting.localization.Localization(__file__, 1402, 14), ValueError_567786, *[str_567787], **kwargs_567788)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1402, 8), ValueError_call_result_567789, 'raise parameter', BaseException)
    # SSA join for if statement (line 1400)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1404):
    
    # Assigning a Call to a Name (line 1404):
    
    # Call to sort(...): (line 1404)
    # Processing the call arguments (line 1404)
    # Getting the type of 'x' (line 1404)
    x_567791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 13), 'x', False)
    # Processing the call keyword arguments (line 1404)
    kwargs_567792 = {}
    # Getting the type of 'sort' (line 1404)
    sort_567790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 8), 'sort', False)
    # Calling sort(args, kwargs) (line 1404)
    sort_call_result_567793 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 8), sort_567790, *[x_567791], **kwargs_567792)
    
    # Assigning a type to the variable 'y' (line 1404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 4), 'y', sort_call_result_567793)
    
    # Assigning a Call to a Name (line 1405):
    
    # Assigning a Call to a Name (line 1405):
    
    # Call to mean(...): (line 1405)
    # Processing the call arguments (line 1405)
    # Getting the type of 'x' (line 1405)
    x_567796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 19), 'x', False)
    # Processing the call keyword arguments (line 1405)
    int_567797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 27), 'int')
    keyword_567798 = int_567797
    kwargs_567799 = {'axis': keyword_567798}
    # Getting the type of 'np' (line 1405)
    np_567794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 11), 'np', False)
    # Obtaining the member 'mean' of a type (line 1405)
    mean_567795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 11), np_567794, 'mean')
    # Calling mean(args, kwargs) (line 1405)
    mean_call_result_567800 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 11), mean_567795, *[x_567796], **kwargs_567799)
    
    # Assigning a type to the variable 'xbar' (line 1405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 4), 'xbar', mean_call_result_567800)
    
    # Assigning a Call to a Name (line 1406):
    
    # Assigning a Call to a Name (line 1406):
    
    # Call to len(...): (line 1406)
    # Processing the call arguments (line 1406)
    # Getting the type of 'y' (line 1406)
    y_567802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 12), 'y', False)
    # Processing the call keyword arguments (line 1406)
    kwargs_567803 = {}
    # Getting the type of 'len' (line 1406)
    len_567801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 8), 'len', False)
    # Calling len(args, kwargs) (line 1406)
    len_call_result_567804 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 8), len_567801, *[y_567802], **kwargs_567803)
    
    # Assigning a type to the variable 'N' (line 1406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 4), 'N', len_call_result_567804)
    
    
    # Getting the type of 'dist' (line 1407)
    dist_567805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 7), 'dist')
    str_567806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, 15), 'str', 'norm')
    # Applying the binary operator '==' (line 1407)
    result_eq_567807 = python_operator(stypy.reporting.localization.Localization(__file__, 1407, 7), '==', dist_567805, str_567806)
    
    # Testing the type of an if condition (line 1407)
    if_condition_567808 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1407, 4), result_eq_567807)
    # Assigning a type to the variable 'if_condition_567808' (line 1407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 4), 'if_condition_567808', if_condition_567808)
    # SSA begins for if statement (line 1407)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1408):
    
    # Assigning a Call to a Name (line 1408):
    
    # Call to std(...): (line 1408)
    # Processing the call arguments (line 1408)
    # Getting the type of 'x' (line 1408)
    x_567811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 19), 'x', False)
    # Processing the call keyword arguments (line 1408)
    int_567812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1408, 27), 'int')
    keyword_567813 = int_567812
    int_567814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1408, 35), 'int')
    keyword_567815 = int_567814
    kwargs_567816 = {'axis': keyword_567815, 'ddof': keyword_567813}
    # Getting the type of 'np' (line 1408)
    np_567809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 12), 'np', False)
    # Obtaining the member 'std' of a type (line 1408)
    std_567810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 12), np_567809, 'std')
    # Calling std(args, kwargs) (line 1408)
    std_call_result_567817 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 12), std_567810, *[x_567811], **kwargs_567816)
    
    # Assigning a type to the variable 's' (line 1408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 8), 's', std_call_result_567817)
    
    # Assigning a BinOp to a Name (line 1409):
    
    # Assigning a BinOp to a Name (line 1409):
    # Getting the type of 'y' (line 1409)
    y_567818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 13), 'y')
    # Getting the type of 'xbar' (line 1409)
    xbar_567819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 17), 'xbar')
    # Applying the binary operator '-' (line 1409)
    result_sub_567820 = python_operator(stypy.reporting.localization.Localization(__file__, 1409, 13), '-', y_567818, xbar_567819)
    
    # Getting the type of 's' (line 1409)
    s_567821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 25), 's')
    # Applying the binary operator 'div' (line 1409)
    result_div_567822 = python_operator(stypy.reporting.localization.Localization(__file__, 1409, 12), 'div', result_sub_567820, s_567821)
    
    # Assigning a type to the variable 'w' (line 1409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 8), 'w', result_div_567822)
    
    # Assigning a Call to a Name (line 1410):
    
    # Assigning a Call to a Name (line 1410):
    
    # Call to logcdf(...): (line 1410)
    # Processing the call arguments (line 1410)
    # Getting the type of 'w' (line 1410)
    w_567826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 43), 'w', False)
    # Processing the call keyword arguments (line 1410)
    kwargs_567827 = {}
    # Getting the type of 'distributions' (line 1410)
    distributions_567823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 17), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 1410)
    norm_567824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 17), distributions_567823, 'norm')
    # Obtaining the member 'logcdf' of a type (line 1410)
    logcdf_567825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 17), norm_567824, 'logcdf')
    # Calling logcdf(args, kwargs) (line 1410)
    logcdf_call_result_567828 = invoke(stypy.reporting.localization.Localization(__file__, 1410, 17), logcdf_567825, *[w_567826], **kwargs_567827)
    
    # Assigning a type to the variable 'logcdf' (line 1410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 8), 'logcdf', logcdf_call_result_567828)
    
    # Assigning a Call to a Name (line 1411):
    
    # Assigning a Call to a Name (line 1411):
    
    # Call to logsf(...): (line 1411)
    # Processing the call arguments (line 1411)
    # Getting the type of 'w' (line 1411)
    w_567832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 41), 'w', False)
    # Processing the call keyword arguments (line 1411)
    kwargs_567833 = {}
    # Getting the type of 'distributions' (line 1411)
    distributions_567829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 16), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 1411)
    norm_567830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 16), distributions_567829, 'norm')
    # Obtaining the member 'logsf' of a type (line 1411)
    logsf_567831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 16), norm_567830, 'logsf')
    # Calling logsf(args, kwargs) (line 1411)
    logsf_call_result_567834 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 16), logsf_567831, *[w_567832], **kwargs_567833)
    
    # Assigning a type to the variable 'logsf' (line 1411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 8), 'logsf', logsf_call_result_567834)
    
    # Assigning a Call to a Name (line 1412):
    
    # Assigning a Call to a Name (line 1412):
    
    # Call to array(...): (line 1412)
    # Processing the call arguments (line 1412)
    
    # Obtaining an instance of the builtin type 'list' (line 1412)
    list_567836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1412)
    # Adding element type (line 1412)
    int_567837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1412, 20), list_567836, int_567837)
    # Adding element type (line 1412)
    int_567838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1412, 20), list_567836, int_567838)
    # Adding element type (line 1412)
    int_567839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 29), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1412, 20), list_567836, int_567839)
    # Adding element type (line 1412)
    float_567840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1412, 20), list_567836, float_567840)
    # Adding element type (line 1412)
    int_567841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1412, 20), list_567836, int_567841)
    
    # Processing the call keyword arguments (line 1412)
    kwargs_567842 = {}
    # Getting the type of 'array' (line 1412)
    array_567835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 14), 'array', False)
    # Calling array(args, kwargs) (line 1412)
    array_call_result_567843 = invoke(stypy.reporting.localization.Localization(__file__, 1412, 14), array_567835, *[list_567836], **kwargs_567842)
    
    # Assigning a type to the variable 'sig' (line 1412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 8), 'sig', array_call_result_567843)
    
    # Assigning a Call to a Name (line 1413):
    
    # Assigning a Call to a Name (line 1413):
    
    # Call to around(...): (line 1413)
    # Processing the call arguments (line 1413)
    # Getting the type of '_Avals_norm' (line 1413)
    _Avals_norm_567845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 26), '_Avals_norm', False)
    float_567846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 41), 'float')
    float_567847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 47), 'float')
    # Getting the type of 'N' (line 1413)
    N_567848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 51), 'N', False)
    # Applying the binary operator 'div' (line 1413)
    result_div_567849 = python_operator(stypy.reporting.localization.Localization(__file__, 1413, 47), 'div', float_567847, N_567848)
    
    # Applying the binary operator '+' (line 1413)
    result_add_567850 = python_operator(stypy.reporting.localization.Localization(__file__, 1413, 41), '+', float_567846, result_div_567849)
    
    float_567851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 55), 'float')
    # Getting the type of 'N' (line 1413)
    N_567852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 60), 'N', False)
    # Applying the binary operator 'div' (line 1413)
    result_div_567853 = python_operator(stypy.reporting.localization.Localization(__file__, 1413, 55), 'div', float_567851, N_567852)
    
    # Getting the type of 'N' (line 1413)
    N_567854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 62), 'N', False)
    # Applying the binary operator 'div' (line 1413)
    result_div_567855 = python_operator(stypy.reporting.localization.Localization(__file__, 1413, 61), 'div', result_div_567853, N_567854)
    
    # Applying the binary operator '-' (line 1413)
    result_sub_567856 = python_operator(stypy.reporting.localization.Localization(__file__, 1413, 53), '-', result_add_567850, result_div_567855)
    
    # Applying the binary operator 'div' (line 1413)
    result_div_567857 = python_operator(stypy.reporting.localization.Localization(__file__, 1413, 26), 'div', _Avals_norm_567845, result_sub_567856)
    
    int_567858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 66), 'int')
    # Processing the call keyword arguments (line 1413)
    kwargs_567859 = {}
    # Getting the type of 'around' (line 1413)
    around_567844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 19), 'around', False)
    # Calling around(args, kwargs) (line 1413)
    around_call_result_567860 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 19), around_567844, *[result_div_567857, int_567858], **kwargs_567859)
    
    # Assigning a type to the variable 'critical' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'critical', around_call_result_567860)
    # SSA branch for the else part of an if statement (line 1407)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'dist' (line 1414)
    dist_567861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 9), 'dist')
    str_567862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1414, 17), 'str', 'expon')
    # Applying the binary operator '==' (line 1414)
    result_eq_567863 = python_operator(stypy.reporting.localization.Localization(__file__, 1414, 9), '==', dist_567861, str_567862)
    
    # Testing the type of an if condition (line 1414)
    if_condition_567864 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1414, 9), result_eq_567863)
    # Assigning a type to the variable 'if_condition_567864' (line 1414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1414, 9), 'if_condition_567864', if_condition_567864)
    # SSA begins for if statement (line 1414)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1415):
    
    # Assigning a BinOp to a Name (line 1415):
    # Getting the type of 'y' (line 1415)
    y_567865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 12), 'y')
    # Getting the type of 'xbar' (line 1415)
    xbar_567866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 16), 'xbar')
    # Applying the binary operator 'div' (line 1415)
    result_div_567867 = python_operator(stypy.reporting.localization.Localization(__file__, 1415, 12), 'div', y_567865, xbar_567866)
    
    # Assigning a type to the variable 'w' (line 1415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 8), 'w', result_div_567867)
    
    # Assigning a Call to a Name (line 1416):
    
    # Assigning a Call to a Name (line 1416):
    
    # Call to logcdf(...): (line 1416)
    # Processing the call arguments (line 1416)
    # Getting the type of 'w' (line 1416)
    w_567871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 44), 'w', False)
    # Processing the call keyword arguments (line 1416)
    kwargs_567872 = {}
    # Getting the type of 'distributions' (line 1416)
    distributions_567868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 17), 'distributions', False)
    # Obtaining the member 'expon' of a type (line 1416)
    expon_567869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 17), distributions_567868, 'expon')
    # Obtaining the member 'logcdf' of a type (line 1416)
    logcdf_567870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 17), expon_567869, 'logcdf')
    # Calling logcdf(args, kwargs) (line 1416)
    logcdf_call_result_567873 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 17), logcdf_567870, *[w_567871], **kwargs_567872)
    
    # Assigning a type to the variable 'logcdf' (line 1416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'logcdf', logcdf_call_result_567873)
    
    # Assigning a Call to a Name (line 1417):
    
    # Assigning a Call to a Name (line 1417):
    
    # Call to logsf(...): (line 1417)
    # Processing the call arguments (line 1417)
    # Getting the type of 'w' (line 1417)
    w_567877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 42), 'w', False)
    # Processing the call keyword arguments (line 1417)
    kwargs_567878 = {}
    # Getting the type of 'distributions' (line 1417)
    distributions_567874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 16), 'distributions', False)
    # Obtaining the member 'expon' of a type (line 1417)
    expon_567875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 16), distributions_567874, 'expon')
    # Obtaining the member 'logsf' of a type (line 1417)
    logsf_567876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 16), expon_567875, 'logsf')
    # Calling logsf(args, kwargs) (line 1417)
    logsf_call_result_567879 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 16), logsf_567876, *[w_567877], **kwargs_567878)
    
    # Assigning a type to the variable 'logsf' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'logsf', logsf_call_result_567879)
    
    # Assigning a Call to a Name (line 1418):
    
    # Assigning a Call to a Name (line 1418):
    
    # Call to array(...): (line 1418)
    # Processing the call arguments (line 1418)
    
    # Obtaining an instance of the builtin type 'list' (line 1418)
    list_567881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1418)
    # Adding element type (line 1418)
    int_567882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1418, 20), list_567881, int_567882)
    # Adding element type (line 1418)
    int_567883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1418, 20), list_567881, int_567883)
    # Adding element type (line 1418)
    int_567884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 29), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1418, 20), list_567881, int_567884)
    # Adding element type (line 1418)
    float_567885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1418, 20), list_567881, float_567885)
    # Adding element type (line 1418)
    int_567886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1418, 20), list_567881, int_567886)
    
    # Processing the call keyword arguments (line 1418)
    kwargs_567887 = {}
    # Getting the type of 'array' (line 1418)
    array_567880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 14), 'array', False)
    # Calling array(args, kwargs) (line 1418)
    array_call_result_567888 = invoke(stypy.reporting.localization.Localization(__file__, 1418, 14), array_567880, *[list_567881], **kwargs_567887)
    
    # Assigning a type to the variable 'sig' (line 1418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 8), 'sig', array_call_result_567888)
    
    # Assigning a Call to a Name (line 1419):
    
    # Assigning a Call to a Name (line 1419):
    
    # Call to around(...): (line 1419)
    # Processing the call arguments (line 1419)
    # Getting the type of '_Avals_expon' (line 1419)
    _Avals_expon_567890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 26), '_Avals_expon', False)
    float_567891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 42), 'float')
    float_567892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 48), 'float')
    # Getting the type of 'N' (line 1419)
    N_567893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 52), 'N', False)
    # Applying the binary operator 'div' (line 1419)
    result_div_567894 = python_operator(stypy.reporting.localization.Localization(__file__, 1419, 48), 'div', float_567892, N_567893)
    
    # Applying the binary operator '+' (line 1419)
    result_add_567895 = python_operator(stypy.reporting.localization.Localization(__file__, 1419, 42), '+', float_567891, result_div_567894)
    
    # Applying the binary operator 'div' (line 1419)
    result_div_567896 = python_operator(stypy.reporting.localization.Localization(__file__, 1419, 26), 'div', _Avals_expon_567890, result_add_567895)
    
    int_567897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 56), 'int')
    # Processing the call keyword arguments (line 1419)
    kwargs_567898 = {}
    # Getting the type of 'around' (line 1419)
    around_567889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 19), 'around', False)
    # Calling around(args, kwargs) (line 1419)
    around_call_result_567899 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 19), around_567889, *[result_div_567896, int_567897], **kwargs_567898)
    
    # Assigning a type to the variable 'critical' (line 1419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'critical', around_call_result_567899)
    # SSA branch for the else part of an if statement (line 1414)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'dist' (line 1420)
    dist_567900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 9), 'dist')
    str_567901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, 17), 'str', 'logistic')
    # Applying the binary operator '==' (line 1420)
    result_eq_567902 = python_operator(stypy.reporting.localization.Localization(__file__, 1420, 9), '==', dist_567900, str_567901)
    
    # Testing the type of an if condition (line 1420)
    if_condition_567903 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1420, 9), result_eq_567902)
    # Assigning a type to the variable 'if_condition_567903' (line 1420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1420, 9), 'if_condition_567903', if_condition_567903)
    # SSA begins for if statement (line 1420)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

    @norecursion
    def rootfunc(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rootfunc'
        module_type_store = module_type_store.open_function_context('rootfunc', 1421, 8, False)
        
        # Passed parameters checking function
        rootfunc.stypy_localization = localization
        rootfunc.stypy_type_of_self = None
        rootfunc.stypy_type_store = module_type_store
        rootfunc.stypy_function_name = 'rootfunc'
        rootfunc.stypy_param_names_list = ['ab', 'xj', 'N']
        rootfunc.stypy_varargs_param_name = None
        rootfunc.stypy_kwargs_param_name = None
        rootfunc.stypy_call_defaults = defaults
        rootfunc.stypy_call_varargs = varargs
        rootfunc.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'rootfunc', ['ab', 'xj', 'N'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rootfunc', localization, ['ab', 'xj', 'N'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rootfunc(...)' code ##################

        
        # Assigning a Name to a Tuple (line 1422):
        
        # Assigning a Subscript to a Name (line 1422):
        
        # Obtaining the type of the subscript
        int_567904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1422, 12), 'int')
        # Getting the type of 'ab' (line 1422)
        ab_567905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 19), 'ab')
        # Obtaining the member '__getitem__' of a type (line 1422)
        getitem___567906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 12), ab_567905, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1422)
        subscript_call_result_567907 = invoke(stypy.reporting.localization.Localization(__file__, 1422, 12), getitem___567906, int_567904)
        
        # Assigning a type to the variable 'tuple_var_assignment_566031' (line 1422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 12), 'tuple_var_assignment_566031', subscript_call_result_567907)
        
        # Assigning a Subscript to a Name (line 1422):
        
        # Obtaining the type of the subscript
        int_567908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1422, 12), 'int')
        # Getting the type of 'ab' (line 1422)
        ab_567909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 19), 'ab')
        # Obtaining the member '__getitem__' of a type (line 1422)
        getitem___567910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 12), ab_567909, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1422)
        subscript_call_result_567911 = invoke(stypy.reporting.localization.Localization(__file__, 1422, 12), getitem___567910, int_567908)
        
        # Assigning a type to the variable 'tuple_var_assignment_566032' (line 1422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 12), 'tuple_var_assignment_566032', subscript_call_result_567911)
        
        # Assigning a Name to a Name (line 1422):
        # Getting the type of 'tuple_var_assignment_566031' (line 1422)
        tuple_var_assignment_566031_567912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 12), 'tuple_var_assignment_566031')
        # Assigning a type to the variable 'a' (line 1422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 12), 'a', tuple_var_assignment_566031_567912)
        
        # Assigning a Name to a Name (line 1422):
        # Getting the type of 'tuple_var_assignment_566032' (line 1422)
        tuple_var_assignment_566032_567913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 12), 'tuple_var_assignment_566032')
        # Assigning a type to the variable 'b' (line 1422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 15), 'b', tuple_var_assignment_566032_567913)
        
        # Assigning a BinOp to a Name (line 1423):
        
        # Assigning a BinOp to a Name (line 1423):
        # Getting the type of 'xj' (line 1423)
        xj_567914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 19), 'xj')
        # Getting the type of 'a' (line 1423)
        a_567915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 24), 'a')
        # Applying the binary operator '-' (line 1423)
        result_sub_567916 = python_operator(stypy.reporting.localization.Localization(__file__, 1423, 19), '-', xj_567914, a_567915)
        
        # Getting the type of 'b' (line 1423)
        b_567917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 29), 'b')
        # Applying the binary operator 'div' (line 1423)
        result_div_567918 = python_operator(stypy.reporting.localization.Localization(__file__, 1423, 18), 'div', result_sub_567916, b_567917)
        
        # Assigning a type to the variable 'tmp' (line 1423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1423, 12), 'tmp', result_div_567918)
        
        # Assigning a Call to a Name (line 1424):
        
        # Assigning a Call to a Name (line 1424):
        
        # Call to exp(...): (line 1424)
        # Processing the call arguments (line 1424)
        # Getting the type of 'tmp' (line 1424)
        tmp_567920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 23), 'tmp', False)
        # Processing the call keyword arguments (line 1424)
        kwargs_567921 = {}
        # Getting the type of 'exp' (line 1424)
        exp_567919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 19), 'exp', False)
        # Calling exp(args, kwargs) (line 1424)
        exp_call_result_567922 = invoke(stypy.reporting.localization.Localization(__file__, 1424, 19), exp_567919, *[tmp_567920], **kwargs_567921)
        
        # Assigning a type to the variable 'tmp2' (line 1424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1424, 12), 'tmp2', exp_call_result_567922)
        
        # Assigning a List to a Name (line 1425):
        
        # Assigning a List to a Name (line 1425):
        
        # Obtaining an instance of the builtin type 'list' (line 1425)
        list_567923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1425)
        # Adding element type (line 1425)
        
        # Call to sum(...): (line 1425)
        # Processing the call arguments (line 1425)
        float_567926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 26), 'float')
        int_567927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 31), 'int')
        # Getting the type of 'tmp2' (line 1425)
        tmp2_567928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 33), 'tmp2', False)
        # Applying the binary operator '+' (line 1425)
        result_add_567929 = python_operator(stypy.reporting.localization.Localization(__file__, 1425, 31), '+', int_567927, tmp2_567928)
        
        # Applying the binary operator 'div' (line 1425)
        result_div_567930 = python_operator(stypy.reporting.localization.Localization(__file__, 1425, 26), 'div', float_567926, result_add_567929)
        
        # Processing the call keyword arguments (line 1425)
        int_567931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 45), 'int')
        keyword_567932 = int_567931
        kwargs_567933 = {'axis': keyword_567932}
        # Getting the type of 'np' (line 1425)
        np_567924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 19), 'np', False)
        # Obtaining the member 'sum' of a type (line 1425)
        sum_567925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 19), np_567924, 'sum')
        # Calling sum(args, kwargs) (line 1425)
        sum_call_result_567934 = invoke(stypy.reporting.localization.Localization(__file__, 1425, 19), sum_567925, *[result_div_567930], **kwargs_567933)
        
        float_567935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 50), 'float')
        # Getting the type of 'N' (line 1425)
        N_567936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 54), 'N')
        # Applying the binary operator '*' (line 1425)
        result_mul_567937 = python_operator(stypy.reporting.localization.Localization(__file__, 1425, 50), '*', float_567935, N_567936)
        
        # Applying the binary operator '-' (line 1425)
        result_sub_567938 = python_operator(stypy.reporting.localization.Localization(__file__, 1425, 19), '-', sum_call_result_567934, result_mul_567937)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1425, 18), list_567923, result_sub_567938)
        # Adding element type (line 1425)
        
        # Call to sum(...): (line 1426)
        # Processing the call arguments (line 1426)
        # Getting the type of 'tmp' (line 1426)
        tmp_567941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 26), 'tmp', False)
        float_567942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1426, 31), 'float')
        # Getting the type of 'tmp2' (line 1426)
        tmp2_567943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 35), 'tmp2', False)
        # Applying the binary operator '-' (line 1426)
        result_sub_567944 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 31), '-', float_567942, tmp2_567943)
        
        # Applying the binary operator '*' (line 1426)
        result_mul_567945 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 26), '*', tmp_567941, result_sub_567944)
        
        int_567946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1426, 42), 'int')
        # Getting the type of 'tmp2' (line 1426)
        tmp2_567947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 44), 'tmp2', False)
        # Applying the binary operator '+' (line 1426)
        result_add_567948 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 42), '+', int_567946, tmp2_567947)
        
        # Applying the binary operator 'div' (line 1426)
        result_div_567949 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 40), 'div', result_mul_567945, result_add_567948)
        
        # Processing the call keyword arguments (line 1426)
        int_567950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1426, 56), 'int')
        keyword_567951 = int_567950
        kwargs_567952 = {'axis': keyword_567951}
        # Getting the type of 'np' (line 1426)
        np_567939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 19), 'np', False)
        # Obtaining the member 'sum' of a type (line 1426)
        sum_567940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 19), np_567939, 'sum')
        # Calling sum(args, kwargs) (line 1426)
        sum_call_result_567953 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 19), sum_567940, *[result_div_567949], **kwargs_567952)
        
        # Getting the type of 'N' (line 1426)
        N_567954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 61), 'N')
        # Applying the binary operator '+' (line 1426)
        result_add_567955 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 19), '+', sum_call_result_567953, N_567954)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1425, 18), list_567923, result_add_567955)
        
        # Assigning a type to the variable 'val' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 12), 'val', list_567923)
        
        # Call to array(...): (line 1427)
        # Processing the call arguments (line 1427)
        # Getting the type of 'val' (line 1427)
        val_567957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 25), 'val', False)
        # Processing the call keyword arguments (line 1427)
        kwargs_567958 = {}
        # Getting the type of 'array' (line 1427)
        array_567956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 19), 'array', False)
        # Calling array(args, kwargs) (line 1427)
        array_call_result_567959 = invoke(stypy.reporting.localization.Localization(__file__, 1427, 19), array_567956, *[val_567957], **kwargs_567958)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1427, 12), 'stypy_return_type', array_call_result_567959)
        
        # ################# End of 'rootfunc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rootfunc' in the type store
        # Getting the type of 'stypy_return_type' (line 1421)
        stypy_return_type_567960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_567960)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rootfunc'
        return stypy_return_type_567960

    # Assigning a type to the variable 'rootfunc' (line 1421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 8), 'rootfunc', rootfunc)
    
    # Assigning a Call to a Name (line 1429):
    
    # Assigning a Call to a Name (line 1429):
    
    # Call to array(...): (line 1429)
    # Processing the call arguments (line 1429)
    
    # Obtaining an instance of the builtin type 'list' (line 1429)
    list_567962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1429)
    # Adding element type (line 1429)
    # Getting the type of 'xbar' (line 1429)
    xbar_567963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 22), 'xbar', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1429, 21), list_567962, xbar_567963)
    # Adding element type (line 1429)
    
    # Call to std(...): (line 1429)
    # Processing the call arguments (line 1429)
    # Getting the type of 'x' (line 1429)
    x_567966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 35), 'x', False)
    # Processing the call keyword arguments (line 1429)
    int_567967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 43), 'int')
    keyword_567968 = int_567967
    int_567969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 51), 'int')
    keyword_567970 = int_567969
    kwargs_567971 = {'axis': keyword_567970, 'ddof': keyword_567968}
    # Getting the type of 'np' (line 1429)
    np_567964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 28), 'np', False)
    # Obtaining the member 'std' of a type (line 1429)
    std_567965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1429, 28), np_567964, 'std')
    # Calling std(args, kwargs) (line 1429)
    std_call_result_567972 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 28), std_567965, *[x_567966], **kwargs_567971)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1429, 21), list_567962, std_call_result_567972)
    
    # Processing the call keyword arguments (line 1429)
    kwargs_567973 = {}
    # Getting the type of 'array' (line 1429)
    array_567961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 15), 'array', False)
    # Calling array(args, kwargs) (line 1429)
    array_call_result_567974 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 15), array_567961, *[list_567962], **kwargs_567973)
    
    # Assigning a type to the variable 'sol0' (line 1429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1429, 8), 'sol0', array_call_result_567974)
    
    # Assigning a Call to a Name (line 1430):
    
    # Assigning a Call to a Name (line 1430):
    
    # Call to fsolve(...): (line 1430)
    # Processing the call arguments (line 1430)
    # Getting the type of 'rootfunc' (line 1430)
    rootfunc_567977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 30), 'rootfunc', False)
    # Getting the type of 'sol0' (line 1430)
    sol0_567978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 40), 'sol0', False)
    # Processing the call keyword arguments (line 1430)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1430)
    tuple_567979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 52), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1430)
    # Adding element type (line 1430)
    # Getting the type of 'x' (line 1430)
    x_567980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 52), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1430, 52), tuple_567979, x_567980)
    # Adding element type (line 1430)
    # Getting the type of 'N' (line 1430)
    N_567981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 55), 'N', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1430, 52), tuple_567979, N_567981)
    
    keyword_567982 = tuple_567979
    float_567983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 64), 'float')
    keyword_567984 = float_567983
    kwargs_567985 = {'xtol': keyword_567984, 'args': keyword_567982}
    # Getting the type of 'optimize' (line 1430)
    optimize_567975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 14), 'optimize', False)
    # Obtaining the member 'fsolve' of a type (line 1430)
    fsolve_567976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1430, 14), optimize_567975, 'fsolve')
    # Calling fsolve(args, kwargs) (line 1430)
    fsolve_call_result_567986 = invoke(stypy.reporting.localization.Localization(__file__, 1430, 14), fsolve_567976, *[rootfunc_567977, sol0_567978], **kwargs_567985)
    
    # Assigning a type to the variable 'sol' (line 1430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1430, 8), 'sol', fsolve_call_result_567986)
    
    # Assigning a BinOp to a Name (line 1431):
    
    # Assigning a BinOp to a Name (line 1431):
    # Getting the type of 'y' (line 1431)
    y_567987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 13), 'y')
    
    # Obtaining the type of the subscript
    int_567988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 21), 'int')
    # Getting the type of 'sol' (line 1431)
    sol_567989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 17), 'sol')
    # Obtaining the member '__getitem__' of a type (line 1431)
    getitem___567990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 17), sol_567989, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1431)
    subscript_call_result_567991 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 17), getitem___567990, int_567988)
    
    # Applying the binary operator '-' (line 1431)
    result_sub_567992 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 13), '-', y_567987, subscript_call_result_567991)
    
    
    # Obtaining the type of the subscript
    int_567993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 31), 'int')
    # Getting the type of 'sol' (line 1431)
    sol_567994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 27), 'sol')
    # Obtaining the member '__getitem__' of a type (line 1431)
    getitem___567995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 27), sol_567994, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1431)
    subscript_call_result_567996 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 27), getitem___567995, int_567993)
    
    # Applying the binary operator 'div' (line 1431)
    result_div_567997 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 12), 'div', result_sub_567992, subscript_call_result_567996)
    
    # Assigning a type to the variable 'w' (line 1431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 8), 'w', result_div_567997)
    
    # Assigning a Call to a Name (line 1432):
    
    # Assigning a Call to a Name (line 1432):
    
    # Call to logcdf(...): (line 1432)
    # Processing the call arguments (line 1432)
    # Getting the type of 'w' (line 1432)
    w_568001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 47), 'w', False)
    # Processing the call keyword arguments (line 1432)
    kwargs_568002 = {}
    # Getting the type of 'distributions' (line 1432)
    distributions_567998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 17), 'distributions', False)
    # Obtaining the member 'logistic' of a type (line 1432)
    logistic_567999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 17), distributions_567998, 'logistic')
    # Obtaining the member 'logcdf' of a type (line 1432)
    logcdf_568000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 17), logistic_567999, 'logcdf')
    # Calling logcdf(args, kwargs) (line 1432)
    logcdf_call_result_568003 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 17), logcdf_568000, *[w_568001], **kwargs_568002)
    
    # Assigning a type to the variable 'logcdf' (line 1432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1432, 8), 'logcdf', logcdf_call_result_568003)
    
    # Assigning a Call to a Name (line 1433):
    
    # Assigning a Call to a Name (line 1433):
    
    # Call to logsf(...): (line 1433)
    # Processing the call arguments (line 1433)
    # Getting the type of 'w' (line 1433)
    w_568007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 45), 'w', False)
    # Processing the call keyword arguments (line 1433)
    kwargs_568008 = {}
    # Getting the type of 'distributions' (line 1433)
    distributions_568004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 16), 'distributions', False)
    # Obtaining the member 'logistic' of a type (line 1433)
    logistic_568005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 16), distributions_568004, 'logistic')
    # Obtaining the member 'logsf' of a type (line 1433)
    logsf_568006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 16), logistic_568005, 'logsf')
    # Calling logsf(args, kwargs) (line 1433)
    logsf_call_result_568009 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 16), logsf_568006, *[w_568007], **kwargs_568008)
    
    # Assigning a type to the variable 'logsf' (line 1433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'logsf', logsf_call_result_568009)
    
    # Assigning a Call to a Name (line 1434):
    
    # Assigning a Call to a Name (line 1434):
    
    # Call to array(...): (line 1434)
    # Processing the call arguments (line 1434)
    
    # Obtaining an instance of the builtin type 'list' (line 1434)
    list_568011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1434)
    # Adding element type (line 1434)
    int_568012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1434, 20), list_568011, int_568012)
    # Adding element type (line 1434)
    int_568013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1434, 20), list_568011, int_568013)
    # Adding element type (line 1434)
    int_568014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 29), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1434, 20), list_568011, int_568014)
    # Adding element type (line 1434)
    float_568015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1434, 20), list_568011, float_568015)
    # Adding element type (line 1434)
    int_568016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1434, 20), list_568011, int_568016)
    # Adding element type (line 1434)
    float_568017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 40), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1434, 20), list_568011, float_568017)
    
    # Processing the call keyword arguments (line 1434)
    kwargs_568018 = {}
    # Getting the type of 'array' (line 1434)
    array_568010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 14), 'array', False)
    # Calling array(args, kwargs) (line 1434)
    array_call_result_568019 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 14), array_568010, *[list_568011], **kwargs_568018)
    
    # Assigning a type to the variable 'sig' (line 1434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 8), 'sig', array_call_result_568019)
    
    # Assigning a Call to a Name (line 1435):
    
    # Assigning a Call to a Name (line 1435):
    
    # Call to around(...): (line 1435)
    # Processing the call arguments (line 1435)
    # Getting the type of '_Avals_logistic' (line 1435)
    _Avals_logistic_568021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 26), '_Avals_logistic', False)
    float_568022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 45), 'float')
    float_568023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 51), 'float')
    # Getting the type of 'N' (line 1435)
    N_568024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 56), 'N', False)
    # Applying the binary operator 'div' (line 1435)
    result_div_568025 = python_operator(stypy.reporting.localization.Localization(__file__, 1435, 51), 'div', float_568023, N_568024)
    
    # Applying the binary operator '+' (line 1435)
    result_add_568026 = python_operator(stypy.reporting.localization.Localization(__file__, 1435, 45), '+', float_568022, result_div_568025)
    
    # Applying the binary operator 'div' (line 1435)
    result_div_568027 = python_operator(stypy.reporting.localization.Localization(__file__, 1435, 26), 'div', _Avals_logistic_568021, result_add_568026)
    
    int_568028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 60), 'int')
    # Processing the call keyword arguments (line 1435)
    kwargs_568029 = {}
    # Getting the type of 'around' (line 1435)
    around_568020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 19), 'around', False)
    # Calling around(args, kwargs) (line 1435)
    around_call_result_568030 = invoke(stypy.reporting.localization.Localization(__file__, 1435, 19), around_568020, *[result_div_568027, int_568028], **kwargs_568029)
    
    # Assigning a type to the variable 'critical' (line 1435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 8), 'critical', around_call_result_568030)
    # SSA branch for the else part of an if statement (line 1420)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'dist' (line 1436)
    dist_568031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 9), 'dist')
    str_568032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 17), 'str', 'gumbel_r')
    # Applying the binary operator '==' (line 1436)
    result_eq_568033 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 9), '==', dist_568031, str_568032)
    
    # Testing the type of an if condition (line 1436)
    if_condition_568034 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1436, 9), result_eq_568033)
    # Assigning a type to the variable 'if_condition_568034' (line 1436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 9), 'if_condition_568034', if_condition_568034)
    # SSA begins for if statement (line 1436)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1437):
    
    # Assigning a Subscript to a Name (line 1437):
    
    # Obtaining the type of the subscript
    int_568035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 8), 'int')
    
    # Call to fit(...): (line 1437)
    # Processing the call arguments (line 1437)
    # Getting the type of 'x' (line 1437)
    x_568039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 45), 'x', False)
    # Processing the call keyword arguments (line 1437)
    kwargs_568040 = {}
    # Getting the type of 'distributions' (line 1437)
    distributions_568036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 18), 'distributions', False)
    # Obtaining the member 'gumbel_r' of a type (line 1437)
    gumbel_r_568037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 18), distributions_568036, 'gumbel_r')
    # Obtaining the member 'fit' of a type (line 1437)
    fit_568038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 18), gumbel_r_568037, 'fit')
    # Calling fit(args, kwargs) (line 1437)
    fit_call_result_568041 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 18), fit_568038, *[x_568039], **kwargs_568040)
    
    # Obtaining the member '__getitem__' of a type (line 1437)
    getitem___568042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 8), fit_call_result_568041, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1437)
    subscript_call_result_568043 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 8), getitem___568042, int_568035)
    
    # Assigning a type to the variable 'tuple_var_assignment_566033' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 8), 'tuple_var_assignment_566033', subscript_call_result_568043)
    
    # Assigning a Subscript to a Name (line 1437):
    
    # Obtaining the type of the subscript
    int_568044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 8), 'int')
    
    # Call to fit(...): (line 1437)
    # Processing the call arguments (line 1437)
    # Getting the type of 'x' (line 1437)
    x_568048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 45), 'x', False)
    # Processing the call keyword arguments (line 1437)
    kwargs_568049 = {}
    # Getting the type of 'distributions' (line 1437)
    distributions_568045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 18), 'distributions', False)
    # Obtaining the member 'gumbel_r' of a type (line 1437)
    gumbel_r_568046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 18), distributions_568045, 'gumbel_r')
    # Obtaining the member 'fit' of a type (line 1437)
    fit_568047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 18), gumbel_r_568046, 'fit')
    # Calling fit(args, kwargs) (line 1437)
    fit_call_result_568050 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 18), fit_568047, *[x_568048], **kwargs_568049)
    
    # Obtaining the member '__getitem__' of a type (line 1437)
    getitem___568051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 8), fit_call_result_568050, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1437)
    subscript_call_result_568052 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 8), getitem___568051, int_568044)
    
    # Assigning a type to the variable 'tuple_var_assignment_566034' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 8), 'tuple_var_assignment_566034', subscript_call_result_568052)
    
    # Assigning a Name to a Name (line 1437):
    # Getting the type of 'tuple_var_assignment_566033' (line 1437)
    tuple_var_assignment_566033_568053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 8), 'tuple_var_assignment_566033')
    # Assigning a type to the variable 'xbar' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 8), 'xbar', tuple_var_assignment_566033_568053)
    
    # Assigning a Name to a Name (line 1437):
    # Getting the type of 'tuple_var_assignment_566034' (line 1437)
    tuple_var_assignment_566034_568054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 8), 'tuple_var_assignment_566034')
    # Assigning a type to the variable 's' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 14), 's', tuple_var_assignment_566034_568054)
    
    # Assigning a BinOp to a Name (line 1438):
    
    # Assigning a BinOp to a Name (line 1438):
    # Getting the type of 'y' (line 1438)
    y_568055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 13), 'y')
    # Getting the type of 'xbar' (line 1438)
    xbar_568056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 17), 'xbar')
    # Applying the binary operator '-' (line 1438)
    result_sub_568057 = python_operator(stypy.reporting.localization.Localization(__file__, 1438, 13), '-', y_568055, xbar_568056)
    
    # Getting the type of 's' (line 1438)
    s_568058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 25), 's')
    # Applying the binary operator 'div' (line 1438)
    result_div_568059 = python_operator(stypy.reporting.localization.Localization(__file__, 1438, 12), 'div', result_sub_568057, s_568058)
    
    # Assigning a type to the variable 'w' (line 1438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 8), 'w', result_div_568059)
    
    # Assigning a Call to a Name (line 1439):
    
    # Assigning a Call to a Name (line 1439):
    
    # Call to logcdf(...): (line 1439)
    # Processing the call arguments (line 1439)
    # Getting the type of 'w' (line 1439)
    w_568063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 47), 'w', False)
    # Processing the call keyword arguments (line 1439)
    kwargs_568064 = {}
    # Getting the type of 'distributions' (line 1439)
    distributions_568060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 17), 'distributions', False)
    # Obtaining the member 'gumbel_r' of a type (line 1439)
    gumbel_r_568061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 17), distributions_568060, 'gumbel_r')
    # Obtaining the member 'logcdf' of a type (line 1439)
    logcdf_568062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 17), gumbel_r_568061, 'logcdf')
    # Calling logcdf(args, kwargs) (line 1439)
    logcdf_call_result_568065 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 17), logcdf_568062, *[w_568063], **kwargs_568064)
    
    # Assigning a type to the variable 'logcdf' (line 1439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 8), 'logcdf', logcdf_call_result_568065)
    
    # Assigning a Call to a Name (line 1440):
    
    # Assigning a Call to a Name (line 1440):
    
    # Call to logsf(...): (line 1440)
    # Processing the call arguments (line 1440)
    # Getting the type of 'w' (line 1440)
    w_568069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 45), 'w', False)
    # Processing the call keyword arguments (line 1440)
    kwargs_568070 = {}
    # Getting the type of 'distributions' (line 1440)
    distributions_568066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 16), 'distributions', False)
    # Obtaining the member 'gumbel_r' of a type (line 1440)
    gumbel_r_568067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 16), distributions_568066, 'gumbel_r')
    # Obtaining the member 'logsf' of a type (line 1440)
    logsf_568068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 16), gumbel_r_568067, 'logsf')
    # Calling logsf(args, kwargs) (line 1440)
    logsf_call_result_568071 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 16), logsf_568068, *[w_568069], **kwargs_568070)
    
    # Assigning a type to the variable 'logsf' (line 1440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 8), 'logsf', logsf_call_result_568071)
    
    # Assigning a Call to a Name (line 1441):
    
    # Assigning a Call to a Name (line 1441):
    
    # Call to array(...): (line 1441)
    # Processing the call arguments (line 1441)
    
    # Obtaining an instance of the builtin type 'list' (line 1441)
    list_568073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1441)
    # Adding element type (line 1441)
    int_568074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 20), list_568073, int_568074)
    # Adding element type (line 1441)
    int_568075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 20), list_568073, int_568075)
    # Adding element type (line 1441)
    int_568076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 29), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 20), list_568073, int_568076)
    # Adding element type (line 1441)
    float_568077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 20), list_568073, float_568077)
    # Adding element type (line 1441)
    int_568078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 20), list_568073, int_568078)
    
    # Processing the call keyword arguments (line 1441)
    kwargs_568079 = {}
    # Getting the type of 'array' (line 1441)
    array_568072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 14), 'array', False)
    # Calling array(args, kwargs) (line 1441)
    array_call_result_568080 = invoke(stypy.reporting.localization.Localization(__file__, 1441, 14), array_568072, *[list_568073], **kwargs_568079)
    
    # Assigning a type to the variable 'sig' (line 1441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 8), 'sig', array_call_result_568080)
    
    # Assigning a Call to a Name (line 1442):
    
    # Assigning a Call to a Name (line 1442):
    
    # Call to around(...): (line 1442)
    # Processing the call arguments (line 1442)
    # Getting the type of '_Avals_gumbel' (line 1442)
    _Avals_gumbel_568082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 26), '_Avals_gumbel', False)
    float_568083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 43), 'float')
    float_568084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 49), 'float')
    
    # Call to sqrt(...): (line 1442)
    # Processing the call arguments (line 1442)
    # Getting the type of 'N' (line 1442)
    N_568086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 58), 'N', False)
    # Processing the call keyword arguments (line 1442)
    kwargs_568087 = {}
    # Getting the type of 'sqrt' (line 1442)
    sqrt_568085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 53), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1442)
    sqrt_call_result_568088 = invoke(stypy.reporting.localization.Localization(__file__, 1442, 53), sqrt_568085, *[N_568086], **kwargs_568087)
    
    # Applying the binary operator 'div' (line 1442)
    result_div_568089 = python_operator(stypy.reporting.localization.Localization(__file__, 1442, 49), 'div', float_568084, sqrt_call_result_568088)
    
    # Applying the binary operator '+' (line 1442)
    result_add_568090 = python_operator(stypy.reporting.localization.Localization(__file__, 1442, 43), '+', float_568083, result_div_568089)
    
    # Applying the binary operator 'div' (line 1442)
    result_div_568091 = python_operator(stypy.reporting.localization.Localization(__file__, 1442, 26), 'div', _Avals_gumbel_568082, result_add_568090)
    
    int_568092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 63), 'int')
    # Processing the call keyword arguments (line 1442)
    kwargs_568093 = {}
    # Getting the type of 'around' (line 1442)
    around_568081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 19), 'around', False)
    # Calling around(args, kwargs) (line 1442)
    around_call_result_568094 = invoke(stypy.reporting.localization.Localization(__file__, 1442, 19), around_568081, *[result_div_568091, int_568092], **kwargs_568093)
    
    # Assigning a type to the variable 'critical' (line 1442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 8), 'critical', around_call_result_568094)
    # SSA branch for the else part of an if statement (line 1436)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1444):
    
    # Assigning a Subscript to a Name (line 1444):
    
    # Obtaining the type of the subscript
    int_568095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 8), 'int')
    
    # Call to fit(...): (line 1444)
    # Processing the call arguments (line 1444)
    # Getting the type of 'x' (line 1444)
    x_568099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 45), 'x', False)
    # Processing the call keyword arguments (line 1444)
    kwargs_568100 = {}
    # Getting the type of 'distributions' (line 1444)
    distributions_568096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 18), 'distributions', False)
    # Obtaining the member 'gumbel_l' of a type (line 1444)
    gumbel_l_568097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 18), distributions_568096, 'gumbel_l')
    # Obtaining the member 'fit' of a type (line 1444)
    fit_568098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 18), gumbel_l_568097, 'fit')
    # Calling fit(args, kwargs) (line 1444)
    fit_call_result_568101 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 18), fit_568098, *[x_568099], **kwargs_568100)
    
    # Obtaining the member '__getitem__' of a type (line 1444)
    getitem___568102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 8), fit_call_result_568101, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1444)
    subscript_call_result_568103 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 8), getitem___568102, int_568095)
    
    # Assigning a type to the variable 'tuple_var_assignment_566035' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 8), 'tuple_var_assignment_566035', subscript_call_result_568103)
    
    # Assigning a Subscript to a Name (line 1444):
    
    # Obtaining the type of the subscript
    int_568104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 8), 'int')
    
    # Call to fit(...): (line 1444)
    # Processing the call arguments (line 1444)
    # Getting the type of 'x' (line 1444)
    x_568108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 45), 'x', False)
    # Processing the call keyword arguments (line 1444)
    kwargs_568109 = {}
    # Getting the type of 'distributions' (line 1444)
    distributions_568105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 18), 'distributions', False)
    # Obtaining the member 'gumbel_l' of a type (line 1444)
    gumbel_l_568106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 18), distributions_568105, 'gumbel_l')
    # Obtaining the member 'fit' of a type (line 1444)
    fit_568107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 18), gumbel_l_568106, 'fit')
    # Calling fit(args, kwargs) (line 1444)
    fit_call_result_568110 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 18), fit_568107, *[x_568108], **kwargs_568109)
    
    # Obtaining the member '__getitem__' of a type (line 1444)
    getitem___568111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 8), fit_call_result_568110, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1444)
    subscript_call_result_568112 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 8), getitem___568111, int_568104)
    
    # Assigning a type to the variable 'tuple_var_assignment_566036' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 8), 'tuple_var_assignment_566036', subscript_call_result_568112)
    
    # Assigning a Name to a Name (line 1444):
    # Getting the type of 'tuple_var_assignment_566035' (line 1444)
    tuple_var_assignment_566035_568113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 8), 'tuple_var_assignment_566035')
    # Assigning a type to the variable 'xbar' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 8), 'xbar', tuple_var_assignment_566035_568113)
    
    # Assigning a Name to a Name (line 1444):
    # Getting the type of 'tuple_var_assignment_566036' (line 1444)
    tuple_var_assignment_566036_568114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 8), 'tuple_var_assignment_566036')
    # Assigning a type to the variable 's' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 14), 's', tuple_var_assignment_566036_568114)
    
    # Assigning a BinOp to a Name (line 1445):
    
    # Assigning a BinOp to a Name (line 1445):
    # Getting the type of 'y' (line 1445)
    y_568115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 13), 'y')
    # Getting the type of 'xbar' (line 1445)
    xbar_568116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 17), 'xbar')
    # Applying the binary operator '-' (line 1445)
    result_sub_568117 = python_operator(stypy.reporting.localization.Localization(__file__, 1445, 13), '-', y_568115, xbar_568116)
    
    # Getting the type of 's' (line 1445)
    s_568118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 25), 's')
    # Applying the binary operator 'div' (line 1445)
    result_div_568119 = python_operator(stypy.reporting.localization.Localization(__file__, 1445, 12), 'div', result_sub_568117, s_568118)
    
    # Assigning a type to the variable 'w' (line 1445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 8), 'w', result_div_568119)
    
    # Assigning a Call to a Name (line 1446):
    
    # Assigning a Call to a Name (line 1446):
    
    # Call to logcdf(...): (line 1446)
    # Processing the call arguments (line 1446)
    # Getting the type of 'w' (line 1446)
    w_568123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 47), 'w', False)
    # Processing the call keyword arguments (line 1446)
    kwargs_568124 = {}
    # Getting the type of 'distributions' (line 1446)
    distributions_568120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 17), 'distributions', False)
    # Obtaining the member 'gumbel_l' of a type (line 1446)
    gumbel_l_568121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 17), distributions_568120, 'gumbel_l')
    # Obtaining the member 'logcdf' of a type (line 1446)
    logcdf_568122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 17), gumbel_l_568121, 'logcdf')
    # Calling logcdf(args, kwargs) (line 1446)
    logcdf_call_result_568125 = invoke(stypy.reporting.localization.Localization(__file__, 1446, 17), logcdf_568122, *[w_568123], **kwargs_568124)
    
    # Assigning a type to the variable 'logcdf' (line 1446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 8), 'logcdf', logcdf_call_result_568125)
    
    # Assigning a Call to a Name (line 1447):
    
    # Assigning a Call to a Name (line 1447):
    
    # Call to logsf(...): (line 1447)
    # Processing the call arguments (line 1447)
    # Getting the type of 'w' (line 1447)
    w_568129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 45), 'w', False)
    # Processing the call keyword arguments (line 1447)
    kwargs_568130 = {}
    # Getting the type of 'distributions' (line 1447)
    distributions_568126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 16), 'distributions', False)
    # Obtaining the member 'gumbel_l' of a type (line 1447)
    gumbel_l_568127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 16), distributions_568126, 'gumbel_l')
    # Obtaining the member 'logsf' of a type (line 1447)
    logsf_568128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 16), gumbel_l_568127, 'logsf')
    # Calling logsf(args, kwargs) (line 1447)
    logsf_call_result_568131 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 16), logsf_568128, *[w_568129], **kwargs_568130)
    
    # Assigning a type to the variable 'logsf' (line 1447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'logsf', logsf_call_result_568131)
    
    # Assigning a Call to a Name (line 1448):
    
    # Assigning a Call to a Name (line 1448):
    
    # Call to array(...): (line 1448)
    # Processing the call arguments (line 1448)
    
    # Obtaining an instance of the builtin type 'list' (line 1448)
    list_568133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1448)
    # Adding element type (line 1448)
    int_568134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1448, 20), list_568133, int_568134)
    # Adding element type (line 1448)
    int_568135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1448, 20), list_568133, int_568135)
    # Adding element type (line 1448)
    int_568136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 29), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1448, 20), list_568133, int_568136)
    # Adding element type (line 1448)
    float_568137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1448, 20), list_568133, float_568137)
    # Adding element type (line 1448)
    int_568138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1448, 20), list_568133, int_568138)
    
    # Processing the call keyword arguments (line 1448)
    kwargs_568139 = {}
    # Getting the type of 'array' (line 1448)
    array_568132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 14), 'array', False)
    # Calling array(args, kwargs) (line 1448)
    array_call_result_568140 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 14), array_568132, *[list_568133], **kwargs_568139)
    
    # Assigning a type to the variable 'sig' (line 1448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 8), 'sig', array_call_result_568140)
    
    # Assigning a Call to a Name (line 1449):
    
    # Assigning a Call to a Name (line 1449):
    
    # Call to around(...): (line 1449)
    # Processing the call arguments (line 1449)
    # Getting the type of '_Avals_gumbel' (line 1449)
    _Avals_gumbel_568142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 26), '_Avals_gumbel', False)
    float_568143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1449, 43), 'float')
    float_568144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1449, 49), 'float')
    
    # Call to sqrt(...): (line 1449)
    # Processing the call arguments (line 1449)
    # Getting the type of 'N' (line 1449)
    N_568146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 58), 'N', False)
    # Processing the call keyword arguments (line 1449)
    kwargs_568147 = {}
    # Getting the type of 'sqrt' (line 1449)
    sqrt_568145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 53), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1449)
    sqrt_call_result_568148 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 53), sqrt_568145, *[N_568146], **kwargs_568147)
    
    # Applying the binary operator 'div' (line 1449)
    result_div_568149 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 49), 'div', float_568144, sqrt_call_result_568148)
    
    # Applying the binary operator '+' (line 1449)
    result_add_568150 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 43), '+', float_568143, result_div_568149)
    
    # Applying the binary operator 'div' (line 1449)
    result_div_568151 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 26), 'div', _Avals_gumbel_568142, result_add_568150)
    
    int_568152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1449, 63), 'int')
    # Processing the call keyword arguments (line 1449)
    kwargs_568153 = {}
    # Getting the type of 'around' (line 1449)
    around_568141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 19), 'around', False)
    # Calling around(args, kwargs) (line 1449)
    around_call_result_568154 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 19), around_568141, *[result_div_568151, int_568152], **kwargs_568153)
    
    # Assigning a type to the variable 'critical' (line 1449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 8), 'critical', around_call_result_568154)
    # SSA join for if statement (line 1436)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1420)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1414)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1407)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1451):
    
    # Assigning a Call to a Name (line 1451):
    
    # Call to arange(...): (line 1451)
    # Processing the call arguments (line 1451)
    int_568156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 15), 'int')
    # Getting the type of 'N' (line 1451)
    N_568157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 18), 'N', False)
    int_568158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 22), 'int')
    # Applying the binary operator '+' (line 1451)
    result_add_568159 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 18), '+', N_568157, int_568158)
    
    # Processing the call keyword arguments (line 1451)
    kwargs_568160 = {}
    # Getting the type of 'arange' (line 1451)
    arange_568155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 8), 'arange', False)
    # Calling arange(args, kwargs) (line 1451)
    arange_call_result_568161 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 8), arange_568155, *[int_568156, result_add_568159], **kwargs_568160)
    
    # Assigning a type to the variable 'i' (line 1451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1451, 4), 'i', arange_call_result_568161)
    
    # Assigning a BinOp to a Name (line 1452):
    
    # Assigning a BinOp to a Name (line 1452):
    
    # Getting the type of 'N' (line 1452)
    N_568162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 10), 'N')
    # Applying the 'usub' unary operator (line 1452)
    result___neg___568163 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 9), 'usub', N_568162)
    
    
    # Call to sum(...): (line 1452)
    # Processing the call arguments (line 1452)
    int_568166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 22), 'int')
    # Getting the type of 'i' (line 1452)
    i_568167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 24), 'i', False)
    # Applying the binary operator '*' (line 1452)
    result_mul_568168 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 22), '*', int_568166, i_568167)
    
    float_568169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 28), 'float')
    # Applying the binary operator '-' (line 1452)
    result_sub_568170 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 22), '-', result_mul_568168, float_568169)
    
    # Getting the type of 'N' (line 1452)
    N_568171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 35), 'N', False)
    # Applying the binary operator 'div' (line 1452)
    result_div_568172 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 21), 'div', result_sub_568170, N_568171)
    
    # Getting the type of 'logcdf' (line 1452)
    logcdf_568173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 40), 'logcdf', False)
    
    # Obtaining the type of the subscript
    int_568174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 57), 'int')
    slice_568175 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1452, 49), None, None, int_568174)
    # Getting the type of 'logsf' (line 1452)
    logsf_568176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 49), 'logsf', False)
    # Obtaining the member '__getitem__' of a type (line 1452)
    getitem___568177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 49), logsf_568176, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1452)
    subscript_call_result_568178 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 49), getitem___568177, slice_568175)
    
    # Applying the binary operator '+' (line 1452)
    result_add_568179 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 40), '+', logcdf_568173, subscript_call_result_568178)
    
    # Applying the binary operator '*' (line 1452)
    result_mul_568180 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 37), '*', result_div_568172, result_add_568179)
    
    # Processing the call keyword arguments (line 1452)
    int_568181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 68), 'int')
    keyword_568182 = int_568181
    kwargs_568183 = {'axis': keyword_568182}
    # Getting the type of 'np' (line 1452)
    np_568164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 14), 'np', False)
    # Obtaining the member 'sum' of a type (line 1452)
    sum_568165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 14), np_568164, 'sum')
    # Calling sum(args, kwargs) (line 1452)
    sum_call_result_568184 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 14), sum_568165, *[result_mul_568180], **kwargs_568183)
    
    # Applying the binary operator '-' (line 1452)
    result_sub_568185 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 9), '-', result___neg___568163, sum_call_result_568184)
    
    # Assigning a type to the variable 'A2' (line 1452)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1452, 4), 'A2', result_sub_568185)
    
    # Call to AndersonResult(...): (line 1454)
    # Processing the call arguments (line 1454)
    # Getting the type of 'A2' (line 1454)
    A2_568187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 26), 'A2', False)
    # Getting the type of 'critical' (line 1454)
    critical_568188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 30), 'critical', False)
    # Getting the type of 'sig' (line 1454)
    sig_568189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 40), 'sig', False)
    # Processing the call keyword arguments (line 1454)
    kwargs_568190 = {}
    # Getting the type of 'AndersonResult' (line 1454)
    AndersonResult_568186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 11), 'AndersonResult', False)
    # Calling AndersonResult(args, kwargs) (line 1454)
    AndersonResult_call_result_568191 = invoke(stypy.reporting.localization.Localization(__file__, 1454, 11), AndersonResult_568186, *[A2_568187, critical_568188, sig_568189], **kwargs_568190)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1454)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 4), 'stypy_return_type', AndersonResult_call_result_568191)
    
    # ################# End of 'anderson(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'anderson' in the type store
    # Getting the type of 'stypy_return_type' (line 1333)
    stypy_return_type_568192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_568192)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'anderson'
    return stypy_return_type_568192

# Assigning a type to the variable 'anderson' (line 1333)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 0), 'anderson', anderson)

@norecursion
def _anderson_ksamp_midrank(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_anderson_ksamp_midrank'
    module_type_store = module_type_store.open_function_context('_anderson_ksamp_midrank', 1457, 0, False)
    
    # Passed parameters checking function
    _anderson_ksamp_midrank.stypy_localization = localization
    _anderson_ksamp_midrank.stypy_type_of_self = None
    _anderson_ksamp_midrank.stypy_type_store = module_type_store
    _anderson_ksamp_midrank.stypy_function_name = '_anderson_ksamp_midrank'
    _anderson_ksamp_midrank.stypy_param_names_list = ['samples', 'Z', 'Zstar', 'k', 'n', 'N']
    _anderson_ksamp_midrank.stypy_varargs_param_name = None
    _anderson_ksamp_midrank.stypy_kwargs_param_name = None
    _anderson_ksamp_midrank.stypy_call_defaults = defaults
    _anderson_ksamp_midrank.stypy_call_varargs = varargs
    _anderson_ksamp_midrank.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_anderson_ksamp_midrank', ['samples', 'Z', 'Zstar', 'k', 'n', 'N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_anderson_ksamp_midrank', localization, ['samples', 'Z', 'Zstar', 'k', 'n', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_anderson_ksamp_midrank(...)' code ##################

    str_568193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1480, (-1)), 'str', '\n    Compute A2akN equation 7 of Scholz and Stephens.\n\n    Parameters\n    ----------\n    samples : sequence of 1-D array_like\n        Array of sample arrays.\n    Z : array_like\n        Sorted array of all observations.\n    Zstar : array_like\n        Sorted array of unique observations.\n    k : int\n        Number of samples.\n    n : array_like\n        Number of observations in each sample.\n    N : int\n        Total number of observations.\n\n    Returns\n    -------\n    A2aKN : float\n        The A2aKN statistics of Scholz and Stephens 1987.\n    ')
    
    # Assigning a Num to a Name (line 1482):
    
    # Assigning a Num to a Name (line 1482):
    float_568194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 12), 'float')
    # Assigning a type to the variable 'A2akN' (line 1482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 4), 'A2akN', float_568194)
    
    # Assigning a Call to a Name (line 1483):
    
    # Assigning a Call to a Name (line 1483):
    
    # Call to searchsorted(...): (line 1483)
    # Processing the call arguments (line 1483)
    # Getting the type of 'Zstar' (line 1483)
    Zstar_568197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 36), 'Zstar', False)
    str_568198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 43), 'str', 'left')
    # Processing the call keyword arguments (line 1483)
    kwargs_568199 = {}
    # Getting the type of 'Z' (line 1483)
    Z_568195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 21), 'Z', False)
    # Obtaining the member 'searchsorted' of a type (line 1483)
    searchsorted_568196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 21), Z_568195, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 1483)
    searchsorted_call_result_568200 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 21), searchsorted_568196, *[Zstar_568197, str_568198], **kwargs_568199)
    
    # Assigning a type to the variable 'Z_ssorted_left' (line 1483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 4), 'Z_ssorted_left', searchsorted_call_result_568200)
    
    
    # Getting the type of 'N' (line 1484)
    N_568201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 7), 'N')
    # Getting the type of 'Zstar' (line 1484)
    Zstar_568202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 12), 'Zstar')
    # Obtaining the member 'size' of a type (line 1484)
    size_568203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 12), Zstar_568202, 'size')
    # Applying the binary operator '==' (line 1484)
    result_eq_568204 = python_operator(stypy.reporting.localization.Localization(__file__, 1484, 7), '==', N_568201, size_568203)
    
    # Testing the type of an if condition (line 1484)
    if_condition_568205 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1484, 4), result_eq_568204)
    # Assigning a type to the variable 'if_condition_568205' (line 1484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 4), 'if_condition_568205', if_condition_568205)
    # SSA begins for if statement (line 1484)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1485):
    
    # Assigning a Num to a Name (line 1485):
    float_568206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1485, 13), 'float')
    # Assigning a type to the variable 'lj' (line 1485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 8), 'lj', float_568206)
    # SSA branch for the else part of an if statement (line 1484)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1487):
    
    # Assigning a BinOp to a Name (line 1487):
    
    # Call to searchsorted(...): (line 1487)
    # Processing the call arguments (line 1487)
    # Getting the type of 'Zstar' (line 1487)
    Zstar_568209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 28), 'Zstar', False)
    str_568210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 35), 'str', 'right')
    # Processing the call keyword arguments (line 1487)
    kwargs_568211 = {}
    # Getting the type of 'Z' (line 1487)
    Z_568207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 13), 'Z', False)
    # Obtaining the member 'searchsorted' of a type (line 1487)
    searchsorted_568208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1487, 13), Z_568207, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 1487)
    searchsorted_call_result_568212 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 13), searchsorted_568208, *[Zstar_568209, str_568210], **kwargs_568211)
    
    # Getting the type of 'Z_ssorted_left' (line 1487)
    Z_ssorted_left_568213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 46), 'Z_ssorted_left')
    # Applying the binary operator '-' (line 1487)
    result_sub_568214 = python_operator(stypy.reporting.localization.Localization(__file__, 1487, 13), '-', searchsorted_call_result_568212, Z_ssorted_left_568213)
    
    # Assigning a type to the variable 'lj' (line 1487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 8), 'lj', result_sub_568214)
    # SSA join for if statement (line 1484)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1488):
    
    # Assigning a BinOp to a Name (line 1488):
    # Getting the type of 'Z_ssorted_left' (line 1488)
    Z_ssorted_left_568215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 9), 'Z_ssorted_left')
    # Getting the type of 'lj' (line 1488)
    lj_568216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 26), 'lj')
    float_568217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1488, 31), 'float')
    # Applying the binary operator 'div' (line 1488)
    result_div_568218 = python_operator(stypy.reporting.localization.Localization(__file__, 1488, 26), 'div', lj_568216, float_568217)
    
    # Applying the binary operator '+' (line 1488)
    result_add_568219 = python_operator(stypy.reporting.localization.Localization(__file__, 1488, 9), '+', Z_ssorted_left_568215, result_div_568218)
    
    # Assigning a type to the variable 'Bj' (line 1488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 4), 'Bj', result_add_568219)
    
    
    # Call to arange(...): (line 1489)
    # Processing the call arguments (line 1489)
    int_568221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 20), 'int')
    # Getting the type of 'k' (line 1489)
    k_568222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 23), 'k', False)
    # Processing the call keyword arguments (line 1489)
    kwargs_568223 = {}
    # Getting the type of 'arange' (line 1489)
    arange_568220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 13), 'arange', False)
    # Calling arange(args, kwargs) (line 1489)
    arange_call_result_568224 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 13), arange_568220, *[int_568221, k_568222], **kwargs_568223)
    
    # Testing the type of a for loop iterable (line 1489)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1489, 4), arange_call_result_568224)
    # Getting the type of the for loop variable (line 1489)
    for_loop_var_568225 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1489, 4), arange_call_result_568224)
    # Assigning a type to the variable 'i' (line 1489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 4), 'i', for_loop_var_568225)
    # SSA begins for a for statement (line 1489)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1490):
    
    # Assigning a Call to a Name (line 1490):
    
    # Call to sort(...): (line 1490)
    # Processing the call arguments (line 1490)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1490)
    i_568228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 28), 'i', False)
    # Getting the type of 'samples' (line 1490)
    samples_568229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 20), 'samples', False)
    # Obtaining the member '__getitem__' of a type (line 1490)
    getitem___568230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1490, 20), samples_568229, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1490)
    subscript_call_result_568231 = invoke(stypy.reporting.localization.Localization(__file__, 1490, 20), getitem___568230, i_568228)
    
    # Processing the call keyword arguments (line 1490)
    kwargs_568232 = {}
    # Getting the type of 'np' (line 1490)
    np_568226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 12), 'np', False)
    # Obtaining the member 'sort' of a type (line 1490)
    sort_568227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1490, 12), np_568226, 'sort')
    # Calling sort(args, kwargs) (line 1490)
    sort_call_result_568233 = invoke(stypy.reporting.localization.Localization(__file__, 1490, 12), sort_568227, *[subscript_call_result_568231], **kwargs_568232)
    
    # Assigning a type to the variable 's' (line 1490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 8), 's', sort_call_result_568233)
    
    # Assigning a Call to a Name (line 1491):
    
    # Assigning a Call to a Name (line 1491):
    
    # Call to searchsorted(...): (line 1491)
    # Processing the call arguments (line 1491)
    # Getting the type of 'Zstar' (line 1491)
    Zstar_568236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 41), 'Zstar', False)
    # Processing the call keyword arguments (line 1491)
    str_568237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, 53), 'str', 'right')
    keyword_568238 = str_568237
    kwargs_568239 = {'side': keyword_568238}
    # Getting the type of 's' (line 1491)
    s_568234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 26), 's', False)
    # Obtaining the member 'searchsorted' of a type (line 1491)
    searchsorted_568235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 26), s_568234, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 1491)
    searchsorted_call_result_568240 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 26), searchsorted_568235, *[Zstar_568236], **kwargs_568239)
    
    # Assigning a type to the variable 's_ssorted_right' (line 1491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 's_ssorted_right', searchsorted_call_result_568240)
    
    # Assigning a Call to a Name (line 1492):
    
    # Assigning a Call to a Name (line 1492):
    
    # Call to astype(...): (line 1492)
    # Processing the call arguments (line 1492)
    # Getting the type of 'float' (line 1492)
    float_568243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 37), 'float', False)
    # Processing the call keyword arguments (line 1492)
    kwargs_568244 = {}
    # Getting the type of 's_ssorted_right' (line 1492)
    s_ssorted_right_568241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 14), 's_ssorted_right', False)
    # Obtaining the member 'astype' of a type (line 1492)
    astype_568242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 14), s_ssorted_right_568241, 'astype')
    # Calling astype(args, kwargs) (line 1492)
    astype_call_result_568245 = invoke(stypy.reporting.localization.Localization(__file__, 1492, 14), astype_568242, *[float_568243], **kwargs_568244)
    
    # Assigning a type to the variable 'Mij' (line 1492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'Mij', astype_call_result_568245)
    
    # Assigning a BinOp to a Name (line 1493):
    
    # Assigning a BinOp to a Name (line 1493):
    # Getting the type of 's_ssorted_right' (line 1493)
    s_ssorted_right_568246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 14), 's_ssorted_right')
    
    # Call to searchsorted(...): (line 1493)
    # Processing the call arguments (line 1493)
    # Getting the type of 'Zstar' (line 1493)
    Zstar_568249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 47), 'Zstar', False)
    str_568250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 54), 'str', 'left')
    # Processing the call keyword arguments (line 1493)
    kwargs_568251 = {}
    # Getting the type of 's' (line 1493)
    s_568247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 32), 's', False)
    # Obtaining the member 'searchsorted' of a type (line 1493)
    searchsorted_568248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 32), s_568247, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 1493)
    searchsorted_call_result_568252 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 32), searchsorted_568248, *[Zstar_568249, str_568250], **kwargs_568251)
    
    # Applying the binary operator '-' (line 1493)
    result_sub_568253 = python_operator(stypy.reporting.localization.Localization(__file__, 1493, 14), '-', s_ssorted_right_568246, searchsorted_call_result_568252)
    
    # Assigning a type to the variable 'fij' (line 1493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 8), 'fij', result_sub_568253)
    
    # Getting the type of 'Mij' (line 1494)
    Mij_568254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 8), 'Mij')
    # Getting the type of 'fij' (line 1494)
    fij_568255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 15), 'fij')
    float_568256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1494, 21), 'float')
    # Applying the binary operator 'div' (line 1494)
    result_div_568257 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 15), 'div', fij_568255, float_568256)
    
    # Applying the binary operator '-=' (line 1494)
    result_isub_568258 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 8), '-=', Mij_568254, result_div_568257)
    # Assigning a type to the variable 'Mij' (line 1494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 8), 'Mij', result_isub_568258)
    
    
    # Assigning a BinOp to a Name (line 1495):
    
    # Assigning a BinOp to a Name (line 1495):
    # Getting the type of 'lj' (line 1495)
    lj_568259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 16), 'lj')
    
    # Call to float(...): (line 1495)
    # Processing the call arguments (line 1495)
    # Getting the type of 'N' (line 1495)
    N_568261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 27), 'N', False)
    # Processing the call keyword arguments (line 1495)
    kwargs_568262 = {}
    # Getting the type of 'float' (line 1495)
    float_568260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 21), 'float', False)
    # Calling float(args, kwargs) (line 1495)
    float_call_result_568263 = invoke(stypy.reporting.localization.Localization(__file__, 1495, 21), float_568260, *[N_568261], **kwargs_568262)
    
    # Applying the binary operator 'div' (line 1495)
    result_div_568264 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 16), 'div', lj_568259, float_call_result_568263)
    
    # Getting the type of 'N' (line 1495)
    N_568265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 33), 'N')
    # Getting the type of 'Mij' (line 1495)
    Mij_568266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 35), 'Mij')
    # Applying the binary operator '*' (line 1495)
    result_mul_568267 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 33), '*', N_568265, Mij_568266)
    
    # Getting the type of 'Bj' (line 1495)
    Bj_568268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 41), 'Bj')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1495)
    i_568269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 46), 'i')
    # Getting the type of 'n' (line 1495)
    n_568270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 44), 'n')
    # Obtaining the member '__getitem__' of a type (line 1495)
    getitem___568271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1495, 44), n_568270, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1495)
    subscript_call_result_568272 = invoke(stypy.reporting.localization.Localization(__file__, 1495, 44), getitem___568271, i_568269)
    
    # Applying the binary operator '*' (line 1495)
    result_mul_568273 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 41), '*', Bj_568268, subscript_call_result_568272)
    
    # Applying the binary operator '-' (line 1495)
    result_sub_568274 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 33), '-', result_mul_568267, result_mul_568273)
    
    int_568275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1495, 51), 'int')
    # Applying the binary operator '**' (line 1495)
    result_pow_568276 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 32), '**', result_sub_568274, int_568275)
    
    # Applying the binary operator '*' (line 1495)
    result_mul_568277 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 30), '*', result_div_568264, result_pow_568276)
    
    # Getting the type of 'Bj' (line 1495)
    Bj_568278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 56), 'Bj')
    # Getting the type of 'N' (line 1495)
    N_568279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 60), 'N')
    # Getting the type of 'Bj' (line 1495)
    Bj_568280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 64), 'Bj')
    # Applying the binary operator '-' (line 1495)
    result_sub_568281 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 60), '-', N_568279, Bj_568280)
    
    # Applying the binary operator '*' (line 1495)
    result_mul_568282 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 56), '*', Bj_568278, result_sub_568281)
    
    # Getting the type of 'N' (line 1495)
    N_568283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 70), 'N')
    # Getting the type of 'lj' (line 1495)
    lj_568284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 72), 'lj')
    # Applying the binary operator '*' (line 1495)
    result_mul_568285 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 70), '*', N_568283, lj_568284)
    
    float_568286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1495, 75), 'float')
    # Applying the binary operator 'div' (line 1495)
    result_div_568287 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 74), 'div', result_mul_568285, float_568286)
    
    # Applying the binary operator '-' (line 1495)
    result_sub_568288 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 56), '-', result_mul_568282, result_div_568287)
    
    # Applying the binary operator 'div' (line 1495)
    result_div_568289 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 53), 'div', result_mul_568277, result_sub_568288)
    
    # Assigning a type to the variable 'inner' (line 1495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1495, 8), 'inner', result_div_568289)
    
    # Getting the type of 'A2akN' (line 1496)
    A2akN_568290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 8), 'A2akN')
    
    # Call to sum(...): (line 1496)
    # Processing the call keyword arguments (line 1496)
    kwargs_568293 = {}
    # Getting the type of 'inner' (line 1496)
    inner_568291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 17), 'inner', False)
    # Obtaining the member 'sum' of a type (line 1496)
    sum_568292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 17), inner_568291, 'sum')
    # Calling sum(args, kwargs) (line 1496)
    sum_call_result_568294 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 17), sum_568292, *[], **kwargs_568293)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1496)
    i_568295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 33), 'i')
    # Getting the type of 'n' (line 1496)
    n_568296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 31), 'n')
    # Obtaining the member '__getitem__' of a type (line 1496)
    getitem___568297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 31), n_568296, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1496)
    subscript_call_result_568298 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 31), getitem___568297, i_568295)
    
    # Applying the binary operator 'div' (line 1496)
    result_div_568299 = python_operator(stypy.reporting.localization.Localization(__file__, 1496, 17), 'div', sum_call_result_568294, subscript_call_result_568298)
    
    # Applying the binary operator '+=' (line 1496)
    result_iadd_568300 = python_operator(stypy.reporting.localization.Localization(__file__, 1496, 8), '+=', A2akN_568290, result_div_568299)
    # Assigning a type to the variable 'A2akN' (line 1496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 8), 'A2akN', result_iadd_568300)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'A2akN' (line 1497)
    A2akN_568301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 4), 'A2akN')
    # Getting the type of 'N' (line 1497)
    N_568302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 14), 'N')
    float_568303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1497, 18), 'float')
    # Applying the binary operator '-' (line 1497)
    result_sub_568304 = python_operator(stypy.reporting.localization.Localization(__file__, 1497, 14), '-', N_568302, float_568303)
    
    # Getting the type of 'N' (line 1497)
    N_568305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 24), 'N')
    # Applying the binary operator 'div' (line 1497)
    result_div_568306 = python_operator(stypy.reporting.localization.Localization(__file__, 1497, 13), 'div', result_sub_568304, N_568305)
    
    # Applying the binary operator '*=' (line 1497)
    result_imul_568307 = python_operator(stypy.reporting.localization.Localization(__file__, 1497, 4), '*=', A2akN_568301, result_div_568306)
    # Assigning a type to the variable 'A2akN' (line 1497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 4), 'A2akN', result_imul_568307)
    
    # Getting the type of 'A2akN' (line 1498)
    A2akN_568308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 11), 'A2akN')
    # Assigning a type to the variable 'stypy_return_type' (line 1498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 4), 'stypy_return_type', A2akN_568308)
    
    # ################# End of '_anderson_ksamp_midrank(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_anderson_ksamp_midrank' in the type store
    # Getting the type of 'stypy_return_type' (line 1457)
    stypy_return_type_568309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_568309)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_anderson_ksamp_midrank'
    return stypy_return_type_568309

# Assigning a type to the variable '_anderson_ksamp_midrank' (line 1457)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1457, 0), '_anderson_ksamp_midrank', _anderson_ksamp_midrank)

@norecursion
def _anderson_ksamp_right(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_anderson_ksamp_right'
    module_type_store = module_type_store.open_function_context('_anderson_ksamp_right', 1501, 0, False)
    
    # Passed parameters checking function
    _anderson_ksamp_right.stypy_localization = localization
    _anderson_ksamp_right.stypy_type_of_self = None
    _anderson_ksamp_right.stypy_type_store = module_type_store
    _anderson_ksamp_right.stypy_function_name = '_anderson_ksamp_right'
    _anderson_ksamp_right.stypy_param_names_list = ['samples', 'Z', 'Zstar', 'k', 'n', 'N']
    _anderson_ksamp_right.stypy_varargs_param_name = None
    _anderson_ksamp_right.stypy_kwargs_param_name = None
    _anderson_ksamp_right.stypy_call_defaults = defaults
    _anderson_ksamp_right.stypy_call_varargs = varargs
    _anderson_ksamp_right.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_anderson_ksamp_right', ['samples', 'Z', 'Zstar', 'k', 'n', 'N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_anderson_ksamp_right', localization, ['samples', 'Z', 'Zstar', 'k', 'n', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_anderson_ksamp_right(...)' code ##################

    str_568310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, (-1)), 'str', '\n    Compute A2akN equation 6 of Scholz & Stephens.\n\n    Parameters\n    ----------\n    samples : sequence of 1-D array_like\n        Array of sample arrays.\n    Z : array_like\n        Sorted array of all observations.\n    Zstar : array_like\n        Sorted array of unique observations.\n    k : int\n        Number of samples.\n    n : array_like\n        Number of observations in each sample.\n    N : int\n        Total number of observations.\n\n    Returns\n    -------\n    A2KN : float\n        The A2KN statistics of Scholz and Stephens 1987.\n    ')
    
    # Assigning a Num to a Name (line 1526):
    
    # Assigning a Num to a Name (line 1526):
    float_568311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1526, 11), 'float')
    # Assigning a type to the variable 'A2kN' (line 1526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 4), 'A2kN', float_568311)
    
    # Assigning a BinOp to a Name (line 1527):
    
    # Assigning a BinOp to a Name (line 1527):
    
    # Call to searchsorted(...): (line 1527)
    # Processing the call arguments (line 1527)
    
    # Obtaining the type of the subscript
    int_568314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 31), 'int')
    slice_568315 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1527, 24), None, int_568314, None)
    # Getting the type of 'Zstar' (line 1527)
    Zstar_568316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 24), 'Zstar', False)
    # Obtaining the member '__getitem__' of a type (line 1527)
    getitem___568317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 24), Zstar_568316, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1527)
    subscript_call_result_568318 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 24), getitem___568317, slice_568315)
    
    str_568319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 36), 'str', 'right')
    # Processing the call keyword arguments (line 1527)
    kwargs_568320 = {}
    # Getting the type of 'Z' (line 1527)
    Z_568312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 9), 'Z', False)
    # Obtaining the member 'searchsorted' of a type (line 1527)
    searchsorted_568313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 9), Z_568312, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 1527)
    searchsorted_call_result_568321 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 9), searchsorted_568313, *[subscript_call_result_568318, str_568319], **kwargs_568320)
    
    
    # Call to searchsorted(...): (line 1527)
    # Processing the call arguments (line 1527)
    
    # Obtaining the type of the subscript
    int_568324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 69), 'int')
    slice_568325 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1527, 62), None, int_568324, None)
    # Getting the type of 'Zstar' (line 1527)
    Zstar_568326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 62), 'Zstar', False)
    # Obtaining the member '__getitem__' of a type (line 1527)
    getitem___568327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 62), Zstar_568326, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1527)
    subscript_call_result_568328 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 62), getitem___568327, slice_568325)
    
    str_568329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, 62), 'str', 'left')
    # Processing the call keyword arguments (line 1527)
    kwargs_568330 = {}
    # Getting the type of 'Z' (line 1527)
    Z_568322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 47), 'Z', False)
    # Obtaining the member 'searchsorted' of a type (line 1527)
    searchsorted_568323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 47), Z_568322, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 1527)
    searchsorted_call_result_568331 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 47), searchsorted_568323, *[subscript_call_result_568328, str_568329], **kwargs_568330)
    
    # Applying the binary operator '-' (line 1527)
    result_sub_568332 = python_operator(stypy.reporting.localization.Localization(__file__, 1527, 9), '-', searchsorted_call_result_568321, searchsorted_call_result_568331)
    
    # Assigning a type to the variable 'lj' (line 1527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 4), 'lj', result_sub_568332)
    
    # Assigning a Call to a Name (line 1529):
    
    # Assigning a Call to a Name (line 1529):
    
    # Call to cumsum(...): (line 1529)
    # Processing the call keyword arguments (line 1529)
    kwargs_568335 = {}
    # Getting the type of 'lj' (line 1529)
    lj_568333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 9), 'lj', False)
    # Obtaining the member 'cumsum' of a type (line 1529)
    cumsum_568334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 9), lj_568333, 'cumsum')
    # Calling cumsum(args, kwargs) (line 1529)
    cumsum_call_result_568336 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 9), cumsum_568334, *[], **kwargs_568335)
    
    # Assigning a type to the variable 'Bj' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'Bj', cumsum_call_result_568336)
    
    
    # Call to arange(...): (line 1530)
    # Processing the call arguments (line 1530)
    int_568338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 20), 'int')
    # Getting the type of 'k' (line 1530)
    k_568339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 23), 'k', False)
    # Processing the call keyword arguments (line 1530)
    kwargs_568340 = {}
    # Getting the type of 'arange' (line 1530)
    arange_568337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 13), 'arange', False)
    # Calling arange(args, kwargs) (line 1530)
    arange_call_result_568341 = invoke(stypy.reporting.localization.Localization(__file__, 1530, 13), arange_568337, *[int_568338, k_568339], **kwargs_568340)
    
    # Testing the type of a for loop iterable (line 1530)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1530, 4), arange_call_result_568341)
    # Getting the type of the for loop variable (line 1530)
    for_loop_var_568342 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1530, 4), arange_call_result_568341)
    # Assigning a type to the variable 'i' (line 1530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 4), 'i', for_loop_var_568342)
    # SSA begins for a for statement (line 1530)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1531):
    
    # Assigning a Call to a Name (line 1531):
    
    # Call to sort(...): (line 1531)
    # Processing the call arguments (line 1531)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1531)
    i_568345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 28), 'i', False)
    # Getting the type of 'samples' (line 1531)
    samples_568346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 20), 'samples', False)
    # Obtaining the member '__getitem__' of a type (line 1531)
    getitem___568347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1531, 20), samples_568346, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1531)
    subscript_call_result_568348 = invoke(stypy.reporting.localization.Localization(__file__, 1531, 20), getitem___568347, i_568345)
    
    # Processing the call keyword arguments (line 1531)
    kwargs_568349 = {}
    # Getting the type of 'np' (line 1531)
    np_568343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'np', False)
    # Obtaining the member 'sort' of a type (line 1531)
    sort_568344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1531, 12), np_568343, 'sort')
    # Calling sort(args, kwargs) (line 1531)
    sort_call_result_568350 = invoke(stypy.reporting.localization.Localization(__file__, 1531, 12), sort_568344, *[subscript_call_result_568348], **kwargs_568349)
    
    # Assigning a type to the variable 's' (line 1531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 8), 's', sort_call_result_568350)
    
    # Assigning a Call to a Name (line 1532):
    
    # Assigning a Call to a Name (line 1532):
    
    # Call to searchsorted(...): (line 1532)
    # Processing the call arguments (line 1532)
    
    # Obtaining the type of the subscript
    int_568353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 36), 'int')
    slice_568354 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1532, 29), None, int_568353, None)
    # Getting the type of 'Zstar' (line 1532)
    Zstar_568355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 29), 'Zstar', False)
    # Obtaining the member '__getitem__' of a type (line 1532)
    getitem___568356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 29), Zstar_568355, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1532)
    subscript_call_result_568357 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 29), getitem___568356, slice_568354)
    
    # Processing the call keyword arguments (line 1532)
    str_568358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 46), 'str', 'right')
    keyword_568359 = str_568358
    kwargs_568360 = {'side': keyword_568359}
    # Getting the type of 's' (line 1532)
    s_568351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 14), 's', False)
    # Obtaining the member 'searchsorted' of a type (line 1532)
    searchsorted_568352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 14), s_568351, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 1532)
    searchsorted_call_result_568361 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 14), searchsorted_568352, *[subscript_call_result_568357], **kwargs_568360)
    
    # Assigning a type to the variable 'Mij' (line 1532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'Mij', searchsorted_call_result_568361)
    
    # Assigning a BinOp to a Name (line 1533):
    
    # Assigning a BinOp to a Name (line 1533):
    # Getting the type of 'lj' (line 1533)
    lj_568362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 16), 'lj')
    
    # Call to float(...): (line 1533)
    # Processing the call arguments (line 1533)
    # Getting the type of 'N' (line 1533)
    N_568364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 27), 'N', False)
    # Processing the call keyword arguments (line 1533)
    kwargs_568365 = {}
    # Getting the type of 'float' (line 1533)
    float_568363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 21), 'float', False)
    # Calling float(args, kwargs) (line 1533)
    float_call_result_568366 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 21), float_568363, *[N_568364], **kwargs_568365)
    
    # Applying the binary operator 'div' (line 1533)
    result_div_568367 = python_operator(stypy.reporting.localization.Localization(__file__, 1533, 16), 'div', lj_568362, float_call_result_568366)
    
    # Getting the type of 'N' (line 1533)
    N_568368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 33), 'N')
    # Getting the type of 'Mij' (line 1533)
    Mij_568369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 37), 'Mij')
    # Applying the binary operator '*' (line 1533)
    result_mul_568370 = python_operator(stypy.reporting.localization.Localization(__file__, 1533, 33), '*', N_568368, Mij_568369)
    
    # Getting the type of 'Bj' (line 1533)
    Bj_568371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 43), 'Bj')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1533)
    i_568372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 50), 'i')
    # Getting the type of 'n' (line 1533)
    n_568373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 48), 'n')
    # Obtaining the member '__getitem__' of a type (line 1533)
    getitem___568374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 48), n_568373, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1533)
    subscript_call_result_568375 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 48), getitem___568374, i_568372)
    
    # Applying the binary operator '*' (line 1533)
    result_mul_568376 = python_operator(stypy.reporting.localization.Localization(__file__, 1533, 43), '*', Bj_568371, subscript_call_result_568375)
    
    # Applying the binary operator '-' (line 1533)
    result_sub_568377 = python_operator(stypy.reporting.localization.Localization(__file__, 1533, 33), '-', result_mul_568370, result_mul_568376)
    
    int_568378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1533, 55), 'int')
    # Applying the binary operator '**' (line 1533)
    result_pow_568379 = python_operator(stypy.reporting.localization.Localization(__file__, 1533, 32), '**', result_sub_568377, int_568378)
    
    # Applying the binary operator '*' (line 1533)
    result_mul_568380 = python_operator(stypy.reporting.localization.Localization(__file__, 1533, 30), '*', result_div_568367, result_pow_568379)
    
    # Getting the type of 'Bj' (line 1533)
    Bj_568381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 60), 'Bj')
    # Getting the type of 'N' (line 1533)
    N_568382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 66), 'N')
    # Getting the type of 'Bj' (line 1533)
    Bj_568383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 70), 'Bj')
    # Applying the binary operator '-' (line 1533)
    result_sub_568384 = python_operator(stypy.reporting.localization.Localization(__file__, 1533, 66), '-', N_568382, Bj_568383)
    
    # Applying the binary operator '*' (line 1533)
    result_mul_568385 = python_operator(stypy.reporting.localization.Localization(__file__, 1533, 60), '*', Bj_568381, result_sub_568384)
    
    # Applying the binary operator 'div' (line 1533)
    result_div_568386 = python_operator(stypy.reporting.localization.Localization(__file__, 1533, 57), 'div', result_mul_568380, result_mul_568385)
    
    # Assigning a type to the variable 'inner' (line 1533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'inner', result_div_568386)
    
    # Getting the type of 'A2kN' (line 1534)
    A2kN_568387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 8), 'A2kN')
    
    # Call to sum(...): (line 1534)
    # Processing the call keyword arguments (line 1534)
    kwargs_568390 = {}
    # Getting the type of 'inner' (line 1534)
    inner_568388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 16), 'inner', False)
    # Obtaining the member 'sum' of a type (line 1534)
    sum_568389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 16), inner_568388, 'sum')
    # Calling sum(args, kwargs) (line 1534)
    sum_call_result_568391 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 16), sum_568389, *[], **kwargs_568390)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1534)
    i_568392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 32), 'i')
    # Getting the type of 'n' (line 1534)
    n_568393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 30), 'n')
    # Obtaining the member '__getitem__' of a type (line 1534)
    getitem___568394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 30), n_568393, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1534)
    subscript_call_result_568395 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 30), getitem___568394, i_568392)
    
    # Applying the binary operator 'div' (line 1534)
    result_div_568396 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 16), 'div', sum_call_result_568391, subscript_call_result_568395)
    
    # Applying the binary operator '+=' (line 1534)
    result_iadd_568397 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 8), '+=', A2kN_568387, result_div_568396)
    # Assigning a type to the variable 'A2kN' (line 1534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 8), 'A2kN', result_iadd_568397)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'A2kN' (line 1535)
    A2kN_568398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 11), 'A2kN')
    # Assigning a type to the variable 'stypy_return_type' (line 1535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 4), 'stypy_return_type', A2kN_568398)
    
    # ################# End of '_anderson_ksamp_right(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_anderson_ksamp_right' in the type store
    # Getting the type of 'stypy_return_type' (line 1501)
    stypy_return_type_568399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_568399)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_anderson_ksamp_right'
    return stypy_return_type_568399

# Assigning a type to the variable '_anderson_ksamp_right' (line 1501)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 0), '_anderson_ksamp_right', _anderson_ksamp_right)

# Assigning a Call to a Name (line 1538):

# Assigning a Call to a Name (line 1538):

# Call to namedtuple(...): (line 1538)
# Processing the call arguments (line 1538)
str_568401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 34), 'str', 'Anderson_ksampResult')

# Obtaining an instance of the builtin type 'tuple' (line 1539)
tuple_568402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 35), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1539)
# Adding element type (line 1539)
str_568403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 35), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1539, 35), tuple_568402, str_568403)
# Adding element type (line 1539)
str_568404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 48), 'str', 'critical_values')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1539, 35), tuple_568402, str_568404)
# Adding element type (line 1539)
str_568405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1540, 35), 'str', 'significance_level')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1539, 35), tuple_568402, str_568405)

# Processing the call keyword arguments (line 1538)
kwargs_568406 = {}
# Getting the type of 'namedtuple' (line 1538)
namedtuple_568400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 23), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1538)
namedtuple_call_result_568407 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 23), namedtuple_568400, *[str_568401, tuple_568402], **kwargs_568406)

# Assigning a type to the variable 'Anderson_ksampResult' (line 1538)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 0), 'Anderson_ksampResult', namedtuple_call_result_568407)

@norecursion
def anderson_ksamp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 1543)
    True_568408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 36), 'True')
    defaults = [True_568408]
    # Create a new context for function 'anderson_ksamp'
    module_type_store = module_type_store.open_function_context('anderson_ksamp', 1543, 0, False)
    
    # Passed parameters checking function
    anderson_ksamp.stypy_localization = localization
    anderson_ksamp.stypy_type_of_self = None
    anderson_ksamp.stypy_type_store = module_type_store
    anderson_ksamp.stypy_function_name = 'anderson_ksamp'
    anderson_ksamp.stypy_param_names_list = ['samples', 'midrank']
    anderson_ksamp.stypy_varargs_param_name = None
    anderson_ksamp.stypy_kwargs_param_name = None
    anderson_ksamp.stypy_call_defaults = defaults
    anderson_ksamp.stypy_call_varargs = varargs
    anderson_ksamp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'anderson_ksamp', ['samples', 'midrank'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'anderson_ksamp', localization, ['samples', 'midrank'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'anderson_ksamp(...)' code ##################

    str_568409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1632, (-1)), 'str', 'The Anderson-Darling test for k-samples.\n\n    The k-sample Anderson-Darling test is a modification of the\n    one-sample Anderson-Darling test. It tests the null hypothesis\n    that k-samples are drawn from the same population without having\n    to specify the distribution function of that population. The\n    critical values depend on the number of samples.\n\n    Parameters\n    ----------\n    samples : sequence of 1-D array_like\n        Array of sample data in arrays.\n    midrank : bool, optional\n        Type of Anderson-Darling test which is computed. Default\n        (True) is the midrank test applicable to continuous and\n        discrete populations. If False, the right side empirical\n        distribution is used.\n\n    Returns\n    -------\n    statistic : float\n        Normalized k-sample Anderson-Darling test statistic.\n    critical_values : array\n        The critical values for significance levels 25%, 10%, 5%, 2.5%, 1%.\n    significance_level : float\n        An approximate significance level at which the null hypothesis for the\n        provided samples can be rejected.\n\n    Raises\n    ------\n    ValueError\n        If less than 2 samples are provided, a sample is empty, or no\n        distinct observations are in the samples.\n\n    See Also\n    --------\n    ks_2samp : 2 sample Kolmogorov-Smirnov test\n    anderson : 1 sample Anderson-Darling test\n\n    Notes\n    -----\n    [1]_ Defines three versions of the k-sample Anderson-Darling test:\n    one for continuous distributions and two for discrete\n    distributions, in which ties between samples may occur. The\n    default of this routine is to compute the version based on the\n    midrank empirical distribution function. This test is applicable\n    to continuous and discrete data. If midrank is set to False, the\n    right side empirical distribution is used for a test for discrete\n    data. According to [1]_, the two discrete test statistics differ\n    only slightly if a few collisions due to round-off errors occur in\n    the test not adjusted for ties between samples.\n\n    .. versionadded:: 0.14.0\n\n    References\n    ----------\n    .. [1] Scholz, F. W and Stephens, M. A. (1987), K-Sample\n           Anderson-Darling Tests, Journal of the American Statistical\n           Association, Vol. 82, pp. 918-924.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> np.random.seed(314159)\n\n    The null hypothesis that the two random samples come from the same\n    distribution can be rejected at the 5% level because the returned\n    test value is greater than the critical value for 5% (1.961) but\n    not at the 2.5% level. The interpolation gives an approximate\n    significance level of 3.1%:\n\n    >>> stats.anderson_ksamp([np.random.normal(size=50),\n    ... np.random.normal(loc=0.5, size=30)])\n    (2.4615796189876105,\n      array([ 0.325,  1.226,  1.961,  2.718,  3.752]),\n      0.03134990135800783)\n\n\n    The null hypothesis cannot be rejected for three samples from an\n    identical distribution. The approximate p-value (87%) has to be\n    computed by extrapolation and may not be very accurate:\n\n    >>> stats.anderson_ksamp([np.random.normal(size=50),\n    ... np.random.normal(size=30), np.random.normal(size=20)])\n    (-0.73091722665244196,\n      array([ 0.44925884,  1.3052767 ,  1.9434184 ,  2.57696569,  3.41634856]),\n      0.8789283903979661)\n\n    ')
    
    # Assigning a Call to a Name (line 1633):
    
    # Assigning a Call to a Name (line 1633):
    
    # Call to len(...): (line 1633)
    # Processing the call arguments (line 1633)
    # Getting the type of 'samples' (line 1633)
    samples_568411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 12), 'samples', False)
    # Processing the call keyword arguments (line 1633)
    kwargs_568412 = {}
    # Getting the type of 'len' (line 1633)
    len_568410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 8), 'len', False)
    # Calling len(args, kwargs) (line 1633)
    len_call_result_568413 = invoke(stypy.reporting.localization.Localization(__file__, 1633, 8), len_568410, *[samples_568411], **kwargs_568412)
    
    # Assigning a type to the variable 'k' (line 1633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 4), 'k', len_call_result_568413)
    
    
    # Getting the type of 'k' (line 1634)
    k_568414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 8), 'k')
    int_568415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 12), 'int')
    # Applying the binary operator '<' (line 1634)
    result_lt_568416 = python_operator(stypy.reporting.localization.Localization(__file__, 1634, 8), '<', k_568414, int_568415)
    
    # Testing the type of an if condition (line 1634)
    if_condition_568417 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1634, 4), result_lt_568416)
    # Assigning a type to the variable 'if_condition_568417' (line 1634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 4), 'if_condition_568417', if_condition_568417)
    # SSA begins for if statement (line 1634)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1635)
    # Processing the call arguments (line 1635)
    str_568419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1635, 25), 'str', 'anderson_ksamp needs at least two samples')
    # Processing the call keyword arguments (line 1635)
    kwargs_568420 = {}
    # Getting the type of 'ValueError' (line 1635)
    ValueError_568418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1635)
    ValueError_call_result_568421 = invoke(stypy.reporting.localization.Localization(__file__, 1635, 14), ValueError_568418, *[str_568419], **kwargs_568420)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1635, 8), ValueError_call_result_568421, 'raise parameter', BaseException)
    # SSA join for if statement (line 1634)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1637):
    
    # Assigning a Call to a Name (line 1637):
    
    # Call to list(...): (line 1637)
    # Processing the call arguments (line 1637)
    
    # Call to map(...): (line 1637)
    # Processing the call arguments (line 1637)
    # Getting the type of 'np' (line 1637)
    np_568424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 23), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1637)
    asarray_568425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 23), np_568424, 'asarray')
    # Getting the type of 'samples' (line 1637)
    samples_568426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 35), 'samples', False)
    # Processing the call keyword arguments (line 1637)
    kwargs_568427 = {}
    # Getting the type of 'map' (line 1637)
    map_568423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 19), 'map', False)
    # Calling map(args, kwargs) (line 1637)
    map_call_result_568428 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 19), map_568423, *[asarray_568425, samples_568426], **kwargs_568427)
    
    # Processing the call keyword arguments (line 1637)
    kwargs_568429 = {}
    # Getting the type of 'list' (line 1637)
    list_568422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 14), 'list', False)
    # Calling list(args, kwargs) (line 1637)
    list_call_result_568430 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 14), list_568422, *[map_call_result_568428], **kwargs_568429)
    
    # Assigning a type to the variable 'samples' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 4), 'samples', list_call_result_568430)
    
    # Assigning a Call to a Name (line 1638):
    
    # Assigning a Call to a Name (line 1638):
    
    # Call to sort(...): (line 1638)
    # Processing the call arguments (line 1638)
    
    # Call to hstack(...): (line 1638)
    # Processing the call arguments (line 1638)
    # Getting the type of 'samples' (line 1638)
    samples_568435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 26), 'samples', False)
    # Processing the call keyword arguments (line 1638)
    kwargs_568436 = {}
    # Getting the type of 'np' (line 1638)
    np_568433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 16), 'np', False)
    # Obtaining the member 'hstack' of a type (line 1638)
    hstack_568434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 16), np_568433, 'hstack')
    # Calling hstack(args, kwargs) (line 1638)
    hstack_call_result_568437 = invoke(stypy.reporting.localization.Localization(__file__, 1638, 16), hstack_568434, *[samples_568435], **kwargs_568436)
    
    # Processing the call keyword arguments (line 1638)
    kwargs_568438 = {}
    # Getting the type of 'np' (line 1638)
    np_568431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 8), 'np', False)
    # Obtaining the member 'sort' of a type (line 1638)
    sort_568432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 8), np_568431, 'sort')
    # Calling sort(args, kwargs) (line 1638)
    sort_call_result_568439 = invoke(stypy.reporting.localization.Localization(__file__, 1638, 8), sort_568432, *[hstack_call_result_568437], **kwargs_568438)
    
    # Assigning a type to the variable 'Z' (line 1638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1638, 4), 'Z', sort_call_result_568439)
    
    # Assigning a Attribute to a Name (line 1639):
    
    # Assigning a Attribute to a Name (line 1639):
    # Getting the type of 'Z' (line 1639)
    Z_568440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 8), 'Z')
    # Obtaining the member 'size' of a type (line 1639)
    size_568441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 8), Z_568440, 'size')
    # Assigning a type to the variable 'N' (line 1639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1639, 4), 'N', size_568441)
    
    # Assigning a Call to a Name (line 1640):
    
    # Assigning a Call to a Name (line 1640):
    
    # Call to unique(...): (line 1640)
    # Processing the call arguments (line 1640)
    # Getting the type of 'Z' (line 1640)
    Z_568444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 22), 'Z', False)
    # Processing the call keyword arguments (line 1640)
    kwargs_568445 = {}
    # Getting the type of 'np' (line 1640)
    np_568442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 12), 'np', False)
    # Obtaining the member 'unique' of a type (line 1640)
    unique_568443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 12), np_568442, 'unique')
    # Calling unique(args, kwargs) (line 1640)
    unique_call_result_568446 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 12), unique_568443, *[Z_568444], **kwargs_568445)
    
    # Assigning a type to the variable 'Zstar' (line 1640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 4), 'Zstar', unique_call_result_568446)
    
    
    # Getting the type of 'Zstar' (line 1641)
    Zstar_568447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 7), 'Zstar')
    # Obtaining the member 'size' of a type (line 1641)
    size_568448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 7), Zstar_568447, 'size')
    int_568449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 20), 'int')
    # Applying the binary operator '<' (line 1641)
    result_lt_568450 = python_operator(stypy.reporting.localization.Localization(__file__, 1641, 7), '<', size_568448, int_568449)
    
    # Testing the type of an if condition (line 1641)
    if_condition_568451 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1641, 4), result_lt_568450)
    # Assigning a type to the variable 'if_condition_568451' (line 1641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 4), 'if_condition_568451', if_condition_568451)
    # SSA begins for if statement (line 1641)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1642)
    # Processing the call arguments (line 1642)
    str_568453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 25), 'str', 'anderson_ksamp needs more than one distinct observation')
    # Processing the call keyword arguments (line 1642)
    kwargs_568454 = {}
    # Getting the type of 'ValueError' (line 1642)
    ValueError_568452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1642)
    ValueError_call_result_568455 = invoke(stypy.reporting.localization.Localization(__file__, 1642, 14), ValueError_568452, *[str_568453], **kwargs_568454)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1642, 8), ValueError_call_result_568455, 'raise parameter', BaseException)
    # SSA join for if statement (line 1641)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1645):
    
    # Assigning a Call to a Name (line 1645):
    
    # Call to array(...): (line 1645)
    # Processing the call arguments (line 1645)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'samples' (line 1645)
    samples_568460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 44), 'samples', False)
    comprehension_568461 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1645, 18), samples_568460)
    # Assigning a type to the variable 'sample' (line 1645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 18), 'sample', comprehension_568461)
    # Getting the type of 'sample' (line 1645)
    sample_568458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 18), 'sample', False)
    # Obtaining the member 'size' of a type (line 1645)
    size_568459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 18), sample_568458, 'size')
    list_568462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 18), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1645, 18), list_568462, size_568459)
    # Processing the call keyword arguments (line 1645)
    kwargs_568463 = {}
    # Getting the type of 'np' (line 1645)
    np_568456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 1645)
    array_568457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 8), np_568456, 'array')
    # Calling array(args, kwargs) (line 1645)
    array_call_result_568464 = invoke(stypy.reporting.localization.Localization(__file__, 1645, 8), array_568457, *[list_568462], **kwargs_568463)
    
    # Assigning a type to the variable 'n' (line 1645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 4), 'n', array_call_result_568464)
    
    
    # Call to any(...): (line 1646)
    # Processing the call arguments (line 1646)
    
    # Getting the type of 'n' (line 1646)
    n_568466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 11), 'n', False)
    int_568467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 16), 'int')
    # Applying the binary operator '==' (line 1646)
    result_eq_568468 = python_operator(stypy.reporting.localization.Localization(__file__, 1646, 11), '==', n_568466, int_568467)
    
    # Processing the call keyword arguments (line 1646)
    kwargs_568469 = {}
    # Getting the type of 'any' (line 1646)
    any_568465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 7), 'any', False)
    # Calling any(args, kwargs) (line 1646)
    any_call_result_568470 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 7), any_568465, *[result_eq_568468], **kwargs_568469)
    
    # Testing the type of an if condition (line 1646)
    if_condition_568471 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1646, 4), any_call_result_568470)
    # Assigning a type to the variable 'if_condition_568471' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 4), 'if_condition_568471', if_condition_568471)
    # SSA begins for if statement (line 1646)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1647)
    # Processing the call arguments (line 1647)
    str_568473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1647, 25), 'str', 'anderson_ksamp encountered sample without observations')
    # Processing the call keyword arguments (line 1647)
    kwargs_568474 = {}
    # Getting the type of 'ValueError' (line 1647)
    ValueError_568472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1647)
    ValueError_call_result_568475 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 14), ValueError_568472, *[str_568473], **kwargs_568474)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1647, 8), ValueError_call_result_568475, 'raise parameter', BaseException)
    # SSA join for if statement (line 1646)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'midrank' (line 1650)
    midrank_568476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 7), 'midrank')
    # Testing the type of an if condition (line 1650)
    if_condition_568477 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1650, 4), midrank_568476)
    # Assigning a type to the variable 'if_condition_568477' (line 1650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 4), 'if_condition_568477', if_condition_568477)
    # SSA begins for if statement (line 1650)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1651):
    
    # Assigning a Call to a Name (line 1651):
    
    # Call to _anderson_ksamp_midrank(...): (line 1651)
    # Processing the call arguments (line 1651)
    # Getting the type of 'samples' (line 1651)
    samples_568479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 39), 'samples', False)
    # Getting the type of 'Z' (line 1651)
    Z_568480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 48), 'Z', False)
    # Getting the type of 'Zstar' (line 1651)
    Zstar_568481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 51), 'Zstar', False)
    # Getting the type of 'k' (line 1651)
    k_568482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 58), 'k', False)
    # Getting the type of 'n' (line 1651)
    n_568483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 61), 'n', False)
    # Getting the type of 'N' (line 1651)
    N_568484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 64), 'N', False)
    # Processing the call keyword arguments (line 1651)
    kwargs_568485 = {}
    # Getting the type of '_anderson_ksamp_midrank' (line 1651)
    _anderson_ksamp_midrank_568478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 15), '_anderson_ksamp_midrank', False)
    # Calling _anderson_ksamp_midrank(args, kwargs) (line 1651)
    _anderson_ksamp_midrank_call_result_568486 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 15), _anderson_ksamp_midrank_568478, *[samples_568479, Z_568480, Zstar_568481, k_568482, n_568483, N_568484], **kwargs_568485)
    
    # Assigning a type to the variable 'A2kN' (line 1651)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 8), 'A2kN', _anderson_ksamp_midrank_call_result_568486)
    # SSA branch for the else part of an if statement (line 1650)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1653):
    
    # Assigning a Call to a Name (line 1653):
    
    # Call to _anderson_ksamp_right(...): (line 1653)
    # Processing the call arguments (line 1653)
    # Getting the type of 'samples' (line 1653)
    samples_568488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 37), 'samples', False)
    # Getting the type of 'Z' (line 1653)
    Z_568489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 46), 'Z', False)
    # Getting the type of 'Zstar' (line 1653)
    Zstar_568490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 49), 'Zstar', False)
    # Getting the type of 'k' (line 1653)
    k_568491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 56), 'k', False)
    # Getting the type of 'n' (line 1653)
    n_568492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 59), 'n', False)
    # Getting the type of 'N' (line 1653)
    N_568493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 62), 'N', False)
    # Processing the call keyword arguments (line 1653)
    kwargs_568494 = {}
    # Getting the type of '_anderson_ksamp_right' (line 1653)
    _anderson_ksamp_right_568487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 15), '_anderson_ksamp_right', False)
    # Calling _anderson_ksamp_right(args, kwargs) (line 1653)
    _anderson_ksamp_right_call_result_568495 = invoke(stypy.reporting.localization.Localization(__file__, 1653, 15), _anderson_ksamp_right_568487, *[samples_568488, Z_568489, Zstar_568490, k_568491, n_568492, N_568493], **kwargs_568494)
    
    # Assigning a type to the variable 'A2kN' (line 1653)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1653, 8), 'A2kN', _anderson_ksamp_right_call_result_568495)
    # SSA join for if statement (line 1650)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1655):
    
    # Assigning a Call to a Name (line 1655):
    
    # Call to sum(...): (line 1655)
    # Processing the call keyword arguments (line 1655)
    kwargs_568500 = {}
    float_568496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1655, 9), 'float')
    # Getting the type of 'n' (line 1655)
    n_568497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 14), 'n', False)
    # Applying the binary operator 'div' (line 1655)
    result_div_568498 = python_operator(stypy.reporting.localization.Localization(__file__, 1655, 9), 'div', float_568496, n_568497)
    
    # Obtaining the member 'sum' of a type (line 1655)
    sum_568499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 9), result_div_568498, 'sum')
    # Calling sum(args, kwargs) (line 1655)
    sum_call_result_568501 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 9), sum_568499, *[], **kwargs_568500)
    
    # Assigning a type to the variable 'H' (line 1655)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1655, 4), 'H', sum_call_result_568501)
    
    # Assigning a Call to a Name (line 1656):
    
    # Assigning a Call to a Name (line 1656):
    
    # Call to cumsum(...): (line 1656)
    # Processing the call keyword arguments (line 1656)
    kwargs_568513 = {}
    float_568502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1656, 13), 'float')
    
    # Call to arange(...): (line 1656)
    # Processing the call arguments (line 1656)
    # Getting the type of 'N' (line 1656)
    N_568504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 25), 'N', False)
    int_568505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1656, 29), 'int')
    # Applying the binary operator '-' (line 1656)
    result_sub_568506 = python_operator(stypy.reporting.localization.Localization(__file__, 1656, 25), '-', N_568504, int_568505)
    
    int_568507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1656, 32), 'int')
    int_568508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1656, 35), 'int')
    # Processing the call keyword arguments (line 1656)
    kwargs_568509 = {}
    # Getting the type of 'arange' (line 1656)
    arange_568503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 18), 'arange', False)
    # Calling arange(args, kwargs) (line 1656)
    arange_call_result_568510 = invoke(stypy.reporting.localization.Localization(__file__, 1656, 18), arange_568503, *[result_sub_568506, int_568507, int_568508], **kwargs_568509)
    
    # Applying the binary operator 'div' (line 1656)
    result_div_568511 = python_operator(stypy.reporting.localization.Localization(__file__, 1656, 13), 'div', float_568502, arange_call_result_568510)
    
    # Obtaining the member 'cumsum' of a type (line 1656)
    cumsum_568512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 13), result_div_568511, 'cumsum')
    # Calling cumsum(args, kwargs) (line 1656)
    cumsum_call_result_568514 = invoke(stypy.reporting.localization.Localization(__file__, 1656, 13), cumsum_568512, *[], **kwargs_568513)
    
    # Assigning a type to the variable 'hs_cs' (line 1656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 4), 'hs_cs', cumsum_call_result_568514)
    
    # Assigning a BinOp to a Name (line 1657):
    
    # Assigning a BinOp to a Name (line 1657):
    
    # Obtaining the type of the subscript
    int_568515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1657, 14), 'int')
    # Getting the type of 'hs_cs' (line 1657)
    hs_cs_568516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 8), 'hs_cs')
    # Obtaining the member '__getitem__' of a type (line 1657)
    getitem___568517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1657, 8), hs_cs_568516, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1657)
    subscript_call_result_568518 = invoke(stypy.reporting.localization.Localization(__file__, 1657, 8), getitem___568517, int_568515)
    
    int_568519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1657, 20), 'int')
    # Applying the binary operator '+' (line 1657)
    result_add_568520 = python_operator(stypy.reporting.localization.Localization(__file__, 1657, 8), '+', subscript_call_result_568518, int_568519)
    
    # Assigning a type to the variable 'h' (line 1657)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1657, 4), 'h', result_add_568520)
    
    # Assigning a Call to a Name (line 1658):
    
    # Assigning a Call to a Name (line 1658):
    
    # Call to sum(...): (line 1658)
    # Processing the call keyword arguments (line 1658)
    kwargs_568529 = {}
    # Getting the type of 'hs_cs' (line 1658)
    hs_cs_568521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 9), 'hs_cs', False)
    
    # Call to arange(...): (line 1658)
    # Processing the call arguments (line 1658)
    int_568523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1658, 24), 'int')
    # Getting the type of 'N' (line 1658)
    N_568524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 27), 'N', False)
    # Processing the call keyword arguments (line 1658)
    kwargs_568525 = {}
    # Getting the type of 'arange' (line 1658)
    arange_568522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 17), 'arange', False)
    # Calling arange(args, kwargs) (line 1658)
    arange_call_result_568526 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 17), arange_568522, *[int_568523, N_568524], **kwargs_568525)
    
    # Applying the binary operator 'div' (line 1658)
    result_div_568527 = python_operator(stypy.reporting.localization.Localization(__file__, 1658, 9), 'div', hs_cs_568521, arange_call_result_568526)
    
    # Obtaining the member 'sum' of a type (line 1658)
    sum_568528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 9), result_div_568527, 'sum')
    # Calling sum(args, kwargs) (line 1658)
    sum_call_result_568530 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 9), sum_568528, *[], **kwargs_568529)
    
    # Assigning a type to the variable 'g' (line 1658)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 4), 'g', sum_call_result_568530)
    
    # Assigning a BinOp to a Name (line 1660):
    
    # Assigning a BinOp to a Name (line 1660):
    int_568531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1660, 9), 'int')
    # Getting the type of 'g' (line 1660)
    g_568532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 11), 'g')
    # Applying the binary operator '*' (line 1660)
    result_mul_568533 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 9), '*', int_568531, g_568532)
    
    int_568534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1660, 15), 'int')
    # Applying the binary operator '-' (line 1660)
    result_sub_568535 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 9), '-', result_mul_568533, int_568534)
    
    # Getting the type of 'k' (line 1660)
    k_568536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 21), 'k')
    int_568537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1660, 25), 'int')
    # Applying the binary operator '-' (line 1660)
    result_sub_568538 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 21), '-', k_568536, int_568537)
    
    # Applying the binary operator '*' (line 1660)
    result_mul_568539 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 8), '*', result_sub_568535, result_sub_568538)
    
    int_568540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1660, 31), 'int')
    int_568541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1660, 36), 'int')
    # Getting the type of 'g' (line 1660)
    g_568542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 38), 'g')
    # Applying the binary operator '*' (line 1660)
    result_mul_568543 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 36), '*', int_568541, g_568542)
    
    # Applying the binary operator '-' (line 1660)
    result_sub_568544 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 31), '-', int_568540, result_mul_568543)
    
    # Getting the type of 'H' (line 1660)
    H_568545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 41), 'H')
    # Applying the binary operator '*' (line 1660)
    result_mul_568546 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 30), '*', result_sub_568544, H_568545)
    
    # Applying the binary operator '+' (line 1660)
    result_add_568547 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 8), '+', result_mul_568539, result_mul_568546)
    
    # Assigning a type to the variable 'a' (line 1660)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1660, 4), 'a', result_add_568547)
    
    # Assigning a BinOp to a Name (line 1661):
    
    # Assigning a BinOp to a Name (line 1661):
    int_568548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 9), 'int')
    # Getting the type of 'g' (line 1661)
    g_568549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 11), 'g')
    # Applying the binary operator '*' (line 1661)
    result_mul_568550 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 9), '*', int_568548, g_568549)
    
    int_568551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 15), 'int')
    # Applying the binary operator '-' (line 1661)
    result_sub_568552 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 9), '-', result_mul_568550, int_568551)
    
    # Getting the type of 'k' (line 1661)
    k_568553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 18), 'k')
    int_568554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 21), 'int')
    # Applying the binary operator '**' (line 1661)
    result_pow_568555 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 18), '**', k_568553, int_568554)
    
    # Applying the binary operator '*' (line 1661)
    result_mul_568556 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 8), '*', result_sub_568552, result_pow_568555)
    
    int_568557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 25), 'int')
    # Getting the type of 'h' (line 1661)
    h_568558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 27), 'h')
    # Applying the binary operator '*' (line 1661)
    result_mul_568559 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 25), '*', int_568557, h_568558)
    
    # Getting the type of 'k' (line 1661)
    k_568560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 29), 'k')
    # Applying the binary operator '*' (line 1661)
    result_mul_568561 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 28), '*', result_mul_568559, k_568560)
    
    # Applying the binary operator '+' (line 1661)
    result_add_568562 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 8), '+', result_mul_568556, result_mul_568561)
    
    int_568563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 34), 'int')
    # Getting the type of 'g' (line 1661)
    g_568564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 36), 'g')
    # Applying the binary operator '*' (line 1661)
    result_mul_568565 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 34), '*', int_568563, g_568564)
    
    int_568566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 40), 'int')
    # Getting the type of 'h' (line 1661)
    h_568567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 43), 'h')
    # Applying the binary operator '*' (line 1661)
    result_mul_568568 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 40), '*', int_568566, h_568567)
    
    # Applying the binary operator '-' (line 1661)
    result_sub_568569 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 34), '-', result_mul_568565, result_mul_568568)
    
    int_568570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 47), 'int')
    # Applying the binary operator '-' (line 1661)
    result_sub_568571 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 45), '-', result_sub_568569, int_568570)
    
    # Getting the type of 'H' (line 1661)
    H_568572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 50), 'H')
    # Applying the binary operator '*' (line 1661)
    result_mul_568573 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 33), '*', result_sub_568571, H_568572)
    
    # Applying the binary operator '+' (line 1661)
    result_add_568574 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 31), '+', result_add_568562, result_mul_568573)
    
    int_568575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 54), 'int')
    # Getting the type of 'h' (line 1661)
    h_568576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 56), 'h')
    # Applying the binary operator '*' (line 1661)
    result_mul_568577 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 54), '*', int_568575, h_568576)
    
    # Applying the binary operator '-' (line 1661)
    result_sub_568578 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 52), '-', result_add_568574, result_mul_568577)
    
    int_568579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 60), 'int')
    # Getting the type of 'g' (line 1661)
    g_568580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 62), 'g')
    # Applying the binary operator '*' (line 1661)
    result_mul_568581 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 60), '*', int_568579, g_568580)
    
    # Applying the binary operator '+' (line 1661)
    result_add_568582 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 58), '+', result_sub_568578, result_mul_568581)
    
    int_568583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 66), 'int')
    # Applying the binary operator '-' (line 1661)
    result_sub_568584 = python_operator(stypy.reporting.localization.Localization(__file__, 1661, 64), '-', result_add_568582, int_568583)
    
    # Assigning a type to the variable 'b' (line 1661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 4), 'b', result_sub_568584)
    
    # Assigning a BinOp to a Name (line 1662):
    
    # Assigning a BinOp to a Name (line 1662):
    int_568585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 9), 'int')
    # Getting the type of 'h' (line 1662)
    h_568586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 11), 'h')
    # Applying the binary operator '*' (line 1662)
    result_mul_568587 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 9), '*', int_568585, h_568586)
    
    int_568588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 15), 'int')
    # Getting the type of 'g' (line 1662)
    g_568589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 17), 'g')
    # Applying the binary operator '*' (line 1662)
    result_mul_568590 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 15), '*', int_568588, g_568589)
    
    # Applying the binary operator '+' (line 1662)
    result_add_568591 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 9), '+', result_mul_568587, result_mul_568590)
    
    int_568592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 21), 'int')
    # Applying the binary operator '-' (line 1662)
    result_sub_568593 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 19), '-', result_add_568591, int_568592)
    
    # Getting the type of 'k' (line 1662)
    k_568594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 24), 'k')
    int_568595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 27), 'int')
    # Applying the binary operator '**' (line 1662)
    result_pow_568596 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 24), '**', k_568594, int_568595)
    
    # Applying the binary operator '*' (line 1662)
    result_mul_568597 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 8), '*', result_sub_568593, result_pow_568596)
    
    int_568598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 32), 'int')
    # Getting the type of 'h' (line 1662)
    h_568599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 34), 'h')
    # Applying the binary operator '*' (line 1662)
    result_mul_568600 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 32), '*', int_568598, h_568599)
    
    int_568601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 38), 'int')
    # Getting the type of 'g' (line 1662)
    g_568602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 40), 'g')
    # Applying the binary operator '*' (line 1662)
    result_mul_568603 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 38), '*', int_568601, g_568602)
    
    # Applying the binary operator '-' (line 1662)
    result_sub_568604 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 32), '-', result_mul_568600, result_mul_568603)
    
    int_568605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 44), 'int')
    # Applying the binary operator '+' (line 1662)
    result_add_568606 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 42), '+', result_sub_568604, int_568605)
    
    # Getting the type of 'k' (line 1662)
    k_568607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 47), 'k')
    # Applying the binary operator '*' (line 1662)
    result_mul_568608 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 31), '*', result_add_568606, k_568607)
    
    # Applying the binary operator '+' (line 1662)
    result_add_568609 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 8), '+', result_mul_568597, result_mul_568608)
    
    int_568610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 52), 'int')
    # Getting the type of 'h' (line 1662)
    h_568611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 54), 'h')
    # Applying the binary operator '*' (line 1662)
    result_mul_568612 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 52), '*', int_568610, h_568611)
    
    int_568613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 58), 'int')
    # Applying the binary operator '-' (line 1662)
    result_sub_568614 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 52), '-', result_mul_568612, int_568613)
    
    # Getting the type of 'H' (line 1662)
    H_568615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 61), 'H')
    # Applying the binary operator '*' (line 1662)
    result_mul_568616 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 51), '*', result_sub_568614, H_568615)
    
    # Applying the binary operator '+' (line 1662)
    result_add_568617 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 49), '+', result_add_568609, result_mul_568616)
    
    int_568618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 65), 'int')
    # Getting the type of 'h' (line 1662)
    h_568619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 67), 'h')
    # Applying the binary operator '*' (line 1662)
    result_mul_568620 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 65), '*', int_568618, h_568619)
    
    # Applying the binary operator '+' (line 1662)
    result_add_568621 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 63), '+', result_add_568617, result_mul_568620)
    
    # Assigning a type to the variable 'c' (line 1662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1662, 4), 'c', result_add_568621)
    
    # Assigning a BinOp to a Name (line 1663):
    
    # Assigning a BinOp to a Name (line 1663):
    int_568622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 9), 'int')
    # Getting the type of 'h' (line 1663)
    h_568623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 11), 'h')
    # Applying the binary operator '*' (line 1663)
    result_mul_568624 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 9), '*', int_568622, h_568623)
    
    int_568625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 15), 'int')
    # Applying the binary operator '+' (line 1663)
    result_add_568626 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 9), '+', result_mul_568624, int_568625)
    
    # Getting the type of 'k' (line 1663)
    k_568627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 18), 'k')
    int_568628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 21), 'int')
    # Applying the binary operator '**' (line 1663)
    result_pow_568629 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 18), '**', k_568627, int_568628)
    
    # Applying the binary operator '*' (line 1663)
    result_mul_568630 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 8), '*', result_add_568626, result_pow_568629)
    
    int_568631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 25), 'int')
    # Getting the type of 'h' (line 1663)
    h_568632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 27), 'h')
    # Applying the binary operator '*' (line 1663)
    result_mul_568633 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 25), '*', int_568631, h_568632)
    
    # Getting the type of 'k' (line 1663)
    k_568634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 29), 'k')
    # Applying the binary operator '*' (line 1663)
    result_mul_568635 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 28), '*', result_mul_568633, k_568634)
    
    # Applying the binary operator '-' (line 1663)
    result_sub_568636 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 8), '-', result_mul_568630, result_mul_568635)
    
    # Assigning a type to the variable 'd' (line 1663)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1663, 4), 'd', result_sub_568636)
    
    # Assigning a BinOp to a Name (line 1664):
    
    # Assigning a BinOp to a Name (line 1664):
    # Getting the type of 'a' (line 1664)
    a_568637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 15), 'a')
    # Getting the type of 'N' (line 1664)
    N_568638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 17), 'N')
    int_568639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1664, 20), 'int')
    # Applying the binary operator '**' (line 1664)
    result_pow_568640 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 17), '**', N_568638, int_568639)
    
    # Applying the binary operator '*' (line 1664)
    result_mul_568641 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 15), '*', a_568637, result_pow_568640)
    
    # Getting the type of 'b' (line 1664)
    b_568642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 24), 'b')
    # Getting the type of 'N' (line 1664)
    N_568643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 26), 'N')
    int_568644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1664, 29), 'int')
    # Applying the binary operator '**' (line 1664)
    result_pow_568645 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 26), '**', N_568643, int_568644)
    
    # Applying the binary operator '*' (line 1664)
    result_mul_568646 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 24), '*', b_568642, result_pow_568645)
    
    # Applying the binary operator '+' (line 1664)
    result_add_568647 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 15), '+', result_mul_568641, result_mul_568646)
    
    # Getting the type of 'c' (line 1664)
    c_568648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 33), 'c')
    # Getting the type of 'N' (line 1664)
    N_568649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 35), 'N')
    # Applying the binary operator '*' (line 1664)
    result_mul_568650 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 33), '*', c_568648, N_568649)
    
    # Applying the binary operator '+' (line 1664)
    result_add_568651 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 31), '+', result_add_568647, result_mul_568650)
    
    # Getting the type of 'd' (line 1664)
    d_568652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 39), 'd')
    # Applying the binary operator '+' (line 1664)
    result_add_568653 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 37), '+', result_add_568651, d_568652)
    
    # Getting the type of 'N' (line 1664)
    N_568654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 46), 'N')
    float_568655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1664, 50), 'float')
    # Applying the binary operator '-' (line 1664)
    result_sub_568656 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 46), '-', N_568654, float_568655)
    
    # Getting the type of 'N' (line 1664)
    N_568657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 57), 'N')
    float_568658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1664, 61), 'float')
    # Applying the binary operator '-' (line 1664)
    result_sub_568659 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 57), '-', N_568657, float_568658)
    
    # Applying the binary operator '*' (line 1664)
    result_mul_568660 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 45), '*', result_sub_568656, result_sub_568659)
    
    # Getting the type of 'N' (line 1664)
    N_568661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 68), 'N')
    float_568662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1664, 72), 'float')
    # Applying the binary operator '-' (line 1664)
    result_sub_568663 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 68), '-', N_568661, float_568662)
    
    # Applying the binary operator '*' (line 1664)
    result_mul_568664 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 65), '*', result_mul_568660, result_sub_568663)
    
    # Applying the binary operator 'div' (line 1664)
    result_div_568665 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 14), 'div', result_add_568653, result_mul_568664)
    
    # Assigning a type to the variable 'sigmasq' (line 1664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1664, 4), 'sigmasq', result_div_568665)
    
    # Assigning a BinOp to a Name (line 1665):
    
    # Assigning a BinOp to a Name (line 1665):
    # Getting the type of 'k' (line 1665)
    k_568666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 8), 'k')
    int_568667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, 12), 'int')
    # Applying the binary operator '-' (line 1665)
    result_sub_568668 = python_operator(stypy.reporting.localization.Localization(__file__, 1665, 8), '-', k_568666, int_568667)
    
    # Assigning a type to the variable 'm' (line 1665)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 4), 'm', result_sub_568668)
    
    # Assigning a BinOp to a Name (line 1666):
    
    # Assigning a BinOp to a Name (line 1666):
    # Getting the type of 'A2kN' (line 1666)
    A2kN_568669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 10), 'A2kN')
    # Getting the type of 'm' (line 1666)
    m_568670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 17), 'm')
    # Applying the binary operator '-' (line 1666)
    result_sub_568671 = python_operator(stypy.reporting.localization.Localization(__file__, 1666, 10), '-', A2kN_568669, m_568670)
    
    
    # Call to sqrt(...): (line 1666)
    # Processing the call arguments (line 1666)
    # Getting the type of 'sigmasq' (line 1666)
    sigmasq_568674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 32), 'sigmasq', False)
    # Processing the call keyword arguments (line 1666)
    kwargs_568675 = {}
    # Getting the type of 'math' (line 1666)
    math_568672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 22), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 1666)
    sqrt_568673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1666, 22), math_568672, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1666)
    sqrt_call_result_568676 = invoke(stypy.reporting.localization.Localization(__file__, 1666, 22), sqrt_568673, *[sigmasq_568674], **kwargs_568675)
    
    # Applying the binary operator 'div' (line 1666)
    result_div_568677 = python_operator(stypy.reporting.localization.Localization(__file__, 1666, 9), 'div', result_sub_568671, sqrt_call_result_568676)
    
    # Assigning a type to the variable 'A2' (line 1666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 4), 'A2', result_div_568677)
    
    # Assigning a Call to a Name (line 1670):
    
    # Assigning a Call to a Name (line 1670):
    
    # Call to array(...): (line 1670)
    # Processing the call arguments (line 1670)
    
    # Obtaining an instance of the builtin type 'list' (line 1670)
    list_568680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1670)
    # Adding element type (line 1670)
    float_568681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 19), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1670, 18), list_568680, float_568681)
    # Adding element type (line 1670)
    float_568682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 26), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1670, 18), list_568680, float_568682)
    # Adding element type (line 1670)
    float_568683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 33), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1670, 18), list_568680, float_568683)
    # Adding element type (line 1670)
    float_568684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 40), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1670, 18), list_568680, float_568684)
    # Adding element type (line 1670)
    float_568685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 46), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1670, 18), list_568680, float_568685)
    
    # Processing the call keyword arguments (line 1670)
    kwargs_568686 = {}
    # Getting the type of 'np' (line 1670)
    np_568678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 9), 'np', False)
    # Obtaining the member 'array' of a type (line 1670)
    array_568679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 9), np_568678, 'array')
    # Calling array(args, kwargs) (line 1670)
    array_call_result_568687 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 9), array_568679, *[list_568680], **kwargs_568686)
    
    # Assigning a type to the variable 'b0' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 4), 'b0', array_call_result_568687)
    
    # Assigning a Call to a Name (line 1671):
    
    # Assigning a Call to a Name (line 1671):
    
    # Call to array(...): (line 1671)
    # Processing the call arguments (line 1671)
    
    # Obtaining an instance of the builtin type 'list' (line 1671)
    list_568690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1671)
    # Adding element type (line 1671)
    float_568691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 19), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 18), list_568690, float_568691)
    # Adding element type (line 1671)
    float_568692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 27), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 18), list_568690, float_568692)
    # Adding element type (line 1671)
    float_568693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 33), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 18), list_568690, float_568693)
    # Adding element type (line 1671)
    float_568694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 40), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 18), list_568690, float_568694)
    # Adding element type (line 1671)
    float_568695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 47), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 18), list_568690, float_568695)
    
    # Processing the call keyword arguments (line 1671)
    kwargs_568696 = {}
    # Getting the type of 'np' (line 1671)
    np_568688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 9), 'np', False)
    # Obtaining the member 'array' of a type (line 1671)
    array_568689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 9), np_568688, 'array')
    # Calling array(args, kwargs) (line 1671)
    array_call_result_568697 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 9), array_568689, *[list_568690], **kwargs_568696)
    
    # Assigning a type to the variable 'b1' (line 1671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 4), 'b1', array_call_result_568697)
    
    # Assigning a Call to a Name (line 1672):
    
    # Assigning a Call to a Name (line 1672):
    
    # Call to array(...): (line 1672)
    # Processing the call arguments (line 1672)
    
    # Obtaining an instance of the builtin type 'list' (line 1672)
    list_568700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1672)
    # Adding element type (line 1672)
    float_568701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 19), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1672, 18), list_568700, float_568701)
    # Adding element type (line 1672)
    float_568702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 27), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1672, 18), list_568700, float_568702)
    # Adding element type (line 1672)
    float_568703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 35), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1672, 18), list_568700, float_568703)
    # Adding element type (line 1672)
    float_568704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 43), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1672, 18), list_568700, float_568704)
    # Adding element type (line 1672)
    float_568705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 51), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1672, 18), list_568700, float_568705)
    
    # Processing the call keyword arguments (line 1672)
    kwargs_568706 = {}
    # Getting the type of 'np' (line 1672)
    np_568698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 9), 'np', False)
    # Obtaining the member 'array' of a type (line 1672)
    array_568699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1672, 9), np_568698, 'array')
    # Calling array(args, kwargs) (line 1672)
    array_call_result_568707 = invoke(stypy.reporting.localization.Localization(__file__, 1672, 9), array_568699, *[list_568700], **kwargs_568706)
    
    # Assigning a type to the variable 'b2' (line 1672)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 4), 'b2', array_call_result_568707)
    
    # Assigning a BinOp to a Name (line 1673):
    
    # Assigning a BinOp to a Name (line 1673):
    # Getting the type of 'b0' (line 1673)
    b0_568708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 15), 'b0')
    # Getting the type of 'b1' (line 1673)
    b1_568709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 20), 'b1')
    
    # Call to sqrt(...): (line 1673)
    # Processing the call arguments (line 1673)
    # Getting the type of 'm' (line 1673)
    m_568712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 35), 'm', False)
    # Processing the call keyword arguments (line 1673)
    kwargs_568713 = {}
    # Getting the type of 'math' (line 1673)
    math_568710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 25), 'math', False)
    # Obtaining the member 'sqrt' of a type (line 1673)
    sqrt_568711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1673, 25), math_568710, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1673)
    sqrt_call_result_568714 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 25), sqrt_568711, *[m_568712], **kwargs_568713)
    
    # Applying the binary operator 'div' (line 1673)
    result_div_568715 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 20), 'div', b1_568709, sqrt_call_result_568714)
    
    # Applying the binary operator '+' (line 1673)
    result_add_568716 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 15), '+', b0_568708, result_div_568715)
    
    # Getting the type of 'b2' (line 1673)
    b2_568717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 40), 'b2')
    # Getting the type of 'm' (line 1673)
    m_568718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 45), 'm')
    # Applying the binary operator 'div' (line 1673)
    result_div_568719 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 40), 'div', b2_568717, m_568718)
    
    # Applying the binary operator '+' (line 1673)
    result_add_568720 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 38), '+', result_add_568716, result_div_568719)
    
    # Assigning a type to the variable 'critical' (line 1673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 4), 'critical', result_add_568720)
    
    # Assigning a Call to a Name (line 1674):
    
    # Assigning a Call to a Name (line 1674):
    
    # Call to polyfit(...): (line 1674)
    # Processing the call arguments (line 1674)
    # Getting the type of 'critical' (line 1674)
    critical_568723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 20), 'critical', False)
    
    # Call to log(...): (line 1674)
    # Processing the call arguments (line 1674)
    
    # Call to array(...): (line 1674)
    # Processing the call arguments (line 1674)
    
    # Obtaining an instance of the builtin type 'list' (line 1674)
    list_568727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 43), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1674)
    # Adding element type (line 1674)
    float_568728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 44), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 43), list_568727, float_568728)
    # Adding element type (line 1674)
    float_568729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 50), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 43), list_568727, float_568729)
    # Adding element type (line 1674)
    float_568730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 55), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 43), list_568727, float_568730)
    # Adding element type (line 1674)
    float_568731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 61), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 43), list_568727, float_568731)
    # Adding element type (line 1674)
    float_568732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 68), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 43), list_568727, float_568732)
    
    # Processing the call keyword arguments (line 1674)
    kwargs_568733 = {}
    # Getting the type of 'np' (line 1674)
    np_568725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 34), 'np', False)
    # Obtaining the member 'array' of a type (line 1674)
    array_568726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 34), np_568725, 'array')
    # Calling array(args, kwargs) (line 1674)
    array_call_result_568734 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 34), array_568726, *[list_568727], **kwargs_568733)
    
    # Processing the call keyword arguments (line 1674)
    kwargs_568735 = {}
    # Getting the type of 'log' (line 1674)
    log_568724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 30), 'log', False)
    # Calling log(args, kwargs) (line 1674)
    log_call_result_568736 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 30), log_568724, *[array_call_result_568734], **kwargs_568735)
    
    int_568737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 77), 'int')
    # Processing the call keyword arguments (line 1674)
    kwargs_568738 = {}
    # Getting the type of 'np' (line 1674)
    np_568721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 9), 'np', False)
    # Obtaining the member 'polyfit' of a type (line 1674)
    polyfit_568722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 9), np_568721, 'polyfit')
    # Calling polyfit(args, kwargs) (line 1674)
    polyfit_call_result_568739 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 9), polyfit_568722, *[critical_568723, log_call_result_568736, int_568737], **kwargs_568738)
    
    # Assigning a type to the variable 'pf' (line 1674)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 4), 'pf', polyfit_call_result_568739)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'A2' (line 1675)
    A2_568740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 7), 'A2')
    
    # Call to min(...): (line 1675)
    # Processing the call keyword arguments (line 1675)
    kwargs_568743 = {}
    # Getting the type of 'critical' (line 1675)
    critical_568741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'critical', False)
    # Obtaining the member 'min' of a type (line 1675)
    min_568742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 12), critical_568741, 'min')
    # Calling min(args, kwargs) (line 1675)
    min_call_result_568744 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 12), min_568742, *[], **kwargs_568743)
    
    # Applying the binary operator '<' (line 1675)
    result_lt_568745 = python_operator(stypy.reporting.localization.Localization(__file__, 1675, 7), '<', A2_568740, min_call_result_568744)
    
    
    # Getting the type of 'A2' (line 1675)
    A2_568746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 30), 'A2')
    
    # Call to max(...): (line 1675)
    # Processing the call keyword arguments (line 1675)
    kwargs_568749 = {}
    # Getting the type of 'critical' (line 1675)
    critical_568747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 35), 'critical', False)
    # Obtaining the member 'max' of a type (line 1675)
    max_568748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 35), critical_568747, 'max')
    # Calling max(args, kwargs) (line 1675)
    max_call_result_568750 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 35), max_568748, *[], **kwargs_568749)
    
    # Applying the binary operator '>' (line 1675)
    result_gt_568751 = python_operator(stypy.reporting.localization.Localization(__file__, 1675, 30), '>', A2_568746, max_call_result_568750)
    
    # Applying the binary operator 'or' (line 1675)
    result_or_keyword_568752 = python_operator(stypy.reporting.localization.Localization(__file__, 1675, 7), 'or', result_lt_568745, result_gt_568751)
    
    # Testing the type of an if condition (line 1675)
    if_condition_568753 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1675, 4), result_or_keyword_568752)
    # Assigning a type to the variable 'if_condition_568753' (line 1675)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 4), 'if_condition_568753', if_condition_568753)
    # SSA begins for if statement (line 1675)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1676)
    # Processing the call arguments (line 1676)
    str_568756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 22), 'str', 'approximate p-value will be computed by extrapolation')
    # Processing the call keyword arguments (line 1676)
    kwargs_568757 = {}
    # Getting the type of 'warnings' (line 1676)
    warnings_568754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1676)
    warn_568755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 8), warnings_568754, 'warn')
    # Calling warn(args, kwargs) (line 1676)
    warn_call_result_568758 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 8), warn_568755, *[str_568756], **kwargs_568757)
    
    # SSA join for if statement (line 1675)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1677)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1678):
    
    # Assigning a Call to a Name (line 1678):
    
    # Call to exp(...): (line 1678)
    # Processing the call arguments (line 1678)
    
    # Call to polyval(...): (line 1678)
    # Processing the call arguments (line 1678)
    # Getting the type of 'pf' (line 1678)
    pf_568763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 32), 'pf', False)
    # Getting the type of 'A2' (line 1678)
    A2_568764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 36), 'A2', False)
    # Processing the call keyword arguments (line 1678)
    kwargs_568765 = {}
    # Getting the type of 'np' (line 1678)
    np_568761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 21), 'np', False)
    # Obtaining the member 'polyval' of a type (line 1678)
    polyval_568762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1678, 21), np_568761, 'polyval')
    # Calling polyval(args, kwargs) (line 1678)
    polyval_call_result_568766 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 21), polyval_568762, *[pf_568763, A2_568764], **kwargs_568765)
    
    # Processing the call keyword arguments (line 1678)
    kwargs_568767 = {}
    # Getting the type of 'math' (line 1678)
    math_568759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 12), 'math', False)
    # Obtaining the member 'exp' of a type (line 1678)
    exp_568760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1678, 12), math_568759, 'exp')
    # Calling exp(args, kwargs) (line 1678)
    exp_call_result_568768 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 12), exp_568760, *[polyval_call_result_568766], **kwargs_568767)
    
    # Assigning a type to the variable 'p' (line 1678)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 8), 'p', exp_call_result_568768)
    # SSA branch for the except part of a try statement (line 1677)
    # SSA branch for the except 'Tuple' branch of a try statement (line 1677)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 1680):
    
    # Assigning a Call to a Name (line 1680):
    
    # Call to float(...): (line 1680)
    # Processing the call arguments (line 1680)
    str_568770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 18), 'str', 'inf')
    # Processing the call keyword arguments (line 1680)
    kwargs_568771 = {}
    # Getting the type of 'float' (line 1680)
    float_568769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 12), 'float', False)
    # Calling float(args, kwargs) (line 1680)
    float_call_result_568772 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 12), float_568769, *[str_568770], **kwargs_568771)
    
    # Assigning a type to the variable 'p' (line 1680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 8), 'p', float_call_result_568772)
    # SSA join for try-except statement (line 1677)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to Anderson_ksampResult(...): (line 1681)
    # Processing the call arguments (line 1681)
    # Getting the type of 'A2' (line 1681)
    A2_568774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 32), 'A2', False)
    # Getting the type of 'critical' (line 1681)
    critical_568775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 36), 'critical', False)
    # Getting the type of 'p' (line 1681)
    p_568776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 46), 'p', False)
    # Processing the call keyword arguments (line 1681)
    kwargs_568777 = {}
    # Getting the type of 'Anderson_ksampResult' (line 1681)
    Anderson_ksampResult_568773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 11), 'Anderson_ksampResult', False)
    # Calling Anderson_ksampResult(args, kwargs) (line 1681)
    Anderson_ksampResult_call_result_568778 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 11), Anderson_ksampResult_568773, *[A2_568774, critical_568775, p_568776], **kwargs_568777)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 4), 'stypy_return_type', Anderson_ksampResult_call_result_568778)
    
    # ################# End of 'anderson_ksamp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'anderson_ksamp' in the type store
    # Getting the type of 'stypy_return_type' (line 1543)
    stypy_return_type_568779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_568779)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'anderson_ksamp'
    return stypy_return_type_568779

# Assigning a type to the variable 'anderson_ksamp' (line 1543)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 0), 'anderson_ksamp', anderson_ksamp)

# Assigning a Call to a Name (line 1684):

# Assigning a Call to a Name (line 1684):

# Call to namedtuple(...): (line 1684)
# Processing the call arguments (line 1684)
str_568781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, 26), 'str', 'AnsariResult')

# Obtaining an instance of the builtin type 'tuple' (line 1684)
tuple_568782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, 43), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1684)
# Adding element type (line 1684)
str_568783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, 43), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1684, 43), tuple_568782, str_568783)
# Adding element type (line 1684)
str_568784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, 56), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1684, 43), tuple_568782, str_568784)

# Processing the call keyword arguments (line 1684)
kwargs_568785 = {}
# Getting the type of 'namedtuple' (line 1684)
namedtuple_568780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 15), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1684)
namedtuple_call_result_568786 = invoke(stypy.reporting.localization.Localization(__file__, 1684, 15), namedtuple_568780, *[str_568781, tuple_568782], **kwargs_568785)

# Assigning a type to the variable 'AnsariResult' (line 1684)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1684, 0), 'AnsariResult', namedtuple_call_result_568786)

@norecursion
def ansari(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ansari'
    module_type_store = module_type_store.open_function_context('ansari', 1687, 0, False)
    
    # Passed parameters checking function
    ansari.stypy_localization = localization
    ansari.stypy_type_of_self = None
    ansari.stypy_type_store = module_type_store
    ansari.stypy_function_name = 'ansari'
    ansari.stypy_param_names_list = ['x', 'y']
    ansari.stypy_varargs_param_name = None
    ansari.stypy_kwargs_param_name = None
    ansari.stypy_call_defaults = defaults
    ansari.stypy_call_varargs = varargs
    ansari.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ansari', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ansari', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ansari(...)' code ##################

    str_568787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, (-1)), 'str', '\n    Perform the Ansari-Bradley test for equal scale parameters\n\n    The Ansari-Bradley test is a non-parametric test for the equality\n    of the scale parameter of the distributions from which two\n    samples were drawn.\n\n    Parameters\n    ----------\n    x, y : array_like\n        arrays of sample data\n\n    Returns\n    -------\n    statistic : float\n        The Ansari-Bradley test statistic\n    pvalue : float\n        The p-value of the hypothesis test\n\n    See Also\n    --------\n    fligner : A non-parametric test for the equality of k variances\n    mood : A non-parametric test for the equality of two scale parameters\n\n    Notes\n    -----\n    The p-value given is exact when the sample sizes are both less than\n    55 and there are no ties, otherwise a normal approximation for the\n    p-value is used.\n\n    References\n    ----------\n    .. [1] Sprent, Peter and N.C. Smeeton.  Applied nonparametric statistical\n           methods.  3rd ed. Chapman and Hall/CRC. 2001.  Section 5.8.2.\n\n    ')
    
    # Assigning a Tuple to a Tuple (line 1724):
    
    # Assigning a Call to a Name (line 1724):
    
    # Call to asarray(...): (line 1724)
    # Processing the call arguments (line 1724)
    # Getting the type of 'x' (line 1724)
    x_568789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 19), 'x', False)
    # Processing the call keyword arguments (line 1724)
    kwargs_568790 = {}
    # Getting the type of 'asarray' (line 1724)
    asarray_568788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 11), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1724)
    asarray_call_result_568791 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 11), asarray_568788, *[x_568789], **kwargs_568790)
    
    # Assigning a type to the variable 'tuple_assignment_566037' (line 1724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 4), 'tuple_assignment_566037', asarray_call_result_568791)
    
    # Assigning a Call to a Name (line 1724):
    
    # Call to asarray(...): (line 1724)
    # Processing the call arguments (line 1724)
    # Getting the type of 'y' (line 1724)
    y_568793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 31), 'y', False)
    # Processing the call keyword arguments (line 1724)
    kwargs_568794 = {}
    # Getting the type of 'asarray' (line 1724)
    asarray_568792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 23), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1724)
    asarray_call_result_568795 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 23), asarray_568792, *[y_568793], **kwargs_568794)
    
    # Assigning a type to the variable 'tuple_assignment_566038' (line 1724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 4), 'tuple_assignment_566038', asarray_call_result_568795)
    
    # Assigning a Name to a Name (line 1724):
    # Getting the type of 'tuple_assignment_566037' (line 1724)
    tuple_assignment_566037_568796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 4), 'tuple_assignment_566037')
    # Assigning a type to the variable 'x' (line 1724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 4), 'x', tuple_assignment_566037_568796)
    
    # Assigning a Name to a Name (line 1724):
    # Getting the type of 'tuple_assignment_566038' (line 1724)
    tuple_assignment_566038_568797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 4), 'tuple_assignment_566038')
    # Assigning a type to the variable 'y' (line 1724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 7), 'y', tuple_assignment_566038_568797)
    
    # Assigning a Call to a Name (line 1725):
    
    # Assigning a Call to a Name (line 1725):
    
    # Call to len(...): (line 1725)
    # Processing the call arguments (line 1725)
    # Getting the type of 'x' (line 1725)
    x_568799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 12), 'x', False)
    # Processing the call keyword arguments (line 1725)
    kwargs_568800 = {}
    # Getting the type of 'len' (line 1725)
    len_568798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 8), 'len', False)
    # Calling len(args, kwargs) (line 1725)
    len_call_result_568801 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 8), len_568798, *[x_568799], **kwargs_568800)
    
    # Assigning a type to the variable 'n' (line 1725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1725, 4), 'n', len_call_result_568801)
    
    # Assigning a Call to a Name (line 1726):
    
    # Assigning a Call to a Name (line 1726):
    
    # Call to len(...): (line 1726)
    # Processing the call arguments (line 1726)
    # Getting the type of 'y' (line 1726)
    y_568803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 12), 'y', False)
    # Processing the call keyword arguments (line 1726)
    kwargs_568804 = {}
    # Getting the type of 'len' (line 1726)
    len_568802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'len', False)
    # Calling len(args, kwargs) (line 1726)
    len_call_result_568805 = invoke(stypy.reporting.localization.Localization(__file__, 1726, 8), len_568802, *[y_568803], **kwargs_568804)
    
    # Assigning a type to the variable 'm' (line 1726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 4), 'm', len_call_result_568805)
    
    
    # Getting the type of 'm' (line 1727)
    m_568806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 7), 'm')
    int_568807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1727, 11), 'int')
    # Applying the binary operator '<' (line 1727)
    result_lt_568808 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 7), '<', m_568806, int_568807)
    
    # Testing the type of an if condition (line 1727)
    if_condition_568809 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1727, 4), result_lt_568808)
    # Assigning a type to the variable 'if_condition_568809' (line 1727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 4), 'if_condition_568809', if_condition_568809)
    # SSA begins for if statement (line 1727)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1728)
    # Processing the call arguments (line 1728)
    str_568811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 25), 'str', 'Not enough other observations.')
    # Processing the call keyword arguments (line 1728)
    kwargs_568812 = {}
    # Getting the type of 'ValueError' (line 1728)
    ValueError_568810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1728)
    ValueError_call_result_568813 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 14), ValueError_568810, *[str_568811], **kwargs_568812)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1728, 8), ValueError_call_result_568813, 'raise parameter', BaseException)
    # SSA join for if statement (line 1727)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1729)
    n_568814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 7), 'n')
    int_568815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1729, 11), 'int')
    # Applying the binary operator '<' (line 1729)
    result_lt_568816 = python_operator(stypy.reporting.localization.Localization(__file__, 1729, 7), '<', n_568814, int_568815)
    
    # Testing the type of an if condition (line 1729)
    if_condition_568817 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1729, 4), result_lt_568816)
    # Assigning a type to the variable 'if_condition_568817' (line 1729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1729, 4), 'if_condition_568817', if_condition_568817)
    # SSA begins for if statement (line 1729)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1730)
    # Processing the call arguments (line 1730)
    str_568819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1730, 25), 'str', 'Not enough test observations.')
    # Processing the call keyword arguments (line 1730)
    kwargs_568820 = {}
    # Getting the type of 'ValueError' (line 1730)
    ValueError_568818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1730)
    ValueError_call_result_568821 = invoke(stypy.reporting.localization.Localization(__file__, 1730, 14), ValueError_568818, *[str_568819], **kwargs_568820)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1730, 8), ValueError_call_result_568821, 'raise parameter', BaseException)
    # SSA join for if statement (line 1729)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1732):
    
    # Assigning a BinOp to a Name (line 1732):
    # Getting the type of 'm' (line 1732)
    m_568822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 8), 'm')
    # Getting the type of 'n' (line 1732)
    n_568823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 12), 'n')
    # Applying the binary operator '+' (line 1732)
    result_add_568824 = python_operator(stypy.reporting.localization.Localization(__file__, 1732, 8), '+', m_568822, n_568823)
    
    # Assigning a type to the variable 'N' (line 1732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 4), 'N', result_add_568824)
    
    # Assigning a Subscript to a Name (line 1733):
    
    # Assigning a Subscript to a Name (line 1733):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1733)
    tuple_568825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1733, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1733)
    # Adding element type (line 1733)
    # Getting the type of 'x' (line 1733)
    x_568826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 12), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1733, 12), tuple_568825, x_568826)
    # Adding element type (line 1733)
    # Getting the type of 'y' (line 1733)
    y_568827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 15), 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1733, 12), tuple_568825, y_568827)
    
    # Getting the type of 'r_' (line 1733)
    r__568828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 9), 'r_')
    # Obtaining the member '__getitem__' of a type (line 1733)
    getitem___568829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1733, 9), r__568828, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1733)
    subscript_call_result_568830 = invoke(stypy.reporting.localization.Localization(__file__, 1733, 9), getitem___568829, tuple_568825)
    
    # Assigning a type to the variable 'xy' (line 1733)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 4), 'xy', subscript_call_result_568830)
    
    # Assigning a Call to a Name (line 1734):
    
    # Assigning a Call to a Name (line 1734):
    
    # Call to rankdata(...): (line 1734)
    # Processing the call arguments (line 1734)
    # Getting the type of 'xy' (line 1734)
    xy_568833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 26), 'xy', False)
    # Processing the call keyword arguments (line 1734)
    kwargs_568834 = {}
    # Getting the type of 'stats' (line 1734)
    stats_568831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 11), 'stats', False)
    # Obtaining the member 'rankdata' of a type (line 1734)
    rankdata_568832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1734, 11), stats_568831, 'rankdata')
    # Calling rankdata(args, kwargs) (line 1734)
    rankdata_call_result_568835 = invoke(stypy.reporting.localization.Localization(__file__, 1734, 11), rankdata_568832, *[xy_568833], **kwargs_568834)
    
    # Assigning a type to the variable 'rank' (line 1734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 4), 'rank', rankdata_call_result_568835)
    
    # Assigning a Call to a Name (line 1735):
    
    # Assigning a Call to a Name (line 1735):
    
    # Call to amin(...): (line 1735)
    # Processing the call arguments (line 1735)
    
    # Call to array(...): (line 1735)
    # Processing the call arguments (line 1735)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1735)
    tuple_568838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1735)
    # Adding element type (line 1735)
    # Getting the type of 'rank' (line 1735)
    rank_568839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 26), 'rank', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 26), tuple_568838, rank_568839)
    # Adding element type (line 1735)
    # Getting the type of 'N' (line 1735)
    N_568840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 32), 'N', False)
    # Getting the type of 'rank' (line 1735)
    rank_568841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 36), 'rank', False)
    # Applying the binary operator '-' (line 1735)
    result_sub_568842 = python_operator(stypy.reporting.localization.Localization(__file__, 1735, 32), '-', N_568840, rank_568841)
    
    int_568843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 43), 'int')
    # Applying the binary operator '+' (line 1735)
    result_add_568844 = python_operator(stypy.reporting.localization.Localization(__file__, 1735, 41), '+', result_sub_568842, int_568843)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 26), tuple_568838, result_add_568844)
    
    # Processing the call keyword arguments (line 1735)
    kwargs_568845 = {}
    # Getting the type of 'array' (line 1735)
    array_568837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 19), 'array', False)
    # Calling array(args, kwargs) (line 1735)
    array_call_result_568846 = invoke(stypy.reporting.localization.Localization(__file__, 1735, 19), array_568837, *[tuple_568838], **kwargs_568845)
    
    int_568847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 48), 'int')
    # Processing the call keyword arguments (line 1735)
    kwargs_568848 = {}
    # Getting the type of 'amin' (line 1735)
    amin_568836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 14), 'amin', False)
    # Calling amin(args, kwargs) (line 1735)
    amin_call_result_568849 = invoke(stypy.reporting.localization.Localization(__file__, 1735, 14), amin_568836, *[array_call_result_568846, int_568847], **kwargs_568848)
    
    # Assigning a type to the variable 'symrank' (line 1735)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 4), 'symrank', amin_call_result_568849)
    
    # Assigning a Call to a Name (line 1736):
    
    # Assigning a Call to a Name (line 1736):
    
    # Call to sum(...): (line 1736)
    # Processing the call arguments (line 1736)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1736)
    n_568852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 25), 'n', False)
    slice_568853 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1736, 16), None, n_568852, None)
    # Getting the type of 'symrank' (line 1736)
    symrank_568854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 16), 'symrank', False)
    # Obtaining the member '__getitem__' of a type (line 1736)
    getitem___568855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 16), symrank_568854, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1736)
    subscript_call_result_568856 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 16), getitem___568855, slice_568853)
    
    # Processing the call keyword arguments (line 1736)
    int_568857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 34), 'int')
    keyword_568858 = int_568857
    kwargs_568859 = {'axis': keyword_568858}
    # Getting the type of 'np' (line 1736)
    np_568850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 9), 'np', False)
    # Obtaining the member 'sum' of a type (line 1736)
    sum_568851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 9), np_568850, 'sum')
    # Calling sum(args, kwargs) (line 1736)
    sum_call_result_568860 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 9), sum_568851, *[subscript_call_result_568856], **kwargs_568859)
    
    # Assigning a type to the variable 'AB' (line 1736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 4), 'AB', sum_call_result_568860)
    
    # Assigning a Call to a Name (line 1737):
    
    # Assigning a Call to a Name (line 1737):
    
    # Call to unique(...): (line 1737)
    # Processing the call arguments (line 1737)
    # Getting the type of 'xy' (line 1737)
    xy_568862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 17), 'xy', False)
    # Processing the call keyword arguments (line 1737)
    kwargs_568863 = {}
    # Getting the type of 'unique' (line 1737)
    unique_568861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 10), 'unique', False)
    # Calling unique(args, kwargs) (line 1737)
    unique_call_result_568864 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 10), unique_568861, *[xy_568862], **kwargs_568863)
    
    # Assigning a type to the variable 'uxy' (line 1737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 4), 'uxy', unique_call_result_568864)
    
    # Assigning a Compare to a Name (line 1738):
    
    # Assigning a Compare to a Name (line 1738):
    
    
    # Call to len(...): (line 1738)
    # Processing the call arguments (line 1738)
    # Getting the type of 'uxy' (line 1738)
    uxy_568866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 19), 'uxy', False)
    # Processing the call keyword arguments (line 1738)
    kwargs_568867 = {}
    # Getting the type of 'len' (line 1738)
    len_568865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 15), 'len', False)
    # Calling len(args, kwargs) (line 1738)
    len_call_result_568868 = invoke(stypy.reporting.localization.Localization(__file__, 1738, 15), len_568865, *[uxy_568866], **kwargs_568867)
    
    
    # Call to len(...): (line 1738)
    # Processing the call arguments (line 1738)
    # Getting the type of 'xy' (line 1738)
    xy_568870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 31), 'xy', False)
    # Processing the call keyword arguments (line 1738)
    kwargs_568871 = {}
    # Getting the type of 'len' (line 1738)
    len_568869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 27), 'len', False)
    # Calling len(args, kwargs) (line 1738)
    len_call_result_568872 = invoke(stypy.reporting.localization.Localization(__file__, 1738, 27), len_568869, *[xy_568870], **kwargs_568871)
    
    # Applying the binary operator '!=' (line 1738)
    result_ne_568873 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 15), '!=', len_call_result_568868, len_call_result_568872)
    
    # Assigning a type to the variable 'repeats' (line 1738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 4), 'repeats', result_ne_568873)
    
    # Assigning a BoolOp to a Name (line 1739):
    
    # Assigning a BoolOp to a Name (line 1739):
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm' (line 1739)
    m_568874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 14), 'm')
    int_568875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 18), 'int')
    # Applying the binary operator '<' (line 1739)
    result_lt_568876 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 14), '<', m_568874, int_568875)
    
    
    # Getting the type of 'n' (line 1739)
    n_568877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 27), 'n')
    int_568878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 31), 'int')
    # Applying the binary operator '<' (line 1739)
    result_lt_568879 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 27), '<', n_568877, int_568878)
    
    # Applying the binary operator 'and' (line 1739)
    result_and_keyword_568880 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 13), 'and', result_lt_568876, result_lt_568879)
    
    # Getting the type of 'repeats' (line 1739)
    repeats_568881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 43), 'repeats')
    # Applying the 'not' unary operator (line 1739)
    result_not__568882 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 39), 'not', repeats_568881)
    
    # Applying the binary operator 'and' (line 1739)
    result_and_keyword_568883 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 13), 'and', result_and_keyword_568880, result_not__568882)
    
    # Assigning a type to the variable 'exact' (line 1739)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1739, 4), 'exact', result_and_keyword_568883)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'repeats' (line 1740)
    repeats_568884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 7), 'repeats')
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm' (line 1740)
    m_568885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 20), 'm')
    int_568886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 24), 'int')
    # Applying the binary operator '<' (line 1740)
    result_lt_568887 = python_operator(stypy.reporting.localization.Localization(__file__, 1740, 20), '<', m_568885, int_568886)
    
    
    # Getting the type of 'n' (line 1740)
    n_568888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 30), 'n')
    int_568889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 34), 'int')
    # Applying the binary operator '<' (line 1740)
    result_lt_568890 = python_operator(stypy.reporting.localization.Localization(__file__, 1740, 30), '<', n_568888, int_568889)
    
    # Applying the binary operator 'or' (line 1740)
    result_or_keyword_568891 = python_operator(stypy.reporting.localization.Localization(__file__, 1740, 20), 'or', result_lt_568887, result_lt_568890)
    
    # Applying the binary operator 'and' (line 1740)
    result_and_keyword_568892 = python_operator(stypy.reporting.localization.Localization(__file__, 1740, 7), 'and', repeats_568884, result_or_keyword_568891)
    
    # Testing the type of an if condition (line 1740)
    if_condition_568893 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1740, 4), result_and_keyword_568892)
    # Assigning a type to the variable 'if_condition_568893' (line 1740)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 4), 'if_condition_568893', if_condition_568893)
    # SSA begins for if statement (line 1740)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1741)
    # Processing the call arguments (line 1741)
    str_568896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 22), 'str', 'Ties preclude use of exact statistic.')
    # Processing the call keyword arguments (line 1741)
    kwargs_568897 = {}
    # Getting the type of 'warnings' (line 1741)
    warnings_568894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1741)
    warn_568895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 8), warnings_568894, 'warn')
    # Calling warn(args, kwargs) (line 1741)
    warn_call_result_568898 = invoke(stypy.reporting.localization.Localization(__file__, 1741, 8), warn_568895, *[str_568896], **kwargs_568897)
    
    # SSA join for if statement (line 1740)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'exact' (line 1742)
    exact_568899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 7), 'exact')
    # Testing the type of an if condition (line 1742)
    if_condition_568900 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1742, 4), exact_568899)
    # Assigning a type to the variable 'if_condition_568900' (line 1742)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 4), 'if_condition_568900', if_condition_568900)
    # SSA begins for if statement (line 1742)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1743):
    
    # Assigning a Subscript to a Name (line 1743):
    
    # Obtaining the type of the subscript
    int_568901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 8), 'int')
    
    # Call to gscale(...): (line 1743)
    # Processing the call arguments (line 1743)
    # Getting the type of 'n' (line 1743)
    n_568904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 44), 'n', False)
    # Getting the type of 'm' (line 1743)
    m_568905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 47), 'm', False)
    # Processing the call keyword arguments (line 1743)
    kwargs_568906 = {}
    # Getting the type of 'statlib' (line 1743)
    statlib_568902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 29), 'statlib', False)
    # Obtaining the member 'gscale' of a type (line 1743)
    gscale_568903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 29), statlib_568902, 'gscale')
    # Calling gscale(args, kwargs) (line 1743)
    gscale_call_result_568907 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 29), gscale_568903, *[n_568904, m_568905], **kwargs_568906)
    
    # Obtaining the member '__getitem__' of a type (line 1743)
    getitem___568908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 8), gscale_call_result_568907, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1743)
    subscript_call_result_568909 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 8), getitem___568908, int_568901)
    
    # Assigning a type to the variable 'tuple_var_assignment_566039' (line 1743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'tuple_var_assignment_566039', subscript_call_result_568909)
    
    # Assigning a Subscript to a Name (line 1743):
    
    # Obtaining the type of the subscript
    int_568910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 8), 'int')
    
    # Call to gscale(...): (line 1743)
    # Processing the call arguments (line 1743)
    # Getting the type of 'n' (line 1743)
    n_568913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 44), 'n', False)
    # Getting the type of 'm' (line 1743)
    m_568914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 47), 'm', False)
    # Processing the call keyword arguments (line 1743)
    kwargs_568915 = {}
    # Getting the type of 'statlib' (line 1743)
    statlib_568911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 29), 'statlib', False)
    # Obtaining the member 'gscale' of a type (line 1743)
    gscale_568912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 29), statlib_568911, 'gscale')
    # Calling gscale(args, kwargs) (line 1743)
    gscale_call_result_568916 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 29), gscale_568912, *[n_568913, m_568914], **kwargs_568915)
    
    # Obtaining the member '__getitem__' of a type (line 1743)
    getitem___568917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 8), gscale_call_result_568916, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1743)
    subscript_call_result_568918 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 8), getitem___568917, int_568910)
    
    # Assigning a type to the variable 'tuple_var_assignment_566040' (line 1743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'tuple_var_assignment_566040', subscript_call_result_568918)
    
    # Assigning a Subscript to a Name (line 1743):
    
    # Obtaining the type of the subscript
    int_568919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 8), 'int')
    
    # Call to gscale(...): (line 1743)
    # Processing the call arguments (line 1743)
    # Getting the type of 'n' (line 1743)
    n_568922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 44), 'n', False)
    # Getting the type of 'm' (line 1743)
    m_568923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 47), 'm', False)
    # Processing the call keyword arguments (line 1743)
    kwargs_568924 = {}
    # Getting the type of 'statlib' (line 1743)
    statlib_568920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 29), 'statlib', False)
    # Obtaining the member 'gscale' of a type (line 1743)
    gscale_568921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 29), statlib_568920, 'gscale')
    # Calling gscale(args, kwargs) (line 1743)
    gscale_call_result_568925 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 29), gscale_568921, *[n_568922, m_568923], **kwargs_568924)
    
    # Obtaining the member '__getitem__' of a type (line 1743)
    getitem___568926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 8), gscale_call_result_568925, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1743)
    subscript_call_result_568927 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 8), getitem___568926, int_568919)
    
    # Assigning a type to the variable 'tuple_var_assignment_566041' (line 1743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'tuple_var_assignment_566041', subscript_call_result_568927)
    
    # Assigning a Name to a Name (line 1743):
    # Getting the type of 'tuple_var_assignment_566039' (line 1743)
    tuple_var_assignment_566039_568928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'tuple_var_assignment_566039')
    # Assigning a type to the variable 'astart' (line 1743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'astart', tuple_var_assignment_566039_568928)
    
    # Assigning a Name to a Name (line 1743):
    # Getting the type of 'tuple_var_assignment_566040' (line 1743)
    tuple_var_assignment_566040_568929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'tuple_var_assignment_566040')
    # Assigning a type to the variable 'a1' (line 1743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 16), 'a1', tuple_var_assignment_566040_568929)
    
    # Assigning a Name to a Name (line 1743):
    # Getting the type of 'tuple_var_assignment_566041' (line 1743)
    tuple_var_assignment_566041_568930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'tuple_var_assignment_566041')
    # Assigning a type to the variable 'ifault' (line 1743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 20), 'ifault', tuple_var_assignment_566041_568930)
    
    # Assigning a BinOp to a Name (line 1744):
    
    # Assigning a BinOp to a Name (line 1744):
    # Getting the type of 'AB' (line 1744)
    AB_568931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 14), 'AB')
    # Getting the type of 'astart' (line 1744)
    astart_568932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 19), 'astart')
    # Applying the binary operator '-' (line 1744)
    result_sub_568933 = python_operator(stypy.reporting.localization.Localization(__file__, 1744, 14), '-', AB_568931, astart_568932)
    
    # Assigning a type to the variable 'ind' (line 1744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 8), 'ind', result_sub_568933)
    
    # Assigning a Call to a Name (line 1745):
    
    # Assigning a Call to a Name (line 1745):
    
    # Call to sum(...): (line 1745)
    # Processing the call arguments (line 1745)
    # Getting the type of 'a1' (line 1745)
    a1_568936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 23), 'a1', False)
    # Processing the call keyword arguments (line 1745)
    int_568937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1745, 32), 'int')
    keyword_568938 = int_568937
    kwargs_568939 = {'axis': keyword_568938}
    # Getting the type of 'np' (line 1745)
    np_568934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 16), 'np', False)
    # Obtaining the member 'sum' of a type (line 1745)
    sum_568935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1745, 16), np_568934, 'sum')
    # Calling sum(args, kwargs) (line 1745)
    sum_call_result_568940 = invoke(stypy.reporting.localization.Localization(__file__, 1745, 16), sum_568935, *[a1_568936], **kwargs_568939)
    
    # Assigning a type to the variable 'total' (line 1745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1745, 8), 'total', sum_call_result_568940)
    
    
    # Getting the type of 'ind' (line 1746)
    ind_568941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 11), 'ind')
    
    # Call to len(...): (line 1746)
    # Processing the call arguments (line 1746)
    # Getting the type of 'a1' (line 1746)
    a1_568943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 21), 'a1', False)
    # Processing the call keyword arguments (line 1746)
    kwargs_568944 = {}
    # Getting the type of 'len' (line 1746)
    len_568942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 17), 'len', False)
    # Calling len(args, kwargs) (line 1746)
    len_call_result_568945 = invoke(stypy.reporting.localization.Localization(__file__, 1746, 17), len_568942, *[a1_568943], **kwargs_568944)
    
    float_568946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1746, 25), 'float')
    # Applying the binary operator 'div' (line 1746)
    result_div_568947 = python_operator(stypy.reporting.localization.Localization(__file__, 1746, 17), 'div', len_call_result_568945, float_568946)
    
    # Applying the binary operator '<' (line 1746)
    result_lt_568948 = python_operator(stypy.reporting.localization.Localization(__file__, 1746, 11), '<', ind_568941, result_div_568947)
    
    # Testing the type of an if condition (line 1746)
    if_condition_568949 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1746, 8), result_lt_568948)
    # Assigning a type to the variable 'if_condition_568949' (line 1746)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 8), 'if_condition_568949', if_condition_568949)
    # SSA begins for if statement (line 1746)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1747):
    
    # Assigning a Call to a Name (line 1747):
    
    # Call to int(...): (line 1747)
    # Processing the call arguments (line 1747)
    
    # Call to ceil(...): (line 1747)
    # Processing the call arguments (line 1747)
    # Getting the type of 'ind' (line 1747)
    ind_568952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 28), 'ind', False)
    # Processing the call keyword arguments (line 1747)
    kwargs_568953 = {}
    # Getting the type of 'ceil' (line 1747)
    ceil_568951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 23), 'ceil', False)
    # Calling ceil(args, kwargs) (line 1747)
    ceil_call_result_568954 = invoke(stypy.reporting.localization.Localization(__file__, 1747, 23), ceil_568951, *[ind_568952], **kwargs_568953)
    
    # Processing the call keyword arguments (line 1747)
    kwargs_568955 = {}
    # Getting the type of 'int' (line 1747)
    int_568950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 19), 'int', False)
    # Calling int(args, kwargs) (line 1747)
    int_call_result_568956 = invoke(stypy.reporting.localization.Localization(__file__, 1747, 19), int_568950, *[ceil_call_result_568954], **kwargs_568955)
    
    # Assigning a type to the variable 'cind' (line 1747)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1747, 12), 'cind', int_call_result_568956)
    
    
    # Getting the type of 'ind' (line 1748)
    ind_568957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 15), 'ind')
    # Getting the type of 'cind' (line 1748)
    cind_568958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 22), 'cind')
    # Applying the binary operator '==' (line 1748)
    result_eq_568959 = python_operator(stypy.reporting.localization.Localization(__file__, 1748, 15), '==', ind_568957, cind_568958)
    
    # Testing the type of an if condition (line 1748)
    if_condition_568960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1748, 12), result_eq_568959)
    # Assigning a type to the variable 'if_condition_568960' (line 1748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 12), 'if_condition_568960', if_condition_568960)
    # SSA begins for if statement (line 1748)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1749):
    
    # Assigning a BinOp to a Name (line 1749):
    float_568961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1749, 23), 'float')
    
    # Call to sum(...): (line 1749)
    # Processing the call arguments (line 1749)
    
    # Obtaining the type of the subscript
    # Getting the type of 'cind' (line 1749)
    cind_568964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 40), 'cind', False)
    int_568965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1749, 45), 'int')
    # Applying the binary operator '+' (line 1749)
    result_add_568966 = python_operator(stypy.reporting.localization.Localization(__file__, 1749, 40), '+', cind_568964, int_568965)
    
    slice_568967 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1749, 36), None, result_add_568966, None)
    # Getting the type of 'a1' (line 1749)
    a1_568968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 36), 'a1', False)
    # Obtaining the member '__getitem__' of a type (line 1749)
    getitem___568969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 36), a1_568968, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1749)
    subscript_call_result_568970 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 36), getitem___568969, slice_568967)
    
    # Processing the call keyword arguments (line 1749)
    int_568971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1749, 54), 'int')
    keyword_568972 = int_568971
    kwargs_568973 = {'axis': keyword_568972}
    # Getting the type of 'np' (line 1749)
    np_568962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 29), 'np', False)
    # Obtaining the member 'sum' of a type (line 1749)
    sum_568963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 29), np_568962, 'sum')
    # Calling sum(args, kwargs) (line 1749)
    sum_call_result_568974 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 29), sum_568963, *[subscript_call_result_568970], **kwargs_568973)
    
    # Applying the binary operator '*' (line 1749)
    result_mul_568975 = python_operator(stypy.reporting.localization.Localization(__file__, 1749, 23), '*', float_568961, sum_call_result_568974)
    
    # Getting the type of 'total' (line 1749)
    total_568976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 59), 'total')
    # Applying the binary operator 'div' (line 1749)
    result_div_568977 = python_operator(stypy.reporting.localization.Localization(__file__, 1749, 57), 'div', result_mul_568975, total_568976)
    
    # Assigning a type to the variable 'pval' (line 1749)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 16), 'pval', result_div_568977)
    # SSA branch for the else part of an if statement (line 1748)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1751):
    
    # Assigning a BinOp to a Name (line 1751):
    float_568978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1751, 23), 'float')
    
    # Call to sum(...): (line 1751)
    # Processing the call arguments (line 1751)
    
    # Obtaining the type of the subscript
    # Getting the type of 'cind' (line 1751)
    cind_568981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 40), 'cind', False)
    slice_568982 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1751, 36), None, cind_568981, None)
    # Getting the type of 'a1' (line 1751)
    a1_568983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 36), 'a1', False)
    # Obtaining the member '__getitem__' of a type (line 1751)
    getitem___568984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1751, 36), a1_568983, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1751)
    subscript_call_result_568985 = invoke(stypy.reporting.localization.Localization(__file__, 1751, 36), getitem___568984, slice_568982)
    
    # Processing the call keyword arguments (line 1751)
    int_568986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1751, 52), 'int')
    keyword_568987 = int_568986
    kwargs_568988 = {'axis': keyword_568987}
    # Getting the type of 'np' (line 1751)
    np_568979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 29), 'np', False)
    # Obtaining the member 'sum' of a type (line 1751)
    sum_568980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1751, 29), np_568979, 'sum')
    # Calling sum(args, kwargs) (line 1751)
    sum_call_result_568989 = invoke(stypy.reporting.localization.Localization(__file__, 1751, 29), sum_568980, *[subscript_call_result_568985], **kwargs_568988)
    
    # Applying the binary operator '*' (line 1751)
    result_mul_568990 = python_operator(stypy.reporting.localization.Localization(__file__, 1751, 23), '*', float_568978, sum_call_result_568989)
    
    # Getting the type of 'total' (line 1751)
    total_568991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 57), 'total')
    # Applying the binary operator 'div' (line 1751)
    result_div_568992 = python_operator(stypy.reporting.localization.Localization(__file__, 1751, 55), 'div', result_mul_568990, total_568991)
    
    # Assigning a type to the variable 'pval' (line 1751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1751, 16), 'pval', result_div_568992)
    # SSA join for if statement (line 1748)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1746)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1753):
    
    # Assigning a Call to a Name (line 1753):
    
    # Call to int(...): (line 1753)
    # Processing the call arguments (line 1753)
    
    # Call to floor(...): (line 1753)
    # Processing the call arguments (line 1753)
    # Getting the type of 'ind' (line 1753)
    ind_568995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 29), 'ind', False)
    # Processing the call keyword arguments (line 1753)
    kwargs_568996 = {}
    # Getting the type of 'floor' (line 1753)
    floor_568994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 23), 'floor', False)
    # Calling floor(args, kwargs) (line 1753)
    floor_call_result_568997 = invoke(stypy.reporting.localization.Localization(__file__, 1753, 23), floor_568994, *[ind_568995], **kwargs_568996)
    
    # Processing the call keyword arguments (line 1753)
    kwargs_568998 = {}
    # Getting the type of 'int' (line 1753)
    int_568993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 19), 'int', False)
    # Calling int(args, kwargs) (line 1753)
    int_call_result_568999 = invoke(stypy.reporting.localization.Localization(__file__, 1753, 19), int_568993, *[floor_call_result_568997], **kwargs_568998)
    
    # Assigning a type to the variable 'find' (line 1753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1753, 12), 'find', int_call_result_568999)
    
    
    # Getting the type of 'ind' (line 1754)
    ind_569000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 15), 'ind')
    
    # Call to floor(...): (line 1754)
    # Processing the call arguments (line 1754)
    # Getting the type of 'ind' (line 1754)
    ind_569002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 28), 'ind', False)
    # Processing the call keyword arguments (line 1754)
    kwargs_569003 = {}
    # Getting the type of 'floor' (line 1754)
    floor_569001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 22), 'floor', False)
    # Calling floor(args, kwargs) (line 1754)
    floor_call_result_569004 = invoke(stypy.reporting.localization.Localization(__file__, 1754, 22), floor_569001, *[ind_569002], **kwargs_569003)
    
    # Applying the binary operator '==' (line 1754)
    result_eq_569005 = python_operator(stypy.reporting.localization.Localization(__file__, 1754, 15), '==', ind_569000, floor_call_result_569004)
    
    # Testing the type of an if condition (line 1754)
    if_condition_569006 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1754, 12), result_eq_569005)
    # Assigning a type to the variable 'if_condition_569006' (line 1754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 12), 'if_condition_569006', if_condition_569006)
    # SSA begins for if statement (line 1754)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1755):
    
    # Assigning a BinOp to a Name (line 1755):
    float_569007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1755, 23), 'float')
    
    # Call to sum(...): (line 1755)
    # Processing the call arguments (line 1755)
    
    # Obtaining the type of the subscript
    # Getting the type of 'find' (line 1755)
    find_569010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 39), 'find', False)
    slice_569011 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1755, 36), find_569010, None, None)
    # Getting the type of 'a1' (line 1755)
    a1_569012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 36), 'a1', False)
    # Obtaining the member '__getitem__' of a type (line 1755)
    getitem___569013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1755, 36), a1_569012, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1755)
    subscript_call_result_569014 = invoke(stypy.reporting.localization.Localization(__file__, 1755, 36), getitem___569013, slice_569011)
    
    # Processing the call keyword arguments (line 1755)
    int_569015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1755, 52), 'int')
    keyword_569016 = int_569015
    kwargs_569017 = {'axis': keyword_569016}
    # Getting the type of 'np' (line 1755)
    np_569008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 29), 'np', False)
    # Obtaining the member 'sum' of a type (line 1755)
    sum_569009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1755, 29), np_569008, 'sum')
    # Calling sum(args, kwargs) (line 1755)
    sum_call_result_569018 = invoke(stypy.reporting.localization.Localization(__file__, 1755, 29), sum_569009, *[subscript_call_result_569014], **kwargs_569017)
    
    # Applying the binary operator '*' (line 1755)
    result_mul_569019 = python_operator(stypy.reporting.localization.Localization(__file__, 1755, 23), '*', float_569007, sum_call_result_569018)
    
    # Getting the type of 'total' (line 1755)
    total_569020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 57), 'total')
    # Applying the binary operator 'div' (line 1755)
    result_div_569021 = python_operator(stypy.reporting.localization.Localization(__file__, 1755, 55), 'div', result_mul_569019, total_569020)
    
    # Assigning a type to the variable 'pval' (line 1755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1755, 16), 'pval', result_div_569021)
    # SSA branch for the else part of an if statement (line 1754)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1757):
    
    # Assigning a BinOp to a Name (line 1757):
    float_569022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 23), 'float')
    
    # Call to sum(...): (line 1757)
    # Processing the call arguments (line 1757)
    
    # Obtaining the type of the subscript
    # Getting the type of 'find' (line 1757)
    find_569025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 39), 'find', False)
    int_569026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 44), 'int')
    # Applying the binary operator '+' (line 1757)
    result_add_569027 = python_operator(stypy.reporting.localization.Localization(__file__, 1757, 39), '+', find_569025, int_569026)
    
    slice_569028 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1757, 36), result_add_569027, None, None)
    # Getting the type of 'a1' (line 1757)
    a1_569029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 36), 'a1', False)
    # Obtaining the member '__getitem__' of a type (line 1757)
    getitem___569030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1757, 36), a1_569029, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1757)
    subscript_call_result_569031 = invoke(stypy.reporting.localization.Localization(__file__, 1757, 36), getitem___569030, slice_569028)
    
    # Processing the call keyword arguments (line 1757)
    int_569032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 54), 'int')
    keyword_569033 = int_569032
    kwargs_569034 = {'axis': keyword_569033}
    # Getting the type of 'np' (line 1757)
    np_569023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 29), 'np', False)
    # Obtaining the member 'sum' of a type (line 1757)
    sum_569024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1757, 29), np_569023, 'sum')
    # Calling sum(args, kwargs) (line 1757)
    sum_call_result_569035 = invoke(stypy.reporting.localization.Localization(__file__, 1757, 29), sum_569024, *[subscript_call_result_569031], **kwargs_569034)
    
    # Applying the binary operator '*' (line 1757)
    result_mul_569036 = python_operator(stypy.reporting.localization.Localization(__file__, 1757, 23), '*', float_569022, sum_call_result_569035)
    
    # Getting the type of 'total' (line 1757)
    total_569037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 59), 'total')
    # Applying the binary operator 'div' (line 1757)
    result_div_569038 = python_operator(stypy.reporting.localization.Localization(__file__, 1757, 57), 'div', result_mul_569036, total_569037)
    
    # Assigning a type to the variable 'pval' (line 1757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1757, 16), 'pval', result_div_569038)
    # SSA join for if statement (line 1754)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1746)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to AnsariResult(...): (line 1758)
    # Processing the call arguments (line 1758)
    # Getting the type of 'AB' (line 1758)
    AB_569040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 28), 'AB', False)
    
    # Call to min(...): (line 1758)
    # Processing the call arguments (line 1758)
    float_569042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1758, 36), 'float')
    # Getting the type of 'pval' (line 1758)
    pval_569043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 41), 'pval', False)
    # Processing the call keyword arguments (line 1758)
    kwargs_569044 = {}
    # Getting the type of 'min' (line 1758)
    min_569041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 32), 'min', False)
    # Calling min(args, kwargs) (line 1758)
    min_call_result_569045 = invoke(stypy.reporting.localization.Localization(__file__, 1758, 32), min_569041, *[float_569042, pval_569043], **kwargs_569044)
    
    # Processing the call keyword arguments (line 1758)
    kwargs_569046 = {}
    # Getting the type of 'AnsariResult' (line 1758)
    AnsariResult_569039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 15), 'AnsariResult', False)
    # Calling AnsariResult(args, kwargs) (line 1758)
    AnsariResult_call_result_569047 = invoke(stypy.reporting.localization.Localization(__file__, 1758, 15), AnsariResult_569039, *[AB_569040, min_call_result_569045], **kwargs_569046)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1758, 8), 'stypy_return_type', AnsariResult_call_result_569047)
    # SSA join for if statement (line 1742)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'N' (line 1761)
    N_569048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 7), 'N')
    int_569049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, 11), 'int')
    # Applying the binary operator '%' (line 1761)
    result_mod_569050 = python_operator(stypy.reporting.localization.Localization(__file__, 1761, 7), '%', N_569048, int_569049)
    
    # Testing the type of an if condition (line 1761)
    if_condition_569051 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1761, 4), result_mod_569050)
    # Assigning a type to the variable 'if_condition_569051' (line 1761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 4), 'if_condition_569051', if_condition_569051)
    # SSA begins for if statement (line 1761)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1762):
    
    # Assigning a BinOp to a Name (line 1762):
    # Getting the type of 'n' (line 1762)
    n_569052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 15), 'n')
    # Getting the type of 'N' (line 1762)
    N_569053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 20), 'N')
    float_569054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 22), 'float')
    # Applying the binary operator '+' (line 1762)
    result_add_569055 = python_operator(stypy.reporting.localization.Localization(__file__, 1762, 20), '+', N_569053, float_569054)
    
    int_569056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 28), 'int')
    # Applying the binary operator '**' (line 1762)
    result_pow_569057 = python_operator(stypy.reporting.localization.Localization(__file__, 1762, 19), '**', result_add_569055, int_569056)
    
    # Applying the binary operator '*' (line 1762)
    result_mul_569058 = python_operator(stypy.reporting.localization.Localization(__file__, 1762, 15), '*', n_569052, result_pow_569057)
    
    float_569059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 32), 'float')
    # Applying the binary operator 'div' (line 1762)
    result_div_569060 = python_operator(stypy.reporting.localization.Localization(__file__, 1762, 30), 'div', result_mul_569058, float_569059)
    
    # Getting the type of 'N' (line 1762)
    N_569061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 38), 'N')
    # Applying the binary operator 'div' (line 1762)
    result_div_569062 = python_operator(stypy.reporting.localization.Localization(__file__, 1762, 36), 'div', result_div_569060, N_569061)
    
    # Assigning a type to the variable 'mnAB' (line 1762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'mnAB', result_div_569062)
    
    # Assigning a BinOp to a Name (line 1763):
    
    # Assigning a BinOp to a Name (line 1763):
    # Getting the type of 'n' (line 1763)
    n_569063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 16), 'n')
    # Getting the type of 'm' (line 1763)
    m_569064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 20), 'm')
    # Applying the binary operator '*' (line 1763)
    result_mul_569065 = python_operator(stypy.reporting.localization.Localization(__file__, 1763, 16), '*', n_569063, m_569064)
    
    # Getting the type of 'N' (line 1763)
    N_569066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 25), 'N')
    float_569067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 27), 'float')
    # Applying the binary operator '+' (line 1763)
    result_add_569068 = python_operator(stypy.reporting.localization.Localization(__file__, 1763, 25), '+', N_569066, float_569067)
    
    # Applying the binary operator '*' (line 1763)
    result_mul_569069 = python_operator(stypy.reporting.localization.Localization(__file__, 1763, 22), '*', result_mul_569065, result_add_569068)
    
    int_569070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 35), 'int')
    # Getting the type of 'N' (line 1763)
    N_569071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 37), 'N')
    int_569072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 40), 'int')
    # Applying the binary operator '**' (line 1763)
    result_pow_569073 = python_operator(stypy.reporting.localization.Localization(__file__, 1763, 37), '**', N_569071, int_569072)
    
    # Applying the binary operator '+' (line 1763)
    result_add_569074 = python_operator(stypy.reporting.localization.Localization(__file__, 1763, 35), '+', int_569070, result_pow_569073)
    
    # Applying the binary operator '*' (line 1763)
    result_mul_569075 = python_operator(stypy.reporting.localization.Localization(__file__, 1763, 32), '*', result_mul_569069, result_add_569074)
    
    float_569076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 46), 'float')
    # Getting the type of 'N' (line 1763)
    N_569077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 53), 'N')
    int_569078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 56), 'int')
    # Applying the binary operator '**' (line 1763)
    result_pow_569079 = python_operator(stypy.reporting.localization.Localization(__file__, 1763, 53), '**', N_569077, int_569078)
    
    # Applying the binary operator '*' (line 1763)
    result_mul_569080 = python_operator(stypy.reporting.localization.Localization(__file__, 1763, 46), '*', float_569076, result_pow_569079)
    
    # Applying the binary operator 'div' (line 1763)
    result_div_569081 = python_operator(stypy.reporting.localization.Localization(__file__, 1763, 43), 'div', result_mul_569075, result_mul_569080)
    
    # Assigning a type to the variable 'varAB' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 8), 'varAB', result_div_569081)
    # SSA branch for the else part of an if statement (line 1761)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1765):
    
    # Assigning a BinOp to a Name (line 1765):
    # Getting the type of 'n' (line 1765)
    n_569082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 15), 'n')
    # Getting the type of 'N' (line 1765)
    N_569083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 20), 'N')
    float_569084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1765, 22), 'float')
    # Applying the binary operator '+' (line 1765)
    result_add_569085 = python_operator(stypy.reporting.localization.Localization(__file__, 1765, 20), '+', N_569083, float_569084)
    
    # Applying the binary operator '*' (line 1765)
    result_mul_569086 = python_operator(stypy.reporting.localization.Localization(__file__, 1765, 15), '*', n_569082, result_add_569085)
    
    float_569087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1765, 29), 'float')
    # Applying the binary operator 'div' (line 1765)
    result_div_569088 = python_operator(stypy.reporting.localization.Localization(__file__, 1765, 27), 'div', result_mul_569086, float_569087)
    
    # Assigning a type to the variable 'mnAB' (line 1765)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1765, 8), 'mnAB', result_div_569088)
    
    # Assigning a BinOp to a Name (line 1766):
    
    # Assigning a BinOp to a Name (line 1766):
    # Getting the type of 'm' (line 1766)
    m_569089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 16), 'm')
    # Getting the type of 'n' (line 1766)
    n_569090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 20), 'n')
    # Applying the binary operator '*' (line 1766)
    result_mul_569091 = python_operator(stypy.reporting.localization.Localization(__file__, 1766, 16), '*', m_569089, n_569090)
    
    # Getting the type of 'N' (line 1766)
    N_569092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 25), 'N')
    int_569093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 27), 'int')
    # Applying the binary operator '+' (line 1766)
    result_add_569094 = python_operator(stypy.reporting.localization.Localization(__file__, 1766, 25), '+', N_569092, int_569093)
    
    # Applying the binary operator '*' (line 1766)
    result_mul_569095 = python_operator(stypy.reporting.localization.Localization(__file__, 1766, 22), '*', result_mul_569091, result_add_569094)
    
    # Getting the type of 'N' (line 1766)
    N_569096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 33), 'N')
    float_569097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 35), 'float')
    # Applying the binary operator '-' (line 1766)
    result_sub_569098 = python_operator(stypy.reporting.localization.Localization(__file__, 1766, 33), '-', N_569096, float_569097)
    
    # Applying the binary operator '*' (line 1766)
    result_mul_569099 = python_operator(stypy.reporting.localization.Localization(__file__, 1766, 30), '*', result_mul_569095, result_sub_569098)
    
    int_569100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 42), 'int')
    # Applying the binary operator 'div' (line 1766)
    result_div_569101 = python_operator(stypy.reporting.localization.Localization(__file__, 1766, 40), 'div', result_mul_569099, int_569100)
    
    # Getting the type of 'N' (line 1766)
    N_569102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 48), 'N')
    float_569103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 50), 'float')
    # Applying the binary operator '-' (line 1766)
    result_sub_569104 = python_operator(stypy.reporting.localization.Localization(__file__, 1766, 48), '-', N_569102, float_569103)
    
    # Applying the binary operator 'div' (line 1766)
    result_div_569105 = python_operator(stypy.reporting.localization.Localization(__file__, 1766, 45), 'div', result_div_569101, result_sub_569104)
    
    # Assigning a type to the variable 'varAB' (line 1766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 8), 'varAB', result_div_569105)
    # SSA join for if statement (line 1761)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'repeats' (line 1767)
    repeats_569106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 7), 'repeats')
    # Testing the type of an if condition (line 1767)
    if_condition_569107 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1767, 4), repeats_569106)
    # Assigning a type to the variable 'if_condition_569107' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'if_condition_569107', if_condition_569107)
    # SSA begins for if statement (line 1767)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1769):
    
    # Assigning a Call to a Name (line 1769):
    
    # Call to sum(...): (line 1769)
    # Processing the call arguments (line 1769)
    # Getting the type of 'symrank' (line 1769)
    symrank_569110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 21), 'symrank', False)
    int_569111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1769, 30), 'int')
    # Applying the binary operator '**' (line 1769)
    result_pow_569112 = python_operator(stypy.reporting.localization.Localization(__file__, 1769, 21), '**', symrank_569110, int_569111)
    
    # Processing the call keyword arguments (line 1769)
    int_569113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1769, 38), 'int')
    keyword_569114 = int_569113
    kwargs_569115 = {'axis': keyword_569114}
    # Getting the type of 'np' (line 1769)
    np_569108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 14), 'np', False)
    # Obtaining the member 'sum' of a type (line 1769)
    sum_569109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1769, 14), np_569108, 'sum')
    # Calling sum(args, kwargs) (line 1769)
    sum_call_result_569116 = invoke(stypy.reporting.localization.Localization(__file__, 1769, 14), sum_569109, *[result_pow_569112], **kwargs_569115)
    
    # Assigning a type to the variable 'fac' (line 1769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1769, 8), 'fac', sum_call_result_569116)
    
    # Getting the type of 'N' (line 1770)
    N_569117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 11), 'N')
    int_569118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1770, 15), 'int')
    # Applying the binary operator '%' (line 1770)
    result_mod_569119 = python_operator(stypy.reporting.localization.Localization(__file__, 1770, 11), '%', N_569117, int_569118)
    
    # Testing the type of an if condition (line 1770)
    if_condition_569120 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1770, 8), result_mod_569119)
    # Assigning a type to the variable 'if_condition_569120' (line 1770)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 8), 'if_condition_569120', if_condition_569120)
    # SSA begins for if statement (line 1770)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1771):
    
    # Assigning a BinOp to a Name (line 1771):
    # Getting the type of 'm' (line 1771)
    m_569121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 20), 'm')
    # Getting the type of 'n' (line 1771)
    n_569122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 24), 'n')
    # Applying the binary operator '*' (line 1771)
    result_mul_569123 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 20), '*', m_569121, n_569122)
    
    int_569124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1771, 29), 'int')
    # Getting the type of 'N' (line 1771)
    N_569125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 32), 'N')
    # Applying the binary operator '*' (line 1771)
    result_mul_569126 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 29), '*', int_569124, N_569125)
    
    # Getting the type of 'fac' (line 1771)
    fac_569127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 34), 'fac')
    # Applying the binary operator '*' (line 1771)
    result_mul_569128 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 33), '*', result_mul_569126, fac_569127)
    
    # Getting the type of 'N' (line 1771)
    N_569129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 41), 'N')
    int_569130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1771, 43), 'int')
    # Applying the binary operator '+' (line 1771)
    result_add_569131 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 41), '+', N_569129, int_569130)
    
    int_569132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1771, 47), 'int')
    # Applying the binary operator '**' (line 1771)
    result_pow_569133 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 40), '**', result_add_569131, int_569132)
    
    # Applying the binary operator '-' (line 1771)
    result_sub_569134 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 29), '-', result_mul_569128, result_pow_569133)
    
    # Applying the binary operator '*' (line 1771)
    result_mul_569135 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 26), '*', result_mul_569123, result_sub_569134)
    
    float_569136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1771, 53), 'float')
    # Getting the type of 'N' (line 1771)
    N_569137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 60), 'N')
    int_569138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1771, 63), 'int')
    # Applying the binary operator '**' (line 1771)
    result_pow_569139 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 60), '**', N_569137, int_569138)
    
    # Applying the binary operator '*' (line 1771)
    result_mul_569140 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 53), '*', float_569136, result_pow_569139)
    
    # Getting the type of 'N' (line 1771)
    N_569141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 68), 'N')
    int_569142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1771, 70), 'int')
    # Applying the binary operator '-' (line 1771)
    result_sub_569143 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 68), '-', N_569141, int_569142)
    
    # Applying the binary operator '*' (line 1771)
    result_mul_569144 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 65), '*', result_mul_569140, result_sub_569143)
    
    # Applying the binary operator 'div' (line 1771)
    result_div_569145 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 50), 'div', result_mul_569135, result_mul_569144)
    
    # Assigning a type to the variable 'varAB' (line 1771)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 12), 'varAB', result_div_569145)
    # SSA branch for the else part of an if statement (line 1770)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1773):
    
    # Assigning a BinOp to a Name (line 1773):
    # Getting the type of 'm' (line 1773)
    m_569146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 20), 'm')
    # Getting the type of 'n' (line 1773)
    n_569147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 24), 'n')
    # Applying the binary operator '*' (line 1773)
    result_mul_569148 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 20), '*', m_569146, n_569147)
    
    int_569149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1773, 29), 'int')
    # Getting the type of 'fac' (line 1773)
    fac_569150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 32), 'fac')
    # Applying the binary operator '*' (line 1773)
    result_mul_569151 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 29), '*', int_569149, fac_569150)
    
    # Getting the type of 'N' (line 1773)
    N_569152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 38), 'N')
    # Getting the type of 'N' (line 1773)
    N_569153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 41), 'N')
    int_569154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1773, 43), 'int')
    # Applying the binary operator '+' (line 1773)
    result_add_569155 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 41), '+', N_569153, int_569154)
    
    int_569156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1773, 47), 'int')
    # Applying the binary operator '**' (line 1773)
    result_pow_569157 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 40), '**', result_add_569155, int_569156)
    
    # Applying the binary operator '*' (line 1773)
    result_mul_569158 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 38), '*', N_569152, result_pow_569157)
    
    # Applying the binary operator '-' (line 1773)
    result_sub_569159 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 29), '-', result_mul_569151, result_mul_569158)
    
    # Applying the binary operator '*' (line 1773)
    result_mul_569160 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 26), '*', result_mul_569148, result_sub_569159)
    
    float_569161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1773, 53), 'float')
    # Getting the type of 'N' (line 1773)
    N_569162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 60), 'N')
    # Applying the binary operator '*' (line 1773)
    result_mul_569163 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 53), '*', float_569161, N_569162)
    
    # Getting the type of 'N' (line 1773)
    N_569164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 65), 'N')
    int_569165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1773, 67), 'int')
    # Applying the binary operator '-' (line 1773)
    result_sub_569166 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 65), '-', N_569164, int_569165)
    
    # Applying the binary operator '*' (line 1773)
    result_mul_569167 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 62), '*', result_mul_569163, result_sub_569166)
    
    # Applying the binary operator 'div' (line 1773)
    result_div_569168 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 50), 'div', result_mul_569160, result_mul_569167)
    
    # Assigning a type to the variable 'varAB' (line 1773)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1773, 12), 'varAB', result_div_569168)
    # SSA join for if statement (line 1770)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1767)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1775):
    
    # Assigning a BinOp to a Name (line 1775):
    # Getting the type of 'AB' (line 1775)
    AB_569169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 9), 'AB')
    # Getting the type of 'mnAB' (line 1775)
    mnAB_569170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 14), 'mnAB')
    # Applying the binary operator '-' (line 1775)
    result_sub_569171 = python_operator(stypy.reporting.localization.Localization(__file__, 1775, 9), '-', AB_569169, mnAB_569170)
    
    
    # Call to sqrt(...): (line 1775)
    # Processing the call arguments (line 1775)
    # Getting the type of 'varAB' (line 1775)
    varAB_569173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 27), 'varAB', False)
    # Processing the call keyword arguments (line 1775)
    kwargs_569174 = {}
    # Getting the type of 'sqrt' (line 1775)
    sqrt_569172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 22), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1775)
    sqrt_call_result_569175 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 22), sqrt_569172, *[varAB_569173], **kwargs_569174)
    
    # Applying the binary operator 'div' (line 1775)
    result_div_569176 = python_operator(stypy.reporting.localization.Localization(__file__, 1775, 8), 'div', result_sub_569171, sqrt_call_result_569175)
    
    # Assigning a type to the variable 'z' (line 1775)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 4), 'z', result_div_569176)
    
    # Assigning a BinOp to a Name (line 1776):
    
    # Assigning a BinOp to a Name (line 1776):
    
    # Call to sf(...): (line 1776)
    # Processing the call arguments (line 1776)
    
    # Call to abs(...): (line 1776)
    # Processing the call arguments (line 1776)
    # Getting the type of 'z' (line 1776)
    z_569181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 37), 'z', False)
    # Processing the call keyword arguments (line 1776)
    kwargs_569182 = {}
    # Getting the type of 'abs' (line 1776)
    abs_569180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 33), 'abs', False)
    # Calling abs(args, kwargs) (line 1776)
    abs_call_result_569183 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 33), abs_569180, *[z_569181], **kwargs_569182)
    
    # Processing the call keyword arguments (line 1776)
    kwargs_569184 = {}
    # Getting the type of 'distributions' (line 1776)
    distributions_569177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 11), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 1776)
    norm_569178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 11), distributions_569177, 'norm')
    # Obtaining the member 'sf' of a type (line 1776)
    sf_569179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 11), norm_569178, 'sf')
    # Calling sf(args, kwargs) (line 1776)
    sf_call_result_569185 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 11), sf_569179, *[abs_call_result_569183], **kwargs_569184)
    
    float_569186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1776, 43), 'float')
    # Applying the binary operator '*' (line 1776)
    result_mul_569187 = python_operator(stypy.reporting.localization.Localization(__file__, 1776, 11), '*', sf_call_result_569185, float_569186)
    
    # Assigning a type to the variable 'pval' (line 1776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1776, 4), 'pval', result_mul_569187)
    
    # Call to AnsariResult(...): (line 1777)
    # Processing the call arguments (line 1777)
    # Getting the type of 'AB' (line 1777)
    AB_569189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 24), 'AB', False)
    # Getting the type of 'pval' (line 1777)
    pval_569190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 28), 'pval', False)
    # Processing the call keyword arguments (line 1777)
    kwargs_569191 = {}
    # Getting the type of 'AnsariResult' (line 1777)
    AnsariResult_569188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 11), 'AnsariResult', False)
    # Calling AnsariResult(args, kwargs) (line 1777)
    AnsariResult_call_result_569192 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 11), AnsariResult_569188, *[AB_569189, pval_569190], **kwargs_569191)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1777, 4), 'stypy_return_type', AnsariResult_call_result_569192)
    
    # ################# End of 'ansari(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ansari' in the type store
    # Getting the type of 'stypy_return_type' (line 1687)
    stypy_return_type_569193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_569193)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ansari'
    return stypy_return_type_569193

# Assigning a type to the variable 'ansari' (line 1687)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 0), 'ansari', ansari)

# Assigning a Call to a Name (line 1780):

# Assigning a Call to a Name (line 1780):

# Call to namedtuple(...): (line 1780)
# Processing the call arguments (line 1780)
str_569195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1780, 28), 'str', 'BartlettResult')

# Obtaining an instance of the builtin type 'tuple' (line 1780)
tuple_569196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1780, 47), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1780)
# Adding element type (line 1780)
str_569197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1780, 47), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1780, 47), tuple_569196, str_569197)
# Adding element type (line 1780)
str_569198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1780, 60), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1780, 47), tuple_569196, str_569198)

# Processing the call keyword arguments (line 1780)
kwargs_569199 = {}
# Getting the type of 'namedtuple' (line 1780)
namedtuple_569194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 17), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1780)
namedtuple_call_result_569200 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 17), namedtuple_569194, *[str_569195, tuple_569196], **kwargs_569199)

# Assigning a type to the variable 'BartlettResult' (line 1780)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1780, 0), 'BartlettResult', namedtuple_call_result_569200)

@norecursion
def bartlett(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'bartlett'
    module_type_store = module_type_store.open_function_context('bartlett', 1783, 0, False)
    
    # Passed parameters checking function
    bartlett.stypy_localization = localization
    bartlett.stypy_type_of_self = None
    bartlett.stypy_type_store = module_type_store
    bartlett.stypy_function_name = 'bartlett'
    bartlett.stypy_param_names_list = []
    bartlett.stypy_varargs_param_name = 'args'
    bartlett.stypy_kwargs_param_name = None
    bartlett.stypy_call_defaults = defaults
    bartlett.stypy_call_varargs = varargs
    bartlett.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bartlett', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bartlett', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bartlett(...)' code ##################

    str_569201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, (-1)), 'str', "\n    Perform Bartlett's test for equal variances\n\n    Bartlett's test tests the null hypothesis that all input samples\n    are from populations with equal variances.  For samples\n    from significantly non-normal populations, Levene's test\n    `levene` is more robust.\n\n    Parameters\n    ----------\n    sample1, sample2,... : array_like\n        arrays of sample data.  May be different lengths.\n\n    Returns\n    -------\n    statistic : float\n        The test statistic.\n    pvalue : float\n        The p-value of the test.\n\n    See Also\n    --------\n    fligner : A non-parametric test for the equality of k variances\n    levene : A robust parametric test for equality of k variances\n\n    Notes\n    -----\n    Conover et al. (1981) examine many of the existing parametric and\n    nonparametric tests by extensive simulations and they conclude that the\n    tests proposed by Fligner and Killeen (1976) and Levene (1960) appear to be\n    superior in terms of robustness of departures from normality and power [3]_.\n\n    References\n    ----------\n    .. [1]  http://www.itl.nist.gov/div898/handbook/eda/section3/eda357.htm\n\n    .. [2]  Snedecor, George W. and Cochran, William G. (1989), Statistical\n              Methods, Eighth Edition, Iowa State University Press.\n\n    .. [3] Park, C. and Lindsay, B. G. (1999). Robust Scale Estimation and\n           Hypothesis Testing based on Quadratic Inference Function. Technical\n           Report #99-03, Center for Likelihood Studies, Pennsylvania State\n           University.\n\n    .. [4] Bartlett, M. S. (1937). Properties of Sufficiency and Statistical\n           Tests. Proceedings of the Royal Society of London. Series A,\n           Mathematical and Physical Sciences, Vol. 160, No.901, pp. 268-282.\n\n    ")
    
    # Getting the type of 'args' (line 1834)
    args_569202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 13), 'args')
    # Testing the type of a for loop iterable (line 1834)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1834, 4), args_569202)
    # Getting the type of the for loop variable (line 1834)
    for_loop_var_569203 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1834, 4), args_569202)
    # Assigning a type to the variable 'a' (line 1834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 4), 'a', for_loop_var_569203)
    # SSA begins for a for statement (line 1834)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to asanyarray(...): (line 1835)
    # Processing the call arguments (line 1835)
    # Getting the type of 'a' (line 1835)
    a_569206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 25), 'a', False)
    # Processing the call keyword arguments (line 1835)
    kwargs_569207 = {}
    # Getting the type of 'np' (line 1835)
    np_569204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 11), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 1835)
    asanyarray_569205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1835, 11), np_569204, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 1835)
    asanyarray_call_result_569208 = invoke(stypy.reporting.localization.Localization(__file__, 1835, 11), asanyarray_569205, *[a_569206], **kwargs_569207)
    
    # Obtaining the member 'size' of a type (line 1835)
    size_569209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1835, 11), asanyarray_call_result_569208, 'size')
    int_569210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1835, 36), 'int')
    # Applying the binary operator '==' (line 1835)
    result_eq_569211 = python_operator(stypy.reporting.localization.Localization(__file__, 1835, 11), '==', size_569209, int_569210)
    
    # Testing the type of an if condition (line 1835)
    if_condition_569212 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1835, 8), result_eq_569211)
    # Assigning a type to the variable 'if_condition_569212' (line 1835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1835, 8), 'if_condition_569212', if_condition_569212)
    # SSA begins for if statement (line 1835)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to BartlettResult(...): (line 1836)
    # Processing the call arguments (line 1836)
    # Getting the type of 'np' (line 1836)
    np_569214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 34), 'np', False)
    # Obtaining the member 'nan' of a type (line 1836)
    nan_569215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 34), np_569214, 'nan')
    # Getting the type of 'np' (line 1836)
    np_569216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 42), 'np', False)
    # Obtaining the member 'nan' of a type (line 1836)
    nan_569217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 42), np_569216, 'nan')
    # Processing the call keyword arguments (line 1836)
    kwargs_569218 = {}
    # Getting the type of 'BartlettResult' (line 1836)
    BartlettResult_569213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 19), 'BartlettResult', False)
    # Calling BartlettResult(args, kwargs) (line 1836)
    BartlettResult_call_result_569219 = invoke(stypy.reporting.localization.Localization(__file__, 1836, 19), BartlettResult_569213, *[nan_569215, nan_569217], **kwargs_569218)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 12), 'stypy_return_type', BartlettResult_call_result_569219)
    # SSA join for if statement (line 1835)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1838):
    
    # Assigning a Call to a Name (line 1838):
    
    # Call to len(...): (line 1838)
    # Processing the call arguments (line 1838)
    # Getting the type of 'args' (line 1838)
    args_569221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 12), 'args', False)
    # Processing the call keyword arguments (line 1838)
    kwargs_569222 = {}
    # Getting the type of 'len' (line 1838)
    len_569220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 8), 'len', False)
    # Calling len(args, kwargs) (line 1838)
    len_call_result_569223 = invoke(stypy.reporting.localization.Localization(__file__, 1838, 8), len_569220, *[args_569221], **kwargs_569222)
    
    # Assigning a type to the variable 'k' (line 1838)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1838, 4), 'k', len_call_result_569223)
    
    
    # Getting the type of 'k' (line 1839)
    k_569224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 7), 'k')
    int_569225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1839, 11), 'int')
    # Applying the binary operator '<' (line 1839)
    result_lt_569226 = python_operator(stypy.reporting.localization.Localization(__file__, 1839, 7), '<', k_569224, int_569225)
    
    # Testing the type of an if condition (line 1839)
    if_condition_569227 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1839, 4), result_lt_569226)
    # Assigning a type to the variable 'if_condition_569227' (line 1839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 4), 'if_condition_569227', if_condition_569227)
    # SSA begins for if statement (line 1839)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1840)
    # Processing the call arguments (line 1840)
    str_569229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 25), 'str', 'Must enter at least two input sample vectors.')
    # Processing the call keyword arguments (line 1840)
    kwargs_569230 = {}
    # Getting the type of 'ValueError' (line 1840)
    ValueError_569228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1840)
    ValueError_call_result_569231 = invoke(stypy.reporting.localization.Localization(__file__, 1840, 14), ValueError_569228, *[str_569229], **kwargs_569230)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1840, 8), ValueError_call_result_569231, 'raise parameter', BaseException)
    # SSA join for if statement (line 1839)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1841):
    
    # Assigning a Call to a Name (line 1841):
    
    # Call to zeros(...): (line 1841)
    # Processing the call arguments (line 1841)
    # Getting the type of 'k' (line 1841)
    k_569233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 15), 'k', False)
    # Processing the call keyword arguments (line 1841)
    kwargs_569234 = {}
    # Getting the type of 'zeros' (line 1841)
    zeros_569232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 9), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1841)
    zeros_call_result_569235 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 9), zeros_569232, *[k_569233], **kwargs_569234)
    
    # Assigning a type to the variable 'Ni' (line 1841)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 4), 'Ni', zeros_call_result_569235)
    
    # Assigning a Call to a Name (line 1842):
    
    # Assigning a Call to a Name (line 1842):
    
    # Call to zeros(...): (line 1842)
    # Processing the call arguments (line 1842)
    # Getting the type of 'k' (line 1842)
    k_569237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 16), 'k', False)
    str_569238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, 19), 'str', 'd')
    # Processing the call keyword arguments (line 1842)
    kwargs_569239 = {}
    # Getting the type of 'zeros' (line 1842)
    zeros_569236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 10), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1842)
    zeros_call_result_569240 = invoke(stypy.reporting.localization.Localization(__file__, 1842, 10), zeros_569236, *[k_569237, str_569238], **kwargs_569239)
    
    # Assigning a type to the variable 'ssq' (line 1842)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 4), 'ssq', zeros_call_result_569240)
    
    
    # Call to range(...): (line 1843)
    # Processing the call arguments (line 1843)
    # Getting the type of 'k' (line 1843)
    k_569242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 19), 'k', False)
    # Processing the call keyword arguments (line 1843)
    kwargs_569243 = {}
    # Getting the type of 'range' (line 1843)
    range_569241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 13), 'range', False)
    # Calling range(args, kwargs) (line 1843)
    range_call_result_569244 = invoke(stypy.reporting.localization.Localization(__file__, 1843, 13), range_569241, *[k_569242], **kwargs_569243)
    
    # Testing the type of a for loop iterable (line 1843)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1843, 4), range_call_result_569244)
    # Getting the type of the for loop variable (line 1843)
    for_loop_var_569245 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1843, 4), range_call_result_569244)
    # Assigning a type to the variable 'j' (line 1843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1843, 4), 'j', for_loop_var_569245)
    # SSA begins for a for statement (line 1843)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 1844):
    
    # Assigning a Call to a Subscript (line 1844):
    
    # Call to len(...): (line 1844)
    # Processing the call arguments (line 1844)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 1844)
    j_569247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 25), 'j', False)
    # Getting the type of 'args' (line 1844)
    args_569248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 20), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1844)
    getitem___569249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 20), args_569248, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1844)
    subscript_call_result_569250 = invoke(stypy.reporting.localization.Localization(__file__, 1844, 20), getitem___569249, j_569247)
    
    # Processing the call keyword arguments (line 1844)
    kwargs_569251 = {}
    # Getting the type of 'len' (line 1844)
    len_569246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 16), 'len', False)
    # Calling len(args, kwargs) (line 1844)
    len_call_result_569252 = invoke(stypy.reporting.localization.Localization(__file__, 1844, 16), len_569246, *[subscript_call_result_569250], **kwargs_569251)
    
    # Getting the type of 'Ni' (line 1844)
    Ni_569253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 8), 'Ni')
    # Getting the type of 'j' (line 1844)
    j_569254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 11), 'j')
    # Storing an element on a container (line 1844)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1844, 8), Ni_569253, (j_569254, len_call_result_569252))
    
    # Assigning a Call to a Subscript (line 1845):
    
    # Assigning a Call to a Subscript (line 1845):
    
    # Call to var(...): (line 1845)
    # Processing the call arguments (line 1845)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 1845)
    j_569257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 29), 'j', False)
    # Getting the type of 'args' (line 1845)
    args_569258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 24), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1845)
    getitem___569259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 24), args_569258, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1845)
    subscript_call_result_569260 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 24), getitem___569259, j_569257)
    
    # Processing the call keyword arguments (line 1845)
    int_569261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 38), 'int')
    keyword_569262 = int_569261
    kwargs_569263 = {'ddof': keyword_569262}
    # Getting the type of 'np' (line 1845)
    np_569255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 17), 'np', False)
    # Obtaining the member 'var' of a type (line 1845)
    var_569256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 17), np_569255, 'var')
    # Calling var(args, kwargs) (line 1845)
    var_call_result_569264 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 17), var_569256, *[subscript_call_result_569260], **kwargs_569263)
    
    # Getting the type of 'ssq' (line 1845)
    ssq_569265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 8), 'ssq')
    # Getting the type of 'j' (line 1845)
    j_569266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 12), 'j')
    # Storing an element on a container (line 1845)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 8), ssq_569265, (j_569266, var_call_result_569264))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1846):
    
    # Assigning a Call to a Name (line 1846):
    
    # Call to sum(...): (line 1846)
    # Processing the call arguments (line 1846)
    # Getting the type of 'Ni' (line 1846)
    Ni_569269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 18), 'Ni', False)
    # Processing the call keyword arguments (line 1846)
    int_569270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1846, 27), 'int')
    keyword_569271 = int_569270
    kwargs_569272 = {'axis': keyword_569271}
    # Getting the type of 'np' (line 1846)
    np_569267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 11), 'np', False)
    # Obtaining the member 'sum' of a type (line 1846)
    sum_569268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1846, 11), np_569267, 'sum')
    # Calling sum(args, kwargs) (line 1846)
    sum_call_result_569273 = invoke(stypy.reporting.localization.Localization(__file__, 1846, 11), sum_569268, *[Ni_569269], **kwargs_569272)
    
    # Assigning a type to the variable 'Ntot' (line 1846)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1846, 4), 'Ntot', sum_call_result_569273)
    
    # Assigning a BinOp to a Name (line 1847):
    
    # Assigning a BinOp to a Name (line 1847):
    
    # Call to sum(...): (line 1847)
    # Processing the call arguments (line 1847)
    # Getting the type of 'Ni' (line 1847)
    Ni_569276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 19), 'Ni', False)
    int_569277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1847, 24), 'int')
    # Applying the binary operator '-' (line 1847)
    result_sub_569278 = python_operator(stypy.reporting.localization.Localization(__file__, 1847, 19), '-', Ni_569276, int_569277)
    
    # Getting the type of 'ssq' (line 1847)
    ssq_569279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 27), 'ssq', False)
    # Applying the binary operator '*' (line 1847)
    result_mul_569280 = python_operator(stypy.reporting.localization.Localization(__file__, 1847, 18), '*', result_sub_569278, ssq_569279)
    
    # Processing the call keyword arguments (line 1847)
    int_569281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1847, 37), 'int')
    keyword_569282 = int_569281
    kwargs_569283 = {'axis': keyword_569282}
    # Getting the type of 'np' (line 1847)
    np_569274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 11), 'np', False)
    # Obtaining the member 'sum' of a type (line 1847)
    sum_569275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1847, 11), np_569274, 'sum')
    # Calling sum(args, kwargs) (line 1847)
    sum_call_result_569284 = invoke(stypy.reporting.localization.Localization(__file__, 1847, 11), sum_569275, *[result_mul_569280], **kwargs_569283)
    
    float_569285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1847, 43), 'float')
    # Getting the type of 'Ntot' (line 1847)
    Ntot_569286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 48), 'Ntot')
    # Getting the type of 'k' (line 1847)
    k_569287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 55), 'k')
    # Applying the binary operator '-' (line 1847)
    result_sub_569288 = python_operator(stypy.reporting.localization.Localization(__file__, 1847, 48), '-', Ntot_569286, k_569287)
    
    # Applying the binary operator '*' (line 1847)
    result_mul_569289 = python_operator(stypy.reporting.localization.Localization(__file__, 1847, 43), '*', float_569285, result_sub_569288)
    
    # Applying the binary operator 'div' (line 1847)
    result_div_569290 = python_operator(stypy.reporting.localization.Localization(__file__, 1847, 11), 'div', sum_call_result_569284, result_mul_569289)
    
    # Assigning a type to the variable 'spsq' (line 1847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1847, 4), 'spsq', result_div_569290)
    
    # Assigning a BinOp to a Name (line 1848):
    
    # Assigning a BinOp to a Name (line 1848):
    # Getting the type of 'Ntot' (line 1848)
    Ntot_569291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 13), 'Ntot')
    float_569292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1848, 18), 'float')
    # Applying the binary operator '*' (line 1848)
    result_mul_569293 = python_operator(stypy.reporting.localization.Localization(__file__, 1848, 13), '*', Ntot_569291, float_569292)
    
    # Getting the type of 'k' (line 1848)
    k_569294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 24), 'k')
    # Applying the binary operator '-' (line 1848)
    result_sub_569295 = python_operator(stypy.reporting.localization.Localization(__file__, 1848, 13), '-', result_mul_569293, k_569294)
    
    
    # Call to log(...): (line 1848)
    # Processing the call arguments (line 1848)
    # Getting the type of 'spsq' (line 1848)
    spsq_569297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 33), 'spsq', False)
    # Processing the call keyword arguments (line 1848)
    kwargs_569298 = {}
    # Getting the type of 'log' (line 1848)
    log_569296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 29), 'log', False)
    # Calling log(args, kwargs) (line 1848)
    log_call_result_569299 = invoke(stypy.reporting.localization.Localization(__file__, 1848, 29), log_569296, *[spsq_569297], **kwargs_569298)
    
    # Applying the binary operator '*' (line 1848)
    result_mul_569300 = python_operator(stypy.reporting.localization.Localization(__file__, 1848, 12), '*', result_sub_569295, log_call_result_569299)
    
    
    # Call to sum(...): (line 1848)
    # Processing the call arguments (line 1848)
    # Getting the type of 'Ni' (line 1848)
    Ni_569303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 49), 'Ni', False)
    float_569304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1848, 54), 'float')
    # Applying the binary operator '-' (line 1848)
    result_sub_569305 = python_operator(stypy.reporting.localization.Localization(__file__, 1848, 49), '-', Ni_569303, float_569304)
    
    
    # Call to log(...): (line 1848)
    # Processing the call arguments (line 1848)
    # Getting the type of 'ssq' (line 1848)
    ssq_569307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 63), 'ssq', False)
    # Processing the call keyword arguments (line 1848)
    kwargs_569308 = {}
    # Getting the type of 'log' (line 1848)
    log_569306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 59), 'log', False)
    # Calling log(args, kwargs) (line 1848)
    log_call_result_569309 = invoke(stypy.reporting.localization.Localization(__file__, 1848, 59), log_569306, *[ssq_569307], **kwargs_569308)
    
    # Applying the binary operator '*' (line 1848)
    result_mul_569310 = python_operator(stypy.reporting.localization.Localization(__file__, 1848, 48), '*', result_sub_569305, log_call_result_569309)
    
    # Processing the call keyword arguments (line 1848)
    int_569311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1848, 74), 'int')
    keyword_569312 = int_569311
    kwargs_569313 = {'axis': keyword_569312}
    # Getting the type of 'np' (line 1848)
    np_569301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 41), 'np', False)
    # Obtaining the member 'sum' of a type (line 1848)
    sum_569302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1848, 41), np_569301, 'sum')
    # Calling sum(args, kwargs) (line 1848)
    sum_call_result_569314 = invoke(stypy.reporting.localization.Localization(__file__, 1848, 41), sum_569302, *[result_mul_569310], **kwargs_569313)
    
    # Applying the binary operator '-' (line 1848)
    result_sub_569315 = python_operator(stypy.reporting.localization.Localization(__file__, 1848, 12), '-', result_mul_569300, sum_call_result_569314)
    
    # Assigning a type to the variable 'numer' (line 1848)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1848, 4), 'numer', result_sub_569315)
    
    # Assigning a BinOp to a Name (line 1849):
    
    # Assigning a BinOp to a Name (line 1849):
    float_569316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 12), 'float')
    float_569317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 18), 'float')
    int_569318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 23), 'int')
    # Getting the type of 'k' (line 1849)
    k_569319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 26), 'k')
    int_569320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 30), 'int')
    # Applying the binary operator '-' (line 1849)
    result_sub_569321 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 26), '-', k_569319, int_569320)
    
    # Applying the binary operator '*' (line 1849)
    result_mul_569322 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 23), '*', int_569318, result_sub_569321)
    
    # Applying the binary operator 'div' (line 1849)
    result_div_569323 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 18), 'div', float_569317, result_mul_569322)
    
    
    # Call to sum(...): (line 1849)
    # Processing the call arguments (line 1849)
    float_569326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 45), 'float')
    # Getting the type of 'Ni' (line 1849)
    Ni_569327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 50), 'Ni', False)
    float_569328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 55), 'float')
    # Applying the binary operator '-' (line 1849)
    result_sub_569329 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 50), '-', Ni_569327, float_569328)
    
    # Applying the binary operator 'div' (line 1849)
    result_div_569330 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 45), 'div', float_569326, result_sub_569329)
    
    # Processing the call keyword arguments (line 1849)
    int_569331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 66), 'int')
    keyword_569332 = int_569331
    kwargs_569333 = {'axis': keyword_569332}
    # Getting the type of 'np' (line 1849)
    np_569324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 38), 'np', False)
    # Obtaining the member 'sum' of a type (line 1849)
    sum_569325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 38), np_569324, 'sum')
    # Calling sum(args, kwargs) (line 1849)
    sum_call_result_569334 = invoke(stypy.reporting.localization.Localization(__file__, 1849, 38), sum_569325, *[result_div_569330], **kwargs_569333)
    
    float_569335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1850, 37), 'float')
    # Getting the type of 'Ntot' (line 1850)
    Ntot_569336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 42), 'Ntot')
    # Getting the type of 'k' (line 1850)
    k_569337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 49), 'k')
    # Applying the binary operator '-' (line 1850)
    result_sub_569338 = python_operator(stypy.reporting.localization.Localization(__file__, 1850, 42), '-', Ntot_569336, k_569337)
    
    # Applying the binary operator 'div' (line 1850)
    result_div_569339 = python_operator(stypy.reporting.localization.Localization(__file__, 1850, 37), 'div', float_569335, result_sub_569338)
    
    # Applying the binary operator '-' (line 1849)
    result_sub_569340 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 37), '-', sum_call_result_569334, result_div_569339)
    
    # Applying the binary operator '*' (line 1849)
    result_mul_569341 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 34), '*', result_div_569323, result_sub_569340)
    
    # Applying the binary operator '+' (line 1849)
    result_add_569342 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 12), '+', float_569316, result_mul_569341)
    
    # Assigning a type to the variable 'denom' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 4), 'denom', result_add_569342)
    
    # Assigning a BinOp to a Name (line 1851):
    
    # Assigning a BinOp to a Name (line 1851):
    # Getting the type of 'numer' (line 1851)
    numer_569343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 8), 'numer')
    # Getting the type of 'denom' (line 1851)
    denom_569344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 16), 'denom')
    # Applying the binary operator 'div' (line 1851)
    result_div_569345 = python_operator(stypy.reporting.localization.Localization(__file__, 1851, 8), 'div', numer_569343, denom_569344)
    
    # Assigning a type to the variable 'T' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 4), 'T', result_div_569345)
    
    # Assigning a Call to a Name (line 1852):
    
    # Assigning a Call to a Name (line 1852):
    
    # Call to sf(...): (line 1852)
    # Processing the call arguments (line 1852)
    # Getting the type of 'T' (line 1852)
    T_569349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 33), 'T', False)
    # Getting the type of 'k' (line 1852)
    k_569350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 36), 'k', False)
    int_569351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1852, 40), 'int')
    # Applying the binary operator '-' (line 1852)
    result_sub_569352 = python_operator(stypy.reporting.localization.Localization(__file__, 1852, 36), '-', k_569350, int_569351)
    
    # Processing the call keyword arguments (line 1852)
    kwargs_569353 = {}
    # Getting the type of 'distributions' (line 1852)
    distributions_569346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 11), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 1852)
    chi2_569347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 11), distributions_569346, 'chi2')
    # Obtaining the member 'sf' of a type (line 1852)
    sf_569348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 11), chi2_569347, 'sf')
    # Calling sf(args, kwargs) (line 1852)
    sf_call_result_569354 = invoke(stypy.reporting.localization.Localization(__file__, 1852, 11), sf_569348, *[T_569349, result_sub_569352], **kwargs_569353)
    
    # Assigning a type to the variable 'pval' (line 1852)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1852, 4), 'pval', sf_call_result_569354)
    
    # Call to BartlettResult(...): (line 1854)
    # Processing the call arguments (line 1854)
    # Getting the type of 'T' (line 1854)
    T_569356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 26), 'T', False)
    # Getting the type of 'pval' (line 1854)
    pval_569357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 29), 'pval', False)
    # Processing the call keyword arguments (line 1854)
    kwargs_569358 = {}
    # Getting the type of 'BartlettResult' (line 1854)
    BartlettResult_569355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 11), 'BartlettResult', False)
    # Calling BartlettResult(args, kwargs) (line 1854)
    BartlettResult_call_result_569359 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 11), BartlettResult_569355, *[T_569356, pval_569357], **kwargs_569358)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1854)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 4), 'stypy_return_type', BartlettResult_call_result_569359)
    
    # ################# End of 'bartlett(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bartlett' in the type store
    # Getting the type of 'stypy_return_type' (line 1783)
    stypy_return_type_569360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_569360)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bartlett'
    return stypy_return_type_569360

# Assigning a type to the variable 'bartlett' (line 1783)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 0), 'bartlett', bartlett)

# Assigning a Call to a Name (line 1857):

# Assigning a Call to a Name (line 1857):

# Call to namedtuple(...): (line 1857)
# Processing the call arguments (line 1857)
str_569362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1857, 26), 'str', 'LeveneResult')

# Obtaining an instance of the builtin type 'tuple' (line 1857)
tuple_569363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1857, 43), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1857)
# Adding element type (line 1857)
str_569364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1857, 43), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1857, 43), tuple_569363, str_569364)
# Adding element type (line 1857)
str_569365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1857, 56), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1857, 43), tuple_569363, str_569365)

# Processing the call keyword arguments (line 1857)
kwargs_569366 = {}
# Getting the type of 'namedtuple' (line 1857)
namedtuple_569361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 15), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 1857)
namedtuple_call_result_569367 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 15), namedtuple_569361, *[str_569362, tuple_569363], **kwargs_569366)

# Assigning a type to the variable 'LeveneResult' (line 1857)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1857, 0), 'LeveneResult', namedtuple_call_result_569367)

@norecursion
def levene(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'levene'
    module_type_store = module_type_store.open_function_context('levene', 1860, 0, False)
    
    # Passed parameters checking function
    levene.stypy_localization = localization
    levene.stypy_type_of_self = None
    levene.stypy_type_store = module_type_store
    levene.stypy_function_name = 'levene'
    levene.stypy_param_names_list = []
    levene.stypy_varargs_param_name = 'args'
    levene.stypy_kwargs_param_name = 'kwds'
    levene.stypy_call_defaults = defaults
    levene.stypy_call_varargs = varargs
    levene.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'levene', [], 'args', 'kwds', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'levene', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'levene(...)' code ##################

    str_569368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1906, (-1)), 'str', "\n    Perform Levene test for equal variances.\n\n    The Levene test tests the null hypothesis that all input samples\n    are from populations with equal variances.  Levene's test is an\n    alternative to Bartlett's test `bartlett` in the case where\n    there are significant deviations from normality.\n\n    Parameters\n    ----------\n    sample1, sample2, ... : array_like\n        The sample data, possibly with different lengths\n    center : {'mean', 'median', 'trimmed'}, optional\n        Which function of the data to use in the test.  The default\n        is 'median'.\n    proportiontocut : float, optional\n        When `center` is 'trimmed', this gives the proportion of data points\n        to cut from each end. (See `scipy.stats.trim_mean`.)\n        Default is 0.05.\n\n    Returns\n    -------\n    statistic : float\n        The test statistic.\n    pvalue : float\n        The p-value for the test.\n\n    Notes\n    -----\n    Three variations of Levene's test are possible.  The possibilities\n    and their recommended usages are:\n\n      * 'median' : Recommended for skewed (non-normal) distributions>\n      * 'mean' : Recommended for symmetric, moderate-tailed distributions.\n      * 'trimmed' : Recommended for heavy-tailed distributions.\n\n    References\n    ----------\n    .. [1]  http://www.itl.nist.gov/div898/handbook/eda/section3/eda35a.htm\n    .. [2]   Levene, H. (1960). In Contributions to Probability and Statistics:\n               Essays in Honor of Harold Hotelling, I. Olkin et al. eds.,\n               Stanford University Press, pp. 278-292.\n    .. [3]  Brown, M. B. and Forsythe, A. B. (1974), Journal of the American\n              Statistical Association, 69, 364-367\n\n    ")
    
    # Assigning a Str to a Name (line 1908):
    
    # Assigning a Str to a Name (line 1908):
    str_569369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, 13), 'str', 'median')
    # Assigning a type to the variable 'center' (line 1908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1908, 4), 'center', str_569369)
    
    # Assigning a Num to a Name (line 1909):
    
    # Assigning a Num to a Name (line 1909):
    float_569370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 22), 'float')
    # Assigning a type to the variable 'proportiontocut' (line 1909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1909, 4), 'proportiontocut', float_569370)
    
    
    # Call to items(...): (line 1910)
    # Processing the call keyword arguments (line 1910)
    kwargs_569373 = {}
    # Getting the type of 'kwds' (line 1910)
    kwds_569371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 21), 'kwds', False)
    # Obtaining the member 'items' of a type (line 1910)
    items_569372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1910, 21), kwds_569371, 'items')
    # Calling items(args, kwargs) (line 1910)
    items_call_result_569374 = invoke(stypy.reporting.localization.Localization(__file__, 1910, 21), items_569372, *[], **kwargs_569373)
    
    # Testing the type of a for loop iterable (line 1910)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1910, 4), items_call_result_569374)
    # Getting the type of the for loop variable (line 1910)
    for_loop_var_569375 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1910, 4), items_call_result_569374)
    # Assigning a type to the variable 'kw' (line 1910)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1910, 4), 'kw', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1910, 4), for_loop_var_569375))
    # Assigning a type to the variable 'value' (line 1910)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1910, 4), 'value', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1910, 4), for_loop_var_569375))
    # SSA begins for a for statement (line 1910)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'kw' (line 1911)
    kw_569376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 11), 'kw')
    
    # Obtaining an instance of the builtin type 'list' (line 1911)
    list_569377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1911, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1911)
    # Adding element type (line 1911)
    str_569378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1911, 22), 'str', 'center')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1911, 21), list_569377, str_569378)
    # Adding element type (line 1911)
    str_569379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1911, 32), 'str', 'proportiontocut')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1911, 21), list_569377, str_569379)
    
    # Applying the binary operator 'notin' (line 1911)
    result_contains_569380 = python_operator(stypy.reporting.localization.Localization(__file__, 1911, 11), 'notin', kw_569376, list_569377)
    
    # Testing the type of an if condition (line 1911)
    if_condition_569381 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1911, 8), result_contains_569380)
    # Assigning a type to the variable 'if_condition_569381' (line 1911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1911, 8), 'if_condition_569381', if_condition_569381)
    # SSA begins for if statement (line 1911)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 1912)
    # Processing the call arguments (line 1912)
    str_569383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 28), 'str', "levene() got an unexpected keyword argument '%s'")
    # Getting the type of 'kw' (line 1913)
    kw_569384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 46), 'kw', False)
    # Applying the binary operator '%' (line 1912)
    result_mod_569385 = python_operator(stypy.reporting.localization.Localization(__file__, 1912, 28), '%', str_569383, kw_569384)
    
    # Processing the call keyword arguments (line 1912)
    kwargs_569386 = {}
    # Getting the type of 'TypeError' (line 1912)
    TypeError_569382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 18), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1912)
    TypeError_call_result_569387 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 18), TypeError_569382, *[result_mod_569385], **kwargs_569386)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1912, 12), TypeError_call_result_569387, 'raise parameter', BaseException)
    # SSA join for if statement (line 1911)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'kw' (line 1914)
    kw_569388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 11), 'kw')
    str_569389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1914, 17), 'str', 'center')
    # Applying the binary operator '==' (line 1914)
    result_eq_569390 = python_operator(stypy.reporting.localization.Localization(__file__, 1914, 11), '==', kw_569388, str_569389)
    
    # Testing the type of an if condition (line 1914)
    if_condition_569391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1914, 8), result_eq_569390)
    # Assigning a type to the variable 'if_condition_569391' (line 1914)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'if_condition_569391', if_condition_569391)
    # SSA begins for if statement (line 1914)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1915):
    
    # Assigning a Name to a Name (line 1915):
    # Getting the type of 'value' (line 1915)
    value_569392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 21), 'value')
    # Assigning a type to the variable 'center' (line 1915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1915, 12), 'center', value_569392)
    # SSA branch for the else part of an if statement (line 1914)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1917):
    
    # Assigning a Name to a Name (line 1917):
    # Getting the type of 'value' (line 1917)
    value_569393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 30), 'value')
    # Assigning a type to the variable 'proportiontocut' (line 1917)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1917, 12), 'proportiontocut', value_569393)
    # SSA join for if statement (line 1914)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1919):
    
    # Assigning a Call to a Name (line 1919):
    
    # Call to len(...): (line 1919)
    # Processing the call arguments (line 1919)
    # Getting the type of 'args' (line 1919)
    args_569395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 12), 'args', False)
    # Processing the call keyword arguments (line 1919)
    kwargs_569396 = {}
    # Getting the type of 'len' (line 1919)
    len_569394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 8), 'len', False)
    # Calling len(args, kwargs) (line 1919)
    len_call_result_569397 = invoke(stypy.reporting.localization.Localization(__file__, 1919, 8), len_569394, *[args_569395], **kwargs_569396)
    
    # Assigning a type to the variable 'k' (line 1919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1919, 4), 'k', len_call_result_569397)
    
    
    # Getting the type of 'k' (line 1920)
    k_569398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 7), 'k')
    int_569399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 11), 'int')
    # Applying the binary operator '<' (line 1920)
    result_lt_569400 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 7), '<', k_569398, int_569399)
    
    # Testing the type of an if condition (line 1920)
    if_condition_569401 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1920, 4), result_lt_569400)
    # Assigning a type to the variable 'if_condition_569401' (line 1920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 4), 'if_condition_569401', if_condition_569401)
    # SSA begins for if statement (line 1920)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1921)
    # Processing the call arguments (line 1921)
    str_569403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 25), 'str', 'Must enter at least two input sample vectors.')
    # Processing the call keyword arguments (line 1921)
    kwargs_569404 = {}
    # Getting the type of 'ValueError' (line 1921)
    ValueError_569402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1921)
    ValueError_call_result_569405 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 14), ValueError_569402, *[str_569403], **kwargs_569404)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1921, 8), ValueError_call_result_569405, 'raise parameter', BaseException)
    # SSA join for if statement (line 1920)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1922):
    
    # Assigning a Call to a Name (line 1922):
    
    # Call to zeros(...): (line 1922)
    # Processing the call arguments (line 1922)
    # Getting the type of 'k' (line 1922)
    k_569407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 15), 'k', False)
    # Processing the call keyword arguments (line 1922)
    kwargs_569408 = {}
    # Getting the type of 'zeros' (line 1922)
    zeros_569406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 9), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1922)
    zeros_call_result_569409 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 9), zeros_569406, *[k_569407], **kwargs_569408)
    
    # Assigning a type to the variable 'Ni' (line 1922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1922, 4), 'Ni', zeros_call_result_569409)
    
    # Assigning a Call to a Name (line 1923):
    
    # Assigning a Call to a Name (line 1923):
    
    # Call to zeros(...): (line 1923)
    # Processing the call arguments (line 1923)
    # Getting the type of 'k' (line 1923)
    k_569411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 16), 'k', False)
    str_569412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1923, 19), 'str', 'd')
    # Processing the call keyword arguments (line 1923)
    kwargs_569413 = {}
    # Getting the type of 'zeros' (line 1923)
    zeros_569410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 10), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1923)
    zeros_call_result_569414 = invoke(stypy.reporting.localization.Localization(__file__, 1923, 10), zeros_569410, *[k_569411, str_569412], **kwargs_569413)
    
    # Assigning a type to the variable 'Yci' (line 1923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 4), 'Yci', zeros_call_result_569414)
    
    
    # Getting the type of 'center' (line 1925)
    center_569415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 7), 'center')
    
    # Obtaining an instance of the builtin type 'list' (line 1925)
    list_569416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1925, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1925)
    # Adding element type (line 1925)
    str_569417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1925, 22), 'str', 'mean')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1925, 21), list_569416, str_569417)
    # Adding element type (line 1925)
    str_569418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1925, 30), 'str', 'median')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1925, 21), list_569416, str_569418)
    # Adding element type (line 1925)
    str_569419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1925, 40), 'str', 'trimmed')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1925, 21), list_569416, str_569419)
    
    # Applying the binary operator 'notin' (line 1925)
    result_contains_569420 = python_operator(stypy.reporting.localization.Localization(__file__, 1925, 7), 'notin', center_569415, list_569416)
    
    # Testing the type of an if condition (line 1925)
    if_condition_569421 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1925, 4), result_contains_569420)
    # Assigning a type to the variable 'if_condition_569421' (line 1925)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1925, 4), 'if_condition_569421', if_condition_569421)
    # SSA begins for if statement (line 1925)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1926)
    # Processing the call arguments (line 1926)
    str_569423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1926, 25), 'str', "Keyword argument <center> must be 'mean', 'median' or 'trimmed'.")
    # Processing the call keyword arguments (line 1926)
    kwargs_569424 = {}
    # Getting the type of 'ValueError' (line 1926)
    ValueError_569422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1926)
    ValueError_call_result_569425 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 14), ValueError_569422, *[str_569423], **kwargs_569424)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1926, 8), ValueError_call_result_569425, 'raise parameter', BaseException)
    # SSA join for if statement (line 1925)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'center' (line 1929)
    center_569426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 7), 'center')
    str_569427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, 17), 'str', 'median')
    # Applying the binary operator '==' (line 1929)
    result_eq_569428 = python_operator(stypy.reporting.localization.Localization(__file__, 1929, 7), '==', center_569426, str_569427)
    
    # Testing the type of an if condition (line 1929)
    if_condition_569429 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1929, 4), result_eq_569428)
    # Assigning a type to the variable 'if_condition_569429' (line 1929)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1929, 4), 'if_condition_569429', if_condition_569429)
    # SSA begins for if statement (line 1929)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Lambda to a Name (line 1930):
    
    # Assigning a Lambda to a Name (line 1930):

    @norecursion
    def _stypy_temp_lambda_489(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_489'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_489', 1930, 15, True)
        # Passed parameters checking function
        _stypy_temp_lambda_489.stypy_localization = localization
        _stypy_temp_lambda_489.stypy_type_of_self = None
        _stypy_temp_lambda_489.stypy_type_store = module_type_store
        _stypy_temp_lambda_489.stypy_function_name = '_stypy_temp_lambda_489'
        _stypy_temp_lambda_489.stypy_param_names_list = ['x']
        _stypy_temp_lambda_489.stypy_varargs_param_name = None
        _stypy_temp_lambda_489.stypy_kwargs_param_name = None
        _stypy_temp_lambda_489.stypy_call_defaults = defaults
        _stypy_temp_lambda_489.stypy_call_varargs = varargs
        _stypy_temp_lambda_489.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_489', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_489', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to median(...): (line 1930)
        # Processing the call arguments (line 1930)
        # Getting the type of 'x' (line 1930)
        x_569432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 35), 'x', False)
        # Processing the call keyword arguments (line 1930)
        int_569433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1930, 43), 'int')
        keyword_569434 = int_569433
        kwargs_569435 = {'axis': keyword_569434}
        # Getting the type of 'np' (line 1930)
        np_569430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 25), 'np', False)
        # Obtaining the member 'median' of a type (line 1930)
        median_569431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1930, 25), np_569430, 'median')
        # Calling median(args, kwargs) (line 1930)
        median_call_result_569436 = invoke(stypy.reporting.localization.Localization(__file__, 1930, 25), median_569431, *[x_569432], **kwargs_569435)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1930, 15), 'stypy_return_type', median_call_result_569436)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_489' in the type store
        # Getting the type of 'stypy_return_type' (line 1930)
        stypy_return_type_569437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 15), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_569437)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_489'
        return stypy_return_type_569437

    # Assigning a type to the variable '_stypy_temp_lambda_489' (line 1930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1930, 15), '_stypy_temp_lambda_489', _stypy_temp_lambda_489)
    # Getting the type of '_stypy_temp_lambda_489' (line 1930)
    _stypy_temp_lambda_489_569438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 15), '_stypy_temp_lambda_489')
    # Assigning a type to the variable 'func' (line 1930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1930, 8), 'func', _stypy_temp_lambda_489_569438)
    # SSA branch for the else part of an if statement (line 1929)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'center' (line 1931)
    center_569439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 9), 'center')
    str_569440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1931, 19), 'str', 'mean')
    # Applying the binary operator '==' (line 1931)
    result_eq_569441 = python_operator(stypy.reporting.localization.Localization(__file__, 1931, 9), '==', center_569439, str_569440)
    
    # Testing the type of an if condition (line 1931)
    if_condition_569442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1931, 9), result_eq_569441)
    # Assigning a type to the variable 'if_condition_569442' (line 1931)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1931, 9), 'if_condition_569442', if_condition_569442)
    # SSA begins for if statement (line 1931)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Lambda to a Name (line 1932):
    
    # Assigning a Lambda to a Name (line 1932):

    @norecursion
    def _stypy_temp_lambda_490(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_490'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_490', 1932, 15, True)
        # Passed parameters checking function
        _stypy_temp_lambda_490.stypy_localization = localization
        _stypy_temp_lambda_490.stypy_type_of_self = None
        _stypy_temp_lambda_490.stypy_type_store = module_type_store
        _stypy_temp_lambda_490.stypy_function_name = '_stypy_temp_lambda_490'
        _stypy_temp_lambda_490.stypy_param_names_list = ['x']
        _stypy_temp_lambda_490.stypy_varargs_param_name = None
        _stypy_temp_lambda_490.stypy_kwargs_param_name = None
        _stypy_temp_lambda_490.stypy_call_defaults = defaults
        _stypy_temp_lambda_490.stypy_call_varargs = varargs
        _stypy_temp_lambda_490.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_490', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_490', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to mean(...): (line 1932)
        # Processing the call arguments (line 1932)
        # Getting the type of 'x' (line 1932)
        x_569445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 33), 'x', False)
        # Processing the call keyword arguments (line 1932)
        int_569446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1932, 41), 'int')
        keyword_569447 = int_569446
        kwargs_569448 = {'axis': keyword_569447}
        # Getting the type of 'np' (line 1932)
        np_569443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 25), 'np', False)
        # Obtaining the member 'mean' of a type (line 1932)
        mean_569444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1932, 25), np_569443, 'mean')
        # Calling mean(args, kwargs) (line 1932)
        mean_call_result_569449 = invoke(stypy.reporting.localization.Localization(__file__, 1932, 25), mean_569444, *[x_569445], **kwargs_569448)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1932, 15), 'stypy_return_type', mean_call_result_569449)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_490' in the type store
        # Getting the type of 'stypy_return_type' (line 1932)
        stypy_return_type_569450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 15), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_569450)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_490'
        return stypy_return_type_569450

    # Assigning a type to the variable '_stypy_temp_lambda_490' (line 1932)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1932, 15), '_stypy_temp_lambda_490', _stypy_temp_lambda_490)
    # Getting the type of '_stypy_temp_lambda_490' (line 1932)
    _stypy_temp_lambda_490_569451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 15), '_stypy_temp_lambda_490')
    # Assigning a type to the variable 'func' (line 1932)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1932, 8), 'func', _stypy_temp_lambda_490_569451)
    # SSA branch for the else part of an if statement (line 1931)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1934):
    
    # Assigning a Call to a Name (line 1934):
    
    # Call to tuple(...): (line 1934)
    # Processing the call arguments (line 1934)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 1934, 21, True)
    # Calculating comprehension expression
    # Getting the type of 'args' (line 1935)
    args_569463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 32), 'args', False)
    comprehension_569464 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1934, 21), args_569463)
    # Assigning a type to the variable 'arg' (line 1934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1934, 21), 'arg', comprehension_569464)
    
    # Call to trimboth(...): (line 1934)
    # Processing the call arguments (line 1934)
    
    # Call to sort(...): (line 1934)
    # Processing the call arguments (line 1934)
    # Getting the type of 'arg' (line 1934)
    arg_569457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 44), 'arg', False)
    # Processing the call keyword arguments (line 1934)
    kwargs_569458 = {}
    # Getting the type of 'np' (line 1934)
    np_569455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 36), 'np', False)
    # Obtaining the member 'sort' of a type (line 1934)
    sort_569456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1934, 36), np_569455, 'sort')
    # Calling sort(args, kwargs) (line 1934)
    sort_call_result_569459 = invoke(stypy.reporting.localization.Localization(__file__, 1934, 36), sort_569456, *[arg_569457], **kwargs_569458)
    
    # Getting the type of 'proportiontocut' (line 1934)
    proportiontocut_569460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 50), 'proportiontocut', False)
    # Processing the call keyword arguments (line 1934)
    kwargs_569461 = {}
    # Getting the type of 'stats' (line 1934)
    stats_569453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 21), 'stats', False)
    # Obtaining the member 'trimboth' of a type (line 1934)
    trimboth_569454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1934, 21), stats_569453, 'trimboth')
    # Calling trimboth(args, kwargs) (line 1934)
    trimboth_call_result_569462 = invoke(stypy.reporting.localization.Localization(__file__, 1934, 21), trimboth_569454, *[sort_call_result_569459, proportiontocut_569460], **kwargs_569461)
    
    list_569465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1934, 21), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1934, 21), list_569465, trimboth_call_result_569462)
    # Processing the call keyword arguments (line 1934)
    kwargs_569466 = {}
    # Getting the type of 'tuple' (line 1934)
    tuple_569452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 15), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1934)
    tuple_call_result_569467 = invoke(stypy.reporting.localization.Localization(__file__, 1934, 15), tuple_569452, *[list_569465], **kwargs_569466)
    
    # Assigning a type to the variable 'args' (line 1934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1934, 8), 'args', tuple_call_result_569467)
    
    # Assigning a Lambda to a Name (line 1936):
    
    # Assigning a Lambda to a Name (line 1936):

    @norecursion
    def _stypy_temp_lambda_491(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_491'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_491', 1936, 15, True)
        # Passed parameters checking function
        _stypy_temp_lambda_491.stypy_localization = localization
        _stypy_temp_lambda_491.stypy_type_of_self = None
        _stypy_temp_lambda_491.stypy_type_store = module_type_store
        _stypy_temp_lambda_491.stypy_function_name = '_stypy_temp_lambda_491'
        _stypy_temp_lambda_491.stypy_param_names_list = ['x']
        _stypy_temp_lambda_491.stypy_varargs_param_name = None
        _stypy_temp_lambda_491.stypy_kwargs_param_name = None
        _stypy_temp_lambda_491.stypy_call_defaults = defaults
        _stypy_temp_lambda_491.stypy_call_varargs = varargs
        _stypy_temp_lambda_491.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_491', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_491', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to mean(...): (line 1936)
        # Processing the call arguments (line 1936)
        # Getting the type of 'x' (line 1936)
        x_569470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 33), 'x', False)
        # Processing the call keyword arguments (line 1936)
        int_569471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 41), 'int')
        keyword_569472 = int_569471
        kwargs_569473 = {'axis': keyword_569472}
        # Getting the type of 'np' (line 1936)
        np_569468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 25), 'np', False)
        # Obtaining the member 'mean' of a type (line 1936)
        mean_569469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1936, 25), np_569468, 'mean')
        # Calling mean(args, kwargs) (line 1936)
        mean_call_result_569474 = invoke(stypy.reporting.localization.Localization(__file__, 1936, 25), mean_569469, *[x_569470], **kwargs_569473)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 15), 'stypy_return_type', mean_call_result_569474)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_491' in the type store
        # Getting the type of 'stypy_return_type' (line 1936)
        stypy_return_type_569475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 15), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_569475)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_491'
        return stypy_return_type_569475

    # Assigning a type to the variable '_stypy_temp_lambda_491' (line 1936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 15), '_stypy_temp_lambda_491', _stypy_temp_lambda_491)
    # Getting the type of '_stypy_temp_lambda_491' (line 1936)
    _stypy_temp_lambda_491_569476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 15), '_stypy_temp_lambda_491')
    # Assigning a type to the variable 'func' (line 1936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 8), 'func', _stypy_temp_lambda_491_569476)
    # SSA join for if statement (line 1931)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1929)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 1938)
    # Processing the call arguments (line 1938)
    # Getting the type of 'k' (line 1938)
    k_569478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 19), 'k', False)
    # Processing the call keyword arguments (line 1938)
    kwargs_569479 = {}
    # Getting the type of 'range' (line 1938)
    range_569477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 13), 'range', False)
    # Calling range(args, kwargs) (line 1938)
    range_call_result_569480 = invoke(stypy.reporting.localization.Localization(__file__, 1938, 13), range_569477, *[k_569478], **kwargs_569479)
    
    # Testing the type of a for loop iterable (line 1938)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1938, 4), range_call_result_569480)
    # Getting the type of the for loop variable (line 1938)
    for_loop_var_569481 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1938, 4), range_call_result_569480)
    # Assigning a type to the variable 'j' (line 1938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1938, 4), 'j', for_loop_var_569481)
    # SSA begins for a for statement (line 1938)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 1939):
    
    # Assigning a Call to a Subscript (line 1939):
    
    # Call to len(...): (line 1939)
    # Processing the call arguments (line 1939)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 1939)
    j_569483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 25), 'j', False)
    # Getting the type of 'args' (line 1939)
    args_569484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 20), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1939)
    getitem___569485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 20), args_569484, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1939)
    subscript_call_result_569486 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 20), getitem___569485, j_569483)
    
    # Processing the call keyword arguments (line 1939)
    kwargs_569487 = {}
    # Getting the type of 'len' (line 1939)
    len_569482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 16), 'len', False)
    # Calling len(args, kwargs) (line 1939)
    len_call_result_569488 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 16), len_569482, *[subscript_call_result_569486], **kwargs_569487)
    
    # Getting the type of 'Ni' (line 1939)
    Ni_569489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 8), 'Ni')
    # Getting the type of 'j' (line 1939)
    j_569490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 11), 'j')
    # Storing an element on a container (line 1939)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1939, 8), Ni_569489, (j_569490, len_call_result_569488))
    
    # Assigning a Call to a Subscript (line 1940):
    
    # Assigning a Call to a Subscript (line 1940):
    
    # Call to func(...): (line 1940)
    # Processing the call arguments (line 1940)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 1940)
    j_569492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 27), 'j', False)
    # Getting the type of 'args' (line 1940)
    args_569493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 22), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1940)
    getitem___569494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1940, 22), args_569493, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1940)
    subscript_call_result_569495 = invoke(stypy.reporting.localization.Localization(__file__, 1940, 22), getitem___569494, j_569492)
    
    # Processing the call keyword arguments (line 1940)
    kwargs_569496 = {}
    # Getting the type of 'func' (line 1940)
    func_569491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 17), 'func', False)
    # Calling func(args, kwargs) (line 1940)
    func_call_result_569497 = invoke(stypy.reporting.localization.Localization(__file__, 1940, 17), func_569491, *[subscript_call_result_569495], **kwargs_569496)
    
    # Getting the type of 'Yci' (line 1940)
    Yci_569498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 8), 'Yci')
    # Getting the type of 'j' (line 1940)
    j_569499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 12), 'j')
    # Storing an element on a container (line 1940)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1940, 8), Yci_569498, (j_569499, func_call_result_569497))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1941):
    
    # Assigning a Call to a Name (line 1941):
    
    # Call to sum(...): (line 1941)
    # Processing the call arguments (line 1941)
    # Getting the type of 'Ni' (line 1941)
    Ni_569502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 18), 'Ni', False)
    # Processing the call keyword arguments (line 1941)
    int_569503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1941, 27), 'int')
    keyword_569504 = int_569503
    kwargs_569505 = {'axis': keyword_569504}
    # Getting the type of 'np' (line 1941)
    np_569500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 11), 'np', False)
    # Obtaining the member 'sum' of a type (line 1941)
    sum_569501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1941, 11), np_569500, 'sum')
    # Calling sum(args, kwargs) (line 1941)
    sum_call_result_569506 = invoke(stypy.reporting.localization.Localization(__file__, 1941, 11), sum_569501, *[Ni_569502], **kwargs_569505)
    
    # Assigning a type to the variable 'Ntot' (line 1941)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1941, 4), 'Ntot', sum_call_result_569506)
    
    # Assigning a BinOp to a Name (line 1944):
    
    # Assigning a BinOp to a Name (line 1944):
    
    # Obtaining an instance of the builtin type 'list' (line 1944)
    list_569507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1944, 10), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1944)
    # Adding element type (line 1944)
    # Getting the type of 'None' (line 1944)
    None_569508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 11), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1944, 10), list_569507, None_569508)
    
    # Getting the type of 'k' (line 1944)
    k_569509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 19), 'k')
    # Applying the binary operator '*' (line 1944)
    result_mul_569510 = python_operator(stypy.reporting.localization.Localization(__file__, 1944, 10), '*', list_569507, k_569509)
    
    # Assigning a type to the variable 'Zij' (line 1944)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1944, 4), 'Zij', result_mul_569510)
    
    
    # Call to range(...): (line 1945)
    # Processing the call arguments (line 1945)
    # Getting the type of 'k' (line 1945)
    k_569512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 19), 'k', False)
    # Processing the call keyword arguments (line 1945)
    kwargs_569513 = {}
    # Getting the type of 'range' (line 1945)
    range_569511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 13), 'range', False)
    # Calling range(args, kwargs) (line 1945)
    range_call_result_569514 = invoke(stypy.reporting.localization.Localization(__file__, 1945, 13), range_569511, *[k_569512], **kwargs_569513)
    
    # Testing the type of a for loop iterable (line 1945)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1945, 4), range_call_result_569514)
    # Getting the type of the for loop variable (line 1945)
    for_loop_var_569515 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1945, 4), range_call_result_569514)
    # Assigning a type to the variable 'i' (line 1945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1945, 4), 'i', for_loop_var_569515)
    # SSA begins for a for statement (line 1945)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 1946):
    
    # Assigning a Call to a Subscript (line 1946):
    
    # Call to abs(...): (line 1946)
    # Processing the call arguments (line 1946)
    
    # Call to asarray(...): (line 1946)
    # Processing the call arguments (line 1946)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1946)
    i_569518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 34), 'i', False)
    # Getting the type of 'args' (line 1946)
    args_569519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 29), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1946)
    getitem___569520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1946, 29), args_569519, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1946)
    subscript_call_result_569521 = invoke(stypy.reporting.localization.Localization(__file__, 1946, 29), getitem___569520, i_569518)
    
    # Processing the call keyword arguments (line 1946)
    kwargs_569522 = {}
    # Getting the type of 'asarray' (line 1946)
    asarray_569517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 21), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1946)
    asarray_call_result_569523 = invoke(stypy.reporting.localization.Localization(__file__, 1946, 21), asarray_569517, *[subscript_call_result_569521], **kwargs_569522)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1946)
    i_569524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 44), 'i', False)
    # Getting the type of 'Yci' (line 1946)
    Yci_569525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 40), 'Yci', False)
    # Obtaining the member '__getitem__' of a type (line 1946)
    getitem___569526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1946, 40), Yci_569525, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1946)
    subscript_call_result_569527 = invoke(stypy.reporting.localization.Localization(__file__, 1946, 40), getitem___569526, i_569524)
    
    # Applying the binary operator '-' (line 1946)
    result_sub_569528 = python_operator(stypy.reporting.localization.Localization(__file__, 1946, 21), '-', asarray_call_result_569523, subscript_call_result_569527)
    
    # Processing the call keyword arguments (line 1946)
    kwargs_569529 = {}
    # Getting the type of 'abs' (line 1946)
    abs_569516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 17), 'abs', False)
    # Calling abs(args, kwargs) (line 1946)
    abs_call_result_569530 = invoke(stypy.reporting.localization.Localization(__file__, 1946, 17), abs_569516, *[result_sub_569528], **kwargs_569529)
    
    # Getting the type of 'Zij' (line 1946)
    Zij_569531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 8), 'Zij')
    # Getting the type of 'i' (line 1946)
    i_569532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 12), 'i')
    # Storing an element on a container (line 1946)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1946, 8), Zij_569531, (i_569532, abs_call_result_569530))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1949):
    
    # Assigning a Call to a Name (line 1949):
    
    # Call to zeros(...): (line 1949)
    # Processing the call arguments (line 1949)
    # Getting the type of 'k' (line 1949)
    k_569534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 18), 'k', False)
    str_569535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1949, 21), 'str', 'd')
    # Processing the call keyword arguments (line 1949)
    kwargs_569536 = {}
    # Getting the type of 'zeros' (line 1949)
    zeros_569533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 12), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1949)
    zeros_call_result_569537 = invoke(stypy.reporting.localization.Localization(__file__, 1949, 12), zeros_569533, *[k_569534, str_569535], **kwargs_569536)
    
    # Assigning a type to the variable 'Zbari' (line 1949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1949, 4), 'Zbari', zeros_call_result_569537)
    
    # Assigning a Num to a Name (line 1950):
    
    # Assigning a Num to a Name (line 1950):
    float_569538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1950, 11), 'float')
    # Assigning a type to the variable 'Zbar' (line 1950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1950, 4), 'Zbar', float_569538)
    
    
    # Call to range(...): (line 1951)
    # Processing the call arguments (line 1951)
    # Getting the type of 'k' (line 1951)
    k_569540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 19), 'k', False)
    # Processing the call keyword arguments (line 1951)
    kwargs_569541 = {}
    # Getting the type of 'range' (line 1951)
    range_569539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 13), 'range', False)
    # Calling range(args, kwargs) (line 1951)
    range_call_result_569542 = invoke(stypy.reporting.localization.Localization(__file__, 1951, 13), range_569539, *[k_569540], **kwargs_569541)
    
    # Testing the type of a for loop iterable (line 1951)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1951, 4), range_call_result_569542)
    # Getting the type of the for loop variable (line 1951)
    for_loop_var_569543 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1951, 4), range_call_result_569542)
    # Assigning a type to the variable 'i' (line 1951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1951, 4), 'i', for_loop_var_569543)
    # SSA begins for a for statement (line 1951)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 1952):
    
    # Assigning a Call to a Subscript (line 1952):
    
    # Call to mean(...): (line 1952)
    # Processing the call arguments (line 1952)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1952)
    i_569546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 31), 'i', False)
    # Getting the type of 'Zij' (line 1952)
    Zij_569547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 27), 'Zij', False)
    # Obtaining the member '__getitem__' of a type (line 1952)
    getitem___569548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 27), Zij_569547, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1952)
    subscript_call_result_569549 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 27), getitem___569548, i_569546)
    
    # Processing the call keyword arguments (line 1952)
    int_569550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 40), 'int')
    keyword_569551 = int_569550
    kwargs_569552 = {'axis': keyword_569551}
    # Getting the type of 'np' (line 1952)
    np_569544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 19), 'np', False)
    # Obtaining the member 'mean' of a type (line 1952)
    mean_569545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 19), np_569544, 'mean')
    # Calling mean(args, kwargs) (line 1952)
    mean_call_result_569553 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 19), mean_569545, *[subscript_call_result_569549], **kwargs_569552)
    
    # Getting the type of 'Zbari' (line 1952)
    Zbari_569554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 8), 'Zbari')
    # Getting the type of 'i' (line 1952)
    i_569555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 14), 'i')
    # Storing an element on a container (line 1952)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1952, 8), Zbari_569554, (i_569555, mean_call_result_569553))
    
    # Getting the type of 'Zbar' (line 1953)
    Zbar_569556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 8), 'Zbar')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1953)
    i_569557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 22), 'i')
    # Getting the type of 'Zbari' (line 1953)
    Zbari_569558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 16), 'Zbari')
    # Obtaining the member '__getitem__' of a type (line 1953)
    getitem___569559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1953, 16), Zbari_569558, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1953)
    subscript_call_result_569560 = invoke(stypy.reporting.localization.Localization(__file__, 1953, 16), getitem___569559, i_569557)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1953)
    i_569561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 30), 'i')
    # Getting the type of 'Ni' (line 1953)
    Ni_569562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 27), 'Ni')
    # Obtaining the member '__getitem__' of a type (line 1953)
    getitem___569563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1953, 27), Ni_569562, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1953)
    subscript_call_result_569564 = invoke(stypy.reporting.localization.Localization(__file__, 1953, 27), getitem___569563, i_569561)
    
    # Applying the binary operator '*' (line 1953)
    result_mul_569565 = python_operator(stypy.reporting.localization.Localization(__file__, 1953, 16), '*', subscript_call_result_569560, subscript_call_result_569564)
    
    # Applying the binary operator '+=' (line 1953)
    result_iadd_569566 = python_operator(stypy.reporting.localization.Localization(__file__, 1953, 8), '+=', Zbar_569556, result_mul_569565)
    # Assigning a type to the variable 'Zbar' (line 1953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1953, 8), 'Zbar', result_iadd_569566)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'Zbar' (line 1955)
    Zbar_569567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1955, 4), 'Zbar')
    # Getting the type of 'Ntot' (line 1955)
    Ntot_569568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1955, 12), 'Ntot')
    # Applying the binary operator 'div=' (line 1955)
    result_div_569569 = python_operator(stypy.reporting.localization.Localization(__file__, 1955, 4), 'div=', Zbar_569567, Ntot_569568)
    # Assigning a type to the variable 'Zbar' (line 1955)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1955, 4), 'Zbar', result_div_569569)
    
    
    # Assigning a BinOp to a Name (line 1956):
    
    # Assigning a BinOp to a Name (line 1956):
    # Getting the type of 'Ntot' (line 1956)
    Ntot_569570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 13), 'Ntot')
    # Getting the type of 'k' (line 1956)
    k_569571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 20), 'k')
    # Applying the binary operator '-' (line 1956)
    result_sub_569572 = python_operator(stypy.reporting.localization.Localization(__file__, 1956, 13), '-', Ntot_569570, k_569571)
    
    
    # Call to sum(...): (line 1956)
    # Processing the call arguments (line 1956)
    # Getting the type of 'Ni' (line 1956)
    Ni_569575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 32), 'Ni', False)
    # Getting the type of 'Zbari' (line 1956)
    Zbari_569576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 38), 'Zbari', False)
    # Getting the type of 'Zbar' (line 1956)
    Zbar_569577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 46), 'Zbar', False)
    # Applying the binary operator '-' (line 1956)
    result_sub_569578 = python_operator(stypy.reporting.localization.Localization(__file__, 1956, 38), '-', Zbari_569576, Zbar_569577)
    
    int_569579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1956, 53), 'int')
    # Applying the binary operator '**' (line 1956)
    result_pow_569580 = python_operator(stypy.reporting.localization.Localization(__file__, 1956, 37), '**', result_sub_569578, int_569579)
    
    # Applying the binary operator '*' (line 1956)
    result_mul_569581 = python_operator(stypy.reporting.localization.Localization(__file__, 1956, 32), '*', Ni_569575, result_pow_569580)
    
    # Processing the call keyword arguments (line 1956)
    int_569582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1956, 61), 'int')
    keyword_569583 = int_569582
    kwargs_569584 = {'axis': keyword_569583}
    # Getting the type of 'np' (line 1956)
    np_569573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 25), 'np', False)
    # Obtaining the member 'sum' of a type (line 1956)
    sum_569574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 25), np_569573, 'sum')
    # Calling sum(args, kwargs) (line 1956)
    sum_call_result_569585 = invoke(stypy.reporting.localization.Localization(__file__, 1956, 25), sum_569574, *[result_mul_569581], **kwargs_569584)
    
    # Applying the binary operator '*' (line 1956)
    result_mul_569586 = python_operator(stypy.reporting.localization.Localization(__file__, 1956, 12), '*', result_sub_569572, sum_call_result_569585)
    
    # Assigning a type to the variable 'numer' (line 1956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 4), 'numer', result_mul_569586)
    
    # Assigning a Num to a Name (line 1959):
    
    # Assigning a Num to a Name (line 1959):
    float_569587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1959, 11), 'float')
    # Assigning a type to the variable 'dvar' (line 1959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'dvar', float_569587)
    
    
    # Call to range(...): (line 1960)
    # Processing the call arguments (line 1960)
    # Getting the type of 'k' (line 1960)
    k_569589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 19), 'k', False)
    # Processing the call keyword arguments (line 1960)
    kwargs_569590 = {}
    # Getting the type of 'range' (line 1960)
    range_569588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 13), 'range', False)
    # Calling range(args, kwargs) (line 1960)
    range_call_result_569591 = invoke(stypy.reporting.localization.Localization(__file__, 1960, 13), range_569588, *[k_569589], **kwargs_569590)
    
    # Testing the type of a for loop iterable (line 1960)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1960, 4), range_call_result_569591)
    # Getting the type of the for loop variable (line 1960)
    for_loop_var_569592 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1960, 4), range_call_result_569591)
    # Assigning a type to the variable 'i' (line 1960)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1960, 4), 'i', for_loop_var_569592)
    # SSA begins for a for statement (line 1960)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'dvar' (line 1961)
    dvar_569593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 8), 'dvar')
    
    # Call to sum(...): (line 1961)
    # Processing the call arguments (line 1961)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1961)
    i_569596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 28), 'i', False)
    # Getting the type of 'Zij' (line 1961)
    Zij_569597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 24), 'Zij', False)
    # Obtaining the member '__getitem__' of a type (line 1961)
    getitem___569598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1961, 24), Zij_569597, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1961)
    subscript_call_result_569599 = invoke(stypy.reporting.localization.Localization(__file__, 1961, 24), getitem___569598, i_569596)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1961)
    i_569600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 39), 'i', False)
    # Getting the type of 'Zbari' (line 1961)
    Zbari_569601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 33), 'Zbari', False)
    # Obtaining the member '__getitem__' of a type (line 1961)
    getitem___569602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1961, 33), Zbari_569601, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1961)
    subscript_call_result_569603 = invoke(stypy.reporting.localization.Localization(__file__, 1961, 33), getitem___569602, i_569600)
    
    # Applying the binary operator '-' (line 1961)
    result_sub_569604 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 24), '-', subscript_call_result_569599, subscript_call_result_569603)
    
    int_569605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1961, 44), 'int')
    # Applying the binary operator '**' (line 1961)
    result_pow_569606 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 23), '**', result_sub_569604, int_569605)
    
    # Processing the call keyword arguments (line 1961)
    int_569607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1961, 52), 'int')
    keyword_569608 = int_569607
    kwargs_569609 = {'axis': keyword_569608}
    # Getting the type of 'np' (line 1961)
    np_569594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 16), 'np', False)
    # Obtaining the member 'sum' of a type (line 1961)
    sum_569595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1961, 16), np_569594, 'sum')
    # Calling sum(args, kwargs) (line 1961)
    sum_call_result_569610 = invoke(stypy.reporting.localization.Localization(__file__, 1961, 16), sum_569595, *[result_pow_569606], **kwargs_569609)
    
    # Applying the binary operator '+=' (line 1961)
    result_iadd_569611 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 8), '+=', dvar_569593, sum_call_result_569610)
    # Assigning a type to the variable 'dvar' (line 1961)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1961, 8), 'dvar', result_iadd_569611)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1963):
    
    # Assigning a BinOp to a Name (line 1963):
    # Getting the type of 'k' (line 1963)
    k_569612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 13), 'k')
    float_569613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1963, 17), 'float')
    # Applying the binary operator '-' (line 1963)
    result_sub_569614 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 13), '-', k_569612, float_569613)
    
    # Getting the type of 'dvar' (line 1963)
    dvar_569615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 24), 'dvar')
    # Applying the binary operator '*' (line 1963)
    result_mul_569616 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 12), '*', result_sub_569614, dvar_569615)
    
    # Assigning a type to the variable 'denom' (line 1963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 4), 'denom', result_mul_569616)
    
    # Assigning a BinOp to a Name (line 1965):
    
    # Assigning a BinOp to a Name (line 1965):
    # Getting the type of 'numer' (line 1965)
    numer_569617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 8), 'numer')
    # Getting the type of 'denom' (line 1965)
    denom_569618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 16), 'denom')
    # Applying the binary operator 'div' (line 1965)
    result_div_569619 = python_operator(stypy.reporting.localization.Localization(__file__, 1965, 8), 'div', numer_569617, denom_569618)
    
    # Assigning a type to the variable 'W' (line 1965)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1965, 4), 'W', result_div_569619)
    
    # Assigning a Call to a Name (line 1966):
    
    # Assigning a Call to a Name (line 1966):
    
    # Call to sf(...): (line 1966)
    # Processing the call arguments (line 1966)
    # Getting the type of 'W' (line 1966)
    W_569623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 30), 'W', False)
    # Getting the type of 'k' (line 1966)
    k_569624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 33), 'k', False)
    int_569625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1966, 35), 'int')
    # Applying the binary operator '-' (line 1966)
    result_sub_569626 = python_operator(stypy.reporting.localization.Localization(__file__, 1966, 33), '-', k_569624, int_569625)
    
    # Getting the type of 'Ntot' (line 1966)
    Ntot_569627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 38), 'Ntot', False)
    # Getting the type of 'k' (line 1966)
    k_569628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 43), 'k', False)
    # Applying the binary operator '-' (line 1966)
    result_sub_569629 = python_operator(stypy.reporting.localization.Localization(__file__, 1966, 38), '-', Ntot_569627, k_569628)
    
    # Processing the call keyword arguments (line 1966)
    kwargs_569630 = {}
    # Getting the type of 'distributions' (line 1966)
    distributions_569620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 11), 'distributions', False)
    # Obtaining the member 'f' of a type (line 1966)
    f_569621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1966, 11), distributions_569620, 'f')
    # Obtaining the member 'sf' of a type (line 1966)
    sf_569622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1966, 11), f_569621, 'sf')
    # Calling sf(args, kwargs) (line 1966)
    sf_call_result_569631 = invoke(stypy.reporting.localization.Localization(__file__, 1966, 11), sf_569622, *[W_569623, result_sub_569626, result_sub_569629], **kwargs_569630)
    
    # Assigning a type to the variable 'pval' (line 1966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1966, 4), 'pval', sf_call_result_569631)
    
    # Call to LeveneResult(...): (line 1967)
    # Processing the call arguments (line 1967)
    # Getting the type of 'W' (line 1967)
    W_569633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 24), 'W', False)
    # Getting the type of 'pval' (line 1967)
    pval_569634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 27), 'pval', False)
    # Processing the call keyword arguments (line 1967)
    kwargs_569635 = {}
    # Getting the type of 'LeveneResult' (line 1967)
    LeveneResult_569632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 11), 'LeveneResult', False)
    # Calling LeveneResult(args, kwargs) (line 1967)
    LeveneResult_call_result_569636 = invoke(stypy.reporting.localization.Localization(__file__, 1967, 11), LeveneResult_569632, *[W_569633, pval_569634], **kwargs_569635)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1967)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1967, 4), 'stypy_return_type', LeveneResult_call_result_569636)
    
    # ################# End of 'levene(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'levene' in the type store
    # Getting the type of 'stypy_return_type' (line 1860)
    stypy_return_type_569637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_569637)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'levene'
    return stypy_return_type_569637

# Assigning a type to the variable 'levene' (line 1860)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 0), 'levene', levene)

@norecursion
def binom_test(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1971)
    None_569638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 20), 'None')
    float_569639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1971, 28), 'float')
    str_569640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1971, 45), 'str', 'two-sided')
    defaults = [None_569638, float_569639, str_569640]
    # Create a new context for function 'binom_test'
    module_type_store = module_type_store.open_function_context('binom_test', 1970, 0, False)
    
    # Passed parameters checking function
    binom_test.stypy_localization = localization
    binom_test.stypy_type_of_self = None
    binom_test.stypy_type_store = module_type_store
    binom_test.stypy_function_name = 'binom_test'
    binom_test.stypy_param_names_list = ['x', 'n', 'p', 'alternative']
    binom_test.stypy_varargs_param_name = None
    binom_test.stypy_kwargs_param_name = None
    binom_test.stypy_call_defaults = defaults
    binom_test.stypy_call_varargs = varargs
    binom_test.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'binom_test', ['x', 'n', 'p', 'alternative'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'binom_test', localization, ['x', 'n', 'p', 'alternative'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'binom_test(...)' code ##################

    str_569641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2003, (-1)), 'str', "\n    Perform a test that the probability of success is p.\n\n    This is an exact, two-sided test of the null hypothesis\n    that the probability of success in a Bernoulli experiment\n    is `p`.\n\n    Parameters\n    ----------\n    x : integer or array_like\n        the number of successes, or if x has length 2, it is the\n        number of successes and the number of failures.\n    n : integer\n        the number of trials.  This is ignored if x gives both the\n        number of successes and failures\n    p : float, optional\n        The hypothesized probability of success.  0 <= p <= 1. The\n        default value is p = 0.5\n    alternative : {'two-sided', 'greater', 'less'}, optional\n        Indicates the alternative hypothesis. The default value is\n        'two-sided'.\n\n    Returns\n    -------\n    p-value : float\n        The p-value of the hypothesis test\n\n    References\n    ----------\n    .. [1] http://en.wikipedia.org/wiki/Binomial_test\n\n    ")
    
    # Assigning a Call to a Name (line 2004):
    
    # Assigning a Call to a Name (line 2004):
    
    # Call to astype(...): (line 2004)
    # Processing the call arguments (line 2004)
    # Getting the type of 'np' (line 2004)
    np_569647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 29), 'np', False)
    # Obtaining the member 'integer' of a type (line 2004)
    integer_569648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 29), np_569647, 'integer')
    # Processing the call keyword arguments (line 2004)
    kwargs_569649 = {}
    
    # Call to atleast_1d(...): (line 2004)
    # Processing the call arguments (line 2004)
    # Getting the type of 'x' (line 2004)
    x_569643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 19), 'x', False)
    # Processing the call keyword arguments (line 2004)
    kwargs_569644 = {}
    # Getting the type of 'atleast_1d' (line 2004)
    atleast_1d_569642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2004)
    atleast_1d_call_result_569645 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 8), atleast_1d_569642, *[x_569643], **kwargs_569644)
    
    # Obtaining the member 'astype' of a type (line 2004)
    astype_569646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 8), atleast_1d_call_result_569645, 'astype')
    # Calling astype(args, kwargs) (line 2004)
    astype_call_result_569650 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 8), astype_569646, *[integer_569648], **kwargs_569649)
    
    # Assigning a type to the variable 'x' (line 2004)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2004, 4), 'x', astype_call_result_569650)
    
    
    
    # Call to len(...): (line 2005)
    # Processing the call arguments (line 2005)
    # Getting the type of 'x' (line 2005)
    x_569652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 11), 'x', False)
    # Processing the call keyword arguments (line 2005)
    kwargs_569653 = {}
    # Getting the type of 'len' (line 2005)
    len_569651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 7), 'len', False)
    # Calling len(args, kwargs) (line 2005)
    len_call_result_569654 = invoke(stypy.reporting.localization.Localization(__file__, 2005, 7), len_569651, *[x_569652], **kwargs_569653)
    
    int_569655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2005, 17), 'int')
    # Applying the binary operator '==' (line 2005)
    result_eq_569656 = python_operator(stypy.reporting.localization.Localization(__file__, 2005, 7), '==', len_call_result_569654, int_569655)
    
    # Testing the type of an if condition (line 2005)
    if_condition_569657 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2005, 4), result_eq_569656)
    # Assigning a type to the variable 'if_condition_569657' (line 2005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2005, 4), 'if_condition_569657', if_condition_569657)
    # SSA begins for if statement (line 2005)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2006):
    
    # Assigning a BinOp to a Name (line 2006):
    
    # Obtaining the type of the subscript
    int_569658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2006, 14), 'int')
    # Getting the type of 'x' (line 2006)
    x_569659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 12), 'x')
    # Obtaining the member '__getitem__' of a type (line 2006)
    getitem___569660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2006, 12), x_569659, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2006)
    subscript_call_result_569661 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 12), getitem___569660, int_569658)
    
    
    # Obtaining the type of the subscript
    int_569662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2006, 21), 'int')
    # Getting the type of 'x' (line 2006)
    x_569663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 19), 'x')
    # Obtaining the member '__getitem__' of a type (line 2006)
    getitem___569664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2006, 19), x_569663, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2006)
    subscript_call_result_569665 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 19), getitem___569664, int_569662)
    
    # Applying the binary operator '+' (line 2006)
    result_add_569666 = python_operator(stypy.reporting.localization.Localization(__file__, 2006, 12), '+', subscript_call_result_569661, subscript_call_result_569665)
    
    # Assigning a type to the variable 'n' (line 2006)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2006, 8), 'n', result_add_569666)
    
    # Assigning a Subscript to a Name (line 2007):
    
    # Assigning a Subscript to a Name (line 2007):
    
    # Obtaining the type of the subscript
    int_569667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2007, 14), 'int')
    # Getting the type of 'x' (line 2007)
    x_569668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 12), 'x')
    # Obtaining the member '__getitem__' of a type (line 2007)
    getitem___569669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2007, 12), x_569668, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2007)
    subscript_call_result_569670 = invoke(stypy.reporting.localization.Localization(__file__, 2007, 12), getitem___569669, int_569667)
    
    # Assigning a type to the variable 'x' (line 2007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2007, 8), 'x', subscript_call_result_569670)
    # SSA branch for the else part of an if statement (line 2005)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 2008)
    # Processing the call arguments (line 2008)
    # Getting the type of 'x' (line 2008)
    x_569672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 13), 'x', False)
    # Processing the call keyword arguments (line 2008)
    kwargs_569673 = {}
    # Getting the type of 'len' (line 2008)
    len_569671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 9), 'len', False)
    # Calling len(args, kwargs) (line 2008)
    len_call_result_569674 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 9), len_569671, *[x_569672], **kwargs_569673)
    
    int_569675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2008, 19), 'int')
    # Applying the binary operator '==' (line 2008)
    result_eq_569676 = python_operator(stypy.reporting.localization.Localization(__file__, 2008, 9), '==', len_call_result_569674, int_569675)
    
    # Testing the type of an if condition (line 2008)
    if_condition_569677 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2008, 9), result_eq_569676)
    # Assigning a type to the variable 'if_condition_569677' (line 2008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2008, 9), 'if_condition_569677', if_condition_569677)
    # SSA begins for if statement (line 2008)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2009):
    
    # Assigning a Subscript to a Name (line 2009):
    
    # Obtaining the type of the subscript
    int_569678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2009, 14), 'int')
    # Getting the type of 'x' (line 2009)
    x_569679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 12), 'x')
    # Obtaining the member '__getitem__' of a type (line 2009)
    getitem___569680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 12), x_569679, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2009)
    subscript_call_result_569681 = invoke(stypy.reporting.localization.Localization(__file__, 2009, 12), getitem___569680, int_569678)
    
    # Assigning a type to the variable 'x' (line 2009)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2009, 8), 'x', subscript_call_result_569681)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 2010)
    n_569682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 11), 'n')
    # Getting the type of 'None' (line 2010)
    None_569683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 16), 'None')
    # Applying the binary operator 'is' (line 2010)
    result_is__569684 = python_operator(stypy.reporting.localization.Localization(__file__, 2010, 11), 'is', n_569682, None_569683)
    
    
    # Getting the type of 'n' (line 2010)
    n_569685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 24), 'n')
    # Getting the type of 'x' (line 2010)
    x_569686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 28), 'x')
    # Applying the binary operator '<' (line 2010)
    result_lt_569687 = python_operator(stypy.reporting.localization.Localization(__file__, 2010, 24), '<', n_569685, x_569686)
    
    # Applying the binary operator 'or' (line 2010)
    result_or_keyword_569688 = python_operator(stypy.reporting.localization.Localization(__file__, 2010, 11), 'or', result_is__569684, result_lt_569687)
    
    # Testing the type of an if condition (line 2010)
    if_condition_569689 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2010, 8), result_or_keyword_569688)
    # Assigning a type to the variable 'if_condition_569689' (line 2010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2010, 8), 'if_condition_569689', if_condition_569689)
    # SSA begins for if statement (line 2010)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2011)
    # Processing the call arguments (line 2011)
    str_569691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2011, 29), 'str', 'n must be >= x')
    # Processing the call keyword arguments (line 2011)
    kwargs_569692 = {}
    # Getting the type of 'ValueError' (line 2011)
    ValueError_569690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2011)
    ValueError_call_result_569693 = invoke(stypy.reporting.localization.Localization(__file__, 2011, 18), ValueError_569690, *[str_569691], **kwargs_569692)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2011, 12), ValueError_call_result_569693, 'raise parameter', BaseException)
    # SSA join for if statement (line 2010)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2012):
    
    # Assigning a Call to a Name (line 2012):
    
    # Call to int_(...): (line 2012)
    # Processing the call arguments (line 2012)
    # Getting the type of 'n' (line 2012)
    n_569696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 20), 'n', False)
    # Processing the call keyword arguments (line 2012)
    kwargs_569697 = {}
    # Getting the type of 'np' (line 2012)
    np_569694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 12), 'np', False)
    # Obtaining the member 'int_' of a type (line 2012)
    int__569695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2012, 12), np_569694, 'int_')
    # Calling int_(args, kwargs) (line 2012)
    int__call_result_569698 = invoke(stypy.reporting.localization.Localization(__file__, 2012, 12), int__569695, *[n_569696], **kwargs_569697)
    
    # Assigning a type to the variable 'n' (line 2012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2012, 8), 'n', int__call_result_569698)
    # SSA branch for the else part of an if statement (line 2008)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 2014)
    # Processing the call arguments (line 2014)
    str_569700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2014, 25), 'str', 'Incorrect length for x.')
    # Processing the call keyword arguments (line 2014)
    kwargs_569701 = {}
    # Getting the type of 'ValueError' (line 2014)
    ValueError_569699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2014)
    ValueError_call_result_569702 = invoke(stypy.reporting.localization.Localization(__file__, 2014, 14), ValueError_569699, *[str_569700], **kwargs_569701)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2014, 8), ValueError_call_result_569702, 'raise parameter', BaseException)
    # SSA join for if statement (line 2008)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2005)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'p' (line 2016)
    p_569703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 8), 'p')
    float_569704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2016, 12), 'float')
    # Applying the binary operator '>' (line 2016)
    result_gt_569705 = python_operator(stypy.reporting.localization.Localization(__file__, 2016, 8), '>', p_569703, float_569704)
    
    
    # Getting the type of 'p' (line 2016)
    p_569706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 21), 'p')
    float_569707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2016, 25), 'float')
    # Applying the binary operator '<' (line 2016)
    result_lt_569708 = python_operator(stypy.reporting.localization.Localization(__file__, 2016, 21), '<', p_569706, float_569707)
    
    # Applying the binary operator 'or' (line 2016)
    result_or_keyword_569709 = python_operator(stypy.reporting.localization.Localization(__file__, 2016, 7), 'or', result_gt_569705, result_lt_569708)
    
    # Testing the type of an if condition (line 2016)
    if_condition_569710 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2016, 4), result_or_keyword_569709)
    # Assigning a type to the variable 'if_condition_569710' (line 2016)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2016, 4), 'if_condition_569710', if_condition_569710)
    # SSA begins for if statement (line 2016)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2017)
    # Processing the call arguments (line 2017)
    str_569712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2017, 25), 'str', 'p must be in range [0,1]')
    # Processing the call keyword arguments (line 2017)
    kwargs_569713 = {}
    # Getting the type of 'ValueError' (line 2017)
    ValueError_569711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2017)
    ValueError_call_result_569714 = invoke(stypy.reporting.localization.Localization(__file__, 2017, 14), ValueError_569711, *[str_569712], **kwargs_569713)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2017, 8), ValueError_call_result_569714, 'raise parameter', BaseException)
    # SSA join for if statement (line 2016)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'alternative' (line 2019)
    alternative_569715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2019, 7), 'alternative')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2019)
    tuple_569716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2019, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2019)
    # Adding element type (line 2019)
    str_569717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2019, 27), 'str', 'two-sided')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2019, 27), tuple_569716, str_569717)
    # Adding element type (line 2019)
    str_569718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2019, 40), 'str', 'less')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2019, 27), tuple_569716, str_569718)
    # Adding element type (line 2019)
    str_569719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2019, 48), 'str', 'greater')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2019, 27), tuple_569716, str_569719)
    
    # Applying the binary operator 'notin' (line 2019)
    result_contains_569720 = python_operator(stypy.reporting.localization.Localization(__file__, 2019, 7), 'notin', alternative_569715, tuple_569716)
    
    # Testing the type of an if condition (line 2019)
    if_condition_569721 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2019, 4), result_contains_569720)
    # Assigning a type to the variable 'if_condition_569721' (line 2019)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2019, 4), 'if_condition_569721', if_condition_569721)
    # SSA begins for if statement (line 2019)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2020)
    # Processing the call arguments (line 2020)
    str_569723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2020, 25), 'str', "alternative not recognized\nshould be 'two-sided', 'less' or 'greater'")
    # Processing the call keyword arguments (line 2020)
    kwargs_569724 = {}
    # Getting the type of 'ValueError' (line 2020)
    ValueError_569722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2020)
    ValueError_call_result_569725 = invoke(stypy.reporting.localization.Localization(__file__, 2020, 14), ValueError_569722, *[str_569723], **kwargs_569724)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2020, 8), ValueError_call_result_569725, 'raise parameter', BaseException)
    # SSA join for if statement (line 2019)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'alternative' (line 2023)
    alternative_569726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 7), 'alternative')
    str_569727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 22), 'str', 'less')
    # Applying the binary operator '==' (line 2023)
    result_eq_569728 = python_operator(stypy.reporting.localization.Localization(__file__, 2023, 7), '==', alternative_569726, str_569727)
    
    # Testing the type of an if condition (line 2023)
    if_condition_569729 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2023, 4), result_eq_569728)
    # Assigning a type to the variable 'if_condition_569729' (line 2023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2023, 4), 'if_condition_569729', if_condition_569729)
    # SSA begins for if statement (line 2023)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2024):
    
    # Assigning a Call to a Name (line 2024):
    
    # Call to cdf(...): (line 2024)
    # Processing the call arguments (line 2024)
    # Getting the type of 'x' (line 2024)
    x_569733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 39), 'x', False)
    # Getting the type of 'n' (line 2024)
    n_569734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 42), 'n', False)
    # Getting the type of 'p' (line 2024)
    p_569735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 45), 'p', False)
    # Processing the call keyword arguments (line 2024)
    kwargs_569736 = {}
    # Getting the type of 'distributions' (line 2024)
    distributions_569730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 15), 'distributions', False)
    # Obtaining the member 'binom' of a type (line 2024)
    binom_569731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2024, 15), distributions_569730, 'binom')
    # Obtaining the member 'cdf' of a type (line 2024)
    cdf_569732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2024, 15), binom_569731, 'cdf')
    # Calling cdf(args, kwargs) (line 2024)
    cdf_call_result_569737 = invoke(stypy.reporting.localization.Localization(__file__, 2024, 15), cdf_569732, *[x_569733, n_569734, p_569735], **kwargs_569736)
    
    # Assigning a type to the variable 'pval' (line 2024)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2024, 8), 'pval', cdf_call_result_569737)
    # Getting the type of 'pval' (line 2025)
    pval_569738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 15), 'pval')
    # Assigning a type to the variable 'stypy_return_type' (line 2025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2025, 8), 'stypy_return_type', pval_569738)
    # SSA join for if statement (line 2023)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'alternative' (line 2027)
    alternative_569739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 7), 'alternative')
    str_569740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2027, 22), 'str', 'greater')
    # Applying the binary operator '==' (line 2027)
    result_eq_569741 = python_operator(stypy.reporting.localization.Localization(__file__, 2027, 7), '==', alternative_569739, str_569740)
    
    # Testing the type of an if condition (line 2027)
    if_condition_569742 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2027, 4), result_eq_569741)
    # Assigning a type to the variable 'if_condition_569742' (line 2027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 4), 'if_condition_569742', if_condition_569742)
    # SSA begins for if statement (line 2027)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2028):
    
    # Assigning a Call to a Name (line 2028):
    
    # Call to sf(...): (line 2028)
    # Processing the call arguments (line 2028)
    # Getting the type of 'x' (line 2028)
    x_569746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 38), 'x', False)
    int_569747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2028, 40), 'int')
    # Applying the binary operator '-' (line 2028)
    result_sub_569748 = python_operator(stypy.reporting.localization.Localization(__file__, 2028, 38), '-', x_569746, int_569747)
    
    # Getting the type of 'n' (line 2028)
    n_569749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 43), 'n', False)
    # Getting the type of 'p' (line 2028)
    p_569750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 46), 'p', False)
    # Processing the call keyword arguments (line 2028)
    kwargs_569751 = {}
    # Getting the type of 'distributions' (line 2028)
    distributions_569743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 15), 'distributions', False)
    # Obtaining the member 'binom' of a type (line 2028)
    binom_569744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2028, 15), distributions_569743, 'binom')
    # Obtaining the member 'sf' of a type (line 2028)
    sf_569745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2028, 15), binom_569744, 'sf')
    # Calling sf(args, kwargs) (line 2028)
    sf_call_result_569752 = invoke(stypy.reporting.localization.Localization(__file__, 2028, 15), sf_569745, *[result_sub_569748, n_569749, p_569750], **kwargs_569751)
    
    # Assigning a type to the variable 'pval' (line 2028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2028, 8), 'pval', sf_call_result_569752)
    # Getting the type of 'pval' (line 2029)
    pval_569753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 15), 'pval')
    # Assigning a type to the variable 'stypy_return_type' (line 2029)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2029, 8), 'stypy_return_type', pval_569753)
    # SSA join for if statement (line 2027)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2032):
    
    # Assigning a Call to a Name (line 2032):
    
    # Call to pmf(...): (line 2032)
    # Processing the call arguments (line 2032)
    # Getting the type of 'x' (line 2032)
    x_569757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 32), 'x', False)
    # Getting the type of 'n' (line 2032)
    n_569758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 35), 'n', False)
    # Getting the type of 'p' (line 2032)
    p_569759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 38), 'p', False)
    # Processing the call keyword arguments (line 2032)
    kwargs_569760 = {}
    # Getting the type of 'distributions' (line 2032)
    distributions_569754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 8), 'distributions', False)
    # Obtaining the member 'binom' of a type (line 2032)
    binom_569755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2032, 8), distributions_569754, 'binom')
    # Obtaining the member 'pmf' of a type (line 2032)
    pmf_569756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2032, 8), binom_569755, 'pmf')
    # Calling pmf(args, kwargs) (line 2032)
    pmf_call_result_569761 = invoke(stypy.reporting.localization.Localization(__file__, 2032, 8), pmf_569756, *[x_569757, n_569758, p_569759], **kwargs_569760)
    
    # Assigning a type to the variable 'd' (line 2032)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2032, 4), 'd', pmf_call_result_569761)
    
    # Assigning a BinOp to a Name (line 2033):
    
    # Assigning a BinOp to a Name (line 2033):
    int_569762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2033, 11), 'int')
    float_569763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2033, 15), 'float')
    # Applying the binary operator '+' (line 2033)
    result_add_569764 = python_operator(stypy.reporting.localization.Localization(__file__, 2033, 11), '+', int_569762, float_569763)
    
    # Assigning a type to the variable 'rerr' (line 2033)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2033, 4), 'rerr', result_add_569764)
    
    
    # Getting the type of 'x' (line 2034)
    x_569765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 7), 'x')
    # Getting the type of 'p' (line 2034)
    p_569766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 12), 'p')
    # Getting the type of 'n' (line 2034)
    n_569767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 16), 'n')
    # Applying the binary operator '*' (line 2034)
    result_mul_569768 = python_operator(stypy.reporting.localization.Localization(__file__, 2034, 12), '*', p_569766, n_569767)
    
    # Applying the binary operator '==' (line 2034)
    result_eq_569769 = python_operator(stypy.reporting.localization.Localization(__file__, 2034, 7), '==', x_569765, result_mul_569768)
    
    # Testing the type of an if condition (line 2034)
    if_condition_569770 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2034, 4), result_eq_569769)
    # Assigning a type to the variable 'if_condition_569770' (line 2034)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2034, 4), 'if_condition_569770', if_condition_569770)
    # SSA begins for if statement (line 2034)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 2036):
    
    # Assigning a Num to a Name (line 2036):
    float_569771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2036, 15), 'float')
    # Assigning a type to the variable 'pval' (line 2036)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2036, 8), 'pval', float_569771)
    # SSA branch for the else part of an if statement (line 2034)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'x' (line 2037)
    x_569772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 9), 'x')
    # Getting the type of 'p' (line 2037)
    p_569773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 13), 'p')
    # Getting the type of 'n' (line 2037)
    n_569774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 17), 'n')
    # Applying the binary operator '*' (line 2037)
    result_mul_569775 = python_operator(stypy.reporting.localization.Localization(__file__, 2037, 13), '*', p_569773, n_569774)
    
    # Applying the binary operator '<' (line 2037)
    result_lt_569776 = python_operator(stypy.reporting.localization.Localization(__file__, 2037, 9), '<', x_569772, result_mul_569775)
    
    # Testing the type of an if condition (line 2037)
    if_condition_569777 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2037, 9), result_lt_569776)
    # Assigning a type to the variable 'if_condition_569777' (line 2037)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 9), 'if_condition_569777', if_condition_569777)
    # SSA begins for if statement (line 2037)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2038):
    
    # Assigning a Call to a Name (line 2038):
    
    # Call to arange(...): (line 2038)
    # Processing the call arguments (line 2038)
    
    # Call to ceil(...): (line 2038)
    # Processing the call arguments (line 2038)
    # Getting the type of 'p' (line 2038)
    p_569782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 30), 'p', False)
    # Getting the type of 'n' (line 2038)
    n_569783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 34), 'n', False)
    # Applying the binary operator '*' (line 2038)
    result_mul_569784 = python_operator(stypy.reporting.localization.Localization(__file__, 2038, 30), '*', p_569782, n_569783)
    
    # Processing the call keyword arguments (line 2038)
    kwargs_569785 = {}
    # Getting the type of 'np' (line 2038)
    np_569780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 22), 'np', False)
    # Obtaining the member 'ceil' of a type (line 2038)
    ceil_569781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 22), np_569780, 'ceil')
    # Calling ceil(args, kwargs) (line 2038)
    ceil_call_result_569786 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 22), ceil_569781, *[result_mul_569784], **kwargs_569785)
    
    # Getting the type of 'n' (line 2038)
    n_569787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 38), 'n', False)
    int_569788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2038, 40), 'int')
    # Applying the binary operator '+' (line 2038)
    result_add_569789 = python_operator(stypy.reporting.localization.Localization(__file__, 2038, 38), '+', n_569787, int_569788)
    
    # Processing the call keyword arguments (line 2038)
    kwargs_569790 = {}
    # Getting the type of 'np' (line 2038)
    np_569778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 12), 'np', False)
    # Obtaining the member 'arange' of a type (line 2038)
    arange_569779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 12), np_569778, 'arange')
    # Calling arange(args, kwargs) (line 2038)
    arange_call_result_569791 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 12), arange_569779, *[ceil_call_result_569786, result_add_569789], **kwargs_569790)
    
    # Assigning a type to the variable 'i' (line 2038)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2038, 8), 'i', arange_call_result_569791)
    
    # Assigning a Call to a Name (line 2039):
    
    # Assigning a Call to a Name (line 2039):
    
    # Call to sum(...): (line 2039)
    # Processing the call arguments (line 2039)
    
    
    # Call to pmf(...): (line 2039)
    # Processing the call arguments (line 2039)
    # Getting the type of 'i' (line 2039)
    i_569797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 43), 'i', False)
    # Getting the type of 'n' (line 2039)
    n_569798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 46), 'n', False)
    # Getting the type of 'p' (line 2039)
    p_569799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 49), 'p', False)
    # Processing the call keyword arguments (line 2039)
    kwargs_569800 = {}
    # Getting the type of 'distributions' (line 2039)
    distributions_569794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 19), 'distributions', False)
    # Obtaining the member 'binom' of a type (line 2039)
    binom_569795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2039, 19), distributions_569794, 'binom')
    # Obtaining the member 'pmf' of a type (line 2039)
    pmf_569796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2039, 19), binom_569795, 'pmf')
    # Calling pmf(args, kwargs) (line 2039)
    pmf_call_result_569801 = invoke(stypy.reporting.localization.Localization(__file__, 2039, 19), pmf_569796, *[i_569797, n_569798, p_569799], **kwargs_569800)
    
    # Getting the type of 'd' (line 2039)
    d_569802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 55), 'd', False)
    # Getting the type of 'rerr' (line 2039)
    rerr_569803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 57), 'rerr', False)
    # Applying the binary operator '*' (line 2039)
    result_mul_569804 = python_operator(stypy.reporting.localization.Localization(__file__, 2039, 55), '*', d_569802, rerr_569803)
    
    # Applying the binary operator '<=' (line 2039)
    result_le_569805 = python_operator(stypy.reporting.localization.Localization(__file__, 2039, 19), '<=', pmf_call_result_569801, result_mul_569804)
    
    # Processing the call keyword arguments (line 2039)
    int_569806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2039, 68), 'int')
    keyword_569807 = int_569806
    kwargs_569808 = {'axis': keyword_569807}
    # Getting the type of 'np' (line 2039)
    np_569792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 12), 'np', False)
    # Obtaining the member 'sum' of a type (line 2039)
    sum_569793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2039, 12), np_569792, 'sum')
    # Calling sum(args, kwargs) (line 2039)
    sum_call_result_569809 = invoke(stypy.reporting.localization.Localization(__file__, 2039, 12), sum_569793, *[result_le_569805], **kwargs_569808)
    
    # Assigning a type to the variable 'y' (line 2039)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2039, 8), 'y', sum_call_result_569809)
    
    # Assigning a BinOp to a Name (line 2040):
    
    # Assigning a BinOp to a Name (line 2040):
    
    # Call to cdf(...): (line 2040)
    # Processing the call arguments (line 2040)
    # Getting the type of 'x' (line 2040)
    x_569813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 40), 'x', False)
    # Getting the type of 'n' (line 2040)
    n_569814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 43), 'n', False)
    # Getting the type of 'p' (line 2040)
    p_569815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 46), 'p', False)
    # Processing the call keyword arguments (line 2040)
    kwargs_569816 = {}
    # Getting the type of 'distributions' (line 2040)
    distributions_569810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 16), 'distributions', False)
    # Obtaining the member 'binom' of a type (line 2040)
    binom_569811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2040, 16), distributions_569810, 'binom')
    # Obtaining the member 'cdf' of a type (line 2040)
    cdf_569812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2040, 16), binom_569811, 'cdf')
    # Calling cdf(args, kwargs) (line 2040)
    cdf_call_result_569817 = invoke(stypy.reporting.localization.Localization(__file__, 2040, 16), cdf_569812, *[x_569813, n_569814, p_569815], **kwargs_569816)
    
    
    # Call to sf(...): (line 2041)
    # Processing the call arguments (line 2041)
    # Getting the type of 'n' (line 2041)
    n_569821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 39), 'n', False)
    # Getting the type of 'y' (line 2041)
    y_569822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 43), 'y', False)
    # Applying the binary operator '-' (line 2041)
    result_sub_569823 = python_operator(stypy.reporting.localization.Localization(__file__, 2041, 39), '-', n_569821, y_569822)
    
    # Getting the type of 'n' (line 2041)
    n_569824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 46), 'n', False)
    # Getting the type of 'p' (line 2041)
    p_569825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 49), 'p', False)
    # Processing the call keyword arguments (line 2041)
    kwargs_569826 = {}
    # Getting the type of 'distributions' (line 2041)
    distributions_569818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 16), 'distributions', False)
    # Obtaining the member 'binom' of a type (line 2041)
    binom_569819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2041, 16), distributions_569818, 'binom')
    # Obtaining the member 'sf' of a type (line 2041)
    sf_569820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2041, 16), binom_569819, 'sf')
    # Calling sf(args, kwargs) (line 2041)
    sf_call_result_569827 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 16), sf_569820, *[result_sub_569823, n_569824, p_569825], **kwargs_569826)
    
    # Applying the binary operator '+' (line 2040)
    result_add_569828 = python_operator(stypy.reporting.localization.Localization(__file__, 2040, 16), '+', cdf_call_result_569817, sf_call_result_569827)
    
    # Assigning a type to the variable 'pval' (line 2040)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2040, 8), 'pval', result_add_569828)
    # SSA branch for the else part of an if statement (line 2037)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2043):
    
    # Assigning a Call to a Name (line 2043):
    
    # Call to arange(...): (line 2043)
    # Processing the call arguments (line 2043)
    
    # Call to floor(...): (line 2043)
    # Processing the call arguments (line 2043)
    # Getting the type of 'p' (line 2043)
    p_569833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 31), 'p', False)
    # Getting the type of 'n' (line 2043)
    n_569834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 33), 'n', False)
    # Applying the binary operator '*' (line 2043)
    result_mul_569835 = python_operator(stypy.reporting.localization.Localization(__file__, 2043, 31), '*', p_569833, n_569834)
    
    # Processing the call keyword arguments (line 2043)
    kwargs_569836 = {}
    # Getting the type of 'np' (line 2043)
    np_569831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 22), 'np', False)
    # Obtaining the member 'floor' of a type (line 2043)
    floor_569832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2043, 22), np_569831, 'floor')
    # Calling floor(args, kwargs) (line 2043)
    floor_call_result_569837 = invoke(stypy.reporting.localization.Localization(__file__, 2043, 22), floor_569832, *[result_mul_569835], **kwargs_569836)
    
    int_569838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 38), 'int')
    # Applying the binary operator '+' (line 2043)
    result_add_569839 = python_operator(stypy.reporting.localization.Localization(__file__, 2043, 22), '+', floor_call_result_569837, int_569838)
    
    # Processing the call keyword arguments (line 2043)
    kwargs_569840 = {}
    # Getting the type of 'np' (line 2043)
    np_569829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 12), 'np', False)
    # Obtaining the member 'arange' of a type (line 2043)
    arange_569830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2043, 12), np_569829, 'arange')
    # Calling arange(args, kwargs) (line 2043)
    arange_call_result_569841 = invoke(stypy.reporting.localization.Localization(__file__, 2043, 12), arange_569830, *[result_add_569839], **kwargs_569840)
    
    # Assigning a type to the variable 'i' (line 2043)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2043, 8), 'i', arange_call_result_569841)
    
    # Assigning a Call to a Name (line 2044):
    
    # Assigning a Call to a Name (line 2044):
    
    # Call to sum(...): (line 2044)
    # Processing the call arguments (line 2044)
    
    
    # Call to pmf(...): (line 2044)
    # Processing the call arguments (line 2044)
    # Getting the type of 'i' (line 2044)
    i_569847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 43), 'i', False)
    # Getting the type of 'n' (line 2044)
    n_569848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 46), 'n', False)
    # Getting the type of 'p' (line 2044)
    p_569849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 49), 'p', False)
    # Processing the call keyword arguments (line 2044)
    kwargs_569850 = {}
    # Getting the type of 'distributions' (line 2044)
    distributions_569844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 19), 'distributions', False)
    # Obtaining the member 'binom' of a type (line 2044)
    binom_569845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2044, 19), distributions_569844, 'binom')
    # Obtaining the member 'pmf' of a type (line 2044)
    pmf_569846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2044, 19), binom_569845, 'pmf')
    # Calling pmf(args, kwargs) (line 2044)
    pmf_call_result_569851 = invoke(stypy.reporting.localization.Localization(__file__, 2044, 19), pmf_569846, *[i_569847, n_569848, p_569849], **kwargs_569850)
    
    # Getting the type of 'd' (line 2044)
    d_569852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 55), 'd', False)
    # Getting the type of 'rerr' (line 2044)
    rerr_569853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 57), 'rerr', False)
    # Applying the binary operator '*' (line 2044)
    result_mul_569854 = python_operator(stypy.reporting.localization.Localization(__file__, 2044, 55), '*', d_569852, rerr_569853)
    
    # Applying the binary operator '<=' (line 2044)
    result_le_569855 = python_operator(stypy.reporting.localization.Localization(__file__, 2044, 19), '<=', pmf_call_result_569851, result_mul_569854)
    
    # Processing the call keyword arguments (line 2044)
    int_569856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2044, 68), 'int')
    keyword_569857 = int_569856
    kwargs_569858 = {'axis': keyword_569857}
    # Getting the type of 'np' (line 2044)
    np_569842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 12), 'np', False)
    # Obtaining the member 'sum' of a type (line 2044)
    sum_569843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2044, 12), np_569842, 'sum')
    # Calling sum(args, kwargs) (line 2044)
    sum_call_result_569859 = invoke(stypy.reporting.localization.Localization(__file__, 2044, 12), sum_569843, *[result_le_569855], **kwargs_569858)
    
    # Assigning a type to the variable 'y' (line 2044)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2044, 8), 'y', sum_call_result_569859)
    
    # Assigning a BinOp to a Name (line 2045):
    
    # Assigning a BinOp to a Name (line 2045):
    
    # Call to cdf(...): (line 2045)
    # Processing the call arguments (line 2045)
    # Getting the type of 'y' (line 2045)
    y_569863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 40), 'y', False)
    int_569864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2045, 42), 'int')
    # Applying the binary operator '-' (line 2045)
    result_sub_569865 = python_operator(stypy.reporting.localization.Localization(__file__, 2045, 40), '-', y_569863, int_569864)
    
    # Getting the type of 'n' (line 2045)
    n_569866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 45), 'n', False)
    # Getting the type of 'p' (line 2045)
    p_569867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 48), 'p', False)
    # Processing the call keyword arguments (line 2045)
    kwargs_569868 = {}
    # Getting the type of 'distributions' (line 2045)
    distributions_569860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 16), 'distributions', False)
    # Obtaining the member 'binom' of a type (line 2045)
    binom_569861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2045, 16), distributions_569860, 'binom')
    # Obtaining the member 'cdf' of a type (line 2045)
    cdf_569862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2045, 16), binom_569861, 'cdf')
    # Calling cdf(args, kwargs) (line 2045)
    cdf_call_result_569869 = invoke(stypy.reporting.localization.Localization(__file__, 2045, 16), cdf_569862, *[result_sub_569865, n_569866, p_569867], **kwargs_569868)
    
    
    # Call to sf(...): (line 2046)
    # Processing the call arguments (line 2046)
    # Getting the type of 'x' (line 2046)
    x_569873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2046, 39), 'x', False)
    int_569874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2046, 41), 'int')
    # Applying the binary operator '-' (line 2046)
    result_sub_569875 = python_operator(stypy.reporting.localization.Localization(__file__, 2046, 39), '-', x_569873, int_569874)
    
    # Getting the type of 'n' (line 2046)
    n_569876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2046, 44), 'n', False)
    # Getting the type of 'p' (line 2046)
    p_569877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2046, 47), 'p', False)
    # Processing the call keyword arguments (line 2046)
    kwargs_569878 = {}
    # Getting the type of 'distributions' (line 2046)
    distributions_569870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2046, 16), 'distributions', False)
    # Obtaining the member 'binom' of a type (line 2046)
    binom_569871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2046, 16), distributions_569870, 'binom')
    # Obtaining the member 'sf' of a type (line 2046)
    sf_569872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2046, 16), binom_569871, 'sf')
    # Calling sf(args, kwargs) (line 2046)
    sf_call_result_569879 = invoke(stypy.reporting.localization.Localization(__file__, 2046, 16), sf_569872, *[result_sub_569875, n_569876, p_569877], **kwargs_569878)
    
    # Applying the binary operator '+' (line 2045)
    result_add_569880 = python_operator(stypy.reporting.localization.Localization(__file__, 2045, 16), '+', cdf_call_result_569869, sf_call_result_569879)
    
    # Assigning a type to the variable 'pval' (line 2045)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2045, 8), 'pval', result_add_569880)
    # SSA join for if statement (line 2037)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2034)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to min(...): (line 2048)
    # Processing the call arguments (line 2048)
    float_569882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 15), 'float')
    # Getting the type of 'pval' (line 2048)
    pval_569883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 20), 'pval', False)
    # Processing the call keyword arguments (line 2048)
    kwargs_569884 = {}
    # Getting the type of 'min' (line 2048)
    min_569881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 11), 'min', False)
    # Calling min(args, kwargs) (line 2048)
    min_call_result_569885 = invoke(stypy.reporting.localization.Localization(__file__, 2048, 11), min_569881, *[float_569882, pval_569883], **kwargs_569884)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2048, 4), 'stypy_return_type', min_call_result_569885)
    
    # ################# End of 'binom_test(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'binom_test' in the type store
    # Getting the type of 'stypy_return_type' (line 1970)
    stypy_return_type_569886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_569886)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'binom_test'
    return stypy_return_type_569886

# Assigning a type to the variable 'binom_test' (line 1970)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 0), 'binom_test', binom_test)

@norecursion
def _apply_func(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_apply_func'
    module_type_store = module_type_store.open_function_context('_apply_func', 2051, 0, False)
    
    # Passed parameters checking function
    _apply_func.stypy_localization = localization
    _apply_func.stypy_type_of_self = None
    _apply_func.stypy_type_store = module_type_store
    _apply_func.stypy_function_name = '_apply_func'
    _apply_func.stypy_param_names_list = ['x', 'g', 'func']
    _apply_func.stypy_varargs_param_name = None
    _apply_func.stypy_kwargs_param_name = None
    _apply_func.stypy_call_defaults = defaults
    _apply_func.stypy_call_varargs = varargs
    _apply_func.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_apply_func', ['x', 'g', 'func'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_apply_func', localization, ['x', 'g', 'func'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_apply_func(...)' code ##################

    
    # Assigning a Call to a Name (line 2055):
    
    # Assigning a Call to a Name (line 2055):
    
    # Call to unique(...): (line 2055)
    # Processing the call arguments (line 2055)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2055)
    tuple_569888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2055, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2055)
    # Adding element type (line 2055)
    int_569889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2055, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2055, 18), tuple_569888, int_569889)
    # Adding element type (line 2055)
    # Getting the type of 'g' (line 2055)
    g_569890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 21), 'g', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2055, 18), tuple_569888, g_569890)
    # Adding element type (line 2055)
    
    # Call to len(...): (line 2055)
    # Processing the call arguments (line 2055)
    # Getting the type of 'x' (line 2055)
    x_569892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 28), 'x', False)
    # Processing the call keyword arguments (line 2055)
    kwargs_569893 = {}
    # Getting the type of 'len' (line 2055)
    len_569891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 24), 'len', False)
    # Calling len(args, kwargs) (line 2055)
    len_call_result_569894 = invoke(stypy.reporting.localization.Localization(__file__, 2055, 24), len_569891, *[x_569892], **kwargs_569893)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2055, 18), tuple_569888, len_call_result_569894)
    
    # Getting the type of 'r_' (line 2055)
    r__569895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 15), 'r_', False)
    # Obtaining the member '__getitem__' of a type (line 2055)
    getitem___569896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2055, 15), r__569895, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2055)
    subscript_call_result_569897 = invoke(stypy.reporting.localization.Localization(__file__, 2055, 15), getitem___569896, tuple_569888)
    
    # Processing the call keyword arguments (line 2055)
    kwargs_569898 = {}
    # Getting the type of 'unique' (line 2055)
    unique_569887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 8), 'unique', False)
    # Calling unique(args, kwargs) (line 2055)
    unique_call_result_569899 = invoke(stypy.reporting.localization.Localization(__file__, 2055, 8), unique_569887, *[subscript_call_result_569897], **kwargs_569898)
    
    # Assigning a type to the variable 'g' (line 2055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'g', unique_call_result_569899)
    
    # Assigning a List to a Name (line 2056):
    
    # Assigning a List to a Name (line 2056):
    
    # Obtaining an instance of the builtin type 'list' (line 2056)
    list_569900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2056, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2056)
    
    # Assigning a type to the variable 'output' (line 2056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2056, 4), 'output', list_569900)
    
    
    # Call to range(...): (line 2057)
    # Processing the call arguments (line 2057)
    
    # Call to len(...): (line 2057)
    # Processing the call arguments (line 2057)
    # Getting the type of 'g' (line 2057)
    g_569903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 23), 'g', False)
    # Processing the call keyword arguments (line 2057)
    kwargs_569904 = {}
    # Getting the type of 'len' (line 2057)
    len_569902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 19), 'len', False)
    # Calling len(args, kwargs) (line 2057)
    len_call_result_569905 = invoke(stypy.reporting.localization.Localization(__file__, 2057, 19), len_569902, *[g_569903], **kwargs_569904)
    
    int_569906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 28), 'int')
    # Applying the binary operator '-' (line 2057)
    result_sub_569907 = python_operator(stypy.reporting.localization.Localization(__file__, 2057, 19), '-', len_call_result_569905, int_569906)
    
    # Processing the call keyword arguments (line 2057)
    kwargs_569908 = {}
    # Getting the type of 'range' (line 2057)
    range_569901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 13), 'range', False)
    # Calling range(args, kwargs) (line 2057)
    range_call_result_569909 = invoke(stypy.reporting.localization.Localization(__file__, 2057, 13), range_569901, *[result_sub_569907], **kwargs_569908)
    
    # Testing the type of a for loop iterable (line 2057)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2057, 4), range_call_result_569909)
    # Getting the type of the for loop variable (line 2057)
    for_loop_var_569910 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2057, 4), range_call_result_569909)
    # Assigning a type to the variable 'k' (line 2057)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2057, 4), 'k', for_loop_var_569910)
    # SSA begins for a for statement (line 2057)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 2058)
    # Processing the call arguments (line 2058)
    
    # Call to func(...): (line 2058)
    # Processing the call arguments (line 2058)
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2058)
    k_569914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 31), 'k', False)
    # Getting the type of 'g' (line 2058)
    g_569915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 29), 'g', False)
    # Obtaining the member '__getitem__' of a type (line 2058)
    getitem___569916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2058, 29), g_569915, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2058)
    subscript_call_result_569917 = invoke(stypy.reporting.localization.Localization(__file__, 2058, 29), getitem___569916, k_569914)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2058)
    k_569918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 36), 'k', False)
    int_569919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2058, 38), 'int')
    # Applying the binary operator '+' (line 2058)
    result_add_569920 = python_operator(stypy.reporting.localization.Localization(__file__, 2058, 36), '+', k_569918, int_569919)
    
    # Getting the type of 'g' (line 2058)
    g_569921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 34), 'g', False)
    # Obtaining the member '__getitem__' of a type (line 2058)
    getitem___569922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2058, 34), g_569921, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2058)
    subscript_call_result_569923 = invoke(stypy.reporting.localization.Localization(__file__, 2058, 34), getitem___569922, result_add_569920)
    
    slice_569924 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2058, 27), subscript_call_result_569917, subscript_call_result_569923, None)
    # Getting the type of 'x' (line 2058)
    x_569925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 27), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 2058)
    getitem___569926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2058, 27), x_569925, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2058)
    subscript_call_result_569927 = invoke(stypy.reporting.localization.Localization(__file__, 2058, 27), getitem___569926, slice_569924)
    
    # Processing the call keyword arguments (line 2058)
    kwargs_569928 = {}
    # Getting the type of 'func' (line 2058)
    func_569913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 22), 'func', False)
    # Calling func(args, kwargs) (line 2058)
    func_call_result_569929 = invoke(stypy.reporting.localization.Localization(__file__, 2058, 22), func_569913, *[subscript_call_result_569927], **kwargs_569928)
    
    # Processing the call keyword arguments (line 2058)
    kwargs_569930 = {}
    # Getting the type of 'output' (line 2058)
    output_569911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 8), 'output', False)
    # Obtaining the member 'append' of a type (line 2058)
    append_569912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2058, 8), output_569911, 'append')
    # Calling append(args, kwargs) (line 2058)
    append_call_result_569931 = invoke(stypy.reporting.localization.Localization(__file__, 2058, 8), append_569912, *[func_call_result_569929], **kwargs_569930)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to asarray(...): (line 2060)
    # Processing the call arguments (line 2060)
    # Getting the type of 'output' (line 2060)
    output_569933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 19), 'output', False)
    # Processing the call keyword arguments (line 2060)
    kwargs_569934 = {}
    # Getting the type of 'asarray' (line 2060)
    asarray_569932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 11), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2060)
    asarray_call_result_569935 = invoke(stypy.reporting.localization.Localization(__file__, 2060, 11), asarray_569932, *[output_569933], **kwargs_569934)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2060, 4), 'stypy_return_type', asarray_call_result_569935)
    
    # ################# End of '_apply_func(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_apply_func' in the type store
    # Getting the type of 'stypy_return_type' (line 2051)
    stypy_return_type_569936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_569936)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_apply_func'
    return stypy_return_type_569936

# Assigning a type to the variable '_apply_func' (line 2051)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 0), '_apply_func', _apply_func)

# Assigning a Call to a Name (line 2063):

# Assigning a Call to a Name (line 2063):

# Call to namedtuple(...): (line 2063)
# Processing the call arguments (line 2063)
str_569938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, 27), 'str', 'FlignerResult')

# Obtaining an instance of the builtin type 'tuple' (line 2063)
tuple_569939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, 45), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2063)
# Adding element type (line 2063)
str_569940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, 45), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2063, 45), tuple_569939, str_569940)
# Adding element type (line 2063)
str_569941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, 58), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2063, 45), tuple_569939, str_569941)

# Processing the call keyword arguments (line 2063)
kwargs_569942 = {}
# Getting the type of 'namedtuple' (line 2063)
namedtuple_569937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 16), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 2063)
namedtuple_call_result_569943 = invoke(stypy.reporting.localization.Localization(__file__, 2063, 16), namedtuple_569937, *[str_569938, tuple_569939], **kwargs_569942)

# Assigning a type to the variable 'FlignerResult' (line 2063)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2063, 0), 'FlignerResult', namedtuple_call_result_569943)

@norecursion
def fligner(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'fligner'
    module_type_store = module_type_store.open_function_context('fligner', 2066, 0, False)
    
    # Passed parameters checking function
    fligner.stypy_localization = localization
    fligner.stypy_type_of_self = None
    fligner.stypy_type_store = module_type_store
    fligner.stypy_function_name = 'fligner'
    fligner.stypy_param_names_list = []
    fligner.stypy_varargs_param_name = 'args'
    fligner.stypy_kwargs_param_name = 'kwds'
    fligner.stypy_call_defaults = defaults
    fligner.stypy_call_varargs = varargs
    fligner.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fligner', [], 'args', 'kwds', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fligner', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fligner(...)' code ##################

    str_569944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2131, (-1)), 'str', "\n    Perform Fligner-Killeen test for equality of variance.\n\n    Fligner's test tests the null hypothesis that all input samples\n    are from populations with equal variances.  Fligner-Killeen's test is\n    distribution free when populations are identical [2]_.\n\n    Parameters\n    ----------\n    sample1, sample2, ... : array_like\n        Arrays of sample data.  Need not be the same length.\n    center : {'mean', 'median', 'trimmed'}, optional\n        Keyword argument controlling which function of the data is used in\n        computing the test statistic.  The default is 'median'.\n    proportiontocut : float, optional\n        When `center` is 'trimmed', this gives the proportion of data points\n        to cut from each end. (See `scipy.stats.trim_mean`.)\n        Default is 0.05.\n\n    Returns\n    -------\n    statistic : float\n        The test statistic.\n    pvalue : float\n        The p-value for the hypothesis test.\n\n    See Also\n    --------\n    bartlett : A parametric test for equality of k variances in normal samples\n    levene : A robust parametric test for equality of k variances\n\n    Notes\n    -----\n    As with Levene's test there are three variants of Fligner's test that\n    differ by the measure of central tendency used in the test.  See `levene`\n    for more information.\n\n    Conover et al. (1981) examine many of the existing parametric and\n    nonparametric tests by extensive simulations and they conclude that the\n    tests proposed by Fligner and Killeen (1976) and Levene (1960) appear to be\n    superior in terms of robustness of departures from normality and power [3]_.\n\n    References\n    ----------\n    .. [1] Park, C. and Lindsay, B. G. (1999). Robust Scale Estimation and\n           Hypothesis Testing based on Quadratic Inference Function. Technical\n           Report #99-03, Center for Likelihood Studies, Pennsylvania State\n           University.\n           http://cecas.clemson.edu/~cspark/cv/paper/qif/draftqif2.pdf\n\n    .. [2] Fligner, M.A. and Killeen, T.J. (1976). Distribution-free two-sample\n           tests for scale. 'Journal of the American Statistical Association.'\n           71(353), 210-213.\n\n    .. [3] Park, C. and Lindsay, B. G. (1999). Robust Scale Estimation and\n           Hypothesis Testing based on Quadratic Inference Function. Technical\n           Report #99-03, Center for Likelihood Studies, Pennsylvania State\n           University.\n\n    .. [4] Conover, W. J., Johnson, M. E. and Johnson M. M. (1981). A\n           comparative study of tests for homogeneity of variances, with\n           applications to the outer continental shelf biding data.\n           Technometrics, 23(4), 351-361.\n\n    ")
    
    # Getting the type of 'args' (line 2133)
    args_569945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 13), 'args')
    # Testing the type of a for loop iterable (line 2133)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2133, 4), args_569945)
    # Getting the type of the for loop variable (line 2133)
    for_loop_var_569946 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2133, 4), args_569945)
    # Assigning a type to the variable 'a' (line 2133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2133, 4), 'a', for_loop_var_569946)
    # SSA begins for a for statement (line 2133)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to asanyarray(...): (line 2134)
    # Processing the call arguments (line 2134)
    # Getting the type of 'a' (line 2134)
    a_569949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 25), 'a', False)
    # Processing the call keyword arguments (line 2134)
    kwargs_569950 = {}
    # Getting the type of 'np' (line 2134)
    np_569947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 11), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 2134)
    asanyarray_569948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 11), np_569947, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 2134)
    asanyarray_call_result_569951 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 11), asanyarray_569948, *[a_569949], **kwargs_569950)
    
    # Obtaining the member 'size' of a type (line 2134)
    size_569952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 11), asanyarray_call_result_569951, 'size')
    int_569953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2134, 36), 'int')
    # Applying the binary operator '==' (line 2134)
    result_eq_569954 = python_operator(stypy.reporting.localization.Localization(__file__, 2134, 11), '==', size_569952, int_569953)
    
    # Testing the type of an if condition (line 2134)
    if_condition_569955 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2134, 8), result_eq_569954)
    # Assigning a type to the variable 'if_condition_569955' (line 2134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'if_condition_569955', if_condition_569955)
    # SSA begins for if statement (line 2134)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to FlignerResult(...): (line 2135)
    # Processing the call arguments (line 2135)
    # Getting the type of 'np' (line 2135)
    np_569957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 33), 'np', False)
    # Obtaining the member 'nan' of a type (line 2135)
    nan_569958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 33), np_569957, 'nan')
    # Getting the type of 'np' (line 2135)
    np_569959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 41), 'np', False)
    # Obtaining the member 'nan' of a type (line 2135)
    nan_569960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 41), np_569959, 'nan')
    # Processing the call keyword arguments (line 2135)
    kwargs_569961 = {}
    # Getting the type of 'FlignerResult' (line 2135)
    FlignerResult_569956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 19), 'FlignerResult', False)
    # Calling FlignerResult(args, kwargs) (line 2135)
    FlignerResult_call_result_569962 = invoke(stypy.reporting.localization.Localization(__file__, 2135, 19), FlignerResult_569956, *[nan_569958, nan_569960], **kwargs_569961)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2135, 12), 'stypy_return_type', FlignerResult_call_result_569962)
    # SSA join for if statement (line 2134)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Str to a Name (line 2138):
    
    # Assigning a Str to a Name (line 2138):
    str_569963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2138, 13), 'str', 'median')
    # Assigning a type to the variable 'center' (line 2138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 4), 'center', str_569963)
    
    # Assigning a Num to a Name (line 2139):
    
    # Assigning a Num to a Name (line 2139):
    float_569964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2139, 22), 'float')
    # Assigning a type to the variable 'proportiontocut' (line 2139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2139, 4), 'proportiontocut', float_569964)
    
    
    # Call to items(...): (line 2140)
    # Processing the call keyword arguments (line 2140)
    kwargs_569967 = {}
    # Getting the type of 'kwds' (line 2140)
    kwds_569965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 21), 'kwds', False)
    # Obtaining the member 'items' of a type (line 2140)
    items_569966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2140, 21), kwds_569965, 'items')
    # Calling items(args, kwargs) (line 2140)
    items_call_result_569968 = invoke(stypy.reporting.localization.Localization(__file__, 2140, 21), items_569966, *[], **kwargs_569967)
    
    # Testing the type of a for loop iterable (line 2140)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2140, 4), items_call_result_569968)
    # Getting the type of the for loop variable (line 2140)
    for_loop_var_569969 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2140, 4), items_call_result_569968)
    # Assigning a type to the variable 'kw' (line 2140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2140, 4), 'kw', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2140, 4), for_loop_var_569969))
    # Assigning a type to the variable 'value' (line 2140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2140, 4), 'value', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2140, 4), for_loop_var_569969))
    # SSA begins for a for statement (line 2140)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'kw' (line 2141)
    kw_569970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 11), 'kw')
    
    # Obtaining an instance of the builtin type 'list' (line 2141)
    list_569971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2141)
    # Adding element type (line 2141)
    str_569972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 22), 'str', 'center')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2141, 21), list_569971, str_569972)
    # Adding element type (line 2141)
    str_569973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 32), 'str', 'proportiontocut')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2141, 21), list_569971, str_569973)
    
    # Applying the binary operator 'notin' (line 2141)
    result_contains_569974 = python_operator(stypy.reporting.localization.Localization(__file__, 2141, 11), 'notin', kw_569970, list_569971)
    
    # Testing the type of an if condition (line 2141)
    if_condition_569975 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2141, 8), result_contains_569974)
    # Assigning a type to the variable 'if_condition_569975' (line 2141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2141, 8), 'if_condition_569975', if_condition_569975)
    # SSA begins for if statement (line 2141)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 2142)
    # Processing the call arguments (line 2142)
    str_569977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2142, 28), 'str', "fligner() got an unexpected keyword argument '%s'")
    # Getting the type of 'kw' (line 2143)
    kw_569978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 46), 'kw', False)
    # Applying the binary operator '%' (line 2142)
    result_mod_569979 = python_operator(stypy.reporting.localization.Localization(__file__, 2142, 28), '%', str_569977, kw_569978)
    
    # Processing the call keyword arguments (line 2142)
    kwargs_569980 = {}
    # Getting the type of 'TypeError' (line 2142)
    TypeError_569976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 18), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 2142)
    TypeError_call_result_569981 = invoke(stypy.reporting.localization.Localization(__file__, 2142, 18), TypeError_569976, *[result_mod_569979], **kwargs_569980)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2142, 12), TypeError_call_result_569981, 'raise parameter', BaseException)
    # SSA join for if statement (line 2141)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'kw' (line 2144)
    kw_569982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 11), 'kw')
    str_569983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 17), 'str', 'center')
    # Applying the binary operator '==' (line 2144)
    result_eq_569984 = python_operator(stypy.reporting.localization.Localization(__file__, 2144, 11), '==', kw_569982, str_569983)
    
    # Testing the type of an if condition (line 2144)
    if_condition_569985 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2144, 8), result_eq_569984)
    # Assigning a type to the variable 'if_condition_569985' (line 2144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2144, 8), 'if_condition_569985', if_condition_569985)
    # SSA begins for if statement (line 2144)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2145):
    
    # Assigning a Name to a Name (line 2145):
    # Getting the type of 'value' (line 2145)
    value_569986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2145, 21), 'value')
    # Assigning a type to the variable 'center' (line 2145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2145, 12), 'center', value_569986)
    # SSA branch for the else part of an if statement (line 2144)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2147):
    
    # Assigning a Name to a Name (line 2147):
    # Getting the type of 'value' (line 2147)
    value_569987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 30), 'value')
    # Assigning a type to the variable 'proportiontocut' (line 2147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2147, 12), 'proportiontocut', value_569987)
    # SSA join for if statement (line 2144)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2149):
    
    # Assigning a Call to a Name (line 2149):
    
    # Call to len(...): (line 2149)
    # Processing the call arguments (line 2149)
    # Getting the type of 'args' (line 2149)
    args_569989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 12), 'args', False)
    # Processing the call keyword arguments (line 2149)
    kwargs_569990 = {}
    # Getting the type of 'len' (line 2149)
    len_569988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 8), 'len', False)
    # Calling len(args, kwargs) (line 2149)
    len_call_result_569991 = invoke(stypy.reporting.localization.Localization(__file__, 2149, 8), len_569988, *[args_569989], **kwargs_569990)
    
    # Assigning a type to the variable 'k' (line 2149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2149, 4), 'k', len_call_result_569991)
    
    
    # Getting the type of 'k' (line 2150)
    k_569992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 7), 'k')
    int_569993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2150, 11), 'int')
    # Applying the binary operator '<' (line 2150)
    result_lt_569994 = python_operator(stypy.reporting.localization.Localization(__file__, 2150, 7), '<', k_569992, int_569993)
    
    # Testing the type of an if condition (line 2150)
    if_condition_569995 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2150, 4), result_lt_569994)
    # Assigning a type to the variable 'if_condition_569995' (line 2150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2150, 4), 'if_condition_569995', if_condition_569995)
    # SSA begins for if statement (line 2150)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2151)
    # Processing the call arguments (line 2151)
    str_569997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2151, 25), 'str', 'Must enter at least two input sample vectors.')
    # Processing the call keyword arguments (line 2151)
    kwargs_569998 = {}
    # Getting the type of 'ValueError' (line 2151)
    ValueError_569996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2151)
    ValueError_call_result_569999 = invoke(stypy.reporting.localization.Localization(__file__, 2151, 14), ValueError_569996, *[str_569997], **kwargs_569998)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2151, 8), ValueError_call_result_569999, 'raise parameter', BaseException)
    # SSA join for if statement (line 2150)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'center' (line 2153)
    center_570000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 7), 'center')
    
    # Obtaining an instance of the builtin type 'list' (line 2153)
    list_570001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2153, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2153)
    # Adding element type (line 2153)
    str_570002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2153, 22), 'str', 'mean')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2153, 21), list_570001, str_570002)
    # Adding element type (line 2153)
    str_570003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2153, 30), 'str', 'median')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2153, 21), list_570001, str_570003)
    # Adding element type (line 2153)
    str_570004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2153, 40), 'str', 'trimmed')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2153, 21), list_570001, str_570004)
    
    # Applying the binary operator 'notin' (line 2153)
    result_contains_570005 = python_operator(stypy.reporting.localization.Localization(__file__, 2153, 7), 'notin', center_570000, list_570001)
    
    # Testing the type of an if condition (line 2153)
    if_condition_570006 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2153, 4), result_contains_570005)
    # Assigning a type to the variable 'if_condition_570006' (line 2153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2153, 4), 'if_condition_570006', if_condition_570006)
    # SSA begins for if statement (line 2153)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2154)
    # Processing the call arguments (line 2154)
    str_570008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 25), 'str', "Keyword argument <center> must be 'mean', 'median' or 'trimmed'.")
    # Processing the call keyword arguments (line 2154)
    kwargs_570009 = {}
    # Getting the type of 'ValueError' (line 2154)
    ValueError_570007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2154)
    ValueError_call_result_570010 = invoke(stypy.reporting.localization.Localization(__file__, 2154, 14), ValueError_570007, *[str_570008], **kwargs_570009)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2154, 8), ValueError_call_result_570010, 'raise parameter', BaseException)
    # SSA join for if statement (line 2153)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'center' (line 2157)
    center_570011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 7), 'center')
    str_570012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2157, 17), 'str', 'median')
    # Applying the binary operator '==' (line 2157)
    result_eq_570013 = python_operator(stypy.reporting.localization.Localization(__file__, 2157, 7), '==', center_570011, str_570012)
    
    # Testing the type of an if condition (line 2157)
    if_condition_570014 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2157, 4), result_eq_570013)
    # Assigning a type to the variable 'if_condition_570014' (line 2157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2157, 4), 'if_condition_570014', if_condition_570014)
    # SSA begins for if statement (line 2157)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Lambda to a Name (line 2158):
    
    # Assigning a Lambda to a Name (line 2158):

    @norecursion
    def _stypy_temp_lambda_492(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_492'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_492', 2158, 15, True)
        # Passed parameters checking function
        _stypy_temp_lambda_492.stypy_localization = localization
        _stypy_temp_lambda_492.stypy_type_of_self = None
        _stypy_temp_lambda_492.stypy_type_store = module_type_store
        _stypy_temp_lambda_492.stypy_function_name = '_stypy_temp_lambda_492'
        _stypy_temp_lambda_492.stypy_param_names_list = ['x']
        _stypy_temp_lambda_492.stypy_varargs_param_name = None
        _stypy_temp_lambda_492.stypy_kwargs_param_name = None
        _stypy_temp_lambda_492.stypy_call_defaults = defaults
        _stypy_temp_lambda_492.stypy_call_varargs = varargs
        _stypy_temp_lambda_492.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_492', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_492', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to median(...): (line 2158)
        # Processing the call arguments (line 2158)
        # Getting the type of 'x' (line 2158)
        x_570017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 35), 'x', False)
        # Processing the call keyword arguments (line 2158)
        int_570018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2158, 43), 'int')
        keyword_570019 = int_570018
        kwargs_570020 = {'axis': keyword_570019}
        # Getting the type of 'np' (line 2158)
        np_570015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 25), 'np', False)
        # Obtaining the member 'median' of a type (line 2158)
        median_570016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 25), np_570015, 'median')
        # Calling median(args, kwargs) (line 2158)
        median_call_result_570021 = invoke(stypy.reporting.localization.Localization(__file__, 2158, 25), median_570016, *[x_570017], **kwargs_570020)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 2158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 15), 'stypy_return_type', median_call_result_570021)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_492' in the type store
        # Getting the type of 'stypy_return_type' (line 2158)
        stypy_return_type_570022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 15), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_570022)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_492'
        return stypy_return_type_570022

    # Assigning a type to the variable '_stypy_temp_lambda_492' (line 2158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 15), '_stypy_temp_lambda_492', _stypy_temp_lambda_492)
    # Getting the type of '_stypy_temp_lambda_492' (line 2158)
    _stypy_temp_lambda_492_570023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 15), '_stypy_temp_lambda_492')
    # Assigning a type to the variable 'func' (line 2158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 8), 'func', _stypy_temp_lambda_492_570023)
    # SSA branch for the else part of an if statement (line 2157)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'center' (line 2159)
    center_570024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 9), 'center')
    str_570025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2159, 19), 'str', 'mean')
    # Applying the binary operator '==' (line 2159)
    result_eq_570026 = python_operator(stypy.reporting.localization.Localization(__file__, 2159, 9), '==', center_570024, str_570025)
    
    # Testing the type of an if condition (line 2159)
    if_condition_570027 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2159, 9), result_eq_570026)
    # Assigning a type to the variable 'if_condition_570027' (line 2159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2159, 9), 'if_condition_570027', if_condition_570027)
    # SSA begins for if statement (line 2159)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Lambda to a Name (line 2160):
    
    # Assigning a Lambda to a Name (line 2160):

    @norecursion
    def _stypy_temp_lambda_493(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_493'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_493', 2160, 15, True)
        # Passed parameters checking function
        _stypy_temp_lambda_493.stypy_localization = localization
        _stypy_temp_lambda_493.stypy_type_of_self = None
        _stypy_temp_lambda_493.stypy_type_store = module_type_store
        _stypy_temp_lambda_493.stypy_function_name = '_stypy_temp_lambda_493'
        _stypy_temp_lambda_493.stypy_param_names_list = ['x']
        _stypy_temp_lambda_493.stypy_varargs_param_name = None
        _stypy_temp_lambda_493.stypy_kwargs_param_name = None
        _stypy_temp_lambda_493.stypy_call_defaults = defaults
        _stypy_temp_lambda_493.stypy_call_varargs = varargs
        _stypy_temp_lambda_493.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_493', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_493', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to mean(...): (line 2160)
        # Processing the call arguments (line 2160)
        # Getting the type of 'x' (line 2160)
        x_570030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 33), 'x', False)
        # Processing the call keyword arguments (line 2160)
        int_570031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2160, 41), 'int')
        keyword_570032 = int_570031
        kwargs_570033 = {'axis': keyword_570032}
        # Getting the type of 'np' (line 2160)
        np_570028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 25), 'np', False)
        # Obtaining the member 'mean' of a type (line 2160)
        mean_570029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2160, 25), np_570028, 'mean')
        # Calling mean(args, kwargs) (line 2160)
        mean_call_result_570034 = invoke(stypy.reporting.localization.Localization(__file__, 2160, 25), mean_570029, *[x_570030], **kwargs_570033)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 2160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 15), 'stypy_return_type', mean_call_result_570034)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_493' in the type store
        # Getting the type of 'stypy_return_type' (line 2160)
        stypy_return_type_570035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 15), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_570035)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_493'
        return stypy_return_type_570035

    # Assigning a type to the variable '_stypy_temp_lambda_493' (line 2160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 15), '_stypy_temp_lambda_493', _stypy_temp_lambda_493)
    # Getting the type of '_stypy_temp_lambda_493' (line 2160)
    _stypy_temp_lambda_493_570036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 15), '_stypy_temp_lambda_493')
    # Assigning a type to the variable 'func' (line 2160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 8), 'func', _stypy_temp_lambda_493_570036)
    # SSA branch for the else part of an if statement (line 2159)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2162):
    
    # Assigning a Call to a Name (line 2162):
    
    # Call to tuple(...): (line 2162)
    # Processing the call arguments (line 2162)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 2162, 21, True)
    # Calculating comprehension expression
    # Getting the type of 'args' (line 2162)
    args_570044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 69), 'args', False)
    comprehension_570045 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2162, 21), args_570044)
    # Assigning a type to the variable 'arg' (line 2162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2162, 21), 'arg', comprehension_570045)
    
    # Call to trimboth(...): (line 2162)
    # Processing the call arguments (line 2162)
    # Getting the type of 'arg' (line 2162)
    arg_570040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 36), 'arg', False)
    # Getting the type of 'proportiontocut' (line 2162)
    proportiontocut_570041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 41), 'proportiontocut', False)
    # Processing the call keyword arguments (line 2162)
    kwargs_570042 = {}
    # Getting the type of 'stats' (line 2162)
    stats_570038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 21), 'stats', False)
    # Obtaining the member 'trimboth' of a type (line 2162)
    trimboth_570039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2162, 21), stats_570038, 'trimboth')
    # Calling trimboth(args, kwargs) (line 2162)
    trimboth_call_result_570043 = invoke(stypy.reporting.localization.Localization(__file__, 2162, 21), trimboth_570039, *[arg_570040, proportiontocut_570041], **kwargs_570042)
    
    list_570046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2162, 21), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2162, 21), list_570046, trimboth_call_result_570043)
    # Processing the call keyword arguments (line 2162)
    kwargs_570047 = {}
    # Getting the type of 'tuple' (line 2162)
    tuple_570037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 15), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2162)
    tuple_call_result_570048 = invoke(stypy.reporting.localization.Localization(__file__, 2162, 15), tuple_570037, *[list_570046], **kwargs_570047)
    
    # Assigning a type to the variable 'args' (line 2162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2162, 8), 'args', tuple_call_result_570048)
    
    # Assigning a Lambda to a Name (line 2163):
    
    # Assigning a Lambda to a Name (line 2163):

    @norecursion
    def _stypy_temp_lambda_494(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_494'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_494', 2163, 15, True)
        # Passed parameters checking function
        _stypy_temp_lambda_494.stypy_localization = localization
        _stypy_temp_lambda_494.stypy_type_of_self = None
        _stypy_temp_lambda_494.stypy_type_store = module_type_store
        _stypy_temp_lambda_494.stypy_function_name = '_stypy_temp_lambda_494'
        _stypy_temp_lambda_494.stypy_param_names_list = ['x']
        _stypy_temp_lambda_494.stypy_varargs_param_name = None
        _stypy_temp_lambda_494.stypy_kwargs_param_name = None
        _stypy_temp_lambda_494.stypy_call_defaults = defaults
        _stypy_temp_lambda_494.stypy_call_varargs = varargs
        _stypy_temp_lambda_494.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_494', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_494', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to mean(...): (line 2163)
        # Processing the call arguments (line 2163)
        # Getting the type of 'x' (line 2163)
        x_570051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 33), 'x', False)
        # Processing the call keyword arguments (line 2163)
        int_570052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2163, 41), 'int')
        keyword_570053 = int_570052
        kwargs_570054 = {'axis': keyword_570053}
        # Getting the type of 'np' (line 2163)
        np_570049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 25), 'np', False)
        # Obtaining the member 'mean' of a type (line 2163)
        mean_570050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2163, 25), np_570049, 'mean')
        # Calling mean(args, kwargs) (line 2163)
        mean_call_result_570055 = invoke(stypy.reporting.localization.Localization(__file__, 2163, 25), mean_570050, *[x_570051], **kwargs_570054)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 2163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2163, 15), 'stypy_return_type', mean_call_result_570055)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_494' in the type store
        # Getting the type of 'stypy_return_type' (line 2163)
        stypy_return_type_570056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 15), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_570056)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_494'
        return stypy_return_type_570056

    # Assigning a type to the variable '_stypy_temp_lambda_494' (line 2163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2163, 15), '_stypy_temp_lambda_494', _stypy_temp_lambda_494)
    # Getting the type of '_stypy_temp_lambda_494' (line 2163)
    _stypy_temp_lambda_494_570057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 15), '_stypy_temp_lambda_494')
    # Assigning a type to the variable 'func' (line 2163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2163, 8), 'func', _stypy_temp_lambda_494_570057)
    # SSA join for if statement (line 2159)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2157)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2165):
    
    # Assigning a Call to a Name (line 2165):
    
    # Call to asarray(...): (line 2165)
    # Processing the call arguments (line 2165)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 2165)
    # Processing the call arguments (line 2165)
    # Getting the type of 'k' (line 2165)
    k_570067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 46), 'k', False)
    # Processing the call keyword arguments (line 2165)
    kwargs_570068 = {}
    # Getting the type of 'range' (line 2165)
    range_570066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 40), 'range', False)
    # Calling range(args, kwargs) (line 2165)
    range_call_result_570069 = invoke(stypy.reporting.localization.Localization(__file__, 2165, 40), range_570066, *[k_570067], **kwargs_570068)
    
    comprehension_570070 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2165, 18), range_call_result_570069)
    # Assigning a type to the variable 'j' (line 2165)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2165, 18), 'j', comprehension_570070)
    
    # Call to len(...): (line 2165)
    # Processing the call arguments (line 2165)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2165)
    j_570060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 27), 'j', False)
    # Getting the type of 'args' (line 2165)
    args_570061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 22), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 2165)
    getitem___570062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2165, 22), args_570061, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2165)
    subscript_call_result_570063 = invoke(stypy.reporting.localization.Localization(__file__, 2165, 22), getitem___570062, j_570060)
    
    # Processing the call keyword arguments (line 2165)
    kwargs_570064 = {}
    # Getting the type of 'len' (line 2165)
    len_570059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 18), 'len', False)
    # Calling len(args, kwargs) (line 2165)
    len_call_result_570065 = invoke(stypy.reporting.localization.Localization(__file__, 2165, 18), len_570059, *[subscript_call_result_570063], **kwargs_570064)
    
    list_570071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2165, 18), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2165, 18), list_570071, len_call_result_570065)
    # Processing the call keyword arguments (line 2165)
    kwargs_570072 = {}
    # Getting the type of 'asarray' (line 2165)
    asarray_570058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 9), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2165)
    asarray_call_result_570073 = invoke(stypy.reporting.localization.Localization(__file__, 2165, 9), asarray_570058, *[list_570071], **kwargs_570072)
    
    # Assigning a type to the variable 'Ni' (line 2165)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2165, 4), 'Ni', asarray_call_result_570073)
    
    # Assigning a Call to a Name (line 2166):
    
    # Assigning a Call to a Name (line 2166):
    
    # Call to asarray(...): (line 2166)
    # Processing the call arguments (line 2166)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 2166)
    # Processing the call arguments (line 2166)
    # Getting the type of 'k' (line 2166)
    k_570083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 48), 'k', False)
    # Processing the call keyword arguments (line 2166)
    kwargs_570084 = {}
    # Getting the type of 'range' (line 2166)
    range_570082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 42), 'range', False)
    # Calling range(args, kwargs) (line 2166)
    range_call_result_570085 = invoke(stypy.reporting.localization.Localization(__file__, 2166, 42), range_570082, *[k_570083], **kwargs_570084)
    
    comprehension_570086 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2166, 19), range_call_result_570085)
    # Assigning a type to the variable 'j' (line 2166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 19), 'j', comprehension_570086)
    
    # Call to func(...): (line 2166)
    # Processing the call arguments (line 2166)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2166)
    j_570076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 29), 'j', False)
    # Getting the type of 'args' (line 2166)
    args_570077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 24), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 2166)
    getitem___570078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2166, 24), args_570077, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2166)
    subscript_call_result_570079 = invoke(stypy.reporting.localization.Localization(__file__, 2166, 24), getitem___570078, j_570076)
    
    # Processing the call keyword arguments (line 2166)
    kwargs_570080 = {}
    # Getting the type of 'func' (line 2166)
    func_570075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 19), 'func', False)
    # Calling func(args, kwargs) (line 2166)
    func_call_result_570081 = invoke(stypy.reporting.localization.Localization(__file__, 2166, 19), func_570075, *[subscript_call_result_570079], **kwargs_570080)
    
    list_570087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2166, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2166, 19), list_570087, func_call_result_570081)
    # Processing the call keyword arguments (line 2166)
    kwargs_570088 = {}
    # Getting the type of 'asarray' (line 2166)
    asarray_570074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2166)
    asarray_call_result_570089 = invoke(stypy.reporting.localization.Localization(__file__, 2166, 10), asarray_570074, *[list_570087], **kwargs_570088)
    
    # Assigning a type to the variable 'Yci' (line 2166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 4), 'Yci', asarray_call_result_570089)
    
    # Assigning a Call to a Name (line 2167):
    
    # Assigning a Call to a Name (line 2167):
    
    # Call to sum(...): (line 2167)
    # Processing the call arguments (line 2167)
    # Getting the type of 'Ni' (line 2167)
    Ni_570092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 18), 'Ni', False)
    # Processing the call keyword arguments (line 2167)
    int_570093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2167, 27), 'int')
    keyword_570094 = int_570093
    kwargs_570095 = {'axis': keyword_570094}
    # Getting the type of 'np' (line 2167)
    np_570090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 11), 'np', False)
    # Obtaining the member 'sum' of a type (line 2167)
    sum_570091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2167, 11), np_570090, 'sum')
    # Calling sum(args, kwargs) (line 2167)
    sum_call_result_570096 = invoke(stypy.reporting.localization.Localization(__file__, 2167, 11), sum_570091, *[Ni_570092], **kwargs_570095)
    
    # Assigning a type to the variable 'Ntot' (line 2167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2167, 4), 'Ntot', sum_call_result_570096)
    
    # Assigning a ListComp to a Name (line 2169):
    
    # Assigning a ListComp to a Name (line 2169):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 2169)
    # Processing the call arguments (line 2169)
    # Getting the type of 'k' (line 2169)
    k_570113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 57), 'k', False)
    # Processing the call keyword arguments (line 2169)
    kwargs_570114 = {}
    # Getting the type of 'range' (line 2169)
    range_570112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 51), 'range', False)
    # Calling range(args, kwargs) (line 2169)
    range_call_result_570115 = invoke(stypy.reporting.localization.Localization(__file__, 2169, 51), range_570112, *[k_570113], **kwargs_570114)
    
    comprehension_570116 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2169, 11), range_call_result_570115)
    # Assigning a type to the variable 'i' (line 2169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 11), 'i', comprehension_570116)
    
    # Call to abs(...): (line 2169)
    # Processing the call arguments (line 2169)
    
    # Call to asarray(...): (line 2169)
    # Processing the call arguments (line 2169)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2169)
    i_570099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 28), 'i', False)
    # Getting the type of 'args' (line 2169)
    args_570100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 23), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 2169)
    getitem___570101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 23), args_570100, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2169)
    subscript_call_result_570102 = invoke(stypy.reporting.localization.Localization(__file__, 2169, 23), getitem___570101, i_570099)
    
    # Processing the call keyword arguments (line 2169)
    kwargs_570103 = {}
    # Getting the type of 'asarray' (line 2169)
    asarray_570098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 15), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2169)
    asarray_call_result_570104 = invoke(stypy.reporting.localization.Localization(__file__, 2169, 15), asarray_570098, *[subscript_call_result_570102], **kwargs_570103)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2169)
    i_570105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 38), 'i', False)
    # Getting the type of 'Yci' (line 2169)
    Yci_570106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 34), 'Yci', False)
    # Obtaining the member '__getitem__' of a type (line 2169)
    getitem___570107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 34), Yci_570106, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2169)
    subscript_call_result_570108 = invoke(stypy.reporting.localization.Localization(__file__, 2169, 34), getitem___570107, i_570105)
    
    # Applying the binary operator '-' (line 2169)
    result_sub_570109 = python_operator(stypy.reporting.localization.Localization(__file__, 2169, 15), '-', asarray_call_result_570104, subscript_call_result_570108)
    
    # Processing the call keyword arguments (line 2169)
    kwargs_570110 = {}
    # Getting the type of 'abs' (line 2169)
    abs_570097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 11), 'abs', False)
    # Calling abs(args, kwargs) (line 2169)
    abs_call_result_570111 = invoke(stypy.reporting.localization.Localization(__file__, 2169, 11), abs_570097, *[result_sub_570109], **kwargs_570110)
    
    list_570117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2169, 11), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2169, 11), list_570117, abs_call_result_570111)
    # Assigning a type to the variable 'Zij' (line 2169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 4), 'Zij', list_570117)
    
    # Assigning a List to a Name (line 2170):
    
    # Assigning a List to a Name (line 2170):
    
    # Obtaining an instance of the builtin type 'list' (line 2170)
    list_570118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2170, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2170)
    
    # Assigning a type to the variable 'allZij' (line 2170)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2170, 4), 'allZij', list_570118)
    
    # Assigning a List to a Name (line 2171):
    
    # Assigning a List to a Name (line 2171):
    
    # Obtaining an instance of the builtin type 'list' (line 2171)
    list_570119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2171, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2171)
    # Adding element type (line 2171)
    int_570120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2171, 9), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2171, 8), list_570119, int_570120)
    
    # Assigning a type to the variable 'g' (line 2171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2171, 4), 'g', list_570119)
    
    
    # Call to range(...): (line 2172)
    # Processing the call arguments (line 2172)
    # Getting the type of 'k' (line 2172)
    k_570122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 19), 'k', False)
    # Processing the call keyword arguments (line 2172)
    kwargs_570123 = {}
    # Getting the type of 'range' (line 2172)
    range_570121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 13), 'range', False)
    # Calling range(args, kwargs) (line 2172)
    range_call_result_570124 = invoke(stypy.reporting.localization.Localization(__file__, 2172, 13), range_570121, *[k_570122], **kwargs_570123)
    
    # Testing the type of a for loop iterable (line 2172)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2172, 4), range_call_result_570124)
    # Getting the type of the for loop variable (line 2172)
    for_loop_var_570125 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2172, 4), range_call_result_570124)
    # Assigning a type to the variable 'i' (line 2172)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2172, 4), 'i', for_loop_var_570125)
    # SSA begins for a for statement (line 2172)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to extend(...): (line 2173)
    # Processing the call arguments (line 2173)
    
    # Call to list(...): (line 2173)
    # Processing the call arguments (line 2173)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2173)
    i_570129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 31), 'i', False)
    # Getting the type of 'Zij' (line 2173)
    Zij_570130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 27), 'Zij', False)
    # Obtaining the member '__getitem__' of a type (line 2173)
    getitem___570131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2173, 27), Zij_570130, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2173)
    subscript_call_result_570132 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 27), getitem___570131, i_570129)
    
    # Processing the call keyword arguments (line 2173)
    kwargs_570133 = {}
    # Getting the type of 'list' (line 2173)
    list_570128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 22), 'list', False)
    # Calling list(args, kwargs) (line 2173)
    list_call_result_570134 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 22), list_570128, *[subscript_call_result_570132], **kwargs_570133)
    
    # Processing the call keyword arguments (line 2173)
    kwargs_570135 = {}
    # Getting the type of 'allZij' (line 2173)
    allZij_570126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 8), 'allZij', False)
    # Obtaining the member 'extend' of a type (line 2173)
    extend_570127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2173, 8), allZij_570126, 'extend')
    # Calling extend(args, kwargs) (line 2173)
    extend_call_result_570136 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 8), extend_570127, *[list_call_result_570134], **kwargs_570135)
    
    
    # Call to append(...): (line 2174)
    # Processing the call arguments (line 2174)
    
    # Call to len(...): (line 2174)
    # Processing the call arguments (line 2174)
    # Getting the type of 'allZij' (line 2174)
    allZij_570140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 21), 'allZij', False)
    # Processing the call keyword arguments (line 2174)
    kwargs_570141 = {}
    # Getting the type of 'len' (line 2174)
    len_570139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 17), 'len', False)
    # Calling len(args, kwargs) (line 2174)
    len_call_result_570142 = invoke(stypy.reporting.localization.Localization(__file__, 2174, 17), len_570139, *[allZij_570140], **kwargs_570141)
    
    # Processing the call keyword arguments (line 2174)
    kwargs_570143 = {}
    # Getting the type of 'g' (line 2174)
    g_570137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 8), 'g', False)
    # Obtaining the member 'append' of a type (line 2174)
    append_570138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2174, 8), g_570137, 'append')
    # Calling append(args, kwargs) (line 2174)
    append_call_result_570144 = invoke(stypy.reporting.localization.Localization(__file__, 2174, 8), append_570138, *[len_call_result_570142], **kwargs_570143)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2176):
    
    # Assigning a Call to a Name (line 2176):
    
    # Call to rankdata(...): (line 2176)
    # Processing the call arguments (line 2176)
    # Getting the type of 'allZij' (line 2176)
    allZij_570147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 27), 'allZij', False)
    # Processing the call keyword arguments (line 2176)
    kwargs_570148 = {}
    # Getting the type of 'stats' (line 2176)
    stats_570145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 12), 'stats', False)
    # Obtaining the member 'rankdata' of a type (line 2176)
    rankdata_570146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 12), stats_570145, 'rankdata')
    # Calling rankdata(args, kwargs) (line 2176)
    rankdata_call_result_570149 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 12), rankdata_570146, *[allZij_570147], **kwargs_570148)
    
    # Assigning a type to the variable 'ranks' (line 2176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 4), 'ranks', rankdata_call_result_570149)
    
    # Assigning a Call to a Name (line 2177):
    
    # Assigning a Call to a Name (line 2177):
    
    # Call to ppf(...): (line 2177)
    # Processing the call arguments (line 2177)
    # Getting the type of 'ranks' (line 2177)
    ranks_570153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 31), 'ranks', False)
    int_570154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2177, 40), 'int')
    # Getting the type of 'Ntot' (line 2177)
    Ntot_570155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 43), 'Ntot', False)
    float_570156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2177, 50), 'float')
    # Applying the binary operator '+' (line 2177)
    result_add_570157 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 43), '+', Ntot_570155, float_570156)
    
    # Applying the binary operator '*' (line 2177)
    result_mul_570158 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 40), '*', int_570154, result_add_570157)
    
    # Applying the binary operator 'div' (line 2177)
    result_div_570159 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 31), 'div', ranks_570153, result_mul_570158)
    
    float_570160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2177, 58), 'float')
    # Applying the binary operator '+' (line 2177)
    result_add_570161 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 31), '+', result_div_570159, float_570160)
    
    # Processing the call keyword arguments (line 2177)
    kwargs_570162 = {}
    # Getting the type of 'distributions' (line 2177)
    distributions_570150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 8), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 2177)
    norm_570151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2177, 8), distributions_570150, 'norm')
    # Obtaining the member 'ppf' of a type (line 2177)
    ppf_570152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2177, 8), norm_570151, 'ppf')
    # Calling ppf(args, kwargs) (line 2177)
    ppf_call_result_570163 = invoke(stypy.reporting.localization.Localization(__file__, 2177, 8), ppf_570152, *[result_add_570161], **kwargs_570162)
    
    # Assigning a type to the variable 'a' (line 2177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2177, 4), 'a', ppf_call_result_570163)
    
    # Assigning a BinOp to a Name (line 2180):
    
    # Assigning a BinOp to a Name (line 2180):
    
    # Call to _apply_func(...): (line 2180)
    # Processing the call arguments (line 2180)
    # Getting the type of 'a' (line 2180)
    a_570165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 24), 'a', False)
    # Getting the type of 'g' (line 2180)
    g_570166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 27), 'g', False)
    # Getting the type of 'np' (line 2180)
    np_570167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 30), 'np', False)
    # Obtaining the member 'sum' of a type (line 2180)
    sum_570168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2180, 30), np_570167, 'sum')
    # Processing the call keyword arguments (line 2180)
    kwargs_570169 = {}
    # Getting the type of '_apply_func' (line 2180)
    _apply_func_570164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 12), '_apply_func', False)
    # Calling _apply_func(args, kwargs) (line 2180)
    _apply_func_call_result_570170 = invoke(stypy.reporting.localization.Localization(__file__, 2180, 12), _apply_func_570164, *[a_570165, g_570166, sum_570168], **kwargs_570169)
    
    # Getting the type of 'Ni' (line 2180)
    Ni_570171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 40), 'Ni')
    # Applying the binary operator 'div' (line 2180)
    result_div_570172 = python_operator(stypy.reporting.localization.Localization(__file__, 2180, 12), 'div', _apply_func_call_result_570170, Ni_570171)
    
    # Assigning a type to the variable 'Aibar' (line 2180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2180, 4), 'Aibar', result_div_570172)
    
    # Assigning a Call to a Name (line 2181):
    
    # Assigning a Call to a Name (line 2181):
    
    # Call to mean(...): (line 2181)
    # Processing the call arguments (line 2181)
    # Getting the type of 'a' (line 2181)
    a_570175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 20), 'a', False)
    # Processing the call keyword arguments (line 2181)
    int_570176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2181, 28), 'int')
    keyword_570177 = int_570176
    kwargs_570178 = {'axis': keyword_570177}
    # Getting the type of 'np' (line 2181)
    np_570173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'np', False)
    # Obtaining the member 'mean' of a type (line 2181)
    mean_570174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 12), np_570173, 'mean')
    # Calling mean(args, kwargs) (line 2181)
    mean_call_result_570179 = invoke(stypy.reporting.localization.Localization(__file__, 2181, 12), mean_570174, *[a_570175], **kwargs_570178)
    
    # Assigning a type to the variable 'anbar' (line 2181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 4), 'anbar', mean_call_result_570179)
    
    # Assigning a Call to a Name (line 2182):
    
    # Assigning a Call to a Name (line 2182):
    
    # Call to var(...): (line 2182)
    # Processing the call arguments (line 2182)
    # Getting the type of 'a' (line 2182)
    a_570182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 19), 'a', False)
    # Processing the call keyword arguments (line 2182)
    int_570183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 27), 'int')
    keyword_570184 = int_570183
    int_570185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 35), 'int')
    keyword_570186 = int_570185
    kwargs_570187 = {'ddof': keyword_570186, 'axis': keyword_570184}
    # Getting the type of 'np' (line 2182)
    np_570180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 12), 'np', False)
    # Obtaining the member 'var' of a type (line 2182)
    var_570181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 12), np_570180, 'var')
    # Calling var(args, kwargs) (line 2182)
    var_call_result_570188 = invoke(stypy.reporting.localization.Localization(__file__, 2182, 12), var_570181, *[a_570182], **kwargs_570187)
    
    # Assigning a type to the variable 'varsq' (line 2182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 4), 'varsq', var_call_result_570188)
    
    # Assigning a BinOp to a Name (line 2183):
    
    # Assigning a BinOp to a Name (line 2183):
    
    # Call to sum(...): (line 2183)
    # Processing the call arguments (line 2183)
    # Getting the type of 'Ni' (line 2183)
    Ni_570191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 17), 'Ni', False)
    
    # Call to asarray(...): (line 2183)
    # Processing the call arguments (line 2183)
    # Getting the type of 'Aibar' (line 2183)
    Aibar_570193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 31), 'Aibar', False)
    # Processing the call keyword arguments (line 2183)
    kwargs_570194 = {}
    # Getting the type of 'asarray' (line 2183)
    asarray_570192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 23), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2183)
    asarray_call_result_570195 = invoke(stypy.reporting.localization.Localization(__file__, 2183, 23), asarray_570192, *[Aibar_570193], **kwargs_570194)
    
    # Getting the type of 'anbar' (line 2183)
    anbar_570196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 40), 'anbar', False)
    # Applying the binary operator '-' (line 2183)
    result_sub_570197 = python_operator(stypy.reporting.localization.Localization(__file__, 2183, 23), '-', asarray_call_result_570195, anbar_570196)
    
    float_570198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2183, 48), 'float')
    # Applying the binary operator '**' (line 2183)
    result_pow_570199 = python_operator(stypy.reporting.localization.Localization(__file__, 2183, 22), '**', result_sub_570197, float_570198)
    
    # Applying the binary operator '*' (line 2183)
    result_mul_570200 = python_operator(stypy.reporting.localization.Localization(__file__, 2183, 17), '*', Ni_570191, result_pow_570199)
    
    # Processing the call keyword arguments (line 2183)
    int_570201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2183, 58), 'int')
    keyword_570202 = int_570201
    kwargs_570203 = {'axis': keyword_570202}
    # Getting the type of 'np' (line 2183)
    np_570189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 10), 'np', False)
    # Obtaining the member 'sum' of a type (line 2183)
    sum_570190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2183, 10), np_570189, 'sum')
    # Calling sum(args, kwargs) (line 2183)
    sum_call_result_570204 = invoke(stypy.reporting.localization.Localization(__file__, 2183, 10), sum_570190, *[result_mul_570200], **kwargs_570203)
    
    # Getting the type of 'varsq' (line 2183)
    varsq_570205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 63), 'varsq')
    # Applying the binary operator 'div' (line 2183)
    result_div_570206 = python_operator(stypy.reporting.localization.Localization(__file__, 2183, 10), 'div', sum_call_result_570204, varsq_570205)
    
    # Assigning a type to the variable 'Xsq' (line 2183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2183, 4), 'Xsq', result_div_570206)
    
    # Assigning a Call to a Name (line 2184):
    
    # Assigning a Call to a Name (line 2184):
    
    # Call to sf(...): (line 2184)
    # Processing the call arguments (line 2184)
    # Getting the type of 'Xsq' (line 2184)
    Xsq_570210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 33), 'Xsq', False)
    # Getting the type of 'k' (line 2184)
    k_570211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 38), 'k', False)
    int_570212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 42), 'int')
    # Applying the binary operator '-' (line 2184)
    result_sub_570213 = python_operator(stypy.reporting.localization.Localization(__file__, 2184, 38), '-', k_570211, int_570212)
    
    # Processing the call keyword arguments (line 2184)
    kwargs_570214 = {}
    # Getting the type of 'distributions' (line 2184)
    distributions_570207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 11), 'distributions', False)
    # Obtaining the member 'chi2' of a type (line 2184)
    chi2_570208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 11), distributions_570207, 'chi2')
    # Obtaining the member 'sf' of a type (line 2184)
    sf_570209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 11), chi2_570208, 'sf')
    # Calling sf(args, kwargs) (line 2184)
    sf_call_result_570215 = invoke(stypy.reporting.localization.Localization(__file__, 2184, 11), sf_570209, *[Xsq_570210, result_sub_570213], **kwargs_570214)
    
    # Assigning a type to the variable 'pval' (line 2184)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 4), 'pval', sf_call_result_570215)
    
    # Call to FlignerResult(...): (line 2185)
    # Processing the call arguments (line 2185)
    # Getting the type of 'Xsq' (line 2185)
    Xsq_570217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 25), 'Xsq', False)
    # Getting the type of 'pval' (line 2185)
    pval_570218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 30), 'pval', False)
    # Processing the call keyword arguments (line 2185)
    kwargs_570219 = {}
    # Getting the type of 'FlignerResult' (line 2185)
    FlignerResult_570216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 11), 'FlignerResult', False)
    # Calling FlignerResult(args, kwargs) (line 2185)
    FlignerResult_call_result_570220 = invoke(stypy.reporting.localization.Localization(__file__, 2185, 11), FlignerResult_570216, *[Xsq_570217, pval_570218], **kwargs_570219)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 4), 'stypy_return_type', FlignerResult_call_result_570220)
    
    # ################# End of 'fligner(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fligner' in the type store
    # Getting the type of 'stypy_return_type' (line 2066)
    stypy_return_type_570221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_570221)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fligner'
    return stypy_return_type_570221

# Assigning a type to the variable 'fligner' (line 2066)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2066, 0), 'fligner', fligner)

@norecursion
def mood(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_570222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 20), 'int')
    defaults = [int_570222]
    # Create a new context for function 'mood'
    module_type_store = module_type_store.open_function_context('mood', 2188, 0, False)
    
    # Passed parameters checking function
    mood.stypy_localization = localization
    mood.stypy_type_of_self = None
    mood.stypy_type_store = module_type_store
    mood.stypy_function_name = 'mood'
    mood.stypy_param_names_list = ['x', 'y', 'axis']
    mood.stypy_varargs_param_name = None
    mood.stypy_kwargs_param_name = None
    mood.stypy_call_defaults = defaults
    mood.stypy_call_varargs = varargs
    mood.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mood', ['x', 'y', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mood', localization, ['x', 'y', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mood(...)' code ##################

    str_570223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2254, (-1)), 'str', "\n    Perform Mood's test for equal scale parameters.\n\n    Mood's two-sample test for scale parameters is a non-parametric\n    test for the null hypothesis that two samples are drawn from the\n    same distribution with the same scale parameter.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays of sample data.\n    axis : int, optional\n        The axis along which the samples are tested.  `x` and `y` can be of\n        different length along `axis`.\n        If `axis` is None, `x` and `y` are flattened and the test is done on\n        all values in the flattened arrays.\n\n    Returns\n    -------\n    z : scalar or ndarray\n        The z-score for the hypothesis test.  For 1-D inputs a scalar is\n        returned.\n    p-value : scalar ndarray\n        The p-value for the hypothesis test.\n\n    See Also\n    --------\n    fligner : A non-parametric test for the equality of k variances\n    ansari : A non-parametric test for the equality of 2 variances\n    bartlett : A parametric test for equality of k variances in normal samples\n    levene : A parametric test for equality of k variances\n\n    Notes\n    -----\n    The data are assumed to be drawn from probability distributions ``f(x)``\n    and ``f(x/s) / s`` respectively, for some probability density function f.\n    The null hypothesis is that ``s == 1``.\n\n    For multi-dimensional arrays, if the inputs are of shapes\n    ``(n0, n1, n2, n3)``  and ``(n0, m1, n2, n3)``, then if ``axis=1``, the\n    resulting z and p values will have shape ``(n0, n2, n3)``.  Note that\n    ``n1`` and ``m1`` don't have to be equal, but the other dimensions do.\n\n    Examples\n    --------\n    >>> from scipy import stats\n    >>> np.random.seed(1234)\n    >>> x2 = np.random.randn(2, 45, 6, 7)\n    >>> x1 = np.random.randn(2, 30, 6, 7)\n    >>> z, p = stats.mood(x1, x2, axis=1)\n    >>> p.shape\n    (2, 6, 7)\n\n    Find the number of points where the difference in scale is not significant:\n\n    >>> (p > 0.1).sum()\n    74\n\n    Perform the test with different scales:\n\n    >>> x1 = np.random.randn(2, 30)\n    >>> x2 = np.random.randn(2, 35) * 10.0\n    >>> stats.mood(x1, x2, axis=1)\n    (array([-5.7178125 , -5.25342163]), array([  1.07904114e-08,   1.49299218e-07]))\n\n    ")
    
    # Assigning a Call to a Name (line 2255):
    
    # Assigning a Call to a Name (line 2255):
    
    # Call to asarray(...): (line 2255)
    # Processing the call arguments (line 2255)
    # Getting the type of 'x' (line 2255)
    x_570226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 19), 'x', False)
    # Processing the call keyword arguments (line 2255)
    # Getting the type of 'float' (line 2255)
    float_570227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 28), 'float', False)
    keyword_570228 = float_570227
    kwargs_570229 = {'dtype': keyword_570228}
    # Getting the type of 'np' (line 2255)
    np_570224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2255)
    asarray_570225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2255, 8), np_570224, 'asarray')
    # Calling asarray(args, kwargs) (line 2255)
    asarray_call_result_570230 = invoke(stypy.reporting.localization.Localization(__file__, 2255, 8), asarray_570225, *[x_570226], **kwargs_570229)
    
    # Assigning a type to the variable 'x' (line 2255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2255, 4), 'x', asarray_call_result_570230)
    
    # Assigning a Call to a Name (line 2256):
    
    # Assigning a Call to a Name (line 2256):
    
    # Call to asarray(...): (line 2256)
    # Processing the call arguments (line 2256)
    # Getting the type of 'y' (line 2256)
    y_570233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 19), 'y', False)
    # Processing the call keyword arguments (line 2256)
    # Getting the type of 'float' (line 2256)
    float_570234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 28), 'float', False)
    keyword_570235 = float_570234
    kwargs_570236 = {'dtype': keyword_570235}
    # Getting the type of 'np' (line 2256)
    np_570231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2256)
    asarray_570232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2256, 8), np_570231, 'asarray')
    # Calling asarray(args, kwargs) (line 2256)
    asarray_call_result_570237 = invoke(stypy.reporting.localization.Localization(__file__, 2256, 8), asarray_570232, *[y_570233], **kwargs_570236)
    
    # Assigning a type to the variable 'y' (line 2256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2256, 4), 'y', asarray_call_result_570237)
    
    # Type idiom detected: calculating its left and rigth part (line 2258)
    # Getting the type of 'axis' (line 2258)
    axis_570238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 7), 'axis')
    # Getting the type of 'None' (line 2258)
    None_570239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 15), 'None')
    
    (may_be_570240, more_types_in_union_570241) = may_be_none(axis_570238, None_570239)

    if may_be_570240:

        if more_types_in_union_570241:
            # Runtime conditional SSA (line 2258)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2259):
        
        # Assigning a Call to a Name (line 2259):
        
        # Call to flatten(...): (line 2259)
        # Processing the call keyword arguments (line 2259)
        kwargs_570244 = {}
        # Getting the type of 'x' (line 2259)
        x_570242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 12), 'x', False)
        # Obtaining the member 'flatten' of a type (line 2259)
        flatten_570243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 12), x_570242, 'flatten')
        # Calling flatten(args, kwargs) (line 2259)
        flatten_call_result_570245 = invoke(stypy.reporting.localization.Localization(__file__, 2259, 12), flatten_570243, *[], **kwargs_570244)
        
        # Assigning a type to the variable 'x' (line 2259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 8), 'x', flatten_call_result_570245)
        
        # Assigning a Call to a Name (line 2260):
        
        # Assigning a Call to a Name (line 2260):
        
        # Call to flatten(...): (line 2260)
        # Processing the call keyword arguments (line 2260)
        kwargs_570248 = {}
        # Getting the type of 'y' (line 2260)
        y_570246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 12), 'y', False)
        # Obtaining the member 'flatten' of a type (line 2260)
        flatten_570247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2260, 12), y_570246, 'flatten')
        # Calling flatten(args, kwargs) (line 2260)
        flatten_call_result_570249 = invoke(stypy.reporting.localization.Localization(__file__, 2260, 12), flatten_570247, *[], **kwargs_570248)
        
        # Assigning a type to the variable 'y' (line 2260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2260, 8), 'y', flatten_call_result_570249)
        
        # Assigning a Num to a Name (line 2261):
        
        # Assigning a Num to a Name (line 2261):
        int_570250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2261, 15), 'int')
        # Assigning a type to the variable 'axis' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'axis', int_570250)

        if more_types_in_union_570241:
            # SSA join for if statement (line 2258)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2264):
    
    # Assigning a Call to a Name (line 2264):
    
    # Call to tuple(...): (line 2264)
    # Processing the call arguments (line 2264)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 2264)
    # Processing the call arguments (line 2264)
    
    # Call to len(...): (line 2264)
    # Processing the call arguments (line 2264)
    # Getting the type of 'x' (line 2264)
    x_570262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 55), 'x', False)
    # Obtaining the member 'shape' of a type (line 2264)
    shape_570263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 55), x_570262, 'shape')
    # Processing the call keyword arguments (line 2264)
    kwargs_570264 = {}
    # Getting the type of 'len' (line 2264)
    len_570261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 51), 'len', False)
    # Calling len(args, kwargs) (line 2264)
    len_call_result_570265 = invoke(stypy.reporting.localization.Localization(__file__, 2264, 51), len_570261, *[shape_570263], **kwargs_570264)
    
    # Processing the call keyword arguments (line 2264)
    kwargs_570266 = {}
    # Getting the type of 'range' (line 2264)
    range_570260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 45), 'range', False)
    # Calling range(args, kwargs) (line 2264)
    range_call_result_570267 = invoke(stypy.reporting.localization.Localization(__file__, 2264, 45), range_570260, *[len_call_result_570265], **kwargs_570266)
    
    comprehension_570268 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2264, 23), range_call_result_570267)
    # Assigning a type to the variable 'ax' (line 2264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2264, 23), 'ax', comprehension_570268)
    
    # Getting the type of 'ax' (line 2264)
    ax_570257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 68), 'ax', False)
    # Getting the type of 'axis' (line 2264)
    axis_570258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 74), 'axis', False)
    # Applying the binary operator '!=' (line 2264)
    result_ne_570259 = python_operator(stypy.reporting.localization.Localization(__file__, 2264, 68), '!=', ax_570257, axis_570258)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ax' (line 2264)
    ax_570252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 31), 'ax', False)
    # Getting the type of 'x' (line 2264)
    x_570253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 23), 'x', False)
    # Obtaining the member 'shape' of a type (line 2264)
    shape_570254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 23), x_570253, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2264)
    getitem___570255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 23), shape_570254, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2264)
    subscript_call_result_570256 = invoke(stypy.reporting.localization.Localization(__file__, 2264, 23), getitem___570255, ax_570252)
    
    list_570269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2264, 23), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2264, 23), list_570269, subscript_call_result_570256)
    # Processing the call keyword arguments (line 2264)
    kwargs_570270 = {}
    # Getting the type of 'tuple' (line 2264)
    tuple_570251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 16), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2264)
    tuple_call_result_570271 = invoke(stypy.reporting.localization.Localization(__file__, 2264, 16), tuple_570251, *[list_570269], **kwargs_570270)
    
    # Assigning a type to the variable 'res_shape' (line 2264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2264, 4), 'res_shape', tuple_call_result_570271)
    
    
    
    # Getting the type of 'res_shape' (line 2265)
    res_shape_570272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 12), 'res_shape')
    
    # Call to tuple(...): (line 2265)
    # Processing the call arguments (line 2265)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 2265)
    # Processing the call arguments (line 2265)
    
    # Call to len(...): (line 2265)
    # Processing the call arguments (line 2265)
    # Getting the type of 'y' (line 2265)
    y_570284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 64), 'y', False)
    # Obtaining the member 'shape' of a type (line 2265)
    shape_570285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2265, 64), y_570284, 'shape')
    # Processing the call keyword arguments (line 2265)
    kwargs_570286 = {}
    # Getting the type of 'len' (line 2265)
    len_570283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 60), 'len', False)
    # Calling len(args, kwargs) (line 2265)
    len_call_result_570287 = invoke(stypy.reporting.localization.Localization(__file__, 2265, 60), len_570283, *[shape_570285], **kwargs_570286)
    
    # Processing the call keyword arguments (line 2265)
    kwargs_570288 = {}
    # Getting the type of 'range' (line 2265)
    range_570282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 54), 'range', False)
    # Calling range(args, kwargs) (line 2265)
    range_call_result_570289 = invoke(stypy.reporting.localization.Localization(__file__, 2265, 54), range_570282, *[len_call_result_570287], **kwargs_570288)
    
    comprehension_570290 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2265, 32), range_call_result_570289)
    # Assigning a type to the variable 'ax' (line 2265)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2265, 32), 'ax', comprehension_570290)
    
    # Getting the type of 'ax' (line 2266)
    ax_570279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 32), 'ax', False)
    # Getting the type of 'axis' (line 2266)
    axis_570280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 38), 'axis', False)
    # Applying the binary operator '!=' (line 2266)
    result_ne_570281 = python_operator(stypy.reporting.localization.Localization(__file__, 2266, 32), '!=', ax_570279, axis_570280)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ax' (line 2265)
    ax_570274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 40), 'ax', False)
    # Getting the type of 'y' (line 2265)
    y_570275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 32), 'y', False)
    # Obtaining the member 'shape' of a type (line 2265)
    shape_570276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2265, 32), y_570275, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2265)
    getitem___570277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2265, 32), shape_570276, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2265)
    subscript_call_result_570278 = invoke(stypy.reporting.localization.Localization(__file__, 2265, 32), getitem___570277, ax_570274)
    
    list_570291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2265, 32), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2265, 32), list_570291, subscript_call_result_570278)
    # Processing the call keyword arguments (line 2265)
    kwargs_570292 = {}
    # Getting the type of 'tuple' (line 2265)
    tuple_570273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 25), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2265)
    tuple_call_result_570293 = invoke(stypy.reporting.localization.Localization(__file__, 2265, 25), tuple_570273, *[list_570291], **kwargs_570292)
    
    # Applying the binary operator '==' (line 2265)
    result_eq_570294 = python_operator(stypy.reporting.localization.Localization(__file__, 2265, 12), '==', res_shape_570272, tuple_call_result_570293)
    
    # Applying the 'not' unary operator (line 2265)
    result_not__570295 = python_operator(stypy.reporting.localization.Localization(__file__, 2265, 7), 'not', result_eq_570294)
    
    # Testing the type of an if condition (line 2265)
    if_condition_570296 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2265, 4), result_not__570295)
    # Assigning a type to the variable 'if_condition_570296' (line 2265)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2265, 4), 'if_condition_570296', if_condition_570296)
    # SSA begins for if statement (line 2265)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2267)
    # Processing the call arguments (line 2267)
    str_570298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 25), 'str', 'Dimensions of x and y on all axes except `axis` should match')
    # Processing the call keyword arguments (line 2267)
    kwargs_570299 = {}
    # Getting the type of 'ValueError' (line 2267)
    ValueError_570297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2267)
    ValueError_call_result_570300 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 14), ValueError_570297, *[str_570298], **kwargs_570299)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2267, 8), ValueError_call_result_570300, 'raise parameter', BaseException)
    # SSA join for if statement (line 2265)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2270):
    
    # Assigning a Subscript to a Name (line 2270):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2270)
    axis_570301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 16), 'axis')
    # Getting the type of 'x' (line 2270)
    x_570302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 8), 'x')
    # Obtaining the member 'shape' of a type (line 2270)
    shape_570303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 8), x_570302, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2270)
    getitem___570304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 8), shape_570303, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2270)
    subscript_call_result_570305 = invoke(stypy.reporting.localization.Localization(__file__, 2270, 8), getitem___570304, axis_570301)
    
    # Assigning a type to the variable 'n' (line 2270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 4), 'n', subscript_call_result_570305)
    
    # Assigning a Subscript to a Name (line 2271):
    
    # Assigning a Subscript to a Name (line 2271):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2271)
    axis_570306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2271, 16), 'axis')
    # Getting the type of 'y' (line 2271)
    y_570307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2271, 8), 'y')
    # Obtaining the member 'shape' of a type (line 2271)
    shape_570308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2271, 8), y_570307, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2271)
    getitem___570309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2271, 8), shape_570308, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2271)
    subscript_call_result_570310 = invoke(stypy.reporting.localization.Localization(__file__, 2271, 8), getitem___570309, axis_570306)
    
    # Assigning a type to the variable 'm' (line 2271)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2271, 4), 'm', subscript_call_result_570310)
    
    # Assigning a BinOp to a Name (line 2272):
    
    # Assigning a BinOp to a Name (line 2272):
    # Getting the type of 'm' (line 2272)
    m_570311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 8), 'm')
    # Getting the type of 'n' (line 2272)
    n_570312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 12), 'n')
    # Applying the binary operator '+' (line 2272)
    result_add_570313 = python_operator(stypy.reporting.localization.Localization(__file__, 2272, 8), '+', m_570311, n_570312)
    
    # Assigning a type to the variable 'N' (line 2272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2272, 4), 'N', result_add_570313)
    
    
    # Getting the type of 'N' (line 2273)
    N_570314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 7), 'N')
    int_570315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2273, 11), 'int')
    # Applying the binary operator '<' (line 2273)
    result_lt_570316 = python_operator(stypy.reporting.localization.Localization(__file__, 2273, 7), '<', N_570314, int_570315)
    
    # Testing the type of an if condition (line 2273)
    if_condition_570317 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2273, 4), result_lt_570316)
    # Assigning a type to the variable 'if_condition_570317' (line 2273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2273, 4), 'if_condition_570317', if_condition_570317)
    # SSA begins for if statement (line 2273)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2274)
    # Processing the call arguments (line 2274)
    str_570319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2274, 25), 'str', 'Not enough observations.')
    # Processing the call keyword arguments (line 2274)
    kwargs_570320 = {}
    # Getting the type of 'ValueError' (line 2274)
    ValueError_570318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2274)
    ValueError_call_result_570321 = invoke(stypy.reporting.localization.Localization(__file__, 2274, 14), ValueError_570318, *[str_570319], **kwargs_570320)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2274, 8), ValueError_call_result_570321, 'raise parameter', BaseException)
    # SSA join for if statement (line 2273)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2276):
    
    # Assigning a Call to a Name (line 2276):
    
    # Call to concatenate(...): (line 2276)
    # Processing the call arguments (line 2276)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2276)
    tuple_570324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2276, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2276)
    # Adding element type (line 2276)
    # Getting the type of 'x' (line 2276)
    x_570325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 25), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2276, 25), tuple_570324, x_570325)
    # Adding element type (line 2276)
    # Getting the type of 'y' (line 2276)
    y_570326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 28), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2276, 25), tuple_570324, y_570326)
    
    # Processing the call keyword arguments (line 2276)
    # Getting the type of 'axis' (line 2276)
    axis_570327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 37), 'axis', False)
    keyword_570328 = axis_570327
    kwargs_570329 = {'axis': keyword_570328}
    # Getting the type of 'np' (line 2276)
    np_570322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 9), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 2276)
    concatenate_570323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 9), np_570322, 'concatenate')
    # Calling concatenate(args, kwargs) (line 2276)
    concatenate_call_result_570330 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 9), concatenate_570323, *[tuple_570324], **kwargs_570329)
    
    # Assigning a type to the variable 'xy' (line 2276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 4), 'xy', concatenate_call_result_570330)
    
    
    # Getting the type of 'axis' (line 2277)
    axis_570331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 7), 'axis')
    int_570332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2277, 15), 'int')
    # Applying the binary operator '!=' (line 2277)
    result_ne_570333 = python_operator(stypy.reporting.localization.Localization(__file__, 2277, 7), '!=', axis_570331, int_570332)
    
    # Testing the type of an if condition (line 2277)
    if_condition_570334 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2277, 4), result_ne_570333)
    # Assigning a type to the variable 'if_condition_570334' (line 2277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2277, 4), 'if_condition_570334', if_condition_570334)
    # SSA begins for if statement (line 2277)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2278):
    
    # Assigning a Call to a Name (line 2278):
    
    # Call to rollaxis(...): (line 2278)
    # Processing the call arguments (line 2278)
    # Getting the type of 'xy' (line 2278)
    xy_570337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2278, 25), 'xy', False)
    # Getting the type of 'axis' (line 2278)
    axis_570338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2278, 29), 'axis', False)
    # Processing the call keyword arguments (line 2278)
    kwargs_570339 = {}
    # Getting the type of 'np' (line 2278)
    np_570335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2278, 13), 'np', False)
    # Obtaining the member 'rollaxis' of a type (line 2278)
    rollaxis_570336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2278, 13), np_570335, 'rollaxis')
    # Calling rollaxis(args, kwargs) (line 2278)
    rollaxis_call_result_570340 = invoke(stypy.reporting.localization.Localization(__file__, 2278, 13), rollaxis_570336, *[xy_570337, axis_570338], **kwargs_570339)
    
    # Assigning a type to the variable 'xy' (line 2278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2278, 8), 'xy', rollaxis_call_result_570340)
    # SSA join for if statement (line 2277)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2280):
    
    # Assigning a Call to a Name (line 2280):
    
    # Call to reshape(...): (line 2280)
    # Processing the call arguments (line 2280)
    
    # Obtaining the type of the subscript
    int_570343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2280, 29), 'int')
    # Getting the type of 'xy' (line 2280)
    xy_570344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2280, 20), 'xy', False)
    # Obtaining the member 'shape' of a type (line 2280)
    shape_570345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2280, 20), xy_570344, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2280)
    getitem___570346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2280, 20), shape_570345, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2280)
    subscript_call_result_570347 = invoke(stypy.reporting.localization.Localization(__file__, 2280, 20), getitem___570346, int_570343)
    
    int_570348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2280, 33), 'int')
    # Processing the call keyword arguments (line 2280)
    kwargs_570349 = {}
    # Getting the type of 'xy' (line 2280)
    xy_570341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2280, 9), 'xy', False)
    # Obtaining the member 'reshape' of a type (line 2280)
    reshape_570342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2280, 9), xy_570341, 'reshape')
    # Calling reshape(args, kwargs) (line 2280)
    reshape_call_result_570350 = invoke(stypy.reporting.localization.Localization(__file__, 2280, 9), reshape_570342, *[subscript_call_result_570347, int_570348], **kwargs_570349)
    
    # Assigning a type to the variable 'xy' (line 2280)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2280, 4), 'xy', reshape_call_result_570350)
    
    # Assigning a Call to a Name (line 2285):
    
    # Assigning a Call to a Name (line 2285):
    
    # Call to zeros_like(...): (line 2285)
    # Processing the call arguments (line 2285)
    # Getting the type of 'xy' (line 2285)
    xy_570353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 30), 'xy', False)
    # Processing the call keyword arguments (line 2285)
    kwargs_570354 = {}
    # Getting the type of 'np' (line 2285)
    np_570351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 16), 'np', False)
    # Obtaining the member 'zeros_like' of a type (line 2285)
    zeros_like_570352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 16), np_570351, 'zeros_like')
    # Calling zeros_like(args, kwargs) (line 2285)
    zeros_like_call_result_570355 = invoke(stypy.reporting.localization.Localization(__file__, 2285, 16), zeros_like_570352, *[xy_570353], **kwargs_570354)
    
    # Assigning a type to the variable 'all_ranks' (line 2285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 4), 'all_ranks', zeros_like_call_result_570355)
    
    
    # Call to range(...): (line 2286)
    # Processing the call arguments (line 2286)
    
    # Obtaining the type of the subscript
    int_570357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2286, 28), 'int')
    # Getting the type of 'xy' (line 2286)
    xy_570358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 19), 'xy', False)
    # Obtaining the member 'shape' of a type (line 2286)
    shape_570359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2286, 19), xy_570358, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2286)
    getitem___570360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2286, 19), shape_570359, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2286)
    subscript_call_result_570361 = invoke(stypy.reporting.localization.Localization(__file__, 2286, 19), getitem___570360, int_570357)
    
    # Processing the call keyword arguments (line 2286)
    kwargs_570362 = {}
    # Getting the type of 'range' (line 2286)
    range_570356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 13), 'range', False)
    # Calling range(args, kwargs) (line 2286)
    range_call_result_570363 = invoke(stypy.reporting.localization.Localization(__file__, 2286, 13), range_570356, *[subscript_call_result_570361], **kwargs_570362)
    
    # Testing the type of a for loop iterable (line 2286)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2286, 4), range_call_result_570363)
    # Getting the type of the for loop variable (line 2286)
    for_loop_var_570364 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2286, 4), range_call_result_570363)
    # Assigning a type to the variable 'j' (line 2286)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2286, 4), 'j', for_loop_var_570364)
    # SSA begins for a for statement (line 2286)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 2287):
    
    # Assigning a Call to a Subscript (line 2287):
    
    # Call to rankdata(...): (line 2287)
    # Processing the call arguments (line 2287)
    
    # Obtaining the type of the subscript
    slice_570367 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2287, 41), None, None, None)
    # Getting the type of 'j' (line 2287)
    j_570368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 47), 'j', False)
    # Getting the type of 'xy' (line 2287)
    xy_570369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 41), 'xy', False)
    # Obtaining the member '__getitem__' of a type (line 2287)
    getitem___570370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2287, 41), xy_570369, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2287)
    subscript_call_result_570371 = invoke(stypy.reporting.localization.Localization(__file__, 2287, 41), getitem___570370, (slice_570367, j_570368))
    
    # Processing the call keyword arguments (line 2287)
    kwargs_570372 = {}
    # Getting the type of 'stats' (line 2287)
    stats_570365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 26), 'stats', False)
    # Obtaining the member 'rankdata' of a type (line 2287)
    rankdata_570366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2287, 26), stats_570365, 'rankdata')
    # Calling rankdata(args, kwargs) (line 2287)
    rankdata_call_result_570373 = invoke(stypy.reporting.localization.Localization(__file__, 2287, 26), rankdata_570366, *[subscript_call_result_570371], **kwargs_570372)
    
    # Getting the type of 'all_ranks' (line 2287)
    all_ranks_570374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 8), 'all_ranks')
    slice_570375 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2287, 8), None, None, None)
    # Getting the type of 'j' (line 2287)
    j_570376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 21), 'j')
    # Storing an element on a container (line 2287)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2287, 8), all_ranks_570374, ((slice_570375, j_570376), rankdata_call_result_570373))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2289):
    
    # Assigning a Subscript to a Name (line 2289):
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 2289)
    n_570377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 20), 'n')
    slice_570378 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2289, 9), None, n_570377, None)
    # Getting the type of 'all_ranks' (line 2289)
    all_ranks_570379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 9), 'all_ranks')
    # Obtaining the member '__getitem__' of a type (line 2289)
    getitem___570380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2289, 9), all_ranks_570379, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2289)
    subscript_call_result_570381 = invoke(stypy.reporting.localization.Localization(__file__, 2289, 9), getitem___570380, slice_570378)
    
    # Assigning a type to the variable 'Ri' (line 2289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2289, 4), 'Ri', subscript_call_result_570381)
    
    # Assigning a Call to a Name (line 2290):
    
    # Assigning a Call to a Name (line 2290):
    
    # Call to sum(...): (line 2290)
    # Processing the call arguments (line 2290)
    # Getting the type of 'Ri' (line 2290)
    Ri_570384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 16), 'Ri', False)
    # Getting the type of 'N' (line 2290)
    N_570385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 22), 'N', False)
    float_570386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2290, 26), 'float')
    # Applying the binary operator '+' (line 2290)
    result_add_570387 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 22), '+', N_570385, float_570386)
    
    int_570388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2290, 33), 'int')
    # Applying the binary operator 'div' (line 2290)
    result_div_570389 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 21), 'div', result_add_570387, int_570388)
    
    # Applying the binary operator '-' (line 2290)
    result_sub_570390 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 16), '-', Ri_570384, result_div_570389)
    
    int_570391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2290, 37), 'int')
    # Applying the binary operator '**' (line 2290)
    result_pow_570392 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 15), '**', result_sub_570390, int_570391)
    
    # Processing the call keyword arguments (line 2290)
    int_570393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2290, 45), 'int')
    keyword_570394 = int_570393
    kwargs_570395 = {'axis': keyword_570394}
    # Getting the type of 'np' (line 2290)
    np_570382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 8), 'np', False)
    # Obtaining the member 'sum' of a type (line 2290)
    sum_570383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2290, 8), np_570382, 'sum')
    # Calling sum(args, kwargs) (line 2290)
    sum_call_result_570396 = invoke(stypy.reporting.localization.Localization(__file__, 2290, 8), sum_570383, *[result_pow_570392], **kwargs_570395)
    
    # Assigning a type to the variable 'M' (line 2290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 4), 'M', sum_call_result_570396)
    
    # Assigning a BinOp to a Name (line 2292):
    
    # Assigning a BinOp to a Name (line 2292):
    # Getting the type of 'n' (line 2292)
    n_570397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 10), 'n')
    # Getting the type of 'N' (line 2292)
    N_570398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 15), 'N')
    # Getting the type of 'N' (line 2292)
    N_570399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 19), 'N')
    # Applying the binary operator '*' (line 2292)
    result_mul_570400 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 15), '*', N_570398, N_570399)
    
    float_570401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2292, 23), 'float')
    # Applying the binary operator '-' (line 2292)
    result_sub_570402 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 15), '-', result_mul_570400, float_570401)
    
    # Applying the binary operator '*' (line 2292)
    result_mul_570403 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 10), '*', n_570397, result_sub_570402)
    
    int_570404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2292, 30), 'int')
    # Applying the binary operator 'div' (line 2292)
    result_div_570405 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 28), 'div', result_mul_570403, int_570404)
    
    # Assigning a type to the variable 'mnM' (line 2292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2292, 4), 'mnM', result_div_570405)
    
    # Assigning a BinOp to a Name (line 2293):
    
    # Assigning a BinOp to a Name (line 2293):
    # Getting the type of 'm' (line 2293)
    m_570406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 11), 'm')
    # Getting the type of 'n' (line 2293)
    n_570407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 15), 'n')
    # Applying the binary operator '*' (line 2293)
    result_mul_570408 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 11), '*', m_570406, n_570407)
    
    # Getting the type of 'N' (line 2293)
    N_570409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 20), 'N')
    float_570410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, 24), 'float')
    # Applying the binary operator '+' (line 2293)
    result_add_570411 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 20), '+', N_570409, float_570410)
    
    # Applying the binary operator '*' (line 2293)
    result_mul_570412 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 17), '*', result_mul_570408, result_add_570411)
    
    # Getting the type of 'N' (line 2293)
    N_570413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 32), 'N')
    int_570414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, 36), 'int')
    # Applying the binary operator '+' (line 2293)
    result_add_570415 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 32), '+', N_570413, int_570414)
    
    # Applying the binary operator '*' (line 2293)
    result_mul_570416 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 29), '*', result_mul_570412, result_add_570415)
    
    # Getting the type of 'N' (line 2293)
    N_570417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 42), 'N')
    int_570418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, 46), 'int')
    # Applying the binary operator '-' (line 2293)
    result_sub_570419 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 42), '-', N_570417, int_570418)
    
    # Applying the binary operator '*' (line 2293)
    result_mul_570420 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 39), '*', result_mul_570416, result_sub_570419)
    
    int_570421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, 51), 'int')
    # Applying the binary operator 'div' (line 2293)
    result_div_570422 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 49), 'div', result_mul_570420, int_570421)
    
    # Assigning a type to the variable 'varM' (line 2293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 4), 'varM', result_div_570422)
    
    # Assigning a BinOp to a Name (line 2294):
    
    # Assigning a BinOp to a Name (line 2294):
    # Getting the type of 'M' (line 2294)
    M_570423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 9), 'M')
    # Getting the type of 'mnM' (line 2294)
    mnM_570424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 13), 'mnM')
    # Applying the binary operator '-' (line 2294)
    result_sub_570425 = python_operator(stypy.reporting.localization.Localization(__file__, 2294, 9), '-', M_570423, mnM_570424)
    
    
    # Call to sqrt(...): (line 2294)
    # Processing the call arguments (line 2294)
    # Getting the type of 'varM' (line 2294)
    varM_570427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 25), 'varM', False)
    # Processing the call keyword arguments (line 2294)
    kwargs_570428 = {}
    # Getting the type of 'sqrt' (line 2294)
    sqrt_570426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 20), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2294)
    sqrt_call_result_570429 = invoke(stypy.reporting.localization.Localization(__file__, 2294, 20), sqrt_570426, *[varM_570427], **kwargs_570428)
    
    # Applying the binary operator 'div' (line 2294)
    result_div_570430 = python_operator(stypy.reporting.localization.Localization(__file__, 2294, 8), 'div', result_sub_570425, sqrt_call_result_570429)
    
    # Assigning a type to the variable 'z' (line 2294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 4), 'z', result_div_570430)
    
    # Assigning a Compare to a Name (line 2297):
    
    # Assigning a Compare to a Name (line 2297):
    
    # Getting the type of 'z' (line 2297)
    z_570431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 12), 'z')
    int_570432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2297, 16), 'int')
    # Applying the binary operator '>' (line 2297)
    result_gt_570433 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 12), '>', z_570431, int_570432)
    
    # Assigning a type to the variable 'z_pos' (line 2297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2297, 4), 'z_pos', result_gt_570433)
    
    # Assigning a Call to a Name (line 2298):
    
    # Assigning a Call to a Name (line 2298):
    
    # Call to zeros_like(...): (line 2298)
    # Processing the call arguments (line 2298)
    # Getting the type of 'z' (line 2298)
    z_570436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 25), 'z', False)
    # Processing the call keyword arguments (line 2298)
    kwargs_570437 = {}
    # Getting the type of 'np' (line 2298)
    np_570434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 11), 'np', False)
    # Obtaining the member 'zeros_like' of a type (line 2298)
    zeros_like_570435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 11), np_570434, 'zeros_like')
    # Calling zeros_like(args, kwargs) (line 2298)
    zeros_like_call_result_570438 = invoke(stypy.reporting.localization.Localization(__file__, 2298, 11), zeros_like_570435, *[z_570436], **kwargs_570437)
    
    # Assigning a type to the variable 'pval' (line 2298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2298, 4), 'pval', zeros_like_call_result_570438)
    
    # Assigning a BinOp to a Subscript (line 2299):
    
    # Assigning a BinOp to a Subscript (line 2299):
    int_570439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2299, 18), 'int')
    
    # Call to sf(...): (line 2299)
    # Processing the call arguments (line 2299)
    
    # Obtaining the type of the subscript
    # Getting the type of 'z_pos' (line 2299)
    z_pos_570443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 46), 'z_pos', False)
    # Getting the type of 'z' (line 2299)
    z_570444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 44), 'z', False)
    # Obtaining the member '__getitem__' of a type (line 2299)
    getitem___570445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 44), z_570444, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2299)
    subscript_call_result_570446 = invoke(stypy.reporting.localization.Localization(__file__, 2299, 44), getitem___570445, z_pos_570443)
    
    # Processing the call keyword arguments (line 2299)
    kwargs_570447 = {}
    # Getting the type of 'distributions' (line 2299)
    distributions_570440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 22), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 2299)
    norm_570441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 22), distributions_570440, 'norm')
    # Obtaining the member 'sf' of a type (line 2299)
    sf_570442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 22), norm_570441, 'sf')
    # Calling sf(args, kwargs) (line 2299)
    sf_call_result_570448 = invoke(stypy.reporting.localization.Localization(__file__, 2299, 22), sf_570442, *[subscript_call_result_570446], **kwargs_570447)
    
    # Applying the binary operator '*' (line 2299)
    result_mul_570449 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 18), '*', int_570439, sf_call_result_570448)
    
    # Getting the type of 'pval' (line 2299)
    pval_570450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 4), 'pval')
    # Getting the type of 'z_pos' (line 2299)
    z_pos_570451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 9), 'z_pos')
    # Storing an element on a container (line 2299)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2299, 4), pval_570450, (z_pos_570451, result_mul_570449))
    
    # Assigning a BinOp to a Subscript (line 2300):
    
    # Assigning a BinOp to a Subscript (line 2300):
    int_570452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2300, 19), 'int')
    
    # Call to cdf(...): (line 2300)
    # Processing the call arguments (line 2300)
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'z_pos' (line 2300)
    z_pos_570456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 49), 'z_pos', False)
    # Applying the '~' unary operator (line 2300)
    result_inv_570457 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 48), '~', z_pos_570456)
    
    # Getting the type of 'z' (line 2300)
    z_570458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 46), 'z', False)
    # Obtaining the member '__getitem__' of a type (line 2300)
    getitem___570459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2300, 46), z_570458, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2300)
    subscript_call_result_570460 = invoke(stypy.reporting.localization.Localization(__file__, 2300, 46), getitem___570459, result_inv_570457)
    
    # Processing the call keyword arguments (line 2300)
    kwargs_570461 = {}
    # Getting the type of 'distributions' (line 2300)
    distributions_570453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 23), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 2300)
    norm_570454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2300, 23), distributions_570453, 'norm')
    # Obtaining the member 'cdf' of a type (line 2300)
    cdf_570455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2300, 23), norm_570454, 'cdf')
    # Calling cdf(args, kwargs) (line 2300)
    cdf_call_result_570462 = invoke(stypy.reporting.localization.Localization(__file__, 2300, 23), cdf_570455, *[subscript_call_result_570460], **kwargs_570461)
    
    # Applying the binary operator '*' (line 2300)
    result_mul_570463 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 19), '*', int_570452, cdf_call_result_570462)
    
    # Getting the type of 'pval' (line 2300)
    pval_570464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 4), 'pval')
    
    # Getting the type of 'z_pos' (line 2300)
    z_pos_570465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 10), 'z_pos')
    # Applying the '~' unary operator (line 2300)
    result_inv_570466 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 9), '~', z_pos_570465)
    
    # Storing an element on a container (line 2300)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2300, 4), pval_570464, (result_inv_570466, result_mul_570463))
    
    
    # Getting the type of 'res_shape' (line 2302)
    res_shape_570467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 7), 'res_shape')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2302)
    tuple_570468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2302, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2302)
    
    # Applying the binary operator '==' (line 2302)
    result_eq_570469 = python_operator(stypy.reporting.localization.Localization(__file__, 2302, 7), '==', res_shape_570467, tuple_570468)
    
    # Testing the type of an if condition (line 2302)
    if_condition_570470 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2302, 4), result_eq_570469)
    # Assigning a type to the variable 'if_condition_570470' (line 2302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2302, 4), 'if_condition_570470', if_condition_570470)
    # SSA begins for if statement (line 2302)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2304):
    
    # Assigning a Subscript to a Name (line 2304):
    
    # Obtaining the type of the subscript
    int_570471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2304, 14), 'int')
    # Getting the type of 'z' (line 2304)
    z_570472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 12), 'z')
    # Obtaining the member '__getitem__' of a type (line 2304)
    getitem___570473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 12), z_570472, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2304)
    subscript_call_result_570474 = invoke(stypy.reporting.localization.Localization(__file__, 2304, 12), getitem___570473, int_570471)
    
    # Assigning a type to the variable 'z' (line 2304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 8), 'z', subscript_call_result_570474)
    
    # Assigning a Subscript to a Name (line 2305):
    
    # Assigning a Subscript to a Name (line 2305):
    
    # Obtaining the type of the subscript
    int_570475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 20), 'int')
    # Getting the type of 'pval' (line 2305)
    pval_570476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 15), 'pval')
    # Obtaining the member '__getitem__' of a type (line 2305)
    getitem___570477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2305, 15), pval_570476, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2305)
    subscript_call_result_570478 = invoke(stypy.reporting.localization.Localization(__file__, 2305, 15), getitem___570477, int_570475)
    
    # Assigning a type to the variable 'pval' (line 2305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2305, 8), 'pval', subscript_call_result_570478)
    # SSA branch for the else part of an if statement (line 2302)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Attribute (line 2307):
    
    # Assigning a Name to a Attribute (line 2307):
    # Getting the type of 'res_shape' (line 2307)
    res_shape_570479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 18), 'res_shape')
    # Getting the type of 'z' (line 2307)
    z_570480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'z')
    # Setting the type of the member 'shape' of a type (line 2307)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 8), z_570480, 'shape', res_shape_570479)
    
    # Assigning a Name to a Attribute (line 2308):
    
    # Assigning a Name to a Attribute (line 2308):
    # Getting the type of 'res_shape' (line 2308)
    res_shape_570481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 21), 'res_shape')
    # Getting the type of 'pval' (line 2308)
    pval_570482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'pval')
    # Setting the type of the member 'shape' of a type (line 2308)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2308, 8), pval_570482, 'shape', res_shape_570481)
    # SSA join for if statement (line 2302)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2310)
    tuple_570483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2310, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2310)
    # Adding element type (line 2310)
    # Getting the type of 'z' (line 2310)
    z_570484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 11), 'z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2310, 11), tuple_570483, z_570484)
    # Adding element type (line 2310)
    # Getting the type of 'pval' (line 2310)
    pval_570485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 14), 'pval')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2310, 11), tuple_570483, pval_570485)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2310, 4), 'stypy_return_type', tuple_570483)
    
    # ################# End of 'mood(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mood' in the type store
    # Getting the type of 'stypy_return_type' (line 2188)
    stypy_return_type_570486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_570486)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mood'
    return stypy_return_type_570486

# Assigning a type to the variable 'mood' (line 2188)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 0), 'mood', mood)

# Assigning a Call to a Name (line 2313):

# Assigning a Call to a Name (line 2313):

# Call to namedtuple(...): (line 2313)
# Processing the call arguments (line 2313)
str_570488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2313, 28), 'str', 'WilcoxonResult')

# Obtaining an instance of the builtin type 'tuple' (line 2313)
tuple_570489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2313, 47), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2313)
# Adding element type (line 2313)
str_570490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2313, 47), 'str', 'statistic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2313, 47), tuple_570489, str_570490)
# Adding element type (line 2313)
str_570491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2313, 60), 'str', 'pvalue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2313, 47), tuple_570489, str_570491)

# Processing the call keyword arguments (line 2313)
kwargs_570492 = {}
# Getting the type of 'namedtuple' (line 2313)
namedtuple_570487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 17), 'namedtuple', False)
# Calling namedtuple(args, kwargs) (line 2313)
namedtuple_call_result_570493 = invoke(stypy.reporting.localization.Localization(__file__, 2313, 17), namedtuple_570487, *[str_570488, tuple_570489], **kwargs_570492)

# Assigning a type to the variable 'WilcoxonResult' (line 2313)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2313, 0), 'WilcoxonResult', namedtuple_call_result_570493)

@norecursion
def wilcoxon(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2316)
    None_570494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 18), 'None')
    str_570495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2316, 36), 'str', 'wilcox')
    # Getting the type of 'False' (line 2316)
    False_570496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 57), 'False')
    defaults = [None_570494, str_570495, False_570496]
    # Create a new context for function 'wilcoxon'
    module_type_store = module_type_store.open_function_context('wilcoxon', 2316, 0, False)
    
    # Passed parameters checking function
    wilcoxon.stypy_localization = localization
    wilcoxon.stypy_type_of_self = None
    wilcoxon.stypy_type_store = module_type_store
    wilcoxon.stypy_function_name = 'wilcoxon'
    wilcoxon.stypy_param_names_list = ['x', 'y', 'zero_method', 'correction']
    wilcoxon.stypy_varargs_param_name = None
    wilcoxon.stypy_kwargs_param_name = None
    wilcoxon.stypy_call_defaults = defaults
    wilcoxon.stypy_call_varargs = varargs
    wilcoxon.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'wilcoxon', ['x', 'y', 'zero_method', 'correction'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'wilcoxon', localization, ['x', 'y', 'zero_method', 'correction'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'wilcoxon(...)' code ##################

    str_570497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, (-1)), 'str', '\n    Calculate the Wilcoxon signed-rank test.\n\n    The Wilcoxon signed-rank test tests the null hypothesis that two\n    related paired samples come from the same distribution. In particular,\n    it tests whether the distribution of the differences x - y is symmetric\n    about zero. It is a non-parametric version of the paired T-test.\n\n    Parameters\n    ----------\n    x : array_like\n        The first set of measurements.\n    y : array_like, optional\n        The second set of measurements.  If `y` is not given, then the `x`\n        array is considered to be the differences between the two sets of\n        measurements.\n    zero_method : string, {"pratt", "wilcox", "zsplit"}, optional\n        "pratt":\n            Pratt treatment: includes zero-differences in the ranking process\n            (more conservative)\n        "wilcox":\n            Wilcox treatment: discards all zero-differences\n        "zsplit":\n            Zero rank split: just like Pratt, but spliting the zero rank\n            between positive and negative ones\n    correction : bool, optional\n        If True, apply continuity correction by adjusting the Wilcoxon rank\n        statistic by 0.5 towards the mean value when computing the\n        z-statistic.  Default is False.\n\n    Returns\n    -------\n    statistic : float\n        The sum of the ranks of the differences above or below zero, whichever\n        is smaller.\n    pvalue : float\n        The two-sided p-value for the test.\n\n    Notes\n    -----\n    Because the normal approximation is used for the calculations, the\n    samples used should be large.  A typical rule is to require that\n    n > 20.\n\n    References\n    ----------\n    .. [1] http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test\n\n    ')
    
    
    # Getting the type of 'zero_method' (line 2367)
    zero_method_570498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 7), 'zero_method')
    
    # Obtaining an instance of the builtin type 'list' (line 2367)
    list_570499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2367, 26), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2367)
    # Adding element type (line 2367)
    str_570500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2367, 27), 'str', 'wilcox')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2367, 26), list_570499, str_570500)
    # Adding element type (line 2367)
    str_570501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2367, 37), 'str', 'pratt')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2367, 26), list_570499, str_570501)
    # Adding element type (line 2367)
    str_570502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2367, 46), 'str', 'zsplit')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2367, 26), list_570499, str_570502)
    
    # Applying the binary operator 'notin' (line 2367)
    result_contains_570503 = python_operator(stypy.reporting.localization.Localization(__file__, 2367, 7), 'notin', zero_method_570498, list_570499)
    
    # Testing the type of an if condition (line 2367)
    if_condition_570504 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2367, 4), result_contains_570503)
    # Assigning a type to the variable 'if_condition_570504' (line 2367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2367, 4), 'if_condition_570504', if_condition_570504)
    # SSA begins for if statement (line 2367)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2368)
    # Processing the call arguments (line 2368)
    str_570506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2368, 25), 'str', "Zero method should be either 'wilcox' or 'pratt' or 'zsplit'")
    # Processing the call keyword arguments (line 2368)
    kwargs_570507 = {}
    # Getting the type of 'ValueError' (line 2368)
    ValueError_570505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2368)
    ValueError_call_result_570508 = invoke(stypy.reporting.localization.Localization(__file__, 2368, 14), ValueError_570505, *[str_570506], **kwargs_570507)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2368, 8), ValueError_call_result_570508, 'raise parameter', BaseException)
    # SSA join for if statement (line 2367)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2371)
    # Getting the type of 'y' (line 2371)
    y_570509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 7), 'y')
    # Getting the type of 'None' (line 2371)
    None_570510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 12), 'None')
    
    (may_be_570511, more_types_in_union_570512) = may_be_none(y_570509, None_570510)

    if may_be_570511:

        if more_types_in_union_570512:
            # Runtime conditional SSA (line 2371)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2372):
        
        # Assigning a Call to a Name (line 2372):
        
        # Call to asarray(...): (line 2372)
        # Processing the call arguments (line 2372)
        # Getting the type of 'x' (line 2372)
        x_570514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 20), 'x', False)
        # Processing the call keyword arguments (line 2372)
        kwargs_570515 = {}
        # Getting the type of 'asarray' (line 2372)
        asarray_570513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 12), 'asarray', False)
        # Calling asarray(args, kwargs) (line 2372)
        asarray_call_result_570516 = invoke(stypy.reporting.localization.Localization(__file__, 2372, 12), asarray_570513, *[x_570514], **kwargs_570515)
        
        # Assigning a type to the variable 'd' (line 2372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2372, 8), 'd', asarray_call_result_570516)

        if more_types_in_union_570512:
            # Runtime conditional SSA for else branch (line 2371)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_570511) or more_types_in_union_570512):
        
        # Assigning a Call to a Tuple (line 2374):
        
        # Assigning a Subscript to a Name (line 2374):
        
        # Obtaining the type of the subscript
        int_570517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 8), 'int')
        
        # Call to map(...): (line 2374)
        # Processing the call arguments (line 2374)
        # Getting the type of 'asarray' (line 2374)
        asarray_570519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 19), 'asarray', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2374)
        tuple_570520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2374)
        # Adding element type (line 2374)
        # Getting the type of 'x' (line 2374)
        x_570521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 29), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2374, 29), tuple_570520, x_570521)
        # Adding element type (line 2374)
        # Getting the type of 'y' (line 2374)
        y_570522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 32), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2374, 29), tuple_570520, y_570522)
        
        # Processing the call keyword arguments (line 2374)
        kwargs_570523 = {}
        # Getting the type of 'map' (line 2374)
        map_570518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 15), 'map', False)
        # Calling map(args, kwargs) (line 2374)
        map_call_result_570524 = invoke(stypy.reporting.localization.Localization(__file__, 2374, 15), map_570518, *[asarray_570519, tuple_570520], **kwargs_570523)
        
        # Obtaining the member '__getitem__' of a type (line 2374)
        getitem___570525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2374, 8), map_call_result_570524, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2374)
        subscript_call_result_570526 = invoke(stypy.reporting.localization.Localization(__file__, 2374, 8), getitem___570525, int_570517)
        
        # Assigning a type to the variable 'tuple_var_assignment_566042' (line 2374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2374, 8), 'tuple_var_assignment_566042', subscript_call_result_570526)
        
        # Assigning a Subscript to a Name (line 2374):
        
        # Obtaining the type of the subscript
        int_570527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 8), 'int')
        
        # Call to map(...): (line 2374)
        # Processing the call arguments (line 2374)
        # Getting the type of 'asarray' (line 2374)
        asarray_570529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 19), 'asarray', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2374)
        tuple_570530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2374)
        # Adding element type (line 2374)
        # Getting the type of 'x' (line 2374)
        x_570531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 29), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2374, 29), tuple_570530, x_570531)
        # Adding element type (line 2374)
        # Getting the type of 'y' (line 2374)
        y_570532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 32), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2374, 29), tuple_570530, y_570532)
        
        # Processing the call keyword arguments (line 2374)
        kwargs_570533 = {}
        # Getting the type of 'map' (line 2374)
        map_570528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 15), 'map', False)
        # Calling map(args, kwargs) (line 2374)
        map_call_result_570534 = invoke(stypy.reporting.localization.Localization(__file__, 2374, 15), map_570528, *[asarray_570529, tuple_570530], **kwargs_570533)
        
        # Obtaining the member '__getitem__' of a type (line 2374)
        getitem___570535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2374, 8), map_call_result_570534, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2374)
        subscript_call_result_570536 = invoke(stypy.reporting.localization.Localization(__file__, 2374, 8), getitem___570535, int_570527)
        
        # Assigning a type to the variable 'tuple_var_assignment_566043' (line 2374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2374, 8), 'tuple_var_assignment_566043', subscript_call_result_570536)
        
        # Assigning a Name to a Name (line 2374):
        # Getting the type of 'tuple_var_assignment_566042' (line 2374)
        tuple_var_assignment_566042_570537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 8), 'tuple_var_assignment_566042')
        # Assigning a type to the variable 'x' (line 2374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2374, 8), 'x', tuple_var_assignment_566042_570537)
        
        # Assigning a Name to a Name (line 2374):
        # Getting the type of 'tuple_var_assignment_566043' (line 2374)
        tuple_var_assignment_566043_570538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 8), 'tuple_var_assignment_566043')
        # Assigning a type to the variable 'y' (line 2374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2374, 11), 'y', tuple_var_assignment_566043_570538)
        
        
        
        # Call to len(...): (line 2375)
        # Processing the call arguments (line 2375)
        # Getting the type of 'x' (line 2375)
        x_570540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 15), 'x', False)
        # Processing the call keyword arguments (line 2375)
        kwargs_570541 = {}
        # Getting the type of 'len' (line 2375)
        len_570539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 11), 'len', False)
        # Calling len(args, kwargs) (line 2375)
        len_call_result_570542 = invoke(stypy.reporting.localization.Localization(__file__, 2375, 11), len_570539, *[x_570540], **kwargs_570541)
        
        
        # Call to len(...): (line 2375)
        # Processing the call arguments (line 2375)
        # Getting the type of 'y' (line 2375)
        y_570544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 25), 'y', False)
        # Processing the call keyword arguments (line 2375)
        kwargs_570545 = {}
        # Getting the type of 'len' (line 2375)
        len_570543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 21), 'len', False)
        # Calling len(args, kwargs) (line 2375)
        len_call_result_570546 = invoke(stypy.reporting.localization.Localization(__file__, 2375, 21), len_570543, *[y_570544], **kwargs_570545)
        
        # Applying the binary operator '!=' (line 2375)
        result_ne_570547 = python_operator(stypy.reporting.localization.Localization(__file__, 2375, 11), '!=', len_call_result_570542, len_call_result_570546)
        
        # Testing the type of an if condition (line 2375)
        if_condition_570548 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2375, 8), result_ne_570547)
        # Assigning a type to the variable 'if_condition_570548' (line 2375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2375, 8), 'if_condition_570548', if_condition_570548)
        # SSA begins for if statement (line 2375)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2376)
        # Processing the call arguments (line 2376)
        str_570550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2376, 29), 'str', 'Unequal N in wilcoxon.  Aborting.')
        # Processing the call keyword arguments (line 2376)
        kwargs_570551 = {}
        # Getting the type of 'ValueError' (line 2376)
        ValueError_570549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2376)
        ValueError_call_result_570552 = invoke(stypy.reporting.localization.Localization(__file__, 2376, 18), ValueError_570549, *[str_570550], **kwargs_570551)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2376, 12), ValueError_call_result_570552, 'raise parameter', BaseException)
        # SSA join for if statement (line 2375)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 2377):
        
        # Assigning a BinOp to a Name (line 2377):
        # Getting the type of 'x' (line 2377)
        x_570553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 12), 'x')
        # Getting the type of 'y' (line 2377)
        y_570554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 16), 'y')
        # Applying the binary operator '-' (line 2377)
        result_sub_570555 = python_operator(stypy.reporting.localization.Localization(__file__, 2377, 12), '-', x_570553, y_570554)
        
        # Assigning a type to the variable 'd' (line 2377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2377, 8), 'd', result_sub_570555)

        if (may_be_570511 and more_types_in_union_570512):
            # SSA join for if statement (line 2371)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'zero_method' (line 2379)
    zero_method_570556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 7), 'zero_method')
    str_570557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2379, 22), 'str', 'wilcox')
    # Applying the binary operator '==' (line 2379)
    result_eq_570558 = python_operator(stypy.reporting.localization.Localization(__file__, 2379, 7), '==', zero_method_570556, str_570557)
    
    # Testing the type of an if condition (line 2379)
    if_condition_570559 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2379, 4), result_eq_570558)
    # Assigning a type to the variable 'if_condition_570559' (line 2379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2379, 4), 'if_condition_570559', if_condition_570559)
    # SSA begins for if statement (line 2379)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2381):
    
    # Assigning a Call to a Name (line 2381):
    
    # Call to compress(...): (line 2381)
    # Processing the call arguments (line 2381)
    
    # Call to not_equal(...): (line 2381)
    # Processing the call arguments (line 2381)
    # Getting the type of 'd' (line 2381)
    d_570563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 34), 'd', False)
    int_570564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2381, 37), 'int')
    # Processing the call keyword arguments (line 2381)
    kwargs_570565 = {}
    # Getting the type of 'np' (line 2381)
    np_570561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 21), 'np', False)
    # Obtaining the member 'not_equal' of a type (line 2381)
    not_equal_570562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2381, 21), np_570561, 'not_equal')
    # Calling not_equal(args, kwargs) (line 2381)
    not_equal_call_result_570566 = invoke(stypy.reporting.localization.Localization(__file__, 2381, 21), not_equal_570562, *[d_570563, int_570564], **kwargs_570565)
    
    # Getting the type of 'd' (line 2381)
    d_570567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 41), 'd', False)
    # Processing the call keyword arguments (line 2381)
    int_570568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2381, 49), 'int')
    keyword_570569 = int_570568
    kwargs_570570 = {'axis': keyword_570569}
    # Getting the type of 'compress' (line 2381)
    compress_570560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 12), 'compress', False)
    # Calling compress(args, kwargs) (line 2381)
    compress_call_result_570571 = invoke(stypy.reporting.localization.Localization(__file__, 2381, 12), compress_570560, *[not_equal_call_result_570566, d_570567], **kwargs_570570)
    
    # Assigning a type to the variable 'd' (line 2381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2381, 8), 'd', compress_call_result_570571)
    # SSA join for if statement (line 2379)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2383):
    
    # Assigning a Call to a Name (line 2383):
    
    # Call to len(...): (line 2383)
    # Processing the call arguments (line 2383)
    # Getting the type of 'd' (line 2383)
    d_570573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 16), 'd', False)
    # Processing the call keyword arguments (line 2383)
    kwargs_570574 = {}
    # Getting the type of 'len' (line 2383)
    len_570572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 12), 'len', False)
    # Calling len(args, kwargs) (line 2383)
    len_call_result_570575 = invoke(stypy.reporting.localization.Localization(__file__, 2383, 12), len_570572, *[d_570573], **kwargs_570574)
    
    # Assigning a type to the variable 'count' (line 2383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2383, 4), 'count', len_call_result_570575)
    
    
    # Getting the type of 'count' (line 2384)
    count_570576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 7), 'count')
    int_570577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2384, 15), 'int')
    # Applying the binary operator '<' (line 2384)
    result_lt_570578 = python_operator(stypy.reporting.localization.Localization(__file__, 2384, 7), '<', count_570576, int_570577)
    
    # Testing the type of an if condition (line 2384)
    if_condition_570579 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2384, 4), result_lt_570578)
    # Assigning a type to the variable 'if_condition_570579' (line 2384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2384, 4), 'if_condition_570579', if_condition_570579)
    # SSA begins for if statement (line 2384)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2385)
    # Processing the call arguments (line 2385)
    str_570582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2385, 22), 'str', 'Warning: sample size too small for normal approximation.')
    # Processing the call keyword arguments (line 2385)
    kwargs_570583 = {}
    # Getting the type of 'warnings' (line 2385)
    warnings_570580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2385)
    warn_570581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2385, 8), warnings_570580, 'warn')
    # Calling warn(args, kwargs) (line 2385)
    warn_call_result_570584 = invoke(stypy.reporting.localization.Localization(__file__, 2385, 8), warn_570581, *[str_570582], **kwargs_570583)
    
    # SSA join for if statement (line 2384)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2387):
    
    # Assigning a Call to a Name (line 2387):
    
    # Call to rankdata(...): (line 2387)
    # Processing the call arguments (line 2387)
    
    # Call to abs(...): (line 2387)
    # Processing the call arguments (line 2387)
    # Getting the type of 'd' (line 2387)
    d_570588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 27), 'd', False)
    # Processing the call keyword arguments (line 2387)
    kwargs_570589 = {}
    # Getting the type of 'abs' (line 2387)
    abs_570587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 23), 'abs', False)
    # Calling abs(args, kwargs) (line 2387)
    abs_call_result_570590 = invoke(stypy.reporting.localization.Localization(__file__, 2387, 23), abs_570587, *[d_570588], **kwargs_570589)
    
    # Processing the call keyword arguments (line 2387)
    kwargs_570591 = {}
    # Getting the type of 'stats' (line 2387)
    stats_570585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 8), 'stats', False)
    # Obtaining the member 'rankdata' of a type (line 2387)
    rankdata_570586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2387, 8), stats_570585, 'rankdata')
    # Calling rankdata(args, kwargs) (line 2387)
    rankdata_call_result_570592 = invoke(stypy.reporting.localization.Localization(__file__, 2387, 8), rankdata_570586, *[abs_call_result_570590], **kwargs_570591)
    
    # Assigning a type to the variable 'r' (line 2387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2387, 4), 'r', rankdata_call_result_570592)
    
    # Assigning a Call to a Name (line 2388):
    
    # Assigning a Call to a Name (line 2388):
    
    # Call to sum(...): (line 2388)
    # Processing the call arguments (line 2388)
    
    # Getting the type of 'd' (line 2388)
    d_570595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 21), 'd', False)
    int_570596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2388, 25), 'int')
    # Applying the binary operator '>' (line 2388)
    result_gt_570597 = python_operator(stypy.reporting.localization.Localization(__file__, 2388, 21), '>', d_570595, int_570596)
    
    # Getting the type of 'r' (line 2388)
    r_570598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 30), 'r', False)
    # Applying the binary operator '*' (line 2388)
    result_mul_570599 = python_operator(stypy.reporting.localization.Localization(__file__, 2388, 20), '*', result_gt_570597, r_570598)
    
    # Processing the call keyword arguments (line 2388)
    int_570600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2388, 38), 'int')
    keyword_570601 = int_570600
    kwargs_570602 = {'axis': keyword_570601}
    # Getting the type of 'np' (line 2388)
    np_570593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 13), 'np', False)
    # Obtaining the member 'sum' of a type (line 2388)
    sum_570594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2388, 13), np_570593, 'sum')
    # Calling sum(args, kwargs) (line 2388)
    sum_call_result_570603 = invoke(stypy.reporting.localization.Localization(__file__, 2388, 13), sum_570594, *[result_mul_570599], **kwargs_570602)
    
    # Assigning a type to the variable 'r_plus' (line 2388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2388, 4), 'r_plus', sum_call_result_570603)
    
    # Assigning a Call to a Name (line 2389):
    
    # Assigning a Call to a Name (line 2389):
    
    # Call to sum(...): (line 2389)
    # Processing the call arguments (line 2389)
    
    # Getting the type of 'd' (line 2389)
    d_570606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 22), 'd', False)
    int_570607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2389, 26), 'int')
    # Applying the binary operator '<' (line 2389)
    result_lt_570608 = python_operator(stypy.reporting.localization.Localization(__file__, 2389, 22), '<', d_570606, int_570607)
    
    # Getting the type of 'r' (line 2389)
    r_570609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 31), 'r', False)
    # Applying the binary operator '*' (line 2389)
    result_mul_570610 = python_operator(stypy.reporting.localization.Localization(__file__, 2389, 21), '*', result_lt_570608, r_570609)
    
    # Processing the call keyword arguments (line 2389)
    int_570611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2389, 39), 'int')
    keyword_570612 = int_570611
    kwargs_570613 = {'axis': keyword_570612}
    # Getting the type of 'np' (line 2389)
    np_570604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 14), 'np', False)
    # Obtaining the member 'sum' of a type (line 2389)
    sum_570605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2389, 14), np_570604, 'sum')
    # Calling sum(args, kwargs) (line 2389)
    sum_call_result_570614 = invoke(stypy.reporting.localization.Localization(__file__, 2389, 14), sum_570605, *[result_mul_570610], **kwargs_570613)
    
    # Assigning a type to the variable 'r_minus' (line 2389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2389, 4), 'r_minus', sum_call_result_570614)
    
    
    # Getting the type of 'zero_method' (line 2391)
    zero_method_570615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 7), 'zero_method')
    str_570616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2391, 22), 'str', 'zsplit')
    # Applying the binary operator '==' (line 2391)
    result_eq_570617 = python_operator(stypy.reporting.localization.Localization(__file__, 2391, 7), '==', zero_method_570615, str_570616)
    
    # Testing the type of an if condition (line 2391)
    if_condition_570618 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2391, 4), result_eq_570617)
    # Assigning a type to the variable 'if_condition_570618' (line 2391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2391, 4), 'if_condition_570618', if_condition_570618)
    # SSA begins for if statement (line 2391)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2392):
    
    # Assigning a Call to a Name (line 2392):
    
    # Call to sum(...): (line 2392)
    # Processing the call arguments (line 2392)
    
    # Getting the type of 'd' (line 2392)
    d_570621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 25), 'd', False)
    int_570622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2392, 30), 'int')
    # Applying the binary operator '==' (line 2392)
    result_eq_570623 = python_operator(stypy.reporting.localization.Localization(__file__, 2392, 25), '==', d_570621, int_570622)
    
    # Getting the type of 'r' (line 2392)
    r_570624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 35), 'r', False)
    # Applying the binary operator '*' (line 2392)
    result_mul_570625 = python_operator(stypy.reporting.localization.Localization(__file__, 2392, 24), '*', result_eq_570623, r_570624)
    
    # Processing the call keyword arguments (line 2392)
    int_570626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2392, 43), 'int')
    keyword_570627 = int_570626
    kwargs_570628 = {'axis': keyword_570627}
    # Getting the type of 'np' (line 2392)
    np_570619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 17), 'np', False)
    # Obtaining the member 'sum' of a type (line 2392)
    sum_570620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2392, 17), np_570619, 'sum')
    # Calling sum(args, kwargs) (line 2392)
    sum_call_result_570629 = invoke(stypy.reporting.localization.Localization(__file__, 2392, 17), sum_570620, *[result_mul_570625], **kwargs_570628)
    
    # Assigning a type to the variable 'r_zero' (line 2392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'r_zero', sum_call_result_570629)
    
    # Getting the type of 'r_plus' (line 2393)
    r_plus_570630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 8), 'r_plus')
    # Getting the type of 'r_zero' (line 2393)
    r_zero_570631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 18), 'r_zero')
    float_570632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2393, 27), 'float')
    # Applying the binary operator 'div' (line 2393)
    result_div_570633 = python_operator(stypy.reporting.localization.Localization(__file__, 2393, 18), 'div', r_zero_570631, float_570632)
    
    # Applying the binary operator '+=' (line 2393)
    result_iadd_570634 = python_operator(stypy.reporting.localization.Localization(__file__, 2393, 8), '+=', r_plus_570630, result_div_570633)
    # Assigning a type to the variable 'r_plus' (line 2393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 8), 'r_plus', result_iadd_570634)
    
    
    # Getting the type of 'r_minus' (line 2394)
    r_minus_570635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'r_minus')
    # Getting the type of 'r_zero' (line 2394)
    r_zero_570636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 19), 'r_zero')
    float_570637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2394, 28), 'float')
    # Applying the binary operator 'div' (line 2394)
    result_div_570638 = python_operator(stypy.reporting.localization.Localization(__file__, 2394, 19), 'div', r_zero_570636, float_570637)
    
    # Applying the binary operator '+=' (line 2394)
    result_iadd_570639 = python_operator(stypy.reporting.localization.Localization(__file__, 2394, 8), '+=', r_minus_570635, result_div_570638)
    # Assigning a type to the variable 'r_minus' (line 2394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'r_minus', result_iadd_570639)
    
    # SSA join for if statement (line 2391)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2396):
    
    # Assigning a Call to a Name (line 2396):
    
    # Call to min(...): (line 2396)
    # Processing the call arguments (line 2396)
    # Getting the type of 'r_plus' (line 2396)
    r_plus_570641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 12), 'r_plus', False)
    # Getting the type of 'r_minus' (line 2396)
    r_minus_570642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 20), 'r_minus', False)
    # Processing the call keyword arguments (line 2396)
    kwargs_570643 = {}
    # Getting the type of 'min' (line 2396)
    min_570640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 8), 'min', False)
    # Calling min(args, kwargs) (line 2396)
    min_call_result_570644 = invoke(stypy.reporting.localization.Localization(__file__, 2396, 8), min_570640, *[r_plus_570641, r_minus_570642], **kwargs_570643)
    
    # Assigning a type to the variable 'T' (line 2396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2396, 4), 'T', min_call_result_570644)
    
    # Assigning a BinOp to a Name (line 2397):
    
    # Assigning a BinOp to a Name (line 2397):
    # Getting the type of 'count' (line 2397)
    count_570645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 9), 'count')
    # Getting the type of 'count' (line 2397)
    count_570646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 18), 'count')
    float_570647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2397, 26), 'float')
    # Applying the binary operator '+' (line 2397)
    result_add_570648 = python_operator(stypy.reporting.localization.Localization(__file__, 2397, 18), '+', count_570646, float_570647)
    
    # Applying the binary operator '*' (line 2397)
    result_mul_570649 = python_operator(stypy.reporting.localization.Localization(__file__, 2397, 9), '*', count_570645, result_add_570648)
    
    float_570650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2397, 32), 'float')
    # Applying the binary operator '*' (line 2397)
    result_mul_570651 = python_operator(stypy.reporting.localization.Localization(__file__, 2397, 30), '*', result_mul_570649, float_570650)
    
    # Assigning a type to the variable 'mn' (line 2397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2397, 4), 'mn', result_mul_570651)
    
    # Assigning a BinOp to a Name (line 2398):
    
    # Assigning a BinOp to a Name (line 2398):
    # Getting the type of 'count' (line 2398)
    count_570652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 9), 'count')
    # Getting the type of 'count' (line 2398)
    count_570653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 18), 'count')
    float_570654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2398, 26), 'float')
    # Applying the binary operator '+' (line 2398)
    result_add_570655 = python_operator(stypy.reporting.localization.Localization(__file__, 2398, 18), '+', count_570653, float_570654)
    
    # Applying the binary operator '*' (line 2398)
    result_mul_570656 = python_operator(stypy.reporting.localization.Localization(__file__, 2398, 9), '*', count_570652, result_add_570655)
    
    float_570657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2398, 33), 'float')
    # Getting the type of 'count' (line 2398)
    count_570658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 38), 'count')
    # Applying the binary operator '*' (line 2398)
    result_mul_570659 = python_operator(stypy.reporting.localization.Localization(__file__, 2398, 33), '*', float_570657, count_570658)
    
    float_570660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2398, 46), 'float')
    # Applying the binary operator '+' (line 2398)
    result_add_570661 = python_operator(stypy.reporting.localization.Localization(__file__, 2398, 33), '+', result_mul_570659, float_570660)
    
    # Applying the binary operator '*' (line 2398)
    result_mul_570662 = python_operator(stypy.reporting.localization.Localization(__file__, 2398, 30), '*', result_mul_570656, result_add_570661)
    
    # Assigning a type to the variable 'se' (line 2398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2398, 4), 'se', result_mul_570662)
    
    
    # Getting the type of 'zero_method' (line 2400)
    zero_method_570663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 7), 'zero_method')
    str_570664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2400, 22), 'str', 'pratt')
    # Applying the binary operator '==' (line 2400)
    result_eq_570665 = python_operator(stypy.reporting.localization.Localization(__file__, 2400, 7), '==', zero_method_570663, str_570664)
    
    # Testing the type of an if condition (line 2400)
    if_condition_570666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2400, 4), result_eq_570665)
    # Assigning a type to the variable 'if_condition_570666' (line 2400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2400, 4), 'if_condition_570666', if_condition_570666)
    # SSA begins for if statement (line 2400)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2401):
    
    # Assigning a Subscript to a Name (line 2401):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'd' (line 2401)
    d_570667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 14), 'd')
    int_570668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2401, 19), 'int')
    # Applying the binary operator '!=' (line 2401)
    result_ne_570669 = python_operator(stypy.reporting.localization.Localization(__file__, 2401, 14), '!=', d_570667, int_570668)
    
    # Getting the type of 'r' (line 2401)
    r_570670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 12), 'r')
    # Obtaining the member '__getitem__' of a type (line 2401)
    getitem___570671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2401, 12), r_570670, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2401)
    subscript_call_result_570672 = invoke(stypy.reporting.localization.Localization(__file__, 2401, 12), getitem___570671, result_ne_570669)
    
    # Assigning a type to the variable 'r' (line 2401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2401, 8), 'r', subscript_call_result_570672)
    # SSA join for if statement (line 2400)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 2403):
    
    # Assigning a Subscript to a Name (line 2403):
    
    # Obtaining the type of the subscript
    int_570673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2403, 4), 'int')
    
    # Call to find_repeats(...): (line 2403)
    # Processing the call arguments (line 2403)
    # Getting the type of 'r' (line 2403)
    r_570675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 35), 'r', False)
    # Processing the call keyword arguments (line 2403)
    kwargs_570676 = {}
    # Getting the type of 'find_repeats' (line 2403)
    find_repeats_570674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 22), 'find_repeats', False)
    # Calling find_repeats(args, kwargs) (line 2403)
    find_repeats_call_result_570677 = invoke(stypy.reporting.localization.Localization(__file__, 2403, 22), find_repeats_570674, *[r_570675], **kwargs_570676)
    
    # Obtaining the member '__getitem__' of a type (line 2403)
    getitem___570678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2403, 4), find_repeats_call_result_570677, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2403)
    subscript_call_result_570679 = invoke(stypy.reporting.localization.Localization(__file__, 2403, 4), getitem___570678, int_570673)
    
    # Assigning a type to the variable 'tuple_var_assignment_566044' (line 2403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2403, 4), 'tuple_var_assignment_566044', subscript_call_result_570679)
    
    # Assigning a Subscript to a Name (line 2403):
    
    # Obtaining the type of the subscript
    int_570680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2403, 4), 'int')
    
    # Call to find_repeats(...): (line 2403)
    # Processing the call arguments (line 2403)
    # Getting the type of 'r' (line 2403)
    r_570682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 35), 'r', False)
    # Processing the call keyword arguments (line 2403)
    kwargs_570683 = {}
    # Getting the type of 'find_repeats' (line 2403)
    find_repeats_570681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 22), 'find_repeats', False)
    # Calling find_repeats(args, kwargs) (line 2403)
    find_repeats_call_result_570684 = invoke(stypy.reporting.localization.Localization(__file__, 2403, 22), find_repeats_570681, *[r_570682], **kwargs_570683)
    
    # Obtaining the member '__getitem__' of a type (line 2403)
    getitem___570685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2403, 4), find_repeats_call_result_570684, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2403)
    subscript_call_result_570686 = invoke(stypy.reporting.localization.Localization(__file__, 2403, 4), getitem___570685, int_570680)
    
    # Assigning a type to the variable 'tuple_var_assignment_566045' (line 2403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2403, 4), 'tuple_var_assignment_566045', subscript_call_result_570686)
    
    # Assigning a Name to a Name (line 2403):
    # Getting the type of 'tuple_var_assignment_566044' (line 2403)
    tuple_var_assignment_566044_570687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 4), 'tuple_var_assignment_566044')
    # Assigning a type to the variable 'replist' (line 2403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2403, 4), 'replist', tuple_var_assignment_566044_570687)
    
    # Assigning a Name to a Name (line 2403):
    # Getting the type of 'tuple_var_assignment_566045' (line 2403)
    tuple_var_assignment_566045_570688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 4), 'tuple_var_assignment_566045')
    # Assigning a type to the variable 'repnum' (line 2403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2403, 13), 'repnum', tuple_var_assignment_566045_570688)
    
    
    # Getting the type of 'repnum' (line 2404)
    repnum_570689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2404, 7), 'repnum')
    # Obtaining the member 'size' of a type (line 2404)
    size_570690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2404, 7), repnum_570689, 'size')
    int_570691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2404, 22), 'int')
    # Applying the binary operator '!=' (line 2404)
    result_ne_570692 = python_operator(stypy.reporting.localization.Localization(__file__, 2404, 7), '!=', size_570690, int_570691)
    
    # Testing the type of an if condition (line 2404)
    if_condition_570693 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2404, 4), result_ne_570692)
    # Assigning a type to the variable 'if_condition_570693' (line 2404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2404, 4), 'if_condition_570693', if_condition_570693)
    # SSA begins for if statement (line 2404)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'se' (line 2406)
    se_570694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 8), 'se')
    float_570695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2406, 14), 'float')
    
    # Call to sum(...): (line 2406)
    # Processing the call keyword arguments (line 2406)
    kwargs_570704 = {}
    # Getting the type of 'repnum' (line 2406)
    repnum_570696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 21), 'repnum', False)
    # Getting the type of 'repnum' (line 2406)
    repnum_570697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 31), 'repnum', False)
    # Getting the type of 'repnum' (line 2406)
    repnum_570698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 40), 'repnum', False)
    # Applying the binary operator '*' (line 2406)
    result_mul_570699 = python_operator(stypy.reporting.localization.Localization(__file__, 2406, 31), '*', repnum_570697, repnum_570698)
    
    int_570700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2406, 49), 'int')
    # Applying the binary operator '-' (line 2406)
    result_sub_570701 = python_operator(stypy.reporting.localization.Localization(__file__, 2406, 31), '-', result_mul_570699, int_570700)
    
    # Applying the binary operator '*' (line 2406)
    result_mul_570702 = python_operator(stypy.reporting.localization.Localization(__file__, 2406, 21), '*', repnum_570696, result_sub_570701)
    
    # Obtaining the member 'sum' of a type (line 2406)
    sum_570703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2406, 21), result_mul_570702, 'sum')
    # Calling sum(args, kwargs) (line 2406)
    sum_call_result_570705 = invoke(stypy.reporting.localization.Localization(__file__, 2406, 21), sum_570703, *[], **kwargs_570704)
    
    # Applying the binary operator '*' (line 2406)
    result_mul_570706 = python_operator(stypy.reporting.localization.Localization(__file__, 2406, 14), '*', float_570695, sum_call_result_570705)
    
    # Applying the binary operator '-=' (line 2406)
    result_isub_570707 = python_operator(stypy.reporting.localization.Localization(__file__, 2406, 8), '-=', se_570694, result_mul_570706)
    # Assigning a type to the variable 'se' (line 2406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2406, 8), 'se', result_isub_570707)
    
    # SSA join for if statement (line 2404)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2408):
    
    # Assigning a Call to a Name (line 2408):
    
    # Call to sqrt(...): (line 2408)
    # Processing the call arguments (line 2408)
    # Getting the type of 'se' (line 2408)
    se_570709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 14), 'se', False)
    int_570710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2408, 19), 'int')
    # Applying the binary operator 'div' (line 2408)
    result_div_570711 = python_operator(stypy.reporting.localization.Localization(__file__, 2408, 14), 'div', se_570709, int_570710)
    
    # Processing the call keyword arguments (line 2408)
    kwargs_570712 = {}
    # Getting the type of 'sqrt' (line 2408)
    sqrt_570708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 9), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2408)
    sqrt_call_result_570713 = invoke(stypy.reporting.localization.Localization(__file__, 2408, 9), sqrt_570708, *[result_div_570711], **kwargs_570712)
    
    # Assigning a type to the variable 'se' (line 2408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2408, 4), 'se', sqrt_call_result_570713)
    
    # Assigning a BinOp to a Name (line 2409):
    
    # Assigning a BinOp to a Name (line 2409):
    float_570714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2409, 17), 'float')
    
    # Call to int(...): (line 2409)
    # Processing the call arguments (line 2409)
    
    # Call to bool(...): (line 2409)
    # Processing the call arguments (line 2409)
    # Getting the type of 'correction' (line 2409)
    correction_570717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 32), 'correction', False)
    # Processing the call keyword arguments (line 2409)
    kwargs_570718 = {}
    # Getting the type of 'bool' (line 2409)
    bool_570716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 27), 'bool', False)
    # Calling bool(args, kwargs) (line 2409)
    bool_call_result_570719 = invoke(stypy.reporting.localization.Localization(__file__, 2409, 27), bool_570716, *[correction_570717], **kwargs_570718)
    
    # Processing the call keyword arguments (line 2409)
    kwargs_570720 = {}
    # Getting the type of 'int' (line 2409)
    int_570715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 23), 'int', False)
    # Calling int(args, kwargs) (line 2409)
    int_call_result_570721 = invoke(stypy.reporting.localization.Localization(__file__, 2409, 23), int_570715, *[bool_call_result_570719], **kwargs_570720)
    
    # Applying the binary operator '*' (line 2409)
    result_mul_570722 = python_operator(stypy.reporting.localization.Localization(__file__, 2409, 17), '*', float_570714, int_call_result_570721)
    
    
    # Call to sign(...): (line 2409)
    # Processing the call arguments (line 2409)
    # Getting the type of 'T' (line 2409)
    T_570725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 55), 'T', False)
    # Getting the type of 'mn' (line 2409)
    mn_570726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 59), 'mn', False)
    # Applying the binary operator '-' (line 2409)
    result_sub_570727 = python_operator(stypy.reporting.localization.Localization(__file__, 2409, 55), '-', T_570725, mn_570726)
    
    # Processing the call keyword arguments (line 2409)
    kwargs_570728 = {}
    # Getting the type of 'np' (line 2409)
    np_570723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 47), 'np', False)
    # Obtaining the member 'sign' of a type (line 2409)
    sign_570724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2409, 47), np_570723, 'sign')
    # Calling sign(args, kwargs) (line 2409)
    sign_call_result_570729 = invoke(stypy.reporting.localization.Localization(__file__, 2409, 47), sign_570724, *[result_sub_570727], **kwargs_570728)
    
    # Applying the binary operator '*' (line 2409)
    result_mul_570730 = python_operator(stypy.reporting.localization.Localization(__file__, 2409, 45), '*', result_mul_570722, sign_call_result_570729)
    
    # Assigning a type to the variable 'correction' (line 2409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2409, 4), 'correction', result_mul_570730)
    
    # Assigning a BinOp to a Name (line 2410):
    
    # Assigning a BinOp to a Name (line 2410):
    # Getting the type of 'T' (line 2410)
    T_570731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 9), 'T')
    # Getting the type of 'mn' (line 2410)
    mn_570732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 13), 'mn')
    # Applying the binary operator '-' (line 2410)
    result_sub_570733 = python_operator(stypy.reporting.localization.Localization(__file__, 2410, 9), '-', T_570731, mn_570732)
    
    # Getting the type of 'correction' (line 2410)
    correction_570734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 18), 'correction')
    # Applying the binary operator '-' (line 2410)
    result_sub_570735 = python_operator(stypy.reporting.localization.Localization(__file__, 2410, 16), '-', result_sub_570733, correction_570734)
    
    # Getting the type of 'se' (line 2410)
    se_570736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 32), 'se')
    # Applying the binary operator 'div' (line 2410)
    result_div_570737 = python_operator(stypy.reporting.localization.Localization(__file__, 2410, 8), 'div', result_sub_570735, se_570736)
    
    # Assigning a type to the variable 'z' (line 2410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2410, 4), 'z', result_div_570737)
    
    # Assigning a BinOp to a Name (line 2411):
    
    # Assigning a BinOp to a Name (line 2411):
    float_570738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2411, 11), 'float')
    
    # Call to sf(...): (line 2411)
    # Processing the call arguments (line 2411)
    
    # Call to abs(...): (line 2411)
    # Processing the call arguments (line 2411)
    # Getting the type of 'z' (line 2411)
    z_570743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 42), 'z', False)
    # Processing the call keyword arguments (line 2411)
    kwargs_570744 = {}
    # Getting the type of 'abs' (line 2411)
    abs_570742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 38), 'abs', False)
    # Calling abs(args, kwargs) (line 2411)
    abs_call_result_570745 = invoke(stypy.reporting.localization.Localization(__file__, 2411, 38), abs_570742, *[z_570743], **kwargs_570744)
    
    # Processing the call keyword arguments (line 2411)
    kwargs_570746 = {}
    # Getting the type of 'distributions' (line 2411)
    distributions_570739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 16), 'distributions', False)
    # Obtaining the member 'norm' of a type (line 2411)
    norm_570740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2411, 16), distributions_570739, 'norm')
    # Obtaining the member 'sf' of a type (line 2411)
    sf_570741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2411, 16), norm_570740, 'sf')
    # Calling sf(args, kwargs) (line 2411)
    sf_call_result_570747 = invoke(stypy.reporting.localization.Localization(__file__, 2411, 16), sf_570741, *[abs_call_result_570745], **kwargs_570746)
    
    # Applying the binary operator '*' (line 2411)
    result_mul_570748 = python_operator(stypy.reporting.localization.Localization(__file__, 2411, 11), '*', float_570738, sf_call_result_570747)
    
    # Assigning a type to the variable 'prob' (line 2411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2411, 4), 'prob', result_mul_570748)
    
    # Call to WilcoxonResult(...): (line 2413)
    # Processing the call arguments (line 2413)
    # Getting the type of 'T' (line 2413)
    T_570750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 26), 'T', False)
    # Getting the type of 'prob' (line 2413)
    prob_570751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 29), 'prob', False)
    # Processing the call keyword arguments (line 2413)
    kwargs_570752 = {}
    # Getting the type of 'WilcoxonResult' (line 2413)
    WilcoxonResult_570749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 11), 'WilcoxonResult', False)
    # Calling WilcoxonResult(args, kwargs) (line 2413)
    WilcoxonResult_call_result_570753 = invoke(stypy.reporting.localization.Localization(__file__, 2413, 11), WilcoxonResult_570749, *[T_570750, prob_570751], **kwargs_570752)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 4), 'stypy_return_type', WilcoxonResult_call_result_570753)
    
    # ################# End of 'wilcoxon(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'wilcoxon' in the type store
    # Getting the type of 'stypy_return_type' (line 2316)
    stypy_return_type_570754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_570754)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'wilcoxon'
    return stypy_return_type_570754

# Assigning a type to the variable 'wilcoxon' (line 2316)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 0), 'wilcoxon', wilcoxon)

@norecursion
def median_test(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'median_test'
    module_type_store = module_type_store.open_function_context('median_test', 2416, 0, False)
    
    # Passed parameters checking function
    median_test.stypy_localization = localization
    median_test.stypy_type_of_self = None
    median_test.stypy_type_store = module_type_store
    median_test.stypy_function_name = 'median_test'
    median_test.stypy_param_names_list = []
    median_test.stypy_varargs_param_name = 'args'
    median_test.stypy_kwargs_param_name = 'kwds'
    median_test.stypy_call_defaults = defaults
    median_test.stypy_call_varargs = varargs
    median_test.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'median_test', [], 'args', 'kwds', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'median_test', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'median_test(...)' code ##################

    str_570755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2555, (-1)), 'str', '\n    Mood\'s median test.\n\n    Test that two or more samples come from populations with the same median.\n\n    Let ``n = len(args)`` be the number of samples.  The "grand median" of\n    all the data is computed, and a contingency table is formed by\n    classifying the values in each sample as being above or below the grand\n    median.  The contingency table, along with `correction` and `lambda_`,\n    are passed to `scipy.stats.chi2_contingency` to compute the test statistic\n    and p-value.\n\n    Parameters\n    ----------\n    sample1, sample2, ... : array_like\n        The set of samples.  There must be at least two samples.\n        Each sample must be a one-dimensional sequence containing at least\n        one value.  The samples are not required to have the same length.\n    ties : str, optional\n        Determines how values equal to the grand median are classified in\n        the contingency table.  The string must be one of::\n\n            "below":\n                Values equal to the grand median are counted as "below".\n            "above":\n                Values equal to the grand median are counted as "above".\n            "ignore":\n                Values equal to the grand median are not counted.\n\n        The default is "below".\n    correction : bool, optional\n        If True, *and* there are just two samples, apply Yates\' correction\n        for continuity when computing the test statistic associated with\n        the contingency table.  Default is True.\n    lambda_ : float or str, optional.\n        By default, the statistic computed in this test is Pearson\'s\n        chi-squared statistic.  `lambda_` allows a statistic from the\n        Cressie-Read power divergence family to be used instead.  See\n        `power_divergence` for details.\n        Default is 1 (Pearson\'s chi-squared statistic).\n    nan_policy : {\'propagate\', \'raise\', \'omit\'}, optional\n        Defines how to handle when input contains nan. \'propagate\' returns nan,\n        \'raise\' throws an error, \'omit\' performs the calculations ignoring nan\n        values. Default is \'propagate\'.\n\n    Returns\n    -------\n    stat : float\n        The test statistic.  The statistic that is returned is determined by\n        `lambda_`.  The default is Pearson\'s chi-squared statistic.\n    p : float\n        The p-value of the test.\n    m : float\n        The grand median.\n    table : ndarray\n        The contingency table.  The shape of the table is (2, n), where\n        n is the number of samples.  The first row holds the counts of the\n        values above the grand median, and the second row holds the counts\n        of the values below the grand median.  The table allows further\n        analysis with, for example, `scipy.stats.chi2_contingency`, or with\n        `scipy.stats.fisher_exact` if there are two samples, without having\n        to recompute the table.  If ``nan_policy`` is "propagate" and there\n        are nans in the input, the return value for ``table`` is ``None``.\n\n    See Also\n    --------\n    kruskal : Compute the Kruskal-Wallis H-test for independent samples.\n    mannwhitneyu : Computes the Mann-Whitney rank test on samples x and y.\n\n    Notes\n    -----\n    .. versionadded:: 0.15.0\n\n    References\n    ----------\n    .. [1] Mood, A. M., Introduction to the Theory of Statistics. McGraw-Hill\n        (1950), pp. 394-399.\n    .. [2] Zar, J. H., Biostatistical Analysis, 5th ed. Prentice Hall (2010).\n        See Sections 8.12 and 10.15.\n\n    Examples\n    --------\n    A biologist runs an experiment in which there are three groups of plants.\n    Group 1 has 16 plants, group 2 has 15 plants, and group 3 has 17 plants.\n    Each plant produces a number of seeds.  The seed counts for each group\n    are::\n\n        Group 1: 10 14 14 18 20 22 24 25 31 31 32 39 43 43 48 49\n        Group 2: 28 30 31 33 34 35 36 40 44 55 57 61 91 92 99\n        Group 3:  0  3  9 22 23 25 25 33 34 34 40 45 46 48 62 67 84\n\n    The following code applies Mood\'s median test to these samples.\n\n    >>> g1 = [10, 14, 14, 18, 20, 22, 24, 25, 31, 31, 32, 39, 43, 43, 48, 49]\n    >>> g2 = [28, 30, 31, 33, 34, 35, 36, 40, 44, 55, 57, 61, 91, 92, 99]\n    >>> g3 = [0, 3, 9, 22, 23, 25, 25, 33, 34, 34, 40, 45, 46, 48, 62, 67, 84]\n    >>> from scipy.stats import median_test\n    >>> stat, p, med, tbl = median_test(g1, g2, g3)\n\n    The median is\n\n    >>> med\n    34.0\n\n    and the contingency table is\n\n    >>> tbl\n    array([[ 5, 10,  7],\n           [11,  5, 10]])\n\n    `p` is too large to conclude that the medians are not the same:\n\n    >>> p\n    0.12609082774093244\n\n    The "G-test" can be performed by passing ``lambda_="log-likelihood"`` to\n    `median_test`.\n\n    >>> g, p, med, tbl = median_test(g1, g2, g3, lambda_="log-likelihood")\n    >>> p\n    0.12224779737117837\n\n    The median occurs several times in the data, so we\'ll get a different\n    result if, for example, ``ties="above"`` is used:\n\n    >>> stat, p, med, tbl = median_test(g1, g2, g3, ties="above")\n    >>> p\n    0.063873276069553273\n\n    >>> tbl\n    array([[ 5, 11,  9],\n           [11,  4,  8]])\n\n    This example demonstrates that if the data set is not large and there\n    are values equal to the median, the p-value can be sensitive to the\n    choice of `ties`.\n\n    ')
    
    # Assigning a Call to a Name (line 2556):
    
    # Assigning a Call to a Name (line 2556):
    
    # Call to pop(...): (line 2556)
    # Processing the call arguments (line 2556)
    str_570758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2556, 20), 'str', 'ties')
    str_570759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2556, 28), 'str', 'below')
    # Processing the call keyword arguments (line 2556)
    kwargs_570760 = {}
    # Getting the type of 'kwds' (line 2556)
    kwds_570756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 11), 'kwds', False)
    # Obtaining the member 'pop' of a type (line 2556)
    pop_570757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2556, 11), kwds_570756, 'pop')
    # Calling pop(args, kwargs) (line 2556)
    pop_call_result_570761 = invoke(stypy.reporting.localization.Localization(__file__, 2556, 11), pop_570757, *[str_570758, str_570759], **kwargs_570760)
    
    # Assigning a type to the variable 'ties' (line 2556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2556, 4), 'ties', pop_call_result_570761)
    
    # Assigning a Call to a Name (line 2557):
    
    # Assigning a Call to a Name (line 2557):
    
    # Call to pop(...): (line 2557)
    # Processing the call arguments (line 2557)
    str_570764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 26), 'str', 'correction')
    # Getting the type of 'True' (line 2557)
    True_570765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 40), 'True', False)
    # Processing the call keyword arguments (line 2557)
    kwargs_570766 = {}
    # Getting the type of 'kwds' (line 2557)
    kwds_570762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 17), 'kwds', False)
    # Obtaining the member 'pop' of a type (line 2557)
    pop_570763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2557, 17), kwds_570762, 'pop')
    # Calling pop(args, kwargs) (line 2557)
    pop_call_result_570767 = invoke(stypy.reporting.localization.Localization(__file__, 2557, 17), pop_570763, *[str_570764, True_570765], **kwargs_570766)
    
    # Assigning a type to the variable 'correction' (line 2557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2557, 4), 'correction', pop_call_result_570767)
    
    # Assigning a Call to a Name (line 2558):
    
    # Assigning a Call to a Name (line 2558):
    
    # Call to pop(...): (line 2558)
    # Processing the call arguments (line 2558)
    str_570770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2558, 23), 'str', 'lambda_')
    # Getting the type of 'None' (line 2558)
    None_570771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 34), 'None', False)
    # Processing the call keyword arguments (line 2558)
    kwargs_570772 = {}
    # Getting the type of 'kwds' (line 2558)
    kwds_570768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 14), 'kwds', False)
    # Obtaining the member 'pop' of a type (line 2558)
    pop_570769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2558, 14), kwds_570768, 'pop')
    # Calling pop(args, kwargs) (line 2558)
    pop_call_result_570773 = invoke(stypy.reporting.localization.Localization(__file__, 2558, 14), pop_570769, *[str_570770, None_570771], **kwargs_570772)
    
    # Assigning a type to the variable 'lambda_' (line 2558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2558, 4), 'lambda_', pop_call_result_570773)
    
    # Assigning a Call to a Name (line 2559):
    
    # Assigning a Call to a Name (line 2559):
    
    # Call to pop(...): (line 2559)
    # Processing the call arguments (line 2559)
    str_570776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2559, 26), 'str', 'nan_policy')
    str_570777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2559, 40), 'str', 'propagate')
    # Processing the call keyword arguments (line 2559)
    kwargs_570778 = {}
    # Getting the type of 'kwds' (line 2559)
    kwds_570774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 17), 'kwds', False)
    # Obtaining the member 'pop' of a type (line 2559)
    pop_570775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2559, 17), kwds_570774, 'pop')
    # Calling pop(args, kwargs) (line 2559)
    pop_call_result_570779 = invoke(stypy.reporting.localization.Localization(__file__, 2559, 17), pop_570775, *[str_570776, str_570777], **kwargs_570778)
    
    # Assigning a type to the variable 'nan_policy' (line 2559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 4), 'nan_policy', pop_call_result_570779)
    
    
    
    # Call to len(...): (line 2561)
    # Processing the call arguments (line 2561)
    # Getting the type of 'kwds' (line 2561)
    kwds_570781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 11), 'kwds', False)
    # Processing the call keyword arguments (line 2561)
    kwargs_570782 = {}
    # Getting the type of 'len' (line 2561)
    len_570780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 7), 'len', False)
    # Calling len(args, kwargs) (line 2561)
    len_call_result_570783 = invoke(stypy.reporting.localization.Localization(__file__, 2561, 7), len_570780, *[kwds_570781], **kwargs_570782)
    
    int_570784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2561, 19), 'int')
    # Applying the binary operator '>' (line 2561)
    result_gt_570785 = python_operator(stypy.reporting.localization.Localization(__file__, 2561, 7), '>', len_call_result_570783, int_570784)
    
    # Testing the type of an if condition (line 2561)
    if_condition_570786 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2561, 4), result_gt_570785)
    # Assigning a type to the variable 'if_condition_570786' (line 2561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2561, 4), 'if_condition_570786', if_condition_570786)
    # SSA begins for if statement (line 2561)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2562):
    
    # Assigning a Subscript to a Name (line 2562):
    
    # Obtaining the type of the subscript
    int_570787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2562, 30), 'int')
    
    # Call to keys(...): (line 2562)
    # Processing the call keyword arguments (line 2562)
    kwargs_570790 = {}
    # Getting the type of 'kwds' (line 2562)
    kwds_570788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 18), 'kwds', False)
    # Obtaining the member 'keys' of a type (line 2562)
    keys_570789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2562, 18), kwds_570788, 'keys')
    # Calling keys(args, kwargs) (line 2562)
    keys_call_result_570791 = invoke(stypy.reporting.localization.Localization(__file__, 2562, 18), keys_570789, *[], **kwargs_570790)
    
    # Obtaining the member '__getitem__' of a type (line 2562)
    getitem___570792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2562, 18), keys_call_result_570791, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2562)
    subscript_call_result_570793 = invoke(stypy.reporting.localization.Localization(__file__, 2562, 18), getitem___570792, int_570787)
    
    # Assigning a type to the variable 'bad_kwd' (line 2562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2562, 8), 'bad_kwd', subscript_call_result_570793)
    
    # Call to TypeError(...): (line 2563)
    # Processing the call arguments (line 2563)
    str_570795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2563, 24), 'str', 'median_test() got an unexpected keyword argument %r')
    # Getting the type of 'bad_kwd' (line 2564)
    bad_kwd_570796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 40), 'bad_kwd', False)
    # Applying the binary operator '%' (line 2563)
    result_mod_570797 = python_operator(stypy.reporting.localization.Localization(__file__, 2563, 24), '%', str_570795, bad_kwd_570796)
    
    # Processing the call keyword arguments (line 2563)
    kwargs_570798 = {}
    # Getting the type of 'TypeError' (line 2563)
    TypeError_570794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 2563)
    TypeError_call_result_570799 = invoke(stypy.reporting.localization.Localization(__file__, 2563, 14), TypeError_570794, *[result_mod_570797], **kwargs_570798)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2563, 8), TypeError_call_result_570799, 'raise parameter', BaseException)
    # SSA join for if statement (line 2561)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 2566)
    # Processing the call arguments (line 2566)
    # Getting the type of 'args' (line 2566)
    args_570801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 11), 'args', False)
    # Processing the call keyword arguments (line 2566)
    kwargs_570802 = {}
    # Getting the type of 'len' (line 2566)
    len_570800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 7), 'len', False)
    # Calling len(args, kwargs) (line 2566)
    len_call_result_570803 = invoke(stypy.reporting.localization.Localization(__file__, 2566, 7), len_570800, *[args_570801], **kwargs_570802)
    
    int_570804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2566, 19), 'int')
    # Applying the binary operator '<' (line 2566)
    result_lt_570805 = python_operator(stypy.reporting.localization.Localization(__file__, 2566, 7), '<', len_call_result_570803, int_570804)
    
    # Testing the type of an if condition (line 2566)
    if_condition_570806 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2566, 4), result_lt_570805)
    # Assigning a type to the variable 'if_condition_570806' (line 2566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2566, 4), 'if_condition_570806', if_condition_570806)
    # SSA begins for if statement (line 2566)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2567)
    # Processing the call arguments (line 2567)
    str_570808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2567, 25), 'str', 'median_test requires two or more samples.')
    # Processing the call keyword arguments (line 2567)
    kwargs_570809 = {}
    # Getting the type of 'ValueError' (line 2567)
    ValueError_570807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2567)
    ValueError_call_result_570810 = invoke(stypy.reporting.localization.Localization(__file__, 2567, 14), ValueError_570807, *[str_570808], **kwargs_570809)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2567, 8), ValueError_call_result_570810, 'raise parameter', BaseException)
    # SSA join for if statement (line 2566)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 2569):
    
    # Assigning a List to a Name (line 2569):
    
    # Obtaining an instance of the builtin type 'list' (line 2569)
    list_570811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2569, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2569)
    # Adding element type (line 2569)
    str_570812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2569, 20), 'str', 'below')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2569, 19), list_570811, str_570812)
    # Adding element type (line 2569)
    str_570813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2569, 29), 'str', 'above')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2569, 19), list_570811, str_570813)
    # Adding element type (line 2569)
    str_570814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2569, 38), 'str', 'ignore')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2569, 19), list_570811, str_570814)
    
    # Assigning a type to the variable 'ties_options' (line 2569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2569, 4), 'ties_options', list_570811)
    
    
    # Getting the type of 'ties' (line 2570)
    ties_570815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 7), 'ties')
    # Getting the type of 'ties_options' (line 2570)
    ties_options_570816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 19), 'ties_options')
    # Applying the binary operator 'notin' (line 2570)
    result_contains_570817 = python_operator(stypy.reporting.localization.Localization(__file__, 2570, 7), 'notin', ties_570815, ties_options_570816)
    
    # Testing the type of an if condition (line 2570)
    if_condition_570818 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2570, 4), result_contains_570817)
    # Assigning a type to the variable 'if_condition_570818' (line 2570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2570, 4), 'if_condition_570818', if_condition_570818)
    # SSA begins for if statement (line 2570)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2571)
    # Processing the call arguments (line 2571)
    str_570820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2571, 25), 'str', "invalid 'ties' option '%s'; 'ties' must be one of: %s")
    
    # Obtaining an instance of the builtin type 'tuple' (line 2572)
    tuple_570821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2572)
    # Adding element type (line 2572)
    # Getting the type of 'ties' (line 2572)
    ties_570822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 37), 'ties', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2572, 37), tuple_570821, ties_570822)
    # Adding element type (line 2572)
    
    # Obtaining the type of the subscript
    int_570823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 61), 'int')
    int_570824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 63), 'int')
    slice_570825 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2572, 43), int_570823, int_570824, None)
    
    # Call to str(...): (line 2572)
    # Processing the call arguments (line 2572)
    # Getting the type of 'ties_options' (line 2572)
    ties_options_570827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 47), 'ties_options', False)
    # Processing the call keyword arguments (line 2572)
    kwargs_570828 = {}
    # Getting the type of 'str' (line 2572)
    str_570826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 43), 'str', False)
    # Calling str(args, kwargs) (line 2572)
    str_call_result_570829 = invoke(stypy.reporting.localization.Localization(__file__, 2572, 43), str_570826, *[ties_options_570827], **kwargs_570828)
    
    # Obtaining the member '__getitem__' of a type (line 2572)
    getitem___570830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2572, 43), str_call_result_570829, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2572)
    subscript_call_result_570831 = invoke(stypy.reporting.localization.Localization(__file__, 2572, 43), getitem___570830, slice_570825)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2572, 37), tuple_570821, subscript_call_result_570831)
    
    # Applying the binary operator '%' (line 2571)
    result_mod_570832 = python_operator(stypy.reporting.localization.Localization(__file__, 2571, 25), '%', str_570820, tuple_570821)
    
    # Processing the call keyword arguments (line 2571)
    kwargs_570833 = {}
    # Getting the type of 'ValueError' (line 2571)
    ValueError_570819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2571)
    ValueError_call_result_570834 = invoke(stypy.reporting.localization.Localization(__file__, 2571, 14), ValueError_570819, *[result_mod_570832], **kwargs_570833)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2571, 8), ValueError_call_result_570834, 'raise parameter', BaseException)
    # SSA join for if statement (line 2570)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 2574):
    
    # Assigning a ListComp to a Name (line 2574):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'args' (line 2574)
    args_570840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 39), 'args')
    comprehension_570841 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2574, 12), args_570840)
    # Assigning a type to the variable 'arg' (line 2574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2574, 12), 'arg', comprehension_570841)
    
    # Call to asarray(...): (line 2574)
    # Processing the call arguments (line 2574)
    # Getting the type of 'arg' (line 2574)
    arg_570837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 23), 'arg', False)
    # Processing the call keyword arguments (line 2574)
    kwargs_570838 = {}
    # Getting the type of 'np' (line 2574)
    np_570835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2574)
    asarray_570836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2574, 12), np_570835, 'asarray')
    # Calling asarray(args, kwargs) (line 2574)
    asarray_call_result_570839 = invoke(stypy.reporting.localization.Localization(__file__, 2574, 12), asarray_570836, *[arg_570837], **kwargs_570838)
    
    list_570842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2574, 12), list_570842, asarray_call_result_570839)
    # Assigning a type to the variable 'data' (line 2574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2574, 4), 'data', list_570842)
    
    
    # Call to enumerate(...): (line 2577)
    # Processing the call arguments (line 2577)
    # Getting the type of 'data' (line 2577)
    data_570844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 26), 'data', False)
    # Processing the call keyword arguments (line 2577)
    kwargs_570845 = {}
    # Getting the type of 'enumerate' (line 2577)
    enumerate_570843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 16), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 2577)
    enumerate_call_result_570846 = invoke(stypy.reporting.localization.Localization(__file__, 2577, 16), enumerate_570843, *[data_570844], **kwargs_570845)
    
    # Testing the type of a for loop iterable (line 2577)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2577, 4), enumerate_call_result_570846)
    # Getting the type of the for loop variable (line 2577)
    for_loop_var_570847 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2577, 4), enumerate_call_result_570846)
    # Assigning a type to the variable 'k' (line 2577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2577, 4), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2577, 4), for_loop_var_570847))
    # Assigning a type to the variable 'd' (line 2577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2577, 4), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2577, 4), for_loop_var_570847))
    # SSA begins for a for statement (line 2577)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'd' (line 2578)
    d_570848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 11), 'd')
    # Obtaining the member 'size' of a type (line 2578)
    size_570849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 11), d_570848, 'size')
    int_570850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2578, 21), 'int')
    # Applying the binary operator '==' (line 2578)
    result_eq_570851 = python_operator(stypy.reporting.localization.Localization(__file__, 2578, 11), '==', size_570849, int_570850)
    
    # Testing the type of an if condition (line 2578)
    if_condition_570852 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2578, 8), result_eq_570851)
    # Assigning a type to the variable 'if_condition_570852' (line 2578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 8), 'if_condition_570852', if_condition_570852)
    # SSA begins for if statement (line 2578)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2579)
    # Processing the call arguments (line 2579)
    str_570854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2579, 29), 'str', 'Sample %d is empty. All samples must contain at least one value.')
    # Getting the type of 'k' (line 2580)
    k_570855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 62), 'k', False)
    int_570856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2580, 66), 'int')
    # Applying the binary operator '+' (line 2580)
    result_add_570857 = python_operator(stypy.reporting.localization.Localization(__file__, 2580, 62), '+', k_570855, int_570856)
    
    # Applying the binary operator '%' (line 2579)
    result_mod_570858 = python_operator(stypy.reporting.localization.Localization(__file__, 2579, 29), '%', str_570854, result_add_570857)
    
    # Processing the call keyword arguments (line 2579)
    kwargs_570859 = {}
    # Getting the type of 'ValueError' (line 2579)
    ValueError_570853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2579)
    ValueError_call_result_570860 = invoke(stypy.reporting.localization.Localization(__file__, 2579, 18), ValueError_570853, *[result_mod_570858], **kwargs_570859)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2579, 12), ValueError_call_result_570860, 'raise parameter', BaseException)
    # SSA join for if statement (line 2578)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'd' (line 2581)
    d_570861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 11), 'd')
    # Obtaining the member 'ndim' of a type (line 2581)
    ndim_570862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2581, 11), d_570861, 'ndim')
    int_570863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2581, 21), 'int')
    # Applying the binary operator '!=' (line 2581)
    result_ne_570864 = python_operator(stypy.reporting.localization.Localization(__file__, 2581, 11), '!=', ndim_570862, int_570863)
    
    # Testing the type of an if condition (line 2581)
    if_condition_570865 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2581, 8), result_ne_570864)
    # Assigning a type to the variable 'if_condition_570865' (line 2581)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2581, 8), 'if_condition_570865', if_condition_570865)
    # SSA begins for if statement (line 2581)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2582)
    # Processing the call arguments (line 2582)
    str_570867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2582, 29), 'str', 'Sample %d has %d dimensions.  All samples must be one-dimensional sequences.')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2584)
    tuple_570868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2584, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2584)
    # Adding element type (line 2584)
    # Getting the type of 'k' (line 2584)
    k_570869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 30), 'k', False)
    int_570870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2584, 34), 'int')
    # Applying the binary operator '+' (line 2584)
    result_add_570871 = python_operator(stypy.reporting.localization.Localization(__file__, 2584, 30), '+', k_570869, int_570870)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2584, 30), tuple_570868, result_add_570871)
    # Adding element type (line 2584)
    # Getting the type of 'd' (line 2584)
    d_570872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 37), 'd', False)
    # Obtaining the member 'ndim' of a type (line 2584)
    ndim_570873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2584, 37), d_570872, 'ndim')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2584, 30), tuple_570868, ndim_570873)
    
    # Applying the binary operator '%' (line 2582)
    result_mod_570874 = python_operator(stypy.reporting.localization.Localization(__file__, 2582, 29), '%', str_570867, tuple_570868)
    
    # Processing the call keyword arguments (line 2582)
    kwargs_570875 = {}
    # Getting the type of 'ValueError' (line 2582)
    ValueError_570866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2582)
    ValueError_call_result_570876 = invoke(stypy.reporting.localization.Localization(__file__, 2582, 18), ValueError_570866, *[result_mod_570874], **kwargs_570875)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2582, 12), ValueError_call_result_570876, 'raise parameter', BaseException)
    # SSA join for if statement (line 2581)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2586):
    
    # Assigning a Call to a Name (line 2586):
    
    # Call to concatenate(...): (line 2586)
    # Processing the call arguments (line 2586)
    # Getting the type of 'data' (line 2586)
    data_570879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 27), 'data', False)
    # Processing the call keyword arguments (line 2586)
    kwargs_570880 = {}
    # Getting the type of 'np' (line 2586)
    np_570877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 12), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 2586)
    concatenate_570878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2586, 12), np_570877, 'concatenate')
    # Calling concatenate(args, kwargs) (line 2586)
    concatenate_call_result_570881 = invoke(stypy.reporting.localization.Localization(__file__, 2586, 12), concatenate_570878, *[data_570879], **kwargs_570880)
    
    # Assigning a type to the variable 'cdata' (line 2586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 4), 'cdata', concatenate_call_result_570881)
    
    # Assigning a Call to a Tuple (line 2587):
    
    # Assigning a Subscript to a Name (line 2587):
    
    # Obtaining the type of the subscript
    int_570882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2587, 4), 'int')
    
    # Call to _contains_nan(...): (line 2587)
    # Processing the call arguments (line 2587)
    # Getting the type of 'cdata' (line 2587)
    cdata_570884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 45), 'cdata', False)
    # Getting the type of 'nan_policy' (line 2587)
    nan_policy_570885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 52), 'nan_policy', False)
    # Processing the call keyword arguments (line 2587)
    kwargs_570886 = {}
    # Getting the type of '_contains_nan' (line 2587)
    _contains_nan_570883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 2587)
    _contains_nan_call_result_570887 = invoke(stypy.reporting.localization.Localization(__file__, 2587, 31), _contains_nan_570883, *[cdata_570884, nan_policy_570885], **kwargs_570886)
    
    # Obtaining the member '__getitem__' of a type (line 2587)
    getitem___570888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2587, 4), _contains_nan_call_result_570887, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2587)
    subscript_call_result_570889 = invoke(stypy.reporting.localization.Localization(__file__, 2587, 4), getitem___570888, int_570882)
    
    # Assigning a type to the variable 'tuple_var_assignment_566046' (line 2587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 4), 'tuple_var_assignment_566046', subscript_call_result_570889)
    
    # Assigning a Subscript to a Name (line 2587):
    
    # Obtaining the type of the subscript
    int_570890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2587, 4), 'int')
    
    # Call to _contains_nan(...): (line 2587)
    # Processing the call arguments (line 2587)
    # Getting the type of 'cdata' (line 2587)
    cdata_570892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 45), 'cdata', False)
    # Getting the type of 'nan_policy' (line 2587)
    nan_policy_570893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 52), 'nan_policy', False)
    # Processing the call keyword arguments (line 2587)
    kwargs_570894 = {}
    # Getting the type of '_contains_nan' (line 2587)
    _contains_nan_570891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 31), '_contains_nan', False)
    # Calling _contains_nan(args, kwargs) (line 2587)
    _contains_nan_call_result_570895 = invoke(stypy.reporting.localization.Localization(__file__, 2587, 31), _contains_nan_570891, *[cdata_570892, nan_policy_570893], **kwargs_570894)
    
    # Obtaining the member '__getitem__' of a type (line 2587)
    getitem___570896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2587, 4), _contains_nan_call_result_570895, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2587)
    subscript_call_result_570897 = invoke(stypy.reporting.localization.Localization(__file__, 2587, 4), getitem___570896, int_570890)
    
    # Assigning a type to the variable 'tuple_var_assignment_566047' (line 2587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 4), 'tuple_var_assignment_566047', subscript_call_result_570897)
    
    # Assigning a Name to a Name (line 2587):
    # Getting the type of 'tuple_var_assignment_566046' (line 2587)
    tuple_var_assignment_566046_570898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 4), 'tuple_var_assignment_566046')
    # Assigning a type to the variable 'contains_nan' (line 2587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 4), 'contains_nan', tuple_var_assignment_566046_570898)
    
    # Assigning a Name to a Name (line 2587):
    # Getting the type of 'tuple_var_assignment_566047' (line 2587)
    tuple_var_assignment_566047_570899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 4), 'tuple_var_assignment_566047')
    # Assigning a type to the variable 'nan_policy' (line 2587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2587, 18), 'nan_policy', tuple_var_assignment_566047_570899)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'contains_nan' (line 2588)
    contains_nan_570900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 7), 'contains_nan')
    
    # Getting the type of 'nan_policy' (line 2588)
    nan_policy_570901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 24), 'nan_policy')
    str_570902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2588, 38), 'str', 'propagate')
    # Applying the binary operator '==' (line 2588)
    result_eq_570903 = python_operator(stypy.reporting.localization.Localization(__file__, 2588, 24), '==', nan_policy_570901, str_570902)
    
    # Applying the binary operator 'and' (line 2588)
    result_and_keyword_570904 = python_operator(stypy.reporting.localization.Localization(__file__, 2588, 7), 'and', contains_nan_570900, result_eq_570903)
    
    # Testing the type of an if condition (line 2588)
    if_condition_570905 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2588, 4), result_and_keyword_570904)
    # Assigning a type to the variable 'if_condition_570905' (line 2588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2588, 4), 'if_condition_570905', if_condition_570905)
    # SSA begins for if statement (line 2588)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2589)
    tuple_570906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2589, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2589)
    # Adding element type (line 2589)
    # Getting the type of 'np' (line 2589)
    np_570907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 15), 'np')
    # Obtaining the member 'nan' of a type (line 2589)
    nan_570908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 15), np_570907, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2589, 15), tuple_570906, nan_570908)
    # Adding element type (line 2589)
    # Getting the type of 'np' (line 2589)
    np_570909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 23), 'np')
    # Obtaining the member 'nan' of a type (line 2589)
    nan_570910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 23), np_570909, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2589, 15), tuple_570906, nan_570910)
    # Adding element type (line 2589)
    # Getting the type of 'np' (line 2589)
    np_570911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 31), 'np')
    # Obtaining the member 'nan' of a type (line 2589)
    nan_570912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 31), np_570911, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2589, 15), tuple_570906, nan_570912)
    # Adding element type (line 2589)
    # Getting the type of 'None' (line 2589)
    None_570913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 39), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2589, 15), tuple_570906, None_570913)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2589)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2589, 8), 'stypy_return_type', tuple_570906)
    # SSA join for if statement (line 2588)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'contains_nan' (line 2591)
    contains_nan_570914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 7), 'contains_nan')
    # Testing the type of an if condition (line 2591)
    if_condition_570915 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2591, 4), contains_nan_570914)
    # Assigning a type to the variable 'if_condition_570915' (line 2591)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2591, 4), 'if_condition_570915', if_condition_570915)
    # SSA begins for if statement (line 2591)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2592):
    
    # Assigning a Call to a Name (line 2592):
    
    # Call to median(...): (line 2592)
    # Processing the call arguments (line 2592)
    
    # Obtaining the type of the subscript
    
    
    # Call to isnan(...): (line 2592)
    # Processing the call arguments (line 2592)
    # Getting the type of 'cdata' (line 2592)
    cdata_570920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 49), 'cdata', False)
    # Processing the call keyword arguments (line 2592)
    kwargs_570921 = {}
    # Getting the type of 'np' (line 2592)
    np_570918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 40), 'np', False)
    # Obtaining the member 'isnan' of a type (line 2592)
    isnan_570919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 40), np_570918, 'isnan')
    # Calling isnan(args, kwargs) (line 2592)
    isnan_call_result_570922 = invoke(stypy.reporting.localization.Localization(__file__, 2592, 40), isnan_570919, *[cdata_570920], **kwargs_570921)
    
    # Applying the '~' unary operator (line 2592)
    result_inv_570923 = python_operator(stypy.reporting.localization.Localization(__file__, 2592, 39), '~', isnan_call_result_570922)
    
    # Getting the type of 'cdata' (line 2592)
    cdata_570924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 33), 'cdata', False)
    # Obtaining the member '__getitem__' of a type (line 2592)
    getitem___570925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 33), cdata_570924, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2592)
    subscript_call_result_570926 = invoke(stypy.reporting.localization.Localization(__file__, 2592, 33), getitem___570925, result_inv_570923)
    
    # Processing the call keyword arguments (line 2592)
    kwargs_570927 = {}
    # Getting the type of 'np' (line 2592)
    np_570916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 23), 'np', False)
    # Obtaining the member 'median' of a type (line 2592)
    median_570917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 23), np_570916, 'median')
    # Calling median(args, kwargs) (line 2592)
    median_call_result_570928 = invoke(stypy.reporting.localization.Localization(__file__, 2592, 23), median_570917, *[subscript_call_result_570926], **kwargs_570927)
    
    # Assigning a type to the variable 'grand_median' (line 2592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2592, 8), 'grand_median', median_call_result_570928)
    # SSA branch for the else part of an if statement (line 2591)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2594):
    
    # Assigning a Call to a Name (line 2594):
    
    # Call to median(...): (line 2594)
    # Processing the call arguments (line 2594)
    # Getting the type of 'cdata' (line 2594)
    cdata_570931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 33), 'cdata', False)
    # Processing the call keyword arguments (line 2594)
    kwargs_570932 = {}
    # Getting the type of 'np' (line 2594)
    np_570929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 23), 'np', False)
    # Obtaining the member 'median' of a type (line 2594)
    median_570930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2594, 23), np_570929, 'median')
    # Calling median(args, kwargs) (line 2594)
    median_call_result_570933 = invoke(stypy.reporting.localization.Localization(__file__, 2594, 23), median_570930, *[cdata_570931], **kwargs_570932)
    
    # Assigning a type to the variable 'grand_median' (line 2594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2594, 8), 'grand_median', median_call_result_570933)
    # SSA join for if statement (line 2591)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2600):
    
    # Assigning a Call to a Name (line 2600):
    
    # Call to zeros(...): (line 2600)
    # Processing the call arguments (line 2600)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2600)
    tuple_570936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2600, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2600)
    # Adding element type (line 2600)
    int_570937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2600, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2600, 22), tuple_570936, int_570937)
    # Adding element type (line 2600)
    
    # Call to len(...): (line 2600)
    # Processing the call arguments (line 2600)
    # Getting the type of 'data' (line 2600)
    data_570939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 29), 'data', False)
    # Processing the call keyword arguments (line 2600)
    kwargs_570940 = {}
    # Getting the type of 'len' (line 2600)
    len_570938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 25), 'len', False)
    # Calling len(args, kwargs) (line 2600)
    len_call_result_570941 = invoke(stypy.reporting.localization.Localization(__file__, 2600, 25), len_570938, *[data_570939], **kwargs_570940)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2600, 22), tuple_570936, len_call_result_570941)
    
    # Processing the call keyword arguments (line 2600)
    # Getting the type of 'np' (line 2600)
    np_570942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 43), 'np', False)
    # Obtaining the member 'int64' of a type (line 2600)
    int64_570943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2600, 43), np_570942, 'int64')
    keyword_570944 = int64_570943
    kwargs_570945 = {'dtype': keyword_570944}
    # Getting the type of 'np' (line 2600)
    np_570934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2600)
    zeros_570935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2600, 12), np_570934, 'zeros')
    # Calling zeros(args, kwargs) (line 2600)
    zeros_call_result_570946 = invoke(stypy.reporting.localization.Localization(__file__, 2600, 12), zeros_570935, *[tuple_570936], **kwargs_570945)
    
    # Assigning a type to the variable 'table' (line 2600)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2600, 4), 'table', zeros_call_result_570946)
    
    
    # Call to enumerate(...): (line 2601)
    # Processing the call arguments (line 2601)
    # Getting the type of 'data' (line 2601)
    data_570948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 31), 'data', False)
    # Processing the call keyword arguments (line 2601)
    kwargs_570949 = {}
    # Getting the type of 'enumerate' (line 2601)
    enumerate_570947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 21), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 2601)
    enumerate_call_result_570950 = invoke(stypy.reporting.localization.Localization(__file__, 2601, 21), enumerate_570947, *[data_570948], **kwargs_570949)
    
    # Testing the type of a for loop iterable (line 2601)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2601, 4), enumerate_call_result_570950)
    # Getting the type of the for loop variable (line 2601)
    for_loop_var_570951 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2601, 4), enumerate_call_result_570950)
    # Assigning a type to the variable 'k' (line 2601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2601, 4), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2601, 4), for_loop_var_570951))
    # Assigning a type to the variable 'sample' (line 2601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2601, 4), 'sample', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2601, 4), for_loop_var_570951))
    # SSA begins for a for statement (line 2601)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 2602):
    
    # Assigning a Subscript to a Name (line 2602):
    
    # Obtaining the type of the subscript
    
    
    # Call to isnan(...): (line 2602)
    # Processing the call arguments (line 2602)
    # Getting the type of 'sample' (line 2602)
    sample_570954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 34), 'sample', False)
    # Processing the call keyword arguments (line 2602)
    kwargs_570955 = {}
    # Getting the type of 'np' (line 2602)
    np_570952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 25), 'np', False)
    # Obtaining the member 'isnan' of a type (line 2602)
    isnan_570953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 25), np_570952, 'isnan')
    # Calling isnan(args, kwargs) (line 2602)
    isnan_call_result_570956 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 25), isnan_570953, *[sample_570954], **kwargs_570955)
    
    # Applying the '~' unary operator (line 2602)
    result_inv_570957 = python_operator(stypy.reporting.localization.Localization(__file__, 2602, 24), '~', isnan_call_result_570956)
    
    # Getting the type of 'sample' (line 2602)
    sample_570958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 17), 'sample')
    # Obtaining the member '__getitem__' of a type (line 2602)
    getitem___570959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 17), sample_570958, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2602)
    subscript_call_result_570960 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 17), getitem___570959, result_inv_570957)
    
    # Assigning a type to the variable 'sample' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 8), 'sample', subscript_call_result_570960)
    
    # Assigning a Call to a Name (line 2604):
    
    # Assigning a Call to a Name (line 2604):
    
    # Call to count_nonzero(...): (line 2604)
    # Processing the call arguments (line 2604)
    
    # Getting the type of 'sample' (line 2604)
    sample_570962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 31), 'sample', False)
    # Getting the type of 'grand_median' (line 2604)
    grand_median_570963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 40), 'grand_median', False)
    # Applying the binary operator '>' (line 2604)
    result_gt_570964 = python_operator(stypy.reporting.localization.Localization(__file__, 2604, 31), '>', sample_570962, grand_median_570963)
    
    # Processing the call keyword arguments (line 2604)
    kwargs_570965 = {}
    # Getting the type of 'count_nonzero' (line 2604)
    count_nonzero_570961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 17), 'count_nonzero', False)
    # Calling count_nonzero(args, kwargs) (line 2604)
    count_nonzero_call_result_570966 = invoke(stypy.reporting.localization.Localization(__file__, 2604, 17), count_nonzero_570961, *[result_gt_570964], **kwargs_570965)
    
    # Assigning a type to the variable 'nabove' (line 2604)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2604, 8), 'nabove', count_nonzero_call_result_570966)
    
    # Assigning a Call to a Name (line 2605):
    
    # Assigning a Call to a Name (line 2605):
    
    # Call to count_nonzero(...): (line 2605)
    # Processing the call arguments (line 2605)
    
    # Getting the type of 'sample' (line 2605)
    sample_570968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 31), 'sample', False)
    # Getting the type of 'grand_median' (line 2605)
    grand_median_570969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 40), 'grand_median', False)
    # Applying the binary operator '<' (line 2605)
    result_lt_570970 = python_operator(stypy.reporting.localization.Localization(__file__, 2605, 31), '<', sample_570968, grand_median_570969)
    
    # Processing the call keyword arguments (line 2605)
    kwargs_570971 = {}
    # Getting the type of 'count_nonzero' (line 2605)
    count_nonzero_570967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 17), 'count_nonzero', False)
    # Calling count_nonzero(args, kwargs) (line 2605)
    count_nonzero_call_result_570972 = invoke(stypy.reporting.localization.Localization(__file__, 2605, 17), count_nonzero_570967, *[result_lt_570970], **kwargs_570971)
    
    # Assigning a type to the variable 'nbelow' (line 2605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2605, 8), 'nbelow', count_nonzero_call_result_570972)
    
    # Assigning a BinOp to a Name (line 2606):
    
    # Assigning a BinOp to a Name (line 2606):
    # Getting the type of 'sample' (line 2606)
    sample_570973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 17), 'sample')
    # Obtaining the member 'size' of a type (line 2606)
    size_570974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2606, 17), sample_570973, 'size')
    # Getting the type of 'nabove' (line 2606)
    nabove_570975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 32), 'nabove')
    # Getting the type of 'nbelow' (line 2606)
    nbelow_570976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 41), 'nbelow')
    # Applying the binary operator '+' (line 2606)
    result_add_570977 = python_operator(stypy.reporting.localization.Localization(__file__, 2606, 32), '+', nabove_570975, nbelow_570976)
    
    # Applying the binary operator '-' (line 2606)
    result_sub_570978 = python_operator(stypy.reporting.localization.Localization(__file__, 2606, 17), '-', size_570974, result_add_570977)
    
    # Assigning a type to the variable 'nequal' (line 2606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2606, 8), 'nequal', result_sub_570978)
    
    # Getting the type of 'table' (line 2607)
    table_570979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 8), 'table')
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2607)
    tuple_570980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2607, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2607)
    # Adding element type (line 2607)
    int_570981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2607, 14), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2607, 14), tuple_570980, int_570981)
    # Adding element type (line 2607)
    # Getting the type of 'k' (line 2607)
    k_570982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 17), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2607, 14), tuple_570980, k_570982)
    
    # Getting the type of 'table' (line 2607)
    table_570983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 8), 'table')
    # Obtaining the member '__getitem__' of a type (line 2607)
    getitem___570984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 8), table_570983, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2607)
    subscript_call_result_570985 = invoke(stypy.reporting.localization.Localization(__file__, 2607, 8), getitem___570984, tuple_570980)
    
    # Getting the type of 'nabove' (line 2607)
    nabove_570986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 23), 'nabove')
    # Applying the binary operator '+=' (line 2607)
    result_iadd_570987 = python_operator(stypy.reporting.localization.Localization(__file__, 2607, 8), '+=', subscript_call_result_570985, nabove_570986)
    # Getting the type of 'table' (line 2607)
    table_570988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 8), 'table')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2607)
    tuple_570989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2607, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2607)
    # Adding element type (line 2607)
    int_570990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2607, 14), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2607, 14), tuple_570989, int_570990)
    # Adding element type (line 2607)
    # Getting the type of 'k' (line 2607)
    k_570991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 17), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2607, 14), tuple_570989, k_570991)
    
    # Storing an element on a container (line 2607)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2607, 8), table_570988, (tuple_570989, result_iadd_570987))
    
    
    # Getting the type of 'table' (line 2608)
    table_570992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 8), 'table')
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2608)
    tuple_570993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2608)
    # Adding element type (line 2608)
    int_570994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 14), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2608, 14), tuple_570993, int_570994)
    # Adding element type (line 2608)
    # Getting the type of 'k' (line 2608)
    k_570995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 17), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2608, 14), tuple_570993, k_570995)
    
    # Getting the type of 'table' (line 2608)
    table_570996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 8), 'table')
    # Obtaining the member '__getitem__' of a type (line 2608)
    getitem___570997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 8), table_570996, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2608)
    subscript_call_result_570998 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 8), getitem___570997, tuple_570993)
    
    # Getting the type of 'nbelow' (line 2608)
    nbelow_570999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 23), 'nbelow')
    # Applying the binary operator '+=' (line 2608)
    result_iadd_571000 = python_operator(stypy.reporting.localization.Localization(__file__, 2608, 8), '+=', subscript_call_result_570998, nbelow_570999)
    # Getting the type of 'table' (line 2608)
    table_571001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 8), 'table')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2608)
    tuple_571002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2608)
    # Adding element type (line 2608)
    int_571003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 14), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2608, 14), tuple_571002, int_571003)
    # Adding element type (line 2608)
    # Getting the type of 'k' (line 2608)
    k_571004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 17), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2608, 14), tuple_571002, k_571004)
    
    # Storing an element on a container (line 2608)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2608, 8), table_571001, (tuple_571002, result_iadd_571000))
    
    
    
    # Getting the type of 'ties' (line 2609)
    ties_571005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 11), 'ties')
    str_571006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2609, 19), 'str', 'below')
    # Applying the binary operator '==' (line 2609)
    result_eq_571007 = python_operator(stypy.reporting.localization.Localization(__file__, 2609, 11), '==', ties_571005, str_571006)
    
    # Testing the type of an if condition (line 2609)
    if_condition_571008 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2609, 8), result_eq_571007)
    # Assigning a type to the variable 'if_condition_571008' (line 2609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2609, 8), 'if_condition_571008', if_condition_571008)
    # SSA begins for if statement (line 2609)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'table' (line 2610)
    table_571009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 12), 'table')
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2610)
    tuple_571010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2610, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2610)
    # Adding element type (line 2610)
    int_571011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2610, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2610, 18), tuple_571010, int_571011)
    # Adding element type (line 2610)
    # Getting the type of 'k' (line 2610)
    k_571012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 21), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2610, 18), tuple_571010, k_571012)
    
    # Getting the type of 'table' (line 2610)
    table_571013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 12), 'table')
    # Obtaining the member '__getitem__' of a type (line 2610)
    getitem___571014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2610, 12), table_571013, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2610)
    subscript_call_result_571015 = invoke(stypy.reporting.localization.Localization(__file__, 2610, 12), getitem___571014, tuple_571010)
    
    # Getting the type of 'nequal' (line 2610)
    nequal_571016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 27), 'nequal')
    # Applying the binary operator '+=' (line 2610)
    result_iadd_571017 = python_operator(stypy.reporting.localization.Localization(__file__, 2610, 12), '+=', subscript_call_result_571015, nequal_571016)
    # Getting the type of 'table' (line 2610)
    table_571018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 12), 'table')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2610)
    tuple_571019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2610, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2610)
    # Adding element type (line 2610)
    int_571020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2610, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2610, 18), tuple_571019, int_571020)
    # Adding element type (line 2610)
    # Getting the type of 'k' (line 2610)
    k_571021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 21), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2610, 18), tuple_571019, k_571021)
    
    # Storing an element on a container (line 2610)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2610, 12), table_571018, (tuple_571019, result_iadd_571017))
    
    # SSA branch for the else part of an if statement (line 2609)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ties' (line 2611)
    ties_571022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 13), 'ties')
    str_571023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2611, 21), 'str', 'above')
    # Applying the binary operator '==' (line 2611)
    result_eq_571024 = python_operator(stypy.reporting.localization.Localization(__file__, 2611, 13), '==', ties_571022, str_571023)
    
    # Testing the type of an if condition (line 2611)
    if_condition_571025 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2611, 13), result_eq_571024)
    # Assigning a type to the variable 'if_condition_571025' (line 2611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2611, 13), 'if_condition_571025', if_condition_571025)
    # SSA begins for if statement (line 2611)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'table' (line 2612)
    table_571026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 12), 'table')
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2612)
    tuple_571027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2612, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2612)
    # Adding element type (line 2612)
    int_571028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2612, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2612, 18), tuple_571027, int_571028)
    # Adding element type (line 2612)
    # Getting the type of 'k' (line 2612)
    k_571029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 21), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2612, 18), tuple_571027, k_571029)
    
    # Getting the type of 'table' (line 2612)
    table_571030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 12), 'table')
    # Obtaining the member '__getitem__' of a type (line 2612)
    getitem___571031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2612, 12), table_571030, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2612)
    subscript_call_result_571032 = invoke(stypy.reporting.localization.Localization(__file__, 2612, 12), getitem___571031, tuple_571027)
    
    # Getting the type of 'nequal' (line 2612)
    nequal_571033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 27), 'nequal')
    # Applying the binary operator '+=' (line 2612)
    result_iadd_571034 = python_operator(stypy.reporting.localization.Localization(__file__, 2612, 12), '+=', subscript_call_result_571032, nequal_571033)
    # Getting the type of 'table' (line 2612)
    table_571035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 12), 'table')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2612)
    tuple_571036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2612, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2612)
    # Adding element type (line 2612)
    int_571037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2612, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2612, 18), tuple_571036, int_571037)
    # Adding element type (line 2612)
    # Getting the type of 'k' (line 2612)
    k_571038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 21), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2612, 18), tuple_571036, k_571038)
    
    # Storing an element on a container (line 2612)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2612, 12), table_571035, (tuple_571036, result_iadd_571034))
    
    # SSA join for if statement (line 2611)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2609)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2617):
    
    # Assigning a Call to a Name (line 2617):
    
    # Call to sum(...): (line 2617)
    # Processing the call keyword arguments (line 2617)
    int_571041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2617, 29), 'int')
    keyword_571042 = int_571041
    kwargs_571043 = {'axis': keyword_571042}
    # Getting the type of 'table' (line 2617)
    table_571039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 14), 'table', False)
    # Obtaining the member 'sum' of a type (line 2617)
    sum_571040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2617, 14), table_571039, 'sum')
    # Calling sum(args, kwargs) (line 2617)
    sum_call_result_571044 = invoke(stypy.reporting.localization.Localization(__file__, 2617, 14), sum_571040, *[], **kwargs_571043)
    
    # Assigning a type to the variable 'rowsums' (line 2617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2617, 4), 'rowsums', sum_call_result_571044)
    
    
    
    # Obtaining the type of the subscript
    int_571045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2618, 15), 'int')
    # Getting the type of 'rowsums' (line 2618)
    rowsums_571046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 7), 'rowsums')
    # Obtaining the member '__getitem__' of a type (line 2618)
    getitem___571047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2618, 7), rowsums_571046, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2618)
    subscript_call_result_571048 = invoke(stypy.reporting.localization.Localization(__file__, 2618, 7), getitem___571047, int_571045)
    
    int_571049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2618, 21), 'int')
    # Applying the binary operator '==' (line 2618)
    result_eq_571050 = python_operator(stypy.reporting.localization.Localization(__file__, 2618, 7), '==', subscript_call_result_571048, int_571049)
    
    # Testing the type of an if condition (line 2618)
    if_condition_571051 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2618, 4), result_eq_571050)
    # Assigning a type to the variable 'if_condition_571051' (line 2618)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2618, 4), 'if_condition_571051', if_condition_571051)
    # SSA begins for if statement (line 2618)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2619)
    # Processing the call arguments (line 2619)
    str_571053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2619, 25), 'str', 'All values are below the grand median (%r).')
    # Getting the type of 'grand_median' (line 2620)
    grand_median_571054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 25), 'grand_median', False)
    # Applying the binary operator '%' (line 2619)
    result_mod_571055 = python_operator(stypy.reporting.localization.Localization(__file__, 2619, 25), '%', str_571053, grand_median_571054)
    
    # Processing the call keyword arguments (line 2619)
    kwargs_571056 = {}
    # Getting the type of 'ValueError' (line 2619)
    ValueError_571052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2619)
    ValueError_call_result_571057 = invoke(stypy.reporting.localization.Localization(__file__, 2619, 14), ValueError_571052, *[result_mod_571055], **kwargs_571056)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2619, 8), ValueError_call_result_571057, 'raise parameter', BaseException)
    # SSA join for if statement (line 2618)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_571058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2621, 15), 'int')
    # Getting the type of 'rowsums' (line 2621)
    rowsums_571059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 7), 'rowsums')
    # Obtaining the member '__getitem__' of a type (line 2621)
    getitem___571060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2621, 7), rowsums_571059, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2621)
    subscript_call_result_571061 = invoke(stypy.reporting.localization.Localization(__file__, 2621, 7), getitem___571060, int_571058)
    
    int_571062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2621, 21), 'int')
    # Applying the binary operator '==' (line 2621)
    result_eq_571063 = python_operator(stypy.reporting.localization.Localization(__file__, 2621, 7), '==', subscript_call_result_571061, int_571062)
    
    # Testing the type of an if condition (line 2621)
    if_condition_571064 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2621, 4), result_eq_571063)
    # Assigning a type to the variable 'if_condition_571064' (line 2621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2621, 4), 'if_condition_571064', if_condition_571064)
    # SSA begins for if statement (line 2621)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2622)
    # Processing the call arguments (line 2622)
    str_571066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2622, 25), 'str', 'All values are above the grand median (%r).')
    # Getting the type of 'grand_median' (line 2623)
    grand_median_571067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 25), 'grand_median', False)
    # Applying the binary operator '%' (line 2622)
    result_mod_571068 = python_operator(stypy.reporting.localization.Localization(__file__, 2622, 25), '%', str_571066, grand_median_571067)
    
    # Processing the call keyword arguments (line 2622)
    kwargs_571069 = {}
    # Getting the type of 'ValueError' (line 2622)
    ValueError_571065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2622)
    ValueError_call_result_571070 = invoke(stypy.reporting.localization.Localization(__file__, 2622, 14), ValueError_571065, *[result_mod_571068], **kwargs_571069)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2622, 8), ValueError_call_result_571070, 'raise parameter', BaseException)
    # SSA join for if statement (line 2621)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'ties' (line 2624)
    ties_571071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 7), 'ties')
    str_571072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2624, 15), 'str', 'ignore')
    # Applying the binary operator '==' (line 2624)
    result_eq_571073 = python_operator(stypy.reporting.localization.Localization(__file__, 2624, 7), '==', ties_571071, str_571072)
    
    # Testing the type of an if condition (line 2624)
    if_condition_571074 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2624, 4), result_eq_571073)
    # Assigning a type to the variable 'if_condition_571074' (line 2624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2624, 4), 'if_condition_571074', if_condition_571074)
    # SSA begins for if statement (line 2624)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2629):
    
    # Assigning a Subscript to a Name (line 2629):
    
    # Obtaining the type of the subscript
    int_571075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 55), 'int')
    
    # Call to where(...): (line 2629)
    # Processing the call arguments (line 2629)
    
    # Call to all(...): (line 2629)
    # Processing the call keyword arguments (line 2629)
    int_571082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 51), 'int')
    keyword_571083 = int_571082
    kwargs_571084 = {'axis': keyword_571083}
    
    # Getting the type of 'table' (line 2629)
    table_571078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 30), 'table', False)
    int_571079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 39), 'int')
    # Applying the binary operator '==' (line 2629)
    result_eq_571080 = python_operator(stypy.reporting.localization.Localization(__file__, 2629, 30), '==', table_571078, int_571079)
    
    # Obtaining the member 'all' of a type (line 2629)
    all_571081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 30), result_eq_571080, 'all')
    # Calling all(args, kwargs) (line 2629)
    all_call_result_571085 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 30), all_571081, *[], **kwargs_571084)
    
    # Processing the call keyword arguments (line 2629)
    kwargs_571086 = {}
    # Getting the type of 'np' (line 2629)
    np_571076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 20), 'np', False)
    # Obtaining the member 'where' of a type (line 2629)
    where_571077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 20), np_571076, 'where')
    # Calling where(args, kwargs) (line 2629)
    where_call_result_571087 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 20), where_571077, *[all_call_result_571085], **kwargs_571086)
    
    # Obtaining the member '__getitem__' of a type (line 2629)
    getitem___571088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 20), where_call_result_571087, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2629)
    subscript_call_result_571089 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 20), getitem___571088, int_571075)
    
    # Assigning a type to the variable 'zero_cols' (line 2629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2629, 8), 'zero_cols', subscript_call_result_571089)
    
    
    
    # Call to len(...): (line 2630)
    # Processing the call arguments (line 2630)
    # Getting the type of 'zero_cols' (line 2630)
    zero_cols_571091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 15), 'zero_cols', False)
    # Processing the call keyword arguments (line 2630)
    kwargs_571092 = {}
    # Getting the type of 'len' (line 2630)
    len_571090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 11), 'len', False)
    # Calling len(args, kwargs) (line 2630)
    len_call_result_571093 = invoke(stypy.reporting.localization.Localization(__file__, 2630, 11), len_571090, *[zero_cols_571091], **kwargs_571092)
    
    int_571094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2630, 28), 'int')
    # Applying the binary operator '>' (line 2630)
    result_gt_571095 = python_operator(stypy.reporting.localization.Localization(__file__, 2630, 11), '>', len_call_result_571093, int_571094)
    
    # Testing the type of an if condition (line 2630)
    if_condition_571096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2630, 8), result_gt_571095)
    # Assigning a type to the variable 'if_condition_571096' (line 2630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2630, 8), 'if_condition_571096', if_condition_571096)
    # SSA begins for if statement (line 2630)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2631):
    
    # Assigning a BinOp to a Name (line 2631):
    str_571097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2631, 19), 'str', 'All values in sample %d are equal to the grand median (%r), so they are ignored, resulting in an empty sample.')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2633)
    tuple_571098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2633, 38), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2633)
    # Adding element type (line 2633)
    
    # Obtaining the type of the subscript
    int_571099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2633, 48), 'int')
    # Getting the type of 'zero_cols' (line 2633)
    zero_cols_571100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 38), 'zero_cols')
    # Obtaining the member '__getitem__' of a type (line 2633)
    getitem___571101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2633, 38), zero_cols_571100, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2633)
    subscript_call_result_571102 = invoke(stypy.reporting.localization.Localization(__file__, 2633, 38), getitem___571101, int_571099)
    
    int_571103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2633, 53), 'int')
    # Applying the binary operator '+' (line 2633)
    result_add_571104 = python_operator(stypy.reporting.localization.Localization(__file__, 2633, 38), '+', subscript_call_result_571102, int_571103)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2633, 38), tuple_571098, result_add_571104)
    # Adding element type (line 2633)
    # Getting the type of 'grand_median' (line 2633)
    grand_median_571105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 56), 'grand_median')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2633, 38), tuple_571098, grand_median_571105)
    
    # Applying the binary operator '%' (line 2631)
    result_mod_571106 = python_operator(stypy.reporting.localization.Localization(__file__, 2631, 19), '%', str_571097, tuple_571098)
    
    # Assigning a type to the variable 'msg' (line 2631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2631, 12), 'msg', result_mod_571106)
    
    # Call to ValueError(...): (line 2634)
    # Processing the call arguments (line 2634)
    # Getting the type of 'msg' (line 2634)
    msg_571108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 29), 'msg', False)
    # Processing the call keyword arguments (line 2634)
    kwargs_571109 = {}
    # Getting the type of 'ValueError' (line 2634)
    ValueError_571107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2634)
    ValueError_call_result_571110 = invoke(stypy.reporting.localization.Localization(__file__, 2634, 18), ValueError_571107, *[msg_571108], **kwargs_571109)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2634, 12), ValueError_call_result_571110, 'raise parameter', BaseException)
    # SSA join for if statement (line 2630)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2624)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 2636):
    
    # Assigning a Subscript to a Name (line 2636):
    
    # Obtaining the type of the subscript
    int_571111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2636, 4), 'int')
    
    # Call to chi2_contingency(...): (line 2636)
    # Processing the call arguments (line 2636)
    # Getting the type of 'table' (line 2636)
    table_571113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 46), 'table', False)
    # Processing the call keyword arguments (line 2636)
    # Getting the type of 'lambda_' (line 2636)
    lambda__571114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 61), 'lambda_', False)
    keyword_571115 = lambda__571114
    # Getting the type of 'correction' (line 2637)
    correction_571116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 57), 'correction', False)
    keyword_571117 = correction_571116
    kwargs_571118 = {'correction': keyword_571117, 'lambda_': keyword_571115}
    # Getting the type of 'chi2_contingency' (line 2636)
    chi2_contingency_571112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 29), 'chi2_contingency', False)
    # Calling chi2_contingency(args, kwargs) (line 2636)
    chi2_contingency_call_result_571119 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 29), chi2_contingency_571112, *[table_571113], **kwargs_571118)
    
    # Obtaining the member '__getitem__' of a type (line 2636)
    getitem___571120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 4), chi2_contingency_call_result_571119, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2636)
    subscript_call_result_571121 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 4), getitem___571120, int_571111)
    
    # Assigning a type to the variable 'tuple_var_assignment_566048' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'tuple_var_assignment_566048', subscript_call_result_571121)
    
    # Assigning a Subscript to a Name (line 2636):
    
    # Obtaining the type of the subscript
    int_571122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2636, 4), 'int')
    
    # Call to chi2_contingency(...): (line 2636)
    # Processing the call arguments (line 2636)
    # Getting the type of 'table' (line 2636)
    table_571124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 46), 'table', False)
    # Processing the call keyword arguments (line 2636)
    # Getting the type of 'lambda_' (line 2636)
    lambda__571125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 61), 'lambda_', False)
    keyword_571126 = lambda__571125
    # Getting the type of 'correction' (line 2637)
    correction_571127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 57), 'correction', False)
    keyword_571128 = correction_571127
    kwargs_571129 = {'correction': keyword_571128, 'lambda_': keyword_571126}
    # Getting the type of 'chi2_contingency' (line 2636)
    chi2_contingency_571123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 29), 'chi2_contingency', False)
    # Calling chi2_contingency(args, kwargs) (line 2636)
    chi2_contingency_call_result_571130 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 29), chi2_contingency_571123, *[table_571124], **kwargs_571129)
    
    # Obtaining the member '__getitem__' of a type (line 2636)
    getitem___571131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 4), chi2_contingency_call_result_571130, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2636)
    subscript_call_result_571132 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 4), getitem___571131, int_571122)
    
    # Assigning a type to the variable 'tuple_var_assignment_566049' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'tuple_var_assignment_566049', subscript_call_result_571132)
    
    # Assigning a Subscript to a Name (line 2636):
    
    # Obtaining the type of the subscript
    int_571133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2636, 4), 'int')
    
    # Call to chi2_contingency(...): (line 2636)
    # Processing the call arguments (line 2636)
    # Getting the type of 'table' (line 2636)
    table_571135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 46), 'table', False)
    # Processing the call keyword arguments (line 2636)
    # Getting the type of 'lambda_' (line 2636)
    lambda__571136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 61), 'lambda_', False)
    keyword_571137 = lambda__571136
    # Getting the type of 'correction' (line 2637)
    correction_571138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 57), 'correction', False)
    keyword_571139 = correction_571138
    kwargs_571140 = {'correction': keyword_571139, 'lambda_': keyword_571137}
    # Getting the type of 'chi2_contingency' (line 2636)
    chi2_contingency_571134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 29), 'chi2_contingency', False)
    # Calling chi2_contingency(args, kwargs) (line 2636)
    chi2_contingency_call_result_571141 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 29), chi2_contingency_571134, *[table_571135], **kwargs_571140)
    
    # Obtaining the member '__getitem__' of a type (line 2636)
    getitem___571142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 4), chi2_contingency_call_result_571141, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2636)
    subscript_call_result_571143 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 4), getitem___571142, int_571133)
    
    # Assigning a type to the variable 'tuple_var_assignment_566050' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'tuple_var_assignment_566050', subscript_call_result_571143)
    
    # Assigning a Subscript to a Name (line 2636):
    
    # Obtaining the type of the subscript
    int_571144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2636, 4), 'int')
    
    # Call to chi2_contingency(...): (line 2636)
    # Processing the call arguments (line 2636)
    # Getting the type of 'table' (line 2636)
    table_571146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 46), 'table', False)
    # Processing the call keyword arguments (line 2636)
    # Getting the type of 'lambda_' (line 2636)
    lambda__571147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 61), 'lambda_', False)
    keyword_571148 = lambda__571147
    # Getting the type of 'correction' (line 2637)
    correction_571149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 57), 'correction', False)
    keyword_571150 = correction_571149
    kwargs_571151 = {'correction': keyword_571150, 'lambda_': keyword_571148}
    # Getting the type of 'chi2_contingency' (line 2636)
    chi2_contingency_571145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 29), 'chi2_contingency', False)
    # Calling chi2_contingency(args, kwargs) (line 2636)
    chi2_contingency_call_result_571152 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 29), chi2_contingency_571145, *[table_571146], **kwargs_571151)
    
    # Obtaining the member '__getitem__' of a type (line 2636)
    getitem___571153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 4), chi2_contingency_call_result_571152, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2636)
    subscript_call_result_571154 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 4), getitem___571153, int_571144)
    
    # Assigning a type to the variable 'tuple_var_assignment_566051' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'tuple_var_assignment_566051', subscript_call_result_571154)
    
    # Assigning a Name to a Name (line 2636):
    # Getting the type of 'tuple_var_assignment_566048' (line 2636)
    tuple_var_assignment_566048_571155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'tuple_var_assignment_566048')
    # Assigning a type to the variable 'stat' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'stat', tuple_var_assignment_566048_571155)
    
    # Assigning a Name to a Name (line 2636):
    # Getting the type of 'tuple_var_assignment_566049' (line 2636)
    tuple_var_assignment_566049_571156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'tuple_var_assignment_566049')
    # Assigning a type to the variable 'p' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 10), 'p', tuple_var_assignment_566049_571156)
    
    # Assigning a Name to a Name (line 2636):
    # Getting the type of 'tuple_var_assignment_566050' (line 2636)
    tuple_var_assignment_566050_571157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'tuple_var_assignment_566050')
    # Assigning a type to the variable 'dof' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 13), 'dof', tuple_var_assignment_566050_571157)
    
    # Assigning a Name to a Name (line 2636):
    # Getting the type of 'tuple_var_assignment_566051' (line 2636)
    tuple_var_assignment_566051_571158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'tuple_var_assignment_566051')
    # Assigning a type to the variable 'expected' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 18), 'expected', tuple_var_assignment_566051_571158)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2638)
    tuple_571159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2638)
    # Adding element type (line 2638)
    # Getting the type of 'stat' (line 2638)
    stat_571160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 11), 'stat')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2638, 11), tuple_571159, stat_571160)
    # Adding element type (line 2638)
    # Getting the type of 'p' (line 2638)
    p_571161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 17), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2638, 11), tuple_571159, p_571161)
    # Adding element type (line 2638)
    # Getting the type of 'grand_median' (line 2638)
    grand_median_571162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 20), 'grand_median')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2638, 11), tuple_571159, grand_median_571162)
    # Adding element type (line 2638)
    # Getting the type of 'table' (line 2638)
    table_571163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 34), 'table')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2638, 11), tuple_571159, table_571163)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2638, 4), 'stypy_return_type', tuple_571159)
    
    # ################# End of 'median_test(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'median_test' in the type store
    # Getting the type of 'stypy_return_type' (line 2416)
    stypy_return_type_571164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_571164)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'median_test'
    return stypy_return_type_571164

# Assigning a type to the variable 'median_test' (line 2416)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2416, 0), 'median_test', median_test)

@norecursion
def _circfuncs_common(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_circfuncs_common'
    module_type_store = module_type_store.open_function_context('_circfuncs_common', 2641, 0, False)
    
    # Passed parameters checking function
    _circfuncs_common.stypy_localization = localization
    _circfuncs_common.stypy_type_of_self = None
    _circfuncs_common.stypy_type_store = module_type_store
    _circfuncs_common.stypy_function_name = '_circfuncs_common'
    _circfuncs_common.stypy_param_names_list = ['samples', 'high', 'low']
    _circfuncs_common.stypy_varargs_param_name = None
    _circfuncs_common.stypy_kwargs_param_name = None
    _circfuncs_common.stypy_call_defaults = defaults
    _circfuncs_common.stypy_call_varargs = varargs
    _circfuncs_common.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_circfuncs_common', ['samples', 'high', 'low'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_circfuncs_common', localization, ['samples', 'high', 'low'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_circfuncs_common(...)' code ##################

    
    # Assigning a Call to a Name (line 2642):
    
    # Assigning a Call to a Name (line 2642):
    
    # Call to asarray(...): (line 2642)
    # Processing the call arguments (line 2642)
    # Getting the type of 'samples' (line 2642)
    samples_571167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 25), 'samples', False)
    # Processing the call keyword arguments (line 2642)
    kwargs_571168 = {}
    # Getting the type of 'np' (line 2642)
    np_571165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 14), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2642)
    asarray_571166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2642, 14), np_571165, 'asarray')
    # Calling asarray(args, kwargs) (line 2642)
    asarray_call_result_571169 = invoke(stypy.reporting.localization.Localization(__file__, 2642, 14), asarray_571166, *[samples_571167], **kwargs_571168)
    
    # Assigning a type to the variable 'samples' (line 2642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2642, 4), 'samples', asarray_call_result_571169)
    
    
    # Getting the type of 'samples' (line 2643)
    samples_571170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 7), 'samples')
    # Obtaining the member 'size' of a type (line 2643)
    size_571171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2643, 7), samples_571170, 'size')
    int_571172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2643, 23), 'int')
    # Applying the binary operator '==' (line 2643)
    result_eq_571173 = python_operator(stypy.reporting.localization.Localization(__file__, 2643, 7), '==', size_571171, int_571172)
    
    # Testing the type of an if condition (line 2643)
    if_condition_571174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2643, 4), result_eq_571173)
    # Assigning a type to the variable 'if_condition_571174' (line 2643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2643, 4), 'if_condition_571174', if_condition_571174)
    # SSA begins for if statement (line 2643)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2644)
    tuple_571175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2644, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2644)
    # Adding element type (line 2644)
    # Getting the type of 'np' (line 2644)
    np_571176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 15), 'np')
    # Obtaining the member 'nan' of a type (line 2644)
    nan_571177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2644, 15), np_571176, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2644, 15), tuple_571175, nan_571177)
    # Adding element type (line 2644)
    # Getting the type of 'np' (line 2644)
    np_571178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 23), 'np')
    # Obtaining the member 'nan' of a type (line 2644)
    nan_571179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2644, 23), np_571178, 'nan')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2644, 15), tuple_571175, nan_571179)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2644, 8), 'stypy_return_type', tuple_571175)
    # SSA join for if statement (line 2643)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2646):
    
    # Assigning a BinOp to a Name (line 2646):
    # Getting the type of 'samples' (line 2646)
    samples_571180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 11), 'samples')
    # Getting the type of 'low' (line 2646)
    low_571181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 21), 'low')
    # Applying the binary operator '-' (line 2646)
    result_sub_571182 = python_operator(stypy.reporting.localization.Localization(__file__, 2646, 11), '-', samples_571180, low_571181)
    
    float_571183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2646, 26), 'float')
    # Applying the binary operator '*' (line 2646)
    result_mul_571184 = python_operator(stypy.reporting.localization.Localization(__file__, 2646, 10), '*', result_sub_571182, float_571183)
    
    # Getting the type of 'pi' (line 2646)
    pi_571185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 29), 'pi')
    # Applying the binary operator '*' (line 2646)
    result_mul_571186 = python_operator(stypy.reporting.localization.Localization(__file__, 2646, 28), '*', result_mul_571184, pi_571185)
    
    # Getting the type of 'high' (line 2646)
    high_571187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 35), 'high')
    # Getting the type of 'low' (line 2646)
    low_571188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 42), 'low')
    # Applying the binary operator '-' (line 2646)
    result_sub_571189 = python_operator(stypy.reporting.localization.Localization(__file__, 2646, 35), '-', high_571187, low_571188)
    
    # Applying the binary operator 'div' (line 2646)
    result_div_571190 = python_operator(stypy.reporting.localization.Localization(__file__, 2646, 32), 'div', result_mul_571186, result_sub_571189)
    
    # Assigning a type to the variable 'ang' (line 2646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2646, 4), 'ang', result_div_571190)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2647)
    tuple_571191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2647, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2647)
    # Adding element type (line 2647)
    # Getting the type of 'samples' (line 2647)
    samples_571192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 11), 'samples')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2647, 11), tuple_571191, samples_571192)
    # Adding element type (line 2647)
    # Getting the type of 'ang' (line 2647)
    ang_571193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 20), 'ang')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2647, 11), tuple_571191, ang_571193)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2647, 4), 'stypy_return_type', tuple_571191)
    
    # ################# End of '_circfuncs_common(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_circfuncs_common' in the type store
    # Getting the type of 'stypy_return_type' (line 2641)
    stypy_return_type_571194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_571194)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_circfuncs_common'
    return stypy_return_type_571194

# Assigning a type to the variable '_circfuncs_common' (line 2641)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2641, 0), '_circfuncs_common', _circfuncs_common)

@norecursion
def circmean(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_571195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2650, 27), 'int')
    # Getting the type of 'pi' (line 2650)
    pi_571196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 29), 'pi')
    # Applying the binary operator '*' (line 2650)
    result_mul_571197 = python_operator(stypy.reporting.localization.Localization(__file__, 2650, 27), '*', int_571195, pi_571196)
    
    int_571198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2650, 37), 'int')
    # Getting the type of 'None' (line 2650)
    None_571199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 45), 'None')
    defaults = [result_mul_571197, int_571198, None_571199]
    # Create a new context for function 'circmean'
    module_type_store = module_type_store.open_function_context('circmean', 2650, 0, False)
    
    # Passed parameters checking function
    circmean.stypy_localization = localization
    circmean.stypy_type_of_self = None
    circmean.stypy_type_store = module_type_store
    circmean.stypy_function_name = 'circmean'
    circmean.stypy_param_names_list = ['samples', 'high', 'low', 'axis']
    circmean.stypy_varargs_param_name = None
    circmean.stypy_kwargs_param_name = None
    circmean.stypy_call_defaults = defaults
    circmean.stypy_call_varargs = varargs
    circmean.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'circmean', ['samples', 'high', 'low', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'circmean', localization, ['samples', 'high', 'low', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'circmean(...)' code ##################

    str_571200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2681, (-1)), 'str', '\n    Compute the circular mean for samples in a range.\n\n    Parameters\n    ----------\n    samples : array_like\n        Input array.\n    high : float or int, optional\n        High boundary for circular mean range.  Default is ``2*pi``.\n    low : float or int, optional\n        Low boundary for circular mean range.  Default is 0.\n    axis : int, optional\n        Axis along which means are computed.  The default is to compute\n        the mean of the flattened array.\n\n    Returns\n    -------\n    circmean : float\n        Circular mean.\n\n    Examples\n    --------\n    >>> from scipy.stats import circmean\n    >>> circmean([0.1, 2*np.pi+0.2, 6*np.pi+0.3])\n    0.2\n\n    >>> from scipy.stats import circmean\n    >>> circmean([0.2, 1.4, 2.6], high = 1, low = 0)\n    0.4\n\n    ')
    
    # Assigning a Call to a Tuple (line 2682):
    
    # Assigning a Subscript to a Name (line 2682):
    
    # Obtaining the type of the subscript
    int_571201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2682, 4), 'int')
    
    # Call to _circfuncs_common(...): (line 2682)
    # Processing the call arguments (line 2682)
    # Getting the type of 'samples' (line 2682)
    samples_571203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 37), 'samples', False)
    # Getting the type of 'high' (line 2682)
    high_571204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 46), 'high', False)
    # Getting the type of 'low' (line 2682)
    low_571205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 52), 'low', False)
    # Processing the call keyword arguments (line 2682)
    kwargs_571206 = {}
    # Getting the type of '_circfuncs_common' (line 2682)
    _circfuncs_common_571202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 19), '_circfuncs_common', False)
    # Calling _circfuncs_common(args, kwargs) (line 2682)
    _circfuncs_common_call_result_571207 = invoke(stypy.reporting.localization.Localization(__file__, 2682, 19), _circfuncs_common_571202, *[samples_571203, high_571204, low_571205], **kwargs_571206)
    
    # Obtaining the member '__getitem__' of a type (line 2682)
    getitem___571208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2682, 4), _circfuncs_common_call_result_571207, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2682)
    subscript_call_result_571209 = invoke(stypy.reporting.localization.Localization(__file__, 2682, 4), getitem___571208, int_571201)
    
    # Assigning a type to the variable 'tuple_var_assignment_566052' (line 2682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2682, 4), 'tuple_var_assignment_566052', subscript_call_result_571209)
    
    # Assigning a Subscript to a Name (line 2682):
    
    # Obtaining the type of the subscript
    int_571210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2682, 4), 'int')
    
    # Call to _circfuncs_common(...): (line 2682)
    # Processing the call arguments (line 2682)
    # Getting the type of 'samples' (line 2682)
    samples_571212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 37), 'samples', False)
    # Getting the type of 'high' (line 2682)
    high_571213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 46), 'high', False)
    # Getting the type of 'low' (line 2682)
    low_571214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 52), 'low', False)
    # Processing the call keyword arguments (line 2682)
    kwargs_571215 = {}
    # Getting the type of '_circfuncs_common' (line 2682)
    _circfuncs_common_571211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 19), '_circfuncs_common', False)
    # Calling _circfuncs_common(args, kwargs) (line 2682)
    _circfuncs_common_call_result_571216 = invoke(stypy.reporting.localization.Localization(__file__, 2682, 19), _circfuncs_common_571211, *[samples_571212, high_571213, low_571214], **kwargs_571215)
    
    # Obtaining the member '__getitem__' of a type (line 2682)
    getitem___571217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2682, 4), _circfuncs_common_call_result_571216, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2682)
    subscript_call_result_571218 = invoke(stypy.reporting.localization.Localization(__file__, 2682, 4), getitem___571217, int_571210)
    
    # Assigning a type to the variable 'tuple_var_assignment_566053' (line 2682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2682, 4), 'tuple_var_assignment_566053', subscript_call_result_571218)
    
    # Assigning a Name to a Name (line 2682):
    # Getting the type of 'tuple_var_assignment_566052' (line 2682)
    tuple_var_assignment_566052_571219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 4), 'tuple_var_assignment_566052')
    # Assigning a type to the variable 'samples' (line 2682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2682, 4), 'samples', tuple_var_assignment_566052_571219)
    
    # Assigning a Name to a Name (line 2682):
    # Getting the type of 'tuple_var_assignment_566053' (line 2682)
    tuple_var_assignment_566053_571220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 4), 'tuple_var_assignment_566053')
    # Assigning a type to the variable 'ang' (line 2682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2682, 13), 'ang', tuple_var_assignment_566053_571220)
    
    # Assigning a Call to a Name (line 2683):
    
    # Assigning a Call to a Name (line 2683):
    
    # Call to sum(...): (line 2683)
    # Processing the call keyword arguments (line 2683)
    # Getting the type of 'axis' (line 2683)
    axis_571226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 26), 'axis', False)
    keyword_571227 = axis_571226
    kwargs_571228 = {'axis': keyword_571227}
    
    # Call to sin(...): (line 2683)
    # Processing the call arguments (line 2683)
    # Getting the type of 'ang' (line 2683)
    ang_571222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 12), 'ang', False)
    # Processing the call keyword arguments (line 2683)
    kwargs_571223 = {}
    # Getting the type of 'sin' (line 2683)
    sin_571221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 8), 'sin', False)
    # Calling sin(args, kwargs) (line 2683)
    sin_call_result_571224 = invoke(stypy.reporting.localization.Localization(__file__, 2683, 8), sin_571221, *[ang_571222], **kwargs_571223)
    
    # Obtaining the member 'sum' of a type (line 2683)
    sum_571225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2683, 8), sin_call_result_571224, 'sum')
    # Calling sum(args, kwargs) (line 2683)
    sum_call_result_571229 = invoke(stypy.reporting.localization.Localization(__file__, 2683, 8), sum_571225, *[], **kwargs_571228)
    
    # Assigning a type to the variable 'S' (line 2683)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2683, 4), 'S', sum_call_result_571229)
    
    # Assigning a Call to a Name (line 2684):
    
    # Assigning a Call to a Name (line 2684):
    
    # Call to sum(...): (line 2684)
    # Processing the call keyword arguments (line 2684)
    # Getting the type of 'axis' (line 2684)
    axis_571235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 26), 'axis', False)
    keyword_571236 = axis_571235
    kwargs_571237 = {'axis': keyword_571236}
    
    # Call to cos(...): (line 2684)
    # Processing the call arguments (line 2684)
    # Getting the type of 'ang' (line 2684)
    ang_571231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 12), 'ang', False)
    # Processing the call keyword arguments (line 2684)
    kwargs_571232 = {}
    # Getting the type of 'cos' (line 2684)
    cos_571230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 8), 'cos', False)
    # Calling cos(args, kwargs) (line 2684)
    cos_call_result_571233 = invoke(stypy.reporting.localization.Localization(__file__, 2684, 8), cos_571230, *[ang_571231], **kwargs_571232)
    
    # Obtaining the member 'sum' of a type (line 2684)
    sum_571234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2684, 8), cos_call_result_571233, 'sum')
    # Calling sum(args, kwargs) (line 2684)
    sum_call_result_571238 = invoke(stypy.reporting.localization.Localization(__file__, 2684, 8), sum_571234, *[], **kwargs_571237)
    
    # Assigning a type to the variable 'C' (line 2684)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2684, 4), 'C', sum_call_result_571238)
    
    # Assigning a Call to a Name (line 2685):
    
    # Assigning a Call to a Name (line 2685):
    
    # Call to arctan2(...): (line 2685)
    # Processing the call arguments (line 2685)
    # Getting the type of 'S' (line 2685)
    S_571240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2685, 18), 'S', False)
    # Getting the type of 'C' (line 2685)
    C_571241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2685, 21), 'C', False)
    # Processing the call keyword arguments (line 2685)
    kwargs_571242 = {}
    # Getting the type of 'arctan2' (line 2685)
    arctan2_571239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2685, 10), 'arctan2', False)
    # Calling arctan2(args, kwargs) (line 2685)
    arctan2_call_result_571243 = invoke(stypy.reporting.localization.Localization(__file__, 2685, 10), arctan2_571239, *[S_571240, C_571241], **kwargs_571242)
    
    # Assigning a type to the variable 'res' (line 2685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2685, 4), 'res', arctan2_call_result_571243)
    
    # Assigning a Compare to a Name (line 2686):
    
    # Assigning a Compare to a Name (line 2686):
    
    # Getting the type of 'res' (line 2686)
    res_571244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2686, 11), 'res')
    int_571245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2686, 17), 'int')
    # Applying the binary operator '<' (line 2686)
    result_lt_571246 = python_operator(stypy.reporting.localization.Localization(__file__, 2686, 11), '<', res_571244, int_571245)
    
    # Assigning a type to the variable 'mask' (line 2686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2686, 4), 'mask', result_lt_571246)
    
    
    # Getting the type of 'mask' (line 2687)
    mask_571247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2687, 7), 'mask')
    # Obtaining the member 'ndim' of a type (line 2687)
    ndim_571248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2687, 7), mask_571247, 'ndim')
    int_571249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2687, 19), 'int')
    # Applying the binary operator '>' (line 2687)
    result_gt_571250 = python_operator(stypy.reporting.localization.Localization(__file__, 2687, 7), '>', ndim_571248, int_571249)
    
    # Testing the type of an if condition (line 2687)
    if_condition_571251 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2687, 4), result_gt_571250)
    # Assigning a type to the variable 'if_condition_571251' (line 2687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2687, 4), 'if_condition_571251', if_condition_571251)
    # SSA begins for if statement (line 2687)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'res' (line 2688)
    res_571252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 8), 'res')
    
    # Obtaining the type of the subscript
    # Getting the type of 'mask' (line 2688)
    mask_571253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 12), 'mask')
    # Getting the type of 'res' (line 2688)
    res_571254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 8), 'res')
    # Obtaining the member '__getitem__' of a type (line 2688)
    getitem___571255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2688, 8), res_571254, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2688)
    subscript_call_result_571256 = invoke(stypy.reporting.localization.Localization(__file__, 2688, 8), getitem___571255, mask_571253)
    
    int_571257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2688, 21), 'int')
    # Getting the type of 'pi' (line 2688)
    pi_571258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 23), 'pi')
    # Applying the binary operator '*' (line 2688)
    result_mul_571259 = python_operator(stypy.reporting.localization.Localization(__file__, 2688, 21), '*', int_571257, pi_571258)
    
    # Applying the binary operator '+=' (line 2688)
    result_iadd_571260 = python_operator(stypy.reporting.localization.Localization(__file__, 2688, 8), '+=', subscript_call_result_571256, result_mul_571259)
    # Getting the type of 'res' (line 2688)
    res_571261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 8), 'res')
    # Getting the type of 'mask' (line 2688)
    mask_571262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 12), 'mask')
    # Storing an element on a container (line 2688)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2688, 8), res_571261, (mask_571262, result_iadd_571260))
    
    # SSA branch for the else part of an if statement (line 2687)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'mask' (line 2689)
    mask_571263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2689, 9), 'mask')
    # Testing the type of an if condition (line 2689)
    if_condition_571264 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2689, 9), mask_571263)
    # Assigning a type to the variable 'if_condition_571264' (line 2689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2689, 9), 'if_condition_571264', if_condition_571264)
    # SSA begins for if statement (line 2689)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'res' (line 2690)
    res_571265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2690, 8), 'res')
    int_571266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2690, 15), 'int')
    # Getting the type of 'pi' (line 2690)
    pi_571267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2690, 17), 'pi')
    # Applying the binary operator '*' (line 2690)
    result_mul_571268 = python_operator(stypy.reporting.localization.Localization(__file__, 2690, 15), '*', int_571266, pi_571267)
    
    # Applying the binary operator '+=' (line 2690)
    result_iadd_571269 = python_operator(stypy.reporting.localization.Localization(__file__, 2690, 8), '+=', res_571265, result_mul_571268)
    # Assigning a type to the variable 'res' (line 2690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2690, 8), 'res', result_iadd_571269)
    
    # SSA join for if statement (line 2689)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2687)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'res' (line 2691)
    res_571270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2691, 11), 'res')
    # Getting the type of 'high' (line 2691)
    high_571271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2691, 16), 'high')
    # Getting the type of 'low' (line 2691)
    low_571272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2691, 23), 'low')
    # Applying the binary operator '-' (line 2691)
    result_sub_571273 = python_operator(stypy.reporting.localization.Localization(__file__, 2691, 16), '-', high_571271, low_571272)
    
    # Applying the binary operator '*' (line 2691)
    result_mul_571274 = python_operator(stypy.reporting.localization.Localization(__file__, 2691, 11), '*', res_571270, result_sub_571273)
    
    float_571275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2691, 28), 'float')
    # Applying the binary operator 'div' (line 2691)
    result_div_571276 = python_operator(stypy.reporting.localization.Localization(__file__, 2691, 27), 'div', result_mul_571274, float_571275)
    
    # Getting the type of 'pi' (line 2691)
    pi_571277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2691, 32), 'pi')
    # Applying the binary operator 'div' (line 2691)
    result_div_571278 = python_operator(stypy.reporting.localization.Localization(__file__, 2691, 31), 'div', result_div_571276, pi_571277)
    
    # Getting the type of 'low' (line 2691)
    low_571279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2691, 37), 'low')
    # Applying the binary operator '+' (line 2691)
    result_add_571280 = python_operator(stypy.reporting.localization.Localization(__file__, 2691, 11), '+', result_div_571278, low_571279)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2691, 4), 'stypy_return_type', result_add_571280)
    
    # ################# End of 'circmean(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'circmean' in the type store
    # Getting the type of 'stypy_return_type' (line 2650)
    stypy_return_type_571281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_571281)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'circmean'
    return stypy_return_type_571281

# Assigning a type to the variable 'circmean' (line 2650)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2650, 0), 'circmean', circmean)

@norecursion
def circvar(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_571282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2694, 26), 'int')
    # Getting the type of 'pi' (line 2694)
    pi_571283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 28), 'pi')
    # Applying the binary operator '*' (line 2694)
    result_mul_571284 = python_operator(stypy.reporting.localization.Localization(__file__, 2694, 26), '*', int_571282, pi_571283)
    
    int_571285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2694, 36), 'int')
    # Getting the type of 'None' (line 2694)
    None_571286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 44), 'None')
    defaults = [result_mul_571284, int_571285, None_571286]
    # Create a new context for function 'circvar'
    module_type_store = module_type_store.open_function_context('circvar', 2694, 0, False)
    
    # Passed parameters checking function
    circvar.stypy_localization = localization
    circvar.stypy_type_of_self = None
    circvar.stypy_type_store = module_type_store
    circvar.stypy_function_name = 'circvar'
    circvar.stypy_param_names_list = ['samples', 'high', 'low', 'axis']
    circvar.stypy_varargs_param_name = None
    circvar.stypy_kwargs_param_name = None
    circvar.stypy_call_defaults = defaults
    circvar.stypy_call_varargs = varargs
    circvar.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'circvar', ['samples', 'high', 'low', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'circvar', localization, ['samples', 'high', 'low', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'circvar(...)' code ##################

    str_571287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2726, (-1)), 'str', "\n    Compute the circular variance for samples assumed to be in a range\n\n    Parameters\n    ----------\n    samples : array_like\n        Input array.\n    low : float or int, optional\n        Low boundary for circular variance range.  Default is 0.\n    high : float or int, optional\n        High boundary for circular variance range.  Default is ``2*pi``.\n    axis : int, optional\n        Axis along which variances are computed.  The default is to compute\n        the variance of the flattened array.\n\n    Returns\n    -------\n    circvar : float\n        Circular variance.\n\n    Notes\n    -----\n    This uses a definition of circular variance that in the limit of small\n    angles returns a number close to the 'linear' variance.\n\n    Examples\n    --------\n    >>> from scipy.stats import circvar\n    >>> circvar([0, 2*np.pi/3, 5*np.pi/3])\n    2.19722457734\n\n    ")
    
    # Assigning a Call to a Tuple (line 2727):
    
    # Assigning a Subscript to a Name (line 2727):
    
    # Obtaining the type of the subscript
    int_571288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2727, 4), 'int')
    
    # Call to _circfuncs_common(...): (line 2727)
    # Processing the call arguments (line 2727)
    # Getting the type of 'samples' (line 2727)
    samples_571290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 37), 'samples', False)
    # Getting the type of 'high' (line 2727)
    high_571291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 46), 'high', False)
    # Getting the type of 'low' (line 2727)
    low_571292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 52), 'low', False)
    # Processing the call keyword arguments (line 2727)
    kwargs_571293 = {}
    # Getting the type of '_circfuncs_common' (line 2727)
    _circfuncs_common_571289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 19), '_circfuncs_common', False)
    # Calling _circfuncs_common(args, kwargs) (line 2727)
    _circfuncs_common_call_result_571294 = invoke(stypy.reporting.localization.Localization(__file__, 2727, 19), _circfuncs_common_571289, *[samples_571290, high_571291, low_571292], **kwargs_571293)
    
    # Obtaining the member '__getitem__' of a type (line 2727)
    getitem___571295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2727, 4), _circfuncs_common_call_result_571294, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2727)
    subscript_call_result_571296 = invoke(stypy.reporting.localization.Localization(__file__, 2727, 4), getitem___571295, int_571288)
    
    # Assigning a type to the variable 'tuple_var_assignment_566054' (line 2727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2727, 4), 'tuple_var_assignment_566054', subscript_call_result_571296)
    
    # Assigning a Subscript to a Name (line 2727):
    
    # Obtaining the type of the subscript
    int_571297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2727, 4), 'int')
    
    # Call to _circfuncs_common(...): (line 2727)
    # Processing the call arguments (line 2727)
    # Getting the type of 'samples' (line 2727)
    samples_571299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 37), 'samples', False)
    # Getting the type of 'high' (line 2727)
    high_571300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 46), 'high', False)
    # Getting the type of 'low' (line 2727)
    low_571301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 52), 'low', False)
    # Processing the call keyword arguments (line 2727)
    kwargs_571302 = {}
    # Getting the type of '_circfuncs_common' (line 2727)
    _circfuncs_common_571298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 19), '_circfuncs_common', False)
    # Calling _circfuncs_common(args, kwargs) (line 2727)
    _circfuncs_common_call_result_571303 = invoke(stypy.reporting.localization.Localization(__file__, 2727, 19), _circfuncs_common_571298, *[samples_571299, high_571300, low_571301], **kwargs_571302)
    
    # Obtaining the member '__getitem__' of a type (line 2727)
    getitem___571304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2727, 4), _circfuncs_common_call_result_571303, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2727)
    subscript_call_result_571305 = invoke(stypy.reporting.localization.Localization(__file__, 2727, 4), getitem___571304, int_571297)
    
    # Assigning a type to the variable 'tuple_var_assignment_566055' (line 2727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2727, 4), 'tuple_var_assignment_566055', subscript_call_result_571305)
    
    # Assigning a Name to a Name (line 2727):
    # Getting the type of 'tuple_var_assignment_566054' (line 2727)
    tuple_var_assignment_566054_571306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 4), 'tuple_var_assignment_566054')
    # Assigning a type to the variable 'samples' (line 2727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2727, 4), 'samples', tuple_var_assignment_566054_571306)
    
    # Assigning a Name to a Name (line 2727):
    # Getting the type of 'tuple_var_assignment_566055' (line 2727)
    tuple_var_assignment_566055_571307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 4), 'tuple_var_assignment_566055')
    # Assigning a type to the variable 'ang' (line 2727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2727, 13), 'ang', tuple_var_assignment_566055_571307)
    
    # Assigning a Call to a Name (line 2728):
    
    # Assigning a Call to a Name (line 2728):
    
    # Call to mean(...): (line 2728)
    # Processing the call keyword arguments (line 2728)
    # Getting the type of 'axis' (line 2728)
    axis_571313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 27), 'axis', False)
    keyword_571314 = axis_571313
    kwargs_571315 = {'axis': keyword_571314}
    
    # Call to sin(...): (line 2728)
    # Processing the call arguments (line 2728)
    # Getting the type of 'ang' (line 2728)
    ang_571309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 12), 'ang', False)
    # Processing the call keyword arguments (line 2728)
    kwargs_571310 = {}
    # Getting the type of 'sin' (line 2728)
    sin_571308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 8), 'sin', False)
    # Calling sin(args, kwargs) (line 2728)
    sin_call_result_571311 = invoke(stypy.reporting.localization.Localization(__file__, 2728, 8), sin_571308, *[ang_571309], **kwargs_571310)
    
    # Obtaining the member 'mean' of a type (line 2728)
    mean_571312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2728, 8), sin_call_result_571311, 'mean')
    # Calling mean(args, kwargs) (line 2728)
    mean_call_result_571316 = invoke(stypy.reporting.localization.Localization(__file__, 2728, 8), mean_571312, *[], **kwargs_571315)
    
    # Assigning a type to the variable 'S' (line 2728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2728, 4), 'S', mean_call_result_571316)
    
    # Assigning a Call to a Name (line 2729):
    
    # Assigning a Call to a Name (line 2729):
    
    # Call to mean(...): (line 2729)
    # Processing the call keyword arguments (line 2729)
    # Getting the type of 'axis' (line 2729)
    axis_571322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 27), 'axis', False)
    keyword_571323 = axis_571322
    kwargs_571324 = {'axis': keyword_571323}
    
    # Call to cos(...): (line 2729)
    # Processing the call arguments (line 2729)
    # Getting the type of 'ang' (line 2729)
    ang_571318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 12), 'ang', False)
    # Processing the call keyword arguments (line 2729)
    kwargs_571319 = {}
    # Getting the type of 'cos' (line 2729)
    cos_571317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 8), 'cos', False)
    # Calling cos(args, kwargs) (line 2729)
    cos_call_result_571320 = invoke(stypy.reporting.localization.Localization(__file__, 2729, 8), cos_571317, *[ang_571318], **kwargs_571319)
    
    # Obtaining the member 'mean' of a type (line 2729)
    mean_571321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2729, 8), cos_call_result_571320, 'mean')
    # Calling mean(args, kwargs) (line 2729)
    mean_call_result_571325 = invoke(stypy.reporting.localization.Localization(__file__, 2729, 8), mean_571321, *[], **kwargs_571324)
    
    # Assigning a type to the variable 'C' (line 2729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2729, 4), 'C', mean_call_result_571325)
    
    # Assigning a Call to a Name (line 2730):
    
    # Assigning a Call to a Name (line 2730):
    
    # Call to hypot(...): (line 2730)
    # Processing the call arguments (line 2730)
    # Getting the type of 'S' (line 2730)
    S_571327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2730, 14), 'S', False)
    # Getting the type of 'C' (line 2730)
    C_571328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2730, 17), 'C', False)
    # Processing the call keyword arguments (line 2730)
    kwargs_571329 = {}
    # Getting the type of 'hypot' (line 2730)
    hypot_571326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2730, 8), 'hypot', False)
    # Calling hypot(args, kwargs) (line 2730)
    hypot_call_result_571330 = invoke(stypy.reporting.localization.Localization(__file__, 2730, 8), hypot_571326, *[S_571327, C_571328], **kwargs_571329)
    
    # Assigning a type to the variable 'R' (line 2730)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2730, 4), 'R', hypot_call_result_571330)
    # Getting the type of 'high' (line 2731)
    high_571331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 13), 'high')
    # Getting the type of 'low' (line 2731)
    low_571332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 20), 'low')
    # Applying the binary operator '-' (line 2731)
    result_sub_571333 = python_operator(stypy.reporting.localization.Localization(__file__, 2731, 13), '-', high_571331, low_571332)
    
    float_571334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2731, 25), 'float')
    # Applying the binary operator 'div' (line 2731)
    result_div_571335 = python_operator(stypy.reporting.localization.Localization(__file__, 2731, 12), 'div', result_sub_571333, float_571334)
    
    # Getting the type of 'pi' (line 2731)
    pi_571336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 29), 'pi')
    # Applying the binary operator 'div' (line 2731)
    result_div_571337 = python_operator(stypy.reporting.localization.Localization(__file__, 2731, 28), 'div', result_div_571335, pi_571336)
    
    int_571338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2731, 34), 'int')
    # Applying the binary operator '**' (line 2731)
    result_pow_571339 = python_operator(stypy.reporting.localization.Localization(__file__, 2731, 11), '**', result_div_571337, int_571338)
    
    int_571340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2731, 38), 'int')
    # Applying the binary operator '*' (line 2731)
    result_mul_571341 = python_operator(stypy.reporting.localization.Localization(__file__, 2731, 11), '*', result_pow_571339, int_571340)
    
    
    # Call to log(...): (line 2731)
    # Processing the call arguments (line 2731)
    int_571343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2731, 46), 'int')
    # Getting the type of 'R' (line 2731)
    R_571344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 48), 'R', False)
    # Applying the binary operator 'div' (line 2731)
    result_div_571345 = python_operator(stypy.reporting.localization.Localization(__file__, 2731, 46), 'div', int_571343, R_571344)
    
    # Processing the call keyword arguments (line 2731)
    kwargs_571346 = {}
    # Getting the type of 'log' (line 2731)
    log_571342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 42), 'log', False)
    # Calling log(args, kwargs) (line 2731)
    log_call_result_571347 = invoke(stypy.reporting.localization.Localization(__file__, 2731, 42), log_571342, *[result_div_571345], **kwargs_571346)
    
    # Applying the binary operator '*' (line 2731)
    result_mul_571348 = python_operator(stypy.reporting.localization.Localization(__file__, 2731, 40), '*', result_mul_571341, log_call_result_571347)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2731, 4), 'stypy_return_type', result_mul_571348)
    
    # ################# End of 'circvar(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'circvar' in the type store
    # Getting the type of 'stypy_return_type' (line 2694)
    stypy_return_type_571349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_571349)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'circvar'
    return stypy_return_type_571349

# Assigning a type to the variable 'circvar' (line 2694)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2694, 0), 'circvar', circvar)

@norecursion
def circstd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_571350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2734, 26), 'int')
    # Getting the type of 'pi' (line 2734)
    pi_571351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 28), 'pi')
    # Applying the binary operator '*' (line 2734)
    result_mul_571352 = python_operator(stypy.reporting.localization.Localization(__file__, 2734, 26), '*', int_571350, pi_571351)
    
    int_571353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2734, 36), 'int')
    # Getting the type of 'None' (line 2734)
    None_571354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 44), 'None')
    defaults = [result_mul_571352, int_571353, None_571354]
    # Create a new context for function 'circstd'
    module_type_store = module_type_store.open_function_context('circstd', 2734, 0, False)
    
    # Passed parameters checking function
    circstd.stypy_localization = localization
    circstd.stypy_type_of_self = None
    circstd.stypy_type_store = module_type_store
    circstd.stypy_function_name = 'circstd'
    circstd.stypy_param_names_list = ['samples', 'high', 'low', 'axis']
    circstd.stypy_varargs_param_name = None
    circstd.stypy_kwargs_param_name = None
    circstd.stypy_call_defaults = defaults
    circstd.stypy_call_varargs = varargs
    circstd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'circstd', ['samples', 'high', 'low', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'circstd', localization, ['samples', 'high', 'low', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'circstd(...)' code ##################

    str_571355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2768, (-1)), 'str', "\n    Compute the circular standard deviation for samples assumed to be in the\n    range [low to high].\n\n    Parameters\n    ----------\n    samples : array_like\n        Input array.\n    low : float or int, optional\n        Low boundary for circular standard deviation range.  Default is 0.\n    high : float or int, optional\n        High boundary for circular standard deviation range.\n        Default is ``2*pi``.\n    axis : int, optional\n        Axis along which standard deviations are computed.  The default is\n        to compute the standard deviation of the flattened array.\n\n    Returns\n    -------\n    circstd : float\n        Circular standard deviation.\n\n    Notes\n    -----\n    This uses a definition of circular standard deviation that in the limit of\n    small angles returns a number close to the 'linear' standard deviation.\n\n    Examples\n    --------\n    >>> from scipy.stats import circstd\n    >>> circstd([0, 0.1*np.pi/2, 0.001*np.pi, 0.03*np.pi/2])\n    0.063564063306\n\n    ")
    
    # Assigning a Call to a Tuple (line 2769):
    
    # Assigning a Subscript to a Name (line 2769):
    
    # Obtaining the type of the subscript
    int_571356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2769, 4), 'int')
    
    # Call to _circfuncs_common(...): (line 2769)
    # Processing the call arguments (line 2769)
    # Getting the type of 'samples' (line 2769)
    samples_571358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 37), 'samples', False)
    # Getting the type of 'high' (line 2769)
    high_571359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 46), 'high', False)
    # Getting the type of 'low' (line 2769)
    low_571360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 52), 'low', False)
    # Processing the call keyword arguments (line 2769)
    kwargs_571361 = {}
    # Getting the type of '_circfuncs_common' (line 2769)
    _circfuncs_common_571357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 19), '_circfuncs_common', False)
    # Calling _circfuncs_common(args, kwargs) (line 2769)
    _circfuncs_common_call_result_571362 = invoke(stypy.reporting.localization.Localization(__file__, 2769, 19), _circfuncs_common_571357, *[samples_571358, high_571359, low_571360], **kwargs_571361)
    
    # Obtaining the member '__getitem__' of a type (line 2769)
    getitem___571363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 4), _circfuncs_common_call_result_571362, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2769)
    subscript_call_result_571364 = invoke(stypy.reporting.localization.Localization(__file__, 2769, 4), getitem___571363, int_571356)
    
    # Assigning a type to the variable 'tuple_var_assignment_566056' (line 2769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 4), 'tuple_var_assignment_566056', subscript_call_result_571364)
    
    # Assigning a Subscript to a Name (line 2769):
    
    # Obtaining the type of the subscript
    int_571365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2769, 4), 'int')
    
    # Call to _circfuncs_common(...): (line 2769)
    # Processing the call arguments (line 2769)
    # Getting the type of 'samples' (line 2769)
    samples_571367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 37), 'samples', False)
    # Getting the type of 'high' (line 2769)
    high_571368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 46), 'high', False)
    # Getting the type of 'low' (line 2769)
    low_571369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 52), 'low', False)
    # Processing the call keyword arguments (line 2769)
    kwargs_571370 = {}
    # Getting the type of '_circfuncs_common' (line 2769)
    _circfuncs_common_571366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 19), '_circfuncs_common', False)
    # Calling _circfuncs_common(args, kwargs) (line 2769)
    _circfuncs_common_call_result_571371 = invoke(stypy.reporting.localization.Localization(__file__, 2769, 19), _circfuncs_common_571366, *[samples_571367, high_571368, low_571369], **kwargs_571370)
    
    # Obtaining the member '__getitem__' of a type (line 2769)
    getitem___571372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 4), _circfuncs_common_call_result_571371, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2769)
    subscript_call_result_571373 = invoke(stypy.reporting.localization.Localization(__file__, 2769, 4), getitem___571372, int_571365)
    
    # Assigning a type to the variable 'tuple_var_assignment_566057' (line 2769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 4), 'tuple_var_assignment_566057', subscript_call_result_571373)
    
    # Assigning a Name to a Name (line 2769):
    # Getting the type of 'tuple_var_assignment_566056' (line 2769)
    tuple_var_assignment_566056_571374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 4), 'tuple_var_assignment_566056')
    # Assigning a type to the variable 'samples' (line 2769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 4), 'samples', tuple_var_assignment_566056_571374)
    
    # Assigning a Name to a Name (line 2769):
    # Getting the type of 'tuple_var_assignment_566057' (line 2769)
    tuple_var_assignment_566057_571375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 4), 'tuple_var_assignment_566057')
    # Assigning a type to the variable 'ang' (line 2769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 13), 'ang', tuple_var_assignment_566057_571375)
    
    # Assigning a Call to a Name (line 2770):
    
    # Assigning a Call to a Name (line 2770):
    
    # Call to mean(...): (line 2770)
    # Processing the call keyword arguments (line 2770)
    # Getting the type of 'axis' (line 2770)
    axis_571381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 27), 'axis', False)
    keyword_571382 = axis_571381
    kwargs_571383 = {'axis': keyword_571382}
    
    # Call to sin(...): (line 2770)
    # Processing the call arguments (line 2770)
    # Getting the type of 'ang' (line 2770)
    ang_571377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 12), 'ang', False)
    # Processing the call keyword arguments (line 2770)
    kwargs_571378 = {}
    # Getting the type of 'sin' (line 2770)
    sin_571376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 8), 'sin', False)
    # Calling sin(args, kwargs) (line 2770)
    sin_call_result_571379 = invoke(stypy.reporting.localization.Localization(__file__, 2770, 8), sin_571376, *[ang_571377], **kwargs_571378)
    
    # Obtaining the member 'mean' of a type (line 2770)
    mean_571380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2770, 8), sin_call_result_571379, 'mean')
    # Calling mean(args, kwargs) (line 2770)
    mean_call_result_571384 = invoke(stypy.reporting.localization.Localization(__file__, 2770, 8), mean_571380, *[], **kwargs_571383)
    
    # Assigning a type to the variable 'S' (line 2770)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2770, 4), 'S', mean_call_result_571384)
    
    # Assigning a Call to a Name (line 2771):
    
    # Assigning a Call to a Name (line 2771):
    
    # Call to mean(...): (line 2771)
    # Processing the call keyword arguments (line 2771)
    # Getting the type of 'axis' (line 2771)
    axis_571390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 27), 'axis', False)
    keyword_571391 = axis_571390
    kwargs_571392 = {'axis': keyword_571391}
    
    # Call to cos(...): (line 2771)
    # Processing the call arguments (line 2771)
    # Getting the type of 'ang' (line 2771)
    ang_571386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 12), 'ang', False)
    # Processing the call keyword arguments (line 2771)
    kwargs_571387 = {}
    # Getting the type of 'cos' (line 2771)
    cos_571385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 8), 'cos', False)
    # Calling cos(args, kwargs) (line 2771)
    cos_call_result_571388 = invoke(stypy.reporting.localization.Localization(__file__, 2771, 8), cos_571385, *[ang_571386], **kwargs_571387)
    
    # Obtaining the member 'mean' of a type (line 2771)
    mean_571389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2771, 8), cos_call_result_571388, 'mean')
    # Calling mean(args, kwargs) (line 2771)
    mean_call_result_571393 = invoke(stypy.reporting.localization.Localization(__file__, 2771, 8), mean_571389, *[], **kwargs_571392)
    
    # Assigning a type to the variable 'C' (line 2771)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2771, 4), 'C', mean_call_result_571393)
    
    # Assigning a Call to a Name (line 2772):
    
    # Assigning a Call to a Name (line 2772):
    
    # Call to hypot(...): (line 2772)
    # Processing the call arguments (line 2772)
    # Getting the type of 'S' (line 2772)
    S_571395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 14), 'S', False)
    # Getting the type of 'C' (line 2772)
    C_571396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 17), 'C', False)
    # Processing the call keyword arguments (line 2772)
    kwargs_571397 = {}
    # Getting the type of 'hypot' (line 2772)
    hypot_571394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 8), 'hypot', False)
    # Calling hypot(args, kwargs) (line 2772)
    hypot_call_result_571398 = invoke(stypy.reporting.localization.Localization(__file__, 2772, 8), hypot_571394, *[S_571395, C_571396], **kwargs_571397)
    
    # Assigning a type to the variable 'R' (line 2772)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2772, 4), 'R', hypot_call_result_571398)
    # Getting the type of 'high' (line 2773)
    high_571399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 13), 'high')
    # Getting the type of 'low' (line 2773)
    low_571400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 20), 'low')
    # Applying the binary operator '-' (line 2773)
    result_sub_571401 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 13), '-', high_571399, low_571400)
    
    float_571402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 25), 'float')
    # Applying the binary operator 'div' (line 2773)
    result_div_571403 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 12), 'div', result_sub_571401, float_571402)
    
    # Getting the type of 'pi' (line 2773)
    pi_571404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 29), 'pi')
    # Applying the binary operator 'div' (line 2773)
    result_div_571405 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 28), 'div', result_div_571403, pi_571404)
    
    
    # Call to sqrt(...): (line 2773)
    # Processing the call arguments (line 2773)
    int_571407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 40), 'int')
    
    # Call to log(...): (line 2773)
    # Processing the call arguments (line 2773)
    # Getting the type of 'R' (line 2773)
    R_571409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 47), 'R', False)
    # Processing the call keyword arguments (line 2773)
    kwargs_571410 = {}
    # Getting the type of 'log' (line 2773)
    log_571408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 43), 'log', False)
    # Calling log(args, kwargs) (line 2773)
    log_call_result_571411 = invoke(stypy.reporting.localization.Localization(__file__, 2773, 43), log_571408, *[R_571409], **kwargs_571410)
    
    # Applying the binary operator '*' (line 2773)
    result_mul_571412 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 40), '*', int_571407, log_call_result_571411)
    
    # Processing the call keyword arguments (line 2773)
    kwargs_571413 = {}
    # Getting the type of 'sqrt' (line 2773)
    sqrt_571406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 35), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2773)
    sqrt_call_result_571414 = invoke(stypy.reporting.localization.Localization(__file__, 2773, 35), sqrt_571406, *[result_mul_571412], **kwargs_571413)
    
    # Applying the binary operator '*' (line 2773)
    result_mul_571415 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 11), '*', result_div_571405, sqrt_call_result_571414)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2773)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2773, 4), 'stypy_return_type', result_mul_571415)
    
    # ################# End of 'circstd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'circstd' in the type store
    # Getting the type of 'stypy_return_type' (line 2734)
    stypy_return_type_571416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_571416)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'circstd'
    return stypy_return_type_571416

# Assigning a type to the variable 'circstd' (line 2734)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2734, 0), 'circstd', circstd)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
